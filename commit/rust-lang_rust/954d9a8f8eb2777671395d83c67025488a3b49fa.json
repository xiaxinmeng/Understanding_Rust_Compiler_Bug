{"sha": "954d9a8f8eb2777671395d83c67025488a3b49fa", "node_id": "C_kwDOAAsO6NoAKDk1NGQ5YThmOGViMjc3NzY3MTM5NWQ4M2M2NzAyNTQ4OGEzYjQ5ZmE", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-03-27T14:39:32Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-08T09:13:18Z"}, "message": "Remove `remap_env_constness` in queries", "tree": {"sha": "98b443cd2c00cd7fb3649cbda7ed8bab7ef7bdb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98b443cd2c00cd7fb3649cbda7ed8bab7ef7bdb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/954d9a8f8eb2777671395d83c67025488a3b49fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/954d9a8f8eb2777671395d83c67025488a3b49fa", "html_url": "https://github.com/rust-lang/rust/commit/954d9a8f8eb2777671395d83c67025488a3b49fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/954d9a8f8eb2777671395d83c67025488a3b49fa/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131211acd2e5519a0ff3e3e8d5f827cddebb1d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/131211acd2e5519a0ff3e3e8d5f827cddebb1d8a", "html_url": "https://github.com/rust-lang/rust/commit/131211acd2e5519a0ff3e3e8d5f827cddebb1d8a"}], "stats": {"total": 94, "additions": 25, "deletions": 69}, "files": [{"sha": "a8b25ff66d7881c1020449cd94b442366d1339dc", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=954d9a8f8eb2777671395d83c67025488a3b49fa", "patch": "@@ -112,9 +112,6 @@ struct QueryModifiers {\n     /// Use a separate query provider for local and extern crates\n     separate_provide_extern: Option<Ident>,\n \n-    /// Always remap the ParamEnv's constness before hashing.\n-    remap_env_constness: Option<Ident>,\n-\n     /// Generate a `feed` method to set the query's value from another query.\n     feedable: Option<Ident>,\n }\n@@ -130,7 +127,6 @@ fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n     let mut eval_always = None;\n     let mut depth_limit = None;\n     let mut separate_provide_extern = None;\n-    let mut remap_env_constness = None;\n     let mut feedable = None;\n \n     while !input.is_empty() {\n@@ -189,8 +185,6 @@ fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n             try_insert!(depth_limit = modifier);\n         } else if modifier == \"separate_provide_extern\" {\n             try_insert!(separate_provide_extern = modifier);\n-        } else if modifier == \"remap_env_constness\" {\n-            try_insert!(remap_env_constness = modifier);\n         } else if modifier == \"feedable\" {\n             try_insert!(feedable = modifier);\n         } else {\n@@ -211,7 +205,6 @@ fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n         eval_always,\n         depth_limit,\n         separate_provide_extern,\n-        remap_env_constness,\n         feedable,\n     })\n }\n@@ -332,7 +325,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             eval_always,\n             depth_limit,\n             separate_provide_extern,\n-            remap_env_constness,\n         );\n \n         if modifiers.cache.is_some() {"}, {"sha": "1b3b15fe641f5abcb98e5145dafc76c5d66c5333", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=954d9a8f8eb2777671395d83c67025488a3b49fa", "patch": "@@ -336,14 +336,6 @@ impl<'tcx, R> Canonical<'tcx, QueryResponse<'tcx, R>> {\n     }\n }\n \n-impl<'tcx, R> Canonical<'tcx, ty::ParamEnvAnd<'tcx, R>> {\n-    #[inline]\n-    pub fn without_const(mut self) -> Self {\n-        self.value = self.value.without_const();\n-        self\n-    }\n-}\n-\n impl<'tcx, V> Canonical<'tcx, V> {\n     /// Allows you to map the `value` of a canonical while keeping the\n     /// same set of bound variables."}, {"sha": "f411f7a8f417e2cef8053e8d845a272e64fe2a82", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=954d9a8f8eb2777671395d83c67025488a3b49fa", "patch": "@@ -1088,7 +1088,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n     ) -> Option<mir::DestructuredConstant<'tcx>> {\n         desc { \"destructuring MIR constant\"}\n-        remap_env_constness\n     }\n \n     /// Dereference a constant reference or raw pointer and turn the result into a constant\n@@ -1097,7 +1096,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n     ) -> mir::ConstantKind<'tcx> {\n         desc { \"dereferencing MIR constant\" }\n-        remap_env_constness\n     }\n \n     query const_caller_location(key: (rustc_span::Symbol, u32, u32)) -> ConstValue<'tcx> {\n@@ -1340,32 +1338,26 @@ rustc_queries! {\n     /// `ty.is_copy()`, etc, since that will prune the environment where possible.\n     query is_copy_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Copy`\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::is_sized`.\n     query is_sized_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Sized`\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::is_freeze`.\n     query is_freeze_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is freeze\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::is_unpin`.\n     query is_unpin_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Unpin`\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::needs_drop`.\n     query needs_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` needs drop\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::has_significant_drop_raw`.\n     query has_significant_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` has a significant drop\", env.value }\n-        remap_env_constness\n     }\n \n     /// Query backing `Ty::is_structural_eq_shallow`.\n@@ -1405,7 +1397,6 @@ rustc_queries! {\n     ) -> Result<ty::layout::TyAndLayout<'tcx>, ty::layout::LayoutError<'tcx>> {\n         depth_limit\n         desc { \"computing layout of `{}`\", key.value }\n-        remap_env_constness\n     }\n \n     /// Compute a `FnAbi` suitable for indirect calls, i.e. to `fn` pointers.\n@@ -1416,7 +1407,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n     ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n         desc { \"computing call ABI of `{}` function pointers\", key.value.0 }\n-        remap_env_constness\n     }\n \n     /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n@@ -1428,7 +1418,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n     ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n         desc { \"computing call ABI of `{}`\", key.value.0 }\n-        remap_env_constness\n     }\n \n     query dylib_dependency_formats(_: CrateNum)\n@@ -1935,15 +1924,13 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n     query try_normalize_generic_arg_after_erasing_regions(\n         goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n     ) -> Result<GenericArg<'tcx>, NoSolution> {\n         desc { \"normalizing `{}`\", goal.value }\n-        remap_env_constness\n     }\n \n     query implied_outlives_bounds(\n@@ -1953,7 +1940,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"computing implied outlives bounds for `{}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly:\n@@ -1965,7 +1951,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"computing dropck types for `{}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `infcx.predicate_may_hold()` or\n@@ -1993,7 +1978,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_ascribe_user_type` `{:?}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Eq` type-op\n@@ -2004,7 +1988,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_eq` `{:?}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Subtype` type-op\n@@ -2015,7 +1998,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_subtype` `{:?}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `ProvePredicate` type-op\n@@ -2036,7 +2018,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{}`\", goal.value.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -2047,7 +2028,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal.value.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -2058,7 +2038,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal.value.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -2069,7 +2048,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal.value.value.value }\n-        remap_env_constness\n     }\n \n     query subst_and_check_impossible_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n@@ -2091,7 +2069,6 @@ rustc_queries! {\n         goal: CanonicalTyGoal<'tcx>\n     ) -> MethodAutoderefStepsResult<'tcx> {\n         desc { \"computing autoderef types for `{}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     query supported_target_features(_: CrateNum) -> &'tcx FxHashMap<String, Option<Symbol>> {\n@@ -2136,7 +2113,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>\n     ) -> Result<Option<ty::Instance<'tcx>>, ErrorGuaranteed> {\n         desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n-        remap_env_constness\n     }\n \n     query resolve_instance_of_const_arg(\n@@ -2146,7 +2122,6 @@ rustc_queries! {\n             \"resolving instance of the const argument `{}`\",\n             ty::Instance::new(key.value.0.to_def_id(), key.value.2),\n         }\n-        remap_env_constness\n     }\n \n     query reveal_opaque_types_in_bounds(key: &'tcx ty::List<ty::Predicate<'tcx>>) -> &'tcx ty::List<ty::Predicate<'tcx>> {"}, {"sha": "5d07153fa8c7c5dbbb384c5fc1add48d797efaa9", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=954d9a8f8eb2777671395d83c67025488a3b49fa", "patch": "@@ -1849,12 +1849,6 @@ impl<'tcx, T> ParamEnvAnd<'tcx, T> {\n     pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {\n         (self.param_env, self.value)\n     }\n-\n-    #[inline]\n-    pub fn without_const(mut self) -> Self {\n-        self.param_env = self.param_env.without_const();\n-        self\n-    }\n }\n \n #[derive(Copy, Clone, Debug, HashStable, Encodable, Decodable)]"}, {"sha": "97592cbc567d7825f319bbe6066f16a257bd55c1", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=954d9a8f8eb2777671395d83c67025488a3b49fa", "patch": "@@ -202,16 +202,6 @@ macro_rules! separate_provide_extern_default {\n     };\n }\n \n-macro_rules! opt_remap_env_constness {\n-    ([][$name:ident]) => {};\n-    ([(remap_env_constness) $($rest:tt)*][$name:ident]) => {\n-        let $name = $name.without_const();\n-    };\n-    ([$other:tt $($modifiers:tt)*][$name:ident]) => {\n-        opt_remap_env_constness!([$($modifiers)*][$name])\n-    };\n-}\n-\n macro_rules! define_callbacks {\n     (\n      $($(#[$attr:meta])*\n@@ -353,7 +343,6 @@ macro_rules! define_callbacks {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n                 let key = key.into_query_param();\n-                opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n                     Some(_) => return,\n@@ -372,7 +361,6 @@ macro_rules! define_callbacks {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n                 let key = key.into_query_param();\n-                opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n                     Some(_) => return,\n@@ -402,7 +390,6 @@ macro_rules! define_callbacks {\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V\n             {\n                 let key = key.into_query_param();\n-                opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 restore::<$V>(match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n                     Some(value) => value,\n@@ -492,7 +479,6 @@ macro_rules! define_feedable {\n             #[inline(always)]\n             pub fn $name(self, value: query_provided::$name<'tcx>) -> $V {\n                 let key = self.key().into_query_param();\n-                opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 let tcx = self.tcx;\n                 let erased = query_provided_to_value::$name(tcx, value);"}, {"sha": "baa2fbb6751c3c3419b5440663237f7193af67d2", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954d9a8f8eb2777671395d83c67025488a3b49fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=954d9a8f8eb2777671395d83c67025488a3b49fa", "patch": "@@ -32,14 +32,8 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        mut canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n-        match canonicalized.value.value.predicate.kind().skip_binder() {\n-            ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => {\n-                canonicalized.value.param_env.remap_constness_with(pred.constness);\n-            }\n-            _ => canonicalized.value.param_env = canonicalized.value.param_env.without_const(),\n-        }\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n }"}, {"sha": "ddc6599a53eeb977e54add99a2b02186d2e791ef", "filename": "tests/ui/const-generics/issues/issue-88119.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/954d9a8f8eb2777671395d83c67025488a3b49fa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954d9a8f8eb2777671395d83c67025488a3b49fa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs?ref=954d9a8f8eb2777671395d83c67025488a3b49fa", "patch": "@@ -1,4 +1,10 @@\n-// check-pass\n+// known-bug: #88119\n+// failure-status: 101\n+// normalize-stderr-test \"note: .*\\n\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\s\\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \"\\s at .*\\n\" -> \"\"\n+// rustc-env:RUST_BACKTRACE=0\n \n #![allow(incomplete_features)]\n #![feature(const_trait_impl, generic_const_exprs)]"}, {"sha": "b4e18c86b1fd642de951649128af60c3a405b21a", "filename": "tests/ui/const-generics/issues/issue-88119.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/954d9a8f8eb2777671395d83c67025488a3b49fa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/954d9a8f8eb2777671395d83c67025488a3b49fa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.stderr?ref=954d9a8f8eb2777671395d83c67025488a3b49fa", "patch": "@@ -0,0 +1,17 @@\n+error: internal compiler error: no errors encountered even though `delay_span_bug` issued\n+\n+error: internal compiler error: broken MIR in DefId(0:7 ~ issue_88119[4c3c]::name_len) ($DIR/issue-88119.rs:22:5: 22:18 (#0)): ascribe_user_type `&[u8]==TypeOf(DefId(0:4 ~ issue_88119[4c3c]::ConstName::NAME_BYTES), UserSubsts { substs: [T], user_self_ty: None })` failed with `NoSolution`\n+   |\n+   =                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n+\n+error: internal compiler error: broken MIR in DefId(0:7 ~ issue_88119[4c3c]::name_len) ($DIR/issue-88119.rs:22:5: 22:18 (#0)): ascribe_user_type `&[u8]==TypeOf(DefId(0:4 ~ issue_88119[4c3c]::ConstName::NAME_BYTES), UserSubsts { substs: [T], user_self_ty: None })` failed with `NoSolution`\n+   |\nn+\n+\n+\n+\n+query stack during panic:\n+end of query stack\n+error: aborting due to 3 previous errors\n+"}]}