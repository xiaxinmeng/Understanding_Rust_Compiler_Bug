{"sha": "c7bfd007194a0f4062a8809996b60f2700dd4652", "node_id": "C_kwDOAAsO6NoAKGM3YmZkMDA3MTk0YTBmNDA2MmE4ODA5OTk2YjYwZjI3MDBkZDQ2NTI", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-26T13:38:21Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:24Z"}, "message": "Migrate \"non-exhaustive patterns: type is non-empty\" diagnostic", "tree": {"sha": "213451b2fa2b392ddd0621fbc4a9baa24ff71e6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213451b2fa2b392ddd0621fbc4a9baa24ff71e6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7bfd007194a0f4062a8809996b60f2700dd4652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bfd007194a0f4062a8809996b60f2700dd4652", "html_url": "https://github.com/rust-lang/rust/commit/c7bfd007194a0f4062a8809996b60f2700dd4652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7bfd007194a0f4062a8809996b60f2700dd4652/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "html_url": "https://github.com/rust-lang/rust/commit/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89"}], "stats": {"total": 120, "additions": 113, "deletions": 7}, "files": [{"sha": "5fb89dcccaeeb1cbb6cc2980386cfbf40e58f61f", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7bfd007194a0f4062a8809996b60f2700dd4652/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c7bfd007194a0f4062a8809996b60f2700dd4652/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=c7bfd007194a0f4062a8809996b60f2700dd4652", "patch": "@@ -175,3 +175,11 @@ mir_build_unused_unsafe = unnecessary `unsafe` block\n \n mir_build_unused_unsafe_enclosing_block_label = because it's nested under this `unsafe` block\n mir_build_unused_unsafe_enclosing_fn_label = because it's nested under this `unsafe` fn\n+\n+mir_build_non_exhaustive_patterns_type_not_empty = non-exhaustive patterns: type `{$ty}` is non-empty\n+    .def_note = `{$peeled_ty}` defined here\n+    .type_note = the matched value is of type `{$ty}`\n+    .non_exhaustive_type_note = the matched value is of type `{$ty}`, which is marked as non-exhaustive\n+    .reference_note = references are always considered inhabited\n+    .suggestion = ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n+    .help = ensure that all possible cases are being handled by adding a match arm with a wildcard pattern"}, {"sha": "9e63141d7160c9a49bdfabea6189828c2d1866d2", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c7bfd007194a0f4062a8809996b60f2700dd4652/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bfd007194a0f4062a8809996b60f2700dd4652/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=c7bfd007194a0f4062a8809996b60f2700dd4652", "patch": "@@ -1,4 +1,8 @@\n+use crate::thir::pattern::MatchCheckCtxt;\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_middle::ty::{self, Ty};\n+use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::Span;\n \n #[derive(LintDiagnostic)]\n@@ -336,3 +340,92 @@ pub enum UnusedUnsafeEnclosing {\n         span: Span,\n     },\n }\n+\n+pub(crate) struct NonExhaustivePatternsTypeNotEmpty<'p, 'tcx, 'm> {\n+    pub cx: &'m MatchCheckCtxt<'p, 'tcx>,\n+    pub expr_span: Span,\n+    pub span: Span,\n+    pub ty: Ty<'tcx>,\n+}\n+\n+impl<'a> SessionDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.span_diagnostic.struct_span_err_with_code(\n+            self.span,\n+            rustc_errors::fluent::mir_build::non_exhaustive_patterns_type_not_empty,\n+            error_code!(E0004),\n+        );\n+\n+        let peeled_ty = self.ty.peel_refs();\n+        diag.set_arg(\"ty\", self.ty);\n+        diag.set_arg(\"peeled_ty\", peeled_ty);\n+\n+        if let ty::Adt(def, _) = peeled_ty.kind() {\n+            let def_span = self\n+                .cx\n+                .tcx\n+                .hir()\n+                .get_if_local(def.did())\n+                .and_then(|node| node.ident())\n+                .map(|ident| ident.span)\n+                .unwrap_or_else(|| self.cx.tcx.def_span(def.did()));\n+\n+            // workaround to make test pass\n+            let mut span: MultiSpan = def_span.into();\n+            span.push_span_label(def_span, \"\");\n+\n+            diag.span_note(span, rustc_errors::fluent::mir_build::def_note);\n+        }\n+\n+        let is_variant_list_non_exhaustive = match self.ty.kind() {\n+            ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local() => {\n+                true\n+            }\n+            _ => false,\n+        };\n+\n+        if is_variant_list_non_exhaustive {\n+            diag.note(rustc_errors::fluent::mir_build::non_exhaustive_type_note);\n+        } else {\n+            diag.note(rustc_errors::fluent::mir_build::type_note);\n+        }\n+\n+        if let ty::Ref(_, sub_ty, _) = self.ty.kind() {\n+            if self.cx.tcx.is_ty_uninhabited_from(self.cx.module, *sub_ty, self.cx.param_env) {\n+                diag.note(rustc_errors::fluent::mir_build::reference_note);\n+            }\n+        }\n+\n+        let mut suggestion = None;\n+        let sm = self.cx.tcx.sess.source_map();\n+        if self.span.eq_ctxt(self.expr_span) {\n+            // Get the span for the empty match body `{}`.\n+            let (indentation, more) = if let Some(snippet) = sm.indentation_before(self.span) {\n+                (format!(\"\\n{}\", snippet), \"    \")\n+            } else {\n+                (\" \".to_string(), \"\")\n+            };\n+            suggestion = Some((\n+                self.span.shrink_to_hi().with_hi(self.expr_span.hi()),\n+                format!(\n+                    \" {{{indentation}{more}_ => todo!(),{indentation}}}\",\n+                    indentation = indentation,\n+                    more = more,\n+                ),\n+            ));\n+        }\n+\n+        if let Some((span, sugg)) = suggestion {\n+            diag.span_suggestion_verbose(\n+                span,\n+                rustc_errors::fluent::mir_build::suggestion,\n+                sugg,\n+                Applicability::HasPlaceholders,\n+            );\n+        } else {\n+            diag.help(rustc_errors::fluent::mir_build::help);\n+        }\n+\n+        diag\n+    }\n+}"}, {"sha": "c818a2a3a898cfd915ef37ee2996ededb99ae48f", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7bfd007194a0f4062a8809996b60f2700dd4652/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bfd007194a0f4062a8809996b60f2700dd4652/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=c7bfd007194a0f4062a8809996b60f2700dd4652", "patch": "@@ -4,6 +4,8 @@ use super::usefulness::{\n };\n use super::{PatCtxt, PatternError};\n \n+use crate::errors::NonExhaustivePatternsTypeNotEmpty;\n+\n use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n use rustc_errors::{\n@@ -760,15 +762,17 @@ fn non_exhaustive_match<'p, 'tcx>(\n     // informative.\n     let mut err;\n     let pattern;\n-    let mut patterns_len = 0;\n+    let patterns_len;\n     if is_empty_match && !non_empty_enum {\n-        err = create_e0004(\n-            cx.tcx.sess,\n-            sp,\n-            format!(\"non-exhaustive patterns: type `{}` is non-empty\", scrut_ty),\n-        );\n-        pattern = \"_\".to_string();\n+        cx.tcx.sess.emit_err(NonExhaustivePatternsTypeNotEmpty {\n+            cx,\n+            expr_span,\n+            span: sp,\n+            ty: scrut_ty,\n+        });\n+        return;\n     } else {\n+        // FIXME: migration of this diagnostic will require list support\n         let joined_patterns = joined_uncovered_patterns(cx, &witnesses);\n         err = create_e0004(\n             cx.tcx.sess,"}, {"sha": "5aaf6c907e3920c1a386c745e3efacb84870cab0", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7bfd007194a0f4062a8809996b60f2700dd4652/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bfd007194a0f4062a8809996b60f2700dd4652/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=c7bfd007194a0f4062a8809996b60f2700dd4652", "patch": "@@ -6,6 +6,7 @@ mod deconstruct_pat;\n mod usefulness;\n \n pub(crate) use self::check_match::check_match;\n+pub(crate) use self::usefulness::MatchCheckCtxt;\n \n use crate::thir::util::UserAnnotatedTyHelpers;\n "}]}