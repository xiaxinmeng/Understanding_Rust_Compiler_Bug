{"sha": "4558a125b6108f3c080e88d7746e1d422b969bef", "node_id": "C_kwDOAAsO6NoAKDQ1NThhMTI1YjYxMDhmM2MwODBlODhkNzc0NmUxZDQyMmI5NjliZWY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-11T11:20:27Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-30T09:23:58Z"}, "message": "remove `NoMatchData::new`", "tree": {"sha": "dce35161dab04e9d663f6f4638ede15feb921d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dce35161dab04e9d663f6f4638ede15feb921d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4558a125b6108f3c080e88d7746e1d422b969bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4558a125b6108f3c080e88d7746e1d422b969bef", "html_url": "https://github.com/rust-lang/rust/commit/4558a125b6108f3c080e88d7746e1d422b969bef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4558a125b6108f3c080e88d7746e1d422b969bef/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975162d1bef80bfb642ef4069c72a30b1e9d2923", "url": "https://api.github.com/repos/rust-lang/rust/commits/975162d1bef80bfb642ef4069c72a30b1e9d2923", "html_url": "https://github.com/rust-lang/rust/commit/975162d1bef80bfb642ef4069c72a30b1e9d2923"}], "stats": {"total": 40, "additions": 9, "deletions": 31}, "files": [{"sha": "adc284785c294f0f21a4446b4c77760c2a90e36f", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4558a125b6108f3c080e88d7746e1d422b969bef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4558a125b6108f3c080e88d7746e1d422b969bef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=4558a125b6108f3c080e88d7746e1d422b969bef", "patch": "@@ -78,28 +78,6 @@ pub struct NoMatchData<'tcx> {\n     pub mode: probe::Mode,\n }\n \n-impl<'tcx> NoMatchData<'tcx> {\n-    pub fn new(\n-        static_candidates: Vec<CandidateSource>,\n-        unsatisfied_predicates: Vec<(\n-            ty::Predicate<'tcx>,\n-            Option<ty::Predicate<'tcx>>,\n-            Option<ObligationCause<'tcx>>,\n-        )>,\n-        out_of_scope_traits: Vec<DefId>,\n-        lev_candidate: Option<ty::AssocItem>,\n-        mode: probe::Mode,\n-    ) -> Self {\n-        NoMatchData {\n-            static_candidates,\n-            unsatisfied_predicates,\n-            out_of_scope_traits,\n-            lev_candidate,\n-            mode,\n-        }\n-    }\n-}\n-\n // A pared down enum describing just the places from which a method\n // candidate can arise. Used for error reporting only.\n #[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]"}, {"sha": "ed20e5a48690515875842278d8f8fba75463720c", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4558a125b6108f3c080e88d7746e1d422b969bef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4558a125b6108f3c080e88d7746e1d422b969bef/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=4558a125b6108f3c080e88d7746e1d422b969bef", "patch": "@@ -427,13 +427,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .unwrap_or_else(|_| span_bug!(span, \"instantiating {:?} failed?\", ty));\n                 let ty = self.structurally_resolved_type(span, ty.value);\n                 assert!(matches!(ty.kind(), ty::Error(_)));\n-                return Err(MethodError::NoMatch(NoMatchData::new(\n-                    Vec::new(),\n-                    Vec::new(),\n-                    Vec::new(),\n-                    None,\n+                return Err(MethodError::NoMatch(NoMatchData {\n+                    static_candidates: Vec::new(),\n+                    unsatisfied_predicates: Vec::new(),\n+                    out_of_scope_traits: Vec::new(),\n+                    lev_candidate: None,\n                     mode,\n-                )));\n+                }));\n             }\n         }\n \n@@ -1093,13 +1093,13 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         }\n         let lev_candidate = self.probe_for_lev_candidate()?;\n \n-        Err(MethodError::NoMatch(NoMatchData::new(\n+        Err(MethodError::NoMatch(NoMatchData {\n             static_candidates,\n             unsatisfied_predicates,\n             out_of_scope_traits,\n             lev_candidate,\n-            self.mode,\n-        )))\n+            mode: self.mode,\n+        }))\n     }\n \n     fn pick_core(&mut self) -> Option<PickResult<'tcx>> {"}]}