{"sha": "7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTI5NTJhZjYzZWExZWIwYmI4MDk2ZjdlNTFjMzM5YWIzYWI2NmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-23T09:51:01Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-23T09:51:01Z"}, "message": "Rename ExprAgain to ExprContinue", "tree": {"sha": "b2fe297b22381cf5755a02ba826f9f71891bd70a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2fe297b22381cf5755a02ba826f9f71891bd70a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "html_url": "https://github.com/rust-lang/rust/commit/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc4c8380fb92a719ae9be40f9da44ca7e3e2f3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc4c8380fb92a719ae9be40f9da44ca7e3e2f3f", "html_url": "https://github.com/rust-lang/rust/commit/cbc4c8380fb92a719ae9be40f9da44ca7e3e2f3f"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "f52d201abecb90a6bee88466146fefe33650519e", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_unreachable_node()\n             }\n \n-            hir::ExprAgain(destination) => {\n+            hir::ExprContinue(destination) => {\n                 let (target_scope, cont_dest) =\n                     self.find_scope_edge(expr, destination, ScopeCfKind::Continue);\n                 let a = self.add_ast_node(expr.hir_id.local_id, &[pred]);"}, {"sha": "5041bb9b9359456491a7086203f13bf5e332f96d", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -1071,7 +1071,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             }\n             walk_list!(visitor, visit_expr, opt_expr);\n         }\n-        ExprAgain(ref destination) => {\n+        ExprContinue(ref destination) => {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n                 match destination.target_id {"}, {"sha": "b2ab7f102af1193deb25e1c6217009ea62636347", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -3351,7 +3351,7 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ExprKind::Continue(opt_label) => {\n-                hir::ExprAgain(if self.is_in_loop_condition && opt_label.is_none() {\n+                hir::ExprContinue(if self.is_in_loop_condition && opt_label.is_none() {\n                     hir::Destination {\n                         label: None,\n                         target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),"}, {"sha": "a263925b37bbf78bd592c77e8833d3eb4740d753", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -1279,7 +1279,7 @@ impl Expr {\n             ExprPath(..) => ExprPrecedence::Path,\n             ExprAddrOf(..) => ExprPrecedence::AddrOf,\n             ExprBreak(..) => ExprPrecedence::Break,\n-            ExprAgain(..) => ExprPrecedence::Continue,\n+            ExprContinue(..) => ExprPrecedence::Continue,\n             ExprRet(..) => ExprPrecedence::Ret,\n             ExprInlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprStruct(..) => ExprPrecedence::Struct,\n@@ -1374,7 +1374,7 @@ pub enum Expr_ {\n     /// A `break`, with an optional label to break\n     ExprBreak(Destination, Option<P<Expr>>),\n     /// A `continue`, with an optional label\n-    ExprAgain(Destination),\n+    ExprContinue(Destination),\n     /// A `return`, with an optional value to be returned\n     ExprRet(Option<P<Expr>>),\n "}, {"sha": "75773c027d8b915f2ddd3972962b3642445d497e", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -1476,7 +1476,7 @@ impl<'a> State<'a> {\n                     self.s.space()?;\n                 }\n             }\n-            hir::ExprAgain(destination) => {\n+            hir::ExprContinue(destination) => {\n                 self.s.word(\"continue\")?;\n                 self.s.space()?;\n                 if let Some(label) = destination.label {"}, {"sha": "5c7b235f3853e72c789afb4143ceba2ddb631145", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -616,7 +616,7 @@ impl_stable_hash_for!(enum hir::Expr_ {\n     ExprPath(path),\n     ExprAddrOf(mutability, sub),\n     ExprBreak(destination, sub),\n-    ExprAgain(destination),\n+    ExprContinue(destination),\n     ExprRet(val),\n     ExprInlineAsm(asm, inputs, outputs),\n     ExprStruct(path, fields, base),"}, {"sha": "718445bd3563e2908dc97ad53042a7122f7e56c1", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -479,7 +479,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_exprs(inputs);\n             }\n \n-            hir::ExprAgain(..) |\n+            hir::ExprContinue(..) |\n             hir::ExprLit(..) => {}\n \n             hir::ExprLoop(ref blk, _, _) => {"}, {"sha": "b98a4416d213f32ce2c7a65c90154eab153ac7d4", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -502,7 +502,7 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprArray(..) | hir::ExprCall(..) | hir::ExprMethodCall(..) |\n       hir::ExprTup(..) | hir::ExprBinary(..) | hir::ExprAddrOf(..) |\n       hir::ExprCast(..) | hir::ExprUnary(..) | hir::ExprBreak(..) |\n-      hir::ExprAgain(_) | hir::ExprLit(_) | hir::ExprRet(..) |\n+      hir::ExprContinue(_) | hir::ExprLit(_) | hir::ExprRet(..) |\n       hir::ExprBlock(..) | hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprInlineAsm(..) | hir::ExprBox(..) | hir::ExprYield(..) |\n@@ -1047,7 +1047,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n               }\n           }\n \n-          hir::ExprAgain(label) => {\n+          hir::ExprContinue(label) => {\n               // Find which label this expr continues to\n               let sc = match label.target_id {\n                     Ok(node_id) => node_id,\n@@ -1431,7 +1431,7 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprIndex(..) | hir::ExprField(..) |\n       hir::ExprArray(..) | hir::ExprTup(..) | hir::ExprBinary(..) |\n       hir::ExprCast(..) | hir::ExprUnary(..) | hir::ExprRet(..) |\n-      hir::ExprBreak(..) | hir::ExprAgain(..) | hir::ExprLit(_) |\n+      hir::ExprBreak(..) | hir::ExprContinue(..) | hir::ExprLit(_) |\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprClosure(..) | hir::ExprPath(_) | hir::ExprYield(..) |"}, {"sha": "e3b59d25ab91f04c324bdfec65e91e93355cc03c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -686,7 +686,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           hir::ExprBinary(..) | hir::ExprWhile(..) |\n           hir::ExprBlock(..) | hir::ExprLoop(..) | hir::ExprMatch(..) |\n           hir::ExprLit(..) | hir::ExprBreak(..) |\n-          hir::ExprAgain(..) | hir::ExprStruct(..) | hir::ExprRepeat(..) |\n+          hir::ExprContinue(..) | hir::ExprStruct(..) | hir::ExprRepeat(..) |\n           hir::ExprInlineAsm(..) | hir::ExprBox(..) => {\n             Ok(self.cat_rvalue_node(expr.id(), expr.span(), expr_ty))\n           }"}, {"sha": "9c6c35a340e2fd7d1f1dc8591385baad7dd20fbb", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -543,7 +543,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 Err(err) => bug!(\"invalid loop id for break: {}\", err)\n             }\n         }\n-        hir::ExprAgain(dest) => {\n+        hir::ExprContinue(dest) => {\n             match dest.target_id {\n                 Ok(loop_id) => ExprKind::Continue {\n                     label: region::Scope::Node(cx.tcx.hir.node_to_hir_id(loop_id).local_id),"}, {"sha": "c99f1e9da439f04ce9b3133814123ed977511745", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -148,7 +148,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n \n                 self.require_break_cx(\"break\", e.span);\n             }\n-            hir::ExprAgain(label) => {\n+            hir::ExprContinue(label) => {\n                 self.require_label_in_labeled_block(e.span, &label, \"continue\");\n \n                 match label.target_id {"}, {"sha": "e9d03daa7ea06b82dd3d5e5794f4f9883204edfc", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -469,7 +469,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n \n         // More control flow (also not very meaningful).\n         hir::ExprBreak(..) |\n-        hir::ExprAgain(_) |\n+        hir::ExprContinue(_) |\n         hir::ExprRet(_) |\n \n         // Generator expressions"}, {"sha": "0031d68783359ab4d2c5ae6b76eab93faae4fc07", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7ba2952af63ea1eb0bb8096f7e51c339ab3ab66f", "patch": "@@ -2331,7 +2331,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             hir::ExprRepeat(..) |\n             hir::ExprArray(..) |\n             hir::ExprBreak(..) |\n-            hir::ExprAgain(..) |\n+            hir::ExprContinue(..) |\n             hir::ExprRet(..) |\n             hir::ExprWhile(..) |\n             hir::ExprLoop(..) |\n@@ -3847,7 +3847,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               }\n \n           }\n-          hir::ExprAgain(_) => { tcx.types.never }\n+          hir::ExprContinue(_) => { tcx.types.never }\n           hir::ExprRet(ref expr_opt) => {\n             if self.ret_coercion.is_none() {\n                 struct_span_err!(self.tcx.sess, expr.span, E0572,"}]}