{"sha": "766e138aa297173936393caad86e2d8f40402809", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NmUxMzhhYTI5NzE3MzkzNjM5M2NhYWQ4NmUyZDhmNDA0MDI4MDk=", "commit": {"author": {"name": "kud1ing", "email": "github@kudling.de", "date": "2014-02-21T07:26:20Z"}, "committer": {"name": "kud1ing", "email": "github@kudling.de", "date": "2014-02-21T07:26:20Z"}, "message": "backticks", "tree": {"sha": "7d25d846e8f7f37cc4e981628170735feffb0129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d25d846e8f7f37cc4e981628170735feffb0129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/766e138aa297173936393caad86e2d8f40402809", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/766e138aa297173936393caad86e2d8f40402809", "html_url": "https://github.com/rust-lang/rust/commit/766e138aa297173936393caad86e2d8f40402809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/766e138aa297173936393caad86e2d8f40402809/comments", "author": null, "committer": null, "parents": [{"sha": "1366e04cf48a3274571a4ae88f9700834ffd58c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1366e04cf48a3274571a4ae88f9700834ffd58c5", "html_url": "https://github.com/rust-lang/rust/commit/1366e04cf48a3274571a4ae88f9700834ffd58c5"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "dca3d3d2cca95bfac84792ed84494a4ae8ae0295", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/766e138aa297173936393caad86e2d8f40402809/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766e138aa297173936393caad86e2d8f40402809/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=766e138aa297173936393caad86e2d8f40402809", "patch": "@@ -3689,15 +3689,15 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n             }\n         }\n         terr_integer_as_char => {\n-            format!(\"expected an integral type but found char\")\n+            format!(\"expected an integral type but found `char`\")\n         }\n         terr_int_mismatch(ref values) => {\n-            format!(\"expected {} but found {}\",\n+            format!(\"expected `{}` but found `{}`\",\n                  values.expected.to_str(),\n                  values.found.to_str())\n         }\n         terr_float_mismatch(ref values) => {\n-            format!(\"expected {} but found {}\",\n+            format!(\"expected `{}` but found `{}`\",\n                  values.expected.to_str(),\n                  values.found.to_str())\n         }\n@@ -3765,13 +3765,13 @@ pub fn provided_trait_methods(cx: ctxt, id: ast::DefId) -> ~[@Method] {\n                         }\n                         _ => {\n                             cx.sess.bug(format!(\"provided_trait_methods: \\\n-                                                 {:?} is not a trait\",\n+                                                 `{:?}` is not a trait\",\n                                                 id))\n                         }\n                     }\n                 }\n                 _ => {\n-                    cx.sess.bug(format!(\"provided_trait_methods: {:?} is not \\\n+                    cx.sess.bug(format!(\"provided_trait_methods: `{:?}` is not \\\n                                          a trait\",\n                                         id))\n                 }"}, {"sha": "f048637d68fb08282c0a92399d5eff29aef2b3d9", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766e138aa297173936393caad86e2d8f40402809/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766e138aa297173936393caad86e2d8f40402809/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=766e138aa297173936393caad86e2d8f40402809", "patch": "@@ -768,7 +768,7 @@ pub fn instantiate_trait_ref(ccx: &CrateCtxt,\n         _ => {\n             ccx.tcx.sess.span_fatal(\n                 ast_trait_ref.path.span,\n-                format!(\"{} is not a trait\",\n+                format!(\"`{}` is not a trait\",\n                     path_to_str(&ast_trait_ref.path)));\n         }\n     }"}, {"sha": "e46dbaf0ae0e638cc41bbcb82594355a241e5a0c", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766e138aa297173936393caad86e2d8f40402809/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766e138aa297173936393caad86e2d8f40402809/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=766e138aa297173936393caad86e2d8f40402809", "patch": "@@ -15,7 +15,7 @@ trait channel<T> {\n }\n \n // `chan` is not a trait, it's an enum\n-impl chan for int { //~ ERROR chan is not a trait\n+impl chan for int { //~ ERROR `chan` is not a trait\n     fn send(&self, v: int) { fail!() }\n }\n "}, {"sha": "767e674fcda171e890f8f00152c0bb3b244fe86b", "filename": "src/test/compile-fail/issue-3907.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766e138aa297173936393caad86e2d8f40402809/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766e138aa297173936393caad86e2d8f40402809/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs?ref=766e138aa297173936393caad86e2d8f40402809", "patch": "@@ -17,7 +17,7 @@ struct S {\n     name: int\n }\n \n-impl Foo for S { //~ ERROR: Foo is not a trait\n+impl Foo for S { //~ ERROR: `Foo` is not a trait\n     fn bar() { }\n }\n "}]}