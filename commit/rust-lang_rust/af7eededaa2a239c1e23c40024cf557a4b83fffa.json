{"sha": "af7eededaa2a239c1e23c40024cf557a4b83fffa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmN2VlZGVkYWEyYTIzOWMxZTIzYzQwMDI0Y2Y1NTdhNGI4M2ZmZmE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-16T12:41:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-16T12:41:09Z"}, "message": "Remove an allocation from rt::init\n\nPreviously the thread name would first be heap allocated and then\nre-allocated to add a nul terminator. Now it will be heap allocated only\nonce with nul terminator added form the start.", "tree": {"sha": "ed49e515f70c15c1b8b0591a798f5df9c61778ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed49e515f70c15c1b8b0591a798f5df9c61778ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af7eededaa2a239c1e23c40024cf557a4b83fffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af7eededaa2a239c1e23c40024cf557a4b83fffa", "html_url": "https://github.com/rust-lang/rust/commit/af7eededaa2a239c1e23c40024cf557a4b83fffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af7eededaa2a239c1e23c40024cf557a4b83fffa/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6bb16718ffd4b143762be576b237efbedd38b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6bb16718ffd4b143762be576b237efbedd38b4", "html_url": "https://github.com/rust-lang/rust/commit/6f6bb16718ffd4b143762be576b237efbedd38b4"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8465dfc0ab2fb1bc74931f2a06e2dc571704b124", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af7eededaa2a239c1e23c40024cf557a4b83fffa/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7eededaa2a239c1e23c40024cf557a4b83fffa/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=af7eededaa2a239c1e23c40024cf557a4b83fffa", "patch": "@@ -16,6 +16,8 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n #![allow(unused_macros)]\n \n+use crate::ffi::CString;\n+\n // Re-export some of our utilities which are expected by other crates.\n pub use crate::panicking::{begin_panic, begin_panic_fmt, panic_count};\n \n@@ -38,7 +40,7 @@ unsafe fn init(argc: isize, argv: *const *const u8) {\n         // created. Note that this isn't necessary in general for new threads,\n         // but we just do this to name the main thread and to give it correct\n         // info about the stack bounds.\n-        let thread = Thread::new(Some(\"main\".to_owned()));\n+        let thread = Thread::new(Some(CString::new(\"main\").unwrap()));\n         thread_info::set(main_guard, thread);\n     }\n }"}, {"sha": "9d659102b032086aa9255e95a9980b8f3c8397d8", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af7eededaa2a239c1e23c40024cf557a4b83fffa/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7eededaa2a239c1e23c40024cf557a4b83fffa/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=af7eededaa2a239c1e23c40024cf557a4b83fffa", "patch": "@@ -457,7 +457,9 @@ impl Builder {\n \n         let stack_size = stack_size.unwrap_or_else(thread::min_stack);\n \n-        let my_thread = Thread::new(name);\n+        let my_thread = Thread::new(name.map(|name| {\n+            CString::new(name).expect(\"thread name may not contain interior null bytes\")\n+        }));\n         let their_thread = my_thread.clone();\n \n         let my_packet: Arc<UnsafeCell<Option<Result<T>>>> = Arc::new(UnsafeCell::new(None));\n@@ -1073,12 +1075,8 @@ pub struct Thread {\n impl Thread {\n     // Used only internally to construct a thread object without spawning\n     // Panics if the name contains nuls.\n-    pub(crate) fn new(name: Option<String>) -> Thread {\n-        let cname =\n-            name.map(|n| CString::new(n).expect(\"thread name may not contain interior null bytes\"));\n-        Thread {\n-            inner: Arc::new(Inner { name: cname, id: ThreadId::new(), parker: Parker::new() }),\n-        }\n+    pub(crate) fn new(name: Option<CString>) -> Thread {\n+        Thread { inner: Arc::new(Inner { name, id: ThreadId::new(), parker: Parker::new() }) }\n     }\n \n     /// Atomically makes the handle's token available if it is not already."}]}