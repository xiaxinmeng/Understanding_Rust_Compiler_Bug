{"sha": "edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZWY2YzUzYzAyZGJlOGU2NWZkODUxZjQ3NDZkY2RhNmI4NGQ1YTI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2017-06-03T16:41:46Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2017-06-04T18:42:13Z"}, "message": "Continue work on rustup", "tree": {"sha": "f5320bf7eac71befc547d490ab034d09fd603e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5320bf7eac71befc547d490ab034d09fd603e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "html_url": "https://github.com/rust-lang/rust/commit/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67cccc5c1659c62baca6880656279e98c9637899", "url": "https://api.github.com/repos/rust-lang/rust/commits/67cccc5c1659c62baca6880656279e98c9637899", "html_url": "https://github.com/rust-lang/rust/commit/67cccc5c1659c62baca6880656279e98c9637899"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "6c801b2620915d49a4c312c60b5fffde1b0a0d63", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "patch": "@@ -81,7 +81,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n         let region_maps = &cx.tcx.region_maps(fn_def_id);\n         {\n-            let mut vis = ExprUseVisitor::new(&mut v, region_maps, &infcx);\n+            let def_id = cx.tcx.hir.body_owner_def_id(body.id());\n+            let param_env = cx.tcx.param_env(def_id);\n+            let mut vis = ExprUseVisitor::new(&mut v, region_maps, &infcx, param_env);\n             vis.consume_body(body);\n         }\n \n@@ -205,7 +207,7 @@ impl<'a, 'tcx: 'a> EscapeDelegate<'a, 'tcx> {\n         // overflows.\n         if ty.is_box() {\n             let inner = ty.boxed_ty();\n-            self.tcx.infer_ctxt((), Reveal::All).enter(|infcx| if let Ok(layout) = inner.layout(&infcx) {\n+            self.tcx.infer_ctxt(()).enter(|infcx| if let Ok(layout) = inner.layout(&infcx) {\n                 let size = layout.size(&self.target);\n                 size.bytes() > self.too_large_for_stack\n             } else {"}, {"sha": "aa6acd6795f420a6c65c94ffb5acb33faa5d736c", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "patch": "@@ -49,7 +49,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n                 }\n             },\n             ExprMethodCall(ref name, _, ref arguments) => {\n-                let method_type = borrowed_table.expr_ty(e);\n+                let def_id = borrowed_table.type_dependent_defs[&e.id].def_id();\n+                let method_type = cx.tcx.type_of(def_id);\n                 check_arguments(cx, arguments, method_type, &name.node.as_str())\n             },\n             _ => (),\n@@ -70,7 +71,7 @@ fn check_arguments(cx: &LateContext, arguments: &[Expr], type_definition: &TyS,\n                             span_lint(cx,\n                                       UNNECESSARY_MUT_PASSED,\n                                       argument.span,\n-                                      &format!(\"The function/method \\\"{}\\\" doesn't need a mutable reference\", name));\n+                                      &format!(\"The function/method `{}` doesn't need a mutable reference\", name));\n                         }\n                     },\n                     _ => (),"}, {"sha": "4f5ff86c5e8f4fa4f1ccf1012a20638046fdcefb", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "patch": "@@ -41,15 +41,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         }\n         if let ExprAddrOf(MutImmutable, ref inner) = e.node {\n             if let ty::TyRef(..) = cx.tables.expr_ty(inner).sty {\n-                if let Some(&ty::adjustment::Adjust::Deref(ref overloaded)) =\n+                if let Some(&ty::adjustment::Adjust::Deref(Some(_))) =\n                     cx.tables.adjustments.get(&e.id).map(|a| &a.kind) {\n-                    if autoderefs > 1 && autoref.is_some() {\n-                        span_lint(cx,\n-                                  NEEDLESS_BORROW,\n-                                  e.span,\n-                                  \"this expression borrows a reference that is immediately dereferenced by the \\\n-                                   compiler\");\n-                    }\n+                    span_lint(cx,\n+                              NEEDLESS_BORROW,\n+                              e.span,\n+                              \"this expression borrows a reference that is immediately dereferenced by the \\\n+                               compiler\");\n                 }\n             }\n         }"}, {"sha": "c75e53d6ef045899535c16260b5781a8c18c3a33", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "patch": "@@ -259,7 +259,6 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n }\n \n /// Get the definition associated to a path.\n-/// TODO: investigate if there is something more efficient for that.\n pub fn path_to_def(cx: &LateContext, path: &[&str]) -> Option<def::Def> {\n     let cstore = &cx.tcx.sess.cstore;\n \n@@ -319,9 +318,9 @@ pub fn implements_trait<'a, 'tcx>(\n ) -> bool {\n     let ty = cx.tcx.erase_regions(&ty);\n     let mut b = if let Some(id) = parent_node_id {\n-        cx.tcx.infer_ctxt(BodyId { node_id: id }, Reveal::All)\n+        cx.tcx.infer_ctxt(BodyId { node_id: id })\n     } else {\n-        cx.tcx.infer_ctxt((), Reveal::All)\n+        cx.tcx.infer_ctxt(())\n     };\n     b.enter(|infcx| {\n         let obligation = cx.tcx.predicate_for_trait_def(traits::ObligationCause::dummy(), trait_id, 0, ty, ty_params);\n@@ -780,7 +779,7 @@ pub fn same_tys<'a, 'tcx>(\n     parameter_item: DefId\n ) -> bool {\n     let parameter_env = cx.tcx.param_env(parameter_item);\n-    cx.tcx.infer_ctxt(parameter_env, Reveal::All).enter(|infcx| {\n+    cx.tcx.infer_ctxt(parameter_env).enter(|infcx| {\n         let substs = Substs::identity_for_item(cx.tcx, parameter_item);\n         let new_a = a.subst(infcx.tcx, substs);\n         let new_b = b.subst(infcx.tcx, substs);\n@@ -963,6 +962,6 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n \n pub fn type_size<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>) -> Option<u64> {\n     cx.tcx\n-        .infer_ctxt((), Reveal::All)\n+        .infer_ctxt(())\n         .enter(|infcx| ty.layout(&infcx).ok().map(|lay| lay.size(&TargetDataLayout::parse(cx.sess())).bytes()))\n }"}]}