{"sha": "5172b8046ac6e23c6f106df79dd8c887516896b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNzJiODA0NmFjNmUyM2M2ZjEwNmRmNzlkZDhjODg3NTE2ODk2YjY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T06:13:08Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-04T04:01:33Z"}, "message": "remove `Any[Mut]RefExt` traits in favor of `impl Any`", "tree": {"sha": "a0fb81f7f922875312334637380a7d599bf99bb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0fb81f7f922875312334637380a7d599bf99bb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5172b8046ac6e23c6f106df79dd8c887516896b6", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5172b8046ac6e23c6f106df79dd8c887516896b6", "html_url": "https://github.com/rust-lang/rust/commit/5172b8046ac6e23c6f106df79dd8c887516896b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5172b8046ac6e23c6f106df79dd8c887516896b6/comments", "author": null, "committer": null, "parents": [{"sha": "c6c786671d692d7b13c2e5c68a53001327b4b125", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c786671d692d7b13c2e5c68a53001327b4b125", "html_url": "https://github.com/rust-lang/rust/commit/c6c786671d692d7b13c2e5c68a53001327b4b125"}], "stats": {"total": 47, "additions": 12, "deletions": 35}, "files": [{"sha": "ca010ac986ab005a75400d55e970f1f913b83843", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5172b8046ac6e23c6f106df79dd8c887516896b6", "patch": "@@ -12,7 +12,7 @@\n \n #![stable]\n \n-use core::any::{Any, AnyRefExt};\n+use core::any::Any;\n use core::clone::Clone;\n use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;"}, {"sha": "33cb335d756451dfab847d2311ea7082bd71fb19", "filename": "src/libcore/any.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=5172b8046ac6e23c6f106df79dd8c887516896b6", "patch": "@@ -35,7 +35,7 @@\n //!\n //! ```rust\n //! use std::fmt::Show;\n-//! use std::any::{Any, AnyRefExt};\n+//! use std::any::Any;\n //!\n //! // Logger function for any type that implements Show.\n //! fn log<T: Any+Show>(value: &T) {\n@@ -102,24 +102,11 @@ impl<T: 'static> Any for T {\n // Implemented as three extension traits so that the methods can be generic.\n ///////////////////////////////////////////////////////////////////////////////\n \n-/// Extension methods for a referenced `Any` trait object\n-#[unstable = \"this trait will not be necessary once DST lands, it will be a \\\n-              part of `impl Any`\"]\n-pub trait AnyRefExt<'a> {\n+impl Any {\n     /// Returns true if the boxed type is the same as `T`\n     #[stable]\n-    fn is<T: 'static>(self) -> bool;\n-\n-    /// Returns some reference to the boxed value if it is of type `T`, or\n-    /// `None` if it isn't.\n-    #[unstable = \"naming conventions around acquiring references may change\"]\n-    fn downcast_ref<T: 'static>(self) -> Option<&'a T>;\n-}\n-\n-#[stable]\n-impl<'a> AnyRefExt<'a> for &'a Any {\n     #[inline]\n-    fn is<T: 'static>(self) -> bool {\n+    pub fn is<T: 'static>(&self) -> bool {\n         // Get TypeId of the type this function is instantiated with\n         let t = TypeId::of::<T>();\n \n@@ -130,8 +117,11 @@ impl<'a> AnyRefExt<'a> for &'a Any {\n         t == boxed\n     }\n \n+    /// Returns some reference to the boxed value if it is of type `T`, or\n+    /// `None` if it isn't.\n+    #[unstable = \"naming conventions around acquiring references may change\"]\n     #[inline]\n-    fn downcast_ref<T: 'static>(self) -> Option<&'a T> {\n+    pub fn downcast_ref<'a, T: 'static>(&'a self) -> Option<&'a T> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n@@ -144,22 +134,12 @@ impl<'a> AnyRefExt<'a> for &'a Any {\n             None\n         }\n     }\n-}\n \n-/// Extension methods for a mutable referenced `Any` trait object\n-#[unstable = \"this trait will not be necessary once DST lands, it will be a \\\n-              part of `impl Any`\"]\n-pub trait AnyMutRefExt<'a> {\n     /// Returns some mutable reference to the boxed value if it is of type `T`, or\n     /// `None` if it isn't.\n     #[unstable = \"naming conventions around acquiring references may change\"]\n-    fn downcast_mut<T: 'static>(self) -> Option<&'a mut T>;\n-}\n-\n-#[stable]\n-impl<'a> AnyMutRefExt<'a> for &'a mut Any {\n     #[inline]\n-    fn downcast_mut<T: 'static>(self) -> Option<&'a mut T> {\n+    pub fn downcast_mut<'a, T: 'static>(&'a mut self) -> Option<&'a mut T> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object"}, {"sha": "983188c7090000e65b330cd0232f60fa5647b828", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5172b8046ac6e23c6f106df79dd8c887516896b6", "patch": "@@ -54,7 +54,6 @@ use rustc::lint;\n use rustc::metadata;\n use rustc::DIAGNOSTICS;\n \n-use std::any::AnyRefExt;\n use std::cmp::Ordering::Equal;\n use std::io;\n use std::iter::repeat;"}, {"sha": "e48137047b0a95a81265a3264f776124f9db76de", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=5172b8046ac6e23c6f106df79dd8c887516896b6", "patch": "@@ -12,7 +12,7 @@\n \n use prelude::v1::*;\n \n-use any::{Any, AnyRefExt};\n+use any::Any;\n use cell::RefCell;\n use io::IoResult;\n use rt::{backtrace, unwind};"}, {"sha": "371cf8b3b5a2ab3db959f3699efd19dc8a5858be", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=5172b8046ac6e23c6f106df79dd8c887516896b6", "patch": "@@ -442,7 +442,7 @@ impl<T: Send> Drop for JoinGuard<T> {\n mod test {\n     use prelude::v1::*;\n \n-    use any::{Any, AnyRefExt};\n+    use any::Any;\n     use sync::mpsc::{channel, Sender};\n     use boxed::BoxAny;\n     use result;"}, {"sha": "e8d6b6f1ff634d2e5f7f5941cc5688a795775579", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5172b8046ac6e23c6f106df79dd8c887516896b6", "patch": "@@ -58,7 +58,7 @@ use serialize::{json, Decodable, Encodable};\n use term::Terminal;\n use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n \n-use std::any::{Any, AnyRefExt};\n+use std::any::Any;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::f64;"}, {"sha": "d66fd0d77d6a9b6a6ef645a64e1ca8b7cbcf351b", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=5172b8046ac6e23c6f106df79dd8c887516896b6", "patch": "@@ -11,7 +11,6 @@\n // Test that Copy bounds inherited by trait are checked.\n \n use std::any::Any;\n-use std::any::AnyRefExt;\n \n trait Foo : Copy {\n }"}, {"sha": "4964b3f67284428ee4bdcfa7f3d35eaa2c9bdd1f", "filename": "src/test/run-pass/object-one-type-two-traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5172b8046ac6e23c6f106df79dd8c887516896b6/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs?ref=5172b8046ac6e23c6f106df79dd8c887516896b6", "patch": "@@ -12,7 +12,6 @@\n // traits.\n \n use std::any::Any;\n-use std::any::AnyRefExt;\n \n trait Wrap {\n     fn get(&self) -> int;"}]}