{"sha": "7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYTFmMjU2Y2M5MzZmMjk1N2QwNjg1OTM3ZWE2ZDZlOGRkNWNmZWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-30T14:27:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-30T14:27:11Z"}, "message": "Remove some cretonne bug workarounds and add ir comments", "tree": {"sha": "cc2faf686724858553edd781714f7adbf3f6a6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc2faf686724858553edd781714f7adbf3f6a6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "html_url": "https://github.com/rust-lang/rust/commit/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bff31e36d5fcc67275cfc420adc8c6018b817a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bff31e36d5fcc67275cfc420adc8c6018b817a0", "html_url": "https://github.com/rust-lang/rust/commit/4bff31e36d5fcc67275cfc420adc8c6018b817a0"}], "stats": {"total": 122, "additions": 68, "deletions": 54}, "files": [{"sha": "5521bea925b70d6ba7333a5fefcf88ed73ad7524", "filename": "0001-Disable-stdsimd-in-libcore.patch", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/0001-Disable-stdsimd-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/0001-Disable-stdsimd-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0001-Disable-stdsimd-in-libcore.patch?ref=7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "patch": "@@ -0,0 +1,29 @@\n+From cc175e6a3f59c7fe1523fd441214e0303f8fee80 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Sat, 30 Jun 2018 12:30:30 +0200\n+Subject: [PATCH] Disable stdsimd in libcore\n+\n+---\n+ src/libcore/lib.rs | 2 ++\n+ 1 file changed, 2 insertions(+)\n+\n+diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n+index 40caee8554..f038d155a1 100644\n+--- a/src/libcore/lib.rs\n++++ b/src/libcore/lib.rs\n+@@ -240,6 +240,7 @@ macro_rules! test_v256 { ($item:item) => {}; }\n+ macro_rules! test_v512 { ($item:item) => {}; }\n+ #[allow(unused_macros)]\n+ macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n++/*\n+ #[path = \"../stdsimd/coresimd/mod.rs\"]\n+ #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n+ #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+@@ -252,3 +253,4 @@ pub use coresimd::simd;\n+ #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+ #[cfg(not(stage0))]\n+ pub use coresimd::arch;\n++*/\n+-- \n+2.15.2 (Apple Git-101.1)\n+"}, {"sha": "a044620fd74b2ee91633a54ca2ddc2ad168cb1fe", "filename": "src/base.rs", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "patch": "@@ -158,7 +158,7 @@ fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut\n             offset: None,\n         });\n         let ty = mir.local_decls[local].ty;\n-        let cton_type = ::common::fixup_cton_ty(fx.cton_type(ty).unwrap_or(types::I64));\n+        let cton_type = fx.cton_type(ty).unwrap_or(types::I64);\n         (local, fx.bcx.append_ebb_param(start_ebb, cton_type), ty, stack_slot)\n     }).collect::<Vec<(Local, Value, Ty, StackSlot)>>();\n \n@@ -197,23 +197,24 @@ fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut\n             trans_stmt(fx, stmt);\n         }\n \n-        match &bb_data.terminator().kind {\n+        let inst = match &bb_data.terminator().kind {\n             TerminatorKind::Goto { target } => {\n                 let ebb = fx.get_ebb(*target);\n-                fx.bcx.ins().jump(ebb, &[]);\n+                fx.bcx.ins().jump(ebb, &[])\n             }\n             TerminatorKind::Return => {\n-                fx.bcx.ins().return_(&[]);\n+                fx.bcx.ins().return_(&[])\n             }\n             TerminatorKind::Assert { cond, expected, msg: _, target, cleanup: _ } => {\n                 let cond = trans_operand(fx, cond).load_value(fx);\n                 let target = fx.get_ebb(*target);\n-                if *expected {\n-                    fx.bcx.ins().brz(cond, target, &[]);\n+                let inst = if *expected {\n+                    fx.bcx.ins().brz(cond, target, &[])\n                 } else {\n-                    fx.bcx.ins().brnz(cond, target, &[]);\n-                }\n+                    fx.bcx.ins().brnz(cond, target, &[])\n+                };\n                 fx.bcx.ins().trap(TrapCode::User(!0));\n+                inst\n             }\n \n             TerminatorKind::SwitchInt { discr, switch_ty, values, targets } => {\n@@ -224,9 +225,10 @@ fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut\n                     jt_data.set_entry(*value as usize, ebb);\n                 }\n                 let mut jump_table = fx.bcx.create_jump_table(jt_data);\n-                fx.bcx.ins().br_table(discr, jump_table);\n+                let inst = fx.bcx.ins().br_table(discr, jump_table);\n                 let otherwise_ebb = fx.get_ebb(targets[targets.len() - 1]);\n                 fx.bcx.ins().jump(otherwise_ebb, &[]);\n+                inst\n             }\n             TerminatorKind::Call { func, args, destination, cleanup: _ } => {\n                 let func_ty = func.ty(&fx.mir.local_decls, fx.tcx);\n@@ -251,9 +253,9 @@ fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut\n                                 }\n                             })\n                     ).collect::<Vec<_>>();\n-                match func {\n+                let inst = match func {\n                     CValue::Func(func, _) => {\n-                        fx.bcx.ins().call(func, &args);\n+                        fx.bcx.ins().call(func, &args)\n                     }\n                     func => {\n                         let func = func.load_value(fx);\n@@ -263,18 +265,19 @@ fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut\n                             _ => bug!(\"Calling non function type {:?}\", func_ty),\n                         };\n                         let sig = fx.bcx.import_signature(cton_sig_from_fn_sig(fx.tcx, sig, fx.param_substs));\n-                        fx.bcx.ins().call_indirect(sig, func, &args);\n+                        fx.bcx.ins().call_indirect(sig, func, &args)\n                     }\n-                }\n+                };\n                 if let Some((_, dest)) = *destination {\n                     let ret_ebb = fx.get_ebb(dest);\n                     fx.bcx.ins().jump(ret_ebb, &[]);\n                 } else {\n                     fx.bcx.ins().trap(TrapCode::User(!0));\n                 }\n+                inst\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n-                fx.bcx.ins().trap(TrapCode::User(!0));\n+                fx.bcx.ins().trap(TrapCode::User(!0))\n             }\n             TerminatorKind::Yield { .. } |\n             TerminatorKind::FalseEdges { .. } |\n@@ -285,19 +288,25 @@ fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut\n                 // TODO call drop impl\n                 // unimplemented!(\"terminator {:?}\", bb_data.terminator());\n                 let target_ebb = fx.get_ebb(*target);\n-                fx.bcx.ins().jump(target_ebb, &[]);\n+                fx.bcx.ins().jump(target_ebb, &[])\n             }\n             TerminatorKind::GeneratorDrop => {\n                 unimplemented!(\"terminator GeneratorDrop\");\n             }\n-        }\n+        };\n+\n+        let mut terminator_head = \"\\n\".to_string();\n+        bb_data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n+        fx.bcx.func.comments[inst] = terminator_head;\n     }\n \n     fx.bcx.seal_all_blocks();\n     fx.bcx.finalize();\n }\n \n fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx>) {\n+    let nop_inst = fx.bcx.ins().nop();\n+\n     match &stmt.kind {\n         StatementKind::SetDiscriminant { place, variant_index } => {\n             let place = trans_place(fx, place);\n@@ -472,9 +481,15 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                 rval => unimplemented!(\"rval {:?}\", rval),\n             }\n         }\n-        StatementKind::StorageLive(_) | StatementKind::StorageDead(_) | StatementKind::Nop => {}\n+        StatementKind::StorageLive(_) | StatementKind::StorageDead(_) | StatementKind::Nop => {\n+            fx.bcx.ins().nop();\n+        }\n         _ => unimplemented!(\"stmt {:?}\", stmt),\n     }\n+\n+    let inst = fx.bcx.func.layout.next_inst(nop_inst).unwrap();\n+    fx.bcx.func.layout.remove_inst(nop_inst);\n+    fx.bcx.func.comments[inst] = format!(\"{:?}\", stmt);\n }\n \n fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>, signed: bool, checked: bool) -> CValue<'tcx> {"}, {"sha": "35e3b9d3657899b351472f814d069fb3512b897a", "filename": "src/common.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "patch": "@@ -51,36 +51,6 @@ fn cton_type_from_ty(ty: Ty) -> Option<types::Type> {\n     })\n }\n \n-// FIXME(cretonne) fix types smaller than I32\n-pub fn fixup_cton_ty(ty: Type) -> Type {\n-    match ty {\n-        types::I64X2 | types::I64 | types::I32 => ty,\n-        _ => types::I32,\n-    }\n-}\n-\n-// FIXME(cretonne) fix load.i8\n-fn load_workaround(fx: &mut FunctionCx, ty: Type, addr: Value, offset: i32) -> Value {\n-    use cretonne::codegen::ir::types::*;\n-    match ty {\n-        I8 => fx.bcx.ins().uload8(I32, MemFlags::new(), addr, offset),\n-        I16 => fx.bcx.ins().uload16(I32, MemFlags::new(), addr, offset),\n-        // I32 and I64 work\n-        _ => fx.bcx.ins().load(ty, MemFlags::new(), addr, offset),\n-    }\n-}\n-\n-// FIXME(cretonne) fix store.i8\n-fn store_workaround(fx: &mut FunctionCx, ty: Type, addr: Value, val: Value, offset: i32) {\n-    use cretonne::codegen::ir::types::*;\n-    match ty {\n-        I8 => fx.bcx.ins().istore8(MemFlags::new(), val, addr, offset),\n-        I16 => fx.bcx.ins().istore16(MemFlags::new(), val, addr, offset),\n-        // I32 and I64 work\n-        _ => fx.bcx.ins().store(MemFlags::new(), val, addr, offset),\n-    };\n-}\n-\n #[derive(Debug, Copy, Clone)]\n pub enum CValue<'tcx> {\n     ByRef(Value, TyLayout<'tcx>),\n@@ -118,9 +88,9 @@ impl<'tcx> CValue<'tcx> {\n \n     pub fn load_value<'a>(self, fx: &mut FunctionCx<'a, 'tcx>) -> Value where 'tcx: 'a{\n         match self {\n-            CValue::ByRef(value, layout) => {\n+            CValue::ByRef(addr, layout) => {\n                 let cton_ty = fx.cton_type(layout.ty).expect(&format!(\"{:?}\", layout.ty));\n-                load_workaround(fx, cton_ty, value, 0)\n+                fx.bcx.ins().load(cton_ty, MemFlags::new(), addr, 0)\n             }\n             CValue::ByVal(value, _layout) => value,\n             CValue::Func(func, _layout) => {\n@@ -165,7 +135,6 @@ impl<'tcx> CValue<'tcx> {\n \n     pub fn const_val<'a>(fx: &mut FunctionCx<'a, 'tcx>, ty: Ty<'tcx>, const_val: i64) -> CValue<'tcx> where 'tcx: 'a {\n         let cton_ty = fx.cton_type(ty).unwrap();\n-        let cton_ty = fixup_cton_ty(cton_ty);\n         let layout = fx.layout_of(ty);\n         CValue::ByVal(fx.bcx.ins().iconst(cton_ty, const_val), layout)\n     }\n@@ -229,12 +198,12 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n                 if let Some(cton_ty) = fx.cton_type(layout.ty) {\n                     let data = from.load_value(fx);\n-                    store_workaround(fx, cton_ty, addr, data, 0);\n+                    fx.bcx.ins().store(MemFlags::new(), data, addr, 0);\n                 } else {\n                     for i in 0..size {\n                         let from = from.expect_byref();\n-                        let byte = load_workaround(fx, types::I8, from.0, i);\n-                        store_workaround(fx, types::I8, addr, byte, i);\n+                        let byte = fx.bcx.ins().load(types::I8, MemFlags::new(), from.0, i);\n+                        fx.bcx.ins().store(MemFlags::new(), byte, addr, i);\n                     }\n                 }\n             }\n@@ -288,7 +257,7 @@ pub fn cton_sig_from_mono_fn_sig<'a ,'tcx: 'a>(sig: PolyFnSig<'tcx>) -> Signatur\n     };\n     Signature {\n         params: Some(types::I64).into_iter() // First param is place to put return val\n-            .chain(inputs.into_iter().map(|ty| fixup_cton_ty(cton_type_from_ty(ty).unwrap_or(types::I64))))\n+            .chain(inputs.into_iter().map(|ty| cton_type_from_ty(ty).unwrap_or(types::I64)))\n             .map(AbiParam::new).collect(),\n         returns: vec![],\n         call_conv,"}, {"sha": "5cd275b94db93488cd45dfc5b34fa07d03f3b665", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1f256cc936f2957d0685937ea6d6e8dd5cfec/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7ca1f256cc936f2957d0685937ea6d6e8dd5cfec", "patch": "@@ -1,4 +1,5 @@\n #![feature(rustc_private)]\n+#![allow(intra_doc_link_resolution_failure)]\n \n extern crate syntax;\n #[macro_use]"}]}