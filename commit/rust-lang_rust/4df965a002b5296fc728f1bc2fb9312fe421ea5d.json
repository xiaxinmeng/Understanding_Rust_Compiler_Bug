{"sha": "4df965a002b5296fc728f1bc2fb9312fe421ea5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZjk2NWEwMDJiNTI5NmZjNzI4ZjFiYzJmYjkzMTJmZTQyMWVhNWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-04T01:13:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-04T01:13:22Z"}, "message": "work", "tree": {"sha": "989dfb2bbc2751d97959b4ca320cc5301b2ec4f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989dfb2bbc2751d97959b4ca320cc5301b2ec4f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4df965a002b5296fc728f1bc2fb9312fe421ea5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4df965a002b5296fc728f1bc2fb9312fe421ea5d", "html_url": "https://github.com/rust-lang/rust/commit/4df965a002b5296fc728f1bc2fb9312fe421ea5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4df965a002b5296fc728f1bc2fb9312fe421ea5d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3e28f06463854e4711c4c49a49c77d1e136969f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e28f06463854e4711c4c49a49c77d1e136969f", "html_url": "https://github.com/rust-lang/rust/commit/c3e28f06463854e4711c4c49a49c77d1e136969f"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "6d1375f88d0d3118dd7a5d4bd8aafd7193821243", "filename": "crates/libanalysis/src/roots.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4df965a002b5296fc728f1bc2fb9312fe421ea5d/crates%2Flibanalysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df965a002b5296fc728f1bc2fb9312fe421ea5d/crates%2Flibanalysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Froots.rs?ref=4df965a002b5296fc728f1bc2fb9312fe421ea5d", "patch": "@@ -138,18 +138,18 @@ pub(crate) struct ReadonlySourceRoot {\n impl ReadonlySourceRoot {\n     pub fn new(files: Vec<(FileId, String)>) -> ReadonlySourceRoot {\n         let mut module_map = ModuleMap::new();\n+        let symbol_index = SymbolIndex::for_files(\n+            files.par_iter().map(|(file_id, text)| {\n+                (*file_id, File::parse(text))\n+            })\n+        );\n         let file_map: HashMap<FileId, FileData> = files\n             .into_iter()\n             .map(|(id, text)| {\n                 module_map.update_file(id, ChangeKind::Insert);\n                 (id, FileData::new(text))\n             })\n             .collect();\n-        let symbol_index = SymbolIndex::for_files(\n-            file_map.par_iter().map(|(&file_id, file_data)| {\n-                (file_id, file_data.syntax_transient())\n-            })\n-        );\n \n         ReadonlySourceRoot {\n             symbol_index,"}, {"sha": "52e3b661d731f4283c7dcf7fea64bfc46e2b3e83", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4df965a002b5296fc728f1bc2fb9312fe421ea5d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df965a002b5296fc728f1bc2fb9312fe421ea5d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=4df965a002b5296fc728f1bc2fb9312fe421ea5d", "patch": "@@ -8,7 +8,7 @@ use std::{\n \n use threadpool::ThreadPool;\n use serde::{Serialize, de::DeserializeOwned};\n-use crossbeam_channel::{bounded, Sender, Receiver};\n+use crossbeam_channel::{unbounded, Sender, Receiver};\n use languageserver_types::{NumberOrString};\n use libanalysis::{FileId, JobHandle, JobToken, LibraryData};\n use gen_lsp_server::{\n@@ -38,7 +38,7 @@ pub fn main_loop(\n     msg_sender: &mut Sender<RawMessage>,\n ) -> Result<()> {\n     let pool = ThreadPool::new(4);\n-    let (task_sender, task_receiver) = bounded::<Task>(16);\n+    let (task_sender, task_receiver) = unbounded::<Task>();\n     let (fs_sender, fs_receiver, fs_watcher) = vfs::roots_loader();\n     let (ws_sender, ws_receiver, ws_watcher) = workspace_loader();\n \n@@ -97,7 +97,7 @@ fn main_loop_inner(\n     pending_requests: &mut HashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,\n ) -> Result<()> {\n-    let (libdata_sender, libdata_receiver) = bounded(1024);\n+    let (libdata_sender, libdata_receiver) = unbounded();\n     ws_sender.send(ws_root.clone());\n     fs_sender.send(ws_root.clone());\n     loop {\n@@ -137,7 +137,10 @@ fn main_loop_inner(\n                     let files = state.events_to_files(events);\n                     let sender = libdata_sender.clone();\n                     pool.execute(move || {\n+                        let start = ::std::time::Instant::now();\n+                        info!(\"indexing {} ... \", root.display());\n                         let data = LibraryData::prepare(files);\n+                        info!(\"indexed {:?} {}\", start.elapsed(), root.display());\n                         sender.send(data);\n                     });\n                 }"}, {"sha": "2699fc21e376431de841946a505cb7f280a507d4", "filename": "crates/server/src/vfs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4df965a002b5296fc728f1bc2fb9312fe421ea5d/crates%2Fserver%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df965a002b5296fc728f1bc2fb9312fe421ea5d/crates%2Fserver%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fvfs.rs?ref=4df965a002b5296fc728f1bc2fb9312fe421ea5d", "patch": "@@ -3,7 +3,7 @@ use std::{\n     fs,\n };\n \n-use crossbeam_channel::{Sender, Receiver, bounded};\n+use crossbeam_channel::{Sender, Receiver, unbounded};\n use walkdir::WalkDir;\n \n use {\n@@ -23,8 +23,8 @@ pub enum FileEventKind {\n }\n \n pub fn roots_loader() -> (Sender<PathBuf>, Receiver<(PathBuf, Vec<FileEvent>)>, ThreadWatcher) {\n-    let (path_sender, path_receiver) = bounded::<PathBuf>(2048);\n-    let (event_sender, event_receiver) = bounded::<(PathBuf, Vec<FileEvent>)>(1);\n+    let (path_sender, path_receiver) = unbounded::<PathBuf>();\n+    let (event_sender, event_receiver) = unbounded::<(PathBuf, Vec<FileEvent>)>();\n     let thread = ThreadWatcher::spawn(\"roots loader\", move || {\n         path_receiver\n             .into_iter()"}, {"sha": "50529f4539ce93c460dfdee2aeec62512ea1e671", "filename": "crates/server/tests/heavy_tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4df965a002b5296fc728f1bc2fb9312fe421ea5d/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df965a002b5296fc728f1bc2fb9312fe421ea5d/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs?ref=4df965a002b5296fc728f1bc2fb9312fe421ea5d", "patch": "@@ -95,5 +95,5 @@ fn test_eggs() {}\n // extern crate regex;\n // \"#);\n //     server.wait_for_feedback(\"workspace loaded\");\n-//     server.wait_for_feedback_n(\"library loaded\", 1);\n+//     server.wait_for_feedback_n(\"library loaded\", 9);\n // }"}]}