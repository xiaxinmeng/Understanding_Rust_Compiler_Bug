{"sha": "b33f0df152fd2242a1ea88d0961065caecd228ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzM2YwZGYxNTJmZDIyNDJhMWVhODhkMDk2MTA2NWNhZWNkMjI4YWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-22T23:38:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-22T23:40:22Z"}, "message": "stdlib: Make writers seekable; switch file writers to the C FILE interface to make this work", "tree": {"sha": "eaf1ef79e516e842b1c16f2e955a2bfc3964740c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaf1ef79e516e842b1c16f2e955a2bfc3964740c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b33f0df152fd2242a1ea88d0961065caecd228ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b33f0df152fd2242a1ea88d0961065caecd228ac", "html_url": "https://github.com/rust-lang/rust/commit/b33f0df152fd2242a1ea88d0961065caecd228ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b33f0df152fd2242a1ea88d0961065caecd228ac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf122ede03af71d8a1d892a077a9e2435b64ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf122ede03af71d8a1d892a077a9e2435b64ef3", "html_url": "https://github.com/rust-lang/rust/commit/dcf122ede03af71d8a1d892a077a9e2435b64ef3"}], "stats": {"total": 115, "additions": 101, "deletions": 14}, "files": [{"sha": "87eef51412755fe267531fa7d06d14834cf0692d", "filename": "src/lib/_str.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2F_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2F_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_str.rs?ref=b33f0df152fd2242a1ea88d0961065caecd228ac", "patch": "@@ -7,7 +7,7 @@ native \"rust\" mod rustrt {\n     fn str_buf(str s) -> sbuf;\n     fn str_byte_len(str s) -> uint;\n     fn str_alloc(uint n_bytes) -> str;\n-    fn str_from_vec(vec[u8] b) -> str;\n+    fn str_from_vec(vec[mutable? u8] b) -> str;\n     fn str_from_cstr(sbuf cstr) -> str;\n     fn str_from_buf(sbuf buf, uint len) -> str;\n     fn refcount[T](str s) -> uint;\n@@ -109,7 +109,16 @@ fn from_bytes(vec[u8] v) : is_utf8(v) -> str {\n }\n \n // FIXME temp thing\n-fn unsafe_from_bytes(vec[u8] v) -> str {\n+fn unsafe_from_bytes(vec[mutable? u8] v) -> str {\n+    ret rustrt.str_from_vec(v);\n+}\n+\n+// FIXME even temp-er thing; rustc can use \"unsafe_from_bytes\" above\n+fn unsafe_from_mutable_bytes(vec[mutable u8] mv) -> str {\n+    let vec[u8] v = vec();\n+    for (mutable u8 b in mv) {\n+        v += vec(b);\n+    }\n     ret rustrt.str_from_vec(v);\n }\n "}, {"sha": "23a503ab728d30fd7a574dab7428d5ffdac9ffed", "filename": "src/lib/io.rs", "status": "modified", "additions": 87, "deletions": 12, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=b33f0df152fd2242a1ea88d0961065caecd228ac", "patch": "@@ -27,6 +27,14 @@ type reader =\n           impure fn tell() -> uint; // TODO: eventually u64\n     };\n \n+fn convert_whence(seek_style whence) -> int {\n+    alt (whence) {\n+        case (seek_set) {ret 0;}\n+        case (seek_cur) {ret 1;}\n+        case (seek_end) {ret 2;}\n+    }\n+}\n+\n state obj FILE_reader(os.libc.FILE f, bool must_close) {\n     impure fn read_byte() -> u8 {\n         ret os.libc.fgetc(f) as u8;\n@@ -90,13 +98,7 @@ state obj FILE_reader(os.libc.FILE f, bool must_close) {\n         ret val as int; // TODO does that work?\n     }\n     impure fn seek(int offset, seek_style whence) {\n-        auto wh;\n-        alt (whence) {\n-            case (seek_set) {wh = 0;}\n-            case (seek_cur) {wh = 1;}\n-            case (seek_end) {wh = 2;}\n-        }\n-        check(os.libc.fseek(f, offset, wh) == 0);\n+        check(os.libc.fseek(f, offset, convert_whence(whence)) == 0);\n     }\n     impure fn tell() -> uint {\n         ret os.libc.ftell(f) as uint;\n@@ -132,8 +134,34 @@ tag fileflag {\n \n type buf_writer = state obj {\n   fn write(vec[u8] v);\n+\n+  fn seek(int offset, seek_style whence);\n+  fn tell() -> uint; // TODO: eventually u64\n };\n \n+state obj FILE_writer(os.libc.FILE f, bool must_close) {\n+    fn write(vec[u8] v) {\n+        auto len = _vec.len[u8](v);\n+        auto vbuf = _vec.buf[u8](v);\n+        auto nout = os.libc.fwrite(vbuf, len, 1u, f);\n+        if (nout < 1u) {\n+            log \"error dumping buffer\";\n+        }\n+    }\n+\n+    fn seek(int offset, seek_style whence) {\n+        check(os.libc.fseek(f, offset, convert_whence(whence)) == 0);\n+    }\n+\n+    fn tell() -> uint {\n+        ret os.libc.ftell(f) as uint;\n+    }\n+\n+    drop {\n+        if (must_close) {os.libc.fclose(f);}\n+    }\n+}\n+\n state obj fd_buf_writer(int fd, bool must_close) {\n     fn write(vec[u8] v) {\n         auto len = _vec.len[u8](v);\n@@ -151,6 +179,16 @@ state obj fd_buf_writer(int fd, bool must_close) {\n         }\n     }\n \n+    fn seek(int offset, seek_style whence) {\n+        log \"need 64-bit native calls for seek, sorry\";\n+        fail;\n+    }\n+\n+    fn tell() -> uint {\n+        log \"need 64-bit native calls for tell, sorry\";\n+        fail;\n+    }\n+\n     drop {\n         if (must_close) {os.libc.close(fd);}\n     }\n@@ -239,19 +277,56 @@ type str_writer =\n           fn get_str() -> str;\n     };\n \n-type byte_buf = @rec(mutable vec[u8] buf);\n+type byte_buf = @rec(mutable vec[mutable u8] buf, mutable uint pos);\n \n state obj byte_buf_writer(byte_buf buf) {\n-    fn write(vec[u8] v) {buf.buf += v;}\n+    fn write(vec[u8] v) {\n+        // TODO: optimize\n+        auto vlen = _vec.len[u8](v);\n+        auto vpos = 0u;\n+        while (vpos < vlen) {\n+            auto b = v.(vpos);\n+            if (buf.pos == _vec.len[mutable u8](buf.buf)) {\n+                buf.buf += vec(mutable b);\n+            } else {\n+                buf.buf.(buf.pos) = b;\n+            }\n+            buf.pos += 1u;\n+            vpos += 1u;\n+        }\n+    }\n+\n+    fn seek(int offset, seek_style whence) {\n+        auto pos = buf.pos as int;\n+        auto len = _vec.len[mutable u8](buf.buf) as int;\n+        alt (whence) {\n+            case (seek_set) { pos = offset;         }\n+            case (seek_cur) { pos += offset;        }\n+            case (seek_end) { pos = len + offset;   }\n+        }\n+\n+        if (pos < 0) {\n+            pos = 0;\n+        } else if (pos > len) {\n+            pos = len;\n+        }\n+\n+        buf.pos = pos as uint;\n+    }\n+\n+    fn tell() -> uint { ret buf.pos; }\n }\n \n // TODO awkward! it's not possible to implement a writer with an extra method\n fn string_writer() -> str_writer {\n-    let vec[u8] b = vec();\n-    let byte_buf buf = @rec(mutable buf = b);\n+    // FIXME: yikes, this is bad. Needs fixing of mutable syntax.\n+    let vec[mutable u8] b = vec(mutable 0u8);\n+    _vec.pop[mutable u8](b);\n+\n+    let byte_buf buf = @rec(mutable buf = b, mutable pos = 0u);\n     state obj str_writer_wrap(writer wr, byte_buf buf) {\n         fn get_writer() -> writer {ret wr;}\n-        fn get_str() -> str {ret _str.unsafe_from_bytes(buf.buf);}\n+        fn get_str() -> str {ret _str.unsafe_from_mutable_bytes(buf.buf);}\n     }\n     ret str_writer_wrap(new_writer(byte_buf_writer(buf)), buf);\n }"}, {"sha": "51f2943dfb39b1f7c4f4ae2f8f478a33be31c375", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=b33f0df152fd2242a1ea88d0961065caecd228ac", "patch": "@@ -18,6 +18,7 @@ native mod libc = \"libc.so.6\" {\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n     fn fread(vbuf buf, uint size, uint n, FILE f) -> uint;\n+    fn fwrite(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fseek(FILE f, int offset, int whence) -> int;\n     fn ftell(FILE f) -> int;\n "}, {"sha": "9633c14c4331e628644c46eaa09504cf0680895a", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=b33f0df152fd2242a1ea88d0961065caecd228ac", "patch": "@@ -15,6 +15,7 @@ native mod libc = \"libc.dylib\" {\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n     fn fread(vbuf buf, uint size, uint n, FILE f) -> uint;\n+    fn fwrite(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fseek(FILE f, int offset, int whence) -> int;\n     fn ftell(FILE f) -> int;\n "}, {"sha": "7f113b2725cd4ff8c73fb6cdae718ff36e27aab4", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33f0df152fd2242a1ea88d0961065caecd228ac/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=b33f0df152fd2242a1ea88d0961065caecd228ac", "patch": "@@ -14,6 +14,7 @@ native mod libc = \"msvcrt.dll\" {\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n     fn fread(vbuf buf, uint size, uint n, FILE f) -> uint;\n+    fn fwrite(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fseek(FILE f, int offset, int whence) -> int;\n     fn ftell(FILE f) -> int;\n "}]}