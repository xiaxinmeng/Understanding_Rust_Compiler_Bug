{"sha": "66da9a291152feeedc9bb53f23f4577478b377e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZGE5YTI5MTE1MmZlZWVkYzliYjUzZjIzZjQ1Nzc0NzhiMzc3ZTE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-12T08:38:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-12T08:38:37Z"}, "message": "Rollup merge of #37368 - trotter:patch-1, r=steveklabnik\n\nUpdate testing.md to reflect changes to cargo new\n\n`cargo new` now creates a `src/lib.rs` with a `tests` module by default. I've updated the earlier examples in this doc to reflect this. However, I don't know how we want to approach the \"introduction\" to idiomatic testing that follows in \"the tests module\" section. I _think_ it should be broken apart, with the module concept being introduced early on, and the `super` concept being addressed when we hit the `add_two` example. I'd like to get agreement on that being the right approach before I do it though.\n\nI _also_ removed the `#fn main() {}` hidden at the beginning of each example, as these cause Rust Playground to not treat the file as a set of tests that it can run. Removing it _should_ cause Rust Playground to display a \"Test >\" button in the top left when a user runs the code, which will allow them to see the test runner output.", "tree": {"sha": "966e49c53b4b0665f4c4fcde4e51a11a05ab5370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/966e49c53b4b0665f4c4fcde4e51a11a05ab5370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66da9a291152feeedc9bb53f23f4577478b377e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66da9a291152feeedc9bb53f23f4577478b377e1", "html_url": "https://github.com/rust-lang/rust/commit/66da9a291152feeedc9bb53f23f4577478b377e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66da9a291152feeedc9bb53f23f4577478b377e1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db360eec1685a7bf33cf48ff9b9ab1757dcb358", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db360eec1685a7bf33cf48ff9b9ab1757dcb358", "html_url": "https://github.com/rust-lang/rust/commit/2db360eec1685a7bf33cf48ff9b9ab1757dcb358"}, {"sha": "2a832a03c5a3efd6388e4eb5c5b5b4568bcd80f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a832a03c5a3efd6388e4eb5c5b5b4568bcd80f6", "html_url": "https://github.com/rust-lang/rust/commit/2a832a03c5a3efd6388e4eb5c5b5b4568bcd80f6"}], "stats": {"total": 123, "additions": 92, "deletions": 31}, "files": [{"sha": "ed916fd798bb6475bdb74da514b9846a299210a3", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 92, "deletions": 31, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/66da9a291152feeedc9bb53f23f4577478b377e1/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/66da9a291152feeedc9bb53f23f4577478b377e1/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=66da9a291152feeedc9bb53f23f4577478b377e1", "patch": "@@ -23,7 +23,11 @@ $ cd adder\n Cargo will automatically generate a simple test when you make a new project.\n Here's the contents of `src/lib.rs`:\n \n-```rust\n+```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[cfg(test)]\n mod tests {\n     #[test]\n@@ -32,17 +36,30 @@ mod tests {\n }\n ```\n \n+For now, let's remove the `mod` bit, and focus on just the function:\n+\n+```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n+#[test]\n+fn it_works() {\n+}\n+```\n+\n Note the `#[test]`. This attribute indicates that this is a test function. It\n currently has no body. That's good enough to pass! We can run the tests with\n `cargo test`:\n \n ```bash\n $ cargo test\n    Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.15 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n-test tests::it_works ... ok\n+test it_works ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n \n@@ -58,13 +75,15 @@ for the test we wrote, and another for documentation tests. We'll talk about\n those later. For now, see this line:\n \n ```text\n-test tests::it_works ... ok\n+test it_works ... ok\n ```\n \n Note the `it_works`. This comes from the name of our function:\n \n ```rust\n+# fn main() {\n fn it_works() {\n+}\n # }\n ```\n \n@@ -77,8 +96,11 @@ test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n So why does our do-nothing test pass? Any test which doesn't `panic!` passes,\n and any test that does `panic!` fails. Let's make our test fail:\n \n-```rust\n-# fn main() {}\n+```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[test]\n fn it_works() {\n     assert!(false);\n@@ -92,19 +114,21 @@ run our tests again:\n ```bash\n $ cargo test\n    Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.17 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n-test tests::it_works ... FAILED\n+test it_works ... FAILED\n \n failures:\n \n----- test::it_works stdout ----\n-        thread 'tests::it_works' panicked at 'assertion failed: false', src/lib.rs:5\n+---- it_works stdout ----\n+        thread 'it_works' panicked at 'assertion failed: false', src/lib.rs:5\n+note: Run with `RUST_BACKTRACE=1` for a backtrace.\n \n \n failures:\n-    tests::it_works\n+    it_works\n \n test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured\n \n@@ -114,7 +138,7 @@ error: test failed\n Rust indicates that our test failed:\n \n ```text\n-test tests::it_works ... FAILED\n+test it_works ... FAILED\n ```\n \n And that's reflected in the summary line:\n@@ -147,8 +171,11 @@ This is useful if you want to integrate `cargo test` into other tooling.\n \n We can invert our test's failure with another attribute: `should_panic`:\n \n-```rust\n-# fn main() {}\n+```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[test]\n #[should_panic]\n fn it_works() {\n@@ -161,10 +188,11 @@ This test will now succeed if we `panic!` and fail if we complete. Let's try it:\n ```bash\n $ cargo test\n    Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.17 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n-test tests::it_works ... ok\n+test it_works ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n \n@@ -178,8 +206,11 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n Rust provides another macro, `assert_eq!`, that compares two arguments for\n equality:\n \n-```rust\n-# fn main() {}\n+```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[test]\n #[should_panic]\n fn it_works() {\n@@ -193,10 +224,11 @@ passes:\n ```bash\n $ cargo test\n    Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.21 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n-test tests::it_works ... ok\n+test it_works ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n \n@@ -213,8 +245,11 @@ parameter can be added to the `should_panic` attribute. The test harness will\n make sure that the failure message contains the provided text. A safer version\n of the example above would be:\n \n-```rust\n-# fn main() {}\n+```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n #[test]\n #[should_panic(expected = \"assertion failed\")]\n fn it_works() {\n@@ -225,7 +260,10 @@ fn it_works() {\n That's all there is to the basics! Let's write one 'real' test:\n \n ```rust,ignore\n-# fn main() {}\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -244,8 +282,15 @@ some known arguments and compare it to the expected output.\n Sometimes a few specific tests can be very time-consuming to execute. These\n can be disabled by default by using the `ignore` attribute:\n \n-```rust\n-# fn main() {}\n+```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n+pub fn add_two(a: i32) -> i32 {\n+    a + 2\n+}\n+\n #[test]\n fn it_works() {\n     assert_eq!(4, add_two(2));\n@@ -264,7 +309,8 @@ not:\n ```bash\n $ cargo test\n    Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.20 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 2 tests\n test expensive_test ... ignored\n@@ -283,7 +329,8 @@ The expensive tests can be run explicitly using `cargo test -- --ignored`:\n \n ```bash\n $ cargo test -- --ignored\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n test expensive_test ... ok\n@@ -310,7 +357,10 @@ was missing from our last example. Let's explain what this does.\n The idiomatic way of writing our example looks like this:\n \n ```rust,ignore\n-# fn main() {}\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -339,7 +389,10 @@ a large module, and so this is a common use of globs. Let's change our\n `src/lib.rs` to make use of it:\n \n ```rust,ignore\n-# fn main() {}\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -389,9 +442,14 @@ To write an integration test, let's make a `tests` directory and\n put a `tests/integration_test.rs` file inside with this as its contents:\n \n ```rust,ignore\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n+# // Sadly, this code will not work in play.rust-lang.org, because we have no\n+# // crate adder to import. You'll need to try this part on your own machine.\n extern crate adder;\n \n-# fn main() {}\n #[test]\n fn it_works() {\n     assert_eq!(4, adder::add_two(2));\n@@ -452,7 +510,10 @@ running examples in your documentation (**note:** this only works in library\n crates, not binary crates). Here's a fleshed-out `src/lib.rs` with examples:\n \n ```rust,ignore\n-# fn main() {}\n+# // The next line exists to trick play.rust-lang.org into running our code as a\n+# // test:\n+# // fn main\n+#\n //! The `adder` crate provides functions that add numbers to other numbers.\n //!\n //! # Examples"}]}