{"sha": "870ae36f853b560811399a56a1605523ab775743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MGFlMzZmODUzYjU2MDgxMTM5OWE1NmExNjA1NTIzYWI3NzU3NDM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-04-17T06:08:00Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-04-17T06:08:00Z"}, "message": "Cleanup: Rename 'db' variable to 'diag'", "tree": {"sha": "c302fe131e4c81f800994e50e0167422b5529713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c302fe131e4c81f800994e50e0167422b5529713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/870ae36f853b560811399a56a1605523ab775743", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE6VFioMHrom999LRAK0OZxL9Ny94FAl6ZR+4ACgkQK0OZxL9N\ny96s8w/8Dw0Ih4oVqYgabvoMxmS5SbHQthAfcHeQCHfW5sT1sQrZq0kuzdqx5ARR\nOP8aVNihdmXnnHLEeXrN0Prm6lqQwIFwri500X1mVMlB3vNDQMIX+jFIaP8njI9v\nWRh5aYzwVuqw0b0QT9UeJIy7/OrQjur6+Uwa7AZPM0rWdDo6KqbEzc0XW9UNycCb\nAGCev4xre345Hx1kIXI+XgviFoTRUr+JMT/syq71xxowO9sFvS6+zMvEHFQGl4UM\n89jQ2xAWN3sSdWAXE9rywxsly4rMgi6vYS3AasI+N8R/B0WKShkgGeUZRUiaAuh1\npdC7MOKhoWLNhk0Yf/qAbHOUKVzUcjK/krT2Bo57YzRIEKYmt0MaMI5kp9NMhDbf\niUJi+AAyC8f0rh6Tao6THtU0Lz6MBGZCmchCwVzcmcyig3ubhplflv4sL/gvMzC+\ni3rlN16SGmlprfKDaojQ7ON9BcqV2H7FQkdIwAXsvx2bAqNILWnjVa298JJiI5Ym\nCoUXUnmlTXbnzmzoIUufNpbHqiOyrUEhfD0tifnoTCY30f7K3VqEwoj8AahQlD36\nv8g/vHFNdPxptSso56rSveWxkCnOUaucGCwjPlKsHZJIfIkmO1ymOr3/+G/P2wQ9\nExYA+dKhg31gL3/ZimKZECYRYjke0IErFCGqxiSIr6/Txfkt6HI=\n=SHVQ\n-----END PGP SIGNATURE-----", "payload": "tree c302fe131e4c81f800994e50e0167422b5529713\nparent 8ae143fcd07258dfc381d26337020253fedd322f\nauthor Philipp Hansch <dev@phansch.net> 1587103680 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1587103680 +0200\n\nCleanup: Rename 'db' variable to 'diag'\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/870ae36f853b560811399a56a1605523ab775743", "html_url": "https://github.com/rust-lang/rust/commit/870ae36f853b560811399a56a1605523ab775743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/870ae36f853b560811399a56a1605523ab775743/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae143fcd07258dfc381d26337020253fedd322f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae143fcd07258dfc381d26337020253fedd322f", "html_url": "https://github.com/rust-lang/rust/commit/8ae143fcd07258dfc381d26337020253fedd322f"}], "stats": {"total": 601, "additions": 302, "deletions": 299}, "files": [{"sha": "05e2650d0b715b06cc2aa67dcb4c8d0db0c187f6", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -131,11 +131,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                 ASSIGN_OP_PATTERN,\n                                 expr.span,\n                                 \"manual implementation of an assign operation\",\n-                                |db| {\n+                                |diag| {\n                                     if let (Some(snip_a), Some(snip_r)) =\n                                         (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n                                     {\n-                                        db.span_suggestion(\n+                                        diag.span_suggestion(\n                                             expr.span,\n                                             \"replace it with\",\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n@@ -199,12 +199,12 @@ fn lint_misrefactored_assign_op(\n         MISREFACTORED_ASSIGN_OP,\n         expr.span,\n         \"variable appears on both sides of an assignment operation\",\n-        |db| {\n+        |diag| {\n             if let (Some(snip_a), Some(snip_r)) = (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs_other.span)) {\n                 let a = &sugg::Sugg::hir(cx, assignee, \"..\");\n                 let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n                 let long = format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n-                db.span_suggestion(\n+                diag.span_suggestion(\n                     expr.span,\n                     &format!(\n                         \"Did you mean `{} = {} {} {}` or `{}`? Consider replacing it with\",\n@@ -217,7 +217,7 @@ fn lint_misrefactored_assign_op(\n                     format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n                     Applicability::MaybeIncorrect,\n                 );\n-                db.span_suggestion(\n+                diag.span_suggestion(\n                     expr.span,\n                     \"or\",\n                     long,"}, {"sha": "6768501145d06b295f4d982d807825f55607566e", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -273,9 +273,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Attributes {\n                                                 USELESS_ATTRIBUTE,\n                                                 line_span,\n                                                 \"useless lint attribute\",\n-                                                |db| {\n+                                                |diag| {\n                                                     sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                    db.span_suggestion(\n+                                                    diag.span_suggestion(\n                                                         line_span,\n                                                         \"if you just forgot a `!`, use\",\n                                                         sugg,\n@@ -329,7 +329,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n                     UNKNOWN_CLIPPY_LINTS,\n                     lint.span(),\n                     &format!(\"unknown clippy lint: clippy::{}\", name),\n-                    |db| {\n+                    |diag| {\n                         let name_lower = name.as_str().to_lowercase();\n                         let symbols = lint_store.get_lints().iter().map(\n                             |l| Symbol::intern(&l.name_lower())\n@@ -341,14 +341,14 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n                         );\n                         if name.as_str().chars().any(char::is_uppercase)\n                             && lint_store.find_lints(&format!(\"clippy::{}\", name_lower)).is_ok() {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 lint.span(),\n                                 \"lowercase the lint name\",\n                                 format!(\"clippy::{}\", name_lower),\n                                 Applicability::MachineApplicable,\n                             );\n                         } else if let Some(sugg) = sugg {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 lint.span(),\n                                 \"did you mean\",\n                                 sugg.to_string(),"}, {"sha": "ccb62cb038fd0a4c7aab05a7178d31e840d7e6e1", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -137,9 +137,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n                                    VERBOSE_BIT_MASK,\n                                    e.span,\n                                    \"bit mask could be simplified with a call to `trailing_zeros`\",\n-                                   |db| {\n+                                   |diag| {\n                     let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n-                    db.span_suggestion(\n+                    diag.span_suggestion(\n                         e.span,\n                         \"try\",\n                         format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),"}, {"sha": "8031052e073d5f8eacf8c45187ca7e0bf185ddb2", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -376,13 +376,13 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                             LOGIC_BUG,\n                             e.span,\n                             \"this boolean expression contains a logic bug\",\n-                            |db| {\n-                                db.span_help(\n+                            |diag| {\n+                                diag.span_help(\n                                     h2q.terminals[i].span,\n                                     \"this expression can be optimized out by applying boolean operations to the \\\n                                      outer expression\",\n                                 );\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     e.span,\n                                     \"it would look like the following\",\n                                     suggest(self.cx, suggestion, &h2q.terminals),\n@@ -411,8 +411,8 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                     NONMINIMAL_BOOL,\n                     e.span,\n                     \"this boolean expression can be simplified\",\n-                    |db| {\n-                        db.span_suggestions(\n+                    |diag| {\n+                        diag.span_suggestions(\n                             e.span,\n                             \"try\",\n                             suggestions.into_iter(),"}, {"sha": "8090f4673aae0e225f5507869893c6cfcd4c639b", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -137,10 +137,10 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n             if expr.span.ctxt() != inner.span.ctxt() {\n                 return;\n             }\n-            span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this `if` statement can be collapsed\", |db| {\n+            span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this `if` statement can be collapsed\", |diag| {\n                 let lhs = Sugg::ast(cx, check, \"..\");\n                 let rhs = Sugg::ast(cx, check_inner, \"..\");\n-                db.span_suggestion(\n+                diag.span_suggestion(\n                     expr.span,\n                     \"try\",\n                     format!("}, {"sha": "1afd401ca6814dc6733dd3eb16bd2da5d0ffaac2", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -279,8 +279,8 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr<'_>) {\n                 MATCH_SAME_ARMS,\n                 j.body.span,\n                 \"this `match` has identical arm bodies\",\n-                |db| {\n-                    db.span_note(i.body.span, \"same as this\");\n+                |diag| {\n+                    diag.span_note(i.body.span, \"same as this\");\n \n                     // Note: this does not use `span_suggestion` on purpose:\n                     // there is no clean way\n@@ -296,15 +296,15 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr<'_>) {\n                         // if the last arm is _, then i could be integrated into _\n                         // note that i.pat cannot be _, because that would mean that we're\n                         // hiding all the subsequent arms, and rust won't compile\n-                        db.span_note(\n+                        diag.span_note(\n                             i.body.span,\n                             &format!(\n                                 \"`{}` has the same arm body as the `_` wildcard, consider removing it\",\n                                 lhs\n                             ),\n                         );\n                     } else {\n-                        db.span_help(i.pat.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs));\n+                        diag.span_help(i.pat.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs));\n                     }\n                 },\n             );"}, {"sha": "015fd9ed59f4e6375f6d0c45fae652e32f2f2571", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -119,9 +119,9 @@ fn check_hash_peq<'a, 'tcx>(\n                     span_lint_and_then(\n                         cx, DERIVE_HASH_XOR_EQ, span,\n                         mess,\n-                        |db| {\n+                        |diag| {\n                         if let Some(node_id) = cx.tcx.hir().as_local_hir_id(impl_id) {\n-                            db.span_note(\n+                            diag.span_note(\n                                 cx.tcx.hir().span(node_id),\n                                 \"`PartialEq` implemented here\"\n                             );\n@@ -168,8 +168,8 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait\n             EXPL_IMPL_CLONE_ON_COPY,\n             item.span,\n             \"you are implementing `Clone` explicitly on a `Copy` type\",\n-            |db| {\n-                db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n+            |diag| {\n+                diag.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n             },\n         );\n     }"}, {"sha": "77ae6dbde72b430c5ef84cc44af6ba2e32eb939a", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -45,8 +45,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants.is_empty() {\n-                span_lint_and_then(cx, EMPTY_ENUM, item.span, \"enum with no variants\", |db| {\n-                    db.span_help(\n+                span_lint_and_then(cx, EMPTY_ENUM, item.span, \"enum with no variants\", |diag| {\n+                    diag.span_help(\n                         item.span,\n                         \"consider using the uninhabited type `!` (never type) or a wrapper \\\n                          around it to introduce a type which can't be instantiated\","}, {"sha": "1e6b1b1e4d112ee857c8b6eb1284402c5dc2bd5e", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -148,15 +148,15 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n             if snippet_opt(self.cx, self.map.span) == snippet_opt(self.cx, params[0].span);\n             then {\n                 span_lint_and_then(self.cx, MAP_ENTRY, self.span,\n-                                   &format!(\"usage of `contains_key` followed by `insert` on a `{}`\", self.ty), |db| {\n+                                   &format!(\"usage of `contains_key` followed by `insert` on a `{}`\", self.ty), |diag| {\n                     if self.sole_expr {\n                         let mut app = Applicability::MachineApplicable;\n                         let help = format!(\"{}.entry({}).or_insert({});\",\n                                            snippet_with_applicability(self.cx, self.map.span, \"map\", &mut app),\n                                            snippet_with_applicability(self.cx, params[1].span, \"..\", &mut app),\n                                            snippet_with_applicability(self.cx, params[2].span, \"..\", &mut app));\n \n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             self.span,\n                             \"consider using\",\n                             help,\n@@ -168,7 +168,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n-                        db.span_label(\n+                        diag.span_label(\n                             self.span,\n                             &help,\n                         );"}, {"sha": "4cf58af3ba40f18b4a9a574ae842792a84bda799", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -110,11 +110,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                 OP_REF,\n                                 e.span,\n                                 \"needlessly taken reference of both operands\",\n-                                |db| {\n+                                |diag| {\n                                     let lsnip = snippet(cx, l.span, \"...\").to_string();\n                                     let rsnip = snippet(cx, r.span, \"...\").to_string();\n                                     multispan_sugg(\n-                                        db,\n+                                        diag,\n                                         \"use the values directly\".to_string(),\n                                         vec![(left.span, lsnip), (right.span, rsnip)],\n                                     );\n@@ -124,9 +124,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                             && !rcpy\n                             && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()])\n                         {\n-                            span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n+                            span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |diag| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     left.span,\n                                     \"use the left value directly\",\n                                     lsnip,\n@@ -142,9 +142,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                 OP_REF,\n                                 e.span,\n                                 \"needlessly taken reference of right operand\",\n-                                |db| {\n+                                |diag| {\n                                     let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                    db.span_suggestion(\n+                                    diag.span_suggestion(\n                                         right.span,\n                                         \"use the right value directly\",\n                                         rsnip,\n@@ -161,9 +161,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         if (requires_ref || lcpy)\n                             && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()])\n                         {\n-                            span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n+                            span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |diag| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     left.span,\n                                     \"use the left value directly\",\n                                     lsnip,\n@@ -179,9 +179,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         if (requires_ref || rcpy)\n                             && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()])\n                         {\n-                            span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n+                            span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |diag| {\n                                 let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     right.span,\n                                     \"use the right value directly\",\n                                     rsnip,"}, {"sha": "3d27d8d5c8ae1a90e3d83802b010313da634eb46", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -101,9 +101,9 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n             if compare_inputs(&mut iter_input_pats(decl, body), &mut args.iter());\n \n             then {\n-                span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |db| {\n+                span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |diag| {\n                     if let Some(snippet) = snippet_opt(cx, caller.span) {\n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             expr.span,\n                             \"remove closure as shown\",\n                             snippet,\n@@ -131,8 +131,8 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n             if let Some(name) = get_ufcs_type_name(cx, method_def_id, &args[0]);\n \n             then {\n-                span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure found\", |db| {\n-                    db.span_suggestion(\n+                span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure found\", |diag| {\n+                    diag.span_suggestion(\n                         expr.span,\n                         \"remove closure as shown\",\n                         format!(\"{}::{}\", name, path.ident.name),"}, {"sha": "17639cc2a0643798c4b2e701d87758869fcebb6b", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -117,11 +117,11 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n                         FALLIBLE_IMPL_FROM,\n                         impl_span,\n                         \"consider implementing `TryFrom` instead\",\n-                        move |db| {\n-                            db.help(\n+                        move |diag| {\n+                            diag.help(\n                                 \"`From` is intended for infallible conversions only. \\\n                                  Use `TryFrom` if there's a possibility for the conversion to fail.\");\n-                            db.span_note(fpu.result, \"potential failure(s)\");\n+                            diag.span_note(fpu.result, \"potential failure(s)\");\n                         });\n                 }\n             }"}, {"sha": "7eae14dbf3f049501b9c04d708cfaa8ddda1502e", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -61,8 +61,8 @@ fn span_useless_format<T: LintContext>(cx: &T, span: Span, help: &str, mut sugg:\n         sugg.push(';');\n     }\n \n-    span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-        db.span_suggestion(\n+    span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |diag| {\n+        diag.span_suggestion(\n             to_replace,\n             help,\n             sugg,"}, {"sha": "7100bad996cd1193adc85a705e82d1152af9004b", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -416,8 +416,8 @@ fn check_needless_must_use(\n             MUST_USE_UNIT,\n             fn_header_span,\n             \"this unit-returning function has a `#[must_use]` attribute\",\n-            |db| {\n-                db.span_suggestion(\n+            |diag| {\n+                diag.span_suggestion(\n                     attr.span,\n                     \"remove the attribute\",\n                     \"\".into(),\n@@ -454,9 +454,9 @@ fn check_must_use_candidate<'a, 'tcx>(\n     {\n         return;\n     }\n-    span_lint_and_then(cx, MUST_USE_CANDIDATE, fn_span, msg, |db| {\n+    span_lint_and_then(cx, MUST_USE_CANDIDATE, fn_span, msg, |diag| {\n         if let Some(snippet) = snippet_opt(cx, fn_span) {\n-            db.span_suggestion(\n+            diag.span_suggestion(\n                 fn_span,\n                 \"add the attribute\",\n                 format!(\"#[must_use] {}\", snippet),"}, {"sha": "4b7c2c4156ecaefa96317b978a2ff6e2acdc0937", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -58,8 +58,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n \n-                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion(\n+                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n+                            diag.span_suggestion(\n                                 e.span,\n                                 \"consider removing `.into()`\",\n                                 sugg,\n@@ -73,8 +73,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     let b = cx.tables.expr_ty(&args[0]);\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n-                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion(\n+                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n+                            diag.span_suggestion(\n                                 e.span,\n                                 \"consider removing `.into_iter()`\",\n                                 sugg,\n@@ -95,8 +95,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                                 let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n-                                span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                                    db.span_suggestion(\n+                                span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n+                                    diag.span_suggestion(\n                                         e.span,\n                                         &sugg_msg,\n                                         sugg,"}, {"sha": "c4308fd26a3021092e9f653a016461e7904760c8", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -48,9 +48,9 @@ fn lint(cx: &LateContext<'_, '_>, outer_span: Span, inner_span: Span, msg: &str)\n     let outer_span = outer_span.source_callsite();\n     let inner_span = inner_span.source_callsite();\n \n-    span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing `return` statement\", |db| {\n+    span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing `return` statement\", |diag| {\n         if let Some(snippet) = snippet_opt(cx, inner_span) {\n-            db.span_suggestion(\n+            diag.span_suggestion(\n                 outer_span,\n                 msg,\n                 format!(\"return {}\", snippet),"}, {"sha": "7e2975ac2ae907fe0ab7a4c8ac2111a3450edb46", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -82,8 +82,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n                             MULTIPLE_INHERENT_IMPL,\n                             *additional_span,\n                             \"Multiple implementations of this structure\",\n-                            |db| {\n-                                db.span_note(*initial_span, \"First implementation here\");\n+                            |diag| {\n+                                diag.span_note(*initial_span, \"First implementation here\");\n                             },\n                         )\n                     })"}, {"sha": "1ebfb3c8162a1db111635a5428ad895c795798b9", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -49,8 +49,8 @@ fn check_attrs(cx: &LateContext<'_, '_>, name: Name, attrs: &[Attribute]) {\n             INLINE_FN_WITHOUT_BODY,\n             attr.span,\n             &format!(\"use of `#[inline]` on trait method `{}` which has no body\", name),\n-            |db| {\n-                db.suggest_remove_item(cx, attr.span, \"remove\", Applicability::MachineApplicable);\n+            |diag| {\n+                diag.suggest_remove_item(cx, attr.span, \"remove\", Applicability::MachineApplicable);\n             },\n         );\n     }"}, {"sha": "2392ad4d7a12ee76a4c3dd80c4a7c7200a762f86", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -154,8 +154,8 @@ impl IntPlusOne {\n             INT_PLUS_ONE,\n             block.span,\n             \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n-            |db| {\n-                db.span_suggestion(\n+            |diag| {\n+                diag.span_suggestion(\n                     block.span,\n                     \"change it to\",\n                     recommendation,"}, {"sha": "c9e12fc535ec0ee3bd73228221679097e727285e", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -70,8 +70,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeConstArrays {\n                     LARGE_CONST_ARRAYS,\n                     item.span,\n                     \"large array defined as const\",\n-                    |db| {\n-                        db.span_suggestion(\n+                    |diag| {\n+                        diag.span_suggestion(\n                             sugg_span,\n                             \"make this a static item\",\n                             \"static\".to_string(),"}, {"sha": "5bc3234e3252f2a3ca8ef5e323cd40da30f76096", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -98,12 +98,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                         LARGE_ENUM_VARIANT,\n                         def.variants[i].span,\n                         \"large size difference between variants\",\n-                        |db| {\n-                            db.span_label(\n+                        |diag| {\n+                            diag.span_label(\n                                 def.variants[(largest.1).0].span,\n                                 &format!(\"this variant is {} bytes\", largest.0),\n                             );\n-                            db.span_note(\n+                            diag.span_note(\n                                 def.variants[(second.1).0].span,\n                                 &format!(\"and the second-largest variant is {} bytes:\", second.0),\n                             );\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                                     VariantData::Unit(..) => unreachable!(),\n                                 };\n                                 if let Some(snip) = snippet_opt(cx, span) {\n-                                    db.span_suggestion(\n+                                    diag.span_suggestion(\n                                         span,\n                                         help_text,\n                                         format!(\"Box<{}>\", snip),\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                                     return;\n                                 }\n                             }\n-                            db.span_help(def.variants[i].span, help_text);\n+                            diag.span_help(def.variants[i].span, help_text);\n                         },\n                     );\n                 }"}, {"sha": "398a3103a037194ab5c1ffe557412244405d9cea", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -120,15 +120,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                                        USELESS_LET_IF_SEQ,\n                                        span,\n                                        \"`if _ { .. } else { .. }` is an expression\",\n-                                       |db| {\n-                                           db.span_suggestion(\n+                                       |diag| {\n+                                           diag.span_suggestion(\n                                                 span,\n                                                 \"it is more idiomatic to write\",\n                                                 sug,\n                                                 Applicability::HasPlaceholders,\n                                             );\n                                            if !mutability.is_empty() {\n-                                               db.note(\"you might not need `mut` at all\");\n+                                               diag.note(\"you might not need `mut` at all\");\n                                            }\n                                        });\n                 }"}, {"sha": "345ae53f845ab88c5e7678e7f6f2825bb84be217", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -1164,9 +1164,9 @@ fn check_for_loop_range<'a, 'tcx>(\n                         NEEDLESS_RANGE_LOOP,\n                         expr.span,\n                         &format!(\"the loop variable `{}` is used to index `{}`\", ident.name, indexed),\n-                        |db| {\n+                        |diag| {\n                             multispan_sugg(\n-                                db,\n+                                diag,\n                                 \"consider using an iterator\".to_string(),\n                                 vec![\n                                     (pat.span, format!(\"({}, <item>)\", ident.name)),\n@@ -1193,9 +1193,9 @@ fn check_for_loop_range<'a, 'tcx>(\n                             \"the loop variable `{}` is only used to index `{}`.\",\n                             ident.name, indexed\n                         ),\n-                        |db| {\n+                        |diag| {\n                             multispan_sugg(\n-                                db,\n+                                diag,\n                                 \"consider using an iterator\".to_string(),\n                                 vec![(pat.span, \"<item>\".to_string()), (arg.span, repl)],\n                             );\n@@ -1287,8 +1287,8 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                         REVERSE_RANGE_LOOP,\n                         expr.span,\n                         \"this range is empty so this for loop will never run\",\n-                        |db| {\n-                            db.span_suggestion(\n+                        |diag| {\n+                            diag.span_suggestion(\n                                 arg.span,\n                                 \"consider using the following if you are attempting to iterate over this \\\n                                  range in reverse\",\n@@ -1561,10 +1561,10 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n                     FOR_KV_MAP,\n                     expr.span,\n                     &format!(\"you seem to want to iterate on a map's {}s\", kind),\n-                    |db| {\n+                    |diag| {\n                         let map = sugg::Sugg::hir(cx, arg, \"map\");\n                         multispan_sugg(\n-                            db,\n+                            diag,\n                             \"use the corresponding method\".into(),\n                             vec![\n                                 (pat_span, snippet(cx, new_pat_span, kind).into_owned()),\n@@ -2363,12 +2363,12 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr<'_\n             WHILE_IMMUTABLE_CONDITION,\n             cond.span,\n             \"variables in the condition are not mutated in the loop body\",\n-            |db| {\n-                db.note(\"this may lead to an infinite or to a never running loop\");\n+            |diag| {\n+                diag.note(\"this may lead to an infinite or to a never running loop\");\n \n                 if has_break_or_return {\n-                    db.note(\"this loop contains `return`s or `break`s\");\n-                    db.help(\"rewrite it as `if cond { loop { } }`\");\n+                    diag.note(\"this loop contains `return`s or `break`s\");\n+                    diag.help(\"rewrite it as `if cond { loop { } }`\");\n                 }\n             },\n         );\n@@ -2471,8 +2471,8 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n                 match_type(cx, ty, &paths::HASHMAP) {\n                 if method.ident.name == sym!(len) {\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n-                        db.span_suggestion(\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n+                        diag.span_suggestion(\n                             span,\n                             \"replace with\",\n                             \".count()\".to_string(),\n@@ -2482,8 +2482,8 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n                 }\n                 if method.ident.name == sym!(is_empty) {\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n-                        db.span_suggestion(\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n+                        diag.span_suggestion(\n                             span,\n                             \"replace with\",\n                             \".next().is_none()\".to_string(),\n@@ -2494,13 +2494,13 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n                 if method.ident.name == sym!(contains) {\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n                         let (arg, pred) = if contains_arg.starts_with('&') {\n                             (\"x\", &contains_arg[1..])\n                         } else {\n                             (\"&x\", &*contains_arg)\n                         };\n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             span,\n                             \"replace with\",\n                             format!("}, {"sha": "fecd91c7814dcc8eb8fa3c3f2c58c7bb4ca0cb49", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -224,13 +224,13 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt<'_>, expr: &hir::\n             binding = let_binding_name(cx, var_arg)\n         );\n \n-        span_lint_and_then(cx, lint, expr.span, &msg, |db| {\n-            db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::MachineApplicable);\n+        span_lint_and_then(cx, lint, expr.span, &msg, |diag| {\n+            diag.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::MachineApplicable);\n         });\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = suggestion_msg(\"closure\", map_type);\n \n-        span_lint_and_then(cx, lint, expr.span, &msg, |db| {\n+        span_lint_and_then(cx, lint, expr.span, &msg, |diag| {\n             if let Some(reduced_expr_span) = reduce_unit_expression(cx, closure_expr) {\n                 let suggestion = format!(\n                     \"if let {0}({1}) = {2} {{ {3} }}\",\n@@ -239,7 +239,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt<'_>, expr: &hir::\n                     snippet(cx, var_arg.span, \"_\"),\n                     snippet(cx, reduced_expr_span, \"_\")\n                 );\n-                db.span_suggestion(\n+                diag.span_suggestion(\n                     stmt.span,\n                     \"try this\",\n                     suggestion,\n@@ -252,7 +252,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt<'_>, expr: &hir::\n                     snippet(cx, binding.pat.span, \"_\"),\n                     snippet(cx, var_arg.span, \"_\"),\n                 );\n-                db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::HasPlaceholders);\n+                diag.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::HasPlaceholders);\n             }\n         });\n     }"}, {"sha": "a3a05fd1caa386bb553d44b34d81bfe3414df645", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -569,7 +569,7 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>], e\n             MATCH_BOOL,\n             expr.span,\n             \"you seem to be trying to match on a boolean expression\",\n-            move |db| {\n+            move |diag| {\n                 if arms.len() == 2 {\n                     // no guards\n                     let exprs = if let PatKind::Lit(ref arm_bool) = arms[0].pat.kind {\n@@ -611,7 +611,7 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>], e\n                         };\n \n                         if let Some(sugg) = sugg {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 expr.span,\n                                 \"consider using an `if`/`else` expression\",\n                                 sugg,\n@@ -817,9 +817,9 @@ fn check_match_ref_pats(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>\n             }\n         }));\n \n-        span_lint_and_then(cx, MATCH_REF_PATS, expr.span, title, |db| {\n+        span_lint_and_then(cx, MATCH_REF_PATS, expr.span, title, |diag| {\n             if !expr.span.from_expansion() {\n-                multispan_sugg(db, msg.to_owned(), suggs);\n+                multispan_sugg(diag, msg.to_owned(), suggs);\n             }\n         });\n     }"}, {"sha": "3f953655670cfcee0cb5cf6bffbc4b8e4afc28de", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n                     MEM_DISCRIMINANT_NON_ENUM,\n                     expr.span,\n                     &format!(\"calling `mem::discriminant` on non-enum type `{}`\", ty_param),\n-                    |db| {\n+                    |diag| {\n                         // if this is a reference to an enum, suggest dereferencing\n                         let (base_ty, ptr_depth) = walk_ptrs_ty_depth(ty_param);\n                         if ptr_depth >= 1 && base_ty.is_enum() {\n@@ -66,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n                             }\n \n                             let derefs: String = iter::repeat('*').take(derefs_needed).collect();\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 param.span,\n                                 \"try dereferencing\",\n                                 format!(\"{}{}\", derefs, snippet(cx, cur_expr.span, \"<param>\")),"}, {"sha": "69639f4532334fdc9323945b808e9f356da506c9", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -178,11 +178,11 @@ fn check_replace_with_default(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest: &E\n                     MEM_REPLACE_WITH_DEFAULT,\n                     expr_span,\n                     \"replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\",\n-                    |db| {\n+                    |diag| {\n                         if !in_macro(expr_span) {\n                             let suggestion = format!(\"std::mem::take({})\", snippet(cx, dest.span, \"\"));\n \n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 expr_span,\n                                 \"consider using\",\n                                 suggestion,"}, {"sha": "06358dfb9196906bfc1d2f73b0daaee7aa46822a", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -22,14 +22,14 @@ pub fn lint<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &hir::Expr<'_>, arg: &hir::E\n                 INEFFICIENT_TO_STRING,\n                 expr.span,\n                 &format!(\"calling `to_string` on `{}`\", arg_ty),\n-                |db| {\n-                    db.help(&format!(\n+                |diag| {\n+                    diag.help(&format!(\n                         \"`{}` implements `ToString` through a slower blanket impl, but `{}` has a fast specialization of `ToString`\",\n                         self_ty, deref_self_ty\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;\n                     let arg_snippet = snippet_with_applicability(cx, arg.span, \"..\", &mut applicability);\n-                    db.span_suggestion(\n+                    diag.span_suggestion(\n                         expr.span,\n                         \"try dereferencing the receiver\",\n                         format!(\"({}{}).to_string()\", \"*\".repeat(deref_count), arg_snippet),"}, {"sha": "2337380c7dd17a01f3b392e45e61f8a1e16bbb30", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -1932,7 +1932,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n                 expr.span,\n                 \"using `clone` on a double-reference; \\\n                  this will copy the reference instead of cloning the inner type\",\n-                |db| {\n+                |diag| {\n                     if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n                         let mut ty = innermost;\n                         let mut n = 0;\n@@ -1943,13 +1943,13 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n                         let refs: String = iter::repeat('&').take(n + 1).collect();\n                         let derefs: String = iter::repeat('*').take(n).collect();\n                         let explicit = format!(\"{}{}::clone({})\", refs, ty, snip);\n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             expr.span,\n                             \"try dereferencing it\",\n                             format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n                             Applicability::MaybeIncorrect,\n                         );\n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             expr.span,\n                             \"or try being explicit about what type to clone\",\n                             explicit,\n@@ -2008,9 +2008,9 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n         } else {\n             snip = None;\n         }\n-        span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |db| {\n+        span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |diag| {\n             if let Some((text, snip)) = snip {\n-                db.span_suggestion(expr.span, text, snip, Applicability::Unspecified);\n+                diag.span_suggestion(expr.span, text, snip, Applicability::Unspecified);\n             }\n         });\n     }\n@@ -2097,9 +2097,9 @@ fn lint_cstring_as_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, source: &\n                 TEMPORARY_CSTRING_AS_PTR,\n                 expr.span,\n                 \"you are getting the inner pointer of a temporary `CString`\",\n-                |db| {\n-                    db.note(\"that pointer will be invalid outside this expression\");\n-                    db.span_help(unwrap.span, \"assign the `CString` to a variable to extend its lifetime\");\n+                |diag| {\n+                    diag.note(\"that pointer will be invalid outside this expression\");\n+                    diag.span_help(unwrap.span, \"assign the `CString` to a variable to extend its lifetime\");\n                 });\n         }\n     }"}, {"sha": "bf9dd3c9369298ad06f81d97acdaef7f90ad6971", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -66,7 +66,7 @@ pub(super) fn lint<'a, 'tcx>(\n             arg, suggest\n         );\n \n-        span_lint_and_then(cx, OPTION_MAP_UNWRAP_OR, expr.span, msg, |db| {\n+        span_lint_and_then(cx, OPTION_MAP_UNWRAP_OR, expr.span, msg, |diag| {\n             let map_arg_span = map_args[1].span;\n \n             let mut suggestion = vec![\n@@ -81,7 +81,7 @@ pub(super) fn lint<'a, 'tcx>(\n                 suggestion.push((map_arg_span.with_hi(map_arg_span.lo()), format!(\"{}, \", unwrap_snippet)));\n             }\n \n-            db.multipart_suggestion(&format!(\"use `{}` instead\", suggest), suggestion, applicability);\n+            diag.multipart_suggestion(&format!(\"use `{}` instead\", suggest), suggestion, applicability);\n         });\n     }\n }"}, {"sha": "e6f4be333e7fb635cf6e827f03d658fcf03d4a54", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -290,8 +290,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                         init.hir_id,\n                         local.pat.span,\n                         \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n-                        |db| {\n-                            db.span_suggestion(\n+                        |diag| {\n+                            diag.span_suggestion(\n                                 stmt.span,\n                                 \"try\",\n                                 format!(\n@@ -317,9 +317,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                     SHORT_CIRCUIT_STATEMENT,\n                     stmt.span,\n                     \"boolean short circuit operator in statement may be clearer using an explicit test\",\n-                    |db| {\n+                    |diag| {\n                         let sugg = if binop.node == BinOpKind::Or { !sugg } else { sugg };\n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             stmt.span,\n                             \"replace it with\",\n                             format!(\n@@ -374,12 +374,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                         is_named_constant(cx, left) || is_named_constant(cx, right),\n                         is_comparing_arrays,\n                     );\n-                    span_lint_and_then(cx, lint, expr.span, msg, |db| {\n+                    span_lint_and_then(cx, lint, expr.span, msg, |diag| {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n                         if !is_comparing_arrays {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 expr.span,\n                                 \"consider comparing them within some error\",\n                                 format!(\n@@ -390,7 +390,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                                 Applicability::HasPlaceholders, // snippet\n                             );\n                         }\n-                        db.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error`\");\n+                        diag.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error`\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n@@ -601,10 +601,10 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr<'_>, other: &Expr<'_>) {\n         CMP_OWNED,\n         lint_span,\n         \"this creates an owned instance just for comparison\",\n-        |db| {\n+        |diag| {\n             // This also catches `PartialEq` implementations that call `to_owned`.\n             if other_gets_derefed {\n-                db.span_label(lint_span, \"try implementing the comparison without allocating\");\n+                diag.span_label(lint_span, \"try implementing the comparison without allocating\");\n                 return;\n             }\n \n@@ -616,7 +616,7 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr<'_>, other: &Expr<'_>) {\n                 snip.to_string()\n             };\n \n-            db.span_suggestion(\n+            diag.span_suggestion(\n                 lint_span,\n                 \"try\",\n                 try_hint,"}, {"sha": "75bbf0514c2dca15c8ebc270f9b193c305210038", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -425,12 +425,12 @@ impl EarlyLintPass for MiscEarlyLints {\n                                 REDUNDANT_CLOSURE_CALL,\n                                 expr.span,\n                                 \"Try not to call a closure in the expression where it is declared.\",\n-                                |db| {\n+                                |diag| {\n                                     if decl.inputs.is_empty() {\n                                         let mut app = Applicability::MachineApplicable;\n                                         let hint =\n                                             snippet_with_applicability(cx, block.span, \"..\", &mut app).into_owned();\n-                                        db.span_suggestion(expr.span, \"Try doing something like: \", hint, app);\n+                                        diag.span_suggestion(expr.span, \"Try doing something like: \", hint, app);\n                                     }\n                                 },\n                             );\n@@ -546,14 +546,14 @@ impl MiscEarlyLints {\n                     ZERO_PREFIXED_LITERAL,\n                     lit.span,\n                     \"this is a decimal constant\",\n-                    |db| {\n-                        db.span_suggestion(\n+                    |diag| {\n+                        diag.span_suggestion(\n                             lit.span,\n                             \"if you mean to use a decimal constant, remove the `0` to avoid confusion\",\n                             lit_snip.trim_start_matches(|c| c == '_' || c == '0').to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             lit.span,\n                             \"if you mean to use an octal constant, use `0o`\",\n                             format!(\"0o{}\", lit_snip.trim_start_matches(|c| c == '_' || c == '0')),"}, {"sha": "4ca90455bc4d1e81b44bbd1c8fdc51e61a99561a", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -95,10 +95,10 @@ fn check_const_operands<'a, 'tcx>(\n                 lhs_operand.string_representation.as_ref().unwrap(),\n                 rhs_operand.string_representation.as_ref().unwrap()\n             ),\n-            |db| {\n-                db.note(\"double check for expected result especially when interoperating with different languages\");\n+            |diag| {\n+                diag.note(\"double check for expected result especially when interoperating with different languages\");\n                 if lhs_operand.is_integral {\n-                    db.note(\"or consider using `rem_euclid` or similar function\");\n+                    diag.note(\"or consider using `rem_euclid` or similar function\");\n                 }\n             },\n         );\n@@ -113,10 +113,10 @@ fn check_non_const_operands<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Ex\n             MODULO_ARITHMETIC,\n             expr.span,\n             \"you are using modulo operator on types that might have different signs\",\n-            |db| {\n-                db.note(\"double check for expected result especially when interoperating with different languages\");\n+            |diag| {\n+                diag.note(\"double check for expected result especially when interoperating with different languages\");\n                 if operand_type.is_integral() {\n-                    db.note(\"or consider using `rem_euclid` or similar function\");\n+                    diag.note(\"or consider using `rem_euclid` or similar function\");\n                 }\n             },\n         );"}, {"sha": "9ee875d7516eba3d29e70f4a372f8797f3ed85ce", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -59,9 +59,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                             e.span,\n                             \"this expression borrows a reference that is immediately dereferenced \\\n                              by the compiler\",\n-                            |db| {\n+                            |diag| {\n                                 if let Some(snippet) = snippet_opt(cx, inner.span) {\n-                                    db.span_suggestion(\n+                                    diag.span_suggestion(\n                                         e.span,\n                                         \"change this to\",\n                                         snippet,\n@@ -92,9 +92,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                     NEEDLESS_BORROW,\n                     pat.span,\n                     \"this pattern creates a reference to a reference\",\n-                    |db| {\n+                    |diag| {\n                         if let Some(snippet) = snippet_opt(cx, name.span) {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 pat.span,\n                                 \"change this to\",\n                                 snippet,"}, {"sha": "e56489c6d434d609829f2d8676417d5c922fd98d", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -77,9 +77,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n                 let mut applicability = Applicability::MachineApplicable;\n                 span_lint_and_then(cx, NEEDLESS_BORROWED_REFERENCE, pat.span,\n                                    \"this pattern takes a reference on something that is being de-referenced\",\n-                                   |db| {\n+                                   |diag| {\n                                        let hint = snippet_with_applicability(cx, spanned_name.span, \"..\", &mut applicability).into_owned();\n-                                       db.span_suggestion(\n+                                       diag.span_suggestion(\n                                            pat.span,\n                                            \"try removing the `&ref` part and just keep\",\n                                            hint,"}, {"sha": "32e8f37062af84d21f2c6f8da4c93ee36748bc12", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -203,11 +203,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                     }\n \n                     // Dereference suggestion\n-                    let sugg = |db: &mut DiagnosticBuilder<'_>| {\n+                    let sugg = |diag: &mut DiagnosticBuilder<'_>| {\n                         if let ty::Adt(def, ..) = ty.kind {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did) {\n                                 if can_type_implement_copy(cx.tcx, cx.param_env, ty).is_ok() {\n-                                    db.span_help(span, \"consider marking this type as `Copy`\");\n+                                    diag.span_help(span, \"consider marking this type as `Copy`\");\n                                 }\n                             }\n                         }\n@@ -227,15 +227,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 }).unwrap());\n                             then {\n                                 let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     input.span,\n                                     \"consider changing the type to\",\n                                     slice_ty,\n                                     Applicability::Unspecified,\n                                 );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion(\n+                                    diag.span_suggestion(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or(\n@@ -256,15 +256,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         if match_type(cx, ty, &paths::STRING) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     input.span,\n                                     \"consider changing the type to\",\n                                     \"&str\".to_string(),\n                                     Applicability::Unspecified,\n                                 );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion(\n+                                    diag.span_suggestion(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or(\n@@ -293,7 +293,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                             );\n                             spans.sort_by_key(|&(span, _)| span);\n                         }\n-                        multispan_sugg(db, \"consider taking a reference instead\".to_string(), spans);\n+                        multispan_sugg(diag, \"consider taking a reference instead\".to_string(), spans);\n                     };\n \n                     span_lint_and_then("}, {"sha": "19e06ab66c42be20996e0e19dfe006790aa03f0d", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -168,8 +168,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                                 \"you should consider deriving a `Default` implementation for `{}`\",\n                                                 self_ty\n                                             ),\n-                                            |db| {\n-                                                db.suggest_item_with_attr(\n+                                            |diag| {\n+                                                diag.suggest_item_with_attr(\n                                                     cx,\n                                                     sp,\n                                                     \"try this\",\n@@ -187,8 +187,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                                 \"you should consider adding a `Default` implementation for `{}`\",\n                                                 self_ty\n                                             ),\n-                                            |db| {\n-                                                db.suggest_prepend_item(\n+                                            |diag| {\n+                                                diag.suggest_prepend_item(\n                                                     cx,\n                                                     item.span,\n                                                     \"try this\","}, {"sha": "bb257e5a542d98632f9f25c31bac6342c72504b7", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -118,22 +118,22 @@ fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: S\n     }\n \n     let (lint, msg, span) = source.lint();\n-    span_lint_and_then(cx, lint, span, msg, |db| {\n+    span_lint_and_then(cx, lint, span, msg, |diag| {\n         if span.from_expansion() {\n             return; // Don't give suggestions into macros.\n         }\n         match source {\n             Source::Item { .. } => {\n                 let const_kw_span = span.from_inner(InnerSpan::new(0, 5));\n-                db.span_label(const_kw_span, \"make this a static item (maybe with lazy_static)\");\n+                diag.span_label(const_kw_span, \"make this a static item (maybe with lazy_static)\");\n             },\n             Source::Assoc { ty: ty_span, .. } => {\n                 if ty.flags.intersects(TypeFlags::HAS_FREE_LOCAL_NAMES) {\n-                    db.span_label(ty_span, &format!(\"consider requiring `{}` to be `Copy`\", ty));\n+                    diag.span_label(ty_span, &format!(\"consider requiring `{}` to be `Copy`\", ty));\n                 }\n             },\n             Source::Expr { .. } => {\n-                db.help(\"assign this const to a local or static variable, and use the variable here\");\n+                diag.help(\"assign this const to a local or static variable, and use the variable here\");\n             },\n         }\n     });"}, {"sha": "c190ed42e3f05f0ccbcbdcbdfb521229cf492fbe", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -175,17 +175,17 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n                         arg.span,\n                         \"writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used \\\n                          with non-Vec-based slices.\",\n-                        |db| {\n+                        |diag| {\n                             if let Some(ref snippet) = ty_snippet {\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     arg.span,\n                                     \"change this to\",\n                                     format!(\"&[{}]\", snippet),\n                                     Applicability::Unspecified,\n                                 );\n                             }\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(), |x| {\n                                         Cow::Owned(format!(\"change `{}` to\", x))\n@@ -204,10 +204,10 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n                         PTR_ARG,\n                         arg.span,\n                         \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n-                        |db| {\n-                            db.span_suggestion(arg.span, \"change this to\", \"&str\".into(), Applicability::Unspecified);\n+                        |diag| {\n+                            diag.span_suggestion(arg.span, \"change this to\", \"&str\".into(), Applicability::Unspecified);\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion_short(\n+                                diag.span_suggestion_short(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(), |x| {\n                                         Cow::Owned(format!(\"change `{}` to\", x))\n@@ -239,8 +239,8 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n                                 PTR_ARG,\n                                 arg.span,\n                                 \"using a reference to `Cow` is not recommended.\",\n-                                |db| {\n-                                    db.span_suggestion(\n+                                |diag| {\n+                                    diag.span_suggestion(\n                                         arg.span,\n                                         \"change this to\",\n                                         \"&\".to_owned() + &r,\n@@ -277,9 +277,9 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n                 MUT_FROM_REF,\n                 ty.span,\n                 \"mutable borrow from immutable input(s)\",\n-                |db| {\n+                |diag| {\n                     let ms = MultiSpan::from_spans(immutables);\n-                    db.span_note(ms, \"immutable borrow here\");\n+                    diag.span_note(ms, \"immutable borrow here\");\n                 },\n             );\n         }"}, {"sha": "d7ce2e66d69fbb3af1fa666169e3f5c8f0b79443", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -150,19 +150,19 @@ fn check_exclusive_range_plus_one(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                 RANGE_PLUS_ONE,\n                 span,\n                 \"an inclusive range would be more readable\",\n-                |db| {\n+                |diag| {\n                     let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                     let end = Sugg::hir(cx, y, \"y\");\n                     if let Some(is_wrapped) = &snippet_opt(cx, span) {\n                         if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 span,\n                                 \"use\",\n                                 format!(\"({}..={})\", start, end),\n                                 Applicability::MaybeIncorrect,\n                             );\n                         } else {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 span,\n                                 \"use\",\n                                 format!(\"{}..={}\", start, end),\n@@ -187,10 +187,10 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                 RANGE_MINUS_ONE,\n                 expr.span,\n                 \"an exclusive range would be more readable\",\n-                |db| {\n+                |diag| {\n                     let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                     let end = Sugg::hir(cx, y, \"y\");\n-                    db.span_suggestion(\n+                    diag.span_suggestion(\n                         expr.span,\n                         \"use\",\n                         format!(\"{}..{}\", start, end),"}, {"sha": "898bd2aef8bf02620b983d7773c6b5a7a783de3c", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -243,20 +243,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                             }\n                         }\n \n-                        span_lint_hir_and_then(cx, REDUNDANT_CLONE, node, sugg_span, \"redundant clone\", |db| {\n-                            db.span_suggestion(\n+                        span_lint_hir_and_then(cx, REDUNDANT_CLONE, node, sugg_span, \"redundant clone\", |diag| {\n+                            diag.span_suggestion(\n                                 sugg_span,\n                                 \"remove this\",\n                                 String::new(),\n                                 app,\n                             );\n                             if used {\n-                                db.span_note(\n+                                diag.span_note(\n                                     span,\n                                     \"cloned value is neither consumed nor mutated\",\n                                 );\n                             } else {\n-                                db.span_note(\n+                                diag.span_note(\n                                     span.with_hi(span.lo() + BytePos(u32::try_from(dot).unwrap())),\n                                     \"this value is dropped without further use\",\n                                 );"}, {"sha": "bdc32dbba8782e59c531343babcee497d41f0382", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -93,9 +93,9 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n         REDUNDANT_PATTERN_MATCHING,\n         arms[0].pat.span,\n         &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n-        |db| {\n+        |diag| {\n             let span = expr.span.to(op.span);\n-            db.span_suggestion(\n+            diag.span_suggestion(\n                 span,\n                 \"try this\",\n                 format!(\"{}.{}{}\", snippet(cx, op.span, \"_\"), good_method, maybe_semi),\n@@ -155,9 +155,9 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n                 REDUNDANT_PATTERN_MATCHING,\n                 expr.span,\n                 &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n-                |db| {\n+                |diag| {\n                     let span = expr.span.to(op.span);\n-                    db.span_suggestion(\n+                    diag.span_suggestion(\n                         span,\n                         \"try this\",\n                         format!(\"{}.{}\", snippet(cx, op.span, \"_\"), good_method),"}, {"sha": "4479c560465a7e3f09fbd6cde8b35f25cde41a53", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -50,8 +50,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantPubCrate {\n                         REDUNDANT_PUB_CRATE,\n                         span,\n                         &format!(\"pub(crate) {} inside private module\", item.kind.descr()),\n-                        |db| {\n-                            db.span_suggestion(\n+                        |diag| {\n+                            diag.span_suggestion(\n                                 item.vis.span,\n                                 \"consider using\",\n                                 \"pub\".to_string(),"}, {"sha": "dd81d43e8641f763c410ff581e192b88958b99cd", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -53,8 +53,8 @@ impl RedundantStaticLifetimes {\n                             if lifetime.ident.name == rustc_span::symbol::kw::StaticLifetime {\n                                 let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n                                 let sugg = format!(\"&{}\", snip);\n-                                span_lint_and_then(cx, REDUNDANT_STATIC_LIFETIMES, lifetime.ident.span, reason, |db| {\n-                                    db.span_suggestion(\n+                                span_lint_and_then(cx, REDUNDANT_STATIC_LIFETIMES, lifetime.ident.span, reason, |diag| {\n+                                    diag.span_suggestion(\n                                         ty.span,\n                                         \"consider removing `'static`\",\n                                         sugg,"}, {"sha": "f7ab00b7304717682d77b058a711cef7b5414aba", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -154,16 +154,16 @@ impl Return {\n                     return;\n                 }\n \n-                span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n+                span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n                     if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                        db.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n+                        diag.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n                     }\n                 })\n             },\n             None => match replacement {\n                 RetReplacement::Empty => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n-                        db.span_suggestion(\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n+                        diag.span_suggestion(\n                             ret_span,\n                             \"remove `return`\",\n                             String::new(),\n@@ -172,8 +172,8 @@ impl Return {\n                     });\n                 },\n                 RetReplacement::Block => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n-                        db.span_suggestion(\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n+                        diag.span_suggestion(\n                             ret_span,\n                             \"replace `return` with an empty block\",\n                             \"{}\".to_string(),\n@@ -259,8 +259,8 @@ impl EarlyLintPass for Return {\n                 } else {\n                     (ty.span, Applicability::MaybeIncorrect)\n                 };\n-                span_lint_and_then(cx, UNUSED_UNIT, rspan, \"unneeded unit return type\", |db| {\n-                    db.span_suggestion(\n+                span_lint_and_then(cx, UNUSED_UNIT, rspan, \"unneeded unit return type\", |diag| {\n+                    diag.span_suggestion(\n                         rspan,\n                         \"remove the `-> ()`\",\n                         String::new(),\n@@ -279,8 +279,8 @@ impl EarlyLintPass for Return {\n             if is_unit_expr(expr) && !stmt.span.from_expansion();\n             then {\n                 let sp = expr.span;\n-                span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |db| {\n-                    db.span_suggestion(\n+                span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |diag| {\n+                    diag.span_suggestion(\n                         sp,\n                         \"remove the final `()`\",\n                         String::new(),\n@@ -295,8 +295,8 @@ impl EarlyLintPass for Return {\n         match e.kind {\n             ast::ExprKind::Ret(Some(ref expr)) | ast::ExprKind::Break(_, Some(ref expr)) => {\n                 if is_unit_expr(expr) && !expr.span.from_expansion() {\n-                    span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |db| {\n-                        db.span_suggestion(\n+                    span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |diag| {\n+                        diag.span_suggestion(\n                             expr.span,\n                             \"remove the `()`\",\n                             String::new(),"}, {"sha": "11360b0ef84955caf66cc128cbbbb2132cc96554", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -268,8 +268,8 @@ fn lint_shadow<'a, 'tcx>(\n                     snippet(cx, pattern_span, \"_\"),\n                     snippet(cx, expr.span, \"..\")\n                 ),\n-                |db| {\n-                    db.span_note(prev_span, \"previous binding is here\");\n+                |diag| {\n+                    diag.span_note(prev_span, \"previous binding is here\");\n                 },\n             );\n         } else if contains_name(name, expr) {\n@@ -282,9 +282,9 @@ fn lint_shadow<'a, 'tcx>(\n                     snippet(cx, pattern_span, \"_\"),\n                     snippet(cx, expr.span, \"..\")\n                 ),\n-                |db| {\n-                    db.span_note(expr.span, \"initialization happens here\");\n-                    db.span_note(prev_span, \"previous binding is here\");\n+                |diag| {\n+                    diag.span_note(expr.span, \"initialization happens here\");\n+                    diag.span_note(prev_span, \"previous binding is here\");\n                 },\n             );\n         } else {\n@@ -297,9 +297,9 @@ fn lint_shadow<'a, 'tcx>(\n                     snippet(cx, pattern_span, \"_\"),\n                     snippet(cx, expr.span, \"..\")\n                 ),\n-                |db| {\n-                    db.span_note(expr.span, \"initialization happens here\");\n-                    db.span_note(prev_span, \"previous binding is here\");\n+                |diag| {\n+                    diag.span_note(expr.span, \"initialization happens here\");\n+                    diag.span_note(prev_span, \"previous binding is here\");\n                 },\n             );\n         }\n@@ -309,8 +309,8 @@ fn lint_shadow<'a, 'tcx>(\n             SHADOW_UNRELATED,\n             span,\n             &format!(\"`{}` shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n-            |db| {\n-                db.span_note(prev_span, \"previous binding is here\");\n+            |diag| {\n+                diag.span_note(prev_span, \"previous binding is here\");\n             },\n         );\n     }"}, {"sha": "fb3706be1c2135bc581f42b66c27b072b20dec0d", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -170,8 +170,8 @@ impl SlowVectorInit {\n     ) {\n         let len_expr = Sugg::hir(cx, vec_alloc.len_expr, \"len\");\n \n-        span_lint_and_then(cx, lint, slow_fill.span, msg, |db| {\n-            db.span_suggestion(\n+        span_lint_and_then(cx, lint, slow_fill.span, msg, |diag| {\n+            diag.span_suggestion(\n                 vec_alloc.allocation_expr.span,\n                 \"consider replace allocation with\",\n                 format!(\"vec![0; {}]\", len_expr),"}, {"sha": "8fd0090f94e72cdb32cb4851ba1681974bfa5d7d", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -140,17 +140,17 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block<'_>) {\n                     MANUAL_SWAP,\n                     span,\n                     &format!(\"this looks like you are swapping{} manually\", what),\n-                    |db| {\n+                    |diag| {\n                         if !sugg.is_empty() {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 span,\n                                 \"try\",\n                                 sugg,\n                                 applicability,\n                             );\n \n                             if replace {\n-                                db.note(\"or maybe you should use `std::mem::replace`?\");\n+                                diag.note(\"or maybe you should use `std::mem::replace`?\");\n                             }\n                         }\n                     }\n@@ -242,9 +242,9 @@ fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block<'_>) {\n                                    ALMOST_SWAPPED,\n                                    span,\n                                    &format!(\"this looks like you are trying to swap{}\", what),\n-                                   |db| {\n+                                   |diag| {\n                                        if !what.is_empty() {\n-                                           db.span_suggestion(\n+                                           diag.span_suggestion(\n                                                span,\n                                                \"try\",\n                                                format!(\n@@ -254,7 +254,7 @@ fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block<'_>) {\n                                                ),\n                                                Applicability::MaybeIncorrect,\n                                            );\n-                                           db.note(\"or maybe you should use `std::mem::replace`?\");\n+                                           diag.note(\"or maybe you should use `std::mem::replace`?\");\n                                        }\n                                    });\n             }"}, {"sha": "b99d583c4bec03b70b1c64a15fd8ec332f2f20c8", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         USELESS_TRANSMUTE,\n                         e.span,\n                         \"transmute from a reference to a pointer\",\n-                        |db| {\n+                        |diag| {\n                             if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                 let rty_and_mut = ty::TypeAndMut {\n                                     ty: rty,\n@@ -329,7 +329,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n                                 };\n \n-                                db.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                                diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n                             }\n                         },\n                     ),\n@@ -338,9 +338,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         USELESS_TRANSMUTE,\n                         e.span,\n                         \"transmute from an integer to a pointer\",\n-                        |db| {\n+                        |diag| {\n                             if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     e.span,\n                                     \"try\",\n                                     arg.as_ty(&to_ty.to_string()).to_string(),\n@@ -385,7 +385,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                              (`{}`)\",\n                             from_ty, to_ty\n                         ),\n-                        |db| {\n+                        |diag| {\n                             let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                             let (deref, cast) = if mutbl == Mutability::Mut {\n                                 (\"&mut *\", \"*mut\")\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))\n                             };\n \n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 e.span,\n                                 \"try\",\n                                 sugg::make_unop(deref, arg).to_string(),\n@@ -413,14 +413,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             TRANSMUTE_INT_TO_CHAR,\n                             e.span,\n                             &format!(\"transmute from a `{}` to a `char`\", from_ty),\n-                            |db| {\n+                            |diag| {\n                                 let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                 let arg = if let ty::Int(_) = from_ty.kind {\n                                     arg.as_ty(ast::UintTy::U32.name_str())\n                                 } else {\n                                     arg\n                                 };\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     e.span,\n                                     \"consider using\",\n                                     format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n@@ -446,8 +446,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     TRANSMUTE_BYTES_TO_STR,\n                                     e.span,\n                                     &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                                    |db| {\n-                                        db.span_suggestion(\n+                                    |diag| {\n+                                        diag.span_suggestion(\n                                             e.span,\n                                             \"consider using\",\n                                             format!(\n@@ -466,7 +466,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         TRANSMUTE_PTR_TO_PTR,\n                                         e.span,\n                                         \"transmute from a reference to a reference\",\n-                                        |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                        |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                             let ty_from_and_mut = ty::TypeAndMut {\n                                                 ty: ty_from,\n                                                 mutbl: from_mutbl\n@@ -480,7 +480,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             } else {\n                                                 sugg_paren.addr_deref()\n                                             };\n-                                            db.span_suggestion(\n+                                            diag.span_suggestion(\n                                                 e.span,\n                                                 \"try\",\n                                                 sugg.to_string(),\n@@ -497,10 +497,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         TRANSMUTE_PTR_TO_PTR,\n                         e.span,\n                         \"transmute from a pointer to a pointer\",\n-                        |db| {\n+                        |diag| {\n                             if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                 let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n-                                db.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                                diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n                             }\n                         },\n                     ),\n@@ -510,10 +510,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             TRANSMUTE_INT_TO_BOOL,\n                             e.span,\n                             &format!(\"transmute from a `{}` to a `bool`\", from_ty),\n-                            |db| {\n+                            |diag| {\n                                 let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                 let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));\n-                                db.span_suggestion(\n+                                diag.span_suggestion(\n                                     e.span,\n                                     \"consider using\",\n                                     sugg::make_binop(ast::BinOpKind::Ne, &arg, &zero).to_string(),\n@@ -527,7 +527,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         TRANSMUTE_INT_TO_FLOAT,\n                         e.span,\n                         &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                        |db| {\n+                        |diag| {\n                             let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                             let arg = if let ty::Int(int_ty) = from_ty.kind {\n                                 arg.as_ty(format!(\n@@ -537,7 +537,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             } else {\n                                 arg\n                             };\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 e.span,\n                                 \"consider using\",\n                                 format!(\"{}::from_bits({})\", to_ty, arg.to_string()),\n@@ -550,7 +550,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         TRANSMUTE_FLOAT_TO_INT,\n                         e.span,\n                         &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                        |db| {\n+                        |diag| {\n                             let mut expr = &args[0];\n                             let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n \n@@ -581,7 +581,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 arg\n                             };\n \n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 e.span,\n                                 \"consider using\",\n                                 arg.to_string(),"}, {"sha": "f4408fc34a3aa5cc7c387637b14822f3d073dd0d", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -608,10 +608,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnitValue {\n                 if higher::is_from_for_desugar(local) {\n                     return;\n                 }\n-                span_lint_and_then(cx, LET_UNIT_VALUE, stmt.span, \"this let-binding has unit value\", |db| {\n+                span_lint_and_then(cx, LET_UNIT_VALUE, stmt.span, \"this let-binding has unit value\", |diag| {\n                     if let Some(expr) = &local.init {\n                         let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             stmt.span,\n                             \"omit the `let` binding\",\n                             format!(\"{};\", snip),\n@@ -1712,11 +1712,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n                     CHAR_LIT_AS_U8,\n                     expr.span,\n                     \"casting a character literal to `u8` truncates\",\n-                    |db| {\n-                        db.note(\"`char` is four bytes wide, but `u8` is a single byte\");\n+                    |diag| {\n+                        diag.note(\"`char` is four bytes wide, but `u8` is a single byte\");\n \n                         if c.is_ascii() {\n-                            db.span_suggestion(\n+                            diag.span_suggestion(\n                                 expr.span,\n                                 \"use a byte literal instead\",\n                                 format!(\"b{}\", snippet),\n@@ -2182,7 +2182,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n \n         fn suggestion<'a, 'tcx>(\n             cx: &LateContext<'a, 'tcx>,\n-            db: &mut DiagnosticBuilder<'_>,\n+            diag: &mut DiagnosticBuilder<'_>,\n             generics_span: Span,\n             generics_suggestion_span: Span,\n             target: &ImplicitHasherType<'_>,\n@@ -2197,7 +2197,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n             };\n \n             multispan_sugg(\n-                db,\n+                diag,\n                 \"consider adding a type parameter\".to_string(),\n                 vec![\n                     (\n@@ -2222,7 +2222,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n             );\n \n             if !vis.suggestions.is_empty() {\n-                multispan_sugg(db, \"...and use generic constructor\".into(), vis.suggestions);\n+                multispan_sugg(diag, \"...and use generic constructor\".into(), vis.suggestions);\n             }\n         }\n \n@@ -2268,8 +2268,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                             \"impl for `{}` should be generalized over different hashers\",\n                             target.type_name()\n                         ),\n-                        move |db| {\n-                            suggestion(cx, db, generics.span, generics_suggestion_span, target, ctr_vis);\n+                        move |diag| {\n+                            suggestion(cx, diag, generics.span, generics_suggestion_span, target, ctr_vis);\n                         },\n                     );\n                 }\n@@ -2306,8 +2306,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                                 \"parameter of type `{}` should be generalized over different hashers\",\n                                 target.type_name()\n                             ),\n-                            move |db| {\n-                                suggestion(cx, db, generics.span, generics_suggestion_span, target, ctr_vis);\n+                            move |diag| {\n+                                suggestion(cx, diag, generics.span, generics_suggestion_span, target, ctr_vis);\n                             },\n                         );\n                     }"}, {"sha": "5235c98efab13d1fa40884bb513ba02f35064fe6", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             &format!(\"You checked before that `{}()` cannot fail. \\\n                             Instead of checking and unwrapping, it's better to use `if let` or `match`.\",\n                             method_name.ident.name),\n-                            |db| { db.span_label(unwrappable.check.span, \"the check is happening here\"); },\n+                            |diag| { diag.span_label(unwrappable.check.span, \"the check is happening here\"); },\n                         );\n                     } else {\n                         span_lint_and_then(\n@@ -176,7 +176,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             expr.span,\n                             &format!(\"This call to `{}()` will always panic.\",\n                             method_name.ident.name),\n-                            |db| { db.span_label(unwrappable.check.span, \"because of this check\"); },\n+                            |diag| { diag.span_label(unwrappable.check.span, \"because of this check\"); },\n                         );\n                     }\n                 }"}, {"sha": "4dcf6c105ec63666a7136c876b9b04d901cfbf52", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -76,24 +76,24 @@ pub fn get_attr<'a>(\n                         }\n                     })\n             {\n-                let mut db = sess.struct_span_err(attr_segments[1].ident.span, \"Usage of deprecated attribute\");\n+                let mut diag = sess.struct_span_err(attr_segments[1].ident.span, \"Usage of deprecated attribute\");\n                 match *deprecation_status {\n                     DeprecationStatus::Deprecated => {\n-                        db.emit();\n+                        diag.emit();\n                         false\n                     },\n                     DeprecationStatus::Replaced(new_name) => {\n-                        db.span_suggestion(\n+                        diag.span_suggestion(\n                             attr_segments[1].ident.span,\n                             \"consider using\",\n                             new_name.to_string(),\n                             Applicability::MachineApplicable,\n                         );\n-                        db.emit();\n+                        diag.emit();\n                         false\n                     },\n                     DeprecationStatus::None => {\n-                        db.cancel();\n+                        diag.cancel();\n                         attr_segments[1].ident.to_string() == name\n                     },\n                 }"}, {"sha": "4ad6689f3e063937cd0bd4d8c2849b0cf0e6db9e", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -6,9 +6,9 @@ use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::{MultiSpan, Span};\n use std::env;\n \n-fn docs_link(db: &mut DiagnosticBuilder<'_>, lint: &'static Lint) {\n+fn docs_link(diag: &mut DiagnosticBuilder<'_>, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n-        db.help(&format!(\n+        diag.help(&format!(\n             \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n             &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n                 // extract just major + minor version and ignore patch versions\n@@ -37,10 +37,10 @@ fn docs_link(db: &mut DiagnosticBuilder<'_>, lint: &'static Lint) {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    cx.struct_span_lint(lint, sp, |ldb| {\n-        let mut db = ldb.build(msg);\n-        docs_link(&mut db, lint);\n-        db.emit();\n+    cx.struct_span_lint(lint, sp, |diag| {\n+        let mut diag = diag.build(msg);\n+        docs_link(&mut diag, lint);\n+        diag.emit();\n     });\n }\n \n@@ -63,11 +63,11 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///    = help: Consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n-    cx.struct_span_lint(lint, span, |ldb| {\n-        let mut db = ldb.build(msg);\n-        db.help(help);\n-        docs_link(&mut db, lint);\n-        db.emit();\n+    cx.struct_span_lint(lint, span, |diag| {\n+        let mut diag = diag.build(msg);\n+        diag.help(help);\n+        docs_link(&mut diag, lint);\n+        diag.emit();\n     });\n }\n \n@@ -100,35 +100,38 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n     note_span: Span,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, |ldb| {\n-        let mut db = ldb.build(msg);\n+    cx.struct_span_lint(lint, span, |diag| {\n+        let mut diag = diag.build(msg);\n         if note_span == span {\n-            db.note(note);\n+            diag.note(note);\n         } else {\n-            db.span_note(note_span, note);\n+            diag.span_note(note_span, note);\n         }\n-        docs_link(&mut db, lint);\n-        db.emit();\n+        docs_link(&mut diag, lint);\n+        diag.emit();\n     });\n }\n \n+/// Like `span_lint` but allows to add notes, help and suggestions using a closure.\n+///\n+/// If you need to customize your lint output a lot, use this function.\n pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n where\n     F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n {\n-    cx.struct_span_lint(lint, sp, |ldb| {\n-        let mut db = ldb.build(msg);\n-        f(&mut db);\n-        docs_link(&mut db, lint);\n-        db.emit();\n+    cx.struct_span_lint(lint, sp, |diag| {\n+        let mut diag = diag.build(msg);\n+        f(&mut diag);\n+        docs_link(&mut diag, lint);\n+        diag.emit();\n     });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_, '_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |ldb| {\n-        let mut db = ldb.build(msg);\n-        docs_link(&mut db, lint);\n-        db.emit();\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n+        let mut diag = diag.build(msg);\n+        docs_link(&mut diag, lint);\n+        diag.emit();\n     });\n }\n \n@@ -140,11 +143,11 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n ) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |ldb| {\n-        let mut db = ldb.build(msg);\n-        f(&mut db);\n-        docs_link(&mut db, lint);\n-        db.emit();\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n+        let mut diag = diag.build(msg);\n+        f(&mut diag);\n+        docs_link(&mut diag, lint);\n+        diag.emit();\n     });\n }\n \n@@ -172,8 +175,8 @@ pub fn span_lint_and_sugg<'a, T: LintContext>(\n     sugg: String,\n     applicability: Applicability,\n ) {\n-    span_lint_and_then(cx, lint, sp, msg, |db| {\n-        db.span_suggestion(sp, help, sugg, applicability);\n+    span_lint_and_then(cx, lint, sp, msg, |diag| {\n+        diag.span_suggestion(sp, help, sugg, applicability);\n     });\n }\n \n@@ -183,7 +186,7 @@ pub fn span_lint_and_sugg<'a, T: LintContext>(\n /// appear once per\n /// replacement. In human-readable format though, it only appears once before\n /// the whole suggestion.\n-pub fn multispan_sugg<I>(db: &mut DiagnosticBuilder<'_>, help_msg: String, sugg: I)\n+pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: String, sugg: I)\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n@@ -198,5 +201,5 @@ where\n         style: SuggestionStyle::ShowCode,\n         applicability: Applicability::Unspecified,\n     };\n-    db.suggestions.push(sugg);\n+    diag.suggestions.push(sugg);\n }"}, {"sha": "a8fe637d3d978f0473e5a904f271a8dc48b970d6", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ae36f853b560811399a56a1605523ab775743/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=870ae36f853b560811399a56a1605523ab775743", "patch": "@@ -515,7 +515,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n     /// # Example\n     ///\n     /// ```rust,ignore\n-    /// db.suggest_item_with_attr(cx, item, \"#[derive(Default)]\");\n+    /// diag.suggest_item_with_attr(cx, item, \"#[derive(Default)]\");\n     /// ```\n     fn suggest_item_with_attr<D: Display + ?Sized>(\n         &mut self,\n@@ -533,7 +533,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n     /// # Example\n     ///\n     /// ```rust,ignore\n-    /// db.suggest_prepend_item(cx, item,\n+    /// diag.suggest_prepend_item(cx, item,\n     /// \"fn foo() {\n     ///     bar();\n     /// }\");\n@@ -549,7 +549,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n     /// # Example\n     ///\n     /// ```rust,ignore\n-    /// db.suggest_remove_item(cx, item, \"remove this\")\n+    /// diag.suggest_remove_item(cx, item, \"remove this\")\n     /// ```\n     fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }"}]}