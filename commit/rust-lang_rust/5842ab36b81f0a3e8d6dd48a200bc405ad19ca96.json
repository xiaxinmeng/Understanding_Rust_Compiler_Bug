{"sha": "5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDJhYjM2YjgxZjBhM2U4ZDZkZDQ4YTIwMGJjNDA1YWQxOWNhOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-28T10:55:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-28T10:55:22Z"}, "message": "auto merge of #8087 : Aatch/rust/atomics, r=huonw\n\nAdds a fence operation to close #8061\r\n\r\nAlso adds static initializers to for atomic types. Since the fields are private, you aren't able to have `static mut` variables that are an atomic type. Each atomic type's initializer starts at a 0-value (so unset for `AtomicFlag` and false for `AtomicBool`).", "tree": {"sha": "3e5d310206b16cf3048abe6d16ea27d360636b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e5d310206b16cf3048abe6d16ea27d360636b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "html_url": "https://github.com/rust-lang/rust/commit/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe9929e303f4e0322fd0f38ec6cb6b3ec932e4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9929e303f4e0322fd0f38ec6cb6b3ec932e4a3", "html_url": "https://github.com/rust-lang/rust/commit/fe9929e303f4e0322fd0f38ec6cb6b3ec932e4a3"}, {"sha": "639819f3d991a63883bc571f9aed13b8e59036d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/639819f3d991a63883bc571f9aed13b8e59036d6", "html_url": "https://github.com/rust-lang/rust/commit/639819f3d991a63883bc571f9aed13b8e59036d6"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "57563948b0fade37857ae704c3d349da36f9d27a", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -1594,6 +1594,9 @@ pub mod llvm {\n                                          Order: AtomicOrdering)\n                                          -> ValueRef;\n \n+        pub unsafe fn LLVMBuildAtomicFence(B: BuilderRef, Order: AtomicOrdering);\n+\n+\n         /* Selected entries from the downcasts. */\n         #[fast_ffi]\n         pub unsafe fn LLVMIsATerminatorInst(Inst: ValueRef) -> ValueRef;"}, {"sha": "07b774105bbde7b8cbf021b65dd9afc37d4e2d16", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -660,6 +660,11 @@ pub fn CallWithConv(cx: @mut Block, Fn: ValueRef, Args: &[ValueRef],\n     B(cx).call_with_conv(Fn, Args, Conv)\n }\n \n+pub fn AtomicFence(cx: @mut Block, order: AtomicOrdering) {\n+    if cx.unreachable { return; }\n+    B(cx).atomic_fence(order)\n+}\n+\n pub fn Select(cx: @mut Block, If: ValueRef, Then: ValueRef, Else: ValueRef) -> ValueRef {\n     if cx.unreachable { return _Undef(Then); }\n     B(cx).select(If, Then, Else)"}, {"sha": "be9d5a6c118b8b2cd8337e45ac01e5d45d05ac42", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -943,4 +943,10 @@ impl Builder {\n             llvm::LLVMBuildAtomicRMW(self.llbuilder, op, dst, src, order)\n         }\n     }\n+\n+    pub fn atomic_fence(&self, order: AtomicOrdering) {\n+        unsafe {\n+            llvm::LLVMBuildAtomicFence(self.llbuilder, order);\n+        }\n+    }\n }"}, {"sha": "080d1f2adb573916d4eedd929337adead0b95326", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -661,6 +661,10 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n                             order);\n                 RetVoid(bcx);\n             }\n+            \"fence\" => {\n+                AtomicFence(bcx, order);\n+                RetVoid(bcx);\n+            }\n             op => {\n                 // These are all AtomicRMW ops\n                 let atom_op = match op {"}, {"sha": "cffceee88d3e71a0bb0cd391893b7934c5c6056e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -3521,7 +3521,9 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                                       ty::re_bound(ty::br_anon(0)),\n                                       ty::mk_int()), ty::mk_int() ], ty::mk_int())\n             }\n-\n+            \"fence\" => {\n+                (0, ~[], ty::mk_nil())\n+            }\n             op => {\n                 tcx.sess.span_err(it.span,\n                                   fmt!(\"unrecognized atomic operation function: `%s`\","}, {"sha": "6f514ca609dbf3b29d423614c25ed32412acc9c2", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -75,6 +75,10 @@ pub enum Ordering {\n     SeqCst\n }\n \n+pub static INIT_ATOMIC_FLAG : AtomicFlag = AtomicFlag { v: 0 };\n+pub static INIT_ATOMIC_BOOL : AtomicBool = AtomicBool { v: 0 };\n+pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: 0 };\n+pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: 0 };\n \n impl AtomicFlag {\n \n@@ -569,6 +573,35 @@ pub unsafe fn atomic_umin<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     })\n }\n \n+/**\n+ * An atomic fence.\n+ *\n+ * A fence 'A' which has `Release` ordering semantics, synchronizes with a\n+ * fence 'B' with (at least) `Acquire` semantics, if and only if there exists\n+ * atomic operations X and Y, both operating on some atomic object 'M' such\n+ * that A is sequenced before X, Y is synchronized before B and Y obsevers\n+ * the change to M. This provides a happens-before dependence between A and B.\n+ *\n+ * Atomic operations with `Release` or `Acquire` semantics can also synchronize\n+ * with a fence.\n+ *\n+ * A fence with has `SeqCst` ordering, in addition to having both `Acquire` and\n+ * `Release` semantics, participates in the global program order of the other\n+ * `SeqCst` operations and/or fences.\n+ *\n+ * Accepts `Acquire`, `Release`, `AcqRel` and `SeqCst` orderings.\n+ */\n+#[inline] #[cfg(not(stage0))]\n+pub fn fence(order: Ordering) {\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_fence_acq(),\n+            Release => intrinsics::atomic_fence_rel(),\n+            AcqRel  => intrinsics::atomic_fence_rel(),\n+            _       => intrinsics::atomic_fence(),\n+        }\n+    }\n+}\n \n #[cfg(test)]\n mod test {\n@@ -630,4 +663,19 @@ mod test {\n         assert_eq!(a.fetch_and(false, SeqCst),true);\n         assert_eq!(a.load(SeqCst),false);\n     }\n+\n+    static mut S_FLAG : AtomicFlag = INIT_ATOMIC_FLAG;\n+    static mut S_BOOL : AtomicBool = INIT_ATOMIC_BOOL;\n+    static mut S_INT  : AtomicInt  = INIT_ATOMIC_INT;\n+    static mut S_UINT : AtomicUint = INIT_ATOMIC_UINT;\n+\n+    #[test]\n+    fn static_init() {\n+        unsafe {\n+            assert!(!S_FLAG.test_and_set(SeqCst));\n+            assert!(!S_BOOL.load(SeqCst));\n+            assert!(S_INT.load(SeqCst) == 0);\n+            assert!(S_UINT.load(SeqCst) == 0);\n+        }\n+    }\n }"}, {"sha": "655ede6b4eb9386bc5998433c793444a4058e9db", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -256,6 +256,15 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_umax_acqrel(dst: &mut int, src: int) -> int;\n     pub fn atomic_umax_relaxed(dst: &mut int, src: int) -> int;\n \n+    #[cfg(not(stage0))]\n+    pub fn atomic_fence();\n+    #[cfg(not(stage0))]\n+    pub fn atomic_fence_acq();\n+    #[cfg(not(stage0))]\n+    pub fn atomic_fence_rel();\n+    #[cfg(not(stage0))]\n+    pub fn atomic_fence_acqrel();\n+\n     /// The size of a type in bytes.\n     ///\n     /// This is the exact number of bytes in memory taken up by a"}, {"sha": "beaa7e1daef9c1101ec19c93a56941684607b13d", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -513,6 +513,9 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n     return wrap(unwrap(B)->CreateAtomicCmpXchg(unwrap(target), unwrap(old),\n                                                unwrap(source), order));\n }\n+extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B, AtomicOrdering order) {\n+    return wrap(unwrap(B)->CreateFence(order));\n+}\n extern \"C\" LLVMValueRef LLVMBuildAtomicRMW(LLVMBuilderRef B,\n                                            AtomicRMWInst::BinOp op,\n                                            LLVMValueRef target,\n@@ -838,4 +841,4 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n         Flags,\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "260a16dab9845b089a8c01f756dd2d7225aaf275", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "patch": "@@ -90,6 +90,7 @@ LLVMBuildAtomicLoad\n LLVMBuildAtomicStore\n LLVMBuildAtomicCmpXchg\n LLVMBuildAtomicRMW\n+LLVMBuildAtomicFence\n LLVMBuildAdd\n LLVMBuildAggregateRet\n LLVMBuildAlloca"}]}