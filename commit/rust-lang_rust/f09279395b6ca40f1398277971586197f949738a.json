{"sha": "f09279395b6ca40f1398277971586197f949738a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOTI3OTM5NWI2Y2E0MGYxMzk4Mjc3OTcxNTg2MTk3Zjk0OTczOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-17T17:22:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-17T17:22:06Z"}, "message": "auto merge of #18973 : sfackler/rust/enum-namespace-pt2, r=pcwalton\n\nThis breaks code that referred to variant names in the same namespace as\r\ntheir enum. Reexport the variants in the old location or alter code to\r\nrefer to the new locations:\r\n\r\n```\r\npub enum Foo {\r\n    A,\r\n    B\r\n}\r\n\r\nfn main() {\r\n    let a = A;\r\n}\r\n```\r\n=>\r\n```\r\npub use self::Foo::{A, B};\r\n\r\npub enum Foo {\r\n    A,\r\n    B\r\n}\r\n\r\nfn main() {\r\n    let a = A;\r\n}\r\n```\r\nor\r\n```\r\npub enum Foo {\r\n    A,\r\n    B\r\n}\r\n\r\nfn main() {\r\n    let a = Foo::A;\r\n}\r\n```\r\n\r\n[breaking-change]", "tree": {"sha": "a535249e131e5669827f8460017cb7a708b05a39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a535249e131e5669827f8460017cb7a708b05a39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09279395b6ca40f1398277971586197f949738a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09279395b6ca40f1398277971586197f949738a", "html_url": "https://github.com/rust-lang/rust/commit/f09279395b6ca40f1398277971586197f949738a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09279395b6ca40f1398277971586197f949738a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88c743def3cf42ee943ca09dda1e6dccf4894db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c743def3cf42ee943ca09dda1e6dccf4894db9", "html_url": "https://github.com/rust-lang/rust/commit/88c743def3cf42ee943ca09dda1e6dccf4894db9"}, {"sha": "3dcd2157403163789aaf21a9ab3c4d30a7c6494d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dcd2157403163789aaf21a9ab3c4d30a7c6494d", "html_url": "https://github.com/rust-lang/rust/commit/3dcd2157403163789aaf21a9ab3c4d30a7c6494d"}], "stats": {"total": 2824, "additions": 1714, "deletions": 1110}, "files": [{"sha": "0a902d970ef3225f4c5a6d9edfa36aaf29ef6e8c", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+pub use self::Mode::*;\n \n use std::fmt;\n use std::str::FromStr;"}, {"sha": "f76cefcd941274b8dadfad75ffa3fee2aff49743", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_type = \"bin\"]\n-#![feature(phase, slicing_syntax)]\n+#![feature(phase, slicing_syntax, globs)]\n \n #![deny(warnings)]\n "}, {"sha": "75dc45d16eb3666ca76111c67d34e9ae06ff4527", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#[cfg(not(stage0))]\n+use self::TargetLocation::*;\n \n use common::Config;\n use common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind, DebugInfoGdb};"}, {"sha": "7a5c535827c251f35f58f50ee146d6b6d2075046", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -308,8 +308,8 @@ copying.\n # }\n fn compute_area(shape: &Shape) -> f64 {\n     match *shape {\n-        Circle(_, radius) => std::f64::consts::PI * radius * radius,\n-        Rectangle(_, ref size) => size.w * size.h\n+        Shape::Circle(_, radius) => std::f64::consts::PI * radius * radius,\n+        Shape::Rectangle(_, ref size) => size.w * size.h\n     }\n }\n ~~~\n@@ -478,14 +478,14 @@ example:\n #                  a: &'r T, b: &'r T) -> &'r T {\n #     if compute_area(shape) > threshold {a} else {b}\n # }\n-                                                     // -+ r\n-fn select_based_on_unit_circle<'r, T>(               //  |-+ B\n-    threshold: f64, a: &'r T, b: &'r T) -> &'r T {   //  | |\n-                                                     //  | |\n-    let shape = Circle(Point {x: 0., y: 0.}, 1.);    //  | |\n-    select(&shape, threshold, a, b)                  //  | |\n-}                                                    //  |-+\n-                                                     // -+\n+                                                            // -+ r\n+fn select_based_on_unit_circle<'r, T>(                      //  |-+ B\n+    threshold: f64, a: &'r T, b: &'r T) -> &'r T {          //  | |\n+                                                            //  | |\n+    let shape = Shape::Circle(Point {x: 0., y: 0.}, 1.);    //  | |\n+    select(&shape, threshold, a, b)                         //  | |\n+}                                                           //  |-+\n+                                                            // -+\n ~~~\n \n In this call to `select()`, the lifetime of the first parameter shape"}, {"sha": "65b6014b496e86dfbf4985cd6fa360dea683c421", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -22,15 +22,15 @@ doing nothing otherwise:\n ~~~~\n # enum T { SpecialA(uint), SpecialB(uint) }\n # fn f() -> uint {\n-# let input_1 = SpecialA(0);\n-# let input_2 = SpecialA(0);\n+# let input_1 = T::SpecialA(0);\n+# let input_2 = T::SpecialA(0);\n match input_1 {\n-    SpecialA(x) => { return x; }\n+    T::SpecialA(x) => { return x; }\n     _ => {}\n }\n // ...\n match input_2 {\n-    SpecialB(x) => { return x; }\n+    T::SpecialB(x) => { return x; }\n     _ => {}\n }\n # return 0u;\n@@ -49,20 +49,20 @@ the pattern in the above code:\n # #![feature(macro_rules)]\n # enum T { SpecialA(uint), SpecialB(uint) }\n # fn f() -> uint {\n-# let input_1 = SpecialA(0);\n-# let input_2 = SpecialA(0);\n+# let input_1 = T::SpecialA(0);\n+# let input_2 = T::SpecialA(0);\n macro_rules! early_return(\n-    ($inp:expr $sp:ident) => ( // invoke it like `(input_5 SpecialE)`\n+    ($inp:expr $sp:path) => ( // invoke it like `(input_5 SpecialE)`\n         match $inp {\n             $sp(x) => { return x; }\n             _ => {}\n         }\n     );\n )\n // ...\n-early_return!(input_1 SpecialA);\n+early_return!(input_1 T::SpecialA);\n // ...\n-early_return!(input_2 SpecialB);\n+early_return!(input_2 T::SpecialB);\n # return 0;\n # }\n # fn main() {}\n@@ -169,10 +169,10 @@ instead of `*` to mean \"at least one\".\n # #![feature(macro_rules)]\n # enum T { SpecialA(uint),SpecialB(uint),SpecialC(uint),SpecialD(uint)}\n # fn f() -> uint {\n-# let input_1 = SpecialA(0);\n-# let input_2 = SpecialA(0);\n+# let input_1 = T::SpecialA(0);\n+# let input_2 = T::SpecialA(0);\n macro_rules! early_return(\n-    ($inp:expr, [ $($sp:ident)|+ ]) => (\n+    ($inp:expr, [ $($sp:path)|+ ]) => (\n         match $inp {\n             $(\n                 $sp(x) => { return x; }\n@@ -182,9 +182,9 @@ macro_rules! early_return(\n     );\n )\n // ...\n-early_return!(input_1, [SpecialA|SpecialC|SpecialD]);\n+early_return!(input_1, [T::SpecialA|T::SpecialC|T::SpecialD]);\n // ...\n-early_return!(input_2, [SpecialB]);\n+early_return!(input_2, [T::SpecialB]);\n # return 0;\n # }\n # fn main() {}\n@@ -234,9 +234,9 @@ Now consider code like the following:\n # enum T3 { Good2(uint), Bad2}\n # fn f(x: T1) -> uint {\n match x {\n-    Good1(g1, val) => {\n+    T1::Good1(g1, val) => {\n         match g1.body {\n-            Good2(result) => {\n+            T3::Good2(result) => {\n                 // complicated stuff goes here\n                 return result + val;\n             },\n@@ -281,9 +281,9 @@ macro_rules! biased_match (\n # struct T2 { body: T3 }\n # enum T3 { Good2(uint), Bad2}\n # fn f(x: T1) -> uint {\n-biased_match!((x)       ~ (Good1(g1, val)) else { return 0 };\n+biased_match!((x)       ~ (T1::Good1(g1, val)) else { return 0 };\n               binds g1, val )\n-biased_match!((g1.body) ~ (Good2(result) )\n+biased_match!((g1.body) ~ (T3::Good2(result) )\n                   else { panic!(\"Didn't get good_2\") };\n               binds result )\n // complicated stuff goes here\n@@ -396,8 +396,8 @@ macro_rules! biased_match (\n # enum T3 { Good2(uint), Bad2}\n # fn f(x: T1) -> uint {\n biased_match!(\n-    (x)       ~ (Good1(g1, val)) else { return 0 };\n-    (g1.body) ~ (Good2(result) ) else { panic!(\"Didn't get Good2\") };\n+    (x)       ~ (T1::Good1(g1, val)) else { return 0 };\n+    (g1.body) ~ (T3::Good2(result) ) else { panic!(\"Didn't get Good2\") };\n     binds val, result )\n // complicated stuff goes here\n return result + val;"}, {"sha": "cf7ecd7e51ff71855c65f5715bea7e8a5b61905f", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -598,7 +598,7 @@ enum List<T> {\n }\n \n fn main() {\n-    let list: List<int> = Cons(1, box Cons(2, box Cons(3, box Nil)));\n+    let list: List<int> = List::Cons(1, box List::Cons(2, box List::Cons(3, box List::Nil)));\n     println!(\"{}\", list);\n }\n ```"}, {"sha": "616bf0464b3b5f30592129d27428a01c8da81006", "filename": "src/doc/guide.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -1263,17 +1263,17 @@ enum OptionalInt {\n }\n \n fn main() {\n-    let x = Value(5);\n-    let y = Missing;\n+    let x = OptionalInt::Value(5);\n+    let y = OptionalInt::Missing;\n \n     match x {\n-        Value(n) => println!(\"x is {}\", n),\n-        Missing  => println!(\"x is missing!\"),\n+        OptionalInt::Value(n) => println!(\"x is {}\", n),\n+        OptionalInt::Missing  => println!(\"x is missing!\"),\n     }\n \n     match y {\n-        Value(n) => println!(\"y is {}\", n),\n-        Missing  => println!(\"y is missing!\"),\n+        OptionalInt::Value(n) => println!(\"y is {}\", n),\n+        OptionalInt::Missing  => println!(\"y is missing!\"),\n     }\n }\n ```\n@@ -1702,17 +1702,17 @@ enum OptionalInt {\n }\n \n fn main() {\n-    let x = Value(5);\n-    let y = Missing;\n+    let x = OptionalInt::Value(5);\n+    let y = OptionalInt::Missing;\n \n     match x {\n-        Value(n) => println!(\"x is {}\", n),\n-        Missing  => println!(\"x is missing!\"),\n+        OptionalInt::Value(n) => println!(\"x is {}\", n),\n+        OptionalInt::Missing  => println!(\"x is missing!\"),\n     }\n \n     match y {\n-        Value(n) => println!(\"y is {}\", n),\n-        Missing  => println!(\"y is missing!\"),\n+        OptionalInt::Value(n) => println!(\"y is {}\", n),\n+        OptionalInt::Missing  => println!(\"y is missing!\"),\n     }\n }\n ```\n@@ -3709,7 +3709,7 @@ enum List {\n }\n \n fn main() {\n-    let list = Node(0, box Node(1, box Nil));\n+    let list = List::Node(0, box List::Node(1, box List::Nil));\n }\n ```\n \n@@ -3895,11 +3895,11 @@ enum OptionalInt {\n     Missing,\n }\n \n-let x = Value(5i);\n+let x = OptionalInt::Value(5i);\n \n match x {\n-    Value(..) => println!(\"Got an int!\"),\n-    Missing   => println!(\"No such luck.\"),\n+    OptionalInt::Value(..) => println!(\"Got an int!\"),\n+    OptionalInt::Missing   => println!(\"No such luck.\"),\n }\n ```\n \n@@ -3911,12 +3911,12 @@ enum OptionalInt {\n     Missing,\n }\n \n-let x = Value(5i);\n+let x = OptionalInt::Value(5i);\n \n match x {\n-    Value(i) if i > 5 => println!(\"Got an int bigger than five!\"),\n-    Value(..) => println!(\"Got an int!\"),\n-    Missing   => println!(\"No such luck.\"),\n+    OptionalInt::Value(i) if i > 5 => println!(\"Got an int bigger than five!\"),\n+    OptionalInt::Value(..) => println!(\"Got an int!\"),\n+    OptionalInt::Missing   => println!(\"No such luck.\"),\n }\n ```\n "}, {"sha": "f31f28d6c08ce7f0f3a1a1230de384c79c45aa24", "filename": "src/doc/reference.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -1331,8 +1331,8 @@ enum Animal {\n   Cat\n }\n \n-let mut a: Animal = Dog;\n-a = Cat;\n+let mut a: Animal = Animal::Dog;\n+a = Animal::Cat;\n ```\n \n Enumeration constructors can have either named or unnamed fields:\n@@ -1345,8 +1345,8 @@ enum Animal {\n     Cat { name: String, weight: f64 }\n }\n \n-let mut a: Animal = Dog(\"Cocoa\".to_string(), 37.2);\n-a = Cat { name: \"Spotty\".to_string(), weight: 2.7 };\n+let mut a: Animal = Animal::Dog(\"Cocoa\".to_string(), 37.2);\n+a = Animal::Cat { name: \"Spotty\".to_string(), weight: 2.7 };\n # }\n ```\n \n@@ -3308,12 +3308,12 @@ fields of a particular variant. For example:\n ```\n enum List<X> { Nil, Cons(X, Box<List<X>>) }\n \n-let x: List<int> = Cons(10, box Cons(11, box Nil));\n+let x: List<int> = List::Cons(10, box List::Cons(11, box List::Nil));\n \n match x {\n-    Cons(_, box Nil) => panic!(\"singleton list\"),\n-    Cons(..)         => return,\n-    Nil              => panic!(\"empty list\")\n+    List::Cons(_, box List::Nil) => panic!(\"singleton list\"),\n+    List::Cons(..)               => return,\n+    List::Nil                    => panic!(\"empty list\")\n }\n ```\n \n@@ -3371,16 +3371,16 @@ An example of a `match` expression:\n \n enum List<X> { Nil, Cons(X, Box<List<X>>) }\n \n-let x: List<int> = Cons(10, box Cons(11, box Nil));\n+let x: List<int> = List::Cons(10, box List::Cons(11, box List::Nil));\n \n match x {\n-    Cons(a, box Cons(b, _)) => {\n+    List::Cons(a, box List::Cons(b, _)) => {\n         process_pair(a, b);\n     }\n-    Cons(10, _) => {\n+    List::Cons(10, _) => {\n         process_ten();\n     }\n-    Nil => {\n+    List::Nil => {\n         return;\n     }\n     _ => {\n@@ -3402,18 +3402,18 @@ enum List { Nil, Cons(uint, Box<List>) }\n \n fn is_sorted(list: &List) -> bool {\n     match *list {\n-        Nil | Cons(_, box Nil) => true,\n-        Cons(x, ref r @ box Cons(_, _)) => {\n+        List::Nil | List::Cons(_, box List::Nil) => true,\n+        List::Cons(x, ref r @ box List::Cons(_, _)) => {\n             match *r {\n-                box Cons(y, _) => (x <= y) && is_sorted(&**r),\n+                box List::Cons(y, _) => (x <= y) && is_sorted(&**r),\n                 _ => panic!()\n             }\n         }\n     }\n }\n \n fn main() {\n-    let a = Cons(6, box Cons(7, box Cons(42, box Nil)));\n+    let a = List::Cons(6, box List::Cons(7, box List::Cons(42, box List::Nil)));\n     assert!(is_sorted(&a));\n }\n \n@@ -3718,7 +3718,7 @@ enum List<T> {\n   Cons(T, Box<List<T>>)\n }\n \n-let a: List<int> = Cons(7, box Cons(13, box Nil));\n+let a: List<int> = List::Cons(7, box List::Cons(13, box List::Nil));\n ```\n \n ### Pointer types"}, {"sha": "15263919fb9b88f6fd321938fef03875ee207a68", "filename": "src/etc/unicode.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -391,6 +391,7 @@ def emit_conversions_module(f, lowerupper, upperlower):\n def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n     f.write(\"\"\"pub mod grapheme {\n     use core::slice::SlicePrelude;\n+    pub use self::GraphemeCat::*;\n     use core::slice;\n \n     #[allow(non_camel_case_types)]"}, {"sha": "0b6d9e356b910ada449cdad3fcbba63a4b1f3a4a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,8 +15,11 @@\n // writing (August 2014) freely licensed under the following Creative Commons Attribution\n // License: [CC BY 2.5 CA](http://creativecommons.org/licenses/by/2.5/ca/).\n \n+pub use self::Entry::*;\n+\n use core::prelude::*;\n \n+use self::StackOp::*;\n use super::node::*;\n use std::hash::{Writer, Hash};\n use core::default::Default;\n@@ -445,6 +448,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n /// to nodes. By using this module much better safety guarantees can be made, and more search\n /// boilerplate gets cut out.\n mod stack {\n+    pub use self::PushResult::*;\n     use core::prelude::*;\n     use super::BTreeMap;\n     use super::super::node::*;"}, {"sha": "6e9341231ad69d824e22e0b6a3140a14d090af1f", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,10 @@\n // This module represents all the internal representation and logic for a B-Tree's node\n // with a safe interface, so that BTreeMap itself does not depend on any of these details.\n \n+pub use self::InsertionResult::*;\n+pub use self::SearchResult::*;\n+pub use self::TraversalItem::*;\n+\n use core::prelude::*;\n \n use core::{slice, mem, ptr};"}, {"sha": "3d750a30c2960e5105c28aebf36c7e5a906fba82", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -260,6 +260,7 @@ impl<E:CLike> Extend<E> for EnumSet<E> {\n #[cfg(test)]\n mod test {\n     use std::prelude::*;\n+    use self::Foo::*;\n     use std::mem;\n \n     use super::{EnumSet, CLike};\n@@ -488,6 +489,6 @@ mod test {\n             }\n         }\n         let mut set = EnumSet::new();\n-        set.insert(V64);\n+        set.insert(Bar::V64);\n     }\n }"}, {"sha": "643b500ec3e2bb39fc969cd5c305fd68aeb394f1", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -845,6 +845,8 @@ impl<T: fmt::Show> fmt::Show for RingBuf<T> {\n \n #[cfg(test)]\n mod tests {\n+    use self::Taggy::*;\n+    use self::Taggypar::*;\n     use std::fmt::Show;\n     use std::prelude::*;\n     use std::hash;"}, {"sha": "000c3e08c677b24f3e763cf2a612d0f3fcf510bf", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -87,6 +87,7 @@\n \n #![doc(primitive = \"slice\")]\n \n+use self::Direction::*;\n use alloc::boxed::Box;\n use core::cmp;\n use core::kinds::Sized;"}, {"sha": "ae8e92fc6cb9d0b01f06fcc3c61d4182c87f83f5", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -51,6 +51,10 @@\n \n #![doc(primitive = \"str\")]\n \n+pub use self::MaybeOwned::*;\n+use self::RecompositionState::*;\n+use self::DecompositionType::*;\n+\n use core::default::Default;\n use core::fmt;\n use core::cmp;"}, {"sha": "8d1fb9e2a86aff487322050b953545f37bb75f98", "filename": "src/libcollections/trie/map.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Ftrie%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcollections%2Ftrie%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmap.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n //! Ordered maps and sets, implemented as simple tries.\n-\n use core::prelude::*;\n \n+pub use self::Entry::*;\n+use self::TrieNode::*;\n use alloc::boxed::Box;\n use core::default::Default;\n use core::fmt;\n@@ -105,7 +106,7 @@ struct InternalNode<T> {\n }\n \n // Each child of an InternalNode may be internal, in which case nesting continues,\n-// external (containing a value), or empty.\n+// external (containing a value), or empty\n #[deriving(Clone)]\n enum TrieNode<T> {\n     Internal(Box<InternalNode<T>>),\n@@ -1221,8 +1222,9 @@ mod test {\n     use std::uint;\n     use std::hash;\n \n-    use super::{TrieMap, InternalNode, Internal, External, Nothing};\n-    use super::{Occupied, Vacant};\n+    use super::{TrieMap, InternalNode};\n+    use super::Entry::*;\n+    use super::TrieNode::*;\n \n     fn check_integrity<T>(trie: &InternalNode<T>) {\n         assert!(trie.count != 0);"}, {"sha": "d2bca1e6ec7d0be30e8370935011a13a1df06b78", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,8 @@\n \n #![stable]\n \n+pub use self::Ordering::*;\n+\n use intrinsics;\n use std::kinds::marker;\n use cell::UnsafeCell;"}, {"sha": "59d31a0749f119feadcdb2a7daf2e0ce0580e008", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -41,6 +41,8 @@\n \n #![stable]\n \n+pub use self::Ordering::*;\n+\n use kinds::Sized;\n use option::{Option, Some, None};\n "}, {"sha": "269a456542cb04a053768ebcb06d6e4eb471e834", "filename": "src/libcore/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -51,7 +51,7 @@\n //! }\n //!\n //! impl Default for Kind {\n-//!     fn default() -> Kind { A }\n+//!     fn default() -> Kind { Kind::A }\n //! }\n //!\n //! #[deriving(Default)]\n@@ -127,7 +127,7 @@ pub trait Default {\n     /// }\n     ///\n     /// impl Default for Kind {\n-    ///     fn default() -> Kind { A }\n+    ///     fn default() -> Kind { Kind::A }\n     /// }\n     /// ```\n     fn default() -> Self;"}, {"sha": "5fd4e2e326df0ff61e6f7a9d01fede5740d4fc61", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,10 @@\n \n #![allow(missing_docs)]\n \n+pub use self::ExponentFormat::*;\n+pub use self::SignificantDigits::*;\n+pub use self::SignFormat::*;\n+\n use char;\n use fmt;\n use iter::{range, DoubleEndedIterator};"}, {"sha": "1efb59561015578ee366eed2f10efa7d5644e4fa", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,8 @@\n \n #![allow(unused_variables)]\n \n+pub use self::FormatError::*;\n+\n use any;\n use cell::{Cell, Ref, RefMut};\n use iter::{Iterator, range};"}, {"sha": "0e8504e7ee57c3fc5056a4fa32ae3b8b8e5fd3cf", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,6 +14,11 @@\n //! These definitions are similar to their `ct` equivalents, but differ in that\n //! these can be statically allocated and are slightly optimized for the runtime\n \n+pub use self::Alignment::*;\n+pub use self::Count::*;\n+pub use self::Position::*;\n+pub use self::Flag::*;\n+\n #[doc(hidden)]\n pub struct Argument<'a> {\n     pub position: Position,"}, {"sha": "93d8d7d6e48a91da7e7b8cf1187241da23314b78", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -58,6 +58,8 @@ This `for` loop syntax can be applied to any iterator over any type.\n \n */\n \n+pub use self::MinMaxResult::*;\n+\n use clone::Clone;\n use cmp;\n use cmp::Ord;"}, {"sha": "800b0c1a9059f6f841570f3fe209385ff96219be", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,6 +14,8 @@\n \n #![allow(missing_docs)]\n \n+pub use self::FPCategory::*;\n+\n use {int, i8, i16, i32, i64};\n use {uint, u8, u16, u32, u64};\n use {f32, f64};"}, {"sha": "5b1590518f88daf642b80fa51564183ff2536388", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -112,12 +112,12 @@\n //!\n //! // A list of data to search through.\n //! let all_the_big_things = [\n-//!     Plant(250, \"redwood\"),\n-//!     Plant(230, \"noble fir\"),\n-//!     Plant(229, \"sugar pine\"),\n-//!     Animal(25, \"blue whale\"),\n-//!     Animal(19, \"fin whale\"),\n-//!     Animal(15, \"north pacific right whale\"),\n+//!     Kingdom::Plant(250, \"redwood\"),\n+//!     Kingdom::Plant(230, \"noble fir\"),\n+//!     Kingdom::Plant(229, \"sugar pine\"),\n+//!     Kingdom::Animal(25, \"blue whale\"),\n+//!     Kingdom::Animal(19, \"fin whale\"),\n+//!     Kingdom::Animal(15, \"north pacific right whale\"),\n //! ];\n //!\n //! // We're going to search for the name of the biggest animal,\n@@ -126,12 +126,12 @@\n //! let mut size_of_biggest_animal = 0;\n //! for big_thing in all_the_big_things.iter() {\n //!     match *big_thing {\n-//!         Animal(size, name) if size > size_of_biggest_animal => {\n+//!         Kingdom::Animal(size, name) if size > size_of_biggest_animal => {\n //!             // Now we've found the name of some big animal\n //!             size_of_biggest_animal = size;\n //!             name_of_biggest_animal = Some(name);\n //!         }\n-//!         Animal(..) | Plant(..) => ()\n+//!         Kingdom::Animal(..) | Kingdom::Plant(..) => ()\n //!     }\n //! }\n //!\n@@ -143,6 +143,8 @@\n \n #![stable]\n \n+pub use self::Option::*;\n+\n use cmp::{Eq, Ord};\n use default::Default;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};"}, {"sha": "9f883d604962355daa7b00420d326126bb7df39f", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -48,14 +48,17 @@ pub use str::from_str;\n pub use char::Char;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n-pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n+pub use cmp::{Ordering, Equiv};\n+pub use cmp::Ordering::{Less, Equal, Greater};\n pub use iter::{FromIterator, Extend};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::{ToPrimitive, FromPrimitive};\n-pub use option::{Option, Some, None};\n+pub use option::Option;\n+pub use option::Option::{Some, None};\n pub use ptr::RawPtr;\n-pub use result::{Result, Ok, Err};\n+pub use result::Result;\n+pub use result::Result::{Ok, Err};\n pub use str::{Str, StrPrelude};\n pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};"}, {"sha": "0dc4fb839659dc8e6c8b95eae769a93bebb877ee", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -38,8 +38,8 @@\n //!         return Err(\"invalid header length\");\n //!     }\n //!     match header[0] {\n-//!         1 => Ok(Version1),\n-//!         2 => Ok(Version2),\n+//!         1 => Ok(Version::Version1),\n+//!         2 => Ok(Version::Version2),\n //!         _ => Err(\"invalid version\")\n //!     }\n //! }\n@@ -276,6 +276,8 @@\n \n #![stable]\n \n+pub use self::Result::*;\n+\n use std::fmt::Show;\n use slice;\n use slice::AsSlice;"}, {"sha": "7923c46717e66becd229df6c31dae7f05472c9f8", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -34,6 +34,8 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n+pub use self::BinarySearchResult::*;\n+\n use mem::transmute;\n use clone::Clone;\n use cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering, Less, Equal, Greater, Equiv};"}, {"sha": "bc30429c05c92aae3ea666fff3b1858fa7c07d3a", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,6 +16,9 @@\n \n #![doc(primitive = \"str\")]\n \n+pub use self::Utf16Item::*;\n+pub use self::Searcher::{Naive, TwoWay, TwoWayLong};\n+\n use mem;\n use char;\n use char::Char;"}, {"sha": "71a3f24babb82e11c6843b2443931826c2c7190c", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -20,6 +20,11 @@\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![feature(macro_rules, globs, import_shadowing)]\n+pub use self::Piece::*;\n+pub use self::Position::*;\n+pub use self::Alignment::*;\n+pub use self::Flag::*;\n+pub use self::Count::*;\n \n use std::char;\n use std::str;"}, {"sha": "ad30bf304fc02e3547238fe0cee39c852648b116", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -93,6 +93,13 @@\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n+pub use self::Name::*;\n+pub use self::HasArg::*;\n+pub use self::Occur::*;\n+pub use self::Fail_::*;\n+pub use self::FailType::*;\n+use self::Optval::*;\n+\n use std::fmt;\n use std::result::{Err, Ok};\n use std::result;\n@@ -831,6 +838,20 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n     line\n }\n \n+enum SplitWithinState {\n+    A,  // leading whitespace, initial state\n+    B,  // words\n+    C,  // internal and trailing whitespace\n+}\n+enum Whitespace {\n+    Ws, // current char is whitespace\n+    Cr  // current char is not whitespace\n+}\n+enum LengthLimit {\n+    UnderLim, // current char makes current substring still fit in limit\n+    OverLim   // current char makes current substring no longer fit in limit\n+}\n+\n \n /// Splits a string into substrings with possibly internal whitespace,\n /// each of them at most `lim` bytes long. The substrings have leading and trailing\n@@ -845,22 +866,11 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n /// sequence longer than the limit.\n fn each_split_within<'a>(ss: &'a str, lim: uint, it: |&'a str| -> bool)\n                      -> bool {\n+    use self::SplitWithinState::*;\n+    use self::Whitespace::*;\n+    use self::LengthLimit::*;\n     // Just for fun, let's write this as a state machine:\n \n-    enum SplitWithinState {\n-        A,  // leading whitespace, initial state\n-        B,  // words\n-        C,  // internal and trailing whitespace\n-    }\n-    enum Whitespace {\n-        Ws, // current char is whitespace\n-        Cr  // current char is not whitespace\n-    }\n-    enum LengthLimit {\n-        UnderLim, // current char makes current substring still fit in limit\n-        OverLim   // current char makes current substring no longer fit in limit\n-    }\n-\n     let mut slice_start = 0;\n     let mut last_start = 0;\n     let mut last_end = 0;"}, {"sha": "eff5345e85e5282d7182fa343df17961fa05e7a1", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -274,6 +274,9 @@ pub fn main() {\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+#![feature(globs)]\n+\n+pub use self::LabelText::*;\n \n use std::io;\n use std::str;\n@@ -539,6 +542,7 @@ pub fn render<'a, N:'a, E:'a, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>, W:Writer>(\n \n #[cfg(test)]\n mod tests {\n+    use self::NodeLabels::*;\n     use super::{Id, LabelText, LabelStr, EscStr, Labeller};\n     use super::{Nodes, Edges, GraphWalk, render};\n     use std::io::{MemWriter, BufReader, IoResult};"}, {"sha": "5d97e9787e805a9ad25cb0f2c5b13aa1e82956bb", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::MaybeOwnedVector::*;\n+\n use std::default::Default;\n use std::fmt;\n use std::iter::FromIterator;"}, {"sha": "aa933f182e54511654d434499bf1daf474f33b65", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,6 +14,7 @@\n //!\n //! This implementation is also used as the fallback implementation of an event\n //! loop if no other one is provided (and M:N scheduling is desired).\n+use self::Message::*;\n \n use alloc::arc::Arc;\n use std::sync::atomic;"}, {"sha": "4e2908dd2b025b16fde151f25dfc7cbbc3ae8f38", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -183,8 +183,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-// NB this does *not* include globs, please keep it that way.\n-#![feature(macro_rules, phase, default_type_params)]\n+#![feature(macro_rules, phase, default_type_params, globs)]\n #![allow(deprecated)]\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;"}, {"sha": "c589a9fb592d8804d1407b0adabd1575005d6dd3", "filename": "src/libgreen/message_queue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmessage_queue.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::PopResult::*;\n+\n use alloc::arc::Arc;\n use std::sync::mpsc_queue as mpsc;\n use std::kinds::marker;"}, {"sha": "e8cb65d35df6a1c1434f7bc91db12a440866f2ad", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::SchedMessage::*;\n+use self::EffortLevel::*;\n+\n use std::mem;\n use std::rt::local::Local;\n use std::rt::mutex::NativeMutex;"}, {"sha": "e159c153bc38c73a576db94442011dc53574129d", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -18,6 +18,9 @@\n //! contains the rust task itself in order to juggle around ownership of the\n //! values.\n \n+pub use self::TaskType::*;\n+pub use self::Home::*;\n+\n use std::any::Any;\n use std::mem;\n use std::raw;"}, {"sha": "1a86ef2c6e00e14a676c349cae7171bb0724dbd3", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -85,6 +85,8 @@ extern crate core;\n #[cfg(test)] extern crate test;\n #[cfg(test)] extern crate native;\n \n+pub use self::Nullable::*;\n+\n // Explicit export lists for the intersection (provided here) mean that\n // you can write more-platform-agnostic code if you stick to just these\n // symbols."}, {"sha": "ea1136dfe3c43ff3d4bde72bfc29b89d55709ebc", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -58,7 +58,7 @@\n #![deny(unused_results, unused_must_use)]\n #![allow(non_camel_case_types)]\n #![allow(unknown_features)]\n-#![feature(default_type_params, lang_items, slicing_syntax)]\n+#![feature(default_type_params, lang_items, slicing_syntax, globs)]\n \n // NB this crate explicitly does *not* allow glob imports, please seriously\n //    consider whether they're needed before adding that feature here (the"}, {"sha": "a8ce2efd5392f41ed3d41fc299fbc899bd4b3c5a", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,9 @@\n \n //! The Gamma and derived distributions.\n \n+use self::GammaRepr::*;\n+use self::ChiSquaredRepr::*;\n+\n use core::num::Float;\n \n use {Rng, Open01};"}, {"sha": "ccc7b96b26b82d8bf244dfdf12c1cc579069bce6", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -25,14 +25,17 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n-#![feature(macro_rules, phase, slicing_syntax)]\n+#![feature(macro_rules, phase, slicing_syntax, globs)]\n #![allow(missing_docs)]\n \n extern crate serialize;\n \n #[phase(plugin, link)] extern crate log;\n #[cfg(test)] extern crate test;\n \n+pub use self::EbmlEncoderTag::*;\n+pub use self::Error::*;\n+\n use std::str;\n \n pub mod io;"}, {"sha": "52167ead18ad47073b70da64cae1d605b3da27b4", "filename": "src/libregex/compile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fcompile.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,8 @@\n // Enable this to squash warnings due to exporting pieces of the representation\n // for use with the regex! macro. See lib.rs for explanation.\n \n+pub use self::Inst::*;\n+\n use std::cmp;\n use parse;\n use parse::{"}, {"sha": "d8f1eeee50b0e9ae604663f5f9c9fb8380ea7cda", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -370,7 +370,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![allow(unknown_features)]\n-#![feature(macro_rules, phase, slicing_syntax)]\n+#![feature(macro_rules, phase, slicing_syntax, globs)]\n #![deny(missing_docs)]\n \n #[cfg(test)]"}, {"sha": "c6f09e4697182a2562a839218e4b11dddec5cade", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Ast::*;\n+pub use self::Repeater::*;\n+pub use self::Greed::*;\n+use self::BuildAst::*;\n+\n use std::char;\n use std::cmp;\n use std::fmt;"}, {"sha": "dbdb271874474eeaf59031a74a158fc6effda21b", "filename": "src/libregex/re.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::NamesIter::*;\n+pub use self::Regex::*;\n+\n use std::collections::HashMap;\n use std::fmt;\n use std::str::{MaybeOwned, Owned, Slice};"}, {"sha": "79019d213b8bade51703a6c7aeff8f90d32c2d63", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -33,6 +33,9 @@\n //\n // [1] - http://swtch.com/~rsc/regex/regex3.html\n \n+pub use self::MatchKind::*;\n+pub use self::StepState::*;\n+\n use std::cmp;\n use std::mem;\n use std::slice::SlicePrelude;"}, {"sha": "19ddb844bec0fa99908c4ebb35d35d2df74c69b6", "filename": "src/librustc/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fwrite.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::OutputType::*;\n+\n use back::lto;\n use back::link::{get_cc_prog, remove};\n use driver::driver::{CrateTranslation, ModuleTranslation, OutputFilenames};"}, {"sha": "1a40a04350d519f23d6ecdd1ae7761a5632dc55f", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,12 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command line options.\n \n+pub use self::EntryFnType::*;\n+pub use self::CrateType::*;\n+pub use self::Passes::*;\n+pub use self::OptLevel::*;\n+pub use self::DebugInfoLevel::*;\n+\n use driver::{early_error, early_warn};\n use driver::driver;\n use driver::session::Session;"}, {"sha": "498e676474c276d2ddd461114538247bd90871b0", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Input::*;\n \n use back::link;\n use back::write;"}, {"sha": "8099bf314c27c96391dd9b984e773cd65380e888", "filename": "src/librustc/driver/pretty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fdriver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fdriver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fpretty.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,11 @@\n \n //! The various pretty print routines.\n \n+pub use self::UserIdentifiedItem::*;\n+pub use self::PpSourceMode::*;\n+pub use self::PpMode::*;\n+use self::NodesMatchingUII::*;\n+\n use back::link;\n \n use driver::config;"}, {"sha": "4247d192d6d4c3bd6bbede7314331c1ed8e6243c", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -24,6 +24,7 @@\n //! `add_builtin!` or `add_builtin_with_new!` invocation in `context.rs`.\n //! Use the former for unit-like structs and the latter for structs with\n //! a `pub fn new()`.\n+use self::MethodContext::*;\n \n use metadata::csearch;\n use middle::def::*;"}, {"sha": "85cc413a1b801702d8f571be45ad10744db2e6bd", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -23,6 +23,7 @@\n //! previous lint state is pushed onto a stack and the ast is then recursed\n //! upon.  As the ast is traversed, this keeps track of the current lint level\n //! for all lint attributes.\n+use self::TargetLint::*;\n \n use middle::privacy::ExportedItems;\n use middle::subst;"}, {"sha": "315462235bebd40919eb0009d99a61c1d8614b98", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -30,6 +30,9 @@\n \n #![macro_escape]\n \n+pub use self::Level::*;\n+pub use self::LintSource::*;\n+\n use std::hash;\n use std::ascii::AsciiExt;\n use syntax::codemap::Span;"}, {"sha": "0da3b1b7a4e3e7b95cc425be893e509fe4514b1b", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(non_camel_case_types, non_upper_case_globals)]\n \n+pub use self::astencode_tag::*;\n+\n use std::mem;\n use back::svh::Svh;\n "}, {"sha": "50c4178601f2f9c9df2c1a0d68d1f2ffc60e4de4", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,8 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::found_ast::*;\n+\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;"}, {"sha": "c844c8940fe6247ec17d83a8c349657206a002fa", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,6 +13,10 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n+pub use self::MetadataBlob::*;\n+pub use self::LinkagePreference::*;\n+pub use self::NativeLibaryKind::*;\n+\n use back::svh::Svh;\n use metadata::decoder;\n use metadata::loader;"}, {"sha": "2af1f12a2cd82ac5ff06a81ad57da3d321967805", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,9 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::DefLike::*;\n+use self::Family::*;\n+\n use back::svh::Svh;\n use metadata::cstore::crate_metadata;\n use metadata::common::*;"}, {"sha": "e7a31520915ca6786082c95432fbe272cf37e957", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,6 +13,8 @@\n #![allow(unused_must_use)] // everything is just a MemWriter, can't fail\n #![allow(non_camel_case_types)]\n \n+pub use self::InlinedItemRef::*;\n+\n use back::svh::Svh;\n use driver::config;\n use metadata::common::*;\n@@ -151,6 +153,10 @@ fn encode_variant_id(rbml_w: &mut Encoder, vid: DefId) {\n     let s = def_to_string(vid);\n     rbml_w.writer.write(s.as_bytes());\n     rbml_w.end_tag();\n+\n+    rbml_w.start_tag(tag_mod_child);\n+    rbml_w.wr_str(s.as_slice());\n+    rbml_w.end_tag();\n }\n \n pub fn write_closure_type(ecx: &EncodeContext,"}, {"sha": "aeed829f8055b05a7c14e42d8b668237d9f0feea", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::FileMatch::*;\n+\n use std::cell::RefCell;\n use std::collections::HashSet;\n use std::io::fs::PathExtensions;"}, {"sha": "e1b0797e9825375c7eea4c9090b2f6fe04c845d1", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,6 +16,8 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::DefIdSource::*;\n+\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty;"}, {"sha": "c7fe1ce73194636c7e859f1da6df69eefccb101a", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,7 +16,7 @@\n // 2. loans made in overlapping scopes do not conflict\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n-\n+use self::UseError::*;\n \n use middle::borrowck::*;\n use middle::expr_use_visitor as euv;"}, {"sha": "1c8f1effcf6d493eb6fe3f3e278ee9bbbd0311a3", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,8 @@\n  * Computes the restrictions that result from a borrow.\n  */\n \n+pub use self::RestrictionResult::*;\n+\n use middle::borrowck::*;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;"}, {"sha": "4a2f57735e18dfb02b7658314df7245b9363b1d6", "filename": "src/librustc/middle/borrowck/graphviz.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,8 @@\n //! libgraphviz traits, specialized to attaching borrowck analysis\n //! data to rendered labels.\n \n+pub use self::Variant::*;\n+\n /// For clarity, rename the graphviz crate locally to dot.\n use graphviz as dot;\n pub use middle::cfg::graphviz::{Node, Edge};"}, {"sha": "44206343c10816cfe86fc6abd044aaee8590ca88", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,12 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::LoanPath::*;\n+pub use self::LoanPathElem::*;\n+pub use self::bckerr_code::*;\n+pub use self::AliasableViolationKind::*;\n+pub use self::MovedValueUseKind::*;\n+\n use middle::cfg;\n use middle::dataflow::DataFlowContext;\n use middle::dataflow::BitwiseOperator;"}, {"sha": "b28d963371e851206ea072627b7ba7a0c35260cc", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,6 +15,8 @@ comments in the section \"Moves and initialization\" and in `doc.rs`.\n \n */\n \n+pub use self::MoveKind::*;\n+\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::uint;"}, {"sha": "9fc44744cf903ce2c0a04865cafac2ce744ba2ac", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+use self::Context::*;\n \n use driver::session::Session;\n "}, {"sha": "d67c5b0dece29f1d0c86d181417e6b725a7087f4", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Constructor::*;\n+use self::Usefulness::*;\n+use self::WitnessPreference::*;\n+\n use middle::const_eval::{compare_const_vals, const_bool, const_float, const_val};\n use middle::const_eval::{const_expr_to_pat, eval_const_expr, lookup_const_by_id};\n use middle::def::*;"}, {"sha": "636898187e49e63a58e4383abb397dad7c74547d", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -23,6 +23,7 @@\n // Rules Enforced Elsewhere:\n // - It's not possible to take the address of a static item with unsafe interior. This is enforced\n // by borrowck::gather_loans\n+use self::Mode::*;\n \n use middle::ty;\n use middle::def;"}, {"sha": "a892744262bbee506e063472a8de3b4f28e47c46", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,9 @@\n #![allow(non_camel_case_types)]\n #![allow(unsigned_negation)]\n \n+pub use self::const_val::*;\n+pub use self::constness::*;\n+\n use metadata::csearch;\n use middle::astencode;\n use middle::def;"}, {"sha": "366f4bd024998980130062143c2768f24e189d96", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,6 +16,7 @@\n  * GEN and KILL bits for each expression.\n  */\n \n+pub use self::EntryOrExit::*;\n \n use middle::cfg;\n use middle::cfg::CFGIndex;"}, {"sha": "4a4298f62f226bb2f331e768efb6d36dfe779804", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Def::*;\n+pub use self::MethodProvenance::*;\n+\n use middle::subst::ParamSpace;\n use syntax::ast;\n use syntax::ast_util::local_def;"}, {"sha": "41d35969f38be2e25054fa66688dbeb8dc8d5f2d", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,7 @@\n \n //! Enforces the Rust effect system. Currently there is just one effect,\n /// `unsafe`.\n+use self::UnsafeContext::*;\n \n use middle::def;\n use middle::ty;"}, {"sha": "a8ab4425f1dbaa1ea0eda9960b077210219bc2b1", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,6 +14,12 @@\n  * `ExprUseVisitor` determines how expressions are being used.\n  */\n \n+pub use self::MutateMode::*;\n+pub use self::LoanCause::*;\n+pub use self::ConsumeMode::*;\n+pub use self::MoveReason::*;\n+use self::OverloadedCallType::*;\n+\n use middle::mem_categorization as mc;\n use middle::def;\n use middle::mem_categorization::Typer;"}, {"sha": "4fe770a1e0fb33c207cd683b98ad37d27dadcddb", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -19,6 +19,7 @@\n //\n // * Functions called by the compiler itself.\n \n+pub use self::LangItem::*;\n \n use driver::session::Session;\n use metadata::csearch::each_lang_item;"}, {"sha": "c743b1f57fd71b6ece790bf4fd5047b02ae55551", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -107,6 +107,9 @@\n  *   It is the responsibility of typeck to ensure that there are no\n  *   `return` expressions in a function declared as diverging.\n  */\n+use self::LoopKind::*;\n+use self::LiveNodeKind::*;\n+use self::VarKind::*;\n \n use middle::def::*;\n use middle::mem_categorization::Typer;"}, {"sha": "c9e5bbbc54e1d08ab141d8ab8d6ffe139e295f6c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -62,6 +62,17 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::PointerKind::*;\n+pub use self::InteriorKind::*;\n+pub use self::FieldName::*;\n+pub use self::ElementKind::*;\n+pub use self::MutabilityCategory::*;\n+pub use self::InteriorSafety::*;\n+pub use self::AliasableReason::*;\n+pub use self::Note::*;\n+pub use self::deref_kind::*;\n+pub use self::categorization::*;\n+\n use middle::def;\n use middle::ty;\n use middle::typeck;"}, {"sha": "098108b25e5d462ad0f64c94f2766399bb35ae22", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,8 @@\n //! A pass that checks to make sure private fields and methods aren't used\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n+use self::PrivacyResult::*;\n+use self::FieldName::*;\n \n use std::mem::replace;\n "}, {"sha": "134e4bc8d18224f05d82cfd39fa8d334439e83ce", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 55, "deletions": 80, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,32 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::PrivateDep::*;\n+pub use self::ImportUse::*;\n+pub use self::TraitItemKind::*;\n+pub use self::LastPrivate::*;\n+use self::PatternBindingMode::*;\n+use self::Namespace::*;\n+use self::NamespaceError::*;\n+use self::NamespaceResult::*;\n+use self::NameDefinition::*;\n+use self::ImportDirectiveSubclass::*;\n+use self::ReducedGraphParent::*;\n+use self::ResolveResult::*;\n+use self::FallbackSuggestion::*;\n+use self::TypeParameters::*;\n+use self::RibKind::*;\n+use self::MethodSort::*;\n+use self::UseLexicalScopeFlag::*;\n+use self::ModulePrefixResult::*;\n+use self::NameSearchType::*;\n+use self::BareIdentifierPatternResolution::*;\n+use self::DuplicateCheckingMode::*;\n+use self::ParentLink::*;\n+use self::ModuleKind::*;\n+use self::TraitReferenceType::*;\n+use self::FallbackChecks::*;\n+\n use driver::session::Session;\n use lint;\n use metadata::csearch;\n@@ -574,7 +600,6 @@ bitflags! {\n     flags DefModifiers: u8 {\n         const PUBLIC            = 0b0000_0001,\n         const IMPORTABLE        = 0b0000_0010,\n-        const ENUM_STAGING_HACK = 0b0000_0100,\n     }\n }\n \n@@ -982,6 +1007,13 @@ impl<'a, 'b, 'v> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b> {\n     }\n }\n \n+#[deriving(PartialEq)]\n+enum FallbackChecks {\n+    Everything,\n+    OnlyTraitAndStatics\n+}\n+\n+\n impl<'a> Resolver<'a> {\n     fn new(session: &'a Session, crate_span: Span) -> Resolver<'a> {\n         let graph_root = NameBindings::new();\n@@ -1320,15 +1352,7 @@ impl<'a> Resolver<'a> {\n                     self.build_reduced_graph_for_variant(\n                         &**variant,\n                         local_def(item.id),\n-                        ModuleReducedGraphParent(name_bindings.get_module()),\n-                        modifiers);\n-\n-                    // Temporary staging hack\n-                    self.build_reduced_graph_for_variant(\n-                        &**variant,\n-                        local_def(item.id),\n-                        parent.clone(),\n-                        modifiers | ENUM_STAGING_HACK);\n+                        ModuleReducedGraphParent(name_bindings.get_module()));\n                 }\n                 parent\n             }\n@@ -1596,8 +1620,7 @@ impl<'a> Resolver<'a> {\n     fn build_reduced_graph_for_variant(&mut self,\n                                        variant: &Variant,\n                                        item_id: DefId,\n-                                       parent: ReducedGraphParent,\n-                                       modifiers: DefModifiers) {\n+                                       parent: ReducedGraphParent) {\n         let name = variant.node.name.name;\n         let is_exported = match variant.node.kind {\n             TupleVariantKind(_) => false,\n@@ -1611,12 +1634,14 @@ impl<'a> Resolver<'a> {\n         let child = self.add_child(name, parent,\n                                    ForbidDuplicateTypesAndValues,\n                                    variant.span);\n+        // variants are always treated as importable to allow them to be glob\n+        // used\n         child.define_value(DefVariant(item_id,\n                                       local_def(variant.node.id), is_exported),\n-                           variant.span, modifiers);\n+                           variant.span, PUBLIC | IMPORTABLE);\n         child.define_type(DefVariant(item_id,\n                                      local_def(variant.node.id), is_exported),\n-                          variant.span, modifiers);\n+                          variant.span, PUBLIC | IMPORTABLE);\n     }\n \n     /// Constructs the reduced graph for one 'view item'. View items consist\n@@ -1875,28 +1900,20 @@ impl<'a> Resolver<'a> {\n \n         match def {\n           DefMod(_) | DefForeignMod(_) => {}\n-          // Still here for staging\n-          DefVariant(enum_did, variant_id, is_struct) => {\n-            debug!(\"(building reduced graph for external crate) building \\\n-                    variant {}\",\n-                   final_ident);\n-            // If this variant is public, then it was publicly reexported,\n-            // otherwise we need to inherit the visibility of the enum\n-            // definition.\n-            let is_exported = is_public ||\n-                              self.external_exports.contains(&enum_did);\n-            let modifiers = IMPORTABLE | ENUM_STAGING_HACK | if is_exported {\n-                PUBLIC\n-            } else {\n-                DefModifiers::empty()\n-            };\n-            if is_struct {\n-                child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n-                // Not adding fields for variants as they are not accessed with a self receiver\n-                self.structs.insert(variant_id, Vec::new());\n-            } else {\n-                child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n-            }\n+          DefVariant(_, variant_id, is_struct) => {\n+              debug!(\"(building reduced graph for external crate) building \\\n+                      variant {}\",\n+                      final_ident);\n+              // variants are always treated as importable to allow them to be\n+              // glob used\n+              let modifiers = PUBLIC | IMPORTABLE;\n+              if is_struct {\n+                  child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n+                  // Not adding fields for variants as they are not accessed with a self receiver\n+                  self.structs.insert(variant_id, Vec::new());\n+              } else {\n+                  child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n+              }\n           }\n           DefFn(ctor_id, true) => {\n             child_name_bindings.define_value(\n@@ -1954,40 +1971,6 @@ impl<'a> Resolver<'a> {\n                                                   is_public,\n                                                   DUMMY_SP)\n           }\n-          DefTy(def_id, true) => { // enums\n-              debug!(\"(building reduced graph for external crate) building enum {}\", final_ident);\n-              child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n-              let enum_module = ModuleReducedGraphParent(child_name_bindings.get_module());\n-\n-              let variants = csearch::get_enum_variant_defs(&self.session.cstore, def_id);\n-              for &(v_def, name, vis) in variants.iter() {\n-                  let (variant_id, is_struct) = match v_def {\n-                      DefVariant(_, variant_id, is_struct) => (variant_id, is_struct),\n-                      _ => unreachable!()\n-                  };\n-                  let child = self.add_child(name, enum_module.clone(),\n-                                             OverwriteDuplicates,\n-                                             DUMMY_SP);\n-\n-                  // If this variant is public, then it was publicly reexported,\n-                  // otherwise we need to inherit the visibility of the enum\n-                  // definition.\n-                  let variant_exported = vis == ast::Public || is_exported;\n-                  let modifiers = IMPORTABLE | if variant_exported {\n-                      PUBLIC\n-                  } else {\n-                      DefModifiers::empty()\n-                  };\n-                  if is_struct {\n-                      child.define_type(v_def, DUMMY_SP, modifiers);\n-                      // Not adding fields for variants as they are not accessed with a self\n-                      // receiver\n-                      self.structs.insert(variant_id, Vec::new());\n-                  } else {\n-                      child.define_value(v_def, DUMMY_SP, modifiers);\n-                  }\n-              }\n-          }\n           DefTy(..) | DefAssociatedTy(..) => {\n               debug!(\"(building reduced graph for external \\\n                       crate) building type {}\", final_ident);\n@@ -3058,8 +3041,7 @@ impl<'a> Resolver<'a> {\n         match import_resolution.value_target {\n             Some(ref target) if !target.shadowable => {\n                 match *name_bindings.value_def.borrow() {\n-                    // We want to allow the \"flat\" def of enum variants to be shadowed\n-                    Some(ref value) if !value.modifiers.contains(ENUM_STAGING_HACK) => {\n+                    Some(ref value) => {\n                         let msg = format!(\"import `{}` conflicts with value \\\n                                            in this module\",\n                                           token::get_name(name).get());\n@@ -3082,8 +3064,7 @@ impl<'a> Resolver<'a> {\n         match import_resolution.type_target {\n             Some(ref target) if !target.shadowable => {\n                 match *name_bindings.type_def.borrow() {\n-                    // We want to allow the \"flat\" def of enum variants to be shadowed\n-                    Some(ref ty) if !ty.modifiers.contains(ENUM_STAGING_HACK) => {\n+                    Some(ref ty) => {\n                         match ty.module_def {\n                             None => {\n                                 let msg = format!(\"import `{}` conflicts with type in \\\n@@ -5675,12 +5656,6 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn find_fallback_in_self_type(&mut self, name: Name) -> FallbackSuggestion {\n-        #[deriving(PartialEq)]\n-        enum FallbackChecks {\n-            Everything,\n-            OnlyTraitAndStatics\n-        }\n-\n         fn extract_path_and_node_id(t: &Ty, allow: FallbackChecks)\n                                                     -> Option<(Path, NodeId, FallbackChecks)> {\n             match t.node {"}, {"sha": "359f58a11004fb1735da1659a743622fa115a77f", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,6 +17,9 @@\n  * way. Therefore we break lifetime name resolution into a separate pass.\n  */\n \n+pub use self::DefRegion::*;\n+use self::ScopeChain::*;\n+\n use driver::session::Session;\n use middle::subst;\n use std::fmt;"}, {"sha": "b8d495bd495246d32dae64efce073cecee43cd81", "filename": "src/librustc/middle/save/recorder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Frecorder.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Row::*;\n+\n use middle::save::escape;\n use middle::save::span_utils::SpanUtils;\n "}, {"sha": "520209257f5b827064871ef85d4bf8106543b573", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,9 @@\n \n // Type substitutions.\n \n+pub use self::ParamSpace::*;\n+pub use self::RegionSubsts::*;\n+\n use middle::ty;\n use middle::ty_fold;\n use middle::ty_fold::{TypeFoldable, TypeFolder};"}, {"sha": "1db8cf6baf3b63cdced005687f22a487910f3899", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,11 @@\n  * Trait Resolution. See doc.rs.\n  */\n \n+pub use self::SelectionError::*;\n+pub use self::FulfillmentErrorCode::*;\n+pub use self::Vtable::*;\n+pub use self::ObligationCauseCode::*;\n+\n use middle::mem_categorization::Typer;\n use middle::subst;\n use middle::ty;"}, {"sha": "9ab2f948f9da20f23378f821698ccc294490fb43", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,12 @@\n /*! See `doc.rs` for high-level documentation */\n #![allow(dead_code)] // FIXME -- just temporarily\n \n+pub use self::MethodMatchResult::*;\n+pub use self::MethodMatchedData::*;\n+use self::Candidate::*;\n+use self::BuiltinBoundConditions::*;\n+use self::EvaluationResult::*;\n+\n use super::{ErrorReported};\n use super::{Obligation, ObligationCause};\n use super::{SelectionError, Unimplemented, Overflow,"}, {"sha": "d7a2e7429f91ee64d16eb0667b5f6c39b16a6767", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -186,6 +186,12 @@\n  *\n  */\n \n+pub use self::BranchKind::*;\n+pub use self::OptResult::*;\n+pub use self::TransBindingMode::*;\n+use self::Opt::*;\n+use self::FailureHandler::*;\n+\n use back::abi;\n use driver::config::FullDebugInfo;\n use llvm::{ValueRef, BasicBlockRef};\n@@ -544,7 +550,7 @@ fn enter_opt<'a, 'p, 'blk, 'tcx>(\n         &SliceLengthGreaterOrEqual(before, after) =>\n             check_match::SliceWithSubslice(before, after),\n         &Variant(_, _, def_id) =>\n-            check_match::Variant(def_id)\n+            check_match::Constructor::Variant(def_id)\n     };\n \n     let mcx = check_match::MatchCheckCtxt { tcx: bcx.tcx() };"}, {"sha": "d48868c28891838753fd7be1aa80d13c41c6a6f5", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -45,6 +45,9 @@\n \n #![allow(unsigned_negation)]\n \n+pub use self::PointerField::*;\n+pub use self::Repr::*;\n+\n use std::num::Int;\n use std::rc::Rc;\n "}, {"sha": "b267d1d7f3e1e8fb24157f54f5759fb4a38d8346", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -25,6 +25,10 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::IsUnboxedClosureFlag::*;\n+pub use self::ValueOrigin::*;\n+pub use self::scalar_type::*;\n+\n use back::link::{mangle_exported_name};\n use back::{link, abi};\n use driver::config;"}, {"sha": "d69238ae92eab14ce2a4cb105c9d5f9d3c1656dc", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::ArgKind::*;\n+\n use llvm::Attribute;\n use std::option;\n use middle::trans::context::CrateContext;"}, {"sha": "f779ef3d311bb3eecaa6b24448966f4d889d1026", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use self::Strategy::*;\n use llvm::*;\n use middle::trans::cabi::{ArgType, FnType};\n use middle::trans::type_::Type;\n use super::common::*;\n use super::machine::*;\n \n+enum Strategy { RetValue(Type), RetPointer }\n pub fn compute_abi_info(ccx: &CrateContext,\n                         atys: &[Type],\n                         rty: Type,\n@@ -32,7 +34,6 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         // http://www.angelcode.com/dev/callconv/callconv.html\n         // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp\n \n-        enum Strategy { RetValue(Type), RetPointer }\n         let t = &ccx.sess().target.target;\n         let strategy = if t.options.is_like_osx || t.options.is_like_windows {\n             match llsize_of_alloc(ccx, rty) {"}, {"sha": "1863c16baa011694b6f6707da6adf63ebd6fa3c2", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,7 @@\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n #![allow(non_upper_case_globals)]\n+use self::RegClass::*;\n \n use llvm;\n use llvm::{Integer, Pointer, Float, Double};"}, {"sha": "956942068d9f3cb3723ca466e4b44683a53535c6", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,6 +16,10 @@\n  * closure.\n  */\n \n+pub use self::AutorefArg::*;\n+pub use self::CalleeData::*;\n+pub use self::CallArgs::*;\n+\n use arena::TypedArena;\n use back::abi;\n use back::link;"}, {"sha": "1207c995998bc5006fef8713994dcfb8f065c9bf", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,6 +13,11 @@\n  * drop glue. See discussion in `doc.rs` for a high-level summary.\n  */\n \n+pub use self::ScopeId::*;\n+pub use self::CleanupScopeKind::*;\n+pub use self::EarlyExitLabel::*;\n+pub use self::Heap::*;\n+\n use llvm::{BasicBlockRef, ValueRef};\n use middle::trans::base;\n use middle::trans::build;"}, {"sha": "e4bfdf74d85758d3212701d39e054ec3f394ca34", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,8 @@\n \n //! Code that is useful in various trans modules.\n \n+pub use self::ExprOrMethodCall::*;\n+\n use driver::session::Session;\n use llvm;\n use llvm::{ValueRef, BasicBlockRef, BuilderRef, ContextRef};"}, {"sha": "4fba0e405104837dff370d740f9ce503905182b2", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,6 +13,9 @@\n  * Datums are and how they are intended to be used.\n  */\n \n+pub use self::Expr::*;\n+pub use self::RvalueMode::*;\n+\n use llvm::ValueRef;\n use middle::trans::base::*;\n use middle::trans::build::Load;"}, {"sha": "eaff757679aa076942cb01e011da0ebb3ff55b4c", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -183,6 +183,14 @@ the unique type ID as described above *can* be used as identifier. Since it is\n comparatively expensive to construct, though, `ty::type_id()` is still used\n additionally as an optimization for cases where the exact same type has been\n seen before (which is most of the time). */\n+use self::FunctionDebugContextRepr::*;\n+use self::VariableAccess::*;\n+use self::VariableKind::*;\n+use self::MemberOffset::*;\n+use self::MemberDescriptionFactory::*;\n+use self::RecursiveTypeDescription::*;\n+use self::EnumDiscriminantInfo::*;\n+use self::DebugLocation::*;\n \n use driver::config;\n use driver::config::{FullDebugInfo, LimitedDebugInfo, NoDebugInfo};"}, {"sha": "4a2ea9c5f63ad2a88cb11619296254952bf60ab4", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -33,6 +33,10 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::cast_kind::*;\n+pub use self::Dest::*;\n+use self::lazy_binop_ty::*;\n+\n use back::abi;\n use llvm;\n use llvm::{ValueRef};"}, {"sha": "1fff29255dae3438f80b26ecc0536cc847e695c1", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::named_ty::*;\n+\n use middle::subst;\n use middle::trans::adt;\n use middle::trans::common::*;"}, {"sha": "134dac9d3a7f61c2f739148633d0e5351d31f5e0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,32 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::terr_vstore_kind::*;\n+pub use self::type_err::*;\n+pub use self::BuiltinBound::*;\n+pub use self::InferTy::*;\n+pub use self::InferRegion::*;\n+pub use self::ImplOrTraitItemId::*;\n+pub use self::UnboxedClosureKind::*;\n+pub use self::TraitStore::*;\n+pub use self::ast_ty_to_ty_cache_entry::*;\n+pub use self::Variance::*;\n+pub use self::AutoAdjustment::*;\n+pub use self::Representability::*;\n+pub use self::UnsizeKind::*;\n+pub use self::AutoRef::*;\n+pub use self::ExprKind::*;\n+pub use self::DtorKind::*;\n+pub use self::ExplicitSelfCategory::*;\n+pub use self::FnOutput::*;\n+pub use self::Region::*;\n+pub use self::ImplOrTraitItemContainer::*;\n+pub use self::BorrowKind::*;\n+pub use self::ImplOrTraitItem::*;\n+pub use self::BoundRegion::*;\n+pub use self::sty::*;\n+pub use self::IntVarValue::*;\n+\n use back::svh::Svh;\n use driver::session::Session;\n use lint;"}, {"sha": "3ef9a59d8adb4560db95f12e3688aeb7b79f67d1", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -48,7 +48,6 @@\n  * case but `&a` in the second.  Basically, defaults that appear inside\n  * an rptr (`&r.T`) use the region `r` that appears in the rptr.\n  */\n-\n use middle::const_eval;\n use middle::def;\n use middle::resolve_lifetime as rl;"}, {"sha": "59b8309383ce082267f4dd061650de78fcae6a94", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -79,6 +79,10 @@ obtained the type `Foo`, we would never match this method.\n \n */\n \n+pub use self::CheckTraitsFlag::*;\n+pub use self::AutoderefReceiverFlag::*;\n+pub use self::MethodError::*;\n+pub use self::CandidateSource::*;\n \n use middle::subst;\n use middle::subst::{Subst, SelfSpace};"}, {"sha": "17c9676a98b98aba6aff9383b77556ee9ab8646c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -76,6 +76,11 @@ type parameter).\n \n */\n \n+pub use self::LvaluePreference::*;\n+pub use self::DerefArgs::*;\n+use self::Expectation::*;\n+use self::IsBinopAssignment::*;\n+use self::TupleArgumentsFlag::*;\n \n use driver::session::Session;\n use middle::const_eval;"}, {"sha": "b7710ab7bf9b9da90fab1ae43c8b8335386201cd", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,8 @@\n \n // #![warn(deprecated_mode)]\n \n+pub use self::WfConstraint::*;\n+\n use middle::subst::{ParamSpace, Subst, Substs};\n use middle::ty;\n use middle::ty_fold;"}, {"sha": "9ded3265f828ef11fcb0d8447008795637c8fb25", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,7 @@\n // Type resolution: the phase that finds all the types in the AST with\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n+use self::ResolveReason::*;\n \n use middle::def;\n use middle::pat_util;"}, {"sha": "a5ca5179f08b00372b6b1a6ec36fbd86c788ffea", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -29,7 +29,8 @@ bounds for each parameter.  Type parameters themselves are represented\n as `ty_param()` instances.\n \n */\n-\n+use self::ConvertMethodContext::*;\n+use self::CreateTypeParametersForAssociatedTypesFlag::*;\n \n use metadata::csearch;\n use middle::def;"}, {"sha": "77ee389c7600ff8bea92a9f4e7f998da45052563", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -58,6 +58,7 @@ ported to this system, and which relies on string concatenation at the\n time of error detection.\n \n */\n+use self::FreshOrKept::*;\n \n use std::collections::HashSet;\n use middle::def;"}, {"sha": "1a64af1270fddf6fabcf9aee6269f7f1ea8eede1", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,11 @@\n \n #![allow(non_camel_case_types)]\n \n+pub use self::TypeOrigin::*;\n+pub use self::ValuePairs::*;\n+pub use self::SubregionOrigin::*;\n+pub use self::RegionVariableOrigin::*;\n+pub use self::fixup_err::*;\n pub use middle::ty::IntVarValue;\n pub use self::resolve::resolve_and_force_all_but_regions;\n pub use self::resolve::{force_all, not_regions};"}, {"sha": "c65a930195c7f0488665c930d366649a507b1879", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,13 @@\n \n /*! See doc.rs */\n \n+pub use self::Constraint::*;\n+pub use self::Verify::*;\n+pub use self::UndoLogEntry::*;\n+pub use self::CombineMapType::*;\n+pub use self::RegionResolutionError::*;\n+pub use self::VarValue::*;\n+use self::Classification::*;\n \n use middle::ty;\n use middle::ty::{BoundRegion, FreeRegion, Region, RegionVid};"}, {"sha": "4bb2cc2ca5cf49791235f9624f63bc0e49a0f816", "filename": "src/librustc/middle/typeck/infer/type_variable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftype_variable.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::RelationDir::*;\n+use self::TypeVariableValue::*;\n+use self::UndoEntry::*;\n+\n use middle::ty;\n use std::mem;\n use util::snapshot_vec as sv;"}, {"sha": "eaf1d2805b01e0c1aa20e65d66a1d6d1849ffb8e", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::VarValue::*;\n+\n use std::kinds::marker;\n \n use middle::ty::{expected_found, IntVarValue};"}, {"sha": "8561594212f147b90b249cab2d3c427cd5feb3c1", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -61,6 +61,10 @@ independently:\n \n #![allow(non_camel_case_types)]\n \n+pub use self::ExprAdjustment::*;\n+pub use self::vtable_origin::*;\n+pub use self::MethodOrigin::*;\n+\n use driver::config;\n \n use middle::def;"}, {"sha": "76250d44baf6eb5e7ccaa1ace11d5278ac8afb8d", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -191,6 +191,8 @@ represents the \"variance transform\" as defined in the paper:\n   `C<E>` is `V3 = V1.xform(V2)`.\n \n */\n+use self::VarianceTerm::*;\n+use self::ParamKind::*;\n \n use arena;\n use arena::Arena;"}, {"sha": "91e67bbacc30f30bb0ebed04ca87ddea2ce71172", "filename": "src/librustc/util/snapshot_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -23,6 +23,7 @@\n  * make and also supplying a delegate capable of reversing those\n  * changes.\n  */\n+use self::UndoLog::*;\n \n use std::kinds::marker;\n use std::mem;"}, {"sha": "c7a7888c1cd60002ac4e5a05ff6b038a42fa4441", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -130,6 +130,9 @@ impl fmt::Show for Svh {\n // declaration should be irrelevant to the ABI.\n \n mod svh_visitor {\n+    pub use self::SawExprComponent::*;\n+    pub use self::SawStmtComponent::*;\n+    use self::SawAbiComponent::*;\n     use syntax::ast;\n     use syntax::ast::*;\n     use syntax::codemap::Span;"}, {"sha": "d705c82dd9a471151046995de1c8712f901b050f", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,9 @@\n \n //! LLVM diagnostic reports.\n \n+pub use self::OptimizationDiagnosticKind::*;\n+pub use self::Diagnostic::*;\n+\n use libc::c_char;\n \n use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};"}, {"sha": "02235669c0958fbe5ad4c4f1c45723a5cdff64b4", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -27,6 +27,25 @@\n \n extern crate libc;\n \n+pub use self::OtherAttribute::*;\n+pub use self::SpecialAttribute::*;\n+pub use self::AttributeSet::*;\n+pub use self::IntPredicate::*;\n+pub use self::RealPredicate::*;\n+pub use self::TypeKind::*;\n+pub use self::AtomicBinOp::*;\n+pub use self::AtomicOrdering::*;\n+pub use self::FileType::*;\n+pub use self::MetadataType::*;\n+pub use self::AsmDialect::*;\n+pub use self::CodeGenOptLevel::*;\n+pub use self::RelocMode::*;\n+pub use self::CodeGenModel::*;\n+pub use self::DiagnosticKind::*;\n+pub use self::CallConv::*;\n+pub use self::Visibility::*;\n+pub use self::DiagnosticSeverity::*;\n+\n use std::c_str::ToCStr;\n use std::cell::RefCell;\n use std::{raw, mem};\n@@ -432,6 +451,7 @@ pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void\n pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n \n pub mod debuginfo {\n+    pub use self::DIDescriptorFlags::*;\n     use super::{ValueRef};\n \n     pub enum DIBuilder_opaque {}"}, {"sha": "98eeada6f5d8e6a90fccd8b02f70b4fdc38b8efa", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,22 @@\n //! This module contains the \"cleaned\" pieces of the AST, and the functions\n //! that clean them.\n \n+pub use self::ImplMethod::*;\n+pub use self::Type::*;\n+pub use self::PrimitiveType::*;\n+pub use self::TypeKind::*;\n+pub use self::StructField::*;\n+pub use self::VariantKind::*;\n+pub use self::Mutability::*;\n+pub use self::ViewItemInner::*;\n+pub use self::ViewPath::*;\n+pub use self::ItemEnum::*;\n+pub use self::Attribute::*;\n+pub use self::TyParamBound::*;\n+pub use self::SelfTy::*;\n+pub use self::FunctionRetTy::*;\n+pub use self::TraitMethod::*;\n+\n use syntax;\n use syntax::ast;\n use syntax::ast_util;\n@@ -35,6 +51,8 @@ use rustc::middle::stability;\n \n use std::rc::Rc;\n use std::u32;\n+use std::str::Str as StrTrait; // Conflicts with Str variant\n+use std::char::Char as CharTrait; // Conflicts with Char variant\n \n use core::DocContext;\n use doctree;"}, {"sha": "0a748f7e7982fc3197b336536eb9e9b9f19e682f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+pub use self::MaybeTyped::*;\n \n use rustc::driver::{config, driver, session};\n use rustc::middle::{privacy, ty};"}, {"sha": "b78ce21eb06e354e9231e58a038f43a6fc54459f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,8 @@\n \n //! This module is used to store stuff from Rust's AST in a more convenient\n //! manner (and with prettier names) before cleaning.\n+pub use self::StructType::*;\n+pub use self::TypeBound::*;\n \n use syntax;\n use syntax::codemap::Span;"}, {"sha": "901761ba806ffac27bc79ce8de1f6ae1e20f8f36", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n //! Item types.\n+pub use self::ItemType::*;\n \n use std::fmt;\n use clean;"}, {"sha": "1dd651481693f88e5b08417bd0c3d420a11d317b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -32,6 +32,7 @@\n //! for creating the corresponding search index and source file renderings.\n //! These tasks are not parallelized (they haven't been a bottleneck yet), and\n //! both occur before the crate is rendered.\n+pub use self::ExternalLocation::*;\n \n use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::{Occupied, Vacant};"}, {"sha": "8f0f19fe16d0c79983f8cff68355c40d0ceb7c1c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -249,7 +249,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                                 self.visit_item(&**i, None, om);\n                             }\n                         }\n-                        _ => { panic!(\"glob not mapped to a module\"); }\n+                        ast::ItemEnum(..) => {}\n+                        _ => { panic!(\"glob not mapped to a module or enum\"); }\n                     }\n                 } else {\n                     self.visit_item(it, renamed, om);"}, {"sha": "e4565be284f533c70fae80b753995f5bcfd7fb28", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,6 +15,12 @@\n #![allow(non_snake_case)]\n #![allow(dead_code)] // these are just bindings\n \n+#[cfg(any(not(target_arch = \"arm\"), target_os = \"ios\"))]\n+pub use self::_Unwind_Action::*;\n+#[cfg(target_arch = \"arm\")]\n+pub use self::_Unwind_State::*;\n+pub use self::_Unwind_Reason_Code::*;\n+\n use libc;\n \n #[cfg(any(not(target_arch = \"arm\"), target_os = \"ios\"))]"}, {"sha": "ca0f694676f29fd8df503d3c171c09b456664efd", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -38,6 +38,8 @@ assert_eq!(*key_vector.get().unwrap(), vec![4]);\n // Casting 'Arcane Sight' reveals an overwhelming aura of Transmutation\n // magic.\n \n+pub use self::KeyValue::*;\n+\n use core::prelude::*;\n \n use alloc::heap;"}, {"sha": "2c8fca2d5e6d9c49b2019b4a52581272b15fe2a9", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,9 @@\n //! to be available 'everywhere'. Unwinding, local storage, and logging.\n //! Even a 'freestanding' Rust would likely want to implement this.\n \n+pub use self::BlockedTask::*;\n+use self::TaskState::*;\n+\n use alloc::arc::Arc;\n use alloc::boxed::{BoxAny, Box};\n use core::any::Any;"}, {"sha": "7544b93ce522a4be3ecccae3995c252272e436d0", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -398,6 +398,7 @@ pub mod eabi {\n #[doc(hidden)]\n #[allow(non_camel_case_types, non_snake_case)]\n pub mod eabi {\n+    pub use self::EXCEPTION_DISPOSITION::*;\n     use libunwind as uw;\n     use libc::{c_void, c_int};\n "}, {"sha": "9b1e285431f6a5c04ef9ef73c2718656a7106514", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,10 @@\n // ignore-lexer-test FIXME #15679\n \n //! Base64 binary-to-text encoding\n+\n+pub use self::FromBase64Error::*;\n+pub use self::CharacterSet::*;\n+\n use std::fmt;\n use std::string;\n use std::error;"}, {"sha": "bd49da7667a9bf7463fa64b2e0cdc2cabbe120c1", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,9 @@\n // ignore-lexer-test FIXME #15679\n \n //! Hex binary-to-text encoding\n+\n+pub use self::FromHexError::*;\n+\n use std::fmt;\n use std::string;\n use std::error;"}, {"sha": "80238f6df415db950610b83c732e8bc523f1f6d9", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -194,6 +194,15 @@ fn main() {\n \n */\n \n+pub use self::JsonEvent::*;\n+pub use self::StackElement::*;\n+pub use self::Json::*;\n+pub use self::ErrorCode::*;\n+pub use self::ParserError::*;\n+pub use self::DecoderError::*;\n+use self::ParserState::*;\n+use self::InternalStackElement::*;\n+\n use std;\n use std::collections::{HashMap, TreeMap};\n use std::{char, f64, fmt, io, num, str};\n@@ -2408,6 +2417,8 @@ impl FromStr for Json {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n+    use self::Animal::*;\n+    use self::DecodeEnum::*;\n     use self::test::Bencher;\n     use {Encodable, Decodable};\n     use super::{List, Encoder, Decoder, Error, Boolean, I64, U64, F64, String, Null,"}, {"sha": "b2a035f4ee5c6732f172e20a035a2931e3082510", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -24,7 +24,7 @@ Core encoding and decoding interfaces.\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n-#![feature(macro_rules, default_type_params, phase, slicing_syntax)]\n+#![feature(macro_rules, default_type_params, phase, slicing_syntax, globs)]\n \n // test harness access\n #[cfg(test)]"}, {"sha": "0471d5e902c21b76476faf2b9c32a27779ccc209", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,10 @@\n //\n // ignore-lexer-test FIXME #15883\n \n+pub use self::Entry::*;\n+use self::SearchResult::*;\n+use self::VacantEntryState::*;\n+\n use clone::Clone;\n use cmp::{max, Eq, Equiv, PartialEq};\n use default::Default;"}, {"sha": "76e15f7375c010c7f097f885d9d1b75e3789031c", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,8 @@\n //\n // ignore-lexer-test FIXME #15883\n \n+pub use self::BucketState::*;\n+\n use clone::Clone;\n use cmp;\n use hash::{Hash, Hasher};"}, {"sha": "8bb82d5bc1e82bc188292bef9ec70b7e10c00c93", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -210,6 +210,7 @@ mod test {\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\"))]\n pub mod dl {\n+    pub use self::Rtld::*;\n \n     use c_str::{CString, ToCStr};\n     use libc;"}, {"sha": "82ad893f88a1a04cce4e85f3dae27d0be84422fa", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -59,13 +59,13 @@\n //!\n //! impl FromError<IoError> for MyError {\n //!     fn from_error(err: IoError) -> MyError {\n-//!         Io(err)\n+//!         MyError::Io(err)\n //!     }\n //! }\n //!\n //! impl FromError<MapError> for MyError {\n //!     fn from_error(err: MapError) -> MyError {\n-//!         Map(err)\n+//!         MyError::Map(err)\n //!     }\n //! }\n //!"}, {"sha": "33db3c3766650df2fca00ffecb1d902a128f91e5", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -221,6 +221,12 @@ responding to errors that may occur while attempting to read the numbers.\n #![experimental]\n #![deny(unused_must_use)]\n \n+pub use self::SeekStyle::*;\n+pub use self::FileMode::*;\n+pub use self::FileAccess::*;\n+pub use self::FileType::*;\n+pub use self::IoErrorKind::*;\n+\n use char::Char;\n use clone::Clone;\n use default::Default;\n@@ -1899,6 +1905,7 @@ impl fmt::Show for FilePermission {\n \n #[cfg(test)]\n mod tests {\n+    use self::BadReaderBehavior::*;\n     use super::{IoResult, Reader, MemReader, NoProgress, InvalidInput};\n     use prelude::*;\n     use uint;"}, {"sha": "13f602de03a2c74d941db83e5b7b3331f4f3f378", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -19,6 +19,10 @@ getaddrinfo()\n \n #![allow(missing_docs)]\n \n+pub use self::SocketType::*;\n+pub use self::Flag::*;\n+pub use self::Protocol::*;\n+\n use iter::Iterator;\n use io::{IoResult};\n use io::net::ip::{SocketAddr, IpAddr};"}, {"sha": "d87768a08609809bda1e9ddf5032e6d30366eeeb", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,6 +15,8 @@\n \n #![allow(missing_docs)]\n \n+pub use self::IpAddr::*;\n+\n use fmt;\n use io::{mod, IoResult, IoError};\n use io::net;"}, {"sha": "16e568f30f2cad0a8f9e75957a2b77e5940b03b9", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,6 +13,9 @@\n #![allow(experimental)]\n #![allow(non_upper_case_globals)]\n \n+pub use self::StdioContainer::*;\n+pub use self::ProcessExit::*;\n+\n use prelude::*;\n \n use fmt;"}, {"sha": "362e80f9f12c37e325ddab97e623fe0b7283e1b1", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -27,6 +27,8 @@ out.write(b\"Hello, world!\");\n \n */\n \n+use self::StdSource::*;\n+\n use failure::local_stderr;\n use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError,"}, {"sha": "f8ba9b720118a0e12bfa656618c61f092162479c", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,10 @@\n \n #![allow(missing_docs)]\n \n+pub use self::ExponentFormat::*;\n+pub use self::SignificantDigits::*;\n+pub use self::SignFormat::*;\n+\n use char;\n use num;\n use num::{Int, Float, FPNaN, FPInfinite, ToPrimitive};"}, {"sha": "f5aa2259f8d9cf9794f071aa1fa1251d88ae2dc9", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -31,6 +31,10 @@\n #![allow(missing_docs)]\n #![allow(non_snake_case)]\n \n+pub use self::MemoryMapKind::*;\n+pub use self::MapOption::*;\n+pub use self::MapError::*;\n+\n use clone::Clone;\n use error::{FromError, Error};\n use fmt;"}, {"sha": "f31ffdab17b61dfe35ca40a098d296026895bda2", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,8 @@\n \n //! Windows file path handling\n \n+pub use self::PathPrefix::*;\n+\n use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n use clone::Clone;"}, {"sha": "65f45c3f97e140e92e090ea180d90addddeb0f0b", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -62,17 +62,20 @@\n #[doc(no_inline)] pub use char::{Char, UnicodeChar};\n #[doc(no_inline)] pub use clone::Clone;\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n-#[doc(no_inline)] pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n+#[doc(no_inline)] pub use cmp::{Ordering, Equiv};\n+#[doc(no_inline)] pub use cmp::Ordering::{Less, Equal, Greater};\n #[doc(no_inline)] pub use iter::{FromIterator, Extend, ExactSize};\n #[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};\n #[doc(no_inline)] pub use iter::{RandomAccessIterator, CloneableIterator};\n #[doc(no_inline)] pub use iter::{OrdIterator, MutableDoubleEndedIterator};\n #[doc(no_inline)] pub use num::{ToPrimitive, FromPrimitive};\n #[doc(no_inline)] pub use boxed::Box;\n-#[doc(no_inline)] pub use option::{Option, Some, None};\n+#[doc(no_inline)] pub use option::Option;\n+#[doc(no_inline)] pub use option::Option::{Some, None};\n #[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n #[doc(no_inline)] pub use ptr::{RawPtr, RawMutPtr};\n-#[doc(no_inline)] pub use result::{Result, Ok, Err};\n+#[doc(no_inline)] pub use result::Result;\n+#[doc(no_inline)] pub use result::Result::{Ok, Err};\n #[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek, BufferPrelude};\n #[doc(no_inline)] pub use str::{Str, StrVector, StrPrelude};\n #[doc(no_inline)] pub use str::{IntoMaybeOwned, StrAllocating, UnicodeStrPrelude};"}, {"sha": "92cfc859cd0f27813d7d5cfad7bf2afb1590ff95", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,6 +17,8 @@ pub use self::imp::OsRng;\n mod imp {\n     extern crate libc;\n \n+    use self::OsRngInner::*;\n+\n     use io::{IoResult, File};\n     use path::Path;\n     use rand::Rng;"}, {"sha": "0f888bd222c271a5950d91cefba36dd80df671b2", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -541,6 +541,8 @@ mod imp {\n     #[allow(non_snake_case)]\n     #[allow(dead_code)]\n     mod uw {\n+        pub use self::_Unwind_Reason_Code::*;\n+\n         use libc;\n \n         #[repr(C)]\n@@ -622,7 +624,8 @@ mod imp {\n \n             let mut val: _Unwind_Word = 0;\n             let ptr = &mut val as *mut _Unwind_Word;\n-            let _ = _Unwind_VRS_Get(ctx, _UVRSC_CORE, 15, _UVRSD_UINT32,\n+            let _ = _Unwind_VRS_Get(ctx, _Unwind_VRS_RegClass::_UVRSC_CORE, 15,\n+                                    _Unwind_VRS_DataRepresentation::_UVRSD_UINT32,\n                                     ptr as *mut libc::c_void);\n             (val & !1) as libc::uintptr_t\n         }\n@@ -813,11 +816,11 @@ mod imp {\n         pub fn init_frame(frame: &mut super::STACKFRAME64,\n                           ctx: &CONTEXT) -> libc::DWORD {\n             frame.AddrPC.Offset = ctx.Eip as u64;\n-            frame.AddrPC.Mode = super::AddrModeFlat;\n+            frame.AddrPC.Mode = super::ADDRESS_MODE::AddrModeFlat;\n             frame.AddrStack.Offset = ctx.Esp as u64;\n-            frame.AddrStack.Mode = super::AddrModeFlat;\n+            frame.AddrStack.Mode = super::ADDRESS_MODE::AddrModeFlat;\n             frame.AddrFrame.Offset = ctx.Ebp as u64;\n-            frame.AddrFrame.Mode = super::AddrModeFlat;\n+            frame.AddrFrame.Mode = super::ADDRESS_MODE::AddrModeFlat;\n             super::IMAGE_FILE_MACHINE_I386\n         }\n     }\n@@ -903,11 +906,11 @@ mod imp {\n         pub fn init_frame(frame: &mut super::STACKFRAME64,\n                           ctx: &CONTEXT) -> DWORD {\n             frame.AddrPC.Offset = ctx.Rip as u64;\n-            frame.AddrPC.Mode = super::AddrModeFlat;\n+            frame.AddrPC.Mode = super::ADDRESS_MODE::AddrModeFlat;\n             frame.AddrStack.Offset = ctx.Rsp as u64;\n-            frame.AddrStack.Mode = super::AddrModeFlat;\n+            frame.AddrStack.Mode = super::ADDRESS_MODE::AddrModeFlat;\n             frame.AddrFrame.Offset = ctx.Rbp as u64;\n-            frame.AddrFrame.Mode = super::AddrModeFlat;\n+            frame.AddrFrame.Mode = super::ADDRESS_MODE::AddrModeFlat;\n             super::IMAGE_FILE_MACHINE_AMD64\n         }\n     }"}, {"sha": "e37d1f83877967767e80eabd5d4cb9e8de2593be", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -29,6 +29,7 @@\n use core::prelude::*;\n use core::mem::replace;\n \n+use self::FutureState::*;\n use comm::{Receiver, channel};\n use task::spawn;\n "}, {"sha": "9b2b594a9c7cde8574ec1c1dc5800b24df306b1c", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::SocketStatus::*;\n+pub use self::InAddr::*;\n+\n use alloc::arc::Arc;\n use libc::{mod, c_char, c_int};\n use mem;"}, {"sha": "81bc138ca91952c1c441221a78f1141c87c8a65c", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+use self::Req::*;\n \n use libc::{mod, pid_t, c_void, c_int};\n use c_str::CString;"}, {"sha": "6ebbedb8e90360fa715462061d3dbad5727b564a", "filename": "src/libstd/sys/unix/timer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -46,6 +46,8 @@\n //!\n //! Note that all time units in this file are in *milliseconds*.\n \n+pub use self::Req::*;\n+\n use libc;\n use mem;\n use os;"}, {"sha": "9af3a7c8b6e01127dd9ad51579a6451251a9fe48", "filename": "src/libstd/sys/windows/timer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -20,6 +20,8 @@\n //! Other than that, the implementation is pretty straightforward in terms of\n //! the other two implementations of timers with nothing *that* new showing up.\n \n+pub use self::Req::*;\n+\n use libc;\n use ptr;\n use comm;"}, {"sha": "2a9a19a7fa68a410e313cbb1eacc375211e034c2", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -323,6 +323,10 @@\n \n use core::prelude::*;\n \n+pub use self::TryRecvError::*;\n+pub use self::TrySendError::*;\n+use self::Flavor::*;\n+\n use alloc::arc::Arc;\n use alloc::boxed::Box;\n use core::cell::Cell;"}, {"sha": "5d3c59e8a79b4ff06232845d79d3b9ab314def6d", "filename": "src/libsync/comm/oneshot.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Foneshot.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -32,6 +32,11 @@\n /// The one caveat to consider is that when a port sees a disconnected channel\n /// it must check for data because there is no \"data plus upgrade\" state.\n \n+pub use self::Failure::*;\n+pub use self::UpgradeResult::*;\n+pub use self::SelectionResult::*;\n+use self::MyUpgrade::*;\n+\n use core::prelude::*;\n \n use alloc::boxed::Box;"}, {"sha": "5ca89ea366675843b0082c0434b120b4ab4170ef", "filename": "src/libsync/comm/shared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fshared.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -18,6 +18,8 @@\n /// module. You'll also note that the implementation of the shared and stream\n /// channels are quite similar, and this is no coincidence!\n \n+pub use self::Failure::*;\n+\n use core::prelude::*;\n \n use alloc::boxed::Box;"}, {"sha": "67878e3ba5adbc3d60b9f69b2dd169487ec57267", "filename": "src/libsync/comm/stream.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fstream.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,6 +17,11 @@\n /// High level implementation details can be found in the comment of the parent\n /// module.\n \n+pub use self::Failure::*;\n+pub use self::UpgradeResult::*;\n+pub use self::SelectionResult::*;\n+use self::Message::*;\n+\n use core::prelude::*;\n \n use alloc::boxed::Box;"}, {"sha": "27b943624d78763d986850d9c322b54bed9b0a6c", "filename": "src/libsync/comm/sync.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fcomm%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fsync.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -35,6 +35,9 @@\n \n use core::prelude::*;\n \n+pub use self::Failure::*;\n+use self::Blocker::*;\n+\n use alloc::boxed::Box;\n use collections::Vec;\n use core::mem;"}, {"sha": "2f5c455556c8f797150018d064ea2fc625f20314", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -50,6 +50,8 @@\n // FIXME: all atomic operations in this module use a SeqCst ordering. That is\n //      probably overkill\n \n+pub use self::Stolen::*;\n+\n use core::prelude::*;\n \n use alloc::arc::Arc;"}, {"sha": "d6378c2190ececcc22dea119dcac50007daa0921", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -21,6 +21,8 @@\n \n use core::prelude::*;\n \n+use self::Inner::*;\n+\n use core::cell::UnsafeCell;\n use rustrt::local::Local;\n use rustrt::task::Task;"}, {"sha": "63379ad1d9d0cc9fbd0f74308a0686da20458c27", "filename": "src/libsync/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmpsc_queue.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -40,6 +40,8 @@\n // http://www.1024cores.net/home/lock-free-algorithms\n //                         /queues/non-intrusive-mpsc-node-based-queue\n \n+pub use self::PopResult::*;\n+\n use core::prelude::*;\n \n use alloc::boxed::Box;"}, {"sha": "e05f3e1910bfe74fd224c01ba74e9febe8e6a91f", "filename": "src/libsync/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmutex.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -58,6 +58,7 @@\n // it's locked or not.\n \n use core::prelude::*;\n+use self::Flavor::*;\n \n use alloc::boxed::Box;\n use core::atomic;"}, {"sha": "8ab21fe380f6c8f82dd383ac7aa82bf5c47a5257", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,6 +16,7 @@\n //! containing data.\n \n use core::prelude::*;\n+use self::ReacquireOrderLock::*;\n \n use core::atomic;\n use core::finally::Finally;\n@@ -619,6 +620,8 @@ impl<'a> Drop for RWLockReadGuard<'a> {\n \n #[cfg(test)]\n mod tests {\n+    pub use self::RWLockMode::*;\n+\n     use std::prelude::*;\n \n     use Arc;"}, {"sha": "87693f39bbdb1b74b3d5440de86d37cdfbeed697", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Os::*;\n+pub use self::Abi::*;\n+pub use self::Architecture::*;\n+pub use self::AbiArchitecture::*;\n+\n use std::fmt;\n \n #[deriving(PartialEq)]"}, {"sha": "0cb80d4c153970735759f84a97396020aa5cd6e5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,55 @@\n \n // The Rust abstract syntax tree.\n \n+pub use self::AsmDialect::*;\n+pub use self::AttrStyle::*;\n+pub use self::BindingMode::*;\n+pub use self::BinOp::*;\n+pub use self::BlockCheckMode::*;\n+pub use self::CaptureClause::*;\n+pub use self::Decl_::*;\n+pub use self::ExplicitSelf_::*;\n+pub use self::Expr_::*;\n+pub use self::FloatTy::*;\n+pub use self::FnStyle::*;\n+pub use self::FunctionRetTy::*;\n+pub use self::ForeignItem_::*;\n+pub use self::ImplItem::*;\n+pub use self::InlinedItem::*;\n+pub use self::IntTy::*;\n+pub use self::Item_::*;\n+pub use self::KleeneOp::*;\n+pub use self::Lit_::*;\n+pub use self::LitIntType::*;\n+pub use self::LocalSource::*;\n+pub use self::Mac_::*;\n+pub use self::MatchSource::*;\n+pub use self::MetaItem_::*;\n+pub use self::Method_::*;\n+pub use self::Mutability::*;\n+pub use self::Onceness::*;\n+pub use self::Pat_::*;\n+pub use self::PathListItem_::*;\n+pub use self::PatWildKind::*;\n+pub use self::PrimTy::*;\n+pub use self::Sign::*;\n+pub use self::Stmt_::*;\n+pub use self::StrStyle::*;\n+pub use self::StructFieldKind::*;\n+pub use self::TokenTree::*;\n+pub use self::TraitItem::*;\n+pub use self::Ty_::*;\n+pub use self::TyParamBound::*;\n+pub use self::UintTy::*;\n+pub use self::UnboxedClosureKind::*;\n+pub use self::UnOp::*;\n+pub use self::UnsafeSource::*;\n+pub use self::VariantKind::*;\n+pub use self::ViewItem_::*;\n+pub use self::ViewPath_::*;\n+pub use self::Visibility::*;\n+pub use self::PathParameters::*;\n+\n use codemap::{Span, Spanned, DUMMY_SP, ExpnId};\n use abi::Abi;\n use ast_util;"}, {"sha": "a35ee3ab1d0d502fbee25adddbbc9bff8cda082e", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -21,6 +21,8 @@\n //! nested within a uniquely determined `FnLike`), and users can ask\n //! for the `Code` associated with a particular NodeId.\n \n+pub use self::Code::*;\n+\n use abi;\n use ast::{Block, FnDecl, NodeId};\n use ast;"}, {"sha": "2a2ad9fd66408ca17211a21f607080c93a6c19a6", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Node::*;\n+pub use self::PathElem::*;\n+use self::MapEntry::*;\n+\n use abi;\n use ast::*;\n use ast_util;"}, {"sha": "12a3bd8990194b7b8ccb932cbb258c69630429d1", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,11 @@\n \n // Functions dealing with attributes and meta items\n \n+pub use self::InlineAttr::*;\n+pub use self::StabilityLevel::*;\n+pub use self::ReprAttr::*;\n+pub use self::IntType::*;\n+\n use ast;\n use ast::{AttrId, Attribute, Attribute_, MetaItem, MetaWord, MetaNameValue, MetaList};\n use codemap::{Span, Spanned, spanned, dummy_spanned};"}, {"sha": "7d849ddf1c1ad6ef4a335ed14acde958a00cd5df", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -23,6 +23,8 @@ source code snippets, etc.\n \n */\n \n+pub use self::MacroFormat::*;\n+\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::cell::RefCell;\n use std::rc::Rc;"}, {"sha": "ff600fcc7c24d6f1b5395164a5b6402dd7047a21", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Level::*;\n+pub use self::RenderSpan::*;\n+pub use self::ColorConfig::*;\n+use self::Destination::*;\n+\n use codemap::{Pos, Span};\n use codemap;\n use diagnostics;"}, {"sha": "8027d9bfd8a8eed61d9c9e4e8724b1259f4f940e", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,7 @@\n /*\n  * Inline assembly support.\n  */\n+use self::State::*;\n \n use ast;\n use codemap;"}, {"sha": "9292825ffe82822c04228515528e361434ecada7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::SyntaxExtension::*;\n+\n use ast;\n use ast::Name;\n use codemap;"}, {"sha": "fccc67bf220936db2dcdcf74af1ce7b192396a38", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -52,7 +52,7 @@ fn cs_clone(\n     name: &str,\n     cx: &mut ExtCtxt, trait_span: Span,\n     substr: &Substructure) -> P<Expr> {\n-    let ctor_ident;\n+    let ctor_path;\n     let all_fields;\n     let fn_path = vec![\n         cx.ident_of(\"std\"),\n@@ -68,11 +68,11 @@ fn cs_clone(\n \n     match *substr.fields {\n         Struct(ref af) => {\n-            ctor_ident = substr.type_ident;\n+            ctor_path = cx.path(trait_span, vec![substr.type_ident]);\n             all_fields = af;\n         }\n         EnumMatching(_, variant, ref af) => {\n-            ctor_ident = variant.node.name;\n+            ctor_path = cx.path(trait_span, vec![substr.type_ident, variant.node.name]);\n             all_fields = af;\n         },\n         EnumNonMatchingCollapsed (..) => {\n@@ -91,7 +91,8 @@ fn cs_clone(\n     if all_fields.len() >= 1 && all_fields[0].name.is_none() {\n         // enum-like\n         let subcalls = all_fields.iter().map(subcall).collect();\n-        cx.expr_call_ident(trait_span, ctor_ident, subcalls)\n+        let path = cx.expr_path(ctor_path);\n+        cx.expr_call(trait_span, path, subcalls)\n     } else {\n         // struct-like\n         let fields = all_fields.iter().map(|field| {\n@@ -109,9 +110,9 @@ fn cs_clone(\n \n         if fields.is_empty() {\n             // no fields, so construct like `None`\n-            cx.expr_ident(trait_span, ctor_ident)\n+            cx.expr_path(ctor_path)\n         } else {\n-            cx.expr_struct_ident(trait_span, ctor_ident, fields)\n+            cx.expr_struct(trait_span, ctor_path, fields)\n         }\n     }\n }"}, {"sha": "98345e1dd6724854634fd411b7cfd4d1df9108ec", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::OrderingOp::*;\n+\n use ast;\n use ast::{MetaItem, Item, Expr};\n use codemap::Span;"}, {"sha": "d0a03658386049ef40ca748772a454acd87eae11", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,7 +13,8 @@ The compiler code necessary for `#[deriving(Decodable)]`. See\n encodable.rs for more.\n */\n \n-use ast::{MetaItem, Item, Expr, MutMutable, Ident};\n+use ast;\n+use ast::{MetaItem, Item, Expr, MutMutable};\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -82,9 +83,10 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n             };\n             let read_struct_field = cx.ident_of(\"read_struct_field\");\n \n+            let path = cx.path_ident(trait_span, substr.type_ident);\n             let result = decode_static_fields(cx,\n                                               trait_span,\n-                                              substr.type_ident,\n+                                              path,\n                                               summary,\n                                               |cx, span, name, field| {\n                 cx.expr_try(span,\n@@ -113,9 +115,10 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n             for (i, &(name, v_span, ref parts)) in fields.iter().enumerate() {\n                 variants.push(cx.expr_str(v_span, token::get_ident(name)));\n \n+                let path = cx.path(trait_span, vec![substr.type_ident, name]);\n                 let decoded = decode_static_fields(cx,\n                                                    v_span,\n-                                                   name,\n+                                                   path,\n                                                    parts,\n                                                    |cx, span, _, field| {\n                     let idx = cx.expr_uint(span, field);\n@@ -153,18 +156,19 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n }\n \n /// Create a decoder for a single enum variant/struct:\n-/// - `outer_pat_ident` is the name of this enum variant/struct\n+/// - `outer_pat_path` is the path to this enum variant/struct\n /// - `getarg` should retrieve the `uint`-th field with name `@str`.\n fn decode_static_fields(cx: &mut ExtCtxt,\n                         trait_span: Span,\n-                        outer_pat_ident: Ident,\n+                        outer_pat_path: ast::Path,\n                         fields: &StaticFields,\n                         getarg: |&mut ExtCtxt, Span, InternedString, uint| -> P<Expr>)\n                         -> P<Expr> {\n     match *fields {\n         Unnamed(ref fields) => {\n+            let path_expr = cx.expr_path(outer_pat_path);\n             if fields.is_empty() {\n-                cx.expr_ident(trait_span, outer_pat_ident)\n+                path_expr\n             } else {\n                 let fields = fields.iter().enumerate().map(|(i, &span)| {\n                     getarg(cx, span,\n@@ -173,7 +177,7 @@ fn decode_static_fields(cx: &mut ExtCtxt,\n                            i)\n                 }).collect();\n \n-                cx.expr_call_ident(trait_span, outer_pat_ident, fields)\n+                cx.expr_call(trait_span, path_expr, fields)\n             }\n         }\n         Named(ref fields) => {\n@@ -182,7 +186,7 @@ fn decode_static_fields(cx: &mut ExtCtxt,\n                 let arg = getarg(cx, span, token::get_ident(name), i);\n                 cx.field_imm(span, name, arg)\n             }).collect();\n-            cx.expr_struct_ident(trait_span, outer_pat_ident, fields)\n+            cx.expr_struct(trait_span, outer_pat_path, fields)\n         }\n     }\n }"}, {"sha": "dccc12e406bdcc97eeafeefd414c327a016d70e6", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -180,6 +180,10 @@\n //!                                    Named(~[(<ident of x>, <span of x>)]))])\n //! ```\n \n+pub use self::StaticFields::*;\n+pub use self::SubstructureFields::*;\n+use self::StructType::*;\n+\n use std::cell::RefCell;\n use std::vec;\n \n@@ -192,7 +196,7 @@ use attr;\n use attr::AttrMetaMethods;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n-use codemap;\n+use codemap::{mod, DUMMY_SP};\n use codemap::Span;\n use fold::MoveMap;\n use owned_slice::OwnedSlice;\n@@ -543,12 +547,12 @@ impl<'a> TraitDef<'a> {\n     }\n }\n \n-fn variant_to_pat(cx: &mut ExtCtxt, sp: Span, variant: &ast::Variant)\n+fn variant_to_pat(cx: &mut ExtCtxt, sp: Span, enum_ident: ast::Ident, variant: &ast::Variant)\n                   -> P<ast::Pat> {\n-    let ident = cx.path_ident(sp, variant.node.name);\n+    let path = cx.path(sp, vec![enum_ident, variant.node.name]);\n     cx.pat(sp, match variant.node.kind {\n-        ast::TupleVariantKind(..) => ast::PatEnum(ident, None),\n-        ast::StructVariantKind(..) => ast::PatStruct(ident, Vec::new(), true),\n+        ast::TupleVariantKind(..) => ast::PatEnum(path, None),\n+        ast::StructVariantKind(..) => ast::PatStruct(path, Vec::new(), true),\n     })\n }\n \n@@ -714,9 +718,10 @@ impl<'a> MethodDef<'a> {\n                                  // [fields of next Self arg], [etc]]\n         let mut patterns = Vec::new();\n         for i in range(0u, self_args.len()) {\n+            let struct_path= cx.path(DUMMY_SP, vec!( type_ident ));\n             let (pat, ident_expr) =\n                 trait_.create_struct_pattern(cx,\n-                                             type_ident,\n+                                             struct_path,\n                                              struct_def,\n                                              format!(\"__self_{}\",\n                                                      i).as_slice(),\n@@ -900,7 +905,8 @@ impl<'a> MethodDef<'a> {\n         let mut match_arms: Vec<ast::Arm> = variants.iter().enumerate()\n             .map(|(index, variant)| {\n                 let mk_self_pat = |cx: &mut ExtCtxt, self_arg_name: &str| {\n-                    let (p, idents) = trait_.create_enum_variant_pattern(cx, &**variant,\n+                    let (p, idents) = trait_.create_enum_variant_pattern(cx, type_ident,\n+                                                                         &**variant,\n                                                                          self_arg_name,\n                                                                          ast::MutImmutable);\n                     (cx.pat(sp, ast::PatRegion(p)), idents)\n@@ -996,7 +1002,7 @@ impl<'a> MethodDef<'a> {\n         if variants.len() > 1 && self_args.len() > 1 {\n             let arms: Vec<ast::Arm> = variants.iter().enumerate()\n                 .map(|(index, variant)| {\n-                    let pat = variant_to_pat(cx, sp, &**variant);\n+                    let pat = variant_to_pat(cx, sp, type_ident, &**variant);\n                     let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyU));\n                     cx.arm(sp, vec![pat], cx.expr_lit(sp, lit))\n                 }).collect();\n@@ -1199,20 +1205,15 @@ impl<'a> TraitDef<'a> {\n \n     fn create_struct_pattern(&self,\n                              cx: &mut ExtCtxt,\n-                             struct_ident: Ident,\n+                             struct_path: ast::Path,\n                              struct_def: &StructDef,\n                              prefix: &str,\n                              mutbl: ast::Mutability)\n                              -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>)>) {\n         if struct_def.fields.is_empty() {\n-            return (\n-                cx.pat_ident_binding_mode(\n-                    self.span, struct_ident, ast::BindByValue(ast::MutImmutable)),\n-                Vec::new());\n+            return (cx.pat_enum(self.span, struct_path, vec![]), vec![]);\n         }\n \n-        let matching_path = cx.path(self.span, vec!( struct_ident ));\n-\n         let mut paths = Vec::new();\n         let mut ident_expr = Vec::new();\n         let mut struct_type = Unknown;\n@@ -1253,31 +1254,29 @@ impl<'a> TraitDef<'a> {\n                     node: ast::FieldPat { ident: id.unwrap(), pat: pat, is_shorthand: false },\n                 }\n             }).collect();\n-            cx.pat_struct(self.span, matching_path, field_pats)\n+            cx.pat_struct(self.span, struct_path, field_pats)\n         } else {\n-            cx.pat_enum(self.span, matching_path, subpats)\n+            cx.pat_enum(self.span, struct_path, subpats)\n         };\n \n         (pattern, ident_expr)\n     }\n \n     fn create_enum_variant_pattern(&self,\n                                    cx: &mut ExtCtxt,\n+                                   enum_ident: ast::Ident,\n                                    variant: &ast::Variant,\n                                    prefix: &str,\n                                    mutbl: ast::Mutability)\n         -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>)>) {\n         let variant_ident = variant.node.name;\n+        let variant_path = cx.path(variant.span, vec![enum_ident, variant_ident]);\n         match variant.node.kind {\n             ast::TupleVariantKind(ref variant_args) => {\n                 if variant_args.is_empty() {\n-                    return (cx.pat_ident_binding_mode(variant.span, variant_ident,\n-                                                          ast::BindByValue(ast::MutImmutable)),\n-                            Vec::new());\n+                    return (cx.pat_enum(variant.span, variant_path, vec![]), vec![]);\n                 }\n \n-                let matching_path = cx.path_ident(variant.span, variant_ident);\n-\n                 let mut paths = Vec::new();\n                 let mut ident_expr = Vec::new();\n                 for (i, va) in variant_args.iter().enumerate() {\n@@ -1292,11 +1291,11 @@ impl<'a> TraitDef<'a> {\n \n                 let subpats = self.create_subpatterns(cx, paths, mutbl);\n \n-                (cx.pat_enum(variant.span, matching_path, subpats),\n+                (cx.pat_enum(variant.span, variant_path, subpats),\n                  ident_expr)\n             }\n             ast::StructVariantKind(ref struct_def) => {\n-                self.create_struct_pattern(cx, variant_ident, &**struct_def,\n+                self.create_struct_pattern(cx, variant_path, &**struct_def,\n                                            prefix, mutbl)\n             }\n         }"}, {"sha": "700ada8b4ad8fdd52000a2d5931ca6dcf065e259", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,6 +13,9 @@ A mini version of ast::Ty, which is easier to use, and features an\n explicit `Self` type to use when specifying impls to be derived.\n */\n \n+pub use self::PtrTy::*;\n+pub use self::Ty::*;\n+\n use ast;\n use ast::{Expr,Generics,Ident};\n use ext::base::ExtCtxt;"}, {"sha": "cd2d98b70f105b38a27ed1573b9c60d8da76b3e2", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -102,7 +102,8 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n                         let span = variant.span;\n \n                         // expr for `$n == $variant as $name`\n-                        let variant = cx.expr_ident(span, variant.node.name);\n+                        let path = cx.path(span, vec![substr.type_ident, variant.node.name]);\n+                        let variant = cx.expr_path(path);\n                         let ty = cx.ty_ident(span, cx.ident_of(name));\n                         let cast = cx.expr_cast(span, variant.clone(), ty);\n                         let guard = cx.expr_binary(span, ast::BiEq, n.clone(), cast);"}, {"sha": "8ad8436906b3c7ea054041e35d482fc21eb4693f", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast;\n-use ast::{MetaItem, Item, Expr, Ident};\n+use ast::{MetaItem, Item, Expr};\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::{AstBuilder};\n@@ -72,7 +72,8 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n \n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n-            rand_thing(cx, trait_span, substr.type_ident, summary, rand_call)\n+            let path = cx.path_ident(trait_span, substr.type_ident);\n+            rand_thing(cx, trait_span, path, summary, rand_call)\n         }\n         StaticEnum(_, ref variants) => {\n             if variants.is_empty() {\n@@ -115,7 +116,8 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n                 let i_expr = cx.expr_uint(v_span, i);\n                 let pat = cx.pat_lit(v_span, i_expr);\n \n-                let thing = rand_thing(cx, v_span, ident, summary, |cx, sp| rand_call(cx, sp));\n+                let path = cx.path(v_span, vec![substr.type_ident, ident]);\n+                let thing = rand_thing(cx, v_span, path, summary, |cx, sp| rand_call(cx, sp));\n                 cx.arm(v_span, vec!( pat ), thing)\n             }).collect::<Vec<ast::Arm> >();\n \n@@ -132,25 +134,26 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n \n     fn rand_thing(cx: &mut ExtCtxt,\n                   trait_span: Span,\n-                  ctor_ident: Ident,\n+                  ctor_path: ast::Path,\n                   summary: &StaticFields,\n                   rand_call: |&mut ExtCtxt, Span| -> P<Expr>)\n                   -> P<Expr> {\n+        let path = cx.expr_path(ctor_path.clone());\n         match *summary {\n             Unnamed(ref fields) => {\n                 if fields.is_empty() {\n-                    cx.expr_ident(trait_span, ctor_ident)\n+                    path\n                 } else {\n                     let exprs = fields.iter().map(|span| rand_call(cx, *span)).collect();\n-                    cx.expr_call_ident(trait_span, ctor_ident, exprs)\n+                    cx.expr_call(trait_span, path, exprs)\n                 }\n             }\n             Named(ref fields) => {\n                 let rand_fields = fields.iter().map(|&(ident, span)| {\n                     let e = rand_call(cx, span);\n                     cx.field_imm(span, ident, e)\n                 }).collect();\n-                cx.expr_struct_ident(trait_span, ctor_ident, rand_fields)\n+                cx.expr_struct(trait_span, ctor_path, rand_fields)\n             }\n         }\n     }"}, {"sha": "081456bebe19cdc16b493de64a755d665f643e0d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+use self::Either::*;\n \n use ast::{Block, Crate, DeclLocal, ExprMac, PatMac};\n use ast::{Local, Ident, MacInvocTT};"}, {"sha": "9a9724de8fb702201ad997adf0813cfd5d696b40", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::Invocation::*;\n+use self::ArgumentType::*;\n+use self::Position::*;\n+\n use ast;\n use codemap::{Span, respan};\n use ext::base::*;"}, {"sha": "b50a4690e420b5b9437fa3c248e64ba2b282f6af", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,6 +15,8 @@\n //! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n //! DOI=10.1017/S0956796812000093 http://dx.doi.org/10.1017/S0956796812000093\n \n+pub use self::SyntaxContext_::*;\n+\n use ast::{Ident, Mrk, Name, SyntaxContext};\n \n use std::cell::RefCell;\n@@ -278,6 +280,7 @@ fn xor_push(marks: &mut Vec<Mrk>, mark: Mrk) {\n \n #[cfg(test)]\n mod tests {\n+    use self::TestSC::*;\n     use ast::{EMPTY_CTXT, Ident, Mrk, Name, SyntaxContext};\n     use super::{resolve, xor_push, apply_mark_internal, new_sctable_internal};\n     use super::{apply_rename_internal, apply_renames, marksof_internal, resolve_internal};"}, {"sha": "b4cd9779ae251203f47c78f580d57073e1a6759d", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -76,6 +76,9 @@\n //! Remaining input: ``\n //! eof: [a $( a )* a b \u00b7]\n \n+pub use self::NamedMatch::*;\n+pub use self::ParseResult::*;\n+use self::TokenTreeOrTokenTreeVec::*;\n \n use ast;\n use ast::{TokenTree, Ident};"}, {"sha": "99799fecb7882a03bc115ae12973a53b6c997b44", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+use self::LockstepIterSize::*;\n \n use ast;\n use ast::{TokenTree, TtDelimited, TtToken, TtSequence, Ident};"}, {"sha": "0178566fb0621077f124e2cab7fb4d6594c93d12", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,6 +17,7 @@\n //!\n //! Features are enabled in programs via the crate-level attributes of\n //! `#![feature(...)]` with a comma-separated list of features.\n+use self::Status::*;\n \n use abi::RustIntrinsic;\n use ast::NodeId;"}, {"sha": "b62d2d744c9e02b96bffad124bd8fa05ffa61df6", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::CommentStyle::*;\n+\n use ast;\n use codemap::{BytePos, CharPos, CodeMap, Pos};\n use diagnostic;"}, {"sha": "e2dee607c6925f53353765d9a4cf9a1f2cba8ae0", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,6 +17,8 @@ Obsolete syntax that becomes too hard to parse can be\n removed.\n */\n \n+pub use self::ObsoleteSyntax::*;\n+\n use ast::{Expr, ExprTup};\n use codemap::Span;\n use parse::parser;"}, {"sha": "5c95c369f94a8802d85d53f4191ba915710583f9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,9 @@\n \n #![macro_escape]\n \n+pub use self::PathParsingMode::*;\n+use self::ItemOrViewItem::*;\n+\n use abi;\n use ast::{AssociatedType, BareFnTy, ClosureTy};\n use ast::{RegionTyParamBound, TraitTyParamBound};"}, {"sha": "298328d73efb06068ff362ec72a47e6d6b5c65f8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::BinOpToken::*;\n+pub use self::Nonterminal::*;\n+pub use self::DelimToken::*;\n+pub use self::IdentStyle::*;\n+pub use self::Token::*;\n+\n use ast;\n use ext::mtwt;\n use ptr::P;\n@@ -418,6 +424,7 @@ macro_rules! declare_special_idents_and_keywords {(\n      * the language and may not appear as identifiers.\n      */\n     pub mod keywords {\n+        pub use self::Keyword::*;\n         use ast;\n \n         pub enum Keyword {"}, {"sha": "7ab3d5dbcd1b5f386bea93d159605c30c65faa69", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -59,6 +59,10 @@\n //! line (which it can't) and so naturally place the content on its own line to\n //! avoid combining it with other lines and making matters even worse.\n \n+pub use self::PrintStackBreak::*;\n+pub use self::Breaks::*;\n+pub use self::Token::*;\n+\n use std::io;\n use std::string;\n "}, {"sha": "390a5cc68d30b64db9459f34f8cb2ffb987c353f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub use self::AnnNode::*;\n+\n use abi;\n use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};"}, {"sha": "f21a3185d6d3eef6af10dd2783b815dab0722d44", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,6 +12,7 @@\n \n #![allow(dead_code)]\n #![allow(unused_imports)]\n+use self::HasTestSignature::*;\n \n use std::slice;\n use std::mem;\n@@ -276,16 +277,17 @@ fn strip_test_functions(krate: ast::Crate) -> ast::Crate {\n     })\n }\n \n+#[deriving(PartialEq)]\n+enum HasTestSignature {\n+    Yes,\n+    No,\n+    NotEvenAFunction,\n+}\n+\n+\n fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     let has_test_attr = attr::contains_name(i.attrs.as_slice(), \"test\");\n \n-    #[deriving(PartialEq)]\n-    enum HasTestSignature {\n-        Yes,\n-        No,\n-        NotEvenAFunction,\n-    }\n-\n     fn has_test_signature(i: &ast::Item) -> HasTestSignature {\n         match &i.node {\n           &ast::ItemFn(ref decl, _, _, ref generics, _) => {"}, {"sha": "c4b3288d44db8edac13cdf11c517002d9348e6e2", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+use self::SmallVectorRepr::*;\n+use self::MoveItemsRepr::*;\n \n use std::mem;\n use std::slice;"}, {"sha": "2960c28a8b71de6d2f86cc75c5cdbbfc15f9aa61", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -23,6 +23,8 @@\n //! instance, a walker looking for item names in a module will miss all of\n //! those that are created by the expansion of a macro.\n \n+pub use self::FnKind::*;\n+\n use abi::Abi;\n use ast::*;\n use ast;"}, {"sha": "151a388a133350679652bd0d14a9dc2432818d8b", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -50,7 +50,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![allow(unknown_features)]\n-#![feature(macro_rules, phase, slicing_syntax)]\n+#![feature(macro_rules, phase, slicing_syntax, globs)]\n \n #![deny(missing_docs)]\n \n@@ -166,6 +166,8 @@ pub mod color {\n \n /// Terminal attributes\n pub mod attr {\n+    pub use self::Attr::*;\n+\n     /// Terminal attributes for use with term.attr().\n     ///\n     /// Most attributes can only be turned on and must be turned off with term.reset()."}, {"sha": "ec6e286b9b96165498a5b4334c95ab893f46545b", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -10,6 +10,11 @@\n \n //! Parameterized string expansion\n \n+pub use self::Param::*;\n+use self::States::*;\n+use self::FormatState::*;\n+use self::FormatOp::*;\n+\n use std::char;\n use std::mem::replace;\n "}, {"sha": "8266765ba3f277abcaf2012b880d11001d95e15d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -33,13 +33,22 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(asm, macro_rules, phase)]\n+#![feature(asm, macro_rules, phase, globs)]\n \n extern crate getopts;\n extern crate regex;\n extern crate serialize;\n extern crate term;\n \n+pub use self::TestFn::*;\n+pub use self::MetricChange::*;\n+pub use self::ColorConfig::*;\n+pub use self::TestResult::*;\n+pub use self::TestName::*;\n+use self::TestEvent::*;\n+use self::NamePadding::*;\n+use self::OutputLocation::*;\n+\n use std::collections::TreeMap;\n use stats::Stats;\n use getopts::{OptGroup, optflag, optopt};"}, {"sha": "4fb387db3a2c4f1741cac6c71dd3467d301a4edf", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -21,13 +21,16 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![feature(phase)]\n+#![feature(phase, globs)]\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n extern crate serialize;\n extern crate libc;\n \n+pub use self::ParseError::*;\n+use self::Fmt::*;\n+\n use std::fmt::Show;\n use std::fmt;\n use std::io::BufReader;"}, {"sha": "7e51c0d429117161c1b20653a9483f27178eb43f", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -29,6 +29,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![no_std]\n+#![feature(globs)]\n \n extern crate core;\n "}, {"sha": "dfba686143f3bdc206abbd1b5076f2045b970e07", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7134,6 +7134,7 @@ pub mod charwidth {\n }\n \n pub mod grapheme {\n+    pub use self::GraphemeCat::*;\n     use core::slice::SlicePrelude;\n     use core::slice;\n "}, {"sha": "99c1ce503cc4d82eba3836e8c8dac0d71e581863", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,6 +17,7 @@\n  * methods provided by the UnicodeChar trait.\n  */\n \n+use self::GraphemeState::*;\n use core::cmp;\n use core::slice::SlicePrelude;\n use core::iter::{Filter, AdditiveIterator, Iterator, DoubleEndedIterator};"}, {"sha": "03f8d49ad627eaed61e28e4d9dd585cdb664d202", "filename": "src/test/auxiliary/issue-8044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-8044.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -19,7 +19,7 @@ pub enum TreeItem<V> {\n }\n \n pub fn leaf<V>(value: V) -> TreeItem<V> {\n-    TreeLeaf { value: value }\n+    TreeItem::TreeLeaf { value: value }\n }\n \n fn main() {"}, {"sha": "07c99ecefb861cf0c612592209ca003d5dae0738", "filename": "src/test/auxiliary/xc_private_method_lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -31,13 +31,13 @@ pub enum Enum {\n \n impl Enum {\n     fn static_meth_enum() -> Enum {\n-        Variant2(10)\n+        Enum::Variant2(10)\n     }\n \n     fn meth_enum(&self) -> int {\n         match *self {\n-            Variant1(x) |\n-            Variant2(x) => x\n+            Enum::Variant1(x) |\n+            Enum::Variant2(x) => x\n         }\n     }\n }"}, {"sha": "cea03f13a4bbd306c38340ac87c28892eecaec1e", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -37,8 +37,8 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n     let mut done = false;\n     while !done {\n         match requests.recv_opt() {\n-          Ok(get_count) => { responses.send(count.clone()); }\n-          Ok(bytes(b)) => {\n+          Ok(request::get_count) => { responses.send(count.clone()); }\n+          Ok(request::bytes(b)) => {\n             //println!(\"server: received {} bytes\", b);\n             count += b;\n           }\n@@ -67,7 +67,7 @@ fn run(args: &[String]) {\n             worker_results.push(task::try_future(proc() {\n                 for _ in range(0u, size / workers) {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n-                    to_child.send(bytes(num_bytes));\n+                    to_child.send(request::bytes(num_bytes));\n                 }\n                 //println!(\"worker {} exiting\", i);\n             }));\n@@ -81,7 +81,7 @@ fn run(args: &[String]) {\n         }\n \n         //println!(\"sending stop message\");\n-        to_child.send(stop);\n+        to_child.send(request::stop);\n         move_out(to_child);\n         result = Some(from_child.recv());\n     });"}, {"sha": "476e7d42d45bb7cbf693e1c702c1dc1b7f9294e8", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -32,8 +32,8 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n     let mut done = false;\n     while !done {\n         match requests.recv_opt() {\n-          Ok(get_count) => { responses.send(count.clone()); }\n-          Ok(bytes(b)) => {\n+          Ok(request::get_count) => { responses.send(count.clone()); }\n+          Ok(request::bytes(b)) => {\n             //println!(\"server: received {} bytes\", b);\n             count += b;\n           }\n@@ -61,7 +61,7 @@ fn run(args: &[String]) {\n             worker_results.push(task::try_future(proc() {\n                 for _ in range(0u, size / workers) {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n-                    to_child.send(bytes(num_bytes));\n+                    to_child.send(request::bytes(num_bytes));\n                 }\n                 //println!(\"worker {} exiting\", i);\n             }));\n@@ -73,7 +73,7 @@ fn run(args: &[String]) {\n                 worker_results.push(task::try_future(proc() {\n                     for _ in range(0u, size / workers) {\n                         //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n-                        to_child.send(bytes(num_bytes));\n+                        to_child.send(request::bytes(num_bytes));\n                     }\n                     //println!(\"worker {} exiting\", i);\n                 }));"}, {"sha": "28075779f8d7997573b4409f19e02e6c0c3e4f0c", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -51,19 +51,19 @@ enum Tree<'a> {\n \n fn item_check(t: &Tree) -> int {\n     match *t {\n-        Nil => 0,\n-        Node(l, r, i) => i + item_check(l) - item_check(r)\n+        Tree::Nil => 0,\n+        Tree::Node(l, r, i) => i + item_check(l) - item_check(r)\n     }\n }\n \n fn bottom_up_tree<'r>(arena: &'r TypedArena<Tree<'r>>, item: int, depth: int)\n                   -> &'r Tree<'r> {\n     if depth > 0 {\n-        arena.alloc(Node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n-                         bottom_up_tree(arena, 2 * item, depth - 1),\n-                         item))\n+        arena.alloc(Tree::Node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n+                               bottom_up_tree(arena, 2 * item, depth - 1),\n+                               item))\n     } else {\n-        arena.alloc(Nil)\n+        arena.alloc(Tree::Nil)\n     }\n }\n "}, {"sha": "3059a014528ad288a7bad919e13702d482b640f8", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -40,6 +40,7 @@\n \n // no-pretty-expanded\n \n+use self::Color::{Red, Yellow, Blue};\n use std::string::String;\n use std::fmt;\n "}, {"sha": "ca749d47b63bd23b32444f4609fda3d85c983044", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -79,8 +79,8 @@ impl<'a, T> List<'a, T> {\n impl<'a, T> Iterator<&'a T> for ListIterator<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         match *self.cur {\n-            Nil => None,\n-            Cons(ref elt, next) => {\n+            List::Nil => None,\n+            List::Cons(ref elt, next) => {\n                 self.cur = next;\n                 Some(elt)\n             }\n@@ -295,7 +295,7 @@ fn search(\n         for m in masks_at[id].iter().filter(|&m| board & *m == 0) {\n             // This check is too costly.\n             //if is_board_unfeasible(board | m, masks) {continue;}\n-            search(masks, board | *m, i + 1, Cons(*m, &cur), data);\n+            search(masks, board | *m, i + 1, List::Cons(*m, &cur), data);\n         }\n     }\n }\n@@ -312,7 +312,7 @@ fn par_search(masks: Vec<Vec<Vec<u64>>>) -> Data {\n         let m = *m;\n         spawn(proc() {\n             let mut data = Data::new();\n-            search(&*masks, m, 1, Cons(m, &Nil), &mut data);\n+            search(&*masks, m, 1, List::Cons(m, &List::Nil), &mut data);\n             tx.send(data);\n         });\n     }"}, {"sha": "77078b2c68d390cdfd93e4aa5fd01dde5a44285a", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -78,18 +78,18 @@ fn recurse_or_panic(depth: int, st: Option<State>) {\n         let st = match st {\n             None => {\n                 State {\n-                    unique: box Nil,\n-                    vec: vec!(box Nil),\n-                    res: r(box Nil)\n+                    unique: box List::Nil,\n+                    vec: vec!(box List::Nil),\n+                    res: r(box List::Nil)\n                 }\n             }\n             Some(st) => {\n                 let mut v = st.vec.clone();\n-                v.push_all(&[box Cons((), st.vec.last().unwrap().clone())]);\n+                v.push_all(&[box List::Cons((), st.vec.last().unwrap().clone())]);\n                 State {\n-                    unique: box Cons((), box *st.unique),\n+                    unique: box List::Cons((), box *st.unique),\n                     vec: v,\n-                    res: r(box Cons((), st.res._l.clone())),\n+                    res: r(box List::Cons((), st.res._l.clone())),\n                 }\n             }\n         };"}, {"sha": "3d3ccb606bfbbdd63d81f3c270ac1c80e1439430", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -19,9 +19,10 @@ impl Drop for X {\n enum double_option<T,U> { some2(T,U), none2 }\n \n fn main() {\n-    let x = some2(X { x: () }, X { x: () });\n+    let x = double_option::some2(X { x: () }, X { x: () });\n     match x {\n-        some2(ref _y, _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        none2 => panic!()\n+        double_option::some2(ref _y, _z) => { },\n+        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n+        double_option::none2 => panic!()\n     }\n }"}, {"sha": "8b54f146d04129c53f18bd28a7830d7e2c0057ab", "filename": "src/test/compile-fail/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,33 +16,33 @@ enum Foo {\n }\n \n fn distinct_variant() {\n-    let mut y = Y(1, 2);\n+    let mut y = Foo::Y(1, 2);\n \n     let a = match y {\n-      Y(ref mut a, _) => a,\n-      X => panic!()\n+      Foo::Y(ref mut a, _) => a,\n+      Foo::X => panic!()\n     };\n \n     let b = match y {\n-      Y(_, ref mut b) => b,\n-      X => panic!()\n+      Foo::Y(_, ref mut b) => b,\n+      Foo::X => panic!()\n     };\n \n     *a += 1;\n     *b += 1;\n }\n \n fn same_variant() {\n-    let mut y = Y(1, 2);\n+    let mut y = Foo::Y(1, 2);\n \n     let a = match y {\n-      Y(ref mut a, _) => a,\n-      X => panic!()\n+      Foo::Y(ref mut a, _) => a,\n+      Foo::X => panic!()\n     };\n \n     let b = match y {\n-      Y(ref mut b, _) => b, //~ ERROR cannot borrow\n-      X => panic!()\n+      Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+      Foo::X => panic!()\n     };\n \n     *a += 1;"}, {"sha": "8c6e76e7746193f295c4630c0314310690779cc9", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -20,12 +20,12 @@ impl X {\n }\n \n fn main() {\n-    let mut x = X(Right(main));\n+    let mut x = X(Either::Right(main));\n     (&mut x).with(\n         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n             match opt {\n-                &Right(ref f) => {\n-                    x = X(Left((0,0)));\n+                &Either::Right(ref f) => {\n+                    x = X(Either::Left((0,0)));\n                     (*f)()\n                 },\n                 _ => panic!()"}, {"sha": "2063d7388a9ddddd7d1ac83471b25d97205143ec", "filename": "src/test/compile-fail/borrowck-loan-local-as-both-mut-and-imm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,21 +12,21 @@ enum Either<T, U> { Left(T), Right(U) }\n \n     fn f(x: &mut Either<int,f64>, y: &Either<int,f64>) -> int {\n         match *y {\n-            Left(ref z) => {\n-                *x = Right(1.0);\n+            Either::Left(ref z) => {\n+                *x = Either::Right(1.0);\n                 *z\n             }\n             _ => panic!()\n         }\n     }\n \n     fn g() {\n-        let mut x: Either<int,f64> = Left(3);\n+        let mut x: Either<int,f64> = Either::Left(3);\n         println!(\"{}\", f(&mut x, &x)); //~ ERROR cannot borrow\n     }\n \n     fn h() {\n-        let mut x: Either<int,f64> = Left(3);\n+        let mut x: Either<int,f64> = Either::Left(3);\n         let y: &Either<int, f64> = &x;\n         let z: &mut Either<int, f64> = &mut x; //~ ERROR cannot borrow\n         *z = *y;"}, {"sha": "fe0519b8198bcafaa706c1ecb3a01ec7f256fe38", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -25,8 +25,8 @@ pub fn main() {\n         }\n     }\n \n-    match Foo(1) {\n-        Foo(x) => {\n+    match E::Foo(1) {\n+        E::Foo(x) => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }\n     }"}, {"sha": "c61ec39ec50d117c565d0db543ffd43b0ce3439f", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,12 +16,12 @@ enum Foo {\n }\n \n fn blah() {\n-    let f = &Foo1(box 1u32, box 2u32);\n+    let f = &Foo::Foo1(box 1u32, box 2u32);\n     match *f {             //~ ERROR cannot move out of\n-        Foo1(num1,         //~ NOTE attempting to move value to here\n-             num2) => (),  //~ NOTE and here\n-        Foo2(num) => (),   //~ NOTE and here\n-        Foo3 => ()\n+        Foo::Foo1(num1,         //~ NOTE attempting to move value to here\n+                  num2) => (),  //~ NOTE and here\n+        Foo::Foo2(num) => (),   //~ NOTE and here\n+        Foo::Foo3 => ()\n     }\n }\n "}, {"sha": "464e42df8aa371c828325b472c7eec5585d1ad9f", "filename": "src/test/compile-fail/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,15 +15,15 @@ enum Enum<'a> {\n \n fn foo() -> int {\n     let mut n = 42;\n-    let mut x = A(&mut n);\n+    let mut x = Enum::A(&mut n);\n     match x {\n-        A(_) if { x = B(false); false } => 1,\n+        Enum::A(_) if { x = Enum::B(false); false } => 1,\n         //~^ ERROR cannot assign in a pattern guard\n-        A(_) if { let y = &mut x; *y = B(false); false } => 1,\n+        Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n         //~^ ERROR cannot mutably borrow in a pattern guard\n         //~^^ ERROR cannot assign in a pattern guard\n-        A(p) => *p,\n-        B(_) => 2,\n+        Enum::A(p) => *p,\n+        Enum::B(_) => 2,\n     }\n }\n "}, {"sha": "db3fa6247db26bff4b3d9b740751d9236eeee115", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -18,12 +18,12 @@ enum cycle {\n     empty\n }\n fn main() {\n-    let mut x = box node(node_ {a: box empty});\n+    let mut x = box cycle::node(node_ {a: box cycle::empty});\n     // Create a cycle!\n     match *x {\n-      node(ref mut y) => {\n+      cycle::node(ref mut y) => {\n         y.a = x; //~ ERROR cannot move out of\n       }\n-      empty => {}\n+      cycle::empty => {}\n     };\n }"}, {"sha": "a49256d1bfc033fe8b414a7a8a49a62088a9abd7", "filename": "src/test/compile-fail/by-move-pattern-binding.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -20,13 +20,13 @@ struct S {\n fn f(x: String) {}\n \n fn main() {\n-    let s = S { x: Bar(\"hello\".to_string()) };\n+    let s = S { x: E::Bar(\"hello\".to_string()) };\n     match &s.x {\n-        &Foo => {}\n-        &Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n+        &E::Foo => {}\n+        &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n     };\n     match &s.x {\n-        &Foo => {}\n-        &Bar(ref identifier) => println!(\"{}\", *identifier)\n+        &E::Foo => {}\n+        &E::Bar(ref identifier) => println!(\"{}\", *identifier)\n     };\n }"}, {"sha": "54dccebe69953dc720a7780766763c0bfd0ed3b0", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -30,11 +30,11 @@ enum SafeEnum {\n }\n \n // These should be ok\n-static STATIC1: SafeEnum = Variant1;\n-static STATIC2: SafeEnum = Variant2(0);\n+static STATIC1: SafeEnum = SafeEnum::Variant1;\n+static STATIC2: SafeEnum = SafeEnum::Variant2(0);\n \n // This one should fail\n-static STATIC3: SafeEnum = Variant3(WithDtor);\n+static STATIC3: SafeEnum = SafeEnum::Variant3(WithDtor);\n //~^ ERROR statics are not allowed to have destructors\n \n \n@@ -51,9 +51,9 @@ impl Drop for UnsafeEnum {\n }\n \n \n-static STATIC4: UnsafeEnum = Variant5;\n+static STATIC4: UnsafeEnum = UnsafeEnum::Variant5;\n //~^ ERROR statics are not allowed to have destructors\n-static STATIC5: UnsafeEnum = Variant6(0);\n+static STATIC5: UnsafeEnum = UnsafeEnum::Variant6(0);\n //~^ ERROR statics are not allowed to have destructors\n \n \n@@ -64,22 +64,25 @@ struct SafeStruct {\n \n \n // Struct fields are safe, hence this static should be safe\n-static STATIC6: SafeStruct = SafeStruct{field1: Variant1, field2: Variant2(0)};\n+static STATIC6: SafeStruct = SafeStruct{field1: SafeEnum::Variant1, field2: SafeEnum::Variant2(0)};\n \n // field2 has an unsafe value, hence this should fail\n-static STATIC7: SafeStruct = SafeStruct{field1: Variant1, field2: Variant3(WithDtor)};\n+static STATIC7: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n+                                        field2: SafeEnum::Variant3(WithDtor)};\n //~^ ERROR statics are not allowed to have destructors\n \n // Test variadic constructor for structs. The base struct should be examined\n // as well as every field present in the constructor.\n // This example shouldn't fail because all the fields are safe.\n-static STATIC8: SafeStruct = SafeStruct{field1: Variant1,\n-                                        ..SafeStruct{field1: Variant1, field2: Variant1}};\n+static STATIC8: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n+                                        ..SafeStruct{field1: SafeEnum::Variant1,\n+                                                     field2: SafeEnum::Variant1}};\n \n // This example should fail because field1 in the base struct is not safe\n-static STATIC9: SafeStruct = SafeStruct{field1: Variant1,\n-                                        ..SafeStruct{field1: Variant3(WithDtor), field2: Variant1}};\n-//~^ ERROR statics are not allowed to have destructors\n+static STATIC9: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n+                                        ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n+                                                     field2: SafeEnum::Variant1}};\n+//~^^ ERROR statics are not allowed to have destructors\n \n struct UnsafeStruct;\n \n@@ -103,14 +106,15 @@ static mut STATIC12: UnsafeStruct = UnsafeStruct;\n //~^ ERROR mutable statics are not allowed to have destructors\n //~^^ ERROR statics are not allowed to have destructors\n \n-static mut STATIC13: SafeStruct = SafeStruct{field1: Variant1, field2: Variant3(WithDtor)};\n+static mut STATIC13: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n //~^ ERROR mutable statics are not allowed to have destructors\n-//~^^ ERROR: statics are not allowed to have destructors\n+                                             field2: SafeEnum::Variant3(WithDtor)};\n+//~^ ERROR: statics are not allowed to have destructors\n \n static mut STATIC14: SafeStruct = SafeStruct {\n //~^ ERROR mutable statics are not allowed to have destructors\n-    field1: Variant1,\n-    field2: Variant4(\"str\".to_string())\n+    field1: SafeEnum::Variant1,\n+    field2: SafeEnum::Variant4(\"str\".to_string())\n };\n \n static STATIC15: &'static [Box<MyOwned>] = &[\n@@ -123,7 +127,7 @@ static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n     &box MyOwned, //~ ERROR statics are not allowed to have custom pointers\n );\n \n-static mut STATIC17: SafeEnum = Variant1;\n+static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n //~^ ERROR mutable statics are not allowed to have destructors\n \n static STATIC19: Box<int> ="}, {"sha": "7ea114605ce78f13739156765cf47edc729d08cc", "filename": "src/test/compile-fail/dup-struct-enum-struct-variant.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88c743def3cf42ee943ca09dda1e6dccf4894db9/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c743def3cf42ee943ca09dda1e6dccf4894db9/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs?ref=88c743def3cf42ee943ca09dda1e6dccf4894db9", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum Foo { C { a: int, b: int } }\n-struct C { a: int, b: int }         //~ ERROR error: duplicate definition of type or module `C`\n-\n-struct A { x: int }\n-enum Bar { A { x: int } }           //~ ERROR error: duplicate definition of type or module `A`\n-\n-fn main() {}"}, {"sha": "3ad27906552d71dcd917bc84cbce1588d59cdc60", "filename": "src/test/compile-fail/enum-to-float-cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -20,13 +20,13 @@ enum F {\n     H1 = 0xFFFFFFFFFFFFFFFF\n }\n \n-static C0: f32 = L0 as f32; //~ ERROR illegal cast\n-static C1: f32 = H1 as f32; //~ ERROR illegal cast\n+static C0: f32 = E::L0 as f32; //~ ERROR illegal cast\n+static C1: f32 = F::H1 as f32; //~ ERROR illegal cast\n \n pub fn main() {\n-    let a = L0 as f32;  //~ ERROR illegal cast\n+    let a = E::L0 as f32;  //~ ERROR illegal cast\n     let b = C0;\n-    let c = H1 as f32;  //~ ERROR illegal cast\n+    let c = F::H1 as f32;  //~ ERROR illegal cast\n     let d = C1;\n     assert_eq!(a, -1.0f32);\n     assert_eq!(b, -1.0f32);"}, {"sha": "6c52d41b99553fe35036cf72dd077901af4525ea", "filename": "src/test/compile-fail/enum-variant-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fenum-variant-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fenum-variant-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-variant-type-2.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,6 +14,6 @@ enum Foo {\n     Bar\n }\n \n-fn foo(x: Bar) {} //~ERROR found value name used as a type\n+fn foo(x: Foo::Bar) {} //~ERROR found value name used as a type\n \n fn main() {}"}, {"sha": "93d44f96c8aa0578f4cf7f436c2a871ec6fa4085", "filename": "src/test/compile-fail/enum-variant-type.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/88c743def3cf42ee943ca09dda1e6dccf4894db9/src%2Ftest%2Fcompile-fail%2Fenum-variant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c743def3cf42ee943ca09dda1e6dccf4894db9/src%2Ftest%2Fcompile-fail%2Fenum-variant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-variant-type.rs?ref=88c743def3cf42ee943ca09dda1e6dccf4894db9", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that enum variants are in the type namespace.\n-\n-enum Foo {\n-    Foo //~ERROR duplicate definition of type or module `Foo`\n-}\n-\n-enum Bar {\n-    Baz\n-}\n-\n-trait Baz {} //~ERROR duplicate definition of type or module `Baz`\n-\n-pub fn main() {}"}, {"sha": "46d872495a6d6307b37b0f8cb7aae8b6465ac270", "filename": "src/test/compile-fail/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,4 +14,4 @@ mod foo {\n     enum y { y1, }\n }\n \n-fn main() { let z = foo::y1; } //~ ERROR: is inaccessible\n+fn main() { let z = foo::y::y1; } //~ ERROR: is inaccessible"}, {"sha": "459a5d8c9e3cbbca112240d824baa5c8ee915b2d", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -33,8 +33,7 @@ fn foo<T>() {}\n fn main() {\n     fpriv(); //~ ERROR: unresolved\n     epriv(); //~ ERROR: unresolved\n-    A1; //~ ERROR: unresolved\n-    B1;\n+    B; //~ ERROR: unresolved\n     C; //~ ERROR: unresolved\n     import(); //~ ERROR: unresolved\n "}, {"sha": "f8d89a8269ddefafc7a9904315585c766b0d6b45", "filename": "src/test/compile-fail/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,4 +13,4 @@\n \n enum mlist { cons(int, mlist), nil, }\n \n-fn main() { let a = cons(10, cons(11, nil)); }\n+fn main() { let a = mlist::cons(10, mlist::cons(11, mlist::nil)); }"}, {"sha": "abd7efe0e8ed1faf141b88d662d7e4482294cc3c", "filename": "src/test/compile-fail/inner-static-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,7 +13,7 @@\n enum Bar<T> { What }\n \n fn foo<T>() {\n-    static a: Bar<T> = What;\n+    static a: Bar<T> = Bar::What;\n     //~^ ERROR: cannot use an outer type parameter in this context\n }\n "}, {"sha": "0f30243b39a1942ad54ddfa30fb7c05441d07498", "filename": "src/test/compile-fail/issue-11680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,9 +13,9 @@\n extern crate \"issue-11680\" as other;\n \n fn main() {\n-    let _b = other::Bar(1);\n+    let _b = other::Foo::Bar(1);\n     //~^ ERROR: variant `Bar` is private\n \n-    let _b = other::test::Bar(1);\n+    let _b = other::test::Foo::Bar(1);\n     //~^ ERROR: variant `Bar` is private\n }"}, {"sha": "59e29516a740c3624b499290357b24a63c2038af", "filename": "src/test/compile-fail/issue-12116.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,8 +15,8 @@ enum IntList {\n \n fn tail(source_list: &IntList) -> IntList {\n     match source_list {\n-        &Cons(val, box ref next_list) => tail(next_list),\n-        &Cons(val, box Nil)           => Cons(val, box Nil),\n+        &IntList::Cons(val, box ref next_list) => tail(next_list),\n+        &IntList::Cons(val, box Nil)           => IntList::Cons(val, box Nil),\n         //~^ ERROR: unreachable pattern\n         _                          => panic!()\n     }"}, {"sha": "83612823c591a94970c6fd506bce859947d17559", "filename": "src/test/compile-fail/issue-13624.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,7 +14,7 @@ mod a {\n   }\n \n   pub fn get_enum_struct_variant() -> () {\n-    EnumStructVariant { x: 1, y: 2, z: 3 }\n+    Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n //~^ ERROR mismatched types: expected `()`, found `a::Enum` (expected (), found enum a::Enum)\n   }\n }\n@@ -26,7 +26,7 @@ mod b {\n     fn test_enum_struct_variant() {\n       let enum_struct_variant = ::a::get_enum_struct_variant();\n       match enum_struct_variant {\n-        a::EnumStructVariant { x, y, z } => {\n+        a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types: expected `()`, found `a::Enum`\n         //         (expected (), found enum a::Enum)\n         }"}, {"sha": "f56430f42289a23f61d4243057b9e6b84929fcbb", "filename": "src/test/compile-fail/issue-15129.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -19,9 +19,9 @@ pub enum V {\n }\n \n fn main() {\n-    match (T1(()), V2(true)) {\n+    match (T::T1(()), V::V2(true)) {\n     //~^ ERROR non-exhaustive patterns: `(T1(()), V2(_))` not covered\n-        (T1(()), V1(i)) => (),\n-        (T2(()), V2(b)) => ()\n+        (T::T1(()), V::V1(i)) => (),\n+        (T::T2(()), V::V2(b)) => ()\n     }\n }"}, {"sha": "7b91063e2f98df7efcd4e02579a81170de6516df", "filename": "src/test/compile-fail/issue-15896.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,9 +15,9 @@ fn main() {\n     struct Tau { t: uint }\n     enum E { B(R, Tau) }\n \n-    let e = B(REB(()), Tau { t: 3 });\n+    let e = E::B(R::REB(()), Tau { t: 3 });\n     let u = match e {\n-        B(\n+        E::B(\n           Tau{t: x},\n           //~^ ERROR mismatched types: expected `main::R`, found `main::Tau`\n           //        (expected enum main::R, found struct main::Tau)"}, {"sha": "2a1a3397d544736280888279cced8aa83f73f134", "filename": "src/test/compile-fail/issue-17025.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17025.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,7 +14,7 @@ enum A {\n }\n \n fn c(c:char) {\n-    B(c);\n+    A::B(c);\n     //~^ ERROR cannot move a value of type A: the size of A cannot be statically determined\n }\n "}, {"sha": "62a5c7318b98f88beb09a9aed4a88ba4feb64046", "filename": "src/test/compile-fail/issue-17385.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -30,10 +30,10 @@ fn main() {\n         _ => unreachable!()\n     }\n \n-    let e = Variant2;\n+    let e = Enum::Variant2;\n     drop(e);\n     match e { //~ ERROR use of moved value\n-        Variant1 => unreachable!(),\n-        Variant2 => ()\n+        Enum::Variant1 => unreachable!(),\n+        Enum::Variant2 => ()\n     }\n }"}, {"sha": "c956f00c8e77f116b9b095d0e80807fb6d6e110b", "filename": "src/test/compile-fail/issue-17405.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,7 +13,7 @@ enum Foo {\n }\n \n fn main() {\n-    match Bar(1i) {\n+    match Foo::Bar(1i) {\n         Foo { i } => () //~ ERROR `Foo` does not name a struct or a struct variant\n     }\n }"}, {"sha": "55570e93a9721a8aa092c66260947063ec050616", "filename": "src/test/compile-fail/issue-17444.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,6 +13,6 @@ enum Test {\n }\n \n fn main() {\n-    let _x = Foo as *const int;\n+    let _x = Test::Foo as *const int;\n     //~^ ERROR illegal cast; cast through an integer first: `Test` as `*const int`\n }"}, {"sha": "9590ef3dab48c99cc3c36374451fb2fae5b3c714", "filename": "src/test/compile-fail/issue-17800.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,8 +14,9 @@ enum MyOption<T> {\n }\n \n fn main() {\n-    match MySome(42i) {\n-        MySome { x: 42i } => (), //~ ERROR `MySome` does not name a struct or a struct variant\n+    match MyOption::MySome(42i) {\n+        MyOption::MySome { x: 42i } => (),\n+        //~^ ERROR `MyOption::MySome` does not name a struct or a struct variant\n         _ => (),\n     }\n }"}, {"sha": "a655d61fa56c16cc9331f9f9136b1cab1eda1a9c", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,5 +13,5 @@ enum Foo {\n }\n \n fn main() {\n-    let f = Variant(42u); //~ ERROR expected function, found `Foo`\n+    let f = Foo::Variant(42u); //~ ERROR expected function, found `Foo`\n }"}, {"sha": "e5503edfab5e1a9f688f22824e2c5e0f4f0a11dd", "filename": "src/test/compile-fail/issue-2848.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,7 +17,7 @@ mod bar {\n }\n \n fn main() {\n-    use bar::{alpha, charlie};\n+    use bar::foo::{alpha, charlie};\n     match alpha {\n       alpha | beta => {} //~ ERROR variable `beta` from pattern #2 is not bound in pattern #1\n       charlie => {}"}, {"sha": "5aaeb7e8c6d772b7e4472e7fabf694e63af6c22b", "filename": "src/test/compile-fail/issue-2849.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,7 +11,8 @@\n enum foo { alpha, beta(int) }\n \n fn main() {\n-    match alpha {\n-      alpha | beta(i) => {} //~ ERROR variable `i` from pattern #2 is not bound in pattern #1\n+    match foo::alpha {\n+      foo::alpha | foo::beta(i) => {}\n+      //~^ ERROR variable `i` from pattern #2 is not bound in pattern #1\n     }\n }"}, {"sha": "d9fe3550c9e75be75c2f06df75b497b79e7afcb3", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -18,13 +18,14 @@ enum k { m(int, int) }\n fn main()\n {\n \n-    let _z = match g(1, 2) {\n-      g(x, x) => { println!(\"{}\", x + x); }\n+    let _z = match f::g(1, 2) {\n+      f::g(x, x) => { println!(\"{}\", x + x); }\n       //~^ ERROR identifier `x` is bound more than once in the same pattern\n     };\n \n-    let _z = match i(l(1, 2), m(3, 4)) {\n-      i(l(x, _), m(_, x))  //~ ERROR identifier `x` is bound more than once in the same pattern\n+    let _z = match h::i(j::l(1, 2), k::m(3, 4)) {\n+      h::i(j::l(x, _), k::m(_, x))\n+      //~^ ERROR identifier `x` is bound more than once in the same pattern\n         => { println!(\"{}\", x + x); }\n     };\n "}, {"sha": "f3d26c50cc33206d28b185de7c523f2cbc70beb5", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,5 +16,5 @@ fn main() {\n         Bar = foo //~ ERROR attempt to use a non-constant value in a constant\n     }\n \n-    println!(\"{}\", Bar);\n+    println!(\"{}\", Stuff::Bar);\n }"}, {"sha": "f10305d017dc32425df4b200525ec05be96f616c", "filename": "src/test/compile-fail/issue-3601.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -31,12 +31,12 @@ struct NodeData {\n \n fn main() {\n     let mut id = HTMLImageData { image: None };\n-    let ed = ElementData { kind: box HTMLImageElement(id) };\n-    let n = NodeData {kind : box Element(ed)};\n+    let ed = ElementData { kind: box ElementKind::HTMLImageElement(id) };\n+    let n = NodeData {kind : box NodeKind::Element(ed)};\n     // n.b. span could be better\n     match n.kind {\n-        box Element(ed) => match ed.kind { //~ ERROR non-exhaustive patterns\n-            box HTMLImageElement(ref d) if d.image.is_some() => { true }\n+        box NodeKind::Element(ed) => match ed.kind { //~ ERROR non-exhaustive patterns\n+            box ElementKind::HTMLImageElement(ref d) if d.image.is_some() => { true }\n         },\n         _ => panic!(\"WAT\") //~ ERROR unreachable pattern\n     };"}, {"sha": "9d9e91a141be3c1ef90c3aff0ff100519ccbf39e", "filename": "src/test/compile-fail/issue-3993-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use zoo::{duck, goose};\n+use zoo::bird::{duck, goose};\n \n mod zoo {\n     pub enum bird {"}, {"sha": "765aec35fc6a8bd2b10cbf01ef286a016bb21b30", "filename": "src/test/compile-fail/issue-4972.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,7 +17,7 @@ pub enum TraitWrapper {\n \n fn get_tw_map(tw: &TraitWrapper) -> &MyTrait {\n     match *tw {\n-        A(box ref map) => map, //~ ERROR cannot be dereferenced\n+        TraitWrapper::A(box ref map) => map, //~ ERROR cannot be dereferenced\n     }\n }\n "}, {"sha": "df3748ac9346833a2afb6fd8017918d525ed9924", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,7 +12,7 @@ enum A { B, C }\n \n fn main() {\n     match (true, false) {\n-        B => (),\n+        A::B => (),\n //~^ ERROR mismatched types: expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n         _ => ()\n     }"}, {"sha": "576dfe8b67bc12814e281e78d60d988b3da55e88", "filename": "src/test/compile-fail/issue-5358-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,8 +12,8 @@ enum Either<T, U> { Left(T), Right(U) }\n struct S(Either<uint, uint>);\n \n fn main() {\n-    match S(Left(5)) {\n-        Right(_) => {}  //~ ERROR mismatched types: expected `S`, found `Either\n+    match S(Either::Left(5)) {\n+        Either::Right(_) => {}  //~ ERROR mismatched types: expected `S`, found `Either\n         _ => {}\n     }\n }"}, {"sha": "f11d5972ee19122864944e53b7be1cb1f4f5efab", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,7 +14,7 @@ mod foo { pub fn bar() {} }\n \n fn main() {\n     match (true, false) {\n-        B => (), //~ ERROR expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n+        A::B => (), //~ ERROR expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n         _ => ()\n     }\n "}, {"sha": "d6cc493e93656b09c8775517c0020a0d5cc0bb46", "filename": "src/test/compile-fail/issue-9814.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,5 +14,5 @@\n enum Foo { Bar(int) }\n \n fn main() {\n-    let _ = *Bar(2); //~ ERROR type `Foo` cannot be dereferenced\n+    let _ = *Foo::Bar(2); //~ ERROR type `Foo` cannot be dereferenced\n }"}, {"sha": "1a4a87e608b6fe5fdd3e88409cb0b58e56667280", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -86,7 +86,7 @@ pub fn pub_fn() {\n     let used_struct1 = UsedStruct1 { x: 1 };\n     let used_struct2 = UsedStruct2(1);\n     let used_struct3 = UsedStruct3;\n-    let e = foo3;\n+    let e = used_enum::foo3;\n     SemiUsedStruct::la_la_la();\n \n     let i = 1i;\n@@ -104,7 +104,7 @@ fn used_fn() {}\n \n fn foo() { //~ ERROR: function is never used\n     bar();\n-    let unused_enum = foo2;\n+    let unused_enum = priv_enum::foo2;\n }\n \n fn bar() { //~ ERROR: function is never used"}, {"sha": "d3249dcef0f6341cbc10a854e7cdc80518a06695", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -37,7 +37,7 @@ enum XYZ {\n \n fn field_match_in_patterns(b: XYZ) -> String {\n     match b {\n-        Y { a, .. } => a,\n+        XYZ::Y { a, .. } => a,\n         _ => \"\".to_string()\n     }\n }\n@@ -60,7 +60,7 @@ fn field_match_in_let(f: Bar) -> bool {\n \n fn main() {\n     field_read(Foo { x: 1, b: false, marker: std::kinds::marker::NoCopy });\n-    field_match_in_patterns(Z);\n+    field_match_in_patterns(XYZ::Z);\n     field_match_in_let(Bar { x: 42u, b: true, _guard: () });\n     let _ = Baz { x: 0 };\n }"}, {"sha": "d6a31c96100f294ecc5ecdb88329e30e5f7e8bea", "filename": "src/test/compile-fail/lint-dead-code-5.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -31,10 +31,10 @@ enum Enum3 { //~ ERROR: enum is never used\n }\n \n fn main() {\n-    let v = Variant1(1);\n+    let v = Enum1::Variant1(1);\n     match v {\n-        Variant1(_) => (),\n-        Variant2 => ()\n+        Enum1::Variant1(_) => (),\n+        Enum1::Variant2 => ()\n     }\n-    let x = Variant3(true);\n+    let x = Enum2::Variant3(true);\n }"}, {"sha": "eb4da4d66f33ca3433bcd3b739e1c5856e904a70", "filename": "src/test/compile-fail/lint-shorthand-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -57,8 +57,8 @@ fn main() {\n \n         enum Foo { x }\n \n-        match (Bar { x: x }) {\n-            Bar { x: x } => {},\n+        match (Bar { x: Foo::x }) {\n+            Bar { x: Foo::x } => {},\n         }\n     }\n }"}, {"sha": "9e397ce9d8d13f27585c59d9772663aa4ca45056", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -98,13 +98,13 @@ mod cross_crate {\n         let _ = FrozenUnitStruct;\n         let _ = LockedUnitStruct;\n \n-        let _ = DeprecatedVariant; //~ ERROR use of deprecated item\n-        let _ = ExperimentalVariant; //~ ERROR use of experimental item\n-        let _ = UnstableVariant; //~ ERROR use of unstable item\n-        let _ = UnmarkedVariant; //~ ERROR use of unmarked item\n-        let _ = StableVariant;\n-        let _ = FrozenVariant;\n-        let _ = LockedVariant;\n+        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::ExperimentalVariant; //~ ERROR use of experimental item\n+        let _ = Enum::UnstableVariant; //~ ERROR use of unstable item\n+        let _ = Enum::UnmarkedVariant; //~ ERROR use of unmarked item\n+        let _ = Enum::StableVariant;\n+        let _ = Enum::FrozenVariant;\n+        let _ = Enum::LockedVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n         let _ = ExperimentalTupleStruct (1); //~ ERROR use of experimental item\n@@ -171,8 +171,8 @@ mod inheritance {\n         experimental_mod::experimental(); //~ ERROR use of experimental item\n         experimental_mod::stable();\n \n-        let _ = ExperimentalVariant; //~ ERROR use of experimental item\n-        let _ = StableVariant;\n+        let _ = Experimental::ExperimentalVariant; //~ ERROR use of experimental item\n+        let _ = Experimental::StableVariant;\n \n         let x: uint = 0;\n         x.experimental(); //~ ERROR use of experimental item\n@@ -420,13 +420,13 @@ mod this_crate {\n         let _ = FrozenUnitStruct;\n         let _ = LockedUnitStruct;\n \n-        let _ = DeprecatedVariant; //~ ERROR use of deprecated item\n-        let _ = ExperimentalVariant;\n-        let _ = UnstableVariant;\n-        let _ = UnmarkedVariant;\n-        let _ = StableVariant;\n-        let _ = FrozenVariant;\n-        let _ = LockedVariant;\n+        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::ExperimentalVariant;\n+        let _ = Enum::UnstableVariant;\n+        let _ = Enum::UnmarkedVariant;\n+        let _ = Enum::StableVariant;\n+        let _ = Enum::FrozenVariant;\n+        let _ = Enum::LockedVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n         let _ = ExperimentalTupleStruct (1);"}, {"sha": "e93872eba0c3e7f7cff0b9558f36ec1eb4dd6d4d", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -75,8 +75,8 @@ enum tri {\n }\n \n fn f4b() -> int {\n-    match a(3i) {\n-      a(i) | b(i) | c(i) => {\n+    match tri::a(3i) {\n+      tri::a(i) | tri::b(i) | tri::c(i) => {\n         i\n       }\n     }"}, {"sha": "9b313f248fcbb22b9dd48e4c66f805e62be8ea60", "filename": "src/test/compile-fail/match-arm-statics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+use self::Direction::{North, East, South, West};\n \n struct NewBool(bool);\n "}, {"sha": "ab9efdcc8cc503b525d11b71d27202afb0a5fbe2", "filename": "src/test/compile-fail/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,9 +17,9 @@ fn main() {\n \n     fn foo(c: color) {\n         match c {\n-          rgb(_, _, _) => { }\n-          cmyk(_, _, _, _) => { }\n-          no_color(_) => { }\n+          color::rgb(_, _, _) => { }\n+          color::cmyk(_, _, _, _) => { }\n+          color::no_color(_) => { }\n           //~^ ERROR this pattern has 1 field, but the corresponding variant has no fields\n         }\n     }"}, {"sha": "243690bbf31dc97ba77bb56481d97d7e0be020d6", "filename": "src/test/compile-fail/match-pattern-field-mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,10 +17,10 @@ fn main() {\n \n     fn foo(c: color) {\n         match c {\n-          rgb(_, _) => { }\n+          color::rgb(_, _) => { }\n           //~^ ERROR this pattern has 2 fields, but the corresponding variant has 3 fields\n-          cmyk(_, _, _, _) => { }\n-          no_color => { }\n+          color::cmyk(_, _, _, _) => { }\n+          color::no_color => { }\n         }\n     }\n }"}, {"sha": "65082f93d3536deb65efe61048cf9fa907c42eb4", "filename": "src/test/compile-fail/match-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,7 +14,7 @@ enum E { C(int) }\n \n fn main() {\n     match (S { a: 1 }) {\n-        C(_) => (), //~ ERROR mismatched types: expected `S`, found `E`\n+        E::C(_) => (), //~ ERROR mismatched types: expected `S`, found `E`\n         _ => ()\n     }\n }"}, {"sha": "0fb262003592bf282b167e88a08a85d1664bf759", "filename": "src/test/compile-fail/match-tag-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-tag-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-tag-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-tag-nullary.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,4 +13,4 @@\n enum a { A, }\n enum b { B, }\n \n-fn main() { let x: a = A; match x { B => { } } }\n+fn main() { let x: a = a::A; match x { b::B => { } } }"}, {"sha": "89012e42bdcc0c378a69522c3b21e12ff9a9baec", "filename": "src/test/compile-fail/match-tag-unary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-tag-unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmatch-tag-unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-tag-unary.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,4 +13,4 @@\n enum a { A(int), }\n enum b { B(int), }\n \n-fn main() { let x: a = A(0); match x { B(y) => { } } }\n+fn main() { let x: a = a::A(0); match x { b::B(y) => { } } }"}, {"sha": "ee57377943d12b28a962c6316dee3b81cdcc7f24", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -25,13 +25,13 @@ fn f(s: &S, g: |&S|) {\n }\n \n fn main() {\n-    let s = S { x: box Bar(box 42) };\n+    let s = S { x: box E::Bar(box 42) };\n     loop {\n         f(&s, |hellothere| {\n             match hellothere.x { //~ ERROR cannot move out\n-                box Foo(_) => {}\n-                box Bar(x) => println!(\"{}\", x.to_string()), //~ NOTE attempting to move value to here\n-                box Baz => {}\n+                box E::Foo(_) => {}\n+                box E::Bar(x) => println!(\"{}\", x.to_string()), //~ NOTE attempting to move value to here\n+                box E::Baz => {}\n             }\n         })\n     }"}, {"sha": "af9c5256040dd2a97e524f9645b7f9a6e47b1440", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -18,6 +18,6 @@ enum Foo { A(marker::NoSync) }\n fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = A(marker::NoSync);\n+    let x = Foo::A(marker::NoSync);\n     bar(&x); //~ ERROR the trait `core::kinds::Sync` is not implemented\n }"}, {"sha": "b7038800e11f1b32b94678507a8705ddc8e7995b", "filename": "src/test/compile-fail/name-clash-nullary-2.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88c743def3cf42ee943ca09dda1e6dccf4894db9/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c743def3cf42ee943ca09dda1e6dccf4894db9/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs?ref=88c743def3cf42ee943ca09dda1e6dccf4894db9", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:declaration of `thpppt` shadows\n-enum ack { thpppt, ffff, }\n-\n-fn main() {\n-  let thpppt: int = 42;\n-  log(debug, thpppt);\n-}"}, {"sha": "8b409cfe89dd8a80f31bc0e59cb87f8a24dd2271", "filename": "src/test/compile-fail/no_send-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -17,7 +17,7 @@ enum Foo {\n fn bar<T: Send>(_: T) {}\n \n fn main() {\n-    let x = A(marker::NoSend);\n+    let x = Foo::A(marker::NoSend);\n     bar(x);\n     //~^ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "cb8ecd7259bb75e27e36ba875d5370bafa5fbab7", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -15,7 +15,7 @@ enum Foo { A(marker::NoSync) }\n fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = A(marker::NoSync);\n+    let x = Foo::A(marker::NoSync);\n     bar(x);\n     //~^ ERROR the trait `core::kinds::Sync` is not implemented\n }"}, {"sha": "3ccce591ee7288747e13aee6ae530a6c9414151d", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,6 +11,6 @@\n enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n-    [ST_NULL, ..(ST_WHITESPACE as uint)];\n+    [State::ST_NULL, ..(State::ST_WHITESPACE as uint)];\n     //~^ ERROR expected constant integer for repeat count, found non-constant expression\n }"}, {"sha": "8f2cb61f95514cf44cef029fca3b0364ae6ffe2f", "filename": "src/test/compile-fail/non-exhaustive-match-nested.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -21,9 +21,9 @@ fn match_nested_vecs<'a, T>(l1: Option<&'a [T]>, l2: Result<&'a [T], ()>) -> &'s\n }\n \n fn main() {\n-    let x = a(c);\n+    let x = t::a(u::c);\n     match x { //~ ERROR non-exhaustive patterns: `a(c)` not covered\n-        a(d) => { panic!(\"hello\"); }\n-        b => { panic!(\"goodbye\"); }\n+        t::a(u::d) => { panic!(\"hello\"); }\n+        t::b => { panic!(\"goodbye\"); }\n     }\n }"}, {"sha": "8fcf10f1c356d3dece9b45e1daf5476b739dd7be", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,8 +11,8 @@\n enum t { a, b, }\n \n fn main() {\n-    let x = a;\n-    match x { b => { } } //~ ERROR non-exhaustive patterns: `a` not covered\n+    let x = t::a;\n+    match x { t::b => { } } //~ ERROR non-exhaustive patterns: `a` not covered\n     match true { //~ ERROR non-exhaustive patterns: `false` not covered\n       true => {}\n     }\n@@ -22,18 +22,18 @@ fn main() {\n     match (2i, 3i, 4i) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n       (_, _, 4) => {}\n     }\n-    match (a, a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n-      (a, b) => {}\n-      (b, a) => {}\n+    match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n+      (t::a, t::b) => {}\n+      (t::b, t::a) => {}\n     }\n-    match a { //~ ERROR non-exhaustive patterns: `b` not covered\n-      a => {}\n+    match t::a { //~ ERROR non-exhaustive patterns: `b` not covered\n+      t::a => {}\n     }\n     // This is exhaustive, though the algorithm got it wrong at one point\n-    match (a, b) {\n-      (a, _) => {}\n-      (_, a) => {}\n-      (b, b) => {}\n+    match (t::a, t::b) {\n+      (t::a, _) => {}\n+      (_, t::a) => {}\n+      (t::b, t::b) => {}\n     }\n     let vec = vec!(Some(42i), None, Some(21i));\n     let vec: &[Option<int>] = vec.as_slice();"}, {"sha": "6e1c3db10140f26b2afe0971ec3e3287bb031ec8", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -32,19 +32,19 @@ fn struct_with_a_nested_enum_and_vector() {\n }\n \n fn enum_with_multiple_missing_variants() {\n-    match Red {\n+    match Color::Red {\n     //~^ ERROR non-exhaustive patterns: `Red` not covered\n-        CustomRGBA { .. } => ()\n+        Color::CustomRGBA { .. } => ()\n     }\n }\n \n fn enum_struct_variant() {\n-    match Red {\n+    match Color::Red {\n     //~^ ERROR non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n-        Red => (),\n-        Green => (),\n-        CustomRGBA { a: false, r: _, g: _, b: 0 } => (),\n-        CustomRGBA { a: false, r: _, g: _, b: _ } => ()\n+        Color::Red => (),\n+        Color::Green => (),\n+        Color::CustomRGBA { a: false, r: _, g: _, b: 0 } => (),\n+        Color::CustomRGBA { a: false, r: _, g: _, b: _ } => ()\n     }\n }\n \n@@ -54,15 +54,15 @@ enum Enum {\n }\n \n fn vectors_with_nested_enums() {\n-    let x: &'static [Enum] = &[First, Second(false)];\n+    let x: &'static [Enum] = &[Enum::First, Enum::Second(false)];\n     match x {\n     //~^ ERROR non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n         [] => (),\n         [_] => (),\n-        [First, _] => (),\n-        [Second(true), First] => (),\n-        [Second(true), Second(true)] => (),\n-        [Second(false), _] => (),\n+        [Enum::First, _] => (),\n+        [Enum::Second(true), Enum::First] => (),\n+        [Enum::Second(true), Enum::Second(true)] => (),\n+        [Enum::Second(false), _] => (),\n         [_, _, tail.., _] => ()\n     }\n }"}, {"sha": "4cda97bcb4ac4e7c6bade2a5cad94ca31117a859", "filename": "src/test/compile-fail/occurs-check-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:mismatched types\n // From Issue #778\n enum clam<T> { a(T), }\n-fn main() { let c; c = a(c); match c { a::<int>(_) => { } } }\n+fn main() { let c; c = clam::a(c); match c { clam::a::<int>(_) => { } } }"}, {"sha": "e79113ceb89a577eacd5be0e79ee5377558c4ebc", "filename": "src/test/compile-fail/or-patter-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -12,4 +12,4 @@\n \n enum blah { a(int, int, uint), b(int, int), }\n \n-fn main() { match a(1, 1, 2u) { a(_, x, y) | b(x, y) => { } } }\n+fn main() { match blah::a(1, 1, 2u) { blah::a(_, x, y) | blah::b(x, y) => { } } }"}, {"sha": "8b65af00fb1c81d07d7732beaac5317ecc53ca1f", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -23,9 +23,9 @@ struct S {\n fn f(_c: char) {}\n \n fn main() {\n-    match B(1, 2) {\n-        B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n-        D(_) => (),       //~ ERROR this pattern has 1 field, but\n+    match A::B(1, 2) {\n+        A::B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n+        A::D(_) => (),       //~ ERROR this pattern has 1 field, but\n         _ => ()\n     }\n     match 'c' {"}, {"sha": "ff898ebd16b9c38c935c89a68b83bb69082a3275", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -11,7 +11,7 @@\n enum bar { t1((), Option<Vec<int>>), t2, }\n \n // n.b. my change changes this error message, but I think it's right -- tjc\n-fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n+fn foo(t: bar) -> int { match t { bar::t1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n //~^ ERROR binary operation `*` cannot be applied to\n \n fn main() { }"}, {"sha": "01b288fdaad1fd591035e10848152ea9d42752a3", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,7 +14,7 @@ enum bar { t1((), Option<Vec<int> >), t2, }\n \n fn foo(t: bar) {\n     match t {\n-      t1(_, Some::<int>(x)) => {\n+      bar::t1(_, Some::<int>(x)) => {\n         println!(\"{}\", x);\n       }\n       _ => { panic!(); }"}, {"sha": "50261839b16c6bc51eabf0d3ae272aeeaa75a300", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -66,7 +66,7 @@ mod bar {\n     }\n \n     fn test() {\n-        self::Pub;\n+        self::Enum::Pub;\n         unsafe {\n             epriv();\n             epub();\n@@ -121,7 +121,7 @@ mod foo {\n                                 //~^ NOTE: trait `B` is private\n         ::lol();\n \n-        ::bar::Pub;\n+        ::bar::Enum::Pub;\n \n         unsafe {\n             ::bar::epriv(); //~ ERROR: function `epriv` is private"}, {"sha": "67177eff9f95e53ca4feeb5b1b0aef581dd4d5fd", "filename": "src/test/compile-fail/recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -28,6 +28,6 @@ fn test<T:Dot> (n:int, i:int, first:T, second:T) ->int {\n   }\n }\n pub fn main() {\n-  let n = test(1, 0, NilValue, NilValue);\n+  let n = test(1, 0, Nil::NilValue, Nil::NilValue);\n   println!(\"{}\", n);\n }"}, {"sha": "b15f0405d23c69bb5651e2003765a495b0aef151", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,28 +14,28 @@ enum ast<'a> {\n }\n \n fn build() {\n-    let x = num(3u);\n-    let y = num(4u);\n-    let z = add(&x, &y);\n+    let x = ast::num(3u);\n+    let y = ast::num(4u);\n+    let z = ast::add(&x, &y);\n     compute(&z);\n }\n \n fn compute(x: &ast) -> uint {\n     match *x {\n-      num(x) => { x }\n-      add(x, y) => { compute(x) + compute(y) }\n+      ast::num(x) => { x }\n+      ast::add(x, y) => { compute(x) + compute(y) }\n     }\n }\n \n fn map_nums<'a,'b>(x: &ast, f: |uint| -> uint) -> &'a ast<'b> {\n     match *x {\n-      num(x) => {\n-        return &num(f(x)); //~ ERROR borrowed value does not live long enough\n+      ast::num(x) => {\n+        return &ast::num(f(x)); //~ ERROR borrowed value does not live long enough\n       }\n-      add(x, y) => {\n+      ast::add(x, y) => {\n         let m_x = map_nums(x, |z| f(z));\n         let m_y = map_nums(y, |z| f(z));\n-        return &add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n+        return &ast::add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n       }\n     }\n }"}, {"sha": "6f38f29591f321a0f1a1a43cfa6ee2029d4551fa", "filename": "src/test/compile-fail/regions-creating-enums3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,7 +14,7 @@ enum ast<'a> {\n }\n \n fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n-    add(x, y) //~ ERROR cannot infer\n+    ast::add(x, y) //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "34a125c809f6b18744e44c964aa59fb170cdc144", "filename": "src/test/compile-fail/regions-creating-enums4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,7 +14,7 @@ enum ast<'a> {\n }\n \n fn mk_add_bad2<'a,'b>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'b> {\n-    add(x, y) //~ ERROR cannot infer\n+    ast::add(x, y) //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "9c985839c4d9aa8ac5d0dd52043c03fcefff0357", "filename": "src/test/compile-fail/regions-lifetime-of-struct-or-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -24,7 +24,7 @@ fn structLifetime<'a>() -> &'a Test {\n }\n \n fn variantLifetime<'a>() -> &'a MyEnum {\n-  let testValue = &Variant1; //~ ERROR borrowed value does not live long enough\n+  let testValue = &MyEnum::Variant1; //~ ERROR borrowed value does not live long enough\n   testValue\n }\n "}, {"sha": "df54a66f0a2666d1920b81cb956ec53e7f160d10", "filename": "src/test/compile-fail/resolve-inconsistent-binding-mode.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fresolve-inconsistent-binding-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fresolve-inconsistent-binding-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-inconsistent-binding-mode.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,33 +14,33 @@ enum opts {\n \n fn matcher1(x: opts) {\n     match x {\n-      a(ref i) | b(i) => {}\n+      opts::a(ref i) | opts::b(i) => {}\n       //~^ ERROR variable `i` is bound with different mode in pattern #2 than in pattern #1\n-      c(_) => {}\n+      opts::c(_) => {}\n     }\n }\n \n fn matcher2(x: opts) {\n     match x {\n-      a(ref i) | b(i) => {}\n+      opts::a(ref i) | opts::b(i) => {}\n       //~^ ERROR variable `i` is bound with different mode in pattern #2 than in pattern #1\n-      c(_) => {}\n+      opts::c(_) => {}\n     }\n }\n \n fn matcher4(x: opts) {\n     match x {\n-      a(ref mut i) | b(ref i) => {}\n+      opts::a(ref mut i) | opts::b(ref i) => {}\n       //~^ ERROR variable `i` is bound with different mode in pattern #2 than in pattern #1\n-      c(_) => {}\n+      opts::c(_) => {}\n     }\n }\n \n \n fn matcher5(x: opts) {\n     match x {\n-      a(ref i) | b(ref i) => {}\n-      c(_) => {}\n+      opts::a(ref i) | opts::b(ref i) => {}\n+      opts::c(_) => {}\n     }\n }\n "}, {"sha": "de93422cd7a086011436ba1e4b00bcdb95d58053", "filename": "src/test/compile-fail/static-mut-not-pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -38,16 +38,16 @@ struct Foo {\n     baz: NewBool\n }\n \n-static mut STATIC_MUT_FOO: Foo = Foo { bar: Some(West), baz: NEW_FALSE };\n+static mut STATIC_MUT_FOO: Foo = Foo { bar: Some(Direction::West), baz: NEW_FALSE };\n \n fn mutable_statics() {\n-    match (Foo { bar: Some(North), baz: NewBool(true) }) {\n+    match (Foo { bar: Some(Direction::North), baz: NewBool(true) }) {\n         Foo { bar: None, baz: NewBool(true) } => (),\n         STATIC_MUT_FOO => (),\n         //~^ ERROR static variables cannot be referenced in a pattern\n-        Foo { bar: Some(South), .. } => (),\n+        Foo { bar: Some(Direction::South), .. } => (),\n         Foo { bar: Some(EAST), .. } => (),\n-        Foo { bar: Some(North), baz: NewBool(true) } => (),\n+        Foo { bar: Some(Direction::North), baz: NewBool(true) } => (),\n         Foo { bar: Some(EAST), baz: NewBool(false) } => ()\n     }\n }"}, {"sha": "1115d78e5608d0066a99723f625bae729e57f1a1", "filename": "src/test/compile-fail/struct-like-enum-nonexhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -14,9 +14,9 @@ enum A {\n }\n \n fn main() {\n-    let x = B { x: Some(3) };\n+    let x = A::B { x: Some(3) };\n     match x {   //~ ERROR non-exhaustive patterns\n-        C => {}\n-        B { x: None } => {}\n+        A::C => {}\n+        A::B { x: None } => {}\n     }\n }"}, {"sha": "1d05c5d181da5e3f1af3c783c448464c7bed6cca", "filename": "src/test/compile-fail/tag-variant-cast-non-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -16,6 +16,6 @@ enum non_nullary {\n }\n \n fn main() {\n-    let v = nullary;\n+    let v = non_nullary::nullary;\n     let val = v as int;\n }"}, {"sha": "3ff6c733026b56fa3c5b7004fea5e5fd5e6599d4", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -13,4 +13,4 @@\n \n enum foo { a(Box<foo>, int), b(uint), }\n \n-fn main() { match b(1u) { b(_) | a(box _, 1) => { } a(_, 1) => { } } }\n+fn main() { match foo::b(1u) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }"}, {"sha": "786421c4ef9d4c4f4ab23585a741fd273b8e20d6", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -37,7 +37,7 @@ mod foo {\n fn bar(f: foo::Foo) {\n     match f {\n         #[foo] //~ ERROR unused attribute\n-        foo::Bar => {}\n+        foo::Foo::Bar => {}\n     }\n }\n "}, {"sha": "bbda6c93ebaf9344ad319899f054654190f6fb2c", "filename": "src/test/debuginfo/borrowed-c-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -45,13 +45,13 @@\n enum ABC { TheA, TheB, TheC }\n \n fn main() {\n-    let the_a = TheA;\n+    let the_a = ABC::TheA;\n     let the_a_ref: &ABC = &the_a;\n \n-    let the_b = TheB;\n+    let the_b = ABC::TheB;\n     let the_b_ref: &ABC = &the_b;\n \n-    let the_c = TheC;\n+    let the_c = ABC::TheC;\n     let the_c_ref: &ABC = &the_c;\n \n     zzz(); // #break"}, {"sha": "d1ace0fbe3d339f2f47e49990e16f37805831929", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -61,17 +61,17 @@ fn main() {\n     // 0b01111100011111000111110001111100 = 2088533116\n     // 0b0111110001111100 = 31868\n     // 0b01111100 = 124\n-    let the_a = TheA { x: 0, y: 8970181431921507452 };\n+    let the_a = ABC::TheA { x: 0, y: 8970181431921507452 };\n     let the_a_ref: &ABC = &the_a;\n \n     // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n     // 0b00010001000100010001000100010001 = 286331153\n     // 0b0001000100010001 = 4369\n     // 0b00010001 = 17\n-    let the_b = TheB (0, 286331153, 286331153);\n+    let the_b = ABC::TheB (0, 286331153, 286331153);\n     let the_b_ref: &ABC = &the_b;\n \n-    let univariant = TheOnlyCase(4820353753753434);\n+    let univariant = Univariant::TheOnlyCase(4820353753753434);\n     let univariant_ref: &Univariant = &univariant;\n \n     zzz(); // #break"}, {"sha": "78101d669dc999a54f7e20a2c4da89db76f773fd", "filename": "src/test/debuginfo/by-value-non-immediate-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -125,7 +125,7 @@ fn main() {\n     // 0b01111100011111000111110001111100 = 2088533116\n     // 0b0111110001111100 = 31868\n     // 0b01111100 = 124\n-    by_val_enum(Case1 { x: 0, y: 8970181431921507452 });\n+    by_val_enum(Enum::Case1 { x: 0, y: 8970181431921507452 });\n }\n \n fn zzz() { () }"}, {"sha": "17e4110c2f1d3868aaea9dba48e0e1e225a0d110", "filename": "src/test/debuginfo/c-style-enum-in-composite.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -66,6 +66,9 @@\n \n #![allow(unused_variables)]\n \n+use self::AnEnum::{OneHundred, OneThousand, OneMillion};\n+use self::AnotherEnum::{MountainView, Toronto, Vienna};\n+\n enum AnEnum {\n     OneHundred = 100,\n     OneThousand = 1000,"}, {"sha": "fec1d1b27890169332757ba658a47f7ec105dca0", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -100,6 +100,10 @@\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n+use self::AutoDiscriminant::{One, Two, Three};\n+use self::ManualDiscriminant::{OneHundred, OneThousand, OneMillion};\n+use self::SingleVariant::TheOnlyVariant;\n+\n enum AutoDiscriminant {\n     One,\n     Two,"}, {"sha": "17e1651f9f6eda68487e1d3d0ba09e2885207f6e", "filename": "src/test/debuginfo/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -312,6 +312,7 @@\n \n #![allow(unused_variables)]\n \n+use self::Univariant::Unit;\n \n struct Struct {\n     a: i64,"}, {"sha": "58db37888e6d7aa7b0a66552c4d6c281d010a631", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -245,6 +245,8 @@\n \n #![allow(unused_variables)]\n \n+use self::Univariant::Unit;\n+\n struct Struct {\n     a: i64,\n     b: i32"}, {"sha": "8abb2cd5c26f984b91f68bc4128cc7b20bc40bb9", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -60,9 +60,9 @@ fn main() {\n \n     let empty_struct = EmptyStruct;\n \n-    let c_style_enum1 = CStyleEnumVar1;\n-    let c_style_enum2 = CStyleEnumVar2;\n-    let c_style_enum3 = CStyleEnumVar3;\n+    let c_style_enum1 = CStyleEnum::CStyleEnumVar1;\n+    let c_style_enum2 = CStyleEnum::CStyleEnumVar2;\n+    let c_style_enum3 = CStyleEnum::CStyleEnumVar3;\n \n     zzz(); // #break\n }"}, {"sha": "00b157d49d117501fe19b00c012bde6aad32c6ae", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -66,6 +66,10 @@\n \n #![feature(struct_variant)]\n \n+use self::CStyleEnum::{CStyleEnumVar1, CStyleEnumVar2, CStyleEnumVar3};\n+use self::MixedEnum::{MixedEnumCStyleVar, MixedEnumTupleVar, MixedEnumStructVar};\n+use self::NestedEnum::{NestedVariant1, NestedVariant2};\n+\n struct RegularStruct {\n     the_first_field: int,\n     the_second_field: f64,"}, {"sha": "fe5c13e4b8d5d2975112e518e7d3b3a4b3d0e81c", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -31,6 +31,9 @@\n \n #![feature(struct_variant)]\n \n+use self::Regular::{Case1, Case2, Case3};\n+use self::Univariant::TheOnlyCase;\n+\n // NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n // substituted with something of size `xx` bits and the same alignment as an integer type of the\n // same size."}, {"sha": "74d5dd2adc800365eab7331877edc4a8bff230b7", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -48,6 +48,8 @@\n // lldb-command:print univariant\n // lldb-check:[...]$3 = TheOnlyCase(-1)\n \n+use self::Regular::{Case1, Case2, Case3};\n+use self::Univariant::TheOnlyCase;\n \n // NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n // substituted with something of size `xx` bits and the same alignment as an integer type of the"}, {"sha": "399d9fabd7a1fccd377b628b7a054136fc94ef43", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -139,11 +139,11 @@ impl Enum {\n }\n \n fn main() {\n-    let stack = Variant2(117901063);\n+    let stack = Enum::Variant2(117901063);\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Variant1{ x: 1799, y: 1799 };\n+    let owned = box Enum::Variant1{ x: 1799, y: 1799 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "7b8526adba76910cc08f916c6d0740bc4a1ff689", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -101,19 +101,19 @@ fn main() {\n     let some: Option<&u32> = Some(unsafe { std::mem::transmute(0x12345678u) });\n     let none: Option<&u32> = None;\n \n-    let full = Full(454545, unsafe { std::mem::transmute(0x87654321u) }, 9988);\n+    let full = MoreFields::Full(454545, unsafe { std::mem::transmute(0x87654321u) }, 9988);\n \n-    let empty = Empty;\n-    let empty_gdb: &MoreFieldsRepr = unsafe { std::mem::transmute(&Empty) };\n+    let empty = MoreFields::Empty;\n+    let empty_gdb: &MoreFieldsRepr = unsafe { std::mem::transmute(&MoreFields::Empty) };\n \n-    let droid = Droid {\n+    let droid = NamedFields::Droid {\n         id: 675675,\n         range: 10000001,\n         internals: unsafe { std::mem::transmute(0x43218765u) }\n     };\n \n-    let void_droid = Void;\n-    let void_droid_gdb: &NamedFieldsRepr = unsafe { std::mem::transmute(&Void) };\n+    let void_droid = NamedFields::Void;\n+    let void_droid_gdb: &NamedFieldsRepr = unsafe { std::mem::transmute(&NamedFields::Void) };\n \n     zzz(); // #break\n }"}, {"sha": "b0c01ecce08c20401b752b046175f92bae34fd80", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -71,6 +71,8 @@\n #![allow(unused_variables)]\n #![feature(struct_variant)]\n \n+use self::Opt::{Empty, Val};\n+\n enum Opt<T> {\n     Empty,\n     Val { val: T }"}, {"sha": "68281cb2230281bd8e5104eb3cd98147f1a3fe84", "filename": "src/test/debuginfo/struct-in-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -43,6 +43,9 @@\n \n #![allow(unused_variables)]\n \n+use self::Regular::{Case1, Case2};\n+use self::Univariant::TheOnlyCase;\n+\n struct Struct {\n     x: u32,\n     y: i32,"}, {"sha": "899b43ad5596391f4f4769e19f13331ea5a0d653", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -51,6 +51,9 @@\n #![allow(unused_variables)]\n #![feature(struct_variant)]\n \n+use self::Regular::{Case1, Case2, Case3};\n+use self::Univariant::TheOnlyCase;\n+\n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when\n // datatype layout should be predictable as in this case."}, {"sha": "07a0f1696061134dba93e6008942ed0c4aae8d49", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09279395b6ca40f1398277971586197f949738a/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=f09279395b6ca40f1398277971586197f949738a", "patch": "@@ -50,6 +50,9 @@\n \n #![allow(unused_variables)]\n \n+use self::Regular::{Case1, Case2, Case3};\n+use self::Univariant::TheOnlyCase;\n+\n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when\n // datatype layout should be predictable as in this case."}]}