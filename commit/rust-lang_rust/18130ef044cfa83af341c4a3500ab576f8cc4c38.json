{"sha": "18130ef044cfa83af341c4a3500ab576f8cc4c38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTMwZWYwNDRjZmE4M2FmMzQxYzRhMzUwMGFiNTc2ZjhjYzRjMzg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-05T14:21:25Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-05T14:21:25Z"}, "message": "Replace error callback with Result", "tree": {"sha": "029236fb6d9aa4a608120a490a2c888ae9f090bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/029236fb6d9aa4a608120a490a2c888ae9f090bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18130ef044cfa83af341c4a3500ab576f8cc4c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18130ef044cfa83af341c4a3500ab576f8cc4c38", "html_url": "https://github.com/rust-lang/rust/commit/18130ef044cfa83af341c4a3500ab576f8cc4c38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18130ef044cfa83af341c4a3500ab576f8cc4c38/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be067558962c004b638e4c6f162d50f7c0c98b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be067558962c004b638e4c6f162d50f7c0c98b6", "html_url": "https://github.com/rust-lang/rust/commit/4be067558962c004b638e4c6f162d50f7c0c98b6"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "3dd1d7d274d5a25e55a01419392cb4ba936ad122", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/18130ef044cfa83af341c4a3500ab576f8cc4c38/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18130ef044cfa83af341c4a3500ab576f8cc4c38/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=18130ef044cfa83af341c4a3500ab576f8cc4c38", "patch": "@@ -1771,8 +1771,13 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         path: &ast::Path,\n         is_value: bool,\n     ) -> Res {\n-        self.resolve_ast_path_cb(path, is_value,\n-                                 |resolver, span, error| resolve_error(resolver, span, error))\n+        match self.resolve_ast_path_inner(path, is_value) {\n+            Ok(r) => r,\n+            Err((span, error)) => {\n+                resolve_error(self, span, error);\n+                Res::Err\n+            }\n+        }\n     }\n \n     fn resolve_str_path(\n@@ -1833,8 +1838,6 @@ impl<'a> Resolver<'a> {\n     /// just that an error occurred.\n     pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool)\n         -> Result<(ast::Path, Res), ()> {\n-        let mut errored = false;\n-\n         let path = if path_str.starts_with(\"::\") {\n             ast::Path {\n                 span,\n@@ -1855,48 +1858,46 @@ impl<'a> Resolver<'a> {\n                     .collect(),\n             }\n         };\n-        let res = self.resolve_ast_path_cb(&path, is_value, |_, _, _| errored = true);\n-        if errored || res == def::Res::Err {\n-            Err(())\n-        } else {\n-            Ok((path, res))\n+        match self.resolve_ast_path_inner(&path, is_value) {\n+            Ok(res) => {\n+                if res == Res::Err {\n+                    Err(())\n+                } else {\n+                    Ok((path, res))\n+                }\n+            }\n+            Err(_) => Err(()),\n         }\n     }\n \n     /// Like `resolve_ast_path`, but takes a callback in case there was an error.\n-    // FIXME(eddyb) use `Result` or something instead of callbacks.\n-    fn resolve_ast_path_cb<F>(\n+    fn resolve_ast_path_inner(\n         &mut self,\n         path: &ast::Path,\n         is_value: bool,\n-        error_callback: F,\n-    ) -> Res\n-        where F: for<'c, 'b> FnOnce(&'c mut Resolver<'_>, Span, ResolutionError<'b>)\n-    {\n+    ) -> Result<Res, (Span, ResolutionError<'a>)> {\n         let namespace = if is_value { ValueNS } else { TypeNS };\n         let span = path.span;\n         let path = Segment::from_path(&path);\n         // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.\n         match self.resolve_path_without_parent_scope(&path, Some(namespace), true,\n                                                                span, CrateLint::No) {\n             PathResult::Module(ModuleOrUniformRoot::Module(module)) =>\n-                module.res().unwrap(),\n+                Ok(module.res().unwrap()),\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 =>\n-                path_res.base_res(),\n+                Ok(path_res.base_res()),\n             PathResult::NonModule(..) => {\n-                error_callback(self, span, ResolutionError::FailedToResolve {\n+                Err((span, ResolutionError::FailedToResolve {\n                     label: String::from(\"type-relative paths are not supported in this context\"),\n                     suggestion: None,\n-                });\n-                Res::Err\n+                }))\n             }\n             PathResult::Module(..) | PathResult::Indeterminate => unreachable!(),\n             PathResult::Failed { span, label, suggestion, .. } => {\n-                error_callback(self, span, ResolutionError::FailedToResolve {\n+                Err((span, ResolutionError::FailedToResolve {\n                     label,\n                     suggestion,\n-                });\n-                Res::Err\n+                }))\n             }\n         }\n     }"}]}