{"sha": "7124590dcc96e1646d529447be878f99b3dbe63c", "node_id": "C_kwDOAAsO6NoAKDcxMjQ1OTBkY2M5NmUxNjQ2ZDUyOTQ0N2JlODc4Zjk5YjNkYmU2M2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T05:53:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-10T05:53:35Z"}, "message": "Rollup merge of #104046 - RalfJung:run-miri-run, r=oli-obk\n\nbootstrap: add support for running Miri on a file\n\nThis enables:\n```\n./x.py run src/tools/miri --stage 0 --args src/tools/miri/tests/pass/hello.rs\n```\nThat can be super helpful for debugging.\n\nAlso avoid sharing the Miri sysroot dir with a system-wide (rustup-managed) installation of Miri.\n\nFixes https://github.com/rust-lang/rust/issues/76666", "tree": {"sha": "d0ea96a6f19a456abb8b0b99b5259c88ac428852", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ea96a6f19a456abb8b0b99b5259c88ac428852"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7124590dcc96e1646d529447be878f99b3dbe63c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbJHfCRBK7hj4Ov3rIwAAG10IAA4Oahv4CpApvJ5E3Bjv6i+Y\nCJKbM/Yka2T+sUYntDAcoECWry16RleoOG7jmFZV2t7/NW611Jgv/gXLOkWYCBfM\n4EJnQD9TQCFehE5diwIuF0+GsqODzeaPpBR6yWWSK8BnZlKWHkasa6xqO44pw3LT\nwRXa0xU3W5Xa/uuVL68XRo7I1LzWYXqIkdIQdwNtP599+tVwBC9YBIvTnvCo47jW\nJAU5wLQdFcA484QN0REcxcM068iQ7Btuj+sEj1+aEF7yBzz6jkZ/HhqWYL8siMA5\nNVnuimco0wU+Xg4CuL3SXEn2M4lrSE1GcH1Q0kFYoqpdMjK+9pVRiAcC9vcUWuo=\n=Fk5X\n-----END PGP SIGNATURE-----\n", "payload": "tree d0ea96a6f19a456abb8b0b99b5259c88ac428852\nparent f9160224cf3cd0986a513415b0377125df7dc249\nparent a9edee7d1adfee012145ab6097b65a464cb50d06\nauthor Michael Goulet <michael@errs.io> 1668059615 -0800\ncommitter GitHub <noreply@github.com> 1668059615 -0800\n\nRollup merge of #104046 - RalfJung:run-miri-run, r=oli-obk\n\nbootstrap: add support for running Miri on a file\n\nThis enables:\n```\n./x.py run src/tools/miri --stage 0 --args src/tools/miri/tests/pass/hello.rs\n```\nThat can be super helpful for debugging.\n\nAlso avoid sharing the Miri sysroot dir with a system-wide (rustup-managed) installation of Miri.\n\nFixes https://github.com/rust-lang/rust/issues/76666\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7124590dcc96e1646d529447be878f99b3dbe63c", "html_url": "https://github.com/rust-lang/rust/commit/7124590dcc96e1646d529447be878f99b3dbe63c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7124590dcc96e1646d529447be878f99b3dbe63c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9160224cf3cd0986a513415b0377125df7dc249", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9160224cf3cd0986a513415b0377125df7dc249", "html_url": "https://github.com/rust-lang/rust/commit/f9160224cf3cd0986a513415b0377125df7dc249"}, {"sha": "a9edee7d1adfee012145ab6097b65a464cb50d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9edee7d1adfee012145ab6097b65a464cb50d06", "html_url": "https://github.com/rust-lang/rust/commit/a9edee7d1adfee012145ab6097b65a464cb50d06"}], "stats": {"total": 219, "additions": 155, "deletions": 64}, "files": [{"sha": "6fd363935079dcd001ba778f96242efcc7550a17", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7124590dcc96e1646d529447be878f99b3dbe63c", "patch": "@@ -755,6 +755,7 @@ impl<'a> Builder<'a> {\n                 run::BuildManifest,\n                 run::BumpStage0,\n                 run::ReplaceVersionPlaceholder,\n+                run::Miri,\n             ),\n             // These commands either don't use paths, or they're special-cased in Build::build()\n             Kind::Clean | Kind::Format | Kind::Setup => vec![],\n@@ -818,7 +819,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n-            Subcommand::Run { ref paths } => (Kind::Run, &paths[..]),\n+            Subcommand::Run { ref paths, .. } => (Kind::Run, &paths[..]),\n             Subcommand::Format { .. } => (Kind::Format, &[][..]),\n             Subcommand::Clean { .. } | Subcommand::Setup { .. } => {\n                 panic!()"}, {"sha": "2001e29bd2eadc56759de805020fb83fc86cdc25", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=7124590dcc96e1646d529447be878f99b3dbe63c", "patch": "@@ -140,6 +140,7 @@ pub enum Subcommand {\n     },\n     Run {\n         paths: Vec<PathBuf>,\n+        args: Vec<String>,\n     },\n     Setup {\n         profile: Profile,\n@@ -342,6 +343,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             Kind::Format => {\n                 opts.optflag(\"\", \"check\", \"check formatting instead of applying.\");\n             }\n+            Kind::Run => {\n+                opts.optmulti(\"\", \"args\", \"arguments for the tool\", \"ARGS\");\n+            }\n             _ => {}\n         };\n \n@@ -613,7 +617,7 @@ Arguments:\n                     println!(\"\\nrun requires at least a path!\\n\");\n                     usage(1, &opts, verbose, &subcommand_help);\n                 }\n-                Subcommand::Run { paths }\n+                Subcommand::Run { paths, args: matches.opt_strs(\"args\") }\n             }\n             Kind::Setup => {\n                 let profile = if paths.len() > 1 {\n@@ -721,24 +725,29 @@ impl Subcommand {\n     }\n \n     pub fn test_args(&self) -> Vec<&str> {\n-        let mut args = vec![];\n-\n         match *self {\n             Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {\n-                args.extend(test_args.iter().flat_map(|s| s.split_whitespace()))\n+                test_args.iter().flat_map(|s| s.split_whitespace()).collect()\n             }\n-            _ => (),\n+            _ => vec![],\n         }\n-\n-        args\n     }\n \n     pub fn rustc_args(&self) -> Vec<&str> {\n         match *self {\n             Subcommand::Test { ref rustc_args, .. } => {\n                 rustc_args.iter().flat_map(|s| s.split_whitespace()).collect()\n             }\n-            _ => Vec::new(),\n+            _ => vec![],\n+        }\n+    }\n+\n+    pub fn args(&self) -> Vec<&str> {\n+        match *self {\n+            Subcommand::Run { ref args, .. } => {\n+                args.iter().flat_map(|s| s.split_whitespace()).collect()\n+            }\n+            _ => vec![],\n         }\n     }\n "}, {"sha": "d49b41c51327961203f561254a85ef0ffad7346e", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=7124590dcc96e1646d529447be878f99b3dbe63c", "patch": "@@ -1,8 +1,12 @@\n+use std::process::Command;\n+\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::config::TargetSelection;\n use crate::dist::distdir;\n-use crate::tool::Tool;\n+use crate::test;\n+use crate::tool::{self, SourceType, Tool};\n use crate::util::output;\n-use std::process::Command;\n+use crate::Mode;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ExpandYamlAnchors;\n@@ -125,3 +129,63 @@ impl Step for ReplaceVersionPlaceholder {\n         builder.run(&mut cmd);\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Miri {\n+    stage: u32,\n+    host: TargetSelection,\n+    target: TargetSelection,\n+}\n+\n+impl Step for Miri {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/miri\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Miri {\n+            stage: run.builder.top_stage,\n+            host: run.build_triple(),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        let stage = self.stage;\n+        let host = self.host;\n+        let target = self.target;\n+        let compiler = builder.compiler(stage, host);\n+\n+        let miri = builder\n+            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let miri_sysroot = test::Miri::build_miri_sysroot(builder, compiler, &miri, target);\n+\n+        // # Run miri.\n+        // Running it via `cargo run` as that figures out the right dylib path.\n+        // add_rustc_lib_path does not add the path that contains librustc_driver-<...>.so.\n+        let mut miri = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolRustc,\n+            host,\n+            \"run\",\n+            \"src/tools/miri\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        miri.add_rustc_lib_path(builder, compiler);\n+        // Forward arguments.\n+        miri.arg(\"--\").arg(\"--target\").arg(target.rustc_target_arg());\n+        miri.args(builder.config.cmd.args());\n+\n+        // miri tests need to know about the stage sysroot\n+        miri.env(\"MIRI_SYSROOT\", &miri_sysroot);\n+\n+        let mut miri = Command::from(miri);\n+        builder.run(&mut miri);\n+    }\n+}"}, {"sha": "2b2257b72ae79f37d47e8b453dbe9805573a3942", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 55, "deletions": 43, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7124590dcc96e1646d529447be878f99b3dbe63c", "patch": "@@ -465,49 +465,20 @@ pub struct Miri {\n     target: TargetSelection,\n }\n \n-impl Step for Miri {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = false;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/tools/miri\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Miri {\n-            stage: run.builder.top_stage,\n-            host: run.build_triple(),\n-            target: run.target,\n-        });\n-    }\n-\n-    /// Runs `cargo test` for miri.\n-    fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n-        let host = self.host;\n-        let target = self.target;\n-        let compiler = builder.compiler(stage, host);\n-        // We need the stdlib for the *next* stage, as it was built with this compiler that also built Miri.\n-        // Except if we are at stage 2, the bootstrap loop is complete and we can stick with our current stage.\n-        let compiler_std = builder.compiler(if stage < 2 { stage + 1 } else { stage }, host);\n-\n-        let miri = builder\n-            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })\n-            .expect(\"in-tree tool\");\n-        let _cargo_miri = builder\n-            .ensure(tool::CargoMiri { compiler, target: self.host, extra_features: Vec::new() })\n-            .expect(\"in-tree tool\");\n-        // The stdlib we need might be at a different stage. And just asking for the\n-        // sysroot does not seem to populate it, so we do that first.\n-        builder.ensure(compile::Std::new(compiler_std, host));\n-        let sysroot = builder.sysroot(compiler_std);\n-\n-        // # Run `cargo miri setup` for the given target.\n+impl Miri {\n+    /// Run `cargo miri setup` for the given target, return where the Miri sysroot was put.\n+    pub fn build_miri_sysroot(\n+        builder: &Builder<'_>,\n+        compiler: Compiler,\n+        miri: &Path,\n+        target: TargetSelection,\n+    ) -> String {\n+        let miri_sysroot = builder.out.join(compiler.host.triple).join(\"miri-sysrot\");\n         let mut cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolRustc,\n-            host,\n+            compiler.host,\n             \"run\",\n             \"src/tools/miri/cargo-miri\",\n             SourceType::InTree,\n@@ -521,6 +492,8 @@ impl Step for Miri {\n         cargo.env(\"MIRI_LIB_SRC\", builder.src.join(\"library\"));\n         // Tell it where to find Miri.\n         cargo.env(\"MIRI\", &miri);\n+        // Tell it where to put the sysroot.\n+        cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n         // Debug things.\n         cargo.env(\"RUST_BACKTRACE\", \"1\");\n \n@@ -535,7 +508,7 @@ impl Step for Miri {\n         cargo.arg(\"--print-sysroot\");\n \n         // FIXME: Is there a way in which we can re-use the usual `run` helpers?\n-        let miri_sysroot = if builder.config.dry_run {\n+        if builder.config.dry_run {\n             String::new()\n         } else {\n             builder.verbose(&format!(\"running: {:?}\", cargo));\n@@ -548,7 +521,48 @@ impl Step for Miri {\n             let sysroot = stdout.trim_end();\n             builder.verbose(&format!(\"`cargo miri setup --print-sysroot` said: {:?}\", sysroot));\n             sysroot.to_owned()\n-        };\n+        }\n+    }\n+}\n+\n+impl Step for Miri {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/miri\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Miri {\n+            stage: run.builder.top_stage,\n+            host: run.build_triple(),\n+            target: run.target,\n+        });\n+    }\n+\n+    /// Runs `cargo test` for miri.\n+    fn run(self, builder: &Builder<'_>) {\n+        let stage = self.stage;\n+        let host = self.host;\n+        let target = self.target;\n+        let compiler = builder.compiler(stage, host);\n+        // We need the stdlib for the *next* stage, as it was built with this compiler that also built Miri.\n+        // Except if we are at stage 2, the bootstrap loop is complete and we can stick with our current stage.\n+        let compiler_std = builder.compiler(if stage < 2 { stage + 1 } else { stage }, host);\n+\n+        let miri = builder\n+            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let _cargo_miri = builder\n+            .ensure(tool::CargoMiri { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        // The stdlib we need might be at a different stage. And just asking for the\n+        // sysroot does not seem to populate it, so we do that first.\n+        builder.ensure(compile::Std::new(compiler_std, host));\n+        let sysroot = builder.sysroot(compiler_std);\n+        // We also need a Miri sysroot.\n+        let miri_sysroot = Miri::build_miri_sysroot(builder, compiler, &miri, target);\n \n         // # Run `cargo test`.\n         let mut cargo = tool::prepare_tool_cargo(\n@@ -566,7 +580,6 @@ impl Step for Miri {\n         // miri tests need to know about the stage sysroot\n         cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n         cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n-        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n         cargo.env(\"MIRI\", &miri);\n         // propagate --bless\n         if builder.config.cmd.bless() {\n@@ -607,7 +620,6 @@ impl Step for Miri {\n         // Tell `cargo miri` where to find things.\n         cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n         cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n-        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n         cargo.env(\"MIRI\", &miri);\n         // Debug things.\n         cargo.env(\"RUST_BACKTRACE\", \"1\");"}, {"sha": "f5a20d592d06d991db5eb23f66535fdcfd08bd95", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=7124590dcc96e1646d529447be878f99b3dbe63c", "patch": "@@ -433,8 +433,10 @@ Moreover, Miri recognizes some environment variables:\n   trigger a re-build of the standard library; you have to clear the Miri build\n   cache manually (on Linux, `rm -rf ~/.cache/miri`).\n * `MIRI_SYSROOT` (recognized by `cargo miri` and the Miri driver) indicates the sysroot to use. When\n-  using `cargo miri`, only set this if you do not want to use the automatically created sysroot. For\n-  directly invoking the Miri driver, this variable (or a `--sysroot` flag) is mandatory.\n+  using `cargo miri`, this skips the automatic setup -- only set this if you do not want to use the\n+  automatically created sysroot. For directly invoking the Miri driver, this variable (or a\n+  `--sysroot` flag) is mandatory. When invoking `cargo miri setup`, this indicates where the sysroot\n+  will be put.\n * `MIRI_TEST_TARGET` (recognized by the test suite and the `./miri` script) indicates which target\n   architecture to test against.  `miri` and `cargo miri` accept the `--target` flag for the same\n   purpose."}, {"sha": "f3841a6140839cfaae10242bbbf3f0bf9259e40c", "filename": "src/tools/miri/cargo-miri/src/setup.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7124590dcc96e1646d529447be878f99b3dbe63c/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs?ref=7124590dcc96e1646d529447be878f99b3dbe63c", "patch": "@@ -17,10 +17,8 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n     let only_setup = matches!(subcommand, MiriCommand::Setup);\n     let ask_user = !only_setup;\n     let print_sysroot = only_setup && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n-    if std::env::var_os(\"MIRI_SYSROOT\").is_some() {\n-        if only_setup {\n-            println!(\"WARNING: MIRI_SYSROOT already set, not doing anything.\")\n-        }\n+    if !only_setup && std::env::var_os(\"MIRI_SYSROOT\").is_some() {\n+        // Skip setup step if MIRI_SYSROOT is explicitly set, *unless* we are `cargo miri setup`.\n         return;\n     }\n \n@@ -61,8 +59,13 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n     }\n \n     // Determine where to put the sysroot.\n-    let user_dirs = directories::ProjectDirs::from(\"org\", \"rust-lang\", \"miri\").unwrap();\n-    let sysroot_dir = user_dirs.cache_dir();\n+    let sysroot_dir = match std::env::var_os(\"MIRI_SYSROOT\") {\n+        Some(dir) => PathBuf::from(dir),\n+        None => {\n+            let user_dirs = directories::ProjectDirs::from(\"org\", \"rust-lang\", \"miri\").unwrap();\n+            user_dirs.cache_dir().to_owned()\n+        }\n+    };\n     // Sysroot configuration and build details.\n     let sysroot_config = if std::env::var_os(\"MIRI_NO_STD\").is_some() {\n         SysrootConfig::NoStd\n@@ -111,7 +114,7 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n         (command, rustflags)\n     };\n     // Make sure all target-level Miri invocations know their sysroot.\n-    std::env::set_var(\"MIRI_SYSROOT\", sysroot_dir);\n+    std::env::set_var(\"MIRI_SYSROOT\", &sysroot_dir);\n \n     // Do the build.\n     if only_setup {\n@@ -121,7 +124,7 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n         // We want to be quiet, but still let the user know that something is happening.\n         eprint!(\"Preparing a sysroot for Miri (target: {target})... \");\n     }\n-    Sysroot::new(sysroot_dir, target)\n+    Sysroot::new(&sysroot_dir, target)\n         .build_from_source(&rust_src, BuildMode::Check, sysroot_config, rustc_version, cargo_cmd)\n         .unwrap_or_else(|_| {\n             if only_setup {"}]}