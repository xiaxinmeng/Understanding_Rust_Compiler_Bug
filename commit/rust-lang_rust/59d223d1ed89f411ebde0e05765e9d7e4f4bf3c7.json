{"sha": "59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7", "node_id": "C_kwDOAAsO6NoAKDU5ZDIyM2QxZWQ4OWY0MTFlYmRlMGUwNTc2NWU5ZDdlNGY0YmYzYzc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T00:19:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:12:07Z"}, "message": "slightly cleaner, if more verbose, vtable handling in codegen backends", "tree": {"sha": "df8766dc36a50449a670a9fb7389b10fbd8f938e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8766dc36a50449a670a9fb7389b10fbd8f938e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7", "html_url": "https://github.com/rust-lang/rust/commit/59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f24eb870df0435be021091adbb9b17913f58ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f24eb870df0435be021091adbb9b17913f58ba8", "html_url": "https://github.com/rust-lang/rust/commit/3f24eb870df0435be021091adbb9b17913f58ba8"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "ccb6cbbc2c8a74bb98ab5a977c8698dea5b7c769", "filename": "src/common.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=59d223d1ed89f411ebde0e05765e9d7e4f4bf3c7", "patch": "@@ -183,13 +183,6 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts();\n-                // For vtables, get the underlying data allocation.\n-                let alloc_id = match self.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::VTable(ty, trait_ref) => {\n-                        self.tcx.vtable_allocation((ty, trait_ref))\n-                    }\n-                    _ => alloc_id,\n-                };\n                 let base_addr =\n                     match self.tcx.global_alloc(alloc_id) {\n                         GlobalAlloc::Memory(alloc) => {\n@@ -208,7 +201,11 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                         GlobalAlloc::Function(fn_instance) => {\n                             self.get_fn_addr(fn_instance)\n                         },\n-                        GlobalAlloc::VTable(..) => panic!(\"vtables are already handled\"),\n+                        GlobalAlloc::VTable(ty, trait_ref) => {\n+                            let alloc = self.tcx.global_alloc(self.tcx.vtable_allocation((ty, trait_ref))).unwrap_memory();\n+                            let init = const_alloc_to_gcc(self, alloc);\n+                            self.static_addr_of(init, alloc.inner().align, None)\n+                        }\n                         GlobalAlloc::Static(def_id) => {\n                             assert!(self.tcx.is_static(def_id));\n                             self.get_static(def_id).get_address(None)"}]}