{"sha": "752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "node_id": "C_kwDOAAsO6NoAKDc1MmRkZDAyOGM4NzdjMjAzMzk0MGQwZGNkNGUzZGNiZjU2OWFlOWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-26T10:29:25Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-26T10:29:25Z"}, "message": "Merge the two diagnostics.", "tree": {"sha": "5fc07704f10ddb5618cddd0231592870896d3a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fc07704f10ddb5618cddd0231592870896d3a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "html_url": "https://github.com/rust-lang/rust/commit/752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11fbb573951d61b7de9b773750c206253a5db974", "url": "https://api.github.com/repos/rust-lang/rust/commits/11fbb573951d61b7de9b773750c206253a5db974", "html_url": "https://github.com/rust-lang/rust/commit/11fbb573951d61b7de9b773750c206253a5db974"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "3fa78efc290ba2406cd46cd7723e2dbf2460fd1c", "filename": "compiler/rustc_passes/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl?ref=752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "patch": "@@ -402,9 +402,6 @@ passes_invalid_attr_at_crate_level =\n     `{$name}` attribute cannot be used at crate level\n     .suggestion = perhaps you meant to use an outer attribute\n \n-passes_duplicate_diagnostic_item =\n-    duplicate diagnostic item found: `{$name}`.\n-\n passes_duplicate_diagnostic_item_in_crate =\n     duplicate diagnostic item in crate `{$crate_name}`: `{$name}`.\n     .note = the diagnostic item is first defined in crate `{$orig_crate_name}`."}, {"sha": "110eb210df9ad71b0184fd8ac53fafcc145a03a8", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "patch": "@@ -15,9 +15,9 @@ use rustc_hir::OwnerId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc_span::symbol::{kw::Empty, sym, Symbol};\n+use rustc_span::symbol::{sym, Symbol};\n \n-use crate::errors::{DuplicateDiagnosticItem, DuplicateDiagnosticItemInCrate};\n+use crate::errors::DuplicateDiagnosticItemInCrate;\n \n fn observe_item<'tcx>(tcx: TyCtxt<'tcx>, diagnostic_items: &mut DiagnosticItems, owner: OwnerId) {\n     let attrs = tcx.hir().attrs(owner.into());\n@@ -42,20 +42,16 @@ fn report_duplicate_item(\n     original_def_id: DefId,\n     item_def_id: DefId,\n ) {\n-    let (orig_span, orig_crate_name, have_orig_crate_name) = match original_def_id.as_local() {\n-        Some(local_original) => (Some(tcx.def_span(local_original)), Empty, None),\n-        None => (None, tcx.crate_name(original_def_id.krate), Some(())),\n-    };\n-    match tcx.hir().span_if_local(item_def_id) {\n-        Some(span) => tcx.sess.emit_err(DuplicateDiagnosticItem { span, name }),\n-        None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n-            span: orig_span,\n-            orig_crate_name,\n-            have_orig_crate_name,\n-            crate_name: tcx.crate_name(item_def_id.krate),\n-            name,\n-        }),\n-    };\n+    let orig_span = tcx.hir().span_if_local(original_def_id);\n+    let duplicate_span = tcx.hir().span_if_local(item_def_id);\n+    tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n+        duplicate_span,\n+        orig_span,\n+        crate_name: tcx.crate_name(item_def_id.krate),\n+        orig_crate_name: tcx.crate_name(original_def_id.krate),\n+        different_crates: (item_def_id.krate != original_def_id.krate).then_some(()),\n+        name,\n+    });\n }\n \n /// Extract the first `rustc_diagnostic_item = \"$name\"` out of a list of attributes."}, {"sha": "9f1c0b5a0b7bdf960802be254be100bacdcd8e4e", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "patch": "@@ -809,23 +809,17 @@ impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n     }\n }\n \n-#[derive(Diagnostic)]\n-#[diag(passes_duplicate_diagnostic_item)]\n-pub struct DuplicateDiagnosticItem {\n-    #[primary_span]\n-    pub span: Span,\n-    pub name: Symbol,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(passes_duplicate_diagnostic_item_in_crate)]\n pub struct DuplicateDiagnosticItemInCrate {\n+    #[primary_span]\n+    pub duplicate_span: Option<Span>,\n     #[note(passes_diagnostic_item_first_defined)]\n-    pub span: Option<Span>,\n-    pub orig_crate_name: Symbol,\n+    pub orig_span: Option<Span>,\n     #[note]\n-    pub have_orig_crate_name: Option<()>,\n+    pub different_crates: Option<()>,\n     pub crate_name: Symbol,\n+    pub orig_crate_name: Symbol,\n     pub name: Symbol,\n }\n "}, {"sha": "e2cf9508757be7545ed92e75cf8ac602ceb9589d", "filename": "tests/ui/tool-attributes/duplicate-diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs?ref=752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "patch": "@@ -9,5 +9,5 @@ extern crate p1;\n extern crate p2;\n \n #[rustc_diagnostic_item = \"Foo\"]\n-pub struct Foo {} //~ ERROR duplicate diagnostic item found\n+pub struct Foo {} //~ ERROR duplicate diagnostic item in crate `duplicate_diagnostic`: `Foo`\n fn main() {}"}, {"sha": "26bd6a82e341722980cbc7870614ca8ae4232382", "filename": "tests/ui/tool-attributes/duplicate-diagnostic.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/752ddd028c877c2033940d0dcd4e3dcbf569ae9d/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr?ref=752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "patch": "@@ -2,11 +2,13 @@ error: duplicate diagnostic item in crate `p2`: `Foo`.\n    |\n    = note: the diagnostic item is first defined in crate `p1`.\n \n-error: duplicate diagnostic item found: `Foo`.\n+error: duplicate diagnostic item in crate `duplicate_diagnostic`: `Foo`.\n   --> $DIR/duplicate-diagnostic.rs:12:1\n    |\n LL | pub struct Foo {}\n    | ^^^^^^^^^^^^^^\n+   |\n+   = note: the diagnostic item is first defined in crate `p2`.\n \n error: aborting due to 2 previous errors\n "}]}