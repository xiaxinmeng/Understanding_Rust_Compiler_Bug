{"sha": "a9f529cba4f30567d1ae96110dae235dc7a21348", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjUyOWNiYTRmMzA1NjdkMWFlOTYxMTBkYWUyMzVkYzdhMjEzNDg=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-03T13:50:44Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-04T10:35:29Z"}, "message": "Format source codes", "tree": {"sha": "6ad7bec644adc7c0ccac66e8ae1c64596906d79f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad7bec644adc7c0ccac66e8ae1c64596906d79f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f529cba4f30567d1ae96110dae235dc7a21348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f529cba4f30567d1ae96110dae235dc7a21348", "html_url": "https://github.com/rust-lang/rust/commit/a9f529cba4f30567d1ae96110dae235dc7a21348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f529cba4f30567d1ae96110dae235dc7a21348/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a0094f28f114333e1a1fe105c4dd57f3c838a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0094f28f114333e1a1fe105c4dd57f3c838a7b", "html_url": "https://github.com/rust-lang/rust/commit/4a0094f28f114333e1a1fe105c4dd57f3c838a7b"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "aa3ae8537af76e5b0e6c17c43bcb7ae6d68335f0", "filename": "src/filemap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=a9f529cba4f30567d1ae96110dae235dc7a21348", "patch": "@@ -143,8 +143,9 @@ pub fn write_file<T>(text: &StringBuffer,\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 let mismatch = make_diff(&ori, &fmt, 3);\n                 let has_diff = !mismatch.is_empty();\n-                print_diff(mismatch,\n-                           |line_num| format!(\"Diff in {} at line {}:\", filename, line_num));\n+                print_diff(mismatch, |line_num| {\n+                    format!(\"Diff in {} at line {}:\", filename, line_num)\n+                });\n                 return Ok(has_diff);\n             }\n         }"}, {"sha": "3406b331c4d8cda3d3f7bc81e595e18733bf5e3e", "filename": "src/items.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a9f529cba4f30567d1ae96110dae235dc7a21348", "patch": "@@ -1162,20 +1162,20 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n     let type_indent = indent + line_width;\n     // Try to fit the type on the same line\n     let ty_str = try_opt!(ty.rewrite(context, Shape::legacy(budget, type_indent))\n-                              .or_else(|| {\n-        // The line was too short, try to put the type on the next line\n+        .or_else(|| {\n+            // The line was too short, try to put the type on the next line\n \n-        // Remove the space after '='\n-        result.pop();\n-        let type_indent = indent.block_indent(context.config);\n-        result.push('\\n');\n-        result.push_str(&type_indent.to_string(context.config));\n-        let budget = try_opt!(context\n-                                  .config\n-                                  .max_width()\n-                                  .checked_sub(type_indent.width() + \";\".len()));\n-        ty.rewrite(context, Shape::legacy(budget, type_indent))\n-    }));\n+            // Remove the space after '='\n+            result.pop();\n+            let type_indent = indent.block_indent(context.config);\n+            result.push('\\n');\n+            result.push_str(&type_indent.to_string(context.config));\n+            let budget = try_opt!(context\n+                                      .config\n+                                      .max_width()\n+                                      .checked_sub(type_indent.width() + \";\".len()));\n+            ty.rewrite(context, Shape::legacy(budget, type_indent))\n+        }));\n     result.push_str(&ty_str);\n     result.push_str(\";\");\n     Some(result)"}, {"sha": "1635553eccd9ad590d3eb956e26e9dca607a94b1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a9f529cba4f30567d1ae96110dae235dc7a21348", "patch": "@@ -626,7 +626,7 @@ pub fn format_input<T: Write>(input: Input,\n                 return filemap::write_file(file, file_name, out, config);\n             }\n             Ok(false)\n-        }\n+        },\n     ) {\n         Ok((file_map, has_diff)) => {\n             if report.has_warnings() {"}, {"sha": "f99e236ac88e4c1a70e867310032ffbcb3f01956", "filename": "src/macros.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=a9f529cba4f30567d1ae96110dae235dc7a21348", "patch": "@@ -172,12 +172,12 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         MacroStyle::Parens => {\n             // Format macro invocation as function call, forcing no trailing\n             // comma because not all macros support them.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(|rw| {\n-                match position {\n+            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(\n+                |rw| match position {\n                     MacroPosition::Item => format!(\"{};\", rw),\n                     _ => rw,\n-                }\n-            })\n+                },\n+            )\n         }\n         MacroStyle::Brackets => {\n             let mac_shape = try_opt!(shape.shrink_left(macro_name.len()));\n@@ -199,17 +199,13 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             } else {\n                 // Format macro invocation as array literal.\n                 let rewrite =\n-                    try_opt!(rewrite_array(\n-                    expr_vec.iter().map(|x| &**x),\n-                    mk_sp(\n-                        context\n-                            .codemap\n-                            .span_after(mac.span, original_style.opener()),\n-                        mac.span.hi - BytePos(1),\n-                    ),\n-                    context,\n-                    mac_shape,\n-                ));\n+                    try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n+                                           mk_sp(context\n+                                                     .codemap\n+                                                     .span_after(mac.span, original_style.opener()),\n+                                               mac.span.hi - BytePos(1)),\n+                                           context,\n+                                           mac_shape));\n \n                 Some(format!(\"{}{}\", macro_name, rewrite))\n             }"}, {"sha": "57ebc332ac485a4ece626cd08502d37dc5828a67", "filename": "src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=a9f529cba4f30567d1ae96110dae235dc7a21348", "patch": "@@ -22,8 +22,9 @@ impl<'a> FmtVisitor<'a> {\n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n     // for the central whitespace stripping loop.\n     pub fn format_missing(&mut self, end: BytePos) {\n-        self.format_missing_inner(end,\n-                                  |this, last_snippet, _| this.buffer.push_str(last_snippet))\n+        self.format_missing_inner(end, |this, last_snippet, _| {\n+            this.buffer.push_str(last_snippet)\n+        })\n     }\n \n     pub fn format_missing_with_indent(&mut self, end: BytePos) {"}, {"sha": "9ddfe8d6efeecd16644324d09275100048d414a7", "filename": "src/types.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f529cba4f30567d1ae96110dae235dc7a21348/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=a9f529cba4f30567d1ae96110dae235dc7a21348", "patch": "@@ -377,11 +377,12 @@ impl Rewrite for ast::WherePredicate {\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n                     let bounds_str: String = try_opt!(bounds\n-                                                          .iter()\n-                                                          .map(|ty_bound| {\n-                        ty_bound.rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n-                    })\n-                                                          .collect::<Option<Vec<_>>>())\n+                        .iter()\n+                        .map(|ty_bound| {\n+                            ty_bound\n+                                .rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n+                        })\n+                        .collect::<Option<Vec<_>>>())\n                         .join(joiner);\n \n                     if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n@@ -401,11 +402,12 @@ impl Rewrite for ast::WherePredicate {\n                     let used_width = type_str.len() + colon.len();\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n                     let bounds_str: String = try_opt!(bounds\n-                                                          .iter()\n-                                                          .map(|ty_bound| {\n-                        ty_bound.rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n-                    })\n-                                                          .collect::<Option<Vec<_>>>())\n+                        .iter()\n+                        .map(|ty_bound| {\n+                            ty_bound\n+                                .rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n+                        })\n+                        .collect::<Option<Vec<_>>>())\n                         .join(joiner);\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n@@ -700,14 +702,14 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n         // This doesn't work out so nicely for mutliline situation with lots of\n         // rightward drift. If that is a problem, we could use the list stuff.\n         result.push_str(&try_opt!(bare_fn\n-                                      .lifetimes\n-                                      .iter()\n-                                      .map(|l| {\n-            l.rewrite(context,\n-                      Shape::legacy(try_opt!(shape.width.checked_sub(6)), shape.indent + 4))\n-        })\n-                                      .collect::<Option<Vec<_>>>())\n-                            .join(\", \"));\n+            .lifetimes\n+            .iter()\n+            .map(|l| {\n+                l.rewrite(context,\n+                          Shape::legacy(try_opt!(shape.width.checked_sub(6)), shape.indent + 4))\n+            })\n+            .collect::<Option<Vec<_>>>())\n+            .join(\", \"));\n         result.push_str(\"> \");\n     }\n "}]}