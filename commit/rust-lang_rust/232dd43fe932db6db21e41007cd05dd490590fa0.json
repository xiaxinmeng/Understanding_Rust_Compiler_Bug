{"sha": "232dd43fe932db6db21e41007cd05dd490590fa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMmRkNDNmZTkzMmRiNmRiMjFlNDEwMDdjZDA1ZGQ0OTA1OTBmYTA=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-03T04:26:49Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-03T04:26:49Z"}, "message": "Fix occurrences of `too_many_lines` violations", "tree": {"sha": "786a7c418d67c3c4d3897014a35d051f75394962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/786a7c418d67c3c4d3897014a35d051f75394962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232dd43fe932db6db21e41007cd05dd490590fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232dd43fe932db6db21e41007cd05dd490590fa0", "html_url": "https://github.com/rust-lang/rust/commit/232dd43fe932db6db21e41007cd05dd490590fa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232dd43fe932db6db21e41007cd05dd490590fa0/comments", "author": null, "committer": null, "parents": [{"sha": "0ae1a69330788c8a34228888909a4977d2fb7b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae1a69330788c8a34228888909a4977d2fb7b17", "html_url": "https://github.com/rust-lang/rust/commit/0ae1a69330788c8a34228888909a4977d2fb7b17"}], "stats": {"total": 304, "additions": 164, "deletions": 140}, "files": [{"sha": "7b6b6cbc8f835f6d112a18ebc03503638554b50a", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 73, "deletions": 66, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/232dd43fe932db6db21e41007cd05dd490590fa0/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232dd43fe932db6db21e41007cd05dd490590fa0/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=232dd43fe932db6db21e41007cd05dd490590fa0", "patch": "@@ -151,75 +151,82 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n             }\n         }\n \n-        // exclusive range plus one: `x..(y+1)`\n-        if_chain! {\n-            if let Some(higher::Range {\n-                start,\n-                end: Some(end),\n-                limits: RangeLimits::HalfOpen\n-            }) = higher::range(cx, expr);\n-            if let Some(y) = y_plus_one(end);\n-            then {\n-                let span = if expr.span.from_expansion() {\n-                    expr.span\n-                        .ctxt()\n-                        .outer_expn_data()\n-                        .call_site\n-                } else {\n-                    expr.span\n-                };\n-                span_lint_and_then(\n-                    cx,\n-                    RANGE_PLUS_ONE,\n-                    span,\n-                    \"an inclusive range would be more readable\",\n-                    |db| {\n-                        let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n-                        let end = Sugg::hir(cx, y, \"y\");\n-                        if let Some(is_wrapped) = &snippet_opt(cx, span) {\n-                            if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n-                                db.span_suggestion(\n-                                    span,\n-                                    \"use\",\n-                                    format!(\"({}..={})\", start, end),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                db.span_suggestion(\n-                                    span,\n-                                    \"use\",\n-                                    format!(\"{}..={}\", start, end),\n-                                    Applicability::MachineApplicable, // snippet\n-                                );\n-                            }\n+        check_exclusive_range_plus_one(cx, expr);\n+        check_inclusive_range_minus_one(cx, expr);\n+    }\n+}\n+\n+// exclusive range plus one: `x..(y+1)`\n+fn check_exclusive_range_plus_one(cx: &LateContext<'_, '_>, expr: &Expr) {\n+    if_chain! {\n+        if let Some(higher::Range {\n+            start,\n+            end: Some(end),\n+            limits: RangeLimits::HalfOpen\n+        }) = higher::range(cx, expr);\n+        if let Some(y) = y_plus_one(end);\n+        then {\n+            let span = if expr.span.from_expansion() {\n+                expr.span\n+                    .ctxt()\n+                    .outer_expn_data()\n+                    .call_site\n+            } else {\n+                expr.span\n+            };\n+            span_lint_and_then(\n+                cx,\n+                RANGE_PLUS_ONE,\n+                span,\n+                \"an inclusive range would be more readable\",\n+                |db| {\n+                    let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n+                    let end = Sugg::hir(cx, y, \"y\");\n+                    if let Some(is_wrapped) = &snippet_opt(cx, span) {\n+                        if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n+                            db.span_suggestion(\n+                                span,\n+                                \"use\",\n+                                format!(\"({}..={})\", start, end),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            db.span_suggestion(\n+                                span,\n+                                \"use\",\n+                                format!(\"{}..={}\", start, end),\n+                                Applicability::MachineApplicable, // snippet\n+                            );\n                         }\n-                    },\n-                );\n-            }\n+                    }\n+                },\n+            );\n         }\n+    }\n+}\n \n-        // inclusive range minus one: `x..=(y-1)`\n-        if_chain! {\n-            if let Some(higher::Range { start, end: Some(end), limits: RangeLimits::Closed }) = higher::range(cx, expr);\n-            if let Some(y) = y_minus_one(end);\n-            then {\n-                span_lint_and_then(\n-                    cx,\n-                    RANGE_MINUS_ONE,\n-                    expr.span,\n-                    \"an exclusive range would be more readable\",\n-                    |db| {\n-                        let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n-                        let end = Sugg::hir(cx, y, \"y\");\n-                        db.span_suggestion(\n-                            expr.span,\n-                            \"use\",\n-                            format!(\"{}..{}\", start, end),\n-                            Applicability::MachineApplicable, // snippet\n-                        );\n-                    },\n-                );\n-            }\n+// inclusive range minus one: `x..=(y-1)`\n+fn check_inclusive_range_minus_one(cx: &LateContext<'_, '_>, expr: &Expr) {\n+    if_chain! {\n+        if let Some(higher::Range { start, end: Some(end), limits: RangeLimits::Closed }) = higher::range(cx, expr);\n+        if let Some(y) = y_minus_one(end);\n+        then {\n+            span_lint_and_then(\n+                cx,\n+                RANGE_MINUS_ONE,\n+                expr.span,\n+                \"an exclusive range would be more readable\",\n+                |db| {\n+                    let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n+                    let end = Sugg::hir(cx, y, \"y\");\n+                    db.span_suggestion(\n+                        expr.span,\n+                        \"use\",\n+                        format!(\"{}..{}\", start, end),\n+                        Applicability::MachineApplicable, // snippet\n+                    );\n+                },\n+            );\n         }\n     }\n }"}, {"sha": "3c2111c55fb56e9bc9c05be6a8722bac07f7c4fd", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 88, "deletions": 74, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/232dd43fe932db6db21e41007cd05dd490590fa0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232dd43fe932db6db21e41007cd05dd490590fa0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=232dd43fe932db6db21e41007cd05dd490590fa0", "patch": "@@ -1159,83 +1159,97 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n                 }\n             }\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n-                match (cast_from.is_integral(), cast_to.is_integral()) {\n-                    (true, false) => {\n-                        let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n-                        let to_nbits = if let ty::Float(FloatTy::F32) = cast_to.sty {\n-                            32\n-                        } else {\n-                            64\n-                        };\n-                        if is_isize_or_usize(cast_from) || from_nbits >= to_nbits {\n-                            span_precision_loss_lint(cx, expr, cast_from, to_nbits == 64);\n-                        }\n-                        if from_nbits < to_nbits {\n-                            span_lossless_lint(cx, expr, ex, cast_from, cast_to);\n-                        }\n-                    },\n-                    (false, true) => {\n-                        span_lint(\n-                            cx,\n-                            CAST_POSSIBLE_TRUNCATION,\n-                            expr.span,\n-                            &format!(\"casting {} to {} may truncate the value\", cast_from, cast_to),\n-                        );\n-                        if !cast_to.is_signed() {\n-                            span_lint(\n-                                cx,\n-                                CAST_SIGN_LOSS,\n-                                expr.span,\n-                                &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n-                            );\n-                        }\n-                    },\n-                    (true, true) => {\n-                        check_loss_of_sign(cx, expr, ex, cast_from, cast_to);\n-                        check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n-                        check_lossless(cx, expr, ex, cast_from, cast_to);\n-                    },\n-                    (false, false) => {\n-                        if let (&ty::Float(FloatTy::F64), &ty::Float(FloatTy::F32)) = (&cast_from.sty, &cast_to.sty) {\n-                            span_lint(\n-                                cx,\n-                                CAST_POSSIBLE_TRUNCATION,\n-                                expr.span,\n-                                \"casting f64 to f32 may truncate the value\",\n-                            );\n-                        }\n-                        if let (&ty::Float(FloatTy::F32), &ty::Float(FloatTy::F64)) = (&cast_from.sty, &cast_to.sty) {\n-                            span_lossless_lint(cx, expr, ex, cast_from, cast_to);\n-                        }\n-                    },\n-                }\n+                lint_numeric_casts(cx, expr, ex, cast_from, cast_to);\n             }\n \n-            if_chain! {\n-                if let ty::RawPtr(from_ptr_ty) = &cast_from.sty;\n-                if let ty::RawPtr(to_ptr_ty) = &cast_to.sty;\n-                if let Ok(from_layout) = cx.layout_of(from_ptr_ty.ty);\n-                if let Ok(to_layout) = cx.layout_of(to_ptr_ty.ty);\n-                if from_layout.align.abi < to_layout.align.abi;\n-                // with c_void, we inherently need to trust the user\n-                if !is_c_void(cx, from_ptr_ty.ty);\n-                // when casting from a ZST, we don't know enough to properly lint\n-                if !from_layout.is_zst();\n-                then {\n-                    span_lint(\n-                        cx,\n-                        CAST_PTR_ALIGNMENT,\n-                        expr.span,\n-                        &format!(\n-                            \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n-                            cast_from,\n-                            cast_to,\n-                            from_layout.align.abi.bytes(),\n-                            to_layout.align.abi.bytes(),\n-                        ),\n-                    );\n-                }\n+            lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n+        }\n+    }\n+}\n+\n+fn lint_numeric_casts<'tcx>(\n+    cx: &LateContext<'_, 'tcx>,\n+    expr: &Expr,\n+    cast_expr: &Expr,\n+    cast_from: Ty<'tcx>,\n+    cast_to: Ty<'tcx>,\n+) {\n+    match (cast_from.is_integral(), cast_to.is_integral()) {\n+        (true, false) => {\n+            let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n+            let to_nbits = if let ty::Float(FloatTy::F32) = cast_to.sty {\n+                32\n+            } else {\n+                64\n+            };\n+            if is_isize_or_usize(cast_from) || from_nbits >= to_nbits {\n+                span_precision_loss_lint(cx, expr, cast_from, to_nbits == 64);\n             }\n+            if from_nbits < to_nbits {\n+                span_lossless_lint(cx, expr, cast_expr, cast_from, cast_to);\n+            }\n+        },\n+        (false, true) => {\n+            span_lint(\n+                cx,\n+                CAST_POSSIBLE_TRUNCATION,\n+                expr.span,\n+                &format!(\"casting {} to {} may truncate the value\", cast_from, cast_to),\n+            );\n+            if !cast_to.is_signed() {\n+                span_lint(\n+                    cx,\n+                    CAST_SIGN_LOSS,\n+                    expr.span,\n+                    &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n+                );\n+            }\n+        },\n+        (true, true) => {\n+            check_loss_of_sign(cx, expr, cast_expr, cast_from, cast_to);\n+            check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n+            check_lossless(cx, expr, cast_expr, cast_from, cast_to);\n+        },\n+        (false, false) => {\n+            if let (&ty::Float(FloatTy::F64), &ty::Float(FloatTy::F32)) = (&cast_from.sty, &cast_to.sty) {\n+                span_lint(\n+                    cx,\n+                    CAST_POSSIBLE_TRUNCATION,\n+                    expr.span,\n+                    \"casting f64 to f32 may truncate the value\",\n+                );\n+            }\n+            if let (&ty::Float(FloatTy::F32), &ty::Float(FloatTy::F64)) = (&cast_from.sty, &cast_to.sty) {\n+                span_lossless_lint(cx, expr, cast_expr, cast_from, cast_to);\n+            }\n+        },\n+    }\n+}\n+\n+fn lint_cast_ptr_alignment<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr, cast_from: Ty<'tcx>, cast_to: Ty<'tcx>) {\n+    if_chain! {\n+        if let ty::RawPtr(from_ptr_ty) = &cast_from.sty;\n+        if let ty::RawPtr(to_ptr_ty) = &cast_to.sty;\n+        if let Ok(from_layout) = cx.layout_of(from_ptr_ty.ty);\n+        if let Ok(to_layout) = cx.layout_of(to_ptr_ty.ty);\n+        if from_layout.align.abi < to_layout.align.abi;\n+        // with c_void, we inherently need to trust the user\n+        if !is_c_void(cx, from_ptr_ty.ty);\n+        // when casting from a ZST, we don't know enough to properly lint\n+        if !from_layout.is_zst();\n+        then {\n+            span_lint(\n+                cx,\n+                CAST_PTR_ALIGNMENT,\n+                expr.span,\n+                &format!(\n+                    \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n+                    cast_from,\n+                    cast_to,\n+                    from_layout.align.abi.bytes(),\n+                    to_layout.align.abi.bytes(),\n+                ),\n+            );\n         }\n     }\n }"}, {"sha": "ba0e56c9987a5fa68dec47ac6b05ab63c9e87e65", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/232dd43fe932db6db21e41007cd05dd490590fa0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232dd43fe932db6db21e41007cd05dd490590fa0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=232dd43fe932db6db21e41007cd05dd490590fa0", "patch": "@@ -144,6 +144,7 @@ fn has_attr(sess: &Session, attrs: &[Attribute]) -> bool {\n }\n \n #[allow(clippy::similar_names)]\n+#[allow(clippy::too_many_lines)]\n fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n     let ind = \"  \".repeat(indent);\n     println!(\"{}+\", ind);\n@@ -396,6 +397,7 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item) {\n }\n \n #[allow(clippy::similar_names)]\n+#[allow(clippy::too_many_lines)]\n fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n     let ind = \"  \".repeat(indent);\n     println!(\"{}+\", ind);"}, {"sha": "7d72a21ac0360cdb22f826d2b0aa2c71418b23a5", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/232dd43fe932db6db21e41007cd05dd490590fa0/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232dd43fe932db6db21e41007cd05dd490590fa0/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=232dd43fe932db6db21e41007cd05dd490590fa0", "patch": "@@ -320,6 +320,7 @@ impl FmtStr {\n /// ```rust,ignore\n /// (Some(\"string to write: {}\"), Some(buf))\n /// ```\n+#[allow(clippy::too_many_lines)]\n fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (Option<FmtStr>, Option<Expr>) {\n     use fmt_macros::*;\n     let tts = tts.clone();"}]}