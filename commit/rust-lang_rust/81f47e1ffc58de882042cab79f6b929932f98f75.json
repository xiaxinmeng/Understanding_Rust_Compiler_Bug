{"sha": "81f47e1ffc58de882042cab79f6b929932f98f75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjQ3ZTFmZmM1OGRlODgyMDQyY2FiNzlmNmI5Mjk5MzJmOThmNzU=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-02T15:25:05Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-03T14:03:25Z"}, "message": "Author lint usage via playground", "tree": {"sha": "7d572e6d8051057c1447d5328787e04106f7284d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d572e6d8051057c1447d5328787e04106f7284d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f47e1ffc58de882042cab79f6b929932f98f75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlx73rMACgkQtvoGpuDi\nZluJpQ/+Nj8Wm4fLebVjbwRxsEsJXS9cqBolXy6YC6ucZKVtw0ZuU/EZPnAheCF1\nQPpOiK5oAL98XEr3TDs7o+wqCTYgcRTNlxoLl1D0hUMlUB4xM2nHDSFbb2bxdkMN\nS4jjF9vq3c9mJIqfIIQSQT36JzU9sCr9ca3kTExR7CA1gWKp+t0/9JO8S/Teipur\nRQsgG8EcTRnW1CXgUl8+KWWHkhuGCXL8sB25jGo7njzZo24ZTWdPVesx/2tPHYAl\nuCqiJVS7Imty7xbDV3cHmRXIeli/6dFKWfbOWnWfj3YpabwYqPvNPvvN/Gg9uYmQ\n98XCWcf71fg5JdCnzpksx0YbkSZIX27cD2KFOleAKVqmDWFe/OZXj12urML/csFj\nH809913b8a5igUBbkyxjImvy+3qRrFldI0TNMwVXpS/IwpUigXsbvAnFqpjUEeix\nmaHVihmdc5h4jfo8bij9vGOPt1YubAJiXqKobYncYzXpupGcajHd8w+tpwcxAq7u\nxLWOQzaLdNClQANk4hlcv1oXwBHXCE1Ekt9bhaFJCpwGKGc1jka64fgjzQhLFPdl\n7oG2vPZ9iJ49EMhvUFkVOBAMZMUmPyvStXHrS2Nu/R4/0O3RUyTQCSDWUqOD4P+5\n59X6kEqhOnVLgt6MivB+eVlZHy8gxE7dl76SYnBqh1HS/7owunw=\n=iWlb\n-----END PGP SIGNATURE-----", "payload": "tree 7d572e6d8051057c1447d5328787e04106f7284d\nparent 680dc8a1055e9ace9548406a2939670733b53dd4\nauthor Philipp Hansch <dev@phansch.net> 1551540305 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1551621805 +0100\n\nAuthor lint usage via playground\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f47e1ffc58de882042cab79f6b929932f98f75", "html_url": "https://github.com/rust-lang/rust/commit/81f47e1ffc58de882042cab79f6b929932f98f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f47e1ffc58de882042cab79f6b929932f98f75/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680dc8a1055e9ace9548406a2939670733b53dd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/680dc8a1055e9ace9548406a2939670733b53dd4", "html_url": "https://github.com/rust-lang/rust/commit/680dc8a1055e9ace9548406a2939670733b53dd4"}], "stats": {"total": 46, "additions": 15, "deletions": 31}, "files": [{"sha": "484e62eb4e98f26057b37a82465cb96268165e54", "filename": "doc/adding_lints.md", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/81f47e1ffc58de882042cab79f6b929932f98f75/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/81f47e1ffc58de882042cab79f6b929932f98f75/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=81f47e1ffc58de882042cab79f6b929932f98f75", "patch": "@@ -14,6 +14,7 @@ because that's clearly a non-descriptive name.\n * [Lint passes](#Lint-passes)\n * [Emitting a lint](#Emitting-a-lint)\n * [Adding the lint logic](#Adding-the-lint-logic)\n+* [Author lint](#Author-lint)\n * [Documentation](#Documentation)\n * [Running rustfmt](#Running-rustfmt)\n * [Debugging](#Debugging)\n@@ -165,7 +166,7 @@ lint pass it should be fine.\n Next you should run `util/dev update_lints` to register the lint in various\n places, mainly in `clippy_lints/src/lib.rs`.\n \n-While `update_lints` automates some things, it doesn't automate everything. We\n+While `update_lints` automates some things, it doesn't automate everything. You\n will have to register our lint pass manually in the `register_plugins` function\n in `clippy_lints/src/lib.rs`:\n \n@@ -179,7 +180,7 @@ pass our lint is going to need.\n \n ### Lint passes\n \n-Writing a lint that just checks for the name of a function means that we just\n+Writing a lint that only checks for the name of a function means that we only\n have to deal with the AST and don't have to deal with the type system at all.\n This is good, because it makes writing this particular lint less complicated.\n \n@@ -204,7 +205,9 @@ use rustc::{declare_tool_lint, lint_array};\n \n ### Emitting a lint\n \n-With UI tests in place, we can start working on the implementation of the lint logic. We can keep executing the tests until we make them pass.\n+With UI tests and the lint declaration in place, we can start working on the\n+implementation of the lint logic. We can keep executing the tests until we make\n+them pass.\n \n Let's start by implementing the `EarlyLintPass` for our `FooFunctionsPass`:\n \n@@ -270,7 +273,7 @@ impl EarlyLintPass for Pass {\n \n We separate the lint conditional from the lint emissions because it makes the\n code a bit easier to read. In some cases this separation would also allow to\n-write some unit tests (as opposed to UI tests) for the separate function.\n+write some unit tests (as opposed to only UI tests) for the separate function.\n \n In our example, `is_foo_fn` looks like:\n \n@@ -294,7 +297,7 @@ running `cargo test` should produce the expected output. Remember to run\n `cargo test` (as opposed to `cargo uitest`) will also ensure that our lint\n implementation is not violating any Clippy lints itself.\n \n-If you are still following the example, you'll see that the `FooFunctionsPass`\n+If you are still following the example, you will see that `FooFunctionsPass`\n violates a Clippy lint. So we are going to rename that struct to just `Pass`:\n \n ```rust\n@@ -313,33 +316,12 @@ If you have trouble implementing your lint, there is also the internal `author`\n lint to generate Clippy code that detects the offending pattern. It does not\n work for all of the Rust syntax, but can give a good starting point.\n \n-First, create a new UI test file in the `tests/ui/` directory with the pattern\n-you want to match:\n+The quickest way to use it, is the [Rust playground][play].rust-lang.org).\n+Put the code you want to lint into the editor and add the `#[clippy::author]`\n+attribute above the item. Then run Clippy via `Tools -> Clippy` and you should\n+see the generated code in the output below.\n \n-```rust\n-// ./tests/ui/my_lint.rs\n-fn main() {\n-    #[clippy::author]\n-    let arr: [i32; 1] = [7]; // Replace line with the code you want to match\n-}\n-```\n-\n-Now you run `TESTNAME=ui/my_lint cargo uitest` to produce a `.stdout` file with\n-the generated code:\n-\n-```rust\n-// ./tests/ui/my_lint.stdout\n-\n-if_chain! {\n-    if let ExprKind::Array(ref elements) = stmt.node;\n-    if elements.len() == 1;\n-    if let ExprKind::Lit(ref lit) = elements[0].node;\n-    if let LitKind::Int(7, _) = lit.node;\n-    then {\n-        // report your lint here\n-    }\n-}\n-```\n+[Here][author_example] is an example on the playground.\n \n If the command was executed successfully, you can copy the code over to where\n you are implementing your lint.\n@@ -448,3 +430,5 @@ don't hesitate to ask on Discord, IRC or in the issue/PR.\n [ast]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/index.html\n [in_macro]: https://github.com/rust-lang/rust-clippy/blob/d0717d1f9531a03d154aaeb0cad94c243915a146/clippy_lints/src/utils/mod.rs#L94\n [in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/fn.in_external_macro.html\n+[play]: https://play.rust-lang.org\n+[author_example]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f093b986e80ad62f3b67a1f24f5e66e2"}]}