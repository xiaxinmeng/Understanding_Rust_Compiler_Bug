{"sha": "7e9948f92f5972e9b87b6f08dab51a7073b8a495", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOTk0OGY5MmY1OTcyZTliODdiNmYwOGRhYjUxYTcwNzNiOGE0OTU=", "commit": {"author": {"name": "Chris Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-14T17:27:55Z"}, "committer": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-15T20:46:01Z"}, "message": "Add proper names to impl Trait parameters.\n\nUses Symbol::intern and hir.node_to_pretty_string to create a name for\nthe impl Trait parameter that is just impl and then a ' + ' separated\nlist of bounds that the user typed.", "tree": {"sha": "006827e4c5d8b7b14b88c64a7bc9ddb2e4854305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/006827e4c5d8b7b14b88c64a7bc9ddb2e4854305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e9948f92f5972e9b87b6f08dab51a7073b8a495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9948f92f5972e9b87b6f08dab51a7073b8a495", "html_url": "https://github.com/rust-lang/rust/commit/7e9948f92f5972e9b87b6f08dab51a7073b8a495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e9948f92f5972e9b87b6f08dab51a7073b8a495/comments", "author": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2786ea662d338f92130f6965cbf38114a49f577c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2786ea662d338f92130f6965cbf38114a49f577c", "html_url": "https://github.com/rust-lang/rust/commit/2786ea662d338f92130f6965cbf38114a49f577c"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "451e870f500ddcad67929e078ad6d50fb9540176", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9948f92f5972e9b87b6f08dab51a7073b8a495/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9948f92f5972e9b87b6f08dab51a7073b8a495/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=7e9948f92f5972e9b87b6f08dab51a7073b8a495", "patch": "@@ -423,7 +423,7 @@ impl<'a> State<'a> {\n             }\n             hir::TyImplTraitExistential(ref bounds) |\n                 hir::TyImplTraitUniversal(_, ref bounds) => {\n-                self.print_bounds(\"impl \", &bounds[..])?;\n+                self.print_bounds(\"impl\", &bounds[..])?;\n             }\n             hir::TyArray(ref ty, v) => {\n                 self.s.word(\"[\")?;"}, {"sha": "7aaf65e1fd07d583e28febabc244132cc064070f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e9948f92f5972e9b87b6f08dab51a7073b8a495/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9948f92f5972e9b87b6f08dab51a7073b8a495/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7e9948f92f5972e9b87b6f08dab51a7073b8a495", "patch": "@@ -30,7 +30,7 @@ use util::nodemap::FxHashSet;\n \n use std::iter;\n use syntax::{abi, ast};\n-use syntax::symbol::keywords;\n+use syntax::symbol::Symbol;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax_pos::Span;\n \n@@ -1042,7 +1042,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let impl_trait_def_id = tcx.hir.local_def_id(ast_ty.id);\n                 let generics = tcx.generics_of(fn_def_id);\n                 let index = generics.type_param_to_index[&impl_trait_def_id.index];\n-                tcx.mk_param(index, keywords::Invalid.name() /* FIXME(chrisvittal) invalid? */)\n+                tcx.mk_param(index,\n+                             Symbol::intern(&tcx.hir.node_to_pretty_string(ast_ty.id)))\n             }\n             hir::TyPath(hir::QPath::Resolved(ref maybe_qself, ref path)) => {\n                 debug!(\"ast_ty_to_ty: maybe_qself={:?} path={:?}\", maybe_qself, path);"}, {"sha": "76afd4e2bd1d88d5eb18a32a5a01a832740fbe28", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9948f92f5972e9b87b6f08dab51a7073b8a495/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9948f92f5972e9b87b6f08dab51a7073b8a495/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7e9948f92f5972e9b87b6f08dab51a7073b8a495", "patch": "@@ -1001,7 +1001,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         .chain(univ_impl_trait_info.iter().enumerate().map(|(i, info)| {\n             ty::TypeParameterDef {\n                 index: other_type_start + i as u32,\n-                name: keywords::Invalid.name() /* FIXME(chrisvittal) maybe make not Invalid */,\n+                name: Symbol::intern(&tcx.hir.node_to_pretty_string(info.id)),\n                 def_id: info.def_id,\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n@@ -1732,6 +1732,7 @@ fn is_auto_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n struct ImplTraitUniversalInfo<'hir> {\n+    id: ast::NodeId,\n     def_id: DefId,\n     span: Span,\n     bounds: &'hir [hir::TyParamBound],\n@@ -1767,6 +1768,7 @@ fn extract_universal_impl_trait_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n     visitor.items.into_iter().map(|ty| if let hir::TyImplTraitUniversal(_, ref bounds) = ty.node {\n         ImplTraitUniversalInfo {\n+            id: ty.id,\n             def_id: tcx.hir.local_def_id(ty.id),\n             span: ty.span,\n             bounds: bounds"}]}