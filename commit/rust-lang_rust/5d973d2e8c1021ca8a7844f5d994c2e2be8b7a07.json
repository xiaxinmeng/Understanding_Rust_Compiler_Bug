{"sha": "5d973d2e8c1021ca8a7844f5d994c2e2be8b7a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOTczZDJlOGMxMDIxY2E4YTc4NDRmNWQ5OTRjMmUyYmU4YjdhMDc=", "commit": {"author": {"name": "Ingvar Stepanyan", "email": "me@rreverser.com", "date": "2018-01-24T18:21:01Z"}, "committer": {"name": "Ingvar Stepanyan", "email": "me@rreverser.com", "date": "2018-02-04T11:53:09Z"}, "message": "Initial support for macros 1.1", "tree": {"sha": "da8e2e653ec4c2ecef9b5c43129f55ef896e5a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8e2e653ec4c2ecef9b5c43129f55ef896e5a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d973d2e8c1021ca8a7844f5d994c2e2be8b7a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d973d2e8c1021ca8a7844f5d994c2e2be8b7a07", "html_url": "https://github.com/rust-lang/rust/commit/5d973d2e8c1021ca8a7844f5d994c2e2be8b7a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d973d2e8c1021ca8a7844f5d994c2e2be8b7a07/comments", "author": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526367ace216693aaab22f7b2b98ac51032d06e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/526367ace216693aaab22f7b2b98ac51032d06e9", "html_url": "https://github.com/rust-lang/rust/commit/526367ace216693aaab22f7b2b98ac51032d06e9"}], "stats": {"total": 150, "additions": 84, "deletions": 66}, "files": [{"sha": "86ac93d19bed7b4cc2c7d178c02bd8f232a009ca", "filename": "src/macros.rs", "status": "modified", "additions": 84, "deletions": 66, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/5d973d2e8c1021ca8a7844f5d994c2e2be8b7a07/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d973d2e8c1021ca8a7844f5d994c2e2be8b7a07/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=5d973d2e8c1021ca8a7844f5d994c2e2be8b7a07", "patch": "@@ -291,88 +291,103 @@ pub fn rewrite_macro_def(\n ) -> Option<String> {\n     let snippet = Some(remove_trailing_white_spaces(context.snippet(span)));\n \n-    if def.legacy {\n-        return snippet;\n-    }\n-\n     let mut parser = MacroParser::new(def.stream().into_trees());\n-    let mut parsed_def = match parser.parse() {\n+    let parsed_def = match parser.parse() {\n         Some(def) => def,\n         None => return snippet,\n     };\n \n-    // Only attempt to format function-like macros.\n-    if parsed_def.branches.len() != 1 || parsed_def.branches[0].args_paren_kind != DelimToken::Paren\n-    {\n-        // FIXME(#1539): implement for non-sugared macros.\n-        return snippet;\n-    }\n+    let mut result = if def.legacy {\n+        String::from(\"macro_rules!\")\n+    } else {\n+        format!(\"{}macro\", format_visibility(vis))\n+    };\n \n-    let branch = parsed_def.branches.remove(0);\n-    let args_str = format_macro_args(branch.args)?;\n+    result += \" \";\n+    result += &ident.name.as_str();\n+    result += \" {\";\n \n-    // The macro body is the most interesting part. It might end up as various\n-    // AST nodes, but also has special variables (e.g, `$foo`) which can't be\n-    // parsed as regular Rust code (and note that these can be escaped using\n-    // `$$`). We'll try and format like an AST node, but we'll substitute\n-    // variables for new names with the same length first.\n+    let mac_indent = indent.block_indent(context.config);\n+    let mac_indent_str = mac_indent.to_string(context.config);\n \n-    let old_body = context.snippet(branch.body).trim();\n-    let (body_str, substs) = match replace_names(old_body) {\n-        Some(result) => result,\n-        None => return snippet,\n-    };\n+    for branch in parsed_def.branches {\n+        // Only attempt to format function-like macros.\n+        if branch.args_paren_kind != DelimToken::Paren {\n+            // FIXME(#1539): implement for non-sugared macros.\n+            return snippet;\n+        }\n+\n+        result += \"\\n\";\n+        result += &mac_indent_str;\n+        result += \"(\";\n+        result += &format_macro_args(branch.args)?;\n+        result += \") => {\\n\";\n+\n+        // The macro body is the most interesting part. It might end up as various\n+        // AST nodes, but also has special variables (e.g, `$foo`) which can't be\n+        // parsed as regular Rust code (and note that these can be escaped using\n+        // `$$`). We'll try and format like an AST node, but we'll substitute\n+        // variables for new names with the same length first.\n+\n+        let old_body = context.snippet(branch.body).trim();\n+        let (body_str, substs) = match replace_names(old_body) {\n+            Some(result) => result,\n+            None => return snippet,\n+        };\n \n-    // We'll hack the indent below, take this into account when formatting,\n-    let mut config = context.config.clone();\n-    let new_width = config.max_width() - indent.block_indent(&config).width();\n-    config.set().max_width(new_width);\n-    config.set().hide_parse_errors(true);\n+        // We'll hack the indent below, take this into account when formatting,\n+        let mut config = context.config.clone();\n+        let body_indent = mac_indent.block_indent(&config);\n+        let new_width = config.max_width() - body_indent.width();\n+        config.set().max_width(new_width);\n+        config.set().hide_parse_errors(true);\n \n-    // First try to format as items, then as statements.\n-    let new_body = match ::format_snippet(&body_str, &config) {\n-        Some(new_body) => new_body,\n-        None => match ::format_code_block(&body_str, &config) {\n+        // First try to format as items, then as statements.\n+        let new_body = match ::format_snippet(&body_str, &config) {\n             Some(new_body) => new_body,\n-            None => return snippet,\n-        },\n-    };\n+            None => match ::format_code_block(&body_str, &config) {\n+                Some(new_body) => new_body,\n+                None => return snippet,\n+            },\n+        };\n \n-    // Indent the body since it is in a block.\n-    let indent_str = indent.block_indent(&config).to_string(&config);\n-    let mut new_body = new_body\n-        .lines()\n-        .map(|l| {\n-            if l.is_empty() {\n-                l.to_owned()\n-            } else {\n-                format!(\"{}{}\", indent_str, l)\n+        // Indent the body since it is in a block.\n+        let indent_str = body_indent.to_string(&config);\n+        let mut new_body = new_body\n+            .trim_right()\n+            .lines()\n+            .fold(String::new(), |mut s, l| {\n+                if !l.is_empty() {\n+                    s += &indent_str;\n+                }\n+                s + l + \"\\n\"\n+            });\n+\n+        // Undo our replacement of macro variables.\n+        // FIXME: this could be *much* more efficient.\n+        for (old, new) in &substs {\n+            if old_body.find(new).is_some() {\n+                debug!(\n+                    \"rewrite_macro_def: bailing matching variable: `{}` in `{}`\",\n+                    new, ident\n+                );\n+                return snippet;\n             }\n-        })\n-        .collect::<Vec<_>>()\n-        .join(\"\\n\");\n-\n-    // Undo our replacement of macro variables.\n-    // FIXME: this could be *much* more efficient.\n-    for (old, new) in &substs {\n-        if old_body.find(new).is_some() {\n-            debug!(\n-                \"rewrite_macro_def: bailing matching variable: `{}` in `{}`\",\n-                new, ident\n-            );\n-            return snippet;\n+            new_body = new_body.replace(new, old);\n+        }\n+\n+        result += &new_body;\n+\n+        result += &mac_indent_str;\n+        result += \"}\";\n+        if def.legacy{\n+            result += \";\";\n         }\n-        new_body = new_body.replace(new, old);\n+        result += \"\\n\";\n     }\n \n-    let result = format!(\n-        \"{}macro {}({}) {{\\n{}\\n{}}}\",\n-        format_visibility(vis),\n-        ident,\n-        args_str,\n-        new_body,\n-        indent.to_string(context.config),\n-    );\n+    result += &indent.to_string(context.config);\n+    result += \"}\";\n \n     Some(result)\n }\n@@ -729,6 +744,9 @@ impl MacroParser {\n                 Span::new(data.lo + BytePos(1), data.hi - BytePos(1), data.ctxt)\n             }\n         };\n+        if let Some(TokenTree::Token(_, Token::Semi)) = self.toks.look_ahead(0) {\n+            self.toks.next();\n+        }\n         Some(MacroBranch {\n             args,\n             args_paren_kind,"}]}