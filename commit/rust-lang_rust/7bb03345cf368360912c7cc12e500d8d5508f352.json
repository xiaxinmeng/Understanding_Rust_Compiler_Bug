{"sha": "7bb03345cf368360912c7cc12e500d8d5508f352", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYjAzMzQ1Y2YzNjgzNjA5MTJjN2NjMTJlNTAwZDhkNTUwOGYzNTI=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2013-03-07T06:30:20Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2013-03-07T20:34:52Z"}, "message": "Inline constants across crates.", "tree": {"sha": "25dd8bf084f1121727b5db502dc139980f063d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25dd8bf084f1121727b5db502dc139980f063d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bb03345cf368360912c7cc12e500d8d5508f352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb03345cf368360912c7cc12e500d8d5508f352", "html_url": "https://github.com/rust-lang/rust/commit/7bb03345cf368360912c7cc12e500d8d5508f352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bb03345cf368360912c7cc12e500d8d5508f352/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50277ec555ccc0b72b98028c6fcc0b84511cf9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/50277ec555ccc0b72b98028c6fcc0b84511cf9ef", "html_url": "https://github.com/rust-lang/rust/commit/50277ec555ccc0b72b98028c6fcc0b84511cf9ef"}], "stats": {"total": 159, "additions": 133, "deletions": 26}, "files": [{"sha": "67d25637093e18a443a4fa587c54c3b6ce4c6bd6", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7bb03345cf368360912c7cc12e500d8d5508f352", "patch": "@@ -616,7 +616,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n     let must_write =\n         match item.node {\n           item_enum(_, _) | item_impl(*) | item_trait(*) | item_struct(*) |\n-          item_mod(*) | item_foreign_mod(*) => true,\n+          item_mod(*) | item_foreign_mod(*) | item_const(*) => true,\n           _ => false\n         };\n     if !must_write && !reachable(ecx, item.id) { return; }\n@@ -639,6 +639,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_symbol(ecx, ebml_w, item.id);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n+        (ecx.encode_inlined_item)(ecx, ebml_w, path, ii_item(item));\n         ebml_w.end_tag();\n       }\n       item_fn(_, purity, ref generics, _) => {"}, {"sha": "58099574126f48fc270dac1713accc2088458bed", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7bb03345cf368360912c7cc12e500d8d5508f352", "patch": "@@ -124,17 +124,11 @@ pub fn check_expr(sess: Session,\n                               items without type parameters\");\n             }\n             match def_map.find(&e.id) {\n-                Some(def_variant(_, _)) |\n-                Some(def_struct(_)) => { }\n+              Some(def_const(_)) |\n+              Some(def_fn(_, _)) |\n+              Some(def_variant(_, _)) |\n+              Some(def_struct(_)) => { }\n \n-                Some(def_const(def_id)) |\n-                Some(def_fn(def_id, _)) => {\n-                if !ast_util::is_local(def_id) {\n-                    sess.span_err(\n-                        e.span, ~\"paths in constants may only refer to \\\n-                                 crate-local constants or functions\");\n-                }\n-              }\n               Some(def) => {\n                 debug!(\"(checking const) found bad def: %?\", def);\n                 sess.span_err(\n@@ -246,11 +240,13 @@ pub fn check_item_recursion(sess: Session,\n           expr_path(*) => {\n             match env.def_map.find(&e.id) {\n               Some(def_const(def_id)) => {\n-                match env.ast_map.get(&def_id.node) {\n-                  ast_map::node_item(it, _) => {\n-                    (v.visit_item)(it, env, v);\n+                if ast_util::is_local(def_id) {\n+                  match env.ast_map.get(&def_id.node) {\n+                    ast_map::node_item(it, _) => {\n+                      (v.visit_item)(it, env, v);\n+                    }\n+                    _ => fail!(~\"const not bound to an item\")\n                   }\n-                  _ => fail!(~\"const not bound to an item\")\n                 }\n               }\n               _ => ()"}, {"sha": "1117d9b9bf8436ebeb8e73abcb883e5d7bd44def", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=7bb03345cf368360912c7cc12e500d8d5508f352", "patch": "@@ -11,13 +11,15 @@\n use core::prelude::*;\n \n use lib::llvm::{llvm, ValueRef, TypeRef, Bool, True, False};\n+use metadata::csearch;\n use middle::const_eval;\n use middle::trans::adt;\n use middle::trans::base;\n use middle::trans::base::get_insn_ctxt;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::expr;\n+use middle::trans::inline;\n use middle::trans::machine;\n use middle::trans::type_of;\n use middle::ty;\n@@ -121,10 +123,12 @@ pub fn const_autoderef(cx: @CrateContext, ty: ty::t, v: ValueRef)\n }\n \n pub fn get_const_val(cx: @CrateContext, def_id: ast::def_id) -> ValueRef {\n-    if !ast_util::is_local(def_id) {\n-        cx.tcx.sess.bug(~\"cross-crate constants\");\n-    }\n-    if !cx.const_values.contains_key(&def_id.node) {\n+    let mut def_id = def_id;\n+    if !ast_util::is_local(def_id) ||\n+       !cx.const_values.contains_key(&def_id.node) {\n+        if !ast_util::is_local(def_id) {\n+            def_id = inline::maybe_instantiate_inline(cx, def_id, true);\n+        }\n         match cx.tcx.items.get(&def_id.node) {\n             ast_map::node_item(@ast::item {\n                 node: ast::item_const(_, subexpr), _\n@@ -419,8 +423,13 @@ fn const_expr_unchecked(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n             assert pth.types.len() == 0;\n             match cx.tcx.def_map.find(&e.id) {\n                 Some(ast::def_fn(def_id, _purity)) => {\n-                    assert ast_util::is_local(def_id);\n-                    let f = base::get_item_val(cx, def_id.node);\n+                    let f = if !ast_util::is_local(def_id) {\n+                        let ty = csearch::get_type(cx.tcx, def_id).ty;\n+                        base::trans_external_path(cx, def_id, ty)\n+                    } else {\n+                        assert ast_util::is_local(def_id);\n+                        base::get_item_val(cx, def_id.node)\n+                    };\n                     let ety = ty::expr_ty_adjusted(cx.tcx, e);\n                     match ty::get(ety).sty {\n                         ty::ty_bare_fn(*) | ty::ty_ptr(*) => {"}, {"sha": "5fb07d6e7d8f61ba409dd44d80633b9b9b99d8bb", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=7bb03345cf368360912c7cc12e500d8d5508f352", "patch": "@@ -138,6 +138,7 @@ use middle::trans::consts;\n use middle::trans::controlflow;\n use middle::trans::datum::*;\n use middle::trans::debuginfo;\n+use middle::trans::inline;\n use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::tvec;\n@@ -984,15 +985,54 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         match def {\n             ast::def_const(did) => {\n                 let const_ty = expr_ty(bcx, ref_expr);\n-                let val = if did.crate == ast::local_crate {\n+\n+                #[cfg(stage0)]\n+                fn get_did(_ccx: @CrateContext, did: ast::def_id)\n+                    -> ast::def_id {\n+                    did\n+                }\n+\n+                #[cfg(stage1)]\n+                #[cfg(stage2)]\n+                #[cfg(stage3)]\n+                fn get_did(ccx: @CrateContext, did: ast::def_id)\n+                    -> ast::def_id {\n+                    if did.crate != ast::local_crate {\n+                        inline::maybe_instantiate_inline(ccx, did, true)\n+                    } else {\n+                        did\n+                    }\n+                }\n+\n+                #[cfg(stage0)]\n+                fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n+                    -> ValueRef {\n+                    let ccx = bcx.ccx();\n+                    if did.crate == ast::local_crate {\n+                        // The LLVM global has the type of its initializer,\n+                        // which may not be equal to the enum's type for\n+                        // non-C-like enums.\n+                        PointerCast(bcx, base::get_item_val(ccx, did.node),\n+                                    T_ptr(type_of(bcx.ccx(), const_ty)))\n+                    } else {\n+                        base::trans_external_path(ccx, did, const_ty)\n+                    }\n+                }\n+\n+                #[cfg(stage1)]\n+                #[cfg(stage2)]\n+                #[cfg(stage3)]\n+                fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n+                    -> ValueRef {\n                     // The LLVM global has the type of its initializer,\n                     // which may not be equal to the enum's type for\n                     // non-C-like enums.\n-                    PointerCast(bcx, base::get_item_val(ccx, did.node),\n+                    PointerCast(bcx, base::get_item_val(bcx.ccx(), did.node),\n                                 T_ptr(type_of(bcx.ccx(), const_ty)))\n-                } else {\n-                    base::trans_external_path(ccx, did, const_ty)\n-                };\n+                }\n+\n+                let did = get_did(ccx, did);\n+                let val = get_val(bcx, did, const_ty);\n                 DatumBlock {\n                     bcx: bcx,\n                     datum: Datum {val: val,"}, {"sha": "b2dd0cc8e586059cfb965433dfb9321c9489dbbd", "filename": "src/test/auxiliary/cci_const.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Ftest%2Fauxiliary%2Fcci_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Ftest%2Fauxiliary%2Fcci_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_const.rs?ref=7bb03345cf368360912c7cc12e500d8d5508f352", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub extern fn bar() {\n+}\n+\n+pub const foopy: &static/str = \"hi there\";\n+pub const uint_val: uint = 12;\n+pub const uint_expr: uint = (1 << uint_val) - 1;"}, {"sha": "eb3c482737c222a38b6826584f7fc37f39302b1d", "filename": "src/test/run-pass/const-cross-crate-const.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs?ref=7bb03345cf368360912c7cc12e500d8d5508f352", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:cci_const.rs\n+\n+extern mod cci_const;\n+const foo: &static/str = cci_const::foopy;\n+const a: uint = cci_const::uint_val;\n+const b: uint = cci_const::uint_expr + 5;\n+\n+fn main() {\n+    assert a == 12;\n+    let foo2 = a;\n+    assert foo2 == cci_const::uint_val;\n+    assert b == cci_const::uint_expr + 5;\n+    assert foo == cci_const::foopy;\n+}"}, {"sha": "e86118f3c433c4fcead53384178b1fdffce98835", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb03345cf368360912c7cc12e500d8d5508f352/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=7bb03345cf368360912c7cc12e500d8d5508f352", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:cci_const.rs\n+\n+extern mod cci_const;\n+use cci_const::bar;\n+const foo: *u8 = bar;\n+\n+fn main() {\n+    assert foo == cci_const::bar;\n+}"}]}