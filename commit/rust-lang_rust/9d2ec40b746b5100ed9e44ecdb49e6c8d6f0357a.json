{"sha": "9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMmVjNDBiNzQ2YjUxMDBlZDllNDRlY2RiNDllNmM4ZDZmMDM1N2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-30T09:49:01Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-30T09:49:01Z"}, "message": "Rollup merge of #33938 - srinivasreddy:rustfmt_libunwind, r=Manishearth\n\nrun rustfmt on libunwind", "tree": {"sha": "481935e3a7819c1fbfa7ab7d4fee3d2a5723233d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481935e3a7819c1fbfa7ab7d4fee3d2a5723233d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a", "html_url": "https://github.com/rust-lang/rust/commit/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21dc6c267842ede373c846fef398d6d7dfa9dfc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/21dc6c267842ede373c846fef398d6d7dfa9dfc8", "html_url": "https://github.com/rust-lang/rust/commit/21dc6c267842ede373c846fef398d6d7dfa9dfc8"}, {"sha": "5ed45ef354ff2247b604bcb26a64f918dabf7325", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed45ef354ff2247b604bcb26a64f918dabf7325", "html_url": "https://github.com/rust-lang/rust/commit/5ed45ef354ff2247b604bcb26a64f918dabf7325"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "add45ccb362e96bc2348c9938415ddee5c00ac79", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a", "patch": "@@ -27,4 +27,3 @@ extern crate libc;\n mod libunwind;\n #[cfg(not(target_env = \"msvc\"))]\n pub use libunwind::*;\n-"}, {"sha": "aadfe202afe796ba6d05257e5df80196e0aff51d", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a", "patch": "@@ -38,7 +38,7 @@ pub enum _Unwind_State {\n     _US_UNWIND_FRAME_RESUME = 2,\n     _US_ACTION_MASK = 3,\n     _US_FORCE_UNWIND = 8,\n-    _US_END_OF_STACK = 16\n+    _US_END_OF_STACK = 16,\n }\n \n #[repr(C)]\n@@ -59,9 +59,8 @@ pub type _Unwind_Exception_Class = u64;\n \n pub type _Unwind_Word = libc::uintptr_t;\n \n-pub type _Unwind_Trace_Fn =\n-        extern fn(ctx: *mut _Unwind_Context,\n-                  arg: *mut libc::c_void) -> _Unwind_Reason_Code;\n+pub type _Unwind_Trace_Fn = extern \"C\" fn(ctx: *mut _Unwind_Context, arg: *mut libc::c_void)\n+                                          -> _Unwind_Reason_Code;\n \n #[cfg(target_arch = \"x86\")]\n pub const unwinder_private_data_size: usize = 5;\n@@ -97,9 +96,8 @@ pub struct _Unwind_Exception {\n \n pub enum _Unwind_Context {}\n \n-pub type _Unwind_Exception_Cleanup_Fn =\n-        extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n-                      exception: *mut _Unwind_Exception);\n+pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n+                                                      exception: *mut _Unwind_Exception);\n \n #[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n                target_os = \"freebsd\",\n@@ -127,20 +125,18 @@ pub type _Unwind_Exception_Cleanup_Fn =\n #[cfg_attr(all(target_os = \"windows\", target_env = \"gnu\"),\n            link(name = \"gcc_eh\"))]\n #[cfg(not(cargobuild))]\n-extern {}\n+extern \"C\" {}\n \n-extern {\n+extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link\n     // against corresponding routine (..._SjLj_...)\n     #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n     #[unwind]\n-    pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception)\n-                                  -> _Unwind_Reason_Code;\n+    pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n \n     #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n     #[unwind]\n-    fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception)\n-                                   -> _Unwind_Reason_Code;\n+    fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n \n     pub fn _Unwind_DeleteException(exception: *mut _Unwind_Exception);\n \n@@ -151,28 +147,26 @@ extern {\n     #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n     pub fn _Unwind_Backtrace(trace: _Unwind_Trace_Fn,\n                              trace_argument: *mut libc::c_void)\n-                -> _Unwind_Reason_Code;\n+                             -> _Unwind_Reason_Code;\n \n     // available since GCC 4.2.0, should be fine for our purpose\n     #[cfg(all(not(all(target_os = \"android\", target_arch = \"arm\")),\n               not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n     pub fn _Unwind_GetIPInfo(ctx: *mut _Unwind_Context,\n                              ip_before_insn: *mut libc::c_int)\n-                -> libc::uintptr_t;\n+                             -> libc::uintptr_t;\n \n     #[cfg(all(not(target_os = \"android\"),\n               not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n-    pub fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void)\n-        -> *mut libc::c_void;\n+    pub fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void) -> *mut libc::c_void;\n }\n \n // ... and now we just providing access to SjLj counterspart\n // through a standard name to hide those details from others\n // (see also comment above regarding _Unwind_RaiseException)\n #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n #[inline]\n-pub unsafe fn _Unwind_RaiseException(exc: *mut _Unwind_Exception)\n-                                     -> _Unwind_Reason_Code {\n+pub unsafe fn _Unwind_RaiseException(exc: *mut _Unwind_Exception) -> _Unwind_Reason_Code {\n     _Unwind_SjLj_RaiseException(exc)\n }\n \n@@ -207,18 +201,20 @@ pub unsafe fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t {\n     }\n \n     type _Unwind_Word = libc::c_uint;\n-    extern {\n+    extern \"C\" {\n         fn _Unwind_VRS_Get(ctx: *mut _Unwind_Context,\n                            klass: _Unwind_VRS_RegClass,\n                            word: _Unwind_Word,\n                            repr: _Unwind_VRS_DataRepresentation,\n                            data: *mut libc::c_void)\n-            -> _Unwind_VRS_Result;\n+                           -> _Unwind_VRS_Result;\n     }\n \n     let mut val: _Unwind_Word = 0;\n     let ptr = &mut val as *mut _Unwind_Word;\n-    let _ = _Unwind_VRS_Get(ctx, _Unwind_VRS_RegClass::_UVRSC_CORE, 15,\n+    let _ = _Unwind_VRS_Get(ctx,\n+                            _Unwind_VRS_RegClass::_UVRSC_CORE,\n+                            15,\n                             _Unwind_VRS_DataRepresentation::_UVRSD_UINT32,\n                             ptr as *mut libc::c_void);\n     (val & !1) as libc::uintptr_t\n@@ -230,8 +226,7 @@ pub unsafe fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t {\n           all(target_os = \"linux\", target_arch = \"arm\")))]\n pub unsafe fn _Unwind_GetIPInfo(ctx: *mut _Unwind_Context,\n                                 ip_before_insn: *mut libc::c_int)\n-    -> libc::uintptr_t\n-{\n+                                -> libc::uintptr_t {\n     *ip_before_insn = 0;\n     _Unwind_GetIP(ctx)\n }\n@@ -240,8 +235,6 @@ pub unsafe fn _Unwind_GetIPInfo(ctx: *mut _Unwind_Context,\n // a no-op\n #[cfg(any(target_os = \"android\",\n           all(target_os = \"linux\", target_arch = \"arm\")))]\n-pub unsafe fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void)\n-    -> *mut libc::c_void\n-{\n+pub unsafe fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void) -> *mut libc::c_void {\n     pc\n }"}]}