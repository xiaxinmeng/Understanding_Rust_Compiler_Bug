{"sha": "030f471f26dbb6642c54a1e12ce63f7989db01ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMGY0NzFmMjZkYmI2NjQyYzU0YTFlMTJjZTYzZjc5ODlkYjAxYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-31T09:01:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-31T09:01:44Z"}, "message": "auto merge of #6853 : bblum/rust/sized, r=pcwalton\n\nr? @nikomatsakis @pcwalton", "tree": {"sha": "2da4c9bac32cb4e51911a67c5af98b8a01116895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da4c9bac32cb4e51911a67c5af98b8a01116895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030f471f26dbb6642c54a1e12ce63f7989db01ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030f471f26dbb6642c54a1e12ce63f7989db01ab", "html_url": "https://github.com/rust-lang/rust/commit/030f471f26dbb6642c54a1e12ce63f7989db01ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030f471f26dbb6642c54a1e12ce63f7989db01ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd5cd9731e7c32180f9cc7ce1bcf675b5724c50", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd5cd9731e7c32180f9cc7ce1bcf675b5724c50", "html_url": "https://github.com/rust-lang/rust/commit/1dd5cd9731e7c32180f9cc7ce1bcf675b5724c50"}, {"sha": "5113f68a86594b189371756534117a60e1ce2be2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5113f68a86594b189371756534117a60e1ce2be2", "html_url": "https://github.com/rust-lang/rust/commit/5113f68a86594b189371756534117a60e1ce2be2"}], "stats": {"total": 320, "additions": 231, "deletions": 89}, "files": [{"sha": "44d0ce1a27fc51d28de752c7a1b03c108ff080c2", "filename": "src/etc/kate/rust.xml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Fetc%2Fkate%2Frust.xml", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Fetc%2Fkate%2Frust.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fkate%2Frust.xml?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -49,6 +49,7 @@\n \t\t<item> Copy </item>\n \t\t<item> Send </item>\n \t\t<item> Owned </item>\n+\t\t<item> Sized </item>\n \t\t<item> Eq </item>\n \t\t<item> Ord </item>\n \t\t<item> Num </item>"}, {"sha": "5c08fdfecca55fcf2d37ea377621377d570338f4", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -44,7 +44,7 @@ syn keyword   rustType        size_t ptrdiff_t clock_t time_t\n syn keyword   rustType        c_longlong c_ulonglong intptr_t uintptr_t\n syn keyword   rustType        off_t dev_t ino_t pid_t mode_t ssize_t\n \n-syn keyword   rustTrait       Const Copy Send Owned \" inherent traits\n+syn keyword   rustTrait       Const Copy Send Owned Sized \" inherent traits\n syn keyword   rustTrait       Eq Ord Num Ptr\n syn keyword   rustTrait       Drop Add Sub Mul Quot Rem Neg BitAnd BitOr\n syn keyword   rustTrait       BitXor Shl Shr Index"}, {"sha": "33e033ace483560174a03a5677c3594f9338dedb", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -569,6 +569,9 @@ fn parse_bounds(st: @mut PState, conv: conv_did) -> ty::ParamBounds {\n             'O' => {\n                 param_bounds.builtin_bounds.add(ty::BoundStatic);\n             }\n+            'Z' => {\n+                param_bounds.builtin_bounds.add(ty::BoundSized);\n+            }\n             'I' => {\n                 param_bounds.trait_bounds.push(@parse_trait_ref(st, conv));\n             }"}, {"sha": "947c68634148e57082c2bacbf9604f1a7b432d5e", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -403,6 +403,7 @@ fn enc_bounds(w: @io::Writer, cx: @ctxt, bs: &ty::ParamBounds) {\n             ty::BoundCopy => w.write_char('C'),\n             ty::BoundConst => w.write_char('K'),\n             ty::BoundStatic => w.write_char('O'),\n+            ty::BoundSized => w.write_char('Z'),\n         }\n     }\n "}, {"sha": "be1aa957666fa6d0dcfd2eac88b6ea5e82878f2e", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 82, "deletions": 76, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -36,55 +36,56 @@ pub enum LangItem {\n     ConstTraitLangItem,         // 0\n     CopyTraitLangItem,          // 1\n     OwnedTraitLangItem,         // 2\n+    SizedTraitLangItem,         // 3\n \n-    DropTraitLangItem,          // 3\n+    DropTraitLangItem,          // 4\n \n-    AddTraitLangItem,           // 4\n-    SubTraitLangItem,           // 5\n-    MulTraitLangItem,           // 6\n-    DivTraitLangItem,           // 7\n-    RemTraitLangItem,           // 8\n-    NegTraitLangItem,           // 9\n-    NotTraitLangItem,           // 10\n+    AddTraitLangItem,           // 5\n+    SubTraitLangItem,           // 6\n+    MulTraitLangItem,           // 7\n+    DivTraitLangItem,           // 8\n+    RemTraitLangItem,           // 9\n+    NegTraitLangItem,           // 10\n+    NotTraitLangItem,           // 11\n     BitXorTraitLangItem,        // 11\n-    BitAndTraitLangItem,        // 12\n-    BitOrTraitLangItem,         // 13\n-    ShlTraitLangItem,           // 14\n-    ShrTraitLangItem,           // 15\n-    IndexTraitLangItem,         // 16\n-\n-    EqTraitLangItem,            // 17\n-    OrdTraitLangItem,           // 18\n-\n-    StrEqFnLangItem,            // 19\n-    UniqStrEqFnLangItem,        // 20\n-    AnnihilateFnLangItem,       // 21\n-    LogTypeFnLangItem,          // 22\n-    FailFnLangItem,             // 23\n-    FailBoundsCheckFnLangItem,  // 24\n-    ExchangeMallocFnLangItem,   // 25\n-    ExchangeFreeFnLangItem,     // 26\n-    MallocFnLangItem,           // 27\n-    FreeFnLangItem,             // 28\n-    BorrowAsImmFnLangItem,      // 29\n-    BorrowAsMutFnLangItem,      // 30\n-    ReturnToMutFnLangItem,      // 31\n-    CheckNotBorrowedFnLangItem, // 32\n-    StrDupUniqFnLangItem,       // 33\n-    RecordBorrowFnLangItem,     // 34\n-    UnrecordBorrowFnLangItem,   // 35\n-\n-    StartFnLangItem,            // 36\n+    BitAndTraitLangItem,        // 13\n+    BitOrTraitLangItem,         // 14\n+    ShlTraitLangItem,           // 15\n+    ShrTraitLangItem,           // 16\n+    IndexTraitLangItem,         // 17\n+\n+    EqTraitLangItem,            // 18\n+    OrdTraitLangItem,           // 19\n+\n+    StrEqFnLangItem,            // 20\n+    UniqStrEqFnLangItem,        // 21\n+    AnnihilateFnLangItem,       // 22\n+    LogTypeFnLangItem,          // 23\n+    FailFnLangItem,             // 24\n+    FailBoundsCheckFnLangItem,  // 25\n+    ExchangeMallocFnLangItem,   // 26\n+    ExchangeFreeFnLangItem,     // 27\n+    MallocFnLangItem,           // 28\n+    FreeFnLangItem,             // 29\n+    BorrowAsImmFnLangItem,      // 30\n+    BorrowAsMutFnLangItem,      // 31\n+    ReturnToMutFnLangItem,      // 32\n+    CheckNotBorrowedFnLangItem, // 33\n+    StrDupUniqFnLangItem,       // 34\n+    RecordBorrowFnLangItem,     // 35\n+    UnrecordBorrowFnLangItem,   // 36\n+\n+    StartFnLangItem,            // 37\n }\n \n pub struct LanguageItems {\n-    items: [Option<def_id>, ..37]\n+    items: [Option<def_id>, ..38]\n }\n \n pub impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..37 ]\n+            items: [ None, ..38 ]\n         }\n     }\n \n@@ -97,44 +98,45 @@ pub impl LanguageItems {\n             0  => \"const\",\n             1  => \"copy\",\n             2  => \"owned\",\n-\n-            3  => \"drop\",\n-\n-            4  => \"add\",\n-            5  => \"sub\",\n-            6  => \"mul\",\n-            7  => \"div\",\n-            8  => \"rem\",\n-            9 => \"neg\",\n-            10 => \"not\",\n-            11 => \"bitxor\",\n-            12 => \"bitand\",\n-            13 => \"bitor\",\n-            14 => \"shl\",\n-            15 => \"shr\",\n-            16 => \"index\",\n-            17 => \"eq\",\n-            18 => \"ord\",\n-\n-            19 => \"str_eq\",\n-            20 => \"uniq_str_eq\",\n-            21 => \"annihilate\",\n-            22 => \"log_type\",\n-            23 => \"fail_\",\n-            24 => \"fail_bounds_check\",\n-            25 => \"exchange_malloc\",\n-            26 => \"exchange_free\",\n-            27 => \"malloc\",\n-            28 => \"free\",\n-            29 => \"borrow_as_imm\",\n-            30 => \"borrow_as_mut\",\n-            31 => \"return_to_mut\",\n-            32 => \"check_not_borrowed\",\n-            33 => \"strdup_uniq\",\n-            34 => \"record_borrow\",\n-            35 => \"unrecord_borrow\",\n-\n-            36 => \"start\",\n+            3  => \"sized\",\n+\n+            4  => \"drop\",\n+\n+            5  => \"add\",\n+            6  => \"sub\",\n+            7  => \"mul\",\n+            8  => \"div\",\n+            9  => \"rem\",\n+            10 => \"neg\",\n+            11 => \"not\",\n+            12 => \"bitxor\",\n+            13 => \"bitand\",\n+            14 => \"bitor\",\n+            15 => \"shl\",\n+            16 => \"shr\",\n+            17 => \"index\",\n+            18 => \"eq\",\n+            19 => \"ord\",\n+\n+            20 => \"str_eq\",\n+            21 => \"uniq_str_eq\",\n+            22 => \"annihilate\",\n+            23 => \"log_type\",\n+            24 => \"fail_\",\n+            25 => \"fail_bounds_check\",\n+            26 => \"exchange_malloc\",\n+            27 => \"exchange_free\",\n+            28 => \"malloc\",\n+            29 => \"free\",\n+            30 => \"borrow_as_imm\",\n+            31 => \"borrow_as_mut\",\n+            32 => \"return_to_mut\",\n+            33 => \"check_not_borrowed\",\n+            34 => \"strdup_uniq\",\n+            35 => \"record_borrow\",\n+            36 => \"unrecord_borrow\",\n+\n+            37 => \"start\",\n \n             _ => \"???\"\n         }\n@@ -151,6 +153,9 @@ pub impl LanguageItems {\n     pub fn owned_trait(&const self) -> def_id {\n         self.items[OwnedTraitLangItem as uint].get()\n     }\n+    pub fn sized_trait(&const self) -> def_id {\n+        self.items[SizedTraitLangItem as uint].get()\n+    }\n \n     pub fn drop_trait(&const self) -> def_id {\n         self.items[DropTraitLangItem as uint].get()\n@@ -267,6 +272,7 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(@~\"const\", ConstTraitLangItem as uint);\n     item_refs.insert(@~\"copy\", CopyTraitLangItem as uint);\n     item_refs.insert(@~\"owned\", OwnedTraitLangItem as uint);\n+    item_refs.insert(@~\"sized\", SizedTraitLangItem as uint);\n \n     item_refs.insert(@~\"drop\", DropTraitLangItem as uint);\n "}, {"sha": "0d180223fefc877bc70a17533b87b0f18616a82e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -682,6 +682,7 @@ pub enum BuiltinBound {\n     BoundStatic,\n     BoundOwned,\n     BoundConst,\n+    BoundSized,\n }\n \n pub fn EmptyBuiltinBounds() -> BuiltinBounds {\n@@ -694,6 +695,7 @@ pub fn AllBuiltinBounds() -> BuiltinBounds {\n     set.add(BoundStatic);\n     set.add(BoundOwned);\n     set.add(BoundConst);\n+    set.add(BoundSized);\n     set\n }\n \n@@ -1825,7 +1827,8 @@ pub impl TypeContents {\n             BoundCopy => self.is_copy(cx),\n             BoundStatic => self.is_static(cx),\n             BoundConst => self.is_const(cx),\n-            BoundOwned => self.is_owned(cx)\n+            BoundOwned => self.is_owned(cx),\n+            BoundSized => self.is_sized(cx),\n         }\n     }\n \n@@ -1870,6 +1873,14 @@ pub impl TypeContents {\n         TC_MUTABLE\n     }\n \n+    fn is_sized(&self, cx: ctxt) -> bool {\n+        !self.intersects(TypeContents::dynamically_sized(cx))\n+    }\n+\n+    fn dynamically_sized(_cx: ctxt) -> TypeContents {\n+        TC_DYNAMIC_SIZE\n+    }\n+\n     fn moves_by_default(&self, cx: ctxt) -> bool {\n         self.intersects(TypeContents::nonimplicitly_copyable(cx))\n     }\n@@ -1943,8 +1954,11 @@ static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits: 0b0010_0000_0000};\n /// Contains a type marked with `#[non_owned]`\n static TC_NON_OWNED: TypeContents =        TypeContents{bits: 0b0100_0000_0000};\n \n+/// Is a bare vector, str, function, trait, etc (only relevant at top level).\n+static TC_DYNAMIC_SIZE: TypeContents =     TypeContents{bits: 0b1000_0000_0000};\n+\n /// All possible contents.\n-static TC_ALL: TypeContents =              TypeContents{bits: 0b0111_1111_1111};\n+static TC_ALL: TypeContents =              TypeContents{bits: 0b1111_1111_1111};\n \n pub fn type_is_copyable(cx: ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_copy(cx)\n@@ -2028,7 +2042,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_box(mt) => {\n-                TC_MANAGED + nonowned(tc_mt(cx, mt, cache))\n+                TC_MANAGED + statically_sized(nonowned(tc_mt(cx, mt, cache)))\n             }\n \n             ty_trait(_, _, UniqTraitStore, _) => {\n@@ -2048,28 +2062,35 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n             ty_rptr(r, mt) => {\n                 borrowed_contents(r, mt.mutbl) +\n-                    nonowned(tc_mt(cx, mt, cache))\n+                    statically_sized(nonowned(tc_mt(cx, mt, cache)))\n             }\n \n             ty_uniq(mt) => {\n-                TC_OWNED_POINTER + tc_mt(cx, mt, cache)\n+                TC_OWNED_POINTER + statically_sized(tc_mt(cx, mt, cache))\n             }\n \n             ty_evec(mt, vstore_uniq) => {\n-                TC_OWNED_VEC + tc_mt(cx, mt, cache)\n+                TC_OWNED_VEC + statically_sized(tc_mt(cx, mt, cache))\n             }\n \n             ty_evec(mt, vstore_box) => {\n-                TC_MANAGED + nonowned(tc_mt(cx, mt, cache))\n+                TC_MANAGED + statically_sized(nonowned(tc_mt(cx, mt, cache)))\n             }\n \n             ty_evec(mt, vstore_slice(r)) => {\n                 borrowed_contents(r, mt.mutbl) +\n-                    nonowned(tc_mt(cx, mt, cache))\n+                    statically_sized(nonowned(tc_mt(cx, mt, cache)))\n             }\n \n             ty_evec(mt, vstore_fixed(_)) => {\n-                tc_mt(cx, mt, cache)\n+                let contents = tc_mt(cx, mt, cache);\n+                // FIXME(#6308) Uncomment this when construction of such\n+                // vectors is prevented earlier in compilation.\n+                // if !contents.is_sized(cx) {\n+                //     cx.sess.bug(\"Fixed-length vector of unsized type \\\n+                //                  should be impossible\");\n+                // }\n+                contents\n             }\n \n             ty_estr(vstore_box) => {\n@@ -2144,7 +2165,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_opaque_box => TC_MANAGED,\n-            ty_unboxed_vec(mt) => tc_mt(cx, mt, cache),\n+            ty_unboxed_vec(mt) => TC_DYNAMIC_SIZE + tc_mt(cx, mt, cache),\n             ty_opaque_closure_ptr(sigil) => {\n                 match sigil {\n                     ast::BorrowedSigil => TC_BORROWED_POINTER,\n@@ -2211,6 +2232,14 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         TypeContents {bits: pointee.bits & mask}\n     }\n \n+    fn statically_sized(pointee: TypeContents) -> TypeContents {\n+        /*!\n+         * If a dynamically-sized type is found behind a pointer, we should\n+         * restore the 'Sized' kind to the pointer and things that contain it.\n+         */\n+        TypeContents {bits: pointee.bits & !TC_DYNAMIC_SIZE.bits}\n+    }\n+\n     fn closure_contents(cty: &ClosureTy) -> TypeContents {\n         let st = match cty.sigil {\n             ast::BorrowedSigil => TC_BORROWED_POINTER,\n@@ -2239,6 +2268,8 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 BoundStatic => TypeContents::nonstatic(cx),\n                 BoundOwned => TypeContents::nonowned(cx),\n                 BoundConst => TypeContents::nonconst(cx),\n+                // The dynamic-size bit can be removed at pointer-level, etc.\n+                BoundSized => TypeContents::dynamically_sized(cx),\n             };\n         }\n \n@@ -2508,6 +2539,21 @@ pub fn type_is_enum(ty: t) -> bool {\n     }\n }\n \n+// Is the type's representation size known at compile time?\n+pub fn type_is_sized(cx: ctxt, ty: ty::t) -> bool {\n+    match get(ty).sty {\n+        // FIXME(#6308) add trait, vec, str, etc here.\n+        ty_param(p) => {\n+            let param_def = cx.ty_param_defs.get(&p.def_id.node);\n+            if param_def.bounds.builtin_bounds.contains_elem(BoundSized) {\n+                return true;\n+            }\n+            return false;\n+        },\n+        _ => return true,\n+    }\n+}\n+\n // Whether a type is enum like, that is a enum type with only nullary\n // constructors\n pub fn type_is_c_like_enum(cx: ctxt, ty: t) -> bool {"}, {"sha": "57e2a562b20f5da674c6cd3a063f8100e8daa6b8", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -782,6 +782,9 @@ pub fn try_add_builtin_trait(tcx: ty::ctxt,\n     } else if trait_def_id == li.const_trait() {\n         builtin_bounds.add(ty::BoundConst);\n         true\n+    } else if trait_def_id == li.sized_trait() {\n+        builtin_bounds.add(ty::BoundSized);\n+        true\n     } else {\n         false\n     }"}, {"sha": "5c5cc98bb9c3a28711fc4f73b2f010dfcbaf4fc5", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -563,6 +563,7 @@ impl Repr for ty::ParamBounds {\n                 ty::BoundStatic => ~\"'static\",\n                 ty::BoundOwned => ~\"Owned\",\n                 ty::BoundConst => ~\"Const\",\n+                ty::BoundSized => ~\"Sized\",\n             });\n         }\n         for self.trait_bounds.each |t| {\n@@ -767,7 +768,8 @@ impl UserString for ty::BuiltinBound {\n             ty::BoundCopy => ~\"Copy\",\n             ty::BoundStatic => ~\"'static\",\n             ty::BoundOwned => ~\"Owned\",\n-            ty::BoundConst => ~\"Const\"\n+            ty::BoundConst => ~\"Const\",\n+            ty::BoundSized => ~\"Sized\",\n         }\n     }\n }"}, {"sha": "05c963a32cc732f0741b198bff7fb2b1b2bf5884", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -53,3 +53,8 @@ pub trait Owned {\n pub trait Const {\n     // Empty.\n }\n+\n+#[lang=\"sized\"]\n+pub trait Sized {\n+    // Empty.\n+}"}, {"sha": "4dcef60781f5df28f329e2a8cef6644a3b62dc41", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -12,7 +12,7 @@\n \n // Reexported core operators\n pub use either::{Either, Left, Right};\n-pub use kinds::{Const, Copy, Owned};\n+pub use kinds::{Const, Copy, Owned, Sized};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop};"}, {"sha": "ff9d379c30f5e24bbc0e3b0aa3b21381fcd493a5", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: instantiating a type parameter with an incompatible type\n+fn bar<T: Sized>() { }\n+fn foo<T>() { bar::<T>() }\n+fn main() { }"}, {"sha": "df7d82f0b259011af2a300267d5fa3c12b3ca3a5", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: instantiating a type parameter with an incompatible type\n+fn bar<T: Sized>() { }\n+fn foo<T>() { bar::<Option<T>>() }\n+fn main() { }"}, {"sha": "da3e9e12430589bdc472d677c541fb13ec04582a", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: instantiating a type parameter with an incompatible type\n+\n+struct Foo<T> { data: T }\n+\n+fn bar<T: Sized>() { }\n+fn foo<T>() { bar::<Foo<T>>() }\n+fn main() { }"}, {"sha": "275622161d34f1ed28f2811d7f921fe1dea5fd66", "filename": "src/test/run-pass/sized-borrowed-pointer", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab"}, {"sha": "9012791800299f309b8577cf6cb20537c2e54ccc", "filename": "src/test/run-pass/sized-borrowed-pointer.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Possibly-dynamic size of typaram should be cleared at pointer boundary.\n+\n+fn bar<T: Sized>() { }\n+fn foo<T>() { bar::<&T>() }\n+fn main() { }"}, {"sha": "3a290ba47ffb228dbaf66fb0a68f7f003a15967f", "filename": "src/test/run-pass/sized-owned-pointer", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Frun-pass%2Fsized-owned-pointer", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Frun-pass%2Fsized-owned-pointer", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsized-owned-pointer?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab"}, {"sha": "fe9c63621b284734b8dc0e92042b7f332d156c8b", "filename": "src/test/run-pass/sized-owned-pointer.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f471f26dbb6642c54a1e12ce63f7989db01ab/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs?ref=030f471f26dbb6642c54a1e12ce63f7989db01ab", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Possibly-dynamic size of typaram should be cleared at pointer boundary.\n+\n+fn bar<T: Sized>() { }\n+fn foo<T>() { bar::<~T>() }\n+fn main() { }"}]}