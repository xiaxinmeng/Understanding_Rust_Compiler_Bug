{"sha": "d5bb71c9f1042c0c931c7dddecc418233de6e30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YmI3MWM5ZjEwNDJjMGM5MzFjN2RkZGVjYzQxODIzM2RlNmUzMGY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-02-23T15:40:15Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-06T03:47:03Z"}, "message": "Split up privacy checking so privacy_access_levels only does computations required for AccessLevels", "tree": {"sha": "e90f85d509a5688a5ac2447a9c6417431cdab165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e90f85d509a5688a5ac2447a9c6417431cdab165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5bb71c9f1042c0c931c7dddecc418233de6e30f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bb71c9f1042c0c931c7dddecc418233de6e30f", "html_url": "https://github.com/rust-lang/rust/commit/d5bb71c9f1042c0c931c7dddecc418233de6e30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5bb71c9f1042c0c931c7dddecc418233de6e30f/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "html_url": "https://github.com/rust-lang/rust/commit/f22dca0a1bef4141e75326caacc3cd59f3d5be8e"}], "stats": {"total": 154, "additions": 84, "deletions": 70}, "files": [{"sha": "a46ffffe94cb8a7a55325442f8d9746bd477ed93", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=d5bb71c9f1042c0c931c7dddecc418233de6e30f", "patch": "@@ -456,6 +456,7 @@ define_dep_nodes!( <'tcx>\n     [eval_always] CoherenceInherentImplOverlapCheck,\n     [] CoherenceCheckTrait(DefId),\n     [eval_always] PrivacyAccessLevels(CrateNum),\n+    [eval_always] CheckPrivacy(CrateNum),\n     [eval_always] Analysis(CrateNum),\n \n     // Represents the MIR for a fn; also used as the task node for"}, {"sha": "0fef90c945e941e0c76bbb8790cdf5d12a86a9f6", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=d5bb71c9f1042c0c931c7dddecc418233de6e30f", "patch": "@@ -369,6 +369,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::privacy_access_levels<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::check_privacy<'tcx> {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"privacy checking\".into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::typeck_item_bodies<'tcx> {\n     fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"type-checking all item bodies\".into()"}, {"sha": "cb72ad6fe8bd9074ef76e7f9c2c0c9f571e74e70", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=d5bb71c9f1042c0c931c7dddecc418233de6e30f", "patch": "@@ -350,8 +350,9 @@ define_queries! { <'tcx>\n         [] fn check_match: CheckMatch(DefId)\n             -> Result<(), ErrorReported>,\n \n-        /// Performs the privacy check and computes \"access levels\".\n+        /// Performs part of the privacy check and computes \"access levels\".\n         [] fn privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Lrc<AccessLevels>,\n+        [] fn check_privacy: CheckPrivacy(CrateNum) -> (),\n     },\n \n     Other {"}, {"sha": "ff2639da13650d3809bb3621919b6459fd28ff74", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=d5bb71c9f1042c0c931c7dddecc418233de6e30f", "patch": "@@ -1251,6 +1251,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n             force!(crate_inherent_impls_overlap_check, LOCAL_CRATE)\n         },\n         DepKind::PrivacyAccessLevels => { force!(privacy_access_levels, LOCAL_CRATE); }\n+        DepKind::CheckPrivacy => { force!(check_privacy, LOCAL_CRATE); }\n         DepKind::MirBuilt => { force!(mir_built, def_id!()); }\n         DepKind::MirConstQualif => { force!(mir_const_qualif, def_id!()); }\n         DepKind::MirConst => { force!(mir_const, def_id!()); }"}, {"sha": "591583a1526d0e80d6968ad3876e1cfddcac6da7", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=d5bb71c9f1042c0c931c7dddecc418233de6e30f", "patch": "@@ -21,7 +21,7 @@ use rustc_borrowck as borrowck;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, ParallelIterator, par_iter};\n use rustc_incremental;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n@@ -278,17 +278,28 @@ fn analysis<'tcx>(\n \n     time(sess, \"misc checking\", || {\n         parallel!({\n-            time(sess, \"privacy checking\", || {\n-                rustc_privacy::check_crate(tcx)\n+            time(sess, \"privacy access levels\", || {\n+                tcx.ensure().privacy_access_levels(LOCAL_CRATE);\n             });\n-        }, {\n-            time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n-        },  {\n-            time(sess, \"unused lib feature checking\", || {\n-                stability::check_unused_or_stable_features(tcx)\n+            parallel!({\n+                time(sess, \"privacy checking\", || {\n+                    tcx.ensure().check_privacy(LOCAL_CRATE);\n+                });\n+            }, {\n+                time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n+            },  {\n+                time(sess, \"unused lib feature checking\", || {\n+                    stability::check_unused_or_stable_features(tcx)\n+                });\n+            }, {\n+                time(sess, \"lint checking\", || lint::check_crate(tcx));\n             });\n         }, {\n-            time(sess, \"lint checking\", || lint::check_crate(tcx));\n+            time(sess, \"privacy checking modules\", || {\n+                par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                    tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n+                });\n+            });\n         });\n     });\n "}, {"sha": "372a9230694249c446d1a0765a785e5018965124", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 36, "deletions": 42, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d5bb71c9f1042c0c931c7dddecc418233de6e30f", "patch": "@@ -1760,19 +1760,15 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         privacy_access_levels,\n+        check_privacy,\n         check_mod_privacy,\n         ..*providers\n     };\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Lrc<AccessLevels> {\n-    tcx.privacy_access_levels(LOCAL_CRATE)\n-}\n-\n fn check_mod_privacy<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n-\n     // Check privacy of names not checked in previous compilation stages.\n     let mut visitor = NamePrivacyVisitor {\n         tcx,\n@@ -1803,18 +1799,6 @@ fn privacy_access_levels<'tcx>(\n ) -> Lrc<AccessLevels> {\n     assert_eq!(krate, LOCAL_CRATE);\n \n-    let krate = tcx.hir().krate();\n-\n-    for &module in krate.modules.keys() {\n-        tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n-    }\n-\n-    let private_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_private.iter()\n-        .flat_map(|c| {\n-            tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n-        }).collect();\n-\n-\n     // Build up a set of all exported items in the AST. This is a set of all\n     // items which are reachable from external crates based on visibility.\n     let mut visitor = EmbargoVisitor {\n@@ -1824,7 +1808,7 @@ fn privacy_access_levels<'tcx>(\n         changed: false,\n     };\n     loop {\n-        intravisit::walk_crate(&mut visitor, krate);\n+        intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n         if visitor.changed {\n             visitor.changed = false;\n         } else {\n@@ -1833,36 +1817,46 @@ fn privacy_access_levels<'tcx>(\n     }\n     visitor.update(hir::CRATE_HIR_ID, Some(AccessLevel::Public));\n \n-    {\n-        let mut visitor = ObsoleteVisiblePrivateTypesVisitor {\n-            tcx,\n-            access_levels: &visitor.access_levels,\n-            in_variant: false,\n-            old_error_set: Default::default(),\n-        };\n-        intravisit::walk_crate(&mut visitor, krate);\n+    Lrc::new(visitor.access_levels)\n+}\n \n+fn check_privacy<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, krate: CrateNum) {\n+    assert_eq!(krate, LOCAL_CRATE);\n \n-        let has_pub_restricted = {\n-            let mut pub_restricted_visitor = PubRestrictedVisitor {\n-                tcx,\n-                has_pub_restricted: false\n-            };\n-            intravisit::walk_crate(&mut pub_restricted_visitor, krate);\n-            pub_restricted_visitor.has_pub_restricted\n-        };\n+    let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n \n-        // Check for private types and traits in public interfaces.\n-        let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n+    let krate = tcx.hir().krate();\n+\n+    let mut visitor = ObsoleteVisiblePrivateTypesVisitor {\n+        tcx,\n+        access_levels: &access_levels,\n+        in_variant: false,\n+        old_error_set: Default::default(),\n+    };\n+    intravisit::walk_crate(&mut visitor, krate);\n+\n+    let has_pub_restricted = {\n+        let mut pub_restricted_visitor = PubRestrictedVisitor {\n             tcx,\n-            has_pub_restricted,\n-            old_error_set: &visitor.old_error_set,\n-            private_crates\n+            has_pub_restricted: false\n         };\n-        krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n-    }\n+        intravisit::walk_crate(&mut pub_restricted_visitor, krate);\n+        pub_restricted_visitor.has_pub_restricted\n+    };\n \n-    Lrc::new(visitor.access_levels)\n+    let private_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_private.iter()\n+        .flat_map(|c| {\n+            tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n+        }).collect();\n+\n+    // Check for private types and traits in public interfaces.\n+    let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n+        tcx,\n+        has_pub_restricted,\n+        old_error_set: &visitor.old_error_set,\n+        private_crates\n+    };\n+    krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n }\n \n __build_diagnostic_array! { librustc_privacy, DIAGNOSTICS }"}, {"sha": "568d4dadc8cc47e0c983ae66ccc1c08bb82b6029", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5bb71c9f1042c0c931c7dddecc418233de6e30f/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=d5bb71c9f1042c0c931c7dddecc418233de6e30f", "patch": "@@ -1,3 +1,21 @@\n+error[E0446]: private type `m::Priv` in public interface\n+  --> $DIR/private-inferred-type.rs:61:36\n+   |\n+LL |     struct Priv;\n+   |     - `m::Priv` declared as private\n+...\n+LL |     impl TraitWithAssocTy for u8 { type AssocTy = Priv; }\n+   |                                    ^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n+error[E0446]: private type `adjust::S2` in public interface\n+  --> $DIR/private-inferred-type.rs:83:9\n+   |\n+LL |     struct S2;\n+   |     - `adjust::S2` declared as private\n+...\n+LL |         type Target = S2Alias; //~ ERROR private type `adjust::S2` in public interface\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:97:9\n    |\n@@ -202,24 +220,6 @@ error: type `m::Priv` is private\n LL |     match a { //~ ERROR type `m::Priv` is private\n    |           ^\n \n-error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-inferred-type.rs:61:36\n-   |\n-LL |     struct Priv;\n-   |     - `m::Priv` declared as private\n-...\n-LL |     impl TraitWithAssocTy for u8 { type AssocTy = Priv; }\n-   |                                    ^^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n-error[E0446]: private type `adjust::S2` in public interface\n-  --> $DIR/private-inferred-type.rs:83:9\n-   |\n-LL |     struct S2;\n-   |     - `adjust::S2` declared as private\n-...\n-LL |         type Target = S2Alias; //~ ERROR private type `adjust::S2` in public interface\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n error: aborting due to 33 previous errors\n \n For more information about this error, try `rustc --explain E0446`."}]}