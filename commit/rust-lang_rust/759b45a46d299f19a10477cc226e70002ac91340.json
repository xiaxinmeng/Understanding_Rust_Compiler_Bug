{"sha": "759b45a46d299f19a10477cc226e70002ac91340", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OWI0NWE0NmQyOTlmMTlhMTA0NzdjYzIyNmU3MDAwMmFjOTEzNDA=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-16T21:09:56Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-16T21:09:56Z"}, "message": "made is_negative(..) public (+doctest), fixed identity_op and precedence", "tree": {"sha": "f639ebfe83968e4b2509060947ca40b9416bede9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f639ebfe83968e4b2509060947ca40b9416bede9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/759b45a46d299f19a10477cc226e70002ac91340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/759b45a46d299f19a10477cc226e70002ac91340", "html_url": "https://github.com/rust-lang/rust/commit/759b45a46d299f19a10477cc226e70002ac91340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/759b45a46d299f19a10477cc226e70002ac91340/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1438e701069a6dbb6e71e1ea90f8e45aba865c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1438e701069a6dbb6e71e1ea90f8e45aba865c4", "html_url": "https://github.com/rust-lang/rust/commit/e1438e701069a6dbb6e71e1ea90f8e45aba865c4"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "bb74b3c71d102c6857dd68fc070eda1796200cfd", "filename": "src/consts.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/759b45a46d299f19a10477cc226e70002ac91340/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759b45a46d299f19a10477cc226e70002ac91340/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=759b45a46d299f19a10477cc226e70002ac91340", "patch": "@@ -246,7 +246,14 @@ fn neg_float_str(s: String) -> String {\n     }\n }\n \n-fn is_negative(ty: LitIntType) -> bool {\n+/// is the given LitIntType negative?\n+///\n+/// Examples\n+///\n+/// ```\n+/// assert!(is_negative(UnsuffixedIntLit(Minus)));\n+/// ```\n+pub fn is_negative(ty: LitIntType) -> bool {\n     match ty {\n         SignedIntLit(_, sign) | UnsuffixedIntLit(sign) => sign == Minus,\n         UnsignedIntLit(_) => false,"}, {"sha": "445bef0125bcc21f39fefeabcb7cfd3428b05270", "filename": "src/identity_op.rs", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/759b45a46d299f19a10477cc226e70002ac91340/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759b45a46d299f19a10477cc226e70002ac91340/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=759b45a46d299f19a10477cc226e70002ac91340", "patch": "@@ -7,6 +7,8 @@ use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::ptr::P;\n use syntax::codemap::Span;\n \n+use consts::{constant, Constant, is_negative};\n+use consts::ConstantVariant::ConstantInt;\n use utils::{span_lint, snippet};\n \n declare_lint! { pub IDENTITY_OP, Warn,\n@@ -47,35 +49,19 @@ impl LintPass for IdentityOp {\n \n \n fn check(cx: &Context, e: &Expr, m: i8, span: Span, arg: Span) {\n-    if have_lit(cx, e, m) {\n-        span_lint(cx, IDENTITY_OP, span, &format!(\n-            \"the operation is ineffective. Consider reducing it to `{}`\",\n-           snippet(cx, arg, \"..\")));\n-    }\n-}\n-\n-fn have_lit(cx: &Context, e : &Expr, m: i8) -> bool {\n-    match &e.node {\n-        &ExprUnary(UnNeg, ref litexp) => have_lit(cx, litexp, -m),\n-        &ExprLit(ref lit) => {\n-            match (&lit.node, m) {\n-                (&LitInt(0, _), 0) => true,\n-                (&LitInt(1, SignedIntLit(_, Plus)), 1) => true,\n-                (&LitInt(1, UnsuffixedIntLit(Plus)), 1) => true,\n-                (&LitInt(1, SignedIntLit(_, Minus)), -1) => true,\n-                (&LitInt(1, UnsuffixedIntLit(Minus)), -1) => true,\n-                _ => false\n+    if let Some(c) = constant(cx, e) {\n+        if c.needed_resolution { return; } // skip linting w/ lookup for now\n+        if let ConstantInt(v, ty) = c.constant {\n+            if match m {\n+                0 => v == 0,\n+                -1 => is_negative(ty),\n+                1 => !is_negative(ty),\n+                _ => unreachable!(),\n+            } {\n+                span_lint(cx, IDENTITY_OP, span, &format!(\n+                    \"the operation is ineffective. Consider reducing it to `{}`\",\n+                   snippet(cx, arg, \"..\")));\n             }\n-        },\n-        &ExprParen(ref p) => have_lit(cx, p, m),\n-        &ExprPath(_, _) => {\n-            match cx.tcx.def_map.borrow().get(&e.id) {\n-                Some(&PathResolution { base_def: DefConst(id), ..}) =>\n-                        lookup_const_by_id(cx.tcx, id, Option::None)\n-                        .map_or(false, |l| have_lit(cx, l, m)),\n-                _ => false\n-            }\n-        },\n-        _ => false\n+        }\n     }\n }"}, {"sha": "2765da5cf23b9258e0b1a0c67e734ac7b87359a3", "filename": "tests/compile-fail/cmp_owned.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/759b45a46d299f19a10477cc226e70002ac91340/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759b45a46d299f19a10477cc226e70002ac91340/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=759b45a46d299f19a10477cc226e70002ac91340", "patch": "@@ -13,5 +13,8 @@ fn main() {\n \n     x != \"foo\".to_owned(); //~ERROR this creates an owned instance\n \n+    // removed String::from_str(..), as it has finally been removed in 1.4.0\n+    // as of 2015-08-14\n+\n     x != String::from(\"foo\"); //~ERROR this creates an owned instance\n }"}, {"sha": "18e683e8a9e853234dc9622601cc9935401af49f", "filename": "tests/compile-fail/identity_op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/759b45a46d299f19a10477cc226e70002ac91340/tests%2Fcompile-fail%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759b45a46d299f19a10477cc226e70002ac91340/tests%2Fcompile-fail%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fidentity_op.rs?ref=759b45a46d299f19a10477cc226e70002ac91340", "patch": "@@ -11,14 +11,14 @@ fn main() {\n \n     x + 0;        //~ERROR the operation is ineffective\n     0 + x;        //~ERROR the operation is ineffective\n-    x - ZERO;     //~ERROR the operation is ineffective\n+    x - ZERO;     //no error, as we skip lookups (for now)\n     x | (0);      //~ERROR the operation is ineffective\n-    ((ZERO)) | x; //~ERROR the operation is ineffective\n+    ((ZERO)) | x; //no error, as we skip lookups (for now)\n \n     x * 1;        //~ERROR the operation is ineffective\n     1 * x;        //~ERROR the operation is ineffective\n-    x / ONE;      //~ERROR the operation is ineffective\n+    x / ONE;      //no error, as we skip lookups (for now)\n \n-    x & NEG_ONE;  //~ERROR the operation is ineffective\n+    x & NEG_ONE;  //no error, as we skip lookups (for now)\n     -1 & x;       //~ERROR the operation is ineffective\n }"}, {"sha": "ebb25f61b7583ed7a0830c04ad8527ea02efc8aa", "filename": "tests/compile-fail/precedence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/759b45a46d299f19a10477cc226e70002ac91340/tests%2Fcompile-fail%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759b45a46d299f19a10477cc226e70002ac91340/tests%2Fcompile-fail%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprecedence.rs?ref=759b45a46d299f19a10477cc226e70002ac91340", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(precedence)]\n+#[allow(identity_op)]\n #[allow(eq_op)]\n fn main() {\n     format!(\"{} vs. {}\", 1 << 2 + 3, (1 << 2) + 3); //~ERROR operator precedence can trip"}]}