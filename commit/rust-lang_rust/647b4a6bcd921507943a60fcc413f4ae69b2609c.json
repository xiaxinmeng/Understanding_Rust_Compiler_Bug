{"sha": "647b4a6bcd921507943a60fcc413f4ae69b2609c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0N2I0YTZiY2Q5MjE1MDc5NDNhNjBmY2M0MTNmNGFlNjliMjYwOWM=", "commit": {"author": {"name": "Jordi Boggiano", "email": "j.boggiano@seld.be", "date": "2013-06-29T02:53:52Z"}, "committer": {"name": "Jordi Boggiano", "email": "j.boggiano@seld.be", "date": "2013-06-29T02:53:52Z"}, "message": "Optimize str::each_split_within when it is called with large limits", "tree": {"sha": "5f756f4055d9eeacdd4c5b795cc8724517fd74ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f756f4055d9eeacdd4c5b795cc8724517fd74ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/647b4a6bcd921507943a60fcc413f4ae69b2609c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/647b4a6bcd921507943a60fcc413f4ae69b2609c", "html_url": "https://github.com/rust-lang/rust/commit/647b4a6bcd921507943a60fcc413f4ae69b2609c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/647b4a6bcd921507943a60fcc413f4ae69b2609c/comments", "author": {"login": "Seldaek", "id": 183678, "node_id": "MDQ6VXNlcjE4MzY3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seldaek", "html_url": "https://github.com/Seldaek", "followers_url": "https://api.github.com/users/Seldaek/followers", "following_url": "https://api.github.com/users/Seldaek/following{/other_user}", "gists_url": "https://api.github.com/users/Seldaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seldaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seldaek/subscriptions", "organizations_url": "https://api.github.com/users/Seldaek/orgs", "repos_url": "https://api.github.com/users/Seldaek/repos", "events_url": "https://api.github.com/users/Seldaek/events{/privacy}", "received_events_url": "https://api.github.com/users/Seldaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Seldaek", "id": 183678, "node_id": "MDQ6VXNlcjE4MzY3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seldaek", "html_url": "https://github.com/Seldaek", "followers_url": "https://api.github.com/users/Seldaek/followers", "following_url": "https://api.github.com/users/Seldaek/following{/other_user}", "gists_url": "https://api.github.com/users/Seldaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seldaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seldaek/subscriptions", "organizations_url": "https://api.github.com/users/Seldaek/orgs", "repos_url": "https://api.github.com/users/Seldaek/repos", "events_url": "https://api.github.com/users/Seldaek/events{/privacy}", "received_events_url": "https://api.github.com/users/Seldaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23934645aa7eb526e9f55da6b3d7c262dc1670f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e23934645aa7eb526e9f55da6b3d7c262dc1670f", "html_url": "https://github.com/rust-lang/rust/commit/e23934645aa7eb526e9f55da6b3d7c262dc1670f"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "acf136689dc660e30c737cea98f75d5c68ddb410", "filename": "src/libstd/str.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/647b4a6bcd921507943a60fcc413f4ae69b2609c/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647b4a6bcd921507943a60fcc413f4ae69b2609c/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=647b4a6bcd921507943a60fcc413f4ae69b2609c", "patch": "@@ -434,10 +434,17 @@ pub fn each_split_within<'a>(ss: &'a str,\n     let mut last_start = 0;\n     let mut last_end = 0;\n     let mut state = A;\n+    let mut fake_i = ss.len();\n+    let mut lim = lim;\n \n     let mut cont = true;\n     let slice: &fn() = || { cont = it(ss.slice(slice_start, last_end)) };\n \n+    // if the limit is larger than the string, lower it to save cycles\n+    if (lim >= fake_i) {\n+        lim = fake_i;\n+    }\n+\n     let machine: &fn((uint, char)) -> bool = |(i, c)| {\n         let whitespace = if char::is_whitespace(c)       { Ws }       else { Cr };\n         let limit      = if (i - slice_start + 1) <= lim { UnderLim } else { OverLim };\n@@ -466,7 +473,6 @@ pub fn each_split_within<'a>(ss: &'a str,\n     ss.iter().enumerate().advance(machine);\n \n     // Let the automaton 'run out' by supplying trailing whitespace\n-    let mut fake_i = ss.len();\n     while cont && match state { B | C => true, A => false } {\n         machine((fake_i, ' '));\n         fake_i += 1;\n@@ -2299,6 +2305,7 @@ mod tests {\n     use libc;\n     use ptr;\n     use str::*;\n+    use uint;\n     use vec;\n     use vec::{ImmutableVector, CopyableVector};\n     use cmp::{TotalOrd, Less, Equal, Greater};\n@@ -2444,6 +2451,8 @@ mod tests {\n         t(\"hello\", 15, [~\"hello\"]);\n         t(\"\\nMary had a little lamb\\nLittle lamb\\n\", 15,\n             [~\"Mary had a\", ~\"little lamb\", ~\"Little lamb\"]);\n+        t(\"\\nMary had a little lamb\\nLittle lamb\\n\", uint::max_value,\n+            [~\"Mary had a little lamb\\nLittle lamb\"]);\n     }\n \n     #[test]"}]}