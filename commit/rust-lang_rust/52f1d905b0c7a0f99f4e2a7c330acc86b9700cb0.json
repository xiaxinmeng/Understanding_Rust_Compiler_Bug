{"sha": "52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZjFkOTA1YjBjN2EwZjk5ZjRlMmE3YzMzMGFjYzg2Yjk3MDBjYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-19T12:31:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-19T12:31:53Z"}, "message": "auto merge of #11635 : thestinger/rust/zero-size-alloc, r=alexcrichton\n\nThe `malloc` family of functions may return a null pointer for a\r\nzero-size allocation, which should not be interpreted as an\r\nout-of-memory error.\r\n\r\nIf the implementation does not return a null pointer, then handling\r\nthis will result in memory savings for zero-size types.\r\n\r\nThis also switches some code to `malloc_raw` in order to maintain a\r\ncentralized point for handling out-of-memory in `rt::global_heap`.\r\n\r\nCloses #11634", "tree": {"sha": "331d42fcdd57363310a543e1ebad20b1e0554189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/331d42fcdd57363310a543e1ebad20b1e0554189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "html_url": "https://github.com/rust-lang/rust/commit/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53733c87b64855ac8f15ea3886e6a8ed6097545a", "url": "https://api.github.com/repos/rust-lang/rust/commits/53733c87b64855ac8f15ea3886e6a8ed6097545a", "html_url": "https://github.com/rust-lang/rust/commit/53733c87b64855ac8f15ea3886e6a8ed6097545a"}, {"sha": "ae2a5ecbf600495a80ae4d99853a2ed2c8f6b5e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2a5ecbf600495a80ae4d99853a2ed2c8f6b5e9", "html_url": "https://github.com/rust-lang/rust/commit/ae2a5ecbf600495a80ae4d99853a2ed2c8f6b5e9"}], "stats": {"total": 79, "additions": 42, "deletions": 37}, "files": [{"sha": "fc2caa13584d6dd4482693d0194344a5415f2f79", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "patch": "@@ -160,21 +160,19 @@ impl <T> Container for CVec<T> {\n \n #[cfg(test)]\n mod tests {\n-\n     use super::*;\n \n     use std::libc::*;\n     use std::libc;\n     use std::ptr;\n+    use std::rt::global_heap::malloc_raw;\n \n     fn malloc(n: uint) -> CVec<u8> {\n         unsafe {\n-            let mem = libc::malloc(n as size_t);\n-\n-            assert!(mem as int != 0);\n+            let mem = malloc_raw(n);\n \n             CVec::new_with_dtor(mem as *mut u8, n,\n-                proc() { libc::free(mem); })\n+                proc() { libc::free(mem as *c_void); })\n         }\n     }\n "}, {"sha": "9e1bc97708298c521de7f5a0bfd683e03eaea298", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "patch": "@@ -13,7 +13,7 @@\n use std::c_str::CString;\n use std::io::IoError;\n use std::io;\n-use std::libc::c_int;\n+use std::libc::{c_int, c_void};\n use std::libc;\n use std::os;\n use std::rt::rtio;\n@@ -548,7 +548,7 @@ pub fn readdir(p: &CString) -> IoResult<~[Path]> {\n             let p = Path::new(p);\n             let star = p.join(\"*\");\n             as_utf16_p(star.as_str().unwrap(), |path_ptr| {\n-                let wfd_ptr = malloc_raw(rust_list_dir_wfd_size() as uint);\n+                let wfd_ptr = malloc_raw(rust_list_dir_wfd_size() as uint) as *c_void;\n                 let find_handle = FindFirstFileW(path_ptr, wfd_ptr as HANDLE);\n                 if find_handle as libc::c_int != INVALID_HANDLE_VALUE {\n                     let mut paths = ~[];"}, {"sha": "a39f6ac286f160f37c9f19b239392484a7a3e1b8", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "patch": "@@ -19,6 +19,7 @@ use std::rt::task::BlockedTask;\n use std::str;\n use std::unstable::finally::Finally;\n use std::vec;\n+use std::rt::global_heap::malloc_raw;\n \n use homing::{HomingIO, HomeHandle};\n use stream::StreamWatcher;\n@@ -122,8 +123,7 @@ fn socket_name(sk: SocketNameKind, handle: *c_void) -> Result<SocketAddr, IoErro\n         // Allocate a sockaddr_storage\n         // since we don't know if it's ipv4 or ipv6\n         let size = uvll::rust_sockaddr_size();\n-        let name = libc::malloc(size as size_t);\n-        assert!(!name.is_null());\n+        let name = malloc_raw(size as uint) as *c_void;\n         let mut namelen = size;\n \n         let ret = match getsockname(handle, name, &mut namelen) {"}, {"sha": "0dcc4c5ef52173c3252c32d5d77c2f1d062e6b55", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "patch": "@@ -31,8 +31,9 @@\n \n use std::libc::{size_t, c_int, c_uint, c_void, c_char, c_double};\n use std::libc::ssize_t;\n-use std::libc::{malloc, free};\n+use std::libc::free;\n use std::libc;\n+use std::rt::global_heap::malloc_raw;\n \n #[cfg(test)]\n use std::libc::uintptr_t;\n@@ -374,9 +375,7 @@ pub enum uv_membership {\n pub unsafe fn malloc_handle(handle: uv_handle_type) -> *c_void {\n     assert!(handle != UV_UNKNOWN_HANDLE && handle != UV_HANDLE_TYPE_MAX);\n     let size = uv_handle_size(handle);\n-    let p = malloc(size);\n-    assert!(p.is_not_null());\n-    return p;\n+    malloc_raw(size as uint) as *c_void\n }\n \n pub unsafe fn free_handle(v: *c_void) {\n@@ -386,9 +385,7 @@ pub unsafe fn free_handle(v: *c_void) {\n pub unsafe fn malloc_req(req: uv_req_type) -> *c_void {\n     assert!(req != UV_UNKNOWN_REQ && req != UV_REQ_TYPE_MAX);\n     let size = uv_req_size(req);\n-    let p = malloc(size);\n-    assert!(p.is_not_null());\n-    return p;\n+    malloc_raw(size as uint) as *c_void\n }\n \n pub unsafe fn free_req(v: *c_void) {"}, {"sha": "77ac226a7f16de5be14466a8456cce5d1eeb5621", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "patch": "@@ -3223,7 +3223,7 @@ pub mod funcs {\n                 pub fn strtoul(s: *c_char, endp: **c_char, base: c_int)\n                                -> c_ulong;\n                 pub fn calloc(nobj: size_t, size: size_t) -> *c_void;\n-                pub fn malloc(size: size_t) -> *c_void;\n+                pub fn malloc(size: size_t) -> *mut c_void;\n                 pub fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;\n                 pub fn free(p: *c_void);\n                 pub fn exit(status: c_int) -> !;"}, {"sha": "00195f726cbce426624b31b240213aa04761df0d", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use libc::{c_void, c_char, size_t, uintptr_t, free, malloc, realloc};\n-use ptr::RawPtr;\n+use ptr::{RawPtr, mut_null};\n use unstable::intrinsics::{TyDesc, abort};\n use unstable::raw;\n use mem::size_of;\n@@ -31,24 +31,37 @@ fn align_to(size: uint, align: uint) -> uint {\n \n /// A wrapper around libc::malloc, aborting on out-of-memory\n #[inline]\n-pub unsafe fn malloc_raw(size: uint) -> *c_void {\n-    let p = malloc(size as size_t);\n-    if p.is_null() {\n-        // we need a non-allocating way to print an error here\n-        abort();\n+pub unsafe fn malloc_raw(size: uint) -> *mut c_void {\n+    // `malloc(0)` may allocate, but it may also return a null pointer\n+    // http://pubs.opengroup.org/onlinepubs/9699919799/functions/malloc.html\n+    if size == 0 {\n+        mut_null()\n+    } else {\n+        let p = malloc(size as size_t);\n+        if p.is_null() {\n+            // we need a non-allocating way to print an error here\n+            abort();\n+        }\n+        p\n     }\n-    p\n }\n \n /// A wrapper around libc::realloc, aborting on out-of-memory\n #[inline]\n pub unsafe fn realloc_raw(ptr: *mut c_void, size: uint) -> *mut c_void {\n-    let p = realloc(ptr, size as size_t);\n-    if p.is_null() {\n-        // we need a non-allocating way to print an error here\n-        abort();\n+    // `realloc(ptr, 0)` may allocate, but it may also return a null pointer\n+    // http://pubs.opengroup.org/onlinepubs/9699919799/functions/realloc.html\n+    if size == 0 {\n+        free(ptr as *c_void);\n+        mut_null()\n+    } else {\n+        let p = realloc(ptr, size as size_t);\n+        if p.is_null() {\n+            // we need a non-allocating way to print an error here\n+            abort();\n+        }\n+        p\n     }\n-    p\n }\n \n /// The allocator for unique pointers without contained managed pointers."}, {"sha": "81317b7de79fc427c40966d6638836c7fb4da466", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=52f1d905b0c7a0f99f4e2a7c330acc86b9700cb0", "patch": "@@ -167,24 +167,22 @@ mod imp {\n     use libc::c_void;\n     use libc;\n     use ptr;\n-    use ptr::RawPtr;\n+    use rt::global_heap::malloc_raw;\n \n     type pthread_mutex_t = libc::c_void;\n     type pthread_mutexattr_t = libc::c_void;\n     type pthread_cond_t = libc::c_void;\n     type pthread_condattr_t = libc::c_void;\n \n     pub unsafe fn init_lock() -> uint {\n-        let block = libc::malloc(rust_pthread_mutex_t_size() as libc::size_t);\n-        assert!(!block.is_null());\n+        let block = malloc_raw(rust_pthread_mutex_t_size() as uint) as *c_void;\n         let n = pthread_mutex_init(block, ptr::null());\n         assert_eq!(n, 0);\n         return block as uint;\n     }\n \n     pub unsafe fn init_cond() -> uint {\n-        let block = libc::malloc(rust_pthread_cond_t_size() as libc::size_t);\n-        assert!(!block.is_null());\n+        let block = malloc_raw(rust_pthread_cond_t_size() as uint) as *c_void;\n         let n = pthread_cond_init(block, ptr::null());\n         assert_eq!(n, 0);\n         return block as uint;\n@@ -249,14 +247,13 @@ mod imp {\n     use libc;\n     use libc::{HANDLE, BOOL, LPSECURITY_ATTRIBUTES, c_void, DWORD, LPCSTR};\n     use ptr;\n-    use ptr::RawPtr;\n+    use rt::global_heap::malloc_raw;\n \n     type LPCRITICAL_SECTION = *c_void;\n     static SPIN_COUNT: DWORD = 4000;\n \n     pub unsafe fn init_lock() -> uint {\n-        let block = libc::malloc(rust_crit_section_size() as libc::size_t);\n-        assert!(!block.is_null());\n+        let block = malloc_raw(rust_crit_section_size() as uint) as *c_void;\n         InitializeCriticalSectionAndSpinCount(block, SPIN_COUNT);\n         return block as uint;\n     }"}]}