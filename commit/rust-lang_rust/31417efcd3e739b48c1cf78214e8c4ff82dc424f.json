{"sha": "31417efcd3e739b48c1cf78214e8c4ff82dc424f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNDE3ZWZjZDNlNzM5YjQ4YzFjZjc4MjE0ZThjNGZmODJkYzQyNGY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-22T09:09:33Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-22T21:37:40Z"}, "message": "Remove crate `proc_macro_tokens`.", "tree": {"sha": "4413d6b5f496231eb9590bac942271a2bc197d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4413d6b5f496231eb9590bac942271a2bc197d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31417efcd3e739b48c1cf78214e8c4ff82dc424f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31417efcd3e739b48c1cf78214e8c4ff82dc424f", "html_url": "https://github.com/rust-lang/rust/commit/31417efcd3e739b48c1cf78214e8c4ff82dc424f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31417efcd3e739b48c1cf78214e8c4ff82dc424f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc60b1180b2974b8966c33100e9541845e1d2e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc60b1180b2974b8966c33100e9541845e1d2e8", "html_url": "https://github.com/rust-lang/rust/commit/2dc60b1180b2974b8966c33100e9541845e1d2e8"}], "stats": {"total": 206, "additions": 1, "deletions": 205}, "files": [{"sha": "f801605d9fa9714d7be374d6540ee41f76fba26e", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31417efcd3e739b48c1cf78214e8c4ff82dc424f/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/31417efcd3e739b48c1cf78214e8c4ff82dc424f/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=31417efcd3e739b48c1cf78214e8c4ff82dc424f", "patch": "@@ -60,7 +60,7 @@ RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_\n                 rustc_data_structures rustc_platform_intrinsics rustc_errors \\\n                 rustc_plugin rustc_metadata rustc_passes rustc_save_analysis \\\n                 rustc_const_eval rustc_const_math rustc_incremental proc_macro\n-HOST_CRATES := syntax syntax_ext proc_macro_tokens proc_macro_plugin syntax_pos $(RUSTC_CRATES) \\\n+HOST_CRATES := syntax syntax_ext proc_macro_plugin syntax_pos $(RUSTC_CRATES) \\\n \t\trustdoc fmt_macros flate arena graphviz log serialize\n TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n \n@@ -102,7 +102,6 @@ DEPS_syntax := std term serialize log arena libc rustc_bitflags std_unicode rust\n DEPS_syntax_ext := syntax syntax_pos rustc_errors fmt_macros proc_macro\n DEPS_proc_macro := syntax syntax_pos rustc_plugin log\n DEPS_syntax_pos := serialize\n-DEPS_proc_macro_tokens := syntax syntax_pos log\n DEPS_proc_macro_plugin := syntax syntax_pos rustc_plugin\n \n DEPS_rustc_const_math := std syntax log serialize rustc_i128"}, {"sha": "7db243c5eb9d0a5d17073dcb2f1888b3e87f723f", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31417efcd3e739b48c1cf78214e8c4ff82dc424f/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/31417efcd3e739b48c1cf78214e8c4ff82dc424f/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=31417efcd3e739b48c1cf78214e8c4ff82dc424f", "patch": "@@ -213,13 +213,6 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n-[[package]]\n-name = \"proc_macro_tokens\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"syntax 0.0.0\",\n-]\n-\n [[package]]\n name = \"rand\"\n version = \"0.0.0\""}, {"sha": "2cec4d7af54cb2023295415e5c1fcded0e28f819", "filename": "src/libproc_macro_tokens/Cargo.toml", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2FCargo.toml?ref=2dc60b1180b2974b8966c33100e9541845e1d2e8", "patch": "@@ -1,12 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"proc_macro_tokens\"\n-version = \"0.0.0\"\n-build = false\n-\n-[lib]\n-path = \"lib.rs\"\n-crate-type = [\"dylib\"]\n-\n-[dependencies]\n-syntax = { path = \"../libsyntax\" }"}, {"sha": "ed97d57cccd91dfc8625b2e11311646bd1e13bad", "filename": "src/libproc_macro_tokens/build.rs", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2Fbuild.rs?ref=2dc60b1180b2974b8966c33100e9541845e1d2e8", "patch": "@@ -1,85 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use syntax::ast::Ident;\n-use syntax::codemap::DUMMY_SP;\n-use syntax::parse::token::{self, Token};\n-use syntax::symbol::keywords;\n-use syntax::tokenstream::{self, TokenTree, TokenStream};\n-use std::rc::Rc;\n-\n-/// A wrapper around `TokenStream::concat` to avoid extra namespace specification and\n-/// provide TokenStream concatenation as a generic operator.\n-pub fn concat(ts1: TokenStream, ts2: TokenStream) -> TokenStream {\n-    TokenStream::concat([ts1, ts2].iter().cloned())\n-}\n-\n-/// Checks if two identifiers have the same name, disregarding context. This allows us to\n-/// fake 'reserved' keywords.\n-// FIXME We really want `free-identifier-=?` (a la Dybvig 1993). von Tander 2007 is\n-// probably the easiest way to do that.\n-pub fn ident_eq(tident: &TokenTree, id: Ident) -> bool {\n-    let tid = match *tident {\n-        TokenTree::Token(_, Token::Ident(ref id)) => id,\n-        _ => {\n-            return false;\n-        }\n-    };\n-\n-    tid.name == id.name\n-}\n-\n-// ____________________________________________________________________________________________\n-// Conversion operators\n-\n-/// Convert a `&str` into a Token.\n-pub fn str_to_token_ident(s: &str) -> Token {\n-    Token::Ident(Ident::from_str(s))\n-}\n-\n-/// Converts a keyword (from `syntax::parse::token::keywords`) into a Token that\n-/// corresponds to it.\n-pub fn keyword_to_token_ident(kw: keywords::Keyword) -> Token {\n-    Token::Ident(Ident::from_str(&kw.name().as_str()[..]))\n-}\n-\n-// ____________________________________________________________________________________________\n-// Build Procedures\n-\n-/// Generically takes a `ts` and delimiter and returns `ts` delimited by the specified\n-/// delimiter.\n-pub fn build_delimited(ts: TokenStream, delim: token::DelimToken) -> TokenStream {\n-    TokenTree::Delimited(DUMMY_SP, Rc::new(tokenstream::Delimited {\n-        delim: delim,\n-        open_span: DUMMY_SP,\n-        tts: ts.trees().cloned().collect(),\n-        close_span: DUMMY_SP,\n-    })).into()\n-}\n-\n-/// Takes `ts` and returns `[ts]`.\n-pub fn build_bracket_delimited(ts: TokenStream) -> TokenStream {\n-    build_delimited(ts, token::DelimToken::Bracket)\n-}\n-\n-/// Takes `ts` and returns `{ts}`.\n-pub fn build_brace_delimited(ts: TokenStream) -> TokenStream {\n-    build_delimited(ts, token::DelimToken::Brace)\n-}\n-\n-/// Takes `ts` and returns `(ts)`.\n-pub fn build_paren_delimited(ts: TokenStream) -> TokenStream {\n-    build_delimited(ts, token::DelimToken::Paren)\n-}\n-\n-/// Constructs `()`.\n-pub fn build_empty_args() -> TokenStream {\n-    build_paren_delimited(TokenStream::empty())\n-}"}, {"sha": "e20ed6899154e70775a880466f12d0b1191a43aa", "filename": "src/libproc_macro_tokens/lib.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2Flib.rs?ref=2dc60b1180b2974b8966c33100e9541845e1d2e8", "patch": "@@ -1,64 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! # Proc_Macro\n-//!\n-//! A library for procedural macro writers.\n-//!\n-//! ## Usage\n-//! This crate provides the prelude (at libproc_macro_tokens::prelude), which\n-//! provides a number of operations:\n-//! - `concat`, for concatenating two TokenStreams.\n-//! - `ident_eq`, for checking if two identifiers are equal regardless of syntax context.\n-//! - `str_to_token_ident`, for converting an `&str` into a Token.\n-//! - `keyword_to_token_delim`, for converting a `parse::token::keywords::Keyword` into a\n-//!    Token.\n-//! - `build_delimited`, for creating a new TokenStream from an existing one and a delimiter\n-//!    by wrapping the TokenStream in the delimiter.\n-//! - `build_bracket_delimited`, `build_brace_delimited`, and `build_paren_delimited`, for\n-//!    easing the above.\n-//! - `build_empty_args`, which returns a TokenStream containing `()`.\n-//! - `lex`, which takes an `&str` and returns the TokenStream it represents.\n-//!\n-//! ## TokenStreams\n-//!\n-//! TokenStreams serve as the basis of the macro system. They are, in essence, vectors of\n-//! TokenTrees, where indexing treats delimited values as a single term. That is, the term\n-//! `even(a+c) && even(b)` will be indexibly encoded as `even | (a+c) | even | (b)` where,\n-//! in reality, `(a+c)` is actually a decorated pointer to `a | + | c`.\n-//!\n-//! If a user has a TokenStream that is a single, delimited value, they can use\n-//! `maybe_delimited` to destruct it and receive the internal vector as a new TokenStream\n-//! as:\n-//! ```\n-//! `(a+c)`.maybe_delimited() ~> Some(a | + | c)`\n-//! ```\n-//!\n-//! Check the TokenStream documentation for more information; the structure also provides\n-//! cheap concatenation and slicing.\n-//!\n-\n-#![crate_name = \"proc_macro_tokens\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![deny(warnings)]\n-\n-#![feature(staged_api)]\n-#![feature(rustc_private)]\n-\n-extern crate syntax;\n-\n-pub mod build;\n-pub mod parse;\n-pub mod prelude;"}, {"sha": "d1c1e99bcdc7ae96609475f55fc635b22b5d7229", "filename": "src/libproc_macro_tokens/parse.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2Fparse.rs?ref=2dc60b1180b2974b8966c33100e9541845e1d2e8", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Parsing utilities for writing procedural macros.\n-\n-use syntax::parse::{ParseSess, filemap_to_tts};\n-use syntax::tokenstream::TokenStream;\n-\n-/// Map a string to tts, using a made-up filename. For example, `lex(\"15\")` will return a\n-/// TokenStream containing the literal 15.\n-pub fn lex(source_str: &str) -> TokenStream {\n-    let sess = ParseSess::new();\n-    let filemap =\n-        sess.codemap().new_filemap(\"<procmacro_lex>\".to_string(), None, source_str.to_owned());\n-    filemap_to_tts(&sess, filemap).into_iter().collect()\n-}"}, {"sha": "4c0c8ba6c6684b1c375236a4e13fefa2a5cbcfab", "filename": "src/libproc_macro_tokens/prelude.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc60b1180b2974b8966c33100e9541845e1d2e8/src%2Flibproc_macro_tokens%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2Fprelude.rs?ref=2dc60b1180b2974b8966c33100e9541845e1d2e8", "patch": "@@ -1,12 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub use build::*;\n-pub use parse::*;"}]}