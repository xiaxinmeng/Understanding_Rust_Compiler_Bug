{"sha": "92b72222541a86adbadf6661cccc854f9e9cdb39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYjcyMjIyNTQxYTg2YWRiYWRmNjY2MWNjY2M4NTRmOWU5Y2RiMzk=", "commit": {"author": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2015-02-11T12:36:44Z"}, "committer": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2015-02-11T12:36:44Z"}, "message": "openbsd don't support TLS", "tree": {"sha": "7929c34f3acb60dcee2a81e474f56404fc051c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7929c34f3acb60dcee2a81e474f56404fc051c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92b72222541a86adbadf6661cccc854f9e9cdb39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92b72222541a86adbadf6661cccc854f9e9cdb39", "html_url": "https://github.com/rust-lang/rust/commit/92b72222541a86adbadf6661cccc854f9e9cdb39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92b72222541a86adbadf6661cccc854f9e9cdb39/comments", "author": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2067dd2a86c059d83377fd2ad87a579846c266e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2067dd2a86c059d83377fd2ad87a579846c266e1", "html_url": "https://github.com/rust-lang/rust/commit/2067dd2a86c059d83377fd2ad87a579846c266e1"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "01220e7bc1fe1d0baf0460af5dab84a342b94e4a", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/92b72222541a86adbadf6661cccc854f9e9cdb39/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b72222541a86adbadf6661cccc854f9e9cdb39/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=92b72222541a86adbadf6661cccc854f9e9cdb39", "patch": "@@ -81,6 +81,7 @@ macro_rules! __scoped_thread_local_inner {\n         #[cfg_attr(not(any(windows,\n                            target_os = \"android\",\n                            target_os = \"ios\",\n+                           target_os = \"openbsd\",\n                            target_arch = \"aarch64\")),\n                    thread_local)]\n         static $name: ::std::thread_local::scoped::Key<$t> =\n@@ -90,6 +91,7 @@ macro_rules! __scoped_thread_local_inner {\n         #[cfg_attr(not(any(windows,\n                            target_os = \"android\",\n                            target_os = \"ios\",\n+                           target_os = \"openbsd\",\n                            target_arch = \"aarch64\")),\n                    thread_local)]\n         pub static $name: ::std::thread_local::scoped::Key<$t> =\n@@ -98,14 +100,22 @@ macro_rules! __scoped_thread_local_inner {\n     ($t:ty) => ({\n         use std::thread_local::scoped::Key as __Key;\n \n-        #[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\")))]\n+        #[cfg(not(any(windows,\n+                      target_os = \"android\",\n+                      target_os = \"ios\",\n+                      target_os = \"openbsd\",\n+                      target_arch = \"aarch64\")))]\n         const _INIT: __Key<$t> = __Key {\n             inner: ::std::thread_local::scoped::__impl::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: 0 as *mut _ },\n             }\n         };\n \n-        #[cfg(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\"))]\n+        #[cfg(any(windows,\n+                  target_os = \"android\",\n+                  target_os = \"ios\",\n+                  target_os = \"openbsd\",\n+                  target_arch = \"aarch64\"))]\n         const _INIT: __Key<$t> = __Key {\n             inner: ::std::thread_local::scoped::__impl::KeyInner {\n                 inner: ::std::thread_local::scoped::__impl::OS_INIT,\n@@ -205,7 +215,11 @@ impl<T> Key<T> {\n     }\n }\n \n-#[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\")))]\n+#[cfg(not(any(windows,\n+              target_os = \"android\",\n+              target_os = \"ios\",\n+              target_os = \"openbsd\",\n+              target_arch = \"aarch64\")))]\n mod imp {\n     use std::cell::UnsafeCell;\n \n@@ -223,7 +237,11 @@ mod imp {\n     }\n }\n \n-#[cfg(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\"))]\n+#[cfg(any(windows,\n+          target_os = \"android\",\n+          target_os = \"ios\",\n+          target_os = \"openbsd\",\n+          target_arch = \"aarch64\"))]\n mod imp {\n     use marker;\n     use sys_common::thread_local::StaticKey as OsStaticKey;"}]}