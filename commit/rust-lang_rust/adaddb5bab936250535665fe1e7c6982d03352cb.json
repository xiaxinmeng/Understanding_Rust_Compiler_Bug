{"sha": "adaddb5bab936250535665fe1e7c6982d03352cb", "node_id": "C_kwDOAAsO6NoAKGFkYWRkYjViYWI5MzYyNTA1MzU2NjVmZTFlN2M2OTgyZDAzMzUyY2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T01:15:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T01:15:47Z"}, "message": "Auto merge of #98526 - jyn514:download-llvm-outside-checkout, r=Mark-Simulacrum\n\nAllow using `download-ci-llvm = true` outside the git checkout\n\n`@bjorn3` noticed that this is already allowed today when download-llvm is disabled, but breaks with it enabled:\n```\n$ ./rust2/x.py build\nfatal: not a git repository (or any of the parent directories): .git\nthread 'main' panicked at 'command did not execute successfully: \"git\" \"rev-list\" \"--author=bors@rust-lang.org\" \"-n1\" \"--first-parent\" \"HEAD\" \"--\" \"/home/jnelson/rust-lang/rust2/src/llvm-project\" \"/home/jnelson/rust-lang/rust2/src/bootstrap/download-ci-llvm-stamp\" \"/home/jnelson/rust-lang/rust2/src/version\"\nexpected success, got: exit status: 128', src/bootstrap/native.rs:134:20\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```\n\nSupport it too for consistency. It's unclear to me when anyone would need to use this, but `@bjorn3`\nfeels we should support it, and it's not much additional effort to get it working.", "tree": {"sha": "81c99ebc57be6afd5a3e80aeee597efce9b260f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c99ebc57be6afd5a3e80aeee597efce9b260f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adaddb5bab936250535665fe1e7c6982d03352cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adaddb5bab936250535665fe1e7c6982d03352cb", "html_url": "https://github.com/rust-lang/rust/commit/adaddb5bab936250535665fe1e7c6982d03352cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adaddb5bab936250535665fe1e7c6982d03352cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b348fe21726a821144a51094ca762b12280df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b348fe21726a821144a51094ca762b12280df4", "html_url": "https://github.com/rust-lang/rust/commit/e1b348fe21726a821144a51094ca762b12280df4"}, {"sha": "56e42b87139154d6f782ccb333ee9f7db4bb99ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e42b87139154d6f782ccb333ee9f7db4bb99ef", "html_url": "https://github.com/rust-lang/rust/commit/56e42b87139154d6f782ccb333ee9f7db4bb99ef"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "39d86ccbdbf34cfaa0ae78de45bd6a1661f709d5", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=adaddb5bab936250535665fe1e7c6982d03352cb", "patch": "@@ -1126,11 +1126,7 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n-            config.download_rustc_commit = download_ci_rustc_commit(\n-                &config.stage0_metadata,\n-                rust.download_rustc,\n-                config.verbose > 0,\n-            );\n+            config.download_rustc_commit = download_ci_rustc_commit(&config, rust.download_rustc);\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;\n@@ -1302,6 +1298,15 @@ impl Config {\n         config\n     }\n \n+    /// A git invocation which runs inside the source directory.\n+    ///\n+    /// Use this rather than `Command::new(\"git\")` in order to support out-of-tree builds.\n+    pub(crate) fn git(&self) -> Command {\n+        let mut git = Command::new(\"git\");\n+        git.current_dir(&self.src);\n+        git\n+    }\n+\n     /// Try to find the relative path of `bindir`, otherwise return it in full.\n     pub fn bindir_relative(&self) -> &Path {\n         let bindir = &self.bindir;\n@@ -1451,9 +1456,8 @@ fn threads_from_config(v: u32) -> u32 {\n \n /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n fn download_ci_rustc_commit(\n-    stage0_metadata: &Stage0Metadata,\n+    config: &Config,\n     download_rustc: Option<StringOrBool>,\n-    verbose: bool,\n ) -> Option<String> {\n     // If `download-rustc` is not set, default to rebuilding.\n     let if_unchanged = match download_rustc {\n@@ -1466,17 +1470,18 @@ fn download_ci_rustc_commit(\n     };\n \n     // Handle running from a directory other than the top level\n-    let top_level = output(Command::new(\"git\").args(&[\"rev-parse\", \"--show-toplevel\"]));\n+    let top_level = output(config.git().args(&[\"rev-parse\", \"--show-toplevel\"]));\n     let top_level = top_level.trim_end();\n     let compiler = format!(\"{top_level}/compiler/\");\n     let library = format!(\"{top_level}/library/\");\n \n     // Look for a version to compare to based on the current commit.\n     // Only commits merged by bors will have CI artifacts.\n     let merge_base = output(\n-        Command::new(\"git\")\n+        config\n+            .git()\n             .arg(\"rev-list\")\n-            .arg(format!(\"--author={}\", stage0_metadata.config.git_merge_commit_email))\n+            .arg(format!(\"--author={}\", config.stage0_metadata.config.git_merge_commit_email))\n             .args(&[\"-n1\", \"--first-parent\", \"HEAD\"]),\n     );\n     let commit = merge_base.trim_end();\n@@ -1489,13 +1494,14 @@ fn download_ci_rustc_commit(\n     }\n \n     // Warn if there were changes to the compiler or standard library since the ancestor commit.\n-    let has_changes = !t!(Command::new(\"git\")\n+    let has_changes = !t!(config\n+        .git()\n         .args(&[\"diff-index\", \"--quiet\", &commit, \"--\", &compiler, &library])\n         .status())\n     .success();\n     if has_changes {\n         if if_unchanged {\n-            if verbose {\n+            if config.verbose > 0 {\n                 println!(\n                     \"warning: saw changes to compiler/ or library/ since {commit}; \\\n                           ignoring `download-rustc`\""}, {"sha": "37322670e656483864a662a7537db4d6fdd1650b", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=adaddb5bab936250535665fe1e7c6982d03352cb", "patch": "@@ -72,7 +72,9 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n         Err(_) => false,\n     };\n     if git_available {\n-        let in_working_tree = match Command::new(\"git\")\n+        let in_working_tree = match build\n+            .config\n+            .git()\n             .arg(\"rev-parse\")\n             .arg(\"--is-inside-work-tree\")\n             .stdout(Stdio::null())\n@@ -84,10 +86,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n         };\n         if in_working_tree {\n             let untracked_paths_output = output(\n-                Command::new(\"git\")\n-                    .arg(\"status\")\n-                    .arg(\"--porcelain\")\n-                    .arg(\"--untracked-files=normal\"),\n+                build.config.git().arg(\"status\").arg(\"--porcelain\").arg(\"--untracked-files=normal\"),\n             );\n             let untracked_paths = untracked_paths_output\n                 .lines()"}, {"sha": "c1190c9192d1ab3e5e95f9bb3ce3e09b5b135671", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=adaddb5bab936250535665fe1e7c6982d03352cb", "patch": "@@ -643,7 +643,8 @@ impl Build {\n             return;\n         }\n         let output = output(\n-            Command::new(\"git\")\n+            self.config\n+                .git()\n                 .args(&[\"config\", \"--file\"])\n                 .arg(&self.config.src.join(\".gitmodules\"))\n                 .args(&[\"--get-regexp\", \"path\"]),\n@@ -1280,12 +1281,12 @@ impl Build {\n         // That's our beta number!\n         // (Note that we use a `..` range, not the `...` symmetric difference.)\n         let count = output(\n-            Command::new(\"git\")\n+            self.config\n+                .git()\n                 .arg(\"rev-list\")\n                 .arg(\"--count\")\n                 .arg(\"--merges\")\n-                .arg(\"refs/remotes/origin/master..HEAD\")\n-                .current_dir(&self.src),\n+                .arg(\"refs/remotes/origin/master..HEAD\"),\n         );\n         let n = count.trim().parse().unwrap();\n         self.prerelease_version.set(Some(n));"}, {"sha": "01ba0169b20677c197d23fb5f8d23966eccc1da0", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=adaddb5bab936250535665fe1e7c6982d03352cb", "patch": "@@ -118,7 +118,7 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n     if !config.llvm_from_ci {\n         return;\n     }\n-    let mut rev_list = Command::new(\"git\");\n+    let mut rev_list = config.git();\n     rev_list.args(&[\n         PathBuf::from(\"rev-list\"),\n         format!(\"--author={}\", builder.config.stage0_metadata.config.git_merge_commit_email).into(),"}, {"sha": "a5a39a5a3cfc6355cc784d15ac65cb82944bfbf0", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaddb5bab936250535665fe1e7c6982d03352cb/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=adaddb5bab936250535665fe1e7c6982d03352cb", "patch": "@@ -136,7 +136,7 @@ pub fn setup(config: &Config, profile: Profile) {\n \n     println!();\n \n-    t!(install_git_hook_maybe(&config.src));\n+    t!(install_git_hook_maybe(&config));\n \n     println!();\n \n@@ -302,7 +302,7 @@ pub fn interactive_path() -> io::Result<Profile> {\n }\n \n // install a git hook to automatically run tidy --bless, if they want\n-fn install_git_hook_maybe(src_path: &Path) -> io::Result<()> {\n+fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n     let mut input = String::new();\n     println!(\n         \"Rust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n@@ -328,13 +328,12 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n     };\n \n     if should_install {\n-        let src = src_path.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n-        let git = t!(Command::new(\"git\").args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(\n-            |output| {\n+        let src = config.src.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n+        let git =\n+            t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n                 assert!(output.status.success(), \"failed to run `git`\");\n                 PathBuf::from(t!(String::from_utf8(output.stdout)).trim())\n-            }\n-        ));\n+            }));\n         let dst = git.join(\"hooks\").join(\"pre-push\");\n         match fs::hard_link(src, &dst) {\n             Err(e) => eprintln!("}]}