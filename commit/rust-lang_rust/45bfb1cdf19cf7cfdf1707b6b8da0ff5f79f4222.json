{"sha": "45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222", "node_id": "C_kwDOAAsO6NoAKDQ1YmZiMWNkZjE5Y2Y3Y2ZkZjE3MDdiNmI4ZGEwZmY1Zjc5ZjQyMjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-19T06:24:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-19T06:24:45Z"}, "message": "Rollup merge of #104553 - mwillsey:asinh-acosh-accuracy, r=thomcc\n\nImprove accuracy of asinh and acosh\n\nThis PR addresses the inaccuracy of `asinh` and `acosh` identified by the [Herbie](http://herbie.uwplse.org/) tool, `@pavpanchekha,` `@finnbear` in #104548. It also adds a couple tests that failed in the existing implementations and now pass.\n\nCloses #104548\n\nr? rust-lang/libs", "tree": {"sha": "ac95a49cac8a6cdf157ffcbd1b01230e5348d552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac95a49cac8a6cdf157ffcbd1b01230e5348d552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjeHatCRBK7hj4Ov3rIwAAaaoIAA0KBDN3UBr+NWMp0NFT/yj4\nxwccMDVzeBONhtqdiYrabw5eR84p+BH3tJXiEaEeIa9MnPdUbxSvIVJqGol1tXhD\n/MpKs7IX/JAWJWfbvA/hDJVyjhesfgSSHRPS0oFIbBfV+bA/MWHmA8c+yputspuu\n/3MNrCZgnmF8nEatxQK8oghafUG4pE0Eh9GChYwqF4bN6KabhhsVoEglk3iZ+ndp\ne9BYe/Wi6SPLrosqN7AWGz7GM2q/sjxijosgNzdGlL6F7tWPGT+hgxhqlu/q+vGM\nR1pWztwFpmGvSAGnwz5jKo60Yu+939U7dVks5lnZ0WnmhQfaEdxZVHHYgfRWmx0=\n=reV4\n-----END PGP SIGNATURE-----\n", "payload": "tree ac95a49cac8a6cdf157ffcbd1b01230e5348d552\nparent 5caac92dc05d72fef3122c4e21bd3b70c75fcbcb\nparent 26b23f4a378eeb266360465223cf60be2c84c3bd\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1668839085 +0530\ncommitter GitHub <noreply@github.com> 1668839085 +0530\n\nRollup merge of #104553 - mwillsey:asinh-acosh-accuracy, r=thomcc\n\nImprove accuracy of asinh and acosh\n\nThis PR addresses the inaccuracy of `asinh` and `acosh` identified by the [Herbie](http://herbie.uwplse.org/) tool, `@pavpanchekha,` `@finnbear` in #104548. It also adds a couple tests that failed in the existing implementations and now pass.\n\nCloses #104548\n\nr? rust-lang/libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222", "html_url": "https://github.com/rust-lang/rust/commit/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5caac92dc05d72fef3122c4e21bd3b70c75fcbcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5caac92dc05d72fef3122c4e21bd3b70c75fcbcb", "html_url": "https://github.com/rust-lang/rust/commit/5caac92dc05d72fef3122c4e21bd3b70c75fcbcb"}, {"sha": "26b23f4a378eeb266360465223cf60be2c84c3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b23f4a378eeb266360465223cf60be2c84c3bd", "html_url": "https://github.com/rust-lang/rust/commit/26b23f4a378eeb266360465223cf60be2c84c3bd"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "4e30076246314edb50cdf017b1f1aa00878a3d12", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222", "patch": "@@ -880,7 +880,9 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f32 {\n-        (self.abs() + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n+        let ax = self.abs();\n+        let ix = 1.0 / ax;\n+        (ax + (ax / (Self::hypot(1.0, ix) + ix))).ln_1p().copysign(self)\n     }\n \n     /// Inverse hyperbolic cosine function.\n@@ -900,7 +902,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f32 {\n-        if self < 1.0 { Self::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n+        if self < 1.0 {\n+            Self::NAN\n+        } else {\n+            (self + ((self - 1.0).sqrt() * (self + 1.0).sqrt())).ln()\n+        }\n     }\n \n     /// Inverse hyperbolic tangent function."}, {"sha": "6ee295de6163f3807fee36515ad138a61c10dc98", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222", "patch": "@@ -587,6 +587,11 @@ fn test_asinh() {\n     assert_approx_eq!((-2.0f32).asinh(), -1.443635475178810342493276740273105f32);\n     // regression test for the catastrophic cancellation fixed in 72486\n     assert_approx_eq!((-3000.0f32).asinh(), -8.699514775987968673236893537700647f32);\n+\n+    // test for low accuracy from issue 104548\n+    assert_approx_eq!(60.0f32, 60.0f32.sinh().asinh());\n+    // mul needed for approximate comparison to be meaningful\n+    assert_approx_eq!(1.0f32, 1e-15f32.sinh().asinh() * 1e15f32);\n }\n \n #[test]\n@@ -602,6 +607,9 @@ fn test_acosh() {\n     assert!(nan.acosh().is_nan());\n     assert_approx_eq!(2.0f32.acosh(), 1.31695789692481670862504634730796844f32);\n     assert_approx_eq!(3.0f32.acosh(), 1.76274717403908605046521864995958461f32);\n+\n+    // test for low accuracy from issue 104548\n+    assert_approx_eq!(60.0f32, 60.0f32.cosh().acosh());\n }\n \n #[test]"}, {"sha": "ec67fdad4f726f50ac11d503701fef61ab8664b5", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222", "patch": "@@ -882,7 +882,9 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f64 {\n-        (self.abs() + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n+        let ax = self.abs();\n+        let ix = 1.0 / ax;\n+        (ax + (ax / (Self::hypot(1.0, ix) + ix))).ln_1p().copysign(self)\n     }\n \n     /// Inverse hyperbolic cosine function.\n@@ -902,7 +904,11 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f64 {\n-        if self < 1.0 { Self::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n+        if self < 1.0 {\n+            Self::NAN\n+        } else {\n+            (self + ((self - 1.0).sqrt() * (self + 1.0).sqrt())).ln()\n+        }\n     }\n \n     /// Inverse hyperbolic tangent function."}, {"sha": "5b039d445ce14db91eabb7e6c570d6dc29cf0be5", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=45bfb1cdf19cf7cfdf1707b6b8da0ff5f79f4222", "patch": "@@ -575,6 +575,11 @@ fn test_asinh() {\n     assert_approx_eq!((-2.0f64).asinh(), -1.443635475178810342493276740273105f64);\n     // regression test for the catastrophic cancellation fixed in 72486\n     assert_approx_eq!((-67452098.07139316f64).asinh(), -18.72007542627454439398548429400083);\n+\n+    // test for low accuracy from issue 104548\n+    assert_approx_eq!(60.0f64, 60.0f64.sinh().asinh());\n+    // mul needed for approximate comparison to be meaningful\n+    assert_approx_eq!(1.0f64, 1e-15f64.sinh().asinh() * 1e15f64);\n }\n \n #[test]\n@@ -590,6 +595,9 @@ fn test_acosh() {\n     assert!(nan.acosh().is_nan());\n     assert_approx_eq!(2.0f64.acosh(), 1.31695789692481670862504634730796844f64);\n     assert_approx_eq!(3.0f64.acosh(), 1.76274717403908605046521864995958461f64);\n+\n+    // test for low accuracy from issue 104548\n+    assert_approx_eq!(60.0f64, 60.0f64.cosh().acosh());\n }\n \n #[test]"}]}