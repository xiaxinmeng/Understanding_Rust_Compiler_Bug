{"sha": "abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZmIxZDNjYTE0NjlkMDliMmMxN2U4ODFmODVlM2YwNmIyMzU3Yzk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-01-03T13:00:42Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-01-03T13:48:54Z"}, "message": "Add new lint on function naming check (the '_')", "tree": {"sha": "745775580297370222d52ba42e559ff968b9449e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/745775580297370222d52ba42e559ff968b9449e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "html_url": "https://github.com/rust-lang/rust/commit/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9912c2b00a047c6c19aa62ba90bb7d252f07d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9912c2b00a047c6c19aa62ba90bb7d252f07d4", "html_url": "https://github.com/rust-lang/rust/commit/4b9912c2b00a047c6c19aa62ba90bb7d252f07d4"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "2cd93274952d01d2ed9bf90395cae31d8d5ece7c", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 88 lints included in this crate:\n+There are 89 lints included in this crate:\n \n name                                                                                                     | default | meaning\n ---------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -24,6 +24,7 @@ name\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                   | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n [collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                         | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)           | warn    | finds functions that should be split up into multiple functions\n+[duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)| warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                 | warn    | empty `loop {}` detected\n [eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                           | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n [explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)           | warn    | for-looping with an explicit counter when `_.enumerate()` would do"}, {"sha": "6610173f2ddfaba871e16b9c45ea98ee5581f75a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "patch": "@@ -193,6 +193,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::REDUNDANT_PATTERN,\n         misc::TOPLEVEL_REF_ARG,\n         misc::USED_UNDERSCORE_BINDING,\n+        misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n         misc_early::UNNEEDED_FIELD_PATTERN,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,"}, {"sha": "77114ccb493d51579c73441b26a8f090bce8d9d5", "filename": "src/misc_early.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "patch": "@@ -1,8 +1,11 @@\n-//use rustc_front::hir::*;\n-\n use rustc::lint::*;\n \n+use std::collections::HashMap;\n+\n use syntax::ast::*;\n+use syntax::codemap::Span;\n+use syntax::print::pprust;\n+use syntax::visit::FnKind;\n \n use utils::{span_lint, span_help_and_lint};\n \n@@ -16,12 +19,22 @@ use utils::{span_lint, span_help_and_lint};\n declare_lint!(pub UNNEEDED_FIELD_PATTERN, Warn,\n               \"Struct fields are bound to a wildcard instead of using `..`\");\n \n+/// **What it does:** This lint `Warn`s on function arguments having the same name except one starts with '_'\n+///\n+/// **Why is this bad?** It makes source code documentation more difficult\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `fn foo(a: i32, _a: i32) {}`\n+declare_lint!(pub DUPLICATE_UNDERSCORE_ARGUMENT, Warn,\n+              \"Function arguments having names which only differ by an underscore\");\n+\n #[derive(Copy, Clone)]\n pub struct MiscEarly;\n \n impl LintPass for MiscEarly {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNNEEDED_FIELD_PATTERN)\n+        lint_array!(UNNEEDED_FIELD_PATTERN, DUPLICATE_UNDERSCORE_ARGUMENT)\n     }\n }\n \n@@ -77,4 +90,23 @@ impl EarlyLintPass for MiscEarly {\n             }\n         }\n     }\n+\n+    fn check_fn(&mut self, cx: &EarlyContext, _: FnKind, decl: &FnDecl, _: &Block, _: Span, _: NodeId) {\n+        let mut registered_names : HashMap<String, Span> = HashMap::new();\n+\n+        for ref arg in &decl.inputs {\n+            let arg_name = pprust::pat_to_string(&arg.pat);\n+\n+            if arg_name.starts_with(\"_\") {\n+                if let Some(correspondance) = registered_names.get(&arg_name[1..].to_owned()) {\n+                    span_lint(cx, DUPLICATE_UNDERSCORE_ARGUMENT, *correspondance,\n+                              &format!(\"`{}` already exists, having another argument having almost \\\n+                                        the same name makes code comprehension and documentation \\\n+                                        more difficult\", arg_name[1..].to_owned()));\n+                }\n+            } else {\n+                registered_names.insert(arg_name.to_owned(), arg.pat.span.clone());\n+            }\n+        }\n+    }\n }"}, {"sha": "4d908e7f02bc94775bd63cf9622a0f4e0fa70c3d", "filename": "tests/compile-fail/duplicate_underscore_argument.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/tests%2Fcompile-fail%2Fduplicate_underscore_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/tests%2Fcompile-fail%2Fduplicate_underscore_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fduplicate_underscore_argument.rs?ref=abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "patch": "@@ -0,0 +1,13 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(duplicate_underscore_argument)]\n+#[allow(dead_code, unused)]\n+\n+fn join_the_dark_side(darth: i32, _darth: i32) {} //~ERROR `darth` already exists\n+fn join_the_light_side(knight: i32, _master: i32) {} // the Force is strong with this one\n+\n+fn main() {\n+    join_the_dark_side(0, 0);\n+    join_the_light_side(0, 0);\n+}\n\\ No newline at end of file"}, {"sha": "9c7623d85b7105d5ee5c201b12ea5321c04eb529", "filename": "tests/compile-fail/unneeded_field_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/tests%2Fcompile-fail%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfb1d3ca1469d09b2c17e881f85e3f06b2357c9/tests%2Fcompile-fail%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funneeded_field_pattern.rs?ref=abfb1d3ca1469d09b2c17e881f85e3f06b2357c9", "patch": "@@ -23,4 +23,4 @@ fn main() {\n         Foo { b: 0, .. } => {} // should be OK\n         Foo { .. } => {} // and the Force might be with this one\n     }\n-}\n\\ No newline at end of file\n+}"}]}