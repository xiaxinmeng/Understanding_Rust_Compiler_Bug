{"sha": "baa6d557a7b965ff8277f940a43e0ce3df3b8913", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYTZkNTU3YTdiOTY1ZmY4Mjc3Zjk0MGE0M2UwY2UzZGYzYjg5MTM=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-01T19:46:14Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-01T19:46:14Z"}, "message": "In Thread::new, add a comment that a panic could cause a memory leak.", "tree": {"sha": "9df4e2e35e838a428357e81a8cb0b1910d6fa273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df4e2e35e838a428357e81a8cb0b1910d6fa273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa6d557a7b965ff8277f940a43e0ce3df3b8913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa6d557a7b965ff8277f940a43e0ce3df3b8913", "html_url": "https://github.com/rust-lang/rust/commit/baa6d557a7b965ff8277f940a43e0ce3df3b8913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa6d557a7b965ff8277f940a43e0ce3df3b8913/comments", "author": null, "committer": null, "parents": [{"sha": "5382347064ac47a2a5ac56b57cec0d91b9b40edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5382347064ac47a2a5ac56b57cec0d91b9b40edc", "html_url": "https://github.com/rust-lang/rust/commit/5382347064ac47a2a5ac56b57cec0d91b9b40edc"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "abc15b18e321a1e59cd02be16cc465116ad3daea", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=baa6d557a7b965ff8277f940a43e0ce3df3b8913", "patch": "@@ -31,12 +31,15 @@ impl Thread {\n         assert_eq!(libc::pthread_attr_setstacksize(&mut attr, stack_size), 0);\n \n         let ret = libc::pthread_create(&mut native, &attr, thread_start, p as *mut _);\n+        // Note: if the thread creation fails and this assert fails, then p will\n+        // be leaked. However, an alternative design could cause double-free\n+        // which is clearly worse.\n         assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n \n         return if ret != 0 {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n-            let _ = Box::from_raw(p);\n+            drop(Box::from_raw(p));\n             Err(io::Error::from_raw_os_error(ret))\n         } else {\n             Ok(Thread { id: native })"}, {"sha": "4f20a6453fc2701d2027a555459356a511ff4da0", "filename": "src/libstd/sys/hermit/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs?ref=baa6d557a7b965ff8277f940a43e0ce3df3b8913", "patch": "@@ -61,7 +61,7 @@ impl Thread {\n         return if ret != 0 {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n-            let _ = Box::from_raw(p);\n+            drop(Box::from_raw(p));\n             Err(io::Error::new(io::ErrorKind::Other, \"Unable to create thread!\"))\n         } else {\n             Ok(Thread { tid: tid })"}, {"sha": "aab5a92a7ad2a481b89d77f231a1276f1ff72218", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=baa6d557a7b965ff8277f940a43e0ce3df3b8913", "patch": "@@ -64,12 +64,15 @@ impl Thread {\n         };\n \n         let ret = libc::pthread_create(&mut native, &attr, thread_start, p as *mut _);\n+        // Note: if the thread creation fails and this assert fails, then p will\n+        // be leaked. However, an alternative design could cause double-free\n+        // which is clearly worse.\n         assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n \n         return if ret != 0 {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n-            let _ = Box::from_raw(p);\n+            drop(Box::from_raw(p));\n             Err(io::Error::from_raw_os_error(ret))\n         } else {\n             Ok(Thread { id: native })"}, {"sha": "4d0196e4b4de5877faeab1110102b3233c7adc68", "filename": "src/libstd/sys/vxworks/thread.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs?ref=baa6d557a7b965ff8277f940a43e0ce3df3b8913", "patch": "@@ -52,12 +52,15 @@ impl Thread {\n         };\n \n         let ret = libc::pthread_create(&mut native, &attr, thread_start, p as *mut _);\n+        // Note: if the thread creation fails and this assert fails, then p will\n+        // be leaked. However, an alternative design could cause double-free\n+        // which is clearly worse.\n         assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n \n         return if ret != 0 {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n-            let _ = Box::from_raw(p);\n+            drop(Box::from_raw(p));\n             Err(io::Error::from_raw_os_error(ret))\n         } else {\n             Ok(Thread { id: native })"}, {"sha": "38839ea5e90ed3a729d1830dbe19a5f8c3ebe830", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa6d557a7b965ff8277f940a43e0ce3df3b8913/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=baa6d557a7b965ff8277f940a43e0ce3df3b8913", "patch": "@@ -41,7 +41,7 @@ impl Thread {\n         return if ret as usize == 0 {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n-            let _ = Box::from_raw(p);\n+            drop(Box::from_raw(p));\n             Err(io::Error::last_os_error())\n         } else {\n             Ok(Thread { handle: Handle::new(ret) })"}]}