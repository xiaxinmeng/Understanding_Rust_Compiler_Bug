{"sha": "b6fb3e34117008f7f97094b0f1521116a4e66473", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZmIzZTM0MTE3MDA4ZjdmOTcwOTRiMGYxNTIxMTE2YTRlNjY0NzM=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2019-03-29T16:30:08Z"}, "committer": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2019-03-29T18:50:41Z"}, "message": "In doc examples, don't ignore read/write results\n\nCalling `Read::read` or `Write::write` without checking the returned\n`usize` value is almost always an error.  Example code in the\ndocumentation should demonstrate how to use the return value correctly.\nOtherwise, people might copy the example code thinking that it is okay\nto \"fire and forget\" these methods.", "tree": {"sha": "6b157ce90df8450313cee2b15d67d429bdd221b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b157ce90df8450313cee2b15d67d429bdd221b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6fb3e34117008f7f97094b0f1521116a4e66473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fb3e34117008f7f97094b0f1521116a4e66473", "html_url": "https://github.com/rust-lang/rust/commit/b6fb3e34117008f7f97094b0f1521116a4e66473", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6fb3e34117008f7f97094b0f1521116a4e66473/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2002b4b39a16760f37107cf02d7a91ff316d3073", "url": "https://api.github.com/repos/rust-lang/rust/commits/2002b4b39a16760f37107cf02d7a91ff316d3073", "html_url": "https://github.com/rust-lang/rust/commit/2002b4b39a16760f37107cf02d7a91ff316d3073"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "14a16f3fc0f045dde8e1bf29b3e7895e6ac4d7d7", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b6fb3e34117008f7f97094b0f1521116a4e66473/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fb3e34117008f7f97094b0f1521116a4e66473/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b6fb3e34117008f7f97094b0f1521116a4e66473", "patch": "@@ -24,9 +24,9 @@\n //!     let mut buffer = [0; 10];\n //!\n //!     // read up to 10 bytes\n-//!     f.read(&mut buffer)?;\n+//!     let n = f.read(&mut buffer)?;\n //!\n-//!     println!(\"The bytes: {:?}\", buffer);\n+//!     println!(\"The bytes: {:?}\", &buffer[..n]);\n //!     Ok(())\n //! }\n //! ```\n@@ -56,9 +56,9 @@\n //!     f.seek(SeekFrom::End(-10))?;\n //!\n //!     // read up to 10 bytes\n-//!     f.read(&mut buffer)?;\n+//!     let n = f.read(&mut buffer)?;\n //!\n-//!     println!(\"The bytes: {:?}\", buffer);\n+//!     println!(\"The bytes: {:?}\", &buffer[..n]);\n //!     Ok(())\n //! }\n //! ```\n@@ -537,7 +537,9 @@ pub trait Read {\n     ///     let mut buffer = [0; 10];\n     ///\n     ///     // read up to 10 bytes\n-    ///     f.read(&mut buffer[..])?;\n+    ///     let n = f.read(&mut buffer[..])?;\n+    ///\n+    ///     println!(\"The bytes: {:?}\", &buffer[..n]);\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -1062,12 +1064,23 @@ impl Initializer {\n /// use std::fs::File;\n ///\n /// fn main() -> std::io::Result<()> {\n+///     let data = b\"some bytes\";\n+///\n+///     let mut pos = 0;\n ///     let mut buffer = File::create(\"foo.txt\")?;\n ///\n-///     buffer.write(b\"some bytes\")?;\n+///     while pos < data.len() {\n+///         let bytes_written = buffer.write(&data[pos..])?;\n+///         pos += bytes_written;\n+///     }\n ///     Ok(())\n /// }\n /// ```\n+///\n+/// The trait also provides convenience methods like [`write_all`], which calls\n+/// `write` in a loop until its entire input has been written.\n+///\n+/// [`write_all`]: #method.write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Write {"}]}