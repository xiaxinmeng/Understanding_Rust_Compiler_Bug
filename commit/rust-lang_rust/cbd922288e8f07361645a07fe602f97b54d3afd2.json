{"sha": "cbd922288e8f07361645a07fe602f97b54d3afd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZDkyMjI4OGU4ZjA3MzYxNjQ1YTA3ZmU2MDJmOTdiNTRkM2FmZDI=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-16T16:57:12Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-16T17:00:51Z"}, "message": "Move stack access methods in the Machine implementations out of the enforce_ method group.", "tree": {"sha": "b72c34f2e8ba03d6e6316971612b165c1e35e8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72c34f2e8ba03d6e6316971612b165c1e35e8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd922288e8f07361645a07fe602f97b54d3afd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd922288e8f07361645a07fe602f97b54d3afd2", "html_url": "https://github.com/rust-lang/rust/commit/cbd922288e8f07361645a07fe602f97b54d3afd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd922288e8f07361645a07fe602f97b54d3afd2/comments", "author": null, "committer": null, "parents": [{"sha": "d41f8bf5fdc9ae9588cfcac968a24b131f9707ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d41f8bf5fdc9ae9588cfcac968a24b131f9707ee", "html_url": "https://github.com/rust-lang/rust/commit/d41f8bf5fdc9ae9588cfcac968a24b131f9707ee"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "30990853b516a9cd22568a3f97c895070aa19869", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cbd922288e8f07361645a07fe602f97b54d3afd2/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd922288e8f07361645a07fe602f97b54d3afd2/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=cbd922288e8f07361645a07fe602f97b54d3afd2", "patch": "@@ -190,20 +190,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         false\n     }\n \n-    #[inline(always)]\n-    fn stack(\n-        ecx: &'a InterpCx<'mir, 'tcx, Self>,\n-    ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n-        &ecx.machine.stack\n-    }\n-\n-    #[inline(always)]\n-    fn stack_mut(\n-        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n-    ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n-        &mut ecx.machine.stack\n-    }\n-\n     #[inline(always)]\n     fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         false // for now, we don't enforce validity\n@@ -367,6 +353,20 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Ok(frame)\n     }\n \n+    #[inline(always)]\n+    fn stack(\n+        ecx: &'a InterpCx<'mir, 'tcx, Self>,\n+    ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n+        &ecx.machine.stack\n+    }\n+\n+    #[inline(always)]\n+    fn stack_mut(\n+        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n+    ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n+        &mut ecx.machine.stack\n+    }\n+\n     fn before_access_global(\n         memory_extra: &MemoryExtra,\n         alloc_id: AllocId,"}, {"sha": "77a9be0ed35d8d3f4a8c554db8859dd6afa32588", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cbd922288e8f07361645a07fe602f97b54d3afd2/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd922288e8f07361645a07fe602f97b54d3afd2/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cbd922288e8f07361645a07fe602f97b54d3afd2", "patch": "@@ -187,20 +187,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         false\n     }\n \n-    #[inline(always)]\n-    fn stack(\n-        ecx: &'a InterpCx<'mir, 'tcx, Self>,\n-    ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n-        &ecx.machine.stack\n-    }\n-\n-    #[inline(always)]\n-    fn stack_mut(\n-        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n-    ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n-        &mut ecx.machine.stack\n-    }\n-\n     #[inline(always)]\n     fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         false\n@@ -319,6 +305,20 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     ) -> InterpResult<'tcx, Frame<'mir, 'tcx>> {\n         Ok(frame)\n     }\n+\n+    #[inline(always)]\n+    fn stack(\n+        ecx: &'a InterpCx<'mir, 'tcx, Self>,\n+    ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n+        &ecx.machine.stack\n+    }\n+\n+    #[inline(always)]\n+    fn stack_mut(\n+        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n+    ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n+        &mut ecx.machine.stack\n+    }\n }\n \n /// Finds optimization opportunities on the MIR."}]}