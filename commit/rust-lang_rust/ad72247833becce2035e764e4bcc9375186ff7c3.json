{"sha": "ad72247833becce2035e764e4bcc9375186ff7c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzIyNDc4MzNiZWNjZTIwMzVlNzY0ZTRiY2M5Mzc1MTg2ZmY3YzM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-25T11:05:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-25T11:05:14Z"}, "message": "Rollup merge of #85605 - ptrojahn:closure_struct, r=matthewjasper\n\nReplace Local::new(1) with CAPTURE_STRUCT_LOCAL", "tree": {"sha": "95fe74bcb47baa2decef4ed09582f102b51416f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95fe74bcb47baa2decef4ed09582f102b51416f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad72247833becce2035e764e4bcc9375186ff7c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrNnqCRBK7hj4Ov3rIwAAIQ8IAFqBEVbV1ptCMrZqA7d09eEI\ncua8eHGVHXRIWWQldOXVq282Se16tYQZzPw7FTKDnBuji1kFZeO+aByaTb71/Jjm\no8cubyg99bDyvzrRkhXEWWXDWmXDOW8WaBSnXRMnDU3zFN1q77gkmD4sEmkxBqpK\nVOWE40Wm7SGM32WCZndx+6e923uPKy4qbdT9OVVMMknmlWHW+MGgHdwjVyhDEz0x\nbmE82dvIzaGZ/K828YfUMmukDwXXzxcQzmVLHU5wBJSK9Ta0BMwR9S188WYD2YsZ\nraEkcHw3/WrfNgpeY7PgxzJFMv9Ufz3H3qGmPljkknzo+QyG9IiRSj9DKZzm/6w=\n=caHs\n-----END PGP SIGNATURE-----\n", "payload": "tree 95fe74bcb47baa2decef4ed09582f102b51416f9\nparent 6b0b81b098835615d40028680c46d005cfaa9eab\nparent 0a80cc4d83e8f38bbb771e4d7b3493229e1d9c55\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621940714 +0200\ncommitter GitHub <noreply@github.com> 1621940714 +0200\n\nRollup merge of #85605 - ptrojahn:closure_struct, r=matthewjasper\n\nReplace Local::new(1) with CAPTURE_STRUCT_LOCAL\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad72247833becce2035e764e4bcc9375186ff7c3", "html_url": "https://github.com/rust-lang/rust/commit/ad72247833becce2035e764e4bcc9375186ff7c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad72247833becce2035e764e4bcc9375186ff7c3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b0b81b098835615d40028680c46d005cfaa9eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0b81b098835615d40028680c46d005cfaa9eab", "html_url": "https://github.com/rust-lang/rust/commit/6b0b81b098835615d40028680c46d005cfaa9eab"}, {"sha": "0a80cc4d83e8f38bbb771e4d7b3493229e1d9c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a80cc4d83e8f38bbb771e4d7b3493229e1d9c55", "html_url": "https://github.com/rust-lang/rust/commit/0a80cc4d83e8f38bbb771e4d7b3493229e1d9c55"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "0706a057dd0c6d6d335989d6ce9663e1ab85b18d", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=ad72247833becce2035e764e4bcc9375186ff7c3", "patch": "@@ -1,7 +1,7 @@\n use crate::hir::place::{\n     Place as HirPlace, PlaceBase as HirPlaceBase, ProjectionKind as HirProjectionKind,\n };\n-use crate::ty;\n+use crate::{mir, ty};\n \n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_hir as hir;\n@@ -12,6 +12,10 @@ use super::{Ty, TyCtxt};\n \n use self::BorrowKind::*;\n \n+// Captures are represented using fields inside a structure.\n+// This represents accessing self in the closure structure\n+pub const CAPTURE_STRUCT_LOCAL: mir::Local = mir::Local::from_u32(1);\n+\n #[derive(\n     Clone,\n     Copy,"}, {"sha": "8b0761889b83453b9d205d5418a57f4e14bb01e5", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=ad72247833becce2035e764e4bcc9375186ff7c3", "patch": "@@ -4,10 +4,9 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n-use rustc_index::vec::Idx;\n use rustc_middle::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory,\n-    FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n+    FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TypeFoldable};\n@@ -1274,7 +1273,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         bug!(\"temporary or return pointer with a name\")\n                     }\n                     LocalKind::Var => \"local variable \",\n-                    LocalKind::Arg if !self.upvars.is_empty() && local == Local::new(1) => {\n+                    LocalKind::Arg\n+                        if !self.upvars.is_empty() && local == ty::CAPTURE_STRUCT_LOCAL =>\n+                    {\n                         \"variable captured by `move` \"\n                     }\n                     LocalKind::Arg => \"function parameter \","}, {"sha": "d2b156610476c9f561d8f6dd4a85cd6e087aa652", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=ad72247833becce2035e764e4bcc9375186ff7c3", "patch": "@@ -1,6 +1,5 @@\n use rustc_hir as hir;\n use rustc_hir::Node;\n-use rustc_index::vec::Idx;\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -115,12 +114,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n             PlaceRef { local: _, projection: [proj_base @ .., ProjectionElem::Deref] } => {\n-                if the_place_err.local == Local::new(1)\n+                if the_place_err.local == ty::CAPTURE_STRUCT_LOCAL\n                     && proj_base.is_empty()\n                     && !self.upvars.is_empty()\n                 {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n-                    debug_assert!(self.body.local_decls[Local::new(1)].ty.is_region_ptr());\n+                    debug_assert!(\n+                        self.body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty.is_region_ptr()\n+                    );\n                     debug_assert!(is_closure_or_generator(\n                         Place::ty_from(\n                             the_place_err.local,\n@@ -478,11 +479,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            PlaceRef {\n-                local,\n-                projection: [ProjectionElem::Deref],\n-                // FIXME document what is this 1 magic number about\n-            } if local == Local::new(1) && !self.upvars.is_empty() => {\n+            PlaceRef { local, projection: [ProjectionElem::Deref] }\n+                if local == ty::CAPTURE_STRUCT_LOCAL && !self.upvars.is_empty() =>\n+            {\n                 self.expected_fn_found_fn_mut_call(&mut err, span, act);\n             }\n "}, {"sha": "5511cd4c73b7de6d4ac8a7dccae4bc28f9cb22a0", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=ad72247833becce2035e764e4bcc9375186ff7c3", "patch": "@@ -209,9 +209,7 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n     match from_builder.base {\n         PlaceBase::Local(_) => Ok(from_builder),\n         PlaceBase::Upvar { var_hir_id, closure_def_id, closure_kind } => {\n-            // Captures are represented using fields inside a structure.\n-            // This represents accessing self in the closure structure\n-            let mut upvar_resolved_place_builder = PlaceBuilder::from(Local::new(1));\n+            let mut upvar_resolved_place_builder = PlaceBuilder::from(ty::CAPTURE_STRUCT_LOCAL);\n             match closure_kind {\n                 ty::ClosureKind::Fn | ty::ClosureKind::FnMut => {\n                     upvar_resolved_place_builder = upvar_resolved_place_builder.deref();"}, {"sha": "a19ee80243844bd35724c85c38c425f2ac269281", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=ad72247833becce2035e764e4bcc9375186ff7c3", "patch": "@@ -446,7 +446,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     } => {\n                         // Not in a closure\n                         debug_assert!(\n-                            local == Local::new(1),\n+                            local == ty::CAPTURE_STRUCT_LOCAL,\n                             \"Expected local to be Local(1), found {:?}\",\n                             local\n                         );"}, {"sha": "10d6521e7debaab8ebbd11b30ff7aaa623168a16", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72247833becce2035e764e4bcc9375186ff7c3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=ad72247833becce2035e764e4bcc9375186ff7c3", "patch": "@@ -953,9 +953,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // the given closure and use the necessary information to create upvar\n         // debuginfo and to fill `self.upvar_mutbls`.\n         if hir_typeck_results.closure_min_captures.get(&fn_def_id).is_some() {\n-            let closure_env_arg = Local::new(1);\n             let mut closure_env_projs = vec![];\n-            let mut closure_ty = self.local_decls[closure_env_arg].ty;\n+            let mut closure_ty = self.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty;\n             if let ty::Ref(_, ty, _) = closure_ty.kind() {\n                 closure_env_projs.push(ProjectionElem::Deref);\n                 closure_ty = ty;\n@@ -1001,7 +1000,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         name,\n                         source_info: SourceInfo::outermost(tcx_hir.span(var_id)),\n                         value: VarDebugInfoContents::Place(Place {\n-                            local: closure_env_arg,\n+                            local: ty::CAPTURE_STRUCT_LOCAL,\n                             projection: tcx.intern_place_elems(&projs),\n                         }),\n                     });"}]}