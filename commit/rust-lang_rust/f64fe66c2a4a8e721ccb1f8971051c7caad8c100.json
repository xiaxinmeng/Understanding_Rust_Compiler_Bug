{"sha": "f64fe66c2a4a8e721ccb1f8971051c7caad8c100", "node_id": "C_kwDOAAsO6NoAKGY2NGZlNjZjMmE0YThlNzIxY2NiMWY4OTcxMDUxYzdjYWFkOGMxMDA", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-02-28T19:42:30Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-02-28T19:42:30Z"}, "message": "Add tuple to render_const_scalar", "tree": {"sha": "0701fc66eba61f6c2d06c80bb1dbb2a52b53d65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0701fc66eba61f6c2d06c80bb1dbb2a52b53d65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f64fe66c2a4a8e721ccb1f8971051c7caad8c100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f64fe66c2a4a8e721ccb1f8971051c7caad8c100", "html_url": "https://github.com/rust-lang/rust/commit/f64fe66c2a4a8e721ccb1f8971051c7caad8c100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f64fe66c2a4a8e721ccb1f8971051c7caad8c100/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f01ae877dfd26277a52630c9e40724db23ff8fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f01ae877dfd26277a52630c9e40724db23ff8fc", "html_url": "https://github.com/rust-lang/rust/commit/7f01ae877dfd26277a52630c9e40724db23ff8fc"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "3123ddb985b25c67f9204b623a4509e64748e8e0", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f64fe66c2a4a8e721ccb1f8971051c7caad8c100/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64fe66c2a4a8e721ccb1f8971051c7caad8c100/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=f64fe66c2a4a8e721ccb1f8971051c7caad8c100", "patch": "@@ -425,8 +425,36 @@ fn render_const_scalar(\n                 let s = std::str::from_utf8(bytes).unwrap_or(\"<utf8-error>\");\n                 write!(f, \"{s:?}\")\n             }\n-            _ => f.write_str(\"<error>\"),\n+            _ => f.write_str(\"<ref-not-supported>\"),\n         },\n+        chalk_ir::TyKind::Tuple(_, subst) => {\n+            // FIXME: Remove this line. If the target data layout is independent\n+            // of the krate, the `db.target_data_layout` and its callers like `layout_of_ty` don't need\n+            // to get krate. Otherwise, we need to get krate from the final callers of the hir display\n+            // infrastructure and have it here as a field on `f`.\n+            let krate = *f.db.crate_graph().crates_in_topological_order().last().unwrap();\n+            let Ok(layout) = layout_of_ty(f.db, ty, krate) else {\n+                return f.write_str(\"<layout-error>\");\n+            };\n+            f.write_str(\"(\")?;\n+            let mut first = true;\n+            for (id, ty) in subst.iter(Interner).enumerate() {\n+                if first {\n+                    first = false;\n+                } else {\n+                    f.write_str(\", \")?;\n+                }\n+                let ty = ty.assert_ty_ref(Interner); // Tuple only has type argument\n+                let offset = layout.fields.offset(id).bytes_usize();\n+                let Ok(layout) = layout_of_ty(f.db, &ty, krate) else {\n+                    f.write_str(\"<layout-error>\")?;\n+                    continue;\n+                };\n+                let size = layout.size.bytes_usize();\n+                render_const_scalar(f, &b[offset..offset + size], memory_map, &ty)?;\n+            }\n+            f.write_str(\")\")\n+        }\n         chalk_ir::TyKind::Adt(adt, subst) => match adt.0 {\n             hir_def::AdtId::StructId(s) => {\n                 let data = f.db.struct_data(s);\n@@ -457,7 +485,7 @@ fn render_const_scalar(\n                                 render_field(f, id)?;\n                             }\n                             for (id, data) in it {\n-                                write!(f, \",  {}: \", data.name)?;\n+                                write!(f, \", {}: \", data.name)?;\n                                 render_field(f, id)?;\n                             }\n                             write!(f, \" }}\")?;\n@@ -481,7 +509,7 @@ fn render_const_scalar(\n             hir_def::AdtId::UnionId(u) => write!(f, \"{}\", f.db.union_data(u).name),\n             hir_def::AdtId::EnumId(_) => f.write_str(\"<enum-not-supported>\"),\n         },\n-        _ => f.write_str(\"<error>\"),\n+        _ => f.write_str(\"<not-supported>\"),\n     }\n }\n "}, {"sha": "b29b57d134ed0fe1bc0609bcdc31c637d66b3dd5", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f64fe66c2a4a8e721ccb1f8971051c7caad8c100/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64fe66c2a4a8e721ccb1f8971051c7caad8c100/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=f64fe66c2a4a8e721ccb1f8971051c7caad8c100", "patch": "@@ -573,6 +573,27 @@ const foo$0: u32 = {\n     );\n }\n \n+#[test]\n+fn hover_eval_complex_constants() {\n+    check(\n+        r#\"\n+        struct X { f1: (), f2: i32 }\n+        const foo$0: (i8, X, i64) = (1, X { f2: 5 - 1, f1: () }, 1 - 2);\n+        \"#,\n+        expect![[r#\"\n+            *foo*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const foo: (i8, X, i64) = (1, X { f1: (), f2: 4 }, -1)\n+            ```\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn hover_default_generic_types() {\n     check("}]}