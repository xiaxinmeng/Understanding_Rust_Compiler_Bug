{"sha": "a5da660bd5953c046db5f0bff854c00d830da9c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZGE2NjBiZDU5NTNjMDQ2ZGI1ZjBiZmY4NTRjMDBkODMwZGE5Yzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-04T13:40:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-04T13:40:38Z"}, "message": "Merge #3445\n\n3445: Minor cleanup r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "65303fe18462e28adf21d8e7fab43838111f2743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65303fe18462e28adf21d8e7fab43838111f2743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5da660bd5953c046db5f0bff854c00d830da9c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeX6/WCRBK7hj4Ov3rIwAAdHIIADl+rU1Wel0mK6Dwy+Ezjam8\nccSVYnluKv4+aZ8kb5WYJUIWCY4pBU9AAzFPh5JA3iVTnWOxPoKrLtNK9n9op7YL\nWAzx137A3NKVgbxGk4VzOdi3hkpztMOU8Ube78tBjUOOF5rmzwKDUZVVz5K2PPtz\nNmJizu3wnHlQnad8qU+aIeOCaa403mJkHP10q3Ayw4S+/r+jq7kx4Ru+y38cQm/d\nIEiOHCNh9eSmWiW4ZLOaBJkoxiSLDTEKAnlQPi2qywilbpmZfy8pP4GqFMGGePoP\n/EBCbJAiyBvS+7AK1DiA3ACyDZo+GiguWlg3aBrzCpjJenCL9ho+9toDpXULAwc=\n=SXgg\n-----END PGP SIGNATURE-----\n", "payload": "tree 65303fe18462e28adf21d8e7fab43838111f2743\nparent 1113f73ee270c0001429a6be306e4debb6079e45\nparent c21babc58bee5efe918f6c086e787817f0738de8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583329238 +0000\ncommitter GitHub <noreply@github.com> 1583329238 +0000\n\nMerge #3445\n\n3445: Minor cleanup r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5da660bd5953c046db5f0bff854c00d830da9c8", "html_url": "https://github.com/rust-lang/rust/commit/a5da660bd5953c046db5f0bff854c00d830da9c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5da660bd5953c046db5f0bff854c00d830da9c8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1113f73ee270c0001429a6be306e4debb6079e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/1113f73ee270c0001429a6be306e4debb6079e45", "html_url": "https://github.com/rust-lang/rust/commit/1113f73ee270c0001429a6be306e4debb6079e45"}, {"sha": "c21babc58bee5efe918f6c086e787817f0738de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21babc58bee5efe918f6c086e787817f0738de8", "html_url": "https://github.com/rust-lang/rust/commit/c21babc58bee5efe918f6c086e787817f0738de8"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "33c566025e958eed070e9ed27966f8470225ba8d", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a5da660bd5953c046db5f0bff854c00d830da9c8/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5da660bd5953c046db5f0bff854c00d830da9c8/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=a5da660bd5953c046db5f0bff854c00d830da9c8", "patch": "@@ -110,32 +110,30 @@ impl SourceAnalyzer {\n     fn expand_expr(\n         &self,\n         db: &impl HirDatabase,\n-        expr: InFile<&ast::Expr>,\n+        expr: InFile<ast::MacroCall>,\n     ) -> Option<InFile<ast::Expr>> {\n-        let macro_call = ast::MacroCall::cast(expr.value.syntax().clone())?;\n-        let macro_file =\n-            self.body_source_map.as_ref()?.node_macro_file(expr.with_value(&macro_call))?;\n+        let macro_file = self.body_source_map.as_ref()?.node_macro_file(expr.as_ref())?;\n         let expanded = db.parse_or_expand(macro_file)?;\n-        let kind = expanded.kind();\n-        let expr = InFile::new(macro_file, ast::Expr::cast(expanded)?);\n \n-        if ast::MacroCall::can_cast(kind) {\n-            self.expand_expr(db, expr.as_ref())\n-        } else {\n-            Some(expr)\n-        }\n+        let res = match ast::MacroCall::cast(expanded.clone()) {\n+            Some(call) => self.expand_expr(db, InFile::new(macro_file, call))?,\n+            _ => InFile::new(macro_file, ast::Expr::cast(expanded)?),\n+        };\n+        Some(res)\n     }\n \n     fn trait_env(&self, db: &impl HirDatabase) -> Arc<TraitEnvironment> {\n         TraitEnvironment::lower(db, &self.resolver)\n     }\n \n     pub(crate) fn type_of(&self, db: &impl HirDatabase, expr: &ast::Expr) -> Option<Type> {\n-        let expr_id = if let Some(expr) = self.expand_expr(db, InFile::new(self.file_id, expr)) {\n-            self.body_source_map.as_ref()?.node_expr(expr.as_ref())?\n-        } else {\n-            self.expr_id(expr)?\n-        };\n+        let expr_id = match expr {\n+            ast::Expr::MacroCall(call) => {\n+                let expr = self.expand_expr(db, InFile::new(self.file_id, call.clone()))?;\n+                self.body_source_map.as_ref()?.node_expr(expr.as_ref())\n+            }\n+            _ => self.expr_id(expr),\n+        }?;\n \n         let ty = self.infer.as_ref()?[expr_id].clone();\n         let environment = self.trait_env(db);"}]}