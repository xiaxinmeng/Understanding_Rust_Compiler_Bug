{"sha": "286ac62939e26d56103dc1d7ddf5113650c5e42f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NmFjNjI5MzllMjZkNTYxMDNkYzFkN2RkZjUxMTM2NTBjNWU0MmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-19T13:11:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-19T13:11:53Z"}, "message": "Auto merge of #57370 - petrhosek:llvm-flags, r=alexcrichton\n\nSupport passing cflags/cxxflags/ldflags to LLVM build\n\nThis may be needed with some host compilers.", "tree": {"sha": "9ee290900bad0317146ffc4b3702093f57b5fc3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ee290900bad0317146ffc4b3702093f57b5fc3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/286ac62939e26d56103dc1d7ddf5113650c5e42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/286ac62939e26d56103dc1d7ddf5113650c5e42f", "html_url": "https://github.com/rust-lang/rust/commit/286ac62939e26d56103dc1d7ddf5113650c5e42f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/286ac62939e26d56103dc1d7ddf5113650c5e42f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "html_url": "https://github.com/rust-lang/rust/commit/c87144f3caf9a1580e8734d4d1604e723a5bd6e6"}, {"sha": "c6632725c1c72569eb8f017461809648fd9e9c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6632725c1c72569eb8f017461809648fd9e9c93", "html_url": "https://github.com/rust-lang/rust/commit/c6632725c1c72569eb8f017461809648fd9e9c93"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "24293fc864c5f9a90db9cbf5d44fbb056ef01f32", "filename": "config.toml.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/286ac62939e26d56103dc1d7ddf5113650c5e42f/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/286ac62939e26d56103dc1d7ddf5113650c5e42f/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=286ac62939e26d56103dc1d7ddf5113650c5e42f", "patch": "@@ -90,6 +90,11 @@\n # with clang-cl, so this is special in that it only compiles LLVM with clang-cl\n #clang-cl = '/path/to/clang-cl.exe'\n \n+# Pass extra compiler and linker flags to the LLVM CMake build.\n+#cflags = \"-fextra-flag\"\n+#cxxflags = \"-fextra-flag\"\n+#ldflags = \"-Wl,extra-flag\"\n+\n # Use libc++ when building LLVM instead of libstdc++. This is the default on\n # platforms already use libc++ as the default C++ library, but this option\n # allows you to use libc++ even on platforms when it's not. You need to ensure"}, {"sha": "a2989f0cffa6e712210fcb9b50a098b4c0580429", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/286ac62939e26d56103dc1d7ddf5113650c5e42f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286ac62939e26d56103dc1d7ddf5113650c5e42f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=286ac62939e26d56103dc1d7ddf5113650c5e42f", "patch": "@@ -82,6 +82,9 @@ pub struct Config {\n     pub lldb_enabled: bool,\n     pub llvm_tools_enabled: bool,\n \n+    pub llvm_cflags: Option<String>,\n+    pub llvm_cxxflags: Option<String>,\n+    pub llvm_ldflags: Option<String>,\n     pub llvm_use_libcxx: bool,\n \n     // rust codegen options\n@@ -254,6 +257,9 @@ struct Llvm {\n     link_shared: Option<bool>,\n     version_suffix: Option<String>,\n     clang_cl: Option<String>,\n+    cflags: Option<String>,\n+    cxxflags: Option<String>,\n+    ldflags: Option<String>,\n     use_libcxx: Option<bool>,\n }\n \n@@ -516,6 +522,10 @@ impl Config {\n             config.llvm_link_jobs = llvm.link_jobs;\n             config.llvm_version_suffix = llvm.version_suffix.clone();\n             config.llvm_clang_cl = llvm.clang_cl.clone();\n+\n+            config.llvm_cflags = llvm.cflags.clone();\n+            config.llvm_cxxflags = llvm.cxxflags.clone();\n+            config.llvm_ldflags = llvm.ldflags.clone();\n             set(&mut config.llvm_use_libcxx, llvm.use_libcxx);\n         }\n "}, {"sha": "7b70236dfe8e6aafdd7c884d7526007271161ebd", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/286ac62939e26d56103dc1d7ddf5113650c5e42f/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/286ac62939e26d56103dc1d7ddf5113650c5e42f/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=286ac62939e26d56103dc1d7ddf5113650c5e42f", "patch": "@@ -64,6 +64,10 @@ def v(*args):\n o(\"missing-tools\", \"dist.missing-tools\", \"allow failures when building tools\")\n o(\"use-libcxx\", \"llvm.use_libcxx\", \"build LLVM with libc++\")\n \n+o(\"cflags\", \"llvm.cflags\", \"build LLVM with these extra compiler flags\")\n+o(\"cxxflags\", \"llvm.cxxflags\", \"build LLVM with these extra compiler flags\")\n+o(\"ldflags\", \"llvm.ldflags\", \"build LLVM with these extra linker flags\")\n+\n # Optimization and debugging options. These may be overridden by the release\n # channel, etc.\n o(\"optimize\", \"rust.optimize\", \"build optimized rust code\")"}, {"sha": "f5bacd63e6803a5eda30d9893282ad84154a17cc", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/286ac62939e26d56103dc1d7ddf5113650c5e42f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286ac62939e26d56103dc1d7ddf5113650c5e42f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=286ac62939e26d56103dc1d7ddf5113650c5e42f", "patch": "@@ -358,14 +358,21 @@ fn configure_cmake(builder: &Builder,\n     }\n \n     cfg.build_arg(\"-j\").build_arg(builder.jobs().to_string());\n-    cfg.define(\"CMAKE_C_FLAGS\", builder.cflags(target, GitRepo::Llvm).join(\" \"));\n+    let mut cflags = builder.cflags(target, GitRepo::Llvm).join(\" \");\n+    if let Some(ref s) = builder.config.llvm_cxxflags {\n+        cflags.push_str(&format!(\" {}\", s));\n+    }\n+    cfg.define(\"CMAKE_C_FLAGS\", cflags);\n     let mut cxxflags = builder.cflags(target, GitRepo::Llvm).join(\" \");\n     if builder.config.llvm_static_stdcpp &&\n         !target.contains(\"windows\") &&\n         !target.contains(\"netbsd\")\n     {\n         cxxflags.push_str(\" -static-libstdc++\");\n     }\n+    if let Some(ref s) = builder.config.llvm_cxxflags {\n+        cxxflags.push_str(&format!(\" {}\", s));\n+    }\n     cfg.define(\"CMAKE_CXX_FLAGS\", cxxflags);\n     if let Some(ar) = builder.ar(target) {\n         if ar.is_absolute() {\n@@ -383,6 +390,12 @@ fn configure_cmake(builder: &Builder,\n         }\n     }\n \n+    if let Some(ref s) = builder.config.llvm_ldflags {\n+        cfg.define(\"CMAKE_SHARED_LINKER_FLAGS\", s);\n+        cfg.define(\"CMAKE_MODULE_LINKER_FLAGS\", s);\n+        cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", s);\n+    }\n+\n     if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n         cfg.env(\"RUST_LOG\", \"sccache=warn\");\n     }"}]}