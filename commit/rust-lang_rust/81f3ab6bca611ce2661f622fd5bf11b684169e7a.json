{"sha": "81f3ab6bca611ce2661f622fd5bf11b684169e7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjNhYjZiY2E2MTFjZTI2NjFmNjIyZmQ1YmYxMWI2ODQxNjllN2E=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-30T03:05:02Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-30T03:05:02Z"}, "message": "Use a macro for documenting rustdoc", "tree": {"sha": "5146521193fc8527e693b7360d0c8eba28d2ab29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5146521193fc8527e693b7360d0c8eba28d2ab29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f3ab6bca611ce2661f622fd5bf11b684169e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f3ab6bca611ce2661f622fd5bf11b684169e7a", "html_url": "https://github.com/rust-lang/rust/commit/81f3ab6bca611ce2661f622fd5bf11b684169e7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f3ab6bca611ce2661f622fd5bf11b684169e7a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce21126b295608ab4704f678d53ae8d2e9b60d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce21126b295608ab4704f678d53ae8d2e9b60d1", "html_url": "https://github.com/rust-lang/rust/commit/0ce21126b295608ab4704f678d53ae8d2e9b60d1"}], "stats": {"total": 142, "additions": 75, "deletions": 67}, "files": [{"sha": "38705a564843419b7758506e379e2db6a9869d50", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ab6bca611ce2661f622fd5bf11b684169e7a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ab6bca611ce2661f622fd5bf11b684169e7a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=81f3ab6bca611ce2661f622fd5bf11b684169e7a", "patch": "@@ -465,6 +465,7 @@ impl<'a> Builder<'a> {\n                 doc::Std,\n                 doc::Rustc,\n                 doc::Rustdoc,\n+                // doc::Rustfmt,\n                 doc::ErrorIndex,\n                 doc::Nomicon,\n                 doc::Reference,"}, {"sha": "7ba2ff073cd1317df3f6071571ef48a7668207f4", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 74, "deletions": 67, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ab6bca611ce2661f622fd5bf11b684169e7a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ab6bca611ce2661f622fd5bf11b684169e7a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=81f3ab6bca611ce2661f622fd5bf11b684169e7a", "patch": "@@ -593,84 +593,91 @@ impl Step for Rustc {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct Rustdoc {\n-    stage: u32,\n-    target: TargetSelection,\n-}\n-\n-impl Step for Rustdoc {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.krate(\"rustdoc-tool\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Rustdoc { stage: run.builder.top_stage, target: run.target });\n-    }\n-\n-    /// Generates compiler documentation.\n-    ///\n-    /// This will generate all documentation for compiler and dependencies.\n-    /// Compiler documentation is distributed separately, so we make sure\n-    /// we do not merge it with the other documentation from std, test and\n-    /// proc_macros. This is largely just a wrapper around `cargo doc`.\n-    fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n-        let target = self.target;\n-        builder.info(&format!(\"Documenting stage{} rustdoc ({})\", stage, target));\n-\n-        // This is the intended out directory for compiler documentation.\n-        let out = builder.compiler_doc_out(target);\n-        t!(fs::create_dir_all(&out));\n+macro_rules! tool_doc {\n+    ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?]) => {\n+        #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+        pub struct $tool {\n+            stage: u32,\n+            target: TargetSelection,\n+        }\n \n-        let compiler = builder.compiler(stage, builder.config.build);\n+        impl Step for $tool {\n+            type Output = ();\n+            const DEFAULT: bool = true;\n+            const ONLY_HOSTS: bool = true;\n \n-        if !builder.config.compiler_docs {\n-            builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n-            return;\n-        }\n+            fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+                run.krate($should_run)\n+            }\n \n-        // Build rustc docs so that we generate relative links.\n-        builder.ensure(Rustc { stage, target });\n+            fn make_run(run: RunConfig<'_>) {\n+                run.builder.ensure($tool { stage: run.builder.top_stage, target: run.target });\n+            }\n \n-        // Build rustdoc.\n-        builder.ensure(tool::Rustdoc { compiler });\n+            /// Generates compiler documentation.\n+            ///\n+            /// This will generate all documentation for compiler and dependencies.\n+            /// Compiler documentation is distributed separately, so we make sure\n+            /// we do not merge it with the other documentation from std, test and\n+            /// proc_macros. This is largely just a wrapper around `cargo doc`.\n+            fn run(self, builder: &Builder<'_>) {\n+                let stage = self.stage;\n+                let target = self.target;\n+                builder.info(&format!(\"Documenting stage{} {} ({})\", stage, stringify!($tool).to_lowercase(), target));\n \n-        // Symlink compiler docs to the output directory of rustdoc documentation.\n-        let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target.triple).join(\"doc\");\n-        t!(fs::create_dir_all(&out_dir));\n-        t!(symlink_dir_force(&builder.config, &out, &out_dir));\n+                // This is the intended out directory for compiler documentation.\n+                let out = builder.compiler_doc_out(target);\n+                t!(fs::create_dir_all(&out));\n \n-        // Build cargo command.\n-        let mut cargo = prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            Mode::ToolRustc,\n-            target,\n-            \"doc\",\n-            \"src/tools/rustdoc\",\n-            SourceType::InTree,\n-            &[],\n-        );\n+                let compiler = builder.compiler(stage, builder.config.build);\n \n-        cargo.arg(\"-Zskip-rustdoc-fingerprint\");\n-        // Only include compiler crates, no dependencies of those, such as `libc`.\n-        cargo.arg(\"--no-deps\");\n-        cargo.arg(\"-p\").arg(\"rustdoc\");\n-        cargo.arg(\"-p\").arg(\"rustdoc-json-types\");\n+                if !builder.config.compiler_docs {\n+                    builder.info(\"\\tskipping - compiler/tool docs disabled\");\n+                    return;\n+                }\n \n-        cargo.rustdocflag(\"--document-private-items\");\n-        cargo.rustdocflag(\"--enable-index-page\");\n-        cargo.rustdocflag(\"--show-type-layout\");\n-        cargo.rustdocflag(\"-Zunstable-options\");\n-        builder.run(&mut cargo.into());\n+                // Build rustc docs so that we generate relative links.\n+                builder.ensure(Rustc { stage, target });\n+\n+                // Build the tool.\n+                builder.ensure(tool::$tool { compiler });\n+\n+                // Symlink compiler docs to the output directory of rustdoc documentation.\n+                let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target.triple).join(\"doc\");\n+                t!(fs::create_dir_all(&out_dir));\n+                t!(symlink_dir_force(&builder.config, &out, &out_dir));\n+\n+                // Build cargo command.\n+                let mut cargo = prepare_tool_cargo(\n+                    builder,\n+                    compiler,\n+                    Mode::ToolRustc,\n+                    target,\n+                    \"doc\",\n+                    $path,\n+                    SourceType::InTree,\n+                    &[],\n+                );\n+\n+                cargo.arg(\"-Zskip-rustdoc-fingerprint\");\n+                // Only include compiler crates, no dependencies of those, such as `libc`.\n+                cargo.arg(\"--no-deps\");\n+                $(\n+                    cargo.arg(\"-p\").arg($krate);\n+                )+\n+\n+                cargo.rustdocflag(\"--document-private-items\");\n+                cargo.rustdocflag(\"--enable-index-page\");\n+                cargo.rustdocflag(\"--show-type-layout\");\n+                cargo.rustdocflag(\"-Zunstable-options\");\n+                builder.run(&mut cargo.into());\n+            }\n+        }\n     }\n }\n \n+tool_doc!(Rustdoc, \"rustdoc-tool\", \"src/tools/rustdoc\", [\"rustdoc\", \"rustdoc-json-types\"]);\n+\n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n     pub target: TargetSelection,"}]}