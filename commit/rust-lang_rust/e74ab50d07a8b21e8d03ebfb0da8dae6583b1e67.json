{"sha": "e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NGFiNTBkMDdhOGIyMWU4ZDAzZWJmYjBkYThkYWU2NTgzYjFlNjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-07T00:45:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-07T00:45:22Z"}, "message": "Rollup merge of #73953 - JohnTitor:audit-hidden-sugg, r=estebank\n\nAudit hidden/short code suggestions\n\nShould fix #73641.\nAudit uses of `span_suggestion_short` and `tool_only_span_suggestion` (`span_suggestion_hidden` is already tested with `run-rustfix`). Leave some FIXMEs for futher improvements/fixes.\nr? @estebank", "tree": {"sha": "168e729a30abda7528a52c811ea689fc14ed8f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168e729a30abda7528a52c811ea689fc14ed8f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfA8WiCRBK7hj4Ov3rIwAAdHIIALI+c7ypzZ71jHLn9IGcSm59\nEiFTrljAH+Neg941TeymVFIUutVnYeVqI0G6Ynoz7spjlVe96P8P1YNaHNQ1YYVq\n2bMZMXcyNbDmRNMFgLqY5aN35vOuugLHjiAykX4e/UB8Xra7wlSyVNZL569DploF\nvZpvMXOerr/5ca1t9ixJG45RDQ7hPQWPOUIfN0OZGwoUlEHZCTM7divtzq8pczrX\nkXTcJAyy2jwHvI8GH3BEz6r6TA84uPCHXeI+gGgLEa68EiBE7LS/s9gPUlLPMfLG\nEgXuvkVn3WNdS5Ff/MWcXwUtrhzXVZLIgGrd5YmZORRVHk/dTgXYiMeJ0zZ9pIY=\n=vnGW\n-----END PGP SIGNATURE-----\n", "payload": "tree 168e729a30abda7528a52c811ea689fc14ed8f5e\nparent 7942d9a65a1100c840c7d55172c7e9588066719d\nparent 84282fd6f17235ca52613bbfd1cb6be301897836\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594082722 -0700\ncommitter GitHub <noreply@github.com> 1594082722 -0700\n\nRollup merge of #73953 - JohnTitor:audit-hidden-sugg, r=estebank\n\nAudit hidden/short code suggestions\n\nShould fix #73641.\nAudit uses of `span_suggestion_short` and `tool_only_span_suggestion` (`span_suggestion_hidden` is already tested with `run-rustfix`). Leave some FIXMEs for futher improvements/fixes.\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "html_url": "https://github.com/rust-lang/rust/commit/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7942d9a65a1100c840c7d55172c7e9588066719d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7942d9a65a1100c840c7d55172c7e9588066719d", "html_url": "https://github.com/rust-lang/rust/commit/7942d9a65a1100c840c7d55172c7e9588066719d"}, {"sha": "84282fd6f17235ca52613bbfd1cb6be301897836", "url": "https://api.github.com/repos/rust-lang/rust/commits/84282fd6f17235ca52613bbfd1cb6be301897836", "html_url": "https://github.com/rust-lang/rust/commit/84282fd6f17235ca52613bbfd1cb6be301897836"}], "stats": {"total": 2114, "additions": 1801, "deletions": 313}, "files": [{"sha": "2becbe2f6758a8b0264f0e152054982cc853de07", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -280,6 +280,8 @@ impl<'a, 'b> Context<'a, 'b> {\n                                 (\"x\", \"LowerHex\"),\n                                 (\"X\", \"UpperHex\"),\n                             ] {\n+                                // FIXME: rustfix (`run-rustfix`) fails to apply suggestions.\n+                                // > \"Cannot replace slice of data that was already replaced\"\n                                 err.tool_only_span_suggestion(\n                                     sp,\n                                     &format!(\"use the `{}` trait\", name),"}, {"sha": "7822c09739049aab36e4c2e631a735e73a1f1dbb", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1228,10 +1228,13 @@ impl<'a> Parser<'a> {\n                 if let Some(sp) = unmatched.unclosed_span {\n                     err.span_label(sp, \"unclosed delimiter\");\n                 }\n+                // Backticks should be removed to apply suggestions.\n+                let mut delim = delim.to_string();\n+                delim.retain(|c| c != '`');\n                 err.span_suggestion_short(\n                     self.prev_token.span.shrink_to_hi(),\n-                    &format!(\"{} may belong here\", delim.to_string()),\n-                    delim.to_string(),\n+                    &format!(\"`{}` may belong here\", delim),\n+                    delim,\n                     Applicability::MaybeIncorrect,\n                 );\n                 if unmatched.found_delim.is_none() {"}, {"sha": "61c680469f03ce15e0b95e60abbd36414464cde2", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -699,7 +699,7 @@ impl<'a> Parser<'a> {\n                                     // misses a separator.\n                                     expect_err\n                                         .span_suggestion_short(\n-                                            sp,\n+                                            self.sess.source_map().next_point(sp),\n                                             &format!(\"missing `{}`\", token_str),\n                                             token_str,\n                                             Applicability::MaybeIncorrect,"}, {"sha": "5629d4b6e6e5f65e8ee8d10b651baa7f70389d49", "filename": "src/test/ui/block-expression-remove-semicolon.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+fn foo() -> i32 {\n+    0\n+}\n+\n+fn main() {\n+    let _x: i32 = {\n+        //~^ ERROR mismatched types\n+        foo() //~ HELP consider removing this semicolon\n+    };\n+}"}, {"sha": "33f11b50afca2adbd84706fdd4f1b3168664219a", "filename": "src/test/ui/block-expression-remove-semicolon.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,9 +1,11 @@\n+// run-rustfix\n+\n fn foo() -> i32 {\n-   0\n+    0\n }\n \n fn main() {\n-    let x: i32 = {\n+    let _x: i32 = {\n         //~^ ERROR mismatched types\n         foo(); //~ HELP consider removing this semicolon\n     };"}, {"sha": "74dc4d595a9294d88a43c1cef0a980be24134b5b", "filename": "src/test/ui/block-expression-remove-semicolon.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/block-expression-remove-semicolon.rs:6:18\n+  --> $DIR/block-expression-remove-semicolon.rs:8:19\n    |\n-LL |       let x: i32 = {\n-   |  __________________^\n+LL |       let _x: i32 = {\n+   |  ___________________^\n LL | |\n LL | |         foo();\n    | |              - help: consider removing this semicolon"}, {"sha": "a2ecb73ac5b28f290a7af9fc0ba5e08c03d4605e", "filename": "src/test/ui/block-result/consider-removing-last-semi.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+pub fn f() -> String {  //~ ERROR mismatched types\n+    0u8;\n+    \"bla\".to_string()\n+}\n+\n+pub fn g() -> String {  //~ ERROR mismatched types\n+    \"this won't work\".to_string();\n+    \"removeme\".to_string()\n+}\n+\n+fn main() {}"}, {"sha": "4991d24b26cced93060180bc8763c517ed2251e1", "filename": "src/test/ui/block-result/consider-removing-last-semi.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,9 +1,11 @@\n-fn f() -> String {  //~ ERROR mismatched types\n+// run-rustfix\n+\n+pub fn f() -> String {  //~ ERROR mismatched types\n     0u8;\n     \"bla\".to_string();\n }\n \n-fn g() -> String {  //~ ERROR mismatched types\n+pub fn g() -> String {  //~ ERROR mismatched types\n     \"this won't work\".to_string();\n     \"removeme\".to_string();\n }"}, {"sha": "15ca8316708a2b5d8f516558a2df0150f2a60dcf", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,21 +1,21 @@\n error[E0308]: mismatched types\n-  --> $DIR/consider-removing-last-semi.rs:1:11\n+  --> $DIR/consider-removing-last-semi.rs:3:15\n    |\n-LL | fn f() -> String {\n-   |    -      ^^^^^^ expected struct `std::string::String`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n+LL | pub fn f() -> String {\n+   |        -      ^^^^^^ expected struct `std::string::String`, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n \n error[E0308]: mismatched types\n-  --> $DIR/consider-removing-last-semi.rs:6:11\n+  --> $DIR/consider-removing-last-semi.rs:8:15\n    |\n-LL | fn g() -> String {\n-   |    -      ^^^^^^ expected struct `std::string::String`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n+LL | pub fn g() -> String {\n+   |        -      ^^^^^^ expected struct `std::string::String`, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon"}, {"sha": "713e04774a0e70a6356f8e20835afc29e6c47170", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,16 @@\n+// #41425 -- error message \"mismatched types\" has wrong types\n+// run-rustfix\n+\n+fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n+    x + 1\n+}\n+\n+fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n+    Ok(1)\n+}\n+\n+fn main() {\n+    let x = plus_one(5);\n+    let _ = foo();\n+    println!(\"X = {}\", x);\n+}"}, {"sha": "e14d79d8acae688f10c87f1934a71dff81ecbd54", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,4 +1,5 @@\n // #41425 -- error message \"mismatched types\" has wrong types\n+// run-rustfix\n \n fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n     x + 1;\n@@ -10,5 +11,6 @@ fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n \n fn main() {\n     let x = plus_one(5);\n+    let _ = foo();\n     println!(\"X = {}\", x);\n }"}, {"sha": "da8db4331dffbd5a8ee4dcd4b6b9a7dc43ed4022", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n+  --> $DIR/coercion-missing-tail-expected-type.rs:4:24\n    |\n LL | fn plus_one(x: i32) -> i32 {\n    |    --------            ^^^ expected `i32`, found `()`\n@@ -9,7 +9,7 @@ LL |     x + 1;\n    |          - help: consider removing this semicolon\n \n error[E0308]: mismatched types\n-  --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n+  --> $DIR/coercion-missing-tail-expected-type.rs:8:13\n    |\n LL | fn foo() -> Result<u8, u64> {\n    |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`"}, {"sha": "5c2b9267af583741f26e852027487b0e1371d99b", "filename": "src/test/ui/const-generics/unused_braces.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// run-rustfix\n+\n+#![allow(incomplete_features)]\n+#![warn(unused_braces)]\n+\n+#![feature(const_generics)]\n+\n+struct A<const N: usize>;\n+\n+fn main() {\n+    let _: A<7>; // ok\n+    let _: A< 7 >; //~ WARN unnecessary braces\n+    let _: A<{ 3 + 5 }>; // ok\n+}"}, {"sha": "c3e02b45ed5a26ecf4097df28fd9b925f86c53aa", "filename": "src/test/ui/const-generics/unused_braces.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,10 @@\n // check-pass\n+// run-rustfix\n+\n+#![allow(incomplete_features)]\n #![warn(unused_braces)]\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n \n struct A<const N: usize>;\n "}, {"sha": "618698a323445c9e62a70905d20c84b121ddf9f9", "filename": "src/test/ui/const-generics/unused_braces.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/unused_braces.rs:4:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n warning: unnecessary braces around const expression\n-  --> $DIR/unused_braces.rs:11:14\n+  --> $DIR/unused_braces.rs:13:14\n    |\n LL |     let _: A<{ 7 }>;\n    |              ^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces.rs:2:9\n+  --> $DIR/unused_braces.rs:5:9\n    |\n LL | #![warn(unused_braces)]\n    |         ^^^^^^^^^^^^^\n \n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "87debfeceaaf33a779a7d6bb4ab7d6c51d79b63d", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+\n+fn main() {\n+    let _x = !1; //~ ERROR cannot be used as a unary operator\n+}"}, {"sha": "015a8edcea355cbece7eaaaa0b985c360e30a6a4", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n fn main() {\n-    let x = ~1; //~ ERROR cannot be used as a unary operator\n+    let _x = ~1; //~ ERROR cannot be used as a unary operator\n }"}, {"sha": "84b81d561e9096855790a9cc39a4dc4d851a034a", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,8 @@\n error: `~` cannot be used as a unary operator\n-  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:2:13\n+  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:4:14\n    |\n-LL |     let x = ~1;\n-   |             ^ help: use `!` to perform bitwise not\n+LL |     let _x = ~1;\n+   |              ^ help: use `!` to perform bitwise not\n \n error: aborting due to previous error\n "}, {"sha": "21471d75c821550449a18c25d83336fb6091e324", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+// This test is to check if suggestions can be applied automatically.\n+\n+#![allow(dead_code, unused_parens)]\n+\n+fn main() {}\n+\n+fn test_and() {\n+    let a = true;\n+    let b = false;\n+\n+    let _ = a && b; //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n+\n+    if a && b { //~ ERROR `and` is not a logical operator\n+                 //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or() {\n+    let a = true;\n+    let b = false;\n+\n+    let _ = a || b; //~ ERROR `or` is not a logical operator\n+                    //~| ERROR `or` is not a logical operator\n+\n+    if a || b { //~ ERROR `or` is not a logical operator\n+                //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_and_par() {\n+    let a = true;\n+    let b = false;\n+    if (a && b) {  //~ ERROR `and` is not a logical operator\n+                    //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or_par() {\n+    let a = true;\n+    let b = false;\n+    if (a || b) {  //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_and() {\n+    let a = true;\n+    let b = false;\n+    while a && b {  //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_or() {\n+    let a = true;\n+    let b = false;\n+    while a || b { //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}"}, {"sha": "bb9a3a195962e58a91b3da4111e9d47ed8e68cd0", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+// This test is to check if suggestions can be applied automatically.\n+\n+#![allow(dead_code, unused_parens)]\n+\n+fn main() {}\n+\n+fn test_and() {\n+    let a = true;\n+    let b = false;\n+\n+    let _ = a and b; //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n+\n+    if a and b { //~ ERROR `and` is not a logical operator\n+                 //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or() {\n+    let a = true;\n+    let b = false;\n+\n+    let _ = a or b; //~ ERROR `or` is not a logical operator\n+                    //~| ERROR `or` is not a logical operator\n+\n+    if a or b { //~ ERROR `or` is not a logical operator\n+                //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_and_par() {\n+    let a = true;\n+    let b = false;\n+    if (a and b) {  //~ ERROR `and` is not a logical operator\n+                    //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or_par() {\n+    let a = true;\n+    let b = false;\n+    if (a or b) {  //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_and() {\n+    let a = true;\n+    let b = false;\n+    while a and b {  //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_or() {\n+    let a = true;\n+    let b = false;\n+    while a or b { //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}"}, {"sha": "fe48af592db9137873028764506f500dbaa25eeb", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.stderr", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,130 @@\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:13:15\n+   |\n+LL |     let _ = a and b;\n+   |               ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:13:15\n+   |\n+LL |     let _ = a and b;\n+   |               ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:16:10\n+   |\n+LL |     if a and b {\n+   |          ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:16:10\n+   |\n+LL |     if a and b {\n+   |          ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:26:15\n+   |\n+LL |     let _ = a or b;\n+   |               ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:26:15\n+   |\n+LL |     let _ = a or b;\n+   |               ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:29:10\n+   |\n+LL |     if a or b {\n+   |          ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:29:10\n+   |\n+LL |     if a or b {\n+   |          ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:38:11\n+   |\n+LL |     if (a and b) {\n+   |           ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:38:11\n+   |\n+LL |     if (a and b) {\n+   |           ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:47:11\n+   |\n+LL |     if (a or b) {\n+   |           ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:47:11\n+   |\n+LL |     if (a or b) {\n+   |           ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:56:13\n+   |\n+LL |     while a and b {\n+   |             ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:56:13\n+   |\n+LL |     while a and b {\n+   |             ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:65:13\n+   |\n+LL |     while a or b {\n+   |             ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:65:13\n+   |\n+LL |     while a or b {\n+   |             ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "fc6255e0274431a35c29bbc6688b0282667ccc78", "filename": "src/test/ui/error-codes/E0642.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ferror-codes%2FE0642.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ferror-codes%2FE0642.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+#![allow(unused)] // for rustfix\n+\n+#[derive(Clone, Copy)]\n+struct S;\n+\n+trait T {\n+    fn foo(_: (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+\n+    fn bar(_: (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n+\n+    fn method(_: S) {} //~ ERROR patterns aren't allowed in methods without bodies\n+\n+    fn f(&ident: &S) {} // ok\n+    fn g(&&ident: &&S) {} // ok\n+    fn h(mut ident: S) {} // ok\n+}\n+\n+fn main() {}"}, {"sha": "5f85f3935e1a04d19319aec8ffb1294b839adbea", "filename": "src/test/ui/error-codes/E0642.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(unused)] // for rustfix\n+\n #[derive(Clone, Copy)]\n struct S;\n "}, {"sha": "83fcac042b1b41624b4c6816c8e99ffe757ecb57", "filename": "src/test/ui/error-codes/E0642.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error[E0642]: patterns aren't allowed in methods without bodies\n-  --> $DIR/E0642.rs:5:12\n+  --> $DIR/E0642.rs:9:12\n    |\n LL |     fn foo((x, y): (i32, i32));\n    |            ^^^^^^\n@@ -10,7 +10,7 @@ LL |     fn foo(_: (i32, i32));\n    |            ^\n \n error[E0642]: patterns aren't allowed in methods without bodies\n-  --> $DIR/E0642.rs:7:12\n+  --> $DIR/E0642.rs:11:12\n    |\n LL |     fn bar((x, y): (i32, i32)) {}\n    |            ^^^^^^\n@@ -21,7 +21,7 @@ LL |     fn bar(_: (i32, i32)) {}\n    |            ^\n \n error[E0642]: patterns aren't allowed in methods without bodies\n-  --> $DIR/E0642.rs:9:15\n+  --> $DIR/E0642.rs:13:15\n    |\n LL |     fn method(S { .. }: S) {}\n    |               ^^^^^^^^"}, {"sha": "72f9af0124c1669f974aa5c5d15f9561b529a125", "filename": "src/test/ui/generic/generic-no-mangle.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![deny(no_mangle_generic_items)]\n+\n+\n+pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+\n+pub extern fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+#[no_mangle]\n+pub fn baz(x: &i32) -> &i32 { x }\n+\n+#[no_mangle]\n+pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n+\n+fn main() {}"}, {"sha": "08d631e6eee1eab8d6d035fefcd41adfb6d37034", "filename": "src/test/ui/generic/generic-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![deny(no_mangle_generic_items)]\n \n #[no_mangle]"}, {"sha": "e8e6d9d502d4b42a057d1eda29f5260a7769c7c0", "filename": "src/test/ui/generic/generic-no-mangle.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,19 +1,19 @@\n error: functions generic over types or consts must be mangled\n-  --> $DIR/generic-no-mangle.rs:4:1\n+  --> $DIR/generic-no-mangle.rs:6:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n LL | pub fn foo<T>() {}\n    | ^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/generic-no-mangle.rs:1:9\n+  --> $DIR/generic-no-mangle.rs:3:9\n    |\n LL | #![deny(no_mangle_generic_items)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: functions generic over types or consts must be mangled\n-  --> $DIR/generic-no-mangle.rs:7:1\n+  --> $DIR/generic-no-mangle.rs:9:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute"}, {"sha": "3fd950e0dbfc87b3d6fdea2c16f2dc85a1a1ed90", "filename": "src/test/ui/impossible_range.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fimpossible_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fimpossible_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+// Make sure that invalid ranges generate an error during parsing, not an ICE\n+\n+#![allow(path_statements)]\n+\n+pub fn main() {\n+    ..;\n+    0..;\n+    ..1;\n+    0..1;\n+    ..; //~ERROR inclusive range with no end\n+         //~^HELP use `..` instead\n+}\n+\n+fn _foo1() {\n+    ..=1;\n+    0..=1;\n+    0..; //~ERROR inclusive range with no end\n+          //~^HELP use `..` instead\n+}"}, {"sha": "0fe0e17be669aea8c6a48747fe69adf01bcc68c1", "filename": "src/test/ui/impossible_range.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,8 @@\n+// run-rustfix\n // Make sure that invalid ranges generate an error during parsing, not an ICE\n \n+#![allow(path_statements)]\n+\n pub fn main() {\n     ..;\n     0..;"}, {"sha": "53c56065c2a3a056fe4cf7e9dfdb27c9d9a7611d", "filename": "src/test/ui/impossible_range.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,13 +1,13 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:8:5\n+  --> $DIR/impossible_range.rs:11:5\n    |\n LL |     ..=;\n    |     ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:15:6\n+  --> $DIR/impossible_range.rs:18:6\n    |\n LL |     0..=;\n    |      ^^^ help: use `..` instead"}, {"sha": "b810a90ef37f9057244371fa67c744436ae2089d", "filename": "src/test/ui/issues/issue-1962.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-1962.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-1962.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1962.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -D while-true\n+// run-rustfix\n+\n+fn main() {\n+    let mut i = 0;\n+    loop { //~ ERROR denote infinite loops with `loop\n+        i += 1;\n+        if i == 5 { break; }\n+    }\n+}"}, {"sha": "00d2bbd28506e10a7b79378626f10c20762e0848", "filename": "src/test/ui/issues/issue-1962.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1962.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,10 @@\n // compile-flags: -D while-true\n+// run-rustfix\n+\n fn main() {\n-  let mut i = 0;\n-  while true  { //~ ERROR denote infinite loops with `loop\n-    i += 1;\n-    if i == 5 { break; }\n-  }\n+    let mut i = 0;\n+    while true { //~ ERROR denote infinite loops with `loop\n+        i += 1;\n+        if i == 5 { break; }\n+    }\n }"}, {"sha": "17142912696a75f67f9d8aacad6d66a716541e9c", "filename": "src/test/ui/issues/issue-1962.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-1962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-1962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1962.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,8 @@\n error: denote infinite loops with `loop { ... }`\n-  --> $DIR/issue-1962.rs:4:3\n+  --> $DIR/issue-1962.rs:6:5\n    |\n-LL |   while true  {\n-   |   ^^^^^^^^^^ help: use `loop`\n+LL |     while true {\n+   |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: requested on the command line with `-D while-true`\n "}, {"sha": "d61c248c6ec62d9946c50942ebf2597b43ac2c9a", "filename": "src/test/ui/issues/issue-40782.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+fn main() {\n+    for _i in 0..2 { //~ ERROR missing `in`\n+    }\n+}"}, {"sha": "3688c69fbc613c2931466bf992cb716d307c114b", "filename": "src/test/ui/issues/issue-40782.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n+\n fn main() {\n-    for i 0..2 { //~ ERROR missing `in`\n+    for _i 0..2 { //~ ERROR missing `in`\n     }\n }"}, {"sha": "9d7776f32b34572a722cac4266f1a69218d20721", "filename": "src/test/ui/issues/issue-40782.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,8 @@\n error: missing `in` in `for` loop\n-  --> $DIR/issue-40782.rs:2:10\n+  --> $DIR/issue-40782.rs:4:11\n    |\n-LL |     for i 0..2 {\n-   |          ^ help: try adding `in` here\n+LL |     for _i 0..2 {\n+   |           ^ help: try adding `in` here\n \n error: aborting due to previous error\n "}, {"sha": "2cb5a4996ee2526e675c642003e4de7e23794ac1", "filename": "src/test/ui/issues/issue-46186.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-46186.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-46186.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+pub struct Struct {\n+    pub a: usize,\n+}\n+//~^ ERROR expected item, found `;`\n+\n+fn main() {}"}, {"sha": "84cad38c5ecb9695c255c5d9dfd87d17b485e486", "filename": "src/test/ui/issues/issue-46186.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,7 @@\n-struct Struct {\n-    a: usize,\n+// run-rustfix\n+\n+pub struct Struct {\n+    pub a: usize,\n };\n //~^ ERROR expected item, found `;`\n "}, {"sha": "0766c8a33df14791836b0950e4e635dd83286019", "filename": "src/test/ui/issues/issue-46186.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error: expected item, found `;`\n-  --> $DIR/issue-46186.rs:3:2\n+  --> $DIR/issue-46186.rs:5:2\n    |\n LL | };\n    |  ^ help: remove this semicolon"}, {"sha": "2f8c925b85328c6e3a79da3802761a1943b33c0b", "filename": "src/test/ui/issues/issue-50571.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-50571.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-50571.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+trait Foo {\n+    fn foo(_: [i32; 2]) {}\n+    //~^ ERROR: patterns aren't allowed in methods without bodies\n+}\n+\n+fn main() {}"}, {"sha": "56f422e7d58388e3fcbceb870b42d33f1f84aaf4", "filename": "src/test/ui/issues/issue-50571.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n trait Foo {\n     fn foo([a, b]: [i32; 2]) {}\n     //~^ ERROR: patterns aren't allowed in methods without bodies"}, {"sha": "ed01362758573c4d237912cfe9fff7d9b239b5d1", "filename": "src/test/ui/issues/issue-50571.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error[E0642]: patterns aren't allowed in methods without bodies\n-  --> $DIR/issue-50571.rs:2:12\n+  --> $DIR/issue-50571.rs:4:12\n    |\n LL |     fn foo([a, b]: [i32; 2]) {}\n    |            ^^^^^^"}, {"sha": "c70c39b5f6dc786911c90a86cec46d2b7e4e7fd8", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.fixed", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,107 @@\n+// run-rustfix\n+\n+#![feature(box_patterns, stmt_expr_attributes)]\n+#![feature(or_patterns)]\n+\n+#![allow(\n+    dead_code,\n+    ellipsis_inclusive_range_patterns,\n+    irrefutable_let_patterns,\n+    unreachable_patterns,\n+    unused_mut,\n+    unused_variables\n+)]\n+#![deny(unused_parens)]\n+\n+fn lint_on_top_level() {\n+    let a = 0; //~ ERROR unnecessary parentheses around pattern\n+    for a in 0..1 {} //~ ERROR unnecessary parentheses around pattern\n+    if let a = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    while let a = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    fn foo(a: u8) {} //~ ERROR unnecessary parentheses around pattern\n+    let _ = |a: u8| 0; //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+fn _no_lint_attr() {\n+    let _x = #[allow(dead_code)] (1 + 2);\n+}\n+\n+// Don't lint in these cases (#64106).\n+fn or_patterns_no_lint() {\n+    match Box::new(0) {\n+        box (0 | 1) => {} // Should not lint as `box 0 | 1` binds as `(box 0) | 1`.\n+        _ => {}\n+    }\n+\n+    match 0 {\n+        x @ (0 | 1) => {} // Should not lint as `x @ 0 | 1` binds as `(x @ 0) | 1`.\n+        _ => {}\n+    }\n+\n+    if let &(0 | 1) = &0 {} // Should also not lint.\n+    if let &mut (0 | 1) = &mut 0 {} // Same.\n+\n+    fn foo((Ok(a) | Err(a)): Result<u8, u8>) {} // Doesn't parse if we remove parens for now.\n+\n+    let _ = |(Ok(a) | Err(a)): Result<u8, u8>| 1; // `|Ok(a) | Err(a)| 1` parses as bit-or.\n+}\n+\n+fn or_patterns_will_lint() {\n+    if let 0 | 1 = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    if let (0 | 1,) = (0,) {} //~ ERROR unnecessary parentheses around pattern\n+    if let [0 | 1] = [0] {} //~ ERROR unnecessary parentheses around pattern\n+    if let 0 | 1 | 2 = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    struct TS(u8);\n+    if let TS(0 | 1) = TS(0) {} //~ ERROR unnecessary parentheses around pattern\n+    struct NS { f: u8 }\n+    if let NS { f: 0 | 1 } = (NS { f: 0 }) {} //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+// Don't lint on `&(mut x)` because `&mut x` means something else (#55342).\n+fn deref_mut_binding_no_lint() {\n+    let &(mut x) = &0;\n+}\n+\n+fn main() {\n+    match 1 {\n+        _ => {} //~ ERROR unnecessary parentheses around pattern\n+        y => {} //~ ERROR unnecessary parentheses around pattern\n+        ref r => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ 1...2 => {} //~ ERROR unnecessary parentheses around pattern\n+        (1...2) => {} // Non ambiguous range pattern should not warn\n+        e @ (3...4) => {} // Non ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1...2) => {} //~ ERROR unnecessary parentheses around pattern\n+        &_ => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1...2) => {} // Ambiguous range pattern should not warn\n+        &(1...2) => {} // Ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1...2) | e @ &(3...4) => {} // Complex ambiguous pattern should not warn\n+        &_ => {}\n+    }\n+\n+    match 1 {\n+        _ => {} //~ ERROR unnecessary parentheses around pattern\n+        y => {} //~ ERROR unnecessary parentheses around pattern\n+        ref r => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ 1..=2 => {} //~ ERROR unnecessary parentheses around pattern\n+        (1..=2) => {} // Non ambiguous range pattern should not warn\n+        e @ (3..=4) => {} // Non ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1..=2) => {} //~ ERROR unnecessary parentheses around pattern\n+        &_ => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1..=2) => {} // Ambiguous range pattern should not warn\n+        &(1..=2) => {} // Ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1..=2) | e @ &(3..=4) => {} // Complex ambiguous pattern should not warn\n+        &_ => {}\n+    }\n+}"}, {"sha": "9dd3b63c0fed785c82d1f3eb4719390af66fd228", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,10 +1,16 @@\n-#![feature(box_patterns, stmt_expr_attributes)]\n+// run-rustfix\n \n+#![feature(box_patterns, stmt_expr_attributes)]\n #![feature(or_patterns)]\n \n-#![allow(ellipsis_inclusive_range_patterns)]\n-#![allow(unreachable_patterns)]\n-#![allow(unused_variables)]\n+#![allow(\n+    dead_code,\n+    ellipsis_inclusive_range_patterns,\n+    irrefutable_let_patterns,\n+    unreachable_patterns,\n+    unused_mut,\n+    unused_variables\n+)]\n #![deny(unused_parens)]\n \n fn lint_on_top_level() {"}, {"sha": "ee466857757a37b9c8922a874d5a16d39cd546ea", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,149 +1,149 @@\n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:11:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:17:9\n    |\n LL |     let (a) = 0;\n    |         ^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-54538-unused-parens-lint.rs:8:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:14:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:18:9\n    |\n LL |     for (a) in 0..1 {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:13:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:19:12\n    |\n LL |     if let (a) = 0 {}\n    |            ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:14:15\n+  --> $DIR/issue-54538-unused-parens-lint.rs:20:15\n    |\n LL |     while let (a) = 0 {}\n    |               ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:15:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:21:12\n    |\n LL |     fn foo((a): u8) {}\n    |            ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:16:14\n+  --> $DIR/issue-54538-unused-parens-lint.rs:22:14\n    |\n LL |     let _ = |(a): u8| 0;\n    |              ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:44:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:50:12\n    |\n LL |     if let (0 | 1) = 0 {}\n    |            ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:45:13\n+  --> $DIR/issue-54538-unused-parens-lint.rs:51:13\n    |\n LL |     if let ((0 | 1),) = (0,) {}\n    |             ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:46:13\n+  --> $DIR/issue-54538-unused-parens-lint.rs:52:13\n    |\n LL |     if let [(0 | 1)] = [0] {}\n    |             ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:47:16\n+  --> $DIR/issue-54538-unused-parens-lint.rs:53:16\n    |\n LL |     if let 0 | (1 | 2) = 0 {}\n    |                ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:49:15\n+  --> $DIR/issue-54538-unused-parens-lint.rs:55:15\n    |\n LL |     if let TS((0 | 1)) = TS(0) {}\n    |               ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:51:20\n+  --> $DIR/issue-54538-unused-parens-lint.rs:57:20\n    |\n LL |     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n    |                    ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:61:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:67:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:62:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:68:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:63:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:64:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:70:9\n    |\n LL |         (e @ 1...2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:70:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:76:9\n    |\n LL |         (e @ &(1...2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:71:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:77:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:82:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:88:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:83:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:89:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:84:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:85:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:91:9\n    |\n LL |         (e @ 1..=2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:91:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:97:9\n    |\n LL |         (e @ &(1..=2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:92:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:98:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses"}, {"sha": "c9dec395580f194cbea64eed3800f60f67b68d90", "filename": "src/test/ui/lint/lint-unnecessary-parens.fixed", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,79 @@\n+// run-rustfix\n+\n+#![deny(unused_parens)]\n+#![allow(while_true)] // for rustfix\n+\n+#[derive(Eq, PartialEq)]\n+struct X { y: bool }\n+impl X {\n+    fn foo(&self, conjunct: bool) -> bool { self.y && conjunct }\n+}\n+\n+fn foo() -> isize {\n+    return 1; //~ ERROR unnecessary parentheses around `return` value\n+}\n+fn bar(y: bool) -> X {\n+    return X { y }; //~ ERROR unnecessary parentheses around `return` value\n+}\n+\n+pub fn unused_parens_around_return_type() -> u32 { //~ ERROR unnecessary parentheses around type\n+    panic!()\n+}\n+\n+pub fn unused_parens_around_block_return() -> u32 {\n+    let _foo = {\n+        5 //~ ERROR unnecessary parentheses around block return value\n+    };\n+    5 //~ ERROR unnecessary parentheses around block return value\n+}\n+\n+pub trait Trait {\n+    fn test(&self);\n+}\n+\n+pub fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n+    panic!()\n+}\n+\n+macro_rules! baz {\n+    ($($foo:expr),+) => {\n+        ($($foo),*)\n+    }\n+}\n+\n+pub const CONST_ITEM: usize = 10; //~ ERROR unnecessary parentheses around assigned value\n+pub static STATIC_ITEM: usize = 10; //~ ERROR unnecessary parentheses around assigned value\n+\n+fn main() {\n+    foo();\n+    bar(true); //~ ERROR unnecessary parentheses around function argument\n+\n+    if true {} //~ ERROR unnecessary parentheses around `if` condition\n+    while true {} //~ ERROR unnecessary parentheses around `while` condition\n+    match true { //~ ERROR unnecessary parentheses around `match` scrutinee expression\n+        _ => {}\n+    }\n+    if let 1 = 1 {} //~ ERROR unnecessary parentheses around `let` scrutinee expression\n+    while let 1 = 2 {} //~ ERROR unnecessary parentheses around `let` scrutinee expression\n+    let v = X { y: false };\n+    // struct lits needs parens, so these shouldn't warn.\n+    if (v == X { y: true }) {}\n+    if (X { y: true } == v) {}\n+    if (X { y: false }.y) {}\n+\n+    while (X { y: false }.foo(true)) {}\n+    while (true | X { y: false }.y) {}\n+\n+    match (X { y: false }) {\n+        _ => {}\n+    }\n+\n+    X { y: false }.foo(true); //~ ERROR unnecessary parentheses around method argument\n+\n+    let mut _a = 0; //~ ERROR unnecessary parentheses around assigned value\n+    _a = 0; //~ ERROR unnecessary parentheses around assigned value\n+    _a += 1; //~ ERROR unnecessary parentheses around assigned value\n+\n+    let _a = baz!(3, 4);\n+    let _b = baz!(3);\n+}"}, {"sha": "884bb4d2e99b67cc3029c4d661de5a9eb7436203", "filename": "src/test/ui/lint/lint-unnecessary-parens.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![deny(unused_parens)]\n+#![allow(while_true)] // for rustfix\n \n #[derive(Eq, PartialEq)]\n struct X { y: bool }\n@@ -13,22 +16,22 @@ fn bar(y: bool) -> X {\n     return (X { y }); //~ ERROR unnecessary parentheses around `return` value\n }\n \n-fn unused_parens_around_return_type() -> (u32) { //~ ERROR unnecessary parentheses around type\n+pub fn unused_parens_around_return_type() -> (u32) { //~ ERROR unnecessary parentheses around type\n     panic!()\n }\n \n-fn unused_parens_around_block_return() -> u32 {\n-    let foo = {\n+pub fn unused_parens_around_block_return() -> u32 {\n+    let _foo = {\n         (5) //~ ERROR unnecessary parentheses around block return value\n     };\n     (5) //~ ERROR unnecessary parentheses around block return value\n }\n \n-trait Trait {\n+pub trait Trait {\n     fn test(&self);\n }\n \n-fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n+pub fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n     panic!()\n }\n \n@@ -38,16 +41,15 @@ macro_rules! baz {\n     }\n }\n \n-const CONST_ITEM: usize = (10); //~ ERROR unnecessary parentheses around assigned value\n-static STATIC_ITEM: usize = (10); //~ ERROR unnecessary parentheses around assigned value\n+pub const CONST_ITEM: usize = (10); //~ ERROR unnecessary parentheses around assigned value\n+pub static STATIC_ITEM: usize = (10); //~ ERROR unnecessary parentheses around assigned value\n \n fn main() {\n     foo();\n     bar((true)); //~ ERROR unnecessary parentheses around function argument\n \n     if (true) {} //~ ERROR unnecessary parentheses around `if` condition\n     while (true) {} //~ ERROR unnecessary parentheses around `while` condition\n-    //~^ WARN denote infinite loops with\n     match (true) { //~ ERROR unnecessary parentheses around `match` scrutinee expression\n         _ => {}\n     }"}, {"sha": "1abf47c8af5214e1fde9a60e29a7a9036cdadd18", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,118 +1,110 @@\n error: unnecessary parentheses around `return` value\n-  --> $DIR/lint-unnecessary-parens.rs:10:12\n+  --> $DIR/lint-unnecessary-parens.rs:13:12\n    |\n LL |     return (1);\n    |            ^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unnecessary-parens.rs:1:9\n+  --> $DIR/lint-unnecessary-parens.rs:3:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary parentheses around `return` value\n-  --> $DIR/lint-unnecessary-parens.rs:13:12\n+  --> $DIR/lint-unnecessary-parens.rs:16:12\n    |\n LL |     return (X { y });\n    |            ^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around type\n-  --> $DIR/lint-unnecessary-parens.rs:16:42\n+  --> $DIR/lint-unnecessary-parens.rs:19:46\n    |\n-LL | fn unused_parens_around_return_type() -> (u32) {\n-   |                                          ^^^^^ help: remove these parentheses\n+LL | pub fn unused_parens_around_return_type() -> (u32) {\n+   |                                              ^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around block return value\n-  --> $DIR/lint-unnecessary-parens.rs:22:9\n+  --> $DIR/lint-unnecessary-parens.rs:25:9\n    |\n LL |         (5)\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around block return value\n-  --> $DIR/lint-unnecessary-parens.rs:24:5\n+  --> $DIR/lint-unnecessary-parens.rs:27:5\n    |\n LL |     (5)\n    |     ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:41:27\n+  --> $DIR/lint-unnecessary-parens.rs:44:31\n    |\n-LL | const CONST_ITEM: usize = (10);\n-   |                           ^^^^ help: remove these parentheses\n+LL | pub const CONST_ITEM: usize = (10);\n+   |                               ^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:42:29\n+  --> $DIR/lint-unnecessary-parens.rs:45:33\n    |\n-LL | static STATIC_ITEM: usize = (10);\n-   |                             ^^^^ help: remove these parentheses\n+LL | pub static STATIC_ITEM: usize = (10);\n+   |                                 ^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around function argument\n-  --> $DIR/lint-unnecessary-parens.rs:46:9\n+  --> $DIR/lint-unnecessary-parens.rs:49:9\n    |\n LL |     bar((true));\n    |         ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `if` condition\n-  --> $DIR/lint-unnecessary-parens.rs:48:8\n+  --> $DIR/lint-unnecessary-parens.rs:51:8\n    |\n LL |     if (true) {}\n    |        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `while` condition\n-  --> $DIR/lint-unnecessary-parens.rs:49:11\n+  --> $DIR/lint-unnecessary-parens.rs:52:11\n    |\n LL |     while (true) {}\n    |           ^^^^^^ help: remove these parentheses\n \n-warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-unnecessary-parens.rs:49:5\n-   |\n-LL |     while (true) {}\n-   |     ^^^^^^^^^^^^ help: use `loop`\n-   |\n-   = note: `#[warn(while_true)]` on by default\n-\n error: unnecessary parentheses around `match` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:51:11\n+  --> $DIR/lint-unnecessary-parens.rs:53:11\n    |\n LL |     match (true) {\n    |           ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:54:16\n+  --> $DIR/lint-unnecessary-parens.rs:56:16\n    |\n LL |     if let 1 = (1) {}\n    |                ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:55:19\n+  --> $DIR/lint-unnecessary-parens.rs:57:19\n    |\n LL |     while let 1 = (2) {}\n    |                   ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around method argument\n-  --> $DIR/lint-unnecessary-parens.rs:69:24\n+  --> $DIR/lint-unnecessary-parens.rs:71:24\n    |\n LL |     X { y: false }.foo((true));\n    |                        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:71:18\n+  --> $DIR/lint-unnecessary-parens.rs:73:18\n    |\n LL |     let mut _a = (0);\n    |                  ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:72:10\n+  --> $DIR/lint-unnecessary-parens.rs:74:10\n    |\n LL |     _a = (0);\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:73:11\n+  --> $DIR/lint-unnecessary-parens.rs:75:11\n    |\n LL |     _a += (1);\n    |           ^^^ help: remove these parentheses\n \n-error: aborting due to 17 previous errors; 1 warning emitted\n+error: aborting due to 17 previous errors\n "}, {"sha": "92ce103586c2584bbddc7a40312185888a698178", "filename": "src/test/ui/lint/lint-unused-mut-self.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![deny(unused_mut)]\n+\n+struct Foo;\n+impl Foo {\n+    fn foo(self) {} //~ ERROR: variable does not need to be mutable\n+    fn bar(self: Box<Foo>) {} //~ ERROR: variable does not need to be mutable\n+}\n+\n+fn main() {}"}, {"sha": "70736ce216e5ecce15108a44c539f6f024e385d2", "filename": "src/test/ui/lint/lint-unused-mut-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n #![allow(dead_code)]"}, {"sha": "01a524bd323c44ef02f9f210e53bd73044c4a64a", "filename": "src/test/ui/lint/lint-unused-mut-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,19 +1,19 @@\n error: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-self.rs:8:12\n+  --> $DIR/lint-unused-mut-self.rs:10:12\n    |\n LL |     fn foo(mut self) {}\n    |            ----^^^^\n    |            |\n    |            help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unused-mut-self.rs:4:9\n+  --> $DIR/lint-unused-mut-self.rs:6:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^\n \n error: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-self.rs:9:12\n+  --> $DIR/lint-unused-mut-self.rs:11:12\n    |\n LL |     fn bar(mut self: Box<Foo>) {}\n    |            ----^^^^"}, {"sha": "67ec7facf1780bef3f1b47d29650d92fb7f47577", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -92,13 +92,16 @@ fn main() {\n         mut x => {} //~ WARN: variable does not need to be mutable\n \n     }\n+\n     match (30, 2) {\n-      (mut x, 1) | //~ WARN: variable does not need to be mutable\n+        // FIXME: Here's a false positive,\n+        // shouldn't be removed `mut` not to be bound with a different way.\n+        (mut x, 1) | //~ WARN: variable does not need to be mutable\n \n-      (mut x, 2) |\n-      (mut x, 3) => {\n-      }\n-      _ => {}\n+        (mut x, 2) |\n+        (mut x, 3) => {\n+        }\n+        _ => {}\n     }\n \n     let x = |mut y: isize| 10; //~ WARN: variable does not need to be mutable"}, {"sha": "805ed2b40bb7bc422a6885d0fae606bb4a969027", "filename": "src/test/ui/lint/lint-unused-mut-variables.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -69,7 +69,7 @@ LL |         mut a: i32,\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:104:14\n+  --> $DIR/lint-unused-mut-variables.rs:107:14\n    |\n LL |     let x = |mut y: isize| 10;\n    |              ----^\n@@ -141,79 +141,79 @@ LL |         mut x => {}\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:96:8\n+  --> $DIR/lint-unused-mut-variables.rs:99:10\n    |\n-LL |       (mut x, 1) |\n-   |        ----^\n-   |        |\n-   |        help: remove this `mut`\n+LL |         (mut x, 1) |\n+   |          ----^\n+   |          |\n+   |          help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:109:9\n+  --> $DIR/lint-unused-mut-variables.rs:112:9\n    |\n LL |     let mut a = &mut 5;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:114:9\n+  --> $DIR/lint-unused-mut-variables.rs:117:9\n    |\n LL |     let mut b = (&mut a,);\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:117:9\n+  --> $DIR/lint-unused-mut-variables.rs:120:9\n    |\n LL |     let mut x = &mut 1;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:129:9\n+  --> $DIR/lint-unused-mut-variables.rs:132:9\n    |\n LL |     let mut v : &mut Vec<()> = &mut vec![];\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:184:9\n+  --> $DIR/lint-unused-mut-variables.rs:187:9\n    |\n LL |     let mut raw_address_of_const = 1;\n    |         ----^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:106:13\n+  --> $DIR/lint-unused-mut-variables.rs:109:13\n    |\n LL |     fn what(mut foo: isize) {}\n    |             ----^^^\n    |             |\n    |             help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:124:20\n+  --> $DIR/lint-unused-mut-variables.rs:127:20\n    |\n LL |     fn mut_ref_arg(mut arg : &mut [u8]) -> &mut [u8] {\n    |                    ----^^^\n    |                    |\n    |                    help: remove this `mut`\n \n error: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:202:9\n+  --> $DIR/lint-unused-mut-variables.rs:205:9\n    |\n LL |     let mut b = vec![2];\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unused-mut-variables.rs:198:8\n+  --> $DIR/lint-unused-mut-variables.rs:201:8\n    |\n LL | #[deny(unused_mut)]\n    |        ^^^^^^^^^^"}, {"sha": "35851690b738135126aa773d6b3437f1d056f3b4", "filename": "src/test/ui/lint/suggestions.fixed", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fsuggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fsuggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,66 @@\n+// ignore-tidy-tab\n+// run-rustfix\n+\n+#![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n+\n+#[no_mangle] pub static DISCOVERY: usize = 1;\n+//~^ ERROR const items should never be `#[no_mangle]`\n+//~| HELP try a static value\n+\n+\n+//~^ HELP remove this attribute\n+pub fn defiant<T>(_t: T) {}\n+//~^ WARN functions generic over types or consts must be mangled\n+\n+#[no_mangle]\n+fn rio_grande() {}\n+\n+mod badlands {\n+    // The private-no-mangle lints shouldn't suggest inserting `pub` when the\n+    // item is already `pub` (but triggered the lint because, e.g., it's in a\n+    // private module). (Issue #47383)\n+    #[no_mangle] pub static DAUNTLESS: bool = true;\n+    //~^ ERROR const items should never be `#[no_mangle]`\n+    //~| HELP try a static value\n+    #[allow(dead_code)] // for rustfix\n+     pub fn val_jean<T>() {}\n+    //~^ WARN functions generic over types or consts must be mangled\n+    //~| HELP remove this attribute\n+\n+    // ... but we can suggest just-`pub` instead of restricted\n+    #[no_mangle] pub static VETAR: bool = true;\n+    //~^ ERROR const items should never be `#[no_mangle]`\n+    //~| HELP try a static value\n+    #[allow(dead_code)] // for rustfix\n+     pub(crate) fn crossfield<T>() {}\n+    //~^ WARN functions generic over types or consts must be mangled\n+    //~| HELP remove this attribute\n+}\n+\n+struct Equinox {\n+    warp_factor: f32,\n+}\n+\n+fn main() {\n+    loop {\n+    //~^ WARN denote infinite loops\n+    //~| HELP use `loop`\n+        let registry_no = format!(\"NX-{}\", 74205);\n+        //~^ WARN does not need to be mutable\n+        //~| HELP remove this `mut`\n+        //~| WARN unnecessary parentheses\n+        //~| HELP remove these parentheses\n+        // the line after `mut` has a `\\t` at the beginning, this is on purpose\n+        let b = 1;\n+        //~^^ WARN does not need to be mutable\n+        //~| HELP remove this `mut`\n+        let d = Equinox { warp_factor: 9.975 };\n+        match d {\n+            #[allow(unused_variables)] // for rustfix\n+            Equinox { warp_factor } => {}\n+            //~^ WARN this pattern is redundant\n+            //~| HELP use shorthand field pattern\n+        }\n+        println!(\"{} {}\", registry_no, b);\n+    }\n+}"}, {"sha": "be6f0d6b30fed2691cf7732ea1dcb30cf5e39a42", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-tab\n+// run-rustfix\n \n #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n \n@@ -21,6 +22,7 @@ mod badlands {\n     #[no_mangle] pub const DAUNTLESS: bool = true;\n     //~^ ERROR const items should never be `#[no_mangle]`\n     //~| HELP try a static value\n+    #[allow(dead_code)] // for rustfix\n     #[no_mangle] pub fn val_jean<T>() {}\n     //~^ WARN functions generic over types or consts must be mangled\n     //~| HELP remove this attribute\n@@ -29,6 +31,7 @@ mod badlands {\n     #[no_mangle] pub(crate) const VETAR: bool = true;\n     //~^ ERROR const items should never be `#[no_mangle]`\n     //~| HELP try a static value\n+    #[allow(dead_code)] // for rustfix\n     #[no_mangle] pub(crate) fn crossfield<T>() {}\n     //~^ WARN functions generic over types or consts must be mangled\n     //~| HELP remove this attribute\n@@ -54,6 +57,7 @@ fn main() {\n         //~| HELP remove this `mut`\n         let d = Equinox { warp_factor: 9.975 };\n         match d {\n+            #[allow(unused_variables)] // for rustfix\n             Equinox { warp_factor: warp_factor } => {}\n             //~^ WARN this pattern is redundant\n             //~| HELP use shorthand field pattern"}, {"sha": "cad2514625588e36c89a9de4c127459f0aebf332", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,39 +1,39 @@\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:42:5\n+  --> $DIR/suggestions.rs:45:5\n    |\n LL |     while true {\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:45:31\n+  --> $DIR/suggestions.rs:48:31\n    |\n LL |         let mut registry_no = (format!(\"NX-{}\", 74205));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/suggestions.rs:3:21\n+  --> $DIR/suggestions.rs:4:21\n    |\n LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |                     ^^^^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:45:13\n+  --> $DIR/suggestions.rs:48:13\n    |\n LL |         let mut registry_no = (format!(\"NX-{}\", 74205));\n    |             ----^^^^^^^^^^^\n    |             |\n    |             help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/suggestions.rs:3:9\n+  --> $DIR/suggestions.rs:4:9\n    |\n LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |         ^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:51:13\n+  --> $DIR/suggestions.rs:54:13\n    |\n LL |            let mut\n    |   _____________^\n@@ -45,7 +45,7 @@ LL | ||             b = 1;\n    |               help: remove this `mut`\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:5:14\n+  --> $DIR/suggestions.rs:6:14\n    |\n LL | #[no_mangle] const DISCOVERY: usize = 1;\n    |              -----^^^^^^^^^^^^^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL | #[no_mangle] const DISCOVERY: usize = 1;\n    = note: `#[deny(no_mangle_const_items)]` on by default\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:11:1\n+  --> $DIR/suggestions.rs:12:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n@@ -66,39 +66,39 @@ LL | pub fn defiant<T>(_t: T) {}\n    = note: `#[warn(no_mangle_generic_items)]` on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:57:23\n+  --> $DIR/suggestions.rs:61:23\n    |\n LL |             Equinox { warp_factor: warp_factor } => {}\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: use shorthand field pattern: `warp_factor`\n    |\n    = note: `#[warn(non_shorthand_field_patterns)]` on by default\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:21:18\n+  --> $DIR/suggestions.rs:22:18\n    |\n LL |     #[no_mangle] pub const DAUNTLESS: bool = true;\n    |                  ---------^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  help: try a static value: `pub static`\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:24:18\n+  --> $DIR/suggestions.rs:26:18\n    |\n LL |     #[no_mangle] pub fn val_jean<T>() {}\n    |     ------------ ^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: remove this attribute\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:29:18\n+  --> $DIR/suggestions.rs:31:18\n    |\n LL |     #[no_mangle] pub(crate) const VETAR: bool = true;\n    |                  ----------------^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  help: try a static value: `pub static`\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:32:18\n+  --> $DIR/suggestions.rs:35:18\n    |\n LL |     #[no_mangle] pub(crate) fn crossfield<T>() {}\n    |     ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c0225911c6ed00879c3dd3f8422d2100858a2ca8", "filename": "src/test/ui/lint/unused_braces.fixed", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,53 @@\n+// check-pass\n+// run-rustfix\n+\n+#![warn(unused_braces, unused_parens)]\n+#![allow(unreachable_code, unused_unsafe)] // for rustfix\n+\n+fn consume<T>(_: T) {}\n+\n+fn main() {\n+    let _ = 7;\n+    //~^WARN unnecessary parentheses\n+\n+    // Do not emit a lint in these cases,\n+    // as we have to be careful with\n+    // `ref` patterns.\n+    {\n+        let _ = { 7 };\n+\n+        if let 7 = { 7 } { }\n+\n+        match { 7 } {\n+            _ => (),\n+        }\n+    }\n+\n+    if  true  {\n+        //~^ WARN unnecessary braces\n+    }\n+\n+    while  false  {\n+        //~^ WARN unnecessary braces\n+    }\n+\n+    let _: [u8;  3 ];\n+    //~^ WARN unnecessary braces\n+\n+    consume( 7 );\n+    //~^ WARN unnecessary braces\n+\n+    // Do not emit lint for multiline blocks.\n+    let _ = {\n+        7\n+    };\n+\n+    // Do not emit lint for unsafe blocks.\n+    let _ = unsafe { 7 };\n+\n+    // Do not emit lint, as the `{` would then\n+    // be parsed as part of the `return`.\n+    if { return } {\n+\n+    }\n+}"}, {"sha": "5ca4811fc32d8342f523d5af85ea902dcf852510", "filename": "src/test/ui/lint/unused_braces.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,8 @@\n // check-pass\n+// run-rustfix\n+\n #![warn(unused_braces, unused_parens)]\n+#![allow(unreachable_code, unused_unsafe)] // for rustfix\n \n fn consume<T>(_: T) {}\n "}, {"sha": "8fa5dfde61db06eba3999604f7b2629ef8f52b8c", "filename": "src/test/ui/lint/unused_braces.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,41 +1,41 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/unused_braces.rs:7:13\n+  --> $DIR/unused_braces.rs:10:13\n    |\n LL |     let _ = (7);\n    |             ^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces.rs:2:24\n+  --> $DIR/unused_braces.rs:4:24\n    |\n LL | #![warn(unused_braces, unused_parens)]\n    |                        ^^^^^^^^^^^^^\n \n warning: unnecessary braces around `if` condition\n-  --> $DIR/unused_braces.rs:23:8\n+  --> $DIR/unused_braces.rs:26:8\n    |\n LL |     if { true } {\n    |        ^^^^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces.rs:2:9\n+  --> $DIR/unused_braces.rs:4:9\n    |\n LL | #![warn(unused_braces, unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n warning: unnecessary braces around `while` condition\n-  --> $DIR/unused_braces.rs:27:11\n+  --> $DIR/unused_braces.rs:30:11\n    |\n LL |     while { false } {\n    |           ^^^^^^^^^ help: remove these braces\n \n warning: unnecessary braces around const expression\n-  --> $DIR/unused_braces.rs:31:17\n+  --> $DIR/unused_braces.rs:34:17\n    |\n LL |     let _: [u8; { 3 }];\n    |                 ^^^^^ help: remove these braces\n \n warning: unnecessary braces around function argument\n-  --> $DIR/unused_braces.rs:34:13\n+  --> $DIR/unused_braces.rs:37:13\n    |\n LL |     consume({ 7 });\n    |             ^^^^^ help: remove these braces"}, {"sha": "25950334549f95baccc299ff076825fe54d05fe2", "filename": "src/test/ui/lint/unused_braces_borrow.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// run-rustfix\n+\n+#![warn(unused_braces)]\n+\n+// changing `&{ expr }` to `&expr` changes the semantic of the program\n+// so we should not warn this case\n+\n+#[repr(packed)]\n+pub struct A {\n+    pub a: u8,\n+    pub b: u32,\n+}\n+\n+fn consume<T>(_: T) {}\n+\n+fn main() {\n+    let a = A {\n+        a: 42,\n+        b: 1729,\n+    };\n+\n+    consume(&{ a.b });\n+    consume( a.b );\n+    //~^ WARN unnecessary braces\n+}"}, {"sha": "b7c529d73b94e058d394e52f13cbddecbf4579c7", "filename": "src/test/ui/lint/unused_braces_borrow.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,13 +1,15 @@\n // check-pass\n+// run-rustfix\n+\n #![warn(unused_braces)]\n \n // changing `&{ expr }` to `&expr` changes the semantic of the program\n // so we should not warn this case\n \n #[repr(packed)]\n-struct A {\n-    a: u8,\n-    b: u32,\n+pub struct A {\n+    pub a: u8,\n+    pub b: u32,\n }\n \n fn consume<T>(_: T) {}"}, {"sha": "f018c46fcd3c6ae3772d60b184e2267c3f61fd77", "filename": "src/test/ui/lint/unused_braces_borrow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,11 +1,11 @@\n warning: unnecessary braces around function argument\n-  --> $DIR/unused_braces_borrow.rs:22:13\n+  --> $DIR/unused_braces_borrow.rs:24:13\n    |\n LL |     consume({ a.b });\n    |             ^^^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces_borrow.rs:2:9\n+  --> $DIR/unused_braces_borrow.rs:4:9\n    |\n LL | #![warn(unused_braces)]\n    |         ^^^^^^^^^^^^^"}, {"sha": "639de2813a90a85f2ff7afa334526d08e599ad41", "filename": "src/test/ui/nll/capture-mut-ref.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+// Check that capturing a mutable reference by move and assigning to its\n+// referent doesn't make the unused mut lint think that it is mutable.\n+\n+#![deny(unused_mut)]\n+\n+pub fn mutable_upvar() {\n+    let x = &mut 0;\n+    //~^ ERROR\n+    move || {\n+        *x = 1;\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "89f49e1ea5186d1ace0054dcf3469a4b7778706e", "filename": "src/test/ui/nll/capture-mut-ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,9 +1,11 @@\n+// run-rustfix\n+\n // Check that capturing a mutable reference by move and assigning to its\n // referent doesn't make the unused mut lint think that it is mutable.\n \n #![deny(unused_mut)]\n \n-fn mutable_upvar() {\n+pub fn mutable_upvar() {\n     let mut x = &mut 0;\n     //~^ ERROR\n     move || {"}, {"sha": "4898d569235e73d1b7cc13ecd991970d0ac70ab3", "filename": "src/test/ui/nll/capture-mut-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/capture-mut-ref.rs:7:9\n+  --> $DIR/capture-mut-ref.rs:9:9\n    |\n LL |     let mut x = &mut 0;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/capture-mut-ref.rs:4:9\n+  --> $DIR/capture-mut-ref.rs:6:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "63e00c1722e453b196fc5f487e495809c1752751", "filename": "src/test/ui/nll/issue-61424.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fissue-61424.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fissue-61424.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-61424.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#![deny(unused_mut)]\n+\n+fn main() {\n+    let x; //~ ERROR: variable does not need to be mutable\n+    x = String::new();\n+    dbg!(x);\n+}"}, {"sha": "3b64996c27b07ead844a1dfbf56b7ba8b9712dbd", "filename": "src/test/ui/nll/issue-61424.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fissue-61424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fissue-61424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-61424.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![deny(unused_mut)]\n \n fn main() {"}, {"sha": "6de6b7f3abd0b8a743abf61ab534aede4de2a26d", "filename": "src/test/ui/nll/issue-61424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fissue-61424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Fissue-61424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-61424.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/issue-61424.rs:4:9\n+  --> $DIR/issue-61424.rs:6:9\n    |\n LL |     let mut x;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-61424.rs:1:9\n+  --> $DIR/issue-61424.rs:3:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "5632de1cd34ded4224ca7be61505a11ee3aad669", "filename": "src/test/ui/nll/unused-mut-issue-50343.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#![deny(unused_mut)]\n+#![allow(unused_variables)] // for rustfix\n+\n+fn main() {\n+    vec![(42, 22)].iter().map(|(x, _y)| ()).count();\n+    //~^ ERROR: variable does not need to be mutable\n+}"}, {"sha": "c849ac8c79e43243bfb40c18c7803d6aac5cd108", "filename": "src/test/ui/nll/unused-mut-issue-50343.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![deny(unused_mut)]\n+#![allow(unused_variables)] // for rustfix\n \n fn main() {\n     vec![(42, 22)].iter().map(|(mut x, _y)| ()).count();"}, {"sha": "cb02d76205c7f22800092c2aae6b9d727a545b2c", "filename": "src/test/ui/nll/unused-mut-issue-50343.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/unused-mut-issue-50343.rs:4:33\n+  --> $DIR/unused-mut-issue-50343.rs:7:33\n    |\n LL |     vec![(42, 22)].iter().map(|(mut x, _y)| ()).count();\n    |                                 ----^\n    |                                 |\n    |                                 help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-mut-issue-50343.rs:1:9\n+  --> $DIR/unused-mut-issue-50343.rs:3:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "ad8e718cf88a596a9d2105d6710bf25724c519ef", "filename": "src/test/ui/parser/bad-fn-ptr-qualifier.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+// edition:2018\n+// Most of items are taken from ./recover-const-async-fn-ptr.rs but this is able to apply rustfix.\n+\n+pub type T0 =  fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T1 =  extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T2 =  unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T3 =  fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T4 =  extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T5 =  unsafe extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T6 =   unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+pub type FTT0 = for<'a>  fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT1 = for<'a>  extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT2 = for<'a>  unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT3 = for<'a>  fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT4 = for<'a>  extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT5 = for<'a>  unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT6 = for<'a>   unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+fn main() {}"}, {"sha": "c04813dadff7bd7b049529193b5962b5fba30f0c", "filename": "src/test/ui/parser/bad-fn-ptr-qualifier.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+// edition:2018\n+// Most of items are taken from ./recover-const-async-fn-ptr.rs but this is able to apply rustfix.\n+\n+pub type T0 = const fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T1 = const extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T2 = const unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T3 = async fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T4 = async extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T5 = async unsafe extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T6 = const async unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+pub type FTT0 = for<'a> const fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT1 = for<'a> const extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT2 = for<'a> const unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT3 = for<'a> async fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT4 = for<'a> async extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT5 = for<'a> async unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT6 = for<'a> const async unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+fn main() {}"}, {"sha": "265e31329ca546aac88adf1177338f7330e2fa9e", "filename": "src/test/ui/parser/bad-fn-ptr-qualifier.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,146 @@\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:5:15\n+   |\n+LL | pub type T0 = const fn();\n+   |               -----^^^^^\n+   |               |\n+   |               `const` because of this\n+   |               help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:6:15\n+   |\n+LL | pub type T1 = const extern \"C\" fn();\n+   |               -----^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `const` because of this\n+   |               help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:7:15\n+   |\n+LL | pub type T2 = const unsafe extern fn();\n+   |               -----^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `const` because of this\n+   |               help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:8:15\n+   |\n+LL | pub type T3 = async fn();\n+   |               -----^^^^^\n+   |               |\n+   |               `async` because of this\n+   |               help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:9:15\n+   |\n+LL | pub type T4 = async extern fn();\n+   |               -----^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n+   |               help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:10:15\n+   |\n+LL | pub type T5 = async unsafe extern \"C\" fn();\n+   |               -----^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n+   |               help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:11:15\n+   |\n+LL | pub type T6 = const async unsafe extern \"C\" fn();\n+   |               -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `const` because of this\n+   |               help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:11:15\n+   |\n+LL | pub type T6 = const async unsafe extern \"C\" fn();\n+   |               ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     `async` because of this\n+   |                     help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:15:17\n+   |\n+LL | pub type FTT0 = for<'a> const fn();\n+   |                 ^^^^^^^^-----^^^^^\n+   |                         |\n+   |                         `const` because of this\n+   |                         help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:16:17\n+   |\n+LL | pub type FTT1 = for<'a> const extern \"C\" fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         `const` because of this\n+   |                         help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:17:17\n+   |\n+LL | pub type FTT2 = for<'a> const unsafe extern fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         `const` because of this\n+   |                         help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:18:17\n+   |\n+LL | pub type FTT3 = for<'a> async fn();\n+   |                 ^^^^^^^^-----^^^^^\n+   |                         |\n+   |                         `async` because of this\n+   |                         help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:19:17\n+   |\n+LL | pub type FTT4 = for<'a> async extern fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^\n+   |                         |\n+   |                         `async` because of this\n+   |                         help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:20:17\n+   |\n+LL | pub type FTT5 = for<'a> async unsafe extern \"C\" fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         `async` because of this\n+   |                         help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:22:17\n+   |\n+LL | pub type FTT6 = for<'a> const async unsafe extern \"C\" fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         `const` because of this\n+   |                         help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:22:17\n+   |\n+LL | pub type FTT6 = for<'a> const async unsafe extern \"C\" fn();\n+   |                 ^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               |\n+   |                               `async` because of this\n+   |                               help: remove the `async` qualifier\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "0bb88c55936f0b36de75f5938944d2ccfa3a532c", "filename": "src/test/ui/parser/if-in-in.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fif-in-in.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fif-in-in.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    for i in 1..2 { //~ ERROR expected iterable, found keyword `in`\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "6c0986fe1ba5f770193cdc0efbca5e4d0fc8f767", "filename": "src/test/ui/parser/if-in-in.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n fn main() {\n     for i in in 1..2 { //~ ERROR expected iterable, found keyword `in`\n         println!(\"{}\", i);"}, {"sha": "0e69bc4b2ce53b6cdcd79f25998033dbf40c49b9", "filename": "src/test/ui/parser/if-in-in.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error: expected iterable, found keyword `in`\n-  --> $DIR/if-in-in.rs:2:14\n+  --> $DIR/if-in-in.rs:4:14\n    |\n LL |     for i in in 1..2 {\n    |           ---^^"}, {"sha": "3386fac17dfd7c71a08e761fb161586365cc2089", "filename": "src/test/ui/parser/issue-10392-2.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+pub struct A { pub foo: isize }\n+\n+fn a() -> A { panic!() }\n+\n+fn main() {\n+    let A { .. } = a(); //~ ERROR: expected `}`\n+}"}, {"sha": "30628ae31c3bdab3ef901214647fb466f2d28e71", "filename": "src/test/ui/parser/issue-10392-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,4 +1,6 @@\n-struct A { foo: isize }\n+// run-rustfix\n+\n+pub struct A { pub foo: isize }\n \n fn a() -> A { panic!() }\n "}, {"sha": "4154ecfeb71c3b4463ac0f33a4f8f4d57a60d186", "filename": "src/test/ui/parser/issue-10392-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error: expected `}`, found `,`\n-  --> $DIR/issue-10392-2.rs:6:15\n+  --> $DIR/issue-10392-2.rs:8:15\n    |\n LL |     let A { .., } = a();\n    |             --^"}, {"sha": "e5d5622e6fc00395bcde854b36ad0bb91f2da2a9", "filename": "src/test/ui/parser/issue-3036.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-3036.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-3036.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+// Testing that semicolon tokens are printed correctly in errors\n+\n+fn main() {\n+    let _x = 3; //~ ERROR: expected `;`\n+}"}, {"sha": "2f76fb99b22068a43503417267e42b9cf7664202", "filename": "src/test/ui/parser/issue-3036.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,6 +1,7 @@\n+// run-rustfix\n+\n // Testing that semicolon tokens are printed correctly in errors\n \n-fn main()\n-{\n-    let x = 3 //~ ERROR: expected `;`\n+fn main() {\n+    let _x = 3 //~ ERROR: expected `;`\n }"}, {"sha": "e02223931c1145aa3b6bd83e6e3312b54d78e45a", "filename": "src/test/ui/parser/issue-3036.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,8 @@\n error: expected `;`, found `}`\n-  --> $DIR/issue-3036.rs:5:14\n+  --> $DIR/issue-3036.rs:6:15\n    |\n-LL |     let x = 3\n-   |              ^ help: add `;` here\n+LL |     let _x = 3\n+   |               ^ help: add `;` here\n LL | }\n    | - unexpected token\n "}, {"sha": "95019b2786925741d7ff2467a88f4cc679911f85", "filename": "src/test/ui/parser/issue-67146-negative-outlives-bound-syntactic-fail.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+// In this regression test for #67146, we check that the\n+// negative outlives bound `!'a` is rejected by the parser.\n+// This regression was first introduced in PR #57364.\n+\n+fn main() {}\n+\n+pub fn f1<T>() {}\n+//~^ ERROR negative bounds are not supported\n+pub fn f2<'a, T: Ord>() {}\n+//~^ ERROR negative bounds are not supported\n+pub fn f3<'a, T: Ord>() {}\n+//~^ ERROR negative bounds are not supported"}, {"sha": "82f54f8faa98cd615bfe34a30ab2b6ce4016f167", "filename": "src/test/ui/parser/issue-67146-negative-outlives-bound-syntactic-fail.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,12 +1,14 @@\n+// run-rustfix\n+\n // In this regression test for #67146, we check that the\n // negative outlives bound `!'a` is rejected by the parser.\n // This regression was first introduced in PR #57364.\n \n fn main() {}\n \n-fn f1<T: !'static>() {}\n+pub fn f1<T: !'static>() {}\n //~^ ERROR negative bounds are not supported\n-fn f2<'a, T: Ord + !'a>() {}\n+pub fn f2<'a, T: Ord + !'a>() {}\n //~^ ERROR negative bounds are not supported\n-fn f3<'a, T: !'a + Ord>() {}\n+pub fn f3<'a, T: !'a + Ord>() {}\n //~^ ERROR negative bounds are not supported"}, {"sha": "a4a422948aca6db3eb79a2c1ad97ce78d87bde15", "filename": "src/test/ui/parser/issue-67146-negative-outlives-bound-syntactic-fail.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,20 +1,20 @@\n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:7:8\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:12\n    |\n-LL | fn f1<T: !'static>() {}\n-   |        ^^^^^^^^^^ negative bounds are not supported\n+LL | pub fn f1<T: !'static>() {}\n+   |            ^^^^^^^^^^ negative bounds are not supported\n \n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:18\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:11:22\n    |\n-LL | fn f2<'a, T: Ord + !'a>() {}\n-   |                  ^^^^^ negative bounds are not supported\n+LL | pub fn f2<'a, T: Ord + !'a>() {}\n+   |                      ^^^^^ negative bounds are not supported\n \n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:11:12\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:13:16\n    |\n-LL | fn f3<'a, T: !'a + Ord>() {}\n-   |            ^^^^^ negative bounds are not supported\n+LL | pub fn f3<'a, T: !'a + Ord>() {}\n+   |                ^^^^^ negative bounds are not supported\n \n error: aborting due to 3 previous errors\n "}, {"sha": "464e78fd0359534e0bd9bdcf11cddd3e6f94cd94", "filename": "src/test/ui/parser/issue-70388-without-witness.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+// This is for checking if we can apply suggestions as-is.\n+\n+pub struct Foo(i32);\n+\n+fn main() {\n+    let Foo(..) = Foo(0); //~ ERROR unexpected `...`\n+    let [_, .., _] = [0, 1]; //~ ERROR unexpected `...`\n+}"}, {"sha": "9e35e4c38aa871b5deb0aeb96f918ffce93c6440", "filename": "src/test/ui/parser/issue-70388-without-witness.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+// This is for checking if we can apply suggestions as-is.\n+\n+pub struct Foo(i32);\n+\n+fn main() {\n+    let Foo(...) = Foo(0); //~ ERROR unexpected `...`\n+    let [_, ..., _] = [0, 1]; //~ ERROR unexpected `...`\n+}"}, {"sha": "b750ad4c626d6b8a1b10d5b8a8af9468079016bb", "filename": "src/test/ui/parser/issue-70388-without-witness.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,20 @@\n+error: unexpected `...`\n+  --> $DIR/issue-70388-without-witness.rs:7:13\n+   |\n+LL |     let Foo(...) = Foo(0);\n+   |             ^^^\n+   |             |\n+   |             not a valid pattern\n+   |             help: for a rest pattern, use `..` instead of `...`\n+\n+error: unexpected `...`\n+  --> $DIR/issue-70388-without-witness.rs:8:13\n+   |\n+LL |     let [_, ..., _] = [0, 1];\n+   |             ^^^\n+   |             |\n+   |             not a valid pattern\n+   |             help: for a rest pattern, use `..` instead of `...`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "93f7f97b04fb77220b9175270bfe335b1da9ad37", "filename": "src/test/ui/parser/let-binop.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Flet-binop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Flet-binop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a: i8 = 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = a;\n+    let b = 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = b;\n+    let c = 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = c;\n+}"}, {"sha": "2adbceae5d3c439a4157d0587ea5ebb7a826adab", "filename": "src/test/ui/parser/let-binop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n fn main() {\n     let a: i8 *= 1; //~ ERROR can't reassign to an uninitialized variable\n     let _ = a;"}, {"sha": "90295854a2d2d6a35be0bd81f7a65935704a08c2", "filename": "src/test/ui/parser/let-binop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,17 +1,17 @@\n error: can't reassign to an uninitialized variable\n-  --> $DIR/let-binop.rs:2:15\n+  --> $DIR/let-binop.rs:4:15\n    |\n LL |     let a: i8 *= 1;\n    |               ^^ help: initialize the variable\n \n error: can't reassign to an uninitialized variable\n-  --> $DIR/let-binop.rs:4:11\n+  --> $DIR/let-binop.rs:6:11\n    |\n LL |     let b += 1;\n    |           ^^ help: initialize the variable\n \n error: can't reassign to an uninitialized variable\n-  --> $DIR/let-binop.rs:6:11\n+  --> $DIR/let-binop.rs:8:11\n    |\n LL |     let c *= 1;\n    |           ^^ help: initialize the variable"}, {"sha": "f21024235a591c14edca52b78d09bb2849f286fa", "filename": "src/test/ui/parser/match-refactor-to-expr.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+fn main() {\n+    let foo =\n+         //~ NOTE while parsing this match expression\n+        Some(4).unwrap_or(5)\n+        //~^ NOTE expected one of `.`, `?`, `{`, or an operator\n+        ; //~ NOTE unexpected token\n+        //~^ ERROR expected one of `.`, `?`, `{`, or an operator, found `;`\n+\n+    println!(\"{}\", foo)\n+}"}, {"sha": "e02d74e2f7eac03457413a02372a6e2d04806fe5", "filename": "src/test/ui/parser/match-refactor-to-expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn main() {\n     let foo =\n         match //~ NOTE while parsing this match expression\n-        Some(4).unwrap_or_else(5)\n+        Some(4).unwrap_or(5)\n         //~^ NOTE expected one of `.`, `?`, `{`, or an operator\n         ; //~ NOTE unexpected token\n         //~^ ERROR expected one of `.`, `?`, `{`, or an operator, found `;`"}, {"sha": "15107ab9a258b699a131bba45734928a817f6ff5", "filename": "src/test/ui/parser/match-refactor-to-expr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,13 +1,13 @@\n error: expected one of `.`, `?`, `{`, or an operator, found `;`\n-  --> $DIR/match-refactor-to-expr.rs:6:9\n+  --> $DIR/match-refactor-to-expr.rs:8:9\n    |\n LL |         match\n    |         -----\n    |         |\n    |         while parsing this match expression\n    |         help: try removing this `match`\n-LL |         Some(4).unwrap_or_else(5)\n-   |                                  - expected one of `.`, `?`, `{`, or an operator\n+LL |         Some(4).unwrap_or(5)\n+   |                             - expected one of `.`, `?`, `{`, or an operator\n LL |\n LL |         ;\n    |         ^ unexpected token"}, {"sha": "fe23880d1d48a7973f217bb97e07548a64ad29b2", "filename": "src/test/ui/parser/range_inclusive.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+// Make sure that inclusive ranges with no end point don't parse.\n+\n+pub fn main() {\n+    for _ in 1.. {} //~ERROR inclusive range with no end\n+                     //~^HELP use `..` instead\n+}"}, {"sha": "bc6d2413d26232f5d62734475e2b4fedf8595805", "filename": "src/test/ui/parser/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n // Make sure that inclusive ranges with no end point don't parse.\n \n pub fn main() {"}, {"sha": "8a91782639f450f90053886c4ebc629481f7b8dc", "filename": "src/test/ui/parser/range_inclusive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/range_inclusive.rs:4:15\n+  --> $DIR/range_inclusive.rs:5:15\n    |\n LL |     for _ in 1..= {}\n    |               ^^^ help: use `..` instead"}, {"sha": "f44ebe5ba5bf2330c7e7348cab45d1d5f021d1f0", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -6,6 +6,7 @@ fn f<'a, T: Trait + ('a)>() {} //~ ERROR parenthesized lifetime bounds are not s\n \n fn check<'a>() {\n     let _: Box<Trait + ('a)>; //~ ERROR parenthesized lifetime bounds are not supported\n+    // FIXME: It'd be great if we could add suggestion to the following case.\n     let _: Box<('a) + Trait>; //~ ERROR lifetime in trait object type must be followed by `+`\n }\n "}, {"sha": "9c7a9662c40243e08d481e1f1ee07b0a934d3ffe", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -11,7 +11,7 @@ LL |     let _: Box<Trait + ('a)>;\n    |                        ^^^^ help: remove the parentheses\n \n error: lifetime in trait object type must be followed by `+`\n-  --> $DIR/trait-object-lifetime-parens.rs:9:17\n+  --> $DIR/trait-object-lifetime-parens.rs:10:17\n    |\n LL |     let _: Box<('a) + Trait>;\n    |                 ^^"}, {"sha": "928955630e9ffbcb41a1818a2763a67917dfeed2", "filename": "src/test/ui/path-lookahead.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpath-lookahead.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpath-lookahead.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+#![warn(unused_parens)]\n+\n+// Parser test for #37765\n+\n+fn with_parens<T: ToString>(arg: T) -> String {\n+    return <T as ToString>::to_string(&arg); //~WARN unnecessary parentheses around `return` value\n+}\n+\n+fn no_parens<T: ToString>(arg: T) -> String {\n+    return <T as ToString>::to_string(&arg);\n+}\n+\n+fn main() {}"}, {"sha": "d05c75fe8d8e0b13d3053950fc091b3c001cc4f0", "filename": "src/test/ui/path-lookahead.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpath-lookahead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpath-lookahead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,17 +1,17 @@\n // run-pass\n+// run-rustfix\n+\n #![allow(dead_code)]\n #![warn(unused_parens)]\n \n // Parser test for #37765\n \n fn with_parens<T: ToString>(arg: T) -> String {\n-  return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n+    return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n }\n \n fn no_parens<T: ToString>(arg: T) -> String {\n-  return <T as ToString>::to_string(&arg);\n+    return <T as ToString>::to_string(&arg);\n }\n \n-fn main() {\n-\n-}\n+fn main() {}"}, {"sha": "dcf235a9e277455079318ec30f933f6ae57a03da", "filename": "src/test/ui/path-lookahead.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,11 +1,11 @@\n warning: unnecessary parentheses around `return` value\n-  --> $DIR/path-lookahead.rs:8:10\n+  --> $DIR/path-lookahead.rs:10:12\n    |\n-LL |   return (<T as ToString>::to_string(&arg));\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n+LL |     return (<T as ToString>::to_string(&arg));\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/path-lookahead.rs:3:9\n+  --> $DIR/path-lookahead.rs:5:9\n    |\n LL | #![warn(unused_parens)]\n    |         ^^^^^^^^^^^^^"}, {"sha": "afd75a41f7b0f7d026893a11408a69b5d208689b", "filename": "src/test/ui/pub/pub-ident-fn-2.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+pub fn foo(_s: usize) { bar() }\n+//~^ ERROR missing `fn` for function definition\n+\n+fn bar() {}\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "e7b86a9098d16dd9575c101ffe675461a10e5521", "filename": "src/test/ui/pub/pub-ident-fn-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,6 +1,10 @@\n-pub foo(s: usize) { bar() }\n+// run-rustfix\n+\n+pub foo(_s: usize) { bar() }\n //~^ ERROR missing `fn` for function definition\n \n+fn bar() {}\n+\n fn main() {\n     foo(2);\n }"}, {"sha": "b830b0e90098a490db11ac237b7578e3937b4a22", "filename": "src/test/ui/pub/pub-ident-fn-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,12 +1,12 @@\n error: missing `fn` for function definition\n-  --> $DIR/pub-ident-fn-2.rs:1:4\n+  --> $DIR/pub-ident-fn-2.rs:3:4\n    |\n-LL | pub foo(s: usize) { bar() }\n+LL | pub foo(_s: usize) { bar() }\n    |    ^\n    |\n help: add `fn` here to parse `foo` as a public function\n    |\n-LL | pub fn foo(s: usize) { bar() }\n+LL | pub fn foo(_s: usize) { bar() }\n    |     ^^\n \n error: aborting due to previous error"}, {"sha": "e510ace5fc14c91f44874a240b0ff040a409f4f9", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+pub fn foo<'a>(_s: &'a usize) -> bool { true }\n+//~^ ERROR missing `fn` for function definition\n+\n+fn main() {\n+    foo(&2);\n+}"}, {"sha": "63e6eca151600ffed09c849482d3f8c3d3f775ff", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,6 +1,8 @@\n+// run-rustfix\n+\n pub   foo<'a>(_s: &'a usize) -> bool { true }\n //~^ ERROR missing `fn` for function definition\n \n fn main() {\n-    foo(2);\n+    foo(&2);\n }"}, {"sha": "5b378df04b025d4243fadb2f3fd188b066bfc190", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error: missing `fn` for function definition\n-  --> $DIR/pub-ident-fn-with-lifetime.rs:1:4\n+  --> $DIR/pub-ident-fn-with-lifetime.rs:3:4\n    |\n LL | pub   foo<'a>(_s: &'a usize) -> bool { true }\n    |    ^^^"}, {"sha": "58cde8fd6e0ca9a432580d7e4879f0668b4c679c", "filename": "src/test/ui/pub/pub-ident-struct.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+pub struct S {\n+//~^ ERROR missing `struct` for struct definition\n+}\n+fn main() {}"}, {"sha": "3930e556e9a9cc1fc9a2ac591beb3628c65f8070", "filename": "src/test/ui/pub/pub-ident-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n pub S {\n //~^ ERROR missing `struct` for struct definition\n }"}, {"sha": "8af24904ef24cc1f4bec0d7e6c9dad202b5b91d6", "filename": "src/test/ui/pub/pub-ident-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error: missing `struct` for struct definition\n-  --> $DIR/pub-ident-struct.rs:1:4\n+  --> $DIR/pub-ident-struct.rs:3:4\n    |\n LL | pub S {\n    |    ^"}, {"sha": "22ab6c755be2d30c33eb87438e5c0ac411bf2391", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,20 @@\n+// In expression, `&a..=b` is treated as `(&a)..=(b)` and `box a..=b` is\n+// `(box a)..=(b)`. In a pattern, however, `&a..=b` means `&(a..=b)`. This may\n+// lead to confusion.\n+\n+// run-rustfix\n+\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n+pub fn main() {\n+    match &12 {\n+        &(0..=9) => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        //~| HELP use `..=` for an inclusive range\n+        &(10 ..=15) => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~^^ HELP add parentheses to clarify the precedence\n+        &(16..=20) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "f38a7920c94d66f26fae6824b76c5e3a643b2717", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,13 +1,10 @@\n // In expression, `&a..=b` is treated as `(&a)..=(b)` and `box a..=b` is\n // `(box a)..=(b)`. In a pattern, however, `&a..=b` means `&(a..=b)`. This may\n // lead to confusion.\n-//\n-// We are going to disallow `&a..=b` and `box a..=b` in a pattern. However, the\n-// older ... syntax is still allowed as a stability guarantee.\n \n-#![feature(box_patterns)]\n-#![warn(ellipsis_inclusive_range_patterns)]\n+// run-rustfix\n \n+#![warn(ellipsis_inclusive_range_patterns)]\n \n pub fn main() {\n     match &12 {\n@@ -20,15 +17,4 @@ pub fn main() {\n         &(16..=20) => {}\n         _ => {}\n     }\n-\n-    match Box::new(12) {\n-        box 0...9 => {}\n-        //~^ WARN `...` range patterns are deprecated\n-        //~| HELP use `..=` for an inclusive range\n-        box 10..=15 => {}\n-        //~^ ERROR the range pattern here has ambiguous interpretation\n-        //~^^ HELP add parentheses to clarify the precedence\n-        box (16..=20) => {}\n-        _ => {}\n-    }\n }"}, {"sha": "853141969c20da8b252a2a3162126ad3e5453688", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,32 +1,20 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:17:10\n+  --> $DIR/range-inclusive-pattern-precedence.rs:14:10\n    |\n LL |         &10..=15 => {}\n    |          ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n \n-error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:28:13\n-   |\n-LL |         box 10..=15 => {}\n-   |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n-\n warning: `...` range patterns are deprecated\n-  --> $DIR/range-inclusive-pattern-precedence.rs:14:9\n+  --> $DIR/range-inclusive-pattern-precedence.rs:11:9\n    |\n LL |         &0...9 => {}\n    |         ^^^^^^ help: use `..=` for an inclusive range: `&(0..=9)`\n    |\n note: the lint level is defined here\n-  --> $DIR/range-inclusive-pattern-precedence.rs:9:9\n+  --> $DIR/range-inclusive-pattern-precedence.rs:7:9\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: `...` range patterns are deprecated\n-  --> $DIR/range-inclusive-pattern-precedence.rs:25:14\n-   |\n-LL |         box 0...9 => {}\n-   |              ^^^ help: use `..=` for an inclusive range\n-\n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "6a3fd413e4fd7f0605a5571155bc310dfa0ecdf2", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,19 @@\n+// We are going to disallow `&a..=b` and `box a..=b` in a pattern. However, the\n+// older ... syntax is still allowed as a stability guarantee.\n+\n+#![feature(box_patterns)]\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    match Box::new(12) {\n+        // FIXME: can we add suggestions like `&(0..=9)`?\n+        box 0...9 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        //~| HELP use `..=` for an inclusive range\n+        box 10..=15 => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~^^ HELP add parentheses to clarify the precedence\n+        box (16..=20) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "7fbd972569e8dc81af4ed61aa9a15efa1931c396", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,20 @@\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/range-inclusive-pattern-precedence2.rs:13:13\n+   |\n+LL |         box 10..=15 => {}\n+   |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n+\n+warning: `...` range patterns are deprecated\n+  --> $DIR/range-inclusive-pattern-precedence2.rs:10:14\n+   |\n+LL |         box 0...9 => {}\n+   |              ^^^ help: use `..=` for an inclusive range\n+   |\n+note: the lint level is defined here\n+  --> $DIR/range-inclusive-pattern-precedence2.rs:5:9\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "e429513b51d3411f5bebebf59fb1edcf3d26af1a", "filename": "src/test/ui/resolve/resolve-conflict-import-vs-import.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#[allow(unused_imports)]\n+use std::mem::transmute;\n+\n+//~^ ERROR the name `transmute` is defined multiple times\n+\n+fn main() {\n+}"}, {"sha": "43853117af6999202a5cb1197a3cea52d24c882b", "filename": "src/test/ui/resolve/resolve-conflict-import-vs-import.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+\n+#[allow(unused_imports)]\n use std::mem::transmute;\n use std::mem::transmute;\n //~^ ERROR the name `transmute` is defined multiple times"}, {"sha": "632be50f4c4bf0239e3a9daca7b361fff70d010a", "filename": "src/test/ui/resolve/resolve-conflict-import-vs-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error[E0252]: the name `transmute` is defined multiple times\n-  --> $DIR/resolve-conflict-import-vs-import.rs:2:5\n+  --> $DIR/resolve-conflict-import-vs-import.rs:5:5\n    |\n LL | use std::mem::transmute;\n    |     ------------------- previous import of the value `transmute` here"}, {"sha": "064b9e74e24fd524ea203b9bbda4150ce99e48e1", "filename": "src/test/ui/resolve/token-error-correct-4.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// Test that we do some basic error correction in the tokeniser and apply suggestions.\n+\n+fn setsuna(_: ()) {}\n+\n+fn kazusa() {}\n+\n+fn main() {\n+    setsuna(kazusa()); //~ ERROR: expected one of\n+} //~ ERROR: expected expression"}, {"sha": "5e31d71e7bf46dafb611a310262582938d1c7fac", "filename": "src/test/ui/resolve/token-error-correct-4.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// Test that we do some basic error correction in the tokeniser and apply suggestions.\n+\n+fn setsuna(_: ()) {}\n+\n+fn kazusa() {}\n+\n+fn main() {\n+    setsuna(kazusa(); //~ ERROR: expected one of\n+} //~ ERROR: expected expression"}, {"sha": "64aff54ba731128370867ce82a5a947daa6064e2", "filename": "src/test/ui/resolve/token-error-correct-4.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,16 @@\n+error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n+  --> $DIR/token-error-correct-4.rs:9:21\n+   |\n+LL |     setsuna(kazusa();\n+   |            -        ^ help: `)` may belong here\n+   |            |\n+   |            unclosed delimiter\n+\n+error: expected expression, found `)`\n+  --> $DIR/token-error-correct-4.rs:10:1\n+   |\n+LL | }\n+   | ^ expected expression\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "addba76ae3b51fd214b0e3a4a040340b8b0b8c62", "filename": "src/test/ui/similar-tokens.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsimilar-tokens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsimilar-tokens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+\n+pub mod x {\n+    pub struct A;\n+    pub struct B;\n+}\n+\n+// `.` is similar to `,` so list parsing should continue to closing `}`\n+use x::{A, B}; //~ ERROR expected one of `,`, `::`, `as`, or `}`, found `.`\n+\n+fn main() {}"}, {"sha": "3d1bf5fe54ae1132fd2ef05ec9cd309670a4468e", "filename": "src/test/ui/similar-tokens.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsimilar-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsimilar-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,4 +1,8 @@\n-mod x {\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+\n+pub mod x {\n     pub struct A;\n     pub struct B;\n }"}, {"sha": "6a8d09ebae668083a8d2006ff3d6124982814509", "filename": "src/test/ui/similar-tokens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,`, `::`, `as`, or `}`, found `.`\n-  --> $DIR/similar-tokens.rs:7:10\n+  --> $DIR/similar-tokens.rs:11:10\n    |\n LL | use x::{A. B};\n    |          ^"}, {"sha": "c804cf57abaaadb53e3d913ce5ad2a88520da28e", "filename": "src/test/ui/structs/struct-duplicate-comma.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+// Issue #50974\n+\n+pub struct Foo {\n+    pub a: u8,\n+    pub b: u8\n+}\n+\n+fn main() {\n+    let _ = Foo {\n+        a: 0,\n+          //~^ ERROR expected identifier\n+        b: 42\n+    };\n+}"}, {"sha": "db2e7cb3d05e6fb6485c602c770eba6125c48306", "filename": "src/test/ui/structs/struct-duplicate-comma.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,12 +1,13 @@\n+// run-rustfix\n // Issue #50974\n \n-struct Foo {\n-    a: u8,\n-    b: u8\n+pub struct Foo {\n+    pub a: u8,\n+    pub b: u8\n }\n \n fn main() {\n-    let bar = Foo {\n+    let _ = Foo {\n         a: 0,,\n           //~^ ERROR expected identifier\n         b: 42"}, {"sha": "834b3c5c17164c4136f05f054b6651c6073b7fe4", "filename": "src/test/ui/structs/struct-duplicate-comma.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,8 @@\n error: expected identifier, found `,`\n-  --> $DIR/struct-duplicate-comma.rs:10:14\n+  --> $DIR/struct-duplicate-comma.rs:11:14\n    |\n-LL |     let bar = Foo {\n-   |               --- while parsing this struct\n+LL |     let _ = Foo {\n+   |             --- while parsing this struct\n LL |         a: 0,,\n    |              ^\n    |              |"}, {"sha": "a28179ba241681ae4ab2d54dc09f22d8fbcb8b80", "filename": "src/test/ui/structs/struct-missing-comma.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,12 @@\n+// Issue #50636\n+// run-rustfix\n+\n+pub struct S {\n+    pub foo: u32, //~ expected `,`, or `}`, found keyword `pub`\n+    //     ~^ HELP try adding a comma: ','\n+    pub bar: u32\n+}\n+\n+fn main() {\n+    let _ = S { foo: 5, bar: 6 };\n+}"}, {"sha": "b6d6c9b8f87628599e23223db499e53acb4ca25f", "filename": "src/test/ui/structs/struct-missing-comma.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,11 +1,12 @@\n // Issue #50636\n+// run-rustfix\n \n-struct S {\n-    foo: u32 //~ expected `,`, or `}`, found `bar`\n+pub struct S {\n+    pub foo: u32 //~ expected `,`, or `}`, found keyword `pub`\n     //     ~^ HELP try adding a comma: ','\n-    bar: u32\n+    pub bar: u32\n }\n \n fn main() {\n-    let s = S { foo: 5, bar: 6 };\n+    let _ = S { foo: 5, bar: 6 };\n }"}, {"sha": "eceec65e7634625a120d0bbae3ae7d5175a06390", "filename": "src/test/ui/structs/struct-missing-comma.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,8 +1,8 @@\n-error: expected `,`, or `}`, found `bar`\n-  --> $DIR/struct-missing-comma.rs:4:13\n+error: expected `,`, or `}`, found keyword `pub`\n+  --> $DIR/struct-missing-comma.rs:5:17\n    |\n-LL |     foo: u32\n-   |             ^ help: try adding a comma: `,`\n+LL |     pub foo: u32\n+   |                 ^ help: try adding a comma: `,`\n \n error: aborting due to previous error\n "}, {"sha": "6a4ee39b16d86e8b08d3fadff41e0a8177938a21", "filename": "src/test/ui/suggestions/struct-initializer-comma.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+pub struct Foo {\n+    pub first: bool,\n+    pub second: u8,\n+}\n+\n+fn main() {\n+    let _ = Foo {\n+        //~^ ERROR missing field\n+        first: true,\n+        second: 25\n+        //~^ ERROR expected one of\n+    };\n+}"}, {"sha": "c137f0594186d0608ed73094286d8c6d95cec58f", "filename": "src/test/ui/suggestions/struct-initializer-comma.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,10 +1,12 @@\n-struct Foo {\n-    first: bool,\n-    second: u8,\n+// run-rustfix\n+\n+pub struct Foo {\n+    pub first: bool,\n+    pub second: u8,\n }\n \n fn main() {\n-    let a = Foo {\n+    let _ = Foo {\n         //~^ ERROR missing field\n         first: true\n         second: 25"}, {"sha": "5eff43f32cda15e97945e53a754140c989249ced", "filename": "src/test/ui/suggestions/struct-initializer-comma.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `,`, `.`, `?`, `}`, or an operator, found `second`\n-  --> $DIR/struct-initializer-comma.rs:10:9\n+  --> $DIR/struct-initializer-comma.rs:12:9\n    |\n-LL |     let a = Foo {\n+LL |     let _ = Foo {\n    |             --- while parsing this struct\n LL |\n LL |         first: true\n@@ -13,9 +13,9 @@ LL |         second: 25\n    |         ^^^^^^ unexpected token\n \n error[E0063]: missing field `second` in initializer of `Foo`\n-  --> $DIR/struct-initializer-comma.rs:7:13\n+  --> $DIR/struct-initializer-comma.rs:9:13\n    |\n-LL |     let a = Foo {\n+LL |     let _ = Foo {\n    |             ^^^ missing `second`\n \n error: aborting due to 2 previous errors"}, {"sha": "042e85b10ae21dfec6a764d946d12b8719356bdc", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let v = vec![0, 1, 2, 3];\n+\n+    for (i, _) in v.iter().enumerate() {\n+        //~^ ERROR `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "7bdf5dbf35884c82abe877bf3f36e19ebb327210", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn main() {\n     let v = vec![0, 1, 2, 3];\n \n-    for (i, n) in &v.iter().enumerate() {\n+    for (i, _) in &v.iter().enumerate() {\n         //~^ ERROR `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n         println!(\"{}\", i);\n     }"}, {"sha": "5be0072fa33024120f86db58e96fcf4f3a3c2564", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-  --> $DIR/suggest-remove-refs-1.rs:4:19\n+  --> $DIR/suggest-remove-refs-1.rs:6:19\n    |\n-LL |     for (i, n) in &v.iter().enumerate() {\n+LL |     for (i, _) in &v.iter().enumerate() {\n    |                   -^^^^^^^^^^^^^^^^^^^^\n    |                   |\n    |                   `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator"}, {"sha": "bdf47b0e87f131096e26bf2b7280970891e2a7c2", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let v = vec![0, 1, 2, 3];\n+\n+    for (i, _) in v.iter().enumerate() {\n+        //~^ ERROR `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "3ed56377e146c03e550b5f1c626eeff6c2d546dc", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn main() {\n     let v = vec![0, 1, 2, 3];\n \n-    for (i, n) in & & & & &v.iter().enumerate() {\n+    for (i, _) in & & & & &v.iter().enumerate() {\n         //~^ ERROR `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n         println!(\"{}\", i);\n     }"}, {"sha": "ff84a2ce377051b59f3fb06b10b5068f460934b8", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-  --> $DIR/suggest-remove-refs-2.rs:4:19\n+  --> $DIR/suggest-remove-refs-2.rs:6:19\n    |\n-LL |     for (i, n) in & & & & &v.iter().enumerate() {\n+LL |     for (i, _) in & & & & &v.iter().enumerate() {\n    |                   ---------^^^^^^^^^^^^^^^^^^^^\n    |                   |\n    |                   `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator"}, {"sha": "e0ecafabf393eb833facca2966161858b3745c10", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+fn main() {\n+    let v = vec![0, 1, 2, 3];\n+\n+    for (i, _) in v\n+        .iter()\n+        .enumerate() {\n+        //~^^^^ ERROR `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "e13099e8c32465d0c569d61e7120262b86c3198c", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn main() {\n     let v = vec![0, 1, 2, 3];\n \n-    for (i, n) in & & &\n+    for (i, _) in & & &\n         & &v\n         .iter()\n         .enumerate() {"}, {"sha": "d2f7c72b0e474ff8d5656c50ad9735ba8cba29d8", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-  --> $DIR/suggest-remove-refs-3.rs:4:19\n+  --> $DIR/suggest-remove-refs-3.rs:6:19\n    |\n-LL |        for (i, n) in & & &\n+LL |        for (i, _) in & & &\n    |   ___________________^\n    |  |___________________|\n    | ||"}, {"sha": "c8b03c2006840c4dc864c3785c88c2b3a633dbbf", "filename": "src/test/ui/try-block/try-block-unused-delims.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// compile-flags: --edition 2018\n+// run-rustfix\n+\n+#![feature(try_blocks)]\n+#![warn(unused_parens, unused_braces)]\n+\n+fn consume<T>(_: Result<T, T>) -> T { todo!() }\n+\n+fn main() {\n+    consume(try {});\n+    //~^ WARN unnecessary parentheses\n+\n+    consume( try {} );\n+    //~^ WARN unnecessary braces\n+\n+    match try {} {\n+        //~^ WARN unnecessary parentheses\n+        Ok(()) | Err(()) => (),\n+    }\n+\n+    if let Err(()) = try {} {}\n+    //~^ WARN unnecessary parentheses\n+\n+    match try {} {\n+        //~^ WARN unnecessary parentheses\n+        Ok(()) | Err(()) => (),\n+    }\n+}"}, {"sha": "ce087fb351d63e4823ab88056bc47447ccb08d9b", "filename": "src/test/ui/try-block/try-block-unused-delims.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n // compile-flags: --edition 2018\n+// run-rustfix\n \n #![feature(try_blocks)]\n #![warn(unused_parens, unused_braces)]"}, {"sha": "c5a2405462932dad56d491348e71c97f63c38e0e", "filename": "src/test/ui/try-block/try-block-unused-delims.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,41 +1,41 @@\n warning: unnecessary parentheses around function argument\n-  --> $DIR/try-block-unused-delims.rs:10:13\n+  --> $DIR/try-block-unused-delims.rs:11:13\n    |\n LL |     consume((try {}));\n    |             ^^^^^^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/try-block-unused-delims.rs:5:9\n+  --> $DIR/try-block-unused-delims.rs:6:9\n    |\n LL | #![warn(unused_parens, unused_braces)]\n    |         ^^^^^^^^^^^^^\n \n warning: unnecessary braces around function argument\n-  --> $DIR/try-block-unused-delims.rs:13:13\n+  --> $DIR/try-block-unused-delims.rs:14:13\n    |\n LL |     consume({ try {} });\n    |             ^^^^^^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/try-block-unused-delims.rs:5:24\n+  --> $DIR/try-block-unused-delims.rs:6:24\n    |\n LL | #![warn(unused_parens, unused_braces)]\n    |                        ^^^^^^^^^^^^^\n \n warning: unnecessary parentheses around `match` scrutinee expression\n-  --> $DIR/try-block-unused-delims.rs:16:11\n+  --> $DIR/try-block-unused-delims.rs:17:11\n    |\n LL |     match (try {}) {\n    |           ^^^^^^^^ help: remove these parentheses\n \n warning: unnecessary parentheses around `let` scrutinee expression\n-  --> $DIR/try-block-unused-delims.rs:21:22\n+  --> $DIR/try-block-unused-delims.rs:22:22\n    |\n LL |     if let Err(()) = (try {}) {}\n    |                      ^^^^^^^^ help: remove these parentheses\n \n warning: unnecessary parentheses around `match` scrutinee expression\n-  --> $DIR/try-block-unused-delims.rs:24:11\n+  --> $DIR/try-block-unused-delims.rs:25:11\n    |\n LL |     match (try {}) {\n    |           ^^^^^^^^ help: remove these parentheses"}, {"sha": "7fdd618c2ecaedede78bc73c5f488b152ef986dc", "filename": "src/test/ui/typeck/issue-73592-borrow_mut-through-deref.fixed", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,59 @@\n+// check-pass\n+// run-rustfix\n+//\n+// rust-lang/rust#73592: borrow_mut through Deref should work.\n+//\n+// Before #72280, when we see something like `&mut *rcvr.method()`, we\n+// incorrectly requires `rcvr` to be type-checked as a mut place. While this\n+// requirement is usually correct for smart pointers, it is overly restrictive\n+// for types like `Mutex` or `RefCell` which can produce a guard that\n+// implements `DerefMut` from `&self`.\n+//\n+// Making it more confusing, because we use Deref as the fallback when DerefMut\n+// is implemented, we won't see an issue when the smart pointer does not\n+// implement `DerefMut`. It only causes an issue when `rcvr` is obtained via a\n+// type that implements both `Deref` or `DerefMut`.\n+//\n+// This bug is only discovered in #73592 after it is already fixed as a side-effect\n+// of a refactoring made in #72280.\n+\n+#![warn(unused_mut)]\n+\n+use std::pin::Pin;\n+use std::cell::RefCell;\n+\n+struct S(RefCell<()>);\n+\n+fn test_pin(s: Pin<&S>) {\n+    // This works before #72280.\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_pin_mut(s: Pin<&mut S>) {\n+    // This should compile but didn't before #72280.\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_vec(s: &Vec<RefCell<()>>) {\n+    // This should compile but didn't before #72280.\n+    let _ = &mut *s[0].borrow_mut();\n+}\n+\n+fn test_mut_pin(s: Pin<&S>) {\n+    //~^ WARN variable does not need to be mutable\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_mut_pin_mut(s: Pin<&mut S>) {\n+    //~^ WARN variable does not need to be mutable\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn main() {\n+    let mut s = S(RefCell::new(()));\n+    test_pin(Pin::new(&s));\n+    test_pin_mut(Pin::new(&mut s));\n+    test_mut_pin(Pin::new(&s));\n+    test_mut_pin_mut(Pin::new(&mut s));\n+    test_vec(&vec![s.0]);\n+}"}, {"sha": "3b399e629d3419d51a2a8f69c9353318eacabc3c", "filename": "src/test/ui/typeck/issue-73592-borrow_mut-through-deref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// run-rustfix\n //\n // rust-lang/rust#73592: borrow_mut through Deref should work.\n //"}, {"sha": "5f5f672c3843a1de8cedcc3b94a774cd138329ba", "filename": "src/test/ui/typeck/issue-73592-borrow_mut-through-deref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,19 +1,19 @@\n warning: variable does not need to be mutable\n-  --> $DIR/issue-73592-borrow_mut-through-deref.rs:41:17\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:42:17\n    |\n LL | fn test_mut_pin(mut s: Pin<&S>) {\n    |                 ----^\n    |                 |\n    |                 help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-73592-borrow_mut-through-deref.rs:19:9\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:20:9\n    |\n LL | #![warn(unused_mut)]\n    |         ^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/issue-73592-borrow_mut-through-deref.rs:46:21\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:47:21\n    |\n LL | fn test_mut_pin_mut(mut s: Pin<&mut S>) {\n    |                     ----^"}, {"sha": "b67b2a7259be0a29921a8c04d0e4d473fd7bd7e9", "filename": "src/test/ui/unused/unused-mut-warning-captured-var.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#![forbid(unused_mut)]\n+\n+fn main() {\n+    let x = 1;\n+    //~^ ERROR: variable does not need to be mutable\n+    move|| { println!(\"{}\", x); };\n+}"}, {"sha": "8726c4f173fa3a31f7e1d3a850c855289b574166", "filename": "src/test/ui/unused/unused-mut-warning-captured-var.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![forbid(unused_mut)]\n \n fn main() {"}, {"sha": "20aeedcc24125ecf7981fb75b2f1bb14c28a9aa4", "filename": "src/test/ui/unused/unused-mut-warning-captured-var.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.stderr?ref=e74ab50d07a8b21e8d03ebfb0da8dae6583b1e67", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/unused-mut-warning-captured-var.rs:4:9\n+  --> $DIR/unused-mut-warning-captured-var.rs:6:9\n    |\n LL |     let mut x = 1;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-mut-warning-captured-var.rs:1:11\n+  --> $DIR/unused-mut-warning-captured-var.rs:3:11\n    |\n LL | #![forbid(unused_mut)]\n    |           ^^^^^^^^^^"}]}