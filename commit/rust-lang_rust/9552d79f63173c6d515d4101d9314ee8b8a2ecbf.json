{"sha": "9552d79f63173c6d515d4101d9314ee8b8a2ecbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTJkNzlmNjMxNzNjNmQ1MTVkNDEwMWQ5MzE0ZWU4YjhhMmVjYmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-25T20:38:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-25T20:38:18Z"}, "message": "Merge #9402\n\n9402: internal: add cloning macro fixture r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f921b6862a13d6e156cbc0d14bea49c6612c35b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f921b6862a13d6e156cbc0d14bea49c6612c35b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9552d79f63173c6d515d4101d9314ee8b8a2ecbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg1j66CRBK7hj4Ov3rIwAAabYIACncvtIUzoCXPx/5GNPric+4\nG/0XLvND4Jt/jTNlU+O6p7TW+5Yy84ZW5VIW4HIhcsLZvv/P9SDRhS9s0XBQHSAt\nZhVmTYOFYDG0dEnqp7BS3l15w3UJqO0kdAIlSrO4qeFbpvR+8hznS1ryiBmSm9+U\nfOI8fj1N2xdYsNFjT9w32LMMPb+0Pd1N3NnhehLnqYX6m6n8wv9yygSuWQhuiDOK\nAhihcg3bq6CkfyT3xUy48DBb3tN3bIuroyHXvmSsyBehUJi1eGsus9TiCp91SvVl\n5+apAdsd26c3E9Y7UFTTtI9lroIRPVEkh3P32laAj2drnhGBMnMe6iljK6NJyVc=\n=dONN\n-----END PGP SIGNATURE-----\n", "payload": "tree f921b6862a13d6e156cbc0d14bea49c6612c35b6\nparent 2ac1ffc0f3bef98f74b0c3d7ac2371d73c75ce5c\nparent c27fdc75fad67381e43cd7ce7e92a59f5e8fe087\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624653498 +0000\ncommitter GitHub <noreply@github.com> 1624653498 +0000\n\nMerge #9402\n\n9402: internal: add cloning macro fixture r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9552d79f63173c6d515d4101d9314ee8b8a2ecbf", "html_url": "https://github.com/rust-lang/rust/commit/9552d79f63173c6d515d4101d9314ee8b8a2ecbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9552d79f63173c6d515d4101d9314ee8b8a2ecbf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ac1ffc0f3bef98f74b0c3d7ac2371d73c75ce5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac1ffc0f3bef98f74b0c3d7ac2371d73c75ce5c", "html_url": "https://github.com/rust-lang/rust/commit/2ac1ffc0f3bef98f74b0c3d7ac2371d73c75ce5c"}, {"sha": "c27fdc75fad67381e43cd7ce7e92a59f5e8fe087", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27fdc75fad67381e43cd7ce7e92a59f5e8fe087", "html_url": "https://github.com/rust-lang/rust/commit/c27fdc75fad67381e43cd7ce7e92a59f5e8fe087"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "d9037ee57f553b0929f4b2c61d46e43227cd2019", "filename": "crates/proc_macro_srv/src/tests/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9552d79f63173c6d515d4101d9314ee8b8a2ecbf/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9552d79f63173c6d515d4101d9314ee8b8a2ecbf/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs?ref=9552d79f63173c6d515d4101d9314ee8b8a2ecbf", "patch": "@@ -42,6 +42,19 @@ fn test_fn_like_macro() {\n     );\n }\n \n+#[test]\n+fn test_fn_like_macro2() {\n+    assert_expand(\n+        \"fn_like_clone_tokens\",\n+        r#\"ident, []\"#,\n+        expect![[r#\"\n+            SUBTREE $\n+              IDENT   ident 4294967295\n+              PUNCH   , [alone] 4294967295\n+              SUBTREE [] 4294967295\"#]],\n+    );\n+}\n+\n #[test]\n fn test_attr_macro() {\n     // Corresponds to\n@@ -70,6 +83,7 @@ fn list_test_macros() {\n         fn_like_noop [FuncLike]\n         fn_like_panic [FuncLike]\n         fn_like_error [FuncLike]\n+        fn_like_clone_tokens [FuncLike]\n         attr_noop [Attr]\n         attr_panic [Attr]\n         attr_error [Attr]"}, {"sha": "980187a902fd407ec3dd3526fd7a85efe8c2d0e3", "filename": "crates/proc_macro_test/imp/src/lib.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9552d79f63173c6d515d4101d9314ee8b8a2ecbf/crates%2Fproc_macro_test%2Fimp%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9552d79f63173c6d515d4101d9314ee8b8a2ecbf/crates%2Fproc_macro_test%2Fimp%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2Fimp%2Fsrc%2Flib.rs?ref=9552d79f63173c6d515d4101d9314ee8b8a2ecbf", "patch": "@@ -1,6 +1,6 @@\n //! Exports a few trivial procedural macros for testing.\n \n-use proc_macro::TokenStream;\n+use proc_macro::{Group, Ident, Punct, TokenStream, TokenTree};\n \n #[proc_macro]\n pub fn fn_like_noop(args: TokenStream) -> TokenStream {\n@@ -17,6 +17,11 @@ pub fn fn_like_error(args: TokenStream) -> TokenStream {\n     format!(\"compile_error!(\\\"fn_like_error!({})\\\");\", args).parse().unwrap()\n }\n \n+#[proc_macro]\n+pub fn fn_like_clone_tokens(args: TokenStream) -> TokenStream {\n+    clone_stream(args)\n+}\n+\n #[proc_macro_attribute]\n pub fn attr_noop(_args: TokenStream, item: TokenStream) -> TokenStream {\n     item\n@@ -46,3 +51,24 @@ pub fn derive_panic(item: TokenStream) -> TokenStream {\n pub fn derive_error(item: TokenStream) -> TokenStream {\n     format!(\"compile_error!(\\\"#[derive(DeriveError)] {}\\\");\", item).parse().unwrap()\n }\n+\n+fn clone_stream(ts: TokenStream) -> TokenStream {\n+    ts.into_iter().map(clone_tree).collect()\n+}\n+\n+fn clone_tree(t: TokenTree) -> TokenTree {\n+    match t {\n+        TokenTree::Group(orig) => {\n+            let mut new = Group::new(orig.delimiter(), clone_stream(orig.stream()));\n+            new.set_span(orig.span());\n+            TokenTree::Group(new)\n+        }\n+        TokenTree::Ident(orig) => TokenTree::Ident(Ident::new(&orig.to_string(), orig.span())),\n+        TokenTree::Punct(orig) => {\n+            let mut new = Punct::new(orig.as_char(), orig.spacing());\n+            new.set_span(orig.span());\n+            TokenTree::Punct(new)\n+        }\n+        TokenTree::Literal(_orig) => unimplemented!(),\n+    }\n+}"}]}