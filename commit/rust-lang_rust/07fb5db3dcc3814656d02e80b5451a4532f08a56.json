{"sha": "07fb5db3dcc3814656d02e80b5451a4532f08a56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZmI1ZGIzZGNjMzgxNDY1NmQwMmU4MGI1NDUxYTQ1MzJmMDhhNTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-10T14:14:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-10T14:14:02Z"}, "message": "Merge #10177\n\n10177: fix: Treat path dependencies like workspace members r=jonas-schievink a=jonas-schievink\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/9070\r\n\r\nFixes diagnostics not showing up in path dependencies.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "d61cf0dfe0f8267d9099b59588ae5fa9aa5ce118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d61cf0dfe0f8267d9099b59588ae5fa9aa5ce118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07fb5db3dcc3814656d02e80b5451a4532f08a56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhO2gqCRBK7hj4Ov3rIwAArGAIALAoFdwlBbsNbPkzaQk5z3yx\nQejBqoh4myG+71WD5HoE339NLFaC9HYWXvggfhFJ21cej2MwquNbocaK6mnf3f/G\nMuF+iRkg04DicikQ5FQHGXDcaxsJr7M3L+XKXqu+BcKCHrkJSW2vjpTRh+zxxG+9\nQI+ZioAWaYSGo/dBFDYg0/QhrVW79v6bzXYdB0hhj0K7Dts9e9FQLR5wG5Mn7M6z\nsbx6q/y3H+6LMtIJOjcstbSr1ZiiZaHkoWP4NNsDOcrqlWmGjdy1n2Z7xa5iNNTY\nGTCMDN50iuOPpcHIhBjHKkjTkJdrB9MdvP8mgJtmeelQsrnwZhUDuIbnGSpOMM8=\n=8UIT\n-----END PGP SIGNATURE-----\n", "payload": "tree d61cf0dfe0f8267d9099b59588ae5fa9aa5ce118\nparent 21a1ced8b64a70dd22d215c16d72968bde10cab2\nparent e241015a75ba0ae13f399ef86825ae6a6ea282a6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631283242 +0000\ncommitter GitHub <noreply@github.com> 1631283242 +0000\n\nMerge #10177\n\n10177: fix: Treat path dependencies like workspace members r=jonas-schievink a=jonas-schievink\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/9070\r\n\r\nFixes diagnostics not showing up in path dependencies.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07fb5db3dcc3814656d02e80b5451a4532f08a56", "html_url": "https://github.com/rust-lang/rust/commit/07fb5db3dcc3814656d02e80b5451a4532f08a56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07fb5db3dcc3814656d02e80b5451a4532f08a56/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21a1ced8b64a70dd22d215c16d72968bde10cab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/21a1ced8b64a70dd22d215c16d72968bde10cab2", "html_url": "https://github.com/rust-lang/rust/commit/21a1ced8b64a70dd22d215c16d72968bde10cab2"}, {"sha": "e241015a75ba0ae13f399ef86825ae6a6ea282a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e241015a75ba0ae13f399ef86825ae6a6ea282a6", "html_url": "https://github.com/rust-lang/rust/commit/e241015a75ba0ae13f399ef86825ae6a6ea282a6"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "851a264ca37c4ae8b6c4e909be8e04bab17d6ab5", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07fb5db3dcc3814656d02e80b5451a4532f08a56/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fb5db3dcc3814656d02e80b5451a4532f08a56/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=07fb5db3dcc3814656d02e80b5451a4532f08a56", "patch": "@@ -135,8 +135,8 @@ pub struct PackageData {\n     pub manifest: ManifestPath,\n     /// Targets provided by the crate (lib, bin, example, test, ...)\n     pub targets: Vec<Target>,\n-    /// Is this package a member of the current workspace\n-    pub is_member: bool,\n+    /// Does this package come from the local filesystem (and is editable)?\n+    pub is_local: bool,\n     /// List of packages this package depends on\n     pub dependencies: Vec<PackageDependency>,\n     /// Rust edition for this package\n@@ -296,27 +296,27 @@ impl CargoWorkspace {\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();\n \n-        let ws_members = &meta.workspace_members;\n-\n         meta.packages.sort_by(|a, b| a.id.cmp(&b.id));\n         for meta_pkg in &meta.packages {\n             let cargo_metadata::Package {\n                 id, edition, name, manifest_path, version, metadata, ..\n             } = meta_pkg;\n             let meta = from_value::<PackageMetadata>(metadata.clone()).unwrap_or_default();\n-            let is_member = ws_members.contains(id);\n             let edition = edition.parse::<Edition>().unwrap_or_else(|err| {\n                 tracing::error!(\"Failed to parse edition {}\", err);\n                 Edition::CURRENT\n             });\n+            // We treat packages without source as \"local\" packages. That includes all members of\n+            // the current workspace, as well as any path dependency outside the workspace.\n+            let is_local = meta_pkg.source.is_none();\n \n             let pkg = packages.alloc(PackageData {\n                 id: id.repr.clone(),\n                 name: name.clone(),\n                 version: version.clone(),\n                 manifest: AbsPathBuf::assert(PathBuf::from(&manifest_path)).try_into().unwrap(),\n                 targets: Vec::new(),\n-                is_member,\n+                is_local,\n                 edition,\n                 dependencies: Vec::new(),\n                 features: meta_pkg.features.clone().into_iter().collect(),"}, {"sha": "5dc2e35fdab86f32f0ec5494beb3e6119c6dd17c", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07fb5db3dcc3814656d02e80b5451a4532f08a56/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fb5db3dcc3814656d02e80b5451a4532f08a56/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=07fb5db3dcc3814656d02e80b5451a4532f08a56", "patch": "@@ -53,8 +53,8 @@ impl CfgOverrides {\n /// the current workspace.\n #[derive(Debug, Clone, Eq, PartialEq, Hash)]\n pub struct PackageRoot {\n-    /// Is a member of the current workspace\n-    pub is_member: bool,\n+    /// Is from the local filesystem and may be edited\n+    pub is_local: bool,\n     pub include: Vec<AbsPathBuf>,\n     pub exclude: Vec<AbsPathBuf>,\n }\n@@ -268,15 +268,15 @@ impl ProjectWorkspace {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg: _ } => project\n                 .crates()\n                 .map(|(_, krate)| PackageRoot {\n-                    is_member: krate.is_workspace_member,\n+                    is_local: krate.is_workspace_member,\n                     include: krate.include.clone(),\n                     exclude: krate.exclude.clone(),\n                 })\n                 .collect::<FxHashSet<_>>()\n                 .into_iter()\n                 .chain(sysroot.as_ref().into_iter().flat_map(|sysroot| {\n                     sysroot.crates().map(move |krate| PackageRoot {\n-                        is_member: false,\n+                        is_local: false,\n                         include: vec![sysroot[krate].root.parent().to_path_buf()],\n                         exclude: Vec::new(),\n                     })\n@@ -293,7 +293,7 @@ impl ProjectWorkspace {\n                 cargo\n                     .packages()\n                     .map(|pkg| {\n-                        let is_member = cargo[pkg].is_member;\n+                        let is_local = cargo[pkg].is_local;\n                         let pkg_root = cargo[pkg].manifest.parent().to_path_buf();\n \n                         let mut include = vec![pkg_root.clone()];\n@@ -319,23 +319,23 @@ impl ProjectWorkspace {\n                         include.extend(extra_targets);\n \n                         let mut exclude = vec![pkg_root.join(\".git\")];\n-                        if is_member {\n+                        if is_local {\n                             exclude.push(pkg_root.join(\"target\"));\n                         } else {\n                             exclude.push(pkg_root.join(\"tests\"));\n                             exclude.push(pkg_root.join(\"examples\"));\n                             exclude.push(pkg_root.join(\"benches\"));\n                         }\n-                        PackageRoot { is_member, include, exclude }\n+                        PackageRoot { is_local, include, exclude }\n                     })\n                     .chain(sysroot.into_iter().map(|sysroot| PackageRoot {\n-                        is_member: false,\n+                        is_local: false,\n                         include: vec![sysroot.root().to_path_buf()],\n                         exclude: Vec::new(),\n                     }))\n                     .chain(rustc.into_iter().flat_map(|rustc| {\n                         rustc.packages().map(move |krate| PackageRoot {\n-                            is_member: false,\n+                            is_local: false,\n                             include: vec![rustc[krate].manifest.parent().to_path_buf()],\n                             exclude: Vec::new(),\n                         })\n@@ -345,12 +345,12 @@ impl ProjectWorkspace {\n             ProjectWorkspace::DetachedFiles { files, sysroot, .. } => files\n                 .into_iter()\n                 .map(|detached_file| PackageRoot {\n-                    is_member: true,\n+                    is_local: true,\n                     include: vec![detached_file.clone()],\n                     exclude: Vec::new(),\n                 })\n                 .chain(sysroot.crates().map(|krate| PackageRoot {\n-                    is_member: false,\n+                    is_local: false,\n                     include: vec![sysroot[krate].root.parent().to_path_buf()],\n                     exclude: Vec::new(),\n                 }))"}, {"sha": "9e40076a590beb6c51d9ecb84a78373a4959d12d", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07fb5db3dcc3814656d02e80b5451a4532f08a56/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fb5db3dcc3814656d02e80b5451a4532f08a56/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=07fb5db3dcc3814656d02e80b5451a4532f08a56", "patch": "@@ -294,7 +294,7 @@ impl GlobalState {\n                         .workspaces\n                         .iter()\n                         .flat_map(|ws| ws.to_roots())\n-                        .filter(|it| it.is_member)\n+                        .filter(|it| it.is_local)\n                         .flat_map(|root| {\n                             root.include.into_iter().flat_map(|it| {\n                                 [\n@@ -514,12 +514,12 @@ impl ProjectFolders {\n                 vfs::loader::Entry::Directories(dirs)\n             };\n \n-            if root.is_member {\n+            if root.is_local {\n                 res.watch.push(res.load.len());\n             }\n             res.load.push(entry);\n \n-            if root.is_member {\n+            if root.is_local {\n                 local_filesets.push(fsc.len());\n             }\n             fsc.add_file_set(file_set_roots)"}]}