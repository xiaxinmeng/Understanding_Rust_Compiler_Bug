{"sha": "63760acf31e605c8a91bb5cbcbcb4bfb95435e48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzYwYWNmMzFlNjA1YzhhOTFiYjVjYmNiY2I0YmZiOTU0MzVlNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-18T02:11:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-18T02:11:20Z"}, "message": "Auto merge of #33064 - jseyfried:improve_resolve_performance, r=eddyb\n\nresolve: Improve performance\n\nThis fixes #33061 by speeding up searchs through all traits in scope, a bottleneck in `resolve`.\n\nAccording to my measurements, this PR improves resolution performance by a factor of 3.4x on `librustc`, which almost completely reverses the 3.75x performance regression reported in #33061.\n\nr? @eddyb", "tree": {"sha": "26ee481c87ddb93c740d43ad775d49fe7dbdba13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ee481c87ddb93c740d43ad775d49fe7dbdba13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63760acf31e605c8a91bb5cbcbcb4bfb95435e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63760acf31e605c8a91bb5cbcbcb4bfb95435e48", "html_url": "https://github.com/rust-lang/rust/commit/63760acf31e605c8a91bb5cbcbcb4bfb95435e48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63760acf31e605c8a91bb5cbcbcb4bfb95435e48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed7c56796ef17f13227a50dc1a72a018b1d5e33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7c56796ef17f13227a50dc1a72a018b1d5e33f", "html_url": "https://github.com/rust-lang/rust/commit/ed7c56796ef17f13227a50dc1a72a018b1d5e33f"}, {"sha": "6ae80273a08c9cb0b75b8aec464f1e7d838a2bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae80273a08c9cb0b75b8aec464f1e7d838a2bda", "html_url": "https://github.com/rust-lang/rust/commit/6ae80273a08c9cb0b75b8aec464f1e7d838a2bda"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "c01d9ba5312a69e134facdbce95f18d5ea5f22af", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/63760acf31e605c8a91bb5cbcbcb4bfb95435e48/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63760acf31e605c8a91bb5cbcbcb4bfb95435e48/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=63760acf31e605c8a91bb5cbcbcb4bfb95435e48", "patch": "@@ -848,6 +848,9 @@ pub struct ModuleS<'a> {\n     glob_importers: RefCell<Vec<(Module<'a>, &'a ImportDirective<'a>)>>,\n     globs: RefCell<Vec<&'a ImportDirective<'a>>>,\n \n+    // Used to memoize the traits in this module for faster searches through all traits in scope.\n+    traits: RefCell<Option<Box<[&'a NameBinding<'a>]>>>,\n+\n     // Whether this module is populated. If not populated, any attempt to\n     // access the children must be preceded with a\n     // `populate_module_if_necessary` call.\n@@ -875,6 +878,7 @@ impl<'a> ModuleS<'a> {\n             prelude: RefCell::new(None),\n             glob_importers: RefCell::new(Vec::new()),\n             globs: RefCell::new((Vec::new())),\n+            traits: RefCell::new(None),\n             populated: Cell::new(!external),\n             arenas: arenas\n         }\n@@ -3225,18 +3229,28 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut search_module = self.current_module;\n         loop {\n             // Look for trait children.\n-            let mut search_in_module = |module: Module<'a>| module.for_each_child(|_, ns, binding| {\n-                if ns != TypeNS { return }\n-                let trait_def_id = match binding.def() {\n-                    Some(Def::Trait(trait_def_id)) => trait_def_id,\n-                    Some(..) | None => return,\n-                };\n-                if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n-                    add_trait_info(&mut found_traits, trait_def_id, name);\n-                    let trait_name = self.get_trait_name(trait_def_id);\n-                    self.record_use(trait_name, TypeNS, binding);\n+            let mut search_in_module = |module: Module<'a>| {\n+                let mut traits = module.traits.borrow_mut();\n+                if traits.is_none() {\n+                    let mut collected_traits = Vec::new();\n+                    module.for_each_child(|_, ns, binding| {\n+                        if ns != TypeNS { return }\n+                        if let Some(Def::Trait(_)) = binding.def() {\n+                            collected_traits.push(binding);\n+                        }\n+                    });\n+                    *traits = Some(collected_traits.into_boxed_slice());\n                 }\n-            });\n+\n+                for binding in traits.as_ref().unwrap().iter() {\n+                    let trait_def_id = binding.def().unwrap().def_id();\n+                    if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n+                        add_trait_info(&mut found_traits, trait_def_id, name);\n+                        let trait_name = self.get_trait_name(trait_def_id);\n+                        self.record_use(trait_name, TypeNS, binding);\n+                    }\n+                }\n+            };\n             search_in_module(search_module);\n \n             match search_module.parent_link {"}]}