{"sha": "30c247f881a87e40aed30983d4c923efb6148f9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYzI0N2Y4ODFhODdlNDBhZWQzMDk4M2Q0YzkyM2VmYjYxNDhmOWI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-31T16:07:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-31T16:11:47Z"}, "message": "Suggest using anonymous lifetime in `impl Trait` return without hacks\n\nFallback to `static_impl_trait` for nice error message by peeking at the\nreturn type and the lifetime type. Point at the return type instead of\nthe return expr/stmt in NLL mode.", "tree": {"sha": "d89fab2e0926fc4d27b20253b1a216690687afd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d89fab2e0926fc4d27b20253b1a216690687afd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30c247f881a87e40aed30983d4c923efb6148f9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30c247f881a87e40aed30983d4c923efb6148f9b", "html_url": "https://github.com/rust-lang/rust/commit/30c247f881a87e40aed30983d4c923efb6148f9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30c247f881a87e40aed30983d4c923efb6148f9b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2a9d93e96e2beb608be7936a5651e454ae706a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2a9d93e96e2beb608be7936a5651e454ae706a", "html_url": "https://github.com/rust-lang/rust/commit/ee2a9d93e96e2beb608be7936a5651e454ae706a"}], "stats": {"total": 89, "additions": 41, "deletions": 48}, "files": [{"sha": "7403a5d7dbb09e80219a9441da7b95c3abf2a222", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=30c247f881a87e40aed30983d4c923efb6148f9b", "patch": "@@ -1,6 +1,7 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::hir::{FunctionRetTy, TyKind};\n use crate::ty;\n use errors::{Applicability, DiagnosticBuilder};\n \n@@ -11,9 +12,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let (span, sub, sup) = self.get_regions();\n \n         debug!(\n-            \"try_report_named_anon_conflict(sub={:?}, sup={:?})\",\n+            \"try_report_named_anon_conflict(sub={:?}, sup={:?}, error={:?})\",\n             sub,\n-            sup\n+            sup,\n+            self.error,\n         );\n \n         // Determine whether the sub and sup consist of one named region ('a)\n@@ -84,6 +86,13 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             {\n                 return None;\n             }\n+            if let FunctionRetTy::Return(ty) = &fndecl.output {\n+                if let (TyKind::Def(_, _), ty::ReStatic) = (&ty.node, sub) {\n+                    // This is an impl Trait return that evaluates de need of 'static.\n+                    // We handle this case better in `static_impl_trait`.\n+                    return None;\n+                }\n+            }\n         }\n \n         let (error_var, span_label_var) = if let Some(simple_ident) = arg.pat.simple_ident() {\n@@ -103,40 +112,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             error_var\n         );\n \n-        let many = if let Ok(snippet) = self.tcx().sess.source_map().span_to_snippet(span) {\n-            if \"'static\" == &named.to_string() && snippet.starts_with(\"impl \") {\n-                diag.span_suggestion(\n-                    span,\n-                    \"add explicit unnamed lifetime `'_` to the return type to constrain it\",\n-                    format!(\"{} + '_\", snippet),\n-                    Applicability::Unspecified,\n-                );\n-                true\n-            } else {\n-                false\n-            }\n-        } else {\n-            false\n-        };\n-        if many {\n-            diag.span_label(\n-                span,\n-                \"`impl Trait` types can only capture lifetimes that they reference\"\n-            );\n-        } else {\n-            diag.span_label(span, format!(\"lifetime `{}` required\", named));\n-        }\n+        diag.span_label(span, format!(\"lifetime `{}` required\", named));\n         diag.span_suggestion(\n             new_ty_span,\n-            &format!(\"{}add explicit lifetime `{}` to {}\",\n-                if many {\n-                    \"otherwise, \"\n-                } else {\n-                    \"\"\n-                },\n-                named,\n-                span_label_var,\n-            ),\n+            &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n             new_ty.to_string(),\n             Applicability::Unspecified,\n         );"}, {"sha": "3773f1a40c7924545878b83ec8b7dc0c03a4370d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=30c247f881a87e40aed30983d4c923efb6148f9b", "patch": "@@ -132,6 +132,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         });\n         if let Some(i) = best_choice {\n+            if let Some(next) = categorized_path.get(i + 1) {\n+                if categorized_path[i].0 == ConstraintCategory::Return\n+                    && next.0 == ConstraintCategory::OpaqueType\n+                {\n+                    // The return expression is being influenced by the return type being\n+                    // impl Trait, point at the return type and not the return expr.\n+                    return *next;\n+                }\n+            }\n             return categorized_path[i];\n         }\n \n@@ -240,6 +249,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.provides_universal_region(r, fr, outlived_fr)\n         });\n \n+        debug!(\"report_error: category={:?} {:?}\", category, span);\n         // Check if we can use one of the \"nice region errors\".\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);"}, {"sha": "1c3b5ac76138f2eb56f25c2effda0fb28a494d14", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=30c247f881a87e40aed30983d4c923efb6148f9b", "patch": "@@ -1,7 +1,7 @@\n use std::fmt::Debug;\n \n fn elided(x: &i32) -> impl Copy { x }\n-//~^ ERROR explicit lifetime required in the type of `x` [E0621]\n+//~^ ERROR cannot infer an appropriate lifetime\n \n fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n //~^ ERROR cannot infer an appropriate lifetime"}, {"sha": "9339a83b09a9df8388a63cfc8e7a33bf3bb5227f", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=30c247f881a87e40aed30983d4c923efb6148f9b", "patch": "@@ -1,16 +1,20 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |                       ^^^^^^^^^ `impl Trait` types can only capture lifetimes that they reference\n-help: add explicit unnamed lifetime `'_` to the return type to constrain it\n+   |                       ---------   ^ ...but this borrow...\n+   |                       |\n+   |                       this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the anonymous lifetime #1 defined on the function body at 3:1\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:1\n+   |\n+LL | fn elided(x: &i32) -> impl Copy { x }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n-help: otherwise, add explicit lifetime `'static` to the type of `x`\n-   |\n-LL | fn elided(x: &'static i32) -> impl Copy { x }\n-   |              ^^^^^^^^^^^^\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n@@ -73,5 +77,5 @@ LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0310, E0621, E0623.\n+Some errors occurred: E0310, E0623.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "bcdf643c0b9d1136001d98643105630f55fe0231", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs?ref=30c247f881a87e40aed30983d4c923efb6148f9b", "patch": "@@ -8,8 +8,8 @@ trait Foo<'a> {\n impl<'a, T> Foo<'a> for T { }\n \n fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n+//~^ ERROR explicit lifetime required in the type of `x` [E0621]\n     x\n-        //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n }\n \n fn main() {}"}, {"sha": "3a1e3ce3ad1a0d3a539b60618d939688e2a6b65e", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30c247f881a87e40aed30983d4c923efb6148f9b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=30c247f881a87e40aed30983d4c923efb6148f9b", "patch": "@@ -1,8 +1,8 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/impl-trait-captures.rs:11:5\n+  --> $DIR/impl-trait-captures.rs:10:25\n    |\n-LL |     x\n-   |     ^ lifetime `ReEarlyBound(0, 'a)` required\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n+   |                         ^^^^^^^^^^^^ lifetime `ReEarlyBound(0, 'a)` required\n help: add explicit lifetime `ReEarlyBound(0, 'a)` to the type of `x`\n    |\n LL | fn foo<'a, T>(x: &ReEarlyBound(0, 'a) T) -> impl Foo<'a> {"}]}