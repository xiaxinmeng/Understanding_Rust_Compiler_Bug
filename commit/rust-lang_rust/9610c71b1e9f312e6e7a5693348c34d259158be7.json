{"sha": "9610c71b1e9f312e6e7a5693348c34d259158be7", "node_id": "C_kwDOAAsO6NoAKDk2MTBjNzFiMWU5ZjMxMmU2ZTdhNTY5MzM0OGMzNGQyNTkxNThiZTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-21T16:42:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-21T16:42:04Z"}, "message": "Rollup merge of #99454 - benluelo:control-flow/continue-combinators, r=scottmcm\n\nAdd map_continue and continue_value combinators to ControlFlow\n\nAs suggested in this comment: https://github.com/rust-lang/rust/issues/75744#issuecomment-1188549494\n\nRelated tracking issue: https://github.com/rust-lang/rust/issues/75744\n\nr? ``````@scottmcm``````", "tree": {"sha": "b0b6447da8715e397a2901228abb56bf90217d14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b6447da8715e397a2901228abb56bf90217d14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9610c71b1e9f312e6e7a5693348c34d259158be7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2YHcCRBK7hj4Ov3rIwAApE4IACCpwzAqCqFfuakceF3XeMbx\nbuCF6RZOXF5nS3iqWc/3bwde6WFj+XfBakQJMkyZ234ONHFGJv05EgB7ODbAdjUg\nzdDcnzo6xAkrQSJKsPbbQwH7qWxv8dBCcgFGNBTUajn8AhO4eHzq+H6MXr6M4kQU\n/aUYGjtoumwO2wqBGxub7ho769nwPKpMZkiwjjbgJWVIv+KOe50qnNXySSM0jCWK\nbErsYQMcIUNFgRu6ZL9sJcVfuRP0dEiaa+8Vyt6W8v1SY3W1AGI+lJkawqUlaS/O\n7Yf7WMhTQFh8VbXE4RKsFODRfdHHXXA2MM7QTmETV2V9R+NknpdwqP749Kmrn/g=\n=qmcl\n-----END PGP SIGNATURE-----\n", "payload": "tree b0b6447da8715e397a2901228abb56bf90217d14\nparent 43783b80ee5997dd64f0f5bceea32d519f2f0e07\nparent 1993a5f7a866f174aa50329a03b2f8b2f589221c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658421724 +0200\ncommitter GitHub <noreply@github.com> 1658421724 +0200\n\nRollup merge of #99454 - benluelo:control-flow/continue-combinators, r=scottmcm\n\nAdd map_continue and continue_value combinators to ControlFlow\n\nAs suggested in this comment: https://github.com/rust-lang/rust/issues/75744#issuecomment-1188549494\n\nRelated tracking issue: https://github.com/rust-lang/rust/issues/75744\n\nr? ``````@scottmcm``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9610c71b1e9f312e6e7a5693348c34d259158be7", "html_url": "https://github.com/rust-lang/rust/commit/9610c71b1e9f312e6e7a5693348c34d259158be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9610c71b1e9f312e6e7a5693348c34d259158be7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43783b80ee5997dd64f0f5bceea32d519f2f0e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/43783b80ee5997dd64f0f5bceea32d519f2f0e07", "html_url": "https://github.com/rust-lang/rust/commit/43783b80ee5997dd64f0f5bceea32d519f2f0e07"}, {"sha": "1993a5f7a866f174aa50329a03b2f8b2f589221c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1993a5f7a866f174aa50329a03b2f8b2f589221c", "html_url": "https://github.com/rust-lang/rust/commit/1993a5f7a866f174aa50329a03b2f8b2f589221c"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "b1f5559dcfc17e63161cacaa7b42c7426730536b", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9610c71b1e9f312e6e7a5693348c34d259158be7/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9610c71b1e9f312e6e7a5693348c34d259158be7/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=9610c71b1e9f312e6e7a5693348c34d259158be7", "patch": "@@ -195,6 +195,41 @@ impl<B, C> ControlFlow<B, C> {\n             ControlFlow::Break(x) => ControlFlow::Break(f(x)),\n         }\n     }\n+\n+    /// Converts the `ControlFlow` into an `Option` which is `Some` if the\n+    /// `ControlFlow` was `Continue` and `None` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// assert_eq!(ControlFlow::<i32, String>::Break(3).continue_value(), None);\n+    /// assert_eq!(ControlFlow::<String, i32>::Continue(3).continue_value(), Some(3));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub fn continue_value(self) -> Option<C> {\n+        match self {\n+            ControlFlow::Continue(x) => Some(x),\n+            ControlFlow::Break(..) => None,\n+        }\n+    }\n+\n+    /// Maps `ControlFlow<B, C>` to `ControlFlow<B, T>` by applying a function\n+    /// to the continue value in case it exists.\n+    #[inline]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub fn map_continue<T, F>(self, f: F) -> ControlFlow<B, T>\n+    where\n+        F: FnOnce(C) -> T,\n+    {\n+        match self {\n+            ControlFlow::Continue(x) => ControlFlow::Continue(f(x)),\n+            ControlFlow::Break(x) => ControlFlow::Break(x),\n+        }\n+    }\n }\n \n /// These are used only as part of implementing the iterator adapters."}]}