{"sha": "8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2", "node_id": "C_kwDOAAsO6NoAKDhlNWE5YmI3N2RkNGI2ZjMxZjY5NzBiYjFjMjk3N2ZjNTg2Njg5ZjI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-17T17:49:57Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-17T17:49:57Z"}, "message": "Sync from rust 9a7cc6c32f1a690f86827e4724bcda85e506ef35", "tree": {"sha": "40094650b788274be2b85af4601b7ea76c36b163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40094650b788274be2b85af4601b7ea76c36b163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2", "html_url": "https://github.com/rust-lang/rust/commit/8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed6baa749dc88c8da0267839249945a28dc7338", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed6baa749dc88c8da0267839249945a28dc7338", "html_url": "https://github.com/rust-lang/rust/commit/8ed6baa749dc88c8da0267839249945a28dc7338"}, {"sha": "f58bd0e290764f31afa45147dff743a20b4d2bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f58bd0e290764f31afa45147dff743a20b4d2bfe", "html_url": "https://github.com/rust-lang/rust/commit/f58bd0e290764f31afa45147dff743a20b4d2bfe"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "3e2e2af968860978c8655162c58660d31d40dcf0", "filename": "src/driver/aot.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2", "patch": "@@ -248,17 +248,13 @@ fn reuse_workproduct_for_cgu(\n             dwarf_object: None,\n             bytecode: None,\n         },\n-        module_global_asm: if has_global_asm {\n-            Some(CompiledModule {\n-                name: cgu.name().to_string(),\n-                kind: ModuleKind::Regular,\n-                object: Some(obj_out_global_asm),\n-                dwarf_object: None,\n-                bytecode: None,\n-            })\n-        } else {\n-            None\n-        },\n+        module_global_asm: has_global_asm.then(|| CompiledModule {\n+            name: cgu.name().to_string(),\n+            kind: ModuleKind::Regular,\n+            object: Some(obj_out_global_asm),\n+            dwarf_object: None,\n+            bytecode: None,\n+        }),\n         existing_work_product: Some((cgu.work_product_id(), work_product)),\n     })\n }"}, {"sha": "34e2fe3ae45ed51e01bc3388c518a8441c906f53", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=8e5a9bb77dd4b6f31f6970bb1c2977fc586689f2", "patch": "@@ -644,10 +644,14 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let layout = fx.layout_of(ty);\n             let do_panic = match intrinsic {\n                 sym::assert_inhabited => layout.abi.is_uninhabited(),\n-                sym::assert_zero_valid => !fx.tcx.permits_zero_init(fx.param_env().and(layout)),\n-                sym::assert_mem_uninitialized_valid => {\n-                    !fx.tcx.permits_uninit_init(fx.param_env().and(layout))\n-                }\n+                sym::assert_zero_valid => !fx\n+                    .tcx\n+                    .permits_zero_init(fx.param_env().and(ty))\n+                    .expect(\"expected to have layout during codegen\"),\n+                sym::assert_mem_uninitialized_valid => !fx\n+                    .tcx\n+                    .permits_uninit_init(fx.param_env().and(ty))\n+                    .expect(\"expected to have layout during codegen\"),\n                 _ => unreachable!(),\n             };\n             if do_panic {"}]}