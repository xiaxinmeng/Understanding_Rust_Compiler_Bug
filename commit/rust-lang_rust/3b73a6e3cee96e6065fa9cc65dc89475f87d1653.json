{"sha": "3b73a6e3cee96e6065fa9cc65dc89475f87d1653", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNzNhNmUzY2VlOTZlNjA2NWZhOWNjNjVkYzg5NDc1Zjg3ZDE2NTM=", "commit": {"author": {"name": "Dan Callahan", "email": "dan.callahan@gmail.com", "date": "2015-04-03T19:29:33Z"}, "committer": {"name": "Dan Callahan", "email": "dan.callahan@gmail.com", "date": "2015-04-03T22:33:12Z"}, "message": "Remove old_io from trpl/concurrency.md\n\nAlso: the std_misc feature flag is removed; it's not needed in Beta.\n\nHat tip to @tshepang in #23871\n\nFixes #24023", "tree": {"sha": "df7da8bd0118ea71170745c63fb94056123cee7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df7da8bd0118ea71170745c63fb94056123cee7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b73a6e3cee96e6065fa9cc65dc89475f87d1653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b73a6e3cee96e6065fa9cc65dc89475f87d1653", "html_url": "https://github.com/rust-lang/rust/commit/3b73a6e3cee96e6065fa9cc65dc89475f87d1653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b73a6e3cee96e6065fa9cc65dc89475f87d1653/comments", "author": {"login": "callahad", "id": 24193, "node_id": "MDQ6VXNlcjI0MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/24193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/callahad", "html_url": "https://github.com/callahad", "followers_url": "https://api.github.com/users/callahad/followers", "following_url": "https://api.github.com/users/callahad/following{/other_user}", "gists_url": "https://api.github.com/users/callahad/gists{/gist_id}", "starred_url": "https://api.github.com/users/callahad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/callahad/subscriptions", "organizations_url": "https://api.github.com/users/callahad/orgs", "repos_url": "https://api.github.com/users/callahad/repos", "events_url": "https://api.github.com/users/callahad/events{/privacy}", "received_events_url": "https://api.github.com/users/callahad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "callahad", "id": 24193, "node_id": "MDQ6VXNlcjI0MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/24193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/callahad", "html_url": "https://github.com/callahad", "followers_url": "https://api.github.com/users/callahad/followers", "following_url": "https://api.github.com/users/callahad/following{/other_user}", "gists_url": "https://api.github.com/users/callahad/gists{/gist_id}", "starred_url": "https://api.github.com/users/callahad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/callahad/subscriptions", "organizations_url": "https://api.github.com/users/callahad/orgs", "repos_url": "https://api.github.com/users/callahad/repos", "events_url": "https://api.github.com/users/callahad/events{/privacy}", "received_events_url": "https://api.github.com/users/callahad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80def6c2447d23a624e611417f24cf0ab2a5a676", "url": "https://api.github.com/repos/rust-lang/rust/commits/80def6c2447d23a624e611417f24cf0ab2a5a676", "html_url": "https://github.com/rust-lang/rust/commit/80def6c2447d23a624e611417f24cf0ab2a5a676"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "bc0a76bc2b6e71b2caeced5594418b3add369c86", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3b73a6e3cee96e6065fa9cc65dc89475f87d1653/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b73a6e3cee96e6065fa9cc65dc89475f87d1653/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=3b73a6e3cee96e6065fa9cc65dc89475f87d1653", "patch": "@@ -88,17 +88,14 @@ When `guard` goes out of scope, it will block execution until the thread is\n finished. If we didn't want this behaviour, we could use `thread::spawn()`:\n \n ```\n-# #![feature(old_io, std_misc)]\n use std::thread;\n-use std::old_io::timer;\n-use std::time::Duration;\n \n fn main() {\n     thread::spawn(|| {\n         println!(\"Hello from a thread!\");\n     });\n \n-    timer::sleep(Duration::milliseconds(50));\n+    thread::sleep_ms(50);\n }\n ```\n \n@@ -147,10 +144,7 @@ As an example, here is a Rust program that would have a data race in many\n languages. It will not compile:\n \n ```ignore\n-# #![feature(old_io, std_misc)]\n use std::thread;\n-use std::old_io::timer;\n-use std::time::Duration;\n \n fn main() {\n     let mut data = vec![1u32, 2, 3];\n@@ -161,14 +155,14 @@ fn main() {\n         });\n     }\n \n-    timer::sleep(Duration::milliseconds(50));\n+    thread::sleep_ms(50);\n }\n ```\n \n This gives us an error:\n \n ```text\n-12:17 error: capture of moved value: `data`\n+8:17 error: capture of moved value: `data`\n         data[i] += 1;\n         ^~~~\n ```\n@@ -187,10 +181,7 @@ only one person at a time can mutate what's inside. For that, we can use the\n but for a different reason:\n \n ```ignore\n-# #![feature(old_io, std_misc)]\n use std::thread;\n-use std::old_io::timer;\n-use std::time::Duration;\n use std::sync::Mutex;\n \n fn main() {\n@@ -203,17 +194,17 @@ fn main() {\n         });\n     }\n \n-    timer::sleep(Duration::milliseconds(50));\n+    thread::sleep_ms(50);\n }\n ```\n \n Here's the error:\n \n ```text\n-<anon>:11:9: 11:22 error: the trait `core::marker::Send` is not implemented for the type `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` [E0277]\n+<anon>:9:9: 9:22 error: the trait `core::marker::Send` is not implemented for the type `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` [E0277]\n <anon>:11         thread::spawn(move || {\n                   ^~~~~~~~~~~~~\n-<anon>:11:9: 11:22 note: `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` cannot be sent between threads safely\n+<anon>:9:9: 9:22 note: `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` cannot be sent between threads safely\n <anon>:11         thread::spawn(move || {\n                   ^~~~~~~~~~~~~\n ```\n@@ -232,11 +223,8 @@ guard across thread boundaries, which gives us our error.\n We can use `Arc<T>` to fix this. Here's the working version:\n \n ```\n-# #![feature(old_io, std_misc)]\n use std::sync::{Arc, Mutex};\n use std::thread;\n-use std::old_io::timer;\n-use std::time::Duration;\n \n fn main() {\n     let data = Arc::new(Mutex::new(vec![1u32, 2, 3]));\n@@ -249,7 +237,7 @@ fn main() {\n         });\n     }\n \n-    timer::sleep(Duration::milliseconds(50));\n+    thread::sleep_ms(50);\n }\n ```\n \n@@ -258,11 +246,9 @@ handle is then moved into the new thread. Let's examine the body of the\n thread more closely:\n \n ```\n-# #![feature(old_io, std_misc)]\n # use std::sync::{Arc, Mutex};\n # use std::thread;\n-# use std::old_io::timer;\n-# use std::time::Duration;\n+#\n # fn main() {\n #     let data = Arc::new(Mutex::new(vec![1u32, 2, 3]));\n #     for i in 0..2 {\n@@ -272,6 +258,8 @@ thread::spawn(move || {\n     data[i] += 1;\n });\n #     }\n+#\n+#     thread::sleep_ms(50);\n # }\n ```\n "}]}