{"sha": "bf6902ca61ae6e91a3ab95bed88426926f245d02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNjkwMmNhNjFhZTZlOTFhM2FiOTViZWQ4ODQyNjkyNmYyNDVkMDI=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2020-11-13T18:23:50Z"}, "committer": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2020-11-13T18:23:50Z"}, "message": "Add BTreeMap::retain and BTreeSet::retain", "tree": {"sha": "c64b1280571c82d86c444f1623979bdef537b0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c64b1280571c82d86c444f1623979bdef537b0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf6902ca61ae6e91a3ab95bed88426926f245d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6902ca61ae6e91a3ab95bed88426926f245d02", "html_url": "https://github.com/rust-lang/rust/commit/bf6902ca61ae6e91a3ab95bed88426926f245d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf6902ca61ae6e91a3ab95bed88426926f245d02/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2a11a25378293e41cfcb00dbf67c524ffd79b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a11a25378293e41cfcb00dbf67c524ffd79b39", "html_url": "https://github.com/rust-lang/rust/commit/f2a11a25378293e41cfcb00dbf67c524ffd79b39"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "7151d3763f01fcb3c0dd7f8572fcf24aa2e49881", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf6902ca61ae6e91a3ab95bed88426926f245d02/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6902ca61ae6e91a3ab95bed88426926f245d02/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=bf6902ca61ae6e91a3ab95bed88426926f245d02", "patch": "@@ -863,6 +863,30 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         }\n     }\n \n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(btree_retain)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map: BTreeMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n+    /// // Keep only the elements with even-numbered keys.\n+    /// map.retain(|&k, _| k % 2 == 0);\n+    /// assert!(map.into_iter().eq(vec![(0, 0), (2, 20), (4, 40), (6, 60)]));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"btree_retain\", issue = \"79025\")]\n+    pub fn retain<F>(&mut self, mut f: F)\n+    where\n+        F: FnMut(&K, &mut V) -> bool,\n+    {\n+        self.drain_filter(|k, v| !f(k, v));\n+    }\n+\n     /// Moves all elements from `other` into `Self`, leaving `other` empty.\n     ///\n     /// # Examples"}, {"sha": "11dbb584abdac6de774d6c6b5b99b2bc7bf6bd3e", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf6902ca61ae6e91a3ab95bed88426926f245d02/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6902ca61ae6e91a3ab95bed88426926f245d02/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=bf6902ca61ae6e91a3ab95bed88426926f245d02", "patch": "@@ -808,6 +808,17 @@ fn test_range_mut() {\n     map.check();\n }\n \n+#[test]\n+fn test_retain() {\n+    let mut map: BTreeMap<i32, i32> = (0..100).map(|x| (x, x * 10)).collect();\n+\n+    map.retain(|&k, _| k % 2 == 0);\n+    assert_eq!(map.len(), 50);\n+    assert_eq!(map[&2], 20);\n+    assert_eq!(map[&4], 40);\n+    assert_eq!(map[&6], 60);\n+}\n+\n mod test_drain_filter {\n     use super::*;\n "}, {"sha": "1a807100653bc1a9270d679dd7107d9d824616de", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf6902ca61ae6e91a3ab95bed88426926f245d02/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6902ca61ae6e91a3ab95bed88426926f245d02/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=bf6902ca61ae6e91a3ab95bed88426926f245d02", "patch": "@@ -798,6 +798,30 @@ impl<T: Ord> BTreeSet<T> {\n         Recover::take(&mut self.map, value)\n     }\n \n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(btree_retain)]\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let xs = [1, 2, 3, 4, 5, 6];\n+    /// let mut set: BTreeSet<i32> = xs.iter().cloned().collect();\n+    /// // Keep only the even numbers.\n+    /// set.retain(|&k| k % 2 == 0);\n+    /// assert!(set.iter().eq([2, 4, 6].iter()));\n+    /// ```\n+    #[unstable(feature = \"btree_retain\", issue = \"79025\")]\n+    pub fn retain<F>(&mut self, mut f: F)\n+    where\n+        F: FnMut(&T) -> bool,\n+    {\n+        self.drain_filter(|v| !f(v));\n+    }\n+\n     /// Moves all elements from `other` into `Self`, leaving `other` empty.\n     ///\n     /// # Examples"}, {"sha": "ef40a048a382ecccf8911610c8e9e64e13dc9f18", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf6902ca61ae6e91a3ab95bed88426926f245d02/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6902ca61ae6e91a3ab95bed88426926f245d02/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=bf6902ca61ae6e91a3ab95bed88426926f245d02", "patch": "@@ -324,6 +324,17 @@ fn test_is_subset() {\n     assert_eq!(is_subset(&[99, 100], &large), false);\n }\n \n+#[test]\n+fn test_retain() {\n+    let xs = [1, 2, 3, 4, 5, 6];\n+    let mut set: BTreeSet<i32> = xs.iter().cloned().collect();\n+    set.retain(|&k| k % 2 == 0);\n+    assert_eq!(set.len(), 3);\n+    assert!(set.contains(&2));\n+    assert!(set.contains(&4));\n+    assert!(set.contains(&6));\n+}\n+\n #[test]\n fn test_drain_filter() {\n     let mut x: BTreeSet<_> = [1].iter().copied().collect();"}]}