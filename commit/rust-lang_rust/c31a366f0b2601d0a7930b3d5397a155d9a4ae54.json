{"sha": "c31a366f0b2601d0a7930b3d5397a155d9a4ae54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMWEzNjZmMGIyNjAxZDBhNzkzMGIzZDUzOTdhMTU1ZDlhNGFlNTQ=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-06-07T18:21:54Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-06-07T18:21:54Z"}, "message": "Merge pull request #1042 from imjacobclark/1014-refactoring-vector-string-to-join\n\nRefactor string collects to itertools join", "tree": {"sha": "90e19e878b0b46580f45ac20db15235277967e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90e19e878b0b46580f45ac20db15235277967e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c31a366f0b2601d0a7930b3d5397a155d9a4ae54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c31a366f0b2601d0a7930b3d5397a155d9a4ae54", "html_url": "https://github.com/rust-lang/rust/commit/c31a366f0b2601d0a7930b3d5397a155d9a4ae54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c31a366f0b2601d0a7930b3d5397a155d9a4ae54/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d4bc8c84ac1ee50c97217d863a6eb0a7556c405", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4bc8c84ac1ee50c97217d863a6eb0a7556c405", "html_url": "https://github.com/rust-lang/rust/commit/3d4bc8c84ac1ee50c97217d863a6eb0a7556c405"}, {"sha": "77edbb7defec2cbc011d9b86301dfa28094f1444", "url": "https://api.github.com/repos/rust-lang/rust/commits/77edbb7defec2cbc011d9b86301dfa28094f1444", "html_url": "https://github.com/rust-lang/rust/commit/77edbb7defec2cbc011d9b86301dfa28094f1444"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "1de56220cf4346740966b1c3820616188346edef", "filename": "src/items.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c31a366f0b2601d0a7930b3d5397a155d9a4ae54/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31a366f0b2601d0a7930b3d5397a155d9a4ae54/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c31a366f0b2601d0a7930b3d5397a155d9a4ae54", "patch": "@@ -21,6 +21,7 @@ use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, FnArgLayoutStyle};\n+use itertools::Itertools;\n \n use syntax::{ast, abi, ptr, codemap};\n use syntax::codemap::{Span, BytePos, mk_sp};\n@@ -1054,10 +1055,10 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n         let bounds: &[_] = &ty_param_bounds;\n-        let bound_str = bounds.iter()\n-            .filter_map(|ty_bound| ty_bound.rewrite(context, context.config.max_width, indent))\n-            .collect::<Vec<String>>()\n-            .join(\" + \");\n+        let bound_str = try_opt!(bounds.iter()\n+            .map(|ty_bound| ty_bound.rewrite(context, context.config.max_width, indent))\n+            .intersperse(Some(\" + \".to_string()))\n+            .collect::<Option<String>>());\n         if bounds.len() > 0 {\n             format!(\": {}\", bound_str)\n         } else {\n@@ -1700,10 +1701,10 @@ fn rewrite_trait_bounds(context: &RewriteContext,\n         return Some(String::new());\n     }\n \n-    let bound_str = bounds.iter()\n-        .filter_map(|ty_bound| ty_bound.rewrite(&context, width, indent))\n-        .collect::<Vec<String>>()\n-        .join(\" + \");\n+    let bound_str = try_opt!(bounds.iter()\n+        .map(|ty_bound| ty_bound.rewrite(&context, width, indent))\n+        .intersperse(Some(\" + \".to_string()))\n+        .collect::<Option<String>>());\n \n     let mut result = String::new();\n     result.push_str(\": \");"}, {"sha": "8fa24df0caa27a26bbb44ebe76f7ddad4db9f567", "filename": "src/types.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c31a366f0b2601d0a7930b3d5397a155d9a4ae54/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31a366f0b2601d0a7930b3d5397a155d9a4ae54/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c31a366f0b2601d0a7930b3d5397a155d9a4ae54", "patch": "@@ -23,6 +23,7 @@ use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, format_mutability, wrap_str};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use config::TypeDensity;\n+use itertools::Itertools;\n \n // Does not wrap on simple segments.\n pub fn rewrite_path(context: &RewriteContext,\n@@ -325,39 +326,40 @@ impl Rewrite for ast::WherePredicate {\n                 let type_str = try_opt!(bounded_ty.rewrite(context, width, offset));\n \n                 if !bound_lifetimes.is_empty() {\n-                    let lifetime_str = try_opt!(bound_lifetimes.iter()\n+                    let lifetime_str: String = try_opt!(bound_lifetimes.iter()\n                                                                .map(|lt| {\n                                                                    lt.rewrite(context,\n                                                                               width,\n                                                                               offset)\n                                                                })\n-                                                               .collect::<Option<Vec<_>>>())\n-                                           .join(\", \");\n+                                                               .intersperse(Some(\", \".to_string()))\n+                                                               .collect());\n+\n                     // 8 = \"for<> : \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + 8;\n                     let budget = try_opt!(width.checked_sub(used_width));\n-                    let bounds_str = try_opt!(bounds.iter()\n+                    let bounds_str: String = try_opt!(bounds.iter()\n                                                     .map(|ty_bound| {\n                                                         ty_bound.rewrite(context,\n                                                                          budget,\n                                                                          offset + used_width)\n                                                     })\n-                                                    .collect::<Option<Vec<_>>>())\n-                                         .join(\" + \");\n+                                                    .intersperse(Some(\" + \".to_string()))\n+                                                    .collect());\n \n                     format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n                 } else {\n                     // 2 = \": \".len()\n                     let used_width = type_str.len() + 2;\n                     let budget = try_opt!(width.checked_sub(used_width));\n-                    let bounds_str = try_opt!(bounds.iter()\n+                    let bounds_str: String = try_opt!(bounds.iter()\n                                                     .map(|ty_bound| {\n                                                         ty_bound.rewrite(context,\n                                                                          budget,\n                                                                          offset + used_width)\n                                                     })\n-                                                    .collect::<Option<Vec<_>>>())\n-                                         .join(\" + \");\n+                                                    .intersperse(Some(\" + \".to_string()))\n+                                                    .collect());\n \n                     format!(\"{}: {}\", type_str, bounds_str)\n                 }\n@@ -449,11 +451,11 @@ impl Rewrite for ast::TyParam {\n         if !self.bounds.is_empty() {\n             result.push_str(\": \");\n \n-            let bounds = try_opt!(self.bounds\n-                    .iter()\n-                    .map(|ty_bound| ty_bound.rewrite(context, width, offset))\n-                    .collect::<Option<Vec<_>>>())\n-                .join(\" + \");\n+            let bounds: String = try_opt!(self.bounds\n+                .iter()\n+                .map(|ty_bound| ty_bound.rewrite(context, width, offset))\n+                .intersperse(Some(\" + \".to_string()))\n+                .collect());\n \n             result.push_str(&bounds);\n         }\n@@ -476,11 +478,12 @@ impl Rewrite for ast::TyParam {\n impl Rewrite for ast::PolyTraitRef {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         if !self.bound_lifetimes.is_empty() {\n-            let lifetime_str = try_opt!(self.bound_lifetimes\n-                    .iter()\n-                    .map(|lt| lt.rewrite(context, width, offset))\n-                    .collect::<Option<Vec<_>>>())\n-                .join(\", \");\n+            let lifetime_str: String = try_opt!(self.bound_lifetimes\n+                .iter()\n+                .map(|lt| lt.rewrite(context, width, offset))\n+                .intersperse(Some(\", \".to_string()))\n+                .collect());\n+\n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n             let max_path_width = try_opt!(width.checked_sub(extra_offset));\n@@ -604,10 +607,10 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n         // This doesn't work out so nicely for mutliline situation with lots of\n         // rightward drift. If that is a problem, we could use the list stuff.\n         result.push_str(&try_opt!(bare_fn.lifetimes\n-                .iter()\n-                .map(|l| l.rewrite(context, try_opt!(width.checked_sub(6)), offset + 4))\n-                .collect::<Option<Vec<_>>>())\n-            .join(\", \"));\n+            .iter()\n+            .map(|l| l.rewrite(context, try_opt!(width.checked_sub(6)), offset + 4))\n+            .intersperse(Some(\", \".to_string()))\n+            .collect::<Option<String>>()));\n         result.push_str(\"> \");\n     }\n "}]}