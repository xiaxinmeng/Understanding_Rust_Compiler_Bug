{"sha": "768470b901eb9b8a06ccc56d3f85d18dd7ac6b69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODQ3MGI5MDFlYjliOGEwNmNjYzU2ZDNmODVkMThkZDdhYzZiNjk=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-01-31T20:49:00Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-02-11T21:53:52Z"}, "message": "Fix mistake in atomic comparaison docs", "tree": {"sha": "aedd6104d650edc4218282155526734f90cd5555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aedd6104d650edc4218282155526734f90cd5555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768470b901eb9b8a06ccc56d3f85d18dd7ac6b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768470b901eb9b8a06ccc56d3f85d18dd7ac6b69", "html_url": "https://github.com/rust-lang/rust/commit/768470b901eb9b8a06ccc56d3f85d18dd7ac6b69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768470b901eb9b8a06ccc56d3f85d18dd7ac6b69/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842448d3102f236401d6a2d176e39977efe91176", "url": "https://api.github.com/repos/rust-lang/rust/commits/842448d3102f236401d6a2d176e39977efe91176", "html_url": "https://github.com/rust-lang/rust/commit/842448d3102f236401d6a2d176e39977efe91176"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "bb8b3eae2d9918d0f9ec1cdced59a4d3063ffde1", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/768470b901eb9b8a06ccc56d3f85d18dd7ac6b69/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768470b901eb9b8a06ccc56d3f85d18dd7ac6b69/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=768470b901eb9b8a06ccc56d3f85d18dd7ac6b69", "patch": "@@ -612,31 +612,31 @@ extern \"rust-intrinsic\" {\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_relaxed<T>(dst: *mut T, src: T) -> T;\n \n-    /// Maximum with the current value using a sized comparison.\n+    /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max<T>(dst: *mut T, src: T) -> T;\n-    /// Maximum with the current value using a sized comparison.\n+    /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_acq<T>(dst: *mut T, src: T) -> T;\n-    /// Maximum with the current value using a sized comparison.\n+    /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_rel<T>(dst: *mut T, src: T) -> T;\n-    /// Maximum with the current value using a sized comparison.\n+    /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n@@ -653,39 +653,39 @@ extern \"rust-intrinsic\" {\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_relaxed<T>(dst: *mut T, src: T) -> T;\n \n-    /// Minimum with the current value using a sized comparison.\n+    /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min<T>(dst: *mut T, src: T) -> T;\n-    /// Minimum with the current value using a sized comparison.\n+    /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_acq<T>(dst: *mut T, src: T) -> T;\n-    /// Minimum with the current value using a sized comparison.\n+    /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_rel<T>(dst: *mut T, src: T) -> T;\n-    /// Minimum with the current value using a sized comparison.\n+    /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_acqrel<T>(dst: *mut T, src: T) -> T;\n-    /// Minimum with the current value using a sized comparison.\n+    /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n@@ -694,39 +694,39 @@ extern \"rust-intrinsic\" {\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_relaxed<T>(dst: *mut T, src: T) -> T;\n \n-    /// Minimum with the current value using an unsized comparison.\n+    /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin<T>(dst: *mut T, src: T) -> T;\n-    /// Minimum with the current value using an unsized comparison.\n+    /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_acq<T>(dst: *mut T, src: T) -> T;\n-    /// Minimum with the current value using an unsized comparison.\n+    /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_rel<T>(dst: *mut T, src: T) -> T;\n-    /// Minimum with the current value using an unsized comparison.\n+    /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_acqrel<T>(dst: *mut T, src: T) -> T;\n-    /// Minimum with the current value using an unsized comparison.\n+    /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n@@ -735,39 +735,39 @@ extern \"rust-intrinsic\" {\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_relaxed<T>(dst: *mut T, src: T) -> T;\n \n-    /// Maximum with the current value using an unsized comparison.\n+    /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax<T>(dst: *mut T, src: T) -> T;\n-    /// Maximum with the current value using an unsized comparison.\n+    /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_acq<T>(dst: *mut T, src: T) -> T;\n-    /// Maximum with the current value using an unsized comparison.\n+    /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_rel<T>(dst: *mut T, src: T) -> T;\n-    /// Maximum with the current value using an unsized comparison.\n+    /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_acqrel<T>(dst: *mut T, src: T) -> T;\n-    /// Maximum with the current value using an unsized comparison.\n+    /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing"}]}