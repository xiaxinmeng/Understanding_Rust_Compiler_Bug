{"sha": "b28d41186698a6e2aa3d679ee63dd48304ca4262", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOGQ0MTE4NjY5OGE2ZTJhYTNkNjc5ZWU2M2RkNDgzMDRjYTQyNjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-18T18:35:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-18T18:35:11Z"}, "message": "Merge #3640\n\n3640: Merge imports assist r=matklad a=matklad\n\nWork towards #2220\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7be0684f1c2660eb5da089d1067d13a343e8bcff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be0684f1c2660eb5da089d1067d13a343e8bcff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b28d41186698a6e2aa3d679ee63dd48304ca4262", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJecmnfCRBK7hj4Ov3rIwAAdHIIAAOtrmiVmn7ofl5ik5l2WL22\njHsRBMphidSTHUu+YJE8uptpUs60Zas2aCUlAXSYU5IORUjrA31AdQZfzIX2b9MZ\nmIkT/QDgm1KYYt0tW4ShNPRbVdvI90XEa2fXIczTyzEd2Ac2EywlD4kR96+O898e\n+q0VoSkZukLTndpCEgeXN4WrszMg88K5txMbTGTzlTyTVmZfk53HA7J4cvNZ/Uu8\n3tY/KyFKAtgaRLwaZkOa6WmnlEmRiQgoTsbWQa0qeNHsaRajIZjPgg049flQJGxX\n/zgJO3FunhL7wQIM0kb7Z3q/Df3lHdBWnVN8o2KsqEmqsZeUExqueagZOa6mef4=\n=r84t\n-----END PGP SIGNATURE-----\n", "payload": "tree 7be0684f1c2660eb5da089d1067d13a343e8bcff\nparent 12c952f8010afb583989a6e72f81ded4aa9110d2\nparent 3f6dc20d3cf3fa101552a9067b98a1314260a679\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584556511 +0000\ncommitter GitHub <noreply@github.com> 1584556511 +0000\n\nMerge #3640\n\n3640: Merge imports assist r=matklad a=matklad\n\nWork towards #2220\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b28d41186698a6e2aa3d679ee63dd48304ca4262", "html_url": "https://github.com/rust-lang/rust/commit/b28d41186698a6e2aa3d679ee63dd48304ca4262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b28d41186698a6e2aa3d679ee63dd48304ca4262/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c952f8010afb583989a6e72f81ded4aa9110d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c952f8010afb583989a6e72f81ded4aa9110d2", "html_url": "https://github.com/rust-lang/rust/commit/12c952f8010afb583989a6e72f81ded4aa9110d2"}, {"sha": "3f6dc20d3cf3fa101552a9067b98a1314260a679", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6dc20d3cf3fa101552a9067b98a1314260a679", "html_url": "https://github.com/rust-lang/rust/commit/3f6dc20d3cf3fa101552a9067b98a1314260a679"}], "stats": {"total": 346, "additions": 274, "deletions": 72}, "files": [{"sha": "aef6793e8934b3472272ae8158b6dac81d2f69e9", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=b28d41186698a6e2aa3d679ee63dd48304ca4262", "patch": "@@ -417,6 +417,20 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_merge_imports() {\n+    check(\n+        \"merge_imports\",\n+        r#####\"\n+use std::<|>fmt::Formatter;\n+use std::io;\n+\"#####,\n+        r#####\"\n+use std::{fmt::Formatter, io};\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_merge_match_arms() {\n     check("}, {"sha": "96b1ab86a5c73f26faf1318d4f9d6ffd7e834c1f", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=b28d41186698a6e2aa3d679ee63dd48304ca4262", "patch": "@@ -0,0 +1,154 @@\n+use std::iter::successors;\n+\n+use ast::{edit::AstNodeEdit, make};\n+use ra_syntax::{ast, AstNode, AstToken, Direction, InsertPosition, SyntaxElement, T};\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+\n+// Assist: merge_imports\n+//\n+// Merges two imports with a common prefix.\n+//\n+// ```\n+// use std::<|>fmt::Formatter;\n+// use std::io;\n+// ```\n+// ->\n+// ```\n+// use std::{fmt::Formatter, io};\n+// ```\n+pub(crate) fn merge_imports(ctx: AssistCtx) -> Option<Assist> {\n+    let tree: ast::UseTree = ctx.find_node_at_offset()?;\n+    let use_item = tree.syntax().parent().and_then(ast::UseItem::cast)?;\n+    let (merged, to_delete) = [Direction::Prev, Direction::Next]\n+        .iter()\n+        .copied()\n+        .filter_map(|dir| next_use_item(&use_item, dir))\n+        .filter_map(|it| Some((it.clone(), it.use_tree()?)))\n+        .find_map(|(use_item, use_tree)| {\n+            Some((try_merge_trees(&tree, &use_tree)?, use_item.clone()))\n+        })?;\n+    let mut offset = ctx.frange.range.start();\n+    ctx.add_assist(AssistId(\"merge_imports\"), \"Merge imports\", |edit| {\n+        edit.replace_ast(tree, merged);\n+\n+        let mut range = to_delete.syntax().text_range();\n+        let next_ws = to_delete\n+            .syntax()\n+            .next_sibling_or_token()\n+            .and_then(|it| it.into_token())\n+            .and_then(ast::Whitespace::cast);\n+        if let Some(ws) = next_ws {\n+            range = range.extend_to(&ws.syntax().text_range())\n+        }\n+        edit.delete(range);\n+        if range.end() <= offset {\n+            offset -= range.len();\n+        }\n+        edit.set_cursor(offset);\n+    })\n+}\n+\n+fn next_use_item(this_use_item: &ast::UseItem, direction: Direction) -> Option<ast::UseItem> {\n+    this_use_item.syntax().siblings(direction).skip(1).find_map(ast::UseItem::cast)\n+}\n+\n+fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTree> {\n+    let lhs_path = old.path()?;\n+    let rhs_path = new.path()?;\n+\n+    let (lhs_prefix, rhs_prefix) = common_prefix(&lhs_path, &rhs_path)?;\n+\n+    let lhs = old.split_prefix(&lhs_prefix);\n+    let rhs = new.split_prefix(&rhs_prefix);\n+\n+    let mut to_insert: Vec<SyntaxElement> = Vec::new();\n+    to_insert.push(make::token(T![,]).into());\n+    to_insert.push(make::tokens::single_space().into());\n+    to_insert.extend(\n+        rhs.use_tree_list()?\n+            .syntax()\n+            .children_with_tokens()\n+            .filter(|it| it.kind() != T!['{'] && it.kind() != T!['}']),\n+    );\n+    let use_tree_list = lhs.use_tree_list()?;\n+    let pos = InsertPosition::Before(use_tree_list.r_curly()?.into());\n+    let use_tree_list = use_tree_list.insert_children(pos, to_insert);\n+    Some(lhs.with_use_tree_list(use_tree_list))\n+}\n+\n+fn common_prefix(lhs: &ast::Path, rhs: &ast::Path) -> Option<(ast::Path, ast::Path)> {\n+    let mut res = None;\n+    let mut lhs_curr = first_path(&lhs);\n+    let mut rhs_curr = first_path(&rhs);\n+    loop {\n+        match (lhs_curr.segment(), rhs_curr.segment()) {\n+            (Some(lhs), Some(rhs)) if lhs.syntax().text() == rhs.syntax().text() => (),\n+            _ => break,\n+        }\n+        res = Some((lhs_curr.clone(), rhs_curr.clone()));\n+\n+        match (lhs_curr.parent_path(), rhs_curr.parent_path()) {\n+            (Some(lhs), Some(rhs)) => {\n+                lhs_curr = lhs;\n+                rhs_curr = rhs;\n+            }\n+            _ => break,\n+        }\n+    }\n+\n+    res\n+}\n+\n+fn first_path(path: &ast::Path) -> ast::Path {\n+    successors(Some(path.clone()), |it| it.qualifier()).last().unwrap()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_merge_first() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::fmt<|>::Debug;\n+use std::fmt::Display;\n+\",\n+            r\"\n+use std::fmt<|>::{Debug, Display};\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_merge_second() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::fmt::Debug;\n+use std::fmt<|>::Display;\n+\",\n+            r\"\n+use std::fmt<|>::{Display, Debug};\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn test_merge_nested() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::{fmt<|>::Debug, fmt::Display};\n+\",\n+            r\"\n+use std::{fmt::{Debug, Display}};\n+\",\n+        )\n+    }\n+}"}, {"sha": "342a770ec22f63192ddd1685a55955394cf7b1d7", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=b28d41186698a6e2aa3d679ee63dd48304ca4262", "patch": "@@ -1,5 +1,5 @@\n use ra_syntax::{\n-    ast::{self, edit, make, AstNode, NameOwner, TypeBoundsOwner},\n+    ast::{self, edit::AstNodeEdit, make, AstNode, NameOwner, TypeBoundsOwner},\n     SyntaxElement,\n     SyntaxKind::*,\n };\n@@ -54,7 +54,7 @@ pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx) -> Option<Assist> {\n                 (type_param, without_bounds)\n             });\n \n-        let new_type_param_list = edit::replace_descendants(&type_param_list, new_params);\n+        let new_type_param_list = type_param_list.replace_descendants(new_params);\n         edit.replace_ast(type_param_list.clone(), new_type_param_list);\n \n         let where_clause = {"}, {"sha": "d9244f22d697dae1cdff336a8feaf4b8ba9b72d1", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=b28d41186698a6e2aa3d679ee63dd48304ca4262", "patch": "@@ -1,9 +1,6 @@\n-use std::iter::{once, successors};\n+use std::iter::successors;\n \n-use ra_syntax::{\n-    ast::{self, make},\n-    AstNode, T,\n-};\n+use ra_syntax::{ast, AstNode, T};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -25,7 +22,10 @@ pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n \n     let use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast)?;\n \n-    let new_tree = split_use_tree_prefix(&use_tree, &path)?;\n+    let new_tree = use_tree.split_prefix(&path);\n+    if new_tree == use_tree {\n+        return None;\n+    }\n     let cursor = ctx.frange.range.start();\n \n     ctx.add_assist(AssistId(\"split_import\"), \"Split import\", |edit| {\n@@ -35,23 +35,6 @@ pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n     })\n }\n \n-fn split_use_tree_prefix(use_tree: &ast::UseTree, prefix: &ast::Path) -> Option<ast::UseTree> {\n-    let suffix = split_path_prefix(&prefix)?;\n-    let use_tree = make::use_tree(suffix.clone(), use_tree.use_tree_list(), use_tree.alias());\n-    let nested = make::use_tree_list(once(use_tree));\n-    let res = make::use_tree(prefix.clone(), Some(nested), None);\n-    Some(res)\n-}\n-\n-fn split_path_prefix(prefix: &ast::Path) -> Option<ast::Path> {\n-    let parent = prefix.parent_path()?;\n-    let mut res = make::path_unqualified(parent.segment()?);\n-    for p in successors(parent.parent_path(), |it| it.parent_path()) {\n-        res = make::path_qualified(res, p.segment()?);\n-    }\n-    Some(res)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::helpers::{check_assist, check_assist_target};"}, {"sha": "b8704ea7d2f868b0ce267319a962b06a6854990e", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b28d41186698a6e2aa3d679ee63dd48304ca4262", "patch": "@@ -110,6 +110,7 @@ mod handlers {\n     mod inline_local_variable;\n     mod introduce_variable;\n     mod invert_if;\n+    mod merge_imports;\n     mod merge_match_arms;\n     mod move_bounds;\n     mod move_guard;\n@@ -140,6 +141,7 @@ mod handlers {\n             inline_local_variable::inline_local_variable,\n             introduce_variable::introduce_variable,\n             invert_if::invert_if,\n+            merge_imports::merge_imports,\n             merge_match_arms::merge_match_arms,\n             move_bounds::move_bounds_to_where_clause,\n             move_guard::move_arm_cond_to_match_guard,"}, {"sha": "68dae008f3982a24b04c2ed8045cf145ef0ef0b0", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 69, "deletions": 47, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=b28d41186698a6e2aa3d679ee63dd48304ca4262", "patch": "@@ -23,7 +23,7 @@ impl ast::BinExpr {\n     pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n         let op_node: SyntaxElement = self.op_details()?.0.into();\n         let to_insert: Option<SyntaxElement> = Some(make::token(op).into());\n-        Some(replace_children(self, single_node(op_node), to_insert))\n+        Some(self.replace_children(single_node(op_node), to_insert))\n     }\n }\n \n@@ -39,10 +39,10 @@ impl ast::FnDef {\n         } else {\n             to_insert.push(make::tokens::single_space().into());\n             to_insert.push(body.syntax().clone().into());\n-            return insert_children(self, InsertPosition::Last, to_insert);\n+            return self.insert_children(InsertPosition::Last, to_insert);\n         };\n         to_insert.push(body.syntax().clone().into());\n-        replace_children(self, single_node(old_body_or_semi), to_insert)\n+        self.replace_children(single_node(old_body_or_semi), to_insert)\n     }\n }\n \n@@ -75,7 +75,7 @@ impl ast::ItemList {\n         let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n         let to_insert: ArrayVec<[SyntaxElement; 2]> =\n             [ws.ws().into(), item.syntax().clone().into()].into();\n-        insert_children(self, position, to_insert)\n+        self.insert_children(position, to_insert)\n     }\n \n     fn l_curly(&self) -> Option<SyntaxElement> {\n@@ -106,8 +106,8 @@ impl ast::ItemList {\n         let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n         let to_insert = iter::once(ws.ws().into());\n         match existing_ws {\n-            None => insert_children(self, InsertPosition::After(l_curly), to_insert),\n-            Some(ws) => replace_children(self, single_node(ws), to_insert),\n+            None => self.insert_children(InsertPosition::After(l_curly), to_insert),\n+            Some(ws) => self.replace_children(single_node(ws), to_insert),\n         }\n     }\n }\n@@ -184,7 +184,7 @@ impl ast::RecordFieldList {\n             InsertPosition::After(anchor) => after_field!(anchor),\n         };\n \n-        insert_children(self, position, to_insert)\n+        self.insert_children(position, to_insert)\n     }\n \n     fn l_curly(&self) -> Option<SyntaxElement> {\n@@ -203,16 +203,15 @@ impl ast::TypeParam {\n             Some(it) => it.syntax().clone().into(),\n             None => colon.clone().into(),\n         };\n-        replace_children(self, colon.into()..=end, iter::empty())\n+        self.replace_children(colon.into()..=end, iter::empty())\n     }\n }\n \n impl ast::Path {\n     #[must_use]\n     pub fn with_segment(&self, segment: ast::PathSegment) -> ast::Path {\n         if let Some(old) = self.segment() {\n-            return replace_children(\n-                self,\n+            return self.replace_children(\n                 single_node(old.syntax().clone()),\n                 iter::once(segment.syntax().clone().into()),\n             );\n@@ -234,8 +233,7 @@ impl ast::PathSegment {\n \n     fn _with_type_args(&self, type_args: ast::TypeArgList, turbo: bool) -> ast::PathSegment {\n         if let Some(old) = self.type_arg_list() {\n-            return replace_children(\n-                self,\n+            return self.replace_children(\n                 single_node(old.syntax().clone()),\n                 iter::once(type_args.syntax().clone().into()),\n             );\n@@ -245,15 +243,15 @@ impl ast::PathSegment {\n             to_insert.push(make::token(T![::]).into());\n         }\n         to_insert.push(type_args.syntax().clone().into());\n-        insert_children(self, InsertPosition::Last, to_insert)\n+        self.insert_children(InsertPosition::Last, to_insert)\n     }\n }\n \n impl ast::UseItem {\n     #[must_use]\n     pub fn with_use_tree(&self, use_tree: ast::UseTree) -> ast::UseItem {\n         if let Some(old) = self.use_tree() {\n-            return replace_descendants(self, iter::once((old, use_tree)));\n+            return self.replace_descendants(iter::once((old, use_tree)));\n         }\n         self.clone()\n     }\n@@ -263,18 +261,38 @@ impl ast::UseTree {\n     #[must_use]\n     pub fn with_path(&self, path: ast::Path) -> ast::UseTree {\n         if let Some(old) = self.path() {\n-            return replace_descendants(self, iter::once((old, path)));\n+            return self.replace_descendants(iter::once((old, path)));\n         }\n         self.clone()\n     }\n \n     #[must_use]\n     pub fn with_use_tree_list(&self, use_tree_list: ast::UseTreeList) -> ast::UseTree {\n         if let Some(old) = self.use_tree_list() {\n-            return replace_descendants(self, iter::once((old, use_tree_list)));\n+            return self.replace_descendants(iter::once((old, use_tree_list)));\n         }\n         self.clone()\n     }\n+\n+    #[must_use]\n+    pub fn split_prefix(&self, prefix: &ast::Path) -> ast::UseTree {\n+        let suffix = match split_path_prefix(&prefix) {\n+            Some(it) => it,\n+            None => return self.clone(),\n+        };\n+        let use_tree = make::use_tree(suffix.clone(), self.use_tree_list(), self.alias());\n+        let nested = make::use_tree_list(iter::once(use_tree));\n+        return make::use_tree(prefix.clone(), Some(nested), None);\n+\n+        fn split_path_prefix(prefix: &ast::Path) -> Option<ast::Path> {\n+            let parent = prefix.parent_path()?;\n+            let mut res = make::path_unqualified(parent.segment()?);\n+            for p in iter::successors(parent.parent_path(), |it| it.parent_path()) {\n+                res = make::path_qualified(res, p.segment()?);\n+            }\n+            Some(res)\n+        }\n+    }\n }\n \n #[must_use]\n@@ -295,19 +313,6 @@ fn strip_attrs_and_docs_inner(mut node: SyntaxNode) -> SyntaxNode {\n     node\n }\n \n-#[must_use]\n-pub fn replace_descendants<N: AstNode, D: AstNode>(\n-    parent: &N,\n-    replacement_map: impl IntoIterator<Item = (D, D)>,\n-) -> N {\n-    let map = replacement_map\n-        .into_iter()\n-        .map(|(from, to)| (from.syntax().clone().into(), to.syntax().clone().into()))\n-        .collect::<FxHashMap<SyntaxElement, _>>();\n-    let new_syntax = algo::replace_descendants(parent.syntax(), |n| map.get(n).cloned());\n-    N::cast(new_syntax).unwrap()\n-}\n-\n #[derive(Debug, Clone, Copy)]\n pub struct IndentLevel(pub u8);\n \n@@ -411,31 +416,48 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     iter::successors(Some(token), |token| token.prev_token())\n }\n \n-#[must_use]\n-fn insert_children<N: AstNode>(\n-    parent: &N,\n-    position: InsertPosition<SyntaxElement>,\n-    to_insert: impl IntoIterator<Item = SyntaxElement>,\n-) -> N {\n-    let new_syntax = algo::insert_children(parent.syntax(), position, to_insert);\n-    N::cast(new_syntax).unwrap()\n+pub trait AstNodeEdit: AstNode + Sized {\n+    #[must_use]\n+    fn insert_children(\n+        &self,\n+        position: InsertPosition<SyntaxElement>,\n+        to_insert: impl IntoIterator<Item = SyntaxElement>,\n+    ) -> Self {\n+        let new_syntax = algo::insert_children(self.syntax(), position, to_insert);\n+        Self::cast(new_syntax).unwrap()\n+    }\n+\n+    #[must_use]\n+    fn replace_children(\n+        &self,\n+        to_replace: RangeInclusive<SyntaxElement>,\n+        to_insert: impl IntoIterator<Item = SyntaxElement>,\n+    ) -> Self {\n+        let new_syntax = algo::replace_children(self.syntax(), to_replace, to_insert);\n+        Self::cast(new_syntax).unwrap()\n+    }\n+\n+    #[must_use]\n+    fn replace_descendants<D: AstNode>(\n+        &self,\n+        replacement_map: impl IntoIterator<Item = (D, D)>,\n+    ) -> Self {\n+        let map = replacement_map\n+            .into_iter()\n+            .map(|(from, to)| (from.syntax().clone().into(), to.syntax().clone().into()))\n+            .collect::<FxHashMap<SyntaxElement, _>>();\n+        let new_syntax = algo::replace_descendants(self.syntax(), |n| map.get(n).cloned());\n+        Self::cast(new_syntax).unwrap()\n+    }\n }\n \n+impl<N: AstNode> AstNodeEdit for N {}\n+\n fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElement> {\n     let element = element.into();\n     element.clone()..=element\n }\n \n-#[must_use]\n-fn replace_children<N: AstNode>(\n-    parent: &N,\n-    to_replace: RangeInclusive<SyntaxElement>,\n-    to_insert: impl IntoIterator<Item = SyntaxElement>,\n-) -> N {\n-    let new_syntax = algo::replace_children(parent.syntax(), to_replace, to_insert);\n-    N::cast(new_syntax).unwrap()\n-}\n-\n #[test]\n fn test_increase_indent() {\n     let arm_list = {"}, {"sha": "c3ae8f90e815a67baa78426c3e91282e986f0b61", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28d41186698a6e2aa3d679ee63dd48304ca4262/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=b28d41186698a6e2aa3d679ee63dd48304ca4262", "patch": "@@ -167,6 +167,20 @@ impl ast::UseTreeList {\n             .and_then(ast::UseTree::cast)\n             .expect(\"UseTreeLists are always nested in UseTrees\")\n     }\n+    pub fn l_curly(&self) -> Option<SyntaxToken> {\n+        self.token(T!['{'])\n+    }\n+\n+    pub fn r_curly(&self) -> Option<SyntaxToken> {\n+        self.token(T!['}'])\n+    }\n+\n+    fn token(&self, kind: SyntaxKind) -> Option<SyntaxToken> {\n+        self.syntax()\n+            .children_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == kind)\n+    }\n }\n \n impl ast::ImplDef {"}, {"sha": "e2850b4ddebe813a215647842aecbb5652a2867b", "filename": "docs/user/assists.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b28d41186698a6e2aa3d679ee63dd48304ca4262/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/b28d41186698a6e2aa3d679ee63dd48304ca4262/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=b28d41186698a6e2aa3d679ee63dd48304ca4262", "patch": "@@ -402,6 +402,19 @@ fn main() {\n }\n ```\n \n+## `merge_imports`\n+\n+Merges two imports with a common prefix.\n+\n+```rust\n+// BEFORE\n+use std::\u2503fmt::Formatter;\n+use std::io;\n+\n+// AFTER\n+use std::{fmt::Formatter, io};\n+```\n+\n ## `merge_match_arms`\n \n Merges identical match arms."}]}