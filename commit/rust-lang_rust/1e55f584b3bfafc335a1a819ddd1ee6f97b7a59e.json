{"sha": "1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTVmNTg0YjNiZmFmYzMzNWExYTgxOWRkZDFlZTZmOTdiN2E1OWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-24T23:55:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-24T23:55:16Z"}, "message": "Auto merge of #73645 - poliorcetics:ref-keyword, r=jyn514\n\nDocument the ref keyword\n\nPartial fix for #34601.\n\nThis documents the `ref` keyword with two examples, one failing to compile because the `ref` keyword is missing, and the same example fixed with the keyword inserted in the correct place.\n\nIt also explains (very *very* rapidly) the differences between `&` and `ref`.\n\nI put a link to the best place I could find in the Reference but there may be something better that I didn't find.", "tree": {"sha": "4d625fe50bc2c509776b244eddaddf274f544e4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d625fe50bc2c509776b244eddaddf274f544e4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e", "html_url": "https://github.com/rust-lang/rust/commit/1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef299eb9805b4c86b227b718b39084e8bf24454", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef299eb9805b4c86b227b718b39084e8bf24454", "html_url": "https://github.com/rust-lang/rust/commit/5ef299eb9805b4c86b227b718b39084e8bf24454"}, {"sha": "79f052bd4fa7f695a96515c44c5a72e75cf782ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f052bd4fa7f695a96515c44c5a72e75cf782ee", "html_url": "https://github.com/rust-lang/rust/commit/79f052bd4fa7f695a96515c44c5a72e75cf782ee"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "fdb4c7d599cebc5ce53d3e55d4a010065c418f24", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e", "patch": "@@ -1060,9 +1060,50 @@ mod pub_keyword {}\n //\n /// Bind by reference during pattern matching.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `ref` annotates pattern bindings to make them borrow rather than move.\n+/// It is **not** a part of the pattern as far as matching is concerned: it does\n+/// not affect *whether* a value is matched, only *how* it is matched.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// By default, [`match`] statements consume all they can, which can sometimes\n+/// be a problem, when you don't really need the value to be moved and owned:\n+///\n+/// ```compile_fail,E0382\n+/// let maybe_name = Some(String::from(\"Alice\"));\n+/// // The variable 'maybe_name' is consumed here ...\n+/// match maybe_name {\n+///     Some(n) => println!(\"Hello, {}\", n),\n+///     _ => println!(\"Hello, world\"),\n+/// }\n+/// // ... and is now unavailable.\n+/// println!(\"Hello again, {}\", maybe_name.unwrap_or(\"world\".into()));\n+/// ```\n+///\n+/// Using the `ref` keyword, the value is only borrowed, not moved, making it\n+/// available for use after the [`match`] statement:\n+///\n+/// ```\n+/// let maybe_name = Some(String::from(\"Alice\"));\n+/// // Using `ref`, the value is borrowed, not moved ...\n+/// match maybe_name {\n+///     Some(ref n) => println!(\"Hello, {}\", n),\n+///     _ => println!(\"Hello, world\"),\n+/// }\n+/// // ... so it's available here!\n+/// println!(\"Hello again, {}\", maybe_name.unwrap_or(\"world\".into()));\n+/// ```\n+///\n+/// # `&` vs `ref`\n+///\n+/// - `&` denotes that your pattern expects a reference to an object. Hence `&`\n+/// is a part of said pattern: `&Foo` matches different objects than `Foo` does.\n+///\n+/// - `ref` indicates that you want a reference to an unpacked value. It is not\n+/// matched against: `Foo(ref foo)` matches the same objects as `Foo(foo)`.\n+///\n+/// See also the [Reference] for more information.\n+///\n+/// [`match`]: keyword.match.html\n+/// [Reference]: ../reference/patterns.html#identifier-patterns\n mod ref_keyword {}\n \n #[doc(keyword = \"return\")]"}]}