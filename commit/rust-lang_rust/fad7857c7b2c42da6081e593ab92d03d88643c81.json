{"sha": "fad7857c7b2c42da6081e593ab92d03d88643c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZDc4NTdjN2IyYzQyZGE2MDgxZTU5M2FiOTJkMDNkODg2NDNjODE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-08T02:21:36Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T14:01:07Z"}, "message": "Mass rename of .consume{,_iter}() to .move_iter()\n\ncc #7887", "tree": {"sha": "cca381ea03eab19ac755ab7166321d437fad86e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cca381ea03eab19ac755ab7166321d437fad86e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fad7857c7b2c42da6081e593ab92d03d88643c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fad7857c7b2c42da6081e593ab92d03d88643c81", "html_url": "https://github.com/rust-lang/rust/commit/fad7857c7b2c42da6081e593ab92d03d88643c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fad7857c7b2c42da6081e593ab92d03d88643c81/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fc9c92ffab3bdb98fdd00c284a7f6541444e5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fc9c92ffab3bdb98fdd00c284a7f6541444e5a", "html_url": "https://github.com/rust-lang/rust/commit/f0fc9c92ffab3bdb98fdd00c284a7f6541444e5a"}], "stats": {"total": 258, "additions": 129, "deletions": 129}, "files": [{"sha": "2158a90963bc9ab731ba0e4d60b73e73f123cf68", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -63,7 +63,7 @@ pub struct MutDListIterator<'self, T> {\n \n /// DList consuming iterator\n #[deriving(Clone)]\n-pub struct ConsumeIterator<T> {\n+pub struct MoveIterator<T> {\n     priv list: DList<T>\n }\n \n@@ -391,14 +391,14 @@ impl<T> DList<T> {\n \n     /// Consume the list into an iterator yielding elements by value\n     #[inline]\n-    pub fn consume_iter(self) -> ConsumeIterator<T> {\n-        ConsumeIterator{list: self}\n+    pub fn move_iter(self) -> MoveIterator<T> {\n+        MoveIterator{list: self}\n     }\n \n     /// Consume the list into an iterator yielding elements by value, in reverse\n     #[inline]\n-    pub fn consume_rev_iter(self) -> Invert<ConsumeIterator<T>> {\n-        self.consume_iter().invert()\n+    pub fn move_rev_iter(self) -> Invert<MoveIterator<T>> {\n+        self.move_iter().invert()\n     }\n }\n \n@@ -557,7 +557,7 @@ impl<'self, A> ListInsertion<A> for MutDListIterator<'self, A> {\n     }\n }\n \n-impl<A> Iterator<A> for ConsumeIterator<A> {\n+impl<A> Iterator<A> for MoveIterator<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.list.pop_front() }\n \n@@ -567,7 +567,7 @@ impl<A> Iterator<A> for ConsumeIterator<A> {\n     }\n }\n \n-impl<A> DoubleEndedIterator<A> for ConsumeIterator<A> {\n+impl<A> DoubleEndedIterator<A> for MoveIterator<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.list.pop_back() }\n }\n@@ -721,7 +721,7 @@ mod tests {\n         check_links(&m);\n         let sum = v + u;\n         assert_eq!(sum.len(), m.len());\n-        for elt in sum.consume_iter() {\n+        for elt in sum.move_iter() {\n             assert_eq!(m.pop_front(), Some(elt))\n         }\n     }\n@@ -745,7 +745,7 @@ mod tests {\n         check_links(&m);\n         let sum = u + v;\n         assert_eq!(sum.len(), m.len());\n-        for elt in sum.consume_iter() {\n+        for elt in sum.move_iter() {\n             assert_eq!(m.pop_front(), Some(elt))\n         }\n     }\n@@ -770,7 +770,7 @@ mod tests {\n         m.rotate_backward(); check_links(&m);\n         m.push_front(9); check_links(&m);\n         m.rotate_forward(); check_links(&m);\n-        assert_eq!(~[3,9,5,1,2], m.consume_iter().collect());\n+        assert_eq!(~[3,9,5,1,2], m.move_iter().collect());\n     }\n \n     #[test]\n@@ -900,7 +900,7 @@ mod tests {\n         }\n         check_links(&m);\n         assert_eq!(m.len(), 3 + len * 2);\n-        assert_eq!(m.consume_iter().collect::<~[int]>(), ~[-2,0,1,2,3,4,5,6,7,8,9,0,1]);\n+        assert_eq!(m.move_iter().collect::<~[int]>(), ~[-2,0,1,2,3,4,5,6,7,8,9,0,1]);\n     }\n \n     #[test]\n@@ -911,7 +911,7 @@ mod tests {\n         m.merge(n, |a, b| a <= b);\n         assert_eq!(m.len(), len);\n         check_links(&m);\n-        let res = m.consume_iter().collect::<~[int]>();\n+        let res = m.move_iter().collect::<~[int]>();\n         assert_eq!(res, ~[-1, 0, 0, 0, 1, 3, 5, 6, 7, 2, 7, 7, 9]);\n     }\n \n@@ -927,7 +927,7 @@ mod tests {\n         m.push_back(4);\n         m.insert_ordered(3);\n         check_links(&m);\n-        assert_eq!(~[2,3,4], m.consume_iter().collect::<~[int]>());\n+        assert_eq!(~[2,3,4], m.move_iter().collect::<~[int]>());\n     }\n \n     #[test]\n@@ -1003,7 +1003,7 @@ mod tests {\n         check_links(&m);\n \n         let mut i = 0u;\n-        for (a, &b) in m.consume_iter().zip(v.iter()) {\n+        for (a, &b) in m.move_iter().zip(v.iter()) {\n             i += 1;\n             assert_eq!(a, b);\n         }"}, {"sha": "2287384b53a0e153385dd1fceac5477662d52f41", "filename": "src/libextra/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -948,7 +948,7 @@ impl serialize::Decoder for Decoder {\n         let name = match self.stack.pop() {\n             String(s) => s,\n             List(list) => {\n-                for v in list.consume_rev_iter() {\n+                for v in list.move_rev_iter() {\n                     self.stack.push(v);\n                 }\n                 match self.stack.pop() {\n@@ -1066,7 +1066,7 @@ impl serialize::Decoder for Decoder {\n         let len = match self.stack.pop() {\n             List(list) => {\n                 let len = list.len();\n-                for v in list.consume_rev_iter() {\n+                for v in list.move_rev_iter() {\n                     self.stack.push(v);\n                 }\n                 len\n@@ -1086,7 +1086,7 @@ impl serialize::Decoder for Decoder {\n         let len = match self.stack.pop() {\n             Object(obj) => {\n                 let len = obj.len();\n-                for (key, value) in obj.consume_iter() {\n+                for (key, value) in obj.move_iter() {\n                     self.stack.push(value);\n                     self.stack.push(String(key));\n                 }"}, {"sha": "bb79b5c8b95df7d90a02fbb94f72fab9534d179d", "filename": "src/libextra/par.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -77,7 +77,7 @@ fn map_slices<A:Clone + Send,B:Clone + Send>(\n         info!(\"num_tasks: %?\", (num_tasks, futures.len()));\n         assert_eq!(num_tasks, futures.len());\n \n-        do futures.consume_iter().transform |ys| {\n+        do futures.move_iter().transform |ys| {\n             let mut ys = ys;\n             ys.get()\n         }.collect()"}, {"sha": "a1f3cd4f5487d8e75c92a49546cbfecbcb9dd8e9", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -152,12 +152,12 @@ impl<V> SmallIntMap<V> {\n     }\n \n     /// Empties the hash map, moving all values into the specified closure\n-    pub fn consume(&mut self)\n+    pub fn move_iter(&mut self)\n         -> FilterMap<(uint, Option<V>), (uint, V),\n-                Enumerate<vec::ConsumeIterator<Option<V>>>>\n+                Enumerate<vec::MoveIterator<Option<V>>>>\n     {\n         let values = replace(&mut self.v, ~[]);\n-        values.consume_iter().enumerate().filter_map(|(i, v)| {\n+        values.move_iter().enumerate().filter_map(|(i, v)| {\n             v.map_move(|v| (i, v))\n         })\n     }\n@@ -452,11 +452,11 @@ mod test_map {\n     }\n \n     #[test]\n-    fn test_consume() {\n+    fn test_move_iter() {\n         let mut m = SmallIntMap::new();\n         m.insert(1, ~2);\n         let mut called = false;\n-        for (k, v) in m.consume() {\n+        for (k, v) in m.move_iter() {\n             assert!(!called);\n             called = true;\n             assert_eq!(k, 1);"}, {"sha": "c7920e727089059032033c9bb0f0084081d34271", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -893,7 +893,7 @@ mod tests {\n         fn ile(x: &(&'static str), y: &(&'static str)) -> bool\n         {\n             // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-            // to_ascii_consume and to_str_consume to not do a unnecessary clone.\n+            // to_ascii_move and to_str_move to not do a unnecessary clone.\n             // (Actually, could just remove the to_str_* call, but needs an deriving(Ord) on\n             // Ascii)\n             let x = x.to_ascii().to_lower().to_str_ascii();"}, {"sha": "6adef685d9599baf934c82d16a67fb8416189ac6", "filename": "src/libextra/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -698,7 +698,7 @@ fn run_tests(opts: &TestOpts,\n \n     // All benchmarks run at the end, in serial.\n     // (this includes metric fns)\n-    for b in filtered_benchs_and_metrics.consume_iter() {\n+    for b in filtered_benchs_and_metrics.move_iter() {\n         callback(TeWait(b.desc.clone()));\n         run_test(!opts.run_benchmarks, b, ch.clone());\n         let (test, result) = p.recv();\n@@ -744,7 +744,7 @@ pub fn filter_tests(\n             }\n         }\n \n-        filtered.consume_iter().filter_map(|x| filter_fn(x, filter_str)).collect()\n+        filtered.move_iter().filter_map(|x| filter_fn(x, filter_str)).collect()\n     };\n \n     // Maybe pull out the ignored test and unignore them\n@@ -762,7 +762,7 @@ pub fn filter_tests(\n                 None\n             }\n         };\n-        filtered.consume_iter().filter_map(|x| filter(x)).collect()\n+        filtered.move_iter().filter_map(|x| filter(x)).collect()\n     };\n \n     // Sort the tests alphabetically"}, {"sha": "6e63b74449f0acf96ebce658b1456df166872307", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -213,13 +213,13 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     }\n \n     /// Get a lazy iterator that consumes the treemap.\n-    pub fn consume_iter(self) -> TreeMapConsumeIterator<K, V> {\n+    pub fn move_iter(self) -> TreeMapMoveIterator<K, V> {\n         let TreeMap { root: root, length: length } = self;\n         let stk = match root {\n             None => ~[],\n             Some(~tn) => ~[tn]\n         };\n-        TreeMapConsumeIterator {\n+        TreeMapMoveIterator {\n             stack: stk,\n             remaining: length\n         }\n@@ -331,12 +331,12 @@ fn iter_traverse_complete<'a, K, V>(it: &mut TreeMapIterator<'a, K, V>) {\n }\n \n /// Lazy forward iterator over a map that consumes the map while iterating\n-pub struct TreeMapConsumeIterator<K, V> {\n+pub struct TreeMapMoveIterator<K, V> {\n     priv stack: ~[TreeNode<K, V>],\n     priv remaining: uint\n }\n \n-impl<K, V> Iterator<(K, V)> for TreeMapConsumeIterator<K,V> {\n+impl<K, V> Iterator<(K, V)> for TreeMapMoveIterator<K,V> {\n     #[inline]\n     fn next(&mut self) -> Option<(K, V)> {\n         while !self.stack.is_empty() {"}, {"sha": "5da769a60d75cd167b31999d2add104565391352", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -935,7 +935,7 @@ pub fn link_args(sess: Session,\n     // Add all the link args for external crates.\n     do cstore::iter_crate_data(cstore) |crate_num, _| {\n         let link_args = csearch::get_link_args_for_crate(cstore, crate_num);\n-        for link_arg in link_args.consume_iter() {\n+        for link_arg in link_args.move_iter() {\n             args.push(link_arg);\n         }\n     }"}, {"sha": "dce632bd9d6bbd7d44dd9d6e8ca8d2d336fbb33d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -120,7 +120,7 @@ pub fn build_configuration(sess: Session, argv0: @str, input: &input) ->\n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n fn parse_cfgspecs(cfgspecs: ~[~str],\n                   demitter: diagnostic::Emitter) -> ast::CrateConfig {\n-    do cfgspecs.consume_iter().transform |s| {\n+    do cfgspecs.move_iter().transform |s| {\n         let sess = parse::new_parse_sess(Some(demitter));\n         parse::parse_meta_from_source_str(@\"cfgspec\", s.to_managed(), ~[], sess)\n     }.collect::<ast::CrateConfig>()\n@@ -631,7 +631,7 @@ pub fn build_session_options(binary: @str,\n         let level_name = lint::level_to_str(*level);\n \n         // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-        // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+        // to_ascii_move and to_str_move to not do a unnecessary copy.\n         let level_short = level_name.slice_chars(0, 1);\n         let level_short = level_short.to_ascii().to_upper().to_str_ascii();\n         let flags = vec::append(getopts::opt_strs(matches, level_short),"}, {"sha": "8a7894efb915d97015466ea867e617cbe74eff1a", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -1204,7 +1204,7 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                     }\n                     c::tag_table_capture_map => {\n                         let cvars =\n-                            at_vec::to_managed_consume(\n+                            at_vec::to_managed_move(\n                                 val_dsr.read_to_vec(\n                                     |val_dsr| val_dsr.read_capture_var(xcx)));\n                         dcx.maps.capture_map.insert(id, cvars);"}, {"sha": "3a15cbe0f5221bcb30101cd98df7fa11eed345c7", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -994,7 +994,7 @@ fn lint_session(cx: @mut Context) -> @visit::Visitor<()> {\n         match cx.tcx.sess.lints.pop(&id) {\n             None => {},\n             Some(l) => {\n-                for (lint, span, msg) in l.consume_iter() {\n+                for (lint, span, msg) in l.move_iter() {\n                     cx.span_lint(lint, span, msg)\n                 }\n             }"}, {"sha": "4d95909404e18ef33f8bc69e7630b3724575ab04", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -5366,7 +5366,7 @@ impl Resolver {\n         if idents.len() == 0 {\n             return ~\"???\";\n         }\n-        return self.idents_to_str(idents.consume_rev_iter().collect::<~[ast::ident]>());\n+        return self.idents_to_str(idents.move_rev_iter().collect::<~[ast::ident]>());\n     }\n \n     pub fn dump_module(@mut self, module_: @mut Module) {"}, {"sha": "668aaff35bb88b617fbc6cbd755eeba2c420e38a", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -156,7 +156,7 @@ Available lint options:\n \");\n \n     let lint_dict = lint::get_lint_dict();\n-    let mut lint_dict = lint_dict.consume()\n+    let mut lint_dict = lint_dict.move_iter()\n                                  .transform(|(k, v)| (v, k))\n                                  .collect::<~[(lint::LintSpec, &'static str)]>();\n     lint_dict.qsort();\n@@ -173,7 +173,7 @@ Available lint options:\n               padded(max_key, \"name\"), \"default\", \"meaning\");\n     printfln!(\"    %s  %7.7s  %s\\n\",\n               padded(max_key, \"----\"), \"-------\", \"-------\");\n-    for (spec, name) in lint_dict.consume_iter() {\n+    for (spec, name) in lint_dict.move_iter() {\n         let name = name.replace(\"_\", \"-\");\n         printfln!(\"    %s  %7.7s  %s\",\n                   padded(max_key, name),"}, {"sha": "f1d6b7285e88f1a2871ff23192f4f71b97ee9078", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -41,7 +41,7 @@ pub fn parse_crate(attrs: ~[ast::Attribute]) -> CrateAttrs {\n }\n \n pub fn parse_desc(attrs: ~[ast::Attribute]) -> Option<~str> {\n-    let doc_strs = do doc_metas(attrs).consume_iter().filter_map |meta| {\n+    let doc_strs = do doc_metas(attrs).move_iter().filter_map |meta| {\n         meta.value_str()\n     }.collect::<~[@str]>();\n     if doc_strs.is_empty() {"}, {"sha": "07af301260148db8fb0824d7b30c339716e7e6be", "filename": "src/librusti/program.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -167,7 +167,7 @@ impl Program {\n         }\n \n         let newvars = util::replace(&mut self.newvars, HashMap::new());\n-        for (name, var) in newvars.consume() {\n+        for (name, var) in newvars.move_iter() {\n             self.local_vars.insert(name, var);\n         }\n \n@@ -233,7 +233,7 @@ impl Program {\n     pub fn consume_cache(&mut self) {\n         let map = local_data::pop(tls_key).expect(\"tls is empty\");\n         let cons_map = util::replace(map, HashMap::new());\n-        for (name, value) in cons_map.consume() {\n+        for (name, value) in cons_map.move_iter() {\n             match self.local_vars.find_mut(&name) {\n                 Some(v) => { v.data = (*value).clone(); }\n                 None => { fail!(\"unknown variable %s\", name) }\n@@ -345,7 +345,7 @@ impl Program {\n \n         // I'm not an @ pointer, so this has to be done outside.\n         let cons_newvars = util::replace(newvars, HashMap::new());\n-        for (k, v) in cons_newvars.consume() {\n+        for (k, v) in cons_newvars.move_iter() {\n             self.newvars.insert(k, v);\n         }\n "}, {"sha": "6ac959e4a3260fc8c4e97628f1322037ecf160e8", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -37,7 +37,7 @@ pub fn each_pkg_parent_workspace(pkgid: &PkgId, action: &fn(&Path) -> bool) -> b\n }\n \n pub fn pkg_parent_workspaces(pkgid: &PkgId) -> ~[Path] {\n-    rust_path().consume_iter()\n+    rust_path().move_iter()\n         .filter(|ws| workspace_contains_package_id(pkgid, ws))\n         .collect()\n }"}, {"sha": "c948074990a36824c9c8e9c10b09ff4eeba34cc5", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -141,11 +141,11 @@ pub fn from_elem<T:Clone>(n_elts: uint, t: T) -> @[T] {\n  * Creates and initializes an immutable managed vector by moving all the\n  * elements from an owned vector.\n  */\n-pub fn to_managed_consume<T>(v: ~[T]) -> @[T] {\n+pub fn to_managed_move<T>(v: ~[T]) -> @[T] {\n     let mut av = @[];\n     unsafe {\n         raw::reserve(&mut av, v.len());\n-        for x in v.consume_iter() {\n+        for x in v.move_iter() {\n             raw::push(&mut av, x);\n         }\n         av\n@@ -331,12 +331,12 @@ mod test {\n     }\n \n     #[test]\n-    fn test_to_managed_consume() {\n-        assert_eq!(to_managed_consume::<int>(~[]), @[]);\n-        assert_eq!(to_managed_consume(~[true]), @[true]);\n-        assert_eq!(to_managed_consume(~[1, 2, 3, 4, 5]), @[1, 2, 3, 4, 5]);\n-        assert_eq!(to_managed_consume(~[~\"abc\", ~\"123\"]), @[~\"abc\", ~\"123\"]);\n-        assert_eq!(to_managed_consume(~[~[42]]), @[~[42]]);\n+    fn test_to_managed_move() {\n+        assert_eq!(to_managed_move::<int>(~[]), @[]);\n+        assert_eq!(to_managed_move(~[true]), @[true]);\n+        assert_eq!(to_managed_move(~[1, 2, 3, 4, 5]), @[1, 2, 3, 4, 5]);\n+        assert_eq!(to_managed_move(~[~\"abc\", ~\"123\"]), @[~\"abc\", ~\"123\"]);\n+        assert_eq!(to_managed_move(~[~[42]]), @[~[42]]);\n     }\n \n     #[test]"}, {"sha": "132ebc72960117763498599345c2f41b9d632efe", "filename": "src/libstd/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -150,7 +150,7 @@ pub fn rights<L, R: Clone>(eithers: &[Either<L, R>]) -> ~[R] {\n pub fn partition<L, R>(eithers: ~[Either<L, R>]) -> (~[L], ~[R]) {\n     let mut lefts: ~[L] = ~[];\n     let mut rights: ~[R] = ~[];\n-    for elt in eithers.consume_iter() {\n+    for elt in eithers.move_iter() {\n         match elt {\n             Left(l) => lefts.push(l),\n             Right(r) => rights.push(r)"}, {"sha": "e7b33ce80fa9c316ee24e3ef3a10d11bfbd377c5", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -159,8 +159,8 @@ impl<K:Hash + Eq,V> HashMap<K, V> {\n                                   vec::from_fn(new_capacity, |_| None));\n \n         self.size = 0;\n-        // consume_rev_iter is more efficient\n-        for bucket in old_buckets.consume_rev_iter() {\n+        // move_rev_iter is more efficient\n+        for bucket in old_buckets.move_rev_iter() {\n             self.insert_opt_bucket(bucket);\n         }\n     }\n@@ -470,9 +470,9 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n     /// Creates a consuming iterator, that is, one that moves each key-value\n     /// pair out of the map in arbitrary order. The map cannot be used after\n     /// calling this.\n-    pub fn consume(self) -> HashMapConsumeIterator<K, V> {\n-        // `consume_rev_iter` is more efficient than `consume_iter` for vectors\n-        HashMapConsumeIterator {iter: self.buckets.consume_rev_iter()}\n+    pub fn move_iter(self) -> HashMapMoveIterator<K, V> {\n+        // `move_rev_iter` is more efficient than `move_iter` for vectors\n+        HashMapMoveIterator {iter: self.buckets.move_rev_iter()}\n     }\n }\n \n@@ -524,9 +524,9 @@ pub struct HashMapMutIterator<'self, K, V> {\n     priv iter: vec::VecMutIterator<'self, Option<Bucket<K, V>>>,\n }\n \n-/// HashMap consume iterator\n-pub struct HashMapConsumeIterator<K, V> {\n-    priv iter: vec::ConsumeRevIterator<Option<Bucket<K, V>>>,\n+/// HashMap move iterator\n+pub struct HashMapMoveIterator<K, V> {\n+    priv iter: vec::MoveRevIterator<Option<Bucket<K, V>>>,\n }\n \n /// HashSet iterator\n@@ -535,9 +535,9 @@ pub struct HashSetIterator<'self, K> {\n     priv iter: vec::VecIterator<'self, Option<Bucket<K, ()>>>,\n }\n \n-/// HashSet consume iterator\n-pub struct HashSetConsumeIterator<K> {\n-    priv iter: vec::ConsumeRevIterator<Option<Bucket<K, ()>>>,\n+/// HashSet move iterator\n+pub struct HashSetMoveIterator<K> {\n+    priv iter: vec::MoveRevIterator<Option<Bucket<K, ()>>>,\n }\n \n impl<'self, K, V> Iterator<(&'self K, &'self V)> for HashMapIterator<'self, K, V> {\n@@ -566,7 +566,7 @@ impl<'self, K, V> Iterator<(&'self K, &'self mut V)> for HashMapMutIterator<'sel\n     }\n }\n \n-impl<K, V> Iterator<(K, V)> for HashMapConsumeIterator<K, V> {\n+impl<K, V> Iterator<(K, V)> for HashMapMoveIterator<K, V> {\n     #[inline]\n     fn next(&mut self) -> Option<(K, V)> {\n         for elt in self.iter {\n@@ -592,7 +592,7 @@ impl<'self, K> Iterator<&'self K> for HashSetIterator<'self, K> {\n     }\n }\n \n-impl<K> Iterator<K> for HashSetConsumeIterator<K> {\n+impl<K> Iterator<K> for HashSetMoveIterator<K> {\n     #[inline]\n     fn next(&mut self) -> Option<K> {\n         for elt in self.iter {\n@@ -707,9 +707,9 @@ impl<T:Hash + Eq> HashSet<T> {\n     /// Creates a consuming iterator, that is, one that moves each value out\n     /// of the set in arbitrary order. The set cannot be used after calling\n     /// this.\n-    pub fn consume(self) -> HashSetConsumeIterator<T> {\n-        // `consume_rev_iter` is more efficient than `consume_iter` for vectors\n-        HashSetConsumeIterator {iter: self.map.buckets.consume_rev_iter()}\n+    pub fn move_iter(self) -> HashSetMoveIterator<T> {\n+        // `move_rev_iter` is more efficient than `move_iter` for vectors\n+        HashSetMoveIterator {iter: self.map.buckets.move_rev_iter()}\n     }\n \n     /// Visit the values representing the difference\n@@ -881,7 +881,7 @@ mod test_map {\n     }\n \n     #[test]\n-    fn test_consume() {\n+    fn test_move_iter() {\n         let hm = {\n             let mut hm = HashMap::new();\n \n@@ -891,7 +891,7 @@ mod test_map {\n             hm\n         };\n \n-        let v = hm.consume().collect::<~[(char, int)]>();\n+        let v = hm.move_iter().collect::<~[(char, int)]>();\n         assert!([('a', 1), ('b', 2)] == v || [('b', 2), ('a', 1)] == v);\n     }\n \n@@ -1177,7 +1177,7 @@ mod test_set {\n     }\n \n     #[test]\n-    fn test_consume() {\n+    fn test_move_iter() {\n         let hs = {\n             let mut hs = HashSet::new();\n \n@@ -1187,7 +1187,7 @@ mod test_set {\n             hs\n         };\n \n-        let v = hs.consume().collect::<~[char]>();\n+        let v = hs.move_iter().collect::<~[char]>();\n         assert!(['a', 'b'] == v || ['b', 'a'] == v);\n     }\n }"}, {"sha": "c1999ae47d61a79df63c9b3f43ffbe90b08fd240", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -134,7 +134,7 @@ impl<T> Option<T> {\n \n     /// Return a consuming iterator over the possibly contained value\n     #[inline]\n-    pub fn consume(self) -> OptionIterator<T> {\n+    pub fn move_iter(self) -> OptionIterator<T> {\n         OptionIterator{opt: self}\n     }\n "}, {"sha": "9ade21a4ede075391ed0c051d2659a003a92e92d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -765,7 +765,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n                 strings\n             }\n         }\n-        do get_list(p).consume_iter().filter |filename| {\n+        do get_list(p).move_iter().filter |filename| {\n             \".\" != *filename && \"..\" != *filename\n         }.collect()\n     }"}, {"sha": "fb8f8fc7b67d503e046cdc7a55dd800fb8469ace", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -961,7 +961,7 @@ impl GenericPath for WindowsPath {\n         match self.filestem() {\n             Some(stem) => {\n                 // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-                // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+                // to_ascii_move and to_str_move to not do a unnecessary copy.\n                 match stem.to_ascii().to_lower().to_str_ascii() {\n                     ~\"con\" | ~\"aux\" | ~\"com1\" | ~\"com2\" | ~\"com3\" | ~\"com4\" |\n                     ~\"lpt1\" | ~\"lpt2\" | ~\"lpt3\" | ~\"prn\" | ~\"nul\" => true,\n@@ -1020,7 +1020,7 @@ impl GenericPath for WindowsPath {\n                 None => None,\n \n                 // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-                // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+                // to_ascii_move and to_str_move to not do a unnecessary copy.\n                 Some(ref device) => Some(device.to_ascii().to_upper().to_str_ascii())\n             },\n             is_absolute: self.is_absolute,"}, {"sha": "9de5e69148ae998cc39065e34844e0a4e3a0cdca", "filename": "src/libstd/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -94,7 +94,7 @@ impl<T, E: ToStr> Result<T, E> {\n         match *self {\n             Ok(ref t) => Some(t),\n             Err(*) => None,\n-        }.consume()\n+        }.move_iter()\n     }\n \n     /// Call a method based on a previous result\n@@ -108,7 +108,7 @@ impl<T, E: ToStr> Result<T, E> {\n         match *self {\n             Ok(*) => None,\n             Err(ref t) => Some(t),\n-        }.consume()\n+        }.move_iter()\n     }\n \n     /// Unwraps a result, yielding the content of an `Ok`."}, {"sha": "26c6c9119a17b867927dd56f8cca6911c0deb800", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -239,7 +239,7 @@ impl BlockedTask {\n         };\n         // Even if the task was unkillable before, we use 'Killable' because\n         // multiple pipes will have handles. It does not really mean killable.\n-        handles.consume_iter().transform(|x| Killable(x)).collect()\n+        handles.move_iter().transform(|x| Killable(x)).collect()\n     }\n \n     // This assertion has two flavours because the wake involves an atomic op."}, {"sha": "91297af5c935c81b22ef0cf162d31de4c9d73fcd", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -391,7 +391,7 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n     rtdebug!(\"waiting for threads\");\n \n     // Wait for schedulers\n-    for thread in threads.consume_iter() {\n+    for thread in threads.move_iter() {\n         thread.join();\n     }\n "}, {"sha": "bde703af31580eb382cf60a315a96cfbe989b9ce", "filename": "src/libstd/rt/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Frt%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Frt%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fselect.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -54,7 +54,7 @@ pub fn select<A: Select>(ports: &mut [A]) -> uint {\n         let task_handles = task.make_selectable(ports.len());\n \n         for (index, (port, task_handle)) in\n-                ports.mut_iter().zip(task_handles.consume_iter()).enumerate() {\n+                ports.mut_iter().zip(task_handles.move_iter()).enumerate() {\n             // If one of the ports has data by now, it will wake the handle.\n             if port.block_on(sched, task_handle) {\n                 ready_index = index;\n@@ -128,7 +128,7 @@ mod test {\n         let (ports, chans) = unzip(from_fn(num_ports, |_| oneshot::<()>()));\n         let mut dead_chans = ~[];\n         let mut ports = ports;\n-        for (i, chan) in chans.consume_iter().enumerate() {\n+        for (i, chan) in chans.move_iter().enumerate() {\n             if send_on_chans.contains(&i) {\n                 chan.send(());\n             } else {\n@@ -145,7 +145,7 @@ mod test {\n         let (ports, chans) = unzip(from_fn(num_ports, |_| stream::<()>()));\n         let mut dead_chans = ~[];\n         let mut ports = ports;\n-        for (i, chan) in chans.consume_iter().enumerate() {\n+        for (i, chan) in chans.move_iter().enumerate() {\n             if send_on_chans.contains(&i) {\n                 chan.send(());\n             } else {"}, {"sha": "ca94468e1adaedbb670c421840a46fd9c2d6d108", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -232,7 +232,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         }\n \n         // Wait for schedulers\n-        for thread in threads.consume_iter() {\n+        for thread in threads.move_iter() {\n             thread.join();\n         }\n     }"}, {"sha": "10bac9325ab43db57ac0c50389b9585900138a61", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -79,7 +79,7 @@ use cast;\n use cell::Cell;\n use container::MutableMap;\n use comm::{Chan, GenericChan, oneshot};\n-use hashmap::{HashSet, HashSetConsumeIterator};\n+use hashmap::{HashSet, HashSetMoveIterator};\n use local_data;\n use task::{Failure, SingleThreaded};\n use task::{Success, TaskOpts, TaskResult};\n@@ -141,8 +141,8 @@ impl TaskSet {\n         assert!(was_present);\n     }\n     #[inline]\n-    fn consume(self) -> HashSetConsumeIterator<TaskHandle> {\n-        (*self).consume()\n+    fn move_iter(self) -> HashSetMoveIterator<TaskHandle> {\n+        (*self).move_iter()\n     }\n }\n \n@@ -460,13 +460,13 @@ fn kill_taskgroup(state: TaskGroupInner, me: &TaskHandle, is_main: bool) {\n         if newstate.is_some() {\n             let TaskGroupData { members: members, descendants: descendants } =\n                 newstate.unwrap();\n-            for sibling in members.consume() {\n+            for sibling in members.move_iter() {\n                 // Skip self - killing ourself won't do much good.\n                 if &sibling != me {\n                     RuntimeGlue::kill_task(sibling);\n                 }\n             }\n-            for child in descendants.consume() {\n+            for child in descendants.move_iter() {\n                 assert!(&child != me);\n                 RuntimeGlue::kill_task(child);\n             }"}, {"sha": "7b1f0e8ced8f2cbe8b7522664336f94d14cc6a17", "filename": "src/libstd/unstable/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fextfmt.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -526,7 +526,7 @@ pub mod rt {\n               TyHexLower => uint_to_str_prec(u, 16, prec),\n \n               // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-              // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+              // to_ascii_move and to_str_move to not do a unnecessary copy.\n               TyHexUpper => {\n                 let s = uint_to_str_prec(u, 16, prec);\n                 s.to_ascii().to_upper().to_str_ascii()"}, {"sha": "60abe65f94dfeb9ae0b119923dd2150ad1801fe1", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -382,7 +382,7 @@ pub fn unzip_slice<T:Clone,U:Clone>(v: &[(T, U)]) -> (~[T], ~[U]) {\n pub fn unzip<T,U>(v: ~[(T, U)]) -> (~[T], ~[U]) {\n     let mut ts = ~[];\n     let mut us = ~[];\n-    for p in v.consume_iter() {\n+    for p in v.move_iter() {\n         let (t, u) = p;\n         ts.push(t);\n         us.push(u);\n@@ -1174,8 +1174,8 @@ impl<'self,T:Clone> ImmutableCopyableVector<T> for &'self [T] {\n \n #[allow(missing_doc)]\n pub trait OwnedVector<T> {\n-    fn consume_iter(self) -> ConsumeIterator<T>;\n-    fn consume_rev_iter(self) -> ConsumeRevIterator<T>;\n+    fn move_iter(self) -> MoveIterator<T>;\n+    fn move_rev_iter(self) -> MoveRevIterator<T>;\n \n     fn reserve(&mut self, n: uint);\n     fn reserve_at_least(&mut self, n: uint);\n@@ -1204,26 +1204,26 @@ impl<T> OwnedVector<T> for ~[T] {\n     /// value out of the vector (from start to end). The vector cannot\n     /// be used after calling this.\n     ///\n-    /// Note that this performs O(n) swaps, and so `consume_rev_iter`\n+    /// Note that this performs O(n) swaps, and so `move_rev_iter`\n     /// (which just calls `pop` repeatedly) is more efficient.\n     ///\n     /// # Examples\n     ///\n     /// ~~~ {.rust}\n     /// let v = ~[~\"a\", ~\"b\"];\n-    /// for s in v.consume_iter() {\n+    /// for s in v.move_iter() {\n     ///   // s has type ~str, not &~str\n     ///   println(s);\n     /// }\n     /// ~~~\n-    fn consume_iter(self) -> ConsumeIterator<T> {\n-        ConsumeIterator { v: self, idx: 0 }\n+    fn move_iter(self) -> MoveIterator<T> {\n+        MoveIterator { v: self, idx: 0 }\n     }\n     /// Creates a consuming iterator that moves out of the vector in\n-    /// reverse order. Also see `consume_iter`, however note that this\n+    /// reverse order. Also see `move_iter`, however note that this\n     /// is more efficient.\n-    fn consume_rev_iter(self) -> ConsumeRevIterator<T> {\n-        ConsumeRevIterator { v: self }\n+    fn move_rev_iter(self) -> MoveRevIterator<T> {\n+        MoveRevIterator { v: self }\n     }\n \n     /**\n@@ -1540,7 +1540,7 @@ impl<T> OwnedVector<T> for ~[T] {\n         let mut lefts  = ~[];\n         let mut rights = ~[];\n \n-        for elt in self.consume_iter() {\n+        for elt in self.move_iter() {\n             if f(&elt) {\n                 lefts.push(elt);\n             } else {\n@@ -2281,12 +2281,12 @@ pub type MutRevIterator<'self, T> = Invert<VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector.\n #[deriving(Clone)]\n-pub struct ConsumeIterator<T> {\n+pub struct MoveIterator<T> {\n     priv v: ~[T],\n     priv idx: uint,\n }\n \n-impl<T> Iterator<T> for ConsumeIterator<T> {\n+impl<T> Iterator<T> for MoveIterator<T> {\n     fn next(&mut self) -> Option<T> {\n         // this is peculiar, but is required for safety with respect\n         // to dtors. It traverses the first half of the vec, and\n@@ -2308,11 +2308,11 @@ impl<T> Iterator<T> for ConsumeIterator<T> {\n \n /// An iterator that moves out of a vector in reverse order.\n #[deriving(Clone)]\n-pub struct ConsumeRevIterator<T> {\n+pub struct MoveRevIterator<T> {\n     priv v: ~[T]\n }\n \n-impl<T> Iterator<T> for ConsumeRevIterator<T> {\n+impl<T> Iterator<T> for MoveRevIterator<T> {\n     fn next(&mut self) -> Option<T> {\n         self.v.pop_opt()\n     }\n@@ -3323,17 +3323,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_consume_iterator() {\n+    fn test_move_iterator() {\n         use iterator::*;\n         let xs = ~[1u,2,3,4,5];\n-        assert_eq!(xs.consume_iter().fold(0, |a: uint, b: uint| 10*a + b), 12345);\n+        assert_eq!(xs.move_iter().fold(0, |a: uint, b: uint| 10*a + b), 12345);\n     }\n \n     #[test]\n-    fn test_consume_rev_iterator() {\n+    fn test_move_rev_iterator() {\n         use iterator::*;\n         let xs = ~[1u,2,3,4,5];\n-        assert_eq!(xs.consume_rev_iter().fold(0, |a: uint, b: uint| 10*a + b), 54321);\n+        assert_eq!(xs.move_rev_iter().fold(0, |a: uint, b: uint| 10*a + b), 54321);\n     }\n \n     #[test]\n@@ -3608,7 +3608,7 @@ mod tests {\n         }\n         assert_eq!(cnt, 8);\n \n-        for f in v.consume_iter() {\n+        for f in v.move_iter() {\n             assert!(f == Foo);\n             cnt += 1;\n         }"}, {"sha": "0005180ef50ff473aa2b6679cc9185ff5b322f3b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -247,7 +247,7 @@ pub fn unguarded_pat(a: &arm) -> Option<~[@pat]> {\n }\n \n pub fn public_methods(ms: ~[@method]) -> ~[@method] {\n-    do ms.consume_iter().filter |m| {\n+    do ms.move_iter().filter |m| {\n         match m.vis {\n             public => true,\n             _   => false"}, {"sha": "d5150cd2ace93f8483943ce93cc32203a6465e7f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -209,7 +209,7 @@ pub fn sort_meta_items(items: &[@MetaItem]) -> ~[@MetaItem] {\n     }\n \n     // There doesn't seem to be a more optimal way to do this\n-    do v.consume_iter().transform |(_, m)| {\n+    do v.move_iter().transform |(_, m)| {\n         match m.node {\n             MetaList(n, ref mis) => {\n                 @spanned {"}, {"sha": "1902e510935a71efaacaf3f8d6c1b6d9e4a983eb", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -702,7 +702,7 @@ impl AstBuilder for @ExtCtxt {\n     }\n \n     fn variant(&self, span: span, name: ident, tys: ~[ast::Ty]) -> ast::variant {\n-        let args = tys.consume_iter().transform(|ty| {\n+        let args = tys.move_iter().transform(|ty| {\n             ast::variant_arg { ty: ty, id: self.next_id() }\n         }).collect();\n "}, {"sha": "10f2055b5fbbae4328b239f346392439dad2353f", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -269,7 +269,7 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n        corresponding function in std::unstable::extfmt. Each function takes a\n        buffer to insert data into along with the data being formatted. */\n     let npieces = pieces.len();\n-    for (i, pc) in pieces.consume_iter().enumerate() {\n+    for (i, pc) in pieces.move_iter().enumerate() {\n         match pc {\n             /* Raw strings get appended via str::push_str */\n             PieceString(s) => {"}, {"sha": "de700466d9e6d2e69fb0787c58694843d0aa4715", "filename": "src/libsyntax/ext/ifmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fifmt.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -575,8 +575,8 @@ impl Context {\n                 Some(self.format_arg(e.span, Right(name), lname));\n         }\n \n-        let args = names.consume_iter().transform(|a| a.unwrap());\n-        let mut args = locals.consume_iter().chain_(args);\n+        let args = names.move_iter().transform(|a| a.unwrap());\n+        let mut args = locals.move_iter().chain_(args);\n \n         // Next, build up the actual call to the sprintf function.\n         let result = self.ecx.expr_call_global(self.fmtsp, ~["}, {"sha": "c1c63466221ea4cd72eb1232c59aca899431c5dd", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -176,7 +176,7 @@ pub fn fold_ty_param(tp: TyParam,\n pub fn fold_ty_params(tps: &OptVec<TyParam>,\n                       fld: @ast_fold) -> OptVec<TyParam> {\n     let tps = /*bad*/ (*tps).clone();\n-    tps.map_consume(|tp| fold_ty_param(tp, fld))\n+    tps.map_move(|tp| fold_ty_param(tp, fld))\n }\n \n pub fn fold_lifetime(l: &Lifetime,"}, {"sha": "3758a8db62a9e7d5a6521e51b494cd1e4a05a80b", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -57,10 +57,10 @@ impl<T> OptVec<T> {\n         }\n     }\n \n-    fn map_consume<U>(self, op: &fn(T) -> U) -> OptVec<U> {\n+    fn map_move<U>(self, op: &fn(T) -> U) -> OptVec<U> {\n         match self {\n             Empty => Empty,\n-            Vec(v) => Vec(v.consume_iter().transform(op).collect())\n+            Vec(v) => Vec(v.move_iter().transform(op).collect())\n         }\n     }\n "}, {"sha": "d1916088a412a9a5f047a02e33d0b4d82033e1e9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -4310,7 +4310,7 @@ impl Parser {\n                     seq_sep_trailing_disallowed(token::COMMA),\n                     |p| p.parse_ty(false)\n                 );\n-                for ty in arg_tys.consume_iter() {\n+                for ty in arg_tys.move_iter() {\n                     args.push(ast::variant_arg {\n                         ty: ty,\n                         id: self.get_id(),"}, {"sha": "02aa5eae50691dd8dc0e588cc920c0f6082ddfba", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -96,9 +96,9 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n         }\n     }\n \n-    do graph.consume_iter().transform |v| {\n+    do graph.move_iter().transform |v| {\n         let mut vec = ~[];\n-        for i in v.consume() {\n+        for i in v.move_iter() {\n             vec.push(i);\n         }\n         vec\n@@ -119,7 +119,7 @@ fn gen_search_keys(graph: &[~[node_id]], n: uint) -> ~[node_id] {\n         }\n     }\n     let mut vec = ~[];\n-    for i in keys.consume() {\n+    for i in keys.move_iter() {\n         vec.push(i);\n     }\n     return vec;"}, {"sha": "49120eb789e1c6f269a45faf85b6fffbfb5702ef", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -75,7 +75,7 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n        unsafe {\n            let b = str::raw::from_bytes(k);\n            // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-           // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+           // to_ascii_move and to_str_move to not do a unnecessary copy.\n            buffer.push_str(fmt!(\"%s %0.3f\\n\", b.to_ascii().to_upper().to_str_ascii(), v));\n        }\n    }\n@@ -86,7 +86,7 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n // given a map, search for the frequency of a pattern\n fn find(mm: &HashMap<~[u8], uint>, key: ~str) -> uint {\n    // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-   // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+   // to_ascii_move and to_str_move to not do a unnecessary copy.\n    let key = key.to_ascii().to_lower().to_str_ascii();\n    match mm.find_equiv(&key.as_bytes()) {\n       option::None      => { return 0u; }"}, {"sha": "e0292aed168b50d482a003f4e7aa285a99e64dce", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad7857c7b2c42da6081e593ab92d03d88643c81/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=fad7857c7b2c42da6081e593ab92d03d88643c81", "patch": "@@ -28,20 +28,20 @@ fn calc(children: uint, parent_wait_chan: &Chan<Chan<Chan<int>>>) {\n     };\n \n     let child_start_chans: ~[Chan<Chan<int>>] =\n-        wait_ports.consume_iter().transform(|port| port.recv()).collect();\n+        wait_ports.move_iter().transform(|port| port.recv()).collect();\n \n     let (start_port, start_chan) = stream::<Chan<int>>();\n     parent_wait_chan.send(start_chan);\n     let parent_result_chan: Chan<int> = start_port.recv();\n \n     let child_sum_ports: ~[Port<int>] =\n-        do child_start_chans.consume_iter().transform |child_start_chan| {\n+        do child_start_chans.move_iter().transform |child_start_chan| {\n             let (child_sum_port, child_sum_chan) = stream::<int>();\n             child_start_chan.send(child_sum_chan);\n             child_sum_port\n     }.collect();\n \n-    let sum = child_sum_ports.consume_iter().fold(0, |sum, sum_port| sum + sum_port.recv() );\n+    let sum = child_sum_ports.move_iter().fold(0, |sum, sum_port| sum + sum_port.recv() );\n \n     parent_result_chan.send(sum + 1);\n }"}]}