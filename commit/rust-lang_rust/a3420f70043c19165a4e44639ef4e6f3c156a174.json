{"sha": "a3420f70043c19165a4e44639ef4e6f3c156a174", "node_id": "C_kwDOAAsO6NoAKGEzNDIwZjcwMDQzYzE5MTY1YTRlNDQ2MzllZjRlNmYzYzE1NmExNzQ", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-17T05:03:08Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:19Z"}, "message": "Tidy comments + tests; revert 'size-is-zero' detection", "tree": {"sha": "6c0207330fd89e69df14c2c27e9ade0776dc72d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c0207330fd89e69df14c2c27e9ade0776dc72d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3420f70043c19165a4e44639ef4e6f3c156a174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3420f70043c19165a4e44639ef4e6f3c156a174", "html_url": "https://github.com/rust-lang/rust/commit/a3420f70043c19165a4e44639ef4e6f3c156a174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3420f70043c19165a4e44639ef4e6f3c156a174/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b3f55ee61e781ef3360ddfaa436746bb7e40df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3f55ee61e781ef3360ddfaa436746bb7e40df5", "html_url": "https://github.com/rust-lang/rust/commit/9b3f55ee61e781ef3360ddfaa436746bb7e40df5"}], "stats": {"total": 162, "additions": 72, "deletions": 90}, "files": [{"sha": "bc055307d5efe4f87a1b1f240f121dc03e1cae5d", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a3420f70043c19165a4e44639ef4e6f3c156a174/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3420f70043c19165a4e44639ef4e6f3c156a174/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=a3420f70043c19165a4e44639ef4e6f3c156a174", "patch": "@@ -36,16 +36,15 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C]);\n \n-// TESTNAME=trailing_zero_sized_array_without_repr_c cargo uitest\n-\n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if is_struct_with_trailing_zero_sized_array(cx, item) {\n+            // NOTE: This is to include attributes on the definition when we print the lint. If the convention\n+            // is to not do that with struct definitions (I'm not sure), then this isn't necessary.\n             let attrs = cx.tcx.get_attrs(item.def_id.to_def_id());\n-            let first_attr = attrs.first(); // Actually, I've no idea if this is guaranteed to be the first one in the source code.\n-\n+            let first_attr = attrs.iter().min_by_key(|attr| attr.span.lo());\n             let lint_span = if let Some(first_attr) = first_attr {\n-                first_attr.span.until(item.span)\n+                first_attr.span.to(item.span)\n             } else {\n                 item.span\n             };\n@@ -66,18 +65,29 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n \n fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n     if_chain! {\n-        // Check if last field is an array\n+        // First check if last field is an array\n         if let ItemKind::Struct(data, _) = &item.kind;\n         if let VariantData::Struct(field_defs, _) = data;\n         if let Some(last_field) = field_defs.last();\n         if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind;\n \n-        // Check if that that array zero-sized.\n-        let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n-        let length = Const::from_anon_const(cx.tcx, length_ldid);\n-        if let Some(Constant::Int(length)) = miri_to_const(length);\n-        if length == 0;\n+        // Then check if that that array zero-sized\n \n+        // This is pretty much copied from `enum_clike.rs` and I don't fully understand it, so let me know\n+        // if there's a better way. I tried `Const::from_anon_const` but it didn't fold in the values\n+        // on the `ZeroSizedWithConst` and `ZeroSizedWithConstFunction` tests.\n+\n+        // This line in particular seems convoluted.\n+        let length_did = cx.tcx.hir().body_owner_def_id(length.body).to_def_id();\n+        let length_ty = cx.tcx.type_of(length_did);\n+        let length = cx\n+            .tcx\n+            .const_eval_poly(length_did)\n+            .ok()\n+            .map(|val| Const::from_value(cx.tcx, val, length_ty))\n+            .and_then(miri_to_const);\n+        if let Some(Constant::Int(length)) = length;\n+        if length == 0;\n         then {\n             true\n         } else {\n@@ -88,7 +98,8 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n \n fn has_repr_attr(cx: &LateContext<'tcx>, attrs: &[Attribute]) -> bool {\n     // NOTE: there's at least four other ways to do this but I liked this one the best. (All five agreed\n-    // on all testcases.) Happy to use another; they're in the commit history.\n+    // on all testcases.) Happy to use another; they're in the commit history if you want to look (or I\n+    // can go find them).\n     attrs\n         .iter()\n         .any(|attr| !rustc_attr::find_repr_attrs(cx.tcx.sess(), attr).is_empty())"}, {"sha": "77b2c29b275b95fc53c9ce950305d60b0b362f77", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3420f70043c19165a4e44639ef4e6f3c156a174/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3420f70043c19165a4e44639ef4e6f3c156a174/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=a3420f70043c19165a4e44639ef4e6f3c156a174", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::trailing_zero_sized_array_without_repr_c)]\n-#![feature(const_generics_defaults)] // see below\n \n // Do lint:\n \n@@ -17,14 +16,16 @@ struct GenericArrayType<T> {\n     last: [T; 0],\n }\n \n-#[derive(Debug)]\n-struct OnlyAnotherAttributeDerive {\n+#[must_use]\n+struct OnlyAnotherAttributeMustUse {\n     field: i32,\n     last: [usize; 0],\n }\n \n-#[must_use]\n-struct OnlyAnotherAttributeMustUse {\n+// NOTE: Unfortunately the attribute isn't included in the lint output. I'm not sure how to make it\n+// show up.\n+#[derive(Debug)]\n+struct OnlyAnotherAttributeDerive {\n     field: i32,\n     last: [usize; 0],\n }\n@@ -82,6 +83,12 @@ struct NonZeroSizedArray {\n     last: [usize; 1],\n }\n \n+struct NotLastField {\n+    f1: u32,\n+    zero_sized: [usize; 0],\n+    last: i32,\n+}\n+\n const ONE: usize = 1;\n struct NonZeroSizedWithConst {\n     field: i32,\n@@ -133,21 +140,4 @@ enum DontLintAnonymousStructsFromDesuraging {\n     C { x: u32, y: [u64; 0] },\n }\n \n-// NOTE: including these (along with the required feature) triggers an ICE. Not sure why. Should\n-// make sure the const generics people are aware of that if they weren't already.\n-\n-// #[repr(C)]\n-// struct ConstParamOk<const N: usize = 0> {\n-//     field: i32,\n-//     last: [usize; N]\n-// }\n-\n-// struct ConstParamLint<const N: usize = 0> {\n-//     field: i32,\n-//     last: [usize; N]\n-// }\n-\n-fn main() {\n-    let _ = OnlyAnotherAttributeMustUse { field: 0, last: [] };\n-    let _ = OtherAttributesMustUse { field: 0, last: [] };\n-}\n+fn main() {}"}, {"sha": "ee8182cdc3807f29520880aea1e54d89e21129d5", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.stderr", "status": "modified", "additions": 36, "deletions": 55, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/a3420f70043c19165a4e44639ef4e6f3c156a174/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3420f70043c19165a4e44639ef4e6f3c156a174/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.stderr?ref=a3420f70043c19165a4e44639ef4e6f3c156a174", "patch": "@@ -1,5 +1,5 @@\n error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n-  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:4:1\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:5:1\n    |\n LL | / struct RarelyUseful {\n LL | |     field: i32,\n@@ -8,87 +8,76 @@ LL | | }\n    | |_^\n    |\n    = note: `-D clippy::trailing-zero-sized-array-without-repr-c` implied by `-D warnings`\n-help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n-   |\n-LL + #[repr(C)]\n-LL + struct RarelyUseful {\n-LL +     field: i32,\n-LL +     last: [usize; 0],\n-LL + }\n-   |\n+   = help: consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\n \n error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n-  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:15:1\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:10:1\n    |\n-LL | / struct OnlyFieldIsZeroSizeArray {\n+LL | / struct OnlyField {\n LL | |     first_and_last: [usize; 0],\n LL | | }\n    | |_^\n    |\n-help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n-   |\n-LL + #[repr(C)]\n-LL + struct OnlyFieldIsZeroSizeArray {\n-LL +     first_and_last: [usize; 0],\n-LL + }\n-   |\n+   = help: consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\n \n error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n-  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:19:1\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:14:1\n    |\n LL | / struct GenericArrayType<T> {\n LL | |     field: i32,\n LL | |     last: [T; 0],\n LL | | }\n    | |_^\n    |\n-help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n+   = help: consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\n+\n+error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:19:1\n    |\n-LL + #[repr(C)]\n-LL + struct GenericArrayType<T> {\n-LL +     field: i32,\n-LL +     last: [T; 0],\n-LL + }\n+LL | / #[must_use]\n+LL | | struct OnlyAnotherAttributeMustUse {\n+LL | |     field: i32,\n+LL | |     last: [usize; 0],\n+LL | | }\n+   | |_^\n    |\n+   = help: consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\n \n error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n-  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:30:1\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:28:1\n    |\n-LL | / struct ZeroSizedFromExternalConst {\n+LL | / struct OnlyAnotherAttributeDerive {\n LL | |     field: i32,\n-LL | |     last: [usize; ZERO],\n+LL | |     last: [usize; 0],\n LL | | }\n    | |_^\n    |\n-help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n+   = help: consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\n+\n+error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:34:1\n    |\n-LL + #[repr(C)]\n-LL + struct ZeroSizedFromExternalConst {\n-LL +     field: i32,\n-LL +     last: [usize; ZERO],\n-LL + }\n+LL | / struct ZeroSizedWithConst {\n+LL | |     field: i32,\n+LL | |     last: [usize; ZERO],\n+LL | | }\n+   | |_^\n    |\n+   = help: consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\n \n error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n-  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:45:1\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:43:1\n    |\n-LL | / struct UsingFunction {\n+LL | / struct ZeroSizedWithConstFunction {\n LL | |     field: i32,\n LL | |     last: [usize; compute_zero()],\n LL | | }\n    | |_^\n    |\n-help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n-   |\n-LL + #[repr(C)]\n-LL + struct UsingFunction {\n-LL +     field: i32,\n-LL +     last: [usize; compute_zero()],\n-LL + }\n-   |\n+   = help: consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\n \n error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n-  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:94:1\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:48:1\n    |\n LL | / struct LotsOfFields {\n LL | |     f1: u32,\n@@ -99,15 +88,7 @@ LL | |     last: [usize; 0],\n LL | | }\n    | |_^\n    |\n-help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n-   |\n-LL + #[repr(C)]\n-LL + struct LotsOfFields {\n-LL +     f1: u32,\n-LL +     f2: u32,\n-LL +     f3: u32,\n-LL +     f4: u32,\n- ...\n+   = help: consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n "}]}