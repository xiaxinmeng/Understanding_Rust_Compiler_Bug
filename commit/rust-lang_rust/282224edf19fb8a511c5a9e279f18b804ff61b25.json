{"sha": "282224edf19fb8a511c5a9e279f18b804ff61b25", "node_id": "C_kwDOAAsO6NoAKDI4MjIyNGVkZjE5ZmI4YTUxMWM1YTllMjc5ZjE4YjgwNGZmNjFiMjU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-01-18T21:17:34Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-01-18T21:17:34Z"}, "message": "Add Option::is_some_with.", "tree": {"sha": "47dd234b33ecb2c83c3ddd143d3399404782a6e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47dd234b33ecb2c83c3ddd143d3399404782a6e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/282224edf19fb8a511c5a9e279f18b804ff61b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/282224edf19fb8a511c5a9e279f18b804ff61b25", "html_url": "https://github.com/rust-lang/rust/commit/282224edf19fb8a511c5a9e279f18b804ff61b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/282224edf19fb8a511c5a9e279f18b804ff61b25/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "html_url": "https://github.com/rust-lang/rust/commit/9ad5d82f822b3cb67637f11be2e65c5662b66ec0"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "d9ee289f216b0e978d4c01aae1c936ba210ff79b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/282224edf19fb8a511c5a9e279f18b804ff61b25/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282224edf19fb8a511c5a9e279f18b804ff61b25/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=282224edf19fb8a511c5a9e279f18b804ff61b25", "patch": "@@ -551,6 +551,27 @@ impl<T> Option<T> {\n         matches!(*self, Some(_))\n     }\n \n+    /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x: Option<u32> = Some(2);\n+    /// assert_eq!(x.is_some_with(|x| x > 1), true);\n+    ///\n+    /// let x: Option<u32> = Some(0);\n+    /// assert_eq!(x.is_some_with(|x| x > 1), false);\n+    ///\n+    /// let x: Option<u32> = None;\n+    /// assert_eq!(x.is_some_with(|x| x > 1), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"is_some_with\", issue = \"none\")]\n+    pub fn is_some_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+        matches!(self, Some(x) if f(x))\n+    }\n+\n     /// Returns `true` if the option is a [`None`] value.\n     ///\n     /// # Examples"}]}