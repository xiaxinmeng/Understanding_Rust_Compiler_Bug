{"sha": "698bbe52533e8ef07793b6a696cc89015a9dc7f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGJiZTUyNTMzZThlZjA3NzkzYjZhNjk2Y2M4OTAxNWE5ZGM3ZjY=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2019-03-18T12:57:51Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2019-03-18T12:57:51Z"}, "message": "Replaced self-reflective explicit types with clearer `Self` or `Self::\u2026` in stdlib docs", "tree": {"sha": "d0108840bb2bed75c6384ae3b640224680f22afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0108840bb2bed75c6384ae3b640224680f22afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698bbe52533e8ef07793b6a696cc89015a9dc7f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698bbe52533e8ef07793b6a696cc89015a9dc7f6", "html_url": "https://github.com/rust-lang/rust/commit/698bbe52533e8ef07793b6a696cc89015a9dc7f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698bbe52533e8ef07793b6a696cc89015a9dc7f6/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd45b19bd2d8b4f9a3940a409ea43285019f3280", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd45b19bd2d8b4f9a3940a409ea43285019f3280", "html_url": "https://github.com/rust-lang/rust/commit/cd45b19bd2d8b4f9a3940a409ea43285019f3280"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "ea52b0ea7212054dea929b0a3eb85d7e0fe7c981", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=698bbe52533e8ef07793b6a696cc89015a9dc7f6", "patch": "@@ -72,7 +72,7 @@ use self::Ordering::*;\n /// }\n ///\n /// impl PartialEq for Book {\n-///     fn eq(&self, other: &Book) -> bool {\n+///     fn eq(&self, other: &Self) -> bool {\n ///         self.isbn == other.isbn\n ///     }\n /// }\n@@ -233,7 +233,7 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n ///     format: BookFormat,\n /// }\n /// impl PartialEq for Book {\n-///     fn eq(&self, other: &Book) -> bool {\n+///     fn eq(&self, other: &Self) -> bool {\n ///         self.isbn == other.isbn\n ///     }\n /// }\n@@ -493,19 +493,19 @@ impl<T: Ord> Ord for Reverse<T> {\n /// }\n ///\n /// impl Ord for Person {\n-///     fn cmp(&self, other: &Person) -> Ordering {\n+///     fn cmp(&self, other: &Self) -> Ordering {\n ///         self.height.cmp(&other.height)\n ///     }\n /// }\n ///\n /// impl PartialOrd for Person {\n-///     fn partial_cmp(&self, other: &Person) -> Option<Ordering> {\n+///     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n ///         Some(self.cmp(other))\n ///     }\n /// }\n ///\n /// impl PartialEq for Person {\n-///     fn eq(&self, other: &Person) -> bool {\n+///     fn eq(&self, other: &Self) -> bool {\n ///         self.height == other.height\n ///     }\n /// }\n@@ -691,13 +691,13 @@ impl PartialOrd for Ordering {\n /// }\n ///\n /// impl PartialOrd for Person {\n-///     fn partial_cmp(&self, other: &Person) -> Option<Ordering> {\n+///     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n ///         self.height.partial_cmp(&other.height)\n ///     }\n /// }\n ///\n /// impl PartialEq for Person {\n-///     fn eq(&self, other: &Person) -> bool {\n+///     fn eq(&self, other: &Self) -> bool {\n ///         self.height == other.height\n ///     }\n /// }"}, {"sha": "e6a616b680228c821f6c4f04aa6bd99022de7cff", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=698bbe52533e8ef07793b6a696cc89015a9dc7f6", "patch": "@@ -101,7 +101,7 @@\n //!     type Item = usize;\n //!\n //!     // next() is the only required method\n-//!     fn next(&mut self) -> Option<usize> {\n+//!     fn next(&mut self) -> Option<Self::Item> {\n //!         // Increment our count. This is why we started at zero.\n //!         self.count += 1;\n //!"}, {"sha": "cd61ab5c552b677948aacbb67c131e1862b3b1d4", "filename": "src/libcore/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs?ref=698bbe52533e8ef07793b6a696cc89015a9dc7f6", "patch": "@@ -167,7 +167,7 @@ pub trait FromIterator<A>: Sized {\n /// // and we'll implement IntoIterator\n /// impl IntoIterator for MyCollection {\n ///     type Item = i32;\n-///     type IntoIter = ::std::vec::IntoIter<i32>;\n+///     type IntoIter = ::std::vec::IntoIter<Self::Item>;\n ///\n ///     fn into_iter(self) -> Self::IntoIter {\n ///         self.0.into_iter()"}, {"sha": "8fc4ac93daa68115d0834b97d9a8ddcbc6dccfb6", "filename": "src/libcore/iter/traits/exact_size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fexact_size.rs?ref=698bbe52533e8ef07793b6a696cc89015a9dc7f6", "patch": "@@ -45,7 +45,7 @@\n /// # }\n /// # impl Iterator for Counter {\n /// #     type Item = usize;\n-/// #     fn next(&mut self) -> Option<usize> {\n+/// #     fn next(&mut self) -> Option<Self::Item> {\n /// #         self.count += 1;\n /// #         if self.count < 6 {\n /// #             Some(self.count)"}, {"sha": "c5e908d7bb86bdb29940c630158f28c4b27c4c60", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=698bbe52533e8ef07793b6a696cc89015a9dc7f6", "patch": "@@ -20,10 +20,10 @@\n /// }\n ///\n /// impl Add for Point {\n-///     type Output = Point;\n+///     type Output = Self;\n ///\n-///     fn add(self, other: Point) -> Point {\n-///         Point {\n+///     fn add(self, other: Self) -> Self {\n+///         Self {\n ///             x: self.x + other.x,\n ///             y: self.y + other.y,\n ///         }\n@@ -50,10 +50,10 @@\n ///\n /// // Notice that the implementation uses the associated type `Output`.\n /// impl<T: Add<Output = T>> Add for Point<T> {\n-///     type Output = Point<T>;\n+///     type Output = Self;\n ///\n-///     fn add(self, other: Point<T>) -> Point<T> {\n-///         Point {\n+///     fn add(self, other: Self) -> Self::Output {\n+///         Self {\n ///             x: self.x + other.x,\n ///             y: self.y + other.y,\n ///         }\n@@ -158,9 +158,9 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///\n /// // Notice that the implementation uses the associated type `Output`.\n /// impl<T: Sub<Output = T>> Sub for Point<T> {\n-///     type Output = Point<T>;\n+///     type Output = Self;\n ///\n-///     fn sub(self, other: Point<T>) -> Point<T> {\n+///     fn sub(self, other: Self) -> Self::Output {\n ///         Point {\n ///             x: self.x - other.x,\n ///             y: self.y - other.y,\n@@ -280,9 +280,9 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// struct Vector { value: Vec<usize> }\n ///\n /// impl Mul<Scalar> for Vector {\n-///     type Output = Vector;\n+///     type Output = Self;\n ///\n-///     fn mul(self, rhs: Scalar) -> Vector {\n+///     fn mul(self, rhs: Scalar) -> Self::Output {\n ///         Vector { value: self.value.iter().map(|v| v * rhs.value).collect() }\n ///     }\n /// }\n@@ -364,7 +364,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     // The division of rational numbers is a closed operation.\n ///     type Output = Self;\n ///\n-///     fn div(self, rhs: Self) -> Self {\n+///     fn div(self, rhs: Self) -> Self::Output {\n ///         if rhs.nominator == 0 {\n ///             panic!(\"Cannot divide by zero-valued `Rational`!\");\n ///         }\n@@ -404,9 +404,9 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// struct Vector { value: Vec<f32> }\n ///\n /// impl Div<Scalar> for Vector {\n-///     type Output = Vector;\n+///     type Output = Self;\n ///\n-///     fn div(self, rhs: Scalar) -> Vector {\n+///     fn div(self, rhs: Scalar) -> Self::Output {\n ///         Vector { value: self.value.iter().map(|v| v / rhs.value).collect() }\n ///     }\n /// }\n@@ -485,9 +485,9 @@ div_impl_float! { f32 f64 }\n /// }\n ///\n /// impl<'a, T> Rem<usize> for SplitSlice<'a, T> {\n-///     type Output = SplitSlice<'a, T>;\n+///     type Output = Self;\n ///\n-///     fn rem(self, modulus: usize) -> Self {\n+///     fn rem(self, modulus: usize) -> Self::Output {\n ///         let len = self.slice.len();\n ///         let rem = len % modulus;\n ///         let start = len - rem;\n@@ -571,7 +571,7 @@ rem_impl_float! { f32 f64 }\n /// impl Neg for Sign {\n ///     type Output = Sign;\n ///\n-///     fn neg(self) -> Sign {\n+///     fn neg(self) -> Self::Output {\n ///         match self {\n ///             Sign::Negative => Sign::Positive,\n ///             Sign::Zero => Sign::Zero,\n@@ -650,8 +650,8 @@ neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n /// }\n ///\n /// impl AddAssign for Point {\n-///     fn add_assign(&mut self, other: Point) {\n-///         *self = Point {\n+///     fn add_assign(&mut self, other: Self) {\n+///         *self = Self {\n ///             x: self.x + other.x,\n ///             y: self.y + other.y,\n ///         };\n@@ -706,8 +706,8 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// }\n ///\n /// impl SubAssign for Point {\n-///     fn sub_assign(&mut self, other: Point) {\n-///         *self = Point {\n+///     fn sub_assign(&mut self, other: Self) {\n+///         *self = Self {\n ///             x: self.x - other.x,\n ///             y: self.y - other.y,\n ///         };"}, {"sha": "c3615bdaafca97d8d10096109bc0e8c76acd9153", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=698bbe52533e8ef07793b6a696cc89015a9dc7f6", "patch": "@@ -17,7 +17,7 @@\n /// impl Not for Answer {\n ///     type Output = Answer;\n ///\n-///     fn not(self) -> Answer {\n+///     fn not(self) -> Self::Output {\n ///         match self {\n ///             Answer::Yes => Answer::No,\n ///             Answer::No => Answer::Yes\n@@ -75,7 +75,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     type Output = Self;\n ///\n ///     // rhs is the \"right-hand side\" of the expression `a & b`\n-///     fn bitand(self, rhs: Self) -> Self {\n+///     fn bitand(self, rhs: Self) -> Self::Output {\n ///         Scalar(self.0 & rhs.0)\n ///     }\n /// }\n@@ -97,7 +97,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// impl BitAnd for BooleanVector {\n ///     type Output = Self;\n ///\n-///     fn bitand(self, BooleanVector(rhs): Self) -> Self {\n+///     fn bitand(self, BooleanVector(rhs): Self) -> Self::Output {\n ///         let BooleanVector(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n ///         BooleanVector(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x && *y).collect())\n@@ -181,7 +181,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// impl BitOr for BooleanVector {\n ///     type Output = Self;\n ///\n-///     fn bitor(self, BooleanVector(rhs): Self) -> Self {\n+///     fn bitor(self, BooleanVector(rhs): Self) -> Self::Output {\n ///         let BooleanVector(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n ///         BooleanVector(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x || *y).collect())\n@@ -243,7 +243,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     type Output = Self;\n ///\n ///     // rhs is the \"right-hand side\" of the expression `a ^ b`\n-///     fn bitxor(self, rhs: Self) -> Self {\n+///     fn bitxor(self, rhs: Self) -> Self::Output {\n ///         Scalar(self.0 ^ rhs.0)\n ///     }\n /// }\n@@ -265,7 +265,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// impl BitXor for BooleanVector {\n ///     type Output = Self;\n ///\n-///     fn bitxor(self, BooleanVector(rhs): Self) -> Self {\n+///     fn bitxor(self, BooleanVector(rhs): Self) -> Self::Output {\n ///         let BooleanVector(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n ///         BooleanVector(lhs.iter()\n@@ -355,7 +355,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// impl<T: Clone> Shl<usize> for SpinVector<T> {\n ///     type Output = Self;\n ///\n-///     fn shl(self, rhs: usize) -> SpinVector<T> {\n+///     fn shl(self, rhs: usize) -> Self::Output {\n ///         // Rotate the vector by `rhs` places.\n ///         let (a, b) = self.vec.split_at(rhs);\n ///         let mut spun_vector: Vec<T> = vec![];\n@@ -464,7 +464,7 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n /// impl<T: Clone> Shr<usize> for SpinVector<T> {\n ///     type Output = Self;\n ///\n-///     fn shr(self, rhs: usize) -> SpinVector<T> {\n+///     fn shr(self, rhs: usize) -> Self::Output {\n ///         // Rotate the vector by `rhs` places.\n ///         let (a, b) = self.vec.split_at(self.vec.len() - rhs);\n ///         let mut spun_vector: Vec<T> = vec![];"}, {"sha": "e44a6c4d2a0e92a13d35ccc978d56ba5030df1b8", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=698bbe52533e8ef07793b6a696cc89015a9dc7f6", "patch": "@@ -49,7 +49,7 @@\n /// impl<T> Deref for DerefExample<T> {\n ///     type Target = T;\n ///\n-///     fn deref(&self) -> &T {\n+///     fn deref(&self) -> &Self::Target {\n ///         &self.value\n ///     }\n /// }\n@@ -139,13 +139,13 @@ impl<T: ?Sized> Deref for &mut T {\n /// impl<T> Deref for DerefMutExample<T> {\n ///     type Target = T;\n ///\n-///     fn deref(&self) -> &T {\n+///     fn deref(&self) -> &Self::Target {\n ///         &self.value\n ///     }\n /// }\n ///\n /// impl<T> DerefMut for DerefMutExample<T> {\n-///     fn deref_mut(&mut self) -> &mut T {\n+///     fn deref_mut(&mut self) -> &mut Self::Target {\n ///         &mut self.value\n ///     }\n /// }"}, {"sha": "3158f58e958068c75d8b108d6846a1a229f80c06", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698bbe52533e8ef07793b6a696cc89015a9dc7f6/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=698bbe52533e8ef07793b6a696cc89015a9dc7f6", "patch": "@@ -33,7 +33,7 @@\n /// impl Index<Nucleotide> for NucleotideCount {\n ///     type Output = usize;\n ///\n-///     fn index(&self, nucleotide: Nucleotide) -> &usize {\n+///     fn index(&self, nucleotide: Nucleotide) -> &Self::Output {\n ///         match nucleotide {\n ///             Nucleotide::A => &self.a,\n ///             Nucleotide::C => &self.c,\n@@ -105,7 +105,7 @@ pub trait Index<Idx: ?Sized> {\n /// impl Index<Side> for Balance {\n ///     type Output = Weight;\n ///\n-///     fn index<'a>(&'a self, index: Side) -> &'a Weight {\n+///     fn index<'a>(&'a self, index: Side) -> &'a Self::Output {\n ///         println!(\"Accessing {:?}-side of balance immutably\", index);\n ///         match index {\n ///             Side::Left => &self.left,\n@@ -115,7 +115,7 @@ pub trait Index<Idx: ?Sized> {\n /// }\n ///\n /// impl IndexMut<Side> for Balance {\n-///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Weight {\n+///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Self::Output {\n ///         println!(\"Accessing {:?}-side of balance mutably\", index);\n ///         match index {\n ///             Side::Left => &mut self.left,"}]}