{"sha": "85da15c016f74d7382f243cd92bb12515a8a518f", "node_id": "C_kwDOAAsO6NoAKDg1ZGExNWMwMTZmNzRkNzM4MmYyNDNjZDkyYmIxMjUxNWE4YTUxOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-22T03:58:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-22T03:58:52Z"}, "message": "Auto merge of #107133 - pnkfelix:revert-pr-84022-for-issue-106337, r=Mark-Simulacrum\n\nRevert \"Make PROC_MACRO_DERIVE_RESOLUTION_FALLBACK a hard error\"\n\nThis reverts commit 7d82cadd97acc66993b69304c5a1a04ef7d1fa36 aka PR #84022\n\nI am doing this to buy us some time with respect to issue #106337 w.r.t. the 1.67 release.", "tree": {"sha": "61c4ddbfcbd33a74cd90fc470d98576457a50f0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c4ddbfcbd33a74cd90fc470d98576457a50f0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85da15c016f74d7382f243cd92bb12515a8a518f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85da15c016f74d7382f243cd92bb12515a8a518f", "html_url": "https://github.com/rust-lang/rust/commit/85da15c016f74d7382f243cd92bb12515a8a518f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85da15c016f74d7382f243cd92bb12515a8a518f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c394e1b9abf83f26d68f441e9f0ef0062bde703", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c394e1b9abf83f26d68f441e9f0ef0062bde703", "html_url": "https://github.com/rust-lang/rust/commit/1c394e1b9abf83f26d68f441e9f0ef0062bde703"}, {"sha": "5fa1347331aff7d5d9248ba43bdd7c75262b101c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa1347331aff7d5d9248ba43bdd7c75262b101c", "html_url": "https://github.com/rust-lang/rust/commit/5fa1347331aff7d5d9248ba43bdd7c75262b101c"}], "stats": {"total": 287, "additions": 238, "deletions": 49}, "files": [{"sha": "e919baafe8552a1ea0e6b6c14e79166cf219de3c", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/85da15c016f74d7382f243cd92bb12515a8a518f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da15c016f74d7382f243cd92bb12515a8a518f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=85da15c016f74d7382f243cd92bb12515a8a518f", "patch": "@@ -2023,6 +2023,73 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `proc_macro_derive_resolution_fallback` lint detects proc macro\n+    /// derives using inaccessible names from parent modules.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (proc-macro)\n+    /// // foo.rs\n+    /// #![crate_type = \"proc-macro\"]\n+    ///\n+    /// extern crate proc_macro;\n+    ///\n+    /// use proc_macro::*;\n+    ///\n+    /// #[proc_macro_derive(Foo)]\n+    /// pub fn foo1(a: TokenStream) -> TokenStream {\n+    ///     drop(a);\n+    ///     \"mod __bar { static mut BAR: Option<Something> = None; }\".parse().unwrap()\n+    /// }\n+    /// ```\n+    ///\n+    /// ```rust,ignore (needs-dependency)\n+    /// // bar.rs\n+    /// #[macro_use]\n+    /// extern crate foo;\n+    ///\n+    /// struct Something;\n+    ///\n+    /// #[derive(Foo)]\n+    /// struct Another;\n+    ///\n+    /// fn main() {}\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// warning: cannot find type `Something` in this scope\n+    ///  --> src/main.rs:8:10\n+    ///   |\n+    /// 8 | #[derive(Foo)]\n+    ///   |          ^^^ names from parent modules are not accessible without an explicit import\n+    ///   |\n+    ///   = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n+    ///   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    ///   = note: for more information, see issue #50504 <https://github.com/rust-lang/rust/issues/50504>\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// If a proc-macro generates a module, the compiler unintentionally\n+    /// allowed items in that module to refer to items in the crate root\n+    /// without importing them. This is a [future-incompatible] lint to\n+    /// transition this to a hard error in the future. See [issue #50504] for\n+    /// more details.\n+    ///\n+    /// [issue #50504]: https://github.com/rust-lang/rust/issues/50504\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n+    Deny,\n+    \"detects proc macro derives using inaccessible names from parent modules\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #83583 <https://github.com/rust-lang/rust/issues/83583>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n+    };\n+}\n+\n declare_lint! {\n     /// The `macro_use_extern_crate` lint detects the use of the\n     /// [`macro_use` attribute].\n@@ -3261,6 +3328,7 @@ declare_lint_pass! {\n         UNSTABLE_NAME_COLLISIONS,\n         IRREFUTABLE_LET_PATTERNS,\n         WHERE_CLAUSES_OBJECT_SAFETY,\n+        PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         MACRO_USE_EXTERN_CRATE,\n         MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n         ILL_FORMED_ATTRIBUTE_INPUT,"}, {"sha": "36608615255586a45f76d16394429b231285e7ef", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85da15c016f74d7382f243cd92bb12515a8a518f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da15c016f74d7382f243cd92bb12515a8a518f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=85da15c016f74d7382f243cd92bb12515a8a518f", "patch": "@@ -1033,7 +1033,7 @@ impl<'a> Resolver<'a> {\n                     let root_module = this.resolve_crate_root(root_ident);\n                     this.add_module_candidates(root_module, &mut suggestions, filter_fn, None);\n                 }\n-                Scope::Module(module) => {\n+                Scope::Module(module, _) => {\n                     this.add_module_candidates(module, &mut suggestions, filter_fn, None);\n                 }\n                 Scope::MacroUsePrelude => {"}, {"sha": "a84652a315dc2d5ef95b197acee8025c6e088ebb", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/85da15c016f74d7382f243cd92bb12515a8a518f/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da15c016f74d7382f243cd92bb12515a8a518f/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=85da15c016f74d7382f243cd92bb12515a8a518f", "patch": "@@ -1,9 +1,11 @@\n-use rustc_ast as ast;\n+use rustc_ast::{self as ast, NodeId};\n use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{DefKind, Namespace, NonMacroAttrKind, PartialRes, PerNS};\n use rustc_hir::PrimTy;\n use rustc_middle::bug;\n use rustc_middle::ty;\n+use rustc_session::lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnId, ExpnKind, LocalExpnId, MacroKind, SyntaxContext};\n@@ -99,7 +101,7 @@ impl<'a> Resolver<'a> {\n         };\n         let mut scope = match ns {\n             _ if is_absolute_path => Scope::CrateRoot,\n-            TypeNS | ValueNS => Scope::Module(module),\n+            TypeNS | ValueNS => Scope::Module(module, None),\n             MacroNS => Scope::DeriveHelpers(parent_scope.expansion),\n         };\n         let mut ctxt = ctxt.normalize_to_macros_2_0();\n@@ -163,7 +165,7 @@ impl<'a> Resolver<'a> {\n                     MacroRulesScope::Invocation(invoc_id) => {\n                         Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)\n                     }\n-                    MacroRulesScope::Empty => Scope::Module(module),\n+                    MacroRulesScope::Empty => Scope::Module(module, None),\n                 },\n                 Scope::CrateRoot => match ns {\n                     TypeNS => {\n@@ -172,10 +174,16 @@ impl<'a> Resolver<'a> {\n                     }\n                     ValueNS | MacroNS => break,\n                 },\n-                Scope::Module(module) => {\n+                Scope::Module(module, prev_lint_id) => {\n                     use_prelude = !module.no_implicit_prelude;\n-                    match self.hygienic_lexical_parent(module, &mut ctxt) {\n-                        Some(parent_module) => Scope::Module(parent_module),\n+                    let derive_fallback_lint_id = match scope_set {\n+                        ScopeSet::Late(.., lint_id) => lint_id,\n+                        _ => None,\n+                    };\n+                    match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {\n+                        Some((parent_module, lint_id)) => {\n+                            Scope::Module(parent_module, lint_id.or(prev_lint_id))\n+                        }\n                         None => {\n                             ctxt.adjust(ExpnId::root());\n                             match ns {\n@@ -207,13 +215,45 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         module: Module<'a>,\n         ctxt: &mut SyntaxContext,\n-    ) -> Option<Module<'a>> {\n+        derive_fallback_lint_id: Option<NodeId>,\n+    ) -> Option<(Module<'a>, Option<NodeId>)> {\n         if !module.expansion.outer_expn_is_descendant_of(*ctxt) {\n-            return Some(self.expn_def_scope(ctxt.remove_mark()));\n+            return Some((self.expn_def_scope(ctxt.remove_mark()), None));\n         }\n \n         if let ModuleKind::Block = module.kind {\n-            return Some(module.parent.unwrap().nearest_item_scope());\n+            return Some((module.parent.unwrap().nearest_item_scope(), None));\n+        }\n+\n+        // We need to support the next case under a deprecation warning\n+        // ```\n+        // struct MyStruct;\n+        // ---- begin: this comes from a proc macro derive\n+        // mod implementation_details {\n+        //     // Note that `MyStruct` is not in scope here.\n+        //     impl SomeTrait for MyStruct { ... }\n+        // }\n+        // ---- end\n+        // ```\n+        // So we have to fall back to the module's parent during lexical resolution in this case.\n+        if derive_fallback_lint_id.is_some() {\n+            if let Some(parent) = module.parent {\n+                // Inner module is inside the macro, parent module is outside of the macro.\n+                if module.expansion != parent.expansion\n+                    && module.expansion.is_descendant_of(parent.expansion)\n+                {\n+                    // The macro is a proc macro derive\n+                    if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n+                        let ext = self.get_macro_by_def_id(def_id).ext;\n+                        if ext.builtin_name.is_none()\n+                            && ext.macro_kind() == MacroKind::Derive\n+                            && parent.expansion.outer_expn_is_descendant_of(*ctxt)\n+                        {\n+                            return Some((parent, derive_fallback_lint_id));\n+                        }\n+                    }\n+                }\n+            }\n         }\n \n         None\n@@ -470,7 +510,7 @@ impl<'a> Resolver<'a> {\n                             Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),\n                         }\n                     }\n-                    Scope::Module(module) => {\n+                    Scope::Module(module, derive_fallback_lint_id) => {\n                         let adjusted_parent_scope = &ParentScope { module, ..*parent_scope };\n                         let binding = this.resolve_ident_in_module_unadjusted_ext(\n                             ModuleOrUniformRoot::Module(module),\n@@ -483,6 +523,21 @@ impl<'a> Resolver<'a> {\n                         );\n                         match binding {\n                             Ok(binding) => {\n+                                if let Some(lint_id) = derive_fallback_lint_id {\n+                                    this.lint_buffer.buffer_lint_with_diagnostic(\n+                                        PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n+                                        lint_id,\n+                                        orig_ident.span,\n+                                        &format!(\n+                                            \"cannot find {} `{}` in this scope\",\n+                                            ns.descr(),\n+                                            ident\n+                                        ),\n+                                        BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(\n+                                            orig_ident.span,\n+                                        ),\n+                                    );\n+                                }\n                                 let misc_flags = if ptr::eq(module, this.graph_root) {\n                                     Flags::MISC_SUGGEST_CRATE\n                                 } else if module.is_normal() {"}, {"sha": "1b181b714005bd7177d2a1cd1ce29358301d6020", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85da15c016f74d7382f243cd92bb12515a8a518f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da15c016f74d7382f243cd92bb12515a8a518f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=85da15c016f74d7382f243cd92bb12515a8a518f", "patch": "@@ -105,7 +105,9 @@ enum Scope<'a> {\n     DeriveHelpersCompat,\n     MacroRules(MacroRulesScopeRef<'a>),\n     CrateRoot,\n-    Module(Module<'a>),\n+    // The node ID is for reporting the `PROC_MACRO_DERIVE_RESOLUTION_FALLBACK`\n+    // lint if it should be reported.\n+    Module(Module<'a>, Option<NodeId>),\n     MacroUsePrelude,\n     BuiltinAttrs,\n     ExternPrelude,\n@@ -1591,7 +1593,7 @@ impl<'a> Resolver<'a> {\n \n         self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {\n             match scope {\n-                Scope::Module(module) => {\n+                Scope::Module(module, _) => {\n                     this.traits_in_module(module, assoc_item, &mut found_traits);\n                 }\n                 Scope::StdLibPrelude => {"}, {"sha": "471f317edf96479f64ac9bbc3beadf5d934aaf71", "filename": "tests/ui/proc-macro/generate-mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85da15c016f74d7382f243cd92bb12515a8a518f/tests%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da15c016f74d7382f243cd92bb12515a8a518f/tests%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fgenerate-mod.rs?ref=85da15c016f74d7382f243cd92bb12515a8a518f", "patch": "@@ -15,16 +15,19 @@ struct S;\n \n #[derive(generate_mod::CheckDerive)] //~ ERROR cannot find type `FromOutside` in this scope\n                                      //~| ERROR cannot find type `OuterDerive` in this scope\n+                                     //~| WARN this was previously accepted\n+                                     //~| WARN this was previously accepted\n struct Z;\n \n fn inner_block() {\n     #[derive(generate_mod::CheckDerive)] //~ ERROR cannot find type `FromOutside` in this scope\n                                         //~| ERROR cannot find type `OuterDerive` in this scope\n+                                        //~| WARN this was previously accepted\n+                                        //~| WARN this was previously accepted\n     struct InnerZ;\n }\n \n-#[derive(generate_mod::CheckDeriveLint)] //~  ERROR cannot find type `OuterDeriveLint` in this scope\n-                                         //~| ERROR cannot find type `FromOutside` in this scope\n+#[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n struct W;\n \n fn main() {}"}, {"sha": "db629b5b5e239cc1f5557ea829988d2030597bf6", "filename": "tests/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 95, "deletions": 34, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/85da15c016f74d7382f243cd92bb12515a8a518f/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85da15c016f74d7382f243cd92bb12515a8a518f/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=85da15c016f74d7382f243cd92bb12515a8a518f", "patch": "@@ -38,66 +38,127 @@ LL | #[generate_mod::check_attr]\n            OuterAttr\n    = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0412]: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = help: consider importing this struct:\n-           FromOutside\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0412]: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = help: consider importing this struct:\n-           OuterDerive\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0412]: cannot find type `FromOutside` in this scope\n-  --> $DIR/generate-mod.rs:21:14\n+error: cannot find type `FromOutside` in this scope\n+  --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = help: consider importing this struct:\n-           FromOutside\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0412]: cannot find type `OuterDerive` in this scope\n-  --> $DIR/generate-mod.rs:21:14\n+error: cannot find type `OuterDerive` in this scope\n+  --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = help: consider importing this struct:\n-           OuterDerive\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0412]: cannot find type `FromOutside` in this scope\n-  --> $DIR/generate-mod.rs:26:10\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: cannot find type `FromOutside` in this scope\n+  --> $DIR/generate-mod.rs:16:10\n    |\n-LL | #[derive(generate_mod::CheckDeriveLint)]\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+LL | #[derive(generate_mod::CheckDerive)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = help: consider importing this struct:\n-           FromOutside\n-   = note: this error originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0412]: cannot find type `OuterDeriveLint` in this scope\n-  --> $DIR/generate-mod.rs:26:10\n+Future breakage diagnostic:\n+error: cannot find type `OuterDerive` in this scope\n+  --> $DIR/generate-mod.rs:16:10\n    |\n-LL | #[derive(generate_mod::CheckDeriveLint)]\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+LL | #[derive(generate_mod::CheckDerive)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = help: consider importing this struct:\n-           OuterDeriveLint\n-   = note: this error originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 10 previous errors\n+Future breakage diagnostic:\n+error: cannot find type `FromOutside` in this scope\n+  --> $DIR/generate-mod.rs:23:14\n+   |\n+LL |     #[derive(generate_mod::CheckDerive)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: cannot find type `OuterDerive` in this scope\n+  --> $DIR/generate-mod.rs:23:14\n+   |\n+LL |     #[derive(generate_mod::CheckDerive)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: cannot find type `FromOutside` in this scope\n+  --> $DIR/generate-mod.rs:30:10\n+   |\n+LL | #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n+note: the lint level is defined here\n+  --> $DIR/generate-mod.rs:30:10\n+   |\n+LL | #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: cannot find type `OuterDeriveLint` in this scope\n+  --> $DIR/generate-mod.rs:30:10\n+   |\n+LL | #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n+note: the lint level is defined here\n+  --> $DIR/generate-mod.rs:30:10\n+   |\n+LL | #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-For more information about this error, try `rustc --explain E0412`."}]}