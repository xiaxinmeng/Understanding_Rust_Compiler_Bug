{"sha": "de90afc72e2393efad0fb9cdfd765703a044fe02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOTBhZmM3MmUyMzkzZWZhZDBmYjljZGZkNzY1NzAzYTA0NGZlMDI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-23T03:15:40Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-08T19:37:07Z"}, "message": "Explain method-call move errors in loops\n\nPR #73708 added a more detailed explanation of move errors that occur\ndue to a call to a method that takes `self`. This PR extends that logic\nto work when a move error occurs due to a method call in the previous\niteration of a loop.", "tree": {"sha": "66c1d947d40638e700f2abf17dd20af674ab7dbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c1d947d40638e700f2abf17dd20af674ab7dbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de90afc72e2393efad0fb9cdfd765703a044fe02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl/4tGMACgkQtAh+UQ6Y\nsWSxiBAAgPy2U1orGOT1OlshkCz4lh9/N5weto1tJOTCbVKG8M3H2NunCPO8xbps\nRWtXgdRCmj9kCylZnCPViwislAIW+l4nMnWazbW7a0eBI+u0hLR2wE7J50uTVg3P\nVL4L4s9OtPyrLs4PrEuNy7+m2eHUQ07Sp38Eg1NnMWeBrtYELK11YEfZvfysygUy\nU2SjMnYZvDAEQoHM1VYmxRDREmCYEOYNn5iMsO9Rhw3EtoxLmPKlw07ZPTrlAgpS\n4pOaLfHPqH9nOSPF3FbgDEFSXRsVIvnK5UvumZoR2jPelZOp6mtRhADlhqWkTDL/\nm982ubzQIFW0hXIGusgfYgb6khH7P+S1Iw2q9KgMzBfFd2avURXLuNbUGNtGTr4T\nyv6WmQnMZ6L7EBT/4NVLgrZ41irw/puH1NGu0XrS1gbrKE1aTzhr6nvAxIJsuew1\nDEAL4rVlg/F4UyPWs1aULG+L+p47aQL47wrbQla4/3c093fkKb3J4mye32lpI1Ty\nEfCEGF+3/rBBGn/UIOnzepY4tJHX9Zm1CdLCx7YJ7+4W8wdpLRMTeigTAM54H05J\n6OJx3LoepN/8UIMCLszWgV+VgEgeeKSZRYlknRIRP3QTrkDbwlsdWhoU92YB3DcZ\n8E9SxXa6Mhv22+27g4auM3HQ7D1hi4taEo1Z3Mr8trw2qS7yKM8=\n=Jo3/\n-----END PGP SIGNATURE-----", "payload": "tree 66c1d947d40638e700f2abf17dd20af674ab7dbc\nparent ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09\nauthor Aaron Hill <aa1ronham@gmail.com> 1608693340 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1610134627 -0500\n\nExplain method-call move errors in loops\n\nPR #73708 added a more detailed explanation of move errors that occur\ndue to a call to a method that takes `self`. This PR extends that logic\nto work when a move error occurs due to a method call in the previous\niteration of a loop.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de90afc72e2393efad0fb9cdfd765703a044fe02", "html_url": "https://github.com/rust-lang/rust/commit/de90afc72e2393efad0fb9cdfd765703a044fe02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de90afc72e2393efad0fb9cdfd765703a044fe02/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "html_url": "https://github.com/rust-lang/rust/commit/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09"}], "stats": {"total": 166, "additions": 90, "deletions": 76}, "files": [{"sha": "c2a14840fb85e1d34bed0a5a10250ef63bd38508", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 68, "deletions": 74, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/de90afc72e2393efad0fb9cdfd765703a044fe02/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de90afc72e2393efad0fb9cdfd765703a044fe02/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=de90afc72e2393efad0fb9cdfd765703a044fe02", "patch": "@@ -151,95 +151,88 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 let move_msg = if move_spans.for_closure() { \" into closure\" } else { \"\" };\n \n+                let loop_message = if location == move_out.source || move_site.traversed_back_edge {\n+                    \", in previous iteration of loop\"\n+                } else {\n+                    \"\"\n+                };\n+\n                 if location == move_out.source {\n-                    err.span_label(\n-                        span,\n-                        format!(\n-                            \"value {}moved{} here, in previous iteration of loop\",\n-                            partially_str, move_msg\n-                        ),\n-                    );\n                     is_loop_move = true;\n-                } else if move_site.traversed_back_edge {\n-                    err.span_label(\n-                        move_span,\n-                        format!(\n-                            \"value {}moved{} here, in previous iteration of loop\",\n-                            partially_str, move_msg\n-                        ),\n-                    );\n-                } else {\n-                    if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } =\n-                        move_spans\n-                    {\n-                        let place_name = self\n-                            .describe_place(moved_place.as_ref())\n-                            .map(|n| format!(\"`{}`\", n))\n-                            .unwrap_or_else(|| \"value\".to_owned());\n-                        match kind {\n-                            FnSelfUseKind::FnOnceCall => {\n+                }\n+\n+                if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } = move_spans {\n+                    let place_name = self\n+                        .describe_place(moved_place.as_ref())\n+                        .map(|n| format!(\"`{}`\", n))\n+                        .unwrap_or_else(|| \"value\".to_owned());\n+                    match kind {\n+                        FnSelfUseKind::FnOnceCall => {\n+                            err.span_label(\n+                                fn_call_span,\n+                                &format!(\n+                                    \"{} {}moved due to this call{}\",\n+                                    place_name, partially_str, loop_message\n+                                ),\n+                            );\n+                            err.span_note(\n+                                var_span,\n+                                \"this value implements `FnOnce`, which causes it to be moved when called\",\n+                            );\n+                        }\n+                        FnSelfUseKind::Operator { self_arg } => {\n+                            err.span_label(\n+                                fn_call_span,\n+                                &format!(\n+                                    \"{} {}moved due to usage in operator{}\",\n+                                    place_name, partially_str, loop_message\n+                                ),\n+                            );\n+                            if self.fn_self_span_reported.insert(fn_span) {\n+                                err.span_note(\n+                                    self_arg.span,\n+                                    \"calling this operator moves the left-hand side\",\n+                                );\n+                            }\n+                        }\n+                        FnSelfUseKind::Normal { self_arg, implicit_into_iter } => {\n+                            if implicit_into_iter {\n                                 err.span_label(\n                                     fn_call_span,\n                                     &format!(\n-                                        \"{} {}moved due to this call\",\n-                                        place_name, partially_str\n+                                        \"{} {}moved due to this implicit call to `.into_iter()`{}\",\n+                                        place_name, partially_str, loop_message\n                                     ),\n                                 );\n-                                err.span_note(\n-                                    var_span,\n-                                    \"this value implements `FnOnce`, which causes it to be moved when called\",\n-                                );\n-                            }\n-                            FnSelfUseKind::Operator { self_arg } => {\n+                            } else {\n                                 err.span_label(\n                                     fn_call_span,\n                                     &format!(\n-                                        \"{} {}moved due to usage in operator\",\n-                                        place_name, partially_str\n+                                        \"{} {}moved due to this method call{}\",\n+                                        place_name, partially_str, loop_message\n                                     ),\n                                 );\n-                                if self.fn_self_span_reported.insert(fn_span) {\n-                                    err.span_note(\n-                                        self_arg.span,\n-                                        \"calling this operator moves the left-hand side\",\n-                                    );\n-                                }\n                             }\n-                            FnSelfUseKind::Normal { self_arg, implicit_into_iter } => {\n-                                if implicit_into_iter {\n-                                    err.span_label(\n-                                        fn_call_span,\n-                                        &format!(\n-                                            \"{} {}moved due to this implicit call to `.into_iter()`\",\n-                                            place_name, partially_str\n-                                        ),\n-                                    );\n-                                } else {\n-                                    err.span_label(\n-                                        fn_call_span,\n-                                        &format!(\n-                                            \"{} {}moved due to this method call\",\n-                                            place_name, partially_str\n-                                        ),\n-                                    );\n-                                }\n-                                // Avoid pointing to the same function in multiple different\n-                                // error messages\n-                                if self.fn_self_span_reported.insert(self_arg.span) {\n-                                    err.span_note(\n-                                        self_arg.span,\n-                                        &format!(\"this function consumes the receiver `self` by taking ownership of it, which moves {}\", place_name)\n-                                    );\n-                                }\n+                            // Avoid pointing to the same function in multiple different\n+                            // error messages\n+                            if self.fn_self_span_reported.insert(self_arg.span) {\n+                                err.span_note(\n+                                    self_arg.span,\n+                                    &format!(\"this function consumes the receiver `self` by taking ownership of it, which moves {}\", place_name)\n+                                );\n                             }\n-                            // Deref::deref takes &self, which cannot cause a move\n-                            FnSelfUseKind::DerefCoercion { .. } => unreachable!(),\n                         }\n-                    } else {\n-                        err.span_label(\n-                            move_span,\n-                            format!(\"value {}moved{} here\", partially_str, move_msg),\n-                        );\n+                        // Deref::deref takes &self, which cannot cause a move\n+                        FnSelfUseKind::DerefCoercion { .. } => unreachable!(),\n+                    }\n+                } else {\n+                    err.span_label(\n+                        move_span,\n+                        format!(\"value {}moved{} here{}\", partially_str, move_msg, loop_message),\n+                    );\n+                    // If the move error occurs due to a loop, don't show\n+                    // another message for the same span\n+                    if loop_message.is_empty() {\n                         move_spans.var_span_label(\n                             &mut err,\n                             format!(\n@@ -250,6 +243,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         );\n                     }\n                 }\n+\n                 if let UseSpans::PatUse(span) = move_spans {\n                     err.span_suggestion_verbose(\n                         span.shrink_to_lo(),"}, {"sha": "946642ef6f3ad30a4ce1afb1ec289e533dcbfdff", "filename": "src/test/ui/moves/move-fn-self-receiver.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de90afc72e2393efad0fb9cdfd765703a044fe02/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de90afc72e2393efad0fb9cdfd765703a044fe02/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs?ref=de90afc72e2393efad0fb9cdfd765703a044fe02", "patch": "@@ -69,6 +69,11 @@ fn move_out(val: Container) {\n     let container = Container(vec![]);\n     for _val in container.custom_into_iter() {}\n     container; //~ ERROR use of moved\n+\n+    let foo2 = Foo;\n+    loop {\n+        foo2.use_self(); //~ ERROR use of moved\n+    }\n }\n \n fn main() {}"}, {"sha": "8c509363d02d1f6d7215fd5ee19b7dd38e01a447", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de90afc72e2393efad0fb9cdfd765703a044fe02/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de90afc72e2393efad0fb9cdfd765703a044fe02/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=de90afc72e2393efad0fb9cdfd765703a044fe02", "patch": "@@ -152,7 +152,16 @@ note: this function consumes the receiver `self` by taking ownership of it, whic\n LL |     fn custom_into_iter(self) -> impl Iterator<Item = bool> {\n    |                         ^^^^\n \n-error: aborting due to 11 previous errors\n+error[E0382]: use of moved value: `foo2`\n+  --> $DIR/move-fn-self-receiver.rs:75:9\n+   |\n+LL |     let foo2 = Foo;\n+   |         ---- move occurs because `foo2` has type `Foo`, which does not implement the `Copy` trait\n+LL |     loop {\n+LL |         foo2.use_self();\n+   |         ^^^^ ---------- `foo2` moved due to this method call, in previous iteration of loop\n+\n+error: aborting due to 12 previous errors\n \n Some errors have detailed explanations: E0382, E0505.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "64ce6c1e16d4bf81457d6c9f0c63a86e90ed9cdb", "filename": "src/test/ui/suggestions/borrow-for-loop-head.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de90afc72e2393efad0fb9cdfd765703a044fe02/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de90afc72e2393efad0fb9cdfd765703a044fe02/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr?ref=de90afc72e2393efad0fb9cdfd765703a044fe02", "patch": "@@ -15,8 +15,14 @@ LL |     for i in &a {\n LL |         for j in a {\n    |                  ^\n    |                  |\n-   |                  value moved here, in previous iteration of loop\n+   |                  `a` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |                  help: consider borrowing to avoid moving into the for loop: `&a`\n+   |\n+note: this function consumes the receiver `self` by taking ownership of it, which moves `a`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n \n error: aborting due to 2 previous errors\n "}]}