{"sha": "a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "node_id": "C_kwDOAAsO6NoAKGE4YmU1NjJiZGZlYjc3NTc2OGVjNWNhN2E2YzRlMDc4MDlhMWY4Mjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-27T20:51:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-27T20:51:39Z"}, "message": "Rollup merge of #95120 - smoelius:backward-switch-int, r=ecstatic-morse\n\nImplement `apply_switch_int_edge_effects` for backward analyses\n\nSee #94576 for some discussion.\n\nr? `@ecstatic-morse`", "tree": {"sha": "3d28aa03bbb096ea0022def9a95f0bcdba566aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d28aa03bbb096ea0022def9a95f0bcdba566aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQM5bCRBK7hj4Ov3rIwAA6aoIAKM+AHTiOPQfnB4IFNBvKGAw\n/yYH8L3E6kX7aiejvG2MCmsTtgtqo7ra0A3gm04SCwhVoOMnmBtiOAuU9QVN9SDN\n411ACBGm2Je2BicyU4OfS0+ztwjv58RAEH2iV9UTCxoF044GBgVvdQNFqzwZJ15H\naKZ+Wn+A8AsWBu+Np8xqLXGnROHU/KX2XxgeQ4UWRU5me/HT7e1e188Ya9Whcqiv\nsX67b58ElDaam0QKkIF4lfMCHY8U0M2MP8onEgt7Oom9Y3W5itkzoLAn/bzamcx0\nTyYbIbSUoc+dAg5Xv3kBEnfgfqPVq5scpuRhpFVzXYocwodvNwXf8HzmcX5w8C8=\n=kS0z\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d28aa03bbb096ea0022def9a95f0bcdba566aa0\nparent 726cd737d625a1420e3eed5f00879f6f136f1c83\nparent 241ec5b3b35900cf5a9becf7da3e3ea49448d8fb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648414299 +0200\ncommitter GitHub <noreply@github.com> 1648414299 +0200\n\nRollup merge of #95120 - smoelius:backward-switch-int, r=ecstatic-morse\n\nImplement `apply_switch_int_edge_effects` for backward analyses\n\nSee #94576 for some discussion.\n\nr? `@ecstatic-morse`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "html_url": "https://github.com/rust-lang/rust/commit/a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726cd737d625a1420e3eed5f00879f6f136f1c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/726cd737d625a1420e3eed5f00879f6f136f1c83", "html_url": "https://github.com/rust-lang/rust/commit/726cd737d625a1420e3eed5f00879f6f136f1c83"}, {"sha": "241ec5b3b35900cf5a9becf7da3e3ea49448d8fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/241ec5b3b35900cf5a9becf7da3e3ea49448d8fb", "html_url": "https://github.com/rust-lang/rust/commit/241ec5b3b35900cf5a9becf7da3e3ea49448d8fb"}], "stats": {"total": 161, "additions": 153, "deletions": 8}, "files": [{"sha": "eec6eed311bc3e4030010461465a8ff504f7ec86", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "patch": "@@ -45,6 +45,7 @@ use std::{iter, mem, option};\n use self::graph_cyclic_cache::GraphIsCyclicCache;\n use self::predecessors::{PredecessorCache, Predecessors};\n pub use self::query::*;\n+use self::switch_sources::{SwitchSourceCache, SwitchSources};\n \n pub mod coverage;\n mod generic_graph;\n@@ -58,6 +59,7 @@ mod predecessors;\n pub mod pretty;\n mod query;\n pub mod spanview;\n+mod switch_sources;\n pub mod tcx;\n pub mod terminator;\n pub use terminator::*;\n@@ -296,6 +298,7 @@ pub struct Body<'tcx> {\n     pub is_polymorphic: bool,\n \n     predecessor_cache: PredecessorCache,\n+    switch_source_cache: SwitchSourceCache,\n     is_cyclic: GraphIsCyclicCache,\n \n     pub tainted_by_errors: Option<ErrorGuaranteed>,\n@@ -344,6 +347,7 @@ impl<'tcx> Body<'tcx> {\n             required_consts: Vec::new(),\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n+            switch_source_cache: SwitchSourceCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n             tainted_by_errors,\n         };\n@@ -372,6 +376,7 @@ impl<'tcx> Body<'tcx> {\n             var_debug_info: Vec::new(),\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n+            switch_source_cache: SwitchSourceCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n             tainted_by_errors: None,\n         };\n@@ -392,6 +397,7 @@ impl<'tcx> Body<'tcx> {\n         // FIXME: Use a finer-grained API for this, so only transformations that alter terminators\n         // invalidate the caches.\n         self.predecessor_cache.invalidate();\n+        self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n         &mut self.basic_blocks\n     }\n@@ -401,6 +407,7 @@ impl<'tcx> Body<'tcx> {\n         &mut self,\n     ) -> (&mut IndexVec<BasicBlock, BasicBlockData<'tcx>>, &mut LocalDecls<'tcx>) {\n         self.predecessor_cache.invalidate();\n+        self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n@@ -414,6 +421,7 @@ impl<'tcx> Body<'tcx> {\n         &mut Vec<VarDebugInfo<'tcx>>,\n     ) {\n         self.predecessor_cache.invalidate();\n+        self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n         (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n     }\n@@ -541,6 +549,11 @@ impl<'tcx> Body<'tcx> {\n         self.predecessor_cache.compute(&self.basic_blocks)\n     }\n \n+    #[inline]\n+    pub fn switch_sources(&self) -> &SwitchSources {\n+        self.switch_source_cache.compute(&self.basic_blocks)\n+    }\n+\n     #[inline]\n     pub fn dominators(&self) -> Dominators<BasicBlock> {\n         dominators(self)"}, {"sha": "7f62b4d0dbab947efe98704f35f870ba18f96feb", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "patch": "@@ -0,0 +1,82 @@\n+//! Lazily compute the inverse of each `SwitchInt`'s switch targets. Modeled after\n+//! `Predecessors`/`PredecessorCache`.\n+\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::sync::OnceCell;\n+use rustc_index::vec::IndexVec;\n+use rustc_serialize as serialize;\n+use smallvec::SmallVec;\n+\n+use crate::mir::{BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n+\n+pub type SwitchSources = IndexVec<BasicBlock, IndexVec<BasicBlock, SmallVec<[Option<u128>; 1]>>>;\n+\n+#[derive(Clone, Debug)]\n+pub(super) struct SwitchSourceCache {\n+    cache: OnceCell<SwitchSources>,\n+}\n+\n+impl SwitchSourceCache {\n+    #[inline]\n+    pub(super) fn new() -> Self {\n+        SwitchSourceCache { cache: OnceCell::new() }\n+    }\n+\n+    /// Invalidates the switch source cache.\n+    #[inline]\n+    pub(super) fn invalidate(&mut self) {\n+        self.cache = OnceCell::new();\n+    }\n+\n+    /// Returns the switch sources for this MIR.\n+    #[inline]\n+    pub(super) fn compute(\n+        &self,\n+        basic_blocks: &IndexVec<BasicBlock, BasicBlockData<'_>>,\n+    ) -> &SwitchSources {\n+        self.cache.get_or_init(|| {\n+            let mut switch_sources = IndexVec::from_elem(\n+                IndexVec::from_elem(SmallVec::new(), basic_blocks),\n+                basic_blocks,\n+            );\n+            for (bb, data) in basic_blocks.iter_enumerated() {\n+                if let Some(Terminator {\n+                    kind: TerminatorKind::SwitchInt { targets, .. }, ..\n+                }) = &data.terminator\n+                {\n+                    for (value, target) in targets.iter() {\n+                        switch_sources[target][bb].push(Some(value));\n+                    }\n+                    switch_sources[targets.otherwise()][bb].push(None);\n+                }\n+            }\n+\n+            switch_sources\n+        })\n+    }\n+}\n+\n+impl<S: serialize::Encoder> serialize::Encodable<S> for SwitchSourceCache {\n+    #[inline]\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_unit()\n+    }\n+}\n+\n+impl<D: serialize::Decoder> serialize::Decodable<D> for SwitchSourceCache {\n+    #[inline]\n+    fn decode(_: &mut D) -> Self {\n+        Self::new()\n+    }\n+}\n+\n+impl<CTX> HashStable<CTX> for SwitchSourceCache {\n+    #[inline]\n+    fn hash_stable(&self, _: &mut CTX, _: &mut StableHasher) {\n+        // do nothing\n+    }\n+}\n+\n+TrivialTypeFoldableAndLiftImpls! {\n+    SwitchSourceCache,\n+}"}, {"sha": "93118dfeb7737f1623009f9b2549591303e2cff1", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "patch": "@@ -248,6 +248,7 @@ impl Direction for Backward {\n                     );\n                     propagate(pred, &tmp);\n                 }\n+\n                 mir::TerminatorKind::InlineAsm {\n                     destination: Some(dest), ref operands, ..\n                 } if dest == bb => {\n@@ -266,6 +267,23 @@ impl Direction for Backward {\n                     propagate(pred, &tmp);\n                 }\n \n+                mir::TerminatorKind::SwitchInt { targets: _, ref discr, switch_ty: _ } => {\n+                    let mut applier = BackwardSwitchIntEdgeEffectsApplier {\n+                        pred,\n+                        exit_state,\n+                        values: &body.switch_sources()[bb][pred],\n+                        bb,\n+                        propagate: &mut propagate,\n+                        effects_applied: false,\n+                    };\n+\n+                    analysis.apply_switch_int_edge_effects(pred, discr, &mut applier);\n+\n+                    if !applier.effects_applied {\n+                        propagate(pred, exit_state)\n+                    }\n+                }\n+\n                 // Ignore dead unwinds.\n                 mir::TerminatorKind::Call { cleanup: Some(unwind), .. }\n                 | mir::TerminatorKind::Assert { cleanup: Some(unwind), .. }\n@@ -286,6 +304,37 @@ impl Direction for Backward {\n     }\n }\n \n+struct BackwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n+    pred: BasicBlock,\n+    exit_state: &'a mut D,\n+    values: &'a [Option<u128>],\n+    bb: BasicBlock,\n+    propagate: &'a mut F,\n+\n+    effects_applied: bool,\n+}\n+\n+impl<D, F> super::SwitchIntEdgeEffects<D> for BackwardSwitchIntEdgeEffectsApplier<'_, D, F>\n+where\n+    D: Clone,\n+    F: FnMut(BasicBlock, &D),\n+{\n+    fn apply(&mut self, mut apply_edge_effect: impl FnMut(&mut D, SwitchIntTarget)) {\n+        assert!(!self.effects_applied);\n+\n+        let targets = self.values.iter().map(|&value| SwitchIntTarget { value, target: self.bb });\n+\n+        let mut tmp = None;\n+        for target in targets {\n+            let tmp = opt_clone_from_or_clone(&mut tmp, self.exit_state);\n+            apply_edge_effect(tmp, target);\n+            (self.propagate)(self.pred, tmp);\n+        }\n+\n+        self.effects_applied = true;\n+    }\n+}\n+\n /// Dataflow that runs from the entry of a block (the first statement), to its exit (terminator).\n pub struct Forward;\n \n@@ -528,7 +577,7 @@ impl Direction for Forward {\n             }\n \n             SwitchInt { ref targets, ref discr, switch_ty: _ } => {\n-                let mut applier = SwitchIntEdgeEffectApplier {\n+                let mut applier = ForwardSwitchIntEdgeEffectsApplier {\n                     exit_state,\n                     targets,\n                     propagate,\n@@ -537,8 +586,11 @@ impl Direction for Forward {\n \n                 analysis.apply_switch_int_edge_effects(bb, discr, &mut applier);\n \n-                let SwitchIntEdgeEffectApplier {\n-                    exit_state, mut propagate, effects_applied, ..\n+                let ForwardSwitchIntEdgeEffectsApplier {\n+                    exit_state,\n+                    mut propagate,\n+                    effects_applied,\n+                    ..\n                 } = applier;\n \n                 if !effects_applied {\n@@ -551,15 +603,15 @@ impl Direction for Forward {\n     }\n }\n \n-struct SwitchIntEdgeEffectApplier<'a, D, F> {\n+struct ForwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n     exit_state: &'a mut D,\n     targets: &'a SwitchTargets,\n     propagate: F,\n \n     effects_applied: bool,\n }\n \n-impl<D, F> super::SwitchIntEdgeEffects<D> for SwitchIntEdgeEffectApplier<'_, D, F>\n+impl<D, F> super::SwitchIntEdgeEffects<D> for ForwardSwitchIntEdgeEffectsApplier<'_, D, F>\n where\n     D: Clone,\n     F: FnMut(BasicBlock, &D),"}, {"sha": "67c16e6c0849d422754fbcbaabff4b3674f592c8", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "patch": "@@ -234,8 +234,6 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// about a given `SwitchInt` terminator for each one of its edges\u2014and more efficient\u2014the\n     /// engine doesn't need to clone the exit state for a block unless\n     /// `SwitchIntEdgeEffects::apply` is actually called.\n-    ///\n-    /// FIXME: This class of effects is not supported for backward dataflow analyses.\n     fn apply_switch_int_edge_effects(\n         &self,\n         _block: BasicBlock,"}, {"sha": "c221b35867082716117f157dff9a11f78d54f65f", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8be562bdfeb775768ec5ca7a6c4e07809a1f829/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=a8be562bdfeb775768ec5ca7a6c4e07809a1f829", "patch": "@@ -28,7 +28,7 @@ pub use self::drop_flag_effects::{\n pub use self::framework::{\n     fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, CallReturnPlaces,\n     Direction, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor,\n-    ResultsRefCursor, ResultsVisitable, ResultsVisitor,\n+    ResultsRefCursor, ResultsVisitable, ResultsVisitor, SwitchIntEdgeEffects,\n };\n \n use self::move_paths::MoveData;"}]}