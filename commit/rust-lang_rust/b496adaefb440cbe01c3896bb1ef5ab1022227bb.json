{"sha": "b496adaefb440cbe01c3896bb1ef5ab1022227bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTZhZGFlZmI0NDBjYmUwMWMzODk2YmIxZWY1YWIxMDIyMjI3YmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:35:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:30Z"}, "message": "rollup merge of #19912: P1start/fn-formatting\n\nThis is to encourage the use of the sugary syntax instead of the `<>` syntax, which will not be usable post-1.0. Rustdoc [still uses the `<>` syntax](https://github.com/rust-lang/rust/issues/19909), so if a rustdoc wizard is looking for something to do, it would be nice to use the parenthetical syntax there as well. (I tried to patch rustdoc as well, but failed\u2026)", "tree": {"sha": "f2964a94db65c4b5c409fbb979065ab257471a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2964a94db65c4b5c409fbb979065ab257471a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b496adaefb440cbe01c3896bb1ef5ab1022227bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b496adaefb440cbe01c3896bb1ef5ab1022227bb", "html_url": "https://github.com/rust-lang/rust/commit/b496adaefb440cbe01c3896bb1ef5ab1022227bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b496adaefb440cbe01c3896bb1ef5ab1022227bb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b929090acb337603c40c687c901531daad1c450", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b929090acb337603c40c687c901531daad1c450", "html_url": "https://github.com/rust-lang/rust/commit/1b929090acb337603c40c687c901531daad1c450"}, {"sha": "570325dd3c6b7958ccfe008fb0c68f531fd51ed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/570325dd3c6b7958ccfe008fb0c68f531fd51ed1", "html_url": "https://github.com/rust-lang/rust/commit/570325dd3c6b7958ccfe008fb0c68f531fd51ed1"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "13b5c262bf7825e00f6df4f80b977597d98ad19b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b496adaefb440cbe01c3896bb1ef5ab1022227bb/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b496adaefb440cbe01c3896bb1ef5ab1022227bb/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b496adaefb440cbe01c3896bb1ef5ab1022227bb", "patch": "@@ -428,17 +428,19 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         ty_enum(did, ref substs) | ty_struct(did, ref substs) => {\n             let base = ty::item_path_str(cx, did);\n             let generics = ty::lookup_item_type(cx, did).generics;\n-            parameterized(cx, base.as_slice(), substs, &generics)\n+            parameterized(cx, base.as_slice(), substs, &generics, did)\n         }\n         ty_trait(box ty::TyTrait {\n             ref principal, ref bounds\n         }) => {\n             let base = ty::item_path_str(cx, principal.def_id);\n             let trait_def = ty::lookup_trait_def(cx, principal.def_id);\n+            let did = trait_def.trait_ref.def_id;\n             let ty = parameterized(cx, base.as_slice(),\n-                                   &principal.substs, &trait_def.generics);\n+                                   &principal.substs, &trait_def.generics,\n+                                   did);\n             let bound_str = bounds.user_string(cx);\n-            let bound_sep = if bound_str.is_empty() { \"\" } else { \"+\" };\n+            let bound_sep = if bound_str.is_empty() { \"\" } else { \" + \" };\n             format!(\"{}{}{}\",\n                     ty,\n                     bound_sep,\n@@ -484,7 +486,8 @@ pub fn explicit_self_category_to_str(category: &ty::ExplicitSelfCategory)\n pub fn parameterized<'tcx>(cx: &ctxt<'tcx>,\n                            base: &str,\n                            substs: &subst::Substs<'tcx>,\n-                           generics: &ty::Generics<'tcx>)\n+                           generics: &ty::Generics<'tcx>,\n+                           did: ast::DefId)\n                            -> String\n {\n     if cx.sess.verbose() {\n@@ -537,7 +540,12 @@ pub fn parameterized<'tcx>(cx: &ctxt<'tcx>,\n         strs.push(ty_to_string(cx, *t))\n     }\n \n-    if strs.len() > 0u {\n+    if cx.lang_items.fn_trait_kind(did).is_some() {\n+        format!(\"{}({}){}\",\n+                base,\n+                strs[0][1 .. strs[0].len() - (strs[0].ends_with(\",)\") as uint+1)],\n+                if &*strs[1] == \"()\" { String::new() } else { format!(\" -> {}\", strs[1]) })\n+    } else if strs.len() > 0 {\n         format!(\"{}<{}>\", base, strs.connect(\", \"))\n     } else {\n         format!(\"{}\", base)\n@@ -743,7 +751,7 @@ impl<'tcx> Repr<'tcx> for ty::TraitRef<'tcx> {\n         let trait_def = ty::lookup_trait_def(tcx, self.def_id);\n         format!(\"<{} : {}>\",\n                 self.substs.self_ty().repr(tcx),\n-                parameterized(tcx, base.as_slice(), &self.substs, &trait_def.generics))\n+                parameterized(tcx, base.as_slice(), &self.substs, &trait_def.generics, self.def_id))\n     }\n }\n \n@@ -1116,7 +1124,7 @@ impl<'tcx> UserString<'tcx> for ty::ParamBounds<'tcx> {\n         for n in self.trait_bounds.iter() {\n             result.push(n.user_string(tcx));\n         }\n-        result.connect(\"+\")\n+        result.connect(\" + \")\n     }\n }\n \n@@ -1189,7 +1197,8 @@ impl<'tcx> UserString<'tcx> for ty::TraitRef<'tcx> {\n             };\n \n         let trait_def = ty::lookup_trait_def(tcx, self.def_id);\n-        parameterized(tcx, base.as_slice(), &trait_ref.substs, &trait_def.generics)\n+        let did = trait_def.trait_ref.def_id;\n+        parameterized(tcx, base.as_slice(), &trait_ref.substs, &trait_def.generics, did)\n     }\n }\n "}, {"sha": "3eeb4c177cad60db4639b9034cea6c3c531f5cab", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b496adaefb440cbe01c3896bb1ef5ab1022227bb/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b496adaefb440cbe01c3896bb1ef5ab1022227bb/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=b496adaefb440cbe01c3896bb1ef5ab1022227bb", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+\n+fn needs_fn<F>(x: F) where F: Fn(int) -> int {}\n+\n+fn main() {\n+    let _: () = (box |:_: int| {}) as Box<FnOnce(int)>; //~ ERROR object-safe\n+    //~^ ERROR Box<core::ops::FnOnce(int)>\n+    let _: () = (box |&:_: int, int| {}) as Box<Fn(int, int)>;\n+    //~^ ERROR Box<core::ops::Fn(int, int)>\n+    let _: () = (box |&mut:| -> int unimplemented!()) as Box<FnMut() -> int>;\n+    //~^ ERROR Box<core::ops::FnMut() -> int>\n+\n+    needs_fn(1i); //~ ERROR `core::ops::Fn(int) -> int`\n+}"}]}