{"sha": "8a813e088cf2169f1e1ff5a18c6b26d847885e3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhODEzZTA4OGNmMjE2OWYxZTFmZjVhMThjNmIyNmQ4NDc4ODVlM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-13T01:44:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-13T01:44:58Z"}, "message": "Auto merge of #29675 - bluss:merge-sort-fastpath, r=huonw\n\nsort: Fast path for already sorted data\n\nWhen merging two sorted blocks `left` and `right` if the last element in\n`left` is <= the first in `right`, the blocks are already in sorted order.\n\nAdd this as an additional fast path by simply copying the whole left\nblock into the output and advancing the left pointer. The right block is\nthen treated the same way by the already present logic in the merge\nloop.\n\nCan reduce runtime of .sort() to less than 50% of the previous, if the data\nwas already perfectly sorted. Sorted data with a few swaps are also\nsorted quicker than before. The overhead of one comparison per merge\nseems to be negligible.", "tree": {"sha": "df4a21a59722f43a6270e48509cdcc8d74173fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df4a21a59722f43a6270e48509cdcc8d74173fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a813e088cf2169f1e1ff5a18c6b26d847885e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a813e088cf2169f1e1ff5a18c6b26d847885e3d", "html_url": "https://github.com/rust-lang/rust/commit/8a813e088cf2169f1e1ff5a18c6b26d847885e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a813e088cf2169f1e1ff5a18c6b26d847885e3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5fde83ae7ec0d9ff7ebbcb9391a1d71a81a3f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fde83ae7ec0d9ff7ebbcb9391a1d71a81a3f1d", "html_url": "https://github.com/rust-lang/rust/commit/d5fde83ae7ec0d9ff7ebbcb9391a1d71a81a3f1d"}, {"sha": "0f5e30d16004334cac1a25dbeefc0cfb886a404d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5e30d16004334cac1a25dbeefc0cfb886a404d", "html_url": "https://github.com/rust-lang/rust/commit/0f5e30d16004334cac1a25dbeefc0cfb886a404d"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "25ff1f1a82aac2e3c6b832671d0bcc475e75b890", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a813e088cf2169f1e1ff5a18c6b26d847885e3d/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a813e088cf2169f1e1ff5a18c6b26d847885e3d/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=8a813e088cf2169f1e1ff5a18c6b26d847885e3d", "patch": "@@ -1068,6 +1068,18 @@ fn merge_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> Order\n                 let mut out = buf_tmp.offset(start as isize);\n                 let out_end = buf_tmp.offset(right_end_idx as isize);\n \n+                // If left[last] <= right[0], they are already in order:\n+                // fast-forward the left side (the right side is handled\n+                // in the loop).\n+                // If `right` is not empty then left is not empty, and\n+                // the offsets are in bounds.\n+                if right != right_end && compare(&*right.offset(-1), &*right) != Greater {\n+                    let elems = (right_start as usize - left as usize) / mem::size_of::<T>();\n+                    ptr::copy_nonoverlapping(&*left, out, elems);\n+                    out = out.offset(elems as isize);\n+                    left = right_start;\n+                }\n+\n                 while out < out_end {\n                     // Either the left or the right run are exhausted,\n                     // so just copy the remainder from the other run"}]}