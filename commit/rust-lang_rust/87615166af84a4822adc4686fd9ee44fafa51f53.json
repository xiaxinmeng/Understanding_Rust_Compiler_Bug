{"sha": "87615166af84a4822adc4686fd9ee44fafa51f53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjE1MTY2YWY4NGE0ODIyYWRjNDY4NmZkOWVlNDRmYWZhNTFmNTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-22T14:37:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-22T14:37:45Z"}, "message": "Merge #4900\n\n4900: Self variant enum res fix r=BGluth a=BGluth\n\nFixes #4789.\r\n\r\nThis is my first PR for this project, so it's probably worth giving it an extra close look.\r\n\r\nA few things that I wasn't sure about:\r\n- Is `resolve_path` really the best place to perform this check? It seemed like a natural place, but perhaps there's a better place?\r\n- When handling the new variant `PathResolution::VariantDef`, I couldn't see an obvious variant of `TypeNs` to return in `in_type_ns` for Unions and Structs.\n\nCo-authored-by: BGluth <gluthb@gmail.com>", "tree": {"sha": "91494d99d4805fca96815079b8dd29d9d649beea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91494d99d4805fca96815079b8dd29d9d649beea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87615166af84a4822adc4686fd9ee44fafa51f53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8MI5CRBK7hj4Ov3rIwAAdHIIAA2jVH/4U3PDfkJS7S59msoR\ns4xkGMaYQZQ2oSsdT5ZV9hOODUhMGyvH+hPWbpUK9tU7LwksNjZs7drzMpklCTrB\nev/hp33diShSlrYAGZKD6crw5tqTAqlsuvDvgRW4/CCqG8SkxG8Bt6R6P67q6zcA\n+znXZ1dpvXiAx+2LlQqBDY8kVK2ESmhCfl/BLObPB8CsXbwb/+xaupFtzxrdPRou\nfTApSi7kFjBEkFe3+CeAQpFAUXkE56hCNvCjK/QehaOwwhfQIHtU1hC8OM45MFe4\nsORjjk+SbAb2kj2jAAuMKwGeH/4dah++WY0vb5iS41lxioWMUoU/zKFlEX744gE=\n=sgAR\n-----END PGP SIGNATURE-----\n", "payload": "tree 91494d99d4805fca96815079b8dd29d9d649beea\nparent 5a0331e5575034a145956f76316ee0fcdf72077e\nparent bdf7e70820243812dd27d96c38fb6d5db359c2f1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592836665 +0000\ncommitter GitHub <noreply@github.com> 1592836665 +0000\n\nMerge #4900\n\n4900: Self variant enum res fix r=BGluth a=BGluth\n\nFixes #4789.\r\n\r\nThis is my first PR for this project, so it's probably worth giving it an extra close look.\r\n\r\nA few things that I wasn't sure about:\r\n- Is `resolve_path` really the best place to perform this check? It seemed like a natural place, but perhaps there's a better place?\r\n- When handling the new variant `PathResolution::VariantDef`, I couldn't see an obvious variant of `TypeNs` to return in `in_type_ns` for Unions and Structs.\n\nCo-authored-by: BGluth <gluthb@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87615166af84a4822adc4686fd9ee44fafa51f53", "html_url": "https://github.com/rust-lang/rust/commit/87615166af84a4822adc4686fd9ee44fafa51f53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87615166af84a4822adc4686fd9ee44fafa51f53/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0331e5575034a145956f76316ee0fcdf72077e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0331e5575034a145956f76316ee0fcdf72077e", "html_url": "https://github.com/rust-lang/rust/commit/5a0331e5575034a145956f76316ee0fcdf72077e"}, {"sha": "bdf7e70820243812dd27d96c38fb6d5db359c2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf7e70820243812dd27d96c38fb6d5db359c2f1", "html_url": "https://github.com/rust-lang/rust/commit/bdf7e70820243812dd27d96c38fb6d5db359c2f1"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "1d6c471032bd8efd9c03bc4dde82660bb361513d", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/87615166af84a4822adc4686fd9ee44fafa51f53/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87615166af84a4822adc4686fd9ee44fafa51f53/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=87615166af84a4822adc4686fd9ee44fafa51f53", "patch": "@@ -216,13 +216,43 @@ impl SourceAnalyzer {\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_expr(expr_id) {\n                 return Some(PathResolution::AssocItem(assoc.into()));\n             }\n+            if let Some(VariantId::EnumVariantId(variant)) =\n+                self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+            {\n+                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+            }\n         }\n+\n         if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n             let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n                 return Some(PathResolution::AssocItem(assoc.into()));\n             }\n+            if let Some(VariantId::EnumVariantId(variant)) =\n+                self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n+            {\n+                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+            }\n+        }\n+\n+        if let Some(rec_lit) = path.syntax().parent().and_then(ast::RecordLit::cast) {\n+            let expr_id = self.expr_id(db, &rec_lit.into())?;\n+            if let Some(VariantId::EnumVariantId(variant)) =\n+                self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+            {\n+                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+            }\n         }\n+\n+        if let Some(rec_pat) = path.syntax().parent().and_then(ast::RecordPat::cast) {\n+            let pat_id = self.pat_id(&rec_pat.into())?;\n+            if let Some(VariantId::EnumVariantId(variant)) =\n+                self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n+            {\n+                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+            }\n+        }\n+\n         // This must be a normal source file rather than macro file.\n         let hir_path =\n             crate::Path::from_src(path.clone(), &Hygiene::new(db.upcast(), self.file_id))?;"}, {"sha": "450ce0ba7517489035063914193cf3ae3b395bc3", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/87615166af84a4822adc4686fd9ee44fafa51f53/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87615166af84a4822adc4686fd9ee44fafa51f53/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=87615166af84a4822adc4686fd9ee44fafa51f53", "patch": "@@ -908,4 +908,84 @@ mod tests {\n             \"x: i32|x\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_def_for_enum_variant_self_pattern_const() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo {\n+                Bar,\n+            }\n+            impl Foo {\n+                fn baz(self) {\n+                    match self {\n+                        Self::Bar<|> => {}\n+                    }\n+                }\n+            }\n+            \",\n+            \"Bar ENUM_VARIANT FileId(1) 15..18 15..18\",\n+            \"Bar|Bar\",\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_enum_variant_self_pattern_record() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo {\n+                Bar { val: i32 },\n+            }\n+            impl Foo {\n+                fn baz(self) -> i32 {\n+                    match self {\n+                        Self::Bar<|> { val } => {}\n+                    }\n+                }\n+            }\n+            \",\n+            \"Bar ENUM_VARIANT FileId(1) 15..31 15..18\",\n+            \"Bar { val: i32 }|Bar\",\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_enum_variant_self_expr_const() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo {\n+                Bar,\n+            }\n+            impl Foo {\n+                fn baz(self) {\n+                    Self::Bar<|>;\n+                }\n+            }\n+            \",\n+            \"Bar ENUM_VARIANT FileId(1) 15..18 15..18\",\n+            \"Bar|Bar\",\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_enum_variant_self_expr_record() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo {\n+                Bar { val: i32 },\n+            }\n+            impl Foo {\n+                fn baz(self) {\n+                    Self::Bar<|> {val: 4};\n+                }\n+            }\n+            \",\n+            \"Bar ENUM_VARIANT FileId(1) 15..31 15..18\",\n+            \"Bar { val: i32 }|Bar\",\n+        );\n+    }\n }"}]}