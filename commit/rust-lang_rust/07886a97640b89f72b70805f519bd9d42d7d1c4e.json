{"sha": "07886a97640b89f72b70805f519bd9d42d7d1c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ODg2YTk3NjQwYjg5ZjcyYjcwODA1ZjUxOWJkOWQ0MmQ3ZDFjNGU=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-25T03:05:58Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-31T18:55:45Z"}, "message": "Detect also when  works", "tree": {"sha": "a7d01aac1fbce02de3b185900644c883f25b9e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d01aac1fbce02de3b185900644c883f25b9e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07886a97640b89f72b70805f519bd9d42d7d1c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07886a97640b89f72b70805f519bd9d42d7d1c4e", "html_url": "https://github.com/rust-lang/rust/commit/07886a97640b89f72b70805f519bd9d42d7d1c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07886a97640b89f72b70805f519bd9d42d7d1c4e/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "059e8edd15401d5544260e4058731dc8818578d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/059e8edd15401d5544260e4058731dc8818578d5", "html_url": "https://github.com/rust-lang/rust/commit/059e8edd15401d5544260e4058731dc8818578d5"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "f720d14473aff3f3a9e4c114f8c621004b68ad38", "filename": "clippy_lints/src/sort_by_key.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/07886a97640b89f72b70805f519bd9d42d7d1c4e/clippy_lints%2Fsrc%2Fsort_by_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07886a97640b89f72b70805f519bd9d42d7d1c4e/clippy_lints%2Fsrc%2Fsort_by_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsort_by_key.rs?ref=07886a97640b89f72b70805f519bd9d42d7d1c4e", "patch": "@@ -3,7 +3,7 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, QPath};\n+use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Ident;\n@@ -16,7 +16,7 @@ declare_clippy_lint! {\n     /// **Why is this bad?**\n     /// It is more clear to use `Vec::sort_by_key` (or\n     /// `Vec::sort_by_key` and `std::cmp::Reverse` if necessary) than\n-    /// using \n+    /// using\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -36,7 +36,17 @@ declare_clippy_lint! {\n \n declare_lint_pass!(SortByKey => [SORT_BY_KEY]);\n \n-struct LintTrigger {\n+enum LintTrigger {\n+    Sort(SortDetection),\n+    SortByKey(SortByKeyDetection),\n+}\n+\n+struct SortDetection {\n+    vec_name: String,\n+    unstable: bool,\n+}\n+\n+struct SortByKeyDetection {\n     vec_name: String,\n     closure_arg: String,\n     closure_body: String,\n@@ -177,7 +187,18 @@ fn detect_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<LintTrigger>\n             };\n             let vec_name = Sugg::hir(cx, &args[0], \"..\").to_string();\n             let unstable = name == \"sort_unstable_by\";\n-            Some(LintTrigger { vec_name, unstable, closure_arg, closure_body })\n+            if_chain! {\n+                if let ExprKind::Path(QPath::Resolved(_, Path {\n+                    segments: [PathSegment { ident: left_name, .. }], ..\n+                })) = &left_expr.kind;\n+                if left_name == left_ident;\n+                then {\n+                    Some(LintTrigger::Sort(SortDetection { vec_name, unstable }))\n+                }\n+                else {\n+                    Some(LintTrigger::SortByKey(SortByKeyDetection { vec_name, unstable, closure_arg, closure_body }))\n+                }\n+            }\n         } else {\n             None\n         }\n@@ -186,8 +207,8 @@ fn detect_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<LintTrigger>\n \n impl LateLintPass<'_, '_> for SortByKey {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n-        if let Some(trigger) = detect_lint(cx, expr) {\n-            utils::span_lint_and_sugg(\n+        match detect_lint(cx, expr) {\n+            Some(LintTrigger::SortByKey(trigger)) => utils::span_lint_and_sugg(\n                 cx,\n                 SORT_BY_KEY,\n                 expr.span,\n@@ -201,7 +222,21 @@ impl LateLintPass<'_, '_> for SortByKey {\n                     trigger.closure_body,\n                 ),\n                 Applicability::MachineApplicable,\n-            );\n+            ),\n+            Some(LintTrigger::Sort(trigger)) => utils::span_lint_and_sugg(\n+                cx,\n+                SORT_BY_KEY,\n+                expr.span,\n+                \"use Vec::sort here instead\",\n+                \"try\",\n+                format!(\n+                    \"{}.sort{}()\",\n+                    trigger.vec_name,\n+                    if trigger.unstable { \"_unstable\" } else { \"\" },\n+                ),\n+                Applicability::MachineApplicable,\n+            ),\n+            None => {},\n         }\n     }\n }"}, {"sha": "bb88df1a56c9242643ec86874c28dd3ae3bd8774", "filename": "tests/ui/sort_by_key.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07886a97640b89f72b70805f519bd9d42d7d1c4e/tests%2Fui%2Fsort_by_key.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07886a97640b89f72b70805f519bd9d42d7d1c4e/tests%2Fui%2Fsort_by_key.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsort_by_key.fixed?ref=07886a97640b89f72b70805f519bd9d42d7d1c4e", "patch": "@@ -10,7 +10,7 @@ fn id(x: isize) -> isize {\n fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n     // Forward examples\n-    vec.sort_by_key(|&a| a);\n+    vec.sort();\n     vec.sort_by_key(|&a| (a + 5).abs());\n     vec.sort_by_key(|&a| id(-a));\n     // Reverse examples"}, {"sha": "291fd5500f7901f7c54aae46a3d3961c3a38b511", "filename": "tests/ui/sort_by_key.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07886a97640b89f72b70805f519bd9d42d7d1c4e/tests%2Fui%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07886a97640b89f72b70805f519bd9d42d7d1c4e/tests%2Fui%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsort_by_key.stderr?ref=07886a97640b89f72b70805f519bd9d42d7d1c4e", "patch": "@@ -1,8 +1,8 @@\n-error: use Vec::sort_by_key here instead\n+error: use Vec::sort here instead\n   --> $DIR/sort_by_key.rs:13:5\n    |\n LL |     vec.sort_by(|a, b| a.cmp(b));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&a| a)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort()`\n    |\n    = note: `-D clippy::sort-by-key` implied by `-D warnings`\n "}]}