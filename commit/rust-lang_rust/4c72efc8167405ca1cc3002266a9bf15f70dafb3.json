{"sha": "4c72efc8167405ca1cc3002266a9bf15f70dafb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNzJlZmM4MTY3NDA1Y2ExY2MzMDAyMjY2YTliZjE1ZjcwZGFmYjM=", "commit": {"author": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2021-05-06T12:33:23Z"}, "committer": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2021-05-07T16:29:25Z"}, "message": "Fix impl type parameter suggestion involving consts", "tree": {"sha": "8442191074b8b2a1bffc030044ca565f3fb044be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8442191074b8b2a1bffc030044ca565f3fb044be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c72efc8167405ca1cc3002266a9bf15f70dafb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c72efc8167405ca1cc3002266a9bf15f70dafb3", "html_url": "https://github.com/rust-lang/rust/commit/4c72efc8167405ca1cc3002266a9bf15f70dafb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c72efc8167405ca1cc3002266a9bf15f70dafb3/comments", "author": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb94fbbeb703806817a09806365e26a18f5daa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb94fbbeb703806817a09806365e26a18f5daa4", "html_url": "https://github.com/rust-lang/rust/commit/1bb94fbbeb703806817a09806365e26a18f5daa4"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "28d636ef1b21eab71fe7989a220c82b673e86148", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c72efc8167405ca1cc3002266a9bf15f70dafb3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c72efc8167405ca1cc3002266a9bf15f70dafb3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4c72efc8167405ca1cc3002266a9bf15f70dafb3", "patch": "@@ -6,7 +6,10 @@ use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n use rustc_ast::visit::FnKind;\n-use rustc_ast::{self as ast, Expr, ExprKind, Item, ItemKind, NodeId, Path, Ty, TyKind};\n+use rustc_ast::{\n+    self as ast, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind, NodeId, Path, Ty,\n+    TyKind,\n+};\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n@@ -1635,6 +1638,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     let (span, sugg) = if let [.., param] = &generics.params[..] {\n                         let span = if let [.., bound] = &param.bounds[..] {\n                             bound.span()\n+                        } else if let GenericParam {\n+                            kind: GenericParamKind::Const { ty, kw_span: _, default  }, ..\n+                        } = param {\n+                            default.as_ref().map(|def| def.value.span).unwrap_or(ty.span)\n                         } else {\n                             param.ident.span\n                         };"}, {"sha": "2e3132c2eb7b640072a2d1985414a4a0951a7149", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c72efc8167405ca1cc3002266a9bf15f70dafb3/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c72efc8167405ca1cc3002266a9bf15f70dafb3/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=4c72efc8167405ca1cc3002266a9bf15f70dafb3", "patch": "@@ -31,8 +31,8 @@ LL | impl<const N: u8> Foo for C<N, A> {}\n    |                                ^\n help: you might be missing a type parameter\n    |\n-LL | impl<const N, T: u8> Foo for C<N, T> {}\n-   |             ^^^\n+LL | impl<const N: u8, T> Foo for C<N, T> {}\n+   |                 ^^^\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/diagnostics.rs:7:16"}, {"sha": "15dc5ef797b631c59fa67f85d17cbb76d801a3cd", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c72efc8167405ca1cc3002266a9bf15f70dafb3/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c72efc8167405ca1cc3002266a9bf15f70dafb3/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs?ref=4c72efc8167405ca1cc3002266a9bf15f70dafb3", "patch": "@@ -11,7 +11,11 @@ impl<T, const A: u8 = 2> X<N> {}\n //~| ERROR defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| ERROR unresolved item provided when a constant was expected\n \n-fn bar<const N: u8>(a: A) {}\n+fn foo(_: T) where T: Send {}\n+//~^ ERROR cannot find type `T` in this scope\n+//~| ERROR cannot find type `T` in this scope\n+\n+fn bar<const N: u8>(_: A) {}\n //~^ ERROR cannot find type `A` in this scope\n \n fn main() {"}, {"sha": "985a9bb2a3f6a8867c8ad9c386f8a68619b126c6", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4c72efc8167405ca1cc3002266a9bf15f70dafb3/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c72efc8167405ca1cc3002266a9bf15f70dafb3/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr?ref=4c72efc8167405ca1cc3002266a9bf15f70dafb3", "patch": "@@ -30,26 +30,62 @@ LL | impl<T, const A: u8 = 2> X<T> {}\n    |                            ^\n help: you might be missing a type parameter\n    |\n-LL | impl<T, const A, N: u8 = 2> X<N> {}\n-   |                ^^^\n+LL | impl<T, const A: u8 = 2, N> X<N> {}\n+   |                        ^^^\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/missing-type-parameter2.rs:14:20\n+   |\n+LL | struct X<const N: u8>();\n+   | ------------------------ similarly named struct `X` defined here\n+...\n+LL | fn foo(_: T) where T: Send {}\n+   |                    ^\n+   |\n+help: a struct with a similar name exists\n+   |\n+LL | fn foo(_: T) where X: Send {}\n+   |                    ^\n+help: you might be missing a type parameter\n+   |\n+LL | fn foo<T>(_: T) where T: Send {}\n+   |       ^^^\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/missing-type-parameter2.rs:14:11\n+   |\n+LL | struct X<const N: u8>();\n+   | ------------------------ similarly named struct `X` defined here\n+...\n+LL | fn foo(_: T) where T: Send {}\n+   |           ^\n+   |\n+help: a struct with a similar name exists\n+   |\n+LL | fn foo(_: X) where T: Send {}\n+   |           ^\n+help: you might be missing a type parameter\n+   |\n+LL | fn foo<T>(_: T) where T: Send {}\n+   |       ^^^\n \n error[E0412]: cannot find type `A` in this scope\n-  --> $DIR/missing-type-parameter2.rs:14:24\n+  --> $DIR/missing-type-parameter2.rs:18:24\n    |\n LL | struct X<const N: u8>();\n    | ------------------------ similarly named struct `X` defined here\n ...\n-LL | fn bar<const N: u8>(a: A) {}\n+LL | fn bar<const N: u8>(_: A) {}\n    |                        ^\n    |\n help: a struct with a similar name exists\n    |\n-LL | fn bar<const N: u8>(a: X) {}\n+LL | fn bar<const N: u8>(_: X) {}\n    |                        ^\n help: you might be missing a type parameter\n    |\n-LL | fn bar<const N, A: u8>(a: A) {}\n-   |               ^^^\n+LL | fn bar<const N: u8, A>(_: A) {}\n+   |                   ^^^\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/missing-type-parameter2.rs:6:8\n@@ -79,7 +115,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL | impl<T, const A: u8 = 2> X<{ N }> {}\n    |                            ^   ^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0412, E0747.\n For more information about an error, try `rustc --explain E0412`."}]}