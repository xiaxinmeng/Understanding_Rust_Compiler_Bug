{"sha": "09e6c239f346100328cc69787604ac72737c30f2", "node_id": "C_kwDOAAsO6NoAKDA5ZTZjMjM5ZjM0NjEwMDMyOGNjNjk3ODc2MDRhYzcyNzM3YzMwZjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T11:32:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T11:32:06Z"}, "message": "Auto merge of #9549 - royrustdev:manual_saturating_add, r=llogiq\n\nnew `implicit_saturating_add` lint\n\nThis fixes #9393\n\nIf you added a new lint, here's a checklist for things that will be\nchecked during review or continuous integration.\n\n- \\[x] Followed [lint naming conventions][lint_naming]\n- \\[x] Added passing UI tests (including committed `.stderr` file)\n- \\[x] `cargo test` passes locally\n- \\[x] Executed `cargo dev update_lints`\n- \\[x] Added lint documentation\n- \\[x] Run `cargo dev fmt`\n\n---\n\nchangelog: add [`manual_saturating_add`] lint", "tree": {"sha": "40446841cf2223854bd95efca364cb472fc1f64c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40446841cf2223854bd95efca364cb472fc1f64c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e6c239f346100328cc69787604ac72737c30f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e6c239f346100328cc69787604ac72737c30f2", "html_url": "https://github.com/rust-lang/rust/commit/09e6c239f346100328cc69787604ac72737c30f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e6c239f346100328cc69787604ac72737c30f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18e10ca29092c01115e0771e0d6753ab9dfb0ff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e10ca29092c01115e0771e0d6753ab9dfb0ff1", "html_url": "https://github.com/rust-lang/rust/commit/18e10ca29092c01115e0771e0d6753ab9dfb0ff1"}, {"sha": "f1c831ad176b853d074563acda9c58566233e123", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c831ad176b853d074563acda9c58566233e123", "html_url": "https://github.com/rust-lang/rust/commit/f1c831ad176b853d074563acda9c58566233e123"}], "stats": {"total": 598, "additions": 598, "deletions": 0}, "files": [{"sha": "bfeb009727b5b1c4d4c1f9505cb6652fd1be3e91", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -3917,6 +3917,7 @@ Released 2018-09-13\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n+[`implicit_saturating_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_add\n [`implicit_saturating_sub`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_sub\n [`imprecise_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#imprecise_flops\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping"}, {"sha": "bf1351829c6a5e2e61755dc873df6494e5009ab5", "filename": "clippy_lints/src/implicit_saturating_add.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -0,0 +1,114 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::get_parent_expr;\n+use clippy_utils::source::snippet_with_applicability;\n+use if_chain::if_chain;\n+use rustc_ast::ast::{LitIntType, LitKind};\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, Stmt, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{Int, IntTy, Ty, Uint, UintTy};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for implicit saturating addition.\n+    ///\n+    /// ### Why is this bad?\n+    /// The built-in function is more readable and may be faster.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    ///let mut u:u32 = 7000;\n+    ///\n+    /// if u != u32::MAX {\n+    ///     u += 1;\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    ///let mut u:u32 = 7000;\n+    ///\n+    /// u = u.saturating_add(1);\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub IMPLICIT_SATURATING_ADD,\n+    style,\n+    \"Perform saturating addition instead of implicitly checking max bound of data type\"\n+}\n+declare_lint_pass!(ImplicitSaturatingAdd => [IMPLICIT_SATURATING_ADD]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingAdd {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if_chain! {\n+            if let ExprKind::If(cond, then, None) = expr.kind;\n+            if let ExprKind::DropTemps(expr1) = cond.kind;\n+            if let Some((c, op_node, l)) = get_const(cx, expr1);\n+            if let BinOpKind::Ne | BinOpKind::Lt = op_node;\n+            if let ExprKind::Block(block, None) = then.kind;\n+            if let Block {\n+                stmts:\n+                    [Stmt\n+                        { kind: StmtKind::Expr(ex) | StmtKind::Semi(ex), .. }],\n+                        expr: None, ..} |\n+                        Block { stmts: [], expr: Some(ex), ..} = block;\n+            if let ExprKind::AssignOp(op1, target, value) = ex.kind;\n+            let ty = cx.typeck_results().expr_ty(target);\n+            if Some(c) == get_int_max(ty);\n+            if clippy_utils::SpanlessEq::new(cx).eq_expr(l, target);\n+            if BinOpKind::Add == op1.node;\n+            if let ExprKind::Lit(ref lit) = value.kind;\n+            if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;\n+            if block.expr.is_none();\n+            then {\n+                let mut app = Applicability::MachineApplicable;\n+                let code = snippet_with_applicability(cx, target.span, \"_\", &mut app);\n+                let sugg = if let Some(parent) = get_parent_expr(cx, expr) && let ExprKind::If(_cond, _then, Some(else_)) = parent.kind && else_.hir_id == expr.hir_id {format!(\"{{{code} = {code}.saturating_add(1); }}\")} else {format!(\"{code} = {code}.saturating_add(1);\")};\n+                span_lint_and_sugg(cx, IMPLICIT_SATURATING_ADD, expr.span, \"manual saturating add detected\", \"use instead\", sugg, app);\n+            }\n+        }\n+    }\n+}\n+\n+fn get_int_max(ty: Ty<'_>) -> Option<u128> {\n+    match ty.peel_refs().kind() {\n+        Int(IntTy::I8) => i8::max_value().try_into().ok(),\n+        Int(IntTy::I16) => i16::max_value().try_into().ok(),\n+        Int(IntTy::I32) => i32::max_value().try_into().ok(),\n+        Int(IntTy::I64) => i64::max_value().try_into().ok(),\n+        Int(IntTy::I128) => i128::max_value().try_into().ok(),\n+        Int(IntTy::Isize) => isize::max_value().try_into().ok(),\n+        Uint(UintTy::U8) => u8::max_value().try_into().ok(),\n+        Uint(UintTy::U16) => u16::max_value().try_into().ok(),\n+        Uint(UintTy::U32) => u32::max_value().try_into().ok(),\n+        Uint(UintTy::U64) => u64::max_value().try_into().ok(),\n+        Uint(UintTy::U128) => Some(u128::max_value()),\n+        Uint(UintTy::Usize) => usize::max_value().try_into().ok(),\n+        _ => None,\n+    }\n+}\n+\n+fn get_const<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<(u128, BinOpKind, &'tcx Expr<'tcx>)> {\n+    if let ExprKind::Binary(op, l, r) = expr.kind {\n+        let tr = cx.typeck_results();\n+        if let Some((Constant::Int(c), _)) = constant(cx, tr, r) {\n+            return Some((c, op.node, l));\n+        };\n+        if let Some((Constant::Int(c), _)) = constant(cx, tr, l) {\n+            return Some((c, invert_op(op.node)?, r));\n+        }\n+    }\n+    None\n+}\n+\n+fn invert_op(op: BinOpKind) -> Option<BinOpKind> {\n+    use rustc_hir::BinOpKind::{Ge, Gt, Le, Lt, Ne};\n+    match op {\n+        Lt => Some(Gt),\n+        Le => Some(Ge),\n+        Ne => Some(Ne),\n+        Ge => Some(Le),\n+        Gt => Some(Lt),\n+        _ => None,\n+    }\n+}"}, {"sha": "642d7070fb6ba303fe83d38ec12e62945a0d3469", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -85,6 +85,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n+    LintId::of(implicit_saturating_add::IMPLICIT_SATURATING_ADD),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n     LintId::of(infinite_iter::INFINITE_ITER),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),"}, {"sha": "08eb6c2b39bc4e082e273495ad3f86ed7be69763", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -184,6 +184,7 @@ store.register_lints(&[\n     if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n     implicit_hasher::IMPLICIT_HASHER,\n     implicit_return::IMPLICIT_RETURN,\n+    implicit_saturating_add::IMPLICIT_SATURATING_ADD,\n     implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n     inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n     index_refutable_slice::INDEX_REFUTABLE_SLICE,"}, {"sha": "6d5483bc701023e47b94a799dc7115f7f1d5b542", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -29,6 +29,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n+    LintId::of(implicit_saturating_add::IMPLICIT_SATURATING_ADD),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),"}, {"sha": "e5d26ac22a7451c940f748e740046bb715e852a0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -238,6 +238,7 @@ mod if_not_else;\n mod if_then_some_else_none;\n mod implicit_hasher;\n mod implicit_return;\n+mod implicit_saturating_add;\n mod implicit_saturating_sub;\n mod inconsistent_struct_constructor;\n mod index_refutable_slice;\n@@ -904,6 +905,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(multi_assignments::MultiAssignments));\n     store.register_late_pass(|_| Box::new(bool_to_int_with_if::BoolToIntWithIf));\n     store.register_late_pass(|_| Box::new(box_default::BoxDefault));\n+    store.register_late_pass(|_| Box::new(implicit_saturating_add::ImplicitSaturatingAdd));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "1b727e1a100490432fbaecf98917ed3f0bdbc599", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -191,6 +191,7 @@ docs! {\n     \"implicit_clone\",\n     \"implicit_hasher\",\n     \"implicit_return\",\n+    \"implicit_saturating_add\",\n     \"implicit_saturating_sub\",\n     \"imprecise_flops\",\n     \"inconsistent_digit_grouping\","}, {"sha": "5883a5363e2b67baf07c7ad47c6c3106d56ae016", "filename": "src/docs/implicit_saturating_add.txt", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/src%2Fdocs%2Fimplicit_saturating_add.txt", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/src%2Fdocs%2Fimplicit_saturating_add.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fimplicit_saturating_add.txt?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -0,0 +1,20 @@\n+### What it does\n+Checks for implicit saturating addition.\n+\n+### Why is this bad?\n+The built-in function is more readable and may be faster.\n+\n+### Example\n+```\n+let mut u:u32 = 7000;\n+\n+if u != u32::MAX {\n+    u += 1;\n+}\n+```\n+Use instead:\n+```\n+let mut u:u32 = 7000;\n+\n+u = u.saturating_add(1);\n+```\n\\ No newline at end of file"}, {"sha": "7d363d59a6f095a8d1cadddae947437e9bdd4a12", "filename": "tests/ui/implicit_saturating_add.fixed", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/tests%2Fui%2Fimplicit_saturating_add.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/tests%2Fui%2Fimplicit_saturating_add.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_add.fixed?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -0,0 +1,106 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::implicit_saturating_add)]\n+\n+fn main() {\n+    let mut u_8: u8 = 255;\n+    let mut u_16: u16 = 500;\n+    let mut u_32: u32 = 7000;\n+    let mut u_64: u64 = 7000;\n+    let mut i_8: i8 = 30;\n+    let mut i_16: i16 = 500;\n+    let mut i_32: i32 = 7000;\n+    let mut i_64: i64 = 7000;\n+\n+    if i_8 < 42 {\n+        i_8 += 1;\n+    }\n+    if i_8 != 42 {\n+        i_8 += 1;\n+    }\n+\n+    u_8 = u_8.saturating_add(1);\n+\n+    u_8 = u_8.saturating_add(1);\n+\n+    if u_8 < 15 {\n+        u_8 += 1;\n+    }\n+\n+    u_16 = u_16.saturating_add(1);\n+\n+    u_16 = u_16.saturating_add(1);\n+\n+    u_16 = u_16.saturating_add(1);\n+\n+    u_32 = u_32.saturating_add(1);\n+\n+    u_32 = u_32.saturating_add(1);\n+\n+    u_32 = u_32.saturating_add(1);\n+\n+    u_64 = u_64.saturating_add(1);\n+\n+    u_64 = u_64.saturating_add(1);\n+\n+    u_64 = u_64.saturating_add(1);\n+\n+    i_8 = i_8.saturating_add(1);\n+\n+    i_8 = i_8.saturating_add(1);\n+\n+    i_8 = i_8.saturating_add(1);\n+\n+    i_16 = i_16.saturating_add(1);\n+\n+    i_16 = i_16.saturating_add(1);\n+\n+    i_16 = i_16.saturating_add(1);\n+\n+    i_32 = i_32.saturating_add(1);\n+\n+    i_32 = i_32.saturating_add(1);\n+\n+    i_32 = i_32.saturating_add(1);\n+\n+    i_64 = i_64.saturating_add(1);\n+\n+    i_64 = i_64.saturating_add(1);\n+\n+    i_64 = i_64.saturating_add(1);\n+\n+    if i_64 < 42 {\n+        i_64 += 1;\n+    }\n+\n+    if 42 > i_64 {\n+        i_64 += 1;\n+    }\n+\n+    let a = 12;\n+    let mut b = 8;\n+\n+    if a < u8::MAX {\n+        b += 1;\n+    }\n+\n+    if u8::MAX > a {\n+        b += 1;\n+    }\n+\n+    if u_32 < u32::MAX {\n+        u_32 += 1;\n+    } else {\n+        println!(\"don't lint this\");\n+    }\n+\n+    if u_32 < u32::MAX {\n+        println!(\"don't lint this\");\n+        u_32 += 1;\n+    }\n+\n+    if u_32 < 42 {\n+        println!(\"brace yourself!\");\n+    } else {u_32 = u_32.saturating_add(1); }\n+}"}, {"sha": "31a5916277fa773aa5ef88197898e3ad045401ad", "filename": "tests/ui/implicit_saturating_add.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/tests%2Fui%2Fimplicit_saturating_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/tests%2Fui%2Fimplicit_saturating_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_add.rs?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -0,0 +1,154 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::implicit_saturating_add)]\n+\n+fn main() {\n+    let mut u_8: u8 = 255;\n+    let mut u_16: u16 = 500;\n+    let mut u_32: u32 = 7000;\n+    let mut u_64: u64 = 7000;\n+    let mut i_8: i8 = 30;\n+    let mut i_16: i16 = 500;\n+    let mut i_32: i32 = 7000;\n+    let mut i_64: i64 = 7000;\n+\n+    if i_8 < 42 {\n+        i_8 += 1;\n+    }\n+    if i_8 != 42 {\n+        i_8 += 1;\n+    }\n+\n+    if u_8 != u8::MAX {\n+        u_8 += 1;\n+    }\n+\n+    if u_8 < u8::MAX {\n+        u_8 += 1;\n+    }\n+\n+    if u_8 < 15 {\n+        u_8 += 1;\n+    }\n+\n+    if u_16 != u16::MAX {\n+        u_16 += 1;\n+    }\n+\n+    if u_16 < u16::MAX {\n+        u_16 += 1;\n+    }\n+\n+    if u16::MAX > u_16 {\n+        u_16 += 1;\n+    }\n+\n+    if u_32 != u32::MAX {\n+        u_32 += 1;\n+    }\n+\n+    if u_32 < u32::MAX {\n+        u_32 += 1;\n+    }\n+\n+    if u32::MAX > u_32 {\n+        u_32 += 1;\n+    }\n+\n+    if u_64 != u64::MAX {\n+        u_64 += 1;\n+    }\n+\n+    if u_64 < u64::MAX {\n+        u_64 += 1;\n+    }\n+\n+    if u64::MAX > u_64 {\n+        u_64 += 1;\n+    }\n+\n+    if i_8 != i8::MAX {\n+        i_8 += 1;\n+    }\n+\n+    if i_8 < i8::MAX {\n+        i_8 += 1;\n+    }\n+\n+    if i8::MAX > i_8 {\n+        i_8 += 1;\n+    }\n+\n+    if i_16 != i16::MAX {\n+        i_16 += 1;\n+    }\n+\n+    if i_16 < i16::MAX {\n+        i_16 += 1;\n+    }\n+\n+    if i16::MAX > i_16 {\n+        i_16 += 1;\n+    }\n+\n+    if i_32 != i32::MAX {\n+        i_32 += 1;\n+    }\n+\n+    if i_32 < i32::MAX {\n+        i_32 += 1;\n+    }\n+\n+    if i32::MAX > i_32 {\n+        i_32 += 1;\n+    }\n+\n+    if i_64 != i64::MAX {\n+        i_64 += 1;\n+    }\n+\n+    if i_64 < i64::MAX {\n+        i_64 += 1;\n+    }\n+\n+    if i64::MAX > i_64 {\n+        i_64 += 1;\n+    }\n+\n+    if i_64 < 42 {\n+        i_64 += 1;\n+    }\n+\n+    if 42 > i_64 {\n+        i_64 += 1;\n+    }\n+\n+    let a = 12;\n+    let mut b = 8;\n+\n+    if a < u8::MAX {\n+        b += 1;\n+    }\n+\n+    if u8::MAX > a {\n+        b += 1;\n+    }\n+\n+    if u_32 < u32::MAX {\n+        u_32 += 1;\n+    } else {\n+        println!(\"don't lint this\");\n+    }\n+\n+    if u_32 < u32::MAX {\n+        println!(\"don't lint this\");\n+        u_32 += 1;\n+    }\n+\n+    if u_32 < 42 {\n+        println!(\"brace yourself!\");\n+    } else if u_32 < u32::MAX {\n+        u_32 += 1;\n+    }\n+}"}, {"sha": "42ae1b488853da04d61d37e3c972a40c94d876cf", "filename": "tests/ui/implicit_saturating_add.stderr", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/09e6c239f346100328cc69787604ac72737c30f2/tests%2Fui%2Fimplicit_saturating_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09e6c239f346100328cc69787604ac72737c30f2/tests%2Fui%2Fimplicit_saturating_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_add.stderr?ref=09e6c239f346100328cc69787604ac72737c30f2", "patch": "@@ -0,0 +1,197 @@\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:23:5\n+   |\n+LL | /     if u_8 != u8::MAX {\n+LL | |         u_8 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_8 = u_8.saturating_add(1);`\n+   |\n+   = note: `-D clippy::implicit-saturating-add` implied by `-D warnings`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:27:5\n+   |\n+LL | /     if u_8 < u8::MAX {\n+LL | |         u_8 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_8 = u_8.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:35:5\n+   |\n+LL | /     if u_16 != u16::MAX {\n+LL | |         u_16 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_16 = u_16.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:39:5\n+   |\n+LL | /     if u_16 < u16::MAX {\n+LL | |         u_16 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_16 = u_16.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:43:5\n+   |\n+LL | /     if u16::MAX > u_16 {\n+LL | |         u_16 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_16 = u_16.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:47:5\n+   |\n+LL | /     if u_32 != u32::MAX {\n+LL | |         u_32 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_32 = u_32.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:51:5\n+   |\n+LL | /     if u_32 < u32::MAX {\n+LL | |         u_32 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_32 = u_32.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:55:5\n+   |\n+LL | /     if u32::MAX > u_32 {\n+LL | |         u_32 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_32 = u_32.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:59:5\n+   |\n+LL | /     if u_64 != u64::MAX {\n+LL | |         u_64 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_64 = u_64.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:63:5\n+   |\n+LL | /     if u_64 < u64::MAX {\n+LL | |         u_64 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_64 = u_64.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:67:5\n+   |\n+LL | /     if u64::MAX > u_64 {\n+LL | |         u_64 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `u_64 = u_64.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:71:5\n+   |\n+LL | /     if i_8 != i8::MAX {\n+LL | |         i_8 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_8 = i_8.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:75:5\n+   |\n+LL | /     if i_8 < i8::MAX {\n+LL | |         i_8 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_8 = i_8.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:79:5\n+   |\n+LL | /     if i8::MAX > i_8 {\n+LL | |         i_8 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_8 = i_8.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:83:5\n+   |\n+LL | /     if i_16 != i16::MAX {\n+LL | |         i_16 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_16 = i_16.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:87:5\n+   |\n+LL | /     if i_16 < i16::MAX {\n+LL | |         i_16 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_16 = i_16.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:91:5\n+   |\n+LL | /     if i16::MAX > i_16 {\n+LL | |         i_16 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_16 = i_16.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:95:5\n+   |\n+LL | /     if i_32 != i32::MAX {\n+LL | |         i_32 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_32 = i_32.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:99:5\n+   |\n+LL | /     if i_32 < i32::MAX {\n+LL | |         i_32 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_32 = i_32.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:103:5\n+   |\n+LL | /     if i32::MAX > i_32 {\n+LL | |         i_32 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_32 = i_32.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:107:5\n+   |\n+LL | /     if i_64 != i64::MAX {\n+LL | |         i_64 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_64 = i_64.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:111:5\n+   |\n+LL | /     if i_64 < i64::MAX {\n+LL | |         i_64 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_64 = i_64.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:115:5\n+   |\n+LL | /     if i64::MAX > i_64 {\n+LL | |         i_64 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `i_64 = i_64.saturating_add(1);`\n+\n+error: manual saturating add detected\n+  --> $DIR/implicit_saturating_add.rs:151:12\n+   |\n+LL |       } else if u_32 < u32::MAX {\n+   |  ____________^\n+LL | |         u_32 += 1;\n+LL | |     }\n+   | |_____^ help: use instead: `{u_32 = u_32.saturating_add(1); }`\n+\n+error: aborting due to 24 previous errors\n+"}]}