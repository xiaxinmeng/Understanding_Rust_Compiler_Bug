{"sha": "732b7edfab46b33e3861172eb867b139a9425574", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMmI3ZWRmYWI0NmIzM2UzODYxMTcyZWI4NjdiMTM5YTk0MjU1NzQ=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-24T00:43:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-24T00:43:53Z"}, "message": "Add fmt and clippy to CI (#147)\n\n* Add fmt and clippy to CI\r\n* Add rust components\r\n* Fix formatting", "tree": {"sha": "cb723f028845a5a981e81eb217c25d3aab8782ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb723f028845a5a981e81eb217c25d3aab8782ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/732b7edfab46b33e3861172eb867b139a9425574", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+2JJCRBK7hj4Ov3rIwAALK8IAH+c0FrH/igxTEhv2QgFGyf+\nIcnyTGASqkzWO1UGJSL8IAwYvavAyZZunrVRH+QpZfe6ZWlgbfiXf/ngP+cVLHKC\nzjUPD1WAac2uvE4WhsFm07DZrpYDm9nsMFUgqnbztLFYkKOyUqrMDOgp2UruatWs\nV3HfRwFRwyQ+qGqa5YUgYbUXLSBzIzghoUZcrqtK54qLWgNG+UQcwIzuiXrhKzq2\nUFL5KTaK9THpKku1tDdylPfc4CSz4qxXsVL1fEfhQzoWdaxmqZKr5rUog38IJ1Jc\njb8NaD1YcE+zLrqfpx6uH487OLLIZWBPhHoXYQTZnqSjc7ucyAaa0mnQWcDIV+8=\n=pnEw\n-----END PGP SIGNATURE-----\n", "payload": "tree cb723f028845a5a981e81eb217c25d3aab8782ff\nparent be96995d8ddec03fac9a0caf4d4c51c7fbc33507\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1627087433 -0400\ncommitter GitHub <noreply@github.com> 1627087433 -0700\n\nAdd fmt and clippy to CI (#147)\n\n* Add fmt and clippy to CI\r\n* Add rust components\r\n* Fix formatting"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/732b7edfab46b33e3861172eb867b139a9425574", "html_url": "https://github.com/rust-lang/rust/commit/732b7edfab46b33e3861172eb867b139a9425574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/732b7edfab46b33e3861172eb867b139a9425574/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "url": "https://api.github.com/repos/rust-lang/rust/commits/be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "html_url": "https://github.com/rust-lang/rust/commit/be96995d8ddec03fac9a0caf4d4c51c7fbc33507"}], "stats": {"total": 270, "additions": 161, "deletions": 109}, "files": [{"sha": "9c62a6d40aee63b028942ed72c1e1cf51b59990b", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -11,6 +11,53 @@ env:\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:\n+  rustfmt:\n+    name: \"rustfmt\"\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Setup Rust\n+        run: |\n+          rustup update nightly --no-self-update\n+          rustup default nightly\n+          rustup component add rustfmt\n+      - name: Run rustfmt\n+        run: cargo fmt --all -- --check\n+\n+  clippy:\n+    name: \"clippy on ${{ matrix.target }}\"\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        target:\n+          # We shouldn't really have any OS-specific code, so think of this as a list of architectures\n+          - x86_64-unknown-linux-gnu\n+          - i686-unknown-linux-gnu\n+          - i586-unknown-linux-gnu\n+          - aarch64-unknown-linux-gnu\n+          - armv7-unknown-linux-gnueabihf\n+          - mips-unknown-linux-gnu\n+          - mips64-unknown-linux-gnuabi64\n+          - powerpc-unknown-linux-gnu\n+          - powerpc64-unknown-linux-gnu\n+          - riscv64gc-unknown-linux-gnu\n+          - s390x-unknown-linux-gnu\n+          - sparc64-unknown-linux-gnu\n+          - wasm32-unknown-unknown\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Setup Rust\n+        run: |\n+          rustup update nightly --no-self-update\n+          rustup default nightly\n+          rustup target add ${{ matrix.target }}\n+          rustup component add clippy\n+      - name: Run Clippy\n+        run: cargo clippy --all-targets --target ${{ matrix.target }}\n+\n   x86-tests:\n     name: \"${{ matrix.target_feature }} on ${{ matrix.target }}\"\n     runs-on: ${{ matrix.os }}"}, {"sha": "29bdc512d77df08e45654fcb793495b72a0e7211", "filename": "crates/core_simd/examples/matrix_inversion.rs", "status": "modified", "additions": 93, "deletions": 92, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -1,10 +1,7 @@\n //! 4x4 matrix inverse\n // Code ported from the `packed_simd` crate\n // Run this code with `cargo test --example matrix_inversion`\n-#![feature(\n-    array_chunks,\n-    portable_simd,\n-)]\n+#![feature(array_chunks, portable_simd)]\n use core_simd::*;\n \n // Gotta define our own 4x4 matrix since Rust doesn't ship multidim arrays yet :^)\n@@ -15,27 +12,29 @@ pub struct Matrix4x4([[f32; 4]; 4]);\n pub fn scalar_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n     let m = m.0;\n \n+    #[rustfmt::skip]\n     let mut inv = [\n-        [ // row 0:\n+        // row 0:\n+        [\n             // 0,0:\n-            m[1][1]  * m[2][2] * m[3][3] -\n-            m[1][1]  * m[2][3] * m[3][2] -\n-            m[2][1]  * m[1][2]  * m[3][3] +\n-            m[2][1]  * m[1][3]  * m[3][2] +\n-            m[3][1] * m[1][2]  * m[2][3] -\n-            m[3][1] * m[1][3]  * m[2][2],\n+            m[1][1] * m[2][2] * m[3][3] -\n+            m[1][1] * m[2][3] * m[3][2] -\n+            m[2][1] * m[1][2] * m[3][3] +\n+            m[2][1] * m[1][3] * m[3][2] +\n+            m[3][1] * m[1][2] * m[2][3] -\n+            m[3][1] * m[1][3] * m[2][2],\n             // 0,1:\n-           -m[0][1]  * m[2][2] * m[3][3] +\n-            m[0][1]  * m[2][3] * m[3][2] +\n-            m[2][1]  * m[0][2] * m[3][3] -\n-            m[2][1]  * m[0][3] * m[3][2] -\n+           -m[0][1] * m[2][2] * m[3][3] +\n+            m[0][1] * m[2][3] * m[3][2] +\n+            m[2][1] * m[0][2] * m[3][3] -\n+            m[2][1] * m[0][3] * m[3][2] -\n             m[3][1] * m[0][2] * m[2][3] +\n             m[3][1] * m[0][3] * m[2][2],\n             // 0,2:\n-            m[0][1]  * m[1][2] * m[3][3] -\n-            m[0][1]  * m[1][3] * m[3][2] -\n-            m[1][1]  * m[0][2] * m[3][3] +\n-            m[1][1]  * m[0][3] * m[3][2] +\n+            m[0][1] * m[1][2] * m[3][3] -\n+            m[0][1] * m[1][3] * m[3][2] -\n+            m[1][1] * m[0][2] * m[3][3] +\n+            m[1][1] * m[0][3] * m[3][2] +\n             m[3][1] * m[0][2] * m[1][3] -\n             m[3][1] * m[0][3] * m[1][2],\n             // 0,3:\n@@ -46,26 +45,27 @@ pub fn scalar_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n             m[2][1] * m[0][2] * m[1][3] +\n             m[2][1] * m[0][3] * m[1][2],\n         ],\n-        [ // row 1\n+        // row 1\n+        [\n             // 1,0:\n-           -m[1][0]  * m[2][2] * m[3][3] +\n-            m[1][0]  * m[2][3] * m[3][2] +\n-            m[2][0]  * m[1][2]  * m[3][3] -\n-            m[2][0]  * m[1][3]  * m[3][2] -\n-            m[3][0] * m[1][2]  * m[2][3] +\n-            m[3][0] * m[1][3]  * m[2][2],\n+           -m[1][0] * m[2][2] * m[3][3] +\n+            m[1][0] * m[2][3] * m[3][2] +\n+            m[2][0] * m[1][2] * m[3][3] -\n+            m[2][0] * m[1][3] * m[3][2] -\n+            m[3][0] * m[1][2] * m[2][3] +\n+            m[3][0] * m[1][3] * m[2][2],\n             // 1,1:\n-            m[0][0]  * m[2][2] * m[3][3] -\n-            m[0][0]  * m[2][3] * m[3][2] -\n-            m[2][0]  * m[0][2] * m[3][3] +\n-            m[2][0]  * m[0][3] * m[3][2] +\n+            m[0][0] * m[2][2] * m[3][3] -\n+            m[0][0] * m[2][3] * m[3][2] -\n+            m[2][0] * m[0][2] * m[3][3] +\n+            m[2][0] * m[0][3] * m[3][2] +\n             m[3][0] * m[0][2] * m[2][3] -\n             m[3][0] * m[0][3] * m[2][2],\n             // 1,2:\n-           -m[0][0]  * m[1][2] * m[3][3] +\n-            m[0][0]  * m[1][3] * m[3][2] +\n-            m[1][0]  * m[0][2] * m[3][3] -\n-            m[1][0]  * m[0][3] * m[3][2] -\n+           -m[0][0] * m[1][2] * m[3][3] +\n+            m[0][0] * m[1][3] * m[3][2] +\n+            m[1][0] * m[0][2] * m[3][3] -\n+            m[1][0] * m[0][3] * m[3][2] -\n             m[3][0] * m[0][2] * m[1][3] +\n             m[3][0] * m[0][3] * m[1][2],\n             // 1,3:\n@@ -76,26 +76,27 @@ pub fn scalar_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n             m[2][0] * m[0][2] * m[1][3] -\n             m[2][0] * m[0][3] * m[1][2],\n         ],\n-        [ // row 2\n+        // row 2\n+        [\n             // 2,0:\n-            m[1][0]  * m[2][1] * m[3][3] -\n-            m[1][0]  * m[2][3] * m[3][1] -\n-            m[2][0]  * m[1][1] * m[3][3] +\n-            m[2][0]  * m[1][3] * m[3][1] +\n+            m[1][0] * m[2][1] * m[3][3] -\n+            m[1][0] * m[2][3] * m[3][1] -\n+            m[2][0] * m[1][1] * m[3][3] +\n+            m[2][0] * m[1][3] * m[3][1] +\n             m[3][0] * m[1][1] * m[2][3] -\n             m[3][0] * m[1][3] * m[2][1],\n             // 2,1:\n-           -m[0][0]  * m[2][1] * m[3][3] +\n-            m[0][0]  * m[2][3] * m[3][1] +\n-            m[2][0]  * m[0][1] * m[3][3] -\n-            m[2][0]  * m[0][3] * m[3][1] -\n+           -m[0][0] * m[2][1] * m[3][3] +\n+            m[0][0] * m[2][3] * m[3][1] +\n+            m[2][0] * m[0][1] * m[3][3] -\n+            m[2][0] * m[0][3] * m[3][1] -\n             m[3][0] * m[0][1] * m[2][3] +\n             m[3][0] * m[0][3] * m[2][1],\n             // 2,2:\n-            m[0][0]  * m[1][1] * m[3][3] -\n-            m[0][0]  * m[1][3] * m[3][1] -\n-            m[1][0]  * m[0][1] * m[3][3] +\n-            m[1][0]  * m[0][3] * m[3][1] +\n+            m[0][0] * m[1][1] * m[3][3] -\n+            m[0][0] * m[1][3] * m[3][1] -\n+            m[1][0] * m[0][1] * m[3][3] +\n+            m[1][0] * m[0][3] * m[3][1] +\n             m[3][0] * m[0][1] * m[1][3] -\n             m[3][0] * m[0][3] * m[1][1],\n             // 2,3:\n@@ -106,26 +107,27 @@ pub fn scalar_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n             m[2][0] * m[0][1] * m[1][3] +\n             m[2][0] * m[0][3] * m[1][1],\n         ],\n-        [ // row 3\n+        // row 3\n+        [\n             // 3,0:\n-           -m[1][0]  * m[2][1] * m[3][2] +\n-            m[1][0]  * m[2][2] * m[3][1] +\n-            m[2][0]  * m[1][1] * m[3][2] -\n-            m[2][0]  * m[1][2] * m[3][1] -\n+           -m[1][0] * m[2][1] * m[3][2] +\n+            m[1][0] * m[2][2] * m[3][1] +\n+            m[2][0] * m[1][1] * m[3][2] -\n+            m[2][0] * m[1][2] * m[3][1] -\n             m[3][0] * m[1][1] * m[2][2] +\n             m[3][0] * m[1][2] * m[2][1],\n             // 3,1:\n-            m[0][0]  * m[2][1] * m[3][2] -\n-            m[0][0]  * m[2][2] * m[3][1] -\n-            m[2][0]  * m[0][1] * m[3][2] +\n-            m[2][0]  * m[0][2] * m[3][1] +\n+            m[0][0] * m[2][1] * m[3][2] -\n+            m[0][0] * m[2][2] * m[3][1] -\n+            m[2][0] * m[0][1] * m[3][2] +\n+            m[2][0] * m[0][2] * m[3][1] +\n             m[3][0] * m[0][1] * m[2][2] -\n             m[3][0] * m[0][2] * m[2][1],\n             // 3,2:\n-           -m[0][0]  * m[1][1] * m[3][2] +\n-            m[0][0]  * m[1][2] * m[3][1] +\n-            m[1][0]  * m[0][1] * m[3][2] -\n-            m[1][0]  * m[0][2] * m[3][1] -\n+           -m[0][0] * m[1][1] * m[3][2] +\n+            m[0][0] * m[1][2] * m[3][1] +\n+            m[1][0] * m[0][1] * m[3][2] -\n+            m[1][0] * m[0][2] * m[3][1] -\n             m[3][0] * m[0][1] * m[1][2] +\n             m[3][0] * m[0][2] * m[1][1],\n             // 3,3:\n@@ -138,9 +140,10 @@ pub fn scalar_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n         ],\n     ];\n \n-    let det = m[0][0] * inv[0][0] + m[0][1] * inv[1][0] +\n-              m[0][2] * inv[2][0] + m[0][3] * inv[3][0];\n-    if det == 0. { return None; }\n+    let det = m[0][0] * inv[0][0] + m[0][1] * inv[1][0] + m[0][2] * inv[2][0] + m[0][3] * inv[3][0];\n+    if det == 0. {\n+        return None;\n+    }\n \n     let det_inv = 1. / det;\n \n@@ -163,76 +166,76 @@ pub fn simd_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n     // 2 argument shuffle, returns an f32x4\n     // the first f32x4 is indexes 0..=3\n     // the second f32x4 is indexed 4..=7\n-    let tmp1 = f32x4::shuffle::<{[0, 1, 4, 5]}>(m_0, m_1);\n-    let row1 = f32x4::shuffle::<{[0, 1, 4, 5]}>(m_2, m_3,);\n+    let tmp1 = f32x4::shuffle::<{ [0, 1, 4, 5] }>(m_0, m_1);\n+    let row1 = f32x4::shuffle::<{ [0, 1, 4, 5] }>(m_2, m_3);\n \n-    let row0 = f32x4::shuffle::<{[0, 2, 4, 6]}>(tmp1, row1);\n-    let row1 = f32x4::shuffle::<{[1, 3, 5, 7]}>(row1, tmp1);\n+    let row0 = f32x4::shuffle::<{ [0, 2, 4, 6] }>(tmp1, row1);\n+    let row1 = f32x4::shuffle::<{ [1, 3, 5, 7] }>(row1, tmp1);\n \n-    let tmp1 = f32x4::shuffle::<{[2, 3, 6, 7]}>(m_0, m_1);\n-    let row3 = f32x4::shuffle::<{[2, 3, 6, 7]}>(m_2, m_3);\n-    let row2 = f32x4::shuffle::<{[0, 2, 4, 6]}>(tmp1, row3);\n-    let row3 = f32x4::shuffle::<{[1, 3, 5, 7]}>(row3, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [2, 3, 6, 7] }>(m_0, m_1);\n+    let row3 = f32x4::shuffle::<{ [2, 3, 6, 7] }>(m_2, m_3);\n+    let row2 = f32x4::shuffle::<{ [0, 2, 4, 6] }>(tmp1, row3);\n+    let row3 = f32x4::shuffle::<{ [1, 3, 5, 7] }>(row3, tmp1);\n \n     let tmp1 = row2 * row3;\n     // there's no syntax for a 1 arg shuffle yet,\n     // so we just pass the same f32x4 twice\n-    let tmp1 = f32x4::shuffle::<{[1, 0, 3, 2]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [1, 0, 3, 2] }>(tmp1, tmp1);\n \n     let minor0 = row1 * tmp1;\n     let minor1 = row0 * tmp1;\n-    let tmp1   = f32x4::shuffle::<{[2, 3, 0, 1]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(tmp1, tmp1);\n     let minor0 = (row1 * tmp1) - minor0;\n     let minor1 = (row0 * tmp1) - minor1;\n-    let minor1 = f32x4::shuffle::<{[2, 3, 0, 1]}>(minor1, minor1);\n+    let minor1 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(minor1, minor1);\n \n     let tmp1 = row1 * row2;\n-    let tmp1 = f32x4::shuffle::<{[1, 0, 3, 2]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [1, 0, 3, 2] }>(tmp1, tmp1);\n     let minor0 = (row3 * tmp1) + minor0;\n     let minor3 = row0 * tmp1;\n-    let tmp1 = f32x4::shuffle::<{[2, 3, 0, 1]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(tmp1, tmp1);\n \n     let minor0 = minor0 - row3 * tmp1;\n     let minor3 = row0 * tmp1 - minor3;\n-    let minor3 = f32x4::shuffle::<{[2, 3, 0, 1]}>(minor3, minor3);\n+    let minor3 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(minor3, minor3);\n \n-    let tmp1 = row3 * f32x4::shuffle::<{[2, 3, 0, 1]}>(row1, row1);\n-    let tmp1 = f32x4::shuffle::<{[1, 0, 3, 2]}>(tmp1, tmp1);\n-    let row2 = f32x4::shuffle::<{[2, 3, 0, 1]}>(row2, row2);\n+    let tmp1 = row3 * f32x4::shuffle::<{ [2, 3, 0, 1] }>(row1, row1);\n+    let tmp1 = f32x4::shuffle::<{ [1, 0, 3, 2] }>(tmp1, tmp1);\n+    let row2 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(row2, row2);\n     let minor0 = row2 * tmp1 + minor0;\n     let minor2 = row0 * tmp1;\n-    let tmp1 = f32x4::shuffle::<{[2, 3, 0, 1]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(tmp1, tmp1);\n     let minor0 = minor0 - row2 * tmp1;\n     let minor2 = row0 * tmp1 - minor2;\n-    let minor2 = f32x4::shuffle::<{[2, 3, 0, 1]}>(minor2, minor2);\n+    let minor2 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(minor2, minor2);\n \n     let tmp1 = row0 * row1;\n-    let tmp1 = f32x4::shuffle::<{[1, 0, 3, 2]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [1, 0, 3, 2] }>(tmp1, tmp1);\n     let minor2 = minor2 + row3 * tmp1;\n     let minor3 = row2 * tmp1 - minor3;\n-    let tmp1 = f32x4::shuffle::<{[2, 3, 0, 1]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(tmp1, tmp1);\n     let minor2 = row3 * tmp1 - minor2;\n     let minor3 = minor3 - row2 * tmp1;\n \n     let tmp1 = row0 * row3;\n-    let tmp1 = f32x4::shuffle::<{[1, 0, 3, 2]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [1, 0, 3, 2] }>(tmp1, tmp1);\n     let minor1 = minor1 - row2 * tmp1;\n     let minor2 = row1 * tmp1 + minor2;\n-    let tmp1 = f32x4::shuffle::<{[2, 3, 0, 1]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(tmp1, tmp1);\n     let minor1 = row2 * tmp1 + minor1;\n     let minor2 = minor2 - row1 * tmp1;\n \n     let tmp1 = row0 * row2;\n-    let tmp1 = f32x4::shuffle::<{[1, 0, 3, 2]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [1, 0, 3, 2] }>(tmp1, tmp1);\n     let minor1 = row3 * tmp1 + minor1;\n     let minor3 = minor3 - row1 * tmp1;\n-    let tmp1 = f32x4::shuffle::<{[2, 3, 0, 1]}>(tmp1, tmp1);\n+    let tmp1 = f32x4::shuffle::<{ [2, 3, 0, 1] }>(tmp1, tmp1);\n     let minor1 = minor1 - row3 * tmp1;\n     let minor3 = row1 * tmp1 + minor3;\n \n     let det = row0 * minor0;\n-    let det = f32x4::shuffle::<{[2, 3, 0, 1]}>(det, det) + det;\n-    let det = f32x4::shuffle::<{[1, 0, 3, 2]}>(det, det) + det;\n+    let det = f32x4::shuffle::<{ [2, 3, 0, 1] }>(det, det) + det;\n+    let det = f32x4::shuffle::<{ [1, 0, 3, 2] }>(det, det) + det;\n \n     if det.horizontal_sum() == 0. {\n         return None;\n@@ -256,7 +259,6 @@ pub fn simd_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n     Some(Matrix4x4(m))\n }\n \n-\n #[cfg(test)]\n #[rustfmt::skip]\n mod tests {\n@@ -313,7 +315,6 @@ mod tests {\n     }\n }\n \n-\n fn main() {\n     // Empty main to make cargo happy\n }"}, {"sha": "e48f8062d2c860acac780e4e27647ef23b884cde", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -1,12 +1,12 @@\n #![no_std]\n #![allow(incomplete_features)]\n #![feature(\n-    const_generics, \n+    const_generics,\n     platform_intrinsics,\n     repr_simd,\n     simd_ffi,\n     staged_api,\n-    stdsimd,\n+    stdsimd\n )]\n #![warn(missing_docs)]\n #![unstable(feature = \"portable_simd\", issue = \"86656\")]"}, {"sha": "b6e9b61f71f60dbb05e537f519bdda2f5fc68525", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -174,7 +174,7 @@ macro_rules! impl_float_vector {\n             }\n \n             /// Restrict each lane to a certain interval unless it is NaN.\n-            /// \n+            ///\n             /// For each lane in `self`, returns the corresponding lane in `max` if the lane is\n             /// greater than `max`, and the corresponding lane in `min` if the lane is less\n             /// than `min`.  Otherwise returns the lane in `self`."}, {"sha": "8d662b3238c947c7ac198b55031436edf02867c3", "filename": "crates/core_simd/tests/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -6,7 +6,7 @@ use core_simd::SimdU32;\n fn byte_convert() {\n     let int = SimdU32::from_array([0xdeadbeef, 0x8badf00d]);\n     let bytes = int.to_ne_bytes();\n-    assert_eq!(int[0].to_ne_bytes(), bytes[..4]); \n+    assert_eq!(int[0].to_ne_bytes(), bytes[..4]);\n     assert_eq!(int[1].to_ne_bytes(), bytes[4..]);\n     assert_eq!(SimdU32::from_ne_bytes(bytes), int);\n }"}, {"sha": "318a7b3005e309159033f37dad34ae847c9d0a4d", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -304,19 +304,23 @@ pub fn test_ternary_elementwise<\n     Vector3: Into<[Scalar3; LANES]> + From<[Scalar3; LANES]> + Copy,\n     VectorResult: Into<[ScalarResult; LANES]> + From<[ScalarResult; LANES]> + Copy,\n {\n-    test_3(&|x: [Scalar1; LANES], y: [Scalar2; LANES], z: [Scalar3; LANES]| {\n-        proptest::prop_assume!(check(x, y, z));\n-        let result_1: [ScalarResult; LANES] = fv(x.into(), y.into(), z.into()).into();\n-        let result_2: [ScalarResult; LANES] = {\n-            let mut result = [ScalarResult::default(); LANES];\n-            for ((i1, (i2, i3)), o) in x.iter().zip(y.iter().zip(z.iter())).zip(result.iter_mut()) {\n-                *o = fs(*i1, *i2, *i3);\n-            }\n-            result\n-        };\n-        crate::prop_assert_biteq!(result_1, result_2);\n-        Ok(())\n-    });\n+    test_3(\n+        &|x: [Scalar1; LANES], y: [Scalar2; LANES], z: [Scalar3; LANES]| {\n+            proptest::prop_assume!(check(x, y, z));\n+            let result_1: [ScalarResult; LANES] = fv(x.into(), y.into(), z.into()).into();\n+            let result_2: [ScalarResult; LANES] = {\n+                let mut result = [ScalarResult::default(); LANES];\n+                for ((i1, (i2, i3)), o) in\n+                    x.iter().zip(y.iter().zip(z.iter())).zip(result.iter_mut())\n+                {\n+                    *o = fs(*i1, *i2, *i3);\n+                }\n+                result\n+            };\n+            crate::prop_assert_biteq!(result_1, result_2);\n+            Ok(())\n+        },\n+    );\n }\n \n /// Expand a const-generic test into separate tests for each possible lane count."}]}