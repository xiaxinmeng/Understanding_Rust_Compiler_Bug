{"sha": "9151eabf97512efe3d66fa931fcb1e14b7f02e5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTFlYWJmOTc1MTJlZmUzZDY2ZmE5MzFmY2IxZTE0YjdmMDJlNWY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-10T12:22:00Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-10T12:22:00Z"}, "message": "HirIdification: remove all NodeIds from rustc_mir", "tree": {"sha": "f13f2d3f6e316e2d139e230c8c97af4a1f69d560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f13f2d3f6e316e2d139e230c8c97af4a1f69d560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9151eabf97512efe3d66fa931fcb1e14b7f02e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9151eabf97512efe3d66fa931fcb1e14b7f02e5f", "html_url": "https://github.com/rust-lang/rust/commit/9151eabf97512efe3d66fa931fcb1e14b7f02e5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9151eabf97512efe3d66fa931fcb1e14b7f02e5f/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5374192704861bd64dc031b363a88ec7edc0ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5374192704861bd64dc031b363a88ec7edc0ad", "html_url": "https://github.com/rust-lang/rust/commit/aa5374192704861bd64dc031b363a88ec7edc0ad"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "ae8dfa8144fd948ac905b6e399454c3dc733ff5e", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9151eabf97512efe3d66fa931fcb1e14b7f02e5f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9151eabf97512efe3d66fa931fcb1e14b7f02e5f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=9151eabf97512efe3d66fa931fcb1e14b7f02e5f", "patch": "@@ -23,7 +23,6 @@ use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_errors::DiagnosticBuilder;\n use std::iter;\n-use syntax::ast;\n \n use super::ToRegionVid;\n \n@@ -200,12 +199,10 @@ impl<'tcx> UniversalRegions<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n         let tcx = infcx.tcx;\n-        let mir_node_id = tcx.hir().as_local_node_id(mir_def_id).unwrap();\n-        let mir_hir_id = tcx.hir().node_to_hir_id(mir_node_id);\n+        let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id).unwrap();\n         UniversalRegionsBuilder {\n             infcx,\n             mir_def_id,\n-            mir_node_id,\n             mir_hir_id,\n             param_env,\n         }.build()\n@@ -370,7 +367,6 @@ struct UniversalRegionsBuilder<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n     mir_def_id: DefId,\n     mir_hir_id: HirId,\n-    mir_node_id: ast::NodeId,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -475,7 +471,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n \n-        match tcx.hir().body_owner_kind(self.mir_node_id) {\n+        match tcx.hir().body_owner_kind_by_hir_id(self.mir_hir_id) {\n             BodyOwnerKind::Closure |\n             BodyOwnerKind::Fn => {\n                 let defining_ty = if self.mir_def_id == closure_base_def_id {"}, {"sha": "3aac79c1d16ad2b88fefc2cc5f36ce04ab2ac2fe", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9151eabf97512efe3d66fa931fcb1e14b7f02e5f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9151eabf97512efe3d66fa931fcb1e14b7f02e5f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=9151eabf97512efe3d66fa931fcb1e14b7f02e5f", "patch": "@@ -373,7 +373,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// finish building it.\n     guard_context: Vec<GuardFrame>,\n \n-    /// Maps `NodeId`s of variable bindings to the `Local`s created for them.\n+    /// Maps `HirId`s of variable bindings to the `Local`s created for them.\n     /// (A match binding can have two locals; the 2nd is for the arm's guard.)\n     var_indices: HirIdMap<LocalsForNode>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n@@ -451,7 +451,7 @@ impl BlockContext {\n \n #[derive(Debug)]\n enum LocalsForNode {\n-    /// In the usual case, a `NodeId` for an identifier maps to at most\n+    /// In the usual case, a `HirId` for an identifier maps to at most\n     /// one `Local` declaration.\n     One(Local),\n "}]}