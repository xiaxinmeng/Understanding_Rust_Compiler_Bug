{"sha": "2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNzE4NjBhZjFjN2YyYTVhY2EwM2ZhOGNjYmRlNmFkOWY2Nzk4ZjU=", "commit": {"author": {"name": "Liigo Zhuang", "email": "com.liigo@gmail.com", "date": "2014-03-07T07:57:45Z"}, "committer": {"name": "Liigo Zhuang", "email": "com.liigo@gmail.com", "date": "2014-03-07T07:57:45Z"}, "message": "rename ast::ViewItemExternMod to ast::ViewItemExternCrate, and clean::ExternMod to clean::ExternCrate", "tree": {"sha": "53c3adf80f7aed5e3ebd28e469d21586319d61c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c3adf80f7aed5e3ebd28e469d21586319d61c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "html_url": "https://github.com/rust-lang/rust/commit/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/comments", "author": {"login": "liigo", "id": 346530, "node_id": "MDQ6VXNlcjM0NjUzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/346530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liigo", "html_url": "https://github.com/liigo", "followers_url": "https://api.github.com/users/liigo/followers", "following_url": "https://api.github.com/users/liigo/following{/other_user}", "gists_url": "https://api.github.com/users/liigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/liigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liigo/subscriptions", "organizations_url": "https://api.github.com/users/liigo/orgs", "repos_url": "https://api.github.com/users/liigo/repos", "events_url": "https://api.github.com/users/liigo/events{/privacy}", "received_events_url": "https://api.github.com/users/liigo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liigo", "id": 346530, "node_id": "MDQ6VXNlcjM0NjUzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/346530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liigo", "html_url": "https://github.com/liigo", "followers_url": "https://api.github.com/users/liigo/followers", "following_url": "https://api.github.com/users/liigo/following{/other_user}", "gists_url": "https://api.github.com/users/liigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/liigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liigo/subscriptions", "organizations_url": "https://api.github.com/users/liigo/orgs", "repos_url": "https://api.github.com/users/liigo/repos", "events_url": "https://api.github.com/users/liigo/events{/privacy}", "received_events_url": "https://api.github.com/users/liigo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28e7631d8beadd8762adefde2346266732e1866d", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e7631d8beadd8762adefde2346266732e1866d", "html_url": "https://github.com/rust-lang/rust/commit/28e7631d8beadd8762adefde2346266732e1866d"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "fb58b3f4b7ba3ea7fd7ff9eea8df7c492da49eaa", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -134,7 +134,7 @@ impl Visitor<()> for Context {\n                     }\n                 }\n             }\n-            ast::ViewItemExternMod(..) => {\n+            ast::ViewItemExternCrate(..) => {\n                 for attr in i.attrs.iter() {\n                     if attr.name().get() == \"phase\"{\n                         self.gate_feature(\"phase\", attr.span,"}, {"sha": "564d6a717ff93aaeb85cc45b5f52cacc2ad637d2", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -74,7 +74,7 @@ pub fn with_version(krate: &str) -> Option<(InternedString, ast::StrStyle)> {\n impl fold::Folder for StandardLibraryInjector {\n     fn fold_crate(&mut self, krate: ast::Crate) -> ast::Crate {\n         let mut vis = vec!(ast::ViewItem {\n-            node: ast::ViewItemExternMod(token::str_to_ident(\"std\"),\n+            node: ast::ViewItemExternCrate(token::str_to_ident(\"std\"),\n                                          with_version(\"std\"),\n                                          ast::DUMMY_NODE_ID),\n             attrs: vec!(\n@@ -90,15 +90,15 @@ impl fold::Folder for StandardLibraryInjector {\n \n         if use_uv(&krate) && !self.sess.building_library.get() {\n             vis.push(ast::ViewItem {\n-                node: ast::ViewItemExternMod(token::str_to_ident(\"green\"),\n+                node: ast::ViewItemExternCrate(token::str_to_ident(\"green\"),\n                                              with_version(\"green\"),\n                                              ast::DUMMY_NODE_ID),\n                 attrs: Vec::new(),\n                 vis: ast::Inherited,\n                 span: DUMMY_SP\n             });\n             vis.push(ast::ViewItem {\n-                node: ast::ViewItemExternMod(token::str_to_ident(\"rustuv\"),\n+                node: ast::ViewItemExternCrate(token::str_to_ident(\"rustuv\"),\n                                              with_version(\"rustuv\"),\n                                              ast::DUMMY_NODE_ID),\n                 attrs: Vec::new(),"}, {"sha": "9c2ebb4fb5d6ede66b8a8d0d7f48e97e51d99e3d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -306,7 +306,7 @@ fn mk_std(cx: &TestCtxt) -> ast::ViewItem {\n                                              path_node(~[id_test]),\n                                              ast::DUMMY_NODE_ID))))\n     } else {\n-        ast::ViewItemExternMod(id_test,\n+        ast::ViewItemExternCrate(id_test,\n                                with_version(\"test\"),\n                                ast::DUMMY_NODE_ID)\n     };"}, {"sha": "7289155291a6e235cd7204a99dd67157e3755264", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -167,7 +167,7 @@ struct CrateInfo {\n \n fn extract_crate_info(e: &Env, i: &ast::ViewItem) -> Option<CrateInfo> {\n     match i.node {\n-        ast::ViewItemExternMod(ident, ref path_opt, id) => {\n+        ast::ViewItemExternCrate(ident, ref path_opt, id) => {\n             let ident = token::get_ident(ident);\n             debug!(\"resolving extern crate stmt. ident: {:?} path_opt: {:?}\",\n                    ident, path_opt);"}, {"sha": "0a0bcc4ae0e64520702684bdd2a46ec2652be07c", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -845,7 +845,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n \n     fn visit_view_item(&mut self, a: &ast::ViewItem, _: ()) {\n         match a.node {\n-            ast::ViewItemExternMod(..) => {}\n+            ast::ViewItemExternCrate(..) => {}\n             ast::ViewItemUse(ref uses) => {\n                 for vpath in uses.iter() {\n                     match vpath.node {\n@@ -976,7 +976,7 @@ impl Visitor<()> for SanePrivacyVisitor {\n                                                     reachable\");\n                 } else {\n                     match i.node {\n-                        ast::ViewItemExternMod(..) => {\n+                        ast::ViewItemExternCrate(..) => {\n                             self.tcx.sess.span_err(i.span, \"`pub` visibility \\\n                                                             is not allowed\");\n                         }"}, {"sha": "7e333818912838bbc25771c8030f7a1e29cd774b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -1516,7 +1516,7 @@ impl Resolver {\n                 }\n             }\n \n-            ViewItemExternMod(name, _, node_id) => {\n+            ViewItemExternCrate(name, _, node_id) => {\n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 match self.session.cstore.find_extern_mod_stmt_cnum(node_id) {\n                     Some(crate_id) => {\n@@ -5415,7 +5415,7 @@ impl Resolver {\n         if vi.span == DUMMY_SP { return }\n \n         match vi.node {\n-            ViewItemExternMod(..) => {} // ignore\n+            ViewItemExternCrate(..) => {} // ignore\n             ViewItemUse(ref path) => {\n                 for p in path.iter() {\n                     match p.node {"}, {"sha": "efd0f046dc88e0156b3f2b7bb517ae470dd3406f", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -1066,19 +1066,19 @@ impl Clean<Item> for ast::ViewItem {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub enum ViewItemInner {\n-    ExternMod(~str, Option<~str>, ast::NodeId),\n+    ExternCrate(~str, Option<~str>, ast::NodeId),\n     Import(~[ViewPath])\n }\n \n impl Clean<ViewItemInner> for ast::ViewItem_ {\n     fn clean(&self) -> ViewItemInner {\n         match self {\n-            &ast::ViewItemExternMod(ref i, ref p, ref id) => {\n+            &ast::ViewItemExternCrate(ref i, ref p, ref id) => {\n                 let string = match *p {\n                     None => None,\n                     Some((ref x, _)) => Some(x.get().to_owned()),\n                 };\n-                ExternMod(i.clean(), string, *id)\n+                ExternCrate(i.clean(), string, *id)\n             }\n             &ast::ViewItemUse(ref vp) => {\n                 Import(vp.clean().move_iter().collect())"}, {"sha": "dcc388a476204934511a26294fb61c07aa0891d3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -960,8 +960,8 @@ fn item_module(w: &mut Writer, cx: &Context,\n         match (&i1.inner, &i2.inner) {\n             (&clean::ViewItemItem(ref a), &clean::ViewItemItem(ref b)) => {\n                 match (&a.inner, &b.inner) {\n-                    (&clean::ExternMod(..), _) => Less,\n-                    (_, &clean::ExternMod(..)) => Greater,\n+                    (&clean::ExternCrate(..), _) => Less,\n+                    (_, &clean::ExternCrate(..)) => Greater,\n                     _ => idx1.cmp(&idx2),\n                 }\n             }\n@@ -1056,7 +1056,7 @@ fn item_module(w: &mut Writer, cx: &Context,\n \n             clean::ViewItemItem(ref item) => {\n                 match item.inner {\n-                    clean::ExternMod(ref name, ref src, _) => {\n+                    clean::ExternCrate(ref name, ref src, _) => {\n                         try!(write!(w, \"<tr><td><code>extern crate {}\",\n                                       name.as_slice()));\n                         match *src {"}, {"sha": "5ac623af37a31f450d90a6d4906c9776757b8de7", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -147,7 +147,7 @@ impl<'a> RustdocVisitor<'a> {\n                     }\n                 }\n             }\n-            ast::ViewItemExternMod(..) => item.clone()\n+            ast::ViewItemExternCrate(..) => item.clone()\n         };\n         om.view_items.push(item);\n     }"}, {"sha": "a8480b6cfeb34de541b67484f289b2f469224014", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -1019,7 +1019,7 @@ pub enum ViewItem_ {\n     // optional (InternedString,StrStyle): if present, this is a location\n     // (containing arbitrary characters) from which to fetch the crate sources\n     // For example, extern crate whatever = \"github.com/mozilla/rust\"\n-    ViewItemExternMod(Ident, Option<(InternedString,StrStyle)>, NodeId),\n+    ViewItemExternCrate(Ident, Option<(InternedString,StrStyle)>, NodeId),\n     ViewItemUse(Vec<@ViewPath> ),\n }\n "}, {"sha": "a6e3111fe3f7680907282d9deabdeee076e1f832", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -375,7 +375,7 @@ impl<'a, O: IdVisitingOperation> Visitor<()> for IdVisitor<'a, O> {\n \n     fn visit_view_item(&mut self, view_item: &ViewItem, env: ()) {\n         match view_item.node {\n-            ViewItemExternMod(_, _, node_id) => {\n+            ViewItemExternCrate(_, _, node_id) => {\n                 self.operation.visit_id(node_id)\n             }\n             ViewItemUse(ref view_paths) => {"}, {"sha": "30b04b7f37782e75e67b6a2f7986fef29fe4693a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -424,7 +424,7 @@ pub fn expand_view_item(vi: &ast::ViewItem,\n                         fld: &mut MacroExpander)\n                         -> ast::ViewItem {\n     match vi.node {\n-        ast::ViewItemExternMod(..) => {\n+        ast::ViewItemExternCrate(..) => {\n             let should_load = vi.attrs.iter().any(|attr| {\n                 attr.name().get() == \"phase\" &&\n                     attr.meta_item_list().map_or(false, |phases| {\n@@ -446,7 +446,7 @@ fn load_extern_macros(krate: &ast::ViewItem, fld: &mut MacroExpander) {\n     let MacroCrate { lib, cnum } = fld.cx.ecfg.loader.load_crate(krate);\n \n     let crate_name = match krate.node {\n-        ast::ViewItemExternMod(name, _, _) => name,\n+        ast::ViewItemExternCrate(name, _, _) => name,\n         _ => unreachable!()\n     };\n     let name = format!(\"<{} macros>\", token::get_ident(crate_name));"}, {"sha": "df6b06c5804dee410ab69984ca5baf9a19289c16", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -514,8 +514,8 @@ fn fold_variant_arg_<T: Folder>(va: &VariantArg, folder: &mut T) -> VariantArg {\n pub fn noop_fold_view_item<T: Folder>(vi: &ViewItem, folder: &mut T)\n                                        -> ViewItem{\n     let inner_view_item = match vi.node {\n-        ViewItemExternMod(ref ident, ref string, node_id) => {\n-            ViewItemExternMod(ident.clone(),\n+        ViewItemExternCrate(ref ident, ref string, node_id) => {\n+            ViewItemExternCrate(ident.clone(),\n                               (*string).clone(),\n                               folder.new_id(node_id))\n         }"}, {"sha": "6fbf5f071ad22cdfb05e181abb7ad84d35d6f322", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -55,7 +55,7 @@ use ast::{TyInfer, TypeMethod};\n use ast::{TyNil, TyParam, TyParamBound, TyPath, TyPtr, TyRptr};\n use ast::{TyTup, TyU32, TyUniq, TyVec, UnUniq};\n use ast::{UnnamedField, UnsafeBlock, UnsafeFn, ViewItem};\n-use ast::{ViewItem_, ViewItemExternMod, ViewItemUse};\n+use ast::{ViewItem_, ViewItemExternCrate, ViewItemUse};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::Visibility;\n use ast;\n@@ -4361,7 +4361,7 @@ impl Parser {\n         };\n \n         IoviViewItem(ast::ViewItem {\n-                node: ViewItemExternMod(ident, maybe_path, ast::DUMMY_NODE_ID),\n+                node: ViewItemExternCrate(ident, maybe_path, ast::DUMMY_NODE_ID),\n                 attrs: attrs,\n                 vis: visibility,\n                 span: mk_sp(lo, self.last_span.hi)\n@@ -5017,11 +5017,11 @@ impl Parser {\n                             // `extern crate` must precede `use`.\n                             extern_mod_allowed = false;\n                         }\n-                        ViewItemExternMod(..) if !extern_mod_allowed => {\n+                        ViewItemExternCrate(..) if !extern_mod_allowed => {\n                             self.span_err(view_item.span,\n                                           \"\\\"extern crate\\\" declarations are not allowed here\");\n                         }\n-                        ViewItemExternMod(..) => {}\n+                        ViewItemExternCrate(..) => {}\n                     }\n                     view_items.push(view_item);\n                 }"}, {"sha": "aafda9d687d85867a1bb48984edf9f9cea91e3e5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -2065,7 +2065,7 @@ pub fn print_view_item(s: &mut State, item: &ast::ViewItem) -> io::IoResult<()>\n     try!(print_outer_attributes(s, item.attrs.as_slice()));\n     try!(print_visibility(s, item.vis));\n     match item.node {\n-        ast::ViewItemExternMod(id, ref optional_path, _) => {\n+        ast::ViewItemExternCrate(id, ref optional_path, _) => {\n             try!(head(s, \"extern crate\"));\n             try!(print_ident(s, id));\n             for &(ref p, style) in optional_path.iter() {"}, {"sha": "f8a07599420e86e48f90f58bd018a457985640a8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2271860af1c7f2a5aca03fa8ccbde6ad9f6798f5", "patch": "@@ -148,7 +148,7 @@ pub fn walk_mod<E: Clone, V: Visitor<E>>(visitor: &mut V, module: &Mod, env: E)\n \n pub fn walk_view_item<E: Clone, V: Visitor<E>>(visitor: &mut V, vi: &ViewItem, env: E) {\n     match vi.node {\n-        ViewItemExternMod(name, _, _) => {\n+        ViewItemExternCrate(name, _, _) => {\n             visitor.visit_ident(vi.span, name, env)\n         }\n         ViewItemUse(ref paths) => {"}]}