{"sha": "06fea9235642cec6e360da5654db9262245dc862", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZmVhOTIzNTY0MmNlYzZlMzYwZGE1NjU0ZGI5MjYyMjQ1ZGM4NjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-31T03:35:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:10Z"}, "message": "review comments", "tree": {"sha": "4b375cface965c401f493475a883a9d58433ca18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b375cface965c401f493475a883a9d58433ca18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06fea9235642cec6e360da5654db9262245dc862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06fea9235642cec6e360da5654db9262245dc862", "html_url": "https://github.com/rust-lang/rust/commit/06fea9235642cec6e360da5654db9262245dc862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06fea9235642cec6e360da5654db9262245dc862/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "132921bc521ef351192019f9336ae7a6f5809b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/132921bc521ef351192019f9336ae7a6f5809b15", "html_url": "https://github.com/rust-lang/rust/commit/132921bc521ef351192019f9336ae7a6f5809b15"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "dec9ef4f4216f242ee4cc452b183cbb396e4f601", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06fea9235642cec6e360da5654db9262245dc862/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fea9235642cec6e360da5654db9262245dc862/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=06fea9235642cec6e360da5654db9262245dc862", "patch": "@@ -18,7 +18,7 @@ use rustc_hir::def_id::DefId;\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n-use smallvec::SmallVec;\n+use smallvec::{smallvec, SmallVec};\n use syntax::ast;\n \n use std::borrow::Cow;\n@@ -85,9 +85,9 @@ impl ObjectSafetyViolation {\n             | ObjectSafetyViolation::Method(_, _, span)\n                 if *span != DUMMY_SP =>\n             {\n-                vec![*span].into()\n+                smallvec![*span]\n             }\n-            _ => vec![].into(),\n+            _ => smallvec![],\n         }\n     }\n }"}, {"sha": "fc194e3af97f2cc8c069047647b6e3daf93aa37b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/06fea9235642cec6e360da5654db9262245dc862/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fea9235642cec6e360da5654db9262245dc862/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=06fea9235642cec6e360da5654db9262245dc862", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast;\n \n@@ -180,15 +180,12 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n-fn could_be_self(trait_name: Ident, ty: &hir::Ty<'_>) -> bool {\n+fn could_be_self(trait_def_id: DefId, ty: &hir::Ty<'_>) -> bool {\n     match ty.kind {\n-        hir::TyKind::TraitObject([trait_ref], ..) => {\n-            let mut p = trait_ref.trait_ref.path.segments.iter().map(|s| s.ident);\n-            match (p.next(), p.next()) {\n-                (Some(ident), None) => ident == trait_name,\n-                _ => false,\n-            }\n-        }\n+        hir::TyKind::TraitObject([trait_ref], ..) => match trait_ref.trait_ref.path.segments {\n+            [s] => s.res.and_then(|r| r.opt_def_id()) == Some(trait_def_id),\n+            _ => false,\n+        },\n         _ => false,\n     }\n }\n@@ -206,18 +203,18 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n     let mut trait_should_be_self = vec![];\n     match &item.kind {\n         hir::TraitItemKind::Const(ty, _) | hir::TraitItemKind::Type(_, Some(ty))\n-            if could_be_self(trait_name, ty) =>\n+            if could_be_self(trait_def_id, ty) =>\n         {\n             trait_should_be_self.push(ty.span)\n         }\n         hir::TraitItemKind::Method(sig, _) => {\n             for ty in sig.decl.inputs {\n-                if could_be_self(trait_name, ty) {\n+                if could_be_self(trait_def_id, ty) {\n                     trait_should_be_self.push(ty.span);\n                 }\n             }\n             match sig.decl.output {\n-                hir::FunctionRetTy::Return(ty) if could_be_self(trait_name, ty) => {\n+                hir::FunctionRetTy::Return(ty) if could_be_self(trait_def_id, ty) => {\n                     trait_should_be_self.push(ty.span);\n                 }\n                 _ => {}"}]}