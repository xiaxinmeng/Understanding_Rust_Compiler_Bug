{"sha": "a713867c745541e06956c4a3e831ca8539554b37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MTM4NjdjNzQ1NTQxZTA2OTU2YzRhM2U4MzFjYTg1Mzk1NTRiMzc=", "commit": {"author": {"name": "Pascal Hertleif", "email": "killercup@gmail.com", "date": "2015-05-22T12:14:28Z"}, "committer": {"name": "Pascal Hertleif", "email": "killercup@gmail.com", "date": "2015-05-22T12:14:28Z"}, "message": "Rustdoc: Clean Up Some JS\n\nThere are more possible optimizations left (cached length in loops) as\nwell as some possible bugs (shadowed variables) to fix. This is mostly\nsyntactic.", "tree": {"sha": "95b5a258b25344737585c6862541efafbaf9e00f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95b5a258b25344737585c6862541efafbaf9e00f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a713867c745541e06956c4a3e831ca8539554b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a713867c745541e06956c4a3e831ca8539554b37", "html_url": "https://github.com/rust-lang/rust/commit/a713867c745541e06956c4a3e831ca8539554b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a713867c745541e06956c4a3e831ca8539554b37/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d60aba6c86883c79055c1a3923d4db116b644e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d60aba6c86883c79055c1a3923d4db116b644e", "html_url": "https://github.com/rust-lang/rust/commit/c3d60aba6c86883c79055c1a3923d4db116b644e"}], "stats": {"total": 117, "additions": 57, "deletions": 60}, "files": [{"sha": "92ff06a9ba3e690d67a0844afbd8d4fff2057fba", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 57, "deletions": 60, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/a713867c745541e06956c4a3e831ca8539554b37/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/a713867c745541e06956c4a3e831ca8539554b37/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=a713867c745541e06956c4a3e831ca8539554b37", "patch": "@@ -13,7 +13,6 @@\n \n (function() {\n     \"use strict\";\n-    var resizeTimeout, interval;\n \n     // This mapping table should match the discriminants of\n     // `rustdoc::html::item_type::ItemType` type in Rust.\n@@ -64,7 +63,7 @@\n             if ($('#' + from).length === 0) {\n                 return;\n             }\n-            if (ev === null) $('#' + from)[0].scrollIntoView();\n+            if (ev === null) { $('#' + from)[0].scrollIntoView(); };\n             $('.line-numbers span').removeClass('line-highlighted');\n             for (i = from; i <= to; ++i) {\n                 $('#' + i).addClass('line-highlighted');\n@@ -74,7 +73,7 @@\n     highlightSourceLines(null);\n     $(window).on('hashchange', highlightSourceLines);\n \n-    $(document).on('keyup', function(e) {\n+    $(document).on('keyup', function handleKeyboardShortcut(e) {\n         if (document.activeElement.tagName === 'INPUT') {\n             return;\n         }\n@@ -133,29 +132,28 @@\n         return function(s1, s2) {\n             if (s1 === s2) {\n                 return 0;\n-            } else {\n-                var s1_len = s1.length, s2_len = s2.length;\n-                if (s1_len && s2_len) {\n-                    var i1 = 0, i2 = 0, a, b, c, c2, row = row2;\n-                    while (i1 < s1_len)\n-                        row[i1] = ++i1;\n-                    while (i2 < s2_len) {\n-                        c2 = s2.charCodeAt(i2);\n-                        a = i2;\n-                        ++i2;\n-                        b = i2;\n-                        for (i1 = 0; i1 < s1_len; ++i1) {\n-                            c = a + (s1.charCodeAt(i1) !== c2 ? 1 : 0);\n-                            a = row[i1];\n-                            b = b < a ? (b < c ? b + 1 : c) : (a < c ? a + 1 : c);\n-                            row[i1] = b;\n-                        }\n+            }\n+            var s1_len = s1.length, s2_len = s2.length;\n+            if (s1_len && s2_len) {\n+                var i1 = 0, i2 = 0, a, b, c, c2, row = row2;\n+                while (i1 < s1_len) {\n+                    row[i1] = ++i1;\n+                }\n+                while (i2 < s2_len) {\n+                    c2 = s2.charCodeAt(i2);\n+                    a = i2;\n+                    ++i2;\n+                    b = i2;\n+                    for (i1 = 0; i1 < s1_len; ++i1) {\n+                        c = a + (s1.charCodeAt(i1) !== c2 ? 1 : 0);\n+                        a = row[i1];\n+                        b = b < a ? (b < c ? b + 1 : c) : (a < c ? a + 1 : c);\n+                        row[i1] = b;\n                     }\n-                    return b;\n-                } else {\n-                    return s1_len + s2_len;\n                 }\n+                return b;\n             }\n+            return s1_len + s2_len;\n         };\n     })();\n \n@@ -187,7 +185,7 @@\n                 results = [],\n                 split = valLower.split(\"::\");\n \n-            //remove empty keywords\n+            // remove empty keywords\n             for (var j = 0; j < split.length; ++j) {\n                 split[j].toLowerCase();\n                 if (split[j] === \"\") {\n@@ -286,58 +284,59 @@\n                 return [];\n             }\n \n-            results.sort(function(aaa, bbb) {\n+            results.sort(function sortResults(aaa, bbb) {\n                 var a, b;\n \n                 // Sort by non levenshtein results and then levenshtein results by the distance\n                 // (less changes required to match means higher rankings)\n                 a = (aaa.lev);\n                 b = (bbb.lev);\n-                if (a !== b) return a - b;\n+                if (a !== b) { return a - b; }\n \n                 // sort by crate (non-current crate goes later)\n                 a = (aaa.item.crate !== window.currentCrate);\n                 b = (bbb.item.crate !== window.currentCrate);\n-                if (a !== b) return a - b;\n+                if (a !== b) { return a - b; }\n \n                 // sort by exact match (mismatch goes later)\n                 a = (aaa.word !== valLower);\n                 b = (bbb.word !== valLower);\n-                if (a !== b) return a - b;\n+                if (a !== b) { return a - b; }\n \n                 // sort by item name length (longer goes later)\n                 a = aaa.word.length;\n                 b = bbb.word.length;\n-                if (a !== b) return a - b;\n+                if (a !== b) { return a - b; }\n \n                 // sort by item name (lexicographically larger goes later)\n                 a = aaa.word;\n                 b = bbb.word;\n-                if (a !== b) return (a > b ? +1 : -1);\n+                if (a !== b) { return (a > b ? +1 : -1); }\n \n                 // sort by index of keyword in item name (no literal occurrence goes later)\n                 a = (aaa.index < 0);\n                 b = (bbb.index < 0);\n-                if (a !== b) return a - b;\n+                if (a !== b) { return a - b; }\n                 // (later literal occurrence, if any, goes later)\n                 a = aaa.index;\n                 b = bbb.index;\n-                if (a !== b) return a - b;\n+                if (a !== b) { return a - b; }\n+\n \n                 // sort by description (no description goes later)\n                 a = (aaa.item.desc === '');\n                 b = (bbb.item.desc === '');\n-                if (a !== b) return a - b;\n+                if (a !== b) { return a - b; }\n \n                 // sort by type (later occurrence in `itemTypes` goes later)\n                 a = aaa.item.ty;\n                 b = bbb.item.ty;\n-                if (a !== b) return a - b;\n+                if (a !== b) { return a - b; }\n \n                 // sort by path (lexicographically larger goes later)\n                 a = aaa.item.path;\n                 b = bbb.item.path;\n-                if (a !== b) return (a > b ? +1 : -1);\n+                if (a !== b) { return (a > b ? +1 : -1); }\n \n                 // que sera, sera\n                 return 0;\n@@ -388,7 +387,7 @@\n          * @return {[boolean]}       [Whether the result is valid or not]\n          */\n         function validateResult(name, path, keys, parent) {\n-            for (var i=0; i < keys.length; ++i) {\n+            for (var i = 0; i < keys.length; ++i) {\n                 // each check is for validation so we negate the conditions and invalidate\n                 if (!(\n                     // check for an exact name match\n@@ -423,7 +422,7 @@\n                 raw: raw,\n                 query: query,\n                 type: type,\n-                id: query + type,\n+                id: query + type\n             };\n         }\n \n@@ -432,7 +431,7 @@\n \n             $results.on('click', function() {\n                 var dst = $(this).find('a')[0];\n-                if (window.location.pathname == dst.pathname) {\n+                if (window.location.pathname === dst.pathname) {\n                     $('#search').addClass('hidden');\n                     $('#main').removeClass('hidden');\n                     document.location.href = dst.href;\n@@ -595,7 +594,7 @@\n \n         function itemTypeFromName(typename) {\n             for (var i = 0; i < itemTypes.length; ++i) {\n-                if (itemTypes[i] === typename) return i;\n+                if (itemTypes[i] === typename) { return i; }\n             }\n             return -1;\n         }\n@@ -604,7 +603,7 @@\n             searchIndex = [];\n             var searchWords = [];\n             for (var crate in rawSearchIndex) {\n-                if (!rawSearchIndex.hasOwnProperty(crate)) { continue }\n+                if (!rawSearchIndex.hasOwnProperty(crate)) { continue; }\n \n                 // an array of [(Number) item type,\n                 //              (String) name,\n@@ -690,32 +689,31 @@\n         }\n \n         function plainSummaryLine(markdown) {\n-            var str = markdown.replace(/\\n/g, ' ')\n-            str = str.replace(/'/g, \"\\'\")\n-            str = str.replace(/^#+? (.+?)/, \"$1\")\n-            str = str.replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\n-            str = str.replace(/\\[(.*?)\\]\\[.*?\\]/g, \"$1\")\n-            return str;\n+            markdown.replace(/\\n/g, ' ')\n+            .replace(/'/g, \"\\'\")\n+            .replace(/^#+? (.+?)/, \"$1\")\n+            .replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\n+            .replace(/\\[(.*?)\\]\\[.*?\\]/g, \"$1\");\n         }\n \n         index = buildIndex(rawSearchIndex);\n         startSearch();\n \n         // Draw a convenient sidebar of known crates if we have a listing\n-        if (rootPath == '../') {\n+        if (rootPath === '../') {\n             var sidebar = $('.sidebar');\n             var div = $('<div>').attr('class', 'block crate');\n             div.append($('<h2>').text('Crates'));\n \n             var crates = [];\n             for (var crate in rawSearchIndex) {\n-                if (!rawSearchIndex.hasOwnProperty(crate)) { continue }\n+                if (!rawSearchIndex.hasOwnProperty(crate)) { continue; }\n                 crates.push(crate);\n             }\n             crates.sort();\n             for (var i = 0; i < crates.length; ++i) {\n                 var klass = 'crate';\n-                if (crates[i] == window.currentCrate) {\n+                if (crates[i] === window.currentCrate) {\n                     klass += ' current';\n                 }\n                 if (rawSearchIndex[crates[i]].items[0]) {\n@@ -738,7 +736,7 @@\n \n         function block(shortty, longty) {\n             var filtered = items[shortty];\n-            if (!filtered) return;\n+            if (!filtered) { return; }\n \n             var div = $('<div>').attr('class', 'block ' + shortty);\n             div.append($('<h2>').text(longty));\n@@ -749,7 +747,7 @@\n                 var desc = item[1]; // can be null\n \n                 var klass = shortty;\n-                if (name === current.name && shortty == current.ty) {\n+                if (name === current.name && shortty === current.ty) {\n                     klass += ' current';\n                 }\n                 var path;\n@@ -779,7 +777,7 @@\n         var list = $('#implementors-list');\n         var libs = Object.getOwnPropertyNames(imp);\n         for (var i = 0; i < libs.length; ++i) {\n-            if (libs[i] == currentCrate) continue;\n+            if (libs[i] === currentCrate) { continue; }\n             var structs = imp[libs[i]];\n             for (var j = 0; j < structs.length; ++j) {\n                 var code = $('<code>').append(structs[j]);\n@@ -811,11 +809,10 @@\n         if (sectionIsCollapsed) {\n             // button will expand the section\n             return \"+\";\n-        } else {\n-            // button will collapse the section\n-            // note that this text is also set in the HTML template in render.rs\n-            return \"\\u2212\"; // \"\\u2212\" is '\u2212' minus sign\n         }\n+        // button will collapse the section\n+        // note that this text is also set in the HTML template in render.rs\n+        return \"\\u2212\"; // \"\\u2212\" is '\u2212' minus sign\n     }\n \n     $(\"#toggle-all-docs\").on(\"click\", function() {\n@@ -847,12 +844,12 @@\n         }\n         if (relatedDoc.is(\".docblock\")) {\n             if (relatedDoc.is(\":visible\")) {\n-                relatedDoc.slideUp({duration:'fast', easing:'linear'});\n+                relatedDoc.slideUp({duration: 'fast', easing: 'linear'});\n                 toggle.parent(\".toggle-wrapper\").addClass(\"collapsed\");\n                 toggle.children(\".inner\").text(labelForToggleButton(true));\n                 toggle.children(\".toggle-label\").fadeIn();\n             } else {\n-                relatedDoc.slideDown({duration:'fast', easing:'linear'});\n+                relatedDoc.slideDown({duration: 'fast', easing: 'linear'});\n                 toggle.parent(\".toggle-wrapper\").removeClass(\"collapsed\");\n                 toggle.children(\".inner\").text(labelForToggleButton(false));\n                 toggle.children(\".toggle-label\").hide();\n@@ -877,7 +874,7 @@\n                 $('<span/>', {'class': 'toggle-label'})\n                     .css('display', 'none')\n                     .html('&nbsp;Expand&nbsp;description'));\n-        var wrapper =  $(\"<div class='toggle-wrapper'>\").append(mainToggle);\n+        var wrapper = $(\"<div class='toggle-wrapper'>\").append(mainToggle);\n         $(\"#main > .docblock\").before(wrapper);\n     });\n \n@@ -894,7 +891,7 @@\n         }\n \n         return function(ev) {\n-            var cur_id = parseInt(ev.target.id);\n+            var cur_id = parseInt(ev.target.id, 10);\n \n             if (ev.shiftKey && prev_id) {\n                 if (prev_id > cur_id) {"}]}