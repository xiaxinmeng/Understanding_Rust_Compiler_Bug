{"sha": "a601302ff0217b91589b5a7310a8a23adb843fdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDEzMDJmZjAyMTdiOTE1ODliNWE3MzEwYThhMjNhZGI4NDNmZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T19:01:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T19:01:10Z"}, "message": "Auto merge of #75778 - AndyGauge:75521-rustdoc-book-improvements, r=jyn514\n\n75521 rustdoc book improvements\n\nAdded some guidelines about documenting with rustdoc\nFixes #75521", "tree": {"sha": "3122ef2fbdde0733bef727146da6ecce389063fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3122ef2fbdde0733bef727146da6ecce389063fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a601302ff0217b91589b5a7310a8a23adb843fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a601302ff0217b91589b5a7310a8a23adb843fdc", "html_url": "https://github.com/rust-lang/rust/commit/a601302ff0217b91589b5a7310a8a23adb843fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a601302ff0217b91589b5a7310a8a23adb843fdc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9a36fa8a4ec06daec581e23f390389e05f25e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9a36fa8a4ec06daec581e23f390389e05f25e4", "html_url": "https://github.com/rust-lang/rust/commit/7e9a36fa8a4ec06daec581e23f390389e05f25e4"}, {"sha": "881820aa062cb75ee02ec2d2a89a5a89074c1bd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/881820aa062cb75ee02ec2d2a89a5a89074c1bd0", "html_url": "https://github.com/rust-lang/rust/commit/881820aa062cb75ee02ec2d2a89a5a89074c1bd0"}], "stats": {"total": 314, "additions": 283, "deletions": 31}, "files": [{"sha": "943aa09f678d7570967c6d7143c8507a25d73d32", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=a601302ff0217b91589b5a7310a8a23adb843fdc", "patch": "@@ -2,6 +2,7 @@\n \n - [What is rustdoc?](what-is-rustdoc.md)\n - [How to write documentation](how-to-write-documentation.md)\n+- [What to include (and exclude)](what-to-include.md)\n - [Command-line arguments](command-line-arguments.md)\n - [The `#[doc]` attribute](the-doc-attribute.md)\n - [Documentation tests](documentation-tests.md)\n@@ -10,3 +11,4 @@\n - [Passes](passes.md)\n - [Advanced features](advanced-features.md)\n - [Unstable features](unstable-features.md)\n+- [References](references.md)"}, {"sha": "ca6db26da3130aadfdc61fcb9f2428ac566076d7", "filename": "src/doc/rustdoc/src/how-to-write-documentation.md", "status": "modified", "additions": 105, "deletions": 15, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md?ref=a601302ff0217b91589b5a7310a8a23adb843fdc", "patch": "@@ -1,14 +1,85 @@\n # How to write documentation\n \n+Good documentation is not natural.  There are opposing goals that make writing\n+good documentation difficult.  It requires expertise in the subject but also\n+writing to a novice perspective.  Documentation therefore often glazes over\n+implementation detail, or leaves readers with unanswered questions.\n+\n+There are a few tenets to Rust documentation that can help guide anyone through\n+the process of documenting libraries so that everyone has an ample opportunity\n+to use the code.  \n+\n This chapter covers not only how to write documentation but specifically\n-how to write **good** documentation.  Something to keep in mind when\n-writing documentation is that your audience is not just yourself but others\n-who simply don't have the context you do.  It is important to be as clear\n+how to write **good** documentation.  It is important to be as clear\n as you can, and as complete as possible.  As a rule of thumb: the more\n documentation you write for your crate the better.  If an item is public\n then it should be documented.\n \n-## Basic structure\n+## Getting Started\n+\n+Documenting a crate should begin with front-page documentation.  As an\n+example, the [`hashbrown`] crate level documentation summarizes the role of\n+the crate, provides links to explain technical details, and explains why you \n+would want to use the crate.  \n+\n+After introducing the crate, it is important that the front-page gives \n+an example of how to use the crate in a real world setting.  Stick to the\n+library's role in the example, but do so without shortcuts to benefit users who\n+may copy and paste the example to get started. \n+\n+[`futures`] uses inline comments to explain line by line\n+the complexities of using a [`Future`], because a person's first exposure to \n+rust's [`Future`] may be this example.\n+\n+The [`backtrace`] documentation walks through the whole process, explaining \n+changes made to the `Cargo.toml` file, passing command line arguments to the\n+compiler, and shows a quick example of backtrace in the wild.  \n+\n+Finally, the front-page can eventually become a comprehensive reference\n+how to use a crate, like [`regex`].  In this front page, all\n+requirements are outlined, the edge cases shown, and practical examples \n+provided.  The front page goes on to show how to use regular expressions\n+then concludes with crate features.\n+\n+Don't worry about comparing your crate, which is just beginning, to other more\n+developed crates.  To get the documentation to something more polished, start\n+incrementally and put in an introduction, example, and features.  Rome was not \n+built in a day!\n+\n+The first lines within the `lib.rs` will compose the front-page, and they\n+use a different convention than the rest of the rustdocs.  Lines should\n+start with `//!` which indicate module-level or crate-level documentation.\n+Here's a quick example of the difference:\n+\n+```rust,ignore\n+//! Fast and easy queue abstraction.\n+//!\n+//! Provides an abstraction over a queue.  When the abstraction is used\n+//! there are these advantages:\n+//! - Fast\n+//! - [`Easy`]\n+//!\n+//! [`Easy`]: http://thatwaseasy.example.com\n+\n+/// This module makes it easy.\n+pub mod easy {\n+\n+    /// Use the abstract function to do this specific thing.\n+    pub fn abstract() {}\n+\n+}\n+```\n+\n+Ideally, this first line of documentation is a sentence without highly \n+technical details, but with a good description of where this crate fits\n+within the rust ecosystem.  Users should know whether this crate meets their use\n+case after reading this line.\n+\n+## Documenting components\n+\n+Whether it is modules, structs, functions, or macros: the public\n+API of all code should have documentation. Rarely does anyone\n+complain about too much documentation!\n \n It is recommended that each item's documentation follows this basic structure:\n \n@@ -23,9 +94,9 @@ It is recommended that each item's documentation follows this basic structure:\n ```\n \n This basic structure should be straightforward to follow when writing your\n-documentation and, while you might think that a code example is trivial,\n-the examples are really important because they can help your users to\n-understand what an item is, how it is used, and for what purpose it exists.\n+documentation; while you might think that a code example is trivial,\n+the examples are really important because they can help users understand \n+what an item is, how it is used, and for what purpose it exists.\n \n Let's see an example coming from the [standard library] by taking a look at the\n [`std::env::args()`][env::args] function:\n@@ -62,21 +133,40 @@ for argument in env::args() {\n [`args_os`]: ./fn.args_os.html\n ``````\n \n+Everything before the first empty line will be reused to describe the component \n+in searches and module overviews.  For example, the function `std::env::args()`\n+above will be shown on the [`std::env`] module documentation.  It is good\n+practice to keep the summary to one line: concise writing is a goal of good\n+documentation.\n+\n+Because the type system does a good job of defining what types a function\n+passes and returns, there is no benefit of explicitly writing it\n+into the documentation, especially since `rustdoc` adds hyper links to all types in the function signature.\n+\n+In the example above, a 'Panics' section explains when the code might abruptly exit,\n+which can help the reader prevent reaching a panic.  A panic section is recommended\n+every time edge cases in your code can be reached if known.\n+\n As you can see, it follows the structure detailed above: it starts with a short\n sentence explaining what the functions does, then it provides more information\n and finally provides a code example.\n \n ## Markdown\n \n-`rustdoc` is using the [commonmark markdown specification]. You might be\n+`rustdoc` uses the [commonmark markdown specification]. You might be\n interested into taking a look at their website to see what's possible to do.\n+ - [commonmark quick reference]\n+ - [current spec]\n \n-## Lints\n-\n-To be sure that you didn't miss any item without documentation or code examples,\n-you can take a look at the rustdoc lints [here][rustdoc-lints].\n \n-[standard library]: https://doc.rust-lang.org/stable/std/index.html\n-[env::args]: https://doc.rust-lang.org/stable/std/env/fn.args.html\n+[`backtrace`]: https://docs.rs/backtrace/0.3.50/backtrace/\n [commonmark markdown specification]: https://commonmark.org/\n-[rustdoc-lints]: lints.md\n+[commonmark quick reference]: https://commonmark.org/help/\n+[env::args]: https://doc.rust-lang.org/stable/std/env/fn.args.html\n+[`Future`]: https://doc.rust-lang.org/std/future/trait.Future.html \n+[`futures`]: https://docs.rs/futures/0.3.5/futures/\n+[`hashbrown`]: https://docs.rs/hashbrown/0.8.2/hashbrown/\n+[`regex`]: https://docs.rs/regex/1.3.9/regex/\n+[standard library]: https://doc.rust-lang.org/stable/std/index.html\n+[current spec]: https://spec.commonmark.org/current/\n+[`std::env`]: https://doc.rust-lang.org/stable/std/env/index.html#functions"}, {"sha": "1e050e321d2e3cd40a1fea72b7fa0f48a4ccbad8", "filename": "src/doc/rustdoc/src/references.md", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md", "raw_url": "https://github.com/rust-lang/rust/raw/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md?ref=a601302ff0217b91589b5a7310a8a23adb843fdc", "patch": "@@ -0,0 +1,31 @@\n+# References\n+\n+There are many great `rustdoc` references out there.\n+If you know of other great resources, please submit a pull request!\n+\n+## Official \n+\n+- [Learn Rust]\n+- [Rust By Example]\n+- [Rust Reference]\n+- [RFC 1574: More API Documentation Conventions]\n+- [RFC 1946: Intra Rustdoc Links]\n+\n+## Community \n+- [API Guidelines]\n+- [Github tagged RFCs]\n+- [Github tagged issues]\n+- [RFC (stalled) front page styleguide]\n+- [Guide on how to write documenation for a Rust crate]\n+\n+\n+[API Guidelines]: https://rust-lang.github.io/api-guidelines/documentation.html\n+[Github tagged RFCs]: https://github.com/rust-lang/rfcs/issues?q=label%3AT-rustdoc\n+[Github tagged issues]: https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+label%3AT-rustdoc\n+[Guide on how to write documenation for a Rust crate]: https://blog.guillaume-gomez.fr/articles/2020-03-12+Guide+on+how+to+write+documentation+for+a+Rust+crate\n+[Learn Rust]: https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#making-useful-documentation-comments\n+[RFC 1574: More API Documentation Conventions]: https://rust-lang.github.io/rfcs/1574-more-api-documentation-conventions.html\n+[RFC 1946: Intra Rustdoc Links]: https://rust-lang.github.io/rfcs/1946-intra-rustdoc-links.html\n+[RFC (stalled) front page styleguide]: https://github.com/rust-lang/rfcs/pull/1687\n+[Rust By Example]: https://doc.rust-lang.org/stable/rust-by-example/meta/doc.html\n+[Rust Reference]: https://doc.rust-lang.org/stable/reference/comments.html#doc-comments\n\\ No newline at end of file"}, {"sha": "1f6dced180b96dab02bb71ba53116477da6667fe", "filename": "src/doc/rustdoc/src/what-is-rustdoc.md", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md?ref=a601302ff0217b91589b5a7310a8a23adb843fdc", "patch": "@@ -7,14 +7,14 @@ CSS, and JavaScript.\n \n ## Basic usage\n \n-Let's give it a try! Let's create a new project with Cargo:\n+Let's give it a try! Create a new project with Cargo:\n \n ```bash\n $ cargo new docs\n $ cd docs\n ```\n \n-In `src/lib.rs`, you'll find that Cargo has generated some sample code. Delete\n+In `src/lib.rs`, Cargo has generated some sample code. Delete\n it and replace it with this:\n \n ```rust\n@@ -31,8 +31,12 @@ $ rustdoc src/lib.rs\n \n This will create a new directory, `doc`, with a website inside! In our case,\n the main page is located in `doc/lib/index.html`. If you open that up in\n-a web browser, you'll see a page with a search bar, and \"Crate lib\" at the\n-top, with no contents. There's two problems with this: first, why does it\n+a web browser, you will see a page with a search bar, and \"Crate lib\" at the\n+top, with no contents. \n+\n+## Configuring rustdoc\n+\n+There are two problems with this: first, why does it\n think that our package is named \"lib\"? Second, why does it not have any\n contents?\n \n@@ -46,7 +50,7 @@ $ rustdoc src/lib.rs --crate-name docs\n \n Now, `doc/docs/index.html` will be generated, and the page says \"Crate docs.\"\n \n-For the second issue, it's because our function `foo` is not public; `rustdoc`\n+For the second issue, it is because our function `foo` is not public; `rustdoc`\n defaults to generating documentation for only public functions. If we change\n our code...\n \n@@ -61,7 +65,7 @@ pub fn foo() {}\n $ rustdoc src/lib.rs --crate-name docs\n ```\n \n-We'll have some generated documentation. Open up `doc/docs/index.html` and\n+We now have some generated documentation. Open up `doc/docs/index.html` and\n check it out! It should show a link to the `foo` function's page, which\n is located at `doc/docs/fn.foo.html`. On that page, you'll see the \"foo is\n a function\" we put inside the documentation comment in our crate.\n@@ -85,13 +89,12 @@ dependency=<path>/docs/target/debug/deps\n You can see this with `cargo doc --verbose`.\n \n It generates the correct `--crate-name` for us, as well as pointing to\n-`src/lib.rs` But what about those other arguments? `-o` controls the\n-*o*utput of our docs. Instead of a top-level `doc` directory, you'll\n-notice that Cargo puts generated documentation under `target`. That's\n-the idiomatic place for generated files in Cargo projects. Also, it\n-passes `-L`, a flag that helps rustdoc find the dependencies\n-your code relies on. If our project used dependencies, we'd get\n-documentation for them as well!\n+`src/lib.rs`. But what about those other arguments? \n+ - `-o` controls the *o*utput of our docs. Instead of a top-level \n+ `doc` directory, notice that Cargo puts generated documentation under \n+ `target`. That is the idiomatic place for generated files in Cargo projects.\n+ - `-L` flag helps rustdoc find the dependencies your code relies on. \n+ If our project used dependencies, we would get documentation for them as well!\n \n ## Outer and inner documentation\n \n@@ -118,7 +121,7 @@ For more information about the `//!` syntax, see [the Book].\n \n ## Using standalone Markdown files\n \n-`rustdoc` can also generate HTML from standalone Markdown files. Let's\n+`rustdoc` can also generate HTML from standalone Markdown files. Let' s\n give it a try: create a `README.md` file with these contents:\n \n ````text\n@@ -128,7 +131,7 @@ This is a project to test out `rustdoc`.\n \n [Here is a link!](https://www.rust-lang.org)\n \n-## Subheading\n+## Example\n \n ```rust\n fn foo() -> i32 {\n@@ -143,7 +146,7 @@ And call `rustdoc` on it:\n $ rustdoc README.md\n ```\n \n-You'll find an HTML file in `docs/doc/README.html` generated from its\n+You will find an HTML file in `docs/doc/README.html` generated from its\n Markdown contents.\n \n Cargo currently does not understand standalone Markdown files, unfortunately."}, {"sha": "878c75baae727edfc177c9e234125ceee689dc2c", "filename": "src/doc/rustdoc/src/what-to-include.md", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md", "raw_url": "https://github.com/rust-lang/rust/raw/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md?ref=a601302ff0217b91589b5a7310a8a23adb843fdc", "patch": "@@ -0,0 +1,125 @@\n+# What to include (and exclude)\n+\n+It is easy to say everything must be documented in a project and often times\n+that is correct, but how can we get there, and are there things that don't\n+belong?\n+\n+At the top of the `src/lib.rs` or `main.rs` file in your binary project, include\n+the following attribute:\n+\n+```rust\n+#![warn(missing_docs)]\n+```\n+\n+Now run `cargo doc` and examine the output.  Here's a sample:\n+\n+```text\n+ Documenting docdemo v0.1.0 (/Users/username/docdemo)\n+warning: missing documentation for the crate\n+ --> src/main.rs:1:1\n+  |\n+1 | / #![warn(missing_docs)]\n+2 | |\n+3 | | fn main() {\n+4 | |     println!(\"Hello, world!\");\n+5 | | }\n+  | |_^\n+  |\n+note: the lint level is defined here\n+ --> src/main.rs:1:9\n+  |\n+1 | #![warn(missing_docs)]\n+  |         ^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+\n+    Finished dev [unoptimized + debuginfo] target(s) in 2.96s\n+```\n+\n+As a library author, adding the lint `#![deny(missing_docs)]` is a great way to\n+ensure the project does not drift away from being documented well, and\n+`#![warn(missing_docs)]` is a good way to move towards comprehensive \n+documentation.  In addition to docs, `#![deny(missing_doc_code_examples)]`\n+ensures each function contains a usage example.  In our example above, the\n+warning is resolved by adding crate level documentation. \n+\n+There are more lints in the upcoming chapter [Lints][rustdoc-lints].\n+\n+## Examples\n+\n+Of course this is contrived to be simple, but part of the power of documentation\n+is showing code that is easy to follow, rather than being realistic.  Docs often\n+take shortcuts with error handling because examples can become complicated to\n+follow with all the necessary set up required for a simple example.\n+\n+`Async` is a good example of this.  In order to execute an `async` example, an\n+executor needs to be available.  Examples will often shortcut this, and leave\n+users to figure out how to put the `async` code into their own runtime.\n+\n+It is preferred that `unwrap()` not be used inside an example, and some of the\n+error handling components be hidden if they make the example too difficult to\n+follow.  \n+\n+``````text\n+/// Example\n+/// ```rust\n+/// let fourtytwo = \"42\".parse::<u32>()?;\n+/// println!(\"{} + 10 = {}\", fourtytwo, fourtytwo+10);\n+/// ```\n+``````  \n+\n+When rustdoc wraps that in a main function, it will fail to compile because the \n+`ParseIntError` trait is not implemented.  In order to help both your audience\n+and your test suite, this example needs some additional code:\n+\n+``````text\n+/// Example\n+/// ```rust\n+/// # main() -> Result<(), std::num::ParseIntError> {\n+/// let fortytwo = \"42\".parse::<u32>()?;\n+/// println!(\"{} + 10 = {}\", fortytwo, fortytwo+10);\n+/// #     Ok(())\n+/// # }\n+/// ```\n+``````  \n+\n+The example is the same on the doc page, but has that extra information\n+available to anyone trying to use your crate.  More about tests in the \n+upcoming [Documentation tests] chapter.  \n+\n+## What to Exclude\n+\n+Certain parts of your public interface may be included by default in the output\n+of rustdoc.  The attribute `#[doc(hidden)]` can hide implementation details\n+to encourage idiomatic use of the crate.  \n+\n+For example, an internal `macro!` that makes the crate easier to implement can\n+become a footgun for users when it appears in the public documentation.  An\n+internal `Error` type may exist, and `impl` details should be hidden, as\n+detailed in the [API Guidelines].\n+\n+## Customizing the output\n+\n+It is possible to pass a custom css file to `rustdoc` and style the\n+documentation.  \n+\n+```bash\n+rustdoc --extend-css custom.css src/lib.rs\n+``` \n+\n+A good example of using this feature to create a dark theme is documented [on\n+this blog].  Just remember, dark theme is already included in the rustdoc output\n+by clicking on the paintbrush.  Adding additional options to the themes are\n+as easy as creating a custom theme `.css` file and using the following syntax:\n+\n+```bash\n+rustdoc --theme awesome.css src/lib.rs\n+```\n+\n+Here is an example of a new theme, [Ayu].\n+\n+[Ayu]: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/themes/ayu.css\n+[API Guidelines]: https://rust-lang.github.io/api-guidelines/documentation.html#rustdoc-does-not-show-unhelpful-implementation-details-c-hidden\n+[Documentation tests]: documentation-tests.md\n+[on this blog]: https://blog.guillaume-gomez.fr/articles/2016-09-16+Generating+doc+with+rustdoc+and+a+custom+theme\n+[rustdoc-lints]: lints.md\n\\ No newline at end of file"}, {"sha": "616b031814fa5fd8766aaae30539fb9481bf1f53", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a601302ff0217b91589b5a7310a8a23adb843fdc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a601302ff0217b91589b5a7310a8a23adb843fdc", "patch": "@@ -432,6 +432,7 @@ fn usage(argv0: &str) {\n         (option.apply)(&mut options);\n     }\n     println!(\"{}\", options.usage(&format!(\"{} [options] <input>\", argv0)));\n+    println!(\"More information available at https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html\")\n }\n \n /// A result type used by several functions under `main()`."}]}