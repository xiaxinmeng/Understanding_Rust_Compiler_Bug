{"sha": "ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec", "node_id": "C_kwDOAAsO6NoAKGNjYzZmZmIwM2RjZmViYTFkM2E5MWFhMjRhMmNiMDk0MzUwNjA1ZWM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-07T07:23:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-07T07:23:14Z"}, "message": "try to make things faster when only ptr provenance can exist", "tree": {"sha": "61e0c36fd085f251f3c382cc2bf7ae4f35b90cb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e0c36fd085f251f3c382cc2bf7ae4f35b90cb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec", "html_url": "https://github.com/rust-lang/rust/commit/ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edbbb104772a89089a08f0846623fb52e445c08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/edbbb104772a89089a08f0846623fb52e445c08c", "html_url": "https://github.com/rust-lang/rust/commit/edbbb104772a89089a08f0846623fb52e445c08c"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "2e2829dd835df554577c7f0a8c48285401998ef3", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/provenance_map.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs?ref=ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec", "patch": "@@ -37,8 +37,9 @@ impl ProvenanceMap {\n     /// indeed that is how codegen treats them).\n     ///\n     /// Only exposed with `AllocId` provenance, since it panics if there is bytewise provenance.\n+    #[inline]\n     pub fn ptrs(&self) -> &SortedMap<Size, AllocId> {\n-        assert!(self.bytes.is_empty());\n+        debug_assert!(self.bytes.is_empty());\n         &self.ptrs\n     }\n }\n@@ -106,7 +107,11 @@ impl<Prov: Provenance> ProvenanceMap<Prov> {\n         let start = range.start;\n         let end = range.end();\n         // Clear the bytewise part -- this is easy.\n-        self.bytes.remove_range(start..end);\n+        if Prov::OFFSET_IS_ADDR {\n+            self.bytes.remove_range(start..end);\n+        } else {\n+            debug_assert!(self.bytes.is_empty());\n+        }\n \n         // For the ptr-sized part, find the first (inclusive) and last (exclusive) byte of\n         // provenance that overlaps with the given range.\n@@ -167,7 +172,6 @@ pub struct ProvenanceCopy<Prov> {\n }\n \n impl<Prov: Provenance> ProvenanceMap<Prov> {\n-    #[instrument(skip(self, cx), level = \"debug\")]\n     pub fn prepare_copy(\n         &self,\n         src: AllocRange,\n@@ -225,7 +229,11 @@ impl<Prov: Provenance> ProvenanceMap<Prov> {\n             trace!(\"no start overlapping entry\");\n         }\n         // Then the main part, bytewise provenance from `self.bytes`.\n-        bytes.extend(self.bytes.range(src.start..src.end()));\n+        if Prov::OFFSET_IS_ADDR {\n+            bytes.extend(self.bytes.range(src.start..src.end()));\n+        } else {\n+            debug_assert!(self.bytes.is_empty());\n+        }\n         // And finally possibly parts of a pointer at the end.\n         if let Some(entry) = self.range_get_ptrs(alloc_range(src.end(), Size::ZERO), cx).first() {\n             if !Prov::OFFSET_IS_ADDR {\n@@ -266,6 +274,10 @@ impl<Prov: Provenance> ProvenanceMap<Prov> {\n     /// to be clear of provenance.\n     pub fn apply_copy(&mut self, copy: ProvenanceCopy<Prov>) {\n         self.ptrs.insert_presorted(copy.dest_ptrs);\n-        self.bytes.insert_presorted(copy.dest_bytes);\n+        if Prov::OFFSET_IS_ADDR {\n+            self.bytes.insert_presorted(copy.dest_bytes);\n+        } else {\n+            debug_assert!(copy.dest_bytes.is_empty());\n+        }\n     }\n }"}]}