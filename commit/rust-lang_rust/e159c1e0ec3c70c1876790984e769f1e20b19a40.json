{"sha": "e159c1e0ec3c70c1876790984e769f1e20b19a40", "node_id": "C_kwDOAAsO6NoAKGUxNTljMWUwZWMzYzcwYzE4NzY3OTA5ODRlNzY5ZjFlMjBiMTlhNDA", "commit": {"author": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2023-02-15T17:45:20Z"}, "committer": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2023-02-15T17:52:23Z"}, "message": "Skip method calls with arity mismatch", "tree": {"sha": "ea3dbac88f2b0a1282a2a1944af5bc137b820a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea3dbac88f2b0a1282a2a1944af5bc137b820a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e159c1e0ec3c70c1876790984e769f1e20b19a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e159c1e0ec3c70c1876790984e769f1e20b19a40", "html_url": "https://github.com/rust-lang/rust/commit/e159c1e0ec3c70c1876790984e769f1e20b19a40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e159c1e0ec3c70c1876790984e769f1e20b19a40/comments", "author": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08cc628e7334b7f200b09f5f2c77700231103fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/08cc628e7334b7f200b09f5f2c77700231103fb3", "html_url": "https://github.com/rust-lang/rust/commit/08cc628e7334b7f200b09f5f2c77700231103fb3"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "79b3c0590b6bf16388fe7b37e5588f7186861879", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e159c1e0ec3c70c1876790984e769f1e20b19a40/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e159c1e0ec3c70c1876790984e769f1e20b19a40/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=e159c1e0ec3c70c1876790984e769f1e20b19a40", "patch": "@@ -298,6 +298,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // call's arguments and we can provide a more explicit span.\n                 let sig = self.tcx.fn_sig(def_id).subst_identity();\n                 let def_self_ty = sig.input(0).skip_binder();\n+                let param_tys = sig.inputs().skip_binder().iter().skip(1);\n+                // If there's an arity mismatch, pointing out the call as the source of an inference\n+                // can be misleading, so we skip it.\n+                if param_tys.len() != args.len() {\n+                    continue;\n+                }\n                 let rcvr_ty = self.node_ty(rcvr.hir_id);\n                 // Get the evaluated type *after* calling the method call, so that the influence\n                 // of the arguments can be reflected in the receiver type. The receiver\n@@ -323,7 +329,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut param_found = FxHashMap::default();\n                 if self.can_eq(self.param_env, ty, found).is_ok() {\n                     // We only point at the first place where the found type was inferred.\n-                    for (param_ty, arg) in sig.inputs().skip_binder().iter().skip(1).zip(args) {\n+                    for (param_ty, arg) in param_tys.zip(args) {\n                         if def_self_ty.contains(*param_ty) && let ty::Param(_) = param_ty.kind() {\n                             // We found an argument that references a type parameter in `Self`,\n                             // so we assume that this is the argument that caused the found"}, {"sha": "7903e9e83cfb3e001865b0e8d5298fca155a1bd0", "filename": "tests/ui/type/type-check/point-at-inference-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e159c1e0ec3c70c1876790984e769f1e20b19a40/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e159c1e0ec3c70c1876790984e769f1e20b19a40/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs?ref=e159c1e0ec3c70c1876790984e769f1e20b19a40", "patch": "@@ -13,8 +13,6 @@ fn main() {\n     //~^ ERROR this method takes 2 arguments but 1 argument was supplied\n     //~| NOTE an argument is missing\n     //~| HELP provide the argument\n-    //~| NOTE this is of type `i32`, which causes `s` to be inferred as `S<i32, _>`\n-    //~| HELP change the type of the numeric literal from `i32` to `u32`\n     let t: S<u32, _> = s;\n     //~^ ERROR mismatched types\n     //~| NOTE expected `S<u32, _>`, found `S<i32, _>`"}, {"sha": "fac9701e4a11e87e4e09247987a96449a4d1ce1a", "filename": "tests/ui/type/type-check/point-at-inference-4.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e159c1e0ec3c70c1876790984e769f1e20b19a40/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e159c1e0ec3c70c1876790984e769f1e20b19a40/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr?ref=e159c1e0ec3c70c1876790984e769f1e20b19a40", "patch": "@@ -15,22 +15,15 @@ LL |     s.infer(0i32, /* b */);\n    |            ~~~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/point-at-inference-4.rs:18:24\n+  --> $DIR/point-at-inference-4.rs:16:24\n    |\n-LL |     s.infer(0i32);\n-   |             ---- this is of type `i32`, which causes `s` to be inferred as `S<i32, _>`\n-...\n LL |     let t: S<u32, _> = s;\n    |            ---------   ^ expected `S<u32, _>`, found `S<i32, _>`\n    |            |\n    |            expected due to this\n    |\n    = note: expected struct `S<u32, _>`\n               found struct `S<i32, _>`\n-help: change the type of the numeric literal from `i32` to `u32`\n-   |\n-LL |     s.infer(0u32);\n-   |              ~~~\n \n error: aborting due to 2 previous errors\n "}]}