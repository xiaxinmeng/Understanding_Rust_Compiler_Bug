{"sha": "abd3467d47ad8f366239100334c31478f075a0de", "node_id": "C_kwDOAAsO6NoAKGFiZDM0NjdkNDdhZDhmMzY2MjM5MTAwMzM0YzMxNDc4ZjA3NWEwZGU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-23T15:12:52Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-24T08:08:25Z"}, "message": "macros: use typed identifiers in subdiag derive\n\nAs in the diagnostic derive, using typed identifiers in the\nsubdiagnostic derive improves the diagnostics of using the subdiagnostic\nderive as Fluent messages will be confirmed to exist at compile-time.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "ecd4d5078913f402480080b565b59796917f7315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd4d5078913f402480080b565b59796917f7315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd3467d47ad8f366239100334c31478f075a0de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd3467d47ad8f366239100334c31478f075a0de", "html_url": "https://github.com/rust-lang/rust/commit/abd3467d47ad8f366239100334c31478f075a0de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd3467d47ad8f366239100334c31478f075a0de/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99bc97940314176bc6ed38cea11723cc1fd9ee3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/99bc97940314176bc6ed38cea11723cc1fd9ee3b", "html_url": "https://github.com/rust-lang/rust/commit/99bc97940314176bc6ed38cea11723cc1fd9ee3b"}], "stats": {"total": 495, "additions": 298, "deletions": 197}, "files": [{"sha": "8d5ab1a45173d8e4b351f7095c0d4270a68d0712", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -347,6 +347,27 @@ impl<S: Into<String>> From<S> for DiagnosticMessage {\n     }\n }\n \n+/// Translating *into* a subdiagnostic message from a diagnostic message is a little strange - but\n+/// the subdiagnostic functions (e.g. `span_label`) take a `SubdiagnosticMessage` and the\n+/// subdiagnostic derive refers to typed identifiers that are `DiagnosticMessage`s, so need to be\n+/// able to convert between these, as much as they'll be converted back into `DiagnosticMessage`\n+/// using `with_subdiagnostic_message` eventually. Don't use this other than for the derive.\n+impl Into<SubdiagnosticMessage> for DiagnosticMessage {\n+    fn into(self) -> SubdiagnosticMessage {\n+        match self {\n+            DiagnosticMessage::Str(s) => SubdiagnosticMessage::Str(s),\n+            DiagnosticMessage::FluentIdentifier(id, None) => {\n+                SubdiagnosticMessage::FluentIdentifier(id)\n+            }\n+            // There isn't really a sensible behaviour for this because it loses information but\n+            // this is the most sensible of the behaviours.\n+            DiagnosticMessage::FluentIdentifier(_, Some(attr)) => {\n+                SubdiagnosticMessage::FluentAttr(attr)\n+            }\n+        }\n+    }\n+}\n+\n /// A span together with some additional data.\n #[derive(Clone, Debug)]\n pub struct SpanLabel {"}, {"sha": "2eee4bfb5dd45bce0a254ce43cb15668b59183a4", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -72,12 +72,12 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// ```ignore (rust)\n /// #[derive(SessionSubdiagnostic)]\n /// pub enum ExpectedIdentifierLabel<'tcx> {\n-///     #[label(slug = \"parser-expected-identifier\")]\n+///     #[label(parser::expected_identifier)]\n ///     WithoutFound {\n ///         #[primary_span]\n ///         span: Span,\n ///     }\n-///     #[label(slug = \"parser-expected-identifier-found\")]\n+///     #[label(parser::expected_identifier_found)]\n ///     WithFound {\n ///         #[primary_span]\n ///         span: Span,\n@@ -86,7 +86,7 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// }\n ///\n /// #[derive(SessionSubdiagnostic)]\n-/// #[suggestion_verbose(slug = \"parser-raw-identifier\")]\n+/// #[suggestion_verbose(parser::raw_identifier)]\n /// pub struct RawIdentifierSuggestion<'tcx> {\n ///     #[primary_span]\n ///     span: Span,"}, {"sha": "eab954a9c1bf9c886577b3b63b1d627a29ed8ab7", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 72, "deletions": 12, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -13,7 +13,7 @@ use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::fmt;\n use std::str::FromStr;\n-use syn::{spanned::Spanned, Meta, MetaList, MetaNameValue};\n+use syn::{parse_quote, spanned::Spanned, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n /// Which kind of suggestion is being created?\n@@ -194,8 +194,8 @@ struct SessionSubdiagnosticDeriveBuilder<'a> {\n     kind: Option<(SubdiagnosticKind, proc_macro::Span)>,\n \n     /// Slug of the subdiagnostic - corresponds to the Fluent identifier for the message - from the\n-    /// `#[kind(slug = \"...\")]` attribute on the type or variant.\n-    slug: Option<(String, proc_macro::Span)>,\n+    /// `#[kind(slug)]` attribute on the type or variant.\n+    slug: Option<(Path, proc_macro::Span)>,\n     /// If a suggestion, the code to suggest as a replacement - from the `#[kind(code = \"...\")]`\n     /// attribute on the type or variant.\n     code: Option<(TokenStream, proc_macro::Span)>,\n@@ -224,9 +224,34 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n             let meta = attr.parse_meta()?;\n             let kind = match meta {\n                 Meta::List(MetaList { ref nested, .. }) => {\n-                    for nested_attr in nested {\n+                    let mut nested_iter = nested.into_iter();\n+                    if let Some(nested_attr) = nested_iter.next() {\n+                        match nested_attr {\n+                            NestedMeta::Meta(Meta::Path(path)) => {\n+                                self.slug.set_once((path.clone(), span));\n+                            }\n+                            NestedMeta::Meta(meta @ Meta::NameValue(_))\n+                                if matches!(\n+                                    meta.path().segments.last().unwrap().ident.to_string().as_str(),\n+                                    \"code\" | \"applicability\"\n+                                ) =>\n+                            {\n+                                // don't error for valid follow-up attributes\n+                            }\n+                            nested_attr => {\n+                                throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                                    diag.help(\n+                                        \"first argument of the attribute should be the diagnostic \\\n+                                         slug\",\n+                                    )\n+                                })\n+                            }\n+                        };\n+                    }\n+\n+                    for nested_attr in nested_iter {\n                         let meta = match nested_attr {\n-                            syn::NestedMeta::Meta(ref meta) => meta,\n+                            NestedMeta::Meta(ref meta) => meta,\n                             _ => throw_invalid_nested_attr!(attr, &nested_attr),\n                         };\n \n@@ -241,7 +266,6 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                                         let formatted_str = self.build_format(&s.value(), s.span());\n                                         self.code.set_once((formatted_str, span));\n                                     }\n-                                    \"slug\" => self.slug.set_once((s.value(), span)),\n                                     \"applicability\" => {\n                                         let value = match Applicability::from_str(&s.value()) {\n                                             Ok(v) => v,\n@@ -253,11 +277,23 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                                         self.applicability.set_once((quote! { #value }, span));\n                                     }\n                                     _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                        diag.help(\"only `code`, `slug` and `applicability` are valid nested attributes\")\n+                                        diag.help(\n+                                            \"only `code` and `applicability` are valid nested \\\n+                                             attributes\",\n+                                        )\n                                     }),\n                                 }\n                             }\n-                            _ => throw_invalid_nested_attr!(attr, &nested_attr),\n+                            _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                                if matches!(meta, Meta::Path(_)) {\n+                                    diag.help(\n+                                        \"a diagnostic slug must be the first argument to the \\\n+                                         attribute\",\n+                                    )\n+                                } else {\n+                                    diag\n+                                }\n+                            }),\n                         }\n                     }\n \n@@ -281,10 +317,27 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                 );\n             }\n \n+            if matches!(\n+                kind,\n+                SubdiagnosticKind::Label | SubdiagnosticKind::Help | SubdiagnosticKind::Note\n+            ) && self.applicability.is_some()\n+            {\n+                throw_span_err!(\n+                    span,\n+                    &format!(\n+                        \"`applicability` is not a valid nested attribute of a `{}` attribute\",\n+                        name\n+                    )\n+                );\n+            }\n+\n             if self.slug.is_none() {\n                 throw_span_err!(\n                     span,\n-                    &format!(\"`slug` must be set in a `#[{}(...)]` attribute\", name)\n+                    &format!(\n+                        \"diagnostic slug must be first argument of a `#[{}(...)]` attribute\",\n+                        name\n+                    )\n                 );\n             }\n \n@@ -335,7 +388,10 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n                         return Ok(quote! {});\n                     }\n                     _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                        diag.help(\"only `primary_span`, `applicability` and `skip_arg` are valid field attributes\")\n+                        diag.help(\n+                            \"only `primary_span`, `applicability` and `skip_arg` are valid field \\\n+                             attributes\",\n+                        )\n                     }),\n                 },\n                 _ => throw_invalid_attr!(attr, &meta),\n@@ -375,7 +431,11 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n         }\n \n         // Missing slug errors will already have been reported.\n-        let slug = self.slug.as_ref().map(|(slug, _)| &**slug).unwrap_or(\"missing-slug\");\n+        let slug = self\n+            .slug\n+            .as_ref()\n+            .map(|(slug, _)| slug.clone())\n+            .unwrap_or_else(|| parse_quote! { you::need::to::specify::a::slug });\n         let code = match self.code.as_ref() {\n             Some((code, _)) => Some(quote! { #code }),\n             None if is_suggestion => {\n@@ -397,7 +457,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n \n         let diag = &self.diag;\n         let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n-        let message = quote! { rustc_errors::SubdiagnosticMessage::message(#slug) };\n+        let message = quote! { rustc_errors::fluent::#slug };\n         let call = if matches!(kind, SubdiagnosticKind::Suggestion(..)) {\n             if let Some(span) = span_field {\n                 quote! { #diag.#name(#span, #message, #code, #applicability); }"}, {"sha": "58d5d43cfbfa83ff4e32cb38f294a9dfaa9ae149", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -265,7 +265,7 @@ struct BadTypePlus {\n #[derive(SessionSubdiagnostic)]\n pub enum BadTypePlusSub {\n     #[suggestion(\n-        slug = \"parser-add-paren\",\n+        parser::add_paren,\n         code = \"{sum_with_parens}\",\n         applicability = \"machine-applicable\"\n     )]\n@@ -274,12 +274,12 @@ pub enum BadTypePlusSub {\n         #[primary_span]\n         span: Span,\n     },\n-    #[label(slug = \"parser-forgot-paren\")]\n+    #[label(parser::forgot_paren)]\n     ForgotParen {\n         #[primary_span]\n         span: Span,\n     },\n-    #[label(slug = \"parser-expect-path\")]\n+    #[label(parser::expect_path)]\n     ExpectPath {\n         #[primary_span]\n         span: Span,"}, {"sha": "4cdec615d8290352067207817dc8dd95ddff0823", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -197,7 +197,7 @@ pub struct AddressOfTemporaryTaken {\n #[derive(SessionSubdiagnostic)]\n pub enum AddReturnTypeSuggestion<'tcx> {\n     #[suggestion(\n-        slug = \"typeck-add-return-type-add\",\n+        typeck::add_return_type_add,\n         code = \"-> {found} \",\n         applicability = \"machine-applicable\"\n     )]\n@@ -207,7 +207,7 @@ pub enum AddReturnTypeSuggestion<'tcx> {\n         found: Ty<'tcx>,\n     },\n     #[suggestion(\n-        slug = \"typeck-add-return-type-missing-here\",\n+        typeck::add_return_type_missing_here,\n         code = \"-> _ \",\n         applicability = \"has-placeholders\"\n     )]\n@@ -219,12 +219,12 @@ pub enum AddReturnTypeSuggestion<'tcx> {\n \n #[derive(SessionSubdiagnostic)]\n pub enum ExpectedReturnTypeLabel<'tcx> {\n-    #[label(slug = \"typeck-expected-default-return-type\")]\n+    #[label(typeck::expected_default_return_type)]\n     Unit {\n         #[primary_span]\n         span: Span,\n     },\n-    #[label(slug = \"typeck-expected-return-type\")]\n+    #[label(typeck::expected_return_type)]\n     Other {\n         #[primary_span]\n         span: Span,"}, {"sha": "d6f63d44ba6a87d7398205dfc51773f32dd6c826", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -23,7 +23,7 @@ struct DeriveSessionDiagnostic {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[note(slug = \"note\")]\n+#[note(parser::add_paren)]\n struct Note {\n     #[primary_span]\n     span: Span,"}, {"sha": "7bec1897fa53e56fd637ba4e8d9682dcb515d4d6", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -470,7 +470,7 @@ struct NoApplicability {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[note(slug = \"note\")]\n+#[note(parser::add_paren)]\n struct Note;\n \n #[derive(SessionDiagnostic)]"}, {"sha": "6f4b6105b3e49314b8965abb3b887b7884cbc1b9", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 84, "deletions": 75, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -20,7 +20,7 @@ use rustc_span::Span;\n use rustc_macros::SessionSubdiagnostic;\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-a\")]\n+#[label(parser::add_paren)]\n struct A {\n     #[primary_span]\n     span: Span,\n@@ -29,13 +29,13 @@ struct A {\n \n #[derive(SessionSubdiagnostic)]\n enum B {\n-    #[label(slug = \"label-b-a\")]\n+    #[label(parser::add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n         var: String,\n     },\n-    #[label(slug = \"label-b-b\")]\n+    #[label(parser::add_paren)]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -44,7 +44,7 @@ enum B {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-c\")]\n+#[label(parser::add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct C {\n     var: String,\n@@ -116,7 +116,8 @@ struct K {\n \n #[derive(SessionSubdiagnostic)]\n #[label(slug)]\n-//~^ ERROR `#[label(slug)]` is not a valid attribute\n+//~^ ERROR cannot find value `slug` in module `rustc_errors::fluent`\n+//~^^ NOTE not found in `rustc_errors::fluent`\n struct L {\n     #[primary_span]\n     span: Span,\n@@ -125,28 +126,37 @@ struct L {\n \n #[derive(SessionSubdiagnostic)]\n #[label()]\n-//~^ ERROR `slug` must be set in a `#[label(...)]` attribute\n+//~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n struct M {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(code = \"...\")]\n+#[label(parser::add_paren, code = \"...\")]\n //~^ ERROR `code` is not a valid nested attribute of a `label` attribute\n struct N {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n+#[derive(SessionSubdiagnostic)]\n+#[label(parser::add_paren, applicability = \"machine-applicable\")]\n+//~^ ERROR `applicability` is not a valid nested attribute of a `label` attribute\n+struct O {\n+    #[primary_span]\n+    span: Span,\n+    var: String,\n+}\n+\n #[derive(SessionSubdiagnostic)]\n #[foo]\n //~^ ERROR cannot find attribute `foo` in this scope\n //~^^ ERROR unsupported type attribute for subdiagnostic enum\n-enum O {\n-    #[label(slug = \"...\")]\n+enum P {\n+    #[label(parser::add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -155,7 +165,7 @@ enum O {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum P {\n+enum Q {\n     #[bar]\n //~^ ERROR `#[bar]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n@@ -167,7 +177,7 @@ enum P {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum Q {\n+enum R {\n     #[bar = \"...\"]\n //~^ ERROR `#[bar = ...]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n@@ -179,7 +189,7 @@ enum Q {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum R {\n+enum S {\n     #[bar = 4]\n //~^ ERROR `#[bar = ...]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n@@ -191,7 +201,7 @@ enum R {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum S {\n+enum T {\n     #[bar(\"...\")]\n //~^ ERROR `#[bar(\"...\")]` is not a valid attribute\n //~^^ ERROR cannot find attribute `bar` in this scope\n@@ -203,9 +213,9 @@ enum S {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum T {\n+enum U {\n     #[label(code = \"...\")]\n-//~^ ERROR `code` is not a valid nested attribute of a `label`\n+//~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n     A {\n         #[primary_span]\n         span: Span,\n@@ -214,8 +224,8 @@ enum T {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum U {\n-    #[label(slug = \"label-u\")]\n+enum V {\n+    #[label(parser::add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -230,17 +240,17 @@ enum U {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n+#[label(parser::add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n-struct V {\n+struct W {\n     #[primary_span]\n     //~^ ERROR the `#[primary_span]` attribute can only be applied to fields of type `Span`\n     span: String,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n-struct W {\n+#[label(parser::add_paren)]\n+struct X {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n@@ -249,8 +259,8 @@ struct W {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n-struct X {\n+#[label(parser::add_paren)]\n+struct Y {\n     #[primary_span]\n     span: Span,\n     #[bar]\n@@ -260,8 +270,8 @@ struct X {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n-struct Y {\n+#[label(parser::add_paren)]\n+struct Z {\n     #[primary_span]\n     span: Span,\n     #[bar = \"...\"]\n@@ -271,8 +281,8 @@ struct Y {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"...\")]\n-struct Z {\n+#[label(parser::add_paren)]\n+struct AA {\n     #[primary_span]\n     span: Span,\n     #[bar(\"...\")]\n@@ -282,45 +292,44 @@ struct Z {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-aa\")]\n-struct AA {\n+#[label(parser::add_paren)]\n+struct AB {\n     #[primary_span]\n     span: Span,\n     #[skip_arg]\n     z: Z\n }\n \n #[derive(SessionSubdiagnostic)]\n-union AB {\n+union AC {\n //~^ ERROR unexpected unsupported untagged union\n     span: u32,\n     b: u64\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-ac-1\")]\n+#[label(parser::add_paren)]\n //~^ NOTE previously specified here\n //~^^ NOTE previously specified here\n-#[label(slug = \"label-ac-2\")]\n+#[label(parser::add_paren)]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n-struct AC {\n+struct AD {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-ad-1\", slug = \"label-ad-2\")]\n-//~^ ERROR specified multiple times\n-//~^^ NOTE previously specified here\n-struct AD {\n+#[label(parser::add_paren, parser::add_paren)]\n+//~^ ERROR `#[label(parser::add_paren)]` is not a valid attribute\n+struct AE {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[label(slug = \"label-ad-1\")]\n-struct AE {\n+#[label(parser::add_paren)]\n+struct AF {\n     #[primary_span]\n //~^ NOTE previously specified here\n     span_a: Span,\n@@ -330,15 +339,15 @@ struct AE {\n }\n \n #[derive(SessionSubdiagnostic)]\n-struct AF {\n+struct AG {\n //~^ ERROR subdiagnostic kind not specified\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"suggestion-af\", code = \"...\")]\n-struct AG {\n+#[suggestion(parser::add_paren, code = \"...\")]\n+struct AH {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n@@ -347,16 +356,16 @@ struct AG {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum AH {\n-    #[suggestion(slug = \"suggestion-ag-a\", code = \"...\")]\n+enum AI {\n+    #[suggestion(parser::add_paren, code = \"...\")]\n     A {\n         #[primary_span]\n         span: Span,\n         #[applicability]\n         applicability: Applicability,\n         var: String,\n     },\n-    #[suggestion(slug = \"suggestion-ag-b\", code = \"...\")]\n+    #[suggestion(parser::add_paren, code = \"...\")]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -367,19 +376,19 @@ enum AH {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\", code = \"...\")]\n+#[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n //~^ ERROR specified multiple times\n //~^^ NOTE previously specified here\n-struct AI {\n+struct AJ {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n     applicability: Applicability,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\")]\n-struct AJ {\n+#[suggestion(parser::add_paren, code = \"...\")]\n+struct AK {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n@@ -391,9 +400,9 @@ struct AJ {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\")]\n+#[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `applicability`\n-struct AK {\n+struct AL {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n@@ -402,61 +411,61 @@ struct AK {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\")]\n+#[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `applicability`\n-struct AL {\n+struct AM {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\")]\n+#[suggestion(parser::add_paren)]\n //~^ ERROR suggestion without `code = \"...\"`\n-struct AM {\n+struct AN {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n     applicability: Applicability,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code =\"...\", applicability = \"foo\")]\n+#[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n-struct AN {\n+struct AO {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[help(slug = \"label-am\")]\n-struct AO {\n+#[help(parser::add_paren)]\n+struct AP {\n     var: String\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[note(slug = \"label-an\")]\n-struct AP;\n+#[note(parser::add_paren)]\n+struct AQ;\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code = \"...\")]\n+#[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `applicability`\n //~^^ ERROR suggestion without `#[primary_span]` field\n-struct AQ {\n+struct AR {\n     var: String,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code =\"...\", applicability = \"machine-applicable\")]\n-struct AR {\n+#[suggestion(parser::add_paren, code =\"...\", applicability = \"machine-applicable\")]\n+struct AS {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n #[label]\n //~^ ERROR unsupported type attribute for subdiagnostic enum\n-enum AS {\n-    #[label(slug = \"...\")]\n+enum AT {\n+    #[label(parser::add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -465,24 +474,24 @@ enum AS {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n-struct AT {\n+#[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n-struct AU {\n+struct AV {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum AV {\n-    #[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n+enum AW {\n+    #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -491,8 +500,8 @@ enum AV {\n }\n \n #[derive(SessionSubdiagnostic)]\n-enum AW {\n-    #[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n+enum AX {\n+    #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n     A {\n         #[primary_span]"}, {"sha": "f833bd210f7f59880965347f1bb358c597100646", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 109, "deletions": 98, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/abd3467d47ad8f366239100334c31478f075a0de/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd3467d47ad8f366239100334c31478f075a0de/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=abd3467d47ad8f366239100334c31478f075a0de", "patch": "@@ -1,7 +1,7 @@\n error: label without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:47:1\n    |\n-LL | / #[label(slug = \"label-c\")]\n+LL | / #[label(parser::add_paren)]\n LL | |\n LL | | struct C {\n LL | |     var: String,\n@@ -32,304 +32,308 @@ error: `#[label(bug = ...)]` is not a valid attribute\n LL | #[label(bug = \"...\")]\n    |         ^^^^^^^^^^^\n    |\n-   = help: only `code`, `slug` and `applicability` are valid nested attributes\n+   = help: first argument of the attribute should be the diagnostic slug\n \n error: `#[label(\"...\")]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:91:9\n    |\n LL | #[label(\"...\")]\n    |         ^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n \n error: `#[label(slug = ...)]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:100:9\n    |\n LL | #[label(slug = 4)]\n    |         ^^^^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n \n error: `#[label(slug(...))]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:109:9\n    |\n LL | #[label(slug(\"...\"))]\n    |         ^^^^^^^^^^^\n-\n-error: `#[label(slug)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:118:9\n    |\n-LL | #[label(slug)]\n-   |         ^^^^\n+   = help: first argument of the attribute should be the diagnostic slug\n \n-error: `slug` must be set in a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:127:1\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n+  --> $DIR/subdiagnostic-derive.rs:128:1\n    |\n LL | #[label()]\n    | ^^^^^^^^^^\n \n error: `code` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:136:1\n+  --> $DIR/subdiagnostic-derive.rs:137:1\n+   |\n+LL | #[label(parser::add_paren, code = \"...\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `applicability` is not a valid nested attribute of a `label` attribute\n+  --> $DIR/subdiagnostic-derive.rs:146:1\n    |\n-LL | #[label(code = \"...\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren, applicability = \"machine-applicable\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:145:1\n+  --> $DIR/subdiagnostic-derive.rs:155:1\n    |\n LL | #[foo]\n    | ^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:159:5\n+  --> $DIR/subdiagnostic-derive.rs:169:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:171:5\n+  --> $DIR/subdiagnostic-derive.rs:181:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:183:5\n+  --> $DIR/subdiagnostic-derive.rs:193:5\n    |\n LL |     #[bar = 4]\n    |     ^^^^^^^^^^\n \n error: `#[bar(\"...\")]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:195:11\n+  --> $DIR/subdiagnostic-derive.rs:205:11\n    |\n LL |     #[bar(\"...\")]\n    |           ^^^^^\n+   |\n+   = help: first argument of the attribute should be the diagnostic slug\n \n-error: `code` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:207:5\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n+  --> $DIR/subdiagnostic-derive.rs:217:5\n    |\n LL |     #[label(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:224:5\n+  --> $DIR/subdiagnostic-derive.rs:234:5\n    |\n LL |     B {\n    |     ^\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span`\n-  --> $DIR/subdiagnostic-derive.rs:236:5\n+  --> $DIR/subdiagnostic-derive.rs:246:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: label without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:233:1\n+  --> $DIR/subdiagnostic-derive.rs:243:1\n    |\n-LL | / #[label(slug = \"...\")]\n+LL | / #[label(parser::add_paren)]\n LL | |\n-LL | | struct V {\n+LL | | struct W {\n LL | |     #[primary_span]\n LL | |\n LL | |     span: String,\n LL | | }\n    | |_^\n \n error: `#[applicability]` is only valid on suggestions\n-  --> $DIR/subdiagnostic-derive.rs:246:5\n+  --> $DIR/subdiagnostic-derive.rs:256:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:256:5\n+  --> $DIR/subdiagnostic-derive.rs:266:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:267:5\n+  --> $DIR/subdiagnostic-derive.rs:277:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:278:5\n+  --> $DIR/subdiagnostic-derive.rs:288:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n \n error: unexpected unsupported untagged union\n-  --> $DIR/subdiagnostic-derive.rs:294:1\n+  --> $DIR/subdiagnostic-derive.rs:304:1\n    |\n-LL | / union AB {\n+LL | / union AC {\n LL | |\n LL | |     span: u32,\n LL | |     b: u64\n LL | | }\n    | |_^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:304:9\n+  --> $DIR/subdiagnostic-derive.rs:314:1\n    |\n-LL | #[label(slug = \"label-ac-2\")]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:301:9\n+  --> $DIR/subdiagnostic-derive.rs:311:1\n    |\n-LL | #[label(slug = \"label-ac-1\")]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:304:1\n+  --> $DIR/subdiagnostic-derive.rs:314:1\n    |\n-LL | #[label(slug = \"label-ac-2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:301:1\n+  --> $DIR/subdiagnostic-derive.rs:311:1\n    |\n-LL | #[label(slug = \"label-ac-1\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:313:30\n+error: `#[label(parser::add_paren)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:323:28\n    |\n-LL | #[label(slug = \"label-ad-1\", slug = \"label-ad-2\")]\n-   |                              ^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser::add_paren, parser::add_paren)]\n+   |                            ^^^^^^^^^^^^^^^^^\n    |\n-note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:313:9\n-   |\n-LL | #[label(slug = \"label-ad-1\", slug = \"label-ad-2\")]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+   = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:327:5\n+  --> $DIR/subdiagnostic-derive.rs:336:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:324:5\n+  --> $DIR/subdiagnostic-derive.rs:333:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:333:8\n+  --> $DIR/subdiagnostic-derive.rs:342:8\n    |\n-LL | struct AF {\n+LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:370:42\n+  --> $DIR/subdiagnostic-derive.rs:379:47\n    |\n-LL | #[suggestion(slug = \"...\", code = \"...\", code = \"...\")]\n-   |                                          ^^^^^^^^^^^^\n+LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n+   |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:370:28\n+  --> $DIR/subdiagnostic-derive.rs:379:33\n    |\n-LL | #[suggestion(slug = \"...\", code = \"...\", code = \"...\")]\n-   |                            ^^^^^^^^^^^^\n+LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n+   |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:388:5\n+  --> $DIR/subdiagnostic-derive.rs:397:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:385:5\n+  --> $DIR/subdiagnostic-derive.rs:394:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:399:5\n+  --> $DIR/subdiagnostic-derive.rs:408:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:394:1\n+  --> $DIR/subdiagnostic-derive.rs:403:1\n    |\n-LL | / #[suggestion(slug = \"...\", code = \"...\")]\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n-LL | | struct AK {\n+LL | | struct AL {\n LL | |     #[primary_span]\n ...  |\n LL | |     applicability: Span,\n LL | | }\n    | |_^\n \n error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:405:1\n+  --> $DIR/subdiagnostic-derive.rs:414:1\n    |\n-LL | / #[suggestion(slug = \"...\", code = \"...\")]\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n-LL | | struct AL {\n+LL | | struct AM {\n LL | |     #[primary_span]\n LL | |     span: Span,\n LL | | }\n    | |_^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:413:1\n+  --> $DIR/subdiagnostic-derive.rs:422:1\n    |\n-LL | / #[suggestion(slug = \"...\")]\n+LL | / #[suggestion(parser::add_paren)]\n LL | |\n-LL | | struct AM {\n+LL | | struct AN {\n LL | |     #[primary_span]\n ...  |\n LL | |     applicability: Applicability,\n LL | | }\n    | |_^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:423:41\n+  --> $DIR/subdiagnostic-derive.rs:432:46\n    |\n-LL | #[suggestion(slug = \"...\", code =\"...\", applicability = \"foo\")]\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:441:1\n+  --> $DIR/subdiagnostic-derive.rs:450:1\n    |\n-LL | / #[suggestion(slug = \"...\", code = \"...\")]\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n LL | |\n-LL | | struct AQ {\n+LL | | struct AR {\n LL | |     var: String,\n LL | | }\n    | |_^\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:441:1\n+  --> $DIR/subdiagnostic-derive.rs:450:1\n    |\n-LL | / #[suggestion(slug = \"...\", code = \"...\")]\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n LL | |\n-LL | | struct AQ {\n+LL | | struct AR {\n LL | |     var: String,\n LL | | }\n    | |_^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:456:1\n+  --> $DIR/subdiagnostic-derive.rs:465:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:476:34\n+  --> $DIR/subdiagnostic-derive.rs:485:39\n    |\n-LL | #[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                  ^^^^^^^\n+LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:495:38\n+  --> $DIR/subdiagnostic-derive.rs:504:43\n    |\n-LL |     #[suggestion(slug = \"...\", code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                      ^^^^^^^\n+LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^\n \n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n@@ -338,52 +342,59 @@ LL | #[foo]\n    |   ^^^\n \n error: cannot find attribute `foo` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:145:3\n+  --> $DIR/subdiagnostic-derive.rs:155:3\n    |\n LL | #[foo]\n    |   ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:159:7\n+  --> $DIR/subdiagnostic-derive.rs:169:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:171:7\n+  --> $DIR/subdiagnostic-derive.rs:181:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:183:7\n+  --> $DIR/subdiagnostic-derive.rs:193:7\n    |\n LL |     #[bar = 4]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:195:7\n+  --> $DIR/subdiagnostic-derive.rs:205:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:256:7\n+  --> $DIR/subdiagnostic-derive.rs:266:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:267:7\n+  --> $DIR/subdiagnostic-derive.rs:277:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:278:7\n+  --> $DIR/subdiagnostic-derive.rs:288:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n \n-error: aborting due to 51 previous errors\n+error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n+  --> $DIR/subdiagnostic-derive.rs:118:9\n+   |\n+LL | #[label(slug)]\n+   |         ^^^^ not found in `rustc_errors::fluent`\n+\n+error: aborting due to 52 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}]}