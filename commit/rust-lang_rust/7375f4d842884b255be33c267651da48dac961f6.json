{"sha": "7375f4d842884b255be33c267651da48dac961f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNzVmNGQ4NDI4ODRiMjU1YmUzM2MyNjc2NTFkYTQ4ZGFjOTYxZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-29T07:56:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-29T07:56:41Z"}, "message": "auto merge of #16038 : nham/rust/collections_partialord, r=alexcrichton\n\ncc #15294", "tree": {"sha": "f208bdc060e2ca8aa85767e69fd2f93854560280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f208bdc060e2ca8aa85767e69fd2f93854560280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7375f4d842884b255be33c267651da48dac961f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7375f4d842884b255be33c267651da48dac961f6", "html_url": "https://github.com/rust-lang/rust/commit/7375f4d842884b255be33c267651da48dac961f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7375f4d842884b255be33c267651da48dac961f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23466b04f91f88afb42b3b4d4048c5c6057d81bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/23466b04f91f88afb42b3b4d4048c5c6057d81bb", "html_url": "https://github.com/rust-lang/rust/commit/23466b04f91f88afb42b3b4d4048c5c6057d81bb"}, {"sha": "8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebd58cedf616580a4052ad6df1ce74cfcd520c0", "html_url": "https://github.com/rust-lang/rust/commit/8ebd58cedf616580a4052ad6df1ce74cfcd520c0"}], "stats": {"total": 174, "additions": 172, "deletions": 2}, "files": [{"sha": "3e1160b45eee40d558a3f43dbf277d31e358f4eb", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7375f4d842884b255be33c267651da48dac961f6/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7375f4d842884b255be33c267651da48dac961f6/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=7375f4d842884b255be33c267651da48dac961f6", "patch": "@@ -67,6 +67,7 @@ use core::cmp;\n use core::default::Default;\n use core::fmt;\n use core::iter::Take;\n+use core::iter;\n use core::ops::Index;\n use core::slice;\n use core::uint;\n@@ -830,6 +831,20 @@ impl Clone for Bitv {\n     }\n }\n \n+impl PartialOrd for Bitv {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Bitv) -> Option<Ordering> {\n+        iter::order::partial_cmp(self.iter(), other.iter())\n+    }\n+}\n+\n+impl Ord for Bitv {\n+    #[inline]\n+    fn cmp(&self, other: &Bitv) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl fmt::Show for Bitv {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         for bit in self.iter() {\n@@ -955,7 +970,7 @@ impl<'a> RandomAccessIterator<bool> for Bits<'a> {\n /// assert!(bv.eq_vec([true, true, false, true,\n ///                    false, false, false, false]));\n /// ```\n-#[deriving(Clone, PartialEq, Eq)]\n+#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct BitvSet(Bitv);\n \n impl Default for BitvSet {\n@@ -2189,6 +2204,37 @@ mod tests {\n         assert_eq!(a.capacity(), uint::BITS);\n     }\n \n+    #[test]\n+    fn test_bitv_lt() {\n+        let mut a = Bitv::with_capacity(5u, false);\n+        let mut b = Bitv::with_capacity(5u, false);\n+\n+        assert!(!(a < b) && !(b < a));\n+        b.set(2, true);\n+        assert!(a < b);\n+        a.set(3, true);\n+        assert!(a < b);\n+        a.set(2, true);\n+        assert!(!(a < b) && b < a);\n+        b.set(0, true);\n+        assert!(a < b);\n+    }\n+\n+    #[test]\n+    fn test_ord() {\n+        let mut a = Bitv::with_capacity(5u, false);\n+        let mut b = Bitv::with_capacity(5u, false);\n+\n+        assert!(a <= b && a >= b);\n+        a.set(1, true);\n+        assert!(a > b && a >= b);\n+        assert!(b < a && b <= a);\n+        b.set(1, true);\n+        b.set(2, true);\n+        assert!(b > a && b >= a);\n+        assert!(a < b && a <= b);\n+    }\n+\n     #[test]\n     fn test_bitv_clone() {\n         let mut a = BitvSet::new();"}, {"sha": "f567c5777b1711e163d2474bd3ca6a8713673738", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7375f4d842884b255be33c267651da48dac961f6/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7375f4d842884b255be33c267651da48dac961f6/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=7375f4d842884b255be33c267651da48dac961f6", "patch": "@@ -373,6 +373,20 @@ impl<V:Clone> SmallIntMap<V> {\n     }\n }\n \n+impl<V: PartialOrd> PartialOrd for SmallIntMap<V> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &SmallIntMap<V>) -> Option<Ordering> {\n+        iter::order::partial_cmp(self.iter(), other.iter())\n+    }\n+}\n+\n+impl<V: Ord> Ord for SmallIntMap<V> {\n+    #[inline]\n+    fn cmp(&self, other: &SmallIntMap<V>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<V: fmt::Show> fmt::Show for SmallIntMap<V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n@@ -770,6 +784,38 @@ mod test_map {\n         assert!(a == b);\n     }\n \n+    #[test]\n+    fn test_lt() {\n+        let mut a = SmallIntMap::new();\n+        let mut b = SmallIntMap::new();\n+\n+        assert!(!(a < b) && !(b < a));\n+        assert!(b.insert(2u, 5i));\n+        assert!(a < b);\n+        assert!(a.insert(2, 7));\n+        assert!(!(a < b) && b < a);\n+        assert!(b.insert(1, 0));\n+        assert!(b < a);\n+        assert!(a.insert(0, 6));\n+        assert!(a < b);\n+        assert!(a.insert(6, 2));\n+        assert!(a < b && !(b < a));\n+    }\n+\n+    #[test]\n+    fn test_ord() {\n+        let mut a = SmallIntMap::new();\n+        let mut b = SmallIntMap::new();\n+\n+        assert!(a <= b && a >= b);\n+        assert!(a.insert(1u, 1i));\n+        assert!(a > b && a >= b);\n+        assert!(b < a && b <= a);\n+        assert!(b.insert(2, 2));\n+        assert!(b > a && b >= a);\n+        assert!(a < b && a <= b);\n+    }\n+\n     #[test]\n     fn test_hash() {\n         let mut x = SmallIntMap::new();"}, {"sha": "cd011b0e0133972d0eb13f91d4144fee13c5c2d7", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7375f4d842884b255be33c267651da48dac961f6/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7375f4d842884b255be33c267651da48dac961f6/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=7375f4d842884b255be33c267651da48dac961f6", "patch": "@@ -93,6 +93,20 @@ impl<T: PartialEq> PartialEq for TrieMap<T> {\n \n impl<T: Eq> Eq for TrieMap<T> {}\n \n+impl<T: PartialOrd> PartialOrd for TrieMap<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &TrieMap<T>) -> Option<Ordering> {\n+        iter::order::partial_cmp(self.iter(), other.iter())\n+    }\n+}\n+\n+impl<T: Ord> Ord for TrieMap<T> {\n+    #[inline]\n+    fn cmp(&self, other: &TrieMap<T>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<T: Show> Show for TrieMap<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n@@ -517,7 +531,7 @@ impl<S: Writer, T: Hash<S>> Hash<S> for TrieMap<T> {\n /// set.clear();\n /// assert!(set.is_empty());\n /// ```\n-#[deriving(Clone, Hash, PartialEq, Eq)]\n+#[deriving(Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub struct TrieSet {\n     map: TrieMap<()>\n }\n@@ -1309,6 +1323,38 @@ mod test_map {\n         assert!(a == b);\n     }\n \n+    #[test]\n+    fn test_lt() {\n+        let mut a = TrieMap::new();\n+        let mut b = TrieMap::new();\n+\n+        assert!(!(a < b) && !(b < a));\n+        assert!(b.insert(2u, 5i));\n+        assert!(a < b);\n+        assert!(a.insert(2, 7));\n+        assert!(!(a < b) && b < a);\n+        assert!(b.insert(1, 0));\n+        assert!(b < a);\n+        assert!(a.insert(0, 6));\n+        assert!(a < b);\n+        assert!(a.insert(6, 2));\n+        assert!(a < b && !(b < a));\n+    }\n+\n+    #[test]\n+    fn test_ord() {\n+        let mut a = TrieMap::new();\n+        let mut b = TrieMap::new();\n+\n+        assert!(a <= b && a >= b);\n+        assert!(a.insert(1u, 1i));\n+        assert!(a > b && a >= b);\n+        assert!(b < a && b <= a);\n+        assert!(b.insert(2, 2));\n+        assert!(b > a && b >= a);\n+        assert!(a < b && a <= b);\n+    }\n+\n     #[test]\n     fn test_hash() {\n       let mut x = TrieMap::new();\n@@ -1513,4 +1559,36 @@ mod test_set {\n \n         assert!(a.clone() == a);\n     }\n+\n+    #[test]\n+    fn test_lt() {\n+        let mut a = TrieSet::new();\n+        let mut b = TrieSet::new();\n+\n+        assert!(!(a < b) && !(b < a));\n+        assert!(b.insert(2u));\n+        assert!(a < b);\n+        assert!(a.insert(3u));\n+        assert!(!(a < b) && b < a);\n+        assert!(b.insert(1));\n+        assert!(b < a);\n+        assert!(a.insert(0));\n+        assert!(a < b);\n+        assert!(a.insert(6));\n+        assert!(a < b && !(b < a));\n+    }\n+\n+    #[test]\n+    fn test_ord() {\n+        let mut a = TrieSet::new();\n+        let mut b = TrieSet::new();\n+\n+        assert!(a <= b && a >= b);\n+        assert!(a.insert(1u));\n+        assert!(a > b && a >= b);\n+        assert!(b < a && b <= a);\n+        assert!(b.insert(2u));\n+        assert!(b > a && b >= a);\n+        assert!(a < b && a <= b);\n+    }\n }"}]}