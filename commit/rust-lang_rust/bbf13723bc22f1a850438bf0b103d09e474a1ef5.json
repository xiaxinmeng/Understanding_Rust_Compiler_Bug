{"sha": "bbf13723bc22f1a850438bf0b103d09e474a1ef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZjEzNzIzYmMyMmYxYTg1MDQzOGJmMGIxMDNkMDllNDc0YTFlZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-25T21:10:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-25T21:10:49Z"}, "message": "Auto merge of #66919 - dtolnay:description, r=KodrAus\n\nDeprecate Error::description for real\n\n`description` has been documented as soft-deprecated since 1.27.0 (17 months ago). There is no longer any reason to call it or implement it.\n\nThis PR:\n\n- adds `#[rustc_deprecated(since = \"1.41.0\")]` to `Error::description`;\n- moves `description` (and `cause`, which is also deprecated) below the `source` and `backtrace` methods in the Error trait;\n- reduces documentation of `description` and `cause` to take up much less vertical real estate in rustdocs, while preserving the example that shows how to render errors without needing to call `description`;\n- removes the description function of all *currently unstable* Error impls in the standard library;\n- marks `#[allow(deprecated)]` the description function of all *stable* Error impls in the standard library;\n- replaces miscellaneous uses of `description` in example code and the compiler.\n\n---\n\n![description](https://user-images.githubusercontent.com/1940490/69910369-3bbaca80-13bf-11ea-94f7-2fe27a7ea333.png)", "tree": {"sha": "b216df9683f22b67e770aee33a2828c0d2559a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b216df9683f22b67e770aee33a2828c0d2559a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf13723bc22f1a850438bf0b103d09e474a1ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf13723bc22f1a850438bf0b103d09e474a1ef5", "html_url": "https://github.com/rust-lang/rust/commit/bbf13723bc22f1a850438bf0b103d09e474a1ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf13723bc22f1a850438bf0b103d09e474a1ef5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed33453a37d602f34cc40c205f9b9b8a8aff88b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed33453a37d602f34cc40c205f9b9b8a8aff88b5", "html_url": "https://github.com/rust-lang/rust/commit/ed33453a37d602f34cc40c205f9b9b8a8aff88b5"}, {"sha": "4646a88b7a1e68326d092b9cbbbbdd616a51077f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4646a88b7a1e68326d092b9cbbbbdd616a51077f", "html_url": "https://github.com/rust-lang/rust/commit/4646a88b7a1e68326d092b9cbbbbdd616a51077f"}], "stats": {"total": 307, "additions": 107, "deletions": 200}, "files": [{"sha": "5e2c43596dbebdf6c1657b85bfb5c7695ecfd6d3", "filename": "src/librustc_driver/args.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustc_driver%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustc_driver%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fargs.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -2,7 +2,6 @@ use std::error;\n use std::fmt;\n use std::fs;\n use std::io;\n-use std::str;\n \n pub fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n     if arg.starts_with(\"@\") {\n@@ -36,8 +35,4 @@ impl fmt::Display for Error {\n     }\n }\n \n-impl error::Error for Error {\n-    fn description(&self) -> &'static str {\n-        \"argument error\"\n-    }\n-}\n+impl error::Error for Error {}"}, {"sha": "14cd31502b670f69d09200ad3157c11fdaa417f6", "filename": "src/librustc_error_codes/error_codes/E0638.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0638.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0638.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0638.md?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -10,23 +10,23 @@ For example, in the below example, since the enum is marked as\n on it.\n \n ```rust,ignore (pseudo-Rust)\n-use std::error::Error as StdError;\n-\n-#[non_exhaustive] pub enum Error {\n-   Message(String),\n-   Other,\n+#[non_exhaustive]\n+pub enum Error {\n+    Message(String),\n+    Other,\n }\n \n-impl StdError for Error {\n-   fn description(&self) -> &str {\n+impl Display for Error {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         // This will not error, despite being marked as non_exhaustive, as this\n         // enum is defined within the current crate, it can be matched\n         // exhaustively.\n-        match *self {\n-           Message(ref s) => s,\n-           Other => \"other or unknown error\",\n-        }\n-   }\n+        let display = match self {\n+            Message(s) => s,\n+            Other => \"other or unknown error\",\n+        };\n+        formatter.write_str(display)\n+    }\n }\n ```\n \n@@ -38,9 +38,9 @@ use mycrate::Error;\n // This will not error as the non_exhaustive Error enum has been matched with a\n // wildcard.\n match error {\n-   Message(ref s) => ...,\n-   Other => ...,\n-   _ => ...,\n+    Message(s) => ...,\n+    Other => ...,\n+    _ => ...,\n }\n ```\n "}, {"sha": "e93106b7adff184c3b04ac17df0e4df7969963ee", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -253,11 +253,7 @@ impl fmt::Display for ExplicitBug {\n     }\n }\n \n-impl error::Error for ExplicitBug {\n-    fn description(&self) -> &str {\n-        \"The parser has encountered an internal bug\"\n-    }\n-}\n+impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{Diagnostic, DiagnosticId, DiagnosticStyledString, SubDiagnostic};\n pub use diagnostic_builder::DiagnosticBuilder;"}, {"sha": "8a3bab2a282083bde73b13ac68f8babb791f2395", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -197,19 +197,7 @@ impl fmt::Display for ConstEvalError {\n     }\n }\n \n-impl Error for ConstEvalError {\n-    fn description(&self) -> &str {\n-        use self::ConstEvalError::*;\n-        match *self {\n-            NeedsRfc(_) => \"this feature needs an rfc before being allowed inside constants\",\n-            ConstAccessesStatic => \"constant accesses static\",\n-        }\n-    }\n-\n-    fn cause(&self) -> Option<&dyn Error> {\n-        None\n-    }\n-}\n+impl Error for ConstEvalError {}\n \n // Extra machine state for CTFE, and the Machine instance\n pub struct CompileTimeInterpreter<'mir, 'tcx> {"}, {"sha": "b578e69e60bcfca463477af65f881fa72fedd193", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -98,11 +98,7 @@ pub struct Error {\n     pub error: io::Error,\n }\n \n-impl error::Error for Error {\n-    fn description(&self) -> &str {\n-        self.error.description()\n-    }\n-}\n+impl error::Error for Error {}\n \n impl std::fmt::Display for Error {\n     fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {"}, {"sha": "cfb165a3d4397d4848774f6e1b0aece763a49c24", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -68,14 +68,7 @@ impl fmt::Display for FromHexError {\n     }\n }\n \n-impl error::Error for FromHexError {\n-    fn description(&self) -> &str {\n-        match *self {\n-            InvalidHexCharacter(..) => \"invalid character\",\n-            InvalidHexLength => \"invalid length\",\n-        }\n-    }\n-}\n+impl error::Error for FromHexError {}\n \n impl FromHex for str {\n     /// Converts any hexadecimal encoded string (literal, `@`, `&`, or `~`)"}, {"sha": "1f9d43cb93043fb20be7a4d9c756cd5413196fa5", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -345,11 +345,7 @@ impl fmt::Display for DecoderError {\n     }\n }\n \n-impl std::error::Error for DecoderError {\n-    fn description(&self) -> &str {\n-        \"decoder error\"\n-    }\n-}\n+impl std::error::Error for DecoderError {}\n \n impl fmt::Display for EncoderError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -358,11 +354,7 @@ impl fmt::Display for EncoderError {\n     }\n }\n \n-impl std::error::Error for EncoderError {\n-    fn description(&self) -> &str {\n-        \"encoder error\"\n-    }\n-}\n+impl std::error::Error for EncoderError {}\n \n impl From<fmt::Error> for EncoderError {\n     /// Converts a [`fmt::Error`] into `EncoderError`"}, {"sha": "52eebcfcb94c00fc5ca7db1127fe0788cbf4df25", "filename": "src/libstd/env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -284,6 +284,7 @@ impl fmt::Display for VarError {\n \n #[stable(feature = \"env\", since = \"1.0.0\")]\n impl Error for VarError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         match *self {\n             VarError::NotPresent => \"environment variable not found\",\n@@ -526,6 +527,7 @@ impl fmt::Display for JoinPathsError {\n \n #[stable(feature = \"env\", since = \"1.0.0\")]\n impl Error for JoinPathsError {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn description(&self) -> &str {\n         self.inner.description()\n     }"}, {"sha": "1407fe27715538dbaa1d30a612a51afd686dc2c5", "filename": "src/libstd/error.rs", "status": "modified", "additions": 44, "deletions": 116, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -45,92 +45,6 @@ use crate::string;\n /// [`source`]: trait.Error.html#method.source\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {\n-    /// **This method is soft-deprecated.**\n-    ///\n-    /// Although using it won\u2019t cause compilation warning,\n-    /// new code should use [`Display`] instead\n-    /// and new `impl`s can omit it.\n-    ///\n-    /// To obtain error description as a string, use `to_string()`.\n-    ///\n-    /// [`Display`]: ../fmt/trait.Display.html\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// match \"xc\".parse::<u32>() {\n-    ///     Err(e) => {\n-    ///         // Print `e` itself, not `e.description()`.\n-    ///         println!(\"Error: {}\", e);\n-    ///     }\n-    ///     _ => println!(\"No error\"),\n-    /// }\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn description(&self) -> &str {\n-        \"description() is deprecated; use Display\"\n-    }\n-\n-    /// The lower-level cause of this error, if any.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SuperError {\n-    ///     side: SuperErrorSideKick,\n-    /// }\n-    ///\n-    /// impl fmt::Display for SuperError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"SuperError is here!\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for SuperError {\n-    ///     fn cause(&self) -> Option<&dyn Error> {\n-    ///         Some(&self.side)\n-    ///     }\n-    /// }\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SuperErrorSideKick;\n-    ///\n-    /// impl fmt::Display for SuperErrorSideKick {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"SuperErrorSideKick is here!\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for SuperErrorSideKick {}\n-    ///\n-    /// fn get_super_error() -> Result<(), SuperError> {\n-    ///     Err(SuperError { side: SuperErrorSideKick })\n-    /// }\n-    ///\n-    /// fn main() {\n-    ///     match get_super_error() {\n-    ///         Err(e) => {\n-    ///             println!(\"Error: {}\", e.description());\n-    ///             println!(\"Caused by: {}\", e.cause().unwrap());\n-    ///         }\n-    ///         _ => println!(\"No error\"),\n-    ///     }\n-    /// }\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n-        since = \"1.33.0\",\n-        reason = \"replaced by Error::source, which can support \\\n-                                                   downcasting\"\n-    )]\n-    fn cause(&self) -> Option<&dyn Error> {\n-        self.source()\n-    }\n-\n     /// The lower-level source of this error, if any.\n     ///\n     /// # Examples\n@@ -213,6 +127,28 @@ pub trait Error: Debug + Display {\n     fn backtrace(&self) -> Option<&Backtrace> {\n         None\n     }\n+\n+    /// ```\n+    /// if let Err(e) = \"xc\".parse::<u32>() {\n+    ///     // Print `e` itself, no need for description().\n+    ///     eprintln!(\"Error: {}\", e);\n+    /// }\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(since = \"1.41.0\", reason = \"use the Display impl or to_string()\")]\n+    fn description(&self) -> &str {\n+        \"description() is deprecated; use Display\"\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(\n+        since = \"1.33.0\",\n+        reason = \"replaced by Error::source, which can support downcasting\"\n+    )]\n+    #[allow(missing_docs)]\n+    fn cause(&self) -> Option<&dyn Error> {\n+        self.source()\n+    }\n }\n \n mod private {\n@@ -318,6 +254,7 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n         struct StringError(String);\n \n         impl Error for StringError {\n+            #[allow(deprecated)]\n             fn description(&self) -> &str {\n                 &self.0\n             }\n@@ -454,96 +391,88 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n }\n \n #[unstable(feature = \"never_type\", issue = \"35121\")]\n-impl Error for ! {\n-    fn description(&self) -> &str {\n-        *self\n-    }\n-}\n+impl Error for ! {}\n \n #[unstable(\n     feature = \"allocator_api\",\n     reason = \"the precise API and guarantees it provides may be tweaked.\",\n     issue = \"32838\"\n )]\n-impl Error for AllocErr {\n-    fn description(&self) -> &str {\n-        \"memory allocation failed\"\n-    }\n-}\n+impl Error for AllocErr {}\n \n #[unstable(\n     feature = \"allocator_api\",\n     reason = \"the precise API and guarantees it provides may be tweaked.\",\n     issue = \"32838\"\n )]\n-impl Error for LayoutErr {\n-    fn description(&self) -> &str {\n-        \"invalid parameters to Layout::from_size_align\"\n-    }\n-}\n+impl Error for LayoutErr {}\n \n #[unstable(\n     feature = \"allocator_api\",\n     reason = \"the precise API and guarantees it provides may be tweaked.\",\n     issue = \"32838\"\n )]\n-impl Error for CannotReallocInPlace {\n-    fn description(&self) -> &str {\n-        CannotReallocInPlace::description(self)\n-    }\n-}\n+impl Error for CannotReallocInPlace {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for str::ParseBoolError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"failed to parse bool\"\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for str::Utf8Error {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"invalid utf-8: corrupt contents\"\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for num::ParseIntError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for num::TryFromIntError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for array::TryFromSliceError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for num::ParseFloatError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for string::FromUtf8Error {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"invalid utf-8\"\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for string::FromUtf16Error {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"invalid utf-16\"\n     }\n@@ -558,13 +487,15 @@ impl Error for string::ParseError {\n \n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl Error for char::DecodeUtf16Error {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"unpaired surrogate found\"\n     }\n }\n \n #[stable(feature = \"box_error\", since = \"1.8.0\")]\n impl<T: Error> Error for Box<T> {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn description(&self) -> &str {\n         Error::description(&**self)\n     }\n@@ -581,34 +512,39 @@ impl<T: Error> Error for Box<T> {\n \n #[stable(feature = \"fmt_error\", since = \"1.11.0\")]\n impl Error for fmt::Error {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"an error occurred when formatting an argument\"\n     }\n }\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Error for cell::BorrowError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"already mutably borrowed\"\n     }\n }\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Error for cell::BorrowMutError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"already borrowed\"\n     }\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for char::CharTryFromError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"converted integer out of range for `char`\"\n     }\n }\n \n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n impl Error for char::ParseCharError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         self.__description()\n     }\n@@ -846,16 +782,8 @@ mod tests {\n         }\n     }\n \n-    impl Error for A {\n-        fn description(&self) -> &str {\n-            \"A-desc\"\n-        }\n-    }\n-    impl Error for B {\n-        fn description(&self) -> &str {\n-            \"A-desc\"\n-        }\n-    }\n+    impl Error for A {}\n+    impl Error for B {}\n \n     #[test]\n     fn downcasting() {"}, {"sha": "d2ee65f0a74eb47cbace4479d4391888c5da175b", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -878,6 +878,7 @@ impl NulError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for NulError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"nul byte found in data\"\n     }\n@@ -903,6 +904,7 @@ impl From<NulError> for io::Error {\n \n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl Error for FromBytesWithNulError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         match self.kind {\n             FromBytesWithNulErrorKind::InteriorNul(..) => {\n@@ -915,6 +917,7 @@ impl Error for FromBytesWithNulError {\n \n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl fmt::Display for FromBytesWithNulError {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(self.description())?;\n         if let FromBytesWithNulErrorKind::InteriorNul(pos) = self.kind {\n@@ -943,6 +946,7 @@ impl IntoStringError {\n \n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl Error for IntoStringError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"C string contained non-utf8 bytes\"\n     }\n@@ -954,6 +958,7 @@ impl Error for IntoStringError {\n \n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl fmt::Display for IntoStringError {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.description().fmt(f)\n     }"}, {"sha": "fee5a4e102be22cec06960ef5b15211855f3e902", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -752,6 +752,7 @@ impl<W> From<IntoInnerError<W>> for Error {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Send + fmt::Debug> error::Error for IntoInnerError<W> {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn description(&self) -> &str {\n         error::Error::description(self.error())\n     }"}, {"sha": "3b55d9b900235a6ba8df31882758e2eb35d9ce8d", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -534,6 +534,7 @@ impl fmt::Display for Error {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl error::Error for Error {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn description(&self) -> &str {\n         match self.repr {\n             Repr::Os(..) | Repr::Simple(..) => self.kind().as_str(),\n@@ -603,22 +604,18 @@ mod test {\n         struct TestError;\n \n         impl fmt::Display for TestError {\n-            fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                Ok(())\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                f.write_str(\"asdf\")\n             }\n         }\n \n-        impl error::Error for TestError {\n-            fn description(&self) -> &str {\n-                \"asdf\"\n-            }\n-        }\n+        impl error::Error for TestError {}\n \n         // we have to call all of these UFCS style right now since method\n         // resolution won't implicitly drop the Send+Sync bounds\n         let mut err = Error::new(ErrorKind::Other, TestError);\n         assert!(err.get_ref().unwrap().is::<TestError>());\n-        assert_eq!(\"asdf\", err.get_ref().unwrap().description());\n+        assert_eq!(\"asdf\", err.get_ref().unwrap().to_string());\n         assert!(err.get_mut().unwrap().is::<TestError>());\n         let extracted = err.into_inner().unwrap();\n         extracted.downcast::<TestError>().unwrap();"}, {"sha": "868a7e261c4972b2d0a0828828c4e7951bf5e578", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -363,13 +363,15 @@ pub struct AddrParseError(());\n \n #[stable(feature = \"addr_parse_error_error\", since = \"1.4.0\")]\n impl fmt::Display for AddrParseError {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.write_str(self.description())\n     }\n }\n \n #[stable(feature = \"addr_parse_error_error\", since = \"1.4.0\")]\n impl Error for AddrParseError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"invalid IP address syntax\"\n     }"}, {"sha": "580ff1610ac839dadb390ecad70e6656d4f18d07", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -2786,13 +2786,15 @@ impl_cmp_os_str!(Cow<'a, Path>, OsString);\n \n #[stable(since = \"1.7.0\", feature = \"strip_prefix\")]\n impl fmt::Display for StripPrefixError {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.description().fmt(f)\n     }\n }\n \n #[stable(since = \"1.7.0\", feature = \"strip_prefix\")]\n impl Error for StripPrefixError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"prefix not found\"\n     }"}, {"sha": "0e334c191e7b91feff84e4caec95fecde44dce54", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -1550,6 +1550,7 @@ impl<T> fmt::Display for SendError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Send> error::Error for SendError<T> {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"sending on a closed channel\"\n     }\n@@ -1577,6 +1578,7 @@ impl<T> fmt::Display for TrySendError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Send> error::Error for TrySendError<T> {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         match *self {\n             TrySendError::Full(..) => \"sending on a full channel\",\n@@ -1603,6 +1605,7 @@ impl fmt::Display for RecvError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl error::Error for RecvError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"receiving on a closed channel\"\n     }\n@@ -1620,6 +1623,7 @@ impl fmt::Display for TryRecvError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl error::Error for TryRecvError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         match *self {\n             TryRecvError::Empty => \"receiving on an empty channel\",\n@@ -1649,6 +1653,7 @@ impl fmt::Display for RecvTimeoutError {\n \n #[stable(feature = \"mpsc_recv_timeout_error\", since = \"1.15.0\")]\n impl error::Error for RecvTimeoutError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         match *self {\n             RecvTimeoutError::Timeout => \"timed out waiting on channel\","}, {"sha": "779e6d54b7c9f85f6dae8ff9179bc4c901a01fd1", "filename": "src/libstd/sys/cloudabi/shims/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fos.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -63,6 +63,7 @@ impl fmt::Display for JoinPathsError {\n }\n \n impl StdError for JoinPathsError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"not supported on CloudABI yet\"\n     }"}, {"sha": "5999fdd4f8d58308f763a9aa038f0f7f25439afa", "filename": "src/libstd/sys/hermit/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -61,6 +61,7 @@ impl fmt::Display for JoinPathsError {\n }\n \n impl StdError for JoinPathsError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"not supported on hermit yet\"\n     }"}, {"sha": "bd0652ab4649a3b093834fb26ad153e4db676f61", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -440,6 +440,7 @@ pub struct NonIpSockAddr {\n }\n \n impl error::Error for NonIpSockAddr {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"Failed to convert address to SocketAddr\"\n     }"}, {"sha": "6ed7a2f20444ecbf097c9349bc5f4d1f1673d6ff", "filename": "src/libstd/sys/sgx/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -66,6 +66,7 @@ impl fmt::Display for JoinPathsError {\n }\n \n impl StdError for JoinPathsError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"not supported in SGX yet\"\n     }"}, {"sha": "b0b14725344a25373ff5550385266ba9d2268068", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -213,6 +213,7 @@ impl fmt::Display for JoinPathsError {\n }\n \n impl StdError for JoinPathsError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"failed to join paths\"\n     }"}, {"sha": "3f207cabf97d3020458a11132d19732b96f54201", "filename": "src/libstd/sys/vxworks/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -173,6 +173,7 @@ impl fmt::Display for JoinPathsError {\n }\n \n impl StdError for JoinPathsError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"failed to join paths\"\n     }"}, {"sha": "44a08a2f0585d096550fa187f60176523f1bfbcc", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -78,6 +78,7 @@ impl fmt::Display for JoinPathsError {\n }\n \n impl StdError for JoinPathsError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"not supported on wasm yet\"\n     }"}, {"sha": "91afdc8a5a0cc24606da150a8837cd07a35cd629", "filename": "src/libstd/sys/wasm/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -53,6 +53,7 @@ impl fmt::Display for JoinPathsError {\n }\n \n impl StdError for JoinPathsError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"not supported on wasm yet\"\n     }"}, {"sha": "e0a1d2f4c0e20311e49a9190523370d89da837f9", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -225,6 +225,7 @@ impl fmt::Display for JoinPathsError {\n }\n \n impl StdError for JoinPathsError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"failed to join paths\"\n     }"}, {"sha": "285851d631ae76b942a17249a1a1c2fc0a23b363", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -148,6 +148,7 @@ impl<T> fmt::Display for PoisonError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Error for PoisonError<T> {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"poisoned lock: another task failed inside\"\n     }\n@@ -239,13 +240,15 @@ impl<T> fmt::Display for TryLockError<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Error for TryLockError<T> {\n+    #[allow(deprecated, deprecated_in_future)]\n     fn description(&self) -> &str {\n         match *self {\n             TryLockError::Poisoned(ref p) => p.description(),\n             TryLockError::WouldBlock => \"try_lock failed because the operation would block\",\n         }\n     }\n \n+    #[allow(deprecated)]\n     fn cause(&self) -> Option<&dyn Error> {\n         match *self {\n             TryLockError::Poisoned(ref p) => Some(p),"}, {"sha": "03f1ef0000a346c5d67c4e9a353bb3cb0ad1b098", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -621,6 +621,7 @@ impl SystemTimeError {\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Error for SystemTimeError {\n+    #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"other time was not earlier than self\"\n     }"}, {"sha": "718c0ddbc63ea839a0368ce0263079f27bc9fc67", "filename": "src/libsyntax_pos/fatal_error.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibsyntax_pos%2Ffatal_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibsyntax_pos%2Ffatal_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Ffatal_error.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -23,8 +23,4 @@ impl std::fmt::Display for FatalError {\n     }\n }\n \n-impl std::error::Error for FatalError {\n-    fn description(&self) -> &str {\n-        \"The parser has encountered a fatal error\"\n-    }\n-}\n+impl std::error::Error for FatalError {}"}, {"sha": "f1adc536a3dc4db79d01d6001760080373dd47ec", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -42,14 +42,10 @@ pub enum Error {\n }\n \n impl error::Error for Error {\n-    fn description(&self) -> &str {\n-        \"failed to create TermInfo\"\n-    }\n-\n-    fn cause(&self) -> Option<&dyn error::Error> {\n+    fn source(&self) -> Option<&(dyn error::Error + 'static)> {\n         use Error::*;\n-        match *self {\n-            IoError(ref e) => Some(e),\n+        match self {\n+            IoError(e) => Some(e),\n             _ => None,\n         }\n     }"}, {"sha": "2212b7d75d21e7d6b9b4019ac0a14e83e9883b7d", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:349:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:345:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}, {"sha": "c1777f7ea0329b9c87656ccf4921c8a2eada5d09", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf13723bc22f1a850438bf0b103d09e474a1ef5/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=bbf13723bc22f1a850438bf0b103d09e474a1ef5", "patch": "@@ -286,7 +286,7 @@ fn main() {\n     let (format, dst) = parse_args();\n     let result = syntax::with_default_globals(move || main_with_result(format, &dst));\n     if let Err(e) = result {\n-        panic!(\"{}\", e.description());\n+        panic!(\"{}\", e.to_string());\n     }\n }\n "}]}