{"sha": "7136841cbd22ba66dbd49331f276bdb16401ec11", "node_id": "C_kwDOAAsO6NoAKDcxMzY4NDFjYmQyMmJhNjZkYmQ0OTMzMWYyNzZiZGIxNjQwMWVjMTE", "commit": {"author": {"name": "Sean Stangl", "email": "sean.stangl@gmail.com", "date": "2022-04-11T06:05:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T06:05:14Z"}, "message": "rust-lang/portable-simd#274: Use SIMD equality for PartialEq on SIMD vectors", "tree": {"sha": "64b1a32fb6b52bda2f29c8e60b0d2666ca0668f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64b1a32fb6b52bda2f29c8e60b0d2666ca0668f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7136841cbd22ba66dbd49331f276bdb16401ec11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiU8UaCRBK7hj4Ov3rIwAAgAsIAFUy/QNXePFx553MWex8CcPH\nEHGTYqUnFmkYaOacrtHDK/2LDGLOUMwWlJjquv3MplZkcrg0SXz+bFhkiQxdQatU\nrhX/bfG6GBIQhUcVtWVsxj7qdRP637jyxJv/Oml7eAP4ppdwEg4KMrt9ICl4yBwu\nb10AMyrP8eAWb18jDhFgWK4itMjgR1AIwUcNhP7/pZh3kRP0SMQqQVkTYcCeZyC3\nYDpmCnWzbjLZKfRZfkbltN/kUp6I8Ui4/A3GQZ2vcGm5Y6hYHocFQnusslkgnESD\ndkXMifjHYydENTfWAYUzCBmeiuy5+oo9O7YoCoC1xAzlqAdicHyjoNBBnr2QjKw=\n=Gm7K\n-----END PGP SIGNATURE-----\n", "payload": "tree 64b1a32fb6b52bda2f29c8e60b0d2666ca0668f6\nparent 1ec010db2abd34bfc6c33b5df75fa80b238f3b58\nauthor Sean Stangl <sean.stangl@gmail.com> 1649657114 -0600\ncommitter GitHub <noreply@github.com> 1649657114 -0700\n\nrust-lang/portable-simd#274: Use SIMD equality for PartialEq on SIMD vectors\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7136841cbd22ba66dbd49331f276bdb16401ec11", "html_url": "https://github.com/rust-lang/rust/commit/7136841cbd22ba66dbd49331f276bdb16401ec11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7136841cbd22ba66dbd49331f276bdb16401ec11/comments", "author": {"login": "sstangl", "id": 171223, "node_id": "MDQ6VXNlcjE3MTIyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/171223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sstangl", "html_url": "https://github.com/sstangl", "followers_url": "https://api.github.com/users/sstangl/followers", "following_url": "https://api.github.com/users/sstangl/following{/other_user}", "gists_url": "https://api.github.com/users/sstangl/gists{/gist_id}", "starred_url": "https://api.github.com/users/sstangl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sstangl/subscriptions", "organizations_url": "https://api.github.com/users/sstangl/orgs", "repos_url": "https://api.github.com/users/sstangl/repos", "events_url": "https://api.github.com/users/sstangl/events{/privacy}", "received_events_url": "https://api.github.com/users/sstangl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec010db2abd34bfc6c33b5df75fa80b238f3b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec010db2abd34bfc6c33b5df75fa80b238f3b58", "html_url": "https://github.com/rust-lang/rust/commit/1ec010db2abd34bfc6c33b5df75fa80b238f3b58"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "d032f5459fd7cb38a6fd7588c5a65d9fc5234877", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7136841cbd22ba66dbd49331f276bdb16401ec11/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7136841cbd22ba66dbd49331f276bdb16401ec11/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=7136841cbd22ba66dbd49331f276bdb16401ec11", "patch": "@@ -429,8 +429,26 @@ where\n {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n-        // TODO use SIMD equality\n-        self.to_array() == other.to_array()\n+        // Safety: All SIMD vectors are SimdPartialEq, and the comparison produces a valid mask.\n+        let mask = unsafe {\n+            let tfvec: Simd<<T as SimdElement>::Mask, LANES> = intrinsics::simd_eq(*self, *other);\n+            Mask::from_int_unchecked(tfvec)\n+        };\n+\n+        // Two vectors are equal if all lanes tested true for vertical equality.\n+        mask.all()\n+    }\n+\n+    #[inline]\n+    fn ne(&self, other: &Self) -> bool {\n+        // Safety: All SIMD vectors are SimdPartialEq, and the comparison produces a valid mask.\n+        let mask = unsafe {\n+            let tfvec: Simd<<T as SimdElement>::Mask, LANES> = intrinsics::simd_ne(*self, *other);\n+            Mask::from_int_unchecked(tfvec)\n+        };\n+\n+        // Two vectors are non-equal if any lane tested true for vertical non-equality.\n+        mask.any()\n     }\n }\n "}]}