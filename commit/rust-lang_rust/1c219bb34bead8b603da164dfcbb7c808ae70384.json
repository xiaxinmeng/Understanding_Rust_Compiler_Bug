{"sha": "1c219bb34bead8b603da164dfcbb7c808ae70384", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMjE5YmIzNGJlYWQ4YjYwM2RhMTY0ZGZjYmI3YzgwOGFlNzAzODQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-06T09:49:18Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-28T00:11:12Z"}, "message": "[const-prop] Replace `NullaryOp` handling with use of `InterpCx`", "tree": {"sha": "8d3bc3bbd7fcd7b92370c07b4dba601f2de6e391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d3bc3bbd7fcd7b92370c07b4dba601f2de6e391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c219bb34bead8b603da164dfcbb7c808ae70384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c219bb34bead8b603da164dfcbb7c808ae70384", "html_url": "https://github.com/rust-lang/rust/commit/1c219bb34bead8b603da164dfcbb7c808ae70384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c219bb34bead8b603da164dfcbb7c808ae70384/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc4cc2fc4079dba2141a79d4b9a636cbf5c9bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc4cc2fc4079dba2141a79d4b9a636cbf5c9bf5", "html_url": "https://github.com/rust-lang/rust/commit/ecc4cc2fc4079dba2141a79d4b9a636cbf5c9bf5"}], "stats": {"total": 28, "additions": 7, "deletions": 21}, "files": [{"sha": "c4633d57c2310805c6e1f77c5992aa596a5b317e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c219bb34bead8b603da164dfcbb7c808ae70384/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c219bb34bead8b603da164dfcbb7c808ae70384/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=1c219bb34bead8b603da164dfcbb7c808ae70384", "patch": "@@ -304,9 +304,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) -> Option<Const<'tcx>> {\n         let span = source_info.span;\n         match *rvalue {\n+            Rvalue::Repeat(..) |\n+            Rvalue::Aggregate(..) |\n+            Rvalue::NullaryOp(NullOp::Box, _) |\n+            Rvalue::Discriminant(..) => None,\n+\n             Rvalue::Use(_) |\n             Rvalue::Len(_) |\n-            Rvalue::Cast(..) => {\n+            Rvalue::Cast(..) |\n+            Rvalue::NullaryOp(..) => {\n                 self.use_ecx(source_info, |this| {\n                     this.ecx.eval_rvalue_into_place(rvalue, place)?;\n                     this.ecx.eval_place_to_op(place, Some(place_layout))\n@@ -317,19 +323,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 let mplace = src.try_as_mplace().ok()?;\n                 Some(ImmTy::from_scalar(mplace.ptr.into(), place_layout).into())\n             },\n-            Rvalue::Repeat(..) |\n-            Rvalue::Aggregate(..) |\n-            Rvalue::NullaryOp(NullOp::Box, _) |\n-            Rvalue::Discriminant(..) => None,\n \n-            Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n-                type_size_of(self.tcx, self.param_env, ty).and_then(|n| Some(\n-                    ImmTy::from_uint(\n-                        n,\n-                        self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n-                    ).into()\n-                ))\n-            }\n             Rvalue::UnaryOp(op, ref arg) => {\n                 let def_id = if self.tcx.is_closure(self.source.def_id()) {\n                     self.tcx.closure_base_def_id(self.source.def_id())\n@@ -515,14 +509,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n }\n \n-fn type_size_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    ty: Ty<'tcx>,\n-) -> Option<u64> {\n-    tcx.layout_of(param_env.and(ty)).ok().map(|layout| layout.size.bytes())\n-}\n-\n struct CanConstProp {\n     can_const_prop: IndexVec<Local, bool>,\n     // false at the beginning, once set, there are not allowed to be any more assignments"}]}