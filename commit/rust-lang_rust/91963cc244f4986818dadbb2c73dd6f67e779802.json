{"sha": "91963cc244f4986818dadbb2c73dd6f67e779802", "node_id": "C_kwDOAAsO6NoAKDkxOTYzY2MyNDRmNDk4NjgxOGRhZGJiMmM3M2RkNmY2N2U3Nzk4MDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-16T07:36:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-16T07:36:10Z"}, "message": "Rollup merge of #103489 - WaffleLapkin:byte_offset_from_you, r=scottmcm\n\nMake `pointer::byte_offset_from` more generic\n\nAs suggested by https://github.com/rust-lang/rust/issues/96283#issuecomment-1288792955 (cc ````@scottmcm),```` make `pointer::byte_offset_from` work on pointers of different types. `byte_offset_from` really doesn't care about pointer types, so this is totally fine and, for example, allows patterns like this:\n```rust\nptr::addr_of!(x.b).byte_offset_from(ptr::addr_of!(x))\n```\n\nThe only possible downside is that this removes the `T` == `U` hint to inference, but I don't think this matter much. I don't think there are a lot of cases where you'd want to use `byte_offset_from` with a pointer of unbounded type (and in such cases you can just specify the type).\n\n````@rustbot```` label +T-libs-api", "tree": {"sha": "f1c1232f5c5e2ef7e6e5788eb34b06ef02775119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c1232f5c5e2ef7e6e5788eb34b06ef02775119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91963cc244f4986818dadbb2c73dd6f67e779802", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjdJLqCRBK7hj4Ov3rIwAAk34IAKjlo6q2m54VB3vR96o7CDsT\nrK22mktl2l+/z9apljoc7EDjV/TUNeY5AxYtj2yTfGpoHucBnBSJo36zHyP5Uj2l\nNuJgUGVo/wbTHgU3faVb+dXecy1FvTqUIIxe3rIn+m07FYRr8D/NFhxPJpm4swln\nNTMOwmmdxRhw+OeUeRdfrKXcHfdwec/9teGqllHVymAsgbJKAH+k+eCc8Zp+9ncU\nd35QRHwc6e/dpyUUtPXORLfdAhDO/b4F+6w61WYtDuDq98jaxVodF6vvTdAo7T/q\ncgIE2LRa7XGDeQ9s3qmf92Xa0d+btzU2q3lrKyIcteiM7O0IO3FvZqHPPmXYDIc=\n=h81X\n-----END PGP SIGNATURE-----\n", "payload": "tree f1c1232f5c5e2ef7e6e5788eb34b06ef02775119\nparent 5140bbd10258d8c0f5afb286d0fd57a296720652\nparent 6279d092c32bc60be2eeb91210f1d875e28b6b72\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668584170 +0100\ncommitter GitHub <noreply@github.com> 1668584170 +0100\n\nRollup merge of #103489 - WaffleLapkin:byte_offset_from_you, r=scottmcm\n\nMake `pointer::byte_offset_from` more generic\n\nAs suggested by https://github.com/rust-lang/rust/issues/96283#issuecomment-1288792955 (cc ````@scottmcm),```` make `pointer::byte_offset_from` work on pointers of different types. `byte_offset_from` really doesn't care about pointer types, so this is totally fine and, for example, allows patterns like this:\n```rust\nptr::addr_of!(x.b).byte_offset_from(ptr::addr_of!(x))\n```\n\nThe only possible downside is that this removes the `T` == `U` hint to inference, but I don't think this matter much. I don't think there are a lot of cases where you'd want to use `byte_offset_from` with a pointer of unbounded type (and in such cases you can just specify the type).\n\n````@rustbot```` label +T-libs-api\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91963cc244f4986818dadbb2c73dd6f67e779802", "html_url": "https://github.com/rust-lang/rust/commit/91963cc244f4986818dadbb2c73dd6f67e779802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91963cc244f4986818dadbb2c73dd6f67e779802/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5140bbd10258d8c0f5afb286d0fd57a296720652", "url": "https://api.github.com/repos/rust-lang/rust/commits/5140bbd10258d8c0f5afb286d0fd57a296720652", "html_url": "https://github.com/rust-lang/rust/commit/5140bbd10258d8c0f5afb286d0fd57a296720652"}, {"sha": "6279d092c32bc60be2eeb91210f1d875e28b6b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/6279d092c32bc60be2eeb91210f1d875e28b6b72", "html_url": "https://github.com/rust-lang/rust/commit/6279d092c32bc60be2eeb91210f1d875e28b6b72"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "e28ddf3c75ea8dfe28d0d475bae1cbc4f57fb5ec", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91963cc244f4986818dadbb2c73dd6f67e779802/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91963cc244f4986818dadbb2c73dd6f67e779802/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=91963cc244f4986818dadbb2c73dd6f67e779802", "patch": "@@ -709,7 +709,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n-    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n+    pub const unsafe fn byte_offset_from<U: ?Sized>(self, origin: *const U) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n     }"}, {"sha": "ba21126dbd2ca9a0197433c4608dacd4016c07f7", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91963cc244f4986818dadbb2c73dd6f67e779802/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91963cc244f4986818dadbb2c73dd6f67e779802/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=91963cc244f4986818dadbb2c73dd6f67e779802", "patch": "@@ -889,7 +889,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n-    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n+    pub const unsafe fn byte_offset_from<U: ?Sized>(self, origin: *const U) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n     }"}]}