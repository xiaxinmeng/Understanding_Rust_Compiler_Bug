{"sha": "c19e7b629b42fc2e153893762397a336423e6ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOWU3YjYyOWI0MmZjMmUxNTM4OTM3NjIzOTdhMzM2NDIzZTZlYzM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-03T21:50:20Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-04T16:14:13Z"}, "message": "Add various pointer & void-using x86 intrinsics.", "tree": {"sha": "f644347e6da7af3615a3874e224c73c456ace6ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f644347e6da7af3615a3874e224c73c456ace6ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c19e7b629b42fc2e153893762397a336423e6ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c19e7b629b42fc2e153893762397a336423e6ec3", "html_url": "https://github.com/rust-lang/rust/commit/c19e7b629b42fc2e153893762397a336423e6ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c19e7b629b42fc2e153893762397a336423e6ec3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b45a9ab54fbf593c6df84e8852fc1b3f1f0810a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b45a9ab54fbf593c6df84e8852fc1b3f1f0810a", "html_url": "https://github.com/rust-lang/rust/commit/2b45a9ab54fbf593c6df84e8852fc1b3f1f0810a"}], "stats": {"total": 391, "additions": 378, "deletions": 13}, "files": [{"sha": "2c1492c2954c8e18dd8eb6296f523a903a252deb", "filename": "src/etc/platform-intrinsics/x86/avx.json", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json", "raw_url": "https://github.com/rust-lang/rust/raw/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json?ref=c19e7b629b42fc2e153893762397a336423e6ec3", "patch": "@@ -36,6 +36,20 @@\n             \"ret\": \"f(32-64)\",\n             \"args\": [\"0\", \"0\"]\n         },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_maskload_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"maskload.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": [\"f(32-64)\"],\n+            \"args\": [\"0SPc/S8\", \"0s->0\"]\n+        },\n+        {\n+            \"intrinsic\": \"{3.width_mm}_maskstore_{3.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"maskstore.{3.data_type_short}{3.width_suffix}\",\n+            \"ret\": \"V\",\n+            \"args\": [\"F(32-64)Pm/S8\", \"1Dsv->1Dv\", \"1Dv\"]\n+        },\n         {\n             \"intrinsic\": \"256_min_{0.data_type}\",\n             \"width\": [256],\n@@ -78,6 +92,20 @@\n             \"ret\": \"f32\",\n             \"args\": [\"f32\"]\n         },\n+        {\n+            \"intrinsic\": \"256_storeu_{2.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"storeu.ps.256\",\n+            \"ret\": \"V\",\n+            \"args\": [\"f(32-64)Pm/U8\", \"1D\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_storeu_si256\",\n+            \"width\": [256],\n+            \"llvm\": \"storeu.dq.256\",\n+            \"ret\": \"V\",\n+            \"args\": [\"u8Pm/U8\", \"1D\"]\n+        },\n         {\n             \"intrinsic\": \"256_sqrt_{0.data_type}\",\n             \"width\": [256],\n@@ -147,6 +175,20 @@\n             \"llvm\": \"ptestz.256\",\n             \"ret\": \"S32\",\n             \"args\": [\"u64\", \"u64\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_zeroall\",\n+            \"width\": [256],\n+            \"llvm\": \"vzeroall\",\n+            \"ret\": \"V\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"256_zeroupper\",\n+            \"width\": [256],\n+            \"llvm\": \"vzeroupper\",\n+            \"ret\": \"V\",\n+            \"args\": []\n         }\n     ]\n }"}, {"sha": "e88ff3d2b806dbf1fe45b6b2448c84cd2bc2e893", "filename": "src/etc/platform-intrinsics/x86/avx2.json", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "raw_url": "https://github.com/rust-lang/rust/raw/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json?ref=c19e7b629b42fc2e153893762397a336423e6ec3", "patch": "@@ -4,21 +4,21 @@\n         {\n             \"intrinsic\": \"256_abs_{0.data_type}\",\n             \"width\": [256],\n-            \"llvm\": \"avx2.pabs.{0.data_type_short}\",\n+            \"llvm\": \"pabs.{0.data_type_short}\",\n             \"ret\": \"s(8-32)\",\n             \"args\": [\"0\"]\n         },\n         {\n             \"intrinsic\": \"256_adds_{0.data_type}\",\n             \"width\": [256],\n-            \"llvm\": \"avx2.padd{0.kind_short}s.{0.data_type_short}\",\n+            \"llvm\": \"padd{0.kind_short}s.{0.data_type_short}\",\n             \"ret\": \"i(8-16)\",\n             \"args\": [\"0\", \"0\"]\n         },\n         {\n             \"intrinsic\": \"256_avg_{0.data_type}\",\n             \"width\": [256],\n-            \"llvm\": \"avx2.pavg.{0.data_type_short}\",\n+            \"llvm\": \"pavg.{0.data_type_short}\",\n             \"ret\": \"u(8-16)\",\n             \"args\": [\"0\", \"0\"]\n         },\n@@ -64,6 +64,48 @@\n             \"ret\": \"s16\",\n             \"args\": [\"s8\", \"s8\"]\n         },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_mask_i32gather_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"gather.d.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": [\"s32\", \"f32\"],\n+            \"args\": [\"0\", \"0SPc/S8\", \"s32\", \"0s->0\", \"S32/8\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_mask_i32gather_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"gather.d.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": [\"s64\", \"f64\"],\n+            \"args\": [\"0\", \"0SPc/S8\", \"s32x128\", \"0s->0\", \"S32/8\"]\n+        },\n+        {\n+            \"intrinsic\": \"{3.width_mm}_mask_i64gather_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"gather.q.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": [\"s32x128\", \"f32x128\"],\n+            \"args\": [\"0\", \"0SPc/S8\", \"s64\", \"0s->0\", \"S32/8\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_mask_i64gather_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"gather.q.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": [\"s64\", \"f64\"],\n+            \"args\": [\"0\", \"0SPc/S8\", \"s64\", \"0s->0\", \"S32/8\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_maskload_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"maskload.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": [\"s(32-64)\"],\n+            \"args\": [\"0Pc/S8\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"{2.width_mm}_maskstore_{2.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"maskstore.{2.data_type_short}{2.width_suffix}\",\n+            \"ret\": \"V\",\n+            \"args\": [\"S(32-64)Pm/S8\", \"1Dv\", \"2\"]\n+        },\n         {\n             \"intrinsic\": \"256_max_{0.data_type}\",\n             \"width\": [256],"}, {"sha": "adff0dc41b2afd8221eb8f0a4dc7535a43c28790", "filename": "src/etc/platform-intrinsics/x86/sse.json", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json", "raw_url": "https://github.com/rust-lang/rust/raw/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json?ref=c19e7b629b42fc2e153893762397a336423e6ec3", "patch": "@@ -42,6 +42,13 @@\n             \"llvm\": \"!llvm.sqrt.v4f32\",\n             \"ret\": \"f32\",\n             \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_storeu_ps\",\n+            \"width\": [128],\n+            \"llvm\": \"storeu.ps\",\n+            \"ret\": \"V\",\n+            \"args\": [\"F32Pm/S8\", \"f32\"]\n         }\n     ]\n }"}, {"sha": "d09980d95f31b8d09d73e503e4548cb298da9f0a", "filename": "src/etc/platform-intrinsics/x86/sse2.json", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "raw_url": "https://github.com/rust-lang/rust/raw/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json?ref=c19e7b629b42fc2e153893762397a336423e6ec3", "patch": "@@ -15,13 +15,27 @@\n             \"ret\": \"u(8-16)\",\n             \"args\": [\"0\", \"0\"]\n         },\n+        {\n+            \"intrinsic\": \"_lfence\",\n+            \"width\": [128],\n+            \"llvm\": \"lfence\",\n+            \"ret\": \"V\",\n+            \"args\": []\n+        },\n         {\n             \"intrinsic\": \"_madd_epi16\",\n             \"width\": [128],\n             \"llvm\": \"pmadd.wd\",\n             \"ret\": \"s32\",\n             \"args\": [\"s16\", \"s16\"]\n         },\n+        {\n+            \"intrinsic\": \"_maskmoveu_si128\",\n+            \"width\": [128],\n+            \"llvm\": \"maskmov.dqu\",\n+            \"ret\": \"V\",\n+            \"args\": [\"u8\", \"u8\", \"U8Pm\"]\n+        },\n         {\n             \"intrinsic\": \"_max_{0.data_type}\",\n             \"width\": [128],\n@@ -36,6 +50,13 @@\n             \"ret\": \"f64\",\n             \"args\": [\"0\", \"0\"]\n         },\n+        {\n+            \"intrinsic\": \"_mfence\",\n+            \"width\": [128],\n+            \"llvm\": \"fence\",\n+            \"ret\": \"V\",\n+            \"args\": []\n+        },\n         {\n             \"intrinsic\": \"_min_{0.data_type}\",\n             \"width\": [128],\n@@ -99,13 +120,34 @@\n             \"ret\": \"u64\",\n             \"args\": [\"u8\", \"u8\"]\n         },\n+        {\n+            \"intrinsic\": \"_sfence\",\n+            \"width\": [128],\n+            \"llvm\": \"sfence\",\n+            \"ret\": \"V\",\n+            \"args\": []\n+        },\n         {\n             \"intrinsic\": \"_sqrt_pd\",\n             \"width\": [128],\n             \"llvm\": \"!llvm.sqrt.v2f64\",\n             \"ret\": \"f64\",\n             \"args\": [\"0\"]\n         },\n+        {\n+            \"intrinsic\": \"_storeu_pd\",\n+            \"width\": [128],\n+            \"llvm\": \"storeu.pd\",\n+            \"ret\": \"V\",\n+            \"args\": [\"F64Pm/U8\", \"f64\"]\n+        },\n+        {\n+            \"intrinsic\": \"_storeu_si128\",\n+            \"width\": [128],\n+            \"llvm\": \"storeu.dq\",\n+            \"ret\": \"V\",\n+            \"args\": [\"u8Pm/U8\", \"u8\"]\n+        },\n         {\n             \"intrinsic\": \"_subs_{0.data_type}\",\n             \"width\": [128],"}, {"sha": "ed13595929d1b24c752333eb702cfe638bee1e7e", "filename": "src/etc/platform-intrinsics/x86/sse3.json", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json", "raw_url": "https://github.com/rust-lang/rust/raw/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json?ref=c19e7b629b42fc2e153893762397a336423e6ec3", "patch": "@@ -21,6 +21,13 @@\n             \"llvm\": \"hsub.{0.data_type}\",\n             \"ret\": \"f(32-64)\",\n             \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_lddqu_si128\",\n+            \"width\": [128],\n+            \"llvm\": \"ldu.dq\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0Pc/S8\"]\n         }\n     ]\n }"}, {"sha": "2dfd00e9ce3bfa8208737d04222026bc1350ce17", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 235, "deletions": 10, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19e7b629b42fc2e153893762397a336423e6ec3/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=c19e7b629b42fc2e153893762397a336423e6ec3", "patch": "@@ -13,7 +13,7 @@\n \n #![allow(unused_imports)]\n \n-use {Intrinsic, i, i_, u, u_, f, v, agg, p, void};\n+use {Intrinsic, i, i_, u, u_, f, v, v_, agg, p, void};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n \n@@ -50,6 +50,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(f(32), 4),\n             definition: Named(\"llvm.sqrt.v4f32\")\n         },\n+        \"_storeu_ps\" => Intrinsic {\n+            inputs: vec![p(false, f(32), Some(i(8))), v(f(32), 4)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.sse.storeu.ps\")\n+        },\n         \"_adds_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 16), v(i(8), 16)],\n             output: v(i(8), 16),\n@@ -80,11 +85,21 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(u(16), 8),\n             definition: Named(\"llvm.x86.sse2.pavg.w\")\n         },\n+        \"_lfence\" => Intrinsic {\n+            inputs: vec![],\n+            output: void(),\n+            definition: Named(\"llvm.x86.sse2.lfence\")\n+        },\n         \"_madd_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n             output: v(i(32), 4),\n             definition: Named(\"llvm.x86.sse2.pmadd.wd\")\n         },\n+        \"_maskmoveu_si128\" => Intrinsic {\n+            inputs: vec![v(u(8), 16), v(u(8), 16), p(false, u(8), None)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.sse2.maskmov.dqu\")\n+        },\n         \"_max_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n             output: v(i(16), 8),\n@@ -100,6 +115,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(f(64), 2),\n             definition: Named(\"llvm.x86.sse2.max.pd\")\n         },\n+        \"_mfence\" => Intrinsic {\n+            inputs: vec![],\n+            output: void(),\n+            definition: Named(\"llvm.x86.sse2.fence\")\n+        },\n         \"_min_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n             output: v(i(16), 8),\n@@ -160,11 +180,26 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(u(64), 2),\n             definition: Named(\"llvm.x86.sse2.psad.bw\")\n         },\n+        \"_sfence\" => Intrinsic {\n+            inputs: vec![],\n+            output: void(),\n+            definition: Named(\"llvm.x86.sse2.sfence\")\n+        },\n         \"_sqrt_pd\" => Intrinsic {\n             inputs: vec![v(f(64), 2)],\n             output: v(f(64), 2),\n             definition: Named(\"llvm.sqrt.v2f64\")\n         },\n+        \"_storeu_pd\" => Intrinsic {\n+            inputs: vec![p(false, f(64), Some(u(8))), v(f(64), 2)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.sse2.storeu.pd\")\n+        },\n+        \"_storeu_si128\" => Intrinsic {\n+            inputs: vec![p(false, v(u(8), 16), Some(u(8))), v(u(8), 16)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.sse2.storeu.dq\")\n+        },\n         \"_subs_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 16), v(i(8), 16)],\n             output: v(i(8), 16),\n@@ -215,6 +250,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(f(64), 2),\n             definition: Named(\"llvm.x86.sse3.hsub.pd\")\n         },\n+        \"_lddqu_si128\" => Intrinsic {\n+            inputs: vec![p(true, v(u(8), 16), Some(i(8)))],\n+            output: v(u(8), 16),\n+            definition: Named(\"llvm.x86.sse3.ldu.dq\")\n+        },\n         \"_abs_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 16)],\n             output: v(i(8), 16),\n@@ -490,6 +530,46 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(f(64), 4),\n             definition: Named(\"llvm.x86.avx.max.pd.256\")\n         },\n+        \"_maskload_ps\" => Intrinsic {\n+            inputs: vec![p(true, f(32), Some(i(8))), v_(i(32), f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.avx.maskload.ps\")\n+        },\n+        \"_maskload_pd\" => Intrinsic {\n+            inputs: vec![p(true, f(64), Some(i(8))), v_(i(64), f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.avx.maskload.pd\")\n+        },\n+        \"256_maskload_ps\" => Intrinsic {\n+            inputs: vec![p(true, f(32), Some(i(8))), v_(i(32), f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.maskload.ps.256\")\n+        },\n+        \"256_maskload_pd\" => Intrinsic {\n+            inputs: vec![p(true, f(64), Some(i(8))), v_(i(64), f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx.maskload.pd.256\")\n+        },\n+        \"_maskstore_ps\" => Intrinsic {\n+            inputs: vec![p(false, f(32), Some(i(8))), v_(i(32), f(32), 4), v(f(32), 4)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.maskstore.ps\")\n+        },\n+        \"_maskstore_pd\" => Intrinsic {\n+            inputs: vec![p(false, f(64), Some(i(8))), v_(i(64), f(64), 2), v(f(64), 2)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.maskstore.pd\")\n+        },\n+        \"256_maskstore_ps\" => Intrinsic {\n+            inputs: vec![p(false, f(32), Some(i(8))), v_(i(32), f(32), 8), v(f(32), 8)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.maskstore.ps.256\")\n+        },\n+        \"256_maskstore_pd\" => Intrinsic {\n+            inputs: vec![p(false, f(64), Some(i(8))), v_(i(64), f(64), 4), v(f(64), 4)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.maskstore.pd.256\")\n+        },\n         \"256_min_ps\" => Intrinsic {\n             inputs: vec![v(f(32), 8), v(f(32), 8)],\n             output: v(f(32), 8),\n@@ -540,6 +620,21 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(f(32), 8),\n             definition: Named(\"llvm.x86.avx.rsqrt.ps.256\")\n         },\n+        \"256_storeu_ps\" => Intrinsic {\n+            inputs: vec![p(false, v(f(32), 8), Some(u(8))), v(f(32), 8)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.storeu.ps.256\")\n+        },\n+        \"256_storeu_pd\" => Intrinsic {\n+            inputs: vec![p(false, v(f(64), 4), Some(u(8))), v(f(64), 4)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.storeu.ps.256\")\n+        },\n+        \"256_storeu_si256\" => Intrinsic {\n+            inputs: vec![p(false, v(u(8), 32), Some(u(8))), v(u(8), 32)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.storeu.dq.256\")\n+        },\n         \"256_sqrt_ps\" => Intrinsic {\n             inputs: vec![v(f(32), 8)],\n             output: v(f(32), 8),\n@@ -625,50 +720,60 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: i(32),\n             definition: Named(\"llvm.x86.avx.ptestz.256\")\n         },\n+        \"256_zeroall\" => Intrinsic {\n+            inputs: vec![],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.vzeroall\")\n+        },\n+        \"256_zeroupper\" => Intrinsic {\n+            inputs: vec![],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx.vzeroupper\")\n+        },\n         \"256_abs_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 32)],\n             output: v(i(8), 32),\n-            definition: Named(\"llvm.x86.avx2.avx2.pabs.b\")\n+            definition: Named(\"llvm.x86.avx2.pabs.b\")\n         },\n         \"256_abs_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 16)],\n             output: v(i(16), 16),\n-            definition: Named(\"llvm.x86.avx2.avx2.pabs.w\")\n+            definition: Named(\"llvm.x86.avx2.pabs.w\")\n         },\n         \"256_abs_epi32\" => Intrinsic {\n             inputs: vec![v(i(32), 8)],\n             output: v(i(32), 8),\n-            definition: Named(\"llvm.x86.avx2.avx2.pabs.d\")\n+            definition: Named(\"llvm.x86.avx2.pabs.d\")\n         },\n         \"256_adds_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 32), v(i(8), 32)],\n             output: v(i(8), 32),\n-            definition: Named(\"llvm.x86.avx2.avx2.padds.b\")\n+            definition: Named(\"llvm.x86.avx2.padds.b\")\n         },\n         \"256_adds_epu8\" => Intrinsic {\n             inputs: vec![v(u(8), 32), v(u(8), 32)],\n             output: v(u(8), 32),\n-            definition: Named(\"llvm.x86.avx2.avx2.paddus.b\")\n+            definition: Named(\"llvm.x86.avx2.paddus.b\")\n         },\n         \"256_adds_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 16), v(i(16), 16)],\n             output: v(i(16), 16),\n-            definition: Named(\"llvm.x86.avx2.avx2.padds.w\")\n+            definition: Named(\"llvm.x86.avx2.padds.w\")\n         },\n         \"256_adds_epu16\" => Intrinsic {\n             inputs: vec![v(u(16), 16), v(u(16), 16)],\n             output: v(u(16), 16),\n-            definition: Named(\"llvm.x86.avx2.avx2.paddus.w\")\n+            definition: Named(\"llvm.x86.avx2.paddus.w\")\n         },\n         \"256_avg_epu8\" => Intrinsic {\n             inputs: vec![v(u(8), 32), v(u(8), 32)],\n             output: v(u(8), 32),\n-            definition: Named(\"llvm.x86.avx2.avx2.pavg.b\")\n+            definition: Named(\"llvm.x86.avx2.pavg.b\")\n         },\n         \"256_avg_epu16\" => Intrinsic {\n             inputs: vec![v(u(16), 16), v(u(16), 16)],\n             output: v(u(16), 16),\n-            definition: Named(\"llvm.x86.avx2.avx2.pavg.w\")\n+            definition: Named(\"llvm.x86.avx2.pavg.w\")\n         },\n         \"256_hadd_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 16), v(i(16), 16)],\n@@ -710,6 +815,126 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(i(16), 16),\n             definition: Named(\"llvm.x86.avx2.pmadd.ub.sw\")\n         },\n+        \"_mask_i32gather_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), p(true, i(32), Some(i(8))), v(i(32), 4), v(i(32), 4), i_(32, 8)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.d.d\")\n+        },\n+        \"_mask_i32gather_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), p(true, f(32), Some(i(8))), v(i(32), 4), v_(i(32), f(32), 4), i_(32, 8)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.d.ps\")\n+        },\n+        \"256_mask_i32gather_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), p(true, i(32), Some(i(8))), v(i(32), 8), v(i(32), 8), i_(32, 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.gather.d.d.256\")\n+        },\n+        \"256_mask_i32gather_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), p(true, f(32), Some(i(8))), v(i(32), 8), v_(i(32), f(32), 8), i_(32, 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx2.gather.d.ps.256\")\n+        },\n+        \"_mask_i32gather_epi64\" => Intrinsic {\n+            inputs: vec![v(i(64), 2), p(true, i(64), Some(i(8))), v(i(32), 4), v(i(64), 2), i_(32, 8)],\n+            output: v(i(64), 2),\n+            definition: Named(\"llvm.x86.avx2.gather.d.q\")\n+        },\n+        \"_mask_i32gather_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), p(true, f(64), Some(i(8))), v(i(32), 4), v_(i(64), f(64), 2), i_(32, 8)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.avx2.gather.d.pd\")\n+        },\n+        \"256_mask_i32gather_epi64\" => Intrinsic {\n+            inputs: vec![v(i(64), 4), p(true, i(64), Some(i(8))), v(i(32), 4), v(i(64), 4), i_(32, 8)],\n+            output: v(i(64), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.d.q.256\")\n+        },\n+        \"256_mask_i32gather_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), p(true, f(64), Some(i(8))), v(i(32), 4), v_(i(64), f(64), 4), i_(32, 8)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.d.pd.256\")\n+        },\n+        \"_mask_i64gather_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), p(true, i(32), Some(i(8))), v(i(64), 2), v(i(32), 4), i_(32, 8)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.q.d\")\n+        },\n+        \"_mask_i64gather_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), p(true, f(32), Some(i(8))), v(i(64), 2), v_(i(32), f(32), 4), i_(32, 8)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.q.ps\")\n+        },\n+        \"256_mask_i64gather_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), p(true, i(32), Some(i(8))), v(i(64), 4), v(i(32), 4), i_(32, 8)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.q.d\")\n+        },\n+        \"256_mask_i64gather_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), p(true, f(32), Some(i(8))), v(i(64), 4), v_(i(32), f(32), 4), i_(32, 8)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.q.ps\")\n+        },\n+        \"_mask_i64gather_epi64\" => Intrinsic {\n+            inputs: vec![v(i(64), 2), p(true, i(64), Some(i(8))), v(i(64), 2), v(i(64), 2), i_(32, 8)],\n+            output: v(i(64), 2),\n+            definition: Named(\"llvm.x86.avx2.gather.q.q\")\n+        },\n+        \"_mask_i64gather_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), p(true, f(64), Some(i(8))), v(i(64), 2), v_(i(64), f(64), 2), i_(32, 8)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.avx2.gather.q.pd\")\n+        },\n+        \"256_mask_i64gather_epi64\" => Intrinsic {\n+            inputs: vec![v(i(64), 4), p(true, i(64), Some(i(8))), v(i(64), 4), v(i(64), 4), i_(32, 8)],\n+            output: v(i(64), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.q.q.256\")\n+        },\n+        \"256_mask_i64gather_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), p(true, f(64), Some(i(8))), v(i(64), 4), v_(i(64), f(64), 4), i_(32, 8)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx2.gather.q.pd.256\")\n+        },\n+        \"_maskload_epi32\" => Intrinsic {\n+            inputs: vec![p(true, v(i(32), 4), Some(i(8))), v(i(32), 4)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.avx2.maskload.d\")\n+        },\n+        \"_maskload_epi64\" => Intrinsic {\n+            inputs: vec![p(true, v(i(64), 2), Some(i(8))), v(i(64), 2)],\n+            output: v(i(64), 2),\n+            definition: Named(\"llvm.x86.avx2.maskload.q\")\n+        },\n+        \"256_maskload_epi32\" => Intrinsic {\n+            inputs: vec![p(true, v(i(32), 8), Some(i(8))), v(i(32), 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.maskload.d.256\")\n+        },\n+        \"256_maskload_epi64\" => Intrinsic {\n+            inputs: vec![p(true, v(i(64), 4), Some(i(8))), v(i(64), 4)],\n+            output: v(i(64), 4),\n+            definition: Named(\"llvm.x86.avx2.maskload.q.256\")\n+        },\n+        \"_maskstore_epi32\" => Intrinsic {\n+            inputs: vec![p(false, i(32), Some(i(8))), v(i(32), 4), v(i(32), 4)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx2.maskstore.d\")\n+        },\n+        \"_maskstore_epi64\" => Intrinsic {\n+            inputs: vec![p(false, i(64), Some(i(8))), v(i(64), 2), v(i(64), 2)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx2.maskstore.q\")\n+        },\n+        \"256_maskstore_epi32\" => Intrinsic {\n+            inputs: vec![p(false, i(32), Some(i(8))), v(i(32), 8), v(i(32), 8)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx2.maskstore.d.256\")\n+        },\n+        \"256_maskstore_epi64\" => Intrinsic {\n+            inputs: vec![p(false, i(64), Some(i(8))), v(i(64), 4), v(i(64), 4)],\n+            output: void(),\n+            definition: Named(\"llvm.x86.avx2.maskstore.q.256\")\n+        },\n         \"256_max_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 32), v(i(8), 32)],\n             output: v(i(8), 32),"}]}