{"sha": "2332765cbc5d58fe03356a6adefc83ff6412c1c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMzI3NjVjYmM1ZDU4ZmUwMzM1NmE2YWRlZmM4M2ZmNjQxMmMxYzI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-24T05:44:10Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-26T04:34:56Z"}, "message": "rustc: prefer unqualified `ctxt` to `ty::ctxt` in middle::ty.", "tree": {"sha": "2607bb5871a88fd1d61a8a808ce4d7a44b2f3d5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2607bb5871a88fd1d61a8a808ce4d7a44b2f3d5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2332765cbc5d58fe03356a6adefc83ff6412c1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2332765cbc5d58fe03356a6adefc83ff6412c1c2", "html_url": "https://github.com/rust-lang/rust/commit/2332765cbc5d58fe03356a6adefc83ff6412c1c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2332765cbc5d58fe03356a6adefc83ff6412c1c2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59935f70e01b854bd1f43baa1915af38c37bcef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/59935f70e01b854bd1f43baa1915af38c37bcef2", "html_url": "https://github.com/rust-lang/rust/commit/59935f70e01b854bd1f43baa1915af38c37bcef2"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "e66deb08290f8cb811720eaf40ba04e67f4466b1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2332765cbc5d58fe03356a6adefc83ff6412c1c2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2332765cbc5d58fe03356a6adefc83ff6412c1c2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2332765cbc5d58fe03356a6adefc83ff6412c1c2", "patch": "@@ -2063,15 +2063,15 @@ impl<'tcx> GenericPredicates<'tcx> {\n         }\n     }\n \n-    pub fn instantiate(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>)\n+    pub fn instantiate(&self, tcx: &ctxt<'tcx>, substs: &Substs<'tcx>)\n                        -> InstantiatedPredicates<'tcx> {\n         InstantiatedPredicates {\n             predicates: self.predicates.subst(tcx, substs),\n         }\n     }\n \n     pub fn instantiate_supertrait(&self,\n-                                  tcx: &ty::ctxt<'tcx>,\n+                                  tcx: &ctxt<'tcx>,\n                                   poly_trait_ref: &ty::PolyTraitRef<'tcx>)\n                                   -> InstantiatedPredicates<'tcx>\n     {\n@@ -2109,7 +2109,7 @@ impl<'tcx> Predicate<'tcx> {\n     /// substitution in terms of what happens with bound regions.  See\n     /// lengthy comment below for details.\n     pub fn subst_supertrait(&self,\n-                            tcx: &ty::ctxt<'tcx>,\n+                            tcx: &ctxt<'tcx>,\n                             trait_ref: &ty::PolyTraitRef<'tcx>)\n                             -> ty::Predicate<'tcx>\n     {\n@@ -2876,7 +2876,7 @@ impl ClosureKind {\n }\n \n pub trait ClosureTyper<'tcx> {\n-    fn tcx(&self) -> &ty::ctxt<'tcx> {\n+    fn tcx(&self) -> &ctxt<'tcx> {\n         self.param_env().tcx\n     }\n \n@@ -3585,7 +3585,7 @@ impl ParamTy {\n         ParamTy::new(def.space, def.index, def.name)\n     }\n \n-    pub fn to_ty<'tcx>(self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n+    pub fn to_ty<'tcx>(self, tcx: &ctxt<'tcx>) -> Ty<'tcx> {\n         ty::mk_param(tcx, self.space, self.idx, self.name)\n     }\n \n@@ -4108,7 +4108,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n }\n \n fn type_impls_bound<'a,'tcx>(param_env: Option<&ParameterEnvironment<'a,'tcx>>,\n-                             tcx: &ty::ctxt<'tcx>,\n+                             tcx: &ctxt<'tcx>,\n                              ty: Ty<'tcx>,\n                              bound: ty::BuiltinBound,\n                              span: Span)\n@@ -4178,7 +4178,7 @@ pub fn type_moves_by_default<'a,'tcx>(param_env: &ParameterEnvironment<'a,'tcx>,\n \n #[inline]\n pub fn type_is_sized<'a,'tcx>(param_env: Option<&ParameterEnvironment<'a,'tcx>>,\n-                              tcx: &ty::ctxt<'tcx>,\n+                              tcx: &ctxt<'tcx>,\n                               span: Span,\n                               ty: Ty<'tcx>)\n                               -> bool\n@@ -4192,7 +4192,7 @@ pub fn type_is_sized<'a,'tcx>(param_env: Option<&ParameterEnvironment<'a,'tcx>>,\n }\n \n fn type_is_sized_uncached<'a,'tcx>(param_env: Option<&ParameterEnvironment<'a,'tcx>>,\n-                                   tcx: &ty::ctxt<'tcx>,\n+                                   tcx: &ctxt<'tcx>,\n                                    span: Span,\n                                    ty: Ty<'tcx>) -> bool {\n     assert!(!ty.needs_infer());\n@@ -6703,7 +6703,7 @@ pub fn construct_free_substs<'a,'tcx>(\n         }\n     }\n \n-    fn push_types_from_defs<'tcx>(tcx: &ty::ctxt<'tcx>,\n+    fn push_types_from_defs<'tcx>(tcx: &ctxt<'tcx>,\n                                   types: &mut VecPerParamSpace<Ty<'tcx>>,\n                                   defs: &[TypeParameterDef<'tcx>]) {\n         for def in defs {\n@@ -6966,7 +6966,7 @@ pub type TraitMap = NodeMap<Vec<DefId>>;\n // imported.\n pub type GlobMap = HashMap<NodeId, HashSet<Name>>;\n \n-pub fn with_freevars<T, F>(tcx: &ty::ctxt, fid: ast::NodeId, f: F) -> T where\n+pub fn with_freevars<T, F>(tcx: &ctxt, fid: ast::NodeId, f: F) -> T where\n     F: FnOnce(&[Freevar]) -> T,\n {\n     match tcx.freevars.borrow().get(&fid) {\n@@ -6994,7 +6994,7 @@ impl<'tcx> AutoDerefRef<'tcx> {\n /// Replace any late-bound regions bound in `value` with free variants attached to scope-id\n /// `scope_id`.\n pub fn liberate_late_bound_regions<'tcx, T>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &ctxt<'tcx>,\n     all_outlive_scope: region::DestructionScopeData,\n     value: &Binder<T>)\n     -> T\n@@ -7006,7 +7006,7 @@ pub fn liberate_late_bound_regions<'tcx, T>(\n }\n \n pub fn count_late_bound_regions<'tcx, T>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &ctxt<'tcx>,\n     value: &Binder<T>)\n     -> usize\n     where T : TypeFoldable<'tcx>\n@@ -7016,7 +7016,7 @@ pub fn count_late_bound_regions<'tcx, T>(\n }\n \n pub fn binds_late_bound_regions<'tcx, T>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &ctxt<'tcx>,\n     value: &Binder<T>)\n     -> bool\n     where T : TypeFoldable<'tcx>\n@@ -7027,7 +7027,7 @@ pub fn binds_late_bound_regions<'tcx, T>(\n /// Flattens two binding levels into one. So `for<'a> for<'b> Foo`\n /// becomes `for<'a,'b> Foo`.\n pub fn flatten_late_bound_regions<'tcx, T>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &ctxt<'tcx>,\n     bound2_value: &Binder<Binder<T>>)\n     -> Binder<T>\n     where T: TypeFoldable<'tcx>\n@@ -7049,7 +7049,7 @@ pub fn flatten_late_bound_regions<'tcx, T>(\n }\n \n pub fn no_late_bound_regions<'tcx, T>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &ctxt<'tcx>,\n     value: &Binder<T>)\n     -> Option<T>\n     where T : TypeFoldable<'tcx>\n@@ -7064,7 +7064,7 @@ pub fn no_late_bound_regions<'tcx, T>(\n /// Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\n /// method lookup and a few other places where precise region relationships are not required.\n pub fn erase_late_bound_regions<'tcx, T>(\n-    tcx: &ty::ctxt<'tcx>,\n+    tcx: &ctxt<'tcx>,\n     value: &Binder<T>)\n     -> T\n     where T : TypeFoldable<'tcx>\n@@ -7147,7 +7147,7 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n     }\n }\n \n-pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n+pub fn make_substs_for_receiver_types<'tcx>(tcx: &ctxt<'tcx>,\n                                             trait_ref: &ty::TraitRef<'tcx>,\n                                             method: &ty::Method<'tcx>)\n                                             -> subst::Substs<'tcx>"}]}