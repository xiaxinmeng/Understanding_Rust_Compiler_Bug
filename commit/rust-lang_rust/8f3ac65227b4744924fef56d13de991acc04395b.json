{"sha": "8f3ac65227b4744924fef56d13de991acc04395b", "node_id": "C_kwDOAAsO6NoAKDhmM2FjNjUyMjdiNDc0NDkyNGZlZjU2ZDEzZGU5OTFhY2MwNDM5NWI", "commit": {"author": {"name": "Burak Varl\u0131", "email": "burakvar@amazon.co.uk", "date": "2023-02-16T16:58:51Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-03-08T08:51:24Z"}, "message": "Dogfood `missing_assert_message` on Clippy\n\nCo-authored-by: Weihang Lo <me@weihanglo.tw>", "tree": {"sha": "0ccea95a86bb4fa38c1799171612f9563e4785fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ccea95a86bb4fa38c1799171612f9563e4785fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f3ac65227b4744924fef56d13de991acc04395b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3ac65227b4744924fef56d13de991acc04395b", "html_url": "https://github.com/rust-lang/rust/commit/8f3ac65227b4744924fef56d13de991acc04395b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f3ac65227b4744924fef56d13de991acc04395b/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea2547b8c63ce4e410c53e7fa55b127c81721454", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea2547b8c63ce4e410c53e7fa55b127c81721454", "html_url": "https://github.com/rust-lang/rust/commit/ea2547b8c63ce4e410c53e7fa55b127c81721454"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "b1c2a51daa0e1d73f7ce638508d5726c3c0073b7", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -467,7 +467,7 @@ pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span:\n     let mut contains_initial_stars = false;\n     for line in doc.lines() {\n         let offset = line.as_ptr() as usize - doc.as_ptr() as usize;\n-        debug_assert_eq!(offset as u32 as usize, offset);\n+        debug_assert_eq!(offset as u32 as usize, offset, \"`offset` shouldn't overflow `u32`\");\n         contains_initial_stars |= line.trim_start().starts_with('*');\n         // +1 adds the newline, +3 skips the opening delimiter\n         sizes.push((line.len() + 1, span.with_lo(span.lo() + BytePos(3 + offset as u32))));"}, {"sha": "9135af40979d27e90b5ec16e7eb7d8909cc2f7e5", "filename": "clippy_lints/src/duplicate_mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Fduplicate_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Fduplicate_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduplicate_mod.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -90,7 +90,11 @@ impl EarlyLintPass for DuplicateMod {\n             }\n \n             // At this point the lint would be emitted\n-            assert_eq!(spans.len(), lint_levels.len());\n+            assert_eq!(\n+                spans.len(),\n+                lint_levels.len(),\n+                \"`spans` and `lint_levels` should have equal lengths\"\n+            );\n             let spans: Vec<_> = spans\n                 .iter()\n                 .zip(lint_levels)"}, {"sha": "68fb88bcf7e3998f19650ed28d84046680146093", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -242,7 +242,7 @@ fn to_camel_case(item_name: &str) -> String {\n impl LateLintPass<'_> for EnumVariantNames {\n     fn check_item_post(&mut self, _cx: &LateContext<'_>, _item: &Item<'_>) {\n         let last = self.modules.pop();\n-        assert!(last.is_some());\n+        assert!(last.is_some(), \"`modules` should not be empty\");\n     }\n \n     #[expect(clippy::similar_names)]"}, {"sha": "e3be798f30b07ff73163a7c712c7849dc255f0f5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -927,7 +927,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n     store.register_late_pass(|_| Box::new(collection_is_never_read::CollectionIsNeverRead));\n-    store.register_pre_expansion_pass(|| Box::new(missing_assert_message::MissingAssertMessage));\n+    store.register_pre_expansion_pass(|| Box::<missing_assert_message::MissingAssertMessage>::default());\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "e24f3aa567a7e311ebcdae1514ce0f38a2afd641", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -408,7 +408,10 @@ fn do_check(lint: &mut NonExpressiveNames, cx: &EarlyContext<'_>, attrs: &[Attri\n /// Precondition: `a_name.chars().count() < b_name.chars().count()`.\n #[must_use]\n fn levenstein_not_1(a_name: &str, b_name: &str) -> bool {\n-    debug_assert!(a_name.chars().count() < b_name.chars().count());\n+    debug_assert!(\n+        a_name.chars().count() < b_name.chars().count(),\n+        \"Precondition: `a_name.chars().count() < b_name.chars().count()` does not meet\"\n+    );\n     let mut a_chars = a_name.chars();\n     let mut b_chars = b_name.chars();\n     while let (Some(a), Some(b)) = (a_chars.next(), b_chars.next()) {"}, {"sha": "75f7b5cf98edd62fb7c018c2c84d45f1d7b43b33", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -31,7 +31,7 @@ pub struct LimitStack {\n \n impl Drop for LimitStack {\n     fn drop(&mut self) {\n-        assert_eq!(self.stack.len(), 1);\n+        assert_eq!(self.stack.len(), 1, \"stack should only have one element\");\n     }\n }\n \n@@ -49,7 +49,9 @@ impl LimitStack {\n     }\n     pub fn pop_attrs(&mut self, sess: &Session, attrs: &[ast::Attribute], name: &'static str) {\n         let stack = &mut self.stack;\n-        parse_attrs(sess, attrs, name, |val| assert_eq!(stack.pop(), Some(val)));\n+        parse_attrs(sess, attrs, name, |val| {\n+            assert_eq!(stack.pop(), Some(val), \"incorrect last element\");\n+        });\n     }\n }\n "}, {"sha": "1c453b87f8d799b83ea726cc9b9f3e5698b72e1d", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -1011,10 +1011,13 @@ pub fn capture_local_usage(cx: &LateContext<'_>, e: &Expr<'_>) -> CaptureKind {\n         capture\n     }\n \n-    debug_assert!(matches!(\n-        e.kind,\n-        ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(_), .. }))\n-    ));\n+    debug_assert!(\n+        matches!(\n+            e.kind,\n+            ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(_), .. }))\n+        ),\n+        \"`e.kind` should be a resolved local path\"\n+    );\n \n     let mut child_id = e.hir_id;\n     let mut capture = CaptureKind::Value;"}, {"sha": "7d8f31e1dfbc59e5e01f6279527d1b0673422cbc", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -179,7 +179,7 @@ impl<'a> NumericLiteral<'a> {\n     }\n \n     pub fn group_digits(output: &mut String, input: &str, group_size: usize, partial_group_first: bool, pad: bool) {\n-        debug_assert!(group_size > 0);\n+        debug_assert!(group_size > 0, \"group size should be greater than zero\");\n \n         let mut digits = input.chars().filter(|&c| c != '_');\n \n@@ -219,7 +219,7 @@ impl<'a> NumericLiteral<'a> {\n }\n \n fn split_suffix<'a>(src: &'a str, lit_kind: &LitKind) -> (&'a str, Option<&'a str>) {\n-    debug_assert!(lit_kind.is_numeric());\n+    debug_assert!(lit_kind.is_numeric(), \"`lit_kind` should be numeric\");\n     lit_suffix_length(lit_kind)\n         .and_then(|suffix_length| src.len().checked_sub(suffix_length))\n         .map_or((src, None), |split_pos| {\n@@ -229,7 +229,7 @@ fn split_suffix<'a>(src: &'a str, lit_kind: &LitKind) -> (&'a str, Option<&'a st\n }\n \n fn lit_suffix_length(lit_kind: &LitKind) -> Option<usize> {\n-    debug_assert!(lit_kind.is_numeric());\n+    debug_assert!(lit_kind.is_numeric(), \"`lit_kind` should be numeric\");\n     let suffix = match lit_kind {\n         LitKind::Int(_, int_lit_kind) => match int_lit_kind {\n             LitIntType::Signed(int_ty) => Some(int_ty.name_str()),"}, {"sha": "2b3c781477fb903b0c32b6d597e075f7b2bda920", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -225,8 +225,7 @@ pub fn implements_trait_with_env<'tcx>(\n     trait_id: DefId,\n     ty_params: impl IntoIterator<Item = Option<GenericArg<'tcx>>>,\n ) -> bool {\n-    // Clippy shouldn't have infer types\n-    assert!(!ty.needs_infer());\n+    assert!(!ty.needs_infer(), \"Clippy shouldn't have infer types\");\n \n     let ty = tcx.erase_regions(ty);\n     if ty.has_escaping_bound_vars() {"}, {"sha": "6e39c8d42432f7a56643c279712561258c771dd3", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -383,7 +383,7 @@ impl Crate {\n                 .status()\n                 .expect(\"failed to run cargo\");\n \n-            assert_eq!(status.code(), Some(0));\n+            assert_eq!(status.code(), Some(0), \"`cargo check` exited with non-zero code\");\n \n             return Vec::new();\n         }\n@@ -741,6 +741,7 @@ fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, us\n     let mut new_stats_deduped = new_stats;\n \n     // remove duplicates from both hashmaps\n+    #[allow(clippy::missing_assert_message)]\n     for (k, v) in &same_in_both_hashmaps {\n         assert!(old_stats_deduped.remove(k) == Some(*v));\n         assert!(new_stats_deduped.remove(k) == Some(*v));"}, {"sha": "2f2d305f54baf5beb559d625a16dffa9d30fbaba", "filename": "tests/compile-test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -410,7 +410,10 @@ fn check_rustfix_coverage() {\n     };\n \n     if let Ok(missing_coverage_contents) = std::fs::read_to_string(missing_coverage_path) {\n-        assert!(RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.iter().is_sorted_by_key(Path::new));\n+        assert!(\n+            RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.iter().is_sorted_by_key(Path::new),\n+            \"`RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS` should be sorted\"\n+        );\n \n         for rs_file in missing_coverage_contents.lines() {\n             let rs_path = Path::new(rs_file);"}, {"sha": "2d2d6e6739eed5f22760752fa87befc0aa1a79b3", "filename": "tests/integration.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -21,6 +21,7 @@ const CARGO_CLIPPY: &str = \"cargo-clippy\";\n const CARGO_CLIPPY: &str = \"cargo-clippy.exe\";\n \n #[cfg_attr(feature = \"integration\", test)]\n+#[allow(clippy::missing_assert_message)]\n fn integration_test() {\n     let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n     let repo_url = format!(\"https://github.com/{repo_name}\");"}, {"sha": "3081bf2d8ccc5f8bb4fbea33c7fbeb9941d9346f", "filename": "tests/test_utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3ac65227b4744924fef56d13de991acc04395b/tests%2Ftest_utils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3ac65227b4744924fef56d13de991acc04395b/tests%2Ftest_utils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftest_utils%2Fmod.rs?ref=8f3ac65227b4744924fef56d13de991acc04395b", "patch": "@@ -5,7 +5,7 @@ use std::sync::LazyLock;\n \n pub static CARGO_CLIPPY_PATH: LazyLock<PathBuf> = LazyLock::new(|| {\n     let mut path = std::env::current_exe().unwrap();\n-    assert!(path.pop()); // deps\n+    assert!(path.pop(), \"current running executable path shouldn't be empty\"); // deps\n     path.set_file_name(\"cargo-clippy\");\n     path\n });"}]}