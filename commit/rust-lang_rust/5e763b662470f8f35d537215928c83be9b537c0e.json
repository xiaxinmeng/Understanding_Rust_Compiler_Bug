{"sha": "5e763b662470f8f35d537215928c83be9b537c0e", "node_id": "C_kwDOAAsO6NoAKDVlNzYzYjY2MjQ3MGY4ZjM1ZDUzNzIxNTkyOGM4M2JlOWI1MzdjMGU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-17T19:03:45Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-19T14:58:48Z"}, "message": "Document associated_item methods", "tree": {"sha": "e0418621b291f86fdc50f3acbc486c64863cc945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0418621b291f86fdc50f3acbc486c64863cc945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e763b662470f8f35d537215928c83be9b537c0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPyOSwACgkQgTGiTgx5\n76/J8g/+JeBUpff035uuL5OxmAUws64KTXipXi7NBdZL2VV8uT7lEcBG8kS55lT+\nzGkrzbOqyLWqKLS03j3gTFCwYzrmBAyiCnDMrneMvNBGNXyFTmBAouT1QXiQw+o/\n5HTxe9nUHcEneRUiuxrP+XsV4b++Kp9QhMM6llig6flGldpjwN1z9myTPuaFeRpf\nn5Qpww5S+V2vE214cJw9RM9xRvMAIvMy7JbSgsAxHUBN2BbKxKwBKoc6D0ASKOS2\n+KMp/ZMnhjYJAZfPtnuKZdrnAunKUKFpHgDzjB5X8aTvAXpuVVQNR2MmZdI4VRGM\n7MFU3zhq4DZ646sYVGHTK9w8v/FnxMAZe5qX26HeXkACwC844oqvKqihQhTauT6c\nmlxvkhXmr4q9dIrqXkvPUoBybxJ60awZKxl58NOsjB8XBX2CtMBsXQWiTXvA4Clq\nZpyGf96Tw5lYoCWEkAUFJJzfPBJJ9lwwugCrwrO7DIK6SfQoL32byGOwVnSy/ex+\nWM+prW8ukud/y1m+zwWko52Q+IVmNseU9arcrC1agYdyCAwNPk4eO6uGIgPl5Bqd\n1NJ1lVp5jrxLdKLxIXeg8FVjuC3f3pHBhJ4/AHibTZuJMmJTP+sbAIjNdoWjeqmF\nwhmdq9eq54OmMOHsJP0ykeEKqyeeuvKdNuqPDsT063XfTbNKHLs=\n=z1KW\n-----END PGP SIGNATURE-----", "payload": "tree e0418621b291f86fdc50f3acbc486c64863cc945\nparent 45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d\nauthor Santiago Pastorino <spastorino@gmail.com> 1676660625 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676818728 -0300\n\nDocument associated_item methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e763b662470f8f35d537215928c83be9b537c0e", "html_url": "https://github.com/rust-lang/rust/commit/5e763b662470f8f35d537215928c83be9b537c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e763b662470f8f35d537215928c83be9b537c0e/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d", "html_url": "https://github.com/rust-lang/rust/commit/45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "19b8568042aeb67e3e5e0305b11dfa992700a2b1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e763b662470f8f35d537215928c83be9b537c0e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e763b662470f8f35d537215928c83be9b537c0e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5e763b662470f8f35d537215928c83be9b537c0e", "patch": "@@ -767,7 +767,12 @@ rustc_queries! {\n         desc { |tcx| \"comparing impl items against trait for `{}`\", tcx.def_path_str(impl_id) }\n     }\n \n-    /// Given an `fn_def_id`, create and return the associated items for that function.\n+    /// Given `fn_def_id` of a trait or of an impl that implements a given trait:\n+    /// if `fn_def_id` is the def id of a function defined inside a trait, then it creates and returns\n+    /// the associated items that correspond to each impl trait in return position for that trait.\n+    /// if `fn_def_id` is the def id of a function defined inside an impl that implements a trait, then it\n+    /// creates and returns the associated items that correspond to each impl trait in return position\n+    /// of the implemented trait.\n     query associated_items_for_impl_trait_in_trait(fn_def_id: DefId) -> &'tcx [DefId] {\n         desc { |tcx| \"creating associated items for impl trait in trait returned by `{}`\", tcx.def_path_str(fn_def_id) }\n         cache_on_disk_if { fn_def_id.is_local() }"}, {"sha": "5cf8060d635c80099e6467b7e072edf073efdbc6", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e763b662470f8f35d537215928c83be9b537c0e/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e763b662470f8f35d537215928c83be9b537c0e/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=5e763b662470f8f35d537215928c83be9b537c0e", "patch": "@@ -118,6 +118,12 @@ fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::A\n     }\n }\n \n+/// Given an `fn_def_id` of a trait or of an impl that implements a given trait:\n+/// if `fn_def_id` is the def id of a function defined inside a trait, then it creates and returns\n+/// the associated items that correspond to each impl trait in return position for that trait.\n+/// if `fn_def_id` is the def id of a function defined inside an impl that implements a trait, then it\n+/// creates and returns the associated items that correspond to each impl trait in return position\n+/// of the implemented trait.\n fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -> &'_ [DefId] {\n     let parent_def_id = tcx.parent(fn_def_id);\n \n@@ -174,6 +180,8 @@ fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -\n     }\n }\n \n+/// Given an `opaque_ty_def_id` corresponding to an impl trait in trait, create and return the\n+/// corresponding associated item.\n fn associated_item_for_impl_trait_in_trait(\n     tcx: TyCtxt<'_>,\n     opaque_ty_def_id: LocalDefId,\n@@ -188,6 +196,9 @@ fn associated_item_for_impl_trait_in_trait(\n     trait_assoc_ty.def_id()\n }\n \n+/// Given an `trait_assoc_def_id` that corresponds to a previously synthethized impl trait in trait\n+/// into an associated type and an `impl_def_id` corresponding to an impl block, create and return\n+/// the corresponding associated item inside the impl block.\n fn impl_associated_item_for_impl_trait_in_trait(\n     tcx: TyCtxt<'_>,\n     trait_assoc_def_id: LocalDefId,"}]}