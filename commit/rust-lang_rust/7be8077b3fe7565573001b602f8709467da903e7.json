{"sha": "7be8077b3fe7565573001b602f8709467da903e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZTgwNzdiM2ZlNzU2NTU3MzAwMWI2MDJmODcwOTQ2N2RhOTAzZTc=", "commit": {"author": {"name": "Julian Wollersberger", "email": "24991778+Julian-Wollersberger@users.noreply.github.com", "date": "2020-06-01T11:25:41Z"}, "committer": {"name": "Julian Wollersberger", "email": "24991778+Julian-Wollersberger@users.noreply.github.com", "date": "2020-06-01T20:01:30Z"}, "message": "Cleanup: Inline `struct_span_fatal()`, which is only called once, and remove an outdated FIXME.", "tree": {"sha": "7d1c4b82973a10f660b8cddbbb460959058329e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d1c4b82973a10f660b8cddbbb460959058329e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be8077b3fe7565573001b602f8709467da903e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be8077b3fe7565573001b602f8709467da903e7", "html_url": "https://github.com/rust-lang/rust/commit/7be8077b3fe7565573001b602f8709467da903e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be8077b3fe7565573001b602f8709467da903e7/comments", "author": {"login": "Julian-Wollersberger", "id": 24991778, "node_id": "MDQ6VXNlcjI0OTkxNzc4", "avatar_url": "https://avatars.githubusercontent.com/u/24991778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian-Wollersberger", "html_url": "https://github.com/Julian-Wollersberger", "followers_url": "https://api.github.com/users/Julian-Wollersberger/followers", "following_url": "https://api.github.com/users/Julian-Wollersberger/following{/other_user}", "gists_url": "https://api.github.com/users/Julian-Wollersberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian-Wollersberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian-Wollersberger/subscriptions", "organizations_url": "https://api.github.com/users/Julian-Wollersberger/orgs", "repos_url": "https://api.github.com/users/Julian-Wollersberger/repos", "events_url": "https://api.github.com/users/Julian-Wollersberger/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian-Wollersberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Julian-Wollersberger", "id": 24991778, "node_id": "MDQ6VXNlcjI0OTkxNzc4", "avatar_url": "https://avatars.githubusercontent.com/u/24991778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian-Wollersberger", "html_url": "https://github.com/Julian-Wollersberger", "followers_url": "https://api.github.com/users/Julian-Wollersberger/followers", "following_url": "https://api.github.com/users/Julian-Wollersberger/following{/other_user}", "gists_url": "https://api.github.com/users/Julian-Wollersberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian-Wollersberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian-Wollersberger/subscriptions", "organizations_url": "https://api.github.com/users/Julian-Wollersberger/orgs", "repos_url": "https://api.github.com/users/Julian-Wollersberger/repos", "events_url": "https://api.github.com/users/Julian-Wollersberger/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian-Wollersberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fbbfbbfa9319d38d0f9acf54b3ffac67d6c3136", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbbfbbfa9319d38d0f9acf54b3ffac67d6c3136", "html_url": "https://github.com/rust-lang/rust/commit/5fbbfbbfa9319d38d0f9acf54b3ffac67d6c3136"}], "stats": {"total": 29, "additions": 5, "deletions": 24}, "files": [{"sha": "7e59f06e44ae3ecd43fb3530238210233add403a", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7be8077b3fe7565573001b602f8709467da903e7/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8077b3fe7565573001b602f8709467da903e7/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=7be8077b3fe7565573001b602f8709467da903e7", "patch": "@@ -49,13 +49,12 @@ impl<'a> StringReader<'a> {\n         // Make sure external source is loaded first, before accessing it.\n         // While this can't show up during normal parsing, `retokenize` may\n         // be called with a source file from an external crate.\n-        sess.source_map().ensure_source_file_source_present(source_file.clone());\n+        sess.source_map().ensure_source_file_source_present(Lrc::clone(&source_file));\n \n-        // FIXME(eddyb) use `Lrc<str>` or similar to avoid cloning the `String`.\n         let src = if let Some(src) = &source_file.src {\n-            src.clone()\n+            Lrc::clone(&src)\n         } else if let Some(src) = source_file.external_src.borrow().get_source() {\n-            src.clone()\n+            Lrc::clone(&src)\n         } else {\n             sess.span_diagnostic\n                 .bug(&format!(\"cannot lex `source_file` without source: {}\", source_file.name));\n@@ -125,10 +124,7 @@ impl<'a> StringReader<'a> {\n \n         debug!(\"try_next_token: {:?}({:?})\", token.kind, self.str_from(start));\n \n-        // This could use `?`, but that makes code significantly (10-20%) slower.\n-        // https://github.com/rust-lang/rust/issues/37939\n         let kind = self.cook_lexer_token(token.kind, start);\n-\n         let span = self.mk_sp(start, self.pos);\n         Token::new(kind, span)\n     }\n@@ -153,15 +149,6 @@ impl<'a> StringReader<'a> {\n         self.err_span(self.mk_sp(from_pos, to_pos), m)\n     }\n \n-    fn struct_span_fatal(\n-        &self,\n-        from_pos: BytePos,\n-        to_pos: BytePos,\n-        m: &str,\n-    ) -> DiagnosticBuilder<'a> {\n-        self.sess.span_diagnostic.struct_span_fatal(self.mk_sp(from_pos, to_pos), m)\n-    }\n-\n     fn struct_fatal_span_char(\n         &self,\n         from_pos: BytePos,\n@@ -380,12 +367,7 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Float { base, empty_exponent } => {\n                 if empty_exponent {\n-                    let mut err = self.struct_span_fatal(\n-                        start,\n-                        self.pos,\n-                        \"expected at least one digit in exponent\",\n-                    );\n-                    err.emit();\n+                    self.err_span_(start, self.pos, \"expected at least one digit in exponent\");\n                 }\n \n                 match base {\n@@ -475,8 +457,7 @@ impl<'a> StringReader<'a> {\n         self.struct_fatal_span_char(\n             start,\n             self.pos,\n-            \"found invalid character; only `#` is allowed \\\n-                 in raw string delimitation\",\n+            \"found invalid character; only `#` is allowed in raw string delimitation\",\n             bad_char,\n         )\n         .emit();"}]}