{"sha": "3203cb124ef48fa737901c59b40e752dc00a9ae0", "node_id": "C_kwDOAAsO6NoAKDMyMDNjYjEyNGVmNDhmYTczNzkwMWM1OWI0MGU3NTJkYzAwYTlhZTA", "commit": {"author": {"name": "TopGunSnake", "email": "tjwebster@crimson.ua.edu", "date": "2022-07-19T01:17:42Z"}, "committer": {"name": "TopGunSnake", "email": "tjwebster@crimson.ua.edu", "date": "2022-07-19T01:17:42Z"}, "message": "Added coverage for trait, mod, impl, and enum cases.", "tree": {"sha": "65ac1cb5827bcfb550d861beb6b060199dbb8ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65ac1cb5827bcfb550d861beb6b060199dbb8ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3203cb124ef48fa737901c59b40e752dc00a9ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3203cb124ef48fa737901c59b40e752dc00a9ae0", "html_url": "https://github.com/rust-lang/rust/commit/3203cb124ef48fa737901c59b40e752dc00a9ae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3203cb124ef48fa737901c59b40e752dc00a9ae0/comments", "author": {"login": "TopGunSnake", "id": 12959792, "node_id": "MDQ6VXNlcjEyOTU5Nzky", "avatar_url": "https://avatars.githubusercontent.com/u/12959792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TopGunSnake", "html_url": "https://github.com/TopGunSnake", "followers_url": "https://api.github.com/users/TopGunSnake/followers", "following_url": "https://api.github.com/users/TopGunSnake/following{/other_user}", "gists_url": "https://api.github.com/users/TopGunSnake/gists{/gist_id}", "starred_url": "https://api.github.com/users/TopGunSnake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TopGunSnake/subscriptions", "organizations_url": "https://api.github.com/users/TopGunSnake/orgs", "repos_url": "https://api.github.com/users/TopGunSnake/repos", "events_url": "https://api.github.com/users/TopGunSnake/events{/privacy}", "received_events_url": "https://api.github.com/users/TopGunSnake/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TopGunSnake", "id": 12959792, "node_id": "MDQ6VXNlcjEyOTU5Nzky", "avatar_url": "https://avatars.githubusercontent.com/u/12959792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TopGunSnake", "html_url": "https://github.com/TopGunSnake", "followers_url": "https://api.github.com/users/TopGunSnake/followers", "following_url": "https://api.github.com/users/TopGunSnake/following{/other_user}", "gists_url": "https://api.github.com/users/TopGunSnake/gists{/gist_id}", "starred_url": "https://api.github.com/users/TopGunSnake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TopGunSnake/subscriptions", "organizations_url": "https://api.github.com/users/TopGunSnake/orgs", "repos_url": "https://api.github.com/users/TopGunSnake/repos", "events_url": "https://api.github.com/users/TopGunSnake/events{/privacy}", "received_events_url": "https://api.github.com/users/TopGunSnake/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b65ec91d7c84908ba680da754e5af89ef57c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b65ec91d7c84908ba680da754e5af89ef57c41", "html_url": "https://github.com/rust-lang/rust/commit/27b65ec91d7c84908ba680da754e5af89ef57c41"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "3f93ebc7de8a2d80710937c9d20ec04d5b815d85", "filename": "crates/ide-assists/src/handlers/extract_module.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3203cb124ef48fa737901c59b40e752dc00a9ae0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3203cb124ef48fa737901c59b40e752dc00a9ae0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=3203cb124ef48fa737901c59b40e752dc00a9ae0", "patch": "@@ -385,12 +385,12 @@ impl Module {\n                     // We're looking for the start of functions, impls, structs, traits, and other documentable/attribute\n                     // macroable items that would have pub(crate) in front of it\n                     SyntaxKind::FN_KW\n-                    | SyntaxKind::IMPL_KW\n                     | SyntaxKind::STRUCT_KW\n+                    | SyntaxKind::ENUM_KW\n                     | SyntaxKind::TRAIT_KW\n                     | SyntaxKind::TYPE_KW\n                     | SyntaxKind::MOD_KW => true,\n-                    // If we didn't find a keyword, we want to cover the record fields\n+                    // If we didn't find a keyword, we want to cover the record fields in a struct\n                     SyntaxKind::NAME => true,\n                     // Otherwise, the token shouldn't have pub(crate) before it\n                     _ => false,\n@@ -1659,7 +1659,30 @@ mod modname {\n \n             // A macroed type\n             #[cfg(test)]\n-            type MacroedType = i32;$0\n+            type MacroedType = i32;\n+            \n+            /// A module to move\n+            mod module {}\n+            \n+            /// An impl to move\n+            impl NormalStruct {\n+                /// A method\n+                fn new() {}\n+            }\n+\n+            /// A documented trait\n+            trait DocTrait {\n+                /// Inner function\n+                fn doc() {}\n+            }\n+\n+            /// An enum\n+            enum DocumentedEnum {\n+                /// A variant\n+                A,\n+                /// Another variant\n+                B { x: i32, y: i32 }\n+            }$0\n         \",\n             r\"\n             mod modname {\n@@ -1719,6 +1742,29 @@ mod modname {\n                 // A macroed type\n                 #[cfg(test)]\n                 pub(crate) type MacroedType = i32;\n+\n+                /// A module to move\n+                pub(crate) mod module {}\n+\n+                /// An impl to move\n+                impl NormalStruct {\n+                    /// A method\n+                    pub(crate) fn new() {}\n+                }\n+\n+                /// A documented trait\n+                pub(crate) trait DocTrait {\n+                    /// Inner function\n+                    fn doc() {}\n+                }\n+\n+                /// An enum\n+                pub(crate) enum DocumentedEnum {\n+                    /// A variant\n+                    A,\n+                    /// Another variant\n+                    B { x: i32, y: i32 }\n+                }\n             }\n         \",\n         )"}]}