{"sha": "6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZDRjM2YyMGZmOWNjNDQwODQwMGE5OGRkMWMxODRkOTI0NDIxZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-29T15:58:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-29T15:58:32Z"}, "message": "Auto merge of #72488 - KodrAus:stabilize/const_type_id, r=nikomatsakis\n\nStabilize const_type_id feature\n\nThe tracking issue for `const_type_id` points to the ill-fated #41875. So I'm re-energizing `TypeId` shenanigans by opening this one up to see if there's anything blocking us from stabilizing the constification of type ids.\n\nWill wait for CI before pinging teams/groups.\n\n-----\n\nThis PR stabilizes the `const_type_id` feature, which allows `TypeId::of` (and the underlying unstable intrinsic) to be called in constant contexts.\n\nThere are some [sanity tests](https://github.com/rust-lang/rust/blob/master/src/test/ui/consts/const-typeid-of-rpass.rs) that demonstrate its usage, but I\u2019ve included some more below.\n\nAs a simple example, you could create a constant item that contains some type ids:\n\n```rust\nuse std::any::TypeId;\n\nconst TYPE_IDS: [TypeId; 2] = [\n    TypeId::of::<u32>(),\n    TypeId::of::<i32>(),\n];\n\nassert_eq!(TypeId::of::<u32>(), TYPE_IDS[0]);\n```\n\nType ids can also now appear in associated constants. You could create a trait that associates each type with its constant type id:\n\n```rust\ntrait Any where Self: 'static {\n    const TYPE_ID: TypeId = TypeId::of::<Self>();\n}\n\nimpl<T: 'static> Any for T { }\n\nassert_eq!(TypeId::of::<usize>(), usize::TYPE_ID);\n```\n\n`TypeId::of` is generic, which we saw above in the way the generic `Self` argument was used. This has some implications for const evaluation. It means we can make trait impls evaluate differently depending on information that wasn't directly passed through the trait system. This violates the _parametricity_ property, which requires all instances of a generic function to behave the same way with respect to its generic parameters. That's not unique to `TypeId::of`, other generic const functions based on compiler intrinsics like `mem::align_of` can also violate parametricity. In practice Rust doesn't really have type parametricity anyway since it monomorphizes generics into concrete functions, so violating it using type ids isn\u2019t new.\n\nAs an example of how impls can behave differently, you could combine constant type ids with the `const_if_match` feature to dispatch calls based on the type id of the generic `Self`, rather than based on information about `Self` that was threaded through trait bounds. It's like a rough-and-ready form of specialization:\n\n```rust\n#![feature(const_if_match)]\n\ntrait Specialized where Self: 'static {\n    // An associated constant that determines the function to call\n    // at compile-time based on `TypeId::of::<Self>`.\n    const CALL: fn(&Self) = {\n        const USIZE: TypeId = TypeId::of::<usize>();\n\n        match TypeId::of::<Self>() {\n            // Use a closure for `usize` that transmutes the generic `Self` to\n            // a concrete `usize` and dispatches to `Self::usize`.\n            USIZE => |x| Self::usize(unsafe { &*(x as *const Self as *const usize) }),\n            // For other types, dispatch to the generic `Self::default`.\n            _ => Self::default,\n        }\n    };\n\n    fn call(&self) {\n        // Call the function we determined at compile-time\n        (Self::CALL)(self)\n    }\n\n    fn default(x: &Self);\n    fn usize(x: &usize);\n}\n\n// Implement our `Specialized` trait for any `Debug` type.\nimpl<T: fmt::Debug + 'static> Specialized for T {\n    fn default(x: &Self) {\n        println!(\"default: {:?}\", x);\n    }\n\n    fn usize(x: &usize) {\n        println!(\"usize: {:?}\", x);\n    }\n}\n\n// Will print \"usize: 42\"\nSpecialized::call(&42usize);\n\n// Will print \"default: ()\"\nSpecialized::call(&());\n```\n\nType ids have some edges that this stabilization exposes to more contexts. It's possible for type ids to collide (but this is a bug). Since they can change between compiler versions, it's never valid to cast a type id to its underlying value.", "tree": {"sha": "9c2706e2eb94c4045feaefbaff3f5076f1f36a95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c2706e2eb94c4045feaefbaff3f5076f1f36a95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "html_url": "https://github.com/rust-lang/rust/commit/6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "584e83dd5ae7a75b8214560c22eafbcfe153caa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/584e83dd5ae7a75b8214560c22eafbcfe153caa6", "html_url": "https://github.com/rust-lang/rust/commit/584e83dd5ae7a75b8214560c22eafbcfe153caa6"}, {"sha": "9d4818c6f96cd9a553b4266ca81585d2e82887b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4818c6f96cd9a553b4266ca81585d2e82887b2", "html_url": "https://github.com/rust-lang/rust/commit/9d4818c6f96cd9a553b4266ca81585d2e82887b2"}], "stats": {"total": 34, "additions": 6, "deletions": 28}, "files": [{"sha": "b28471337c6be929b53a64eab7bf056a3c9409f4", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "patch": "@@ -435,7 +435,7 @@ impl TypeId {\n     /// assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"41875\")]\n+    #[rustc_const_stable(feature = \"const_type_id\", since = \"1.46.0\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n         TypeId { t: intrinsics::type_id::<T>() }\n     }"}, {"sha": "585e54342b77333bfe37fb1cf6a8c739f0594d83", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "patch": "@@ -1024,7 +1024,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::any::TypeId::of`](../../std/any/struct.TypeId.html#method.of)\n-    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"41875\")]\n+    #[rustc_const_stable(feature = \"const_type_id\", since = \"1.46.0\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:"}, {"sha": "c2bd5d16088fd16b834d2c39e7381cde007a91f7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "patch": "@@ -145,7 +145,6 @@\n #![feature(maybe_uninit_slice)]\n #![feature(external_doc)]\n #![feature(associated_type_bounds)]\n-#![feature(const_type_id)]\n #![feature(const_caller_location)]\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303"}, {"sha": "c49141050b20fb0a7ad77581732a607e55615b8c", "filename": "src/test/ui/consts/const-typeid-of-rpass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs?ref=6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(core_intrinsics)]\n-#![feature(const_type_id)]\n \n use std::any::TypeId;\n "}, {"sha": "3829c481da8378c9195bbcc0dc18b1e0a0ba736b", "filename": "src/test/ui/consts/const-typeid-of.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/584e83dd5ae7a75b8214560c22eafbcfe153caa6/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584e83dd5ae7a75b8214560c22eafbcfe153caa6/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of.rs?ref=584e83dd5ae7a75b8214560c22eafbcfe153caa6", "patch": "@@ -1,8 +0,0 @@\n-use std::any::TypeId;\n-\n-struct A;\n-\n-fn main() {\n-    const A_ID: TypeId = TypeId::of::<A>();\n-    //~^ ERROR `std::any::TypeId::of` is not yet stable as a const fn\n-}"}, {"sha": "05347fbc819509f1c67f9b949d433cf0fb3b736a", "filename": "src/test/ui/consts/const-typeid-of.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/584e83dd5ae7a75b8214560c22eafbcfe153caa6/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/584e83dd5ae7a75b8214560c22eafbcfe153caa6/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of.stderr?ref=584e83dd5ae7a75b8214560c22eafbcfe153caa6", "patch": "@@ -1,10 +0,0 @@\n-error: `std::any::TypeId::of` is not yet stable as a const fn\n-  --> $DIR/const-typeid-of.rs:6:26\n-   |\n-LL |     const A_ID: TypeId = TypeId::of::<A>();\n-   |                          ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_type_id)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-"}, {"sha": "1db0fdc87c37ed536e343db7c7e38b201acd27bd", "filename": "src/test/ui/consts/issue-73976-monomorphic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs?ref=6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "patch": "@@ -5,7 +5,6 @@\n // will be properly rejected. This test will ensure that monomorphic use of these\n // would not be wrongly rejected in patterns.\n \n-#![feature(const_type_id)]\n #![feature(const_type_name)]\n \n use std::any::{self, TypeId};"}, {"sha": "7cf20296062ab57f5e33231f1cf16d0c9ddfcc96", "filename": "src/test/ui/consts/issue-73976-polymorphic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs?ref=6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "patch": "@@ -5,7 +5,6 @@\n // This test case should either run-pass or be rejected at compile time.\n // Currently we just disallow this usage and require pattern is monomorphic.\n \n-#![feature(const_type_id)]\n #![feature(const_type_name)]\n \n use std::any::{self, TypeId};"}, {"sha": "971573e14aad8f59eb941e6e88f66b5255afc1f8", "filename": "src/test/ui/consts/issue-73976-polymorphic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fd4c3f20ff9cc4408400a98dd1c184d924421d7/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr?ref=6fd4c3f20ff9cc4408400a98dd1c184d924421d7", "patch": "@@ -1,23 +1,23 @@\n error: could not evaluate constant pattern\n-  --> $DIR/issue-73976-polymorphic.rs:20:37\n+  --> $DIR/issue-73976-polymorphic.rs:19:37\n    |\n LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n    |                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/issue-73976-polymorphic.rs:32:42\n+  --> $DIR/issue-73976-polymorphic.rs:31:42\n    |\n LL |     matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/issue-73976-polymorphic.rs:20:37\n+  --> $DIR/issue-73976-polymorphic.rs:19:37\n    |\n LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n    |                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/issue-73976-polymorphic.rs:32:42\n+  --> $DIR/issue-73976-polymorphic.rs:31:42\n    |\n LL |     matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}