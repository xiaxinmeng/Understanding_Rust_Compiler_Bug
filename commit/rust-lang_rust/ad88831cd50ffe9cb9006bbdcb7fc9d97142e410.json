{"sha": "ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "node_id": "C_kwDOAAsO6NoAKGFkODg4MzFjZDUwZmZlOWNiOTAwNmJiZGNiN2ZjOWQ5NzE0MmU0MTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-01T16:55:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-01T16:55:43Z"}, "message": "Auto merge of #93548 - matthiaskrgr:rollup-f7dkn3p, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #86374 (Enable combining `+crt-static` and `relocation-model=pic` on `x86_64-unknown-linux-gnu`)\n - #91828 (Implement `RawWaker` and `Waker` getters for underlying pointers)\n - #92021 (Eliminate duplicate codes of is_single_fp_element)\n - #92584 (add rustc lint, warning when iterating over hashmaps 2)\n - #93267 (implement a lint for suspicious auto trait impls)\n - #93290 (remove `TyS::same_type`)\n - #93436 (Update compiler_builtins to fix duplicate symbols in `armv7-linux-androideabi` rlib)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d39d094b6d22bd659711d300b460c7aedf2962d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d39d094b6d22bd659711d300b460c7aedf2962d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "html_url": "https://github.com/rust-lang/rust/commit/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686663a49e57870c78a4cd047f23a44175fc67a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/686663a49e57870c78a4cd047f23a44175fc67a4", "html_url": "https://github.com/rust-lang/rust/commit/686663a49e57870c78a4cd047f23a44175fc67a4"}, {"sha": "019c140244b83b9ebb177e74345237844e88a26b", "url": "https://api.github.com/repos/rust-lang/rust/commits/019c140244b83b9ebb177e74345237844e88a26b", "html_url": "https://github.com/rust-lang/rust/commit/019c140244b83b9ebb177e74345237844e88a26b"}], "stats": {"total": 1130, "additions": 889, "deletions": 241}, "files": [{"sha": "53ba61da2b002f018ba816a1e0181b06b424fe95", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -761,9 +761,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.66\"\n+version = \"0.1.67\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"191424db7756bbed2c4996959a0fbda94388abcf4f5a2728a8af17481ad9c4f7\"\n+checksum = \"a68c69e9451f1df4b215c9588c621670c12286b53e60fb5ec4b59aaa1138d18e\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "a594339296f32b6601ac4500af3391f1c7a48263", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -34,6 +34,7 @@\n #![feature(box_patterns)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};"}, {"sha": "f4863137bdd59c947faf0d657928b8e5daa07fe3", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -8,6 +8,7 @@\n #![feature(box_patterns)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n pub mod ast_validation;\n pub mod feature_gate;"}, {"sha": "c288cc96990c228428858ffc33a93533c7c98c49", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -9,6 +9,7 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "eda9be58d9427147aab3f2cd4fe4774504d11957", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -12,6 +12,7 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n extern crate proc_macro;\n "}, {"sha": "75836e143856facc4a21b7c7578bef5798a364c1", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -11,6 +11,7 @@\n #![feature(extern_types)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n "}, {"sha": "9bb8db076a8d67d2bffccd3a218e7465668332de", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -7,6 +7,7 @@\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that"}, {"sha": "838484876c72a3d92e20e2640cbc81ded0fb5626", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -22,6 +22,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "205f1cd77c0183a846de7c37b194cf7bb74565d6", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -26,6 +26,7 @@\n #![feature(vec_into_raw_parts)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "0f490c33102457af67d7f0eec004eedd32ba2961", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -8,6 +8,7 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;\n@@ -845,7 +846,7 @@ Available lint options:\n     let builtin = sort_lints(sess, builtin);\n \n     let (plugin_groups, builtin_groups): (Vec<_>, _) =\n-        lint_store.get_lint_groups().iter().cloned().partition(|&(.., p)| p);\n+        lint_store.get_lint_groups().partition(|&(.., p)| p);\n     let plugin_groups = sort_lint_groups(plugin_groups);\n     let builtin_groups = sort_lint_groups(builtin_groups);\n "}, {"sha": "a5c954cca136478c79626a8eb70ef6ff42c8a32b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -8,6 +8,7 @@\n #![feature(if_let_guard)]\n #![feature(let_else)]\n #![feature(nll)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "43a310f4eafe3f4442149812ac93ce133e05f876", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -9,6 +9,7 @@\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "3933746c319ecc89d5e630ec15cdf48c478fe7d5", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -581,6 +581,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(\n         rustc_trivial_field_reads, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n     ),\n+    // Used by the `rustc::potential_query_instability` lint to warn methods which\n+    // might not be stable during incremental compilation.\n+    rustc_attr!(rustc_lint_query_instability, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:"}, {"sha": "b4df3e1e396bdf2c4b5f4af70f665277cea8bba6", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -5,6 +5,7 @@\n #![feature(let_else)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "cf86c450a5bccff15950f986d196ee1e4f46b248", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -938,6 +938,12 @@ pub struct GrowableBitSet<T: Idx> {\n     bit_set: BitSet<T>,\n }\n \n+impl<T: Idx> Default for GrowableBitSet<T> {\n+    fn default() -> Self {\n+        GrowableBitSet::new_empty()\n+    }\n+}\n+\n impl<T: Idx> GrowableBitSet<T> {\n     /// Ensure that the set can hold at least `min_domain_size` elements.\n     pub fn ensure(&mut self, min_domain_size: usize) {"}, {"sha": "ae79e14db181c94e0bd061482455112f6a15ded0", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -23,6 +23,7 @@\n #![feature(min_specialization)]\n #![feature(label_break_value)]\n #![recursion_limit = \"512\"] // For rustdoc\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "eebeabbd45272fece4faa37a91c5b6e865a769eb", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -6,6 +6,7 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n mod callbacks;\n pub mod interface;"}, {"sha": "734b32bb92f1e88d4233b44de19690cc1769bbc1", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -2833,7 +2833,7 @@ impl ClashingExternDeclarations {\n                 return true;\n             }\n             let tcx = cx.tcx;\n-            if a == b || rustc_middle::ty::TyS::same_type(a, b) {\n+            if a == b {\n                 // All nominally-same types are structurally same, too.\n                 true\n             } else {"}, {"sha": "5da77b9f9466fcd24814acbebd80bb4cdc12c0a2", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -143,7 +143,11 @@ impl LintStore {\n         &self.lints\n     }\n \n-    pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n+    pub fn get_lint_groups<'t>(\n+        &'t self,\n+    ) -> impl Iterator<Item = (&'static str, Vec<LintId>, bool)> + 't {\n+        // This function is not used in a way which observes the order of lints.\n+        #[cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n         self.lint_groups\n             .iter()\n             .filter(|(_, LintGroup { depr, .. })| {\n@@ -153,7 +157,6 @@ impl LintStore {\n             .map(|(k, LintGroup { lint_ids, from_plugin, .. })| {\n                 (*k, lint_ids.clone(), *from_plugin)\n             })\n-            .collect()\n     }\n \n     pub fn register_early_pass("}, {"sha": "fa8cbeaaf51e2b90d374a0adfcfbb8f96bac39db", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -5,7 +5,8 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{GenericArg, HirId, Item, ItemKind, Node, Path, PathSegment, QPath, Ty, TyKind};\n+use rustc_hir::{Expr, ExprKind, GenericArg, Path, PathSegment, QPath};\n+use rustc_hir::{HirId, Item, ItemKind, Node, Ty, TyKind};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -48,6 +49,63 @@ impl LateLintPass<'_> for DefaultHashTypes {\n     }\n }\n \n+declare_tool_lint! {\n+    pub rustc::POTENTIAL_QUERY_INSTABILITY,\n+    Allow,\n+    \"require explicit opt-in when using potentially unstable methods or functions\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(QueryStability => [POTENTIAL_QUERY_INSTABILITY]);\n+\n+impl LateLintPass<'_> for QueryStability {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        // FIXME(rustdoc): This lint uses typecheck results, causing rustdoc to\n+        // error if there are resolution failures.\n+        //\n+        // As internal lints are currently always run if there are `unstable_options`,\n+        // they are added to the lint store of rustdoc. Internal lints are also\n+        // not used via the `lint_mod` query. Crate lints run outside of a query\n+        // so rustdoc currently doesn't disable them.\n+        //\n+        // Instead of relying on this, either change crate lints to a query disabled by\n+        // rustdoc, only run internal lints if the user is explicitly opting in\n+        // or figure out a different way to avoid running lints for rustdoc.\n+        if cx.tcx.sess.opts.actually_rustdoc {\n+            return;\n+        }\n+\n+        let (span, def_id, substs) = match expr.kind {\n+            ExprKind::MethodCall(segment, _, _)\n+                if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) =>\n+            {\n+                (segment.ident.span, def_id, cx.typeck_results().node_substs(expr.hir_id))\n+            },\n+            _ => {\n+                let &ty::FnDef(def_id, substs) =\n+                    cx.typeck_results()\n+                        .node_type(expr.hir_id)\n+                        .kind() else { return };\n+                (expr.span, def_id, substs)\n+            }\n+        };\n+        if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) {\n+            let def_id = instance.def_id();\n+            if cx.tcx.has_attr(def_id, sym::rustc_lint_query_instability) {\n+                cx.struct_span_lint(POTENTIAL_QUERY_INSTABILITY, span, |lint| {\n+                    let msg = format!(\n+                        \"using `{}` can result in unstable query results\",\n+                        cx.tcx.item_name(def_id)\n+                    );\n+                    lint.build(&msg)\n+                        .note(\"if you believe this case to be fine, allow this lint and add a comment explaining your rationale\")\n+                        .emit();\n+                })\n+            }\n+        }\n+    }\n+}\n+\n declare_tool_lint! {\n     pub rustc::USAGE_OF_TY_TYKIND,\n     Allow,"}, {"sha": "69863b5ff827fcd27fcbbdd3714db3e9ee16cb6c", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -30,12 +30,14 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n+#![feature(if_let_guard)]\n #![feature(iter_order_by)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;\n@@ -493,6 +495,8 @@ fn register_internals(store: &mut LintStore) {\n     store.register_early_pass(|| Box::new(LintPassImpl));\n     store.register_lints(&DefaultHashTypes::get_lints());\n     store.register_late_pass(|| Box::new(DefaultHashTypes));\n+    store.register_lints(&QueryStability::get_lints());\n+    store.register_late_pass(|| Box::new(QueryStability));\n     store.register_lints(&ExistingDocKeyword::get_lints());\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n@@ -505,6 +509,7 @@ fn register_internals(store: &mut LintStore) {\n         None,\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n+            LintId::of(POTENTIAL_QUERY_INSTABILITY),\n             LintId::of(USAGE_OF_TY_TYKIND),\n             LintId::of(PASS_BY_VALUE),\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),"}, {"sha": "f4eba25475eee0b43bc4abb2632d51cefb479c27", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1793,6 +1793,10 @@ declare_lint! {\n     Warn,\n     \"detects name collision with an existing but unstable method\",\n     @future_incompatible = FutureIncompatibleInfo {\n+        reason: FutureIncompatibilityReason::Custom(\n+            \"once this associated item is added to the standard library, \\\n+             the ambiguity may cause an error or change in behavior!\"\n+        ),\n         reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n         // Note: this item represents future incompatibility of all unstable functions in the\n         //       standard library, and thus should never be removed or changed to an error.\n@@ -2335,6 +2339,10 @@ declare_lint! {\n     Warn,\n     \"reservation of a two-phased borrow conflicts with other shared borrows\",\n     @future_incompatible = FutureIncompatibleInfo {\n+        reason: FutureIncompatibilityReason::Custom(\n+            \"this borrowing pattern was not meant to be accepted, \\\n+            and may become a hard error in the future\"\n+        ),\n         reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n     };\n }\n@@ -3046,6 +3054,7 @@ declare_lint_pass! {\n         DEREF_INTO_DYN_SUPERTRAIT,\n         DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n         DUPLICATE_MACRO_ATTRIBUTES,\n+        SUSPICIOUS_AUTO_TRAIT_IMPLS,\n     ]\n }\n \n@@ -3622,3 +3631,37 @@ declare_lint! {\n     Warn,\n     \"duplicated attribute\"\n }\n+\n+declare_lint! {\n+    /// The `suspicious_auto_trait_impls` lint checks for potentially incorrect\n+    /// implementations of auto traits.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// struct Foo<T>(T);\n+    ///\n+    /// unsafe impl<T> Send for Foo<*const T> {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// A type can implement auto traits, e.g. `Send`, `Sync` and `Unpin`,\n+    /// in two different ways: either by writing an explicit impl or if\n+    /// all fields of the type implement that auto trait.\n+    ///\n+    /// The compiler disables the automatic implementation if an explicit one\n+    /// exists for given type constructor. The exact rules governing this\n+    /// are currently unsound and quite subtle and and will be modified in the future.\n+    /// This change will cause the automatic implementation to be disabled in more\n+    /// cases, potentially breaking some code.\n+    pub SUSPICIOUS_AUTO_TRAIT_IMPLS,\n+    Warn,\n+    \"the rules governing auto traits will change in the future\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reason: FutureIncompatibilityReason::FutureReleaseSemanticsChange,\n+        reference: \"issue #93367 <https://github.com/rust-lang/rust/issues/93367>\",\n+    };\n+}"}, {"sha": "1f834b7212fe58c697561b8e505b80e05c44c979", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -163,12 +163,17 @@ pub enum FutureIncompatibilityReason {\n     /// This will be an error in a future release, and\n     /// Cargo should create a report even for dependencies\n     FutureReleaseErrorReportNow,\n+    /// Code that changes meaning in some way in a\n+    /// future release.\n+    FutureReleaseSemanticsChange,\n     /// Previously accepted code that will become an\n     /// error in the provided edition\n     EditionError(Edition),\n     /// Code that changes meaning in some way in\n     /// the provided edition\n     EditionSemanticsChange(Edition),\n+    /// A custom reason.\n+    Custom(&'static str),\n }\n \n impl FutureIncompatibilityReason {"}, {"sha": "046245080deb555423c13acbb062dd1c94f63e49", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -9,6 +9,7 @@\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n extern crate proc_macro;\n "}, {"sha": "e85cb413deb2ae6060174ba282a9d2c9393d5c65", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -56,6 +56,7 @@\n #![feature(nonzero_ops)]\n #![feature(unwrap_infallible)]\n #![recursion_limit = \"512\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "17c77c1bbd891367b458576610f7c86d96b046b2", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -221,7 +221,6 @@ pub fn struct_lint_level<'s, 'd>(\n         decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b>) + 'd>,\n     ) {\n         // Check for future incompatibility lints and issue a stronger warning.\n-        let lint_id = LintId::of(lint);\n         let future_incompatible = lint.future_incompatible;\n \n         let has_future_breakage = future_incompatible.map_or(\n@@ -345,31 +344,29 @@ pub fn struct_lint_level<'s, 'd>(\n         err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn });\n \n         if let Some(future_incompatible) = future_incompatible {\n-            let explanation = if lint_id == LintId::of(builtin::UNSTABLE_NAME_COLLISIONS) {\n-                \"once this associated item is added to the standard library, the ambiguity may \\\n-                 cause an error or change in behavior!\"\n-                    .to_owned()\n-            } else if lint_id == LintId::of(builtin::MUTABLE_BORROW_RESERVATION_CONFLICT) {\n-                \"this borrowing pattern was not meant to be accepted, and may become a hard error \\\n-                 in the future\"\n-                    .to_owned()\n-            } else if let FutureIncompatibilityReason::EditionError(edition) =\n-                future_incompatible.reason\n-            {\n-                let current_edition = sess.edition();\n-                format!(\n-                    \"this is accepted in the current edition (Rust {}) but is a hard error in Rust {}!\",\n-                    current_edition, edition\n-                )\n-            } else if let FutureIncompatibilityReason::EditionSemanticsChange(edition) =\n-                future_incompatible.reason\n-            {\n-                format!(\"this changes meaning in Rust {}\", edition)\n-            } else {\n-                \"this was previously accepted by the compiler but is being phased out; \\\n-                 it will become a hard error in a future release!\"\n-                    .to_owned()\n+            let explanation = match future_incompatible.reason {\n+                FutureIncompatibilityReason::FutureReleaseError\n+                | FutureIncompatibilityReason::FutureReleaseErrorReportNow => {\n+                    \"this was previously accepted by the compiler but is being phased out; \\\n+                         it will become a hard error in a future release!\"\n+                        .to_owned()\n+                }\n+                FutureIncompatibilityReason::FutureReleaseSemanticsChange => {\n+                    \"this will change its meaning in a future release!\".to_owned()\n+                }\n+                FutureIncompatibilityReason::EditionError(edition) => {\n+                    let current_edition = sess.edition();\n+                    format!(\n+                        \"this is accepted in the current edition (Rust {}) but is a hard error in Rust {}!\",\n+                        current_edition, edition\n+                    )\n+                }\n+                FutureIncompatibilityReason::EditionSemanticsChange(edition) => {\n+                    format!(\"this changes meaning in Rust {}\", edition)\n+                }\n+                FutureIncompatibilityReason::Custom(reason) => reason.to_owned(),\n             };\n+\n             if future_incompatible.explain_reason {\n                 err.warn(&explanation);\n             }"}, {"sha": "9e32c0162e6178e45a92ed6925585140916519f7", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -144,6 +144,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         });\n     }\n \n+    pub fn non_blanket_impls_for_ty(\n+        self,\n+        def_id: DefId,\n+        self_ty: Ty<'tcx>,\n+    ) -> impl Iterator<Item = DefId> + 'tcx {\n+        let impls = self.trait_impls_of(def_id);\n+        if let Some(simp) =\n+            fast_reject::simplify_type(self, self_ty, SimplifyParams::No, StripReferences::No)\n+        {\n+            if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n+                return impls.iter().copied();\n+            }\n+        }\n+\n+        [].iter().copied()\n+    }\n+\n     /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n     /// the first non-none value.\n     pub fn find_map_relevant_impl<T, F: FnMut(DefId) -> Option<T>>("}, {"sha": "3e3473bea0ed2e5f70b6f0b8f7e5921a9cc338d6", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -893,19 +893,6 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n     }\n \n-    pub fn same_type(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n-        match (&a.kind(), &b.kind()) {\n-            (&Adt(did_a, substs_a), &Adt(did_b, substs_b)) => {\n-                if did_a != did_b {\n-                    return false;\n-                }\n-\n-                substs_a.types().zip(substs_b.types()).all(|(a, b)| Self::same_type(a, b))\n-            }\n-            _ => a == b,\n-        }\n-    }\n-\n     /// Peel off all reference types in this type until there are none left.\n     ///\n     /// This method is idempotent, i.e. `ty.peel_refs().peel_refs() == ty.peel_refs()`."}, {"sha": "12ea740d48aec56bbc4c90430d699180269f4f8a", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -9,6 +9,7 @@\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "2ed14b917781d695ffdbbd3da756119a70647801", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{\n     self,\n     subst::{GenericArgKind, Subst, SubstsRef},\n-    PredicateKind, Ty, TyCtxt, TyS,\n+    PredicateKind, Ty, TyCtxt,\n };\n use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n@@ -88,7 +88,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                     for generic_inner_ty in arg_def.walk() {\n                         if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n                             // If the inner type matches the type bound by `Pointer`\n-                            if TyS::same_type(inner_ty, bound_ty) {\n+                            if inner_ty == bound_ty {\n                                 // Do a substitution using the parameters from the callsite\n                                 let subst_ty = inner_ty.subst(self.tcx, substs_ref);\n                                 if let Some((fn_id, fn_substs)) ="}, {"sha": "129efc2b523794aaf860d725d886fc85d200afbc", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -10,6 +10,7 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "bbc65b09ece1dbd34359af691ffaea0fcc388ad3", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -4,6 +4,7 @@\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "ca511f7b814be858724ac352628126e78c26aa82", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 91, "deletions": 75, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -62,7 +62,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_attributes(\n         &self,\n         hir_id: HirId,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) {\n@@ -81,7 +81,7 @@ impl CheckAttrVisitor<'_> {\n                 }\n                 sym::target_feature => self.check_target_feature(hir_id, attr, span, target),\n                 sym::track_caller => {\n-                    self.check_track_caller(hir_id, &attr.span, attrs, span, target)\n+                    self.check_track_caller(hir_id, attr.span, attrs, span, target)\n                 }\n                 sym::doc => self.check_doc_attrs(\n                     attr,\n@@ -106,6 +106,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_legacy_const_generics => {\n                     self.check_rustc_legacy_const_generics(&attr, span, target, item)\n                 }\n+                sym::rustc_lint_query_instability => {\n+                    self.check_rustc_lint_query_instability(&attr, span, target)\n+                }\n                 sym::rustc_clean\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n@@ -253,7 +256,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n-    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Closure\n@@ -296,7 +299,7 @@ impl CheckAttrVisitor<'_> {\n                     E0518,\n                     \"attribute should be applied to function or closure\",\n                 )\n-                .span_label(*span, \"not a function or closure\")\n+                .span_label(span, \"not a function or closure\")\n                 .emit();\n                 false\n             }\n@@ -335,7 +338,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Checks if `#[naked]` is applied to a function definition.\n-    fn check_naked(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_naked(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n@@ -354,15 +357,15 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to a function definition\",\n                     )\n-                    .span_label(*span, \"not a function definition\")\n+                    .span_label(span, \"not a function definition\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cmse_nonsecure_entry]` is applied to a function definition.\n-    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n@@ -373,7 +376,7 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to a function definition\",\n                     )\n-                    .span_label(*span, \"not a function definition\")\n+                    .span_label(span, \"not a function definition\")\n                     .emit();\n                 false\n             }\n@@ -384,16 +387,16 @@ impl CheckAttrVisitor<'_> {\n     fn check_track_caller(\n         &self,\n         hir_id: HirId,\n-        attr_span: &Span,\n+        attr_span: Span,\n         attrs: &[Attribute],\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n             _ if attrs.iter().any(|attr| attr.has_name(sym::naked)) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    *attr_span,\n+                    attr_span,\n                     E0736,\n                     \"cannot use `#[track_caller]` with `#[naked]`\",\n                 )\n@@ -414,11 +417,11 @@ impl CheckAttrVisitor<'_> {\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    *attr_span,\n+                    attr_span,\n                     E0739,\n                     \"attribute should be applied to function\"\n                 )\n-                .span_label(*span, \"not a function\")\n+                .span_label(span, \"not a function\")\n                 .emit();\n                 false\n             }\n@@ -430,7 +433,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -450,15 +453,15 @@ impl CheckAttrVisitor<'_> {\n                     E0701,\n                     \"attribute can only be applied to a struct or enum\"\n                 )\n-                .span_label(*span, \"not a struct or enum\")\n+                .span_label(span, \"not a struct or enum\")\n                 .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if the `#[marker]` attribute on an `item` is valid. Returns `true` if valid.\n-    fn check_marker(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_marker(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Trait => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -473,7 +476,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n-                    .span_label(*span, \"not a trait\")\n+                    .span_label(span, \"not a trait\")\n                     .emit();\n                 false\n             }\n@@ -484,7 +487,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_rustc_must_implement_one_of(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -493,7 +496,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n-                    .span_label(*span, \"not a trait\")\n+                    .span_label(span, \"not a trait\")\n                     .emit();\n                 false\n             }\n@@ -505,7 +508,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -521,7 +524,7 @@ impl CheckAttrVisitor<'_> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function\")\n+                        .span_label(span, \"not a function\")\n                         .emit();\n                 });\n                 true\n@@ -538,7 +541,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                    .span_label(*span, \"not a function\")\n+                    .span_label(span, \"not a function\")\n                     .emit();\n                 false\n             }\n@@ -1090,7 +1093,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Warns against some misuses of `#[pass_by_value]`\n-    fn check_pass_by_value(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_pass_by_value(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Struct | Target::Enum | Target::TyAlias => true,\n             _ => {\n@@ -1100,21 +1103,15 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"`pass_by_value` attribute should be applied to a struct, enum or type alias.\",\n                     )\n-                    .span_label(*span, \"is not a struct, enum or type alias\")\n+                    .span_label(span, \"is not a struct, enum or type alias\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Warns against some misuses of `#[must_use]`\n-    fn check_must_use(\n-        &self,\n-        hir_id: HirId,\n-        attr: &Attribute,\n-        span: &Span,\n-        _target: Target,\n-    ) -> bool {\n+    fn check_must_use(&self, hir_id: HirId, attr: &Attribute, span: Span, _target: Target) -> bool {\n         let node = self.tcx.hir().get(hir_id);\n         if let Some(fn_node) = node.fn_kind() {\n             if let rustc_hir::IsAsync::Async = fn_node.asyncness() {\n@@ -1125,7 +1122,7 @@ impl CheckAttrVisitor<'_> {\n                               function, not the value within\",\n                     )\n                     .span_label(\n-                        *span,\n+                        span,\n                         \"this attribute does nothing, the `Future`s \\\n                                 returned by async functions are already `must_use`\",\n                     )\n@@ -1139,22 +1136,22 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n-    fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_must_not_suspend(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Struct | Target::Enum | Target::Union | Target::Trait => true,\n             _ => {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"`must_not_suspend` attribute should be applied to a struct, enum, or trait\")\n-                        .span_label(*span, \"is not a struct, enum, or trait\")\n+                        .span_label(span, \"is not a struct, enum, or trait\")\n                         .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n-    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1174,15 +1171,15 @@ impl CheckAttrVisitor<'_> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function\")\n+                        .span_label(span, \"not a function\")\n                         .emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[link]` is applied to an item other than a foreign module.\n-    fn check_link(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_link(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::ForeignMod => {}\n             _ => {\n@@ -1194,15 +1191,15 @@ impl CheckAttrVisitor<'_> {\n                          a future release!\",\n                     );\n \n-                    diag.span_label(*span, \"not an `extern` block\");\n+                    diag.span_label(span, \"not an `extern` block\");\n                     diag.emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[link_name]` is applied to an item other than a foreign function or static.\n-    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::ForeignFn | Target::ForeignStatic => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1236,15 +1233,15 @@ impl CheckAttrVisitor<'_> {\n                         }\n                     }\n \n-                    diag.span_label(*span, \"not a foreign function or static\");\n+                    diag.span_label(span, \"not a foreign function or static\");\n                     diag.emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[no_link]` is applied to an `extern crate`. Returns `true` if valid.\n-    fn check_no_link(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_no_link(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::ExternCrate => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1262,7 +1259,7 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to an `extern crate` item\",\n                     )\n-                    .span_label(*span, \"not an `extern crate` item\")\n+                    .span_label(span, \"not an `extern crate` item\")\n                     .emit();\n                 false\n             }\n@@ -1278,7 +1275,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1299,7 +1296,7 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to a free function, impl method or static\",\n                     )\n-                    .span_label(*span, \"not a free function, impl method or static\")\n+                    .span_label(span, \"not a free function, impl method or static\")\n                     .emit();\n                 false\n             }\n@@ -1309,14 +1306,14 @@ impl CheckAttrVisitor<'_> {\n     fn check_rustc_layout_scalar_valid_range(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         if target != Target::Struct {\n             self.tcx\n                 .sess\n                 .struct_span_err(attr.span, \"attribute should be applied to a struct\")\n-                .span_label(*span, \"not a struct\")\n+                .span_label(span, \"not a struct\")\n                 .emit();\n             return false;\n         }\n@@ -1341,7 +1338,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_rustc_legacy_const_generics(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) -> bool {\n@@ -1350,7 +1347,7 @@ impl CheckAttrVisitor<'_> {\n             self.tcx\n                 .sess\n                 .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                .span_label(*span, \"not a function\")\n+                .span_label(span, \"not a function\")\n                 .emit();\n             return false;\n         }\n@@ -1436,6 +1433,25 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    fn check_rustc_lint_query_instability(\n+        &self,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        let is_function = matches!(target, Target::Fn | Target::Method(..));\n+        if !is_function {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n+                .span_label(span, \"not a function\")\n+                .emit();\n+            false\n+        } else {\n+            true\n+        }\n+    }\n+\n     /// Checks that the dep-graph debugging attributes are only present when the query-dep-graph\n     /// option is passed to the compiler.\n     fn check_rustc_dirty_clean(&self, attr: &Attribute) -> bool {\n@@ -1451,7 +1467,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Checks if `#[link_section]` is applied to a function or static.\n-    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Static | Target::Fn | Target::Method(..) => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1471,15 +1487,15 @@ impl CheckAttrVisitor<'_> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function or static\")\n+                        .span_label(span, \"not a function or static\")\n                         .emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[no_mangle]` is applied to a function or static.\n-    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Static | Target::Fn => {}\n             Target::Method(..) if self.is_impl_item(hir_id) => {}\n@@ -1509,7 +1525,7 @@ impl CheckAttrVisitor<'_> {\n                             being phased out; it will become a hard error in \\\n                             a future release!\",\n                     )\n-                    .span_label(*span, format!(\"foreign {}\", foreign_item_kind))\n+                    .span_label(span, format!(\"foreign {}\", foreign_item_kind))\n                     .note(\"symbol names in extern blocks are not mangled\")\n                     .span_suggestion(\n                         attr.span,\n@@ -1532,7 +1548,7 @@ impl CheckAttrVisitor<'_> {\n                          being phased out; it will become a hard error in \\\n                          a future release!\",\n                     )\n-                    .span_label(*span, \"not a free function, impl method or static\")\n+                    .span_label(span, \"not a free function, impl method or static\")\n                     .emit();\n                 });\n             }\n@@ -1543,7 +1559,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_repr(\n         &self,\n         attrs: &[Attribute],\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n         hir_id: HirId,\n@@ -1677,7 +1693,7 @@ impl CheckAttrVisitor<'_> {\n                 \"{}\",\n                 &format!(\"attribute should be applied to {} {}\", article, allowed_targets)\n             )\n-            .span_label(*span, &format!(\"not {} {}\", article, allowed_targets))\n+            .span_label(span, &format!(\"not {} {}\", article, allowed_targets))\n             .emit();\n         }\n \n@@ -1740,7 +1756,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         attrs: &[Attribute],\n     ) -> bool {\n@@ -1773,7 +1789,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a macro\")\n-                    .span_label(*span, \"not a macro\")\n+                    .span_label(span, \"not a macro\")\n                     .emit();\n                 false\n             }\n@@ -1786,7 +1802,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1807,7 +1823,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to `const fn`\")\n-                    .span_label(*span, \"not a `const fn`\")\n+                    .span_label(span, \"not a `const fn`\")\n                     .emit();\n                 false\n             }\n@@ -1818,7 +1834,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_default_method_body_is_const(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1830,14 +1846,14 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to a trait method with body\",\n                     )\n-                    .span_label(*span, \"not a trait method or missing a body\")\n+                    .span_label(span, \"not a trait method or missing a body\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n-    fn check_stability_promotable(&self, attr: &Attribute, _span: &Span, target: Target) -> bool {\n+    fn check_stability_promotable(&self, attr: &Attribute, _span: Span, target: Target) -> bool {\n         match target {\n             Target::Expression => {\n                 self.tcx\n@@ -1850,7 +1866,7 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    fn check_deprecated(&self, hir_id: HirId, attr: &Attribute, _span: &Span, target: Target) {\n+    fn check_deprecated(&self, hir_id: HirId, attr: &Attribute, _span: Span, target: Target) {\n         match target {\n             Target::Closure | Target::Expression | Target::Statement | Target::Arm => {\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n@@ -1912,37 +1928,37 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         }\n \n         let target = Target::from_item(item);\n-        self.check_attributes(item.hir_id(), &item.span, target, Some(ItemLike::Item(item)));\n+        self.check_attributes(item.hir_id(), item.span, target, Some(ItemLike::Item(item)));\n         intravisit::walk_item(self, item)\n     }\n \n     fn visit_generic_param(&mut self, generic_param: &'tcx hir::GenericParam<'tcx>) {\n         let target = Target::from_generic_param(generic_param);\n-        self.check_attributes(generic_param.hir_id, &generic_param.span, target, None);\n+        self.check_attributes(generic_param.hir_id, generic_param.span, target, None);\n         intravisit::walk_generic_param(self, generic_param)\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {\n         let target = Target::from_trait_item(trait_item);\n-        self.check_attributes(trait_item.hir_id(), &trait_item.span, target, None);\n+        self.check_attributes(trait_item.hir_id(), trait_item.span, target, None);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n     fn visit_field_def(&mut self, struct_field: &'tcx hir::FieldDef<'tcx>) {\n-        self.check_attributes(struct_field.hir_id, &struct_field.span, Target::Field, None);\n+        self.check_attributes(struct_field.hir_id, struct_field.span, Target::Field, None);\n         intravisit::walk_field_def(self, struct_field);\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n-        self.check_attributes(arm.hir_id, &arm.span, Target::Arm, None);\n+        self.check_attributes(arm.hir_id, arm.span, Target::Arm, None);\n         intravisit::walk_arm(self, arm);\n     }\n \n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(\n             f_item.hir_id(),\n-            &f_item.span,\n+            f_item.span,\n             target,\n             Some(ItemLike::ForeignItem(f_item)),\n         );\n@@ -1951,14 +1967,14 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let target = target_from_impl_item(self.tcx, impl_item);\n-        self.check_attributes(impl_item.hir_id(), &impl_item.span, target, None);\n+        self.check_attributes(impl_item.hir_id(), impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n         // When checking statements ignore expressions, they will be checked later.\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n-            self.check_attributes(l.hir_id, &stmt.span, Target::Statement, None);\n+            self.check_attributes(l.hir_id, stmt.span, Target::Statement, None);\n         }\n         intravisit::walk_stmt(self, stmt)\n     }\n@@ -1969,7 +1985,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n             _ => Target::Expression,\n         };\n \n-        self.check_attributes(expr.hir_id, &expr.span, target, None);\n+        self.check_attributes(expr.hir_id, expr.span, target, None);\n         intravisit::walk_expr(self, expr)\n     }\n \n@@ -1979,12 +1995,12 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         generics: &'tcx hir::Generics<'tcx>,\n         item_id: HirId,\n     ) {\n-        self.check_attributes(variant.id, &variant.span, Target::Variant, None);\n+        self.check_attributes(variant.id, variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant, generics, item_id)\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        self.check_attributes(param.hir_id, &param.span, Target::Param, None);\n+        self.check_attributes(param.hir_id, param.span, Target::Param, None);\n \n         intravisit::walk_param(self, param);\n     }\n@@ -2076,7 +2092,7 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut check_attr_visitor.as_deep_visitor());\n     if module_def_id.is_top_level_module() {\n-        check_attr_visitor.check_attributes(CRATE_HIR_ID, &DUMMY_SP, Target::Mod, None);\n+        check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n     }\n }"}, {"sha": "894048040984caa7706d11324cbeb4020a63fe60", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -13,6 +13,7 @@\n #![feature(nll)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "7c511ccbd576aeef1edd857d31075c0ce3a1fc55", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -4,6 +4,7 @@\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use rustc_ast::MacroDef;\n use rustc_attr as attr;"}, {"sha": "bf859decc70fddeea9069ea5d966dfbcac50bc2b", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -7,6 +7,7 @@\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "750ac76a771222d130c830997419fda760abeb5c", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -5,6 +5,7 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(extern_types)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "d5ad95ace973fbc73af115c6d03a119d19428153", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -18,6 +18,7 @@\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "c14b459570f5edfbb4d9eee2c2fef008babd2d3d", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -2,6 +2,7 @@\n #![feature(if_let_guard)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n mod dump_visitor;\n mod dumper;"}, {"sha": "383250cd68f17191654ec05ff5286a4a7e9e7d9f", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -3,6 +3,7 @@\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "823a927fd8c74c531eff95d138203f9c09716499", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -21,6 +21,7 @@\n #![feature(negative_impls)]\n #![feature(nll)]\n #![feature(min_specialization)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "18627cd2c099d28a2da577408f0a5f830fa0d296", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1171,6 +1171,7 @@ symbols! {\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n         rustc_legacy_const_generics,\n+        rustc_lint_query_instability,\n         rustc_macro_transparency,\n         rustc_main,\n         rustc_mir,"}, {"sha": "f4d1f41902aff11802bb176b86720073c33822b1", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -91,6 +91,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "13706e8c217250a672552ddfd965721c9ad74f98", "filename": "compiler/rustc_target/src/abi/call/s390x.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -2,7 +2,7 @@\n // for a pre-z13 machine or using -mno-vx.\n \n use crate::abi::call::{ArgAbi, FnAbi, Reg};\n-use crate::abi::{self, HasDataLayout, TyAbiInterface, TyAndLayout};\n+use crate::abi::{HasDataLayout, TyAbiInterface};\n \n fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n     if !ret.layout.is_aggregate() && ret.layout.size.bits() <= 64 {\n@@ -12,24 +12,6 @@ fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n     }\n }\n \n-fn is_single_fp_element<'a, Ty, C>(cx: &C, layout: TyAndLayout<'a, Ty>) -> bool\n-where\n-    Ty: TyAbiInterface<'a, C>,\n-    C: HasDataLayout,\n-{\n-    match layout.abi {\n-        abi::Abi::Scalar(scalar) => scalar.value.is_float(),\n-        abi::Abi::Aggregate { .. } => {\n-            if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n-                is_single_fp_element(cx, layout.field(cx, 0))\n-            } else {\n-                false\n-            }\n-        }\n-        _ => false,\n-    }\n-}\n-\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n@@ -40,7 +22,7 @@ where\n         return;\n     }\n \n-    if is_single_fp_element(cx, arg.layout) {\n+    if arg.layout.is_single_fp_element(cx) {\n         match arg.layout.size.bytes() {\n             4 => arg.cast_to(Reg::f32()),\n             8 => arg.cast_to(Reg::f64()),"}, {"sha": "d169087dfbdab26b81dd502b34d777db1d874130", "filename": "compiler/rustc_target/src/abi/call/x86.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1,5 +1,5 @@\n use crate::abi::call::{ArgAttribute, FnAbi, PassMode, Reg, RegKind};\n-use crate::abi::{self, HasDataLayout, TyAbiInterface, TyAndLayout};\n+use crate::abi::{HasDataLayout, TyAbiInterface};\n use crate::spec::HasTargetSpec;\n \n #[derive(PartialEq)]\n@@ -8,24 +8,6 @@ pub enum Flavor {\n     Fastcall,\n }\n \n-fn is_single_fp_element<'a, Ty, C>(cx: &C, layout: TyAndLayout<'a, Ty>) -> bool\n-where\n-    Ty: TyAbiInterface<'a, C> + Copy,\n-    C: HasDataLayout,\n-{\n-    match layout.abi {\n-        abi::Abi::Scalar(scalar) => scalar.value.is_float(),\n-        abi::Abi::Aggregate { .. } => {\n-            if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n-                is_single_fp_element(cx, layout.field(cx, 0))\n-            } else {\n-                false\n-            }\n-        }\n-        _ => false,\n-    }\n-}\n-\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>, flavor: Flavor)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n@@ -44,7 +26,7 @@ where\n             if t.abi_return_struct_as_int {\n                 // According to Clang, everyone but MSVC returns single-element\n                 // float aggregates directly in a floating-point register.\n-                if !t.is_like_msvc && is_single_fp_element(cx, fn_abi.ret.layout) {\n+                if !t.is_like_msvc && fn_abi.ret.layout.is_single_fp_element(cx) {\n                     match fn_abi.ret.layout.size.bytes() {\n                         4 => fn_abi.ret.cast_to(Reg::f32()),\n                         8 => fn_abi.ret.cast_to(Reg::f64()),"}, {"sha": "7f1fd28b30df8feabe875bbb8cd9a63fc69167dd", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1276,6 +1276,24 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n     {\n         Ty::ty_and_layout_pointee_info_at(self, cx, offset)\n     }\n+\n+    pub fn is_single_fp_element<C>(self, cx: &C) -> bool\n+    where\n+        Ty: TyAbiInterface<'a, C>,\n+        C: HasDataLayout,\n+    {\n+        match self.abi {\n+            Abi::Scalar(scalar) => scalar.value.is_float(),\n+            Abi::Aggregate { .. } => {\n+                if self.fields.count() == 1 && self.fields.offset(0).bytes() == 0 {\n+                    self.field(cx, 0).is_single_fp_element(cx)\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n impl<'a, Ty> TyAndLayout<'a, Ty> {"}, {"sha": "aefbb398286acb25c64170ff44d913960db8a3a9", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n+    base.static_position_independent_executables = true;\n     base.supported_sanitizers = SanitizerSet::ADDRESS\n         | SanitizerSet::CFI\n         | SanitizerSet::LEAK"}, {"sha": "0041f5964059c9f646b57715b021800cccd96503", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -22,6 +22,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "8cde93ed9d82a7b1c1cf0232cbab7d2eb1d87675", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1555,7 +1555,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // `erase_late_bound_regions`.\n             let ty_erased = self.tcx.erase_late_bound_regions(ty);\n             let ty_erased = self.tcx.erase_regions(ty_erased);\n-            let eq = ty::TyS::same_type(ty_erased, target_ty_erased);\n+            let eq = ty_erased == target_ty_erased;\n             debug!(\n                 \"maybe_note_obligation_cause_for_async_await: ty_erased={:?} \\\n                     target_ty_erased={:?} eq={:?}\","}, {"sha": "1717959acc1586b0164df16a510d29a9a8b90efa", "filename": "compiler/rustc_ty_utils/src/representability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -322,7 +322,7 @@ fn is_type_structurally_recursive_inner<'tcx>(\n                 // struct Foo { Option<Option<Foo>> }\n \n                 for &seen_adt in iter {\n-                    if ty::TyS::same_type(ty, seen_adt) {\n+                    if ty == seen_adt {\n                         debug!(\"ContainsRecursive: {:?} contains {:?}\", seen_adt, ty);\n                         return Representability::ContainsRecursive;\n                     }"}, {"sha": "777bd640669ce8f1c33d8e192457a7925dd86847", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 210, "deletions": 3, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1,24 +1,33 @@\n //! Orphan checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n+use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::def_id::LocalDefId;\n+use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n+use rustc_middle::ty::{self, ImplPolarity, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_session::lint;\n+use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n+use std::ops::ControlFlow;\n \n pub(super) fn orphan_check_crate(tcx: TyCtxt<'_>, (): ()) -> &[LocalDefId] {\n     let mut errors = Vec::new();\n-    for (_trait, impls_of_trait) in tcx.all_local_trait_impls(()) {\n+    for (&trait_def_id, impls_of_trait) in tcx.all_local_trait_impls(()) {\n         for &impl_of_trait in impls_of_trait {\n             match orphan_check_impl(tcx, impl_of_trait) {\n                 Ok(()) => {}\n                 Err(ErrorReported) => errors.push(impl_of_trait),\n             }\n         }\n+\n+        if tcx.trait_is_auto(trait_def_id) {\n+            lint_auto_trait_impls(tcx, trait_def_id, impls_of_trait);\n+        }\n     }\n     tcx.arena.alloc_slice(&errors)\n }\n@@ -265,3 +274,201 @@ fn emit_orphan_check_error<'tcx>(\n \n     Err(ErrorReported)\n }\n+\n+#[derive(Default)]\n+struct AreUniqueParamsVisitor {\n+    seen: GrowableBitSet<u32>,\n+}\n+\n+#[derive(Copy, Clone)]\n+enum NotUniqueParam<'tcx> {\n+    DuplicateParam(GenericArg<'tcx>),\n+    NotParam(GenericArg<'tcx>),\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for AreUniqueParamsVisitor {\n+    type BreakTy = NotUniqueParam<'tcx>;\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match t.kind() {\n+            ty::Param(p) => {\n+                if self.seen.insert(p.index) {\n+                    ControlFlow::CONTINUE\n+                } else {\n+                    ControlFlow::Break(NotUniqueParam::DuplicateParam(t.into()))\n+                }\n+            }\n+            _ => ControlFlow::Break(NotUniqueParam::NotParam(t.into())),\n+        }\n+    }\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match r {\n+            ty::ReEarlyBound(p) => {\n+                if self.seen.insert(p.index) {\n+                    ControlFlow::CONTINUE\n+                } else {\n+                    ControlFlow::Break(NotUniqueParam::DuplicateParam(r.into()))\n+                }\n+            }\n+            _ => ControlFlow::Break(NotUniqueParam::NotParam(r.into())),\n+        }\n+    }\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match c.val {\n+            ty::ConstKind::Param(p) => {\n+                if self.seen.insert(p.index) {\n+                    ControlFlow::CONTINUE\n+                } else {\n+                    ControlFlow::Break(NotUniqueParam::DuplicateParam(c.into()))\n+                }\n+            }\n+            _ => ControlFlow::Break(NotUniqueParam::NotParam(c.into())),\n+        }\n+    }\n+}\n+\n+/// Lint impls of auto traits if they are likely to have\n+/// unsound or surprising effects on auto impls.\n+fn lint_auto_trait_impls(tcx: TyCtxt<'_>, trait_def_id: DefId, impls: &[LocalDefId]) {\n+    let mut non_covering_impls = Vec::new();\n+    for &impl_def_id in impls {\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+        if trait_ref.references_error() {\n+            return;\n+        }\n+\n+        if tcx.impl_polarity(impl_def_id) != ImplPolarity::Positive {\n+            return;\n+        }\n+\n+        assert_eq!(trait_ref.substs.len(), 1);\n+        let self_ty = trait_ref.self_ty();\n+        let (self_type_did, substs) = match self_ty.kind() {\n+            ty::Adt(def, substs) => (def.did, substs),\n+            _ => {\n+                // FIXME: should also lint for stuff like `&i32` but\n+                // considering that auto traits are unstable, that\n+                // isn't too important for now as this only affects\n+                // crates using `nightly`, and std.\n+                continue;\n+            }\n+        };\n+\n+        // Impls which completely cover a given root type are fine as they\n+        // disable auto impls entirely. So only lint if the substs\n+        // are not a permutation of the identity substs.\n+        match substs.visit_with(&mut AreUniqueParamsVisitor::default()) {\n+            ControlFlow::Continue(()) => {} // ok\n+            ControlFlow::Break(arg) => {\n+                // Ideally:\n+                //\n+                // - compute the requirements for the auto impl candidate\n+                // - check whether these are implied by the non covering impls\n+                // - if not, emit the lint\n+                //\n+                // What we do here is a bit simpler:\n+                //\n+                // - badly check if an auto impl candidate definitely does not apply\n+                //   for the given simplified type\n+                // - if so, do not lint\n+                if fast_reject_auto_impl(tcx, trait_def_id, self_ty) {\n+                    // ok\n+                } else {\n+                    non_covering_impls.push((impl_def_id, self_type_did, arg));\n+                }\n+            }\n+        }\n+    }\n+\n+    for &(impl_def_id, self_type_did, arg) in &non_covering_impls {\n+        tcx.struct_span_lint_hir(\n+            lint::builtin::SUSPICIOUS_AUTO_TRAIT_IMPLS,\n+            tcx.hir().local_def_id_to_hir_id(impl_def_id),\n+            tcx.def_span(impl_def_id),\n+            |err| {\n+                let mut err = err.build(&format!(\n+                    \"cross-crate traits with a default impl, like `{}`, \\\n+                         should not be specialized\",\n+                    tcx.def_path_str(trait_def_id),\n+                ));\n+                let item_span = tcx.def_span(self_type_did);\n+                let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n+                err.span_note(\n+                    item_span,\n+                    &format!(\n+                        \"try using the same sequence of generic parameters as the {} definition\",\n+                        self_descr,\n+                    ),\n+                );\n+                match arg {\n+                    NotUniqueParam::DuplicateParam(arg) => {\n+                        err.note(&format!(\"`{}` is mentioned multiple times\", arg));\n+                    }\n+                    NotUniqueParam::NotParam(arg) => {\n+                        err.note(&format!(\"`{}` is not a generic parameter\", arg));\n+                    }\n+                }\n+                err.emit();\n+            },\n+        );\n+    }\n+}\n+\n+fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty: Ty<'tcx>) -> bool {\n+    struct DisableAutoTraitVisitor<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        trait_def_id: DefId,\n+        self_ty_root: Ty<'tcx>,\n+        seen: FxHashSet<DefId>,\n+    }\n+\n+    impl<'tcx> TypeVisitor<'tcx> for DisableAutoTraitVisitor<'tcx> {\n+        type BreakTy = ();\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            let tcx = self.tcx;\n+            if t != self.self_ty_root {\n+                for impl_def_id in tcx.non_blanket_impls_for_ty(self.trait_def_id, t) {\n+                    match tcx.impl_polarity(impl_def_id) {\n+                        ImplPolarity::Negative => return ControlFlow::BREAK,\n+                        ImplPolarity::Reservation => {}\n+                        // FIXME(@lcnr): That's probably not good enough, idk\n+                        //\n+                        // We might just want to take the rustdoc code and somehow avoid\n+                        // explicit impls for `Self`.\n+                        ImplPolarity::Positive => return ControlFlow::CONTINUE,\n+                    }\n+                }\n+            }\n+\n+            match t.kind() {\n+                ty::Adt(def, substs) => {\n+                    // @lcnr: This is the only place where cycles can happen. We avoid this\n+                    // by only visiting each `DefId` once.\n+                    //\n+                    // This will be is incorrect in subtle cases, but I don't care :)\n+                    if self.seen.insert(def.did) {\n+                        for ty in def.all_fields().map(|field| field.ty(tcx, substs)) {\n+                            ty.visit_with(self)?;\n+                        }\n+                    }\n+\n+                    ControlFlow::CONTINUE\n+                }\n+                _ => t.super_visit_with(self),\n+            }\n+        }\n+    }\n+\n+    let self_ty_root = match self_ty.kind() {\n+        ty::Adt(def, _) => tcx.mk_adt(def, InternalSubsts::identity_for_item(tcx, def.did)),\n+        _ => unimplemented!(\"unexpected self ty {:?}\", self_ty),\n+    };\n+\n+    self_ty_root\n+        .visit_with(&mut DisableAutoTraitVisitor {\n+            tcx,\n+            self_ty_root,\n+            trait_def_id,\n+            seen: FxHashSet::default(),\n+        })\n+        .is_break()\n+}"}, {"sha": "7b004fa086bf3a1bbda36fd1793663d073245f79", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -69,6 +69,7 @@ This API is completely unstable and subject to change.\n #![feature(control_flow_enum)]\n #![feature(hash_drain_filter)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "27af227a1f27f0804b305945dacd1abd7b56924d", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -43,6 +43,22 @@ impl RawWaker {\n     pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n         RawWaker { data, vtable }\n     }\n+\n+    /// Get the `data` pointer used to create this `RawWaker`.\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"waker_getters\", issue = \"87021\")]\n+    pub fn data(&self) -> *const () {\n+        self.data\n+    }\n+\n+    /// Get the `vtable` pointer used to create this `RawWaker`.\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"waker_getters\", issue = \"87021\")]\n+    pub fn vtable(&self) -> &'static RawWakerVTable {\n+        self.vtable\n+    }\n }\n \n /// A virtual function pointer table (vtable) that specifies the behavior\n@@ -260,6 +276,14 @@ impl Waker {\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker { waker }\n     }\n+\n+    /// Get a reference to the underlying [`RawWaker`].\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"waker_getters\", issue = \"87021\")]\n+    pub fn as_raw(&self) -> &RawWaker {\n+        &self.waker\n+    }\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}, {"sha": "a993def0a818ef98375d4a65ff1a7ee65b7f6a3b", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -90,6 +90,7 @@\n #![feature(unzip_option)]\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]\n+#![feature(waker_getters)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;\n@@ -131,3 +132,4 @@ mod task;\n mod time;\n mod tuple;\n mod unicode;\n+mod waker;"}, {"sha": "6602ab36ba714c04a748ca4797a1a13a0a6b3efa", "filename": "library/core/tests/waker.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fcore%2Ftests%2Fwaker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fcore%2Ftests%2Fwaker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fwaker.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,22 @@\n+use std::ptr;\n+use std::task::{RawWaker, RawWakerVTable, Waker};\n+\n+#[test]\n+fn test_waker_getters() {\n+    let raw_waker = RawWaker::new(42usize as *mut (), &WAKER_VTABLE);\n+    assert_eq!(raw_waker.data() as usize, 42);\n+    assert!(ptr::eq(raw_waker.vtable(), &WAKER_VTABLE));\n+\n+    let waker = unsafe { Waker::from_raw(raw_waker) };\n+    let waker2 = waker.clone();\n+    let raw_waker2 = waker2.as_raw();\n+    assert_eq!(raw_waker2.data() as usize, 43);\n+    assert!(ptr::eq(raw_waker2.vtable(), &WAKER_VTABLE));\n+}\n+\n+static WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(\n+    |data| RawWaker::new((data as usize + 1) as *mut (), &WAKER_VTABLE),\n+    |_| {},\n+    |_| {},\n+    |_| {},\n+);"}, {"sha": "de26d9dcb2627fa6aaa82d0d17b91d3ef5fd69b8", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -16,7 +16,7 @@ panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n libc = { version = \"0.2.116\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.66\" }\n+compiler_builtins = { version = \"0.1.67\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n hashbrown = { version = \"0.12\", default-features = false, features = ['rustc-dep-of-std'] }"}, {"sha": "9e61defc31e9732acea81b66878e4e791a4e8d82", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -371,6 +371,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n@@ -448,6 +449,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(vec, [1, 2, 3]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n@@ -471,6 +473,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter { base: self.base.iter() }\n@@ -500,6 +503,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         IterMut { base: self.base.iter_mut() }\n@@ -560,6 +564,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert!(a.is_empty());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, K, V> {\n         Drain { base: self.base.drain() }\n@@ -601,6 +606,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, K, V, F>\n     where\n@@ -624,6 +630,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(map.len(), 4);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -1990,6 +1997,7 @@ impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type IntoIter = Iter<'a, K, V>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> Iter<'a, K, V> {\n         self.iter()\n     }\n@@ -2001,6 +2009,7 @@ impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S> {\n     type IntoIter = IterMut<'a, K, V>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IterMut<'a, K, V> {\n         self.iter_mut()\n     }\n@@ -2030,6 +2039,7 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S> {\n     /// let vec: Vec<(&str, i32)> = map.into_iter().collect();\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IntoIter<K, V> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "d1450987e7374bfe1f2e50504be9f5c766e38852", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -185,6 +185,7 @@ impl<T, S> HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, T> {\n         Iter { base: self.base.iter() }\n@@ -244,6 +245,7 @@ impl<T, S> HashSet<T, S> {\n     /// assert!(set.is_empty());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, T> {\n         Drain { base: self.base.drain() }\n@@ -282,6 +284,7 @@ impl<T, S> HashSet<T, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, T, F>\n     where\n@@ -304,6 +307,7 @@ impl<T, S> HashSet<T, S> {\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -528,6 +532,7 @@ where\n     /// assert_eq!(diff, [4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n         Difference { iter: self.iter(), other }\n@@ -555,6 +560,7 @@ where\n     /// assert_eq!(diff1, [1, 4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(\n         &'a self,\n@@ -582,6 +588,7 @@ where\n     /// assert_eq!(intersection, [2, 3].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n         if self.len() <= other.len() {\n@@ -610,6 +617,7 @@ where\n     /// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n         if self.len() >= other.len() {\n@@ -1410,6 +1418,7 @@ impl<'a, T, S> IntoIterator for &'a HashSet<T, S> {\n     type IntoIter = Iter<'a, T>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> Iter<'a, T> {\n         self.iter()\n     }\n@@ -1441,6 +1450,7 @@ impl<T, S> IntoIterator for HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "945ec1724ac041b4d1b16b585fe3df2509c01715", "filename": "src/test/run-make/static-pie/Makefile", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1,15 +1,18 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-x86_64-unknown-linux-musl\n+# only-x86_64\n+# only-linux\n+# ignore-gnux32\n \n # How to manually run this\n-# $ ./x.py test --target x86_64-unknown-linux-musl src/test/run-make/static-pie\n-\n-all:\n-\t$(RUSTC) --target $(TARGET) -C target-feature=+crt-static test-aslr.rs\n-\t# Check that no dynamic interpreter is set\n-\t! readelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) INTERP\n-\t# Check that we have a dynamic executable\n-\treadelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) DYNAMIC\n-\t# Check for address space layout randomization\n-\t$(call RUN,test-aslr) --test-aslr\n+# $ ./x.py test --target x86_64-unknown-linux-[musl,gnu] src/test/run-make/static-pie\n+\n+all: test-clang test-gcc\n+\n+test-%:\n+\tif ./check_$*_version.sh; then\\\n+\t\t${RUSTC} -Clinker=$* -Clinker-flavor=gcc --target ${TARGET} -C target-feature=+crt-static test-aslr.rs; \\\n+\t\t! readelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) INTERP; \\\n+\t\treadelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) DYNAMIC; \\\n+\t\t$(call RUN,test-aslr) --test-aslr; \\\n+\tfi"}, {"sha": "b8e97c3da7d77b5ed4356702951eda5614a3fa35", "filename": "src/test/run-make/static-pie/check_clang_version.sh", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_clang_version.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_clang_version.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_clang_version.sh?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+if command -v clang > /dev/null\n+then\n+  CLANG_VERSION=$(echo __clang_major__ | clang -E -x c - | grep -v -e '^#' )\n+  echo \"clang version $CLANG_VERSION detected\"\n+  if (( $CLANG_VERSION >= 9 ))\n+  then\n+    echo \"clang supports -static-pie\"\n+    exit 0\n+  else\n+    echo \"clang too old to support -static-pie, skipping test\"\n+    exit 1\n+  fi\n+else\n+  echo \"No clang version detected\"\n+  exit 2\n+fi"}, {"sha": "d07e1d151dfb8b91804cf5084a0f688a2f3c5208", "filename": "src/test/run-make/static-pie/check_gcc_version.sh", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_gcc_version.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_gcc_version.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_gcc_version.sh?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+if command -v gcc > /dev/null\n+then\n+  GCC_VERSION=$(echo __GNUC__ | gcc -E -x c - | grep -v -e '^#' )\n+  echo \"gcc version $GCC_VERSION detected\"\n+  if (( $GCC_VERSION >= 8 ))\n+  then\n+    echo \"gcc supports -static-pie\"\n+    exit 0\n+  else\n+    echo \"gcc too old to support -static-pie, skipping test\"\n+    exit 1\n+  fi\n+else\n+  echo \"No gcc version detected\"\n+  exit 2\n+fi"}, {"sha": "560675b448608a31ef1130b38e476afa69fec9d9", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![deny(rustc::potential_query_instability)]\n+\n+extern crate rustc_data_structures;\n+\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+\n+fn main() {\n+    let mut x = FxHashMap::<u32, i32>::default();\n+\n+    for _ in x.drain() {}\n+    //~^ ERROR using `drain` can result in unstable\n+\n+    for _ in x.iter() {}\n+    //~^ ERROR using `iter`\n+\n+    for _ in Some(&mut x).unwrap().iter_mut() {}\n+    //~^ ERROR using `iter_mut`\n+\n+    for _ in x {}\n+    //~^ ERROR using `into_iter`\n+}"}, {"sha": "7e8b448f41a9119911d9f5bd8a7ec58a5fcc7b95", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,39 @@\n+error: using `drain` can result in unstable query results\n+  --> $DIR/query_stability.rs:13:16\n+   |\n+LL |     for _ in x.drain() {}\n+   |                ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/query_stability.rs:4:9\n+   |\n+LL | #![deny(rustc::potential_query_instability)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `iter` can result in unstable query results\n+  --> $DIR/query_stability.rs:16:16\n+   |\n+LL |     for _ in x.iter() {}\n+   |                ^^^^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `iter_mut` can result in unstable query results\n+  --> $DIR/query_stability.rs:19:36\n+   |\n+LL |     for _ in Some(&mut x).unwrap().iter_mut() {}\n+   |                                    ^^^^^^^^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `into_iter` can result in unstable query results\n+  --> $DIR/query_stability.rs:22:14\n+   |\n+LL |     for _ in x {}\n+   |              ^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f478b73329eb76f0e446594dc32a85142e000470", "filename": "src/test/ui-fulldeps/internal-lints/query_stability_incorrect.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_lint_query_instability]\n+//~^ ERROR attribute should be applied to a function\n+struct Foo;\n+\n+impl Foo {\n+    #[rustc_lint_query_instability(a)]\n+    //~^ ERROR malformed `rustc_lint_query_instability`\n+    fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "b5156f2ac5905551077f73b3265e75c7d5d14410", "filename": "src/test/ui-fulldeps/internal-lints/query_stability_incorrect.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,17 @@\n+error: malformed `rustc_lint_query_instability` attribute input\n+  --> $DIR/query_stability_incorrect.rs:10:5\n+   |\n+LL |     #[rustc_lint_query_instability(a)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_lint_query_instability]`\n+\n+error: attribute should be applied to a function\n+  --> $DIR/query_stability_incorrect.rs:5:1\n+   |\n+LL | #[rustc_lint_query_instability]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct Foo;\n+   | ----------- not a function\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1026a35a455acd0a2224208934145eed827cef39", "filename": "src/test/ui/auto-traits/suspicious-impls-lint.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,34 @@\n+#![deny(suspicious_auto_trait_impls)]\n+\n+struct MayImplementSendOk<T>(T);\n+unsafe impl<T: Send> Send for MayImplementSendOk<T> {} // ok\n+\n+struct MayImplementSendErr<T>(T);\n+unsafe impl<T: Send> Send for MayImplementSendErr<&T> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+struct ContainsNonSendDirect<T>(*const T);\n+unsafe impl<T: Send> Send for ContainsNonSendDirect<&T> {} // ok\n+\n+struct ContainsPtr<T>(*const T);\n+struct ContainsIndirectNonSend<T>(ContainsPtr<T>);\n+unsafe impl<T: Send> Send for ContainsIndirectNonSend<&T> {} // ok\n+\n+struct ContainsVec<T>(Vec<T>);\n+unsafe impl Send for ContainsVec<i32> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+struct TwoParams<T, U>(T, U);\n+unsafe impl<T: Send, U: Send> Send for TwoParams<T, U> {} // ok\n+\n+struct TwoParamsFlipped<T, U>(T, U);\n+unsafe impl<T: Send, U: Send> Send for TwoParamsFlipped<U, T> {} // ok\n+\n+struct TwoParamsSame<T, U>(T, U);\n+unsafe impl<T: Send> Send for TwoParamsSame<T, T> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+fn main() {}"}, {"sha": "f91aa862271d365eee21687a7c43e5ddc0402015", "filename": "src/test/ui/auto-traits/suspicious-impls-lint.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -0,0 +1,52 @@\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-impls-lint.rs:7:1\n+   |\n+LL | unsafe impl<T: Send> Send for MayImplementSendErr<&T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/suspicious-impls-lint.rs:1:9\n+   |\n+LL | #![deny(suspicious_auto_trait_impls)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-impls-lint.rs:6:1\n+   |\n+LL | struct MayImplementSendErr<T>(T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `&T` is not a generic parameter\n+\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-impls-lint.rs:19:1\n+   |\n+LL | unsafe impl Send for ContainsVec<i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-impls-lint.rs:18:1\n+   |\n+LL | struct ContainsVec<T>(Vec<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `i32` is not a generic parameter\n+\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-impls-lint.rs:30:1\n+   |\n+LL | unsafe impl<T: Send> Send for TwoParamsSame<T, T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-impls-lint.rs:29:1\n+   |\n+LL | struct TwoParamsSame<T, U>(T, U);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `T` is mentioned multiple times\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "cc75cd4909a234d734a36f7cbbeb0647228fdfc8", "filename": "src/test/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1,4 +1,5 @@\n // aux-build:tdticc_coherence_lib.rs\n+#![allow(suspicious_auto_trait_impls)]\n \n // Test that we do not consider associated types to be sendable without\n // some applicable trait bound (and we don't ICE)."}, {"sha": "cf5c15df7051cee43b705213b501dd19fdea6d8d", "filename": "src/test/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1,5 +1,5 @@\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:13:1\n+  --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:14:1\n    |\n LL | impl DefaultedTrait for (A,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^----\n@@ -10,7 +10,7 @@ LL | impl DefaultedTrait for (A,) { }\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:16:1\n+  --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:17:1\n    |\n LL | impl !DefaultedTrait for (B,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^----\n@@ -21,13 +21,13 @@ LL | impl !DefaultedTrait for (B,) { }\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `DefaultedTrait`, can only be implemented for a struct/enum type defined in the current crate\n-  --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:20:1\n+  --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:21:1\n    |\n LL | impl DefaultedTrait for Box<C> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait for type in another crate\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:21:1\n+  --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:22:1\n    |\n LL | impl DefaultedTrait for lib::Something<C> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^-----------------"}, {"sha": "6d0851d804c26936e2fdb2c876a7f4ea370efac6", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TyS, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span};\n \n@@ -448,7 +448,7 @@ fn try_parse_ref_op<'tcx>(\n // the reference.\n fn deref_method_same_type(result_ty: Ty<'_>, arg_ty: Ty<'_>) -> bool {\n     match (result_ty.kind(), arg_ty.kind()) {\n-        (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => TyS::same_type(result_ty, arg_ty),\n+        (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => result_ty == arg_ty,\n \n         // The result type for a deref method is always a reference\n         // Not matching the previous pattern means the argument type is not a reference"}, {"sha": "a2f943b03ef42c4f3f2e7518148e68d0ad615bec", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind}\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{Ty, TyS, TypeckResults};\n+use rustc_middle::ty::{Ty, TypeckResults};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n@@ -346,7 +346,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n             if let TyKind::Path(QPath::Resolved(None, ty_path)) = ty.kind;\n             if let Some(ty_did) = ty_path.res.opt_def_id();\n             then {\n-                if !TyS::same_type(self.target.ty(), self.maybe_typeck_results.unwrap().expr_ty(e)) {\n+                if self.target.ty() != self.maybe_typeck_results.unwrap().expr_ty(e) {\n                     return;\n                 }\n "}, {"sha": "3418d276c53549d1cd55fc0bbad490fd782d3b08", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     ItemKind, Mutability, Node, TraitItemRef, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, AssocKind, FnSig, Ty, TyS};\n+use rustc_middle::ty::{self, AssocKind, FnSig, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{\n     source_map::{Span, Spanned, Symbol},\n@@ -265,7 +265,7 @@ impl LenOutput<'_> {\n             (_, &ty::Bool) => true,\n             (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did => subs.type_at(0).is_bool(),\n             (Self::Result(id, err_ty), &ty::Adt(adt, subs)) if id == adt.did => {\n-                subs.type_at(0).is_bool() && TyS::same_type(subs.type_at(1), err_ty)\n+                subs.type_at(0).is_bool() && subs.type_at(1) == err_ty\n             },\n             _ => false,\n         }"}, {"sha": "175e2b382e3f6d03b3afef51d5259e6dbcbddd15", "filename": "src/tools/clippy/clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -5,13 +5,12 @@ use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::symbol::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, call_expr: &Expr<'_>) {\n     let self_ty = cx.typeck_results().expr_ty(self_arg);\n     let self_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n-    if !(TyS::same_type(self_ty, self_ty_adjusted) && is_trait_method(cx, call_expr, sym::IntoIterator)) {\n+    if !(self_ty == self_ty_adjusted && is_trait_method(cx, call_expr, sym::IntoIterator)) {\n         return;\n     }\n "}, {"sha": "5f5beccd030c171c4a1c80566b1c8e75fc16a59d", "filename": "src/tools/clippy/clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, method_name: &str) {\n@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, m\n                     mutbl: Mutability::Not,\n                 },\n             );\n-            TyS::same_type(receiver_ty_adjusted, ref_receiver_ty)\n+            receiver_ty_adjusted == ref_receiver_ty\n         },\n         _ => false,\n     };"}, {"sha": "e61cb4d227363c67529be6ecbef20cddb9122c16", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -26,7 +26,7 @@ use rustc_hir::{\n };\n use rustc_hir::{HirIdMap, HirIdSet};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty, TyS, VariantDef};\n+use rustc_middle::ty::{self, Ty, VariantDef};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n@@ -2262,7 +2262,7 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n                     };\n                     // the names technically don't have to match; this makes the lint more conservative\n                     if cx.tcx.hir().name(a_id) == cx.tcx.hir().name(b_id);\n-                    if TyS::same_type(cx.typeck_results().expr_ty(a), cx.typeck_results().expr_ty(b));\n+                    if cx.typeck_results().expr_ty(a) == cx.typeck_results().expr_ty(b);\n                     if pat_contains_local(lhs.pat, a_id);\n                     if pat_contains_local(rhs.pat, b_id);\n                     then {"}, {"sha": "30c68186b3aef1468033f63161c9c5a7f1d1d724", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -8,7 +8,6 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n use std::borrow::Cow;\n@@ -149,7 +148,7 @@ pub(super) fn check<'tcx>(\n                 if_chain! {\n                     if path_to_local_id(a_path, filter_param_id);\n                     if path_to_local_id(b, map_param_id);\n-                    if TyS::same_type(cx.typeck_results().expr_ty_adjusted(a), cx.typeck_results().expr_ty_adjusted(b));\n+                    if cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b);\n                     then {\n                         return true;\n                     }"}, {"sha": "7a255baffd745aa7855fb9a78be1f0762bbb0080", "filename": "src/tools/clippy/clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -6,7 +6,6 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::sym;\n \n use super::IMPLICIT_CLONE;\n@@ -19,7 +18,7 @@ pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv\n         let input_type = cx.typeck_results().expr_ty(recv);\n         let (input_type, ref_count) = peel_mid_ty_refs(input_type);\n         if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did));\n-        if TyS::same_type(return_type, input_type);\n+        if return_type == input_type;\n         then {\n             let mut app = Applicability::MachineApplicable;\n             let recv_snip = snippet_with_context(cx, recv.span, expr.span.ctxt(), \"..\", &mut app).0;"}, {"sha": "80e1eb86e6c6c10aecc7d38f0afbc37b1f405c76", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -78,7 +78,7 @@ use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PrimTy, QPath, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n+use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n@@ -2195,7 +2195,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 }\n             }\n \n-            if name == \"new\" && !TyS::same_type(ret_ty, self_ty) {\n+            if name == \"new\" && ret_ty != self_ty {\n                 span_lint(\n                     cx,\n                     NEW_RET_NO_SELF,"}, {"sha": "ccfce31713f93469b7e620b8b65770abc1e2ad9f", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -5,7 +5,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, TyS};\n+use rustc_middle::ty;\n use rustc_span::sym;\n \n use super::UNNECESSARY_FILTER_MAP;\n@@ -34,7 +34,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n             let in_ty = cx.typeck_results().node_type(body.params[0].hir_id);\n             match cx.typeck_results().expr_ty(&body.value).kind() {\n                 ty::Adt(adt, subst)\n-                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && TyS::same_type(in_ty, subst.type_at(0)) =>\n+                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && in_ty == subst.type_at(0) =>\n                 {\n                     \"filter\"\n                 },"}, {"sha": "9d3d7d1f24cbc3dfa86f5a8166fd38eadc02ecd2", "filename": "src/tools/clippy/clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -4,7 +4,6 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -49,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n             if let ExprKind::MethodCall(path, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n             if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n-            if TyS::same_type( outer_ty, typeck.expr_ty(sub_expr) );\n+            if outer_ty == typeck.expr_ty(sub_expr);\n             then{\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "8f85b00596c019f248a290b2087771977257e377", "filename": "src/tools/clippy/clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionSome, ResultOk};\n use rustc_hir::{AsyncGeneratorKind, Block, Body, Expr, ExprKind, GeneratorKind, LangItem, MatchSource, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -128,7 +127,7 @@ fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if expr.span.ctxt() == inner_expr.span.ctxt();\n         let expr_ty = cx.typeck_results().expr_ty(expr);\n         let inner_ty = cx.typeck_results().expr_ty(inner_expr);\n-        if TyS::same_type(expr_ty, inner_ty);\n+        if expr_ty == inner_ty;\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "f86af7a7bb6eaddb736730d7ab682a417f90d3f0", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -8,7 +8,6 @@ use rustc_hir as hir;\n use rustc_hir::HirIdSet;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -103,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if cx.access_levels.is_reachable(impl_item.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n-                            if TyS::same_type(self_ty, return_ty(cx, id));\n+                            if self_ty == return_ty(cx, id);\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n                             then {\n                                 if self.impling_types.is_none() {"}, {"sha": "cd3aee5565538aa07cda95414baca765cb26f1b8", "filename": "src/tools/clippy/clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -6,7 +6,6 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -54,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n             if addressee.span.ctxt() == ctxt;\n             if let ExprKind::Index(indexed, range) = addressee.kind;\n             if is_type_lang_item(cx, cx.typeck_results().expr_ty_adjusted(range), LangItem::RangeFull);\n-            if TyS::same_type(cx.typeck_results().expr_ty(expr), cx.typeck_results().expr_ty(indexed));\n+            if cx.typeck_results().expr_ty(expr) == cx.typeck_results().expr_ty(indexed);\n             then {\n                 let mut app = Applicability::MachineApplicable;\n                 let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "971729e5c54b35d2bc05866d567fb08954247062", "filename": "src/tools/clippy/clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -7,7 +7,7 @@ use if_chain::if_chain;\n use rustc_hir::BinOpKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty, TyS, TypeAndMut};\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n             // Find a size_of call in the count parameter expression and\n             // check that it's the same type\n             if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr, false);\n-            if TyS::same_type(pointee_ty, ty_used_for_size_of);\n+            if pointee_ty == ty_used_for_size_of;\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "7b5c5af8f79bfb1d761e92db4597a77443ea0160", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -102,7 +102,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 if let Some(typeck) = self.inner.maybe_typeck_results {\n                     let l_ty = typeck.pat_ty(l.pat);\n                     let r_ty = typeck.pat_ty(r.pat);\n-                    if !rustc_middle::ty::TyS::same_type(l_ty, r_ty) {\n+                    if l_ty != r_ty {\n                         return false;\n                     }\n                 }"}, {"sha": "819ff917b63364ac837ebf05477bd69707889ffb", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -42,7 +42,7 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n-        GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n+        GenericArgKind::Type(inner_ty) => other_ty == inner_ty,\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n }"}, {"sha": "514fb25c8cfd823bfacd62b2babbfcd3d05e2a22", "filename": "src/tools/clippy/tests/ui/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_send_fields_in_send_ty.rs?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::non_send_fields_in_send_ty)]\n+#![allow(suspicious_auto_trait_impls)]\n #![feature(extern_types)]\n \n use std::cell::UnsafeCell;"}, {"sha": "b6c904a147a5f4da727b9e75b70c94ced79ad607", "filename": "src/tools/clippy/tests/ui/non_send_fields_in_send_ty.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_send_fields_in_send_ty.stderr?ref=ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "patch": "@@ -1,167 +1,167 @@\n error: some fields in `RingBuffer<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:16:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:17:1\n    |\n LL | unsafe impl<T> Send for RingBuffer<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n note: it is not safe to send field `data` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:11:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:12:5\n    |\n LL |     data: Vec<UnsafeCell<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Vec<UnsafeCell<T>>: Send`\n \n error: some fields in `MvccRwLock<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:24:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:25:1\n    |\n LL | unsafe impl<T> Send for MvccRwLock<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `lock` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:21:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:22:5\n    |\n LL |     lock: Mutex<Box<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Mutex<Box<T>>: Send`\n \n error: some fields in `ArcGuard<RC, T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:32:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:33:1\n    |\n LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `head` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:29:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:30:5\n    |\n LL |     head: Arc<RC>,\n    |     ^^^^^^^^^^^^^\n    = help: add bounds on type parameter `RC` that satisfy `Arc<RC>: Send`\n \n error: some fields in `DeviceHandle<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:48:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:49:1\n    |\n LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `context` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:44:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:45:5\n    |\n LL |     context: T,\n    |     ^^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n error: some fields in `NoGeneric` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:55:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:56:1\n    |\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `rc_is_not_send` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:52:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:53:5\n    |\n LL |     rc_is_not_send: Rc<String>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n error: some fields in `MultiField<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:63:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:64:1\n    |\n LL | unsafe impl<T> Send for MultiField<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `field1` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:58:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:59:5\n    |\n LL |     field1: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n note: it is not safe to send field `field2` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:59:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:60:5\n    |\n LL |     field2: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n note: it is not safe to send field `field3` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:60:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:61:5\n    |\n LL |     field3: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n error: some fields in `MyOption<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:70:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:71:1\n    |\n LL | unsafe impl<T> Send for MyOption<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `0` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:66:12\n+  --> $DIR/non_send_fields_in_send_ty.rs:67:12\n    |\n LL |     MySome(T),\n    |            ^\n    = help: add `T: Send` bound in `Send` impl\n \n error: some fields in `MultiParam<A, B>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:82:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:83:1\n    |\n LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `vec` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:79:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:80:5\n    |\n LL |     vec: Vec<(A, B)>,\n    |     ^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameters `A, B` that satisfy `Vec<(A, B)>: Send`\n \n error: some fields in `HeuristicTest` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:100:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:101:1\n    |\n LL | unsafe impl Send for HeuristicTest {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `field4` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:95:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:96:5\n    |\n LL |     field4: (*const NonSend, Rc<u8>),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n error: some fields in `AttrTest3<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:119:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:120:1\n    |\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `0` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:114:11\n+  --> $DIR/non_send_fields_in_send_ty.rs:115:11\n    |\n LL |     Enum2(T),\n    |           ^\n    = help: add `T: Send` bound in `Send` impl\n \n error: some fields in `Complex<P, u32>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:127:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:128:1\n    |\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `field1` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:123:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:124:5\n    |\n LL |     field1: A,\n    |     ^^^^^^^^^\n    = help: add `P: Send` bound in `Send` impl\n \n error: some fields in `Complex<Q, MutexGuard<'static, bool>>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:130:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:131:1\n    |\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `field2` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:124:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:125:5\n    |\n LL |     field2: B,\n    |     ^^^^^^^^^"}]}