{"sha": "9ba2e65fd6892d2200b517d11e95870e4b2ece12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYTJlNjVmZDY4OTJkMjIwMGI1MTdkMTFlOTU4NzBlNGIyZWNlMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-19T01:48:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-19T01:48:34Z"}, "message": "auto merge of #5004 : luqmana/rust/rename-use-import, r=catamorphism\n\nSeems like my previous pull request got lost along the way somehow. So here it is updated.", "tree": {"sha": "b8f600723bad0a0acc8c29c13293802ed9f26d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8f600723bad0a0acc8c29c13293802ed9f26d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba2e65fd6892d2200b517d11e95870e4b2ece12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba2e65fd6892d2200b517d11e95870e4b2ece12", "html_url": "https://github.com/rust-lang/rust/commit/9ba2e65fd6892d2200b517d11e95870e4b2ece12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba2e65fd6892d2200b517d11e95870e4b2ece12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b5016af2647446a61100f373471ef749e7b704", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b5016af2647446a61100f373471ef749e7b704", "html_url": "https://github.com/rust-lang/rust/commit/d0b5016af2647446a61100f373471ef749e7b704"}, {"sha": "5b5ac331db98bdcf74124e7b55309501e080146d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5ac331db98bdcf74124e7b55309501e080146d", "html_url": "https://github.com/rust-lang/rust/commit/5b5ac331db98bdcf74124e7b55309501e080146d"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "b7f0f5189c678a419f3df96bc6e171450af9d448", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -45,7 +45,8 @@ fn inject_libcore_ref(sess: Session,\n         fold_crate: |crate, span, fld| {\n             let n1 = sess.next_node_id();\n             let vi1 = @ast::view_item {\n-                node: ast::view_item_use(sess.ident_of(~\"core\"), ~[], n1),\n+                node: ast::view_item_extern_mod(\n+                        sess.ident_of(~\"core\"), ~[], n1),\n                 attrs: ~[\n                     spanned(ast::attribute_ {\n                         style: ast::attr_inner,\n@@ -86,7 +87,7 @@ fn inject_libcore_ref(sess: Session,\n             };\n \n             let vp = @spanned(ast::view_path_glob(prelude_path, n2));\n-            let vi2 = @ast::view_item { node: ast::view_item_import(~[vp]),\n+            let vi2 = @ast::view_item { node: ast::view_item_use(~[vp]),\n                                         attrs: ~[],\n                                         vis: ast::private,\n                                         span: dummy_sp() };"}, {"sha": "7bd45d285b4a5d0fd5fcb552f713f7eed4c2e1c8", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -266,13 +266,13 @@ fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n     let mi = nospan(mi);\n     let id_std = cx.sess.ident_of(~\"std\");\n     let vi = if is_std(cx) {\n-        ast::view_item_import(\n+        ast::view_item_use(\n             ~[@nospan(ast::view_path_simple(id_std,\n                                             path_node(~[id_std]),\n                                             ast::type_value_ns,\n                                             cx.sess.next_node_id()))])\n     } else {\n-        ast::view_item_use(id_std, ~[@mi],\n+        ast::view_item_extern_mod(id_std, ~[@mi],\n                            cx.sess.next_node_id())\n     };\n     let vi = ast::view_item {"}, {"sha": "9f642d806654a1d5108b11dd5e8737c9925fe730", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -142,10 +142,11 @@ fn visit_crate(e: @mut Env, c: ast::crate) {\n \n fn visit_view_item(e: @mut Env, i: @ast::view_item) {\n     match /*bad*/copy i.node {\n-      ast::view_item_use(ident, meta_items, id) => {\n-        debug!(\"resolving use stmt. ident: %?, meta: %?\", ident, meta_items);\n+      ast::view_item_extern_mod(ident, meta_items, id) => {\n+        debug!(\"resolving extern mod stmt. ident: %?, meta: %?\",\n+               ident, meta_items);\n         let cnum = resolve_crate(e, ident, meta_items, ~\"\", i.span);\n-        cstore::add_use_stmt_cnum(e.cstore, id, cnum);\n+        cstore::add_extern_mod_stmt_cnum(e.cstore, id, cnum);\n       }\n       _ => ()\n     }"}, {"sha": "dc858aeaee9b524f9939d62b3dd0188162345c3c", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -40,22 +40,22 @@ pub type crate_metadata = @{name: ~str,\n \n pub struct CStore {\n     priv metas: oldmap::HashMap<ast::crate_num, crate_metadata>,\n-    priv use_crate_map: use_crate_map,\n+    priv extern_mod_crate_map: extern_mod_crate_map,\n     priv used_crate_files: ~[Path],\n     priv used_libraries: ~[~str],\n     priv used_link_args: ~[~str],\n     intr: @ident_interner\n }\n \n-// Map from node_id's of local use statements to crate numbers\n-type use_crate_map = oldmap::HashMap<ast::node_id, ast::crate_num>;\n+// Map from node_id's of local extern mod statements to crate numbers\n+type extern_mod_crate_map = oldmap::HashMap<ast::node_id, ast::crate_num>;\n \n pub fn mk_cstore(intr: @ident_interner) -> CStore {\n     let meta_cache = oldmap::HashMap();\n     let crate_map = oldmap::HashMap();\n     return CStore {\n         metas: meta_cache,\n-        use_crate_map: crate_map,\n+        extern_mod_crate_map: crate_map,\n         used_crate_files: ~[],\n         used_libraries: ~[],\n         used_link_args: ~[],\n@@ -127,18 +127,18 @@ pub fn get_used_link_args(cstore: @mut CStore) -> ~[~str] {\n     return /*bad*/copy cstore.used_link_args;\n }\n \n-pub fn add_use_stmt_cnum(cstore: @mut CStore,\n-                         use_id: ast::node_id,\n-                         cnum: ast::crate_num) {\n-    let use_crate_map = cstore.use_crate_map;\n-    use_crate_map.insert(use_id, cnum);\n+pub fn add_extern_mod_stmt_cnum(cstore: @mut CStore,\n+                                emod_id: ast::node_id,\n+                                cnum: ast::crate_num) {\n+    let extern_mod_crate_map = cstore.extern_mod_crate_map;\n+    extern_mod_crate_map.insert(emod_id, cnum);\n }\n \n-pub fn find_use_stmt_cnum(cstore: @mut CStore,\n-                          use_id: ast::node_id)\n+pub fn find_extern_mod_stmt_cnum(cstore: @mut CStore,\n+                                 emod_id: ast::node_id)\n                        -> Option<ast::crate_num> {\n-    let use_crate_map = cstore.use_crate_map;\n-    use_crate_map.find(&use_id)\n+    let extern_mod_crate_map = cstore.extern_mod_crate_map;\n+    extern_mod_crate_map.find(&emod_id)\n }\n \n // returns hashes of crates directly used by this crate. Hashes are\n@@ -147,8 +147,8 @@ pub fn get_dep_hashes(cstore: @mut CStore) -> ~[~str] {\n     type crate_hash = {name: ~str, hash: ~str};\n     let mut result = ~[];\n \n-    let use_crate_map = cstore.use_crate_map;\n-    for use_crate_map.each_value |&cnum| {\n+    let extern_mod_crate_map = cstore.extern_mod_crate_map;\n+    for extern_mod_crate_map.each_value |&cnum| {\n         let cdata = cstore::get_crate_data(cstore, cnum);\n         let hash = decoder::get_crate_hash(cdata.data);\n         debug!(\"Add hash[%s]: %s\", cdata.name, hash);"}, {"sha": "f159d4228ecf496892816163a0b5f8fe103bbfb2", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -15,7 +15,7 @@ use driver::session::Session;\n use metadata::csearch::{each_path, get_method_names_if_trait};\n use metadata::csearch::{get_static_methods_if_impl, get_struct_fields};\n use metadata::csearch::{get_type_name_if_impl};\n-use metadata::cstore::find_use_stmt_cnum;\n+use metadata::cstore::find_extern_mod_stmt_cnum;\n use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n@@ -55,7 +55,7 @@ use syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n use syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, ty_param, ty_path};\n use syntax::ast::{ty_str, ty_u, ty_u16, ty_u32, ty_u64, ty_u8, ty_uint};\n use syntax::ast::{type_value_ns, ty_param_bound, unnamed_field};\n-use syntax::ast::{variant, view_item, view_item_import};\n+use syntax::ast::{variant, view_item, view_item_extern_mod};\n use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n use syntax::ast::{view_path_simple, visibility, anonymous, named, not};\n use syntax::ast::{unsafe_fn};\n@@ -1388,7 +1388,7 @@ pub impl Resolver {\n                                          &&_visitor: vt<ReducedGraphParent>) {\n         let privacy = visibility_to_privacy(view_item.vis);\n         match /*bad*/copy view_item.node {\n-            view_item_import(view_paths) => {\n+            view_item_use(view_paths) => {\n                 for view_paths.each |view_path| {\n                     // Extract and intern the module part of the path. For\n                     // globs and lists, the path is found directly in the AST;\n@@ -1462,8 +1462,9 @@ pub impl Resolver {\n                 }\n             }\n \n-            view_item_use(name, _, node_id) => {\n-                match find_use_stmt_cnum(self.session.cstore, node_id) {\n+            view_item_extern_mod(name, _, node_id) => {\n+                match find_extern_mod_stmt_cnum(self.session.cstore,\n+                                                node_id) {\n                     Some(crate_id) => {\n                         let (child_name_bindings, new_parent) =\n                             self.add_child(name, parent, ForbidDuplicateTypes,"}, {"sha": "bf64402d2375bcbb700438dc8c290795ec5aa6a4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -1121,8 +1121,8 @@ pub struct view_item {\n #[auto_decode]\n #[deriving_eq]\n pub enum view_item_ {\n-    view_item_use(ident, ~[@meta_item], node_id),\n-    view_item_import(~[@view_path]),\n+    view_item_extern_mod(ident, ~[@meta_item], node_id),\n+    view_item_use(~[@view_path]),\n }\n \n // Meta-data associated with an item"}, {"sha": "9f7b28c36f59eba92c53c1b842c856c902974f77", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -395,8 +395,8 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n \n         visit_view_item: fn@(vi: @view_item) {\n             match vi.node {\n-              view_item_use(_, _, id) => vfn(id),\n-              view_item_import(vps) => {\n+              view_item_extern_mod(_, _, id) => vfn(id),\n+              view_item_use(vps) => {\n                   for vec::each(vps) |vp| {\n                       match vp.node {\n                           view_path_simple(_, _, _, id) => vfn(id),"}, {"sha": "0a6840ceea0b12510be1e1a264b1cf5a73406401", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -192,7 +192,7 @@ pub fn mk_glob_use(cx: ext_ctxt,\n         node: ast::view_path_glob(mk_raw_path(sp, path), cx.next_id()),\n         span: sp,\n     };\n-    @ast::view_item { node: ast::view_item_import(~[glob]),\n+    @ast::view_item { node: ast::view_item_use(~[glob]),\n                       attrs: ~[],\n                       vis: ast::private,\n                       span: sp }"}, {"sha": "6c46173879876dc7c4b7dd7b26c78329f01d3594", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -319,7 +319,7 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n \n         // XXX: Total hack: import `core::kinds::Owned` to work around a\n         // parser bug whereby `fn f<T: ::kinds::Owned>` doesn't parse.\n-        let vi = ast::view_item_import(~[\n+        let vi = ast::view_item_use(~[\n             @codemap::spanned {\n                 node: ast::view_path_simple(\n                     self.ident_of(~\"Owned\"),"}, {"sha": "fa51d4c29d24dbe8d652ae79aa6da6a0a510c386", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -54,7 +54,7 @@ use ast::{ty_infer, ty_mac, ty_method};\n use ast::{ty_nil, ty_param, ty_param_bound, ty_path, ty_ptr, ty_rec, ty_rptr};\n use ast::{ty_tup, ty_u32, ty_uniq, ty_vec, type_value_ns, uniq};\n use ast::{unnamed_field, unsafe_blk, unsafe_fn, variant, view_item};\n-use ast::{view_item_, view_item_import, view_item_use};\n+use ast::{view_item_, view_item_extern_mod, view_item_use};\n use ast::{view_path, view_path_glob, view_path_list, view_path_simple};\n use ast::{visibility, vstore, vstore_box, vstore_fixed, vstore_slice};\n use ast::{vstore_uniq};\n@@ -3503,7 +3503,7 @@ pub impl Parser {\n         let metadata = self.parse_optional_meta();\n         self.expect(token::SEMI);\n         iovi_view_item(@ast::view_item {\n-            node: view_item_use(ident, metadata, self.get_id()),\n+            node: view_item_extern_mod(ident, metadata, self.get_id()),\n             attrs: attrs,\n             vis: visibility,\n             span: mk_sp(lo, self.last_span.hi)\n@@ -3884,7 +3884,7 @@ pub impl Parser {\n     }\n \n     fn parse_use() -> view_item_ {\n-        return view_item_import(self.parse_view_paths());\n+        return view_item_use(self.parse_view_paths());\n     }\n \n     fn parse_view_path() -> @view_path {\n@@ -4006,7 +4006,7 @@ pub impl Parser {\n             self.expect_keyword(~\"mod\");\n             let ident = self.parse_ident();\n             let metadata = self.parse_optional_meta();\n-            view_item_use(ident, metadata, self.get_id())\n+            view_item_extern_mod(ident, metadata, self.get_id())\n         } else {\n             fail!();\n         };\n@@ -4053,8 +4053,8 @@ pub impl Parser {\n                 iovi_view_item(view_item) => {\n                     if restricted_to_imports {\n                             match view_item.node {\n-                                view_item_import(_) => {}\n-                                view_item_use(*) =>\n+                                view_item_use(*) => {}\n+                                view_item_extern_mod(*) =>\n                                     self.fatal(~\"\\\"extern mod\\\" \\\n                                                  declarations are not \\\n                                                  allowed here\")"}, {"sha": "d5cba4312b7a23342589d6220b84d91a1d88bf24", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba2e65fd6892d2200b517d11e95870e4b2ece12/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9ba2e65fd6892d2200b517d11e95870e4b2ece12", "patch": "@@ -1859,7 +1859,7 @@ pub fn print_view_item(s: @ps, item: @ast::view_item) {\n     print_outer_attributes(s, item.attrs);\n     print_visibility(s, item.vis);\n     match item.node {\n-        ast::view_item_use(id, mta, _) => {\n+        ast::view_item_extern_mod(id, mta, _) => {\n             head(s, ~\"extern mod\");\n             print_ident(s, id);\n             if !mta.is_empty() {\n@@ -1869,7 +1869,7 @@ pub fn print_view_item(s: @ps, item: @ast::view_item) {\n             }\n         }\n \n-        ast::view_item_import(vps) => {\n+        ast::view_item_use(vps) => {\n             head(s, ~\"use\");\n             print_view_paths(s, vps);\n         }"}]}