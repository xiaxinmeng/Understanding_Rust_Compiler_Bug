{"sha": "fcf9fb61574a415653fa0c787058972312ce1235", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjlmYjYxNTc0YTQxNTY1M2ZhMGM3ODcwNTg5NzIzMTJjZTEyMzU=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-17T23:23:50Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-17T23:23:50Z"}, "message": "rollup merge of #18890: luqmana/tf\n\nThis is especially useful for declaring a static with external linkage in an executable. There isn't any way to do that currently since we mark everything in an executable as internal by default.\n\nAlso, a quick fix to have the no-compiler-rt target option respected when building staticlibs as well.", "tree": {"sha": "b1118890b3dbea75a886d0dc14abd4ba5e7b2ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1118890b3dbea75a886d0dc14abd4ba5e7b2ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf9fb61574a415653fa0c787058972312ce1235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf9fb61574a415653fa0c787058972312ce1235", "html_url": "https://github.com/rust-lang/rust/commit/fcf9fb61574a415653fa0c787058972312ce1235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf9fb61574a415653fa0c787058972312ce1235/comments", "author": null, "committer": null, "parents": [{"sha": "f09279395b6ca40f1398277971586197f949738a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09279395b6ca40f1398277971586197f949738a", "html_url": "https://github.com/rust-lang/rust/commit/f09279395b6ca40f1398277971586197f949738a"}, {"sha": "33893aebcf19f6bf7e0102406117afa34a955425", "url": "https://api.github.com/repos/rust-lang/rust/commits/33893aebcf19f6bf7e0102406117afa34a955425", "html_url": "https://github.com/rust-lang/rust/commit/33893aebcf19f6bf7e0102406117afa34a955425"}], "stats": {"total": 138, "additions": 109, "deletions": 29}, "files": [{"sha": "766715ff25167d558e61916262fd9bf549ec54a4", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -728,7 +728,9 @@ fn link_staticlib(sess: &Session, obj_filename: &Path, out_filename: &Path) {\n     if sess.target.target.options.morestack {\n         ab.add_native_library(\"morestack\").unwrap();\n     }\n-    ab.add_native_library(\"compiler-rt\").unwrap();\n+    if !sess.target.target.options.no_compiler_rt {\n+        ab.add_native_library(\"compiler-rt\").unwrap();\n+    }\n \n     let crates = sess.cstore.get_used_crates(cstore::RequireStatic);\n     let mut all_native_libs = vec![];"}, {"sha": "df014eb1206aa59e64ce2d7519a4576483ec3ae0", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -623,6 +623,7 @@ impl LintPass for UnusedAttributes {\n             \"link\",\n             \"link_name\",\n             \"link_section\",\n+            \"linkage\",\n             \"no_builtins\",\n             \"no_mangle\",\n             \"no_split_stack\","}, {"sha": "77ee433e62bffe8ce3072b829b5995c56778eebb", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -36,7 +36,7 @@ use driver::config::{NoDebugInfo, FullDebugInfo};\n use driver::driver::{CrateAnalysis, CrateTranslation, ModuleTranslation};\n use driver::session::Session;\n use lint;\n-use llvm::{BasicBlockRef, ValueRef, Vector, get_param};\n+use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n use metadata::{csearch, encoder, loader};\n use middle::astencode;\n@@ -2137,6 +2137,32 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TransItemVisitor<'a, 'tcx> {\n     }\n }\n \n+pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n+    // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n+    // applicable to variable declarations and may not really make sense for\n+    // Rust code in the first place but whitelist them anyway and trust that\n+    // the user knows what s/he's doing. Who knows, unanticipated use cases\n+    // may pop up in the future.\n+    //\n+    // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n+    // and don't have to be, LLVM treats them as no-ops.\n+    match name {\n+        \"appending\" => Some(llvm::AppendingLinkage),\n+        \"available_externally\" => Some(llvm::AvailableExternallyLinkage),\n+        \"common\" => Some(llvm::CommonLinkage),\n+        \"extern_weak\" => Some(llvm::ExternalWeakLinkage),\n+        \"external\" => Some(llvm::ExternalLinkage),\n+        \"internal\" => Some(llvm::InternalLinkage),\n+        \"linkonce\" => Some(llvm::LinkOnceAnyLinkage),\n+        \"linkonce_odr\" => Some(llvm::LinkOnceODRLinkage),\n+        \"private\" => Some(llvm::PrivateLinkage),\n+        \"weak\" => Some(llvm::WeakAnyLinkage),\n+        \"weak_odr\" => Some(llvm::WeakODRLinkage),\n+        _ => None,\n+    }\n+}\n+\n+\n /// Enum describing the origin of an LLVM `Value`, for linkage purposes.\n pub enum ValueOrigin {\n     /// The LLVM `Value` is in this context because the corresponding item was\n@@ -2174,6 +2200,23 @@ pub fn update_linkage(ccx: &CrateContext,\n         OriginalTranslation => {},\n     }\n \n+    match id {\n+        Some(id) => {\n+            let item = ccx.tcx().map.get(id);\n+            if let ast_map::NodeItem(i) = item {\n+                if let Some(name) =  attr::first_attr_value_str_by_name(i.attrs[], \"linkage\") {\n+                    if let Some(linkage) = llvm_linkage_by_name(name.get()) {\n+                        llvm::SetLinkage(llval, linkage);\n+                    } else {\n+                        ccx.sess().span_fatal(i.span, \"invalid linkage specified\");\n+                    }\n+                    return;\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+\n     match id {\n         Some(id) if ccx.reachable().contains(&id) => {\n             llvm::SetLinkage(llval, llvm::ExternalLinkage);"}, {"sha": "940319d050beafa0901422f1830f3c639f3f4636", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -10,10 +10,10 @@\n \n \n use back::{link};\n-use llvm::{ValueRef, CallConv, Linkage, get_param};\n+use llvm::{ValueRef, CallConv, get_param};\n use llvm;\n use middle::weak_lang_items;\n-use middle::trans::base::push_ctxt;\n+use middle::trans::base::{llvm_linkage_by_name, push_ctxt};\n use middle::trans::base;\n use middle::trans::build::*;\n use middle::trans::cabi;\n@@ -101,31 +101,6 @@ pub fn llvm_calling_convention(ccx: &CrateContext,\n     }\n }\n \n-pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n-    // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n-    // applicable to variable declarations and may not really make sense for\n-    // Rust code in the first place but whitelist them anyway and trust that\n-    // the user knows what s/he's doing. Who knows, unanticipated use cases\n-    // may pop up in the future.\n-    //\n-    // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n-    // and don't have to be, LLVM treats them as no-ops.\n-    match name {\n-        \"appending\" => Some(llvm::AppendingLinkage),\n-        \"available_externally\" => Some(llvm::AvailableExternallyLinkage),\n-        \"common\" => Some(llvm::CommonLinkage),\n-        \"extern_weak\" => Some(llvm::ExternalWeakLinkage),\n-        \"external\" => Some(llvm::ExternalLinkage),\n-        \"internal\" => Some(llvm::InternalLinkage),\n-        \"linkonce\" => Some(llvm::LinkOnceAnyLinkage),\n-        \"linkonce_odr\" => Some(llvm::LinkOnceODRLinkage),\n-        \"private\" => Some(llvm::PrivateLinkage),\n-        \"weak\" => Some(llvm::WeakAnyLinkage),\n-        \"weak_odr\" => Some(llvm::WeakODRLinkage),\n-        _ => None,\n-    }\n-}\n-\n pub fn register_static(ccx: &CrateContext,\n                        foreign_item: &ast::ForeignItem) -> ValueRef {\n     let ty = ty::node_id_to_type(ccx.tcx(), foreign_item.id);"}, {"sha": "0c31e9ae01d757ef9d3eaade708c9574d7817dcd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -182,6 +182,10 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n                                   \"`#[thread_local]` is an experimental feature, and does not \\\n                                   currently handle destructors. There is no corresponding \\\n                                   `#[task_local]` mapping to the task model\");\n+            } else if attr.name().equiv(&(\"linkage\")) {\n+                self.gate_feature(\"linkage\", i.span,\n+                                  \"the `linkage` attribute is experimental \\\n+                                   and not portable across platforms\")\n             }\n         }\n         match i.node {"}, {"sha": "8f68f3e553cd7ce9638e36d0bd95cf725be4b906", "filename": "src/test/compile-fail/linkage4.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Ftest%2Fcompile-fail%2Flinkage4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Ftest%2Fcompile-fail%2Flinkage4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage4.rs?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[linkage = \"external\"]\n+static foo: int = 0;\n+//~^ ERROR: the `linkage` attribute is experimental and not portable\n+\n+fn main() {}"}, {"sha": "6bcde96335cff07c99a7d09ae824112095e389c7", "filename": "src/test/run-make/linkage-attr-on-static/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2FMakefile?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(CC) foo.c -c -o $(TMPDIR)/foo.o\n+\t$(AR) rcs $(TMPDIR)/libfoo.a $(TMPDIR)/foo.o\n+\t$(RUSTC) bar.rs -lfoo -L $(TMPDIR)\n+\t$(call RUN,bar) || exit 1\n+"}, {"sha": "6125421bdeb6c91bbba5fe91863dde5b95f451ff", "filename": "src/test/run-make/linkage-attr-on-static/bar.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Fbar.rs?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(linkage)]\n+\n+#[no_mangle]\n+#[linkage = \"external\"]\n+static BAZ: i32 = 21;\n+\n+extern {\n+    fn what() -> i32;\n+}\n+\n+fn main() {\n+    unsafe {\n+        assert_eq!(what(), BAZ);\n+    }\n+}"}, {"sha": "78a6934f57f76766182836819f92e94c3d513a4c", "filename": "src/test/run-make/linkage-attr-on-static/foo.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fcf9fb61574a415653fa0c787058972312ce1235/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/fcf9fb61574a415653fa0c787058972312ce1235/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinkage-attr-on-static%2Ffoo.c?ref=fcf9fb61574a415653fa0c787058972312ce1235", "patch": "@@ -0,0 +1,7 @@\n+#include <stdint.h>\n+\n+extern int32_t BAZ;\n+\n+int32_t what() {\n+    return BAZ;\n+}"}]}