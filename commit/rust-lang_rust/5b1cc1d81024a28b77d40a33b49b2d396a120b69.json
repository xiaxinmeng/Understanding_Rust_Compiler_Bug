{"sha": "5b1cc1d81024a28b77d40a33b49b2d396a120b69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMWNjMWQ4MTAyNGEyOGI3N2Q0MGEzM2I0OWIyZDM5NmExMjBiNjk=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-11-14T06:59:56Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-11-14T06:59:56Z"}, "message": "don't send block back to be marked unreachable twice", "tree": {"sha": "123f5c79b1f9259d9c778c45aa81bd2c7f4abe7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/123f5c79b1f9259d9c778c45aa81bd2c7f4abe7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b1cc1d81024a28b77d40a33b49b2d396a120b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1cc1d81024a28b77d40a33b49b2d396a120b69", "html_url": "https://github.com/rust-lang/rust/commit/5b1cc1d81024a28b77d40a33b49b2d396a120b69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b1cc1d81024a28b77d40a33b49b2d396a120b69/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c503fe113491500bac170c791e71cf02c45ab6e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c503fe113491500bac170c791e71cf02c45ab6e3", "html_url": "https://github.com/rust-lang/rust/commit/c503fe113491500bac170c791e71cf02c45ab6e3"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "1cf35af3a9e1ba796da7415b18b183a8e7b93d5d", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b1cc1d81024a28b77d40a33b49b2d396a120b69/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1cc1d81024a28b77d40a33b49b2d396a120b69/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=5b1cc1d81024a28b77d40a33b49b2d396a120b69", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let num_enum_variants = self.hir.num_variants(adt_def);\n                 let used_variants = variants.count();\n                 let mut otherwise_block = None;\n-                let mut target_blocks = Vec::with_capacity(num_enum_variants + 1);\n+                let mut target_blocks = Vec::with_capacity(num_enum_variants);\n                 let mut targets = Vec::with_capacity(used_variants + 1);\n                 let mut values = Vec::with_capacity(used_variants);\n                 let tcx = self.hir.tcx();\n@@ -205,9 +205,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 if let Some(otherwise_block) = otherwise_block {\n                     targets.push(otherwise_block);\n                 } else {\n-                    let unreachable_block = self.unreachable_block();\n-                    targets.push(unreachable_block);\n-                    target_blocks.push(unreachable_block);\n+                    targets.push(self.unreachable_block());\n                 }\n                 debug!(\"num_enum_variants: {}, tested variants: {:?}, variants: {:?}\",\n                        num_enum_variants, values, variants);"}]}