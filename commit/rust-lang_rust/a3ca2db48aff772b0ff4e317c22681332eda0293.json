{"sha": "a3ca2db48aff772b0ff4e317c22681332eda0293", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzY2EyZGI0OGFmZjc3MmIwZmY0ZTMxN2MyMjY4MTMzMmVkYTAyOTM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-12-29T04:24:05Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-12-29T04:24:05Z"}, "message": "Add support for references.", "tree": {"sha": "51114c4d08a8416f130d8c92ad0ac1078a581937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51114c4d08a8416f130d8c92ad0ac1078a581937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3ca2db48aff772b0ff4e317c22681332eda0293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ca2db48aff772b0ff4e317c22681332eda0293", "html_url": "https://github.com/rust-lang/rust/commit/a3ca2db48aff772b0ff4e317c22681332eda0293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3ca2db48aff772b0ff4e317c22681332eda0293/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "947c1badd1f56571c34f9fcb114845f3aadd1d99", "url": "https://api.github.com/repos/rust-lang/rust/commits/947c1badd1f56571c34f9fcb114845f3aadd1d99", "html_url": "https://github.com/rust-lang/rust/commit/947c1badd1f56571c34f9fcb114845f3aadd1d99"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "e290a8d0c73106b7707b517d02e2d7b0210ff905", "filename": "src/interpreter.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a3ca2db48aff772b0ff4e317c22681332eda0293/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ca2db48aff772b0ff4e317c22681332eda0293/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=a3ca2db48aff772b0ff4e317c22681332eda0293", "patch": "@@ -14,6 +14,7 @@ enum Value {\n     Uninit,\n     Bool(bool),\n     Int(i64), // FIXME(tsion): Should be bit-width aware.\n+    Pointer(Pointer),\n     Adt { variant: usize, data_ptr: Pointer },\n     Func(def_id::DefId),\n }\n@@ -247,18 +248,23 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n \n                     mir::ProjectionElem::Downcast(_, variant) => {\n                         let adt_val = self.read_pointer(base_ptr);\n+                        if let Value::Adt { variant: actual_variant, data_ptr } = adt_val {\n+                            debug_assert_eq!(variant, actual_variant);\n+                            data_ptr\n+                        } else {\n+                            panic!(\"Downcast attempted on non-ADT: {:?}\", adt_val)\n+                        }\n+                    }\n \n-                        match adt_val {\n-                            Value::Adt { variant: actual_variant, data_ptr } => {\n-                                debug_assert_eq!(variant, actual_variant);\n-                                data_ptr\n-                            }\n-\n-                            _ => panic!(\"Downcast attempted on non-Adt: {:?}\", adt_val),\n+                    mir::ProjectionElem::Deref => {\n+                        let ptr_val = self.read_pointer(base_ptr);\n+                        if let Value::Pointer(ptr) = ptr_val {\n+                            ptr\n+                        } else {\n+                            panic!(\"Deref attempted on non-pointer: {:?}\", ptr_val)\n                         }\n                     }\n \n-                    mir::ProjectionElem::Deref => unimplemented!(),\n                     mir::ProjectionElem::Index(ref _operand) => unimplemented!(),\n                     mir::ProjectionElem::ConstantIndex { .. } => unimplemented!(),\n                 }\n@@ -313,6 +319,10 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 }\n             }\n \n+            mir::Rvalue::Ref(_region, _kind, ref lvalue) => {\n+                Value::Pointer(self.eval_lvalue(lvalue))\n+            }\n+\n             mir::Rvalue::Aggregate(mir::AggregateKind::Adt(ref adt_def, variant, _substs),\n                                    ref operands) => {\n                 let max_fields = adt_def.variants"}, {"sha": "923abb1b80ea4244456008d88ca7f183c26c2cb0", "filename": "test/basic.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a3ca2db48aff772b0ff4e317c22681332eda0293/test%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ca2db48aff772b0ff4e317c22681332eda0293/test%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbasic.rs?ref=a3ca2db48aff772b0ff4e317c22681332eda0293", "patch": "@@ -94,6 +94,34 @@ fn match_int() -> i32 {\n     }\n }\n \n+#[miri_run(expected = \"Int(1)\")]\n+fn one_line_ref() -> i32 {\n+    *&1\n+}\n+\n+#[miri_run(expected = \"Int(1)\")]\n+fn basic_ref() -> i32 {\n+    let x = &1;\n+    *x\n+}\n+\n+#[miri_run(expected = \"Int(3)\")]\n+fn basic_ref_mut() -> i32 {\n+    let x = &mut 1;\n+    *x += 2;\n+    *x\n+}\n+\n+#[miri_run(expected = \"Int(3)\")]\n+fn basic_ref_mut_var() -> i32 {\n+    let mut a = 1;\n+    {\n+        let x = &mut a;\n+        *x += 2;\n+    }\n+    a\n+}\n+\n // #[miri_run(expected = \"Int(4)\")]\n // fn match_int_range() -> i32 {\n //     let n = 42;"}]}