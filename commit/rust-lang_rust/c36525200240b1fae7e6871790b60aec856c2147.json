{"sha": "c36525200240b1fae7e6871790b60aec856c2147", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjUyNTIwMDI0MGIxZmFlN2U2ODcxNzkwYjYwYWVjODU2YzIxNDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-10T21:19:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-16T06:22:06Z"}, "message": "std: Delegate some integer formatting to core::fmt\n\nIn an attempt to phase out the std::num::strconv module's string formatting\nfunctionality, this commit reimplements some provided methods for formatting\nintegers on top of format!() instead of the custom (and slower) implementation\ninside of num::strconv.\n\nPrimarily, this deprecates int_to_str_bytes_common", "tree": {"sha": "6d96d91abda197a879a023b6b8409d80d9a47879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d96d91abda197a879a023b6b8409d80d9a47879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c36525200240b1fae7e6871790b60aec856c2147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c36525200240b1fae7e6871790b60aec856c2147", "html_url": "https://github.com/rust-lang/rust/commit/c36525200240b1fae7e6871790b60aec856c2147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c36525200240b1fae7e6871790b60aec856c2147/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcab97a32eca0bec431ff3d1065f07e10c600d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcab97a32eca0bec431ff3d1065f07e10c600d80", "html_url": "https://github.com/rust-lang/rust/commit/bcab97a32eca0bec431ff3d1065f07e10c600d80"}], "stats": {"total": 74, "additions": 29, "deletions": 45}, "files": [{"sha": "31d9b95ca933c08b5fd4f49772257e9cd977696e", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -500,7 +500,7 @@ pub use core::fmt::{Show, Bool, Char, Signed, Unsigned, Octal, Binary};\n pub use core::fmt::{LowerHex, UpperHex, String, Pointer};\n pub use core::fmt::{Float, LowerExp, UpperExp};\n pub use core::fmt::{FormatError, WriteError};\n-pub use core::fmt::{Argument, Arguments, write};\n+pub use core::fmt::{Argument, Arguments, write, radix, Radix, RadixFmt};\n \n #[doc(hidden)]\n pub use core::fmt::{argument, argumentstr, argumentuint};"}, {"sha": "396037d0dbace10cb6d897ee0e80252462441f22", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::i16::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "5640e82d077dc3a95eb465d39aebb5d15300bb61", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::i32::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "40245691e3456fc118f094e261433dc058572905", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::i64::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "7ddddd893e211989cc76ccdb76cba11f28f13402", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::i8::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "dc4d80601b7db6a0116eab77f409f584347e4946", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::int::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "e1743b301e96303a4b3a7d3931abba10ce6e898a", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -62,31 +62,31 @@ impl FromStrRadix for $T {\n /// ```\n #[inline]\n pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n+    use io::{Writer, Seek};\n     // The radix can be as low as 2, so we need at least 64 characters for a\n     // base 2 number, and then we need another for a possible '-' character.\n     let mut buf = [0u8, ..65];\n-    let mut cur = 0;\n-    strconv::int_to_str_bytes_common(n, radix, strconv::SignNeg, |i| {\n-        buf[cur] = i;\n-        cur += 1;\n-    });\n-    f(buf.slice(0, cur))\n+    let amt = {\n+        let mut wr = ::io::BufWriter::new(buf);\n+        if radix == 10 {\n+            (write!(&mut wr, \"{}\", n)).unwrap()\n+        } else {\n+            (write!(&mut wr, \"{}\", ::fmt::radix(n, radix as u8))).unwrap()\n+        }\n+        wr.tell().unwrap() as uint\n+    };\n+    f(buf.slice(0, amt))\n }\n \n impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> ~str {\n-        use slice::Vector;\n-        use str::StrAllocating;\n-\n-        let mut buf = ::vec::Vec::new();\n-        strconv::int_to_str_bytes_common(*self, radix, strconv::SignNeg, |i| {\n-            buf.push(i);\n-        });\n-        // We know we generated valid utf-8, so we don't need to go through that\n-        // check.\n-        unsafe { str::raw::from_utf8(buf.as_slice()).to_owned() }\n+        if radix == 10 {\n+            format!(\"{}\", *self)\n+        } else {\n+            format!(\"{}\", ::fmt::radix(*self, radix as u8))\n+        }\n     }\n }\n "}, {"sha": "c6cb57665a377ed738fea80bb3809a427149cdae", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -170,6 +170,7 @@ static NAN_BUF:          [u8, ..3] = ['N' as u8, 'a' as u8, 'N' as u8];\n  * # Failure\n  * - Fails if `radix` < 2 or `radix` > 36.\n  */\n+#[deprecated = \"format!() and friends should be favored instead\"]\n pub fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f: |u8|) {\n     assert!(2 <= radix && radix <= 36);\n \n@@ -258,6 +259,7 @@ pub fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f:\n  * - Fails if `radix` > 25 and `exp_format` is `ExpBin` due to conflict\n  *   between digit and exponent sign `'p'`.\n  */\n+#[allow(deprecated)]\n pub fn float_to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Float+\n                                   Div<T,T>+Neg<T>+Rem<T,T>+Mul<T,T>>(\n         num: T, radix: uint, negative_zero: bool,"}, {"sha": "65ac46af5aa0c80bdbc780119f221a34f1ef142b", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::u16::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "d549e4d0d636253aee6d7398f4f940344d6b32be", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::u32::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "3773e56f4d16df1f00d51025911947936fb8b9cf", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::u64::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "372e38d66521f1173e33e3e8e9e3ebb87db25839", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::u8::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "c419276fa24518024d4494e495f70e34ead2c155", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -15,7 +15,6 @@ use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n use slice::ImmutableVector;\n-use str;\n \n pub use core::uint::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "7977c647606775f695f4a84480a8dce5dfe9df46", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36525200240b1fae7e6871790b60aec856c2147/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=c36525200240b1fae7e6871790b60aec856c2147", "patch": "@@ -63,31 +63,23 @@ impl FromStrRadix for $T {\n /// ```\n #[inline]\n pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n+    use io::{Writer, Seek};\n     // The radix can be as low as 2, so we need at least 64 characters for a\n-    // base 2 number.\n-    let mut buf = [0u8, ..64];\n-    let mut cur = 0;\n-    strconv::int_to_str_bytes_common(n, radix, strconv::SignNone, |i| {\n-        buf[cur] = i;\n-        cur += 1;\n-    });\n-    f(buf.slice(0, cur))\n+    // base 2 number, and then we need another for a possible '-' character.\n+    let mut buf = [0u8, ..65];\n+    let amt = {\n+        let mut wr = ::io::BufWriter::new(buf);\n+        (write!(&mut wr, \"{}\", ::fmt::radix(n, radix as u8))).unwrap();\n+        wr.tell().unwrap() as uint\n+    };\n+    f(buf.slice(0, amt))\n }\n \n impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> ~str {\n-        use slice::Vector;\n-        use str::StrAllocating;\n-\n-        let mut buf = ::vec::Vec::new();\n-        strconv::int_to_str_bytes_common(*self, radix, strconv::SignNone, |i| {\n-            buf.push(i);\n-        });\n-        // We know we generated valid utf-8, so we don't need to go through that\n-        // check.\n-        unsafe { str::raw::from_utf8(buf.as_slice()).to_owned() }\n+        format!(\"{}\", ::fmt::radix(*self, radix as u8))\n     }\n }\n "}]}