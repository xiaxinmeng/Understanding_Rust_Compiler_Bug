{"sha": "818a05d6e3243cd3ea9dcc655db5c9882f850cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOGEwNWQ2ZTMyNDNjZDNlYTlkY2M2NTVkYjVjOTg4MmY4NTBjYjc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-01T08:12:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-01T08:12:54Z"}, "message": "Rollup merge of #53784 - tbu-:pr_doc_slice_isize_max, r=RalfJung\n\nDocument that slices cannot be larger than `isize::MAX` bytes\n\nFixes #53676.", "tree": {"sha": "40cea2c7e8bb84eef371b74d2d45e98cc46cb83e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40cea2c7e8bb84eef371b74d2d45e98cc46cb83e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/818a05d6e3243cd3ea9dcc655db5c9882f850cb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbsdcGCRBK7hj4Ov3rIwAAdHIIAEc+TzwjdcpTeFv/13zMI8Tq\n4MdvuCjvryog7b4HdGC9e8o+TWhfcJ2zRCx1rFJ72JwIFz7yeSX5V4vPFaS2BYFz\nrEQZVcWf48EKrY9qUOCH6YD9VVGCwY7OnzOPkrvwaZCByAgbMqjLpPROYPelY101\nXt4UXgQ/M75mBYdxrVyYTmOU62HNjryAB//skNbodEtAIlSXfXf4AIKuhPZJP05G\n06C/UgBOM9/1XXZg99+AoimKd5pc2MQleOqdjQHBkzoKKc4gDuQerdjDRV0lJy1C\nBPEtNdRz//JP4sqpMhqoiwzFUTmGVfX4dY4jOPWfwcKdvIMPMtk1Q+CPsB5hms0=\n=xy4a\n-----END PGP SIGNATURE-----\n", "payload": "tree 40cea2c7e8bb84eef371b74d2d45e98cc46cb83e\nparent f55129d0037c112a80276ee1de0c2245ddc6462c\nparent e370b1ccaed1f2775e2d944acc2898c98b415083\nauthor kennytm <kennytm@gmail.com> 1538381574 +0800\ncommitter GitHub <noreply@github.com> 1538381574 +0800\n\nRollup merge of #53784 - tbu-:pr_doc_slice_isize_max, r=RalfJung\n\nDocument that slices cannot be larger than `isize::MAX` bytes\n\nFixes #53676.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/818a05d6e3243cd3ea9dcc655db5c9882f850cb7", "html_url": "https://github.com/rust-lang/rust/commit/818a05d6e3243cd3ea9dcc655db5c9882f850cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/818a05d6e3243cd3ea9dcc655db5c9882f850cb7/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55129d0037c112a80276ee1de0c2245ddc6462c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55129d0037c112a80276ee1de0c2245ddc6462c", "html_url": "https://github.com/rust-lang/rust/commit/f55129d0037c112a80276ee1de0c2245ddc6462c"}, {"sha": "e370b1ccaed1f2775e2d944acc2898c98b415083", "url": "https://api.github.com/repos/rust-lang/rust/commits/e370b1ccaed1f2775e2d944acc2898c98b415083", "html_url": "https://github.com/rust-lang/rust/commit/e370b1ccaed1f2775e2d944acc2898c98b415083"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "d400bd49050a965835578b59a52da87ffd5b37a5", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/818a05d6e3243cd3ea9dcc655db5c9882f850cb7/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/818a05d6e3243cd3ea9dcc655db5c9882f850cb7/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=818a05d6e3243cd3ea9dcc655db5c9882f850cb7", "patch": "@@ -34,6 +34,7 @@ use cmp::Ordering::{self, Less, Equal, Greater};\n use cmp;\n use fmt;\n use intrinsics::assume;\n+use isize;\n use iter::*;\n use ops::{FnMut, Try, self};\n use option::Option;\n@@ -4080,6 +4081,9 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n /// them from other data. You can obtain a pointer that is usable as `data`\n /// for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// The total size of the slice must be no larger than `isize::MAX` **bytes**\n+/// in memory. See the safety documentation of [`pointer::offset`].\n+///\n /// # Caveat\n ///\n /// The lifetime for the returned slice is inferred from its usage. To\n@@ -4101,10 +4105,13 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n /// ```\n ///\n /// [`NonNull::dangling()`]: ../../std/ptr/struct.NonNull.html#method.dangling\n+/// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n     debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n+    debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n+                  \"attempt to create slice covering half the address space\");\n     Repr { raw: FatPtr { data, len } }.rust\n }\n \n@@ -4114,15 +4121,19 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n /// This function is unsafe for the same reasons as [`from_raw_parts`], as well\n /// as not being able to provide a non-aliasing guarantee of the returned\n /// mutable slice. `data` must be non-null and aligned even for zero-length\n-/// slices as with [`from_raw_parts`]. See the documentation of\n-/// [`from_raw_parts`] for more details.\n+/// slices as with [`from_raw_parts`]. The total size of the slice must be no\n+/// larger than `isize::MAX` **bytes** in memory.\n+///\n+/// See the documentation of [`from_raw_parts`] for more details.\n ///\n /// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n     debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n-    Repr { raw: FatPtr { data, len} }.rust_mut\n+    debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n+                  \"attempt to create slice covering half the address space\");\n+    Repr { raw: FatPtr { data, len } }.rust_mut\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying)."}]}