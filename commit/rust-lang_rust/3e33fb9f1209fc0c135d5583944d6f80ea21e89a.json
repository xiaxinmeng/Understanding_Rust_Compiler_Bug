{"sha": "3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "node_id": "C_kwDOAAsO6NoAKDNlMzNmYjlmMTIwOWZjMGMxMzVkNTU4Mzk0NGQ2ZjgwZWEyMWU4OWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T07:35:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T07:35:34Z"}, "message": "Rollup merge of #109137 - petrochenkov:qcstore2, r=cjgillot\n\nresolve: Querify most cstore access methods (subset 2)\n\nThese changes are less likely to cause perf regressions than the rest of https://github.com/rust-lang/rust/pull/108346.", "tree": {"sha": "0df1f931d2d21afaf8ce4cfc8a5351ecade00266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df1f931d2d21afaf8ce4cfc8a5351ecade00266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHAFGCRBK7hj4Ov3rIwAAbXIIAH5znzTX56do6gCS3eEBDwQ2\nZZ5ZnDov8PgoZACEJXtjKS/HNSPtnimozUpvgIZjDqLblNLHXVrcEPzocs1vc+Oy\nR0FvX6Y06PC/dSYx9hOIXbBzJY4RlAEUbXSPjqNWctPZh8KoG6q27JCYVu0ne9Hl\nu7sBhLA0KPx/KJFW7+eaDji+V1h/0lK8H+BkJDx9OzBnNrgdnrwd7fEa5Chgrito\nOOUsoCEMeF2sOGlTMQLs6bPaDtP7NRnRig9C8IThe1o1VzdysvDYXdyBajm3VXDc\nnlbrMW+gkipvT2J4Vb7P/cG43Tb9ccaDJpQjjZDBeFo488FQZv1K6Y+BRbqNgwo=\n=Y3Jl\n-----END PGP SIGNATURE-----\n", "payload": "tree 0df1f931d2d21afaf8ce4cfc8a5351ecade00266\nparent 8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17\nparent 18b59f5d6d6fab80b5526bf20859b5a906332e9a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679556934 +0100\ncommitter GitHub <noreply@github.com> 1679556934 +0100\n\nRollup merge of #109137 - petrochenkov:qcstore2, r=cjgillot\n\nresolve: Querify most cstore access methods (subset 2)\n\nThese changes are less likely to cause perf regressions than the rest of https://github.com/rust-lang/rust/pull/108346.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "html_url": "https://github.com/rust-lang/rust/commit/3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "html_url": "https://github.com/rust-lang/rust/commit/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17"}, {"sha": "18b59f5d6d6fab80b5526bf20859b5a906332e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b59f5d6d6fab80b5526bf20859b5a906332e9a", "html_url": "https://github.com/rust-lang/rust/commit/18b59f5d6d6fab80b5526bf20859b5a906332e9a"}], "stats": {"total": 65, "additions": 18, "deletions": 47}, "files": [{"sha": "54982e7fbab1967317e038f2ceea26fdc919fcca", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "patch": "@@ -925,10 +925,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         tcx.mk_adt_def(did, adt_kind, variants, repr)\n     }\n \n-    fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {\n-        self.root.tables.generics_of.get(self, item_id).unwrap().decode((self, sess))\n-    }\n-\n     fn get_visibility(self, id: DefIndex) -> Visibility<DefId> {\n         self.root\n             .tables"}, {"sha": "7d42883fc9dd7b815a19d7443f7cfcd8909fdd66", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "patch": "@@ -545,10 +545,6 @@ impl CStore {\n         self.get_crate_data(def.krate).def_kind(def.index)\n     }\n \n-    pub fn item_generics_num_lifetimes(&self, def_id: DefId, sess: &Session) -> usize {\n-        self.get_crate_data(def_id.krate).get_generics(def_id.index, sess).own_counts().lifetimes\n-    }\n-\n     pub fn module_expansion_untracked(&self, def_id: DefId, sess: &Session) -> ExpnId {\n         self.get_crate_data(def_id.krate).module_expansion(def_id.index, sess)\n     }\n@@ -560,14 +556,6 @@ impl CStore {\n         self.get_crate_data(cnum).num_def_ids()\n     }\n \n-    pub fn item_attrs_untracked<'a>(\n-        &'a self,\n-        def_id: DefId,\n-        sess: &'a Session,\n-    ) -> impl Iterator<Item = ast::Attribute> + 'a {\n-        self.get_crate_data(def_id.krate).get_item_attrs(def_id.index, sess)\n-    }\n-\n     pub fn get_proc_macro_quoted_span_untracked(\n         &self,\n         cnum: CrateNum,"}, {"sha": "fbac219c322fcfea7c3a1cf1fb3222b1713f9e78", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "patch": "@@ -27,7 +27,6 @@ use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::metadata::ModChild;\n use rustc_middle::{bug, ty};\n-use rustc_session::cstore::CrateStore;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -116,33 +115,24 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         if !def_id.is_local() {\n             let def_kind = self.cstore().def_kind(def_id);\n-            match def_kind {\n-                DefKind::Mod | DefKind::Enum | DefKind::Trait => {\n-                    let def_key = self.cstore().def_key(def_id);\n-                    let parent = def_key.parent.map(|index| {\n-                        self.get_nearest_non_block_module(DefId { index, krate: def_id.krate })\n-                    });\n-                    let name = if let Some(cnum) = def_id.as_crate_root() {\n-                        self.cstore().crate_name(cnum)\n-                    } else {\n-                        def_key.disambiguated_data.data.get_opt_name().expect(\"module without name\")\n-                    };\n-\n-                    let expn_id = self.cstore().module_expansion_untracked(def_id, &self.tcx.sess);\n-                    Some(self.new_module(\n-                        parent,\n-                        ModuleKind::Def(def_kind, def_id, name),\n-                        expn_id,\n-                        self.def_span(def_id),\n-                        // FIXME: Account for `#[no_implicit_prelude]` attributes.\n-                        parent.map_or(false, |module| module.no_implicit_prelude),\n-                    ))\n-                }\n-                _ => None,\n+            if let DefKind::Mod | DefKind::Enum | DefKind::Trait = def_kind {\n+                let parent = self\n+                    .tcx\n+                    .opt_parent(def_id)\n+                    .map(|parent_id| self.get_nearest_non_block_module(parent_id));\n+                let expn_id = self.cstore().module_expansion_untracked(def_id, &self.tcx.sess);\n+                return Some(self.new_module(\n+                    parent,\n+                    ModuleKind::Def(def_kind, def_id, self.tcx.item_name(def_id)),\n+                    expn_id,\n+                    self.def_span(def_id),\n+                    // FIXME: Account for `#[no_implicit_prelude]` attributes.\n+                    parent.map_or(false, |module| module.no_implicit_prelude),\n+                ));\n             }\n-        } else {\n-            None\n         }\n+\n+        None\n     }\n \n     pub(crate) fn expn_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {"}, {"sha": "939f92d39f02532cdbb98b1a43940443d97c7785", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e33fb9f1209fc0c135d5583944d6f80ea21e89a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=3e33fb9f1209fc0c135d5583944d6f80ea21e89a", "patch": "@@ -1168,7 +1168,7 @@ impl<'tcx> Resolver<'_, 'tcx> {\n         if let Some(def_id) = def_id.as_local() {\n             self.item_generics_num_lifetimes[&def_id]\n         } else {\n-            self.cstore().item_generics_num_lifetimes(def_id, self.tcx.sess)\n+            self.tcx.generics_of(def_id).own_counts().lifetimes\n         }\n     }\n \n@@ -1906,10 +1906,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     return v.clone();\n                 }\n \n-                let attr = self\n-                    .cstore()\n-                    .item_attrs_untracked(def_id, self.tcx.sess)\n-                    .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;\n+                let attr = self.tcx.get_attr(def_id, sym::rustc_legacy_const_generics)?;\n                 let mut ret = Vec::new();\n                 for meta in attr.meta_item_list()? {\n                     match meta.lit()?.kind {"}]}