{"sha": "eb62779f2d6dc5cfe9208416e13392744b4e76ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNjI3NzlmMmQ2ZGM1Y2ZlOTIwODQxNmUxMzM5Mjc0NGI0ZTc2YWM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-09-17T15:41:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-17T15:41:19Z"}, "message": "Rollup merge of #88954 - nbdd0121:panic3, r=oli-obk\n\nAllow `panic!(\"{}\", computed_str)` in const fn.\n\nSpecial-case `panic!(\"{}\", arg)` and translate it to `panic_display(&arg)`. `panic_display` will behave like `panic_any` in cosnt eval and behave like `panic!(format_args!(\"{}\", arg))` in runtime.\n\nThis should bring Rust 2015 and 2021 to feature parity in terms of `const_panic`; and hopefully would unblock the stabilisation of #51999.\n\n`@rustbot` modify labels: +T-compiler +T-libs +A-const-eval +A-const-fn\n\nr? `@oli-obk`", "tree": {"sha": "5886a363f22f0a69a8f58f55933c56eb6ed637e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5886a363f22f0a69a8f58f55933c56eb6ed637e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb62779f2d6dc5cfe9208416e13392744b4e76ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRLcfCRBK7hj4Ov3rIwAAE/YIABrwV4NC1s8FBttftin5Lste\n/tZ7XJXIrnqqeto5HNaCV3hNK8/8NU8r2o8Le21f5sFf69FDkri5Jf2bukmgZkL8\ncFIXMNBbGlKmlz5OVEOkdUt8K78eABkW2GBchwkBdNQ4fEtdgFGO7+geTD9VnAbx\nVJNt/W2uvu5eF98XWUDGGmcpKAPEzohqCZxjk0T4gN0EAQ4bd/gFVwVPHcaCboH4\n48Ac5apVGImvYAsWO6FQp7gGxW3jGpnTj/0IHzjOINkg9FbkshjBw3FLJgSg4FE+\n+rkASp9uIMpROu2/TNnORzTuHIV+1/nvxzf8+QXp2gumHuWoCbT/59rx19wDOpY=\n=M9+z\n-----END PGP SIGNATURE-----\n", "payload": "tree 5886a363f22f0a69a8f58f55933c56eb6ed637e3\nparent 723d27934bcf7b8ded74c8a90298fdaece99ebd2\nparent 11c0e58c7489df3f71c3aebe04ad6d1b6a9f6262\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1631893279 +0200\ncommitter GitHub <noreply@github.com> 1631893279 +0200\n\nRollup merge of #88954 - nbdd0121:panic3, r=oli-obk\n\nAllow `panic!(\"{}\", computed_str)` in const fn.\n\nSpecial-case `panic!(\"{}\", arg)` and translate it to `panic_display(&arg)`. `panic_display` will behave like `panic_any` in cosnt eval and behave like `panic!(format_args!(\"{}\", arg))` in runtime.\n\nThis should bring Rust 2015 and 2021 to feature parity in terms of `const_panic`; and hopefully would unblock the stabilisation of #51999.\n\n`@rustbot` modify labels: +T-compiler +T-libs +A-const-eval +A-const-fn\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb62779f2d6dc5cfe9208416e13392744b4e76ac", "html_url": "https://github.com/rust-lang/rust/commit/eb62779f2d6dc5cfe9208416e13392744b4e76ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb62779f2d6dc5cfe9208416e13392744b4e76ac/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "723d27934bcf7b8ded74c8a90298fdaece99ebd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/723d27934bcf7b8ded74c8a90298fdaece99ebd2", "html_url": "https://github.com/rust-lang/rust/commit/723d27934bcf7b8ded74c8a90298fdaece99ebd2"}, {"sha": "11c0e58c7489df3f71c3aebe04ad6d1b6a9f6262", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c0e58c7489df3f71c3aebe04ad6d1b6a9f6262", "html_url": "https://github.com/rust-lang/rust/commit/11c0e58c7489df3f71c3aebe04ad6d1b6a9f6262"}], "stats": {"total": 169, "additions": 129, "deletions": 40}, "files": [{"sha": "ae20f6f97b2124ad6099d4c5a1b2a114ab3e26fc", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -36,12 +36,17 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n         let def_id = instance.def_id();\n         if Some(def_id) == self.tcx.lang_items().panic_fn()\n             || Some(def_id) == self.tcx.lang_items().panic_str()\n+            || Some(def_id) == self.tcx.lang_items().panic_display()\n             || Some(def_id) == self.tcx.lang_items().begin_panic_fn()\n         {\n-            // &str\n+            // &str or &&str\n             assert!(args.len() == 1);\n \n-            let msg_place = self.deref_operand(&args[0])?;\n+            let mut msg_place = self.deref_operand(&args[0])?;\n+            while msg_place.layout.ty.is_ref() {\n+                msg_place = self.deref_operand(&msg_place.into())?;\n+            }\n+\n             let msg = Symbol::intern(self.read_str(&msg_place)?);\n             let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);"}, {"sha": "0e5a896a8f18ba332cdc4490e8a380c7ed65a5c2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -888,6 +888,10 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 if is_lang_panic_fn(tcx, callee) {\n                     self.check_op(ops::Panic);\n \n+                    // `begin_panic` and `panic_display` are generic functions that accept\n+                    // types other than str. Check to enforce that only str can be used in\n+                    // const-eval.\n+\n                     // const-eval of the `begin_panic` fn assumes the argument is `&str`\n                     if Some(callee) == tcx.lang_items().begin_panic_fn() {\n                         match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n@@ -896,6 +900,15 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                         }\n                     }\n \n+                    // const-eval of the `panic_display` fn assumes the argument is `&&str`\n+                    if Some(callee) == tcx.lang_items().panic_display() {\n+                        match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n+                            ty::Ref(_, ty, _) if matches!(ty.kind(), ty::Ref(_, ty, _) if ty.is_str()) =>\n+                                {}\n+                            _ => self.check_op(ops::PanicNonStr),\n+                        }\n+                    }\n+\n                     return;\n                 }\n "}, {"sha": "d1fd3ceaa589a4e112d672cfbe3dea0ec4042ceb", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -79,6 +79,7 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     // Keep in sync with what that function handles!\n     Some(def_id) == tcx.lang_items().panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_str()\n+        || Some(def_id) == tcx.lang_items().panic_display()\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_fmt()\n         || Some(def_id) == tcx.lang_items().begin_panic_fmt()"}, {"sha": "d69a247054026f9a403ecbd9851d8f0416e15fff", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -283,6 +283,7 @@ language_item_table! {\n     // a weak lang item, but do not have it defined.\n     Panic,                   sym::panic,               panic_fn,                   Target::Fn,             GenericRequirement::None;\n     PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n+    PanicDisplay,            sym::panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n     PanicStr,                sym::panic_str,           panic_str,                  Target::Fn,             GenericRequirement::None;\n     ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::None;"}, {"sha": "2dff03a9c5566bcb66fd921d22caa54de66d4027", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -923,6 +923,7 @@ symbols! {\n         panic_2021,\n         panic_abort,\n         panic_bounds_check,\n+        panic_display,\n         panic_fmt,\n         panic_handler,\n         panic_impl,"}, {"sha": "7a8b04d6f3c13c4599201e5c1b6064d854604041", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -27,9 +27,14 @@ pub macro panic_2015 {\n     ($msg:literal $(,)?) => (\n         $crate::panicking::panic($msg)\n     ),\n+    // Use `panic_str` instead of `panic_display::<&str>` for non_fmt_panic lint.\n     ($msg:expr $(,)?) => (\n         $crate::panicking::panic_str($msg)\n     ),\n+    // Special-case the single-argument case for const_panic.\n+    (\"{}\", $arg:expr $(,)?) => (\n+        $crate::panicking::panic_display(&$arg)\n+    ),\n     ($fmt:expr, $($arg:tt)+) => (\n         $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n     ),\n@@ -44,6 +49,10 @@ pub macro panic_2021 {\n     () => (\n         $crate::panicking::panic(\"explicit panic\")\n     ),\n+    // Special-case the single-argument case for const_panic.\n+    (\"{}\", $arg:expr $(,)?) => (\n+        $crate::panicking::panic_display(&$arg)\n+    ),\n     ($($t:tt)+) => (\n         $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))\n     ),"}, {"sha": "a6aa4bf43c865292e1764a6a6fa3a02826db2ae3", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -60,6 +60,13 @@ pub fn panic_str(expr: &str) -> ! {\n     panic_fmt(format_args!(\"{}\", expr));\n }\n \n+#[inline]\n+#[track_caller]\n+#[cfg_attr(not(bootstrap), lang = \"panic_display\")] // needed for const-evaluated panics\n+pub fn panic_display<T: fmt::Display>(x: &T) -> ! {\n+    panic_fmt(format_args!(\"{}\", *x));\n+}\n+\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[track_caller]"}, {"sha": "559d2672a0da38ce72fb2fa658df4c69fdd1910d", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -258,6 +258,7 @@\n #![feature(const_trait_impl)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]\n+#![feature(core_panic)]\n #![feature(custom_test_frameworks)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "21e9669c11079718073c402f8d4135859e7ec7f2", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -10,7 +10,7 @@ use crate::thread::Result;\n \n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n-#[allow_internal_unstable(libstd_sys_internals, const_format_args)]\n+#[allow_internal_unstable(libstd_sys_internals, const_format_args, core_panic)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_2015_macro\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro panic_2015 {\n@@ -20,6 +20,10 @@ pub macro panic_2015 {\n     ($msg:expr $(,)?) => ({\n         $crate::rt::begin_panic($msg)\n     }),\n+    // Special-case the single-argument case for const_panic.\n+    (\"{}\", $arg:expr $(,)?) => ({\n+        $crate::rt::panic_display(&$arg)\n+    }),\n     ($fmt:expr, $($arg:tt)+) => ({\n         $crate::rt::begin_panic_fmt(&$crate::const_format_args!($fmt, $($arg)+))\n     }),"}, {"sha": "b4f2adf938b5630a03de4e841c3451b62ca9ad6f", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -16,6 +16,7 @@\n \n // Re-export some of our utilities which are expected by other crates.\n pub use crate::panicking::{begin_panic, begin_panic_fmt, panic_count};\n+pub use core::panicking::panic_display;\n \n // To reduce the generated code of the new `lang_start`, this function is doing\n // the real work."}, {"sha": "100faded079d52ce37753bcc108dabb59231e91e", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -15,10 +15,13 @@ const Y: () = std::unreachable!();\n \n const X: () = std::unimplemented!();\n //~^ ERROR evaluation of constant value failed\n-//\n+\n const W: () = std::panic!(MSG);\n //~^ ERROR evaluation of constant value failed\n \n+const W2: () = std::panic!(\"{}\", MSG);\n+//~^ ERROR evaluation of constant value failed\n+\n const Z_CORE: () = core::panic!(\"cheese\");\n //~^ ERROR evaluation of constant value failed\n \n@@ -33,3 +36,6 @@ const X_CORE: () = core::unimplemented!();\n \n const W_CORE: () = core::panic!(MSG);\n //~^ ERROR evaluation of constant value failed\n+\n+const W2_CORE: () = core::panic!(\"{}\", MSG);\n+//~^ ERROR evaluation of constant value failed"}, {"sha": "e98e4a506c0d69cc7c42b39c90167a505c47c60c", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -39,45 +39,61 @@ LL | const W: () = std::panic!(MSG);\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:22:20\n+  --> $DIR/const_panic.rs:22:16\n+   |\n+LL | const W2: () = std::panic!(\"{}\", MSG);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:16\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic.rs:25:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:25:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:25:21\n+  --> $DIR/const_panic.rs:28:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n-   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n+   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:28:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:28:20\n+  --> $DIR/const_panic.rs:31:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:31:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:31:20\n+  --> $DIR/const_panic.rs:34:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:34:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:34:20\n+  --> $DIR/const_panic.rs:37:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n-   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:37:20\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic.rs:40:21\n+   |\n+LL | const W2_CORE: () = core::panic!(\"{}\", MSG);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:40:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9b8652a776e61ca31f41a6cbab4843036de8f1d7", "filename": "src/test/ui/consts/const-eval/const_panic_2021.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -2,6 +2,8 @@\n #![feature(const_panic)]\n #![crate_type = \"lib\"]\n \n+const MSG: &str = \"hello\";\n+\n const A: () = std::panic!(\"bl\u00e5haj\");\n //~^ ERROR evaluation of constant value failed\n \n@@ -14,14 +16,20 @@ const C: () = std::unreachable!();\n const D: () = std::unimplemented!();\n //~^ ERROR evaluation of constant value failed\n \n-const E: () = core::panic!(\"shark\");\n+const E: () = std::panic!(\"{}\", MSG);\n+//~^ ERROR evaluation of constant value failed\n+\n+const A_CORE: () = core::panic!(\"shark\");\n+//~^ ERROR evaluation of constant value failed\n+\n+const B_CORE: () = core::panic!();\n //~^ ERROR evaluation of constant value failed\n \n-const F: () = core::panic!();\n+const C_CORE: () = core::unreachable!();\n //~^ ERROR evaluation of constant value failed\n \n-const G: () = core::unreachable!();\n+const D_CORE: () = core::unimplemented!();\n //~^ ERROR evaluation of constant value failed\n \n-const H: () = core::unimplemented!();\n+const E_CORE: () = core::panic!(\"{}\", MSG);\n //~^ ERROR evaluation of constant value failed"}, {"sha": "9eb241ae8e59db6a620d785e56ffa01395bdb6f4", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/eb62779f2d6dc5cfe9208416e13392744b4e76ac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb62779f2d6dc5cfe9208416e13392744b4e76ac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=eb62779f2d6dc5cfe9208416e13392744b4e76ac", "patch": "@@ -1,67 +1,83 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:5:15\n+  --> $DIR/const_panic_2021.rs:7:15\n    |\n LL | const A: () = std::panic!(\"bl\u00e5haj\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:5:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:7:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:8:15\n+  --> $DIR/const_panic_2021.rs:10:15\n    |\n LL | const B: () = std::panic!();\n-   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:8:15\n+   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:10:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:11:15\n+  --> $DIR/const_panic_2021.rs:13:15\n    |\n LL | const C: () = std::unreachable!();\n-   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:11:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:13:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:14:15\n+  --> $DIR/const_panic_2021.rs:16:15\n    |\n LL | const D: () = std::unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:14:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:16:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:17:15\n+  --> $DIR/const_panic_2021.rs:19:15\n    |\n-LL | const E: () = core::panic!(\"shark\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:17:15\n+LL | const E: () = std::panic!(\"{}\", MSG);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:19:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:20:15\n+  --> $DIR/const_panic_2021.rs:22:20\n    |\n-LL | const F: () = core::panic!();\n-   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:20:15\n+LL | const A_CORE: () = core::panic!(\"shark\");\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:22:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:23:15\n+  --> $DIR/const_panic_2021.rs:25:20\n    |\n-LL | const G: () = core::unreachable!();\n-   |               ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:23:15\n+LL | const B_CORE: () = core::panic!();\n+   |                    ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:25:20\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:28:20\n+   |\n+LL | const C_CORE: () = core::unreachable!();\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:28:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:26:15\n+  --> $DIR/const_panic_2021.rs:31:20\n    |\n-LL | const H: () = core::unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:26:15\n+LL | const D_CORE: () = core::unimplemented!();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:31:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 8 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:34:20\n+   |\n+LL | const E_CORE: () = core::panic!(\"{}\", MSG);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:34:20\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}