{"sha": "990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "node_id": "C_kwDOAAsO6NoAKDk5MGY4YmY1YTYzNTRkOThhN2UwYjYyOGY5ZjFiODEwNjQ0YzNhZDg", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-04T07:55:33Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-04T08:15:55Z"}, "message": "refactor: Add some methods", "tree": {"sha": "8a433f6ec1f322a4d54add79197aa3fbd181bf69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a433f6ec1f322a4d54add79197aa3fbd181bf69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "html_url": "https://github.com/rust-lang/rust/commit/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007fae10ed8c8fa51b396bcc02071fe792f2c288", "url": "https://api.github.com/repos/rust-lang/rust/commits/007fae10ed8c8fa51b396bcc02071fe792f2c288", "html_url": "https://github.com/rust-lang/rust/commit/007fae10ed8c8fa51b396bcc02071fe792f2c288"}], "stats": {"total": 194, "additions": 185, "deletions": 9}, "files": [{"sha": "6cabe74fdef4ec032b8e55d7654990bed0f2a1a2", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, PatKind, QPath, UnOp};\n+use rustc_hir::{Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n@@ -157,8 +157,8 @@ pub(super) fn check<'tcx>(\n             };\n \n             if match map_arg.kind {\n-                ExprKind::MethodCall(clone, [original_arg], _) => {\n-                    clone.ident.name == sym::clone\n+                ExprKind::MethodCall(method, [original_arg], _) => {\n+                    acceptable_methods(method)\n                         && SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, original_arg)\n                 },\n                 _ => SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg)\n@@ -179,3 +179,16 @@ pub(super) fn check<'tcx>(\n             }\n     }\n }\n+\n+fn acceptable_methods(method: &PathSegment<'_>) -> bool {\n+    let methods: [Symbol; 6] = [\n+        sym::clone,\n+        sym::as_ref,\n+        sym!(as_deref),\n+        sym!(as_mut),\n+        sym!(as_deref_mut),\n+        sym!(to_owned),\n+    ];\n+\n+    methods.contains(&method.ident.name)\n+}"}, {"sha": "9de7040000a03205449e225820766e505b75b589", "filename": "tests/ui/manual_filter_map.fixed", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "patch": "@@ -52,8 +52,28 @@ fn issue_8920() {\n         .iter()\n         .filter_map(|f| f.field.clone());\n \n-    let vec = vec![ResultFoo {\n+    let mut vec = vec![ResultFoo {\n         field: Ok(String::from(\"str\")),\n     }];\n     let _ = vec.iter().filter_map(|f| f.field.clone().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.field.as_ref().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.field.as_deref().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter_map(|f| f.field.as_mut().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter_map(|f| f.field.as_deref_mut().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.field.to_owned().ok());\n }"}, {"sha": "6766078d694a5de978f90e1e35787e37964cf549", "filename": "tests/ui/manual_filter_map.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "patch": "@@ -53,8 +53,33 @@ fn issue_8920() {\n         .filter(|f| f.field.is_some())\n         .map(|f| f.field.clone().unwrap());\n \n-    let vec = vec![ResultFoo {\n+    let mut vec = vec![ResultFoo {\n         field: Ok(String::from(\"str\")),\n     }];\n     let _ = vec.iter().filter(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.field.is_ok())\n+        .map(|f| f.field.as_ref().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.field.is_ok())\n+        .map(|f| f.field.as_deref().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter(|f| f.field.is_ok())\n+        .map(|f| f.field.as_mut().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter(|f| f.field.is_ok())\n+        .map(|f| f.field.as_deref_mut().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.field.is_ok())\n+        .map(|f| f.field.to_owned().unwrap());\n }"}, {"sha": "5e67ca348fab02742df7a7b88d7e816ed486bef1", "filename": "tests/ui/manual_filter_map.stderr", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "patch": "@@ -32,5 +32,45 @@ error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n LL |     let _ = vec.iter().filter(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|f| f.field.clone().ok())`\n \n-error: aborting due to 5 previous errors\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:63:10\n+   |\n+LL |           .filter(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.as_ref().unwrap());\n+   | |___________________________________________^ help: try: `filter_map(|f| f.field.as_ref().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:68:10\n+   |\n+LL |           .filter(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.as_deref().unwrap());\n+   | |_____________________________________________^ help: try: `filter_map(|f| f.field.as_deref().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:73:10\n+   |\n+LL |           .filter(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.as_mut().unwrap());\n+   | |___________________________________________^ help: try: `filter_map(|f| f.field.as_mut().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:78:10\n+   |\n+LL |           .filter(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.as_deref_mut().unwrap());\n+   | |_________________________________________________^ help: try: `filter_map(|f| f.field.as_deref_mut().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:83:10\n+   |\n+LL |           .filter(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.to_owned().unwrap());\n+   | |_____________________________________________^ help: try: `filter_map(|f| f.field.to_owned().ok())`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "e7b5081ea59a5364e91a4f23343b694c4a9c417e", "filename": "tests/ui/manual_find_map.fixed", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "patch": "@@ -50,8 +50,26 @@ fn issue_8920() {\n     }];\n     let _ = vec.iter().find_map(|f| f.field.clone());\n \n-    let vec = vec![ResultFoo {\n+    let mut vec = vec![ResultFoo {\n         field: Ok(String::from(\"str\")),\n     }];\n     let _ = vec.iter().find_map(|f| f.field.clone().ok());\n+\n+    let _ = vec.iter().find_map(|f| f.field.as_ref().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.field.as_deref().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find_map(|f| f.field.as_mut().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find_map(|f| f.field.as_deref_mut().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.field.to_owned().ok());\n }"}, {"sha": "46badbb9a18ea13fd921d9b84043facc818b658f", "filename": "tests/ui/manual_find_map.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "patch": "@@ -50,8 +50,30 @@ fn issue_8920() {\n     }];\n     let _ = vec.iter().find(|f| f.field.is_some()).map(|f| f.field.clone().unwrap());\n \n-    let vec = vec![ResultFoo {\n+    let mut vec = vec![ResultFoo {\n         field: Ok(String::from(\"str\")),\n     }];\n     let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n+\n+    let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.as_ref().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.field.is_ok())\n+        .map(|f| f.field.as_deref().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find(|f| f.field.is_ok())\n+        .map(|f| f.field.as_mut().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find(|f| f.field.is_ok())\n+        .map(|f| f.field.as_deref_mut().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.field.is_ok())\n+        .map(|f| f.field.to_owned().unwrap());\n }"}, {"sha": "2b6955a17df834c9afbaebaff6077d1168120739", "filename": "tests/ui/manual_find_map.stderr", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/990f8bf5a6354d98a7e0b628f9f1b810644c3ad8/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=990f8bf5a6354d98a7e0b628f9f1b810644c3ad8", "patch": "@@ -30,5 +30,43 @@ error: `find(..).map(..)` can be simplified as `find_map(..)`\n LL |     let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|f| f.field.clone().ok())`\n \n-error: aborting due to 5 previous errors\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:58:24\n+   |\n+LL |     let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.as_ref().unwrap());\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|f| f.field.as_ref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:62:10\n+   |\n+LL |           .find(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.as_deref().unwrap());\n+   | |_____________________________________________^ help: try: `find_map(|f| f.field.as_deref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:67:10\n+   |\n+LL |           .find(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.as_mut().unwrap());\n+   | |___________________________________________^ help: try: `find_map(|f| f.field.as_mut().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:72:10\n+   |\n+LL |           .find(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.as_deref_mut().unwrap());\n+   | |_________________________________________________^ help: try: `find_map(|f| f.field.as_deref_mut().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:77:10\n+   |\n+LL |           .find(|f| f.field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.field.to_owned().unwrap());\n+   | |_____________________________________________^ help: try: `find_map(|f| f.field.to_owned().ok())`\n+\n+error: aborting due to 10 previous errors\n "}]}