{"sha": "d3e6770efbd76c4ad1e17468895b538a2efec4bd", "node_id": "C_kwDOAAsO6NoAKGQzZTY3NzBlZmJkNzZjNGFkMWUxNzQ2ODg5NWI1MzhhMmVmZWM0YmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-07T03:42:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-07T03:42:05Z"}, "message": "Auto merge of #89454 - erikdesjardins:perfattrcheck, r=nikomatsakis\n\nperf: only check for `rustc_trivial_field_reads` attribute on traits, not items, impls, etc.\n\nThe checks that are removed in this PR (originally added in #85200) caused a small perf regression: https://github.com/rust-lang/rust/pull/88824#issuecomment-932664761\n\nSince the attribute is currently only applied to traits, I don't think it's worth keeping the additional checks for now.\nIf/when we decide to apply the attribute somewhere else, we can (partially) revert this and reevaluate the perf impact.\n\nr? `@nikomatsakis` cc `@FabianWolff`", "tree": {"sha": "0db3025d27155b10571b04c4b6fc65004d1c5918", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db3025d27155b10571b04c4b6fc65004d1c5918"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e6770efbd76c4ad1e17468895b538a2efec4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e6770efbd76c4ad1e17468895b538a2efec4bd", "html_url": "https://github.com/rust-lang/rust/commit/d3e6770efbd76c4ad1e17468895b538a2efec4bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e6770efbd76c4ad1e17468895b538a2efec4bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eabf25b90396dead0b2a1aaa275af18a1ae6008", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eabf25b90396dead0b2a1aaa275af18a1ae6008", "html_url": "https://github.com/rust-lang/rust/commit/0eabf25b90396dead0b2a1aaa275af18a1ae6008"}, {"sha": "bec5a91450d58a821c8a41a93dd2563fc7eb4606", "url": "https://api.github.com/repos/rust-lang/rust/commits/bec5a91450d58a821c8a41a93dd2563fc7eb4606", "html_url": "https://github.com/rust-lang/rust/commit/bec5a91450d58a821c8a41a93dd2563fc7eb4606"}], "stats": {"total": 42, "additions": 4, "deletions": 38}, "files": [{"sha": "772791324019a98ec26dcd7e64a609d517adf9b2", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d3e6770efbd76c4ad1e17468895b538a2efec4bd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e6770efbd76c4ad1e17468895b538a2efec4bd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d3e6770efbd76c4ad1e17468895b538a2efec4bd", "patch": "@@ -243,46 +243,15 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     /// will be ignored for the purposes of dead code analysis (see PR #85200\n     /// for discussion).\n     fn should_ignore_item(&self, def_id: DefId) -> bool {\n-        if !self.tcx.has_attr(def_id, sym::automatically_derived)\n-            && !self\n-                .tcx\n-                .impl_of_method(def_id)\n-                .map_or(false, |impl_id| self.tcx.has_attr(impl_id, sym::automatically_derived))\n-        {\n-            return false;\n-        }\n-\n-        let has_attr = |def_id| self.tcx.has_attr(def_id, sym::rustc_trivial_field_reads);\n-\n-        if has_attr(def_id) {\n-            return true;\n-        }\n-\n         if let Some(impl_of) = self.tcx.impl_of_method(def_id) {\n-            if has_attr(impl_of) {\n-                return true;\n+            if !self.tcx.has_attr(impl_of, sym::automatically_derived) {\n+                return false;\n             }\n \n             if let Some(trait_of) = self.tcx.trait_id_of_impl(impl_of) {\n-                if has_attr(trait_of) {\n+                if self.tcx.has_attr(trait_of, sym::rustc_trivial_field_reads) {\n                     return true;\n                 }\n-\n-                if let Some(method_ident) = self.tcx.opt_item_name(def_id) {\n-                    if let Some(trait_method) = self\n-                        .tcx\n-                        .associated_items(trait_of)\n-                        .find_by_name_and_kind(self.tcx, method_ident, ty::AssocKind::Fn, trait_of)\n-                    {\n-                        if has_attr(trait_method.def_id) {\n-                            return true;\n-                        }\n-                    }\n-                }\n-            }\n-        } else if let Some(trait_of) = self.tcx.trait_of_item(def_id) {\n-            if has_attr(trait_of) {\n-                return true;\n             }\n         }\n \n@@ -291,10 +260,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n     fn visit_node(&mut self, node: Node<'tcx>) {\n         if let Some(item_def_id) = match node {\n-            Node::Item(hir::Item { def_id, .. })\n-            | Node::ForeignItem(hir::ForeignItem { def_id, .. })\n-            | Node::TraitItem(hir::TraitItem { def_id, .. })\n-            | Node::ImplItem(hir::ImplItem { def_id, .. }) => Some(def_id.to_def_id()),\n+            Node::ImplItem(hir::ImplItem { def_id, .. }) => Some(def_id.to_def_id()),\n             _ => None,\n         } {\n             if self.should_ignore_item(item_def_id) {"}]}