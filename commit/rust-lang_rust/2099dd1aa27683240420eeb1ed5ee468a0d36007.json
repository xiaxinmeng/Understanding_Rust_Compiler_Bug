{"sha": "2099dd1aa27683240420eeb1ed5ee468a0d36007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOTlkZDFhYTI3NjgzMjQwNDIwZWViMWVkNWVlNDY4YTBkMzYwMDc=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-03T14:07:14Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:21Z"}, "message": "Add tests", "tree": {"sha": "963cc2de3fd0b8152bfb3c7663bd3097f82a7536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963cc2de3fd0b8152bfb3c7663bd3097f82a7536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2099dd1aa27683240420eeb1ed5ee468a0d36007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2099dd1aa27683240420eeb1ed5ee468a0d36007", "html_url": "https://github.com/rust-lang/rust/commit/2099dd1aa27683240420eeb1ed5ee468a0d36007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2099dd1aa27683240420eeb1ed5ee468a0d36007/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "html_url": "https://github.com/rust-lang/rust/commit/5628d4a7c336bb567d5e1ccf2da02b528f3b230d"}], "stats": {"total": 120, "additions": 104, "deletions": 16}, "files": [{"sha": "61072735e18f03527916a4af60074358476bcba2", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2099dd1aa27683240420eeb1ed5ee468a0d36007/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2099dd1aa27683240420eeb1ed5ee468a0d36007/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=2099dd1aa27683240420eeb1ed5ee468a0d36007", "patch": "@@ -4,6 +4,13 @@\n enum Foo {}\n \n struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n+union NonEmptyUnion1 {\n+    foo: (),\n+}\n+union NonEmptyUnion2 {\n+    foo: (),\n+    bar: (),\n+}\n enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n     Foo(bool), //~ variant not covered\n }\n@@ -36,6 +43,10 @@ fn main() {\n     //~^ ERROR type `u8` is non-empty\n     match NonEmptyStruct(true) {}\n     //~^ ERROR pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n+    match (NonEmptyUnion1 { foo: () }) {}\n+    //~^ ERROR pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled\n+    match (NonEmptyUnion2 { foo: () }) {}\n+    //~^ ERROR pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled\n     match NonEmptyEnum1::Foo(true) {}\n     //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n     match NonEmptyEnum2::Foo(true) {}"}, {"sha": "82be26cfd873cedfa29b2b86d6249107ce8c4e52", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2099dd1aa27683240420eeb1ed5ee468a0d36007/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2099dd1aa27683240420eeb1ed5ee468a0d36007/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=2099dd1aa27683240420eeb1ed5ee468a0d36007", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:21:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:28:9\n    |\n LL |         _ => {},\n    |         ^\n@@ -11,27 +11,27 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:28:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:35:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:32:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:39:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:35:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:42:11\n    |\n LL |     match 0u8 {}\n    |           ^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:37:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:44:11\n    |\n LL | struct NonEmptyStruct(bool);\n    | ----------------------------\n@@ -44,8 +44,41 @@ LL |     match NonEmptyStruct(true) {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n+error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled\n+  --> $DIR/match-empty-exhaustive_patterns.rs:46:11\n+   |\n+LL |   union NonEmptyUnion1 {\n+   |   -     -------------- variant not covered\n+   |  _|\n+   | |\n+LL | |     foo: (),\n+LL | | }\n+   | |_- `NonEmptyUnion1` defined here\n+...\n+LL |       match (NonEmptyUnion1 { foo: () }) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled\n+  --> $DIR/match-empty-exhaustive_patterns.rs:48:11\n+   |\n+LL |   union NonEmptyUnion2 {\n+   |   -     -------------- variant not covered\n+   |  _|\n+   | |\n+LL | |     foo: (),\n+LL | |     bar: (),\n+LL | | }\n+   | |_- `NonEmptyUnion2` defined here\n+...\n+LL |       match (NonEmptyUnion2 { foo: () }) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:39:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:50:11\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -59,7 +92,7 @@ LL |       match NonEmptyEnum1::Foo(true) {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:41:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:52:11\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -75,7 +108,7 @@ LL |       match NonEmptyEnum2::Foo(true) {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:43:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:54:11\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -87,6 +120,6 @@ LL |       match NonEmptyEnum5::V1 {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "ebbc1358cdbe429991919af02510cca14c34fc2e", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2099dd1aa27683240420eeb1ed5ee468a0d36007/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2099dd1aa27683240420eeb1ed5ee468a0d36007/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=2099dd1aa27683240420eeb1ed5ee468a0d36007", "patch": "@@ -3,6 +3,13 @@\n enum Foo {}\n \n struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n+union NonEmptyUnion1 {\n+    foo: (),\n+}\n+union NonEmptyUnion2 {\n+    foo: (),\n+    bar: (),\n+}\n enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n     Foo(bool), //~ variant not covered\n }\n@@ -20,7 +27,7 @@ fn foo1(x: Foo) {\n \n fn foo2(x: Foo) {\n     match x {\n-        _ => {}, // FIXME: should be unreachable\n+        _ => {}, // Not detected as unreachable, see #55123.\n     }\n }\n \n@@ -39,6 +46,10 @@ fn main() {\n     //~^ ERROR type `u8` is non-empty\n     match NonEmptyStruct(true) {}\n     //~^ ERROR pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n+    match (NonEmptyUnion1 { foo: () }) {}\n+    //~^ ERROR pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled\n+    match (NonEmptyUnion2 { foo: () }) {}\n+    //~^ ERROR pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled\n     match NonEmptyEnum1::Foo(true) {}\n     //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n     match NonEmptyEnum2::Foo(true) {}"}, {"sha": "4ba1c79b4b2db291a1ef7dd52fee3925b22e786a", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2099dd1aa27683240420eeb1ed5ee468a0d36007/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2099dd1aa27683240420eeb1ed5ee468a0d36007/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=2099dd1aa27683240420eeb1ed5ee468a0d36007", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty.rs:38:11\n+  --> $DIR/match-empty.rs:45:11\n    |\n LL |     match 0u8 {}\n    |           ^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n-  --> $DIR/match-empty.rs:40:11\n+  --> $DIR/match-empty.rs:47:11\n    |\n LL | struct NonEmptyStruct(bool);\n    | ----------------------------\n@@ -20,8 +20,41 @@ LL |     match NonEmptyStruct(true) {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n+error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion1` of type `NonEmptyUnion1` is not handled\n+  --> $DIR/match-empty.rs:49:11\n+   |\n+LL |   union NonEmptyUnion1 {\n+   |   -     -------------- variant not covered\n+   |  _|\n+   | |\n+LL | |     foo: (),\n+LL | | }\n+   | |_- `NonEmptyUnion1` defined here\n+...\n+LL |       match (NonEmptyUnion1 { foo: () }) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `NonEmptyUnion2` of type `NonEmptyUnion2` is not handled\n+  --> $DIR/match-empty.rs:51:11\n+   |\n+LL |   union NonEmptyUnion2 {\n+   |   -     -------------- variant not covered\n+   |  _|\n+   | |\n+LL | |     foo: (),\n+LL | |     bar: (),\n+LL | | }\n+   | |_- `NonEmptyUnion2` defined here\n+...\n+LL |       match (NonEmptyUnion2 { foo: () }) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n-  --> $DIR/match-empty.rs:42:11\n+  --> $DIR/match-empty.rs:53:11\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -35,7 +68,7 @@ LL |       match NonEmptyEnum1::Foo(true) {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n-  --> $DIR/match-empty.rs:44:11\n+  --> $DIR/match-empty.rs:55:11\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -51,7 +84,7 @@ LL |       match NonEmptyEnum2::Foo(true) {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled\n-  --> $DIR/match-empty.rs:46:11\n+  --> $DIR/match-empty.rs:57:11\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -63,6 +96,6 @@ LL |       match NonEmptyEnum5::V1 {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}]}