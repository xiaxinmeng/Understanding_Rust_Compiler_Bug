{"sha": "6778baf516cf00d6ba2d3f448aa312b4ac2e43b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NzhiYWY1MTZjZjAwZDZiYTJkM2Y0NDhhYTMxMmI0YWMyZTQzYjU=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2020-08-10T15:39:06Z"}, "committer": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2020-08-10T15:39:06Z"}, "message": "Fix up docs", "tree": {"sha": "7facafd42129cd8bc9613b2885645b8734d2bb14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7facafd42129cd8bc9613b2885645b8734d2bb14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6778baf516cf00d6ba2d3f448aa312b4ac2e43b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6778baf516cf00d6ba2d3f448aa312b4ac2e43b5", "html_url": "https://github.com/rust-lang/rust/commit/6778baf516cf00d6ba2d3f448aa312b4ac2e43b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6778baf516cf00d6ba2d3f448aa312b4ac2e43b5/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57572cf8096ccb332370f7a711641a061bfd7434", "url": "https://api.github.com/repos/rust-lang/rust/commits/57572cf8096ccb332370f7a711641a061bfd7434", "html_url": "https://github.com/rust-lang/rust/commit/57572cf8096ccb332370f7a711641a061bfd7434"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "ccc067a3c943d2db477da89d238542d095dc08ed", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6778baf516cf00d6ba2d3f448aa312b4ac2e43b5/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6778baf516cf00d6ba2d3f448aa312b4ac2e43b5/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=6778baf516cf00d6ba2d3f448aa312b4ac2e43b5", "patch": "@@ -27,16 +27,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen\n     unreachable!()\n }\n \n-// \"Leak\" the payload and shim to the relevant abort on the platform in\n-// question.\n-//\n-// For Unix we just use `abort` from libc as it'll trigger debuggers, core\n-// dumps, etc, as one might expect. On Windows, however, the best option we have\n-// is the `__fastfail` intrinsics, but that's unfortunately not defined in LLVM,\n-// and the `RaiseFailFastException` function isn't available until Windows 7\n-// which would break compat with XP. For now just use `intrinsics::abort` which\n-// will kill us with an illegal instruction, which will do a good enough job for\n-// now hopefully.\n+// \"Leak\" the payload and shim to the relevant abort on the platform in question.\n #[rustc_std_internal_symbol]\n pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n     abort();\n@@ -57,14 +48,16 @@ pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n                 __rust_abort();\n             }\n         } else if #[cfg(all(windows, any(target_arch = \"x86\", target_arch = \"x86_64\")))] {\n-            // On Windows, use the processor-specific __fastfail mechanism.  In Windows 8\n+            // On Windows, use the processor-specific __fastfail mechanism. In Windows 8\n             // and later, this will terminate the process immediately without running any\n-            // in-process exception handlers.  In earlier versions of Windows, this\n+            // in-process exception handlers. In earlier versions of Windows, this\n             // sequence of instructions will be treated as an access violation,\n             // terminating the process but without necessarily bypassing all exception\n             // handlers.\n             //\n             // https://docs.microsoft.com/en-us/cpp/intrinsics/fastfail\n+            //\n+            // Note: this is the same implementation as in libstd's `abort_internal`\n             unsafe fn abort() -> ! {\n                 llvm_asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n                 core::intrinsics::unreachable();"}, {"sha": "4334447b8b1dafd10d8a7125cad5dccc63657af1", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6778baf516cf00d6ba2d3f448aa312b4ac2e43b5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6778baf516cf00d6ba2d3f448aa312b4ac2e43b5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=6778baf516cf00d6ba2d3f448aa312b4ac2e43b5", "patch": "@@ -281,7 +281,11 @@ macro_rules! impl_is_zero {\n impl_is_zero! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n \n pub fn cvt<I: IsZero>(i: I) -> crate::io::Result<I> {\n-    if i.is_zero() { Err(crate::io::Error::last_os_error()) } else { Ok(i) }\n+    if i.is_zero() {\n+        Err(crate::io::Error::last_os_error())\n+    } else {\n+        Ok(i)\n+    }\n }\n \n pub fn dur2timeout(dur: Duration) -> c::DWORD {\n@@ -300,14 +304,10 @@ pub fn dur2timeout(dur: Duration) -> c::DWORD {\n         .unwrap_or(c::INFINITE)\n }\n \n-// On Windows, use the processor-specific __fastfail mechanism.  In Windows 8\n-// and later, this will terminate the process immediately without running any\n-// in-process exception handlers.  In earlier versions of Windows, this\n-// sequence of instructions will be treated as an access violation,\n-// terminating the process but without necessarily bypassing all exception\n-// handlers.\n-//\n-// https://docs.microsoft.com/en-us/cpp/intrinsics/fastfail\n+/// Use `__fastfail` to abort the process\n+///\n+/// This is the same implementation as in libpanic_abort's `__rust_start_panic`. See\n+/// that function for more information on `__fastfail`\n #[allow(unreachable_code)]\n pub fn abort_internal() -> ! {\n     #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]"}]}