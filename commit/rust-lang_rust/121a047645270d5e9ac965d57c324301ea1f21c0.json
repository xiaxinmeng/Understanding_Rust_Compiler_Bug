{"sha": "121a047645270d5e9ac965d57c324301ea1f21c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWEwNDc2NDUyNzBkNWU5YWM5NjVkNTdjMzI0MzAxZWExZjIxYzA=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-13T21:46:23Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-13T21:57:22Z"}, "message": "Move linting of `assert` macros from early to late pass", "tree": {"sha": "8e268b21b5381a147d662f77ad9ac51d950855cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e268b21b5381a147d662f77ad9ac51d950855cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121a047645270d5e9ac965d57c324301ea1f21c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121a047645270d5e9ac965d57c324301ea1f21c0", "html_url": "https://github.com/rust-lang/rust/commit/121a047645270d5e9ac965d57c324301ea1f21c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121a047645270d5e9ac965d57c324301ea1f21c0/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5", "html_url": "https://github.com/rust-lang/rust/commit/a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5"}], "stats": {"total": 313, "additions": 179, "deletions": 134}, "files": [{"sha": "9653e62cad078a56347e899db81079e153a18ba4", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/121a047645270d5e9ac965d57c324301ea1f21c0/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121a047645270d5e9ac965d57c324301ea1f21c0/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=121a047645270d5e9ac965d57c324301ea1f21c0", "patch": "@@ -1,14 +1,11 @@\n-use crate::utils::ast_utils::eq_expr;\n use crate::utils::{\n-    eq_expr_value, implements_trait, in_macro, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then,\n+    eq_expr_value, implements_trait, in_macro, is_copy, is_expn_of, multispan_sugg, snippet, span_lint,\n+    span_lint_and_then,\n };\n use if_chain::if_chain;\n-use rustc_ast::{ast, token};\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOp, BinOpKind, BorrowKind, Expr, ExprKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_parse::parser;\n+use rustc_hir::{BinOp, BinOpKind, BorrowKind, Expr, ExprKind, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -63,44 +60,38 @@ declare_clippy_lint! {\n \n declare_lint_pass!(EqOp => [EQ_OP, OP_REF]);\n \n-impl EarlyLintPass for EqOp {\n-    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {\n-        let macro_list = [\n-            sym!(assert_eq),\n-            sym!(assert_ne),\n-            sym!(debug_assert_eq),\n-            sym!(debug_assert_ne),\n-        ];\n-        if_chain! {\n-            if !in_external_macro(cx.sess, mac.span());\n-            if mac.path.segments.len() == 1;\n-            let macro_name = mac.path.segments[0].ident.name;\n-            if macro_list.contains(&macro_name);\n-            let tokens = mac.args.inner_tokens();\n-            let mut parser = parser::Parser::new(\n-                &cx.sess.parse_sess, tokens, false, None);\n-            if let Ok(left) = parser.parse_expr();\n-            if parser.eat(&token::Comma);\n-            if let Ok(right) = parser.parse_expr();\n-            let left_expr = left.into_inner();\n-            let right_expr = right.into_inner();\n-            if eq_expr(&left_expr, &right_expr);\n-\n-            then {\n-                span_lint(\n-                    cx,\n-                    EQ_OP,\n-                    left_expr.span.to(right_expr.span),\n-                    &format!(\"identical args used in this `{}!` macro call\", macro_name),\n-                );\n-            }\n-        }\n-    }\n-}\n+const ASSERT_MACRO_NAMES: [&str; 4] = [\"assert_eq\", \"assert_ne\", \"debug_assert_eq\", \"debug_assert_ne\"];\n \n impl<'tcx> LateLintPass<'tcx> for EqOp {\n     #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let ExprKind::Block(ref block, _) = e.kind {\n+            for stmt in block.stmts {\n+                for amn in &ASSERT_MACRO_NAMES {\n+                    if_chain! {\n+                        if is_expn_of(stmt.span, amn).is_some();\n+                        if let StmtKind::Semi(ref matchexpr) = stmt.kind;\n+                        if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n+                        if let Some(ref matchheader) = matchblock.expr;\n+                        if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n+                        if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n+                        if conditions.len() == 2;\n+                        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind;\n+                        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind;\n+                        if eq_expr_value(cx, lhs, rhs);\n+\n+                        then {\n+                            span_lint(\n+                                cx,\n+                                EQ_OP,\n+                                lhs.span.to(rhs.span),\n+                                &format!(\"identical args used in this `{}!` macro call\", amn),\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n         if let ExprKind::Binary(op, ref left, ref right) = e.kind {\n             if e.span.from_expansion() {\n                 return;"}, {"sha": "fc4afde9d9e6dcbcb0319e8d99e258bd2c2e1288", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121a047645270d5e9ac965d57c324301ea1f21c0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121a047645270d5e9ac965d57c324301ea1f21c0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=121a047645270d5e9ac965d57c324301ea1f21c0", "patch": "@@ -348,7 +348,6 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore) {\n     store.register_pre_expansion_pass(|| box write::Write::default());\n     store.register_pre_expansion_pass(|| box attrs::EarlyAttributes);\n     store.register_pre_expansion_pass(|| box dbg_macro::DbgMacro);\n-    store.register_pre_expansion_pass(|| box eq_op::EqOp);\n }\n \n #[doc(hidden)]\n@@ -911,7 +910,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     store.register_late_pass(move || box types::Types::new(vec_box_size_threshold));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n-    store.register_early_pass(|| box eq_op::EqOp);\n     store.register_late_pass(|| box eq_op::EqOp);\n     store.register_late_pass(|| box enum_clike::UnportableVariant);\n     store.register_late_pass(|| box float_literal::FloatLiteral);"}, {"sha": "3ab4dfc439bcae460970221cba6875b58e947924", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/121a047645270d5e9ac965d57c324301ea1f21c0/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121a047645270d5e9ac965d57c324301ea1f21c0/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=121a047645270d5e9ac965d57c324301ea1f21c0", "patch": "@@ -60,6 +60,8 @@ fn main() {\n     const B: u32 = 10;\n     const C: u32 = A / B; // ok, different named constants\n     const D: u32 = A / A;\n+\n+    check_assert_identical_args();\n }\n \n #[rustfmt::skip]\n@@ -85,3 +87,54 @@ fn check_ignore_macro() {\n     // checks if the lint ignores macros with `!` operator\n     !bool_macro!(1) && !bool_macro!(\"\");\n }\n+\n+macro_rules! assert_in_macro_def {\n+    () => {\n+        let a = 42;\n+        assert_eq!(a, a);\n+        assert_ne!(a, a);\n+        debug_assert_eq!(a, a);\n+        debug_assert_ne!(a, a);\n+    };\n+}\n+\n+// lint identical args in assert-like macro invocations (see #3574)\n+fn check_assert_identical_args() {\n+    // lint also in macro definition\n+    assert_in_macro_def!();\n+\n+    let a = 1;\n+    let b = 2;\n+\n+    // lint identical args in `assert_eq!`\n+    assert_eq!(a, a);\n+    assert_eq!(a + 1, a + 1);\n+    // ok\n+    assert_eq!(a, b);\n+    assert_eq!(a, a + 1);\n+    assert_eq!(a + 1, b + 1);\n+\n+    // lint identical args in `assert_ne!`\n+    assert_ne!(a, a);\n+    assert_ne!(a + 1, a + 1);\n+    // ok\n+    assert_ne!(a, b);\n+    assert_ne!(a, a + 1);\n+    assert_ne!(a + 1, b + 1);\n+\n+    // lint identical args in `debug_assert_eq!`\n+    debug_assert_eq!(a, a);\n+    debug_assert_eq!(a + 1, a + 1);\n+    // ok\n+    debug_assert_eq!(a, b);\n+    debug_assert_eq!(a, a + 1);\n+    debug_assert_eq!(a + 1, b + 1);\n+\n+    // lint identical args in `debug_assert_ne!`\n+    debug_assert_ne!(a, a);\n+    debug_assert_ne!(a + 1, a + 1);\n+    // ok\n+    debug_assert_ne!(a, b);\n+    debug_assert_ne!(a, a + 1);\n+    debug_assert_ne!(a + 1, b + 1);\n+}"}, {"sha": "21a63aec7a171a5d9293908b733716865f0d1a70", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/121a047645270d5e9ac965d57c324301ea1f21c0/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/121a047645270d5e9ac965d57c324301ea1f21c0/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=121a047645270d5e9ac965d57c324301ea1f21c0", "patch": "@@ -162,5 +162,98 @@ error: equal expressions as operands to `/`\n LL |     const D: u32 = A / A;\n    |                    ^^^^^\n \n-error: aborting due to 27 previous errors\n+error: identical args used in this `assert_eq!` macro call\n+  --> $DIR/eq_op.rs:94:20\n+   |\n+LL |         assert_eq!(a, a);\n+   |                    ^^^^\n+...\n+LL |     assert_in_macro_def!();\n+   |     ----------------------- in this macro invocation\n+   |\n+   = note: `#[deny(clippy::eq_op)]` on by default\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: identical args used in this `assert_ne!` macro call\n+  --> $DIR/eq_op.rs:95:20\n+   |\n+LL |         assert_ne!(a, a);\n+   |                    ^^^^\n+...\n+LL |     assert_in_macro_def!();\n+   |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: identical args used in this `assert_eq!` macro call\n+  --> $DIR/eq_op.rs:110:16\n+   |\n+LL |     assert_eq!(a, a);\n+   |                ^^^^\n+\n+error: identical args used in this `assert_eq!` macro call\n+  --> $DIR/eq_op.rs:111:16\n+   |\n+LL |     assert_eq!(a + 1, a + 1);\n+   |                ^^^^^^^^^^^^\n+\n+error: identical args used in this `assert_ne!` macro call\n+  --> $DIR/eq_op.rs:118:16\n+   |\n+LL |     assert_ne!(a, a);\n+   |                ^^^^\n+\n+error: identical args used in this `assert_ne!` macro call\n+  --> $DIR/eq_op.rs:119:16\n+   |\n+LL |     assert_ne!(a + 1, a + 1);\n+   |                ^^^^^^^^^^^^\n+\n+error: identical args used in this `debug_assert_eq!` macro call\n+  --> $DIR/eq_op.rs:96:26\n+   |\n+LL |         debug_assert_eq!(a, a);\n+   |                          ^^^^\n+...\n+LL |     assert_in_macro_def!();\n+   |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: identical args used in this `debug_assert_ne!` macro call\n+  --> $DIR/eq_op.rs:97:26\n+   |\n+LL |         debug_assert_ne!(a, a);\n+   |                          ^^^^\n+...\n+LL |     assert_in_macro_def!();\n+   |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: identical args used in this `debug_assert_eq!` macro call\n+  --> $DIR/eq_op.rs:126:22\n+   |\n+LL |     debug_assert_eq!(a, a);\n+   |                      ^^^^\n+\n+error: identical args used in this `debug_assert_eq!` macro call\n+  --> $DIR/eq_op.rs:127:22\n+   |\n+LL |     debug_assert_eq!(a + 1, a + 1);\n+   |                      ^^^^^^^^^^^^\n+\n+error: identical args used in this `debug_assert_ne!` macro call\n+  --> $DIR/eq_op.rs:134:22\n+   |\n+LL |     debug_assert_ne!(a, a);\n+   |                      ^^^^\n+\n+error: identical args used in this `debug_assert_ne!` macro call\n+  --> $DIR/eq_op.rs:135:22\n+   |\n+LL |     debug_assert_ne!(a + 1, a + 1);\n+   |                      ^^^^^^^^^^^^\n+\n+error: aborting due to 39 previous errors\n "}, {"sha": "25e1c6ac6b75b45c02b2d3a8707bfb1c293cc113", "filename": "tests/ui/eq_op_early.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5/tests%2Fui%2Feq_op_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5/tests%2Fui%2Feq_op_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op_early.rs?ref=a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5", "patch": "@@ -1,38 +0,0 @@\n-#![warn(clippy::eq_op)]\n-\n-fn main() {\n-    let a = 1;\n-    let b = 2;\n-\n-    // lint identical args in `assert_eq!` (see #3574)\n-    assert_eq!(a, a);\n-    assert_eq!(a + 1, a + 1);\n-    // ok\n-    assert_eq!(a, b);\n-    assert_eq!(a, a + 1);\n-    assert_eq!(a + 1, b + 1);\n-\n-    // lint identical args in `assert_ne!`\n-    assert_ne!(a, a);\n-    assert_ne!(a + 1, a + 1);\n-    // ok\n-    assert_ne!(a, b);\n-    assert_ne!(a, a + 1);\n-    assert_ne!(a + 1, b + 1);\n-\n-    // lint identical args in `debug_assert_eq!`\n-    debug_assert_eq!(a, a);\n-    debug_assert_eq!(a + 1, a + 1);\n-    // ok\n-    debug_assert_eq!(a, b);\n-    debug_assert_eq!(a, a + 1);\n-    debug_assert_eq!(a + 1, b + 1);\n-\n-    // lint identical args in `debug_assert_ne!`\n-    debug_assert_ne!(a, a);\n-    debug_assert_ne!(a + 1, a + 1);\n-    // ok\n-    debug_assert_ne!(a, b);\n-    debug_assert_ne!(a, a + 1);\n-    debug_assert_ne!(a + 1, b + 1);\n-}"}, {"sha": "1df094fae180278c7be922f6a933e466b770f6f9", "filename": "tests/ui/eq_op_early.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5/tests%2Fui%2Feq_op_early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5/tests%2Fui%2Feq_op_early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op_early.stderr?ref=a3e0446afe0ebd7a420f65cd6aec1c56687f0ef5", "patch": "@@ -1,52 +0,0 @@\n-error: identical args used in this `assert_eq!` macro call\n-  --> $DIR/eq_op_early.rs:8:16\n-   |\n-LL |     assert_eq!(a, a);\n-   |                ^^^^\n-   |\n-   = note: `-D clippy::eq-op` implied by `-D warnings`\n-\n-error: identical args used in this `assert_eq!` macro call\n-  --> $DIR/eq_op_early.rs:9:16\n-   |\n-LL |     assert_eq!(a + 1, a + 1);\n-   |                ^^^^^^^^^^^^\n-\n-error: identical args used in this `assert_ne!` macro call\n-  --> $DIR/eq_op_early.rs:16:16\n-   |\n-LL |     assert_ne!(a, a);\n-   |                ^^^^\n-\n-error: identical args used in this `assert_ne!` macro call\n-  --> $DIR/eq_op_early.rs:17:16\n-   |\n-LL |     assert_ne!(a + 1, a + 1);\n-   |                ^^^^^^^^^^^^\n-\n-error: identical args used in this `debug_assert_eq!` macro call\n-  --> $DIR/eq_op_early.rs:24:22\n-   |\n-LL |     debug_assert_eq!(a, a);\n-   |                      ^^^^\n-\n-error: identical args used in this `debug_assert_eq!` macro call\n-  --> $DIR/eq_op_early.rs:25:22\n-   |\n-LL |     debug_assert_eq!(a + 1, a + 1);\n-   |                      ^^^^^^^^^^^^\n-\n-error: identical args used in this `debug_assert_ne!` macro call\n-  --> $DIR/eq_op_early.rs:32:22\n-   |\n-LL |     debug_assert_ne!(a, a);\n-   |                      ^^^^\n-\n-error: identical args used in this `debug_assert_ne!` macro call\n-  --> $DIR/eq_op_early.rs:33:22\n-   |\n-LL |     debug_assert_ne!(a + 1, a + 1);\n-   |                      ^^^^^^^^^^^^\n-\n-error: aborting due to 8 previous errors\n-"}]}