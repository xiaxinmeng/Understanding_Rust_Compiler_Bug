{"sha": "6317721cd951030f1f28801c34931c3c2322bc06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTc3MjFjZDk1MTAzMGYxZjI4ODAxYzM0OTMxYzNjMjMyMmJjMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-18T11:10:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-18T11:10:51Z"}, "message": "Auto merge of #69258 - JohnTitor:rollup-n2hljai, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #67272 (recursion_limit parsing handles overflows)\n - #68597 (Simplify `Skip::nth` and `Skip::last` implementations)\n - #68767 (macOS: avoid calling pthread_self() twice)\n - #69175 (Do not ICE when encountering `yield` inside `async` block)\n - #69223 (Ignore GDB versions with broken str printing.)\n - #69244 (configure: set LLVM flags with a value)\n - #69249 (Stabilize {f32, f64}::{LOG2_10, LOG10_2})\n - #69252 (Clean out unused directories for extra disk space)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fd553b64639306496f4c7123ed667f83f8fa49f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd553b64639306496f4c7123ed667f83f8fa49f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6317721cd951030f1f28801c34931c3c2322bc06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6317721cd951030f1f28801c34931c3c2322bc06", "html_url": "https://github.com/rust-lang/rust/commit/6317721cd951030f1f28801c34931c3c2322bc06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6317721cd951030f1f28801c34931c3c2322bc06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0176a9eef845e7421b7e2f7ef015333a41a7c027", "url": "https://api.github.com/repos/rust-lang/rust/commits/0176a9eef845e7421b7e2f7ef015333a41a7c027", "html_url": "https://github.com/rust-lang/rust/commit/0176a9eef845e7421b7e2f7ef015333a41a7c027"}, {"sha": "c1a05fbf00f4cf23e43036b2764a835ed4c3c96f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a05fbf00f4cf23e43036b2764a835ed4c3c96f", "html_url": "https://github.com/rust-lang/rust/commit/c1a05fbf00f4cf23e43036b2764a835ed4c3c96f"}], "stats": {"total": 198, "additions": 167, "deletions": 31}, "files": [{"sha": "2a46c563d1f8792c2dd8a777aa0b1ce8897eda53", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -62,9 +62,9 @@ def v(*args):\n o(\"use-libcxx\", \"llvm.use-libcxx\", \"build LLVM with libc++\")\n o(\"control-flow-guard\", \"rust.control-flow-guard\", \"Enable Control Flow Guard\")\n \n-o(\"cflags\", \"llvm.cflags\", \"build LLVM with these extra compiler flags\")\n-o(\"cxxflags\", \"llvm.cxxflags\", \"build LLVM with these extra compiler flags\")\n-o(\"ldflags\", \"llvm.ldflags\", \"build LLVM with these extra linker flags\")\n+v(\"llvm-cflags\", \"llvm.cflags\", \"build LLVM with these extra compiler flags\")\n+v(\"llvm-cxxflags\", \"llvm.cxxflags\", \"build LLVM with these extra compiler flags\")\n+v(\"llvm-ldflags\", \"llvm.ldflags\", \"build LLVM with these extra linker flags\")\n \n o(\"llvm-libunwind\", \"rust.llvm-libunwind\", \"use LLVM libunwind\")\n "}, {"sha": "c39f75aba89d85162b130d7e518c1db2f7b2eb89", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -31,6 +31,9 @@ steps:\n - bash: src/ci/scripts/setup-environment.sh\n   displayName: Setup environment\n \n+- bash: src/ci/scripts/clean-disk.sh\n+  displayName: Clean disk\n+\n - bash: src/ci/scripts/should-skip-this.sh\n   displayName: Decide whether to run this job\n "}, {"sha": "c50de37c492b422decb2542a70afd7c8fd93f4b1", "filename": "src/ci/scripts/clean-disk.sh", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Fci%2Fscripts%2Fclean-disk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Fci%2Fscripts%2Fclean-disk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fclean-disk.sh?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,16 @@\n+#!/bin/bash\n+# This script deletes some of the Azure-provided artifacts. We don't use these,\n+# and disk space is at a premium on our builders.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+# All the Linux builds happen inside Docker.\n+if isLinux; then\n+    # 6.7GB\n+    sudo rm -rf /opt/ghc\n+    # 16GB\n+    sudo rm -rf /usr/share/dotnet\n+fi"}, {"sha": "58606531a1acee91d4a98f07ee89bc56d51b63d7", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -1890,17 +1890,15 @@ where\n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n         // Can't just add n + self.n due to overflow.\n-        if self.n == 0 {\n-            self.iter.nth(n)\n-        } else {\n+        if self.n > 0 {\n             let to_skip = self.n;\n             self.n = 0;\n             // nth(n) skips n+1\n             if self.iter.nth(to_skip - 1).is_none() {\n                 return None;\n             }\n-            self.iter.nth(n)\n         }\n+        self.iter.nth(n)\n     }\n \n     #[inline]\n@@ -1916,17 +1914,13 @@ where\n \n     #[inline]\n     fn last(mut self) -> Option<I::Item> {\n-        if self.n == 0 {\n-            self.iter.last()\n-        } else {\n-            let next = self.next();\n-            if next.is_some() {\n-                // recurse. n should be 0.\n-                self.last().or(next)\n-            } else {\n-                None\n+        if self.n > 0 {\n+            // nth(n) skips n+1\n+            if self.iter.nth(self.n - 1).is_none() {\n+                return None;\n             }\n         }\n+        self.iter.last()\n     }\n \n     #[inline]"}, {"sha": "0a4fc6464ca977f0dc99e0f8eed30317c5876962", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -130,15 +130,15 @@ pub mod consts {\n     pub const LOG2_E: f32 = 1.44269504088896340735992468100189214_f32;\n \n     /// log<sub>2</sub>(10)\n-    #[unstable(feature = \"extra_log_consts\", issue = \"50540\")]\n+    #[stable(feature = \"extra_log_consts\", since = \"1.43.0\")]\n     pub const LOG2_10: f32 = 3.32192809488736234787031942948939018_f32;\n \n     /// log<sub>10</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG10_E: f32 = 0.434294481903251827651128918916605082_f32;\n \n     /// log<sub>10</sub>(2)\n-    #[unstable(feature = \"extra_log_consts\", issue = \"50540\")]\n+    #[stable(feature = \"extra_log_consts\", since = \"1.43.0\")]\n     pub const LOG10_2: f32 = 0.301029995663981195213738894724493027_f32;\n \n     /// ln(2)"}, {"sha": "a3acf0f23c4e2076abad096491768bbeb32ea80b", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -126,15 +126,15 @@ pub mod consts {\n     pub const E: f64 = 2.71828182845904523536028747135266250_f64;\n \n     /// log<sub>2</sub>(10)\n-    #[unstable(feature = \"extra_log_consts\", issue = \"50540\")]\n+    #[stable(feature = \"extra_log_consts\", since = \"1.43.0\")]\n     pub const LOG2_10: f64 = 3.32192809488736234787031942948939018_f64;\n \n     /// log<sub>2</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG2_E: f64 = 1.44269504088896340735992468100189214_f64;\n \n     /// log<sub>10</sub>(2)\n-    #[unstable(feature = \"extra_log_consts\", issue = \"50540\")]\n+    #[stable(feature = \"extra_log_consts\", since = \"1.43.0\")]\n     pub const LOG10_2: f64 = 0.301029995663981195213738894724493027_f64;\n \n     /// log<sub>10</sub>(e)"}, {"sha": "a4f9193c0eb649ed535b3fad399150158b027373", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n \n-pub fn check_crate(hir_map: &Map<'_>) {\n+pub fn check_crate(hir_map: &Map<'_>, sess: &rustc_session::Session) {\n     hir_map.dep_graph.assert_ignored();\n \n     let errors = Lock::new(Vec::new());\n@@ -24,7 +24,7 @@ pub fn check_crate(hir_map: &Map<'_>) {\n \n     if !errors.is_empty() {\n         let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n-        bug!(\"{}\", message);\n+        sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n     }\n }\n "}, {"sha": "adda0cde24fc08b17fb2b86a00d8d8e40a7de5e5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -1235,7 +1235,7 @@ pub fn map_crate<'hir>(\n     let map = Map { krate, dep_graph, crate_hash, map, hir_to_node_id, definitions };\n \n     sess.time(\"validate_HIR_map\", || {\n-        hir_id_validator::check_crate(&map);\n+        hir_id_validator::check_crate(&map, sess);\n     });\n \n     map"}, {"sha": "055d70effc6e6886257703e4e0b2f330ba2bd61b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -46,6 +46,7 @@\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(hash_raw_entry)]\n+#![feature(int_error_matching)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "be530da5910df588d180edc9e28f2f630e40aa6d", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -6,26 +6,60 @@\n // just peeks and looks for that attribute.\n \n use crate::session::Session;\n+use core::num::IntErrorKind;\n+use rustc::bug;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;\n \n use rustc_data_structures::sync::Once;\n \n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n-    update_limit(krate, &sess.recursion_limit, sym::recursion_limit, 128);\n-    update_limit(krate, &sess.type_length_limit, sym::type_length_limit, 1048576);\n+    update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);\n+    update_limit(sess, krate, &sess.type_length_limit, sym::type_length_limit, 1048576);\n }\n \n-fn update_limit(krate: &ast::Crate, limit: &Once<usize>, name: Symbol, default: usize) {\n+fn update_limit(\n+    sess: &Session,\n+    krate: &ast::Crate,\n+    limit: &Once<usize>,\n+    name: Symbol,\n+    default: usize,\n+) {\n     for attr in &krate.attrs {\n         if !attr.check_name(name) {\n             continue;\n         }\n \n         if let Some(s) = attr.value_str() {\n-            if let Some(n) = s.as_str().parse().ok() {\n-                limit.set(n);\n-                return;\n+            match s.as_str().parse() {\n+                Ok(n) => {\n+                    limit.set(n);\n+                    return;\n+                }\n+                Err(e) => {\n+                    let mut err = sess.struct_span_err(\n+                        attr.span,\n+                        \"`recursion_limit` must be a non-negative integer\",\n+                    );\n+\n+                    let value_span = attr\n+                        .meta()\n+                        .and_then(|meta| meta.name_value_literal().cloned())\n+                        .map(|lit| lit.span)\n+                        .unwrap_or(attr.span);\n+\n+                    let error_str = match e.kind() {\n+                        IntErrorKind::Overflow => \"`recursion_limit` is too large\",\n+                        IntErrorKind::Empty => \"`recursion_limit` must be a non-negative integer\",\n+                        IntErrorKind::InvalidDigit => \"not a valid integer\",\n+                        IntErrorKind::Underflow => bug!(\"`recursion_limit` should never underflow\"),\n+                        IntErrorKind::Zero => bug!(\"zero is a valid `recursion_limit`\"),\n+                        kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n+                    };\n+\n+                    err.span_label(value_span, error_str);\n+                    err.emit();\n+                }\n             }\n         }\n     }"}, {"sha": "674d4c71138018c947b7b3b79de75e5f08bbf47e", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -255,8 +255,9 @@ pub mod guard {\n \n     #[cfg(target_os = \"macos\")]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n-        let stackaddr = libc::pthread_get_stackaddr_np(libc::pthread_self()) as usize\n-            - libc::pthread_get_stacksize_np(libc::pthread_self());\n+        let th = libc::pthread_self();\n+        let stackaddr =\n+            libc::pthread_get_stackaddr_np(th) as usize - libc::pthread_get_stacksize_np(th);\n         Some(stackaddr as *mut libc::c_void)\n     }\n "}, {"sha": "bc4fac3183cea7a1d3b9bc27e800ab443eb34599", "filename": "src/test/debuginfo/empty-string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fdebuginfo%2Fempty-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fdebuginfo%2Fempty-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fempty-string.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -2,6 +2,7 @@\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n // min-gdb-version: 7.7\n+// ignore-gdb-version: 7.11.90 - 8.0.9\n // min-lldb-version: 310\n \n // === GDB TESTS ==================================================================================="}, {"sha": "8125a7a9bb6648f13da50ef2be82cd2b2729b4b1", "filename": "src/test/ui/generator/async-generator-issue-67158.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Fgenerator%2Fasync-generator-issue-67158.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Fgenerator%2Fasync-generator-issue-67158.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fasync-generator-issue-67158.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,6 @@\n+#![feature(generators)]\n+// edition:2018\n+// Regression test for #67158.\n+fn main() {\n+    async { yield print!(\":C\") }; //~ ERROR `async` generators are not yet supported\n+}"}, {"sha": "7270d188e8b88ea5ab3c743ef9b2f0a15a41be85", "filename": "src/test/ui/generator/async-generator-issue-67158.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Fgenerator%2Fasync-generator-issue-67158.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Fgenerator%2Fasync-generator-issue-67158.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fasync-generator-issue-67158.stderr?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,9 @@\n+error[E0727]: `async` generators are not yet supported\n+  --> $DIR/async-generator-issue-67158.rs:5:13\n+   |\n+LL |     async { yield print!(\":C\") };\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0727`."}, {"sha": "2a064f3e1159946cb1c15683422f392b518d5a69", "filename": "src/test/ui/recursion_limit/empty.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,6 @@\n+// Test the parse error for an empty recursion_limit\n+\n+#![recursion_limit = \"\"] //~ ERROR `recursion_limit` must be a non-negative integer\n+                         //~| `recursion_limit` must be a non-negative integer\n+\n+fn main() {}"}, {"sha": "690c33a746307aaf2640b121191d9bb2ff857ce6", "filename": "src/test/ui/recursion_limit/empty.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,10 @@\n+error: `recursion_limit` must be a non-negative integer\n+  --> $DIR/empty.rs:3:1\n+   |\n+LL | #![recursion_limit = \"\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^--^\n+   |                      |\n+   |                      `recursion_limit` must be a non-negative integer\n+\n+error: aborting due to previous error\n+"}, {"sha": "903d8040476961837d4791f9772910ffd71ebe80", "filename": "src/test/ui/recursion_limit/invalid_digit.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,6 @@\n+// Test the parse error for an invalid digit in recursion_limit\n+\n+#![recursion_limit = \"-100\"] //~ ERROR `recursion_limit` must be a non-negative integer\n+                             //~| not a valid integer\n+\n+fn main() {}"}, {"sha": "1dcfea547c0bd5a3381ce50bec84934cac36af01", "filename": "src/test/ui/recursion_limit/invalid_digit.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,10 @@\n+error: `recursion_limit` must be a non-negative integer\n+  --> $DIR/invalid_digit.rs:3:1\n+   |\n+LL | #![recursion_limit = \"-100\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^------^\n+   |                      |\n+   |                      not a valid integer\n+\n+error: aborting due to previous error\n+"}, {"sha": "6487b1350aa98cd93f393fad50eb295e12f4ea39", "filename": "src/test/ui/recursion_limit/overflow.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,7 @@\n+// Test the parse error for an overflowing recursion_limit\n+\n+#![recursion_limit = \"999999999999999999999999\"]\n+//~^ ERROR `recursion_limit` must be a non-negative integer\n+//~| `recursion_limit` is too large\n+\n+fn main() {}"}, {"sha": "c3fc11989dcec7845cbd5c669fb689ddb144059a", "filename": "src/test/ui/recursion_limit/overflow.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,10 @@\n+error: `recursion_limit` must be a non-negative integer\n+  --> $DIR/overflow.rs:3:1\n+   |\n+LL | #![recursion_limit = \"999999999999999999999999\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^--------------------------^\n+   |                      |\n+   |                      `recursion_limit` is too large\n+\n+error: aborting due to previous error\n+"}, {"sha": "f7199944e0063de178d0eaae838dc702670050c6", "filename": "src/test/ui/recursion_limit/zero.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,12 @@\n+// Test that a `recursion_limit` of 0 is valid\n+\n+#![recursion_limit = \"0\"]\n+\n+macro_rules! test {\n+    () => {};\n+    ($tt:tt) => { test!(); };\n+}\n+\n+test!(test); //~ ERROR 10:1: 10:13: recursion limit reached while expanding `test!`\n+\n+fn main() {}"}, {"sha": "6358805d89dee2c095f1cdccd16c83898598f45e", "filename": "src/test/ui/recursion_limit/zero.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6317721cd951030f1f28801c34931c3c2322bc06/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr?ref=6317721cd951030f1f28801c34931c3c2322bc06", "patch": "@@ -0,0 +1,10 @@\n+error: recursion limit reached while expanding `test!`\n+  --> $DIR/zero.rs:10:1\n+   |\n+LL | test!(test);\n+   | ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a `#![recursion_limit=\"0\"]` attribute to your crate (`zero`)\n+\n+error: aborting due to previous error\n+"}]}