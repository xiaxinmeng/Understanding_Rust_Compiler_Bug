{"sha": "2f219b827e8741aa735eedca204b93eb11ed9fe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjE5YjgyN2U4NzQxYWE3MzVlZWRjYTIwNGI5M2ViMTFlZDlmZTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-22T13:16:07Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-22T13:16:07Z"}, "message": "fix an ice related to associated types\n\nfixes #1341", "tree": {"sha": "9f469409317a840603800a7f15ab65b0242a6455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f469409317a840603800a7f15ab65b0242a6455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f219b827e8741aa735eedca204b93eb11ed9fe0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYW9IXAAoJEFbW7qD8Z6xG63oQAIlfLipRWD8AFrkGYWv1TEGn\nA3ZxY2fiPJdUL1hLSoGK+LXVjzlau8T9/WOd0xcj0gfVD0cSkV9fFiAgBpKTkkD8\nYCis+A2rY4cA2edCHNjyhkKG0EHSzV8q2XyViQRNLlCV44o9iMDCUD3VPNDcFpYR\n3UIQLLXuJ6+dmhS62LpDCZKWCUT1P3kbH743Tlx+xXrI8Is5QR4D4fOdOI+6jTcx\nRPOm1ALX9eyF7Urogm41J/20xq1Pz1vdNMA5uAPGdwzl8ZVtlq/LUcqfiO1phfyO\nTEE+dL2BQqVBl/ft7CjgS8aLuZNckHVba5AtIfgPVMQax6I/VqI9ctBVPieXd+ww\nwObKnNlthh73V0nUSMJrLqNe0yR4eSYGUsWvN4HZAOtSJF7fe3CepyVDKZ/BlEYP\nQcjI/qW8Yf149KRq0dsU3mI1rx7XH+jMa5Uba1vz/9Aciuw7QdO37td8m5JfXV7u\nJCWpIqOOvGFCX2Vw8vpWB9gz3huJyYz3iJMrFZrY0386E1tlfMYf+nfdKQuZ3mtJ\niFMKcqwNFOKDJBnb7YhQWAaaclZhcNLTfN8qdZZB2xKjdOjA62R1BQgFyyW+Mgjp\n5yJQa/1EgaGzL9zt1aa7GQjsi88ooTo3RUj7jQLyreYMthOJjIQZ5xOx4y9olypP\n3n4pvOUhCmwAXLhGuKal\n=6qGV\n-----END PGP SIGNATURE-----", "payload": "tree 9f469409317a840603800a7f15ab65b0242a6455\nparent cb861a1bd11f1a143283a1d90df3475cccc22e3a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482412567 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482412567 +0100\n\nfix an ice related to associated types\n\nfixes #1341"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f219b827e8741aa735eedca204b93eb11ed9fe0", "html_url": "https://github.com/rust-lang/rust/commit/2f219b827e8741aa735eedca204b93eb11ed9fe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f219b827e8741aa735eedca204b93eb11ed9fe0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb861a1bd11f1a143283a1d90df3475cccc22e3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb861a1bd11f1a143283a1d90df3475cccc22e3a", "html_url": "https://github.com/rust-lang/rust/commit/cb861a1bd11f1a143283a1d90df3475cccc22e3a"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "80e17e37acb0ed40542d2035a4159c031c16c844", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f219b827e8741aa735eedca204b93eb11ed9fe0/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f219b827e8741aa735eedca204b93eb11ed9fe0/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=2f219b827e8741aa735eedca204b93eb11ed9fe0", "patch": "@@ -1,12 +1,12 @@\n use rustc::hir::*;\n use rustc::hir::intravisit as visit;\n use rustc::hir::map::Node::{NodeExpr, NodeStmt};\n-use rustc::infer::InferCtxt;\n use rustc::lint::*;\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::{cmt, Categorization};\n use rustc::ty;\n use rustc::ty::layout::TargetDataLayout;\n+use rustc::traits::Reveal;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n@@ -46,10 +46,9 @@ fn is_non_trait_box(ty: ty::Ty) -> bool {\n     }\n }\n \n-struct EscapeDelegate<'a, 'tcx: 'a + 'gcx, 'gcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+struct EscapeDelegate<'a, 'tcx: 'a> {\n     set: NodeSet,\n-    infcx: &'a InferCtxt<'a, 'gcx, 'gcx>,\n+    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n     target: TargetDataLayout,\n     too_large_for_stack: u64,\n }\n@@ -70,20 +69,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         _: Span,\n         id: NodeId\n     ) {\n-        let param_env = ty::ParameterEnvironment::for_item(cx.tcx, id);\n-\n-        let infcx = cx.tcx.borrowck_fake_infer_ctxt(param_env);\n-\n         // we store the infcx because it is expensive to recreate\n         // the context each time.\n         let mut v = EscapeDelegate {\n-            tcx: cx.tcx,\n             set: NodeSet(),\n-            infcx: &infcx,\n+            tcx: cx.tcx,\n             target: TargetDataLayout::parse(cx.sess()),\n             too_large_for_stack: self.too_large_for_stack,\n         };\n+        let param_env = ty::ParameterEnvironment::for_item(cx.tcx, id);\n \n+        let infcx = cx.tcx.borrowck_fake_infer_ctxt(param_env);\n         {\n             let mut vis = ExprUseVisitor::new(&mut v, &infcx);\n             vis.walk_fn(decl, body);\n@@ -98,7 +94,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-impl<'a, 'tcx: 'a + 'gcx, 'gcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx, 'gcx> {\n+impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n     fn consume(&mut self, _: NodeId, _: Span, cmt: cmt<'tcx>, mode: ConsumeMode) {\n         if let Categorization::Local(lid) = cmt.cat {\n             if self.set.contains(&lid) {\n@@ -207,18 +203,20 @@ impl<'a, 'tcx: 'a + 'gcx, 'gcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx,\n     fn mutate(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: MutateMode) {}\n }\n \n-impl<'a, 'tcx: 'a + 'gcx, 'gcx: 'a> EscapeDelegate<'a, 'tcx, 'gcx> {\n-    fn is_large_box(&self, ty: ty::Ty<'gcx>) -> bool {\n+impl<'a, 'tcx: 'a> EscapeDelegate<'a, 'tcx> {\n+    fn is_large_box(&self, ty: ty::Ty<'tcx>) -> bool {\n         // Large types need to be boxed to avoid stack\n         // overflows.\n         match ty.sty {\n             ty::TyBox(inner) => {\n-                if let Ok(layout) = inner.layout(self.infcx) {\n-                    let size = layout.size(&self.target);\n-                    size.bytes() > self.too_large_for_stack\n-                } else {\n-                    false\n-                }\n+                self.tcx.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n+                    if let Ok(layout) = inner.layout(&infcx) {\n+                        let size = layout.size(&self.target);\n+                        size.bytes() > self.too_large_for_stack\n+                    } else {\n+                        false\n+                    }\n+                })\n             },\n             _ => false,\n         }"}, {"sha": "1d4bc89ef4923fdf9d3cb775730276a360e7055c", "filename": "tests/compile-fail/escape_analysis.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f219b827e8741aa735eedca204b93eb11ed9fe0/tests%2Fcompile-fail%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f219b827e8741aa735eedca204b93eb11ed9fe0/tests%2Fcompile-fail%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fescape_analysis.rs?ref=2f219b827e8741aa735eedca204b93eb11ed9fe0", "patch": "@@ -112,3 +112,20 @@ fn nowarn_large_array() {\n         ref y => ()\n     }\n }\n+\n+\n+/// ICE regression test\n+pub trait Foo {\n+    type Item;\n+}\n+\n+impl<'a> Foo for &'a () {\n+    type Item = ();\n+}\n+\n+pub struct PeekableSeekable<I: Foo> {\n+    _peeked: I::Item,\n+}\n+\n+pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () { //~ ERROR local variable doesn't need\n+}"}]}