{"sha": "efb468866e5757d404c220c812f52f8657b2fdce", "node_id": "C_kwDOAAsO6NoAKGVmYjQ2ODg2NmU1NzU3ZDQwNGMyMjBjODEyZjUyZjg2NTdiMmZkY2U", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T10:04:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T10:11:53Z"}, "message": "Use the correct place for enum variants.", "tree": {"sha": "0fbd9cd91c47f96bffa3ebd990a2f5abd7396ad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fbd9cd91c47f96bffa3ebd990a2f5abd7396ad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb468866e5757d404c220c812f52f8657b2fdce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb468866e5757d404c220c812f52f8657b2fdce", "html_url": "https://github.com/rust-lang/rust/commit/efb468866e5757d404c220c812f52f8657b2fdce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb468866e5757d404c220c812f52f8657b2fdce/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7213eaa1c06bc75e6730fd5a7dea869dbdf4bed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7213eaa1c06bc75e6730fd5a7dea869dbdf4bed1", "html_url": "https://github.com/rust-lang/rust/commit/7213eaa1c06bc75e6730fd5a7dea869dbdf4bed1"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "0637143a145e4b91a5248cc65d03721463630778", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efb468866e5757d404c220c812f52f8657b2fdce/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb468866e5757d404c220c812f52f8657b2fdce/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=efb468866e5757d404c220c812f52f8657b2fdce", "patch": "@@ -134,18 +134,21 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                         AggregateKind::Adt(def_id, variant_index, ..) => {\n                             match self.tcx.def_kind(def_id) {\n                                 DefKind::Struct => (Some(target_idx), None),\n-                                DefKind::Enum => (Some(target_idx), Some(variant_index)),\n+                                DefKind::Enum => (\n+                                    self.map.apply(target_idx, TrackElem::Variant(variant_index)),\n+                                    Some(variant_index),\n+                                ),\n                                 _ => (None, None),\n                             }\n                         }\n                         _ => (None, None),\n                     };\n-                    if let Some(target) = variant_target {\n+                    if let Some(variant_target_idx) = variant_target {\n                         for (field_index, operand) in operands.iter().enumerate() {\n-                            if let Some(field) = self\n-                                .map()\n-                                .apply(target, TrackElem::Field(Field::from_usize(field_index)))\n-                            {\n+                            if let Some(field) = self.map().apply(\n+                                variant_target_idx,\n+                                TrackElem::Field(Field::from_usize(field_index)),\n+                            ) {\n                                 let result = self.handle_operand(operand, state);\n                                 state.insert_idx(field, result, self.map());\n                             }\n@@ -154,6 +157,11 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                     if let Some(variant_index) = variant_index\n                         && let Some(discr_idx) = self.map().apply(target_idx, TrackElem::Discriminant)\n                     {\n+                        // We are assigning the discriminant as part of an aggregate.\n+                        // This discriminant can only alias a variant field's value if the operand\n+                        // had an invalid value for that type.\n+                        // Using invalid values is UB, so we are allowed to perform the assignment\n+                        // without extra flooding.\n                         let enum_ty = target.ty(self.local_decls, self.tcx).ty;\n                         if let Some(discr_val) = self.eval_discriminant(enum_ty, variant_index) {\n                             state.insert_value_idx(discr_idx, FlatSet::Elem(discr_val), &self.map);"}, {"sha": "22bdc35d694c1168a71a0ab12063b289418866b8", "filename": "tests/mir-opt/dataflow-const-prop/enum.simple.DataflowConstProp.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efb468866e5757d404c220c812f52f8657b2fdce/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/efb468866e5757d404c220c812f52f8657b2fdce/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff?ref=efb468866e5757d404c220c812f52f8657b2fdce", "patch": "@@ -45,8 +45,10 @@\n   \n       bb3: {\n           StorageLive(_4);                 // scope 1 at $DIR/enum.rs:+2:29: +2:30\n-          _4 = ((_1 as V1).0: i32);        // scope 1 at $DIR/enum.rs:+2:29: +2:30\n-          _2 = _4;                         // scope 3 at $DIR/enum.rs:+2:35: +2:36\n+-         _4 = ((_1 as V1).0: i32);        // scope 1 at $DIR/enum.rs:+2:29: +2:30\n+-         _2 = _4;                         // scope 3 at $DIR/enum.rs:+2:35: +2:36\n++         _4 = const 0_i32;                // scope 1 at $DIR/enum.rs:+2:29: +2:30\n++         _2 = const 0_i32;                // scope 3 at $DIR/enum.rs:+2:35: +2:36\n           StorageDead(_4);                 // scope 1 at $DIR/enum.rs:+2:35: +2:36\n           goto -> bb4;                     // scope 1 at $DIR/enum.rs:+2:35: +2:36\n       }"}]}