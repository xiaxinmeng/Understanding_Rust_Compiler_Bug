{"sha": "b09ef114bbd5f057803fc99f0b78a01e7c1138fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOWVmMTE0YmJkNWYwNTc4MDNmYzk5ZjBiNzhhMDFlN2MxMTM4ZmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-20T03:10:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-20T03:10:58Z"}, "message": "Rollup merge of #77761 - tmiasko:pthread-mutex, r=cuviper\n\nAssert that pthread mutex initialization succeeded\n\nIf pthread mutex initialization fails, the failure will go unnoticed unless\ndebug assertions are enabled. Any subsequent use of mutex will also silently\nfail, since return values from lock & unlock operations are similarly checked\nonly through debug assertions.\n\nIn some implementations the mutex initialization requires a memory\nallocation and so it does fail in practice.\n\nAssert that initialization succeeds to ensure that mutex guarantees\nmutual exclusion.\n\nFixes #34966.", "tree": {"sha": "e6f959f61740103f4a76e91ceada7056666c8c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f959f61740103f4a76e91ceada7056666c8c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b09ef114bbd5f057803fc99f0b78a01e7c1138fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjlVCCRBK7hj4Ov3rIwAAdHIIAHTsMF1olPqHopANTD7BHXc6\nQlnIcvieIUvtN4mme5G/UMVY7o6qR++jPA0v8EDH2P4ZnNQAIXWlh6fic5NJ8Jv1\nEbqD9XLfmyYR8mz/Bfqxg4KJExJOhC2Re8NJcTrmrxij4moLSB63rMKR5dh8Kngv\nXX2NyfvmWMpl6C65fYls64pTJuQ8Mq74CbXl1DwckpvPbmAcgO/VCbVr0WYGBTZq\nSwCuDyryolHCVUnfAhKkkBGFReQ3KyMmTVQn2cp8m+aySPrPDmea0fKktEKGJvQg\ngG/8GR59LQQh8DZFR1P7765Cs36S44/dRONon2gQXCASWtWva/paZz29kj+xrZE=\n=1ae+\n-----END PGP SIGNATURE-----\n", "payload": "tree e6f959f61740103f4a76e91ceada7056666c8c0f\nparent c5b0a88669e26e1d3ee44bf4029f07f572a90a79\nparent 21c29b1e954d494026b07241aa8365837d5ecfdb\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603163458 +0900\ncommitter GitHub <noreply@github.com> 1603163458 +0900\n\nRollup merge of #77761 - tmiasko:pthread-mutex, r=cuviper\n\nAssert that pthread mutex initialization succeeded\n\nIf pthread mutex initialization fails, the failure will go unnoticed unless\ndebug assertions are enabled. Any subsequent use of mutex will also silently\nfail, since return values from lock & unlock operations are similarly checked\nonly through debug assertions.\n\nIn some implementations the mutex initialization requires a memory\nallocation and so it does fail in practice.\n\nAssert that initialization succeeds to ensure that mutex guarantees\nmutual exclusion.\n\nFixes #34966.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b09ef114bbd5f057803fc99f0b78a01e7c1138fa", "html_url": "https://github.com/rust-lang/rust/commit/b09ef114bbd5f057803fc99f0b78a01e7c1138fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b09ef114bbd5f057803fc99f0b78a01e7c1138fa/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b0a88669e26e1d3ee44bf4029f07f572a90a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b0a88669e26e1d3ee44bf4029f07f572a90a79", "html_url": "https://github.com/rust-lang/rust/commit/c5b0a88669e26e1d3ee44bf4029f07f572a90a79"}, {"sha": "21c29b1e954d494026b07241aa8365837d5ecfdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c29b1e954d494026b07241aa8365837d5ecfdb", "html_url": "https://github.com/rust-lang/rust/commit/21c29b1e954d494026b07241aa8365837d5ecfdb"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "b28c6d85b7c725b7b6667378248d00aa77f426c9", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b09ef114bbd5f057803fc99f0b78a01e7c1138fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b09ef114bbd5f057803fc99f0b78a01e7c1138fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=b09ef114bbd5f057803fc99f0b78a01e7c1138fa", "patch": "@@ -220,6 +220,10 @@ where\n     }\n }\n \n+pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {\n+    if error == 0 { Ok(()) } else { Err(crate::io::Error::from_raw_os_error(error)) }\n+}\n+\n // On Unix-like platforms, libc::abort will unregister signal handlers\n // including the SIGABRT handler, preventing the abort from being blocked, and\n // fclose streams, with the side effect of flushing them so libc buffered"}, {"sha": "89c55eb859d0944daec0d28263bc2d72d48f4702", "filename": "library/std/src/sys/unix/mutex.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b09ef114bbd5f057803fc99f0b78a01e7c1138fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b09ef114bbd5f057803fc99f0b78a01e7c1138fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs?ref=b09ef114bbd5f057803fc99f0b78a01e7c1138fa", "patch": "@@ -1,5 +1,6 @@\n use crate::cell::UnsafeCell;\n use crate::mem::MaybeUninit;\n+use crate::sys::cvt_nz;\n \n pub struct Mutex {\n     inner: UnsafeCell<libc::pthread_mutex_t>,\n@@ -51,14 +52,11 @@ impl Mutex {\n         // PTHREAD_MUTEX_NORMAL which is guaranteed to deadlock if we try to\n         // re-lock it from the same thread, thus avoiding undefined behavior.\n         let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n-        let r = libc::pthread_mutexattr_init(attr.as_mut_ptr());\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutexattr_settype(attr.as_mut_ptr(), libc::PTHREAD_MUTEX_NORMAL);\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutex_init(self.inner.get(), attr.as_ptr());\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n-        debug_assert_eq!(r, 0);\n+        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\n+        let attr = PthreadMutexAttr(&mut attr);\n+        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_NORMAL))\n+            .unwrap();\n+        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\n     }\n     #[inline]\n     pub unsafe fn lock(&self) {\n@@ -106,15 +104,11 @@ impl ReentrantMutex {\n \n     pub unsafe fn init(&self) {\n         let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n-        let result = libc::pthread_mutexattr_init(attr.as_mut_ptr());\n-        debug_assert_eq!(result, 0);\n-        let result =\n-            libc::pthread_mutexattr_settype(attr.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE);\n-        debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutex_init(self.inner.get(), attr.as_ptr());\n-        debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n-        debug_assert_eq!(result, 0);\n+        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\n+        let attr = PthreadMutexAttr(&mut attr);\n+        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE))\n+            .unwrap();\n+        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\n     }\n \n     pub unsafe fn lock(&self) {\n@@ -137,3 +131,14 @@ impl ReentrantMutex {\n         debug_assert_eq!(result, 0);\n     }\n }\n+\n+struct PthreadMutexAttr<'a>(&'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n+\n+impl Drop for PthreadMutexAttr<'_> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            let result = libc::pthread_mutexattr_destroy(self.0.as_mut_ptr());\n+            debug_assert_eq!(result, 0);\n+        }\n+    }\n+}"}, {"sha": "a590c74435639cc87658216711321afba545ee5a", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b09ef114bbd5f057803fc99f0b78a01e7c1138fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b09ef114bbd5f057803fc99f0b78a01e7c1138fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=b09ef114bbd5f057803fc99f0b78a01e7c1138fa", "patch": "@@ -281,7 +281,7 @@ impl Command {\n         envp: Option<&CStringArray>,\n     ) -> io::Result<Option<Process>> {\n         use crate::mem::MaybeUninit;\n-        use crate::sys;\n+        use crate::sys::{self, cvt_nz};\n \n         if self.get_gid().is_some()\n             || self.get_uid().is_some()\n@@ -343,10 +343,6 @@ impl Command {\n             }\n         }\n \n-        fn cvt_nz(error: libc::c_int) -> io::Result<()> {\n-            if error == 0 { Ok(()) } else { Err(io::Error::from_raw_os_error(error)) }\n-        }\n-\n         unsafe {\n             let mut attrs = MaybeUninit::uninit();\n             cvt_nz(libc::posix_spawnattr_init(attrs.as_mut_ptr()))?;"}]}