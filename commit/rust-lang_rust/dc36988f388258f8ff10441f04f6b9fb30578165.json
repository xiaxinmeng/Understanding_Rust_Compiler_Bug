{"sha": "dc36988f388258f8ff10441f04f6b9fb30578165", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMzY5ODhmMzg4MjU4ZjhmZjEwNDQxZjA0ZjZiOWZiMzA1NzgxNjU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-03T11:09:11Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-03T11:34:49Z"}, "message": "Add test for futex syscall.", "tree": {"sha": "3c4dc5001f9909745d4b8ddc158a245362c7fc6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c4dc5001f9909745d4b8ddc158a245362c7fc6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc36988f388258f8ff10441f04f6b9fb30578165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc36988f388258f8ff10441f04f6b9fb30578165", "html_url": "https://github.com/rust-lang/rust/commit/dc36988f388258f8ff10441f04f6b9fb30578165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc36988f388258f8ff10441f04f6b9fb30578165/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d764c57502c1f6badb71684b5d5b5ee081f4dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d764c57502c1f6badb71684b5d5b5ee081f4dda", "html_url": "https://github.com/rust-lang/rust/commit/9d764c57502c1f6badb71684b5d5b5ee081f4dda"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "391e9524324aecbfdf71573571164bb6062c6c25", "filename": "tests/run-pass/concurrency/linux-futex.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/dc36988f388258f8ff10441f04f6b9fb30578165/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc36988f388258f8ff10441f04f6b9fb30578165/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.rs?ref=dc36988f388258f8ff10441f04f6b9fb30578165", "patch": "@@ -0,0 +1,132 @@\n+// Unfortunately, the test framework does not support 'only-linux',\n+// so we need to ignore Windows and macOS instead.\n+// ignore-macos: Uses Linux-only APIs\n+// ignore-windows: Uses Linux-only APIs\n+// compile-flags: -Zmiri-disable-isolation\n+\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+use std::ptr;\n+use std::thread;\n+use std::time::{Duration, Instant};\n+\n+fn wake_nobody() {\n+    let futex = 0;\n+\n+    // Wake 1 waiter. Expect zero waiters woken up, as nobody is waiting.\n+    unsafe {\n+        assert_eq!(libc::syscall(\n+            libc::SYS_futex,\n+            &futex as *const i32,\n+            libc::FUTEX_WAKE,\n+            1,\n+        ), 0);\n+    }\n+\n+    // Same, but without omitting the unused arguments.\n+    unsafe {\n+        assert_eq!(libc::syscall(\n+            libc::SYS_futex,\n+            &futex as *const i32,\n+            libc::FUTEX_WAKE,\n+            1,\n+            0,\n+            0,\n+            0,\n+        ), 0);\n+    }\n+}\n+\n+fn wake_dangling() {\n+    let futex = Box::new(0);\n+    let ptr: *const i32 = &*futex;\n+    drop(futex);\n+\n+    // Wake 1 waiter. Expect zero waiters woken up, as nobody is waiting.\n+    unsafe {\n+        assert_eq!(libc::syscall(\n+            libc::SYS_futex,\n+            ptr,\n+            libc::FUTEX_WAKE,\n+            1,\n+        ), 0);\n+    }\n+}\n+\n+fn wait_wrong_val() {\n+    let futex: i32 = 123;\n+\n+    // Only wait if the futex value is 456.\n+    unsafe {\n+        assert_eq!(libc::syscall(\n+            libc::SYS_futex,\n+            &futex as *const i32,\n+            libc::FUTEX_WAIT,\n+            456,\n+            ptr::null::<libc::timespec>(),\n+        ), -1);\n+        assert_eq!(*libc::__errno_location(), libc::EAGAIN);\n+    }\n+}\n+\n+fn wait_timeout() {\n+    let start = Instant::now();\n+\n+    let futex: i32 = 123;\n+\n+    // Wait for 200ms, with nobody waking us up early.\n+    unsafe {\n+        assert_eq!(libc::syscall(\n+            libc::SYS_futex,\n+            &futex as *const i32,\n+            libc::FUTEX_WAIT,\n+            123,\n+            &libc::timespec {\n+                tv_sec: 0,\n+                tv_nsec: 200_000_000,\n+            },\n+        ), -1);\n+        assert_eq!(*libc::__errno_location(), libc::ETIMEDOUT);\n+    }\n+\n+    assert!((200..500).contains(&start.elapsed().as_millis()));\n+}\n+\n+fn wait_wake() {\n+    let start = Instant::now();\n+\n+    static FUTEX: i32 = 0;\n+\n+    thread::spawn(move || {\n+        thread::sleep(Duration::from_millis(200));\n+        unsafe {\n+            assert_eq!(libc::syscall(\n+                libc::SYS_futex,\n+                &FUTEX as *const i32,\n+                libc::FUTEX_WAKE,\n+                10, // Wake up at most 10 threads.\n+            ), 1); // Woken up one thread.\n+        }\n+    });\n+\n+    unsafe {\n+        assert_eq!(libc::syscall(\n+            libc::SYS_futex,\n+            &FUTEX as *const i32,\n+            libc::FUTEX_WAIT,\n+            0,\n+            ptr::null::<libc::timespec>(),\n+        ), 0);\n+    }\n+\n+    assert!((200..500).contains(&start.elapsed().as_millis()));\n+}\n+\n+fn main() {\n+    wake_nobody();\n+    wake_dangling();\n+    wait_wrong_val();\n+    wait_timeout();\n+    wait_wake();\n+}"}, {"sha": "2dbfb7721d3683fb4d82c2ce771e3784be86fdc9", "filename": "tests/run-pass/concurrency/linux-futex.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc36988f388258f8ff10441f04f6b9fb30578165/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc36988f388258f8ff10441f04f6b9fb30578165/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.stderr?ref=dc36988f388258f8ff10441f04f6b9fb30578165", "patch": "@@ -0,0 +1,2 @@\n+warning: thread support is experimental. For example, Miri does not detect data races yet.\n+"}]}