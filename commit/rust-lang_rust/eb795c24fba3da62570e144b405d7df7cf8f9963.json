{"sha": "eb795c24fba3da62570e144b405d7df7cf8f9963", "node_id": "C_kwDOAAsO6NoAKGViNzk1YzI0ZmJhM2RhNjI1NzBlMTQ0YjQwNWQ3ZGY3Y2Y4Zjk5NjM", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2022-02-23T23:30:07Z"}, "committer": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2022-02-23T23:30:07Z"}, "message": "word wrpa", "tree": {"sha": "fa2ae69aa4192fe7737c4f4bc34f77dd977c8210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa2ae69aa4192fe7737c4f4bc34f77dd977c8210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb795c24fba3da62570e144b405d7df7cf8f9963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb795c24fba3da62570e144b405d7df7cf8f9963", "html_url": "https://github.com/rust-lang/rust/commit/eb795c24fba3da62570e144b405d7df7cf8f9963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb795c24fba3da62570e144b405d7df7cf8f9963/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46d9f6c89fc50dd80fb502677bc8d04e8260ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46d9f6c89fc50dd80fb502677bc8d04e8260ed3", "html_url": "https://github.com/rust-lang/rust/commit/c46d9f6c89fc50dd80fb502677bc8d04e8260ed3"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "a69062ee2cac7d4d9ed01c15251acaa097622f69", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb795c24fba3da62570e144b405d7df7cf8f9963/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb795c24fba3da62570e144b405d7df7cf8f9963/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=eb795c24fba3da62570e144b405d7df7cf8f9963", "patch": "@@ -144,13 +144,16 @@ struct Custom {\n ///\n /// # Handling errors and matching on `ErrorKind`\n ///\n-/// In application code, use `match` for the `ErrorKind` values you are expecting; use `_` to match\n-/// \"all other errors\".\n+/// In application code, use `match` for the `ErrorKind` values you are \n+/// expecting; use `_` to match \"all other errors\".\n ///\n-/// In comprehensive and thorough tests that want to verify that a test doesn't return any known incorrect error kind,\n-/// you may want to cut-and-paste the current full list of errors from here into your test code, and then match `_` as the correct case. This seems counterintuitive,\n-/// but it will make your tests more robust. In particular, if you want to verify that your code does produce an\n-/// unrecognized error kind, the robust solution is to check for all the recognized error kinds and fail in those cases.\n+/// In comprehensive and thorough tests that want to verify that a test doesn't \n+/// return any known incorrect error kind, you may want to cut-and-paste the \n+/// current full list of errors from here into your test code, and then match \n+/// `_` as the correct case. This seems counterintuitive, but it will make your \n+/// tests more robust. In particular, if you want to verify that your code does\n+/// produce an unrecognized error kind, the robust solution is to check for all\n+/// the recognized error kinds and fail in those cases.\n #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]"}]}