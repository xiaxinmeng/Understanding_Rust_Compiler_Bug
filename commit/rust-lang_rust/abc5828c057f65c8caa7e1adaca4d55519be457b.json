{"sha": "abc5828c057f65c8caa7e1adaca4d55519be457b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYzU4MjhjMDU3ZjY1YzhjYWE3ZTFhZGFjYTRkNTU1MTliZTQ1N2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-29T12:51:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-29T12:51:52Z"}, "message": "Merge #2937\n\n2937: Parse cargo output a line at a time. r=kiljacken a=kiljacken\n\nWe previously used serde's stream deserializer to read json blobs from\r\nthe cargo output. It has an issue though: If the deserializer encounters\r\ninvalid input, it gets stuck reporting the same error again and again\r\nbecause it is unable to foward over the input until it reaches a new\r\nvalid object.\r\n\r\nReading a line at a time and manually deserializing fixes this issue,\r\nbecause cargo makes sure to only outpu one json blob per line, so should\r\nwe encounter invalid input, we can just skip a line and continue.\r\n\r\nThe main reason this would happen is stray printf-debugging in\r\nprocedural macros, so we still report that an error occured, but we\r\nhandle it gracefully now.\r\n\r\nFixes #2935\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>", "tree": {"sha": "fa72ecad87a91d9613591a464af6a57f723eb65d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa72ecad87a91d9613591a464af6a57f723eb65d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc5828c057f65c8caa7e1adaca4d55519be457b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMX/oCRBK7hj4Ov3rIwAAdHIIAHJqLf/2bl1HWhcxVIL98STP\nA47wC0Z0xvh276VuM7FW2j4eu8eK/QqAqujLN8m2ekvIEobGHZi/uHgvsbZcOUa4\ntCkpsKjrefzAEYlT7dyRYarLy24eXqI1KtDXanoNX1H2CJJxgtetsPzYnPNA3wlP\nIZf+1AUP4CisIPMUB6AclSixUUsjKFRA8VHmApJJ8jgMRggFJ3OGkaqTjqdupkMS\nWIE4folqGeATjVF/CEuxAjoPBilFRCherOSOGwJKmZmjj4fLmhFrcEBMc3afHC5V\nixIbu5MluZ+/5R9H331MLbBimzSXQ1jQcHi3c8MUkvu4hWURkAVfwKtwcUI9s98=\n=jMKK\n-----END PGP SIGNATURE-----\n", "payload": "tree fa72ecad87a91d9613591a464af6a57f723eb65d\nparent 9f68f7acf2e4cae65122cae072bae2386f48bff1\nparent 4ec5f6e25850b3064b258739eabefdeb8a4bd1b5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580302312 +0000\ncommitter GitHub <noreply@github.com> 1580302312 +0000\n\nMerge #2937\n\n2937: Parse cargo output a line at a time. r=kiljacken a=kiljacken\n\nWe previously used serde's stream deserializer to read json blobs from\r\nthe cargo output. It has an issue though: If the deserializer encounters\r\ninvalid input, it gets stuck reporting the same error again and again\r\nbecause it is unable to foward over the input until it reaches a new\r\nvalid object.\r\n\r\nReading a line at a time and manually deserializing fixes this issue,\r\nbecause cargo makes sure to only outpu one json blob per line, so should\r\nwe encounter invalid input, we can just skip a line and continue.\r\n\r\nThe main reason this would happen is stray printf-debugging in\r\nprocedural macros, so we still report that an error occured, but we\r\nhandle it gracefully now.\r\n\r\nFixes #2935\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc5828c057f65c8caa7e1adaca4d55519be457b", "html_url": "https://github.com/rust-lang/rust/commit/abc5828c057f65c8caa7e1adaca4d55519be457b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc5828c057f65c8caa7e1adaca4d55519be457b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f68f7acf2e4cae65122cae072bae2386f48bff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f68f7acf2e4cae65122cae072bae2386f48bff1", "html_url": "https://github.com/rust-lang/rust/commit/9f68f7acf2e4cae65122cae072bae2386f48bff1"}, {"sha": "4ec5f6e25850b3064b258739eabefdeb8a4bd1b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec5f6e25850b3064b258739eabefdeb8a4bd1b5", "html_url": "https://github.com/rust-lang/rust/commit/4ec5f6e25850b3064b258739eabefdeb8a4bd1b5"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "dd814fc9d9acadcedd993e7f5dc0eea834c656b6", "filename": "crates/ra_cargo_watch/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abc5828c057f65c8caa7e1adaca4d55519be457b/crates%2Fra_cargo_watch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/abc5828c057f65c8caa7e1adaca4d55519be457b/crates%2Fra_cargo_watch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2FCargo.toml?ref=abc5828c057f65c8caa7e1adaca4d55519be457b", "patch": "@@ -11,6 +11,7 @@ log = \"0.4.3\"\n cargo_metadata = \"0.9.1\"\n jod-thread = \"0.1.0\"\n parking_lot = \"0.10.0\"\n+serde_json = \"1.0.45\"\n \n [dev-dependencies]\n insta = \"0.13.0\""}, {"sha": "ea7ddc86b9b9f79ad02e1e7fd803e9603dcbe026", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/abc5828c057f65c8caa7e1adaca4d55519be457b/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc5828c057f65c8caa7e1adaca4d55519be457b/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=abc5828c057f65c8caa7e1adaca4d55519be457b", "patch": "@@ -9,7 +9,7 @@ use lsp_types::{\n };\n use std::{\n     collections::HashMap,\n-    io::BufReader,\n+    io::{BufRead, BufReader},\n     path::PathBuf,\n     process::{Command, Stdio},\n     sync::Arc,\n@@ -350,13 +350,33 @@ impl WatchThread {\n             // which will break out of the loop, and continue the shutdown\n             let _ = message_send.send(CheckEvent::Begin);\n \n-            for message in\n-                cargo_metadata::parse_messages(BufReader::new(command.stdout.take().unwrap()))\n-            {\n+            // We manually read a line at a time, instead of using serde's\n+            // stream deserializers, because the deserializer cannot recover\n+            // from an error, resulting in it getting stuck, because we try to\n+            // be resillient against failures.\n+            //\n+            // Because cargo only outputs one JSON object per line, we can\n+            // simply skip a line if it doesn't parse, which just ignores any\n+            // erroneus output.\n+            let stdout = BufReader::new(command.stdout.take().unwrap());\n+            for line in stdout.lines() {\n+                let line = match line {\n+                    Ok(line) => line,\n+                    Err(err) => {\n+                        log::error!(\"Couldn't read line from cargo: {}\", err);\n+                        continue;\n+                    }\n+                };\n+\n+                let message = serde_json::from_str::<cargo_metadata::Message>(&line);\n                 let message = match message {\n                     Ok(message) => message,\n                     Err(err) => {\n-                        log::error!(\"Invalid json from cargo check, ignoring: {}\", err);\n+                        log::error!(\n+                            \"Invalid json from cargo check, ignoring ({}): {:?} \",\n+                            err,\n+                            line\n+                        );\n                         continue;\n                     }\n                 };"}]}