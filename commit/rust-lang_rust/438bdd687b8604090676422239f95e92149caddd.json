{"sha": "438bdd687b8604090676422239f95e92149caddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOGJkZDY4N2I4NjA0MDkwNjc2NDIyMjM5Zjk1ZTkyMTQ5Y2FkZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-28T00:01:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-28T00:49:10Z"}, "message": "core: More option demoding", "tree": {"sha": "86f592561d55998e9d77de9b41a24336f2400848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f592561d55998e9d77de9b41a24336f2400848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/438bdd687b8604090676422239f95e92149caddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/438bdd687b8604090676422239f95e92149caddd", "html_url": "https://github.com/rust-lang/rust/commit/438bdd687b8604090676422239f95e92149caddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/438bdd687b8604090676422239f95e92149caddd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0ed94bdc6f42f0abed2ee2e293e3800725eaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0ed94bdc6f42f0abed2ee2e293e3800725eaeb", "html_url": "https://github.com/rust-lang/rust/commit/7b0ed94bdc6f42f0abed2ee2e293e3800725eaeb"}], "stats": {"total": 129, "additions": 60, "deletions": 69}, "files": [{"sha": "3071c9a70a1e7b0874a022dadb824aac3048e721", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -41,11 +41,11 @@ fn load_props(testfile: &Path) -> test_props {\n         }\n \n         do parse_aux_build(ln).iter |ab| {\n-            aux_builds.push(ab);\n+            aux_builds.push(*ab);\n         }\n \n         do parse_exec_env(ln).iter |ee| {\n-            exec_env.push(ee);\n+            exec_env.push(*ee);\n         }\n     };\n     return {"}, {"sha": "3a2f5d604c059b1b6d48b68203dfe35fa7cbef4a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -289,8 +289,8 @@ pure fn from_elem<T: Copy,BT: Buildable<T>>(n_elts: uint, t: T) -> BT {\n #[inline(always)]\n pure fn append<T: Copy,IT: BaseIter<T>,BT: Buildable<T>>(\n     lhs: IT, rhs: IT) -> BT {\n-    let size_opt = lhs.size_hint().chain(\n-        |sz1| rhs.size_hint().map(|sz2| sz1+*sz2));\n+    let size_opt = lhs.size_hint().chain_ref(\n+        |sz1| rhs.size_hint().map(|sz2| *sz1+*sz2));\n     do build_sized_opt(size_opt) |push| {\n         for lhs.each |x| { push(*x); }\n         for rhs.each |x| { push(*x); }"}, {"sha": "f92e1aebdb22d5b410df6be19f00835be14bafbe", "filename": "src/libcore/option.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -75,13 +75,18 @@ pure fn map_consume<T, U>(+opt: Option<T>, f: fn(+v: T) -> U) -> Option<U> {\n     if opt.is_some() { Some(f(option::unwrap(move opt))) } else { None }\n }\n \n-pure fn chain<T, U>(opt: &Option<T>, f: fn(T) -> Option<U>) -> Option<U> {\n+pure fn chain<T, U>(+opt: Option<T>, f: fn(+t: T) -> Option<U>) -> Option<U> {\n     /*!\n      * Update an optional value by optionally running its content through a\n      * function that returns an option.\n      */\n \n-    match *opt { Some(x) => f(x), None => None }\n+    // XXX write with move match\n+    if opt.is_some() {\n+        f(unwrap(opt))\n+    } else {\n+        None\n+    }\n }\n \n pure fn chain_ref<T, U>(opt: &Option<T>,\n@@ -139,14 +144,7 @@ pure fn map_default<T, U>(opt: &Option<T>, +def: U,\n     match *opt { None => move def, Some(ref t) => f(t) }\n }\n \n-// This should change to by-copy mode; use iter_ref below for by reference\n-pure fn iter<T>(opt: &Option<T>, f: fn(T)) {\n-    //! Performs an operation on the contained value or does nothing\n-\n-    match *opt { None => (), Some(t) => f(t) }\n-}\n-\n-pure fn iter_ref<T>(opt: &Option<T>, f: fn(x: &T)) {\n+pure fn iter<T>(opt: &Option<T>, f: fn(x: &T)) {\n     //! Performs an operation on the contained value by reference\n     match *opt { None => (), Some(ref t) => f(t) }\n }\n@@ -182,13 +180,6 @@ pure fn unwrap_expect<T>(+opt: Option<T>, reason: &str) -> T {\n \n // Some of these should change to be &Option<T>, some should not. See below.\n impl<T> Option<T> {\n-    /**\n-     * Update an optional value by optionally running its content through a\n-     * function that returns an option.\n-     */\n-    pure fn chain<U>(f: fn(T) -> Option<U>) -> Option<U> { chain(&self, f) }\n-    /// Performs an operation on the contained value or does nothing\n-    pure fn iter(f: fn(T)) { iter(&self, f) }\n     /// Returns true if the option equals `none`\n     pure fn is_none() -> bool { is_none(&self) }\n     /// Returns true if the option contains some value\n@@ -207,7 +198,7 @@ impl<T> &Option<T> {\n     pure fn map_default<U>(+def: U, f: fn(x: &T) -> U) -> U\n         { map_default(self, move def, f) }\n     /// Performs an operation on the contained value by reference\n-    pure fn iter_ref(f: fn(x: &T)) { iter_ref(self, f) }\n+    pure fn iter(f: fn(x: &T)) { iter(self, f) }\n     /// Maps a `some` value from one type to another by reference\n     pure fn map<U>(f: fn(x: &T) -> U) -> Option<U> { map(self, f) }\n     /// Gets an immutable reference to the value inside a `some`."}, {"sha": "c1ea71c181b6836b279b6aa48f36601676a94280", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -884,7 +884,7 @@ mod tests {\n         setenv(~\"HOME\", ~\"\");\n         assert os::homedir().is_none();\n \n-        oldhome.iter(|s| setenv(~\"HOME\", s));\n+        oldhome.iter(|s| setenv(~\"HOME\", *s));\n     }\n \n     #[test]\n@@ -911,9 +911,9 @@ mod tests {\n         setenv(~\"USERPROFILE\", ~\"/home/PaloAlto\");\n         assert os::homedir() == Some(Path(\"/home/MountainView\"));\n \n-        option::iter(&oldhome, |s| setenv(~\"HOME\", s));\n+        option::iter(&oldhome, |s| setenv(~\"HOME\", *s));\n         option::iter(&olduserprofile,\n-                               |s| setenv(~\"USERPROFILE\", s));\n+                               |s| setenv(~\"USERPROFILE\", *s));\n     }\n \n     #[test]"}, {"sha": "45e0d0f1a0d4ad77e8dfb7832d164d0b60675e7f", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -240,7 +240,7 @@ fn each_ancestor(list:        &mut AncestorList,\n                 if need_unwind && !nobe_is_dead {\n                     do bail_opt.iter |bail_blk| {\n                         do with_parent_tg(&mut nobe.parent_group) |tg_opt| {\n-                            bail_blk(tg_opt)\n+                            (*bail_blk)(tg_opt)\n                         }\n                     }\n                 }"}, {"sha": "5d1067da76227009970fc1babbc54c25daec61dc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -979,7 +979,7 @@ fn print_mac(s: ps, m: ast::mac) {\n           Some(@{node: ast::expr_vec(_, _), _}) => (),\n           _ => word(s.s, ~\" \")\n         }\n-        arg.iter(|a| print_expr(s, a));\n+        arg.iter(|a| print_expr(s, *a));\n         // FIXME: extension 'body' (#2339)\n       }\n       ast::mac_invoc_tt(pth, tts) => {\n@@ -1177,7 +1177,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n       ast::expr_loop(blk, opt_ident) => {\n         head(s, ~\"loop\");\n         space(s.s);\n-        opt_ident.iter(|ident| {print_ident(s, ident); space(s.s)});\n+        opt_ident.iter(|ident| {print_ident(s, *ident); space(s.s)});\n         print_block(s, blk);\n       }\n       ast::expr_match(expr, arms) => {\n@@ -1360,12 +1360,12 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n       ast::expr_break(opt_ident) => {\n         word(s.s, ~\"break\");\n         space(s.s);\n-        opt_ident.iter(|ident| {print_ident(s, ident); space(s.s)});\n+        opt_ident.iter(|ident| {print_ident(s, *ident); space(s.s)});\n       }\n       ast::expr_again(opt_ident) => {\n         word(s.s, ~\"loop\");\n         space(s.s);\n-        opt_ident.iter(|ident| {print_ident(s, ident); space(s.s)});\n+        opt_ident.iter(|ident| {print_ident(s, *ident); space(s.s)});\n       }\n       ast::expr_ret(result) => {\n         word(s.s, ~\"return\");"}, {"sha": "e6fd65eb458a2c98d38d17aa96a3da5bc06b7ca6", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -241,7 +241,7 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n           v.visit_pat(inner, e, v),\n       pat_ident(_, path, inner) => {\n           visit_path(path, e, v);\n-          do option::iter(&inner) |subpat| { v.visit_pat(subpat, e, v)};\n+          do option::iter(&inner) |subpat| { v.visit_pat(*subpat, e, v)};\n       }\n       pat_lit(ex) => v.visit_expr(ex, e, v),\n       pat_range(e1, e2) => { v.visit_expr(e1, e, v); v.visit_expr(e2, e, v); }\n@@ -342,10 +342,10 @@ fn visit_struct_def<E>(sd: @struct_def, nm: ast::ident, tps: ~[ty_param],\n         visit_path(p.path, e, v);\n     }\n     do option::iter(&sd.ctor) |ctor| {\n-      visit_class_ctor_helper(ctor, nm, tps, ast_util::local_def(id), e, v);\n+      visit_class_ctor_helper(*ctor, nm, tps, ast_util::local_def(id), e, v);\n     };\n     do option::iter(&sd.dtor) |dtor| {\n-      visit_class_dtor_helper(dtor, tps, ast_util::local_def(id), e, v)\n+      visit_class_dtor_helper(*dtor, tps, ast_util::local_def(id), e, v)\n     };\n }\n "}, {"sha": "d7fd8036c466aa55e2a1cdd1fd570d3a78992c34", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -204,7 +204,7 @@ fn field_mutability(d: ebml::Doc) -> ast::class_mutability {\n }\n \n fn variant_disr_val(d: ebml::Doc) -> Option<int> {\n-    do option::chain(&ebml::maybe_get_doc(d, tag_disr_val)) |val_doc| {\n+    do option::chain(ebml::maybe_get_doc(d, tag_disr_val)) |val_doc| {\n         int::parse_bytes(ebml::doc_data(val_doc), 10u)\n     }\n }"}, {"sha": "87ef3b4749c33fdf17e8ea2588e5b6f8ad952748", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -609,7 +609,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Writer, item: @item,\n                                    ecx.tcx.sess.str_of(item.ident) +\n                                    ~\"_dtor\"),\n                                path, if tps.len() > 0u {\n-                                   Some(ii_dtor(dtor, item.ident, tps,\n+                                   Some(ii_dtor(*dtor, item.ident, tps,\n                                                 local_def(item.id))) }\n                                else { None }, tps);\n         }\n@@ -715,7 +715,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Writer, item: @item,\n             ebml_w.end_tag();\n         }\n         do opt_trait.iter() |associated_trait| {\n-           encode_trait_ref(ebml_w, ecx, associated_trait)\n+           encode_trait_ref(ebml_w, ecx, *associated_trait)\n         }\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();"}, {"sha": "9332ebe9770b7e2414a12fec5f676f2aa7778f4e", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -723,15 +723,15 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_def) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                ast::serialize_def(ebml_w, def)\n+                ast::serialize_def(ebml_w, *def)\n             }\n         }\n     }\n     do option::iter(&(*tcx.node_types).find(id as uint)) |ty| {\n         do ebml_w.tag(c::tag_table_node_type) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                ebml_w.emit_ty(ecx, ty);\n+                ebml_w.emit_ty(ecx, *ty);\n             }\n         }\n     }\n@@ -740,7 +740,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_node_type_subst) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                ebml_w.emit_tys(ecx, tys)\n+                ebml_w.emit_tys(ecx, *tys)\n             }\n         }\n     }\n@@ -749,7 +749,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_freevars) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                do ebml_w.emit_from_vec(*fv) |fv_entry| {\n+                do ebml_w.emit_from_vec(**fv) |fv_entry| {\n                     encode_freevar_entry(ebml_w, *fv_entry)\n                 }\n             }\n@@ -761,7 +761,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_tcache) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                ebml_w.emit_tpbt(ecx, tpbt);\n+                ebml_w.emit_tpbt(ecx, *tpbt);\n             }\n         }\n     }\n@@ -770,7 +770,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_param_bounds) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                ebml_w.emit_bounds(ecx, pbs)\n+                ebml_w.emit_bounds(ecx, *pbs)\n             }\n         }\n     }\n@@ -810,7 +810,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_method_map) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                serialize_method_map_entry(ecx, ebml_w, mme)\n+                serialize_method_map_entry(ecx, ebml_w, *mme)\n             }\n         }\n     }\n@@ -819,7 +819,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_vtable_map) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                encode_vtable_res(ecx, ebml_w, dr);\n+                encode_vtable_res(ecx, ebml_w, *dr);\n             }\n         }\n     }\n@@ -828,7 +828,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         do ebml_w.tag(c::tag_table_adjustments) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                ty::serialize_AutoAdjustment(ebml_w, *adj)\n+                ty::serialize_AutoAdjustment(ebml_w, **adj)\n             }\n         }\n     }"}, {"sha": "a3e85ac56c39b6c62071d21d5e305fa9c8c2feb9", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -269,7 +269,7 @@ fn missing_ctor(tcx: ty::ctxt, m: matrix, left_ty: ty::t) -> Option<ctor> {\n         let mut found = ~[];\n         for m.each |r| {\n             do option::iter(&pat_ctor_id(tcx, r[0])) |id| {\n-                if !vec::contains(found, id) { found.push(id); }\n+                if !vec::contains(found, *id) { found.push(*id); }\n             }\n         }\n         let variants = ty::enum_variants(tcx, eid);"}, {"sha": "bd3abe201349508e0ee944d5f2ac5f071ab0ae84", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -28,7 +28,7 @@ fn check_item(sess: session, ast_map: ast_map::map,\n       item_enum(enum_definition, _) => {\n         for enum_definition.variants.each |var| {\n             do option::iter(&var.node.disr_expr) |ex| {\n-                v.visit_expr(ex, true, v);\n+                v.visit_expr(*ex, true, v);\n             }\n         }\n       }"}, {"sha": "15a7d8f52b1f546de25121d2f67ef861c03825e3", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -264,15 +264,15 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n                 ~\"non path/method call expr has type substs??\")\n           }\n         };\n-        if vec::len(ts) != vec::len(*bounds) {\n+        if vec::len(*ts) != vec::len(*bounds) {\n             // Fail earlier to make debugging easier\n             fail fmt!(\"Internal error: in kind::check_expr, length \\\n                        mismatch between actual and declared bounds: actual = \\\n                         %s (%u tys), declared = %? (%u tys)\",\n-                      tys_to_str(cx.tcx, ts), ts.len(),\n+                      tys_to_str(cx.tcx, *ts), ts.len(),\n                       *bounds, (*bounds).len());\n         }\n-        do vec::iter2(ts, *bounds) |ty, bound| {\n+        do vec::iter2(*ts, *bounds) |ty, bound| {\n             check_bounds(cx, id_to_use, e.span, ty, bound)\n         }\n     }\n@@ -376,7 +376,7 @@ fn check_ty(aty: @ty, cx: ctx, v: visit::vt<ctx>) {\n         do option::iter(&cx.tcx.node_type_substs.find(id)) |ts| {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(id));\n             let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n-            do vec::iter2(ts, *bounds) |ty, bound| {\n+            do vec::iter2(*ts, *bounds) |ty, bound| {\n                 check_bounds(cx, aty.id, aty.span, ty, bound)\n             }\n         }"}, {"sha": "fe465db1312c6fff609435b732d3fe0385ac51f5", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -670,14 +670,14 @@ impl &mem_categorization_ctxt {\n \n         match deref_kind(self.tcx, base_cmt.ty) {\n             deref_ptr(ptr) => {\n-                let lp = do base_cmt.lp.chain |l| {\n+                let lp = do base_cmt.lp.chain_ref |l| {\n                     // Given that the ptr itself is loanable, we can\n                     // loan out deref'd uniq ptrs as the data they are\n                     // the only way to reach the data they point at.\n                     // Other ptr types admit aliases and are therefore\n                     // not loanable.\n                     match ptr {\n-                        uniq_ptr => {Some(@lp_deref(l, ptr))}\n+                        uniq_ptr => {Some(@lp_deref(*l, ptr))}\n                         gc_ptr | region_ptr(_) | unsafe_ptr => {None}\n                     }\n                 };"}, {"sha": "03efd67a9d5c1befff67391c0090ad45d9fe8d76", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -923,7 +923,7 @@ impl Resolver {\n                             namespace_to_str(ns),\n                             self.session.str_of(name)));\n                   do child.span_for_namespace(ns).iter() |sp| {\n-                      self.session.span_note(sp,\n+                      self.session.span_note(*sp,\n                            #fmt(\"First definition of %s %s here:\",\n                                 namespace_to_str(ns),\n                                 self.session.str_of(name)));"}, {"sha": "7c70d83bd76fa3bdf03715892f01ea2206879646", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -1252,7 +1252,7 @@ fn alloc_local(cx: block, local: @ast::local) -> block {\n     let val = alloc_ty(cx, t);\n     if cx.sess().opts.debuginfo {\n         do option::iter(&simple_name) |name| {\n-            str::as_c_str(cx.ccx().sess.str_of(name), |buf| {\n+            str::as_c_str(cx.ccx().sess.str_of(*name), |buf| {\n                 llvm::LLVMSetValueName(val, buf)\n             });\n         }\n@@ -1778,7 +1778,7 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n   /* If we're monomorphizing, register the monomorphized decl\n      for the dtor */\n     do option::iter(&hash_id) |h_id| {\n-    ccx.monomorphized.insert(h_id, lldecl);\n+    ccx.monomorphized.insert(*h_id, lldecl);\n   }\n   /* Translate the dtor body */\n   trans_fn(ccx, path, ast_util::dtor_dec(),"}, {"sha": "95c9812696689469af573424ea6456fe51420b3f", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -281,7 +281,7 @@ fn build_closure(bcx0: block,\n     // variables:\n     do option::iter(&include_ret_handle) |flagptr| {\n         // Flag indicating we have returned (a by-ref bool):\n-        let flag_datum = Datum {val: flagptr, ty: ty::mk_bool(tcx),\n+        let flag_datum = Datum {val: *flagptr, ty: ty::mk_bool(tcx),\n                                 mode: ByRef, source: FromLvalue};\n         env_vals.push(EnvValue {action: EnvRef,\n                                 datum: flag_datum});"}, {"sha": "e75d4db897fb1a7e5148c8825aafef14c4c1077d", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -472,7 +472,7 @@ type optional_boxed_ast_expr = Option<@ast::expr>;\n \n impl optional_boxed_ast_expr: get_node_info {\n     fn info() -> Option<node_info> {\n-        self.chain(|s| s.info())\n+        self.chain_ref(|s| s.info())\n     }\n }\n "}, {"sha": "b29f40748ede31712195ef12a5d23145151db33f", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -204,7 +204,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       expr_path(_) => {\n         do cx.ccx.tcx.node_type_substs.find(e.id).iter |ts| {\n             let id = ast_util::def_id_of_def(cx.ccx.tcx.def_map.get(e.id));\n-            vec::iter2(type_uses_for(cx.ccx, id, ts.len()), ts,\n+            vec::iter2(type_uses_for(cx.ccx, id, ts.len()), *ts,\n                        |uses, subst| {\n                            type_needs(cx, uses, subst)\n                        })\n@@ -238,7 +238,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n             match mth.origin {\n               typeck::method_static(did) => {\n                 do cx.ccx.tcx.node_type_substs.find(e.id).iter |ts| {\n-                    do vec::iter2(type_uses_for(cx.ccx, did, ts.len()), ts)\n+                    do vec::iter2(type_uses_for(cx.ccx, did, ts.len()), *ts)\n                         |uses, subst| { type_needs(cx, uses, subst)}\n                 }\n               }"}, {"sha": "63720eaad2e236d0d0145bd2a197cdb42dbb5743", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -902,7 +902,7 @@ fn mk_t_with_id(cx: ctxt, +st: sty, o_def_id: Option<ast::def_id>) -> t {\n     fn sflags(substs: &substs) -> uint {\n         let mut f = 0u;\n         for substs.tps.each |tt| { f |= get(*tt).flags; }\n-        substs.self_r.iter(|r| f |= rflags(r));\n+        substs.self_r.iter(|r| f |= rflags(*r));\n         return f;\n     }\n     match st {"}, {"sha": "45a7c22e2f90836670f13fb766185ae29d5556de", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -484,7 +484,7 @@ fn ty_of_fn_decl<AC: ast_conv, RS: region_scope Copy Owned>(\n         let rb = in_binding_rscope(rscope);\n \n         let input_tys = do decl.inputs.mapi |i, a| {\n-            let expected_arg_ty = do expected_tys.chain |e| {\n+            let expected_arg_ty = do expected_tys.chain_ref |e| {\n                 // no guarantee that the correct number of expected args\n                 // were supplied\n                 if i < e.inputs.len() {Some(e.inputs[i])} else {None}"}, {"sha": "e1a0e8bc9ed25e04f14728a5f80fdf8ed5e39214", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -279,7 +279,7 @@ fn check_fn(ccx: @crate_ctxt,\n \n     // Update the self_info to contain an accurate self type (taking\n     // into account explicit self).\n-    let self_info = do self_info.chain |info| {\n+    let self_info = do self_info.chain_ref |info| {\n         // If the self type is sty_static, we don't have a self ty.\n         if info.explicit_self.node == ast::sty_static {\n             None\n@@ -288,7 +288,7 @@ fn check_fn(ccx: @crate_ctxt,\n             let ty = method::transform_self_type_for_method(\n                 fcx.tcx(), self_region,\n                 info.self_ty, info.explicit_self.node);\n-            Some({self_ty: ty,.. info})\n+            Some({self_ty: ty,.. *info})\n         }\n     };\n \n@@ -1864,16 +1864,16 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         fcx.write_ty(id, typ);\n       }\n       ast::expr_rec(fields, base) => {\n-        option::iter(&base, |b| { check_expr(fcx, b, expected); });\n+        option::iter(&base, |b| { check_expr(fcx, *b, expected); });\n         let expected = if expected.is_none() && base.is_some() {\n             Some(fcx.expr_ty(base.get()))\n         } else { expected };\n         let flds = unpack_expected(fcx, expected, |sty|\n             match sty { ty::ty_rec(flds) => Some(flds), _ => None }\n         );\n         let fields_t = vec::map(fields, |f| {\n-            bot |= check_expr(fcx, f.node.expr, flds.chain(|flds|\n-                vec::find(flds, |tf| tf.ident == f.node.ident)\n+            bot |= check_expr(fcx, f.node.expr, flds.chain_ref(|flds|\n+                vec::find(*flds, |tf| tf.ident == f.node.ident)\n             ).map(|tf| tf.mt.ty));\n             let expr_t = fcx.expr_ty(f.node.expr);\n             let expr_mt = {ty: expr_t, mutbl: f.node.mutbl};"}, {"sha": "3b299caf8727edacd4db5e3954f81b1decb38fc1", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -164,7 +164,7 @@ fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n             }\n \n             do subpats.iter() |pats| {\n-                do vec::iter2(pats, arg_types) |subpat, arg_ty| {\n+                do vec::iter2(*pats, arg_types) |subpat, arg_ty| {\n                   check_pat(pcx, subpat, arg_ty);\n                 }\n             };"}, {"sha": "e9238e30c663443272000db7e484da1b4056386f", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438bdd687b8604090676422239f95e92149caddd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=438bdd687b8604090676422239f95e92149caddd", "patch": "@@ -484,7 +484,7 @@ impl CoherenceChecker {\n \n                                         let trait_def_id =\n                                             self.trait_ref_to_trait_def_id(\n-                                                trait_ref);\n+                                                *trait_ref);\n \n                                         if trait_def_id.crate != local_crate {\n                                             let session ="}]}