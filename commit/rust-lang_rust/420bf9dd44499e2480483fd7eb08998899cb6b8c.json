{"sha": "420bf9dd44499e2480483fd7eb08998899cb6b8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMGJmOWRkNDQ0OTllMjQ4MDQ4M2ZkN2ViMDg5OTg4OTljYjZiOGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-21T20:06:09Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-22T23:24:26Z"}, "message": "Rollup merge of #23554 - Ms2ger:readme-rustc, r=steveklabnik", "tree": {"sha": "898f50948edda5d10a6de4ad701def6e33fb85c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/898f50948edda5d10a6de4ad701def6e33fb85c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/420bf9dd44499e2480483fd7eb08998899cb6b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/420bf9dd44499e2480483fd7eb08998899cb6b8c", "html_url": "https://github.com/rust-lang/rust/commit/420bf9dd44499e2480483fd7eb08998899cb6b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/420bf9dd44499e2480483fd7eb08998899cb6b8c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "718fe3d9c5bcf686fab6ad54ade8889e0e91e469", "url": "https://api.github.com/repos/rust-lang/rust/commits/718fe3d9c5bcf686fab6ad54ade8889e0e91e469", "html_url": "https://github.com/rust-lang/rust/commit/718fe3d9c5bcf686fab6ad54ade8889e0e91e469"}, {"sha": "3bdb5c3078a69becbf249739c8099ac9acb3513d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdb5c3078a69becbf249739c8099ac9acb3513d", "html_url": "https://github.com/rust-lang/rust/commit/3bdb5c3078a69becbf249739c8099ac9acb3513d"}], "stats": {"total": 254, "additions": 129, "deletions": 125}, "files": [{"sha": "31812e19aee86d4c90bff5c5ad55a6aee9784cff", "filename": "src/librustc/README.md", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/420bf9dd44499e2480483fd7eb08998899cb6b8c/src%2Flibrustc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/420bf9dd44499e2480483fd7eb08998899cb6b8c/src%2Flibrustc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.md?ref=420bf9dd44499e2480483fd7eb08998899cb6b8c", "patch": "@@ -0,0 +1,128 @@\n+An informal guide to reading and working on the rustc compiler.\n+==================================================================\n+\n+If you wish to expand on this document, or have a more experienced\n+Rust contributor add anything else to it, please get in touch:\n+\n+* http://internals.rust-lang.org/\n+* https://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n+\n+or file a bug:\n+\n+https://github.com/rust-lang/rust/issues\n+\n+Your concerns are probably the same as someone else's.\n+\n+The crates of rustc\n+===================\n+\n+Rustc consists of a number of crates, including `libsyntax`,\n+`librustc`, `librustc_back`, `librustc_trans`, and `librustc_driver`\n+(the names and divisions are not set in stone and may change;\n+in general, a finer-grained division of crates is preferable):\n+\n+- `libsyntax` contains those things concerned purely with syntax \u2013\n+  that is, the AST, parser, pretty-printer, lexer, macro expander, and\n+  utilities for traversing ASTs \u2013 are in a separate crate called\n+  \"syntax\", whose files are in `./../libsyntax`, where `.` is the\n+  current directory (that is, the parent directory of front/, middle/,\n+  back/, and so on).\n+\n+- `librustc` (the current directory) contains the high-level analysis\n+  passes, such as the type checker, borrow checker, and so forth.\n+  It is the heart of the compiler.\n+\n+- `librustc_back` contains some very low-level details that are\n+  specific to different LLVM targets and so forth.\n+\n+- `librustc_trans` contains the code to convert from Rust IR into LLVM\n+  IR, and then from LLVM IR into machine code, as well as the main\n+  driver that orchestrates all the other passes and various other bits\n+  of miscellany. In general it contains code that runs towards the\n+  end of the compilation process.\n+\n+- `librustc_driver` invokes the compiler from `libsyntax`, then the\n+  analysis phases from `librustc`, and finally the lowering and\n+  codegen passes from `librustc_trans`.\n+\n+Roughly speaking the \"order\" of the three crates is as follows:\n+\n+    libsyntax -> librustc -> librustc_trans\n+    |                                     |\n+    +-----------------+-------------------+\n+                      |\n+              librustc_driver\n+\n+\n+Modules in the rustc crate\n+==========================\n+\n+The rustc crate itself consists of the following submodules\n+(mostly, but not entirely, in their own directories):\n+\n+- session: options and data that pertain to the compilation session as\n+  a whole\n+- middle: middle-end: name resolution, typechecking, LLVM code\n+  generation\n+- metadata: encoder and decoder for data required by separate\n+  compilation\n+- plugin: infrastructure for compiler plugins\n+- lint: infrastructure for compiler warnings\n+- util: ubiquitous types and helper functions\n+- lib: bindings to LLVM\n+\n+The entry-point for the compiler is main() in the librustc_trans\n+crate.\n+\n+The 3 central data structures:\n+------------------------------\n+\n+1. `./../libsyntax/ast.rs` defines the AST. The AST is treated as\n+   immutable after parsing, but it depends on mutable context data\n+   structures (mainly hash maps) to give it meaning.\n+\n+   - Many \u2013 though not all \u2013 nodes within this data structure are\n+     wrapped in the type `spanned<T>`, meaning that the front-end has\n+     marked the input coordinates of that node. The member `node` is\n+     the data itself, the member `span` is the input location (file,\n+     line, column; both low and high).\n+\n+   - Many other nodes within this data structure carry a\n+     `def_id`. These nodes represent the 'target' of some name\n+     reference elsewhere in the tree. When the AST is resolved, by\n+     `middle/resolve.rs`, all names wind up acquiring a def that they\n+     point to. So anything that can be pointed-to by a name winds\n+     up with a `def_id`.\n+\n+2. `middle/ty.rs` defines the datatype `sty`. This is the type that\n+   represents types after they have been resolved and normalized by\n+   the middle-end. The typeck phase converts every ast type to a\n+   `ty::sty`, and the latter is used to drive later phases of\n+   compilation. Most variants in the `ast::ty` tag have a\n+   corresponding variant in the `ty::sty` tag.\n+\n+3. `./../librustc_llvm/lib.rs` defines the exported types\n+   `ValueRef`, `TypeRef`, `BasicBlockRef`, and several others.\n+   Each of these is an opaque pointer to an LLVM type,\n+   manipulated through the `lib::llvm` interface.\n+\n+\n+Control and information flow within the compiler:\n+-------------------------------------------------\n+\n+- main() in lib.rs assumes control on startup. Options are\n+  parsed, platform is detected, etc.\n+\n+- `./../libsyntax/parse/parser.rs` parses the input files and produces\n+  an AST that represents the input crate.\n+\n+- Multiple middle-end passes (`middle/resolve.rs`, `middle/typeck.rs`)\n+  analyze the semantics of the resulting AST. Each pass generates new\n+  information about the AST and stores it in various environment data\n+  structures. The driver passes environments to each compiler pass\n+  that needs to refer to them.\n+\n+- Finally, the `trans` module in `librustc_trans` translates the Rust\n+  AST to LLVM bitcode in a type-directed way. When it's finished\n+  synthesizing LLVM values, rustc asks LLVM to write them out in some\n+  form (`.bc`, `.o`) and possibly run the system linker."}, {"sha": "9b364768208ebfabbb333cdf84d36b7b697af1fb", "filename": "src/librustc/README.txt", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/718fe3d9c5bcf686fab6ad54ade8889e0e91e469/src%2Flibrustc%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/718fe3d9c5bcf686fab6ad54ade8889e0e91e469/src%2Flibrustc%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.txt?ref=718fe3d9c5bcf686fab6ad54ade8889e0e91e469", "patch": "@@ -1,124 +0,0 @@\n-An informal guide to reading and working on the rustc compiler.\n-==================================================================\n-\n-If you wish to expand on this document, or have a more experienced\n-Rust contributor add anything else to it, please get in touch:\n-\n-* http://internals.rust-lang.org/\n-* https://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n-\n-or file a bug:\n-\n-https://github.com/rust-lang/rust/issues\n-\n-Your concerns are probably the same as someone else's.\n-\n-The crates of rustc\n-===================\n-\n-Rustc consists of four crates altogether: `libsyntax`, `librustc`,\n-`librustc_back`, and `librustc_trans` (the names and divisions are not\n-set in stone and may change; in general, a finer-grained division of\n-crates is preferable):\n-\n-- `libsyntax` contains those things concerned purely with syntax --\n-  that is, the AST, parser, pretty-printer, lexer, macro expander, and\n-  utilities for traversing ASTs -- are in a separate crate called\n-  \"syntax\", whose files are in ./../libsyntax, where . is the current\n-  directory (that is, the parent directory of front/, middle/, back/,\n-  and so on).\n-\n-- `librustc` (the current directory) contains the high-level analysis\n-  passes, such as the type checker, borrow checker, and so forth.\n-  It is the heart of the compiler.\n-\n-- `librustc_back` contains some very low-level details that are\n-  specific to different LLVM targets and so forth.\n-\n-- `librustc_trans` contains the code to convert from Rust IR into LLVM\n-  IR, and then from LLVM IR into machine code, as well as the main\n-  driver that orchestrates all the other passes and various other bits\n-  of miscellany. In general it contains code that runs towards the\n-  end of the compilation process.\n-\n-Roughly speaking the \"order\" of the three crates is as follows:\n-\n-    libsyntax -> librustc -> librustc_trans\n-    |                                     |\n-    +-----------------+-------------------+\n-                      |\n-             librustc_trans/driver\n-\n-Here the role of `librustc_trans/driver` is to invoke the compiler\n-from libsyntax, then the analysis phases from librustc, and finally\n-the lowering and codegen passes from librustc_trans.\n-\n-Modules in the rustc crate\n-==========================\n-\n-The rustc crate itself consists of the following subdirectories\n-(mostly, but not entirely, in their own directories):\n-\n-session  - options and data that pertain to the compilation session as a whole\n-middle   - middle-end: name resolution, typechecking, LLVM code\n-                  generation\n-metadata - encoder and decoder for data required by\n-                    separate compilation\n-util     - ubiquitous types and helper functions\n-lib      - bindings to LLVM\n-\n-The entry-point for the compiler is main() in the librustc_trans\n-crate.\n-\n-The 3 central data structures:\n-------------------------------\n-\n-#1: ./../libsyntax/ast.rs defines the AST. The AST is treated as immutable\n-    after parsing, but it depends on mutable context data structures\n-    (mainly hash maps) to give it meaning.\n-\n-      - Many -- though not all -- nodes within this data structure are\n-        wrapped in the type `spanned<T>`, meaning that the front-end has\n-        marked the input coordinates of that node. The member .node is\n-        the data itself, the member .span is the input location (file,\n-        line, column; both low and high).\n-\n-      - Many other nodes within this data structure carry a\n-        def_id. These nodes represent the 'target' of some name\n-        reference elsewhere in the tree. When the AST is resolved, by\n-        middle/resolve.rs, all names wind up acquiring a def that they\n-        point to. So anything that can be pointed-to by a name winds\n-        up with a def_id.\n-\n-#2: middle/ty.rs defines the datatype sty.  This is the type that\n-    represents types after they have been resolved and normalized by\n-    the middle-end. The typeck phase converts every ast type to a\n-    ty::sty, and the latter is used to drive later phases of\n-    compilation.  Most variants in the ast::ty tag have a\n-    corresponding variant in the ty::sty tag.\n-\n-#3: lib/llvm.rs (in librustc_trans) defines the exported types\n-    ValueRef, TypeRef, BasicBlockRef, and several others. Each of\n-    these is an opaque pointer to an LLVM type, manipulated through\n-    the lib::llvm interface.\n-\n-\n-Control and information flow within the compiler:\n--------------------------------------------------\n-\n-- main() in lib.rs assumes control on startup. Options are\n-  parsed, platform is detected, etc.\n-\n-- ./../libsyntax/parse/parser.rs parses the input files and produces an AST\n-  that represents the input crate.\n-\n-- Multiple middle-end passes (middle/resolve.rs, middle/typeck.rs)\n-  analyze the semantics of the resulting AST. Each pass generates new\n-  information about the AST and stores it in various environment data\n-  structures. The driver passes environments to each compiler pass\n-  that needs to refer to them.\n-\n-- Finally, the `trans` module in `librustc_trans` translates the Rust\n-  AST to LLVM bitcode in a type-directed way. When it's finished\n-  synthesizing LLVM values, rustc asks LLVM to write them out in some\n-  form (.bc, .o) and possibly run the system linker."}, {"sha": "1f416d5404d2778d0fdea4768371232068e2bae8", "filename": "src/librustc_trans/README.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/420bf9dd44499e2480483fd7eb08998899cb6b8c/src%2Flibrustc_trans%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/420bf9dd44499e2480483fd7eb08998899cb6b8c/src%2Flibrustc_trans%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FREADME.txt?ref=420bf9dd44499e2480483fd7eb08998899cb6b8c", "patch": "@@ -1 +1 @@\n-See the README.txt in ../librustc.\n+See the README.md in ../librustc."}]}