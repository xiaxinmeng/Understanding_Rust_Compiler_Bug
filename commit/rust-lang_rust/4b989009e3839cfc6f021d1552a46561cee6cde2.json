{"sha": "4b989009e3839cfc6f021d1552a46561cee6cde2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOTg5MDA5ZTM4MzljZmM2ZjAyMWQxNTUyYTQ2NTYxY2VlNmNkZTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-27T16:11:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-27T16:12:01Z"}, "message": "CONST LOOPS ARE HERE", "tree": {"sha": "07b240aeff385331e1e39cb68b068b5b780ce11b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b240aeff385331e1e39cb68b068b5b780ce11b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b989009e3839cfc6f021d1552a46561cee6cde2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b989009e3839cfc6f021d1552a46561cee6cde2", "html_url": "https://github.com/rust-lang/rust/commit/4b989009e3839cfc6f021d1552a46561cee6cde2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b989009e3839cfc6f021d1552a46561cee6cde2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6580dec764e136148f3fe55c203a9452176bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6580dec764e136148f3fe55c203a9452176bdd", "html_url": "https://github.com/rust-lang/rust/commit/6f6580dec764e136148f3fe55c203a9452176bdd"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "5f885edfd50159af69c13b00111b4caca1b6ed74", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=4b989009e3839cfc6f021d1552a46561cee6cde2", "patch": "@@ -316,7 +316,7 @@ fn expr_bp(p: &mut Parser, mut r: Restrictions, bp: u8) -> (Option<CompletedMark\n }\n \n const LHS_FIRST: TokenSet =\n-    atom::ATOM_EXPR_FIRST.union(token_set![T![&], T![*], T![!], T![.], T![-]]);\n+    atom::ATOM_EXPR_FIRST.union(TokenSet::new(&[T![&], T![*], T![!], T![.], T![-]]));\n \n fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     let m;"}, {"sha": "66a92a4e11132926d5e29357ea2196c1e2565ea8", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=4b989009e3839cfc6f021d1552a46561cee6cde2", "patch": "@@ -15,7 +15,7 @@ use super::*;\n //     let _ = b\"e\";\n //     let _ = br\"f\";\n // }\n-pub(crate) const LITERAL_FIRST: TokenSet = token_set![\n+pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     TRUE_KW,\n     FALSE_KW,\n     INT_NUMBER,\n@@ -25,8 +25,8 @@ pub(crate) const LITERAL_FIRST: TokenSet = token_set![\n     STRING,\n     RAW_STRING,\n     BYTE_STRING,\n-    RAW_BYTE_STRING\n-];\n+    RAW_BYTE_STRING,\n+]);\n \n pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     if !p.at_ts(LITERAL_FIRST) {\n@@ -39,7 +39,7 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n \n // E.g. for after the break in `if break {}`, this should not match\n pub(super) const ATOM_EXPR_FIRST: TokenSet =\n-    LITERAL_FIRST.union(paths::PATH_FIRST).union(token_set![\n+    LITERAL_FIRST.union(paths::PATH_FIRST).union(TokenSet::new(&[\n         T!['('],\n         T!['{'],\n         T!['['],\n@@ -59,9 +59,9 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         T![loop],\n         T![for],\n         LIFETIME,\n-    ]);\n+    ]));\n \n-const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW, R_DOLLAR];\n+const EXPR_RECOVERY_SET: TokenSet = TokenSet::new(&[LET_KW, R_DOLLAR]);\n \n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     if let Some(m) = literal(p) {"}, {"sha": "22810e6fb88ab0b2e4ede93b9c2c56b6587a1a7e", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=4b989009e3839cfc6f021d1552a46561cee6cde2", "patch": "@@ -26,7 +26,7 @@ pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     }\n }\n \n-pub(super) const ITEM_RECOVERY_SET: TokenSet = token_set![\n+pub(super) const ITEM_RECOVERY_SET: TokenSet = TokenSet::new(&[\n     FN_KW,\n     STRUCT_KW,\n     ENUM_KW,\n@@ -41,7 +41,7 @@ pub(super) const ITEM_RECOVERY_SET: TokenSet = token_set![\n     USE_KW,\n     MACRO_KW,\n     T![;],\n-];\n+]);\n \n pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n     let m = p.start();"}, {"sha": "5d297e2d62b56020e5410ca82ee6d2ecbd573bab", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=4b989009e3839cfc6f021d1552a46561cee6cde2", "patch": "@@ -3,7 +3,7 @@\n use super::*;\n \n pub(super) const PATH_FIRST: TokenSet =\n-    token_set![IDENT, T![self], T![super], T![crate], T![:], T![<]];\n+    TokenSet::new(&[IDENT, T![self], T![super], T![crate], T![:], T![<]]);\n \n pub(super) fn is_path_start(p: &Parser) -> bool {\n     is_use_path_start(p) || p.at(T![<])"}, {"sha": "796f206e1284fac80d5cab9000d667078014b968", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=4b989009e3839cfc6f021d1552a46561cee6cde2", "patch": "@@ -2,9 +2,18 @@\n \n use super::*;\n \n-pub(super) const PATTERN_FIRST: TokenSet = expressions::LITERAL_FIRST\n-    .union(paths::PATH_FIRST)\n-    .union(token_set![T![box], T![ref], T![mut], T!['('], T!['['], T![&], T![_], T![-], T![.]]);\n+pub(super) const PATTERN_FIRST: TokenSet =\n+    expressions::LITERAL_FIRST.union(paths::PATH_FIRST).union(TokenSet::new(&[\n+        T![box],\n+        T![ref],\n+        T![mut],\n+        T!['('],\n+        T!['['],\n+        T![&],\n+        T![_],\n+        T![-],\n+        T![.],\n+    ]));\n \n pub(crate) fn pattern(p: &mut Parser) {\n     pattern_r(p, PAT_RECOVERY_SET);\n@@ -74,7 +83,7 @@ fn pattern_single_r(p: &mut Parser, recovery_set: TokenSet) {\n }\n \n const PAT_RECOVERY_SET: TokenSet =\n-    token_set![LET_KW, IF_KW, WHILE_KW, LOOP_KW, MATCH_KW, R_PAREN, COMMA];\n+    TokenSet::new(&[LET_KW, IF_KW, WHILE_KW, LOOP_KW, MATCH_KW, R_PAREN, COMMA]);\n \n fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     let m = match p.nth(0) {"}, {"sha": "1ea130ac599c8c8faceb419ffe154db997773a1a", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=4b989009e3839cfc6f021d1552a46561cee6cde2", "patch": "@@ -2,7 +2,7 @@\n \n use super::*;\n \n-pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(token_set![\n+pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(TokenSet::new(&[\n     T!['('],\n     T!['['],\n     T![<],\n@@ -16,16 +16,16 @@ pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(token_set![\n     T![for],\n     T![impl],\n     T![dyn],\n-]);\n+]));\n \n-const TYPE_RECOVERY_SET: TokenSet = token_set![\n+const TYPE_RECOVERY_SET: TokenSet = TokenSet::new(&[\n     T![')'],\n     T![,],\n     L_DOLLAR,\n     // test_err struct_field_recover\n     // struct S { f pub g: () }\n     T![pub],\n-];\n+]);\n \n pub(crate) fn type_(p: &mut Parser) {\n     type_with_bounds_cond(p, true);"}, {"sha": "a68f0144e7440026b741eede83db50d01f3b5ba6", "filename": "crates/parser/src/token_set.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Ftoken_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b989009e3839cfc6f021d1552a46561cee6cde2/crates%2Fparser%2Fsrc%2Ftoken_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftoken_set.rs?ref=4b989009e3839cfc6f021d1552a46561cee6cde2", "patch": "@@ -9,15 +9,21 @@ pub(crate) struct TokenSet(u128);\n impl TokenSet {\n     pub(crate) const EMPTY: TokenSet = TokenSet(0);\n \n-    pub(crate) const fn singleton(kind: SyntaxKind) -> TokenSet {\n-        TokenSet(mask(kind))\n+    pub(crate) const fn new(kinds: &[SyntaxKind]) -> TokenSet {\n+        let mut res = 0u128;\n+        let mut i = 0;\n+        while i < kinds.len() {\n+            res |= mask(kinds[i]);\n+            i += 1\n+        }\n+        TokenSet(res)\n     }\n \n     pub(crate) const fn union(self, other: TokenSet) -> TokenSet {\n         TokenSet(self.0 | other.0)\n     }\n \n-    pub(crate) fn contains(&self, kind: SyntaxKind) -> bool {\n+    pub(crate) const fn contains(&self, kind: SyntaxKind) -> bool {\n         self.0 & mask(kind) != 0\n     }\n }\n@@ -26,16 +32,10 @@ const fn mask(kind: SyntaxKind) -> u128 {\n     1u128 << (kind as usize)\n }\n \n-#[macro_export]\n-macro_rules! token_set {\n-    ($($t:expr),*) => { TokenSet::EMPTY$(.union(TokenSet::singleton($t)))* };\n-    ($($t:expr),* ,) => { token_set!($($t),*) };\n-}\n-\n #[test]\n fn token_set_works_for_tokens() {\n     use crate::SyntaxKind::*;\n-    let ts = token_set![EOF, SHEBANG];\n+    let ts = TokenSet::new(&[EOF, SHEBANG]);\n     assert!(ts.contains(EOF));\n     assert!(ts.contains(SHEBANG));\n     assert!(!ts.contains(PLUS));"}, {"sha": "d829790d7883dcd584bd0ed2bd88e77f0292f57e", "filename": "xtask/src/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b989009e3839cfc6f021d1552a46561cee6cde2/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b989009e3839cfc6f021d1552a46561cee6cde2/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=4b989009e3839cfc6f021d1552a46561cee6cde2", "patch": "@@ -7,7 +7,7 @@ use anyhow::{bail, format_err, Context, Result};\n use crate::not_bash::{pushd, run};\n \n // Latest stable, feel free to send a PR if this lags behind.\n-const REQUIRED_RUST_VERSION: u32 = 43;\n+const REQUIRED_RUST_VERSION: u32 = 46;\n \n pub struct InstallCmd {\n     pub client: Option<ClientOpt>,"}]}