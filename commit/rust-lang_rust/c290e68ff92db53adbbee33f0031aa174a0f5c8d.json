{"sha": "c290e68ff92db53adbbee33f0031aa174a0f5c8d", "node_id": "C_kwDOAAsO6NoAKGMyOTBlNjhmZjkyZGI1M2FkYmJlZTMzZjAwMzFhYTE3NGEwZjVjOGQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-01T16:32:05Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-01T16:32:05Z"}, "message": "internal: Remove `PathResolution::AssocItem`", "tree": {"sha": "aaf26a502a96a3e603e8c267434669ecd74093d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaf26a502a96a3e603e8c267434669ecd74093d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c290e68ff92db53adbbee33f0031aa174a0f5c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c290e68ff92db53adbbee33f0031aa174a0f5c8d", "html_url": "https://github.com/rust-lang/rust/commit/c290e68ff92db53adbbee33f0031aa174a0f5c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c290e68ff92db53adbbee33f0031aa174a0f5c8d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d684e95130cca21fc78f1642b02811ad09db15", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d684e95130cca21fc78f1642b02811ad09db15", "html_url": "https://github.com/rust-lang/rust/commit/a1d684e95130cca21fc78f1642b02811ad09db15"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "246b93723b39eaf5a65210560c335d81b1ef2f20", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=c290e68ff92db53adbbee33f0031aa174a0f5c8d", "patch": "@@ -30,9 +30,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, AssocItem, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n-    HirFileId, Impl, InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef, Name, Path,\n-    ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    Access, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource, HirFileId, Impl,\n+    InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef, Name, Path, ScopeDef,\n+    ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -46,7 +46,6 @@ pub enum PathResolution {\n     /// A const parameter\n     ConstParam(ConstParam),\n     SelfType(Impl),\n-    AssocItem(AssocItem),\n     BuiltinAttr(BuiltinAttr),\n     ToolModule(ToolModule),\n }\n@@ -76,10 +75,6 @@ impl PathResolution {\n             | PathResolution::ConstParam(_) => None,\n             PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n             PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n-            PathResolution::AssocItem(AssocItem::Const(_) | AssocItem::Function(_)) => None,\n-            PathResolution::AssocItem(AssocItem::TypeAlias(alias)) => {\n-                Some(TypeNs::TypeAliasId((*alias).into()))\n-            }\n         }\n     }\n }"}, {"sha": "6f5908ceb70bfa7440ed91c59b9e7707d609c3c0", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=c290e68ff92db53adbbee33f0031aa174a0f5c8d", "patch": "@@ -40,8 +40,9 @@ use syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, semantics::PathResolution, Adt, BuiltinAttr, BuiltinType, Const, Field,\n-    Function, Local, Macro, ModuleDef, Static, Struct, ToolModule, Trait, Type, TypeAlias, Variant,\n+    db::HirDatabase, semantics::PathResolution, Adt, AssocItem, BuiltinAttr, BuiltinType, Const,\n+    Field, Function, Local, Macro, ModuleDef, Static, Struct, ToolModule, Trait, Type, TypeAlias,\n+    Variant,\n };\n use base_db::CrateId;\n \n@@ -302,7 +303,7 @@ impl SourceAnalyzer {\n             let expr_id = self.expr_id(db, &path_expr.into())?;\n             let infer = self.infer.as_ref()?;\n             if let Some(assoc) = infer.assoc_resolutions_for_expr(expr_id) {\n-                return Some(PathResolution::AssocItem(assoc.into()));\n+                return Some(PathResolution::Def(AssocItem::from(assoc).into()));\n             }\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 infer.variant_resolution_for_expr(expr_id)\n@@ -313,7 +314,7 @@ impl SourceAnalyzer {\n         } else if let Some(path_pat) = parent().and_then(ast::PathPat::cast) {\n             let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n-                return Some(PathResolution::AssocItem(assoc.into()));\n+                return Some(PathResolution::Def(AssocItem::from(assoc).into()));\n             }\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_pat(pat_id)"}, {"sha": "6dc8b3046cc79aeb3f037a3ca6d136f7d1540e26", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=c290e68ff92db53adbbee33f0031aa174a0f5c8d", "patch": "@@ -198,9 +198,6 @@ fn signature_help_for_generics(\n             | hir::PathResolution::Def(hir::ModuleDef::Macro(_))\n             | hir::PathResolution::Def(hir::ModuleDef::Module(_))\n             | hir::PathResolution::Def(hir::ModuleDef::Static(_)) => return None,\n-            hir::PathResolution::AssocItem(hir::AssocItem::Function(it)) => it.into(),\n-            hir::PathResolution::AssocItem(hir::AssocItem::TypeAlias(it)) => it.into(),\n-            hir::PathResolution::AssocItem(hir::AssocItem::Const(_)) => return None,\n             hir::PathResolution::BuiltinAttr(_)\n             | hir::PathResolution::ToolModule(_)\n             | hir::PathResolution::Local(_)"}, {"sha": "af2cb332e5a3b4178066b37a4dca3e0438960ba0", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=c290e68ff92db53adbbee33f0031aa174a0f5c8d", "patch": "@@ -185,7 +185,6 @@ pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n             }?;\n             let function = match ctx.sema.resolve_path(&path)? {\n                 PathResolution::Def(hir::ModuleDef::Function(f)) => f,\n-                PathResolution::AssocItem(hir::AssocItem::Function(f)) => f,\n                 _ => return None,\n             };\n             (function, format!(\"Inline `{}`\", path))"}, {"sha": "34b557e21ea94750462c93063f818dc2a5db3f18", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=c290e68ff92db53adbbee33f0031aa174a0f5c8d", "patch": "@@ -482,14 +482,6 @@ impl From<PathResolution> for Definition {\n     fn from(path_resolution: PathResolution) -> Self {\n         match path_resolution {\n             PathResolution::Def(def) => def.into(),\n-            PathResolution::AssocItem(item) => {\n-                let def: ModuleDef = match item {\n-                    hir::AssocItem::Function(it) => it.into(),\n-                    hir::AssocItem::Const(it) => it.into(),\n-                    hir::AssocItem::TypeAlias(it) => it.into(),\n-                };\n-                def.into()\n-            }\n             PathResolution::Local(local) => Definition::Local(local),\n             PathResolution::TypeParam(par) => Definition::GenericParam(par.into()),\n             PathResolution::ConstParam(par) => Definition::GenericParam(par.into()),"}, {"sha": "61b2c3f3b8b05762440031d8722a57418945b888", "filename": "crates/ide_db/src/path_transform.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fpath_transform.rs?ref=c290e68ff92db53adbbee33f0031aa174a0f5c8d", "patch": "@@ -2,7 +2,7 @@\n \n use crate::helpers::mod_path_to_ast;\n use either::Either;\n-use hir::{HirDisplay, SemanticsScope};\n+use hir::{AsAssocItem, HirDisplay, SemanticsScope};\n use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{self, AstNode},\n@@ -197,7 +197,7 @@ impl<'a> Ctx<'a> {\n                     }\n                 }\n             }\n-            hir::PathResolution::Def(def) => {\n+            hir::PathResolution::Def(def) if def.as_assoc_item(self.source_scope.db).is_none() => {\n                 if let hir::ModuleDef::Trait(_) = def {\n                     if matches!(path.segment()?.kind()?, ast::PathSegmentKind::Type { .. }) {\n                         // `speculative_resolve` resolves segments like `<T as\n@@ -222,7 +222,7 @@ impl<'a> Ctx<'a> {\n             hir::PathResolution::Local(_)\n             | hir::PathResolution::ConstParam(_)\n             | hir::PathResolution::SelfType(_)\n-            | hir::PathResolution::AssocItem(_)\n+            | hir::PathResolution::Def(_)\n             | hir::PathResolution::BuiltinAttr(_)\n             | hir::PathResolution::ToolModule(_) => (),\n         }"}, {"sha": "84bf792fe07c9aa80b127eb3ea262ecf83d30358", "filename": "crates/ide_ssr/src/resolving.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c290e68ff92db53adbbee33f0031aa174a0f5c8d/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fresolving.rs?ref=c290e68ff92db53adbbee33f0031aa174a0f5c8d", "patch": "@@ -2,6 +2,7 @@\n \n use crate::errors::error;\n use crate::{parsing, SsrError};\n+use hir::AsAssocItem;\n use ide_db::base_db::FilePosition;\n use parsing::Placeholder;\n use rustc_hash::FxHashMap;\n@@ -82,14 +83,17 @@ impl Resolver<'_, '_> {\n             .filter_map(|(path_node, resolved)| {\n                 if let Some(grandparent) = path_node.parent().and_then(|parent| parent.parent()) {\n                     if let Some(call_expr) = ast::CallExpr::cast(grandparent.clone()) {\n-                        if let hir::PathResolution::AssocItem(hir::AssocItem::Function(function)) =\n+                        if let hir::PathResolution::Def(hir::ModuleDef::Function(function)) =\n                             resolved.resolution\n                         {\n-                            let qualifier_type = self.resolution_scope.qualifier_type(path_node);\n-                            return Some((\n-                                grandparent,\n-                                UfcsCallInfo { call_expr, function, qualifier_type },\n-                            ));\n+                            if function.as_assoc_item(self.resolution_scope.scope.db).is_some() {\n+                                let qualifier_type =\n+                                    self.resolution_scope.qualifier_type(path_node);\n+                                return Some((\n+                                    grandparent,\n+                                    UfcsCallInfo { call_expr, function, qualifier_type },\n+                                ));\n+                            }\n                         }\n                     }\n                 }\n@@ -162,7 +166,9 @@ impl Resolver<'_, '_> {\n \n     fn ok_to_use_path_resolution(&self, resolution: &hir::PathResolution) -> bool {\n         match resolution {\n-            hir::PathResolution::AssocItem(hir::AssocItem::Function(function)) => {\n+            hir::PathResolution::Def(hir::ModuleDef::Function(function))\n+                if function.as_assoc_item(self.resolution_scope.scope.db).is_some() =>\n+            {\n                 if function.self_param(self.resolution_scope.scope.db).is_some() {\n                     // If we don't use this path resolution, then we won't be able to match method\n                     // calls. e.g. `Foo::bar($s)` should match `x.bar()`.\n@@ -172,7 +178,9 @@ impl Resolver<'_, '_> {\n                     false\n                 }\n             }\n-            hir::PathResolution::AssocItem(_) => {\n+            hir::PathResolution::Def(\n+                def @ (hir::ModuleDef::Const(_) | hir::ModuleDef::TypeAlias(_)),\n+            ) if def.as_assoc_item(self.resolution_scope.scope.db).is_some() => {\n                 // Not a function. Could be a constant or an associated type.\n                 cov_mark::hit!(replace_associated_trait_constant);\n                 false\n@@ -229,7 +237,7 @@ impl<'db> ResolutionScope<'db> {\n                 |assoc_item| {\n                     let item_name = assoc_item.name(self.scope.db)?;\n                     if item_name.to_smol_str().as_str() == name.text() {\n-                        Some(hir::PathResolution::AssocItem(assoc_item))\n+                        Some(hir::PathResolution::Def(assoc_item.into()))\n                     } else {\n                         None\n                     }"}]}