{"sha": "bb7fbb99a293e39793a2d6497a472cce107baf56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiN2ZiYjk5YTI5M2UzOTc5M2EyZDY0OTdhNDcyY2NlMTA3YmFmNTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-02T02:10:19Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-03T21:59:36Z"}, "message": "Add separate 'async_closure' feature gate.", "tree": {"sha": "3c5322f3ac02f9b8c8030378397b8838e409be36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5322f3ac02f9b8c8030378397b8838e409be36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb7fbb99a293e39793a2d6497a472cce107baf56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7fbb99a293e39793a2d6497a472cce107baf56", "html_url": "https://github.com/rust-lang/rust/commit/bb7fbb99a293e39793a2d6497a472cce107baf56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb7fbb99a293e39793a2d6497a472cce107baf56/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088b987307b91612ab164026e1dcdd0129fdb62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/088b987307b91612ab164026e1dcdd0129fdb62b", "html_url": "https://github.com/rust-lang/rust/commit/088b987307b91612ab164026e1dcdd0129fdb62b"}], "stats": {"total": 93, "additions": 54, "deletions": 39}, "files": [{"sha": "ab61f77f5cb3645958919c5f931fded473b895aa", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bb7fbb99a293e39793a2d6497a472cce107baf56", "patch": "@@ -31,6 +31,7 @@ use crate::tokenstream::TokenTree;\n \n use errors::{Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lock;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::debug;\n@@ -573,6 +574,9 @@ declare_features! (\n     // Allows `impl Trait` with multiple unrelated lifetimes.\n     (active, member_constraints, \"1.37.0\", Some(61977), None),\n \n+    // Allows `async || body` closures.\n+    (active, async_closure, \"1.37.0\", Some(62290), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -2191,9 +2195,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     \"labels on blocks are unstable\");\n                 }\n             }\n-            ast::ExprKind::Closure(_, ast::IsAsync::Async { .. }, ..) => {\n-                gate_feature_post!(&self, async_await, e.span, \"async closures are unstable\");\n-            }\n             ast::ExprKind::Async(..) => {\n                 gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n             }\n@@ -2527,6 +2528,10 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     features\n }\n \n+fn for_each_in_lock<T>(vec: &Lock<Vec<T>>, f: impl Fn(&T)) {\n+    vec.borrow().iter().for_each(f);\n+}\n+\n pub fn check_crate(krate: &ast::Crate,\n                    sess: &ParseSess,\n                    features: &Features,\n@@ -2539,27 +2544,26 @@ pub fn check_crate(krate: &ast::Crate,\n         plugin_attributes,\n     };\n \n-    sess\n-        .param_attr_spans\n-        .borrow()\n-        .iter()\n-        .for_each(|span| gate_feature!(\n-            &ctx,\n-            param_attrs,\n-            *span,\n-            \"attributes on function parameters are unstable\"\n-        ));\n-\n-    sess\n-        .let_chains_spans\n-        .borrow()\n-        .iter()\n-        .for_each(|span| gate_feature!(\n-            &ctx,\n-            let_chains,\n-            *span,\n-            \"`let` expressions in this position are experimental\"\n-        ));\n+    for_each_in_lock(&sess.param_attr_spans, |span| gate_feature!(\n+        &ctx,\n+        param_attrs,\n+        *span,\n+        \"attributes on function parameters are unstable\"\n+    ));\n+\n+    for_each_in_lock(&sess.let_chains_spans, |span| gate_feature!(\n+        &ctx,\n+        let_chains,\n+        *span,\n+        \"`let` expressions in this position are experimental\"\n+    ));\n+\n+    for_each_in_lock(&sess.async_closure_spans, |span| gate_feature!(\n+        &ctx,\n+        async_closure,\n+        *span,\n+        \"async closures are unstable\"\n+    ));\n \n     let visitor = &mut PostExpansionVisitor {\n         context: &ctx,"}, {"sha": "0a28eb38a58bc987da3eb41208b7b6eb9095d6dc", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=bb7fbb99a293e39793a2d6497a472cce107baf56", "patch": "@@ -1474,6 +1474,7 @@ mod tests {\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             param_attr_spans: Lock::new(Vec::new()),\n             let_chains_spans: Lock::new(Vec::new()),\n+            async_closure_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "4056905d5dd014a40f0187b539ed4e2caedc365f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=bb7fbb99a293e39793a2d6497a472cce107baf56", "patch": "@@ -57,6 +57,8 @@ pub struct ParseSess {\n     pub param_attr_spans: Lock<Vec<Span>>,\n     // Places where `let` exprs were used and should be feature gated according to `let_chains`.\n     pub let_chains_spans: Lock<Vec<Span>>,\n+    // Places where `async || ..` exprs were used and should be feature gated.\n+    pub async_closure_spans: Lock<Vec<Span>>,\n }\n \n impl ParseSess {\n@@ -84,6 +86,7 @@ impl ParseSess {\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             param_attr_spans: Lock::new(Vec::new()),\n             let_chains_spans: Lock::new(Vec::new()),\n+            async_closure_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "f82751c670b586883debe96979a7bd79fb14463f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bb7fbb99a293e39793a2d6497a472cce107baf56", "patch": "@@ -3221,21 +3221,24 @@ impl<'a> Parser<'a> {\n                              -> PResult<'a, P<Expr>>\n     {\n         let lo = self.token.span;\n+\n         let movability = if self.eat_keyword(kw::Static) {\n             Movability::Static\n         } else {\n             Movability::Movable\n         };\n+\n         let asyncness = if self.token.span.rust_2018() {\n             self.parse_asyncness()\n         } else {\n             IsAsync::NotAsync\n         };\n-        let capture_clause = if self.eat_keyword(kw::Move) {\n-            CaptureBy::Value\n-        } else {\n-            CaptureBy::Ref\n-        };\n+        if asyncness.is_async() {\n+            // Feature gate `async ||` closures.\n+            self.sess.async_closure_spans.borrow_mut().push(self.prev_span);\n+        }\n+\n+        let capture_clause = self.parse_capture_clause();\n         let decl = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_span;\n         let body = match decl.output {\n@@ -3257,7 +3260,7 @@ impl<'a> Parser<'a> {\n             attrs))\n     }\n \n-    // `else` token already eaten\n+    /// `else` token already eaten\n     fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {\n         if self.eat_keyword(kw::If) {\n             return self.parse_if_expr(ThinVec::new());\n@@ -3306,7 +3309,7 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(span, ExprKind::While(cond, body, opt_label), attrs))\n     }\n \n-    // parse `loop {...}`, `loop` token already eaten\n+    /// Parse `loop {...}`, `loop` token already eaten.\n     fn parse_loop_expr(&mut self, opt_label: Option<Label>,\n                            span_lo: Span,\n                            mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n@@ -3316,17 +3319,20 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(span, ExprKind::Loop(body, opt_label), attrs))\n     }\n \n-    /// Parses an `async move {...}` expression.\n-    pub fn parse_async_block(&mut self, mut attrs: ThinVec<Attribute>)\n-        -> PResult<'a, P<Expr>>\n-    {\n-        let span_lo = self.token.span;\n-        self.expect_keyword(kw::Async)?;\n-        let capture_clause = if self.eat_keyword(kw::Move) {\n+    /// Parse an optional `move` prefix to a closure lke construct.\n+    fn parse_capture_clause(&mut self) -> CaptureBy {\n+        if self.eat_keyword(kw::Move) {\n             CaptureBy::Value\n         } else {\n             CaptureBy::Ref\n-        };\n+        }\n+    }\n+\n+    /// Parses an `async move? {...}` expression.\n+    pub fn parse_async_block(&mut self, mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        let span_lo = self.token.span;\n+        self.expect_keyword(kw::Async)?;\n+        let capture_clause = self.parse_capture_clause();\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         Ok(self.mk_expr("}, {"sha": "233574dda5daed197e890c48c8e4fa5c7f2a3825", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7fbb99a293e39793a2d6497a472cce107baf56/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=bb7fbb99a293e39793a2d6497a472cce107baf56", "patch": "@@ -146,6 +146,7 @@ symbols! {\n         associated_type_defaults,\n         associated_types,\n         async_await,\n+        async_closure,\n         attr,\n         attributes,\n         attr_literals,"}]}