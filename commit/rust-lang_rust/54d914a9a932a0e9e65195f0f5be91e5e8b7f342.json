{"sha": "54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZDkxNGE5YTkzMmEwZTllNjUxOTVmMGY1YmU5MWU1ZThiN2YzNDI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-07T17:24:27Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-07T17:24:27Z"}, "message": "std: remove each[i]_mut functions, in favour of iterators.", "tree": {"sha": "75bade939ff0e5b46f4034b612ced1a5fbcb50d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75bade939ff0e5b46f4034b612ced1a5fbcb50d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "html_url": "https://github.com/rust-lang/rust/commit/54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f661a15b2bd5c2a9ea984c72c28caf970317d8a3", "html_url": "https://github.com/rust-lang/rust/commit/f661a15b2bd5c2a9ea984c72c28caf970317d8a3"}], "stats": {"total": 101, "additions": 32, "deletions": 69}, "files": [{"sha": "a845d326142867b8f5974bdad0009a73a447215d", "filename": "src/libextra/sha1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibextra%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibextra%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsha1.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -24,6 +24,7 @@\n \n use core::prelude::*;\n \n+use core::iterator::IteratorUtil;\n use core::str;\n use core::uint;\n use core::vec;\n@@ -173,7 +174,7 @@ pub fn sha1() -> @Sha1 {\n     fn mk_result(st: &mut Sha1State) -> ~[u8] {\n         if !(*st).computed { pad_msg(st); (*st).computed = true; }\n         let mut rs: ~[u8] = ~[];\n-        for vec::each_mut((*st).h) |ptr_hpart| {\n+        for st.h.mut_iter().advance |ptr_hpart| {\n             let hpart = *ptr_hpart;\n             let a = (hpart >> 24u32 & 0xFFu32) as u8;\n             let b = (hpart >> 16u32 & 0xFFu32) as u8;"}, {"sha": "1f9fff14ba209cd8fc0125c6f7b0499e191cc051", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -18,6 +18,7 @@\n \n use core::prelude::*;\n \n+use core::iterator::IteratorUtil;\n use core::cast;\n use core::io;\n use core::str;\n@@ -895,7 +896,7 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n \n     fn reset(&mut self, bits: &mut [uint]) {\n         let e = if self.dfcx.oper.initial_value() {uint::max_value} else {0};\n-        for vec::each_mut(bits) |b| { *b = e; }\n+        for bits.mut_iter().advance |b| { *b = e; }\n     }\n \n     fn add_to_entry_set(&mut self, id: ast::node_id, pred_bits: &[uint]) {"}, {"sha": "1137540ae706145899ed36cd480f1a47c2c46f87", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -87,6 +87,7 @@ bounded and unbounded protocols allows for less code duplication.\n use container::Container;\n use cast::{forget, transmute, transmute_copy};\n use either::{Either, Left, Right};\n+use iterator::IteratorUtil;\n use kinds::Owned;\n use libc;\n use ops::Drop;\n@@ -96,8 +97,7 @@ use unstable::intrinsics;\n use ptr;\n use ptr::RawPtr;\n use task;\n-use vec;\n-use vec::OwnedVector;\n+use vec::{OwnedVector, MutableVector};\n use util::replace;\n \n static SPIN_COUNT: uint = 0;\n@@ -600,7 +600,7 @@ pub fn wait_many<T: Selectable>(pkts: &mut [T]) -> uint {\n \n     let mut data_avail = false;\n     let mut ready_packet = pkts.len();\n-    for vec::eachi_mut(pkts) |i, p| {\n+    for pkts.mut_iter().enumerate().advance |(i, p)| {\n         unsafe {\n             let p = &mut *p.header();\n             let old = p.mark_blocked(this);\n@@ -622,7 +622,7 @@ pub fn wait_many<T: Selectable>(pkts: &mut [T]) -> uint {\n         let event = wait_event(this) as *PacketHeader;\n \n         let mut pos = None;\n-        for vec::eachi_mut(pkts) |i, p| {\n+        for pkts.mut_iter().enumerate().advance |(i, p)| {\n             if p.header() == event {\n                 pos = Some(i);\n                 break;\n@@ -640,7 +640,7 @@ pub fn wait_many<T: Selectable>(pkts: &mut [T]) -> uint {\n \n     debug!(\"%?\", &mut pkts[ready_packet]);\n \n-    for vec::each_mut(pkts) |p| {\n+    for pkts.mut_iter().advance |p| {\n         unsafe {\n             (*p.header()).unblock()\n         }\n@@ -853,7 +853,7 @@ pub fn select<T:Owned,Tb:Owned>(mut endpoints: ~[RecvPacketBuffered<T, Tb>])\n                                     Option<T>,\n                                     ~[RecvPacketBuffered<T, Tb>]) {\n     let mut endpoint_headers = ~[];\n-    for vec::each_mut(endpoints) |endpoint| {\n+    for endpoints.mut_iter().advance |endpoint| {\n         endpoint_headers.push(endpoint.header());\n     }\n "}, {"sha": "899920030264d11b776bf69c73e67e5e0de7ac11", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -82,4 +82,3 @@ pub use io::{Reader, ReaderUtil, Writer, WriterUtil};\n // Reexported runtime types\n pub use comm::{stream, Port, Chan, GenericChan, GenericSmartChan, GenericPort, Peekable};\n pub use task::spawn;\n-"}, {"sha": "7899edbfcb956c2da3471847ae1cd99941e264a7", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -11,6 +11,7 @@\n //! An ordered map and set for integer keys implemented as a radix trie\n \n use prelude::*;\n+use iterator::IteratorUtil;\n use uint;\n use util::{swap, replace};\n use vec;\n@@ -277,7 +278,7 @@ impl<T> TrieNode<T> {\n     }\n \n     fn mutate_values<'a>(&'a mut self, f: &fn(&uint, &mut T) -> bool) -> bool {\n-        for vec::each_mut(self.children) |child| {\n+        for self.children.mut_iter().advance |child| {\n             match *child {\n                 Internal(ref mut x) => if !x.mutate_values(f) {\n                     return false"}, {"sha": "d8424f4a29edd992f3ba597bc377f14965f8e017", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 48, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -19,7 +19,7 @@ use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n use old_iter::BaseIter;\n use old_iter;\n-use iterator::Iterator;\n+use iterator::{Iterator, IteratorUtil};\n use iter::FromIter;\n use kinds::Copy;\n use libc;\n@@ -1568,28 +1568,6 @@ pub fn each<'r,T>(v: &'r [T], f: &fn(&'r T) -> bool) -> bool {\n     return !broke;\n }\n \n-/// Like `each()`, but for the case where you have\n-/// a vector with mutable contents and you would like\n-/// to mutate the contents as you iterate.\n-#[inline(always)]\n-pub fn each_mut<'r,T>(v: &'r mut [T], f: &fn(elem: &'r mut T) -> bool) -> bool {\n-    let mut broke = false;\n-    do as_mut_buf(v) |p, n| {\n-        let mut n = n;\n-        let mut p = p;\n-        while n > 0 {\n-            unsafe {\n-                let q: &'r mut T = cast::transmute_mut_region(&mut *p);\n-                if !f(q) { break; }\n-                p = p.offset(1);\n-            }\n-            n -= 1;\n-        }\n-        broke = n > 0;\n-    }\n-    return !broke;\n-}\n-\n /// Like `each()`, but for the case where you have a vector that *may or may\n /// not* have mutable contents.\n #[inline(always)]\n@@ -1620,24 +1598,6 @@ pub fn eachi<'r,T>(v: &'r [T], f: &fn(uint, v: &'r T) -> bool) -> bool {\n     return true;\n }\n \n-/**\n- * Iterates over a mutable vector's elements and indices\n- *\n- * Return true to continue, false to break.\n- */\n-#[inline(always)]\n-pub fn eachi_mut<'r,T>(v: &'r mut [T],\n-                       f: &fn(uint, v: &'r mut T) -> bool) -> bool {\n-    let mut i = 0;\n-    for each_mut(v) |p| {\n-        if !f(i, p) {\n-            return false;\n-        }\n-        i += 1;\n-    }\n-    return true;\n-}\n-\n /**\n  * Iterates over a vector's elements in reverse\n  *\n@@ -2700,23 +2660,23 @@ impl<A> old_iter::BaseIter<A> for @[A] {\n impl<'self,A> old_iter::MutableIter<A> for &'self mut [A] {\n     #[inline(always)]\n     fn each_mut<'a>(&'a mut self, blk: &fn(v: &'a mut A) -> bool) -> bool {\n-        each_mut(*self, blk)\n+        self.mut_iter().advance(blk)\n     }\n }\n \n // FIXME(#4148): This should be redundant\n impl<A> old_iter::MutableIter<A> for ~[A] {\n     #[inline(always)]\n     fn each_mut<'a>(&'a mut self, blk: &fn(v: &'a mut A) -> bool) -> bool {\n-        each_mut(*self, blk)\n+        self.mut_iter().advance(blk)\n     }\n }\n \n // FIXME(#4148): This should be redundant\n impl<A> old_iter::MutableIter<A> for @mut [A] {\n     #[inline(always)]\n     fn each_mut(&mut self, blk: &fn(v: &mut A) -> bool) -> bool {\n-        each_mut(*self, blk)\n+        self.mut_iter().advance(blk)\n     }\n }\n \n@@ -2748,7 +2708,7 @@ impl<'self,A> old_iter::ExtendedIter<A> for &'self [A] {\n impl<'self,A> old_iter::ExtendedMutableIter<A> for &'self mut [A] {\n     #[inline(always)]\n     pub fn eachi_mut(&mut self, blk: &fn(uint, v: &mut A) -> bool) -> bool {\n-        eachi_mut(*self, blk)\n+        self.mut_iter().enumerate().advance(|(i, v)| blk(i, v))\n     }\n }\n \n@@ -3608,16 +3568,13 @@ mod tests {\n     fn test_each_ret_len0() {\n         let mut a0 : [int, .. 0] = [];\n         assert_eq!(each(a0, |_p| fail!()), true);\n-        assert_eq!(each_mut(a0, |_p| fail!()), true);\n     }\n \n     #[test]\n     fn test_each_ret_len1() {\n         let mut a1 = [17];\n         assert_eq!(each(a1, |_p| true), true);\n-        assert_eq!(each_mut(a1, |_p| true), true);\n         assert_eq!(each(a1, |_p| false), false);\n-        assert_eq!(each_mut(a1, |_p| false), false);\n     }\n \n "}, {"sha": "a5725613d589888c7e3200df0d1061bff3f54aff", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -23,6 +23,7 @@ use ext::quote::rt::*;\n use opt_vec;\n use opt_vec::OptVec;\n \n+use core::iterator::IteratorUtil;\n use core::str;\n use core::vec;\n \n@@ -258,8 +259,7 @@ impl to_type_decls for state {\n         let mut items = ~[];\n \n         {\n-            let messages = &mut *self.messages;\n-            for vec::each_mut(*messages) |m| {\n+            for self.messages.mut_iter().advance |m| {\n                 if dir == send {\n                     items.push(m.gen_send(cx, true));\n                     items.push(m.gen_send(cx, false));"}, {"sha": "5f43452cc83ecacd1420ae61cf1b9791422c2f52", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -22,6 +22,7 @@ use parse::parser::Parser;\n use parse::token::{Token, EOF, to_str, nonterminal, get_ident_interner, ident_to_str};\n use parse::token;\n \n+use core::iterator::IteratorUtil;\n use core::hashmap::HashMap;\n use core::str;\n use core::uint;\n@@ -358,7 +359,7 @@ pub fn parse(\n         if tok == EOF {\n             if eof_eis.len() == 1u {\n                 let mut v = ~[];\n-                for vec::each_mut(eof_eis[0u].matches) |dv| {\n+                for eof_eis[0u].matches.mut_iter().advance |dv| {\n                     v.push(dv.pop());\n                 }\n                 return success(nameize(sess, ms, v));"}, {"sha": "bc1685a109220a0c625db07ff9f7669f557e1f24", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -1,3 +1,4 @@\n+use std::iterator::IteratorUtil;\n use std::cast::transmute;\n use std::from_str::FromStr;\n use std::libc::{FILE, STDOUT_FILENO, c_int, fdopen, fputc, fputs, fwrite, size_t};\n@@ -134,7 +135,7 @@ impl RandomFasta {\n     fn make_lookup(a: &[AminoAcid]) -> [AminoAcid, ..LOOKUP_SIZE] {\n         let mut lookup = [ NULL_AMINO_ACID, ..LOOKUP_SIZE ];\n         let mut j = 0;\n-        for vec::eachi_mut(lookup) |i, slot| {\n+        for lookup.mut_iter().enumerate().advance |(i, slot)| {\n             while a[j].p < (i as f32) {\n                 j += 1;\n             }"}, {"sha": "f1fff7ea0ac071e408719538a01e397938300fe0", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -1,3 +1,4 @@\n+use std::iterator::IteratorUtil;\n use std::f64;\n use std::from_str::FromStr;\n use std::os;\n@@ -104,7 +105,7 @@ fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: i32) {\n             }\n         }\n \n-        for vec::each_mut(*bodies) |a| {\n+        for bodies.mut_iter().advance |a| {\n             a.x[0] += dt * a.v[0];\n             a.x[1] += dt * a.v[1];\n             a.x[2] += dt * a.v[2];"}, {"sha": "7356e848ba3b2be17252ada8de14f514cb33d7be", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -1,3 +1,4 @@\n+use std::iterator::IteratorUtil;\n use std::f64;\n use std::from_str::FromStr;\n use std::iter::ExtendedMutableIter;\n@@ -18,19 +19,19 @@ fn dot(v: &[f64], u: &[f64]) -> f64 {\n }\n \n fn mult_Av(v: &mut [f64], out: &mut [f64]) {\n-    for vec::eachi_mut(out) |i, out_i| {\n+    for out.mut_iter().enumerate().advance |(i, out_i)| {\n         let mut sum = 0.0;\n-        for vec::eachi_mut(v) |j, &v_j| {\n+        for v.mut_iter().enumerate().advance |(j, &v_j)| {\n             sum += v_j / (A(i as i32, j as i32) as f64);\n         }\n         *out_i = sum;\n     }\n }\n \n fn mult_Atv(v: &mut [f64], out: &mut [f64]) {\n-    for vec::eachi_mut(out) |i, out_i| {\n+    for out.mut_iter().enumerate().advance |(i, out_i)| {\n         let mut sum = 0.0;\n-        for vec::eachi_mut(v) |j, &v_j| {\n+        for v.mut_iter().enumerate().advance |(j, &v_j)| {\n             sum += v_j / (A(j as i32, i as i32) as f64);\n         }\n         *out_i = sum;"}, {"sha": "d2c8e465c1160a3ffb25654db319a62740a6975c", "filename": "src/test/run-pass/mutability-inherits-through-fixed-length-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d914a9a932a0e9e65195f0f5be91e5e8b7f342/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs?ref=54d914a9a932a0e9e65195f0f5be91e5e8b7f342", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n+use std::iterator::IteratorUtil;\n \n fn test1() {\n     let mut ints = [0, ..32];\n@@ -18,7 +18,7 @@ fn test1() {\n \n fn test2() {\n     let mut ints = [0, ..32];\n-    for vec::each_mut(ints) |i| { *i += 22; }\n+    for ints.mut_iter().advance |i| { *i += 22; }\n     for ints.each |i| { assert!(*i == 22); }\n }\n "}]}