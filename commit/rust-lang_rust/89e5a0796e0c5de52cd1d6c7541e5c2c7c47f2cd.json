{"sha": "89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZTVhMDc5NmUwYzVkZTUyY2QxZDZjNzU0MWU1YzJjN2M0N2YyY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-28T04:24:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-28T04:24:18Z"}, "message": "Auto merge of #47894 - vi:rustdoc_foldable_impls, r=GuillaumeGomez,QuietMisdreavus\n\nrustdoc: Foldable impl blocks\n\nAddresses #40363, #45720, #24483, #23986 and so on\n\n* Expands and refactors collapseDocs and toggleAllDocs\n* Adds [-] toggle to all impls (including inherent impl)\n* Makes it hiding though main css file, not though element inline style\n\nMay need to be addressed:\n\n* \"[-]\" and anchor link copier are overlaid a bit\n* Inherent methods are also hidden by the global [-] toggle.\n* Auto-collapsing \"Iterator\" and so on by default is not implemented yet\n* Tested only shallowly and only in Chromiuim\n* No tests. Are there tests for css/js part here?\n* The new implementation may be a bit slower.\n\nWhat next steps are need to be done before the integration?", "tree": {"sha": "eb2be45fee924d68902a4ea543cb01c89adaf935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2be45fee924d68902a4ea543cb01c89adaf935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd", "html_url": "https://github.com/rust-lang/rust/commit/89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "affe297c133a781c75c2494695e847354ae09156", "url": "https://api.github.com/repos/rust-lang/rust/commits/affe297c133a781c75c2494695e847354ae09156", "html_url": "https://github.com/rust-lang/rust/commit/affe297c133a781c75c2494695e847354ae09156"}, {"sha": "df1b9a8584bf273fb807bae2d9dd55833aee5964", "url": "https://api.github.com/repos/rust-lang/rust/commits/df1b9a8584bf273fb807bae2d9dd55833aee5964", "html_url": "https://github.com/rust-lang/rust/commit/df1b9a8584bf273fb807bae2d9dd55833aee5964"}], "stats": {"total": 196, "additions": 144, "deletions": 52}, "files": [{"sha": "aa09e93e61ac16a5292940ce413eeb247e7d9e6c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 123, "deletions": 50, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd", "patch": "@@ -297,9 +297,9 @@\n     document.onkeydown = handleShortcut;\n     document.onclick = function(ev) {\n         if (hasClass(ev.target, 'collapse-toggle')) {\n-            collapseDocs(ev.target);\n+            collapseDocs(ev.target, \"toggle\");\n         } else if (hasClass(ev.target.parentNode, 'collapse-toggle')) {\n-            collapseDocs(ev.target.parentNode);\n+            collapseDocs(ev.target.parentNode, \"toggle\");\n         } else if (ev.target.tagName === 'SPAN' && hasClass(ev.target.parentNode, 'line-numbers')) {\n             var prev_id = 0;\n \n@@ -1636,76 +1636,143 @@\n                 e.innerHTML = labelForToggleButton(false);\n             });\n             toggle.title = \"collapse all docs\";\n-            onEach(document.getElementsByClassName(\"docblock\"), function(e) {\n-                e.style.display = 'block';\n-            });\n-            onEach(document.getElementsByClassName(\"toggle-label\"), function(e) {\n-                e.style.display = 'none';\n-            });\n-            onEach(document.getElementsByClassName(\"toggle-wrapper\"), function(e) {\n-                removeClass(e, \"collapsed\");\n-            });\n             onEach(document.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                onEveryMatchingChild(e, \"inner\", function(i_e) {\n-                    i_e.innerHTML = labelForToggleButton(false);\n-                });\n+                collapseDocs(e, \"show\");\n             });\n         } else {\n             addClass(toggle, \"will-expand\");\n             onEveryMatchingChild(toggle, \"inner\", function(e) {\n                 e.innerHTML = labelForToggleButton(true);\n             });\n             toggle.title = \"expand all docs\";\n-            onEach(document.getElementsByClassName(\"docblock\"), function(e) {\n-                e.style.display = 'none';\n-            });\n-            onEach(document.getElementsByClassName(\"toggle-label\"), function(e) {\n-                e.style.display = 'inline-block';\n-            });\n-            onEach(document.getElementsByClassName(\"toggle-wrapper\"), function(e) {\n-                addClass(e, \"collapsed\");\n-            });\n+\n             onEach(document.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                onEveryMatchingChild(e, \"inner\", function(i_e) {\n-                    i_e.innerHTML = labelForToggleButton(true);\n-                });\n+                collapseDocs(e, \"hide\");\n             });\n         }\n     }\n \n-    function collapseDocs(toggle) {\n+    function collapseDocs(toggle, mode) {\n         if (!toggle || !toggle.parentNode) {\n             return;\n         }\n-        var relatedDoc = toggle.parentNode.nextElementSibling;\n-        if (hasClass(relatedDoc, \"stability\")) {\n-            relatedDoc = relatedDoc.nextElementSibling;\n-        }\n-        if (hasClass(relatedDoc, \"docblock\")) {\n-            if (!isHidden(relatedDoc)) {\n-                relatedDoc.style.display = 'none';\n-                onEach(toggle.childNodes, function(e) {\n-                    if (hasClass(e, 'toggle-label')) {\n+\n+        function adjustToggle(arg) {\n+            return function(e) {\n+                if (hasClass(e, 'toggle-label')) {\n+                    if (arg) {\n                         e.style.display = 'inline-block';\n+                    } else {\n+                        e.style.display = 'none';\n                     }\n-                    if (hasClass(e, 'inner')) {\n-                        e.innerHTML = labelForToggleButton(true);\n+                }\n+                if (hasClass(e, 'inner')) {\n+                    e.innerHTML = labelForToggleButton(arg);\n+                }\n+            };\n+        };\n+\n+        if (!hasClass(toggle.parentNode, \"impl\")) {\n+            var relatedDoc = toggle.parentNode.nextElementSibling;\n+            if (hasClass(relatedDoc, \"stability\")) {\n+                relatedDoc = relatedDoc.nextElementSibling;\n+            }\n+            if (hasClass(relatedDoc, \"docblock\")) {\n+                var action = mode;\n+                if (action === \"toggle\") {\n+                    if (hasClass(relatedDoc, \"hidden-by-usual-hider\")) {\n+                        action = \"show\";\n+                    } else {\n+                        action = \"hide\";\n                     }\n-                });\n-                addClass(toggle.parentNode, 'collapsed');\n-            } else {\n-                relatedDoc.style.display = 'block';\n-                removeClass(toggle.parentNode, 'collapsed');\n-                onEach(toggle.childNodes, function(e) {\n-                    if (hasClass(e, 'toggle-label')) {\n-                        e.style.display = 'none';\n+                }\n+                if (action === \"hide\") {\n+                    addClass(relatedDoc, \"hidden-by-usual-hider\");\n+                    onEach(toggle.childNodes, adjustToggle(true));\n+                    addClass(toggle.parentNode, 'collapsed');\n+                } else if (action === \"show\") {\n+                    removeClass(relatedDoc, \"hidden-by-usual-hider\");\n+                    removeClass(toggle.parentNode, 'collapsed');\n+                    onEach(toggle.childNodes, adjustToggle(false));\n+                }\n+            }\n+        } else {\n+            // we are collapsing the impl block\n+            function implHider(addOrRemove) {\n+                return function(n) {\n+                    if (hasClass(n, \"method\")) {\n+                        if (addOrRemove) {\n+                            addClass(n, \"hidden-by-impl-hider\");\n+                        } else {\n+                            removeClass(n, \"hidden-by-impl-hider\");\n+                        }\n+                        var ns = n.nextElementSibling;\n+                        while (true) {\n+                            if (ns && (\n+                                    hasClass(ns, \"docblock\") ||\n+                                    hasClass(ns, \"stability\") ||\n+                                    false\n+                                    )) {\n+                                if (addOrRemove) {\n+                                    addClass(ns, \"hidden-by-impl-hider\");\n+                                } else {\n+                                    removeClass(ns, \"hidden-by-impl-hider\");\n+                                }\n+                                ns = ns.nextElementSibling;\n+                                continue;\n+                            }\n+                            break;\n+                        }\n                     }\n-                    if (hasClass(e, 'inner')) {\n-                        e.innerHTML = labelForToggleButton(false);\n+                }\n+            }\n+\n+            var relatedDoc = toggle.parentNode;\n+\n+            while (!hasClass(relatedDoc, \"impl-items\")) {\n+                relatedDoc = relatedDoc.nextElementSibling;\n+            }\n+\n+            if (!relatedDoc) {\n+                return;\n+            }\n+\n+            // Hide all functions, but not associated types/consts\n+\n+            var action = mode;\n+            if (action === \"toggle\") {\n+                if (hasClass(relatedDoc, \"fns-now-collapsed\")) {\n+                    action = \"show\";\n+                } else {\n+                    action = \"hide\";\n+                }\n+            }\n+\n+            if (action === \"show\") {\n+                removeClass(relatedDoc, \"fns-now-collapsed\");\n+                onEach(toggle.childNodes, adjustToggle(false));\n+                onEach(relatedDoc.childNodes, implHider(false));\n+            } else if (action === \"hide\") {\n+                addClass(relatedDoc, \"fns-now-collapsed\");\n+                onEach(toggle.childNodes, adjustToggle(true));\n+                onEach(relatedDoc.childNodes, implHider(true));\n+            }\n+        }\n+    }\n+\n+    function autoCollapseAllImpls() {\n+        // Automatically minimize all non-inherent impls\n+        onEach(document.getElementsByClassName('impl'), function(n) {\n+            // inherent impl ids are like 'impl' or impl-<number>'\n+            var inherent = (n.id.match(/^impl(?:-\\d+)?$/) !== null);\n+            if (!inherent) {\n+                onEach(n.childNodes, function(m) {\n+                    if (hasClass(m, \"collapse-toggle\")) {\n+                        collapseDocs(m, \"hide\");\n                     }\n                 });\n             }\n-        }\n+        });\n     }\n \n     var x = document.getElementById('toggle-all-docs');\n@@ -1732,8 +1799,12 @@\n              hasClass(next.nextElementSibling, 'docblock'))) {\n             insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n         }\n+        if (hasClass(e, 'impl')) {\n+            insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n+        }\n     }\n     onEach(document.getElementsByClassName('method'), func);\n+    onEach(document.getElementsByClassName('impl'), func);\n     onEach(document.getElementsByClassName('impl-items'), function(e) {\n         onEach(e.getElementsByClassName('associatedconstant'), func);\n     });\n@@ -1781,6 +1852,8 @@\n         }\n     })\n \n+    autoCollapseAllImpls();\n+\n     function createToggleWrapper() {\n         var span = document.createElement('span');\n         span.className = 'toggle-label';\n@@ -1821,7 +1894,7 @@\n     onEach(document.getElementById('main').getElementsByTagName('pre'), function(e) {\n         onEach(e.getElementsByClassName('attributes'), function(i_e) {\n             i_e.parentNode.insertBefore(createToggleWrapper(), i_e);\n-            collapseDocs(i_e.previousSibling.childNodes[0]);\n+            collapseDocs(i_e.previousSibling.childNodes[0], \"toggle\");\n         });\n     });\n "}, {"sha": "d91e0679ed02dd10bd878f0dfaaa8c6a4e01db21", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=89e5a0796e0c5de52cd1d6c7541e5c2c7c47f2cd", "patch": "@@ -110,6 +110,7 @@ h3.impl, h3.method, h4.method, h3.type, h4.type, h4.associatedconstant {\n }\n h3.impl, h3.method, h3.type {\n \tmargin-top: 15px;\n+\tpadding-left: 15px;\n }\n \n h1, h2, h3, h4,\n@@ -522,10 +523,10 @@ a {\n .anchor {\n \tdisplay: none;\n \tposition: absolute;\n-\tleft: -25px;\n+\tleft: -7px;\n }\n .anchor.field {\n-\tleft: -20px;\n+\tleft: -5px;\n }\n .anchor:before {\n \tcontent: '\\2002\\00a7\\2002';\n@@ -926,6 +927,10 @@ span.since {\n \t.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n \t\tdisplay: flex;\n \t}\n+\n+\t.anchor {\n+\t\tdisplay: none !important;\n+\t}\n }\n \n @media print {\n@@ -1083,6 +1088,14 @@ h4 > .important-traits {\n \t\tz-index: -1;\n \t\tborder-bottom: 1px solid;\n \t}\n+\n+\t.collapse-toggle {\n+\t\tleft: -20px;\n+\t}\n+\n+\t.impl > .collapse-toggle {\n+\t\tleft: -10px;\n+\t}\n }\n \n \n@@ -1228,3 +1241,9 @@ kbd {\n \t\tz-index: 1;\n \t}\n }\n+\n+.hidden-by-impl-hider,\n+.hidden-by-usual-hider {\n+\t/* important because of conflicting rule for small screens */\n+\tdisplay: none !important;\n+}"}]}