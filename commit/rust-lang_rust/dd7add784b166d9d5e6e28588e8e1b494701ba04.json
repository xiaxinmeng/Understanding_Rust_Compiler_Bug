{"sha": "dd7add784b166d9d5e6e28588e8e1b494701ba04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkN2FkZDc4NGIxNjZkOWQ1ZTZlMjg1ODhlOGUxYjQ5NDcwMWJhMDQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-11-15T03:45:16Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-11-15T08:38:01Z"}, "message": "Don't align comments on `extern crate`s\n\nCloses #3128", "tree": {"sha": "2f5efd213443194ffc08bb16335627382c55b666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f5efd213443194ffc08bb16335627382c55b666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd7add784b166d9d5e6e28588e8e1b494701ba04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7add784b166d9d5e6e28588e8e1b494701ba04", "html_url": "https://github.com/rust-lang/rust/commit/dd7add784b166d9d5e6e28588e8e1b494701ba04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd7add784b166d9d5e6e28588e8e1b494701ba04/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97fb3f8dc131b9991722082585bd8cb291b1baf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/97fb3f8dc131b9991722082585bd8cb291b1baf6", "html_url": "https://github.com/rust-lang/rust/commit/97fb3f8dc131b9991722082585bd8cb291b1baf6"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "d126e89f3bc0275d5b795bdeaace3318b9ce43b5", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd7add784b166d9d5e6e28588e8e1b494701ba04/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7add784b166d9d5e6e28588e8e1b494701ba04/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=dd7add784b166d9d5e6e28588e8e1b494701ba04", "patch": "@@ -163,6 +163,14 @@ pub fn combine_strs_with_missing_comments(\n     shape: Shape,\n     allow_extend: bool,\n ) -> Option<String> {\n+    trace!(\n+        \"combine_strs_with_missing_comments `{}` `{}` {:?} {:?}\",\n+        prev_str,\n+        next_str,\n+        span,\n+        shape\n+    );\n+\n     let mut result =\n         String::with_capacity(prev_str.len() + next_str.len() + shape.indent.width() + 128);\n     result.push_str(prev_str);"}, {"sha": "61fe6c2496049b71765e829867e5d1c70d010039", "filename": "src/lists.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dd7add784b166d9d5e6e28588e8e1b494701ba04/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7add784b166d9d5e6e28588e8e1b494701ba04/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=dd7add784b166d9d5e6e28588e8e1b494701ba04", "patch": "@@ -36,6 +36,8 @@ pub struct ListFormatting<'a> {\n     preserve_newline: bool,\n     // Nested import lists get some special handling for the \"Mixed\" list type\n     nested: bool,\n+    // Whether comments should be visually aligned.\n+    align_comments: bool,\n     config: &'a Config,\n }\n \n@@ -50,6 +52,7 @@ impl<'a> ListFormatting<'a> {\n             ends_with_newline: true,\n             preserve_newline: false,\n             nested: false,\n+            align_comments: true,\n             config,\n         }\n     }\n@@ -89,6 +92,11 @@ impl<'a> ListFormatting<'a> {\n         self\n     }\n \n+    pub fn align_comments(mut self, align_comments: bool) -> Self {\n+        self.align_comments = align_comments;\n+        self\n+    }\n+\n     pub fn needs_trailing_separator(&self) -> bool {\n         match self.trailing_separator {\n             // We always put separator in front.\n@@ -465,23 +473,31 @@ where\n             let mut formatted_comment = rewrite_post_comment(&mut item_max_width)?;\n \n             if !starts_with_newline(comment) {\n-                let mut comment_alignment =\n-                    post_comment_alignment(item_max_width, inner_item.len());\n-                if first_line_width(&formatted_comment)\n-                    + last_line_width(&result)\n-                    + comment_alignment\n-                    + 1\n-                    > formatting.config.max_width()\n-                {\n-                    item_max_width = None;\n-                    formatted_comment = rewrite_post_comment(&mut item_max_width)?;\n-                    comment_alignment = post_comment_alignment(item_max_width, inner_item.len());\n-                }\n-                for _ in 0..=comment_alignment {\n-                    result.push(' ');\n+                if formatting.align_comments {\n+                    let mut comment_alignment =\n+                        post_comment_alignment(item_max_width, inner_item.len());\n+                    if first_line_width(&formatted_comment)\n+                        + last_line_width(&result)\n+                        + comment_alignment\n+                        + 1\n+                        > formatting.config.max_width()\n+                    {\n+                        item_max_width = None;\n+                        formatted_comment = rewrite_post_comment(&mut item_max_width)?;\n+                        comment_alignment =\n+                            post_comment_alignment(item_max_width, inner_item.len());\n+                    }\n+                    for _ in 0..=comment_alignment {\n+                        result.push(' ');\n+                    }\n                 }\n-                // An additional space for the missing trailing separator.\n-                if last && item_max_width.is_some() && !separate && !formatting.separator.is_empty()\n+                // An additional space for the missing trailing separator (or\n+                // if we skipped alignment above).\n+                if !formatting.align_comments\n+                    || (last\n+                        && item_max_width.is_some()\n+                        && !separate\n+                        && !formatting.separator.is_empty())\n                 {\n                     result.push(' ');\n                 }\n@@ -902,6 +918,7 @@ pub fn struct_lit_formatting<'a>(\n         ends_with_newline,\n         preserve_newline: true,\n         nested: false,\n+        align_comments: true,\n         config: context.config,\n     }\n }"}, {"sha": "a865247e80560ccd7747e60d17e3162826b4026a", "filename": "src/reorder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd7add784b166d9d5e6e28588e8e1b494701ba04/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7add784b166d9d5e6e28588e8e1b494701ba04/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=dd7add784b166d9d5e6e28588e8e1b494701ba04", "patch": "@@ -69,7 +69,9 @@ fn wrap_reorderable_items(\n     list_items: &[ListItem],\n     shape: Shape,\n ) -> Option<String> {\n-    let fmt = ListFormatting::new(shape, context.config).separator(\"\");\n+    let fmt = ListFormatting::new(shape, context.config)\n+        .separator(\"\")\n+        .align_comments(false);\n     write_list(list_items, &fmt)\n }\n "}]}