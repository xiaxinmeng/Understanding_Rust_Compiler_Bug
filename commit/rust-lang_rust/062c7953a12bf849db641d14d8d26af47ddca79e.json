{"sha": "062c7953a12bf849db641d14d8d26af47ddca79e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MmM3OTUzYTEyYmY4NDlkYjY0MWQxNGQ4ZDI2YWY0N2RkY2E3OWU=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-04-29T09:19:01Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:46Z"}, "message": "Add remaining Constructor variants", "tree": {"sha": "b65a58bb638cd9f10a567a528d62d1ff04e2751c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b65a58bb638cd9f10a567a528d62d1ff04e2751c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/062c7953a12bf849db641d14d8d26af47ddca79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/062c7953a12bf849db641d14d8d26af47ddca79e", "html_url": "https://github.com/rust-lang/rust/commit/062c7953a12bf849db641d14d8d26af47ddca79e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/062c7953a12bf849db641d14d8d26af47ddca79e/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2880fd23206042cc3564d388d2f991cb91e76c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/2880fd23206042cc3564d388d2f991cb91e76c39", "html_url": "https://github.com/rust-lang/rust/commit/2880fd23206042cc3564d388d2f991cb91e76c39"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "c02e783af6322fef12c5084576d3b536e2f0619c", "filename": "crates/hir_ty/src/diagnostics/pattern/deconstruct_pat.rs", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/062c7953a12bf849db641d14d8d26af47ddca79e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062c7953a12bf849db641d14d8d26af47ddca79e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs?ref=062c7953a12bf849db641d14d8d26af47ddca79e", "patch": "@@ -31,6 +31,10 @@ impl IntRange {\n         }\n     }\n \n+    fn is_singleton(&self) -> bool {\n+        todo!()\n+    }\n+\n     /// See `Constructor::is_covered_by`\n     fn is_covered_by(&self, other: &Self) -> bool {\n         todo!()\n@@ -66,8 +70,19 @@ pub(super) enum Constructor {\n     Variant(EnumVariantId),\n     /// Ranges of integer literal values (`2`, `2..=5` or `2..5`).\n     IntRange(IntRange),\n+    /// Ranges of floating-point literal values (`2.0..=5.2`).\n+    FloatRange(ToDo),\n+    /// String literals. Strings are not quite the same as `&[u8]` so we treat them separately.\n+    Str(ToDo),\n     /// Array and slice patterns.\n     Slice(Slice),\n+    /// Constants that must not be matched structurally. They are treated as black\n+    /// boxes for the purposes of exhaustiveness: we must not inspect them, and they\n+    /// don't count towards making a match exhaustive.\n+    Opaque,\n+    /// Fake extra constructor for enums that aren't allowed to be matched exhaustively. Also used\n+    /// for those types for which we cannot list constructors explicitly, like `f64` and `str`.\n+    NonExhaustive,\n     /// Stands for constructors that are not seen in the matrix, as explained in the documentation\n     /// for [`SplitWildcard`].\n     Missing,\n@@ -154,7 +169,9 @@ impl Constructor {\n             }\n             // Fast-track if the range is trivial. In particular, we don't do the overlapping\n             // ranges check.\n-            IntRange(_) => todo!(\"Constructor::split IntRange\"),\n+            IntRange(ctor_range) if !ctor_range.is_singleton() => {\n+                todo!(\"Constructor::split IntRange\")\n+            }\n             Slice(_) => todo!(\"Constructor::split Slice\"),\n             // Any other constructor can be used unchanged.\n             _ => smallvec![self.clone()],\n@@ -177,11 +194,24 @@ impl Constructor {\n             (Single, Single) => true,\n             (Variant(self_id), Variant(other_id)) => self_id == other_id,\n \n-            (Constructor::IntRange(_), Constructor::IntRange(_)) => todo!(),\n+            (IntRange(self_range), IntRange(other_range)) => self_range.is_covered_by(other_range),\n+            (FloatRange(..), FloatRange(..)) => {\n+                todo!()\n+            }\n+            (Str(self_val), Str(other_val)) => {\n+                todo!()\n+            }\n+            (Slice(self_slice), Slice(other_slice)) => self_slice.is_covered_by(*other_slice),\n \n-            (Constructor::Slice(_), Constructor::Slice(_)) => todo!(),\n+            // We are trying to inspect an opaque constant. Thus we skip the row.\n+            (Opaque, _) | (_, Opaque) => false,\n+            // Only a wildcard pattern can match the special extra constructor.\n+            (NonExhaustive, _) => false,\n \n-            _ => panic!(\"bug\"),\n+            _ => panic!(\n+                \"bug: trying to compare incompatible constructors {:?} and {:?}\",\n+                self, other\n+            ),\n         }\n     }\n \n@@ -206,8 +236,11 @@ impl Constructor {\n                 .iter()\n                 .filter_map(|c| c.as_slice())\n                 .any(|other| slice.is_covered_by(other)),\n-\n-            _ => todo!(),\n+            // This constructor is never covered by anything else\n+            NonExhaustive => false,\n+            Str(..) | FloatRange(..) | Opaque | Missing | Wildcard => {\n+                panic!(\"bug: found unexpected ctor in all_ctors: {:?}\", self)\n+            }\n         }\n     }\n }\n@@ -425,8 +458,11 @@ impl Fields {\n                 }\n                 _ => panic!(\"Unexpected type for `Single` constructor: {:?}\", ty),\n             },\n-            Missing | Wildcard => Fields::Vec(Default::default()),\n-            _ => todo!(),\n+            Slice(slice) => {\n+                todo!()\n+            }\n+            Str(..) | FloatRange(..) | IntRange(..) | NonExhaustive | Opaque | Missing\n+            | Wildcard => Fields::Vec(Default::default()),\n         };\n         ret\n     }\n@@ -492,12 +528,18 @@ impl Fields {\n                 // TyKind::BoundVar(_) => {}\n                 // TyKind::InferenceVar(_, _) => {}\n             },\n-\n-            _ => todo!(),\n-            // Constructor::IntRange(_) => {}\n-            // Constructor::Slice(_) => {}\n-            // Missing => {}\n-            // Wildcard => {}\n+            Constructor::Slice(slice) => {\n+                todo!()\n+            }\n+            Str(_) => todo!(),\n+            FloatRange(..) => todo!(),\n+            Constructor::IntRange(_) => todo!(),\n+            NonExhaustive => Pat::Wild,\n+            Wildcard => Pat::Wild,\n+            Opaque => panic!(\"bug: we should not try to apply an opaque constructor\"),\n+            Missing => panic!(\n+                \"bug: trying to apply the `Missing` constructor; this should have been done in `apply_constructors`\"\n+            ),\n         }\n     }\n "}]}