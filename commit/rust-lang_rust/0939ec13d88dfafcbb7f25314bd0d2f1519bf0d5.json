{"sha": "0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "node_id": "C_kwDOAAsO6NoAKDA5MzllYzEzZDg4ZGZhZmNiYjdmMjUzMTRiZDBkMmYxNTE5YmYwZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T10:55:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T10:55:54Z"}, "message": "Auto merge of #112203 - flip1995:clippyup, r=Manishearth\n\nUpdate Clippy\n\nr? `@Manishearth`", "tree": {"sha": "c74c915d1f01b1d6b54dfa00a371ac6f65d9d698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c74c915d1f01b1d6b54dfa00a371ac6f65d9d698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "html_url": "https://github.com/rust-lang/rust/commit/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ebf04225d358efe77b822081cebef657f88d35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebf04225d358efe77b822081cebef657f88d35b", "html_url": "https://github.com/rust-lang/rust/commit/8ebf04225d358efe77b822081cebef657f88d35b"}, {"sha": "612c34234653ce6d56834c888298f03e69c88a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/612c34234653ce6d56834c888298f03e69c88a4c", "html_url": "https://github.com/rust-lang/rust/commit/612c34234653ce6d56834c888298f03e69c88a4c"}], "stats": {"total": 3699, "additions": 3033, "deletions": 666}, "files": [{"sha": "00bfbadece33ceb3dbb3a25e554286b8d8e87976", "filename": "Cargo.lock", "status": "modified", "additions": 62, "deletions": 12, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -294,7 +294,7 @@ dependencies = [\n  \"serde_json\",\n  \"sha2\",\n  \"tar\",\n- \"toml\",\n+ \"toml 0.5.7\",\n  \"xz2\",\n ]\n \n@@ -311,7 +311,7 @@ dependencies = [\n  \"indexmap\",\n  \"serde\",\n  \"serde_json\",\n- \"toml\",\n+ \"toml 0.5.7\",\n ]\n \n [[package]]\n@@ -581,7 +581,7 @@ checksum = \"8a2dd5a6fe8c6e3502f568a6353e5273bbb15193ad9a89e457b9970798efbea1\"\n \n [[package]]\n name = \"clippy\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n dependencies = [\n  \"clap 4.2.1\",\n  \"clippy_lints\",\n@@ -596,15 +596,14 @@ dependencies = [\n  \"quote\",\n  \"regex\",\n  \"rustc-semver\",\n- \"rustc-workspace-hack\",\n  \"rustc_tools_util\",\n  \"serde\",\n  \"syn 2.0.8\",\n  \"tempfile\",\n  \"termize\",\n  \"tester\",\n  \"tokio\",\n- \"toml\",\n+ \"toml 0.7.4\",\n  \"walkdir\",\n ]\n \n@@ -623,7 +622,7 @@ dependencies = [\n \n [[package]]\n name = \"clippy_lints\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n dependencies = [\n  \"arrayvec\",\n  \"cargo_metadata 0.15.3\",\n@@ -639,15 +638,15 @@ dependencies = [\n  \"serde\",\n  \"serde_json\",\n  \"tempfile\",\n- \"toml\",\n+ \"toml 0.7.4\",\n  \"unicode-normalization\",\n  \"unicode-script\",\n  \"url\",\n ]\n \n [[package]]\n name = \"clippy_utils\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n dependencies = [\n  \"arrayvec\",\n  \"if_chain\",\n@@ -930,7 +929,7 @@ checksum = \"a0afaad2b26fa326569eb264b1363e8ae3357618c43982b3f285f0774ce76b69\"\n \n [[package]]\n name = \"declare_clippy_lint\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n dependencies = [\n  \"itertools\",\n  \"quote\",\n@@ -2111,7 +2110,7 @@ dependencies = [\n  \"serde_json\",\n  \"shlex\",\n  \"tempfile\",\n- \"toml\",\n+ \"toml 0.5.7\",\n  \"topological-sort\",\n ]\n \n@@ -4363,7 +4362,7 @@ dependencies = [\n  \"serde_json\",\n  \"term\",\n  \"thiserror\",\n- \"toml\",\n+ \"toml 0.5.7\",\n  \"unicode-segmentation\",\n  \"unicode-width\",\n  \"unicode_categories\",\n@@ -4484,6 +4483,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"serde_spanned\"\n+version = \"0.6.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"93107647184f6027e3b7dcb2e11034cf95ffa1e3a682c67951963ac69c1c007d\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n [[package]]\n name = \"sha1\"\n version = \"0.10.5\"\n@@ -4995,6 +5003,40 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"toml\"\n+version = \"0.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d6135d499e69981f9ff0ef2167955a5333c35e36f6937d382974566b3d5b94ec\"\n+dependencies = [\n+ \"serde\",\n+ \"serde_spanned\",\n+ \"toml_datetime\",\n+ \"toml_edit\",\n+]\n+\n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a76a9312f5ba4c2dec6b9161fdf25d87ad8a09256ccea5a556fef03c706a10f\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.19.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2380d56e8670370eee6566b0bfd4265f65b3f432e8c6d85623f728d4fa31f739\"\n+dependencies = [\n+ \"indexmap\",\n+ \"serde\",\n+ \"serde_spanned\",\n+ \"toml_datetime\",\n+ \"winnow\",\n+]\n+\n [[package]]\n name = \"topological-sort\"\n version = \"0.2.2\"\n@@ -5358,7 +5400,6 @@ dependencies = [\n  \"idna\",\n  \"matches\",\n  \"percent-encoding\",\n- \"serde\",\n ]\n \n [[package]]\n@@ -5685,6 +5726,15 @@ version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\"\n \n+[[package]]\n+name = \"winnow\"\n+version = \"0.4.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"61de7bac303dc551fe038e2b3cef0f571087a47571ea6e79a87692ac99b99699\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"writeable\"\n version = \"0.5.1\""}, {"sha": "b49493edce1ba0435e8d5e285ccb940efa7daaa4", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE/new_lint.yml", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fnew_lint.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fnew_lint.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fnew_lint.yml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -12,29 +12,6 @@ body:\n       description: What does this lint do?\n     validations:\n       required: true\n-  - type: input\n-    id: lint-name\n-    attributes:\n-      label: Lint Name\n-      description: Please provide the lint name.\n-  - type: dropdown\n-    id: category\n-    attributes:\n-      label: Category\n-      description: >\n-        What category should this lint go into? If you're unsure you can select\n-        multiple categories. You can find a category description in the\n-        `README`.\n-      multiple: true\n-      options:\n-        - correctness\n-        - suspicious\n-        - style\n-        - complexity\n-        - perf\n-        - pedantic\n-        - restriction\n-        - cargo\n   - type: textarea\n     id: advantage\n     attributes:"}, {"sha": "8b609b47d8192424898cdd006a6b138a7e11081b", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 129, "deletions": 1, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -6,7 +6,132 @@ document.\n \n ## Unreleased / Beta / In Rust Nightly\n \n-[149392b0...master](https://github.com/rust-lang/rust-clippy/compare/149392b0...master)\n+[83e42a23...master](https://github.com/rust-lang/rust-clippy/compare/83e42a23...master)\n+\n+## Rust 1.70\n+\n+Current beta, released 2023-06-01\n+\n+[149392b0...83e42a23](https://github.com/rust-lang/rust-clippy/compare/149392b0...83e42a23)\n+\n+### New Lints\n+\n+* [`large_futures`]\n+  [#10414](https://github.com/rust-lang/rust-clippy/pull/10414)\n+* [`missing_assert_message`]\n+  [#10362](https://github.com/rust-lang/rust-clippy/pull/10362)\n+* [`clear_with_drain`]\n+  [#10528](https://github.com/rust-lang/rust-clippy/pull/10528)\n+* [`redundant_async_block`]\n+  [#10448](https://github.com/rust-lang/rust-clippy/pull/10448)\n+* [`collection_is_never_read`]\n+  [#10415](https://github.com/rust-lang/rust-clippy/pull/10415)\n+* [`let_with_type_underscore`]\n+  [#10467](https://github.com/rust-lang/rust-clippy/pull/10467)\n+* [`tests_outside_test_module`]\n+  [#10543](https://github.com/rust-lang/rust-clippy/pull/10543)\n+* [`allow_attributes`]\n+  [#10481](https://github.com/rust-lang/rust-clippy/pull/10481)\n+* [`suspicious_doc_comments`]\n+  [#10497](https://github.com/rust-lang/rust-clippy/pull/10497)\n+* [`unnecessary_box_returns`]\n+  [#9102](https://github.com/rust-lang/rust-clippy/pull/9102)\n+* [`manual_main_separator_str`]\n+  [#10483](https://github.com/rust-lang/rust-clippy/pull/10483)\n+* [`unnecessary_struct_initialization`]\n+  [#10489](https://github.com/rust-lang/rust-clippy/pull/10489)\n+* [`manual_slice_size_calculation`]\n+  [#10601](https://github.com/rust-lang/rust-clippy/pull/10601)\n+* [`lines_filter_map_ok`]\n+  [#10534](https://github.com/rust-lang/rust-clippy/pull/10534)\n+\n+### Moves and Deprecations\n+\n+* Moved [`let_underscore_untyped`] to `restriction`\n+  [#10442](https://github.com/rust-lang/rust-clippy/pull/10442)\n+\n+### Enhancements\n+\n+* [`extra_unused_type_parameters`]: No longer lints on public items if `avoid-breaking-exported-api` is set\n+  [#10536](https://github.com/rust-lang/rust-clippy/pull/10536)\n+* [`len_without_is_empty`]: Now also detects `async` functions\n+  [#10359](https://github.com/rust-lang/rust-clippy/pull/10359)\n+* [`arithmetic_side_effects`]: Now correctly handles divisions and modulo expressions if the right-hand-side\n+  is unknown\n+  [#10585](https://github.com/rust-lang/rust-clippy/pull/10585)\n+* [`nonminimal_bool`]: No longer ignores `#[allow]` attributes\n+  [#10588](https://github.com/rust-lang/rust-clippy/pull/10588)\n+* [`uninit_vec`], [`uninit_assumed_init`]: Now uses a better heuristic\n+  [#10520](https://github.com/rust-lang/rust-clippy/pull/10520)\n+* [`ifs_same_cond`]: Now also detects immutable method calls.\n+  [#10350](https://github.com/rust-lang/rust-clippy/pull/10350)\n+* [`arithmetic_side_effects`]: No longer lints on right or left shifts with constant integers, as the\n+  compiler warns about them\n+  [#10309](https://github.com/rust-lang/rust-clippy/pull/10309)\n+* [`items_after_statements`]: `#[allow(items_after_statements)]` now works on items\n+  [#10542](https://github.com/rust-lang/rust-clippy/pull/10542)\n+* [`significant_drop_tightening`]: Was optimized\n+  [#10533](https://github.com/rust-lang/rust-clippy/pull/10533)\n+\n+### False Positive Fixes\n+\n+* [`single_component_path_imports`]: No longer lints if the import is used relative to `self`\n+  [#10566](https://github.com/rust-lang/rust-clippy/pull/10566)\n+* [`derivable_impls`]: No longer suggests deriving `Default` on generics with implicit arguments\n+  [#10399](https://github.com/rust-lang/rust-clippy/pull/10399)\n+* [`let_unit_value`]: No longer lints if the expression contains an `await`\n+  [#10439](https://github.com/rust-lang/rust-clippy/pull/10439)\n+* [`double_must_use`]: Now ignores `async` functions\n+  [#10589](https://github.com/rust-lang/rust-clippy/pull/10589)\n+* [`manual_clamp`]: No longer lints in constant context\n+  [#10479](https://github.com/rust-lang/rust-clippy/pull/10479)\n+* [`almost_swapped`]: Now ignores external macros\n+  [#10502](https://github.com/rust-lang/rust-clippy/pull/10502)\n+* [`nonminimal_bool`]: Now ignores macros\n+  [#10527](https://github.com/rust-lang/rust-clippy/pull/10527)\n+* [`needless_return`]: No longer lints match statements with incompatible branches\n+  [#10593](https://github.com/rust-lang/rust-clippy/pull/10593)\n+* [`use_self`]: Do not suggest using `Self` in const generic parameters\n+  [#10375](https://github.com/rust-lang/rust-clippy/pull/10375)\n+* [`mem_replace_option_with_none`]: No longer lints on field expressions\n+  [#10594](https://github.com/rust-lang/rust-clippy/pull/10594)\n+* [`items_after_statements`]: No longer lints on times from macros\n+  [#10542](https://github.com/rust-lang/rust-clippy/pull/10542)\n+* [`print_literal`], [`write_literal`]: No longer lint strings coming from the `file!()` macro\n+  [#10573](https://github.com/rust-lang/rust-clippy/pull/10573)\n+* [`uninit_vec`], [`uninit_assumed_init`]: Now check the types inside arrays and tuples\n+  [#10553](https://github.com/rust-lang/rust-clippy/pull/10553)\n+* [`almost_swapped`]: No longer lints if a variable is assigned to itself\n+  [#10499](https://github.com/rust-lang/rust-clippy/pull/10499)\n+* [`missing_docs_in_private_items`]: No longer lints on public items\n+  [#10324](https://github.com/rust-lang/rust-clippy/pull/10324)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`extra_unused_type_parameters`]: The suggestion is now machine applicable\n+  [#10536](https://github.com/rust-lang/rust-clippy/pull/10536)\n+* [`match_single_binding`]: Now adds a semicolon after the suggestion\n+  [#10470](https://github.com/rust-lang/rust-clippy/pull/10470)\n+* [`missing_const_for_fn`]: Now includes a note if the change could break compatibility\n+  [#10618](https://github.com/rust-lang/rust-clippy/pull/10618)\n+* [`cast_possible_truncation`]: Corrected suggestion for float and wildcard casts\n+  [#10496](https://github.com/rust-lang/rust-clippy/pull/10496)\n+* [`transmutes_expressible_as_ptr_casts`]: The suggestion now includes parentheses when they are required\n+  [#10454](https://github.com/rust-lang/rust-clippy/pull/10454)\n+\n+### ICE Fixes\n+\n+* [`needless_borrow`]: No longer panics on ambiguous projections\n+  [#10403](https://github.com/rust-lang/rust-clippy/pull/10403)\n+* [`multiple_unsafe_ops_per_block`]: Fix ICE when calling a function-like object in an unsafe block\n+  [#10405](https://github.com/rust-lang/rust-clippy/pull/10405)\n+\n+### Others\n+\n+* `clippy-driver` now searches parent directories for `clippy.toml` files\n+  [#10592](https://github.com/rust-lang/rust-clippy/pull/10592)\n+* Fixed a deserialization error for the `array-size-threshold` config value\n+  [#10423](https://github.com/rust-lang/rust-clippy/pull/10423)\n \n ## Rust 1.69\n \n@@ -4838,6 +4963,7 @@ Released 2018-09-13\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_enforced_import_renames`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames\n [`missing_errors_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\n+[`missing_fields_in_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n [`missing_panics_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc\n [`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n@@ -4874,6 +5000,7 @@ Released 2018-09-13\n [`needless_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect\n [`needless_continue`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue\n [`needless_doctest_main`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main\n+[`needless_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_else\n [`needless_for_each`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_for_each\n [`needless_late_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\n [`needless_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n@@ -4949,6 +5076,7 @@ Released 2018-09-13\n [`println_empty_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#println_empty_string\n [`ptr_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg\n [`ptr_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr\n+[`ptr_cast_constness`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness\n [`ptr_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq\n [`ptr_offset_with_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\n [`pub_enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_enum_variant_names"}, {"sha": "ca8bf9fac91a0afa87905669f57514dceaf55a17", "filename": "src/tools/clippy/Cargo.toml", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCargo.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\"\n@@ -30,16 +30,11 @@ termize = \"0.1\"\n compiletest_rs = { version = \"0.10\", features = [\"tmp\"] }\n tester = \"0.9\"\n regex = \"1.5\"\n-toml = \"0.5\"\n+toml = \"0.7.3\"\n walkdir = \"2.3\"\n # This is used by the `collect-metadata` alias.\n filetime = \"0.2\"\n \n-# A noop dependency that changes in the Rust repository, it's a bit of a hack.\n-# See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n-# for more information.\n-rustc-workspace-hack = \"1.0\"\n-\n # UI test dependencies\n clap = { version = \"4.1.4\", features = [\"derive\"] }\n clippy_utils = { path = \"clippy_utils\" }"}, {"sha": "e8274bc4575d04bd86716a10bcf9ee2450e48ad1", "filename": "src/tools/clippy/book/src/configuration.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fconfiguration.md?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -2,8 +2,14 @@\n \n > **Note:** The configuration file is unstable and may be deprecated in the future.\n \n-Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a\n-basic `variable = value` mapping e.g.\n+Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`, which is searched for in:\n+\n+1. The directory specified by the `CLIPPY_CONF_DIR` environment variable, or\n+2. The directory specified by the\n+[CARGO_MANIFEST_DIR](https://doc.rust-lang.org/cargo/reference/environment-variables.html) environment variable, or\n+3. The current directory.\n+\n+It contains a basic `variable = value` mapping e.g.\n \n ```toml\n avoid-breaking-exported-api = false"}, {"sha": "c26aa883ebae24726db239505640e85d2e686401", "filename": "src/tools/clippy/book/src/development/adding_lints.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -630,8 +630,14 @@ Before submitting your PR make sure you followed all the basic requirements:\n \n ## Adding configuration to a lint\n \n-Clippy supports the configuration of lints values using a `clippy.toml` file in\n-the workspace directory. Adding a configuration to a lint can be useful for\n+Clippy supports the configuration of lints values using a `clippy.toml` file which is searched for in:\n+\n+1. The directory specified by the `CLIPPY_CONF_DIR` environment variable, or\n+2. The directory specified by the\n+[CARGO_MANIFEST_DIR](https://doc.rust-lang.org/cargo/reference/environment-variables.html) environment variable, or\n+3. The current directory.\n+\n+Adding a configuration to a lint can be useful for\n thresholds or to constrain some behavior that can be seen as a false positive\n for some users. Adding a configuration is done in the following steps:\n "}, {"sha": "c03fbe9d275f3dcb763668e40cdea8e0c8a0302a", "filename": "src/tools/clippy/clippy_dev/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -5,6 +5,7 @@\n use clap::{Arg, ArgAction, ArgMatches, Command};\n use clippy_dev::{bless, dogfood, fmt, lint, new_lint, serve, setup, update_lints};\n use indoc::indoc;\n+use std::convert::Infallible;\n \n fn main() {\n     let matches = get_clap_config();\n@@ -180,7 +181,8 @@ fn get_clap_config() -> ArgMatches {\n                         .short('n')\n                         .long(\"name\")\n                         .help(\"Name of the new lint in snake case, ex: fn_too_long\")\n-                        .required(true),\n+                        .required(true)\n+                        .value_parser(|name: &str| Ok::<_, Infallible>(name.replace('-', \"_\"))),\n                     Arg::new(\"category\")\n                         .short('c')\n                         .long(\"category\")"}, {"sha": "be9261a47041c627feeeff5e4fc8672a8e233986", "filename": "src/tools/clippy/clippy_lints/Cargo.toml", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\"\n@@ -20,15 +20,13 @@ quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.7\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n-tempfile = { version = \"3.2\", optional = true }\n-toml = \"0.5\"\n+tempfile = { version = \"3.3.0\", optional = true }\n+toml = \"0.7.3\"\n unicode-normalization = \"0.1\"\n unicode-script = { version = \"0.5\", default-features = false }\n semver = \"1.0\"\n rustc-semver = \"1.1\"\n-# NOTE: cargo requires serde feat in its url dep\n-# see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n-url = { version = \"2.2\", features = [\"serde\"] }\n+url = \"2.2\"\n \n [features]\n deny-warnings = [\"clippy_utils/deny-warnings\"]"}, {"sha": "554efdc58e1cb094e2e0bae0e587ffc3b0ebf912", "filename": "src/tools/clippy/clippy_lints/src/allow_attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fallow_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fallow_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fallow_attributes.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -40,7 +40,7 @@ declare_clippy_lint! {\n     ///     a.len()\n     /// }\n     /// ```\n-    #[clippy::version = \"1.69.0\"]\n+    #[clippy::version = \"1.70.0\"]\n     pub ALLOW_ATTRIBUTES,\n     restriction,\n     \"`#[allow]` will not trigger if a warning isn't found. `#[expect]` triggers if there are no warnings.\""}, {"sha": "ff0102255a0a9831bd9d24022300ddd0ad46e017", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -88,7 +88,6 @@ impl<'tcx> LateLintPass<'tcx> for NonminimalBool {\n         NonminimalBoolVisitor { cx }.visit_body(body);\n     }\n }\n-\n struct NonminimalBoolVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n }\n@@ -473,6 +472,10 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n                     self.bool_expr(e);\n                 },\n                 ExprKind::Unary(UnOp::Not, inner) => {\n+                    if let ExprKind::Unary(UnOp::Not, ex) = inner.kind &&\n+                    !self.cx.typeck_results().node_types()[ex.hir_id].is_bool() {\n+                        return;\n+                    }\n                     if self.cx.typeck_results().node_types()[inner.hir_id].is_bool() {\n                         self.bool_expr(e);\n                     }"}, {"sha": "b90dab07a274afa41bbd667a6ae7ae8245a704c6", "filename": "src/tools/clippy/clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -17,6 +17,7 @@ mod fn_to_numeric_cast;\n mod fn_to_numeric_cast_any;\n mod fn_to_numeric_cast_with_truncation;\n mod ptr_as_ptr;\n+mod ptr_cast_constness;\n mod unnecessary_cast;\n mod utils;\n \n@@ -363,7 +364,7 @@ declare_clippy_lint! {\n     /// namely `*const T` to `*const U` and `*mut T` to `*mut U`.\n     ///\n     /// ### Why is this bad?\n-    /// Though `as` casts between raw pointers is not terrible, `pointer::cast` is safer because\n+    /// Though `as` casts between raw pointers are not terrible, `pointer::cast` is safer because\n     /// it cannot accidentally change the pointer's mutability nor cast the pointer to other types like `usize`.\n     ///\n     /// ### Example\n@@ -386,6 +387,34 @@ declare_clippy_lint! {\n     \"casting using `as` from and to raw pointers that doesn't change its mutability, where `pointer::cast` could take the place of `as`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `as` casts between raw pointers which change its constness, namely `*const T` to\n+    /// `*mut T` and `*mut T` to `*const T`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Though `as` casts between raw pointers are not terrible, `pointer::cast_mut` and\n+    /// `pointer::cast_const` are safer because they cannot accidentally cast the pointer to another\n+    /// type.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let ptr: *const u32 = &42_u32;\n+    /// let mut_ptr = ptr as *mut u32;\n+    /// let ptr = mut_ptr as *const u32;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let ptr: *const u32 = &42_u32;\n+    /// let mut_ptr = ptr.cast_mut();\n+    /// let ptr = mut_ptr.cast_const();\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub PTR_CAST_CONSTNESS,\n+    pedantic,\n+    \"casting using `as` from and to raw pointers to change constness when specialized methods apply\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for casts from an enum type to an integral type which will definitely truncate the\n@@ -652,6 +681,7 @@ impl_lint_pass!(Casts => [\n     FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n     CHAR_LIT_AS_U8,\n     PTR_AS_PTR,\n+    PTR_CAST_CONSTNESS,\n     CAST_ENUM_TRUNCATION,\n     CAST_ENUM_CONSTRUCTOR,\n     CAST_ABS_TO_UNSIGNED,\n@@ -685,6 +715,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                 return;\n             }\n             cast_slice_from_raw_parts::check(cx, expr, cast_expr, cast_to, &self.msrv);\n+            ptr_cast_constness::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n             as_ptr_cast_mut::check(cx, expr, cast_expr, cast_to);\n             fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);"}, {"sha": "ab015f8822e1b13b79b0b0f7cd7de9b7b4a42f25", "filename": "src/tools/clippy/clippy_lints/src/casts/ptr_cast_constness.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_cast_constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_cast_constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_cast_constness.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,44 @@\n+use clippy_utils::msrvs::POINTER_CAST_CONSTNESS;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, msrvs::Msrv};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, Mutability};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n+\n+use super::PTR_CAST_CONSTNESS;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    msrv: &Msrv,\n+) {\n+    if_chain! {\n+        if msrv.meets(POINTER_CAST_CONSTNESS);\n+        if let ty::RawPtr(TypeAndMut { mutbl: from_mutbl, .. }) = cast_from.kind();\n+        if let ty::RawPtr(TypeAndMut { mutbl: to_mutbl, .. }) = cast_to.kind();\n+        if matches!((from_mutbl, to_mutbl),\n+            (Mutability::Not, Mutability::Mut) | (Mutability::Mut, Mutability::Not));\n+        then {\n+            let sugg = Sugg::hir(cx, cast_expr, \"_\");\n+            let constness = match *to_mutbl {\n+                Mutability::Not => \"const\",\n+                Mutability::Mut => \"mut\",\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                PTR_CAST_CONSTNESS,\n+                expr.span,\n+                \"`as` casting between raw pointers while changing its constness\",\n+                &format!(\"try `pointer::cast_{constness}`, a safer alternative\"),\n+                format!(\"{}.cast_{constness}()\", sugg.maybe_par()),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "ac5ac542cf944e3a433f006240ca4d4a087d077b", "filename": "src/tools/clippy/clippy_lints/src/collection_is_never_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollection_is_never_read.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -37,7 +37,7 @@ declare_clippy_lint! {\n     ///     println!(\"{sample}\");\n     /// }\n     /// ```\n-    #[clippy::version = \"1.69.0\"]\n+    #[clippy::version = \"1.70.0\"]\n     pub COLLECTION_IS_NEVER_READ,\n     nursery,\n     \"a collection is never queried\""}, {"sha": "15ff8be0fd942e597aabede1723573b1e107fcee", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -89,6 +89,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::casts::FN_TO_NUMERIC_CAST_ANY_INFO,\n     crate::casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION_INFO,\n     crate::casts::PTR_AS_PTR_INFO,\n+    crate::casts::PTR_CAST_CONSTNESS_INFO,\n     crate::casts::UNNECESSARY_CAST_INFO,\n     crate::checked_conversions::CHECKED_CONVERSIONS_INFO,\n     crate::cognitive_complexity::COGNITIVE_COMPLEXITY_INFO,\n@@ -427,6 +428,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::missing_const_for_fn::MISSING_CONST_FOR_FN_INFO,\n     crate::missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS_INFO,\n     crate::missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES_INFO,\n+    crate::missing_fields_in_debug::MISSING_FIELDS_IN_DEBUG_INFO,\n     crate::missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS_INFO,\n     crate::missing_trait_methods::MISSING_TRAIT_METHODS_INFO,\n     crate::mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION_INFO,\n@@ -447,6 +449,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::needless_bool::NEEDLESS_BOOL_ASSIGN_INFO,\n     crate::needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE_INFO,\n     crate::needless_continue::NEEDLESS_CONTINUE_INFO,\n+    crate::needless_else::NEEDLESS_ELSE_INFO,\n     crate::needless_for_each::NEEDLESS_FOR_EACH_INFO,\n     crate::needless_late_init::NEEDLESS_LATE_INIT_INFO,\n     crate::needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS_INFO,"}, {"sha": "fb037bbcbf3eb95c1194512d6e8f87af8c00f807", "filename": "src/tools/clippy/clippy_lints/src/default_constructed_unit_structs.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::{diagnostics::span_lint_and_sugg, match_def_path, paths};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, is_ty_alias, match_def_path, paths};\n use hir::{def::Res, ExprKind};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -43,12 +43,23 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(DefaultConstructedUnitStructs => [DEFAULT_CONSTRUCTED_UNIT_STRUCTS]);\n \n+fn is_alias(ty: hir::Ty<'_>) -> bool {\n+    if let hir::TyKind::Path(ref qpath) = ty.kind {\n+        is_ty_alias(qpath)\n+    } else {\n+        false\n+    }\n+}\n+\n impl LateLintPass<'_> for DefaultConstructedUnitStructs {\n     fn check_expr<'tcx>(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n         if_chain!(\n             // make sure we have a call to `Default::default`\n             if let hir::ExprKind::Call(fn_expr, &[]) = expr.kind;\n-            if let ExprKind::Path(ref qpath@ hir::QPath::TypeRelative(_,_)) = fn_expr.kind;\n+            if let ExprKind::Path(ref qpath @ hir::QPath::TypeRelative(base, _)) = fn_expr.kind;\n+            // make sure this isn't a type alias:\n+            // `<Foo as Bar>::Assoc` cannot be used as a constructor\n+            if !is_alias(*base);\n             if let Res::Def(_, def_id) = cx.qpath_res(qpath, fn_expr.hir_id);\n             if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n             // make sure we have a struct with no fields (unit struct)"}, {"sha": "087c4a65250a9b50692169e45fd4efd652b2d943", "filename": "src/tools/clippy/clippy_lints/src/large_futures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_futures.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n     ///     wait(fut).await;\n     /// }\n     /// ```\n-    #[clippy::version = \"1.68.0\"]\n+    #[clippy::version = \"1.70.0\"]\n     pub LARGE_FUTURES,\n     pedantic,\n     \"large future may lead to unexpected stack overflows\""}, {"sha": "0a5901bce046e2fd1376ce5587a79aa7603ad4f9", "filename": "src/tools/clippy/clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -38,7 +38,7 @@ impl_lint_pass!(LargeStackArrays => [LARGE_STACK_ARRAYS]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if let ExprKind::Repeat(_, _) = expr.kind\n+        if let ExprKind::Repeat(_, _) | ExprKind::Array(_) = expr.kind\n           && let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind()\n           && let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind()\n           && let Ok(element_count) = element_count.try_to_target_usize(cx.tcx)"}, {"sha": "2f10e3d258133640c9ca872e3c90116e5222c63b", "filename": "src/tools/clippy/clippy_lints/src/let_with_type_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_with_type_underscore.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -17,7 +17,7 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// let my_number = 1;\n     /// ```\n-    #[clippy::version = \"1.69.0\"]\n+    #[clippy::version = \"1.70.0\"]\n     pub LET_WITH_TYPE_UNDERSCORE,\n     complexity,\n     \"unneeded underscore type (`_`) in a variable declaration\""}, {"sha": "4a23edb58aaa4999c414dd6ef941d6f0bff63895", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -202,6 +202,7 @@ mod missing_assert_message;\n mod missing_const_for_fn;\n mod missing_doc;\n mod missing_enforced_import_rename;\n+mod missing_fields_in_debug;\n mod missing_inline;\n mod missing_trait_methods;\n mod mixed_read_write_in_expression;\n@@ -217,6 +218,7 @@ mod needless_arbitrary_self_type;\n mod needless_bool;\n mod needless_borrowed_ref;\n mod needless_continue;\n+mod needless_else;\n mod needless_for_each;\n mod needless_late_init;\n mod needless_parens_on_range_literals;\n@@ -333,7 +335,7 @@ mod zero_sized_map_values;\n \n pub use crate::utils::conf::{lookup_conf_file, Conf};\n use crate::utils::{\n-    conf::{format_error, metadata::get_configuration_metadata, TryConf},\n+    conf::{metadata::get_configuration_metadata, TryConf},\n     FindAll,\n };\n \n@@ -369,23 +371,36 @@ pub fn read_conf(sess: &Session, path: &io::Result<(Option<PathBuf>, Vec<String>\n         },\n     };\n \n-    let TryConf { conf, errors, warnings } = utils::conf::read(file_name);\n+    let TryConf { conf, errors, warnings } = utils::conf::read(sess, file_name);\n     // all conf errors are non-fatal, we just use the default conf in case of error\n     for error in errors {\n-        sess.err(format!(\n-            \"error reading Clippy's configuration file `{}`: {}\",\n-            file_name.display(),\n-            format_error(error)\n-        ));\n+        if let Some(span) = error.span {\n+            sess.span_err(\n+                span,\n+                format!(\"error reading Clippy's configuration file: {}\", error.message),\n+            );\n+        } else {\n+            sess.err(format!(\n+                \"error reading Clippy's configuration file `{}`: {}\",\n+                file_name.display(),\n+                error.message\n+            ));\n+        }\n     }\n \n     for warning in warnings {\n-        sess.struct_warn(format!(\n-            \"error reading Clippy's configuration file `{}`: {}\",\n-            file_name.display(),\n-            format_error(warning)\n-        ))\n-        .emit();\n+        if let Some(span) = warning.span {\n+            sess.span_warn(\n+                span,\n+                format!(\"error reading Clippy's configuration file: {}\", warning.message),\n+            );\n+        } else {\n+            sess.warn(format!(\n+                \"error reading Clippy's configuration file `{}`: {}\",\n+                file_name.display(),\n+                warning.message\n+            ));\n+        }\n     }\n \n     conf\n@@ -990,6 +1005,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(items_after_test_module::ItemsAfterTestModule));\n     store.register_early_pass(|| Box::new(ref_patterns::RefPatterns));\n     store.register_late_pass(|_| Box::new(default_constructed_unit_structs::DefaultConstructedUnitStructs));\n+    store.register_early_pass(|| Box::new(needless_else::NeedlessElse));\n+    store.register_late_pass(|_| Box::new(missing_fields_in_debug::MissingFieldsInDebug));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "389b0a4a62dc55b70a2df1acd7da510a6e34995b", "filename": "src/tools/clippy/clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 99, "deletions": 65, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -77,53 +77,54 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n             local.els.is_none() &&\n             local.ty.is_none() &&\n             init.span.ctxt() == stmt.span.ctxt() &&\n-            let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init) {\n-        match if_let_or_match {\n-            IfLetOrMatch::IfLet(if_let_expr, let_pat, if_then, if_else) => if_chain! {\n-                if expr_is_simple_identity(let_pat, if_then);\n-                if let Some(if_else) = if_else;\n-                if expr_diverges(cx, if_else);\n-                then {\n-                    emit_manual_let_else(cx, stmt.span, if_let_expr, local.pat, let_pat, if_else);\n-                }\n-            },\n-            IfLetOrMatch::Match(match_expr, arms, source) => {\n-                if self.matches_behaviour == MatchLintBehaviour::Never {\n-                    return;\n-                }\n-                if source != MatchSource::Normal {\n-                    return;\n-                }\n-                // Any other number than two arms doesn't (necessarily)\n-                // have a trivial mapping to let else.\n-                if arms.len() != 2 {\n-                    return;\n-                }\n-                // Guards don't give us an easy mapping either\n-                if arms.iter().any(|arm| arm.guard.is_some()) {\n-                    return;\n-                }\n-                let check_types = self.matches_behaviour == MatchLintBehaviour::WellKnownTypes;\n-                let diverging_arm_opt = arms\n-                    .iter()\n-                    .enumerate()\n-                    .find(|(_, arm)| expr_diverges(cx, arm.body) && pat_allowed_for_else(cx, arm.pat, check_types));\n-                let Some((idx, diverging_arm)) = diverging_arm_opt else { return; };\n-                // If the non-diverging arm is the first one, its pattern can be reused in a let/else statement.\n-                // However, if it arrives in second position, its pattern may cover some cases already covered\n-                // by the diverging one.\n-                // TODO: accept the non-diverging arm as a second position if patterns are disjointed.\n-                if idx == 0 {\n-                    return;\n-                }\n-                let pat_arm = &arms[1 - idx];\n-                if !expr_is_simple_identity(pat_arm.pat, pat_arm.body) {\n-                    return;\n-                }\n+            let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init)\n+        {\n+            match if_let_or_match {\n+                IfLetOrMatch::IfLet(if_let_expr, let_pat, if_then, if_else) => if_chain! {\n+                    if expr_is_simple_identity(let_pat, if_then);\n+                    if let Some(if_else) = if_else;\n+                    if expr_diverges(cx, if_else);\n+                    then {\n+                        emit_manual_let_else(cx, stmt.span, if_let_expr, local.pat, let_pat, if_else);\n+                    }\n+                },\n+                IfLetOrMatch::Match(match_expr, arms, source) => {\n+                    if self.matches_behaviour == MatchLintBehaviour::Never {\n+                        return;\n+                    }\n+                    if source != MatchSource::Normal {\n+                        return;\n+                    }\n+                    // Any other number than two arms doesn't (necessarily)\n+                    // have a trivial mapping to let else.\n+                    if arms.len() != 2 {\n+                        return;\n+                    }\n+                    // Guards don't give us an easy mapping either\n+                    if arms.iter().any(|arm| arm.guard.is_some()) {\n+                        return;\n+                    }\n+                    let check_types = self.matches_behaviour == MatchLintBehaviour::WellKnownTypes;\n+                    let diverging_arm_opt = arms\n+                        .iter()\n+                        .enumerate()\n+                        .find(|(_, arm)| expr_diverges(cx, arm.body) && pat_allowed_for_else(cx, arm.pat, check_types));\n+                    let Some((idx, diverging_arm)) = diverging_arm_opt else { return; };\n+                    // If the non-diverging arm is the first one, its pattern can be reused in a let/else statement.\n+                    // However, if it arrives in second position, its pattern may cover some cases already covered\n+                    // by the diverging one.\n+                    // TODO: accept the non-diverging arm as a second position if patterns are disjointed.\n+                    if idx == 0 {\n+                        return;\n+                    }\n+                    let pat_arm = &arms[1 - idx];\n+                    if !expr_is_simple_identity(pat_arm.pat, pat_arm.body) {\n+                        return;\n+                    }\n \n-                emit_manual_let_else(cx, stmt.span, match_expr, local.pat, pat_arm.pat, diverging_arm.body);\n-            },\n-        }\n+                    emit_manual_let_else(cx, stmt.span, match_expr, local.pat, pat_arm.pat, diverging_arm.body);\n+                },\n+            }\n         };\n     }\n \n@@ -145,10 +146,9 @@ fn emit_manual_let_else(\n         \"this could be rewritten as `let...else`\",\n         |diag| {\n             // This is far from perfect, for example there needs to be:\n-            // * mut additions for the bindings\n-            // * renamings of the bindings for `PatKind::Or`\n+            // * tracking for multi-binding cases: let (foo, bar) = if let (Some(foo), Ok(bar)) = ...\n+            // * renamings of the bindings for many `PatKind`s like structs, slices, etc.\n             // * unused binding collision detection with existing ones\n-            // * putting patterns with at the top level | inside ()\n             // for this to be machine applicable.\n             let mut app = Applicability::HasPlaceholders;\n             let (sn_expr, _) = snippet_with_context(cx, expr.span, span.ctxt(), \"\", &mut app);\n@@ -159,28 +159,62 @@ fn emit_manual_let_else(\n             } else {\n                 format!(\"{{ {sn_else} }}\")\n             };\n-            let sn_bl = match pat.kind {\n-                PatKind::Or(..) => {\n-                    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n-                    format!(\"({sn_pat})\")\n-                },\n-                // Replace the variable name iff `TupleStruct` has one argument like `Variant(v)`.\n-                PatKind::TupleStruct(ref w, args, ..) if args.len() == 1 => {\n-                    let sn_wrapper = cx.sess().source_map().span_to_snippet(w.span()).unwrap_or_default();\n-                    let (sn_inner, _) = snippet_with_context(cx, local.span, span.ctxt(), \"\", &mut app);\n-                    format!(\"{sn_wrapper}({sn_inner})\")\n-                },\n-                _ => {\n-                    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n-                    sn_pat.into_owned()\n-                },\n-            };\n+            let sn_bl = replace_in_pattern(cx, span, local, pat, &mut app);\n             let sugg = format!(\"let {sn_bl} = {sn_expr} else {else_bl};\");\n             diag.span_suggestion(span, \"consider writing\", sugg, app);\n         },\n     );\n }\n \n+// replaces the locals in the pattern\n+fn replace_in_pattern(\n+    cx: &LateContext<'_>,\n+    span: Span,\n+    local: &Pat<'_>,\n+    pat: &Pat<'_>,\n+    app: &mut Applicability,\n+) -> String {\n+    let mut bindings_count = 0;\n+    pat.each_binding_or_first(&mut |_, _, _, _| bindings_count += 1);\n+    // If the pattern creates multiple bindings, exit early,\n+    // as otherwise we might paste the pattern to the positions of multiple bindings.\n+    if bindings_count > 1 {\n+        let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", app);\n+        return sn_pat.into_owned();\n+    }\n+\n+    match pat.kind {\n+        PatKind::Binding(..) => {\n+            let (sn_bdg, _) = snippet_with_context(cx, local.span, span.ctxt(), \"\", app);\n+            return sn_bdg.to_string();\n+        },\n+        PatKind::Or(pats) => {\n+            let patterns = pats\n+                .iter()\n+                .map(|pat| replace_in_pattern(cx, span, local, pat, app))\n+                .collect::<Vec<_>>();\n+            let or_pat = patterns.join(\" | \");\n+            return format!(\"({or_pat})\");\n+        },\n+        // Replace the variable name iff `TupleStruct` has one argument like `Variant(v)`.\n+        PatKind::TupleStruct(ref w, args, dot_dot_pos) => {\n+            let mut args = args\n+                .iter()\n+                .map(|pat| replace_in_pattern(cx, span, local, pat, app))\n+                .collect::<Vec<_>>();\n+            if let Some(pos) = dot_dot_pos.as_opt_usize() {\n+                args.insert(pos, \"..\".to_owned());\n+            }\n+            let args = args.join(\", \");\n+            let sn_wrapper = cx.sess().source_map().span_to_snippet(w.span()).unwrap_or_default();\n+            return format!(\"{sn_wrapper}({args})\");\n+        },\n+        _ => {},\n+    }\n+    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", app);\n+    sn_pat.into_owned()\n+}\n+\n /// Check whether an expression is divergent. May give false negatives.\n fn expr_diverges(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     struct V<'cx, 'tcx> {"}, {"sha": "6424ac31d9f68d69e38fbe20d57af4861c00ed38", "filename": "src/tools/clippy/clippy_lints/src/matches/match_wild_err_arm.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -2,14 +2,19 @@ use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::macros::{is_panic, root_macro_call};\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::is_local_used;\n-use clippy_utils::{is_wild, peel_blocks_with_stmt};\n+use clippy_utils::{in_constant, is_wild, peel_blocks_with_stmt};\n use rustc_hir::{Arm, Expr, PatKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::{kw, sym};\n \n use super::MATCH_WILD_ERR_ARM;\n \n pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm<'tcx>]) {\n+    // `unwrap`/`expect` is not (yet) const, so we want to allow this in const contexts for now\n+    if in_constant(cx, ex.hir_id) {\n+        return;\n+    }\n+\n     let ex_ty = cx.typeck_results().expr_ty(ex).peel_refs();\n     if is_type_diagnostic_item(cx, ex_ty, sym::Result) {\n         for arm in arms {"}, {"sha": "0d91051632a185244a0ec66829abe6f0d6fc931f", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -25,7 +25,7 @@ mod wild_in_or_pats;\n \n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet_opt, walk_span_to_context};\n-use clippy_utils::{higher, in_constant, is_span_match, tokenize_with_text};\n+use clippy_utils::{higher, in_constant, is_direct_expn_of, is_span_match, tokenize_with_text};\n use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::TokenKind;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -974,12 +974,16 @@ impl_lint_pass!(Matches => [\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if is_direct_expn_of(expr.span, \"matches\").is_none() && in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n         let from_expansion = expr.span.from_expansion();\n \n         if let ExprKind::Match(ex, arms, source) = expr.kind {\n+            if is_direct_expn_of(expr.span, \"matches\").is_some() {\n+                redundant_pattern_match::check_match(cx, expr, ex, arms);\n+            }\n+\n             if source == MatchSource::Normal && !is_span_match(cx, expr.span) {\n                 return;\n             }"}, {"sha": "479cfd835126c0459a8919bf1827a1643c4e6545", "filename": "src/tools/clippy/clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,10 +1,10 @@\n use super::REDUNDANT_PATTERN_MATCHING;\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, walk_span_to_context};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_type_diagnostic_item, needs_ordered_drop};\n use clippy_utils::visitors::any_temporaries_need_ordered_drop;\n-use clippy_utils::{higher, is_trait_method};\n+use clippy_utils::{higher, is_expn_of, is_trait_method};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -190,24 +190,19 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n         let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n         if let Some(good_method) = found_good_method(cx, arms, node_pair) {\n-            let span = expr.span.to(op.span);\n+            let span = is_expn_of(expr.span, \"matches\").unwrap_or(expr.span.to(op.span));\n             let result_expr = match &op.kind {\n                 ExprKind::AddrOf(_, _, borrowed) => borrowed,\n                 _ => op,\n             };\n-            span_lint_and_then(\n+            span_lint_and_sugg(\n                 cx,\n                 REDUNDANT_PATTERN_MATCHING,\n-                expr.span,\n+                span,\n                 &format!(\"redundant pattern matching, consider using `{good_method}`\"),\n-                |diag| {\n-                    diag.span_suggestion(\n-                        span,\n-                        \"try this\",\n-                        format!(\"{}.{good_method}\", snippet(cx, result_expr.span, \"_\")),\n-                        Applicability::MaybeIncorrect, // snippet\n-                    );\n-                },\n+                \"try this\",\n+                format!(\"{}.{good_method}\", snippet(cx, result_expr.span, \"_\")),\n+                Applicability::MachineApplicable,\n             );\n         }\n     }"}, {"sha": "88cbefbb5d3d5e5541c5aaf3117cddf1aa3f3eb3", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -3191,7 +3191,7 @@ declare_clippy_lint! {\n     /// let mut v = vec![1, 2, 3];\n     /// v.clear();\n     /// ```\n-    #[clippy::version = \"1.69.0\"]\n+    #[clippy::version = \"1.70.0\"]\n     pub CLEAR_WITH_DRAIN,\n     nursery,\n     \"calling `drain` in order to `clear` a container\""}, {"sha": "4dbb79334caf3e859d1f8ac1b9728fa86c79b1be", "filename": "src/tools/clippy/clippy_lints/src/missing_assert_message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_assert_message.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -36,7 +36,7 @@ declare_clippy_lint! {\n     ///     assert!(service.ready, \"`service.poll_ready()` must be called first to ensure that service is ready to receive requests\");\n     /// }\n     /// ```\n-    #[clippy::version = \"1.69.0\"]\n+    #[clippy::version = \"1.70.0\"]\n     pub MISSING_ASSERT_MESSAGE,\n     restriction,\n     \"checks assertions without a custom panic message\""}, {"sha": "b6f0de7e504f0cab616335347c60f4e84bb64ed7", "filename": "src/tools/clippy/clippy_lints/src/missing_fields_in_debug.rs", "status": "added", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_fields_in_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_fields_in_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_fields_in_debug.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,234 @@\n+use std::ops::ControlFlow;\n+\n+use clippy_utils::{\n+    diagnostics::span_lint_and_then,\n+    is_path_lang_item, paths,\n+    ty::match_type,\n+    visitors::{for_each_expr, Visitable},\n+};\n+use rustc_ast::LitKind;\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::Block;\n+use rustc_hir::{\n+    def::{DefKind, Res},\n+    Expr, ImplItemKind, LangItem, Node,\n+};\n+use rustc_hir::{ExprKind, Impl, ItemKind, QPath, TyKind};\n+use rustc_hir::{ImplItem, Item, VariantData};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Ty;\n+use rustc_middle::ty::TypeckResults;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, Span, Symbol};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for manual [`core::fmt::Debug`](https://doc.rust-lang.org/core/fmt/trait.Debug.html) implementations that do not use all fields.\n+    ///\n+    /// ### Why is this bad?\n+    /// A common mistake is to forget to update manual `Debug` implementations when adding a new field\n+    /// to a struct or a new variant to an enum.\n+    ///\n+    /// At the same time, it also acts as a style lint to suggest using [`core::fmt::DebugStruct::finish_non_exhaustive`](https://doc.rust-lang.org/core/fmt/struct.DebugStruct.html#method.finish_non_exhaustive)\n+    /// for the times when the user intentionally wants to leave out certain fields (e.g. to hide implementation details).\n+    ///\n+    /// ### Known problems\n+    /// This lint works based on the `DebugStruct` helper types provided by the `Formatter`,\n+    /// so this won't detect `Debug` impls that use the `write!` macro.\n+    /// Oftentimes there is more logic to a `Debug` impl if it uses `write!` macro, so it tries\n+    /// to be on the conservative side and not lint in those cases in an attempt to prevent false positives.\n+    ///\n+    /// This lint also does not look through function calls, so calling a function does not consider fields\n+    /// used inside of that function as used by the `Debug` impl.\n+    ///\n+    /// Lastly, it also ignores tuple structs as their `DebugTuple` formatter does not have a `finish_non_exhaustive`\n+    /// method, as well as enums because their exhaustiveness is already checked by the compiler when matching on the enum,\n+    /// making it much less likely to accidentally forget to update the `Debug` impl when adding a new variant.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::fmt;\n+    /// struct Foo {\n+    ///     data: String,\n+    ///     // implementation detail\n+    ///     hidden_data: i32\n+    /// }\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         formatter\n+    ///             .debug_struct(\"Foo\")\n+    ///             .field(\"data\", &self.data)\n+    ///             .finish()\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::fmt;\n+    /// struct Foo {\n+    ///     data: String,\n+    ///     // implementation detail\n+    ///     hidden_data: i32\n+    /// }\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         formatter\n+    ///             .debug_struct(\"Foo\")\n+    ///             .field(\"data\", &self.data)\n+    ///             .finish_non_exhaustive()\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub MISSING_FIELDS_IN_DEBUG,\n+    pedantic,\n+    \"missing fields in manual `Debug` implementation\"\n+}\n+declare_lint_pass!(MissingFieldsInDebug => [MISSING_FIELDS_IN_DEBUG]);\n+\n+fn report_lints(cx: &LateContext<'_>, span: Span, span_notes: Vec<(Span, &'static str)>) {\n+    span_lint_and_then(\n+        cx,\n+        MISSING_FIELDS_IN_DEBUG,\n+        span,\n+        \"manual `Debug` impl does not include all fields\",\n+        |diag| {\n+            for (span, note) in span_notes {\n+                diag.span_note(span, note);\n+            }\n+            diag.help(\"consider including all fields in this `Debug` impl\")\n+                .help(\"consider calling `.finish_non_exhaustive()` if you intend to ignore fields\");\n+        },\n+    );\n+}\n+\n+/// Checks if we should lint in a block of code\n+///\n+/// The way we check for this condition is by checking if there is\n+/// a call to `Formatter::debug_struct` but no call to `.finish_non_exhaustive()`.\n+fn should_lint<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    typeck_results: &TypeckResults<'tcx>,\n+    block: impl Visitable<'tcx>,\n+) -> bool {\n+    // Is there a call to `DebugStruct::finish_non_exhaustive`? Don't lint if there is.\n+    let mut has_finish_non_exhaustive = false;\n+    // Is there a call to `DebugStruct::debug_struct`? Do lint if there is.\n+    let mut has_debug_struct = false;\n+\n+    for_each_expr(block, |expr| {\n+        if let ExprKind::MethodCall(path, recv, ..) = &expr.kind {\n+            let recv_ty = typeck_results.expr_ty(recv).peel_refs();\n+\n+            if path.ident.name == sym::debug_struct && match_type(cx, recv_ty, &paths::FORMATTER) {\n+                has_debug_struct = true;\n+            } else if path.ident.name == sym!(finish_non_exhaustive) && match_type(cx, recv_ty, &paths::DEBUG_STRUCT) {\n+                has_finish_non_exhaustive = true;\n+            }\n+        }\n+        ControlFlow::<!, _>::Continue(())\n+    });\n+\n+    !has_finish_non_exhaustive && has_debug_struct\n+}\n+\n+/// Checks if the given expression is a call to `DebugStruct::field`\n+/// and the first argument to it is a string literal and if so, returns it\n+///\n+/// Example: `.field(\"foo\", ....)` returns `Some(\"foo\")`\n+fn as_field_call<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    typeck_results: &TypeckResults<'tcx>,\n+    expr: &Expr<'_>,\n+) -> Option<Symbol> {\n+    if let ExprKind::MethodCall(path, recv, [debug_field, _], _) = &expr.kind\n+        && let recv_ty = typeck_results.expr_ty(recv).peel_refs()\n+        && match_type(cx, recv_ty, &paths::DEBUG_STRUCT)\n+        && path.ident.name == sym::field\n+        && let ExprKind::Lit(lit) = &debug_field.kind\n+        && let LitKind::Str(sym, ..) = lit.node\n+    {\n+        Some(sym)\n+    } else {\n+        None\n+    }\n+}\n+\n+/// Attempts to find unused fields assuming that the item is a struct\n+fn check_struct<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    typeck_results: &TypeckResults<'tcx>,\n+    block: &'tcx Block<'tcx>,\n+    self_ty: Ty<'tcx>,\n+    item: &'tcx Item<'tcx>,\n+    data: &VariantData<'_>,\n+) {\n+    // Is there a \"direct\" field access anywhere (i.e. self.foo)?\n+    // We don't want to lint if there is not, because the user might have\n+    // a newtype struct and use fields from the wrapped type only.\n+    let mut has_direct_field_access = false;\n+    let mut field_accesses = FxHashSet::default();\n+\n+    for_each_expr(block, |expr| {\n+        if let ExprKind::Field(target, ident) = expr.kind\n+            && let target_ty = typeck_results.expr_ty_adjusted(target).peel_refs()\n+            && target_ty == self_ty\n+        {\n+            field_accesses.insert(ident.name);\n+            has_direct_field_access = true;\n+        } else if let Some(sym) = as_field_call(cx, typeck_results, expr) {\n+            field_accesses.insert(sym);\n+        }\n+        ControlFlow::<!, _>::Continue(())\n+    });\n+\n+    let span_notes = data\n+        .fields()\n+        .iter()\n+        .filter_map(|field| {\n+            if field_accesses.contains(&field.ident.name) || is_path_lang_item(cx, field.ty, LangItem::PhantomData) {\n+                None\n+            } else {\n+                Some((field.span, \"this field is unused\"))\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    // only lint if there's also at least one direct field access to allow patterns\n+    // where one might have a newtype struct and uses fields from the wrapped type\n+    if !span_notes.is_empty() && has_direct_field_access {\n+        report_lints(cx, item.span, span_notes);\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for MissingFieldsInDebug {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx rustc_hir::Item<'tcx>) {\n+        // is this an `impl Debug for X` block?\n+        if let ItemKind::Impl(Impl { of_trait: Some(trait_ref), self_ty, items, .. }) = item.kind\n+            && let Res::Def(DefKind::Trait, trait_def_id) = trait_ref.path.res\n+            && let TyKind::Path(QPath::Resolved(_, self_path)) = &self_ty.kind\n+            && cx.match_def_path(trait_def_id, &[sym::core, sym::fmt, sym::Debug])\n+            // don't trigger if this impl was derived\n+            && !cx.tcx.has_attr(item.owner_id, sym::automatically_derived)\n+            && !item.span.from_expansion()\n+            // find `Debug::fmt` function\n+            && let Some(fmt_item) = items.iter().find(|i| i.ident.name == sym::fmt)\n+            && let ImplItem { kind: ImplItemKind::Fn(_, body_id), .. } = cx.tcx.hir().impl_item(fmt_item.id)\n+            && let body = cx.tcx.hir().body(*body_id)\n+            && let ExprKind::Block(block, _) = body.value.kind\n+            // inspect `self`\n+            && let self_ty = cx.tcx.type_of(self_path.res.def_id()).skip_binder().peel_refs()\n+            && let Some(self_adt) = self_ty.ty_adt_def()\n+            && let Some(self_def_id) = self_adt.did().as_local()\n+            && let Some(Node::Item(self_item)) = cx.tcx.hir().find_by_def_id(self_def_id)\n+            // NB: can't call cx.typeck_results() as we are not in a body\n+            && let typeck_results = cx.tcx.typeck_body(*body_id)\n+            && should_lint(cx, typeck_results, block)\n+        {\n+            // we intentionally only lint structs, see lint description\n+            if let ItemKind::Struct(data, _) = &self_item.kind {\n+                check_struct(cx, typeck_results, block, self_ty, item, data);\n+            }\n+        }\n+    }\n+}"}, {"sha": "4ff1bf7ffc0deb404b27b650fb0290e1d854c6bc", "filename": "src/tools/clippy/clippy_lints/src/needless_else.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_else.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,61 @@\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, source::trim_span};\n+use rustc_ast::ast::{Expr, ExprKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for empty `else` branches.\n+    ///\n+    /// ### Why is this bad?\n+    /// An empty else branch does nothing and can be removed.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    ///# fn check() -> bool { true }\n+    /// if check() {\n+    ///     println!(\"Check successful!\");\n+    /// } else {\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    ///# fn check() -> bool { true }\n+    /// if check() {\n+    ///     println!(\"Check successful!\");\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub NEEDLESS_ELSE,\n+    style,\n+    \"empty else branch\"\n+}\n+declare_lint_pass!(NeedlessElse => [NEEDLESS_ELSE]);\n+\n+impl EarlyLintPass for NeedlessElse {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if let ExprKind::If(_, then_block, Some(else_clause)) = &expr.kind\n+            && let ExprKind::Block(block, _) = &else_clause.kind\n+            && !expr.span.from_expansion()\n+            && !else_clause.span.from_expansion()\n+            && block.stmts.is_empty()\n+            && let Some(trimmed) = expr.span.trim_start(then_block.span)\n+            && let span = trim_span(cx.sess().source_map(), trimmed)\n+            && let Some(else_snippet) = snippet_opt(cx, span)\n+            // Ignore else blocks that contain comments or #[cfg]s\n+            && !else_snippet.contains(['/', '#'])\n+        {\n+            span_lint_and_sugg(\n+                cx,\n+                NEEDLESS_ELSE,\n+                span,\n+                \"this else branch is empty\",\n+                \"you can remove it\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "2d79a5c90081ceb64eda11d1637c42c25c0584c9", "filename": "src/tools/clippy/clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -241,7 +241,7 @@ impl<'de> Deserialize<'de> for MacroMatcher {\n                 V: de::MapAccess<'de>,\n             {\n                 let mut name = None;\n-                let mut brace: Option<&str> = None;\n+                let mut brace: Option<String> = None;\n                 while let Some(key) = map.next_key()? {\n                     match key {\n                         Field::Name => {"}, {"sha": "05e52e6b38b1294a16c8cb1032d72f4148149b30", "filename": "src/tools/clippy/clippy_lints/src/redundant_async_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -35,7 +35,7 @@ declare_clippy_lint! {\n     /// };\n     /// let fut = f;\n     /// ```\n-    #[clippy::version = \"1.69.0\"]\n+    #[clippy::version = \"1.70.0\"]\n     pub REDUNDANT_ASYNC_BLOCK,\n     complexity,\n     \"`async { future.await }` can be replaced by `future`\""}, {"sha": "674f8bf4c0f303d13b0e1912ed3d27e890c59c67", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -177,7 +177,7 @@ fn check_set<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n }\n \n fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n-    let mut parser = regex_syntax::ParserBuilder::new().unicode(true).utf8(!utf8).build();\n+    let mut parser = regex_syntax::ParserBuilder::new().unicode(true).utf8(utf8).build();\n \n     if let ExprKind::Lit(lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {"}, {"sha": "631ecf1428d6a0de26b98da75201f46175e88df7", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -70,7 +70,7 @@ declare_clippy_lint! {\n     \"using a return statement like `return expr;` where an expression would suffice\"\n }\n \n-#[derive(PartialEq, Eq, Clone)]\n+#[derive(PartialEq, Eq)]\n enum RetReplacement<'tcx> {\n     Empty,\n     Block,\n@@ -80,18 +80,19 @@ enum RetReplacement<'tcx> {\n }\n \n impl<'tcx> RetReplacement<'tcx> {\n-    fn sugg_help(self) -> &'static str {\n+    fn sugg_help(&self) -> &'static str {\n         match self {\n             Self::Empty | Self::Expr(..) => \"remove `return`\",\n             Self::Block => \"replace `return` with an empty block\",\n             Self::Unit => \"replace `return` with a unit value\",\n             Self::IfSequence(..) => \"remove `return` and wrap the sequence with parentheses\",\n         }\n     }\n-    fn applicability(&self) -> Option<Applicability> {\n+\n+    fn applicability(&self) -> Applicability {\n         match self {\n-            Self::Expr(_, ap) | Self::IfSequence(_, ap) => Some(*ap),\n-            _ => None,\n+            Self::Expr(_, ap) | Self::IfSequence(_, ap) => *ap,\n+            _ => Applicability::MachineApplicable,\n         }\n     }\n }\n@@ -271,7 +272,7 @@ fn check_final_expr<'tcx>(\n                 return;\n             }\n \n-            emit_return_lint(cx, ret_span, semi_spans, replacement);\n+            emit_return_lint(cx, ret_span, semi_spans, &replacement);\n         },\n         ExprKind::If(_, then, else_clause_opt) => {\n             check_block_return(cx, &then.kind, peeled_drop_expr.span, semi_spans.clone());\n@@ -306,20 +307,17 @@ fn expr_contains_conjunctive_ifs<'tcx>(expr: &'tcx Expr<'tcx>) -> bool {\n     contains_if(expr, false)\n }\n \n-fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, semi_spans: Vec<Span>, replacement: RetReplacement<'_>) {\n+fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, semi_spans: Vec<Span>, replacement: &RetReplacement<'_>) {\n     if ret_span.from_expansion() {\n         return;\n     }\n \n-    let applicability = replacement.applicability().unwrap_or(Applicability::MachineApplicable);\n-    let return_replacement = replacement.to_string();\n-    let sugg_help = replacement.sugg_help();\n     span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n-        diag.span_suggestion_hidden(ret_span, sugg_help, return_replacement, applicability);\n-        // for each parent statement, we need to remove the semicolon\n-        for semi_stmt_span in semi_spans {\n-            diag.tool_only_span_suggestion(semi_stmt_span, \"remove this semicolon\", \"\", applicability);\n-        }\n+        let suggestions = std::iter::once((ret_span, replacement.to_string()))\n+            .chain(semi_spans.into_iter().map(|span| (span, String::new())))\n+            .collect();\n+\n+        diag.multipart_suggestion_verbose(replacement.sugg_help(), suggestions, replacement.applicability());\n     });\n }\n "}, {"sha": "8658009eba43fb7a6746c3ffae166dd5c1653018", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sug\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_lang_item;\n use clippy_utils::{get_expr_use_or_unification_node, peel_blocks, SpanlessEq};\n-use clippy_utils::{get_parent_expr, is_lint_allowed, match_function_call, method_calls, paths};\n+use clippy_utils::{get_parent_expr, is_lint_allowed, is_path_diagnostic_item, method_calls};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n@@ -255,7 +255,8 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n \n         if_chain! {\n             // Find std::str::converts::from_utf8\n-            if let Some(args) = match_function_call(cx, e, &paths::STR_FROM_UTF8);\n+            if let ExprKind::Call(fun, args) = e.kind;\n+            if is_path_diagnostic_item(cx, fun, sym::str_from_utf8);\n \n             // Find string::as_bytes\n             if let ExprKind::AddrOf(BorrowKind::Ref, _, args) = args[0].kind;"}, {"sha": "117dda092223ebefb86fa2087aa0e64b28853183", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,5 +1,5 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_fn, FnKind, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n@@ -42,21 +42,43 @@ declare_lint_pass!(UnusedAsync => [UNUSED_ASYNC]);\n struct AsyncFnVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     found_await: bool,\n+    /// Also keep track of `await`s in nested async blocks so we can mention\n+    /// it in a note\n+    await_in_async_block: Option<Span>,\n+    async_depth: usize,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n         if let ExprKind::Yield(_, YieldSource::Await { .. }) = ex.kind {\n-            self.found_await = true;\n+            if self.async_depth == 1 {\n+                self.found_await = true;\n+            } else if self.await_in_async_block.is_none() {\n+                self.await_in_async_block = Some(ex.span);\n+            }\n         }\n         walk_expr(self, ex);\n     }\n \n     fn nested_visit_map(&mut self) -> Self::Map {\n         self.cx.tcx.hir()\n     }\n+\n+    fn visit_body(&mut self, b: &'tcx Body<'tcx>) {\n+        let is_async_block = matches!(b.generator_kind, Some(rustc_hir::GeneratorKind::Async(_)));\n+\n+        if is_async_block {\n+            self.async_depth += 1;\n+        }\n+\n+        walk_body(self, b);\n+\n+        if is_async_block {\n+            self.async_depth -= 1;\n+        }\n+    }\n }\n \n impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n@@ -70,16 +92,30 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         def_id: LocalDefId,\n     ) {\n         if !span.from_expansion() && fn_kind.asyncness().is_async() {\n-            let mut visitor = AsyncFnVisitor { cx, found_await: false };\n+            let mut visitor = AsyncFnVisitor {\n+                cx,\n+                found_await: false,\n+                async_depth: 0,\n+                await_in_async_block: None,\n+            };\n             walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), def_id);\n             if !visitor.found_await {\n-                span_lint_and_help(\n+                span_lint_and_then(\n                     cx,\n                     UNUSED_ASYNC,\n                     span,\n                     \"unused `async` for function with no await statements\",\n-                    None,\n-                    \"consider removing the `async` from this function\",\n+                    |diag| {\n+                        diag.help(\"consider removing the `async` from this function\");\n+\n+                        if let Some(span) = visitor.await_in_async_block {\n+                            diag.span_note(\n+                                span,\n+                                \"`await` used in an async block, which does not require \\\n+                                the enclosing function to be `async`\",\n+                            );\n+                        }\n+                    },\n                 );\n             }\n         }"}, {"sha": "35f40830681d65cbcff21df5712deba060388f73", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 113, "deletions": 96, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -2,12 +2,15 @@\n \n #![allow(clippy::module_name_repetitions)]\n \n+use rustc_session::Session;\n+use rustc_span::{BytePos, Pos, SourceFile, Span, SyntaxContext};\n use serde::de::{Deserializer, IgnoredAny, IntoDeserializer, MapAccess, Visitor};\n use serde::Deserialize;\n-use std::error::Error;\n+use std::fmt::{Debug, Display, Formatter};\n+use std::ops::Range;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n-use std::{cmp, env, fmt, fs, io, iter};\n+use std::{cmp, env, fmt, fs, io};\n \n #[rustfmt::skip]\n const DEFAULT_DOC_VALID_IDENTS: &[&str] = &[\n@@ -67,33 +70,70 @@ impl DisallowedPath {\n #[derive(Default)]\n pub struct TryConf {\n     pub conf: Conf,\n-    pub errors: Vec<Box<dyn Error>>,\n-    pub warnings: Vec<Box<dyn Error>>,\n+    pub errors: Vec<ConfError>,\n+    pub warnings: Vec<ConfError>,\n }\n \n impl TryConf {\n-    fn from_error(error: impl Error + 'static) -> Self {\n+    fn from_toml_error(file: &SourceFile, error: &toml::de::Error) -> Self {\n+        ConfError::from_toml(file, error).into()\n+    }\n+}\n+\n+impl From<ConfError> for TryConf {\n+    fn from(value: ConfError) -> Self {\n         Self {\n             conf: Conf::default(),\n-            errors: vec![Box::new(error)],\n+            errors: vec![value],\n             warnings: vec![],\n         }\n     }\n }\n \n+impl From<io::Error> for TryConf {\n+    fn from(value: io::Error) -> Self {\n+        ConfError::from(value).into()\n+    }\n+}\n+\n #[derive(Debug)]\n-struct ConfError(String);\n+pub struct ConfError {\n+    pub message: String,\n+    pub span: Option<Span>,\n+}\n+\n+impl ConfError {\n+    fn from_toml(file: &SourceFile, error: &toml::de::Error) -> Self {\n+        if let Some(span) = error.span() {\n+            Self::spanned(file, error.message(), span)\n+        } else {\n+            Self {\n+                message: error.message().to_string(),\n+                span: None,\n+            }\n+        }\n+    }\n \n-impl fmt::Display for ConfError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        <String as fmt::Display>::fmt(&self.0, f)\n+    fn spanned(file: &SourceFile, message: impl Into<String>, span: Range<usize>) -> Self {\n+        Self {\n+            message: message.into(),\n+            span: Some(Span::new(\n+                file.start_pos + BytePos::from_usize(span.start),\n+                file.start_pos + BytePos::from_usize(span.end),\n+                SyntaxContext::root(),\n+                None,\n+            )),\n+        }\n     }\n }\n \n-impl Error for ConfError {}\n-\n-fn conf_error(s: impl Into<String>) -> Box<dyn Error> {\n-    Box::new(ConfError(s.into()))\n+impl From<io::Error> for ConfError {\n+    fn from(value: io::Error) -> Self {\n+        Self {\n+            message: value.to_string(),\n+            span: None,\n+        }\n+    }\n }\n \n macro_rules! define_Conf {\n@@ -117,20 +157,14 @@ macro_rules! define_Conf {\n             }\n         }\n \n-        impl<'de> Deserialize<'de> for TryConf {\n-            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error> where D: Deserializer<'de> {\n-                deserializer.deserialize_map(ConfVisitor)\n-            }\n-        }\n-\n         #[derive(Deserialize)]\n         #[serde(field_identifier, rename_all = \"kebab-case\")]\n         #[allow(non_camel_case_types)]\n         enum Field { $($name,)* third_party, }\n \n-        struct ConfVisitor;\n+        struct ConfVisitor<'a>(&'a SourceFile);\n \n-        impl<'de> Visitor<'de> for ConfVisitor {\n+        impl<'de> Visitor<'de> for ConfVisitor<'_> {\n             type Value = TryConf;\n \n             fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -141,32 +175,38 @@ macro_rules! define_Conf {\n                 let mut errors = Vec::new();\n                 let mut warnings = Vec::new();\n                 $(let mut $name = None;)*\n-                // could get `Field` here directly, but get `str` first for diagnostics\n-                while let Some(name) = map.next_key::<&str>()? {\n-                    match Field::deserialize(name.into_deserializer())? {\n-                        $(Field::$name => {\n-                            $(warnings.push(conf_error(format!(\"deprecated field `{}`. {}\", name, $dep)));)?\n-                            match map.next_value() {\n-                                Err(e) => errors.push(conf_error(e.to_string())),\n+                // could get `Field` here directly, but get `String` first for diagnostics\n+                while let Some(name) = map.next_key::<toml::Spanned<String>>()? {\n+                    match Field::deserialize(name.get_ref().as_str().into_deserializer()) {\n+                        Err(e) => {\n+                            let e: FieldError = e;\n+                            errors.push(ConfError::spanned(self.0, e.0, name.span()));\n+                        }\n+                        $(Ok(Field::$name) => {\n+                            $(warnings.push(ConfError::spanned(self.0, format!(\"deprecated field `{}`. {}\", name.get_ref(), $dep), name.span()));)?\n+                            let raw_value = map.next_value::<toml::Spanned<toml::Value>>()?;\n+                            let value_span = raw_value.span();\n+                            match <$ty>::deserialize(raw_value.into_inner()) {\n+                                Err(e) => errors.push(ConfError::spanned(self.0, e.to_string().replace('\\n', \" \").trim(), value_span)),\n                                 Ok(value) => match $name {\n-                                    Some(_) => errors.push(conf_error(format!(\"duplicate field `{}`\", name))),\n+                                    Some(_) => errors.push(ConfError::spanned(self.0, format!(\"duplicate field `{}`\", name.get_ref()), name.span())),\n                                     None => {\n                                         $name = Some(value);\n                                         // $new_conf is the same as one of the defined `$name`s, so\n                                         // this variable is defined in line 2 of this function.\n                                         $(match $new_conf {\n-                                            Some(_) => errors.push(conf_error(concat!(\n+                                            Some(_) => errors.push(ConfError::spanned(self.0, concat!(\n                                                 \"duplicate field `\", stringify!($new_conf),\n                                                 \"` (provided as `\", stringify!($name), \"`)\"\n-                                            ))),\n+                                            ), name.span())),\n                                             None => $new_conf = $name.clone(),\n                                         })?\n                                     },\n                                 }\n                             }\n                         })*\n-                        // white-listed; ignore\n-                        Field::third_party => drop(map.next_value::<IgnoredAny>())\n+                        // ignore contents of the third_party key\n+                        Ok(Field::third_party) => drop(map.next_value::<IgnoredAny>())\n                     }\n                 }\n                 let conf = Conf { $($name: $name.unwrap_or_else(defaults::$name),)* };\n@@ -486,7 +526,7 @@ pub fn lookup_conf_file() -> io::Result<(Option<PathBuf>, Vec<String>)> {\n     const CONFIG_FILE_NAMES: [&str; 2] = [\".clippy.toml\", \"clippy.toml\"];\n \n     // Start looking for a config file in CLIPPY_CONF_DIR, or failing that, CARGO_MANIFEST_DIR.\n-    // If neither of those exist, use \".\".\n+    // If neither of those exist, use \".\". (Update documentation if this priority changes)\n     let mut current = env::var_os(\"CLIPPY_CONF_DIR\")\n         .or_else(|| env::var_os(\"CARGO_MANIFEST_DIR\"))\n         .map_or_else(|| PathBuf::from(\".\"), PathBuf::from)\n@@ -532,19 +572,19 @@ pub fn lookup_conf_file() -> io::Result<(Option<PathBuf>, Vec<String>)> {\n /// Read the `toml` configuration file.\n ///\n /// In case of error, the function tries to continue as much as possible.\n-pub fn read(path: &Path) -> TryConf {\n-    let content = match fs::read_to_string(path) {\n-        Err(e) => return TryConf::from_error(e),\n-        Ok(content) => content,\n+pub fn read(sess: &Session, path: &Path) -> TryConf {\n+    let file = match sess.source_map().load_file(path) {\n+        Err(e) => return e.into(),\n+        Ok(file) => file,\n     };\n-    match toml::from_str::<TryConf>(&content) {\n+    match toml::de::Deserializer::new(file.src.as_ref().unwrap()).deserialize_map(ConfVisitor(&file)) {\n         Ok(mut conf) => {\n             extend_vec_if_indicator_present(&mut conf.conf.doc_valid_idents, DEFAULT_DOC_VALID_IDENTS);\n             extend_vec_if_indicator_present(&mut conf.conf.disallowed_names, DEFAULT_DISALLOWED_NAMES);\n \n             conf\n         },\n-        Err(e) => TryConf::from_error(e),\n+        Err(e) => TryConf::from_toml_error(&file, &e),\n     }\n }\n \n@@ -556,65 +596,42 @@ fn extend_vec_if_indicator_present(vec: &mut Vec<String>, default: &[&str]) {\n \n const SEPARATOR_WIDTH: usize = 4;\n \n-// Check whether the error is \"unknown field\" and, if so, list the available fields sorted and at\n-// least one per line, more if `CLIPPY_TERMINAL_WIDTH` is set and allows it.\n-pub fn format_error(error: Box<dyn Error>) -> String {\n-    let s = error.to_string();\n-\n-    if_chain! {\n-        if error.downcast::<toml::de::Error>().is_ok();\n-        if let Some((prefix, mut fields, suffix)) = parse_unknown_field_message(&s);\n-        then {\n-            use fmt::Write;\n-\n-            fields.sort_unstable();\n-\n-            let (rows, column_widths) = calculate_dimensions(&fields);\n-\n-            let mut msg = String::from(prefix);\n-            for row in 0..rows {\n-                writeln!(msg).unwrap();\n-                for (column, column_width) in column_widths.iter().copied().enumerate() {\n-                    let index = column * rows + row;\n-                    let field = fields.get(index).copied().unwrap_or_default();\n-                    write!(\n-                        msg,\n-                        \"{:SEPARATOR_WIDTH$}{field:column_width$}\",\n-                        \" \"\n-                    )\n-                    .unwrap();\n-                }\n-            }\n-            write!(msg, \"\\n{suffix}\").unwrap();\n-            msg\n-        } else {\n-            s\n-        }\n+#[derive(Debug)]\n+struct FieldError(String);\n+\n+impl std::error::Error for FieldError {}\n+\n+impl Display for FieldError {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        f.pad(&self.0)\n     }\n }\n \n-// `parse_unknown_field_message` will become unnecessary if\n-// https://github.com/alexcrichton/toml-rs/pull/364 is merged.\n-fn parse_unknown_field_message(s: &str) -> Option<(&str, Vec<&str>, &str)> {\n-    // An \"unknown field\" message has the following form:\n-    //   unknown field `UNKNOWN`, expected one of `FIELD0`, `FIELD1`, ..., `FIELDN` at line X column Y\n-    //                                           ^^      ^^^^                     ^^\n-    if_chain! {\n-        if s.starts_with(\"unknown field\");\n-        let slices = s.split(\"`, `\").collect::<Vec<_>>();\n-        let n = slices.len();\n-        if n >= 2;\n-        if let Some((prefix, first_field)) = slices[0].rsplit_once(\" `\");\n-        if let Some((last_field, suffix)) = slices[n - 1].split_once(\"` \");\n-        then {\n-            let fields = iter::once(first_field)\n-                .chain(slices[1..n - 1].iter().copied())\n-                .chain(iter::once(last_field))\n-                .collect::<Vec<_>>();\n-            Some((prefix, fields, suffix))\n-        } else {\n-            None\n+impl serde::de::Error for FieldError {\n+    fn custom<T: Display>(msg: T) -> Self {\n+        Self(msg.to_string())\n+    }\n+\n+    fn unknown_field(field: &str, expected: &'static [&'static str]) -> Self {\n+        // List the available fields sorted and at least one per line, more if `CLIPPY_TERMINAL_WIDTH` is\n+        // set and allows it.\n+        use fmt::Write;\n+\n+        let mut expected = expected.to_vec();\n+        expected.sort_unstable();\n+\n+        let (rows, column_widths) = calculate_dimensions(&expected);\n+\n+        let mut msg = format!(\"unknown field `{field}`, expected one of\");\n+        for row in 0..rows {\n+            writeln!(msg).unwrap();\n+            for (column, column_width) in column_widths.iter().copied().enumerate() {\n+                let index = column * rows + row;\n+                let field = expected.get(index).copied().unwrap_or_default();\n+                write!(msg, \"{:SEPARATOR_WIDTH$}{field:column_width$}\", \" \").unwrap();\n+            }\n         }\n+        Self(msg)\n     }\n }\n "}, {"sha": "b6e4cd22789f9e918944713e08041ed5fd0449d1", "filename": "src/tools/clippy/clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -65,8 +65,9 @@ declare_clippy_lint! {\n     /// This can lead to confusing error messages at best and to unexpected behavior at worst.\n     ///\n     /// ### Exceptions\n-    /// Wildcard imports are allowed from modules named `prelude`. Many crates (including the standard library)\n-    /// provide modules named \"prelude\" specifically designed for wildcard import.\n+    /// Wildcard imports are allowed from modules that their name contains `prelude`. Many crates\n+    /// (including the standard library) provide modules named \"prelude\" specifically designed\n+    /// for wildcard import.\n     ///\n     /// `use super::*` is allowed in test modules. This is defined as any module with \"test\" in the name.\n     ///\n@@ -212,7 +213,9 @@ impl WildcardImports {\n // Allow \"...prelude::..::*\" imports.\n // Many crates have a prelude, and it is imported as a glob by design.\n fn is_prelude_import(segments: &[PathSegment<'_>]) -> bool {\n-    segments.iter().any(|ps| ps.ident.name == sym::prelude)\n+    segments\n+        .iter()\n+        .any(|ps| ps.ident.name.as_str().contains(sym::prelude.as_str()))\n }\n \n // Allow \"super::*\" imports in tests."}, {"sha": "cfe686eb9b01d6c80984c0074d9d9e4a37dd132b", "filename": "src/tools/clippy/clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "8c883445a798469cee598af28e8bc5ce024df4c0", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -287,7 +287,7 @@ pub fn is_wild(pat: &Pat<'_>) -> bool {\n /// Checks if the given `QPath` belongs to a type alias.\n pub fn is_ty_alias(qpath: &QPath<'_>) -> bool {\n     match *qpath {\n-        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias, ..)),\n+        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias | DefKind::AssocTy, ..)),\n         QPath::TypeRelative(ty, _) if let TyKind::Path(qpath) = ty.kind => { is_ty_alias(&qpath) },\n         _ => false,\n     }"}, {"sha": "6f102308f0bf6d38196fbf9f2a2e9ee99f2d8fe0", "filename": "src/tools/clippy/clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -20,7 +20,7 @@ macro_rules! msrv_aliases {\n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n     1,68,0 { PATH_MAIN_SEPARATOR_STR }\n-    1,65,0 { LET_ELSE }\n+    1,65,0 { LET_ELSE, POINTER_CAST_CONSTNESS }\n     1,62,0 { BOOL_THEN_SOME, DEFAULT_ENUM_ATTRIBUTE }\n     1,58,0 { FORMAT_ARGS_CAPTURE, PATTERN_TRAIT_CHAR_ARRAY }\n     1,55,0 { SEEK_REWIND }"}, {"sha": "38ee84fb76c7a642d85533ac1fdd3eb4710de7f2", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -125,8 +125,6 @@ pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];\n pub const STR_BYTES: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"bytes\"];\n pub const STR_CHARS: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"chars\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n-pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n-pub const STR_FROM_UTF8_UNCHECKED: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8_unchecked\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n #[cfg(feature = \"internal\")]\n@@ -163,3 +161,5 @@ pub const VEC_IS_EMPTY: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"is_empty\"];\n pub const VEC_POP: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"pop\"];\n pub const OPTION_UNWRAP: [&str; 4] = [\"core\", \"option\", \"Option\", \"unwrap\"];\n pub const OPTION_EXPECT: [&str; 4] = [\"core\", \"option\", \"Option\", \"expect\"];\n+pub const FORMATTER: [&str; 3] = [\"core\", \"fmt\", \"Formatter\"];\n+pub const DEBUG_STRUCT: [&str; 4] = [\"core\", \"fmt\", \"builders\", \"DebugStruct\"];"}, {"sha": "582337b47e813ed6e5cedab6f54df7ee1b2a2ef7", "filename": "src/tools/clippy/clippy_utils/src/source.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_data_structures::sync::Lrc;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{BlockCheckMode, Expr, ExprKind, UnsafeSource};\n use rustc_lint::{LateContext, LintContext};\n use rustc_session::Session;\n use rustc_span::source_map::{original_sp, SourceMap};\n@@ -71,11 +71,16 @@ pub fn expr_block<T: LintContext>(\n     app: &mut Applicability,\n ) -> String {\n     let (code, from_macro) = snippet_block_with_context(cx, expr.span, outer, default, indent_relative_to, app);\n-    if from_macro {\n-        format!(\"{{ {code} }}\")\n-    } else if let ExprKind::Block(_, _) = expr.kind {\n+    if !from_macro &&\n+        let ExprKind::Block(block, _) = expr.kind &&\n+        block.rules != BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n+    {\n         format!(\"{code}\")\n     } else {\n+        // FIXME: add extra indent for the unsafe blocks:\n+        //     original code:   unsafe { ... }\n+        //     result code:     { unsafe { ... } }\n+        //     desired code:    {\\n  unsafe { ... }\\n}\n         format!(\"{{ {code} }}\")\n     }\n }"}, {"sha": "4dc906d00db16962454cb75ebd23ccfdac029461", "filename": "src/tools/clippy/declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fdeclare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fdeclare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdeclare_clippy_lint%2FCargo.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "a828d12370467d6683aafff0650255f0f5258a80", "filename": "src/tools/clippy/lintcheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -22,7 +22,7 @@ rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.85\"\n tar = \"0.4\"\n-toml = \"0.5\"\n+toml = \"0.7.3\"\n ureq = \"2.2\"\n walkdir = \"2.3\"\n "}, {"sha": "0d2e1eee643843201f476e520517b802deace564", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-05-20\"\n+channel = \"nightly-2023-06-02\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "3c5b6e12b9688254b399f3b49321a6ac14af7f08", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -70,7 +70,7 @@ fn track_clippy_args(parse_sess: &mut ParseSess, args_env_var: &Option<String>)\n \n /// Track files that may be accessed at runtime in `file_depinfo` so that cargo will re-run clippy\n /// when any of them are modified\n-fn track_files(parse_sess: &mut ParseSess, conf_path_string: Option<String>) {\n+fn track_files(parse_sess: &mut ParseSess) {\n     let file_depinfo = parse_sess.file_depinfo.get_mut();\n \n     // Used by `clippy::cargo` lints and to determine the MSRV. `cargo clippy` executes `clippy-driver`\n@@ -79,10 +79,7 @@ fn track_files(parse_sess: &mut ParseSess, conf_path_string: Option<String>) {\n         file_depinfo.insert(Symbol::intern(\"Cargo.toml\"));\n     }\n \n-    // `clippy.toml`\n-    if let Some(path) = conf_path_string {\n-        file_depinfo.insert(Symbol::intern(&path));\n-    }\n+    // `clippy.toml` will be automatically tracked as it's loaded with `sess.source_map().load_file()`\n \n     // During development track the `clippy-driver` executable so that cargo will re-run clippy whenever\n     // it is rebuilt\n@@ -126,17 +123,11 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n     #[allow(rustc::bad_opt_access)]\n     fn config(&mut self, config: &mut interface::Config) {\n         let conf_path = clippy_lints::lookup_conf_file();\n-        let conf_path_string = if let Ok((Some(path), _)) = &conf_path {\n-            path.to_str().map(String::from)\n-        } else {\n-            None\n-        };\n-\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n         config.parse_sess_created = Some(Box::new(move |parse_sess| {\n             track_clippy_args(parse_sess, &clippy_args_var);\n-            track_files(parse_sess, conf_path_string);\n+            track_files(parse_sess);\n         }));\n         config.register_lints = Some(Box::new(move |sess, lint_store| {\n             // technically we're ~guaranteed that this is none but might as well call anything that"}, {"sha": "e4de82ad3b83e563abf46cbf4c24d2a5c7f7ea70", "filename": "src/tools/clippy/tests/ui-cargo/multiple_crate_versions/fail/Cargo.lock", "status": "modified", "additions": 3, "deletions": 64, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.lock?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,5 +1,7 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n+version = 3\n+\n [[package]]\n name = \"ansi_term\"\n version = \"0.11.0\"\n@@ -9,71 +11,14 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n-[[package]]\n-name = \"bitflags\"\n-version = \"0.9.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n-\n-[[package]]\n-name = \"cfg-if\"\n-version = \"0.1.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n-\n-[[package]]\n-name = \"ctrlc\"\n-version = \"3.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"653abc99aa905f693d89df4797fadc08085baee379db92be9f2496cefe8a6f2c\"\n-dependencies = [\n- \"kernel32-sys\",\n- \"nix\",\n- \"winapi 0.2.8\",\n-]\n-\n-[[package]]\n-name = \"kernel32-sys\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-dependencies = [\n- \"winapi 0.2.8\",\n- \"winapi-build\",\n-]\n-\n-[[package]]\n-name = \"libc\"\n-version = \"0.2.71\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9457b06509d27052635f90d6466700c65095fdf75409b3fbdd903e988b886f49\"\n-\n [[package]]\n name = \"multiple_crate_versions\"\n version = \"0.1.0\"\n dependencies = [\n  \"ansi_term\",\n- \"ctrlc\",\n-]\n-\n-[[package]]\n-name = \"nix\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a2c5afeb0198ec7be8569d666644b574345aad2e95a53baf3a532da3e0f3fb32\"\n-dependencies = [\n- \"bitflags\",\n- \"cfg-if\",\n- \"libc\",\n- \"void\",\n+ \"winapi 0.2.8\",\n ]\n \n-[[package]]\n-name = \"void\"\n-version = \"1.0.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n-\n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\n@@ -90,12 +35,6 @@ dependencies = [\n  \"winapi-x86_64-pc-windows-gnu\",\n ]\n \n-[[package]]\n-name = \"winapi-build\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n-\n [[package]]\n name = \"winapi-i686-pc-windows-gnu\"\n version = \"0.4.0\""}, {"sha": "79317659ac072c2e59d765105d4b6b4c73413d69", "filename": "src/tools/clippy/tests/ui-cargo/multiple_crate_versions/fail/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -6,5 +6,5 @@ publish = false\n [workspace]\n \n [dependencies]\n-ctrlc = \"=3.1.0\"\n+winapi = \"0.2\"\n ansi_term = \"=0.11.0\""}, {"sha": "9b0db660c9975927b76d2359cbfb765ed22434e0", "filename": "src/tools/clippy/tests/ui-internal/custom_ice_message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -3,7 +3,7 @@\n //@normalize-stderr-test: \"produce_ice.rs:\\d*:\\d*\" -> \"produce_ice.rs\"\n //@normalize-stderr-test: \"', .*clippy_lints\" -> \"', clippy_lints\"\n //@normalize-stderr-test: \"'rustc'\" -> \"'<unnamed>'\"\n-//@normalize-stderr-test: \"running on .*\" -> \"running on <target>\"\n+//@normalize-stderr-test: \"rustc 1\\.\\d+.* running on .*\" -> \"rustc <version> running on <target>\"\n //@normalize-stderr-test: \"(?ms)query stack during panic:\\n.*end of query stack\\n\" -> \"\"\n \n #![deny(clippy::internal)]"}, {"sha": "b9ea5a64de75e680df11bdcf92d6ff6f5a1a911e", "filename": "src/tools/clippy/tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -5,10 +5,9 @@ error: the compiler unexpectedly panicked. this is a bug.\n \n note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy/issues/new\n \n-note: rustc 1.71.0-nightly (521f4dae1 2023-05-19) running on <target>\n+note: rustc <version> running on <target>\n \n note: compiler flags: -C prefer-dynamic -Z ui-testing\n \n-note: Clippy version: foo\n-\n-thread panicked while panicking. aborting.\n+query stack during panic:\n+thread panicked while processing panic. aborting."}, {"sha": "5b7e8c0db744daeecc1605c0651e0aebeb79a797", "filename": "src/tools/clippy/tests/ui-toml/bad_toml/conf_bad_toml.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,4 +1,8 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: expected an equals, found an identifier at line 1 column 4\n+error: error reading Clippy's configuration file: expected `.`, `=`\n+  --> $DIR/clippy.toml:1:4\n+   |\n+LL | fn this_is_obviously(not: a, toml: file) {\n+   |    ^\n \n error: aborting due to previous error\n "}, {"sha": "386e1135df90dd7932415fb61bb015cb6f353a1b", "filename": "src/tools/clippy/tests/ui-toml/bad_toml_type/conf_bad_type.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,4 +1,8 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: invalid type: integer `42`, expected a sequence for key `disallowed-names`\n+error: error reading Clippy's configuration file: invalid type: integer `42`, expected a sequence\n+  --> $DIR/clippy.toml:1:20\n+   |\n+LL | disallowed-names = 42\n+   |                    ^^\n \n error: aborting due to previous error\n "}, {"sha": "123ad94dd09dab3806df380f589cd4e29074c5e3", "filename": "src/tools/clippy/tests/ui-toml/conf_deprecated_key/conf_deprecated_key.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,6 +1,14 @@\n-warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+warning: error reading Clippy's configuration file: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+  --> $DIR/clippy.toml:2:1\n+   |\n+LL | cyclomatic-complexity-threshold = 2\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `blacklisted-names`. Please use `disallowed-names` instead\n+warning: error reading Clippy's configuration file: deprecated field `blacklisted-names`. Please use `disallowed-names` instead\n+  --> $DIR/clippy.toml:3:1\n+   |\n+LL | blacklisted-names = [ \"..\", \"wibble\" ]\n+   | ^^^^^^^^^^^^^^^^^\n \n error: the function has a cognitive complexity of (3/2)\n   --> $DIR/conf_deprecated_key.rs:6:4"}, {"sha": "55789afc1b71c8d6d07a7fb9dd156c75354a77f4", "filename": "src/tools/clippy/tests/ui-toml/duplicated_keys/clippy.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,5 +1,2 @@\n cognitive-complexity-threshold = 2\n-# This is the deprecated name for the same key\n-cyclomatic-complexity-threshold = 3\n-# Check we get duplication warning regardless of order\n cognitive-complexity-threshold = 4"}, {"sha": "54997735274e4b0ee72b014a8d43d0b2a225e04d", "filename": "src/tools/clippy/tests/ui-toml/duplicated_keys/duplicated_keys.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,8 +1,8 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: duplicate field `cognitive_complexity_threshold` (provided as `cyclomatic_complexity_threshold`)\n+error: error reading Clippy's configuration file: duplicate key `cognitive-complexity-threshold` in document root\n+  --> $DIR/clippy.toml:2:1\n+   |\n+LL | cognitive-complexity-threshold = 4\n+   | ^\n \n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: duplicate field `cognitive-complexity-threshold`\n-\n-warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "7932c43ebd217bef17d7c44e2530fb262457715e", "filename": "src/tools/clippy/tests/ui-toml/duplicated_keys_deprecated/clippy.toml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fclippy.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,3 @@\n+cognitive-complexity-threshold = 2\n+# This is the deprecated name for the same key\n+cyclomatic-complexity-threshold = 3"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/tools/clippy/tests/ui-toml/duplicated_keys_deprecated/duplicated_keys.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "2ae7848f183b5130882b846dfbac92183a70fb0e", "filename": "src/tools/clippy/tests/ui-toml/duplicated_keys_deprecated/duplicated_keys.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,14 @@\n+error: error reading Clippy's configuration file: duplicate field `cognitive_complexity_threshold` (provided as `cyclomatic_complexity_threshold`)\n+  --> $DIR/clippy.toml:3:1\n+   |\n+LL | cyclomatic-complexity-threshold = 3\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: error reading Clippy's configuration file: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+  --> $DIR/clippy.toml:3:1\n+   |\n+LL | cyclomatic-complexity-threshold = 3\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "53c634b727ed5a3a0e7e79e81df2fdb7aceebb49", "filename": "src/tools/clippy/tests/ui-toml/duplicated_keys_deprecated_2/clippy.toml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fclippy.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,4 @@\n+# This is the deprecated name for cognitive-complexity-threshold\n+cyclomatic-complexity-threshold = 3\n+# Check we get duplication warning regardless of order\n+cognitive-complexity-threshold = 4"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/tools/clippy/tests/ui-toml/duplicated_keys_deprecated_2/duplicated_keys.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "53ad42712469119621645284c9276d5cd0de1bf7", "filename": "src/tools/clippy/tests/ui-toml/duplicated_keys_deprecated_2/duplicated_keys.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,14 @@\n+error: error reading Clippy's configuration file: duplicate field `cognitive-complexity-threshold`\n+  --> $DIR/clippy.toml:4:1\n+   |\n+LL | cognitive-complexity-threshold = 4\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: error reading Clippy's configuration file: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+  --> $DIR/clippy.toml:2:1\n+   |\n+LL | cyclomatic-complexity-threshold = 3\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "4882416c414ac976dd975a9d4e688f92b6a0bf17", "filename": "src/tools/clippy/tests/ui-toml/ifs_same_cond/ifs_same_cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::ifs_same_cond)]\n-#![allow(clippy::if_same_then_else, clippy::comparison_chain)]\n+#![allow(clippy::if_same_then_else, clippy::comparison_chain, clippy::needless_else)]\n \n fn main() {}\n "}, {"sha": "b77b4580051ef14b83650059af6345571b34274e", "filename": "src/tools/clippy/tests/ui-toml/toml_unknown_key/clippy.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fclippy.toml?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,6 +1,8 @@\n # that one is an error\n foobar = 42\n+# so is this one\n+barfoo = 53\n \n-# that one is white-listed\n+# that one is ignored\n [third-party]\n clippy-feature = \"nightly\""}, {"sha": "b6038f031f3c3222a432111b700e248df04f9d1a", "filename": "src/tools/clippy/tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n+error: error reading Clippy's configuration file: unknown field `foobar`, expected one of\n            allow-dbg-in-tests\n            allow-expect-in-tests\n            allow-mixed-uninlined-format-args\n@@ -54,7 +54,71 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            vec-box-size-threshold\n            verbose-bit-mask-threshold\n            warn-on-all-wildcard-imports\n-       at line 5 column 1\n+  --> $DIR/clippy.toml:2:1\n+   |\n+LL | foobar = 42\n+   | ^^^^^^\n \n-error: aborting due to previous error\n+error: error reading Clippy's configuration file: unknown field `barfoo`, expected one of\n+           allow-dbg-in-tests\n+           allow-expect-in-tests\n+           allow-mixed-uninlined-format-args\n+           allow-print-in-tests\n+           allow-unwrap-in-tests\n+           allowed-scripts\n+           arithmetic-side-effects-allowed\n+           arithmetic-side-effects-allowed-binary\n+           arithmetic-side-effects-allowed-unary\n+           array-size-threshold\n+           avoid-breaking-exported-api\n+           await-holding-invalid-types\n+           blacklisted-names\n+           cargo-ignore-publish\n+           cognitive-complexity-threshold\n+           cyclomatic-complexity-threshold\n+           disallowed-macros\n+           disallowed-methods\n+           disallowed-names\n+           disallowed-types\n+           doc-valid-idents\n+           enable-raw-pointer-heuristic-for-send\n+           enforced-import-renames\n+           enum-variant-name-threshold\n+           enum-variant-size-threshold\n+           future-size-threshold\n+           ignore-interior-mutability\n+           large-error-threshold\n+           literal-representation-threshold\n+           matches-for-let-else\n+           max-fn-params-bools\n+           max-include-file-size\n+           max-struct-bools\n+           max-suggested-slice-pattern-length\n+           max-trait-bounds\n+           missing-docs-in-crate-items\n+           msrv\n+           pass-by-value-size-limit\n+           semicolon-inside-block-ignore-singleline\n+           semicolon-outside-block-ignore-multiline\n+           single-char-binding-names-threshold\n+           standard-macro-braces\n+           suppress-restriction-lint-in-const\n+           third-party\n+           too-large-for-stack\n+           too-many-arguments-threshold\n+           too-many-lines-threshold\n+           trivial-copy-size-limit\n+           type-complexity-threshold\n+           unnecessary-box-size\n+           unreadable-literal-lint-fractions\n+           upper-case-acronyms-aggressive\n+           vec-box-size-threshold\n+           verbose-bit-mask-threshold\n+           warn-on-all-wildcard-imports\n+  --> $DIR/clippy.toml:4:1\n+   |\n+LL | barfoo = 53\n+   | ^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "44f49c080cdd6fdcb901c8b4948782a9f10b367c", "filename": "src/tools/clippy/tests/ui/auxiliary/wildcard_imports_helper.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fwildcard_imports_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fwildcard_imports_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fwildcard_imports_helper.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -25,3 +25,9 @@ pub mod prelude {\n         pub struct PreludeModAnywhere;\n     }\n }\n+\n+pub mod extern_prelude {\n+    pub mod v1 {\n+        pub struct ExternPreludeModAnywhere;\n+    }\n+}"}, {"sha": "5780ea0893777fefee8a2d3aeeb6d9e1722639d3", "filename": "src/tools/clippy/tests/ui/branches_sharing_code/valid_if_blocks.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,6 +1,10 @@\n #![deny(clippy::branches_sharing_code, clippy::if_same_then_else)]\n #![allow(dead_code)]\n-#![allow(clippy::mixed_read_write_in_expression, clippy::uninlined_format_args)]\n+#![allow(\n+    clippy::mixed_read_write_in_expression,\n+    clippy::uninlined_format_args,\n+    clippy::needless_else\n+)]\n \n // This tests valid if blocks that shouldn't trigger the lint\n "}, {"sha": "a7e72b780affcc95030b1cf27299f97764280d2a", "filename": "src/tools/clippy/tests/ui/branches_sharing_code/valid_if_blocks.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,13 +1,13 @@\n error: this `if` has identical blocks\n-  --> $DIR/valid_if_blocks.rs:105:14\n+  --> $DIR/valid_if_blocks.rs:109:14\n    |\n LL |       if false {\n    |  ______________^\n LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/valid_if_blocks.rs:106:12\n+  --> $DIR/valid_if_blocks.rs:110:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -20,7 +20,7 @@ LL | #![deny(clippy::branches_sharing_code, clippy::if_same_then_else)]\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `if` has identical blocks\n-  --> $DIR/valid_if_blocks.rs:116:15\n+  --> $DIR/valid_if_blocks.rs:120:15\n    |\n LL |       if x == 0 {\n    |  _______________^\n@@ -31,7 +31,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/valid_if_blocks.rs:120:12\n+  --> $DIR/valid_if_blocks.rs:124:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -42,19 +42,19 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/valid_if_blocks.rs:127:23\n+  --> $DIR/valid_if_blocks.rs:131:23\n    |\n LL |     let _ = if x == 6 { 7 } else { 7 };\n    |                       ^^^^^\n    |\n note: same as this\n-  --> $DIR/valid_if_blocks.rs:127:34\n+  --> $DIR/valid_if_blocks.rs:131:34\n    |\n LL |     let _ = if x == 6 { 7 } else { 7 };\n    |                                  ^^^^^\n \n error: this `if` has identical blocks\n-  --> $DIR/valid_if_blocks.rs:133:23\n+  --> $DIR/valid_if_blocks.rs:137:23\n    |\n LL |       } else if x == 68 {\n    |  _______________________^\n@@ -66,7 +66,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/valid_if_blocks.rs:138:12\n+  --> $DIR/valid_if_blocks.rs:142:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -78,7 +78,7 @@ LL | |     };\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/valid_if_blocks.rs:147:23\n+  --> $DIR/valid_if_blocks.rs:151:23\n    |\n LL |       } else if x == 68 {\n    |  _______________________^\n@@ -88,7 +88,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/valid_if_blocks.rs:150:12\n+  --> $DIR/valid_if_blocks.rs:154:12\n    |\n LL |       } else {\n    |  ____________^"}, {"sha": "a5373cdcae1208edeea4776659419446a45f2d30", "filename": "src/tools/clippy/tests/ui/crashes/ice-7410.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7410.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7410.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7410.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -6,6 +6,7 @@\n #![no_std]\n #![allow(clippy::if_same_then_else)]\n #![allow(clippy::redundant_pattern_matching)]\n+#![allow(clippy::needless_else)]\n \n use core::panic::PanicInfo;\n "}, {"sha": "ac5fe38ff4439068254b93e79a290d28aad982a5", "filename": "src/tools/clippy/tests/ui/default_constructed_unit_structs.fixed", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -101,6 +101,28 @@ struct EmptyStruct {}\n #[non_exhaustive]\n struct NonExhaustiveStruct;\n \n+mod issue_10755 {\n+    struct Sqlite {}\n+\n+    trait HasArguments<'q> {\n+        type Arguments;\n+    }\n+\n+    impl<'q> HasArguments<'q> for Sqlite {\n+        type Arguments = std::marker::PhantomData<&'q ()>;\n+    }\n+\n+    type SqliteArguments<'q> = <Sqlite as HasArguments<'q>>::Arguments;\n+\n+    fn foo() {\n+        // should not lint\n+        // type alias cannot be used as a constructor\n+        let _ = <Sqlite as HasArguments>::Arguments::default();\n+\n+        let _ = SqliteArguments::default();\n+    }\n+}\n+\n fn main() {\n     // should lint\n     let _ = PhantomData::<usize>;"}, {"sha": "de7f14ffbd95c393a8ebca68b3ab020adb9b511e", "filename": "src/tools/clippy/tests/ui/default_constructed_unit_structs.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -101,6 +101,28 @@ struct EmptyStruct {}\n #[non_exhaustive]\n struct NonExhaustiveStruct;\n \n+mod issue_10755 {\n+    struct Sqlite {}\n+\n+    trait HasArguments<'q> {\n+        type Arguments;\n+    }\n+\n+    impl<'q> HasArguments<'q> for Sqlite {\n+        type Arguments = std::marker::PhantomData<&'q ()>;\n+    }\n+\n+    type SqliteArguments<'q> = <Sqlite as HasArguments<'q>>::Arguments;\n+\n+    fn foo() {\n+        // should not lint\n+        // type alias cannot be used as a constructor\n+        let _ = <Sqlite as HasArguments>::Arguments::default();\n+\n+        let _ = SqliteArguments::default();\n+    }\n+}\n+\n fn main() {\n     // should lint\n     let _ = PhantomData::<usize>::default();"}, {"sha": "13abb9149da246b853a6466181b9223fa78891c2", "filename": "src/tools/clippy/tests/ui/default_constructed_unit_structs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -13,25 +13,25 @@ LL |             inner: PhantomData::default(),\n    |                               ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:106:33\n+  --> $DIR/default_constructed_unit_structs.rs:128:33\n    |\n LL |     let _ = PhantomData::<usize>::default();\n    |                                 ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:107:42\n+  --> $DIR/default_constructed_unit_structs.rs:129:42\n    |\n LL |     let _: PhantomData<i32> = PhantomData::default();\n    |                                          ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:108:55\n+  --> $DIR/default_constructed_unit_structs.rs:130:55\n    |\n LL |     let _: PhantomData<i32> = std::marker::PhantomData::default();\n    |                                                       ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:109:23\n+  --> $DIR/default_constructed_unit_structs.rs:131:23\n    |\n LL |     let _ = UnitStruct::default();\n    |                       ^^^^^^^^^^^ help: remove this call to `default`"}, {"sha": "f62da157d1b94b11a37fc7467969be40601348ce", "filename": "src/tools/clippy/tests/ui/ifs_same_cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fifs_same_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fifs_same_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fifs_same_cond.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::ifs_same_cond)]\n-#![allow(clippy::if_same_then_else, clippy::comparison_chain)] // all empty blocks\n+#![allow(clippy::if_same_then_else, clippy::comparison_chain, clippy::needless_else)] // all empty blocks\n \n fn ifs_same_cond() {\n     let a = 0;"}, {"sha": "3e9d5e6a4ca320f00ab1fe26bdf07a2554a6031c", "filename": "src/tools/clippy/tests/ui/large_stack_arrays.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -18,6 +18,19 @@ pub static DOESNOTLINT2: [u8; 512_001] = {\n     [x; 512_001]\n };\n \n+fn issue_10741() {\n+    #[derive(Copy, Clone)]\n+    struct Large([u32; 100_000]);\n+\n+    fn build() -> Large {\n+        Large([0; 100_000])\n+    }\n+\n+    let _x = [build(); 3];\n+\n+    let _y = [build(), build(), build()];\n+}\n+\n fn main() {\n     let bad = (\n         [0u32; 20_000_000],"}, {"sha": "118d39566abee36e56fe7589847a2163e801e140", "filename": "src/tools/clippy/tests/ui/large_stack_arrays.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,43 +1,59 @@\n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:23:9\n+  --> $DIR/large_stack_arrays.rs:29:14\n+   |\n+LL |     let _x = [build(); 3];\n+   |              ^^^^^^^^^^^^\n+   |\n+   = help: consider allocating on the heap with `vec![build(); 3].into_boxed_slice()`\n+   = note: `-D clippy::large-stack-arrays` implied by `-D warnings`\n+\n+error: allocating a local array larger than 512000 bytes\n+  --> $DIR/large_stack_arrays.rs:31:14\n+   |\n+LL |     let _y = [build(), build(), build()];\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider allocating on the heap with `vec![build(), build(), build()].into_boxed_slice()`\n+\n+error: allocating a local array larger than 512000 bytes\n+  --> $DIR/large_stack_arrays.rs:36:9\n    |\n LL |         [0u32; 20_000_000],\n    |         ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider allocating on the heap with `vec![0u32; 20_000_000].into_boxed_slice()`\n-   = note: `-D clippy::large-stack-arrays` implied by `-D warnings`\n \n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:24:9\n+  --> $DIR/large_stack_arrays.rs:37:9\n    |\n LL |         [S { data: [0; 32] }; 5000],\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider allocating on the heap with `vec![S { data: [0; 32] }; 5000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:25:9\n+  --> $DIR/large_stack_arrays.rs:38:9\n    |\n LL |         [Some(\"\"); 20_000_000],\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider allocating on the heap with `vec![Some(\"\"); 20_000_000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:26:9\n+  --> $DIR/large_stack_arrays.rs:39:9\n    |\n LL |         [E::T(0); 5000],\n    |         ^^^^^^^^^^^^^^^\n    |\n    = help: consider allocating on the heap with `vec![E::T(0); 5000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:27:9\n+  --> $DIR/large_stack_arrays.rs:40:9\n    |\n LL |         [0u8; usize::MAX],\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider allocating on the heap with `vec![0u8; usize::MAX].into_boxed_slice()`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "351ea0e4f509ea9919fc00ab392816d694d4c820", "filename": "src/tools/clippy/tests/ui/manual_let_else.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -146,10 +146,20 @@ fn fire() {\n         Variant::A(0, 0)\n     }\n \n-    // Should not be renamed\n     let v = if let Variant::A(a, 0) = e() { a } else { return };\n-    // Should be renamed\n-    let v = if let Variant::B(b) = e() { b } else { return };\n+\n+    // `mut v` is inserted into the pattern\n+    let mut v = if let Variant::B(b) = e() { b } else { return };\n+\n+    // Nesting works\n+    let nested = Ok(Some(e()));\n+    let v = if let Ok(Some(Variant::B(b))) | Err(Some(Variant::A(b, _))) = nested {\n+        b\n+    } else {\n+        return;\n+    };\n+    // dot dot works\n+    let v = if let Variant::A(.., a) = e() { a } else { return };\n }\n \n fn not_fire() {"}, {"sha": "0e876797134746dc3bafb84959730d6e6b017eae", "filename": "src/tools/clippy/tests/ui/manual_let_else.stderr", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -260,25 +260,48 @@ LL |     create_binding_if_some!(w, g());\n    = note: this error originates in the macro `create_binding_if_some` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:150:5\n+  --> $DIR/manual_let_else.rs:149:5\n    |\n LL |     let v = if let Variant::A(a, 0) = e() { a } else { return };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::A(a, 0) = e() else { return };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::A(v, 0) = e() else { return };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:152:5\n    |\n-LL |     let v = if let Variant::B(b) = e() { b } else { return };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::B(v) = e() else { return };`\n+LL |     let mut v = if let Variant::B(b) = e() { b } else { return };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::B(mut v) = e() else { return };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:262:5\n+  --> $DIR/manual_let_else.rs:156:5\n+   |\n+LL | /     let v = if let Ok(Some(Variant::B(b))) | Err(Some(Variant::A(b, _))) = nested {\n+LL | |         b\n+LL | |     } else {\n+LL | |         return;\n+LL | |     };\n+   | |______^\n+   |\n+help: consider writing\n+   |\n+LL ~     let (Ok(Some(Variant::B(v))) | Err(Some(Variant::A(v, _)))) = nested else {\n+LL +         return;\n+LL +     };\n+   |\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:162:5\n+   |\n+LL |     let v = if let Variant::A(.., a) = e() { a } else { return };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::A(.., v) = e() else { return };`\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:272:5\n    |\n LL | /     let _ = match ff {\n LL | |         Some(value) => value,\n LL | |         _ => macro_call!(),\n LL | |     };\n    | |______^ help: consider writing: `let Some(_) = ff else { macro_call!() };`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 22 previous errors\n "}, {"sha": "dfca3b023cd58259d7e7d683c40266d82a56bc60", "filename": "src/tools/clippy/tests/ui/manual_let_else_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -68,7 +68,7 @@ fn fire() {\n     let f = Variant::Bar(1);\n \n     let _value = match f {\n-        Variant::Bar(_) | Variant::Baz(_) => (),\n+        Variant::Bar(v) | Variant::Baz(v) => v,\n         _ => return,\n     };\n "}, {"sha": "13ed35bc1d5dbdb8896ae018ce754ac756afc85e", "filename": "src/tools/clippy/tests/ui/manual_let_else_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -58,10 +58,10 @@ error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:70:5\n    |\n LL | /     let _value = match f {\n-LL | |         Variant::Bar(_) | Variant::Baz(_) => (),\n+LL | |         Variant::Bar(v) | Variant::Baz(v) => v,\n LL | |         _ => return,\n LL | |     };\n-   | |______^ help: consider writing: `let (Variant::Bar(_) | Variant::Baz(_)) = f else { return };`\n+   | |______^ help: consider writing: `let (Variant::Bar(_value) | Variant::Baz(_value)) = f else { return };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:76:5"}, {"sha": "5a552e4ae51a5419904f9ee76fbd9621278bb548", "filename": "src/tools/clippy/tests/ui/match_wild_err_arm.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_wild_err_arm.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,7 +1,20 @@\n #![feature(exclusive_range_pattern)]\n-#![allow(clippy::match_same_arms)]\n+#![allow(clippy::match_same_arms, dead_code)]\n #![warn(clippy::match_wild_err_arm)]\n \n+fn issue_10635() {\n+    enum Error {\n+        A,\n+        B,\n+    }\n+\n+    // Don't trigger in const contexts. Const unwrap is not yet stable\n+    const X: () = match Ok::<_, Error>(()) {\n+        Ok(x) => x,\n+        Err(_) => panic!(),\n+    };\n+}\n+\n fn match_wild_err_arm() {\n     let x: Result<i32, &str> = Ok(3);\n "}, {"sha": "a9f54feacdb5872bc8a2b396b401facbc95b207d", "filename": "src/tools/clippy/tests/ui/match_wild_err_arm.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_wild_err_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_wild_err_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_wild_err_arm.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,5 +1,5 @@\n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:11:9\n+  --> $DIR/match_wild_err_arm.rs:24:9\n    |\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n@@ -8,23 +8,23 @@ LL |         Err(_) => panic!(\"err\"),\n    = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:17:9\n+  --> $DIR/match_wild_err_arm.rs:30:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.expect(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:23:9\n+  --> $DIR/match_wild_err_arm.rs:36:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.expect(msg)` if the error case is unreachable\n \n error: `Err(_e)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:31:9\n+  --> $DIR/match_wild_err_arm.rs:44:9\n    |\n LL |         Err(_e) => panic!(),\n    |         ^^^^^^^"}, {"sha": "c156d394eceaaf8c045fe9a551f1b698d4b22b60", "filename": "src/tools/clippy/tests/ui/missing_fields_in_debug.rs", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_fields_in_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_fields_in_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_fields_in_debug.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,191 @@\n+#![allow(unused)]\n+#![warn(clippy::missing_fields_in_debug)]\n+\n+use std::fmt;\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+\n+struct NamedStruct1Ignored {\n+    data: u8,\n+    hidden: u32,\n+}\n+\n+impl fmt::Debug for NamedStruct1Ignored {\n+    // unused field: hidden\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        formatter\n+            .debug_struct(\"NamedStruct1Ignored\")\n+            .field(\"data\", &self.data)\n+            .finish()\n+    }\n+}\n+\n+struct NamedStructMultipleIgnored {\n+    data: u8,\n+    hidden: u32,\n+    hidden2: String,\n+    hidden3: Vec<Vec<i32>>,\n+    hidden4: ((((u8), u16), u32), u64),\n+}\n+\n+impl fmt::Debug for NamedStructMultipleIgnored {\n+    // unused fields: hidden, hidden2, hidden4\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        formatter\n+            .debug_struct(\"NamedStructMultipleIgnored\")\n+            .field(\"data\", &self.data)\n+            .field(\"hidden3\", &self.hidden3)\n+            .finish()\n+    }\n+}\n+\n+struct Unit;\n+\n+// ok\n+impl fmt::Debug for Unit {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        formatter.debug_struct(\"Unit\").finish()\n+    }\n+}\n+\n+struct UnnamedStruct1Ignored(String);\n+\n+impl fmt::Debug for UnnamedStruct1Ignored {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        formatter.debug_tuple(\"UnnamedStruct1Ignored\").finish()\n+    }\n+}\n+\n+struct UnnamedStructMultipleIgnored(String, Vec<u8>, i32);\n+\n+// tuple structs are not linted\n+impl fmt::Debug for UnnamedStructMultipleIgnored {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        formatter\n+            .debug_tuple(\"UnnamedStructMultipleIgnored\")\n+            .field(&self.1)\n+            .finish()\n+    }\n+}\n+\n+struct NamedStructNonExhaustive {\n+    a: u8,\n+    b: String,\n+}\n+\n+// ok\n+impl fmt::Debug for NamedStructNonExhaustive {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        formatter\n+            .debug_struct(\"NamedStructNonExhaustive\")\n+            .field(\"a\", &self.a)\n+            .finish_non_exhaustive() // should not warn here\n+    }\n+}\n+\n+struct MultiExprDebugImpl {\n+    a: u8,\n+    b: String,\n+}\n+\n+// ok\n+impl fmt::Debug for MultiExprDebugImpl {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut f = formatter.debug_struct(\"MultiExprDebugImpl\");\n+        f.field(\"a\", &self.a);\n+        f.finish()\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct DerivedStruct {\n+    a: u8,\n+    b: i32,\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/pull/10616#discussion_r1166846953\n+\n+struct Inner {\n+    a: usize,\n+    b: usize,\n+}\n+\n+struct HasInner {\n+    inner: Inner,\n+}\n+\n+impl HasInner {\n+    fn get(&self) -> &Inner {\n+        &self.inner\n+    }\n+}\n+\n+impl fmt::Debug for HasInner {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let inner = self.get();\n+\n+        f.debug_struct(\"HasInner\")\n+            .field(\"a\", &inner.a)\n+            .field(\"b\", &inner.b)\n+            .finish()\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/pull/10616#discussion_r1170306053\n+struct Foo {\n+    a: u8,\n+    b: u8,\n+}\n+\n+impl fmt::Debug for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"Foo\").field(\"a\", &self.a).field(\"b\", &()).finish()\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/pull/10616#discussion_r1175473620\n+mod comment1175473620 {\n+    use super::*;\n+\n+    struct Inner {\n+        a: usize,\n+        b: usize,\n+    }\n+    struct Wrapper(Inner);\n+\n+    impl Deref for Wrapper {\n+        type Target = Inner;\n+\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+\n+    impl fmt::Debug for Wrapper {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            f.debug_struct(\"Wrapper\")\n+                .field(\"a\", &self.a)\n+                .field(\"b\", &self.b)\n+                .finish()\n+        }\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/pull/10616#discussion_r1175488757\n+// PhantomData is an exception and does not need to be included\n+struct WithPD {\n+    a: u8,\n+    b: u8,\n+    c: PhantomData<String>,\n+}\n+\n+impl fmt::Debug for WithPD {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"WithPD\")\n+            .field(\"a\", &self.a)\n+            .field(\"b\", &self.b)\n+            .finish()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ef9d02abab7dbf1ff2bee7120560bc5dadf030b3", "filename": "src/tools/clippy/tests/ui/missing_fields_in_debug.stderr", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_fields_in_debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_fields_in_debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_fields_in_debug.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,73 @@\n+error: manual `Debug` impl does not include all fields\n+  --> $DIR/missing_fields_in_debug.rs:13:1\n+   |\n+LL | / impl fmt::Debug for NamedStruct1Ignored {\n+LL | |     // unused field: hidden\n+LL | |     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+LL | |         formatter\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+note: this field is unused\n+  --> $DIR/missing_fields_in_debug.rs:10:5\n+   |\n+LL |     hidden: u32,\n+   |     ^^^^^^^^^^^\n+   = help: consider including all fields in this `Debug` impl\n+   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields\n+   = note: `-D clippy::missing-fields-in-debug` implied by `-D warnings`\n+\n+error: manual `Debug` impl does not include all fields\n+  --> $DIR/missing_fields_in_debug.rs:31:1\n+   |\n+LL | / impl fmt::Debug for NamedStructMultipleIgnored {\n+LL | |     // unused fields: hidden, hidden2, hidden4\n+LL | |     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+LL | |         formatter\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+note: this field is unused\n+  --> $DIR/missing_fields_in_debug.rs:25:5\n+   |\n+LL |     hidden: u32,\n+   |     ^^^^^^^^^^^\n+note: this field is unused\n+  --> $DIR/missing_fields_in_debug.rs:26:5\n+   |\n+LL |     hidden2: String,\n+   |     ^^^^^^^^^^^^^^^\n+note: this field is unused\n+  --> $DIR/missing_fields_in_debug.rs:28:5\n+   |\n+LL |     hidden4: ((((u8), u16), u32), u64),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider including all fields in this `Debug` impl\n+   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields\n+\n+error: manual `Debug` impl does not include all fields\n+  --> $DIR/missing_fields_in_debug.rs:92:1\n+   |\n+LL | / impl fmt::Debug for MultiExprDebugImpl {\n+LL | |     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+LL | |         let mut f = formatter.debug_struct(\"MultiExprDebugImpl\");\n+LL | |         f.field(\"a\", &self.a);\n+LL | |         f.finish()\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+note: this field is unused\n+  --> $DIR/missing_fields_in_debug.rs:88:5\n+   |\n+LL |     b: String,\n+   |     ^^^^^^^^^\n+   = help: consider including all fields in this `Debug` impl\n+   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "06a16162790cc63faf41d39e8bdf45cbb77ef610", "filename": "src/tools/clippy/tests/ui/needless_else.fixed", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,57 @@\n+//@run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::needless_else)]\n+#![allow(clippy::suspicious_else_formatting)]\n+\n+macro_rules! mac {\n+    ($test:expr) => {\n+        if $test {\n+            println!(\"Test successful!\");\n+        } else {\n+        }\n+    };\n+}\n+\n+macro_rules! empty_expansion {\n+    () => {};\n+}\n+\n+fn main() {\n+    let b = std::hint::black_box(true);\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } \n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        // Do not lint because this comment might be important\n+    }\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else\n+    /* Do not lint because this comment might be important */\n+    {\n+    }\n+\n+    // Do not lint because of the expression\n+    let _ = if b { 1 } else { 2 };\n+\n+    // Do not lint because inside a macro\n+    mac!(b);\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        #[cfg(foo)]\n+        \"Do not lint cfg'd out code\"\n+    }\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        empty_expansion!();\n+    }\n+}"}, {"sha": "728032c47a66b23b68e63afb4f92b9ca77c126d2", "filename": "src/tools/clippy/tests/ui/needless_else.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,58 @@\n+//@run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::needless_else)]\n+#![allow(clippy::suspicious_else_formatting)]\n+\n+macro_rules! mac {\n+    ($test:expr) => {\n+        if $test {\n+            println!(\"Test successful!\");\n+        } else {\n+        }\n+    };\n+}\n+\n+macro_rules! empty_expansion {\n+    () => {};\n+}\n+\n+fn main() {\n+    let b = std::hint::black_box(true);\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+    }\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        // Do not lint because this comment might be important\n+    }\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else\n+    /* Do not lint because this comment might be important */\n+    {\n+    }\n+\n+    // Do not lint because of the expression\n+    let _ = if b { 1 } else { 2 };\n+\n+    // Do not lint because inside a macro\n+    mac!(b);\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        #[cfg(foo)]\n+        \"Do not lint cfg'd out code\"\n+    }\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        empty_expansion!();\n+    }\n+}"}, {"sha": "ea693085164499db07d5dfcbc2ac62d0231740f8", "filename": "src/tools/clippy/tests/ui/needless_else.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_else.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,12 @@\n+error: this else branch is empty\n+  --> $DIR/needless_else.rs:24:7\n+   |\n+LL |       } else {\n+   |  _______^\n+LL | |     }\n+   | |_____^ help: you can remove it\n+   |\n+   = note: `-D clippy::needless-else` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4dabf313963dee1e3b3fbd8da683792bdd2b4958", "filename": "src/tools/clippy/tests/ui/needless_return.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -7,7 +7,8 @@\n     clippy::if_same_then_else,\n     clippy::single_match,\n     clippy::needless_bool,\n-    clippy::equatable_if_let\n+    clippy::equatable_if_let,\n+    clippy::needless_else\n )]\n #![warn(clippy::needless_return)]\n "}, {"sha": "542f562b314969aeb1cb0108e9f23cf7772b3c50", "filename": "src/tools/clippy/tests/ui/needless_return.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -7,7 +7,8 @@\n     clippy::if_same_then_else,\n     clippy::single_match,\n     clippy::needless_bool,\n-    clippy::equatable_if_let\n+    clippy::equatable_if_let,\n+    clippy::needless_else\n )]\n #![warn(clippy::needless_return)]\n "}, {"sha": "1d9d23d30083ca31e155cb29d9805a3e2176e56a", "filename": "src/tools/clippy/tests/ui/needless_return.stderr", "status": "modified", "additions": 322, "deletions": 104, "changes": 426, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,438 +1,656 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:27:5\n+  --> $DIR/needless_return.rs:28:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return true;\n+LL +     true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:31:5\n+  --> $DIR/needless_return.rs:32:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return true;\n+LL +     true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:36:5\n+  --> $DIR/needless_return.rs:37:5\n    |\n LL |     return true;;;\n    |     ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return true;;;\n+LL +     true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:41:5\n+  --> $DIR/needless_return.rs:42:5\n    |\n LL |     return true;; ; ;\n    |     ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return true;; ; ;\n+LL +     true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:46:9\n+  --> $DIR/needless_return.rs:47:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return true;\n+LL +         true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:48:9\n+  --> $DIR/needless_return.rs:49:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return false;\n+LL +         false\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:54:17\n+  --> $DIR/needless_return.rs:55:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL |         true => false,\n+   |                 ~~~~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:56:13\n+  --> $DIR/needless_return.rs:57:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -             return true;\n+LL +             true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:63:9\n+  --> $DIR/needless_return.rs:64:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return true;\n+LL +         true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:65:16\n+  --> $DIR/needless_return.rs:66:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL |     let _ = || true;\n+   |                ~~~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:69:5\n+  --> $DIR/needless_return.rs:70:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return the_answer!();\n+LL +     the_answer!()\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:72:21\n+  --> $DIR/needless_return.rs:73:21\n    |\n LL |   fn test_void_fun() {\n    |  _____________________^\n LL | |     return;\n    | |__________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL - fn test_void_fun() {\n+LL -     return;\n+LL + fn test_void_fun() {\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:77:11\n+  --> $DIR/needless_return.rs:78:11\n    |\n LL |       if b {\n    |  ___________^\n LL | |         return;\n    | |______________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     if b {\n+LL -         return;\n+LL +     if b {\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:79:13\n+  --> $DIR/needless_return.rs:80:13\n    |\n LL |       } else {\n    |  _____________^\n LL | |         return;\n    | |______________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     } else {\n+LL -         return;\n+LL +     } else {\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:87:14\n+  --> $DIR/needless_return.rs:88:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n-   = help: replace `return` with a unit value\n+help: replace `return` with a unit value\n+   |\n+LL |         _ => (),\n+   |              ~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:95:24\n+  --> $DIR/needless_return.rs:96:24\n    |\n LL |               let _ = 42;\n    |  ________________________^\n LL | |             return;\n    | |__________________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -             let _ = 42;\n+LL -             return;\n+LL +             let _ = 42;\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:98:14\n+  --> $DIR/needless_return.rs:99:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n-   = help: replace `return` with a unit value\n+help: replace `return` with a unit value\n+   |\n+LL |         _ => (),\n+   |              ~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:111:9\n+  --> $DIR/needless_return.rs:112:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return String::from(\"test\");\n+LL +         String::from(\"test\")\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:113:9\n+  --> $DIR/needless_return.rs:114:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return String::new();\n+LL +         String::new()\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:135:32\n+  --> $DIR/needless_return.rs:136:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^\n    |\n-   = help: replace `return` with an empty block\n+help: replace `return` with an empty block\n+   |\n+LL |         bar.unwrap_or_else(|_| {})\n+   |                                ~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:139:21\n+  --> $DIR/needless_return.rs:140:21\n    |\n LL |           let _ = || {\n    |  _____________________^\n LL | |             return;\n    | |__________________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         let _ = || {\n+LL -             return;\n+LL +         let _ = || {\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:142:20\n+  --> $DIR/needless_return.rs:143:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^\n    |\n-   = help: replace `return` with an empty block\n+help: replace `return` with an empty block\n+   |\n+LL |         let _ = || {};\n+   |                    ~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:148:32\n+  --> $DIR/needless_return.rs:149:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL |         res.unwrap_or_else(|_| Foo)\n+   |                                ~~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:157:5\n+  --> $DIR/needless_return.rs:158:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return true;\n+LL +     true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:161:5\n+  --> $DIR/needless_return.rs:162:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return true;\n+LL +     true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:166:9\n+  --> $DIR/needless_return.rs:167:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return true;\n+LL +         true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:168:9\n+  --> $DIR/needless_return.rs:169:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return false;\n+LL +         false\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:174:17\n+  --> $DIR/needless_return.rs:175:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL |         true => false,\n+   |                 ~~~~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:176:13\n+  --> $DIR/needless_return.rs:177:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -             return true;\n+LL +             true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:183:9\n+  --> $DIR/needless_return.rs:184:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return true;\n+LL +         true\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:185:16\n+  --> $DIR/needless_return.rs:186:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL |     let _ = || true;\n+   |                ~~~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:189:5\n+  --> $DIR/needless_return.rs:190:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return the_answer!();\n+LL +     the_answer!()\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:192:33\n+  --> $DIR/needless_return.rs:193:33\n    |\n LL |   async fn async_test_void_fun() {\n    |  _________________________________^\n LL | |     return;\n    | |__________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL - async fn async_test_void_fun() {\n+LL -     return;\n+LL + async fn async_test_void_fun() {\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:197:11\n+  --> $DIR/needless_return.rs:198:11\n    |\n LL |       if b {\n    |  ___________^\n LL | |         return;\n    | |______________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     if b {\n+LL -         return;\n+LL +     if b {\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:199:13\n+  --> $DIR/needless_return.rs:200:13\n    |\n LL |       } else {\n    |  _____________^\n LL | |         return;\n    | |______________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     } else {\n+LL -         return;\n+LL +     } else {\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:207:14\n+  --> $DIR/needless_return.rs:208:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n-   = help: replace `return` with a unit value\n+help: replace `return` with a unit value\n+   |\n+LL |         _ => (),\n+   |              ~~\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:220:9\n+  --> $DIR/needless_return.rs:221:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return String::from(\"test\");\n+LL +         String::from(\"test\")\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:222:9\n+  --> $DIR/needless_return.rs:223:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return String::new();\n+LL +         String::new()\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:238:5\n+  --> $DIR/needless_return.rs:239:5\n    |\n LL |     return format!(\"Hello {}\", \"world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -     return format!(\"Hello {}\", \"world!\");\n+LL +     format!(\"Hello {}\", \"world!\")\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:250:9\n+  --> $DIR/needless_return.rs:251:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL ~         true\n+LL |     } else {\n+LL |         return false;\n+LL ~     }\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:252:9\n+  --> $DIR/needless_return.rs:253:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL ~         false\n+LL ~     }\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:259:13\n+  --> $DIR/needless_return.rs:260:13\n    |\n LL |             return 10;\n    |             ^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL ~             10\n+LL |         },\n+ ...\n+LL |         },\n+LL ~     }\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:262:13\n+  --> $DIR/needless_return.rs:263:13\n    |\n LL |             return 100;\n    |             ^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL ~             100\n+LL |         },\n+LL ~     }\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:270:9\n+  --> $DIR/needless_return.rs:271:9\n    |\n LL |         return 0;\n    |         ^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL ~         0\n+LL ~     }\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:277:13\n+  --> $DIR/needless_return.rs:278:13\n    |\n LL |             return *(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL ~             *(x as *const isize)\n+LL |         } else {\n+LL |             return !*(x as *const isize);\n+LL ~         }\n+LL ~     }\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:279:13\n+  --> $DIR/needless_return.rs:280:13\n    |\n LL |             return !*(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL ~             !*(x as *const isize)\n+LL ~         }\n+LL ~     }\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:286:20\n+  --> $DIR/needless_return.rs:287:20\n    |\n LL |           let _ = 42;\n    |  ____________________^\n LL | |\n LL | |         return;\n    | |______________^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         let _ = 42;\n+LL - \n+LL -         return;\n+LL +         let _ = 42;\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:293:20\n+  --> $DIR/needless_return.rs:294:20\n    |\n LL |         let _ = 42; return;\n    |                    ^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         let _ = 42; return;\n+LL +         let _ = 42;\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:305:9\n+  --> $DIR/needless_return.rs:306:9\n    |\n LL |         return Ok(format!(\"ok!\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return Ok(format!(\"ok!\"));\n+LL +         Ok(format!(\"ok!\"))\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:307:9\n+  --> $DIR/needless_return.rs:308:9\n    |\n LL |         return Err(format!(\"err!\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return Err(format!(\"err!\"));\n+LL +         Err(format!(\"err!\"))\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:313:9\n+  --> $DIR/needless_return.rs:314:9\n    |\n LL |         return if true { 1 } else { 2 };\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return`\n+help: remove `return`\n+   |\n+LL -         return if true { 1 } else { 2 };\n+LL +         if true { 1 } else { 2 }\n+   |\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:317:9\n+  --> $DIR/needless_return.rs:318:9\n    |\n LL |         return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: remove `return` and wrap the sequence with parentheses\n+help: remove `return` and wrap the sequence with parentheses\n+   |\n+LL -         return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n+LL +         (if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 })\n+   |\n \n error: aborting due to 52 previous errors\n "}, {"sha": "fec6b7713eef8682f430b9d0591e025228a88e96", "filename": "src/tools/clippy/tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -110,3 +110,17 @@ fn issue_10435() {\n         println!(\"{}\", line!());\n     }\n }\n+\n+fn issue10836() {\n+    struct Foo(bool);\n+    impl std::ops::Not for Foo {\n+        type Output = bool;\n+\n+        fn not(self) -> Self::Output {\n+            !self.0\n+        }\n+    }\n+\n+    // Should not lint\n+    let _: bool = !!Foo(true);\n+}"}, {"sha": "24de573d0838e56f600eb18b685e188796b27a32", "filename": "src/tools/clippy/tests/ui/ptr_cast_constness.fixed", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,55 @@\n+//@run-rustfix\n+//@aux-build:proc_macros.rs\n+\n+#![warn(clippy::ptr_cast_constness)]\n+\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n+\n+#[inline_macros]\n+fn main() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr as *const i32;\n+    let _ = mut_ptr as *mut i32;\n+\n+    // Make sure the lint can handle the difference in their operator precedences.\n+    unsafe {\n+        let ptr_ptr: *const *const u32 = &ptr;\n+        let _ = (*ptr_ptr).cast_mut();\n+    }\n+\n+    let _ = ptr.cast_mut();\n+    let _ = mut_ptr.cast_const();\n+\n+    // Lint this, since pointer::cast_mut and pointer::cast_const have ?Sized\n+    let ptr_of_array: *const [u32; 4] = &[1, 2, 3, 4];\n+    let _ = ptr_of_array as *const [u32];\n+    let _ = ptr_of_array as *const dyn std::fmt::Debug;\n+\n+    // Make sure the lint is triggered inside a macro\n+    let _ = inline!($ptr as *const i32);\n+\n+    // Do not lint inside macros from external crates\n+    let _ = external!($ptr as *const i32);\n+}\n+\n+#[clippy::msrv = \"1.64\"]\n+fn _msrv_1_64() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    // `pointer::cast_const` and `pointer::cast_mut` were stabilized in 1.65. Do not lint this\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+}\n+\n+#[clippy::msrv = \"1.65\"]\n+fn _msrv_1_65() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr.cast_mut();\n+    let _ = mut_ptr.cast_const();\n+}"}, {"sha": "63d973a9fca87dacca5da4410b2aed9d89364624", "filename": "src/tools/clippy/tests/ui/ptr_cast_constness.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,55 @@\n+//@run-rustfix\n+//@aux-build:proc_macros.rs\n+\n+#![warn(clippy::ptr_cast_constness)]\n+\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n+\n+#[inline_macros]\n+fn main() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr as *const i32;\n+    let _ = mut_ptr as *mut i32;\n+\n+    // Make sure the lint can handle the difference in their operator precedences.\n+    unsafe {\n+        let ptr_ptr: *const *const u32 = &ptr;\n+        let _ = *ptr_ptr as *mut i32;\n+    }\n+\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+\n+    // Lint this, since pointer::cast_mut and pointer::cast_const have ?Sized\n+    let ptr_of_array: *const [u32; 4] = &[1, 2, 3, 4];\n+    let _ = ptr_of_array as *const [u32];\n+    let _ = ptr_of_array as *const dyn std::fmt::Debug;\n+\n+    // Make sure the lint is triggered inside a macro\n+    let _ = inline!($ptr as *const i32);\n+\n+    // Do not lint inside macros from external crates\n+    let _ = external!($ptr as *const i32);\n+}\n+\n+#[clippy::msrv = \"1.64\"]\n+fn _msrv_1_64() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    // `pointer::cast_const` and `pointer::cast_mut` were stabilized in 1.65. Do not lint this\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+}\n+\n+#[clippy::msrv = \"1.65\"]\n+fn _msrv_1_65() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+}"}, {"sha": "43816c87c19071cbd7bb8a0abfcb32c2f6ad721b", "filename": "src/tools/clippy/tests/ui/ptr_cast_constness.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fptr_cast_constness.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,34 @@\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:20:17\n+   |\n+LL |         let _ = *ptr_ptr as *mut i32;\n+   |                 ^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_mut`, a safer alternative: `(*ptr_ptr).cast_mut()`\n+   |\n+   = note: `-D clippy::ptr-cast-constness` implied by `-D warnings`\n+\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:23:13\n+   |\n+LL |     let _ = ptr as *mut i32;\n+   |             ^^^^^^^^^^^^^^^ help: try `pointer::cast_mut`, a safer alternative: `ptr.cast_mut()`\n+\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:24:13\n+   |\n+LL |     let _ = mut_ptr as *const i32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `mut_ptr.cast_const()`\n+\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:53:13\n+   |\n+LL |     let _ = ptr as *mut i32;\n+   |             ^^^^^^^^^^^^^^^ help: try `pointer::cast_mut`, a safer alternative: `ptr.cast_mut()`\n+\n+error: `as` casting between raw pointers while changing its constness\n+  --> $DIR/ptr_cast_constness.rs:54:13\n+   |\n+LL |     let _ = mut_ptr as *const i32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `mut_ptr.cast_const()`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "481c9b263fbb8933a9f09afae1d1a6e26ab7e4a1", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_drop_order.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_drop_order.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_drop_order.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_drop_order.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -2,7 +2,7 @@\n \n // Issue #5746\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::if_same_then_else, clippy::equatable_if_let)]\n+#![allow(clippy::if_same_then_else, clippy::equatable_if_let, clippy::needless_else)]\n use std::task::Poll::{Pending, Ready};\n \n fn main() {"}, {"sha": "86e46d41e65a1bfc0dd01f8f07b30a026ff5a198", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_drop_order.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -2,7 +2,7 @@\n \n // Issue #5746\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::if_same_then_else, clippy::equatable_if_let)]\n+#![allow(clippy::if_same_then_else, clippy::equatable_if_let, clippy::needless_else)]\n use std::task::Poll::{Pending, Ready};\n \n fn main() {"}, {"sha": "dae931541d4543b8650f6cf3a56eed9d40c3a9bd", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -47,6 +47,7 @@ fn main() {\n \n     issue6067();\n     issue10726();\n+    issue10803();\n \n     let _ = if gen_opt().is_some() {\n         1\n@@ -107,3 +108,14 @@ fn issue10726() {\n         _ => false,\n     };\n }\n+\n+fn issue10803() {\n+    let x = Some(42);\n+\n+    let _ = x.is_some();\n+\n+    let _ = x.is_none();\n+\n+    // Don't lint\n+    let _ = matches!(x, Some(16));\n+}"}, {"sha": "3f2fa3f53ce992323c9e12e0b660463b8262f70d", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -56,6 +56,7 @@ fn main() {\n \n     issue6067();\n     issue10726();\n+    issue10803();\n \n     let _ = if let Some(_) = gen_opt() {\n         1\n@@ -134,3 +135,14 @@ fn issue10726() {\n         _ => false,\n     };\n }\n+\n+fn issue10803() {\n+    let x = Some(42);\n+\n+    let _ = matches!(x, Some(_));\n+\n+    let _ = matches!(x, None);\n+\n+    // Don't lint\n+    let _ = matches!(x, Some(16));\n+}"}, {"sha": "93760ce97a8f6260657def44718d54bea44474e4", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -77,49 +77,49 @@ LL |     let _ = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:60:20\n+  --> $DIR/redundant_pattern_matching_option.rs:61:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:62:19\n+  --> $DIR/redundant_pattern_matching_option.rs:63:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:68:12\n+  --> $DIR/redundant_pattern_matching_option.rs:69:12\n    |\n LL |     if let Some(..) = gen_opt() {}\n    |     -------^^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:83:12\n+  --> $DIR/redundant_pattern_matching_option.rs:84:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:85:12\n+  --> $DIR/redundant_pattern_matching_option.rs:86:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:87:15\n+  --> $DIR/redundant_pattern_matching_option.rs:88:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:89:15\n+  --> $DIR/redundant_pattern_matching_option.rs:90:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:91:5\n+  --> $DIR/redundant_pattern_matching_option.rs:92:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -128,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:96:5\n+  --> $DIR/redundant_pattern_matching_option.rs:97:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -137,19 +137,19 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:104:12\n+  --> $DIR/redundant_pattern_matching_option.rs:105:12\n    |\n LL |     if let None = *(&None::<()>) {}\n    |     -------^^^^----------------- help: try this: `if (&None::<()>).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:105:12\n+  --> $DIR/redundant_pattern_matching_option.rs:106:12\n    |\n LL |     if let None = *&None::<()> {}\n    |     -------^^^^--------------- help: try this: `if (&None::<()>).is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:111:5\n+  --> $DIR/redundant_pattern_matching_option.rs:112:5\n    |\n LL | /     match x {\n LL | |         Some(_) => true,\n@@ -158,7 +158,7 @@ LL | |     };\n    | |_____^ help: try this: `x.is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:116:5\n+  --> $DIR/redundant_pattern_matching_option.rs:117:5\n    |\n LL | /     match x {\n LL | |         None => true,\n@@ -167,7 +167,7 @@ LL | |     };\n    | |_____^ help: try this: `x.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:121:5\n+  --> $DIR/redundant_pattern_matching_option.rs:122:5\n    |\n LL | /     match x {\n LL | |         Some(_) => false,\n@@ -176,13 +176,25 @@ LL | |     };\n    | |_____^ help: try this: `x.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:126:5\n+  --> $DIR/redundant_pattern_matching_option.rs:127:5\n    |\n LL | /     match x {\n LL | |         None => false,\n LL | |         _ => true,\n LL | |     };\n    | |_____^ help: try this: `x.is_some()`\n \n-error: aborting due to 26 previous errors\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:142:13\n+   |\n+LL |     let _ = matches!(x, Some(_));\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try this: `x.is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:144:13\n+   |\n+LL |     let _ = matches!(x, None);\n+   |             ^^^^^^^^^^^^^^^^^ help: try this: `x.is_none()`\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "d77a2af761642cf72a99d9c2839160321c823937", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -44,6 +44,7 @@ fn main() {\n     issue6067();\n     issue6065();\n     issue10726();\n+    issue10803();\n \n     let _ = if gen_res().is_ok() {\n         1\n@@ -133,3 +134,17 @@ fn issue10726() {\n         _ => true,\n     };\n }\n+\n+fn issue10803() {\n+    let x: Result<i32, i32> = Ok(42);\n+\n+    let _ = x.is_ok();\n+\n+    let _ = x.is_err();\n+\n+    // Don't lint\n+    let _ = matches!(x, Ok(16));\n+\n+    // Don't lint\n+    let _ = matches!(x, Err(16));\n+}"}, {"sha": "aa884ac6bb1ee2136afcb344c5cd2734c963b935", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -56,6 +56,7 @@ fn main() {\n     issue6067();\n     issue6065();\n     issue10726();\n+    issue10803();\n \n     let _ = if let Ok(_) = gen_res() {\n         1\n@@ -163,3 +164,17 @@ fn issue10726() {\n         _ => true,\n     };\n }\n+\n+fn issue10803() {\n+    let x: Result<i32, i32> = Ok(42);\n+\n+    let _ = matches!(x, Ok(_));\n+\n+    let _ = matches!(x, Err(_));\n+\n+    // Don't lint\n+    let _ = matches!(x, Ok(16));\n+\n+    // Don't lint\n+    let _ = matches!(x, Err(16));\n+}"}, {"sha": "b462f7f41b9cc71a70907b950c6b3dc1c41c18ad", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.stderr", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -73,67 +73,67 @@ LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:60:20\n+  --> $DIR/redundant_pattern_matching_result.rs:61:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:62:19\n+  --> $DIR/redundant_pattern_matching_result.rs:63:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:85:19\n+  --> $DIR/redundant_pattern_matching_result.rs:86:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:86:16\n+  --> $DIR/redundant_pattern_matching_result.rs:87:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:92:12\n+  --> $DIR/redundant_pattern_matching_result.rs:93:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:93:15\n+  --> $DIR/redundant_pattern_matching_result.rs:94:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:111:12\n+  --> $DIR/redundant_pattern_matching_result.rs:112:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:113:12\n+  --> $DIR/redundant_pattern_matching_result.rs:114:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:115:15\n+  --> $DIR/redundant_pattern_matching_result.rs:116:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:117:15\n+  --> $DIR/redundant_pattern_matching_result.rs:118:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:119:5\n+  --> $DIR/redundant_pattern_matching_result.rs:120:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,7 +142,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:124:5\n+  --> $DIR/redundant_pattern_matching_result.rs:125:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -151,7 +151,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:134:5\n+  --> $DIR/redundant_pattern_matching_result.rs:135:5\n    |\n LL | /     match x {\n LL | |         Ok(_) => true,\n@@ -160,7 +160,7 @@ LL | |     };\n    | |_____^ help: try this: `x.is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:139:5\n+  --> $DIR/redundant_pattern_matching_result.rs:140:5\n    |\n LL | /     match x {\n LL | |         Ok(_) => false,\n@@ -169,7 +169,7 @@ LL | |     };\n    | |_____^ help: try this: `x.is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:144:5\n+  --> $DIR/redundant_pattern_matching_result.rs:145:5\n    |\n LL | /     match x {\n LL | |         Err(_) => true,\n@@ -178,13 +178,25 @@ LL | |     };\n    | |_____^ help: try this: `x.is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:149:5\n+  --> $DIR/redundant_pattern_matching_result.rs:150:5\n    |\n LL | /     match x {\n LL | |         Err(_) => false,\n LL | |         _ => true,\n LL | |     };\n    | |_____^ help: try this: `x.is_ok()`\n \n-error: aborting due to 26 previous errors\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_result.rs:171:13\n+   |\n+LL |     let _ = matches!(x, Ok(_));\n+   |             ^^^^^^^^^^^^^^^^^^ help: try this: `x.is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_result.rs:173:13\n+   |\n+LL |     let _ = matches!(x, Err(_));\n+   |             ^^^^^^^^^^^^^^^^^^^ help: try this: `x.is_err()`\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "1c8e47ab594949f0f9466c70aaf82f607b570c03", "filename": "src/tools/clippy/tests/ui/regex.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -42,6 +42,11 @@ fn syntax_error() {\n     let escaped_string_span = Regex::new(\"\\\\b\\\\c\");\n \n     let aux_span = Regex::new(\"(?ixi)\");\n+\n+    let should_not_lint = Regex::new(\"(?u).\");\n+    let should_not_lint = BRegex::new(\"(?u).\");\n+    let invalid_utf8_should_not_lint = BRegex::new(\"(?-u).\");\n+    let invalid_utf8_should_lint = Regex::new(\"(?-u).\");\n }\n \n fn trivial_regex() {\n@@ -71,6 +76,8 @@ fn trivial_regex() {\n     // non-trivial regexes\n     let non_trivial_dot = Regex::new(\"a.b\");\n     let non_trivial_dot_builder = RegexBuilder::new(\"a.b\");\n+    let non_trivial_dot = Regex::new(\".\");\n+    let non_trivial_dot = BRegex::new(\".\");\n     let non_trivial_eq = Regex::new(\"^foo|bar$\");\n     let non_trivial_starts_with = Regex::new(\"^foo|bar\");\n     let non_trivial_ends_with = Regex::new(\"^foo|bar\");"}, {"sha": "1e8a21283cd9584f4ab974da8c0d0a68ad49613a", "filename": "src/tools/clippy/tests/ui/regex.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -99,93 +99,99 @@ error: regex syntax error: duplicate flag\n LL |     let aux_span = Regex::new(\"(?ixi)\");\n    |                                  ^ ^\n \n+error: regex syntax error: pattern can match invalid UTF-8\n+  --> $DIR/regex.rs:49:53\n+   |\n+LL |     let invalid_utf8_should_lint = Regex::new(\"(?-u).\");\n+   |                                                     ^\n+\n error: trivial regex\n-  --> $DIR/regex.rs:48:33\n+  --> $DIR/regex.rs:53:33\n    |\n LL |     let trivial_eq = Regex::new(\"^foobar$\");\n    |                                 ^^^^^^^^^^\n    |\n    = help: consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:50:48\n+  --> $DIR/regex.rs:55:48\n    |\n LL |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n    |                                                ^^^^^^^^^^\n    |\n    = help: consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:52:42\n+  --> $DIR/regex.rs:57:42\n    |\n LL |     let trivial_starts_with = Regex::new(\"^foobar\");\n    |                                          ^^^^^^^^^\n    |\n    = help: consider using `str::starts_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:54:40\n+  --> $DIR/regex.rs:59:40\n    |\n LL |     let trivial_ends_with = Regex::new(\"foobar$\");\n    |                                        ^^^^^^^^^\n    |\n    = help: consider using `str::ends_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:56:39\n+  --> $DIR/regex.rs:61:39\n    |\n LL |     let trivial_contains = Regex::new(\"foobar\");\n    |                                       ^^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:58:39\n+  --> $DIR/regex.rs:63:39\n    |\n LL |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:60:40\n+  --> $DIR/regex.rs:65:40\n    |\n LL |     let trivial_backslash = Regex::new(\"a/.b\");\n    |                                        ^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:63:36\n+  --> $DIR/regex.rs:68:36\n    |\n LL |     let trivial_empty = Regex::new(\"\");\n    |                                    ^^\n    |\n    = help: the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:65:36\n+  --> $DIR/regex.rs:70:36\n    |\n LL |     let trivial_empty = Regex::new(\"^\");\n    |                                    ^^^\n    |\n    = help: the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:67:36\n+  --> $DIR/regex.rs:72:36\n    |\n LL |     let trivial_empty = Regex::new(\"^$\");\n    |                                    ^^^^\n    |\n    = help: consider using `str::is_empty`\n \n error: trivial regex\n-  --> $DIR/regex.rs:69:44\n+  --> $DIR/regex.rs:74:44\n    |\n LL |     let binary_trivial_empty = BRegex::new(\"^$\");\n    |                                            ^^^^\n    |\n    = help: consider using `str::is_empty`\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "30f2bfc8c1a9a77c9d8bf706388b1614580f18de", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -28,6 +28,7 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n+#![allow(cast_ref_to_mut)]\n #![allow(suspicious_double_ref_op)]\n #![allow(cast_ref_to_mut)]\n #![allow(drop_bounds)]"}, {"sha": "3939914d4224126c9212130220c2caa24d2ac0f7", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -28,6 +28,7 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n+#![allow(cast_ref_to_mut)]\n #![allow(suspicious_double_ref_op)]\n #![allow(cast_ref_to_mut)]\n #![allow(drop_bounds)]"}, {"sha": "7290cf32e5b60685603b688938b6a69c26febf82", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,301 +1,301 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::integer_arithmetic` has been renamed to `clippy::arithmetic_side_effects`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::integer_arithmetic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::arithmetic_side_effects`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::cast_ref_to_mut` has been renamed to `cast_ref_to_mut`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::cast_ref_to_mut)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `cast_ref_to_mut`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::drop_copy)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n error: lint `clippy::drop_ref` has been renamed to `dropping_references`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::drop_ref)]\n    |         ^^^^^^^^^^^^^^^^ help: use the new name: `dropping_references`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:87:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n-  --> $DIR/rename.rs:88:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::forget_copy)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n-  --> $DIR/rename.rs:89:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::forget_ref)]\n    |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:90:9\n+  --> $DIR/rename.rs:91:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:91:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:92:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::invalid_utf8_in_unchecked` has been renamed to `invalid_from_utf8_unchecked`\n-  --> $DIR/rename.rs:93:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::invalid_utf8_in_unchecked)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_from_utf8_unchecked`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:94:9\n+  --> $DIR/rename.rs:95:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:95:9\n+  --> $DIR/rename.rs:96:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:96:9\n+  --> $DIR/rename.rs:97:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:97:9\n+  --> $DIR/rename.rs:98:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:98:9\n+  --> $DIR/rename.rs:99:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:99:9\n+  --> $DIR/rename.rs:100:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:100:9\n+  --> $DIR/rename.rs:101:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`"}, {"sha": "77a2cf3b991f6064fd506b67ce10979144455dbd", "filename": "src/tools/clippy/tests/ui/single_match.fixed", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,209 @@\n+//@run-rustfix\n+#![warn(clippy::single_match)]\n+#![allow(unused, clippy::uninlined_format_args, clippy::redundant_pattern_matching)]\n+fn dummy() {}\n+\n+fn single_match() {\n+    let x = Some(1u8);\n+\n+    if let Some(y) = x {\n+        println!(\"{:?}\", y);\n+    };\n+\n+    let x = Some(1u8);\n+    if let Some(y) = x { println!(\"{:?}\", y) }\n+\n+    let z = (1u8, 1u8);\n+    if let (2..=3, 7..=9) = z { dummy() };\n+\n+    // Not linted (pattern guards used)\n+    match x {\n+        Some(y) if y == 0 => println!(\"{:?}\", y),\n+        _ => (),\n+    }\n+\n+    // Not linted (no block with statements in the single arm)\n+    match z {\n+        (2..=3, 7..=9) => println!(\"{:?}\", z),\n+        _ => println!(\"nope\"),\n+    }\n+}\n+\n+enum Foo {\n+    Bar,\n+    Baz(u8),\n+}\n+use std::borrow::Cow;\n+use Foo::*;\n+\n+fn single_match_know_enum() {\n+    let x = Some(1u8);\n+    let y: Result<_, i8> = Ok(1i8);\n+\n+    if let Some(y) = x { dummy() };\n+\n+    if let Ok(y) = y { dummy() };\n+\n+    let c = Cow::Borrowed(\"\");\n+\n+    if let Cow::Borrowed(..) = c { dummy() };\n+\n+    let z = Foo::Bar;\n+    // no warning\n+    match z {\n+        Bar => println!(\"42\"),\n+        Baz(_) => (),\n+    }\n+\n+    match z {\n+        Baz(_) => println!(\"42\"),\n+        Bar => (),\n+    }\n+}\n+\n+// issue #173\n+fn if_suggestion() {\n+    let x = \"test\";\n+    if x == \"test\" { println!() }\n+\n+    #[derive(PartialEq, Eq)]\n+    enum Foo {\n+        A,\n+        B,\n+        C(u32),\n+    }\n+\n+    let x = Foo::A;\n+    if x == Foo::A { println!() }\n+\n+    const FOO_C: Foo = Foo::C(0);\n+    if x == FOO_C { println!() }\n+\n+    if x == Foo::A { println!() }\n+\n+    let x = &x;\n+    if x == &Foo::A { println!() }\n+\n+    enum Bar {\n+        A,\n+        B,\n+    }\n+    impl PartialEq for Bar {\n+        fn eq(&self, rhs: &Self) -> bool {\n+            matches!((self, rhs), (Self::A, Self::A) | (Self::B, Self::B))\n+        }\n+    }\n+    impl Eq for Bar {}\n+\n+    let x = Bar::A;\n+    if let Bar::A = x { println!() }\n+\n+    // issue #7038\n+    struct X;\n+    let x = Some(X);\n+    if let None = x { println!() };\n+}\n+\n+// See: issue #8282\n+fn ranges() {\n+    enum E {\n+        V,\n+    }\n+    let x = (Some(E::V), Some(42));\n+\n+    // Don't lint, because the `E` enum can be extended with additional fields later. Thus, the\n+    // proposed replacement to `if let Some(E::V)` may hide non-exhaustive warnings that appeared\n+    // because of `match` construction.\n+    match x {\n+        (Some(E::V), _) => {},\n+        (None, _) => {},\n+    }\n+\n+    // lint\n+    if let (Some(_), _) = x {}\n+\n+    // lint\n+    if let (Some(E::V), _) = x { todo!() }\n+\n+    // lint\n+    if let (.., Some(E::V), _) = (Some(42), Some(E::V), Some(42)) {}\n+\n+    // Don't lint, see above.\n+    match (Some(E::V), Some(E::V), Some(E::V)) {\n+        (.., Some(E::V), _) => {},\n+        (.., None, _) => {},\n+    }\n+\n+    // Don't lint, see above.\n+    match (Some(E::V), Some(E::V), Some(E::V)) {\n+        (Some(E::V), ..) => {},\n+        (None, ..) => {},\n+    }\n+\n+    // Don't lint, see above.\n+    match (Some(E::V), Some(E::V), Some(E::V)) {\n+        (_, Some(E::V), ..) => {},\n+        (_, None, ..) => {},\n+    }\n+}\n+\n+fn skip_type_aliases() {\n+    enum OptionEx {\n+        Some(i32),\n+        None,\n+    }\n+    enum ResultEx {\n+        Err(i32),\n+        Ok(i32),\n+    }\n+\n+    use OptionEx::{None, Some};\n+    use ResultEx::{Err, Ok};\n+\n+    // don't lint\n+    match Err(42) {\n+        Ok(_) => dummy(),\n+        Err(_) => (),\n+    };\n+\n+    // don't lint\n+    match Some(1i32) {\n+        Some(_) => dummy(),\n+        None => (),\n+    };\n+}\n+\n+macro_rules! single_match {\n+    ($num:literal) => {\n+        match $num {\n+            15 => println!(\"15\"),\n+            _ => (),\n+        }\n+    };\n+}\n+\n+fn main() {\n+    single_match!(5);\n+\n+    // Don't lint\n+    let _ = match Some(0) {\n+        #[cfg(feature = \"foo\")]\n+        Some(10) => 11,\n+        Some(x) => x,\n+        _ => 0,\n+    };\n+}\n+\n+fn issue_10808(bar: Option<i32>) {\n+    if let Some(v) = bar { unsafe {\n+        let r = &v as *const i32;\n+        println!(\"{}\", *r);\n+    } }\n+\n+    if let Some(v) = bar {\n+        unsafe {\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        }\n+    }\n+}"}, {"sha": "8d0ab5b99ad51e84e8b9066d277acf3cc12b3c9e", "filename": "src/tools/clippy/tests/ui/single_match.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,6 +1,6 @@\n+//@run-rustfix\n #![warn(clippy::single_match)]\n-#![allow(clippy::uninlined_format_args)]\n-\n+#![allow(unused, clippy::uninlined_format_args, clippy::redundant_pattern_matching)]\n fn dummy() {}\n \n fn single_match() {\n@@ -244,3 +244,24 @@ fn main() {\n         _ => 0,\n     };\n }\n+\n+fn issue_10808(bar: Option<i32>) {\n+    match bar {\n+        Some(v) => unsafe {\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+        _ => {},\n+    }\n+\n+    match bar {\n+        #[rustfmt::skip]\n+        Some(v) => {\n+            unsafe {\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+        _ => {},\n+    }\n+}"}, {"sha": "dad66e2ab2ec3aa7c352945efc993691362fdf86", "filename": "src/tools/clippy/tests/ui/single_match.stderr", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -155,5 +155,47 @@ LL | |         (..) => {},\n LL | |     }\n    | |_____^ help: try this: `if let (.., Some(E::V), _) = (Some(42), Some(E::V), Some(42)) {}`\n \n-error: aborting due to 16 previous errors\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:249:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => unsafe {\n+LL | |             let r = &v as *const i32;\n+LL | |             println!(\"{}\", *r);\n+LL | |         },\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar { unsafe {\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } }\n+   |\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:257:5\n+   |\n+LL | /     match bar {\n+LL | |         #[rustfmt::skip]\n+LL | |         Some(v) => {\n+LL | |             unsafe {\n+...  |\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar {\n+LL +         unsafe {\n+LL +             let r = &v as *const i32;\n+LL +             println!(\"{}\", *r);\n+LL +         }\n+LL +     }\n+   |\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "f88498655a41850601deca91cf2fd026c7f2f278", "filename": "src/tools/clippy/tests/ui/single_match_else.fixed", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -0,0 +1,173 @@\n+//@run-rustfix\n+//@aux-build: proc_macros.rs\n+#![warn(clippy::single_match_else)]\n+#![allow(unused, clippy::needless_return, clippy::no_effect, clippy::uninlined_format_args)]\n+extern crate proc_macros;\n+use proc_macros::with_span;\n+\n+enum ExprNode {\n+    ExprAddrOf,\n+    Butterflies,\n+    Unicorns,\n+}\n+\n+static NODE: ExprNode = ExprNode::Unicorns;\n+\n+fn unwrap_addr() -> Option<&'static ExprNode> {\n+    let _ = if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else {\n+        let x = 5;\n+        None\n+    };\n+\n+    // Don't lint\n+    with_span!(span match ExprNode::Butterflies {\n+        ExprNode::ExprAddrOf => Some(&NODE),\n+        _ => {\n+            let x = 5;\n+            None\n+        },\n+    })\n+}\n+\n+macro_rules! unwrap_addr {\n+    ($expression:expr) => {\n+        match $expression {\n+            ExprNode::ExprAddrOf => Some(&NODE),\n+            _ => {\n+                let x = 5;\n+                None\n+            },\n+        }\n+    };\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    unwrap_addr!(ExprNode::Unicorns);\n+\n+    //\n+    // don't lint single exprs/statements\n+    //\n+\n+    // don't lint here\n+    match Some(1) {\n+        Some(a) => println!(\"${:?}\", a),\n+        None => return,\n+    }\n+\n+    // don't lint here\n+    match Some(1) {\n+        Some(a) => println!(\"${:?}\", a),\n+        None => {\n+            return\n+        },\n+    }\n+\n+    // don't lint here\n+    match Some(1) {\n+        Some(a) => println!(\"${:?}\", a),\n+        None => {\n+            return;\n+        },\n+    }\n+\n+    //\n+    // lint multiple exprs/statements \"else\" blocks\n+    //\n+\n+    // lint here\n+    if let Some(a) = Some(1) { println!(\"${:?}\", a) } else {\n+        println!(\"else block\");\n+        return\n+    }\n+\n+    // lint here\n+    if let Some(a) = Some(1) { println!(\"${:?}\", a) } else {\n+        println!(\"else block\");\n+        return;\n+    }\n+\n+    // lint here\n+    use std::convert::Infallible;\n+    if let Ok(a) = Result::<i32, Infallible>::Ok(1) { println!(\"${:?}\", a) } else {\n+        println!(\"else block\");\n+        return;\n+    }\n+\n+    use std::borrow::Cow;\n+    if let Cow::Owned(a) = Cow::from(\"moo\") { println!(\"${:?}\", a) } else {\n+        println!(\"else block\");\n+        return;\n+    }\n+}\n+\n+fn issue_10808(bar: Option<i32>) {\n+    if let Some(v) = bar { unsafe {\n+        let r = &v as *const i32;\n+        println!(\"{}\", *r);\n+    } } else {\n+        println!(\"None1\");\n+        println!(\"None2\");\n+    }\n+\n+    if let Some(v) = bar {\n+        println!(\"Some\");\n+        println!(\"{v}\");\n+    } else { unsafe {\n+        let v = 0;\n+        let r = &v as *const i32;\n+        println!(\"{}\", *r);\n+    } }\n+\n+    if let Some(v) = bar { unsafe {\n+        let r = &v as *const i32;\n+        println!(\"{}\", *r);\n+    } } else { unsafe {\n+        let v = 0;\n+        let r = &v as *const i32;\n+        println!(\"{}\", *r);\n+    } }\n+\n+    if let Some(v) = bar {\n+        unsafe {\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        }\n+    } else {\n+        println!(\"None\");\n+        println!(\"None\");\n+    }\n+\n+    match bar {\n+        Some(v) => {\n+            println!(\"Some\");\n+            println!(\"{v}\");\n+        },\n+        #[rustfmt::skip]\n+        None => {\n+            unsafe {\n+                let v = 0;\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+    }\n+\n+    match bar {\n+        #[rustfmt::skip]\n+        Some(v) => {\n+            unsafe {\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+        #[rustfmt::skip]\n+        None => {\n+            unsafe {\n+                let v = 0;\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+    }\n+}"}, {"sha": "b34b95539190cdbd4389364a6485e00afa3edc05", "filename": "src/tools/clippy/tests/ui/single_match_else.rs", "status": "modified", "additions": 86, "deletions": 2, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,7 +1,7 @@\n+//@run-rustfix\n //@aux-build: proc_macros.rs\n #![warn(clippy::single_match_else)]\n-#![allow(clippy::needless_return, clippy::no_effect, clippy::uninlined_format_args)]\n-\n+#![allow(unused, clippy::needless_return, clippy::no_effect, clippy::uninlined_format_args)]\n extern crate proc_macros;\n use proc_macros::with_span;\n \n@@ -115,3 +115,87 @@ fn main() {\n         }\n     }\n }\n+\n+fn issue_10808(bar: Option<i32>) {\n+    match bar {\n+        Some(v) => unsafe {\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+        None => {\n+            println!(\"None1\");\n+            println!(\"None2\");\n+        },\n+    }\n+\n+    match bar {\n+        Some(v) => {\n+            println!(\"Some\");\n+            println!(\"{v}\");\n+        },\n+        None => unsafe {\n+            let v = 0;\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+    }\n+\n+    match bar {\n+        Some(v) => unsafe {\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+        None => unsafe {\n+            let v = 0;\n+            let r = &v as *const i32;\n+            println!(\"{}\", *r);\n+        },\n+    }\n+\n+    match bar {\n+        #[rustfmt::skip]\n+        Some(v) => {\n+            unsafe {\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+        None => {\n+            println!(\"None\");\n+            println!(\"None\");\n+        },\n+    }\n+\n+    match bar {\n+        Some(v) => {\n+            println!(\"Some\");\n+            println!(\"{v}\");\n+        },\n+        #[rustfmt::skip]\n+        None => {\n+            unsafe {\n+                let v = 0;\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+    }\n+\n+    match bar {\n+        #[rustfmt::skip]\n+        Some(v) => {\n+            unsafe {\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+        #[rustfmt::skip]\n+        None => {\n+            unsafe {\n+                let v = 0;\n+                let r = &v as *const i32;\n+                println!(\"{}\", *r);\n+            }\n+        },\n+    }\n+}"}, {"sha": "228236f3bb8e84723d79d270f15eefe2599a1491", "filename": "src/tools/clippy/tests/ui/single_match_else.stderr", "status": "modified", "additions": 97, "deletions": 1, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_match_else.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -100,5 +100,101 @@ LL +         return;\n LL +     }\n    |\n \n-error: aborting due to 5 previous errors\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:120:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => unsafe {\n+LL | |             let r = &v as *const i32;\n+LL | |             println!(\"{}\", *r);\n+...  |\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar { unsafe {\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } } else {\n+LL +         println!(\"None1\");\n+LL +         println!(\"None2\");\n+LL +     }\n+   |\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:131:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => {\n+LL | |             println!(\"Some\");\n+LL | |             println!(\"{v}\");\n+...  |\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar {\n+LL +         println!(\"Some\");\n+LL +         println!(\"{v}\");\n+LL +     } else { unsafe {\n+LL +         let v = 0;\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } }\n+   |\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:143:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => unsafe {\n+LL | |             let r = &v as *const i32;\n+LL | |             println!(\"{}\", *r);\n+...  |\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar { unsafe {\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } } else { unsafe {\n+LL +         let v = 0;\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } }\n+   |\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:155:5\n+   |\n+LL | /     match bar {\n+LL | |         #[rustfmt::skip]\n+LL | |         Some(v) => {\n+LL | |             unsafe {\n+...  |\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar {\n+LL +         unsafe {\n+LL +             let r = &v as *const i32;\n+LL +             println!(\"{}\", *r);\n+LL +         }\n+LL +     } else {\n+LL +         println!(\"None\");\n+LL +         println!(\"None\");\n+LL +     }\n+   |\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "4823d9092089b291953261da687cc0b8bce81515", "filename": "src/tools/clippy/tests/ui/suspicious_else_formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_else_formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_else_formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_else_formatting.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,7 +1,7 @@\n //@aux-build:proc_macro_suspicious_else_formatting.rs\n \n #![warn(clippy::suspicious_else_formatting)]\n-#![allow(clippy::if_same_then_else, clippy::let_unit_value)]\n+#![allow(clippy::if_same_then_else, clippy::let_unit_value, clippy::needless_else)]\n \n extern crate proc_macro_suspicious_else_formatting;\n use proc_macro_suspicious_else_formatting::DeriveBadSpan;"}, {"sha": "bfaa5dadfa59ee2a56e259d84a5bf2ef41dd9584", "filename": "src/tools/clippy/tests/ui/unused_async.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_async.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -3,6 +3,26 @@\n use std::future::Future;\n use std::pin::Pin;\n \n+mod issue10800 {\n+    #![allow(dead_code, unused_must_use, clippy::no_effect)]\n+\n+    use std::future::ready;\n+\n+    async fn async_block_await() {\n+        async {\n+            ready(()).await;\n+        };\n+    }\n+\n+    async fn normal_block_await() {\n+        {\n+            {\n+                ready(()).await;\n+            }\n+        }\n+    }\n+}\n+\n async fn foo() -> i32 {\n     4\n }"}, {"sha": "8ac2066a6b24dd62619491e7ee8ec6547935a005", "filename": "src/tools/clippy/tests/ui/unused_async.stderr", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_async.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -1,16 +1,33 @@\n error: unused `async` for function with no await statements\n-  --> $DIR/unused_async.rs:6:1\n+  --> $DIR/unused_async.rs:11:5\n+   |\n+LL | /     async fn async_block_await() {\n+LL | |         async {\n+LL | |             ready(()).await;\n+LL | |         };\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider removing the `async` from this function\n+note: `await` used in an async block, which does not require the enclosing function to be `async`\n+  --> $DIR/unused_async.rs:13:23\n+   |\n+LL |             ready(()).await;\n+   |                       ^^^^^\n+   = note: `-D clippy::unused-async` implied by `-D warnings`\n+\n+error: unused `async` for function with no await statements\n+  --> $DIR/unused_async.rs:26:1\n    |\n LL | / async fn foo() -> i32 {\n LL | |     4\n LL | | }\n    | |_^\n    |\n    = help: consider removing the `async` from this function\n-   = note: `-D clippy::unused-async` implied by `-D warnings`\n \n error: unused `async` for function with no await statements\n-  --> $DIR/unused_async.rs:17:5\n+  --> $DIR/unused_async.rs:37:5\n    |\n LL | /     async fn unused(&self) -> i32 {\n LL | |         1\n@@ -19,5 +36,5 @@ LL | |     }\n    |\n    = help: consider removing the `async` from this function\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "733bbcfbcefab5e9db422f0cd7b8091fe8919ffb", "filename": "src/tools/clippy/tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.fixed?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -24,6 +24,7 @@ use wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar;\n use wildcard_imports_helper::{ExternA, extern_foo};\n \n use std::io::prelude::*;\n+use wildcard_imports_helper::extern_prelude::v1::*;\n use wildcard_imports_helper::prelude::v1::*;\n \n struct ReadFoo;\n@@ -81,6 +82,7 @@ fn main() {\n     let _ = inner_struct_mod::C;\n     let _ = ExternA;\n     let _ = PreludeModAnywhere;\n+    let _ = ExternPreludeModAnywhere;\n \n     double_struct_import_test!();\n     double_struct_import_test!();"}, {"sha": "4acdd374bdeca85d08188866264009ca3929fe04", "filename": "src/tools/clippy/tests/ui/wildcard_imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.rs?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -24,6 +24,7 @@ use wildcard_imports_helper::inner::inner_for_self_import::*;\n use wildcard_imports_helper::*;\n \n use std::io::prelude::*;\n+use wildcard_imports_helper::extern_prelude::v1::*;\n use wildcard_imports_helper::prelude::v1::*;\n \n struct ReadFoo;\n@@ -81,6 +82,7 @@ fn main() {\n     let _ = inner_struct_mod::C;\n     let _ = ExternA;\n     let _ = PreludeModAnywhere;\n+    let _ = ExternPreludeModAnywhere;\n \n     double_struct_import_test!();\n     double_struct_import_test!();"}, {"sha": "235be2d57081b353228bd9211fc22ab134864c0e", "filename": "src/tools/clippy/tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports.stderr?ref=0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "patch": "@@ -37,93 +37,93 @@ LL | use wildcard_imports_helper::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:95:13\n+  --> $DIR/wildcard_imports.rs:97:13\n    |\n LL |         use crate::fn_mod::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:101:75\n+  --> $DIR/wildcard_imports.rs:103:75\n    |\n LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n    |                                                                           ^ help: try: `inner_extern_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:102:13\n+  --> $DIR/wildcard_imports.rs:104:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:113:20\n+  --> $DIR/wildcard_imports.rs:115:20\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                    ^^^^^^^^ help: try: `inner::inner_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:113:30\n+  --> $DIR/wildcard_imports.rs:115:30\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:120:13\n+  --> $DIR/wildcard_imports.rs:122:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:149:9\n+  --> $DIR/wildcard_imports.rs:151:9\n    |\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:158:9\n+  --> $DIR/wildcard_imports.rs:160:9\n    |\n LL |     use crate:: in_fn_test::  * ;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:159:9\n+  --> $DIR/wildcard_imports.rs:161:9\n    |\n LL |       use crate:: fn_mod::\n    |  _________^\n LL | |         *;\n    | |_________^ help: try: `crate:: fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:170:13\n+  --> $DIR/wildcard_imports.rs:172:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:205:17\n+  --> $DIR/wildcard_imports.rs:207:17\n    |\n LL |             use super::*;\n    |                 ^^^^^^^^ help: try: `super::insidefoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:213:13\n+  --> $DIR/wildcard_imports.rs:215:13\n    |\n LL |         use super_imports::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:222:17\n+  --> $DIR/wildcard_imports.rs:224:17\n    |\n LL |             use super::super::*;\n    |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:231:13\n+  --> $DIR/wildcard_imports.rs:233:13\n    |\n LL |         use super::super::super_imports::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:239:13\n+  --> $DIR/wildcard_imports.rs:241:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`"}]}