{"sha": "b6cf070eb4c228c146ca9971cddeb034084f88de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Y2YwNzBlYjRjMjI4YzE0NmNhOTk3MWNkZGViMDM0MDg0Zjg4ZGU=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-02-21T15:20:40Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-03-14T21:07:59Z"}, "message": "Attempt to deal with nested closures properly", "tree": {"sha": "25ce055aafb0d277796edcb8e62568f215080a0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ce055aafb0d277796edcb8e62568f215080a0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6cf070eb4c228c146ca9971cddeb034084f88de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cf070eb4c228c146ca9971cddeb034084f88de", "html_url": "https://github.com/rust-lang/rust/commit/b6cf070eb4c228c146ca9971cddeb034084f88de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6cf070eb4c228c146ca9971cddeb034084f88de/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4f8729c892882b16d7ce66f287818b6a66fe200", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f8729c892882b16d7ce66f287818b6a66fe200", "html_url": "https://github.com/rust-lang/rust/commit/d4f8729c892882b16d7ce66f287818b6a66fe200"}], "stats": {"total": 575, "additions": 560, "deletions": 15}, "files": [{"sha": "932f07ff1bd1bfddbe09a49ba431209b51e1aa06", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -1153,7 +1153,6 @@ struct InferBorrowKind<'a, 'tcx> {\n     /// Place { V1, [ProjectionKind::Field(Index=1, Variant=0)] } : CaptureKind { E2, MutableBorrow }\n     /// ```\n     capture_information: InferredCaptureInformation<'tcx>,\n-    // [FIXME] RFC2229 Change Vec to FxHashSet\n     fake_reads: FxHashSet<Place<'tcx>>, // these need to be fake read.\n }\n \n@@ -1416,9 +1415,9 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n-    fn fake_read(&mut self, place: PlaceWithHirId<'tcx>) {\n-        if let PlaceBase::Upvar(_) = place.place.base {\n-            self.fake_reads.insert(place.place);\n+    fn fake_read(&mut self, place: Place<'tcx>) {\n+        if let PlaceBase::Upvar(_) = place.base {\n+            self.fake_reads.insert(place);\n         }\n     }\n "}, {"sha": "ad39b93c067ee232a44eaa5f762dcd381595b1f6", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -5,7 +5,7 @@\n pub use self::ConsumeMode::*;\n \n // Export these here so that Clippy can use them.\n-pub use rustc_middle::hir::place::{PlaceBase, PlaceWithHirId, Projection};\n+pub use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId, Projection};\n \n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -54,7 +54,7 @@ pub trait Delegate<'tcx> {\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n \n     // [FIXME] RFC2229 This should also affect clippy ref: https://github.com/sexxi-goose/rust/pull/27\n-    fn fake_read(&mut self, place: PlaceWithHirId<'tcx>);\n+    fn fake_read(&mut self, place: Place<'tcx>);\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -558,7 +558,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     fn walk_pat(&mut self, discr_place: &PlaceWithHirId<'tcx>, pat: &hir::Pat<'_>) {\n         debug!(\"walk_pat(discr_place={:?}, pat={:?})\", discr_place, pat);\n \n-        self.delegate.fake_read(discr_place.clone());\n+        self.delegate.fake_read(discr_place.place.clone());\n \n         let tcx = self.tcx();\n         let ExprUseVisitor { ref mc, body_owner: _, ref mut delegate } = *self;\n@@ -620,8 +620,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// - When reporting the Place back to the Delegate, ensure that the UpvarId uses the enclosing\n     /// closure as the DefId.\n     fn walk_captures(&mut self, closure_expr: &hir::Expr<'_>) {\n-        debug!(\"walk_captures({:?})\", closure_expr);\n-\n         // Over here we walk a closure that is nested inside the current body\n         // If the current body is a closure, then we also want to report back any fake reads,\n         // starting off of variables that are captured by our parent as well.\n@@ -635,6 +633,32 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             ty::Closure(..) | ty::Generator(..)\n         );\n \n+        // [FIXME] RFC2229 Closures within closures don't work\n+        if let Some(fake_reads) = self.mc.typeck_results.closure_fake_reads.get(&closure_def_id) {\n+            for fake_read in fake_reads.iter() {\n+                // Use this as a reference for if we should promote the fake read\n+                match fake_read.base {\n+                    PlaceBase::Upvar(upvar_id) => {\n+                        if upvars.map_or(body_owner_is_closure, |upvars| {\n+                            !upvars.contains_key(&upvar_id.var_path.hir_id)\n+                        }) {\n+                            // The nested closure might be capturing the current (enclosing) closure's local variables.\n+                            // We check if the root variable is ever mentioned within the enclosing closure, if not\n+                            // then for the current body (if it's a closure) these aren't captures, we will ignore them.\n+                            continue;\n+                        }\n+                    }\n+                    _ => {\n+                        bug!(\n+                            \"Do not know how to get HirId out of Rvalue and StaticItem {:?}\",\n+                            fake_read.base\n+                        );\n+                    }\n+                };\n+                self.delegate.fake_read(fake_read.clone());\n+            }\n+        }\n+\n         if let Some(min_captures) = self.mc.typeck_results.closure_min_captures.get(&closure_def_id)\n         {\n             for (var_hir_id, min_list) in min_captures.iter() {\n@@ -664,12 +688,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         place.projections.clone(),\n                     );\n \n-                    // [FIXME] RFC2229 We want to created another loop that iterates mc.typeck_results.fake_reads()\n-                    // [FIXME] RFC2229 Add tests for nested closures\n-                    if body_owner_is_closure {\n-                        self.delegate.fake_read(place_with_id.clone());\n-                    }\n-\n                     match capture_info.capture_kind {\n                         ty::UpvarCapture::ByValue(_) => {\n                             let mode = copy_or_move(&self.mc, &place_with_id);"}, {"sha": "db067b6c9bca376bef9d8ef569ed7278fe1b5a4c", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.rs?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,21 @@\n+#![feature(capture_disjoint_fields)]\n+#![feature(rustc_attrs)]\n+\n+fn main() {\n+    let _z = 9;\n+    let t = (String::from(\"Hello\"), String::from(\"World\"));\n+    let g = (String::from(\"Mr\"), String::from(\"Goose\"));\n+\n+    let a = #[rustc_capture_analysis] || {\n+        let (_, g2) = g;\n+        println!(\"{}\", g2);\n+        let c = #[rustc_capture_analysis] ||  {\n+            let (_, t2) = t;\n+            println!(\"{}\", t2);\n+        };\n+\n+        c();\n+    };\n+\n+    a();\n+}"}, {"sha": "c9a1a32fc579b929e200f0a14397bc4e493060e5", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,110 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:9:13\n+   |\n+LL |     let a = #[rustc_capture_analysis] || {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:12:17\n+   |\n+LL |         let c = #[rustc_capture_analysis] ||  {\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: First Pass analysis includes:\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:12:43\n+   |\n+LL |           let c = #[rustc_capture_analysis] ||  {\n+   |  ___________________________________________^\n+LL | |             let (_, t2) = t;\n+LL | |             println!(\"{}\", t2);\n+LL | |         };\n+   | |_________^\n+   |\n+note: Capturing t[(1, 0)] -> ByValue\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:13:27\n+   |\n+LL |             let (_, t2) = t;\n+   |                           ^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:12:43\n+   |\n+LL |           let c = #[rustc_capture_analysis] ||  {\n+   |  ___________________________________________^\n+LL | |             let (_, t2) = t;\n+LL | |             println!(\"{}\", t2);\n+LL | |         };\n+   | |_________^\n+   |\n+note: Min Capture t[(1, 0)] -> ByValue\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:13:27\n+   |\n+LL |             let (_, t2) = t;\n+   |                           ^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:9:39\n+   |\n+LL |       let a = #[rustc_capture_analysis] || {\n+   |  _______________________________________^\n+LL | |         let (_, g2) = g;\n+LL | |         println!(\"{}\", g2);\n+LL | |         let c = #[rustc_capture_analysis] ||  {\n+...  |\n+LL | |         c();\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing g[(1, 0)] -> ByValue\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:10:23\n+   |\n+LL |         let (_, g2) = g;\n+   |                       ^\n+note: Capturing t[(1, 0)] -> ByValue\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:13:27\n+   |\n+LL |             let (_, t2) = t;\n+   |                           ^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:9:39\n+   |\n+LL |       let a = #[rustc_capture_analysis] || {\n+   |  _______________________________________^\n+LL | |         let (_, g2) = g;\n+LL | |         println!(\"{}\", g2);\n+LL | |         let c = #[rustc_capture_analysis] ||  {\n+...  |\n+LL | |         c();\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture g[(1, 0)] -> ByValue\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:10:23\n+   |\n+LL |         let (_, g2) = g;\n+   |                       ^\n+note: Min Capture t[(1, 0)] -> ByValue\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:13:27\n+   |\n+LL |             let (_, t2) = t;\n+   |                           ^\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "757b506fd6edeacb09ed33b29d2f2f22ece93fdf", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure_patterns-1.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns-1.rs?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,118 @@\n+//check-pass\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+#![warn(unused)]\n+\n+struct Point {\n+    x: u32,\n+    y: u32,\n+}\n+\n+fn test1() {\n+    let _z = 9;\n+    let t = (String::from(\"Hello\"), String::from(\"World\"));\n+\n+    let c = ||  {\n+        let (t1, t2) = t;\n+        println!(\"{} {}\", t1, t2);\n+    };\n+\n+    c();\n+}\n+\n+fn test2() {\n+    let _z = 9;\n+    let t = (String::from(\"Hello\"), String::from(\"World\"));\n+\n+    let c = ||  {\n+        let (t1, _) = t;\n+        println!(\"{}\", t1);\n+    };\n+\n+    c();\n+}\n+\n+fn test3() {\n+    let _z = 9;\n+    let t = (String::from(\"Hello\"), String::from(\"World\"));\n+\n+    let c = ||  {\n+        let (_, t2) = t;\n+        println!(\"{}\", t2);\n+    };\n+\n+    c();\n+}\n+\n+fn test4() {\n+    let _z = 9;\n+    let t = (String::from(\"Hello\"), String::from(\"World\"));\n+    //~^ WARN unused variable: `t`\n+\n+    let c = ||  {\n+        let (_, _) = t;\n+    };\n+\n+    c();\n+}\n+\n+fn test5() {\n+    let _z = 9;\n+    let t = (String::new(), String::new());\n+    let _c = ||  {\n+        let _a = match t {\n+            (t1, _) => t1,\n+        };\n+    };\n+}\n+\n+fn test6() {\n+    let _z = 9;\n+    let t = (String::new(), String::new());\n+    let _c = ||  {\n+        let _a = match t {\n+            (_, t2) => t2,\n+        };\n+    };\n+}\n+\n+fn test7() {\n+    let x = 0;\n+    //~^ WARN unused variable: `x`\n+    let tup = (1, 2);\n+    //~^ WARN unused variable: `tup`\n+    let p = Point { x: 10, y: 20 };\n+\n+    let c = || {\n+        let _ = x;\n+        let Point { x, y } = p; // 1\n+        //~^ WARN unused variable: `x`\n+        println!(\"{}\", y);\n+        let (_, _) = tup; // 2\n+    };\n+\n+    c();\n+}\n+\n+fn test8() {\n+    let _z = 9;\n+    let t = (String::from(\"Hello\"), String::from(\"World\"));\n+\n+    let c = ||  {\n+        let (_, t) = t;\n+        println!(\"{}\", t);\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    test1();\n+    test2();\n+    test3();\n+    test4();\n+    test5();\n+    test6();\n+    test7();\n+    test8();\n+}"}, {"sha": "1ae64eb83ef78eeb350f0b51f832785351ed6e2d", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure_patterns-1.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns-1.stderr?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,42 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/destructure_patterns-1.rs:2:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: unused variable: `t`\n+  --> $DIR/destructure_patterns-1.rs:49:9\n+   |\n+LL |     let t = (String::from(\"Hello\"), String::from(\"World\"));\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_t`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/destructure_patterns-1.rs:4:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n+\n+warning: unused variable: `x`\n+  --> $DIR/destructure_patterns-1.rs:88:21\n+   |\n+LL |         let Point { x, y } = p; // 1\n+   |                     ^ help: try ignoring the field: `x: _`\n+\n+warning: unused variable: `x`\n+  --> $DIR/destructure_patterns-1.rs:80:9\n+   |\n+LL |     let x = 0;\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n+\n+warning: unused variable: `tup`\n+  --> $DIR/destructure_patterns-1.rs:82:9\n+   |\n+LL |     let tup = (1, 2);\n+   |         ^^^ help: if this is intentional, prefix it with an underscore: `_tup`\n+\n+warning: 5 warnings emitted\n+"}, {"sha": "6f958bb18c38794062a942a857b79e7ae4a78190", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure_patterns.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,52 @@\n+#![feature(capture_disjoint_fields)]\n+#![feature(rustc_attrs)]\n+\n+struct S {\n+    a: String,\n+    b: String,\n+}\n+\n+fn main() {\n+    let t = (String::new(), String::new());\n+\n+    let s = S {\n+        a: String::new(),\n+        b: String::new(),\n+    };\n+\n+    let c = #[rustc_capture_analysis] || {\n+        let (t1, t2) = t;\n+    };\n+\n+\n+    // MIR Build\n+    //\n+    // Create place for the initalizer in let which is `t`\n+    //\n+    // I'm reading Field 1 from `t`, so apply Field projections;\n+    //\n+    // new place -> t[1]\n+    //\n+    // I'm reading Field 2 from `t`, so apply Field projections;\n+    //\n+    // new place -> t[2]\n+    //\n+    // New\n+    // ---------\n+    //\n+    // I'm building something starting at `t`\n+    //\n+    // I read field 1 from `t`\n+    //\n+    // I need to use `t[1]`, therefore the place must be constructable\n+    //\n+    // Find the capture index for `t[1]` for this closure.\n+    //\n+    // I read field 2 from `t`\n+    //\n+    // I need to use `t[2]`, therefore the place must be constructable\n+    //\n+    // Find the capture index for `t[2]` for this closure.\n+\n+    c();\n+}"}, {"sha": "1ee5d2abf133a81645196c5455feb7ecde7a53e2", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure_patterns.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,61 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/destructure_patterns.rs:17:13\n+   |\n+LL |     let c = #[rustc_capture_analysis] || {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/destructure_patterns.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: First Pass analysis includes:\n+  --> $DIR/destructure_patterns.rs:17:39\n+   |\n+LL |       let c = #[rustc_capture_analysis] || {\n+   |  _______________________________________^\n+LL | |         let (t1, t2) = t;\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:18:24\n+   |\n+LL |         let (t1, t2) = t;\n+   |                        ^\n+note: Capturing t[(1, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:18:24\n+   |\n+LL |         let (t1, t2) = t;\n+   |                        ^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/destructure_patterns.rs:17:39\n+   |\n+LL |       let c = #[rustc_capture_analysis] || {\n+   |  _______________________________________^\n+LL | |         let (t1, t2) = t;\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:18:24\n+   |\n+LL |         let (t1, t2) = t;\n+   |                        ^\n+note: Min Capture t[(1, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:18:24\n+   |\n+LL |         let (t1, t2) = t;\n+   |                        ^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1880351610176f54f7829f25eec50ef4f5d2cf09", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/no_capture_with_wildcard_match.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fno_capture_with_wildcard_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fno_capture_with_wildcard_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fno_capture_with_wildcard_match.rs?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,12 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+fn main() {\n+    let foo = [1, 2, 3];\n+    let c = #[rustc_capture_analysis] || {\n+        //~^ ERROR: attributes on expressions are experimental\n+        //~| ERROR: First Pass analysis includes:\n+        match foo { _ => () };\n+    };\n+}"}, {"sha": "e2e825fe9425ef60528f2a2b2bcbe48e2d98386b", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/no_capture_with_wildcard_match.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fno_capture_with_wildcard_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fno_capture_with_wildcard_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fno_capture_with_wildcard_match.stderr?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,32 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/no_capture_with_wildcard_match.rs:7:13\n+   |\n+LL |     let c = #[rustc_capture_analysis] || {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/no_capture_with_wildcard_match.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: First Pass analysis includes:\n+  --> $DIR/no_capture_with_wildcard_match.rs:7:39\n+   |\n+LL |       let c = #[rustc_capture_analysis] || {\n+   |  _______________________________________^\n+LL | |\n+LL | |\n+LL | |         match foo { _ => () };\n+LL | |     };\n+   | |_____^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9757860fb4c7f2bb273a6bf950125b07e1845d2e", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/struct_update_syntax.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct_update_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct_update_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct_update_syntax.rs?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,23 @@\n+#![feature(capture_disjoint_fields)]\n+#![feature(rustc_attrs)]\n+\n+struct S {\n+    a: String,\n+    b: String,\n+}\n+\n+fn main() {\n+    let s = S {\n+        a: String::new(),\n+        b: String::new(),\n+    };\n+\n+    let c = #[rustc_capture_analysis] || {\n+        let s2 = S {\n+            a: format!(\"New a\"),\n+            ..s\n+        };\n+    };\n+\n+    c();\n+}"}, {"sha": "15d8040c46c51604d1f050091d3a037d2836e38e", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/struct_update_syntax.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct_update_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf070eb4c228c146ca9971cddeb034084f88de/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct_update_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct_update_syntax.stderr?ref=b6cf070eb4c228c146ca9971cddeb034084f88de", "patch": "@@ -0,0 +1,57 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/struct_update_syntax.rs:15:13\n+   |\n+LL |     let c = #[rustc_capture_analysis] || {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/struct_update_syntax.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: First Pass analysis includes:\n+  --> $DIR/struct_update_syntax.rs:15:39\n+   |\n+LL |       let c = #[rustc_capture_analysis] || {\n+   |  _______________________________________^\n+LL | |         let s2 = S {\n+LL | |             a: format!(\"New a\"),\n+LL | |             ..s\n+LL | |         };\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing s[(1, 0)] -> ByValue\n+  --> $DIR/struct_update_syntax.rs:18:15\n+   |\n+LL |             ..s\n+   |               ^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/struct_update_syntax.rs:15:39\n+   |\n+LL |       let c = #[rustc_capture_analysis] || {\n+   |  _______________________________________^\n+LL | |         let s2 = S {\n+LL | |             a: format!(\"New a\"),\n+LL | |             ..s\n+LL | |         };\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture s[(1, 0)] -> ByValue\n+  --> $DIR/struct_update_syntax.rs:18:15\n+   |\n+LL |             ..s\n+   |               ^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}]}