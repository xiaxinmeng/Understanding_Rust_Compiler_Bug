{"sha": "3eb1c43720fdd3fb1c9284dde5368832fbfe52bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYjFjNDM3MjBmZGQzZmIxYzkyODRkZGU1MzY4ODMyZmJmZTUyYmM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-04-20T19:31:32Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-04-20T19:31:32Z"}, "message": "Ignore -Zprofile when building compiler_builtins", "tree": {"sha": "ebe918f50cb8d3645027acfb04132d00b49fab58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe918f50cb8d3645027acfb04132d00b49fab58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb1c43720fdd3fb1c9284dde5368832fbfe52bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb1c43720fdd3fb1c9284dde5368832fbfe52bc", "html_url": "https://github.com/rust-lang/rust/commit/3eb1c43720fdd3fb1c9284dde5368832fbfe52bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb1c43720fdd3fb1c9284dde5368832fbfe52bc/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d67f576b56e8fc98a31123e5963f8d00e40611c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d67f576b56e8fc98a31123e5963f8d00e40611c", "html_url": "https://github.com/rust-lang/rust/commit/8d67f576b56e8fc98a31123e5963f8d00e40611c"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "cf6c581afc98a9ff37312dd9a8f236c8be22aadb", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3eb1c43720fdd3fb1c9284dde5368832fbfe52bc/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb1c43720fdd3fb1c9284dde5368832fbfe52bc/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=3eb1c43720fdd3fb1c9284dde5368832fbfe52bc", "patch": "@@ -119,7 +119,12 @@ pub struct ModuleConfig {\n }\n \n impl ModuleConfig {\n-    fn new(kind: ModuleKind, sess: &Session, no_builtins: bool) -> ModuleConfig {\n+    fn new(\n+        kind: ModuleKind,\n+        sess: &Session,\n+        no_builtins: bool,\n+        is_compiler_builtins: bool,\n+    ) -> ModuleConfig {\n         // If it's a regular module, use `$regular`, otherwise use `$other`.\n         // `$regular` and `$other` are evaluated lazily.\n         macro_rules! if_regular {\n@@ -160,7 +165,10 @@ impl ModuleConfig {\n             passes: if_regular!(\n                 {\n                     let mut passes = sess.opts.cg.passes.clone();\n-                    if sess.opts.debugging_opts.profile {\n+                    // compiler_builtins overrides the codegen-units settings,\n+                    // which is incompatible with -Zprofile which requires that\n+                    // only a single codegen unit is used per crate.\n+                    if sess.opts.debugging_opts.profile && !is_compiler_builtins {\n                         passes.push(\"insert-gcov-profiling\".to_owned());\n                     }\n                     passes\n@@ -405,6 +413,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n     let no_builtins = attr::contains_name(&tcx.hir().krate().item.attrs, sym::no_builtins);\n+    let is_compiler_builtins =\n+        attr::contains_name(&tcx.hir().krate().item.attrs, sym::compiler_builtins);\n     let subsystem =\n         attr::first_attr_value_str_by_name(&tcx.hir().krate().item.attrs, sym::windows_subsystem);\n     let windows_subsystem = subsystem.map(|subsystem| {\n@@ -421,9 +431,12 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let linker_info = LinkerInfo::new(tcx);\n     let crate_info = CrateInfo::new(tcx);\n \n-    let regular_config = ModuleConfig::new(ModuleKind::Regular, sess, no_builtins);\n-    let metadata_config = ModuleConfig::new(ModuleKind::Metadata, sess, no_builtins);\n-    let allocator_config = ModuleConfig::new(ModuleKind::Allocator, sess, no_builtins);\n+    let regular_config =\n+        ModuleConfig::new(ModuleKind::Regular, sess, no_builtins, is_compiler_builtins);\n+    let metadata_config =\n+        ModuleConfig::new(ModuleKind::Metadata, sess, no_builtins, is_compiler_builtins);\n+    let allocator_config =\n+        ModuleConfig::new(ModuleKind::Allocator, sess, no_builtins, is_compiler_builtins);\n \n     let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n     let (codegen_worker_send, codegen_worker_receive) = channel();"}]}