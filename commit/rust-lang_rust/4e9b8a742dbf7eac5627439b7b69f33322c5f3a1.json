{"sha": "4e9b8a742dbf7eac5627439b7b69f33322c5f3a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlOWI4YTc0MmRiZjdlYWM1NjI3NDM5YjdiNjlmMzMzMjJjNWYzYTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T21:38:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` `IrMaps::num_live_nodes`", "tree": {"sha": "cecbaa94cab927276fc113db3671964b901499e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cecbaa94cab927276fc113db3671964b901499e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e9b8a742dbf7eac5627439b7b69f33322c5f3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9b8a742dbf7eac5627439b7b69f33322c5f3a1", "html_url": "https://github.com/rust-lang/rust/commit/4e9b8a742dbf7eac5627439b7b69f33322c5f3a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e9b8a742dbf7eac5627439b7b69f33322c5f3a1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73dee17fc787cbcf022c74ec17d00329ddfe223", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73dee17fc787cbcf022c74ec17d00329ddfe223", "html_url": "https://github.com/rust-lang/rust/commit/f73dee17fc787cbcf022c74ec17d00329ddfe223"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "f2eeb2994632c087afcf44cec26f63328070ec82", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e9b8a742dbf7eac5627439b7b69f33322c5f3a1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9b8a742dbf7eac5627439b7b69f33322c5f3a1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=4e9b8a742dbf7eac5627439b7b69f33322c5f3a1", "patch": "@@ -110,7 +110,7 @@ use middle::typeck;\n use middle::moves;\n \n use std::cast::transmute;\n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::hashmap::HashMap;\n use std::io;\n use std::str;\n@@ -245,7 +245,7 @@ struct IrMaps {\n     method_map: typeck::method_map,\n     capture_map: moves::CaptureMap,\n \n-    num_live_nodes: uint,\n+    num_live_nodes: Cell<uint>,\n     num_vars: uint,\n     live_node_map: HashMap<NodeId, LiveNode>,\n     variable_map: HashMap<NodeId, Variable>,\n@@ -262,7 +262,7 @@ fn IrMaps(tcx: ty::ctxt,\n         tcx: tcx,\n         method_map: method_map,\n         capture_map: capture_map,\n-        num_live_nodes: 0,\n+        num_live_nodes: Cell::new(0),\n         num_vars: 0,\n         live_node_map: HashMap::new(),\n         variable_map: HashMap::new(),\n@@ -274,9 +274,10 @@ fn IrMaps(tcx: ty::ctxt,\n \n impl IrMaps {\n     pub fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode {\n-        let ln = LiveNode(self.num_live_nodes);\n+        let num_live_nodes = self.num_live_nodes.get();\n+        let ln = LiveNode(num_live_nodes);\n         self.lnks.push(lnk);\n-        self.num_live_nodes += 1;\n+        self.num_live_nodes.set(num_live_nodes + 1);\n \n         debug!(\"{} is of kind {}\", ln.to_str(),\n                live_node_kind_to_str(lnk, self.tcx));\n@@ -601,8 +602,9 @@ fn Liveness(ir: @mut IrMaps, specials: Specials) -> Liveness {\n         ir: ir,\n         tcx: ir.tcx,\n         s: specials,\n-        successors: @mut vec::from_elem(ir.num_live_nodes, invalid_node()),\n-        users: @mut vec::from_elem(ir.num_live_nodes * ir.num_vars,\n+        successors: @mut vec::from_elem(ir.num_live_nodes.get(),\n+                                        invalid_node()),\n+        users: @mut vec::from_elem(ir.num_live_nodes.get() * ir.num_vars,\n                                    invalid_users()),\n         loop_scope: @mut ~[],\n         break_ln: @RefCell::new(HashMap::new()),\n@@ -883,7 +885,7 @@ impl Liveness {\n         // hack to skip the loop unless debug! is enabled:\n         debug!(\"^^ liveness computation results for body {} (entry={})\",\n                {\n-                   for ln_idx in range(0u, self.ir.num_live_nodes) {\n+                   for ln_idx in range(0u, self.ir.num_live_nodes.get()) {\n                        debug!(\"{}\", self.ln_str(LiveNode(ln_idx)));\n                    }\n                    body.id"}]}