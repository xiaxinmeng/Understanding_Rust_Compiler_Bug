{"sha": "1920f817caf65e5ffb95628b15cedb8aa54a8ae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MjBmODE3Y2FmNjVlNWZmYjk1NjI4YjE1Y2VkYjhhYTU0YThhZTg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-26T15:03:41Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-02T11:43:07Z"}, "message": "Avoid over-aligning the return value in the -Cpanic=abort case", "tree": {"sha": "0af3fa3cbd0818b325b09f7730d0a45f614f5de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0af3fa3cbd0818b325b09f7730d0a45f614f5de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1920f817caf65e5ffb95628b15cedb8aa54a8ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1920f817caf65e5ffb95628b15cedb8aa54a8ae8", "html_url": "https://github.com/rust-lang/rust/commit/1920f817caf65e5ffb95628b15cedb8aa54a8ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1920f817caf65e5ffb95628b15cedb8aa54a8ae8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45ce5aed63fb58385705016dfaff1832a58d7c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45ce5aed63fb58385705016dfaff1832a58d7c8", "html_url": "https://github.com/rust-lang/rust/commit/d45ce5aed63fb58385705016dfaff1832a58d7c8"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "fa89c630345b75982547ebe618909262fcdec9f1", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1920f817caf65e5ffb95628b15cedb8aa54a8ae8/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1920f817caf65e5ffb95628b15cedb8aa54a8ae8/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=1920f817caf65e5ffb95628b15cedb8aa54a8ae8", "patch": "@@ -858,8 +858,10 @@ fn try_intrinsic(\n ) {\n     if bx.sess().no_landing_pads() {\n         bx.call(func, &[data], None);\n-        let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n-        bx.store(bx.const_null(bx.type_i8p()), dest, ptr_align);\n+        // Return 0 unconditionally from the intrinsic call;\n+        // we can never unwind.\n+        let ret_align = bx.tcx().data_layout.i32_align.abi;\n+        bx.store(bx.const_i32(0), dest, ret_align);\n     } else if wants_msvc_seh(bx.sess()) {\n         codegen_msvc_try(bx, func, data, local_ptr, dest);\n     } else {"}]}