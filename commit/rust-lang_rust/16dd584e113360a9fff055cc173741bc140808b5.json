{"sha": "16dd584e113360a9fff055cc173741bc140808b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZGQ1ODRlMTEzMzYwYTlmZmYwNTVjYzE3Mzc0MWJjMTQwODA4YjU=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-13T20:46:26Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:04:30Z"}, "message": "Update chalk", "tree": {"sha": "4a411b9e159b41d15ca6d38ff5ff68039c7341f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a411b9e159b41d15ca6d38ff5ff68039c7341f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16dd584e113360a9fff055cc173741bc140808b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16dd584e113360a9fff055cc173741bc140808b5", "html_url": "https://github.com/rust-lang/rust/commit/16dd584e113360a9fff055cc173741bc140808b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16dd584e113360a9fff055cc173741bc140808b5/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "006b48279431cab16d2b5d522151b6eae459e835", "url": "https://api.github.com/repos/rust-lang/rust/commits/006b48279431cab16d2b5d522151b6eae459e835", "html_url": "https://github.com/rust-lang/rust/commit/006b48279431cab16d2b5d522151b6eae459e835"}], "stats": {"total": 142, "additions": 69, "deletions": 73}, "files": [{"sha": "b4d8065bcf5359ee312071a175bb45b0c198a8ce", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/16dd584e113360a9fff055cc173741bc140808b5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/16dd584e113360a9fff055cc173741bc140808b5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=16dd584e113360a9fff055cc173741bc140808b5", "patch": "@@ -434,9 +434,8 @@ dependencies = [\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8d4620afad4d4d9e63f915cfa10c930b7a3c9c3ca5cd88dd771ff8e5bf04ea10\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"proc-macro2 1.0.3\",\n  \"quote 1.0.2\",\n@@ -446,19 +445,17 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6ca6e5cef10197789da0b4ec310eda58da4c55530613b2323432642a97372735\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"chalk-macros\",\n  \"rustc-hash\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d45df5fb6328527f976e8a32c9e1c9970084d937ebe93d0d34f5bbf4231cb956\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -467,18 +464,16 @@ dependencies = [\n \n [[package]]\n name = \"chalk-macros\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9e4782d108e420a1fcf94d8a919cf248db33c5071678e87d9c2d4f20ed1feb32\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a0ec96dbe0ab5fdbadfca4179ec2e1d35f0439c3b53a74988b1aec239c63eb08\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -488,9 +483,8 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dfb99fa9530f0e101475fb60adc931f51bdea05b4642a48928b814d7f0141a6b\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\","}, {"sha": "6570fe67b3b0eb458f1c85701d80643e369a0db9", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=16dd584e113360a9fff055cc173741bc140808b5", "patch": "@@ -30,7 +30,8 @@ rustc_serialize = { path = \"../librustc_serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n byteorder = { version = \"1.3\" }\n-chalk-ir = \"0.10.0\"\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n+#chalk-ir = \"0.10.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\"\n rustc_session = { path = \"../librustc_session\" }"}, {"sha": "2bd22ee8004446370ef0cf376f1914bdb886ae64", "filename": "src/librustc_middle/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs?ref=16dd584e113360a9fff055cc173741bc140808b5", "patch": "@@ -7,7 +7,6 @@\n \n use chalk_ir::{GoalData, Parameter};\n \n-use rustc_middle::mir::Mutability;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n@@ -24,16 +23,12 @@ use std::hash::{Hash, Hasher};\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum RustDefId {\n     Adt(DefId),\n-    Str,\n     Never,\n-    Slice,\n     Array,\n-    Ref(Mutability),\n-    RawPtr,\n+    FnDef(DefId),\n \n     Trait(DefId),\n     Impl(DefId),\n-    FnDef(DefId),\n     AssocTy(DefId),\n     Opaque(DefId),\n }"}, {"sha": "f429ab7cd0964cfcbc1ef5c1574670d78753a33e", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=16dd584e113360a9fff055cc173741bc140808b5", "patch": "@@ -16,9 +16,12 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n-chalk-ir = \"0.10.0\"\n-chalk-rust-ir = \"0.10.0\"\n-chalk-solve = \"0.10.0\"\n+#chalk-ir = \"0.10.0\"\n+#chalk-rust-ir = \"0.10.0\"\n+#chalk-solve = \"0.10.0\"\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }"}, {"sha": "4320436f1e33cee32a5653de987b71406d46e949", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=16dd584e113360a9fff055cc173741bc140808b5", "patch": "@@ -168,41 +168,25 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 });\n                 struct_datum\n             }\n-            RustDefId::Ref(_) | RustDefId::RawPtr => Arc::new(chalk_rust_ir::StructDatum {\n+            RustDefId::Array => Arc::new(chalk_rust_ir::StructDatum {\n                 id: struct_id,\n                 binders: chalk_ir::Binders::new(\n                     chalk_ir::ParameterKinds::from(\n                         &self.interner,\n-                        vec![\n-                            chalk_ir::ParameterKind::Lifetime(()),\n-                            chalk_ir::ParameterKind::Ty(()),\n-                        ],\n+                        Some(chalk_ir::ParameterKind::Ty(())),\n                     ),\n                     chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n                 ),\n                 flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n             }),\n-            RustDefId::Array | RustDefId::Slice => Arc::new(chalk_rust_ir::StructDatum {\n+            RustDefId::Never | RustDefId::FnDef(_) => Arc::new(chalk_rust_ir::StructDatum {\n                 id: struct_id,\n                 binders: chalk_ir::Binders::new(\n-                    chalk_ir::ParameterKinds::from(\n-                        &self.interner,\n-                        Some(chalk_ir::ParameterKind::Ty(())),\n-                    ),\n+                    chalk_ir::ParameterKinds::new(&self.interner),\n                     chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n                 ),\n                 flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n             }),\n-            RustDefId::Str | RustDefId::Never | RustDefId::FnDef(_) => {\n-                Arc::new(chalk_rust_ir::StructDatum {\n-                    id: struct_id,\n-                    binders: chalk_ir::Binders::new(\n-                        chalk_ir::ParameterKinds::new(&self.interner),\n-                        chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n-                    ),\n-                    flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-                })\n-            }\n \n             v => bug!(\"Used not struct variant ({:?}) when expecting struct variant.\", v),\n         }\n@@ -286,12 +270,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         // FIXME(chalk): this match can be removed when builtin types supported\n         match struct_id.0 {\n             RustDefId::Adt(_) => {}\n-            RustDefId::Str => return false,\n             RustDefId::Never => return false,\n-            RustDefId::Slice => return false,\n             RustDefId::Array => return false,\n-            RustDefId::Ref(_) => return false,\n-            RustDefId::RawPtr => return false,\n             _ => bug!(\"Did not use `Adt` variant when expecting adt.\"),\n         }\n         let adt_def_id: DefId = match struct_id.0 {\n@@ -388,7 +368,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                     chalk_ir::TypeName::Struct(chalk_ir::StructId(rust_def_id)) => {\n                         use rustc_middle::traits::ChalkRustDefId::*;\n                         match rust_def_id {\n-                            Never | Array | RawPtr | FnDef(_) | Ref(_) => Some(true),\n+                            Never | Array | FnDef(_) => Some(true),\n \n                             Adt(adt_def_id) => {\n                                 let adt_def = self.tcx.adt_def(adt_def_id);\n@@ -405,8 +385,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                                 }\n                             }\n \n-                            Str | Slice => Some(false),\n-\n                             Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n                         }\n                     }\n@@ -421,7 +399,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                     chalk_ir::TypeName::Struct(chalk_ir::StructId(rust_def_id)) => {\n                         use rustc_middle::traits::ChalkRustDefId::*;\n                         match rust_def_id {\n-                            Never | RawPtr | Ref(_) | Str | Slice => Some(false),\n+                            Never => Some(false),\n                             FnDef(_) | Array => Some(true),\n                             Adt(adt_def_id) => {\n                                 let adt_def = self.tcx.adt_def(adt_def_id);\n@@ -489,6 +467,14 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         };\n         Some(t)\n     }\n+\n+    fn is_object_safe(&self, trait_id: chalk_ir::TraitId<RustInterner<'tcx>>) -> bool {\n+        let def_id: DefId = match trait_id.0 {\n+            RustDefId::Trait(def_id) => def_id,\n+            _ => bug!(\"Did not use `Trait` variant when expecting trait.\"),\n+        };\n+        self.tcx.is_object_safe(def_id)\n+    }\n }\n \n /// Creates a `InternalSubsts` that maps each generic parameter to a higher-ranked"}, {"sha": "b6dc3097b0f7e0c87483b5392ecb3d8848b3d03e", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=16dd584e113360a9fff055cc173741bc140808b5", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 apply(struct_ty(RustDefId::Adt(def.did)), substs.lower_into(interner))\n             }\n             Foreign(_def_id) => unimplemented!(),\n-            Str => apply(struct_ty(RustDefId::Str), empty()),\n+            Str => apply(chalk_ir::TypeName::Str, empty()),\n             Array(ty, _) => apply(\n                 struct_ty(RustDefId::Array),\n                 chalk_ir::Substitution::from1(\n@@ -318,25 +318,36 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 ),\n             ),\n             Slice(ty) => apply(\n-                struct_ty(RustDefId::Slice),\n+                chalk_ir::TypeName::Slice,\n                 chalk_ir::Substitution::from1(\n                     interner,\n                     chalk_ir::ParameterKind::Ty(ty.lower_into(interner)).intern(interner),\n                 ),\n             ),\n-            RawPtr(_) => apply(struct_ty(RustDefId::RawPtr), empty()),\n-            Ref(region, ty, mutability) => apply(\n-                struct_ty(RustDefId::Ref(mutability)),\n-                chalk_ir::Substitution::from(\n-                    interner,\n-                    [\n-                        chalk_ir::ParameterKind::Lifetime(region.lower_into(interner))\n-                            .intern(interner),\n-                        chalk_ir::ParameterKind::Ty(ty.lower_into(interner)).intern(interner),\n-                    ]\n-                    .iter(),\n-                ),\n-            ),\n+            RawPtr(ptr) => {\n+                let name = match ptr.mutbl {\n+                    ast::Mutability::Mut => chalk_ir::TypeName::Raw(chalk_ir::Mutability::Mut),\n+                    ast::Mutability::Not => chalk_ir::TypeName::Raw(chalk_ir::Mutability::Not),\n+                };\n+                apply(name, chalk_ir::Substitution::from1(interner, ptr.ty.lower_into(interner)))\n+            }\n+            Ref(region, ty, mutability) => {\n+                let name = match mutability {\n+                    ast::Mutability::Mut => chalk_ir::TypeName::Ref(chalk_ir::Mutability::Mut),\n+                    ast::Mutability::Not => chalk_ir::TypeName::Ref(chalk_ir::Mutability::Not),\n+                };\n+                apply(\n+                    name,\n+                    chalk_ir::Substitution::from(\n+                        interner,\n+                        &[\n+                            chalk_ir::ParameterKind::Lifetime(region.lower_into(interner))\n+                                .intern(interner),\n+                            chalk_ir::ParameterKind::Ty(ty.lower_into(interner)).intern(interner),\n+                        ],\n+                    ),\n+                )\n+            }\n             FnDef(def_id, _) => apply(struct_ty(RustDefId::FnDef(def_id)), empty()),\n             FnPtr(sig) => {\n                 let (inputs_and_outputs, binders, _named_regions) ="}, {"sha": "02c41898eb9cf0d8b996f80411b2c2a1d516f2a7", "filename": "src/librustc_traits/chalk/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16dd584e113360a9fff055cc173741bc140808b5/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fmod.rs?ref=16dd584e113360a9fff055cc173741bc140808b5", "patch": "@@ -109,9 +109,11 @@ crate fn evaluate_goal<'tcx>(\n                     let kind = match _data {\n                         TyData::Apply(_application_ty) => match _application_ty.name {\n                             chalk_ir::TypeName::Struct(_struct_id) => match _struct_id.0 {\n+                                RustDefId::Adt(_) => unimplemented!(),\n+                                RustDefId::Never => unimplemented!(),\n                                 RustDefId::Array => unimplemented!(),\n-                                RustDefId::Slice => unimplemented!(),\n-                                _ => unimplemented!(),\n+                                RustDefId::FnDef(_) => unimplemented!(),\n+                                _ => panic!(\"Unexpected struct id\"),\n                             },\n                             chalk_ir::TypeName::Scalar(scalar) => match scalar {\n                                 chalk_ir::Scalar::Bool => ty::Bool,\n@@ -138,6 +140,10 @@ crate fn evaluate_goal<'tcx>(\n                                 },\n                             },\n                             chalk_ir::TypeName::Tuple(_size) => unimplemented!(),\n+                            chalk_ir::TypeName::Slice => unimplemented!(),\n+                            chalk_ir::TypeName::Raw(_) => unimplemented!(),\n+                            chalk_ir::TypeName::Ref(_) => unimplemented!(),\n+                            chalk_ir::TypeName::Str => unimplemented!(),\n                             chalk_ir::TypeName::OpaqueType(_ty) => unimplemented!(),\n                             chalk_ir::TypeName::AssociatedType(_assoc_ty) => unimplemented!(),\n                             chalk_ir::TypeName::Error => unimplemented!(),"}]}