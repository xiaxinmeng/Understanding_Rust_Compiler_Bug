{"sha": "5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "node_id": "C_kwDOAAsO6NoAKDViNTk2NGY1NjljYTA3YmE1NDcxMGNiNDQwYWFjYWExY2YxZTVjMWE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-25T19:08:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-01T22:56:50Z"}, "message": "rustc: Panic by default in `DefIdTree::parent`\n\nOnly crate root def-ids don't have a parent, and in majority of cases the argument of `DefIdTree::parent` cannot be a crate root.\nSo we now panic by default in `parent` and introduce a new non-panicing function `opt_parent` for cases where the argument can be a crate root.\n\nSame applies to `local_parent`/`opt_local_parent`.", "tree": {"sha": "2bfa7457d9fde6a513c41e9e7a7d10282e92bf39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bfa7457d9fde6a513c41e9e7a7d10282e92bf39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "html_url": "https://github.com/rust-lang/rust/commit/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a933de83989471ac444a13d62996d30621542654", "url": "https://api.github.com/repos/rust-lang/rust/commits/a933de83989471ac444a13d62996d30621542654", "html_url": "https://github.com/rust-lang/rust/commit/a933de83989471ac444a13d62996d30621542654"}], "stats": {"total": 338, "additions": 162, "deletions": 176}, "files": [{"sha": "368c0be794bccd317dbf0696d95fe09d15f93dbc", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -90,7 +90,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         {\n             if let ty::FnDef(id, _) = *literal.ty().kind() {\n                 debug!(\"add_moved_or_invoked_closure_note: id={:?}\", id);\n-                if self.infcx.tcx.parent(id) == self.infcx.tcx.lang_items().fn_once_trait() {\n+                if Some(self.infcx.tcx.parent(id)) == self.infcx.tcx.lang_items().fn_once_trait() {\n                     let closure = match args.first() {\n                         Some(Operand::Copy(ref place)) | Some(Operand::Move(ref place))\n                             if target == place.local_or_deref_local() =>"}, {"sha": "8f24367390775e1a8b43cac1024b7d093b17e4d3", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -46,7 +46,7 @@ pub fn DIB<'a, 'll>(cx: &'a CodegenCx<'ll, '_>) -> &'a DIBuilder<'ll> {\n }\n \n pub fn get_namespace_for_item<'ll>(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll DIScope {\n-    item_namespace(cx, cx.tcx.parent(def_id).expect(\"get_namespace_for_item: missing parent?\"))\n+    item_namespace(cx, cx.tcx.parent(def_id))\n }\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "1f291db55be96d596501997cdc5f9e85cc095516", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -17,7 +17,7 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n }\n \n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    let parent_id = tcx.local_parent(def_id).unwrap();\n+    let parent_id = tcx.local_parent(def_id);\n     tcx.def_kind(parent_id) == DefKind::Impl\n         && tcx.impl_constness(parent_id) == hir::Constness::Const\n }"}, {"sha": "a7a480dd1d79018063d2bb74030e875767374c3e", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -128,9 +128,9 @@ pub fn call_kind<'tcx>(\n         } else {\n             None\n         };\n-        let parent_self_ty = tcx\n-            .parent(method_did)\n-            .filter(|did| tcx.def_kind(*did) == rustc_hir::def::DefKind::Impl)\n+        let parent_did = tcx.parent(method_did);\n+        let parent_self_ty = (tcx.def_kind(parent_did) == rustc_hir::def::DefKind::Impl)\n+            .then_some(parent_did)\n             .and_then(|did| match tcx.type_of(did).kind() {\n                 ty::Adt(def, ..) => Some(def.did()),\n                 _ => None,"}, {"sha": "b1eb9f0da87f774ef9b19233c56dd375365ae347", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -341,7 +341,7 @@ impl InferenceDiagnosticsData {\n \n impl InferenceDiagnosticsParentData {\n     fn for_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<InferenceDiagnosticsParentData> {\n-        let parent_def_id = tcx.parent(def_id)?;\n+        let parent_def_id = tcx.parent(def_id);\n \n         let parent_name =\n             tcx.def_key(parent_def_id).disambiguated_data.data.get_opt_name()?.to_string();\n@@ -854,10 +854,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Some((DefKind::AssocFn, def_id)) =\n             self.in_progress_typeck_results?.borrow().type_dependent_def(hir_id)\n         {\n-            return self\n-                .tcx\n-                .parent(def_id)\n-                .filter(|&parent_def_id| self.tcx.is_trait(parent_def_id));\n+            let parent_def_id = self.tcx.parent(def_id);\n+            return self.tcx.is_trait(parent_def_id).then_some(parent_def_id);\n         }\n \n         None"}, {"sha": "da03d944ceb773e6a1816c23830957ec8e9c0192", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -42,7 +42,7 @@ pub fn find_param_with_region<'tcx>(\n     let (id, bound_region) = match *anon_region {\n         ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n         ty::ReEarlyBound(ebr) => {\n-            (tcx.parent(ebr.def_id).unwrap(), ty::BoundRegionKind::BrNamed(ebr.def_id, ebr.name))\n+            (tcx.parent(ebr.def_id), ty::BoundRegionKind::BrNamed(ebr.def_id, ebr.name))\n         }\n         _ => return None, // not a free region\n     };"}, {"sha": "dfce30171ff2b851234e0a242fa1e1a929e1f996", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1471,7 +1471,7 @@ impl InvalidAtomicOrdering {\n             && let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def()\n             // skip extension traits, only lint functions from the standard library\n             && cx.tcx.trait_id_of_impl(impl_did).is_none()\n-            && let Some(parent) = cx.tcx.parent(adt.did())\n+            && let parent = cx.tcx.parent(adt.did())\n             && cx.tcx.is_diagnostic_item(sym::atomic_mod, parent)\n             && ATOMIC_TYPES.contains(&cx.tcx.item_name(adt.did()))\n         {\n@@ -1486,9 +1486,9 @@ impl InvalidAtomicOrdering {\n         orderings.iter().any(|ordering| {\n             tcx.item_name(did) == *ordering && {\n                 let parent = tcx.parent(did);\n-                parent == atomic_ordering\n+                Some(parent) == atomic_ordering\n                     // needed in case this is a ctor, not a variant\n-                    || parent.map_or(false, |parent| tcx.parent(parent) == atomic_ordering)\n+                    || tcx.opt_parent(parent) == atomic_ordering\n             }\n         })\n     }"}, {"sha": "85e53559c292403104c4f8f4939f3662ffecd4fd", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -546,7 +546,7 @@ impl<'hir> Map<'hir> {\n         let def_kind = self.tcx.def_kind(def_id);\n         match def_kind {\n             DefKind::Trait | DefKind::TraitAlias => def_id,\n-            DefKind::TyParam | DefKind::ConstParam => self.tcx.local_parent(def_id).unwrap(),\n+            DefKind::TyParam | DefKind::ConstParam => self.tcx.local_parent(def_id),\n             _ => bug!(\"ty_param_owner: {:?} is a {:?} not a type parameter\", def_id, def_kind),\n         }\n     }"}, {"sha": "32041143240aa4022af8be480f30f016f0a61a5a", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -289,7 +289,7 @@ fn suggestion_for_allocator_api(\n     feature: Symbol,\n ) -> Option<(Span, String, String, Applicability)> {\n     if feature == sym::allocator_api {\n-        if let Some(trait_) = tcx.parent(def_id) {\n+        if let Some(trait_) = tcx.opt_parent(def_id) {\n             if tcx.is_diagnostic_item(sym::Vec, trait_) {\n                 let sm = tcx.sess.parse_sess.source_map();\n                 let inner_types = sm.span_extend_to_prev_char(span, '<', true);"}, {"sha": "f9ef264f68ebab9487af9632ce7e1a726c78eb46", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1491,7 +1491,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 (free_region.scope.expect_local(), free_region.bound_region)\n             }\n             ty::ReEarlyBound(ref ebr) => (\n-                self.parent(ebr.def_id).unwrap().expect_local(),\n+                self.local_parent(ebr.def_id.expect_local()),\n                 ty::BoundRegionKind::BrNamed(ebr.def_id, ebr.name),\n             ),\n             _ => return None, // not a free region"}, {"sha": "a6717746979197808da71d385777fb8bb372fbf2", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> Ty<'tcx> {\n             | Placeholder(_)\n             | Error(_) => false,\n             Opaque(did, substs) => {\n-                let parent = tcx.parent(*did).expect(\"opaque types always have a parent\");\n+                let parent = tcx.parent(*did);\n                 if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = tcx.def_kind(parent)\n                     && let Opaque(parent_did, _) = tcx.type_of(parent).kind()\n                     && parent_did == did"}, {"sha": "af9216a990a72dd1c3bbf9ff34159d61688cc26e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -290,11 +290,28 @@ pub struct ClosureSizeProfileData<'tcx> {\n }\n \n pub trait DefIdTree: Copy {\n-    fn parent(self, id: DefId) -> Option<DefId>;\n+    fn opt_parent(self, id: DefId) -> Option<DefId>;\n \n     #[inline]\n-    fn local_parent(self, id: LocalDefId) -> Option<LocalDefId> {\n-        Some(self.parent(id.to_def_id())?.expect_local())\n+    #[track_caller]\n+    fn parent(self, id: DefId) -> DefId {\n+        match self.opt_parent(id) {\n+            Some(id) => id,\n+            // not `unwrap_or_else` to avoid breaking caller tracking\n+            None => bug!(\"{id:?} doesn't have a parent\"),\n+        }\n+    }\n+\n+    #[inline]\n+    #[track_caller]\n+    fn opt_local_parent(self, id: LocalDefId) -> Option<LocalDefId> {\n+        self.opt_parent(id.to_def_id()).map(DefId::expect_local)\n+    }\n+\n+    #[inline]\n+    #[track_caller]\n+    fn local_parent(self, id: LocalDefId) -> LocalDefId {\n+        self.parent(id.to_def_id()).expect_local()\n     }\n \n     fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {\n@@ -303,7 +320,7 @@ pub trait DefIdTree: Copy {\n         }\n \n         while descendant != ancestor {\n-            match self.parent(descendant) {\n+            match self.opt_parent(descendant) {\n                 Some(parent) => descendant = parent,\n                 None => return false,\n             }\n@@ -313,7 +330,8 @@ pub trait DefIdTree: Copy {\n }\n \n impl<'tcx> DefIdTree for TyCtxt<'tcx> {\n-    fn parent(self, id: DefId) -> Option<DefId> {\n+    #[inline]\n+    fn opt_parent(self, id: DefId) -> Option<DefId> {\n         self.def_key(id).parent.map(|index| DefId { index, ..id })\n     }\n }\n@@ -2123,17 +2141,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {\n         match res {\n             Res::Def(DefKind::Variant, did) => {\n-                let enum_did = self.parent(did).unwrap();\n+                let enum_did = self.parent(did);\n                 self.adt_def(enum_did).variant_with_id(did)\n             }\n             Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {\n-                let variant_did = self.parent(variant_ctor_did).unwrap();\n-                let enum_did = self.parent(variant_did).unwrap();\n+                let variant_did = self.parent(variant_ctor_did);\n+                let enum_did = self.parent(variant_did);\n                 self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)\n             }\n             Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {\n-                let struct_did = self.parent(ctor_did).expect(\"struct ctor has no parent\");\n+                let struct_did = self.parent(ctor_did);\n                 self.adt_def(struct_did).non_enum_variant()\n             }\n             _ => bug!(\"expect_variant_res used with unexpected res {:?}\", res),"}, {"sha": "3fe68f723ec14ead710ab75b8b82025fb9712365", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -235,11 +235,11 @@ pub trait Printer<'tcx>: Sized {\n         // as the trait.\n         let in_self_mod = match characteristic_def_id_of_type(self_ty) {\n             None => false,\n-            Some(ty_def_id) => self.tcx().parent(ty_def_id) == Some(parent_def_id),\n+            Some(ty_def_id) => self.tcx().parent(ty_def_id) == parent_def_id,\n         };\n         let in_trait_mod = match impl_trait_ref {\n             None => false,\n-            Some(trait_ref) => self.tcx().parent(trait_ref.def_id) == Some(parent_def_id),\n+            Some(trait_ref) => self.tcx().parent(trait_ref.def_id) == parent_def_id,\n         };\n \n         if !in_self_mod && !in_trait_mod {"}, {"sha": "991666908f94a83c2ee1409518e0f8d15dd09df9", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -408,7 +408,7 @@ pub trait PrettyPrinter<'tcx>:\n             return Ok((self, false));\n         };\n \n-        let actual_parent = self.tcx().parent(def_id);\n+        let actual_parent = self.tcx().opt_parent(def_id);\n         debug!(\n             \"try_print_visible_def_path: visible_parent={:?} actual_parent={:?}\",\n             visible_parent, actual_parent,\n@@ -643,7 +643,7 @@ pub trait PrettyPrinter<'tcx>:\n                     return Ok(self);\n                 }\n \n-                let parent = self.tcx().parent(def_id).expect(\"opaque types always have a parent\");\n+                let parent = self.tcx().parent(def_id);\n                 match self.tcx().def_kind(parent) {\n                     DefKind::TyAlias | DefKind::AssocTy => {\n                         if let ty::Opaque(d, _) = *self.tcx().type_of(parent).kind() {"}, {"sha": "0d55fe3a3929b206abbd69d5b43fb18f531bbc43", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1798,7 +1798,7 @@ impl<'tcx> Region<'tcx> {\n     /// function might return the `DefId` of a closure.\n     pub fn free_region_binding_scope(self, tcx: TyCtxt<'_>) -> DefId {\n         match *self {\n-            ty::ReEarlyBound(br) => tcx.parent(br.def_id).unwrap(),\n+            ty::ReEarlyBound(br) => tcx.parent(br.def_id),\n             ty::ReFree(fr) => fr.scope,\n             _ => bug!(\"free_region_binding_scope invoked on inappropriate region: {:?}\", self),\n         }"}, {"sha": "c190eec7e5a161f4833d403de3f51c1c1be7d1b1", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -142,10 +142,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn res_generics_def_id(self, res: Res) -> Option<DefId> {\n         match res {\n             Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => {\n-                Some(self.parent(def_id).and_then(|def_id| self.parent(def_id)).unwrap())\n+                Some(self.parent(self.parent(def_id)))\n             }\n             Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Struct, _), def_id) => {\n-                Some(self.parent(def_id).unwrap())\n+                Some(self.parent(def_id))\n             }\n             // Other `DefKind`s don't have generics and would ICE when calling\n             // `generics_of`.\n@@ -500,9 +500,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn typeck_root_def_id(self, def_id: DefId) -> DefId {\n         let mut def_id = def_id;\n         while self.is_typeck_child(def_id) {\n-            def_id = self.parent(def_id).unwrap_or_else(|| {\n-                bug!(\"closure {:?} has no parent\", def_id);\n-            });\n+            def_id = self.parent(def_id);\n         }\n         def_id\n     }"}, {"sha": "5b0aa4309a8ed9918141507e8ae3e08153b0d75b", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -377,15 +377,15 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     ) -> PatKind<'tcx> {\n         let res = match res {\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_id) => {\n-                let variant_id = self.tcx.parent(variant_ctor_id).unwrap();\n+                let variant_id = self.tcx.parent(variant_ctor_id);\n                 Res::Def(DefKind::Variant, variant_id)\n             }\n             res => res,\n         };\n \n         let mut kind = match res {\n             Res::Def(DefKind::Variant, variant_id) => {\n-                let enum_id = self.tcx.parent(variant_id).unwrap();\n+                let enum_id = self.tcx.parent(variant_id);\n                 let adt_def = self.tcx.adt_def(enum_id);\n                 if adt_def.is_enum() {\n                     let substs = match ty.kind() {"}, {"sha": "320765e7af34ad2c3f62a77bb3b05a4cb7df67db", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -352,7 +352,7 @@ fn compute_codegen_unit_name(\n             cgu_def_id = None;\n         }\n \n-        current_def_id = tcx.parent(current_def_id).unwrap();\n+        current_def_id = tcx.parent(current_def_id);\n     }\n \n     let cgu_def_id = cgu_def_id.unwrap();"}, {"sha": "991d0d45546285601cb3caf45a10598ad2b618ba", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -88,15 +88,15 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             _ if self.in_pat => {}\n             Res::PrimTy(..) | Res::SelfCtor(..) | Res::Local(..) => {}\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), ctor_def_id) => {\n-                let variant_id = self.tcx.parent(ctor_def_id).unwrap();\n-                let enum_id = self.tcx.parent(variant_id).unwrap();\n+                let variant_id = self.tcx.parent(ctor_def_id);\n+                let enum_id = self.tcx.parent(variant_id);\n                 self.check_def_id(enum_id);\n                 if !self.ignore_variant_stack.contains(&ctor_def_id) {\n                     self.check_def_id(variant_id);\n                 }\n             }\n             Res::Def(DefKind::Variant, variant_id) => {\n-                let enum_id = self.tcx.parent(variant_id).unwrap();\n+                let enum_id = self.tcx.parent(variant_id);\n                 self.check_def_id(enum_id);\n                 if !self.ignore_variant_stack.contains(&variant_id) {\n                     self.check_def_id(variant_id);"}, {"sha": "f84b848e08d1ec1b9b2162ae4beb4ead3297a3e7", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -27,7 +27,7 @@ struct EntryContext<'tcx> {\n \n impl<'tcx> ItemLikeVisitor<'tcx> for EntryContext<'tcx> {\n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n-        let at_root = self.tcx.local_parent(item.def_id) == Some(CRATE_DEF_ID);\n+        let at_root = self.tcx.opt_local_parent(item.def_id) == Some(CRATE_DEF_ID);\n         find_item(item, self, at_root);\n     }\n "}, {"sha": "9eba7fb0811c6200eff5d4ac7333f4f2040a9a8e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -332,9 +332,9 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n         let def_id = local_def_id.to_def_id();\n \n         // Don't run unused pass for #[derive()]\n-        if let Some(parent) = self.tcx.parent(def_id)\n-            && let DefKind::Impl = self.tcx.def_kind(parent.expect_local())\n-            && self.tcx.has_attr(parent, sym::automatically_derived)\n+        let parent = self.tcx.local_parent(local_def_id);\n+        if let DefKind::Impl = self.tcx.def_kind(parent)\n+            && self.tcx.has_attr(parent.to_def_id(), sym::automatically_derived)\n         {\n             return;\n         }"}, {"sha": "b603352a9beba57ecdbe3ea4d8aeade7f8ccb50e", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -280,8 +280,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                     self.visit_nested_body(body);\n                 }\n                 hir::ImplItemKind::Fn(_, body) => {\n-                    let impl_def_id =\n-                        self.tcx.parent(search_item.to_def_id()).unwrap().expect_local();\n+                    let impl_def_id = self.tcx.local_parent(search_item);\n                     if method_might_be_inlined(self.tcx, impl_item, impl_def_id) {\n                         self.visit_nested_body(body)\n                     }"}, {"sha": "ee459d9c129d37d2126c6dcb5e499d1cca671a55", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -24,7 +24,8 @@ use rustc_middle::thir::abstract_const::Node as ACNode;\n use rustc_middle::ty::fold::TypeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, Const, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n+use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, Ident};\n@@ -456,9 +457,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             return;\n         }\n \n-        let item_def_id = local_def_id.to_def_id();\n-        let macro_module_def_id =\n-            ty::DefIdTree::parent(self.tcx, item_def_id).unwrap().expect_local();\n+        let macro_module_def_id = self.tcx.local_parent(local_def_id);\n         if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {\n             // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).\n             return;\n@@ -477,8 +476,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             if changed_reachability || module_def_id == CRATE_DEF_ID {\n                 break;\n             }\n-            module_def_id =\n-                ty::DefIdTree::parent(self.tcx, module_def_id.to_def_id()).unwrap().expect_local();\n+            module_def_id = self.tcx.local_parent(module_def_id);\n         }\n     }\n "}, {"sha": "b4394fcddfc1808778af1ead4e2da278f336b418", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1388,7 +1388,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n             && self\n                 .r\n                 .trait_impl_items\n-                .contains(&ty::DefIdTree::parent(&*self.r, def_id).unwrap().expect_local()))\n+                .contains(&ty::DefIdTree::local_parent(&*self.r, local_def_id)))\n         {\n             // Trait impl item visibility is inherited from its trait when not specified\n             // explicitly. In that case we cannot determine it here in early resolve,"}, {"sha": "aef9fb57a6a7c5a08ddbdf7b9e7f08ac19810ee9", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1321,7 +1321,7 @@ impl<'a> Resolver<'a> {\n                         segms.push(ast::PathSegment::from_ident(ident));\n                         let path = Path { span: name_binding.span, segments: segms, tokens: None };\n                         let did = match res {\n-                            Res::Def(DefKind::Ctor(..), did) => this.parent(did),\n+                            Res::Def(DefKind::Ctor(..), did) => this.opt_parent(did),\n                             _ => res.opt_def_id(),\n                         };\n \n@@ -1707,7 +1707,7 @@ impl<'a> Resolver<'a> {\n             _,\n         ) = binding.kind\n         {\n-            let def_id = self.parent(ctor_def_id).expect(\"no parent for a constructor\");\n+            let def_id = self.parent(ctor_def_id);\n             let fields = self.field_names.get(&def_id)?;\n             return fields.iter().map(|name| name.span).reduce(Span::to); // None for `struct Foo()`\n         }"}, {"sha": "3d0e2b9921d00e17a1602608ba1229fb9c23f39f", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -13,7 +13,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_hir::def::{self, PartialRes};\n-use rustc_hir::def_id::DefId;\n use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n@@ -345,12 +344,6 @@ pub struct ImportResolver<'a, 'b> {\n     pub r: &'a mut Resolver<'b>,\n }\n \n-impl<'a, 'b> ty::DefIdTree for &'a ImportResolver<'a, 'b> {\n-    fn parent(self, id: DefId) -> Option<DefId> {\n-        self.r.parent(id)\n-    }\n-}\n-\n impl<'a, 'b> ImportResolver<'a, 'b> {\n     // Import resolution\n     //\n@@ -696,7 +689,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 }\n                 if !is_prelude &&\n                    max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.\n-                   !max_vis.get().is_at_least(import.vis.get(), &*self)\n+                   !max_vis.get().is_at_least(import.vis.get(), &*self.r)\n                 {\n                     let msg = \"glob import doesn't reexport anything because no candidate is public enough\";\n                     self.r.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);"}, {"sha": "b89b9c376af63efcbca40176c6fb8b06e3623734", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1313,12 +1313,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // Figure out if this is a type/trait segment,\n             // which may need lifetime elision performed.\n             let type_def_id = match partial_res.base_res() {\n-                Res::Def(DefKind::AssocTy, def_id) if i + 2 == proj_start => {\n-                    self.r.parent(def_id).unwrap()\n-                }\n-                Res::Def(DefKind::Variant, def_id) if i + 1 == proj_start => {\n-                    self.r.parent(def_id).unwrap()\n-                }\n+                Res::Def(DefKind::AssocTy, def_id) if i + 2 == proj_start => self.r.parent(def_id),\n+                Res::Def(DefKind::Variant, def_id) if i + 1 == proj_start => self.r.parent(def_id),\n                 Res::Def(DefKind::Struct, def_id)\n                 | Res::Def(DefKind::Union, def_id)\n                 | Res::Def(DefKind::Enum, def_id)"}, {"sha": "50428811fff253ce9ad0f66c0db887bbb0be69ce", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 45, "deletions": 51, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -534,21 +534,17 @@ fn is_late_bound_map<'tcx>(\n ) -> Option<(LocalDefId, &'tcx FxHashSet<LocalDefId>)> {\n     match tcx.def_kind(def_id) {\n         DefKind::AnonConst | DefKind::InlineConst => {\n-            let mut def_id = tcx\n-                .parent(def_id.to_def_id())\n-                .unwrap_or_else(|| bug!(\"anon const or closure without a parent\"));\n+            let mut def_id = tcx.local_parent(def_id);\n             // We search for the next outer anon const or fn here\n             // while skipping closures.\n             //\n             // Note that for `AnonConst` we still just recurse until we\n             // find a function body, but who cares :shrug:\n-            while tcx.is_closure(def_id) {\n-                def_id = tcx\n-                    .parent(def_id)\n-                    .unwrap_or_else(|| bug!(\"anon const or closure without a parent\"));\n+            while tcx.is_closure(def_id.to_def_id()) {\n+                def_id = tcx.local_parent(def_id);\n             }\n \n-            tcx.is_late_bound_map(def_id.expect_local())\n+            tcx.is_late_bound_map(def_id)\n         }\n         _ => resolve_lifetimes_for(tcx, def_id).late_bound.get(&def_id).map(|lt| (def_id, lt)),\n     }\n@@ -1864,7 +1860,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let remove_decl = self\n             .tcx\n             .parent(def_id)\n-            .and_then(|parent_def_id| parent_def_id.as_local())\n+            .as_local()\n             .and_then(|parent_def_id| self.tcx.hir().get_generics(parent_def_id))\n             .and_then(|generics| self.lifetime_deletion_span(name, generics));\n \n@@ -2003,37 +1999,36 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             continue;\n                         }\n \n-                        if let Some(parent_def_id) = self.tcx.parent(def_id) {\n-                            if let Some(def_id) = parent_def_id.as_local() {\n-                                // lifetimes in `derive` expansions don't count (Issue #53738)\n-                                if self\n-                                    .tcx\n-                                    .get_attrs(def_id.to_def_id())\n-                                    .iter()\n-                                    .any(|attr| attr.has_name(sym::automatically_derived))\n-                                {\n-                                    continue;\n-                                }\n+                        let parent_def_id = self.tcx.parent(def_id);\n+                        if let Some(def_id) = parent_def_id.as_local() {\n+                            // lifetimes in `derive` expansions don't count (Issue #53738)\n+                            if self\n+                                .tcx\n+                                .get_attrs(def_id.to_def_id())\n+                                .iter()\n+                                .any(|attr| attr.has_name(sym::automatically_derived))\n+                            {\n+                                continue;\n+                            }\n \n-                                // opaque types generated when desugaring an async function can have a single\n-                                // use lifetime even if it is explicitly denied (Issue #77175)\n-                                if let hir::Node::Item(hir::Item {\n-                                    kind: hir::ItemKind::OpaqueTy(ref opaque),\n-                                    ..\n-                                }) = self.tcx.hir().get_by_def_id(def_id)\n-                                {\n-                                    if !matches!(opaque.origin, hir::OpaqueTyOrigin::AsyncFn(..)) {\n+                            // opaque types generated when desugaring an async function can have a single\n+                            // use lifetime even if it is explicitly denied (Issue #77175)\n+                            if let hir::Node::Item(hir::Item {\n+                                kind: hir::ItemKind::OpaqueTy(ref opaque),\n+                                ..\n+                            }) = self.tcx.hir().get_by_def_id(def_id)\n+                            {\n+                                if !matches!(opaque.origin, hir::OpaqueTyOrigin::AsyncFn(..)) {\n+                                    continue 'lifetimes;\n+                                }\n+                                // We want to do this only if the lifetime identifier is already defined\n+                                // in the async function that generated this. Otherwise it could be\n+                                // an opaque type defined by the developer and we still want this\n+                                // lint to fail compilation\n+                                for p in opaque.generics.params {\n+                                    if defined_by.contains_key(&p.name) {\n                                         continue 'lifetimes;\n                                     }\n-                                    // We want to do this only if the lifetime identifier is already defined\n-                                    // in the async function that generated this. Otherwise it could be\n-                                    // an opaque type defined by the developer and we still want this\n-                                    // lint to fail compilation\n-                                    for p in opaque.generics.params {\n-                                        if defined_by.contains_key(&p.name) {\n-                                            continue 'lifetimes;\n-                                        }\n-                                    }\n                                 }\n                             }\n                         }\n@@ -2087,20 +2082,19 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             |lint| {\n                                 let mut err = lint\n                                     .build(&format!(\"lifetime parameter `{}` never used\", name));\n-                                if let Some(parent_def_id) = self.tcx.parent(def_id) {\n-                                    if let Some(generics) =\n-                                        self.tcx.hir().get_generics(parent_def_id.expect_local())\n-                                    {\n-                                        let unused_lt_span =\n-                                            self.lifetime_deletion_span(name, generics);\n-                                        if let Some(span) = unused_lt_span {\n-                                            err.span_suggestion(\n-                                                span,\n-                                                \"elide the unused lifetime\",\n-                                                String::new(),\n-                                                Applicability::MachineApplicable,\n-                                            );\n-                                        }\n+                                let parent_def_id = self.tcx.parent(def_id);\n+                                if let Some(generics) =\n+                                    self.tcx.hir().get_generics(parent_def_id.expect_local())\n+                                {\n+                                    let unused_lt_span =\n+                                        self.lifetime_deletion_span(name, generics);\n+                                    if let Some(span) = unused_lt_span {\n+                                        err.span_suggestion(\n+                                            span,\n+                                            \"elide the unused lifetime\",\n+                                            String::new(),\n+                                            Applicability::MachineApplicable,\n+                                        );\n                                     }\n                                 }\n                                 err.emit();"}, {"sha": "e173a7f72c4d2404777215852e882e56c590ff6a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1109,7 +1109,8 @@ impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {\n }\n \n impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n-    fn parent(self, id: DefId) -> Option<DefId> {\n+    #[inline]\n+    fn opt_parent(self, id: DefId) -> Option<DefId> {\n         match id.as_local() {\n             Some(id) => self.definitions.def_key(id).parent,\n             None => self.cstore().def_key(id).parent,"}, {"sha": "e1c9ecc055f6ad52b11b30c0d03e75cccccb123a", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1138,8 +1138,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                     let access = access_from!(self.save_ctxt, item.def_id);\n                     let ref_id = self.lookup_def_id(item.hir_id()).map(id_from_def_id);\n                     let span = self.span_from_span(sub_span);\n-                    let parent =\n-                        self.save_ctxt.tcx.parent(item.def_id.to_def_id()).map(id_from_def_id);\n+                    let parent = self.save_ctxt.tcx.local_parent(item.def_id);\n                     self.dumper.import(\n                         &access,\n                         Import {\n@@ -1149,7 +1148,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                             alias_span: None,\n                             name: item.ident.to_string(),\n                             value: String::new(),\n-                            parent,\n+                            parent: Some(id_from_def_id(parent.to_def_id())),\n                         },\n                     );\n                     self.write_sub_paths_truncated(&path);\n@@ -1166,8 +1165,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                     if !self.span.filter_generated(item.span) {\n                         let access = access_from!(self.save_ctxt, item.def_id);\n                         let span = self.span_from_span(sub_span);\n-                        let parent =\n-                            self.save_ctxt.tcx.parent(item.def_id.to_def_id()).map(id_from_def_id);\n+                        let parent = self.save_ctxt.tcx.local_parent(item.def_id);\n                         self.dumper.import(\n                             &access,\n                             Import {\n@@ -1177,7 +1175,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                                 alias_span: None,\n                                 name: \"*\".to_owned(),\n                                 value: names.join(\", \"),\n-                                parent,\n+                                parent: Some(id_from_def_id(parent.to_def_id())),\n                             },\n                         );\n                         self.write_sub_paths(&path);\n@@ -1188,8 +1186,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 let name_span = item.ident.span;\n                 if !self.span.filter_generated(name_span) {\n                     let span = self.span_from_span(name_span);\n-                    let parent =\n-                        self.save_ctxt.tcx.parent(item.def_id.to_def_id()).map(id_from_def_id);\n+                    let parent = self.save_ctxt.tcx.local_parent(item.def_id);\n                     self.dumper.import(\n                         &Access { public: false, reachable: false },\n                         Import {\n@@ -1199,7 +1196,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                             alias_span: None,\n                             name: item.ident.to_string(),\n                             value: String::new(),\n-                            parent,\n+                            parent: Some(id_from_def_id(parent.to_def_id())),\n                         },\n                     );\n                 }"}, {"sha": "5d94884e0f618487238adf118de24450c666476f", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -690,7 +690,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 // This is a reference to a tuple struct or an enum variant where the def_id points\n                 // to an invisible constructor function. That is not a very useful\n                 // def, so adjust to point to the tuple struct or enum variant itself.\n-                let parent_def_id = self.tcx.parent(def_id).unwrap();\n+                let parent_def_id = self.tcx.parent(def_id);\n                 Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(parent_def_id) })\n             }\n             Res::Def(HirDefKind::Static(_) | HirDefKind::Const | HirDefKind::AssocConst, _) => {"}, {"sha": "a3d3c7c0cf3aa9f445141f9068826bfcd10caf98", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1906,7 +1906,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         GeneratorKind::Async(AsyncGeneratorKind::Fn) => self\n                             .tcx\n                             .parent(generator_did)\n-                            .and_then(|parent_did| parent_did.as_local())\n+                            .as_local()\n                             .map(|parent_did| hir.local_def_id_to_hir_id(parent_did))\n                             .and_then(|parent_hir_id| hir.opt_name(parent_hir_id))\n                             .map(|name| {"}, {"sha": "fd1b7bfa0b1b0952cdb6321af62647657c297176", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1952,7 +1952,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n-        let trait_def_id = tcx.parent(item_def_id).unwrap();\n+        let trait_def_id = tcx.parent(item_def_id);\n \n         debug!(\"qpath_to_ty: trait_def_id={:?}\", trait_def_id);\n \n@@ -2159,11 +2159,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                     // `DefKind::Ctor` -> `DefKind::Variant`\n                     if let DefKind::Ctor(..) = kind {\n-                        def_id = tcx.parent(def_id).unwrap()\n+                        def_id = tcx.parent(def_id);\n                     }\n \n                     // `DefKind::Variant` -> `DefKind::Enum`\n-                    let enum_def_id = tcx.parent(def_id).unwrap();\n+                    let enum_def_id = tcx.parent(def_id);\n                     (enum_def_id, last - 1)\n                 } else {\n                     // FIXME: lint here recommending `Enum::<...>::Variant` form"}, {"sha": "93b0edb84c0547860b7b3e589e24315d3935b1c7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -838,7 +838,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let def_kind = self.tcx.def_kind(def_id);\n \n         let item_ty = if let DefKind::Variant = def_kind {\n-            self.tcx.type_of(self.tcx.parent(def_id).expect(\"variant w/out parent\"))\n+            self.tcx.type_of(self.tcx.parent(def_id))\n         } else {\n             self.tcx.type_of(def_id)\n         };"}, {"sha": "634ba2baf96678df57813ce777b659da9e341c14", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -1542,7 +1542,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (candidates, globs): (Vec<_>, Vec<_>) = candidates.into_iter().partition(|trait_did| {\n             if let Some(parent_did) = parent_map.get(trait_did) {\n                 // If the item is re-exported as `_`, we should suggest a glob-import instead.\n-                if Some(*parent_did) != self.tcx.parent(*trait_did)\n+                if *parent_did != self.tcx.parent(*trait_did)\n                     && self\n                         .tcx\n                         .module_children(*parent_did)"}, {"sha": "c1c63c460664cc16eed32f5d518b3e5cbd372517", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -3162,7 +3162,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n \n     // #73631: closures inherit `#[target_feature]` annotations\n     if tcx.features().target_feature_11 && tcx.is_closure(id) {\n-        let owner_id = tcx.parent(id).expect(\"closure should have a parent\");\n+        let owner_id = tcx.parent(id);\n         codegen_fn_attrs\n             .target_features\n             .extend(tcx.codegen_fn_attrs(owner_id).target_features.iter().copied())"}, {"sha": "75ad584f419907370ce96c8a093cc617c4e21af6", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -683,7 +683,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         Some(hidden) => hidden.ty,\n         None => {\n             let span = tcx.def_span(def_id);\n-            let name = tcx.item_name(tcx.parent(def_id.to_def_id()).unwrap());\n+            let name = tcx.item_name(tcx.local_parent(def_id).to_def_id());\n             let label = format!(\n                 \"`{}` must be used in combination with a concrete type within the same module\",\n                 name"}, {"sha": "eea4eef90654796db86af4b8fc1bc8e741ffdff5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -421,7 +421,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     // `self_def_id` set, we override it here.\n                     // See https://github.com/rust-lang/rust/issues/85454\n                     if let QPath { ref mut self_def_id, .. } = default {\n-                        *self_def_id = cx.tcx.parent(self.def_id);\n+                        *self_def_id = Some(cx.tcx.parent(self.def_id));\n                     }\n \n                     Some(default)\n@@ -1068,7 +1068,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n             let mut what_rustc_thinks =\n                 Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n \n-            let impl_ref = cx.tcx.parent(local_did).and_then(|did| cx.tcx.impl_trait_ref(did));\n+            let impl_ref = cx.tcx.impl_trait_ref(cx.tcx.local_parent(self.def_id));\n \n             // Trait impl items always inherit the impl's visibility --\n             // we don't want to show `pub`.\n@@ -1260,7 +1260,7 @@ impl Clean<Item> for ty::AssocItem {\n         let mut what_rustc_thinks =\n             Item::from_def_id_and_parts(self.def_id, Some(self.name), kind, cx);\n \n-        let impl_ref = tcx.parent(self.def_id).and_then(|did| tcx.impl_trait_ref(did));\n+        let impl_ref = tcx.impl_trait_ref(tcx.parent(self.def_id));\n \n         // Trait impl items always inherit the impl's visibility --\n         // we don't want to show `pub`.\n@@ -1742,9 +1742,7 @@ fn clean_field(def_id: DefId, name: Symbol, ty: Type, cx: &mut DocContext<'_>) -\n }\n \n fn is_field_vis_inherited(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    let parent = tcx\n-        .parent(def_id)\n-        .expect(\"is_field_vis_inherited can only be called on struct or variant fields\");\n+    let parent = tcx.parent(def_id);\n     match tcx.def_kind(parent) {\n         DefKind::Struct | DefKind::Union => false,\n         DefKind::Variant => true,"}, {"sha": "3a2f24d719c937b2221efd169472d7a0b53dccfd", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -455,7 +455,7 @@ crate fn find_nearest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<De\n         let mut current = def_id;\n         // The immediate parent might not always be a module.\n         // Find the first parent which is.\n-        while let Some(parent) = tcx.parent(current) {\n+        while let Some(parent) = tcx.opt_parent(current) {\n             if tcx.def_kind(parent) == DefKind::Mod {\n                 return Some(parent);\n             }"}, {"sha": "528eb6410cb371b5adf392f536e4308677854ea6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -563,7 +563,7 @@ crate fn href_with_root_path(\n     let did = match def_kind {\n         DefKind::AssocTy | DefKind::AssocFn | DefKind::AssocConst | DefKind::Variant => {\n             // documented on their parent's page\n-            tcx.parent(did).unwrap()\n+            tcx.parent(did)\n         }\n         _ => did,\n     };"}, {"sha": "0d40ef4c60003b156a8d8c1a79d3404c861b5ac2", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n                 let should_be_ignored = i\n                     .item_id\n                     .as_def_id()\n-                    .and_then(|def_id| self.ctx.tcx.parent(def_id))\n+                    .and_then(|def_id| self.ctx.tcx.opt_parent(def_id))\n                     .and_then(|def_id| self.ctx.tcx.hir().get_if_local(def_id))\n                     .map(|node| {\n                         matches!("}, {"sha": "7a68a6e523b41701ba0899f6503ded992fe1e1dc", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -333,7 +333,7 @@ impl ItemFragment {\n                     FragmentKind::StructField => write!(s, \"structfield.{}\", name),\n                     FragmentKind::Variant => write!(s, \"variant.{}\", name),\n                     FragmentKind::VariantField => {\n-                        let variant = tcx.item_name(tcx.parent(def_id).unwrap());\n+                        let variant = tcx.item_name(tcx.parent(def_id));\n                         write!(s, \"variant.{}.field.{}\", variant, name)\n                     }\n                 }\n@@ -508,10 +508,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 | DefKind::AssocTy\n                 | DefKind::Variant\n                 | DefKind::Field) => {\n-                    let parent_def_id = tcx.parent(def_id).expect(\"nested item has no parent\");\n+                    let parent_def_id = tcx.parent(def_id);\n                     if def_kind == DefKind::Field && tcx.def_kind(parent_def_id) == DefKind::Variant\n                     {\n-                        tcx.parent(parent_def_id).expect(\"variant has no parent\")\n+                        tcx.parent(parent_def_id)\n                     } else {\n                         parent_def_id\n                     }\n@@ -2333,14 +2333,10 @@ fn handle_variant(\n     cx: &DocContext<'_>,\n     res: Res,\n ) -> Result<(Res, Option<ItemFragment>), ErrorKind<'static>> {\n-    cx.tcx\n-        .parent(res.def_id(cx.tcx))\n-        .map(|parent| {\n-            let parent_def = Res::Def(DefKind::Enum, parent);\n-            let variant = cx.tcx.expect_variant_res(res.as_hir_res().unwrap());\n-            (parent_def, Some(ItemFragment(FragmentKind::Variant, variant.def_id)))\n-        })\n-        .ok_or_else(|| ResolutionFailure::NoParentItem.into())\n+    let parent = cx.tcx.parent(res.def_id(cx.tcx));\n+    let parent_def = Res::Def(DefKind::Enum, parent);\n+    let variant = cx.tcx.expect_variant_res(res.as_hir_res().unwrap());\n+    Ok((parent_def, Some(ItemFragment(FragmentKind::Variant, variant.def_id))))\n }\n \n /// Resolve a primitive type or value."}, {"sha": "cd096c880036403732f4a6f828bbbd9fd418d4cc", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -188,7 +188,7 @@ impl EarlyDocLinkResolver<'_, '_> {\n             return;\n         }\n         // FIXME: actually resolve links, not just add traits in scope.\n-        if let Some(parent_id) = self.resolver.parent(scope_id) {\n+        if let Some(parent_id) = self.resolver.opt_parent(scope_id) {\n             self.add_traits_in_scope(parent_id);\n         }\n     }\n@@ -253,7 +253,7 @@ impl EarlyDocLinkResolver<'_, '_> {\n             {\n                 if let Some(def_id) = child.res.opt_def_id() && !def_id.is_local() {\n                     let scope_id = match child.res {\n-                        Res::Def(DefKind::Variant, ..) => self.resolver.parent(def_id).unwrap(),\n+                        Res::Def(DefKind::Variant, ..) => self.resolver.parent(def_id),\n                         _ => def_id,\n                     };\n                     self.resolve_doc_links_extern_outer(def_id, scope_id); // Outer attribute scope"}, {"sha": "d245c3750ec08d64e153f08e16bdadbf5aed33fa", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -49,7 +49,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n         let _prof_timer = cx.tcx.sess.prof.generic_activity(\"build_local_trait_impls\");\n         let mut attr_buf = Vec::new();\n         for &impl_def_id in all_trait_impls.iter().take_while(|def_id| def_id.is_local()) {\n-            let mut parent = cx.tcx.parent(impl_def_id);\n+            let mut parent = Some(cx.tcx.parent(impl_def_id));\n             while let Some(did) = parent {\n                 attr_buf.extend(\n                     cx.tcx\n@@ -65,7 +65,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n                         })\n                         .cloned(),\n                 );\n-                parent = cx.tcx.parent(did);\n+                parent = cx.tcx.opt_parent(did);\n             }\n             inline::build_impl(cx, None, impl_def_id, Some(&attr_buf), &mut new_items_local);\n             attr_buf.clear();"}, {"sha": "aa3552001f469e4aa6ba2720117baa72c3e2bd32", "filename": "src/tools/clippy/clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -193,7 +193,7 @@ fn find_sugg_for_if_let<'tcx>(\n         PatKind::TupleStruct(ref qpath, [sub_pat], _) => {\n             if let PatKind::Wild = sub_pat.kind {\n                 let res = cx.typeck_results().qpath_res(qpath, check_pat.hir_id);\n-                let Some(id) = res.opt_def_id().and_then(|ctor_id| cx.tcx.parent(ctor_id)) else { return };\n+                let Some(id) = res.opt_def_id().map(|ctor_id| cx.tcx.parent(ctor_id)) else { return };\n                 let lang_items = cx.tcx.lang_items();\n                 if Some(id) == lang_items.result_ok_variant() {\n                     (\"is_ok()\", try_get_generic_ty(op_ty, 0).unwrap_or(op_ty))"}, {"sha": "b88ec0963f2b55da8cd2f4567e8b91d9f3f58e45", "filename": "src/tools/clippy/clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -42,7 +42,7 @@ pub(crate) trait BindInsteadOfMap {\n \n     fn no_op_msg(cx: &LateContext<'_>) -> Option<String> {\n         let variant_id = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM).ok()?;\n-        let item_id = cx.tcx.parent(variant_id)?;\n+        let item_id = cx.tcx.parent(variant_id);\n         Some(format!(\n             \"using `{}.{}({})`, which is a no-op\",\n             cx.tcx.item_name(item_id),\n@@ -53,7 +53,7 @@ pub(crate) trait BindInsteadOfMap {\n \n     fn lint_msg(cx: &LateContext<'_>) -> Option<String> {\n         let variant_id = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM).ok()?;\n-        let item_id = cx.tcx.parent(variant_id)?;\n+        let item_id = cx.tcx.parent(variant_id);\n         Some(format!(\n             \"using `{}.{}(|x| {}(y))`, which is more succinctly expressed as `{}(|x| y)`\",\n             cx.tcx.item_name(item_id),\n@@ -145,7 +145,7 @@ pub(crate) trait BindInsteadOfMap {\n         if_chain! {\n             if let Some(adt) = cx.typeck_results().expr_ty(recv).ty_adt_def();\n             if let Ok(vid) = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM);\n-            if Some(adt.did()) == cx.tcx.parent(vid);\n+            if adt.did() == cx.tcx.parent(vid);\n             then {} else { return false; }\n         }\n \n@@ -182,7 +182,7 @@ pub(crate) trait BindInsteadOfMap {\n     fn is_variant(cx: &LateContext<'_>, res: Res) -> bool {\n         if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Fn), id) = res {\n             if let Ok(variant_id) = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM) {\n-                return cx.tcx.parent(id) == Some(variant_id);\n+                return cx.tcx.parent(id) == variant_id;\n             }\n         }\n         false"}, {"sha": "f7b79f0839ba8c17ffbfd08172c16df143491df8", "filename": "src/tools/clippy/clippy_lints/src/methods/chars_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check(\n     if_chain! {\n         if let Some(args) = method_chain_args(info.chain, chain_methods);\n         if let hir::ExprKind::Call(fun, [arg_char]) = info.other.kind;\n-        if let Some(id) = path_def_id(cx, fun).and_then(|ctor_id| cx.tcx.parent(ctor_id));\n+        if let Some(id) = path_def_id(cx, fun).map(|ctor_id| cx.tcx.parent(ctor_id));\n         if Some(id) == cx.tcx.lang_items().option_some_variant();\n         then {\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "76bc9466ed81800e23cdf94f4f8b771a2cc1a895", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -75,7 +75,7 @@ pub(super) fn check<'tcx>(\n             let arg_snippet = snippet(cx, span, \"..\");\n             let body = cx.tcx.hir().body(id);\n                 if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);\n-                if let Some(id) = path_def_id(cx, func).and_then(|ctor_id| cx.tcx.parent(ctor_id));\n+                if let Some(id) = path_def_id(cx, func).map(|ctor_id| cx.tcx.parent(ctor_id));\n                 if Some(id) == cx.tcx.lang_items().option_some_variant();\n                 then {\n                     let func_snippet = snippet(cx, arg_char.span, \"..\");"}, {"sha": "a20377f320b23b2dca9b7c2e30f48b249956876f", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n-                    let at_root = cx.tcx.local_parent(it.def_id) == Some(CRATE_DEF_ID);\n+                    let at_root = cx.tcx.local_parent(it.def_id) == CRATE_DEF_ID;\n                     if at_root {\n                         return;\n                     }"}, {"sha": "7d46952d9718b5cbcdf149de40a1a9206d1afa25", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5964f569ca07ba54710cb440aacaa1cf1e5c1a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=5b5964f569ca07ba54710cb440aacaa1cf1e5c1a", "patch": "@@ -235,7 +235,7 @@ pub fn is_lang_ctor(cx: &LateContext<'_>, qpath: &QPath<'_>, lang_item: LangItem\n     if let QPath::Resolved(_, path) = qpath {\n         if let Res::Def(DefKind::Ctor(..), ctor_id) = path.res {\n             if let Ok(item_id) = cx.tcx.lang_items().require(lang_item) {\n-                return cx.tcx.parent(ctor_id) == Some(item_id);\n+                return cx.tcx.parent(ctor_id) == item_id;\n             }\n         }\n     }"}]}