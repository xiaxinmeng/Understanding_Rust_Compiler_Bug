{"sha": "706e52e2cc1e1ffab4face61f5906164236a0da8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNmU1MmUyY2MxZTFmZmFiNGZhY2U2MWY1OTA2MTY0MjM2YTBkYTg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-02T08:43:36Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-02T08:43:36Z"}, "message": "fix handling of `Self`", "tree": {"sha": "ba4a167721aafffa52addcd8e631800458571d7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba4a167721aafffa52addcd8e631800458571d7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/706e52e2cc1e1ffab4face61f5906164236a0da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/706e52e2cc1e1ffab4face61f5906164236a0da8", "html_url": "https://github.com/rust-lang/rust/commit/706e52e2cc1e1ffab4face61f5906164236a0da8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/706e52e2cc1e1ffab4face61f5906164236a0da8/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad9986605f5f743ee8cc3da8189a68815313ab07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9986605f5f743ee8cc3da8189a68815313ab07", "html_url": "https://github.com/rust-lang/rust/commit/ad9986605f5f743ee8cc3da8189a68815313ab07"}], "stats": {"total": 105, "additions": 79, "deletions": 26}, "files": [{"sha": "895894a0bb2fc5ee1613f0d97ad2f6475ebb82db", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=706e52e2cc1e1ffab4face61f5906164236a0da8", "patch": "@@ -794,7 +794,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let generics = self.tcx.generics_of(did);\n                     // Account for the case where `did` corresponds to `Self`, which doesn't have\n                     // the expected type argument.\n-                    if let Some(type_param) = generics.type_param(param, self.tcx) {\n+                    if !param.is_self() {\n+                        let type_param = generics.type_param(param, self.tcx);\n                         let hir = &self.tcx.hir;\n                         hir.as_local_node_id(type_param.def_id).map(|id| {\n                             // Get the `hir::TyParam` to verify wether it already has any bounds."}, {"sha": "bc5a056dd3386d396408a10ecc9d7364041c4db1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=706e52e2cc1e1ffab4face61f5906164236a0da8", "patch": "@@ -713,6 +713,13 @@ impl ty::EarlyBoundRegion {\n \n /// Information about the formal type/lifetime parameters associated\n /// with an item or method. Analogous to hir::Generics.\n+///\n+/// Note that in the presence of a `Self` parameter, the ordering here\n+/// is different from the ordering in a Substs. Substs are ordered as\n+///     Self, *Regions, *Other Type Params, (...child generics)\n+/// while this struct is ordered as\n+///     regions = Regions\n+///     types = [Self, *Other Type Params]\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct Generics {\n     pub parent: Option<DefId>,\n@@ -755,18 +762,34 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }\n     }\n \n-    /// Returns the `TypeParameterDef` associated with this `ParamTy`, or `None`\n-    /// if `param` is `self`.\n+    /// Returns the `TypeParameterDef` associated with this `ParamTy`.\n     pub fn type_param(&'tcx self,\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                      -> Option<&TypeParameterDef> {\n+                      -> &TypeParameterDef {\n         if let Some(idx) = param.idx.checked_sub(self.parent_count() as u32) {\n-            let type_param_start = (self.has_self as usize) + self.regions.len();\n-            if let Some(idx) = (idx as usize).checked_sub(type_param_start) {\n-                Some(&self.types[idx])\n+            // non-Self type parameters are always offset by exactly\n+            // `self.regions.len()`. In the absence of a Self, this is obvious,\n+            // but even in the absence of a `Self` we just have to \"compensate\"\n+            // for the regions:\n+            //\n+            // For example, for `trait Foo<'a, 'b, T1, T2>`, the\n+            // situation is:\n+            //     Substs:\n+            //         0   1  2  3  4\n+            //       Self 'a 'b  T1 T2\n+            //     generics.types:\n+            //         0  1  2\n+            //       Self T1 T2\n+            // And it can be seen that to move from a substs offset to a\n+            // generics offset you just have to offset by the number of regions.\n+            let type_param_offset = self.regions.len();\n+            if let Some(idx) = (idx as usize).checked_sub(type_param_offset) {\n+                assert!(!(self.has_self && idx == 0));\n+                &self.types[idx]\n             } else {\n-                None\n+                assert!(self.has_self && idx == 0);\n+                &self.types[0]\n             }\n         } else {\n             tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))"}, {"sha": "c8037ce081a71e6b5e47ef7e03db742b81069cd4", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=706e52e2cc1e1ffab4face61f5906164236a0da8", "patch": "@@ -519,9 +519,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 } else if let Some(&ty::TyS {\n                     sty: ty::TypeVariants::TyParam(ref pt), ..\n                 }) = k.as_type() {\n-                    !impl_generics.type_param(pt, self)\n-                        .expect(\"drop impl param doesn't have a ParameterDef?\")\n-                        .pure_wrt_drop\n+                    !impl_generics.type_param(pt, self).pure_wrt_drop\n                 } else {\n                     // not a type or region param - this should be reported\n                     // as an error."}, {"sha": "242520cdb32c73e027fda9d03bc01451bfbb242b", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs?ref=706e52e2cc1e1ffab4face61f5906164236a0da8", "patch": "@@ -28,7 +28,11 @@ struct Foo<T> {\n     foo: &'static T\n }\n \n-trait X<T> {}\n+trait X<K>: Sized {\n+    fn foo<'a, L: X<&'a Nested<K>>>();\n+    // check that we give a sane error for `Self`\n+    fn bar<'a, L: X<&'a Nested<Self>>>();\n+}\n \n struct Nested<K>(K);\n impl<K> Nested<K> {"}, {"sha": "42e4f28260ea2bf202ec85aacf55fd2a17fc806b", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/706e52e2cc1e1ffab4face61f5906164236a0da8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=706e52e2cc1e1ffab4face61f5906164236a0da8", "patch": "@@ -27,37 +27,64 @@ note: ...so that the reference type `&'static T` does not outlive the data it po\n    |     ^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:35:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:5\n    |\n-34 |   impl<K> Nested<K> {\n+31 | trait X<K>: Sized {\n+   |         - help: consider adding an explicit lifetime bound `K: 'a`...\n+32 |     fn foo<'a, L: X<&'a Nested<K>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:5\n+   |\n+32 |     fn foo<'a, L: X<&'a Nested<K>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:34:5\n+   |\n+34 |     fn bar<'a, L: X<&'a Nested<Self>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+note: ...so that the reference type `&'a Nested<Self>` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:34:5\n+   |\n+34 |     fn bar<'a, L: X<&'a Nested<Self>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0309]: the parameter type `K` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:39:5\n+   |\n+38 |   impl<K> Nested<K> {\n    |        - help: consider adding an explicit lifetime bound `K: 'a`...\n-35 | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-36 | |     }\n+39 | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+40 | |     }\n    | |_____^\n    |\n note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:35:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:39:5\n    |\n-35 | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-36 | |     }\n+39 | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+40 | |     }\n    | |_____^\n \n error[E0309]: the parameter type `M` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:37:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:5\n    |\n-37 |       fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+41 |       fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n    |       ^                                                -- help: consider adding an explicit lifetime bound `M: 'a`...\n    |  _____|\n    | |\n-38 | |     }\n+42 | |     }\n    | |_____^\n    |\n note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:37:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:5\n    |\n-37 | /     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-38 | |     }\n+41 | /     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+42 | |     }\n    | |_____^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n "}]}