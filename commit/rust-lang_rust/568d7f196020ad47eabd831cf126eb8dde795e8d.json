{"sha": "568d7f196020ad47eabd831cf126eb8dde795e8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OGQ3ZjE5NjAyMGFkNDdlYWJkODMxY2YxMjZlYjhkZGU3OTVlOGQ=", "commit": {"author": {"name": "Brian Leibig", "email": "brian@brianleibig.com", "date": "2015-05-12T16:20:28Z"}, "committer": {"name": "Brian Leibig", "email": "brian@brianleibig.com", "date": "2015-05-12T16:20:43Z"}, "message": "Update the bison grammar for various language changes", "tree": {"sha": "d4d7e969a13f1e19ce7ff3fa4ba719ec689ee097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4d7e969a13f1e19ce7ff3fa4ba719ec689ee097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/568d7f196020ad47eabd831cf126eb8dde795e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/568d7f196020ad47eabd831cf126eb8dde795e8d", "html_url": "https://github.com/rust-lang/rust/commit/568d7f196020ad47eabd831cf126eb8dde795e8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/568d7f196020ad47eabd831cf126eb8dde795e8d/comments", "author": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad202671fc031ee90133fa5849ef0ec31164e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad202671fc031ee90133fa5849ef0ec31164e04", "html_url": "https://github.com/rust-lang/rust/commit/0ad202671fc031ee90133fa5849ef0ec31164e04"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "719088aa44b67ea0d9dcf60ebee702d8e276d610", "filename": "src/grammar/lexer.l", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/568d7f196020ad47eabd831cf126eb8dde795e8d/src%2Fgrammar%2Flexer.l", "raw_url": "https://github.com/rust-lang/rust/raw/568d7f196020ad47eabd831cf126eb8dde795e8d/src%2Fgrammar%2Flexer.l", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Flexer.l?ref=568d7f196020ad47eabd831cf126eb8dde795e8d", "patch": "@@ -311,7 +311,7 @@ r/#             {\n <str>\\x22                { BEGIN(suffix); return LIT_STR; }\n \n <str><<EOF>>                { return -1; }\n-<str>\\\\[n\\nrt\\\\\\x27\\x220]   { yymore(); }\n+<str>\\\\[n\\nr\\rt\\\\\\x27\\x220] { yymore(); }\n <str>\\\\x[0-9a-fA-F]{2}      { yymore(); }\n <str>\\\\u\\{[0-9a-fA-F]?{6}\\} { yymore(); }\n <str>\\\\[^n\\nrt\\\\\\x27\\x220]  { return -1; }"}, {"sha": "1117f4d5ce81ce8946ad2d82cf7e7731efccaa8b", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/568d7f196020ad47eabd831cf126eb8dde795e8d/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/568d7f196020ad47eabd831cf126eb8dde795e8d/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=568d7f196020ad47eabd831cf126eb8dde795e8d", "patch": "@@ -289,16 +289,16 @@ item_const\n ;\n \n item_macro\n-: path_expr '!' maybe_ident parens_delimited_token_trees ';'\n-| path_expr '!' maybe_ident braces_delimited_token_trees\n-| path_expr '!' maybe_ident brackets_delimited_token_trees ';'\n+: path_expr '!' maybe_ident parens_delimited_token_trees ';'  { $$ = mk_node(\"ItemMacro\", 3, $1, $3, $4); }\n+| path_expr '!' maybe_ident braces_delimited_token_trees      { $$ = mk_node(\"ItemMacro\", 3, $1, $3, $4); }\n+| path_expr '!' maybe_ident brackets_delimited_token_trees ';'{ $$ = mk_node(\"ItemMacro\", 3, $1, $3, $4); }\n ;\n \n view_item\n : use_item\n | extern_fn_item\n | EXTERN CRATE ident ';'                      { $$ = mk_node(\"ViewItemExternCrate\", 1, $3); }\n-| EXTERN CRATE str AS ident ';'               { $$ = mk_node(\"ViewItemExternCrate\", 2, $3, $5); }\n+| EXTERN CRATE ident AS ident ';'             { $$ = mk_node(\"ViewItemExternCrate\", 2, $3, $5); }\n ;\n \n extern_fn_item\n@@ -312,8 +312,11 @@ use_item\n view_path\n : path_no_types_allowed                                    { $$ = mk_node(\"ViewPathSimple\", 1, $1); }\n | path_no_types_allowed MOD_SEP '{'                '}'     { $$ = mk_node(\"ViewPathList\", 2, $1, mk_atom(\"ViewPathListEmpty\")); }\n+|                       MOD_SEP '{'                '}'     { $$ = mk_node(\"ViewPathList\", 1, mk_atom(\"ViewPathListEmpty\")); }\n | path_no_types_allowed MOD_SEP '{' idents_or_self '}'     { $$ = mk_node(\"ViewPathList\", 2, $1, $4); }\n+|                       MOD_SEP '{' idents_or_self '}'     { $$ = mk_node(\"ViewPathList\", 1, $3); }\n | path_no_types_allowed MOD_SEP '{' idents_or_self ',' '}' { $$ = mk_node(\"ViewPathList\", 2, $1, $4); }\n+|                       MOD_SEP '{' idents_or_self ',' '}' { $$ = mk_node(\"ViewPathList\", 1, $3); }\n | path_no_types_allowed MOD_SEP '*'                        { $$ = mk_node(\"ViewPathGlob\", 1, $1); }\n |                               '{'                '}'     { $$ = mk_atom(\"ViewPathListEmpty\"); }\n |                               '{' idents_or_self '}'     { $$ = mk_node(\"ViewPathList\", 1, $2); }\n@@ -333,7 +336,7 @@ block_item\n ;\n \n maybe_ty_ascription\n-: ':' ty { $$ = $2; }\n+: ':' ty_sum { $$ = $2; }\n | %empty { $$ = mk_none(); }\n ;\n \n@@ -511,7 +514,7 @@ trait_item\n ;\n \n trait_const\n-: maybe_outer_attrs CONST ident maybe_const_default ';' { $$ = mk_node(\"ConstTraitItem\", 3, $1, $3, $4); }\n+: maybe_outer_attrs CONST ident maybe_ty_ascription maybe_const_default ';' { $$ = mk_node(\"ConstTraitItem\", 4, $1, $3, $4, $5); }\n ;\n \n maybe_const_default\n@@ -590,11 +593,11 @@ item_impl\n {\n   $$ = mk_node(\"ItemImpl\", 6, $1, $3, 5, $6, $9, $10);\n }\n-| maybe_unsafe IMPL generic_params trait_ref FOR ty maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_unsafe IMPL generic_params trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n   $$ = mk_node(\"ItemImpl\", 6, $3, $4, $6, $7, $9, $10);\n }\n-| maybe_unsafe IMPL generic_params '!' trait_ref FOR ty maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_unsafe IMPL generic_params '!' trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n   $$ = mk_node(\"ItemImplNeg\", 7, $1, $3, $5, $7, $8, $10, $11);\n }\n@@ -620,7 +623,7 @@ impl_items\n \n impl_item\n : impl_method\n-| item_macro\n+| attrs_and_vis item_macro { $$ = mk_node(\"ImplMacroItem\", 2, $1, $2); }\n | impl_const\n | impl_type\n ;\n@@ -698,7 +701,7 @@ params\n ;\n \n param\n-: pat ':' ty   { $$ = mk_node(\"Arg\", 2, $1, $3); }\n+: pat ':' ty_sum   { $$ = mk_node(\"Arg\", 2, $1, $3); }\n ;\n \n inferrable_params\n@@ -909,6 +912,11 @@ pat\n |              ident '@' pat                      { $$ = mk_node(\"PatIdent\", 3, mk_node(\"BindByValue\", 1, mk_atom(\"MutImmutable\")), $1, $3); }\n | binding_mode ident '@' pat                      { $$ = mk_node(\"PatIdent\", 3, $1, $2, $4); }\n | BOX pat                                         { $$ = mk_node(\"PatUniq\", 1, $2); }\n+| '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident { $$ = mk_node(\"PatQualifiedPath\", 3, $2, $3, $6); }\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident\n+{\n+  $$ = mk_node(\"PatQualifiedPath\", 3, mk_node(\"PatQualifiedPath\", 3, $2, $3, $6), $7, $10);\n+}\n ;\n \n pats_or\n@@ -981,11 +989,11 @@ pat_vec_elts\n ty\n : ty_prim\n | ty_closure\n-| '<' ty_sum AS trait_ref '>' MOD_SEP ident                                { $$ = mk_node(\"TyQualifiedPath\", 3, $2, $4, $7); }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident AS trait_ref '>' MOD_SEP ident { $$ = mk_node(\"TyQualifiedPath\", 3, mk_node(\"TyQualifiedPath\", 3, $2, $4, $7), $9, $12); }\n-| '(' ty_sums ')'                                                          { $$ = mk_node(\"TyTup\", 1, $2); }\n-| '(' ty_sums ',' ')'                                                      { $$ = mk_node(\"TyTup\", 1, $2); }\n-| '(' ')'                                                                  { $$ = mk_atom(\"TyNil\"); }\n+| '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident                                      { $$ = mk_node(\"TyQualifiedPath\", 3, $2, $3, $6); }\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident { $$ = mk_node(\"TyQualifiedPath\", 3, mk_node(\"TyQualifiedPath\", 3, $2, $3, $6), $7, $10); }\n+| '(' ty_sums ')'                                                                      { $$ = mk_node(\"TyTup\", 1, $2); }\n+| '(' ty_sums ',' ')'                                                                  { $$ = mk_node(\"TyTup\", 1, $2); }\n+| '(' ')'                                                                              { $$ = mk_atom(\"TyNil\"); }\n ;\n \n ty_prim\n@@ -1551,11 +1559,7 @@ nonblock_prefix_expr\n ;\n \n expr_qualified_path\n-: '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident\n-{\n-  $$ = mk_node(\"ExprQualifiedPath\", 3, $2, $3, $6);\n-}\n-| '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args\n+: '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_qpath_params\n {\n   $$ = mk_node(\"ExprQualifiedPath\", 4, $2, $3, $6, $7);\n }\n@@ -1576,6 +1580,11 @@ expr_qualified_path\n   $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 4, $2, $3, $6, $7), $8, $11, $12);\n }\n \n+maybe_qpath_params\n+: MOD_SEP generic_args { $$ = $2; }\n+| %empty               { $$ = mk_none(); }\n+;\n+\n maybe_as_trait_ref\n : AS trait_ref { $$ = $2; }\n | %empty       { $$ = mk_none(); }\n@@ -1666,8 +1675,10 @@ block_expr\n \n full_block_expr\n : block_expr\n-| full_block_expr '.' path_generic_args_with_colons { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n-| full_block_expr '.' LIT_INTEGER                   { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n+| full_block_expr '.' path_generic_args_with_colons %prec IDENT         { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n+| full_block_expr '.' path_generic_args_with_colons '[' maybe_expr ']'  { $$ = mk_node(\"ExprIndex\", 3, $1, $3, $5); }\n+| full_block_expr '.' path_generic_args_with_colons '(' maybe_exprs ')' { $$ = mk_node(\"ExprCall\", 3, $1, $3, $5); }\n+| full_block_expr '.' LIT_INTEGER                                       { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n ;\n \n expr_match"}]}