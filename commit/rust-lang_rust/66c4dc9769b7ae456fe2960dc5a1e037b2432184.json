{"sha": "66c4dc9769b7ae456fe2960dc5a1e037b2432184", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YzRkYzk3NjliN2FlNDU2ZmUyOTYwZGM1YTFlMDM3YjI0MzIxODQ=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-13T05:25:22Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-25T01:24:31Z"}, "message": "Add missing dyn", "tree": {"sha": "dc27347987b8ef7116fcc227d89060abcbd7149e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc27347987b8ef7116fcc227d89060abcbd7149e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66c4dc9769b7ae456fe2960dc5a1e037b2432184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66c4dc9769b7ae456fe2960dc5a1e037b2432184", "html_url": "https://github.com/rust-lang/rust/commit/66c4dc9769b7ae456fe2960dc5a1e037b2432184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66c4dc9769b7ae456fe2960dc5a1e037b2432184/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8646a1714306473011e79e1c1a213928bfa6025f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8646a1714306473011e79e1c1a213928bfa6025f", "html_url": "https://github.com/rust-lang/rust/commit/8646a1714306473011e79e1c1a213928bfa6025f"}], "stats": {"total": 134, "additions": 69, "deletions": 65}, "files": [{"sha": "d90c22a3b18924496c9967a8e699ac6bc69684fc", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -18,7 +18,7 @@ fn uninhabited() {\n     a = a.clone();\n     assert!(a.upgrade().is_none());\n \n-    let mut a: Weak<Any> = a;  // Unsizing\n+    let mut a: Weak<dyn Any> = a;  // Unsizing\n     a = a.clone();\n     assert!(a.upgrade().is_none());\n }\n@@ -39,7 +39,7 @@ fn slice() {\n #[test]\n fn trait_object() {\n     let a: Arc<u32> = Arc::new(4);\n-    let a: Arc<Any> = a;  // Unsizing\n+    let a: Arc<dyn Any> = a;  // Unsizing\n \n     // Exercise is_dangling() with a DST\n     let mut a = Arc::downgrade(&a);\n@@ -49,7 +49,7 @@ fn trait_object() {\n     let mut b = Weak::<u32>::new();\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n-    let mut b: Weak<Any> = b;  // Unsizing\n+    let mut b: Weak<dyn Any> = b;  // Unsizing\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n }"}, {"sha": "0330bda5e3238527c16071d92ebe585888e80311", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -40,7 +40,7 @@ fn test_hash() {\n }\n \n fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)\n-    where F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, &mut FnMut(&i32) -> bool) -> bool\n+    where F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, &mut dyn FnMut(&i32) -> bool) -> bool\n {\n     let mut set_a = BTreeSet::new();\n     let mut set_b = BTreeSet::new();"}, {"sha": "91bc778ad4c1ec6b3cb5f6778689e6b748a8e301", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -63,7 +63,7 @@ fn test_boxed_hasher() {\n     5u32.hash(&mut hasher_1);\n     assert_eq!(ordinary_hash, hasher_1.finish());\n \n-    let mut hasher_2 = Box::new(DefaultHasher::new()) as Box<Hasher>;\n+    let mut hasher_2 = Box::new(DefaultHasher::new()) as Box<dyn Hasher>;\n     5u32.hash(&mut hasher_2);\n     assert_eq!(ordinary_hash, hasher_2.finish());\n }"}, {"sha": "9ec7c831444d18d02881e2b11a103da0332cc930", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -18,7 +18,7 @@ fn uninhabited() {\n     a = a.clone();\n     assert!(a.upgrade().is_none());\n \n-    let mut a: Weak<Any> = a;  // Unsizing\n+    let mut a: Weak<dyn Any> = a;  // Unsizing\n     a = a.clone();\n     assert!(a.upgrade().is_none());\n }\n@@ -39,7 +39,7 @@ fn slice() {\n #[test]\n fn trait_object() {\n     let a: Rc<u32> = Rc::new(4);\n-    let a: Rc<Any> = a;  // Unsizing\n+    let a: Rc<dyn Any> = a;  // Unsizing\n \n     // Exercise is_dangling() with a DST\n     let mut a = Rc::downgrade(&a);\n@@ -49,7 +49,7 @@ fn trait_object() {\n     let mut b = Weak::<u32>::new();\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n-    let mut b: Weak<Any> = b;  // Unsizing\n+    let mut b: Weak<dyn Any> = b;  // Unsizing\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n }"}, {"sha": "a80bf93953039fe91afeee3f4d451ef23314ca2a", "filename": "src/libcore/tests/any.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fany.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -17,7 +17,7 @@ static TEST: &'static str = \"Test\";\n \n #[test]\n fn any_referenced() {\n-    let (a, b, c) = (&5 as &Any, &TEST as &Any, &Test as &Any);\n+    let (a, b, c) = (&5 as &dyn Any, &TEST as &dyn Any, &Test as &dyn Any);\n \n     assert!(a.is::<i32>());\n     assert!(!b.is::<i32>());\n@@ -34,7 +34,11 @@ fn any_referenced() {\n \n #[test]\n fn any_owning() {\n-    let (a, b, c) = (box 5_usize as Box<Any>, box TEST as Box<Any>, box Test as Box<Any>);\n+    let (a, b, c) = (\n+        box 5_usize as Box<dyn Any>,\n+        box TEST as Box<dyn Any>,\n+        box Test as Box<dyn Any>,\n+    );\n \n     assert!(a.is::<usize>());\n     assert!(!b.is::<usize>());\n@@ -51,7 +55,7 @@ fn any_owning() {\n \n #[test]\n fn any_downcast_ref() {\n-    let a = &5_usize as &Any;\n+    let a = &5_usize as &dyn Any;\n \n     match a.downcast_ref::<usize>() {\n         Some(&5) => {}\n@@ -69,9 +73,9 @@ fn any_downcast_mut() {\n     let mut a = 5_usize;\n     let mut b: Box<_> = box 7_usize;\n \n-    let a_r = &mut a as &mut Any;\n+    let a_r = &mut a as &mut dyn Any;\n     let tmp: &mut usize = &mut *b;\n-    let b_r = tmp as &mut Any;\n+    let b_r = tmp as &mut dyn Any;\n \n     match a_r.downcast_mut::<usize>() {\n         Some(x) => {\n@@ -113,7 +117,7 @@ fn any_downcast_mut() {\n #[test]\n fn any_fixed_vec() {\n     let test = [0_usize; 8];\n-    let test = &test as &Any;\n+    let test = &test as &dyn Any;\n     assert!(test.is::<[usize; 8]>());\n     assert!(!test.is::<[usize; 10]>());\n }"}, {"sha": "85c9d41b65b591d255ccc2666fb3c352c4bce548", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -128,7 +128,7 @@ fn test_custom_state() {\n fn test_indirect_hasher() {\n     let mut hasher = MyHasher { hash: 0 };\n     {\n-        let mut indirect_hasher: &mut Hasher = &mut hasher;\n+        let mut indirect_hasher: &mut dyn Hasher = &mut hasher;\n         5u32.hash(&mut indirect_hasher);\n     }\n     assert_eq!(hasher.hash, 5);"}, {"sha": "9f3cba26a62db894e11bf72ae7204dda47fe4a65", "filename": "src/libcore/tests/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fintrinsics.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -22,7 +22,7 @@ fn test_typeid_sized_types() {\n #[test]\n fn test_typeid_unsized_types() {\n     trait Z {}\n-    struct X(str); struct Y(Z + 'static);\n+    struct X(str); struct Y(dyn Z + 'static);\n \n     assert_eq!(TypeId::of::<X>(), TypeId::of::<X>());\n     assert_eq!(TypeId::of::<Y>(), TypeId::of::<Y>());"}, {"sha": "714f2babbdff685ff73af76cb22f4a6a8dbab795", "filename": "src/libcore/tests/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fmem.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -109,11 +109,11 @@ fn test_transmute() {\n     trait Foo { fn dummy(&self) { } }\n     impl Foo for isize {}\n \n-    let a = box 100isize as Box<Foo>;\n+    let a = box 100isize as Box<dyn Foo>;\n     unsafe {\n         let x: ::core::raw::TraitObject = transmute(a);\n         assert!(*(x.data as *const isize) == 100);\n-        let _x: Box<Foo> = transmute(x);\n+        let _x: Box<dyn Foo> = transmute(x);\n     }\n \n     unsafe {"}, {"sha": "324ebf435651d79e2145de8aa1a369b6b4e0a0e4", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -240,7 +240,7 @@ fn test_collect() {\n     assert!(v == None);\n \n     // test that it does not take more elements than it needs\n-    let mut functions: [Box<Fn() -> Option<()>>; 3] =\n+    let mut functions: [Box<dyn Fn() -> Option<()>>; 3] =\n         [box || Some(()), box || None, box || panic!()];\n \n     let v: Option<Vec<()>> = functions.iter_mut().map(|f| (*f)()).collect();"}, {"sha": "92160910d8f705ab3e0908851ad455147776a82e", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -84,16 +84,16 @@ fn test_is_null() {\n     assert!(nms.is_null());\n \n     // Pointers to unsized types -- trait objects\n-    let ci: *const ToString = &3;\n+    let ci: *const dyn ToString = &3;\n     assert!(!ci.is_null());\n \n-    let mi: *mut ToString = &mut 3;\n+    let mi: *mut dyn ToString = &mut 3;\n     assert!(!mi.is_null());\n \n-    let nci: *const ToString = null::<isize>();\n+    let nci: *const dyn ToString = null::<isize>();\n     assert!(nci.is_null());\n \n-    let nmi: *mut ToString = null_mut::<isize>();\n+    let nmi: *mut dyn ToString = null_mut::<isize>();\n     assert!(nmi.is_null());\n }\n \n@@ -140,16 +140,16 @@ fn test_as_ref() {\n         assert_eq!(nms.as_ref(), None);\n \n         // Pointers to unsized types -- trait objects\n-        let ci: *const ToString = &3;\n+        let ci: *const dyn ToString = &3;\n         assert!(ci.as_ref().is_some());\n \n-        let mi: *mut ToString = &mut 3;\n+        let mi: *mut dyn ToString = &mut 3;\n         assert!(mi.as_ref().is_some());\n \n-        let nci: *const ToString = null::<isize>();\n+        let nci: *const dyn ToString = null::<isize>();\n         assert!(nci.as_ref().is_none());\n \n-        let nmi: *mut ToString = null_mut::<isize>();\n+        let nmi: *mut dyn ToString = null_mut::<isize>();\n         assert!(nmi.as_ref().is_none());\n     }\n }\n@@ -182,10 +182,10 @@ fn test_as_mut() {\n         assert_eq!(nms.as_mut(), None);\n \n         // Pointers to unsized types -- trait objects\n-        let mi: *mut ToString = &mut 3;\n+        let mi: *mut dyn ToString = &mut 3;\n         assert!(mi.as_mut().is_some());\n \n-        let nmi: *mut ToString = null_mut::<isize>();\n+        let nmi: *mut dyn ToString = null_mut::<isize>();\n         assert!(nmi.as_mut().is_none());\n     }\n }"}, {"sha": "0616252c82c89cf35d26e4a6e46f4eb4835ef458", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -81,7 +81,7 @@ fn test_collect() {\n     assert!(v == Err(2));\n \n     // test that it does not take more elements than it needs\n-    let mut functions: [Box<Fn() -> Result<(), isize>>; 3] =\n+    let mut functions: [Box<dyn Fn() -> Result<(), isize>>; 3] =\n         [box || Ok(()), box || Err(1), box || panic!()];\n \n     let v: Result<Vec<()>, isize> = functions.iter_mut().map(|f| (*f)()).collect();"}, {"sha": "c601f138d0a21fa556e0d71eb7fb9f79218ebd15", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -375,7 +375,7 @@ impl fmt::Debug for Item {\n \n         let fake = MAX_DEF_ID.with(|m| m.borrow().get(&self.def_id.krate)\n                                    .map(|id| self.def_id >= *id).unwrap_or(false));\n-        let def_id: &fmt::Debug = if fake { &\"**FAKE**\" } else { &self.def_id };\n+        let def_id: &dyn fmt::Debug = if fake { &\"**FAKE**\" } else { &self.def_id };\n \n         fmt.debug_struct(\"Item\")\n             .field(\"source\", &self.source)"}, {"sha": "4b8dbaf421138f4dd65fcb18f22b6178caaf508f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -55,7 +55,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     /// The stack of module NodeIds up till this point\n     pub mod_ids: RefCell<Vec<NodeId>>,\n     pub crate_name: Option<String>,\n-    pub cstore: Rc<CrateStore>,\n+    pub cstore: Rc<dyn CrateStore>,\n     pub populated_all_crate_impls: Cell<bool>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing"}, {"sha": "6cf9b143373a8ad26bf09a2f4b07771b8796ff67", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -395,7 +395,7 @@ impl Class {\n \n fn write_header(class: Option<&str>,\n                 id: Option<&str>,\n-                out: &mut Write)\n+                out: &mut dyn Write)\n                 -> io::Result<()> {\n     write!(out, \"<pre \")?;\n     if let Some(id) = id {\n@@ -404,6 +404,6 @@ fn write_header(class: Option<&str>,\n     write!(out, \"class=\\\"rust {}\\\">\\n\", class.unwrap_or(\"\"))\n }\n \n-fn write_footer(out: &mut Write) -> io::Result<()> {\n+fn write_footer(out: &mut dyn Write) -> io::Result<()> {\n     write!(out, \"</pre>\\n\")\n }"}, {"sha": "af7c0a04215c12f6356698aaef3029192f965ab5", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -32,7 +32,7 @@ pub struct Page<'a> {\n }\n \n pub fn render<T: fmt::Display, S: fmt::Display>(\n-    dst: &mut io::Write, layout: &Layout, page: &Page, sidebar: &S, t: &T,\n+    dst: &mut dyn io::Write, layout: &Layout, page: &Page, sidebar: &S, t: &T,\n     css_file_extension: bool, themes: &[PathBuf])\n     -> io::Result<()>\n {\n@@ -194,7 +194,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     )\n }\n \n-pub fn redirect(dst: &mut io::Write, url: &str) -> io::Result<()> {\n+pub fn redirect(dst: &mut dyn io::Write, url: &str) -> io::Result<()> {\n     // <script> triggers a redirect before refresh, so this is fine.\n     write!(dst,\n r##\"<!DOCTYPE html>"}, {"sha": "f137f4acf448655428628abd07ec23b06c222a2d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -1822,7 +1822,7 @@ impl Context {\n     }\n \n     fn render_item(&self,\n-                   writer: &mut io::Write,\n+                   writer: &mut dyn io::Write,\n                    it: &clean::Item,\n                    pushname: bool)\n                    -> io::Result<()> {"}, {"sha": "2966b9e9819b4771724bf3731f6fd9fa7194ad37", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -249,7 +249,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         }\n         fn flush(&mut self) -> io::Result<()> { Ok(()) }\n     }\n-    struct Bomb(Arc<Mutex<Vec<u8>>>, Box<Write+Send>);\n+    struct Bomb(Arc<Mutex<Vec<u8>>>, Box<dyn Write+Send>);\n     impl Drop for Bomb {\n         fn drop(&mut self) {\n             let _ = self.1.write_all(&self.0.lock().unwrap());"}, {"sha": "02bc467541ecad6ec4f7c1a158c77b83cf1d19ba", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -51,7 +51,7 @@ pub struct Command {\n     uid: Option<u32>,\n     gid: Option<u32>,\n     saw_nul: bool,\n-    closures: Vec<Box<FnMut() -> io::Result<()> + Send + Sync>>,\n+    closures: Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>,\n     stdin: Option<Stdio>,\n     stdout: Option<Stdio>,\n     stderr: Option<Stdio>,\n@@ -122,7 +122,7 @@ impl Command {\n     }\n \n     pub fn before_exec(&mut self,\n-                       f: Box<FnMut() -> io::Result<()> + Send + Sync>) {\n+                       f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {\n         self.closures.push(f);\n     }\n "}, {"sha": "7c5dec1ee87e1a8d306d27299fc5c13443d5afe9", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -416,7 +416,7 @@ impl TestProps {\n     }\n }\n \n-fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n+fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n     if testfile.is_dir() {\n         return;\n     }"}, {"sha": "f056a041c13440c2ec748cbfa97975d96622745b", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -21,7 +21,7 @@ mod imp {\n     pub fn read2(\n         out_pipe: ChildStdout,\n         err_pipe: ChildStderr,\n-        data: &mut FnMut(bool, &mut Vec<u8>, bool),\n+        data: &mut dyn FnMut(bool, &mut Vec<u8>, bool),\n     ) -> io::Result<()> {\n         let mut buffer = Vec::new();\n         out_pipe.read_to_end(&mut buffer)?;\n@@ -45,7 +45,7 @@ mod imp {\n     pub fn read2(\n         mut out_pipe: ChildStdout,\n         mut err_pipe: ChildStderr,\n-        data: &mut FnMut(bool, &mut Vec<u8>, bool),\n+        data: &mut dyn FnMut(bool, &mut Vec<u8>, bool),\n     ) -> io::Result<()> {\n         unsafe {\n             libc::fcntl(out_pipe.as_raw_fd(), libc::F_SETFL, libc::O_NONBLOCK);\n@@ -133,7 +133,7 @@ mod imp {\n     pub fn read2(\n         out_pipe: ChildStdout,\n         err_pipe: ChildStderr,\n-        data: &mut FnMut(bool, &mut Vec<u8>, bool),\n+        data: &mut dyn FnMut(bool, &mut Vec<u8>, bool),\n     ) -> io::Result<()> {\n         let mut out = Vec::new();\n         let mut err = Vec::new();"}, {"sha": "e72f90554d3c504bcc144b01f6cda4387912ac36", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -44,18 +44,18 @@ impl OutputFormat {\n }\n \n trait Formatter {\n-    fn header(&self, output: &mut Write) -> Result<(), Box<Error>>;\n-    fn title(&self, output: &mut Write) -> Result<(), Box<Error>>;\n-    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n-                        err_code: &str) -> Result<(), Box<Error>>;\n-    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>>;\n+    fn header(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>>;\n+    fn title(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>>;\n+    fn error_code_block(&self, output: &mut dyn Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<dyn Error>>;\n+    fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>>;\n }\n \n struct HTMLFormatter;\n struct MarkdownFormatter;\n \n impl Formatter for HTMLFormatter {\n-    fn header(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn header(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         write!(output, r##\"<!DOCTYPE html>\n <html>\n <head>\n@@ -75,13 +75,13 @@ impl Formatter for HTMLFormatter {\n         Ok(())\n     }\n \n-    fn title(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn title(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         write!(output, \"<h1>Rust Compiler Error Index</h1>\\n\")?;\n         Ok(())\n     }\n \n-    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n-                        err_code: &str) -> Result<(), Box<Error>> {\n+    fn error_code_block(&self, output: &mut dyn Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<dyn Error>> {\n         // Enclose each error in a div so they can be shown/hidden en masse.\n         let desc_desc = match info.description {\n             Some(_) => \"error-described\",\n@@ -108,7 +108,7 @@ impl Formatter for HTMLFormatter {\n         Ok(())\n     }\n \n-    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         write!(output, r##\"<script>\n function onEach(arr, func) {{\n     if (arr && arr.length > 0 && func) {{\n@@ -174,31 +174,31 @@ onEach(document.getElementsByClassName('rust-example-rendered'), function(e) {{\n \n impl Formatter for MarkdownFormatter {\n     #[allow(unused_variables)]\n-    fn header(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn header(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         Ok(())\n     }\n \n-    fn title(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn title(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         write!(output, \"# Rust Compiler Error Index\\n\")?;\n         Ok(())\n     }\n \n-    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n-                        err_code: &str) -> Result<(), Box<Error>> {\n+    fn error_code_block(&self, output: &mut dyn Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<dyn Error>> {\n         Ok(match info.description {\n             Some(ref desc) => write!(output, \"## {}\\n{}\\n\", err_code, desc)?,\n             None => (),\n         })\n     }\n \n     #[allow(unused_variables)]\n-    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         Ok(())\n     }\n }\n \n /// Load all the metadata files from `metadata_dir` into an in-memory map.\n-fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<Error>> {\n+fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<dyn Error>> {\n     let mut all_errors = BTreeMap::new();\n \n     for entry in read_dir(metadata_dir)? {\n@@ -219,7 +219,7 @@ fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<Error>>\n \n /// Output an HTML page for the errors in `err_map` to `output_path`.\n fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Path,\n-                                   formatter: T) -> Result<(), Box<Error>> {\n+                                   formatter: T) -> Result<(), Box<dyn Error>> {\n     let mut output_file = File::create(output_path)?;\n \n     formatter.header(&mut output_file)?;\n@@ -232,7 +232,7 @@ fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Pat\n     formatter.footer(&mut output_file)\n }\n \n-fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<Error>> {\n+fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Error>> {\n     let build_arch = env::var(\"CFG_BUILD\")?;\n     let metadata_dir = get_metadata_dir(&build_arch);\n     let err_map = load_all_errors(&metadata_dir)?;"}, {"sha": "f68ba0b095bd0b72d253efc6de6680fb41cb9996", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -334,7 +334,7 @@ fn get_and_check_lib_features(base_src_path: &Path,\n }\n \n fn map_lib_features(base_src_path: &Path,\n-                    mf: &mut FnMut(Result<(&str, Feature), &str>, &Path, usize)) {\n+                    mf: &mut dyn FnMut(Result<(&str, Feature), &str>, &Path, usize)) {\n     let mut contents = String::new();\n     super::walk(base_src_path,\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),"}, {"sha": "bb041b39785ec661446824adc649c169dac191b1", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c4dc9769b7ae456fe2960dc5a1e037b2432184/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=66c4dc9769b7ae456fe2960dc5a1e037b2432184", "patch": "@@ -82,13 +82,13 @@ fn filter_dirs(path: &Path) -> bool {\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n-fn walk_many(paths: &[&Path], skip: &mut FnMut(&Path) -> bool, f: &mut FnMut(&Path)) {\n+fn walk_many(paths: &[&Path], skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&Path)) {\n     for path in paths {\n         walk(path, skip, f);\n     }\n }\n \n-fn walk(path: &Path, skip: &mut FnMut(&Path) -> bool, f: &mut FnMut(&Path)) {\n+fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&Path)) {\n     for entry in t!(fs::read_dir(path), path) {\n         let entry = t!(entry);\n         let kind = t!(entry.file_type());"}]}