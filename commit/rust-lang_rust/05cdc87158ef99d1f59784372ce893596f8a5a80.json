{"sha": "05cdc87158ef99d1f59784372ce893596f8a5a80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Y2RjODcxNThlZjk5ZDFmNTk3ODQzNzJjZTg5MzU5NmY4YTVhODA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-26T08:54:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-26T08:54:08Z"}, "message": "Precompute expected type during completion", "tree": {"sha": "c8090164eefa2074005b5d6e36a53b5f78aec1d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8090164eefa2074005b5d6e36a53b5f78aec1d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05cdc87158ef99d1f59784372ce893596f8a5a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05cdc87158ef99d1f59784372ce893596f8a5a80", "html_url": "https://github.com/rust-lang/rust/commit/05cdc87158ef99d1f59784372ce893596f8a5a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05cdc87158ef99d1f59784372ce893596f8a5a80/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe99a29ad1226dd3f6801ea4bdb575506324be07", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe99a29ad1226dd3f6801ea4bdb575506324be07", "html_url": "https://github.com/rust-lang/rust/commit/fe99a29ad1226dd3f6801ea4bdb575506324be07"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "f559f2b9705f4ef235121a867e216f98e6497299", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/05cdc87158ef99d1f59784372ce893596f8a5a80/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdc87158ef99d1f59784372ce893596f8a5a80/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=05cdc87158ef99d1f59784372ce893596f8a5a80", "patch": "@@ -4,7 +4,7 @@ use hir::ScopeDef;\n use test_utils::tested_by;\n \n use crate::completion::{CompletionContext, Completions};\n-use hir::{Adt, ModuleDef};\n+use hir::{Adt, ModuleDef, Type};\n use ra_syntax::AstNode;\n \n pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -15,7 +15,9 @@ pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n-    complete_enum_variants(acc, ctx);\n+    if let Some(ty) = &ctx.expected_type {\n+        complete_enum_variants(acc, ctx, ty);\n+    }\n \n     if ctx.is_pat_binding_or_const {\n         return;\n@@ -34,26 +36,24 @@ pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     });\n }\n \n-fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext) {\n-    if let Some(ty) = ctx.expected_type_of(&ctx.token.parent()) {\n-        if let Some(Adt::Enum(enum_data)) = ty.as_adt() {\n-            let variants = enum_data.variants(ctx.db);\n-\n-            let module = if let Some(module) = ctx.scope().module() {\n-                // Compute path from the completion site if available.\n-                module\n-            } else {\n-                // Otherwise fall back to the enum's definition site.\n-                enum_data.module(ctx.db)\n-            };\n-\n-            for variant in variants {\n-                if let Some(path) = module.find_use_path(ctx.db, ModuleDef::from(variant)) {\n-                    // Variants with trivial paths are already added by the existing completion logic,\n-                    // so we should avoid adding these twice\n-                    if path.segments.len() > 1 {\n-                        acc.add_enum_variant(ctx, variant, Some(path.to_string()));\n-                    }\n+fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &Type) {\n+    if let Some(Adt::Enum(enum_data)) = ty.as_adt() {\n+        let variants = enum_data.variants(ctx.db);\n+\n+        let module = if let Some(module) = ctx.scope().module() {\n+            // Compute path from the completion site if available.\n+            module\n+        } else {\n+            // Otherwise fall back to the enum's definition site.\n+            enum_data.module(ctx.db)\n+        };\n+\n+        for variant in variants {\n+            if let Some(path) = module.find_use_path(ctx.db, ModuleDef::from(variant)) {\n+                // Variants with trivial paths are already added by the existing completion logic,\n+                // so we should avoid adding these twice\n+                if path.segments.len() > 1 {\n+                    acc.add_enum_variant(ctx, variant, Some(path.to_string()));\n                 }\n             }\n         }"}, {"sha": "118fceb2e746ceab80caaa7167f440266c269635", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/05cdc87158ef99d1f59784372ce893596f8a5a80/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdc87158ef99d1f59784372ce893596f8a5a80/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=05cdc87158ef99d1f59784372ce893596f8a5a80", "patch": "@@ -5,7 +5,7 @@ use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::{find_covering_element, find_node_at_offset},\n-    ast, AstNode,\n+    ast, match_ast, AstNode,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n@@ -26,6 +26,7 @@ pub(crate) struct CompletionContext<'a> {\n     /// The token before the cursor, in the macro-expanded file.\n     pub(super) token: SyntaxToken,\n     pub(super) krate: Option<hir::Crate>,\n+    pub(super) expected_type: Option<Type>,\n     pub(super) name_ref_syntax: Option<ast::NameRef>,\n     pub(super) function_syntax: Option<ast::FnDef>,\n     pub(super) use_item_syntax: Option<ast::UseItem>,\n@@ -93,6 +94,7 @@ impl<'a> CompletionContext<'a> {\n             token,\n             offset: position.offset,\n             krate,\n+            expected_type: None,\n             name_ref_syntax: None,\n             function_syntax: None,\n             use_item_syntax: None,\n@@ -175,23 +177,30 @@ impl<'a> CompletionContext<'a> {\n         self.sema.scope_at_offset(&self.token.parent(), self.offset)\n     }\n \n-    pub(crate) fn expected_type_of(&self, node: &SyntaxNode) -> Option<Type> {\n-        for ancestor in node.ancestors() {\n-            if let Some(pat) = ast::Pat::cast(ancestor.clone()) {\n-                return self.sema.type_of_pat(&pat);\n-            } else if let Some(expr) = ast::Expr::cast(ancestor) {\n-                return self.sema.type_of_expr(&expr);\n-            }\n-        }\n-        None\n-    }\n-\n     fn fill(\n         &mut self,\n         original_file: &SyntaxNode,\n         file_with_fake_ident: SyntaxNode,\n         offset: TextSize,\n     ) {\n+        // FIXME: this is wrong in at least two cases:\n+        //  * when there's no token `foo(<|>)`\n+        //  * when there is a token, but it happens to have type of it's own\n+        self.expected_type = self\n+            .token\n+            .ancestors()\n+            .find_map(|node| {\n+                let ty = match_ast! {\n+                    match node {\n+                        ast::Pat(it) => self.sema.type_of_pat(&it),\n+                        ast::Expr(it) => self.sema.type_of_expr(&it),\n+                        _ => return None,\n+                    }\n+                };\n+                Some(ty)\n+            })\n+            .flatten();\n+\n         // First, let's try to complete a reference to some declaration.\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(&file_with_fake_ident, offset) {\n             // Special case, `trait T { fn foo(i_am_a_name_ref) {} }`."}, {"sha": "77d3543760bb3208899660eda889691809527b75", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cdc87158ef99d1f59784372ce893596f8a5a80/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cdc87158ef99d1f59784372ce893596f8a5a80/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=05cdc87158ef99d1f59784372ce893596f8a5a80", "patch": "@@ -351,7 +351,7 @@ impl Builder {\n         }\n \n         // Don't add parentheses if the expected type is some function reference.\n-        if let Some(ty) = ctx.expected_type_of(&ctx.token.parent()) {\n+        if let Some(ty) = &ctx.expected_type {\n             if ty.is_fn() {\n                 return self;\n             }"}]}