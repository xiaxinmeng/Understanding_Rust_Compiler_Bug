{"sha": "8fc1d68413b98cd50e6e55b6e33145ccd584b6a1", "node_id": "C_kwDOAAsO6NoAKDhmYzFkNjg0MTNiOThjZDUwZTZlNTViNmUzMzE0NWNjZDU4NGI2YTE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-16T10:14:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-16T17:39:52Z"}, "message": "Account for variance in outlives verification.", "tree": {"sha": "9b3a8a9c3f0a0134f9b2de663bfcb9548e63a6b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b3a8a9c3f0a0134f9b2de663bfcb9548e63a6b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1", "html_url": "https://github.com/rust-lang/rust/commit/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8889c6fa0ea8b2045205bc1a4550260c34be98c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8889c6fa0ea8b2045205bc1a4550260c34be98c6", "html_url": "https://github.com/rust-lang/rust/commit/8889c6fa0ea8b2045205bc1a4550260c34be98c6"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "cb63d2f18b63485ae95ffb76303a04c221b5f2ee", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=8fc1d68413b98cd50e6e55b6e33145ccd584b6a1", "patch": "@@ -143,7 +143,7 @@ fn compute_components<'tcx>(\n                     // through and constrain Pi.\n                     let mut subcomponents = smallvec![];\n                     let mut subvisited = SsoHashSet::new();\n-                    compute_components_recursive(tcx, ty.into(), &mut subcomponents, &mut subvisited);\n+                    compute_alias_components_recursive(tcx, ty, &mut subcomponents, &mut subvisited);\n                     out.push(Component::EscapingAlias(subcomponents.into_iter().collect()));\n                 }\n             }\n@@ -193,7 +193,43 @@ fn compute_components<'tcx>(\n ///\n /// This should not be used to get the components of `parent` itself.\n /// Use [push_outlives_components] instead.\n-pub(super) fn compute_components_recursive<'tcx>(\n+pub(super) fn compute_alias_components_recursive<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    alias_ty: Ty<'tcx>,\n+    out: &mut SmallVec<[Component<'tcx>; 4]>,\n+    visited: &mut SsoHashSet<GenericArg<'tcx>>,\n+) {\n+    let ty::Alias(kind, alias_ty) = alias_ty.kind() else { bug!() };\n+    let opt_variances = if *kind == ty::Opaque { tcx.variances_of(alias_ty.def_id) } else { &[] };\n+    for (index, child) in alias_ty.substs.iter().enumerate() {\n+        if opt_variances.get(index) == Some(&ty::Bivariant) {\n+            continue;\n+        }\n+        if !visited.insert(child) {\n+            continue;\n+        }\n+        match child.unpack() {\n+            GenericArgKind::Type(ty) => {\n+                compute_components(tcx, ty, out, visited);\n+            }\n+            GenericArgKind::Lifetime(lt) => {\n+                // Ignore late-bound regions.\n+                if !lt.is_late_bound() {\n+                    out.push(Component::Region(lt));\n+                }\n+            }\n+            GenericArgKind::Const(_) => {\n+                compute_components_recursive(tcx, child, out, visited);\n+            }\n+        }\n+    }\n+}\n+\n+/// Collect [Component]s for *all* the substs of `parent`.\n+///\n+/// This should not be used to get the components of `parent` itself.\n+/// Use [push_outlives_components] instead.\n+fn compute_components_recursive<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     parent: GenericArg<'tcx>,\n     out: &mut SmallVec<[Component<'tcx>; 4]>,"}, {"sha": "e1cb53bc71d330072e214e9eabf6e51620e13fb6", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=8fc1d68413b98cd50e6e55b6e33145ccd584b6a1", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::outlives::components::{compute_components_recursive, Component};\n+use crate::infer::outlives::components::{compute_alias_components_recursive, Component};\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::region_constraints::VerifyIfEq;\n use crate::infer::VerifyBound;\n@@ -130,7 +130,12 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         // see the extensive comment in projection_must_outlive\n         let recursive_bound = {\n             let mut components = smallvec![];\n-            compute_components_recursive(self.tcx, alias_ty_as_ty.into(), &mut components, visited);\n+            compute_alias_components_recursive(\n+                self.tcx,\n+                alias_ty_as_ty.into(),\n+                &mut components,\n+                visited,\n+            );\n             self.bound_from_components(&components, visited)\n         };\n "}, {"sha": "3fbf0b266c3e36b70065f4c4cad7a5c58f990b7c", "filename": "tests/ui/impl-trait/issue-108592.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8889c6fa0ea8b2045205bc1a4550260c34be98c6/tests%2Fui%2Fimpl-trait%2Fissue-108592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8889c6fa0ea8b2045205bc1a4550260c34be98c6/tests%2Fui%2Fimpl-trait%2Fissue-108592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-108592.stderr?ref=8889c6fa0ea8b2045205bc1a4550260c34be98c6", "patch": "@@ -1,21 +0,0 @@\n-error[E0428]: the name `test` is defined multiple times\n-  --> $DIR/issue-108592.rs:17:1\n-   |\n-LL | fn test() {\n-   | --------- previous definition of the value `test` here\n-...\n-LL | fn test(_: &Opaque<'_>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ `test` redefined here\n-   |\n-   = note: `test` must be defined only once in the value namespace of this module\n-\n-error[E0601]: `main` function not found in crate `issue_108592`\n-  --> $DIR/issue-108592.rs:20:2\n-   |\n-LL | }\n-   |  ^ consider adding a `main` function to `$DIR/issue-108592.rs`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0428, E0601.\n-For more information about an error, try `rustc --explain E0428`."}]}