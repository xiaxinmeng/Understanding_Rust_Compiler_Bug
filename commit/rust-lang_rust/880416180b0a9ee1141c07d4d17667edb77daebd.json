{"sha": "880416180b0a9ee1141c07d4d17667edb77daebd", "node_id": "C_kwDOAAsO6NoAKDg4MDQxNjE4MGIwYTllZTExNDFjMDdkNGQxNzY2N2VkYjc3ZGFlYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T05:50:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T05:50:54Z"}, "message": "Auto merge of #99181 - lcnr:arenaGTrc, r=wesleywiser\n\n`arena > Rc` for query results\n\nThe `Rc`s have to live for the whole duration as their count cannot go below 1 while stored as part of the query results.\n\nBy storing them in an arena we should save a bit of memory because we don't have as many independent allocations and also don't have to clone the `Rc` anymore.", "tree": {"sha": "f1df1bcde149b93dff2848031840f400485a5dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1df1bcde149b93dff2848031840f400485a5dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880416180b0a9ee1141c07d4d17667edb77daebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880416180b0a9ee1141c07d4d17667edb77daebd", "html_url": "https://github.com/rust-lang/rust/commit/880416180b0a9ee1141c07d4d17667edb77daebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880416180b0a9ee1141c07d4d17667edb77daebd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa64d0e53c15e1920bd394500da010a4cdd057b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa64d0e53c15e1920bd394500da010a4cdd057b", "html_url": "https://github.com/rust-lang/rust/commit/2fa64d0e53c15e1920bd394500da010a4cdd057b"}, {"sha": "0fc5296876e898d13e32311e305ba71c7f0086d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc5296876e898d13e32311e305ba71c7f0086d8", "html_url": "https://github.com/rust-lang/rust/commit/0fc5296876e898d13e32311e305ba71c7f0086d8"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "6cfe5efb68886de601772d5f277627c277efb302", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=880416180b0a9ee1141c07d4d17667edb77daebd", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n         let TypeOpOutput { output, constraints, error_info } = op.fully_perform(self.infcx)?;\n \n-        if let Some(data) = &constraints {\n+        if let Some(data) = constraints {\n             self.push_region_constraints(locations, category, data);\n         }\n "}, {"sha": "fe66821ad752b20cada82e38728752e022a244af", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=880416180b0a9ee1141c07d4d17667edb77daebd", "patch": "@@ -335,7 +335,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n     /// the same time, compute and add any implied bounds that come\n     /// from this local.\n     #[instrument(level = \"debug\", skip(self))]\n-    fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<Rc<QueryRegionConstraints<'tcx>>> {\n+    fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<&'tcx QueryRegionConstraints<'tcx>> {\n         let TypeOpOutput { output: bounds, constraints, .. } = self\n             .param_env\n             .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })"}, {"sha": "4431a2e8ec60d6f7878b4409d74955db0b1679e1", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=880416180b0a9ee1141c07d4d17667edb77daebd", "patch": "@@ -225,7 +225,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n         debug!(\"{:?} normalized to {:?}\", t, norm_ty);\n \n-        for data in constraints.into_iter().collect::<Vec<_>>() {\n+        for data in constraints {\n             ConstraintConversion::new(\n                 self.infcx,\n                 &self.borrowck_context.universal_regions,"}, {"sha": "42b577175e43757b77357854e6a6047cf0a7f5d7", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=880416180b0a9ee1141c07d4d17667edb77daebd", "patch": "@@ -98,7 +98,7 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n \n struct DropData<'tcx> {\n     dropck_result: DropckOutlivesResult<'tcx>,\n-    region_constraint_data: Option<Rc<QueryRegionConstraints<'tcx>>>,\n+    region_constraint_data: Option<&'tcx QueryRegionConstraints<'tcx>>,\n }\n \n struct LivenessResults<'me, 'typeck, 'flow, 'tcx> {"}, {"sha": "b94de537dc81e5525e5c5b14889c496315eee470", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=880416180b0a9ee1141c07d4d17667edb77daebd", "patch": "@@ -55,6 +55,7 @@ macro_rules! arena_types {\n             [] dtorck_constraint: rustc_middle::traits::query::DropckConstraint<'tcx>,\n             [] candidate_step: rustc_middle::traits::query::CandidateStep<'tcx>,\n             [] autoderef_bad_ty: rustc_middle::traits::query::MethodAutoderefBadTy<'tcx>,\n+            [] query_region_constraints: rustc_middle::infer::canonical::QueryRegionConstraints<'tcx>,\n             [] type_op_subtype:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, ()>"}, {"sha": "c99564936aad92298ec9d3c5f31896593fe32106", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=880416180b0a9ee1141c07d4d17667edb77daebd", "patch": "@@ -9,7 +9,6 @@ use rustc_infer::traits::TraitEngineExt as _;\n use rustc_span::source_map::DUMMY_SP;\n \n use std::fmt;\n-use std::rc::Rc;\n \n pub struct CustomTypeOp<F, G> {\n     closure: F,\n@@ -109,7 +108,7 @@ pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n         Ok((\n             TypeOpOutput {\n                 output: value,\n-                constraints: Some(Rc::new(region_constraints)),\n+                constraints: Some(infcx.tcx.arena.alloc(region_constraints)),\n                 error_info: None,\n             },\n             region_constraint_data,"}, {"sha": "578e1d00cf9ef406ec4520f20555aa8f7a0c7297", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880416180b0a9ee1141c07d4d17667edb77daebd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=880416180b0a9ee1141c07d4d17667edb77daebd", "patch": "@@ -10,7 +10,6 @@ use rustc_infer::traits::PredicateObligations;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n use std::fmt;\n-use std::rc::Rc;\n \n pub mod ascribe_user_type;\n pub mod custom;\n@@ -41,7 +40,7 @@ pub struct TypeOpOutput<'tcx, Op: TypeOp<'tcx>> {\n     /// The output from the type op.\n     pub output: Op::Output,\n     /// Any region constraints from performing the type op.\n-    pub constraints: Option<Rc<QueryRegionConstraints<'tcx>>>,\n+    pub constraints: Option<&'tcx QueryRegionConstraints<'tcx>>,\n     /// Used for error reporting to be able to rerun the query\n     pub error_info: Option<Op::ErrorInfo>,\n }\n@@ -156,11 +155,14 @@ where\n             }\n         }\n \n-        // Promote the final query-region-constraints into a\n-        // (optional) ref-counted vector:\n-        let region_constraints =\n-            if region_constraints.is_empty() { None } else { Some(Rc::new(region_constraints)) };\n-\n-        Ok(TypeOpOutput { output, constraints: region_constraints, error_info })\n+        Ok(TypeOpOutput {\n+            output,\n+            constraints: if region_constraints.is_empty() {\n+                None\n+            } else {\n+                Some(infcx.tcx.arena.alloc(region_constraints))\n+            },\n+            error_info,\n+        })\n     }\n }"}]}