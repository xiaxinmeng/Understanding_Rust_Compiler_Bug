{"sha": "265f2fa4de8fee5ad2e2c21904e51622de2aec24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NWYyZmE0ZGU4ZmVlNWFkMmUyYzIxOTA0ZTUxNjIyZGUyYWVjMjQ=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-17T15:26:58Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:35:08Z"}, "message": "rustc_codegen_llvm: fix tidy errors.", "tree": {"sha": "71c40df2e1a7c013222b475141f8445a352cc346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c40df2e1a7c013222b475141f8445a352cc346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/265f2fa4de8fee5ad2e2c21904e51622de2aec24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/265f2fa4de8fee5ad2e2c21904e51622de2aec24", "html_url": "https://github.com/rust-lang/rust/commit/265f2fa4de8fee5ad2e2c21904e51622de2aec24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/265f2fa4de8fee5ad2e2c21904e51622de2aec24/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba006440eeae07cb6d6285a6b64f4374754d2300", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba006440eeae07cb6d6285a6b64f4374754d2300", "html_url": "https://github.com/rust-lang/rust/commit/ba006440eeae07cb6d6285a6b64f4374754d2300"}], "stats": {"total": 101, "additions": 77, "deletions": 24}, "files": [{"sha": "db044878fe745e194b12d215cc0adc1453337e53", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -128,7 +128,10 @@ fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize {\n     }\n }\n \n-pub fn create_target_machine(sess: &Session, find_features: bool) -> &'static mut llvm::TargetMachine {\n+pub fn create_target_machine(\n+    sess: &Session,\n+    find_features: bool,\n+) -> &'static mut llvm::TargetMachine {\n     target_machine_factory(sess, find_features)().unwrap_or_else(|err| {\n         llvm_err(sess.diagnostic(), err).raise()\n     })"}, {"sha": "8278b443a4c83a9e1394f16783b44ee00ca42e1c", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -395,14 +395,22 @@ pub fn from_immediate(bx: &Builder<'_, 'll, '_>, val: &'ll Value) -> &'ll Value\n     }\n }\n \n-pub fn to_immediate(bx: &Builder<'_, 'll, '_>, val: &'ll Value, layout: layout::TyLayout) -> &'ll Value {\n+pub fn to_immediate(\n+    bx: &Builder<'_, 'll, '_>,\n+    val: &'ll Value,\n+    layout: layout::TyLayout,\n+) -> &'ll Value {\n     if let layout::Abi::Scalar(ref scalar) = layout.abi {\n         return to_immediate_scalar(bx, val, scalar);\n     }\n     val\n }\n \n-pub fn to_immediate_scalar(bx: &Builder<'_, 'll, '_>, val: &'ll Value, scalar: &layout::Scalar) -> &'ll Value {\n+pub fn to_immediate_scalar(\n+    bx: &Builder<'_, 'll, '_>,\n+    val: &'ll Value,\n+    scalar: &layout::Scalar,\n+) -> &'ll Value {\n     if scalar.is_bool() {\n         return bx.trunc(val, Type::i1(bx.cx));\n     }"}, {"sha": "2ec5fcae2a648164e694764e5af84c2af03e5670", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -157,14 +157,24 @@ impl Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    pub fn cond_br(&self, cond: &'ll Value, then_llbb: &'ll BasicBlock, else_llbb: &'ll BasicBlock) {\n+    pub fn cond_br(\n+        &self,\n+        cond: &'ll Value,\n+        then_llbb: &'ll BasicBlock,\n+        else_llbb: &'ll BasicBlock,\n+    ) {\n         self.count_insn(\"condbr\");\n         unsafe {\n             llvm::LLVMBuildCondBr(self.llbuilder, cond, then_llbb, else_llbb);\n         }\n     }\n \n-    pub fn switch(&self, v: &'ll Value, else_llbb: &'ll BasicBlock, num_cases: usize) -> &'ll Value {\n+    pub fn switch(\n+        &self,\n+        v: &'ll Value,\n+        else_llbb: &'ll BasicBlock,\n+        num_cases: usize,\n+    ) -> &'ll Value {\n         unsafe {\n             llvm::LLVMBuildSwitch(self.llbuilder, v, else_llbb, num_cases as c_uint)\n         }\n@@ -814,8 +824,8 @@ impl Builder<'a, 'll, 'tcx> {\n             // FIXME: add a non-fast math version once\n             // https://bugs.llvm.org/show_bug.cgi?id=36732\n             // is fixed.\n-            let instr = llvm::LLVMRustBuildVectorReduceFAdd(self.llbuilder, acc, src);\n-            let instr = instr.expect(\"LLVMRustBuildVectorReduceFAdd is not available in LLVM version < 5.0\");\n+            let instr = llvm::LLVMRustBuildVectorReduceFAdd(self.llbuilder, acc, src)\n+                .expect(\"LLVMRustBuildVectorReduceFAdd is not available in LLVM version < 5.0\");\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }\n@@ -826,8 +836,8 @@ impl Builder<'a, 'll, 'tcx> {\n             // FIXME: add a non-fast math version once\n             // https://bugs.llvm.org/show_bug.cgi?id=36732\n             // is fixed.\n-            let instr = llvm::LLVMRustBuildVectorReduceFMul(self.llbuilder, acc, src);\n-            let instr = instr.expect(\"LLVMRustBuildVectorReduceFMul is not available in LLVM version < 5.0\");\n+            let instr = llvm::LLVMRustBuildVectorReduceFMul(self.llbuilder, acc, src)\n+                .expect(\"LLVMRustBuildVectorReduceFMul is not available in LLVM version < 5.0\");\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }\n@@ -884,17 +894,17 @@ impl Builder<'a, 'll, 'tcx> {\n     pub fn vector_reduce_fmin_fast(&self, src: &'ll Value) -> &'ll Value {\n         self.count_insn(\"vector.reduce.fmin_fast\");\n         unsafe {\n-            let instr = llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, /*NoNaNs:*/ true);\n-            let instr = instr.expect(\"LLVMRustBuildVectorReduceFMin is not available in LLVM version < 5.0\");\n+            let instr = llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, /*NoNaNs:*/ true)\n+                .expect(\"LLVMRustBuildVectorReduceFMin is not available in LLVM version < 5.0\");\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }\n     }\n     pub fn vector_reduce_fmax_fast(&self, src: &'ll Value) -> &'ll Value {\n         self.count_insn(\"vector.reduce.fmax_fast\");\n         unsafe {\n-            let instr = llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, /*NoNaNs:*/ true);\n-            let instr = instr.expect(\"LLVMRustBuildVectorReduceFMax is not available in LLVM version < 5.0\");\n+            let instr = llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, /*NoNaNs:*/ true)\n+                .expect(\"LLVMRustBuildVectorReduceFMax is not available in LLVM version < 5.0\");\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }"}, {"sha": "51fc610408b5213538dc7f2ce8c6fa5aa6df8ff5", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -183,7 +183,11 @@ pub fn C_u8(cx: &CodegenCx<'ll, '_>, i: u8) -> &'ll Value {\n \n // This is a 'c-like' raw string, which differs from\n // our boxed-and-length-annotated strings.\n-pub fn C_cstr(cx: &CodegenCx<'ll, '_>, s: LocalInternedString, null_terminated: bool) -> &'ll Value {\n+pub fn C_cstr(\n+    cx: &CodegenCx<'ll, '_>,\n+    s: LocalInternedString,\n+    null_terminated: bool,\n+) -> &'ll Value {\n     unsafe {\n         if let Some(&llval) = cx.const_cstr_cache.borrow().get(&s) {\n             return llval;\n@@ -225,7 +229,11 @@ pub fn C_struct(cx: &CodegenCx<'ll, '_>, elts: &[&'ll Value], packed: bool) -> &\n     C_struct_in_context(cx.llcx, elts, packed)\n }\n \n-pub fn C_struct_in_context(llcx: &'ll llvm::Context, elts: &[&'ll Value], packed: bool) -> &'ll Value {\n+pub fn C_struct_in_context(\n+    llcx: &'ll llvm::Context,\n+    elts: &[&'ll Value],\n+    packed: bool,\n+) -> &'ll Value {\n     unsafe {\n         llvm::LLVMConstStructInContext(llcx,\n                                        elts.as_ptr(), elts.len() as c_uint,"}, {"sha": "11f8e75831eedfa0c5d4d30cd11d4a06edba13a5", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -155,7 +155,11 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n     !is_any_library(sess) && get_reloc_model(sess) == llvm::RelocMode::PIC\n }\n \n-pub unsafe fn create_module(sess: &Session, llcx: &'ll llvm::Context, mod_name: &str) -> &'ll llvm::Module {\n+pub unsafe fn create_module(\n+    sess: &Session,\n+    llcx: &'ll llvm::Context,\n+    mod_name: &str,\n+) -> &'ll llvm::Module {\n     let mod_name = CString::new(mod_name).unwrap();\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n "}, {"sha": "5273032f2d7f5fd8d68a4f760b4a19fbbcb1a216", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -43,8 +43,11 @@ impl MirDebugScope<'ll> {\n \n /// Produce DIScope DIEs for each MIR Scope which has variables defined in it.\n /// If debuginfo is disabled, the returned vector is empty.\n-pub fn create_mir_scopes(cx: &CodegenCx<'ll, '_>, mir: &Mir, debug_context: &FunctionDebugContext<'ll>)\n-    -> IndexVec<SourceScope, MirDebugScope<'ll>> {\n+pub fn create_mir_scopes(\n+    cx: &CodegenCx<'ll, '_>,\n+    mir: &Mir,\n+    debug_context: &FunctionDebugContext<'ll>,\n+) -> IndexVec<SourceScope, MirDebugScope<'ll>> {\n     let null_scope = MirDebugScope {\n         scope_metadata: None,\n         file_start_pos: BytePos(0),"}, {"sha": "9812d7f9a41a21cc81ad0642606fa13e700b4505", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -55,7 +55,12 @@ pub fn declare_global(cx: &CodegenCx<'ll, '_>, name: &str, ty: &'ll Type) -> &'l\n ///\n /// If there\u2019s a value with the same name already declared, the function will\n /// update the declaration and return existing Value instead.\n-fn declare_raw_fn(cx: &CodegenCx<'ll, '_>, name: &str, callconv: llvm::CallConv, ty: &'ll Type) -> &'ll Value {\n+fn declare_raw_fn(\n+    cx: &CodegenCx<'ll, '_>,\n+    name: &str,\n+    callconv: llvm::CallConv,\n+    ty: &'ll Type,\n+) -> &'ll Value {\n     debug!(\"declare_raw_fn(name={:?}, ty={:?})\", name, ty);\n     let namebuf = CString::new(name).unwrap_or_else(|_|{\n         bug!(\"name {:?} contains an interior null byte\", name)"}, {"sha": "4cbf0d92d7b99d810812a0d46f34e3f8ee145896", "filename": "src/librustc_codegen_llvm/llvm/archive_ro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -39,8 +39,9 @@ impl ArchiveRO {\n     pub fn open(dst: &Path) -> Result<ArchiveRO, String> {\n         return unsafe {\n             let s = path2cstr(dst);\n-            let ar = super::LLVMRustOpenArchive(s.as_ptr())\n-                .ok_or_else(|| super::last_error().unwrap_or(\"failed to open archive\".to_string()))?;\n+            let ar = super::LLVMRustOpenArchive(s.as_ptr()).ok_or_else(|| {\n+                super::last_error().unwrap_or(\"failed to open archive\".to_string())\n+            })?;\n             Ok(ArchiveRO { raw: ar })\n         };\n "}, {"sha": "5febd2ebcaf7bef32569c00fb4904a33477a7e2f", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -740,7 +740,11 @@ extern \"C\" {\n                                  Args: *const &'a Value,\n                                  Name: *const c_char)\n                                  -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchRet(B: &'a Builder, Pad: &'a Value, BB: &'a BasicBlock) -> Option<&'a Value>;\n+    pub fn LLVMRustBuildCatchRet(\n+        B: &'a Builder,\n+        Pad: &'a Value,\n+        BB: &'a BasicBlock,\n+    ) -> Option<&'a Value>;\n     pub fn LLVMRustBuildCatchSwitch(Builder: &'a Builder,\n                                     ParentPad: Option<&'a Value>,\n                                     BB: Option<&'a BasicBlock>,\n@@ -1480,7 +1484,9 @@ extern \"C\" {\n \n     pub fn LLVMRustOpenArchive(path: *const c_char) -> Option<&'static mut Archive>;\n     pub fn LLVMRustArchiveIteratorNew(AR: &'a Archive) -> &'a mut ArchiveIterator<'a>;\n-    pub fn LLVMRustArchiveIteratorNext(AIR: &ArchiveIterator<'a>) -> Option<&'a mut ArchiveChild<'a>>;\n+    pub fn LLVMRustArchiveIteratorNext(\n+        AIR: &ArchiveIterator<'a>,\n+    ) -> Option<&'a mut ArchiveChild<'a>>;\n     pub fn LLVMRustArchiveChildName(ACR: &ArchiveChild, size: &mut size_t) -> *const c_char;\n     pub fn LLVMRustArchiveChildData(ACR: &ArchiveChild, size: &mut size_t) -> *const c_char;\n     pub fn LLVMRustArchiveChildFree(ACR: &'a mut ArchiveChild<'a>);"}, {"sha": "1296f5e4b144efd703fce8891ae3c580dbfe7d3e", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265f2fa4de8fee5ad2e2c21904e51622de2aec24/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=265f2fa4de8fee5ad2e2c21904e51622de2aec24", "patch": "@@ -266,7 +266,12 @@ impl OperandValue<'ll> {\n         self.store_with_flags(bx, dest, MemFlags::NONTEMPORAL);\n     }\n \n-    fn store_with_flags(self, bx: &Builder<'a, 'll, 'tcx>, dest: PlaceRef<'ll, 'tcx>, flags: MemFlags) {\n+    fn store_with_flags(\n+        self,\n+        bx: &Builder<'a, 'll, 'tcx>,\n+        dest: PlaceRef<'ll, 'tcx>,\n+        flags: MemFlags,\n+    ) {\n         debug!(\"OperandRef::store: operand={:?}, dest={:?}\", self, dest);\n         // Avoid generating stores of zero-sized values, because the only way to have a zero-sized\n         // value is through `undef`, and store itself is useless."}]}