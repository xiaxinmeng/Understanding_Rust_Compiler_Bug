{"sha": "2e82d11de1709efe1b89ef73e71550c8fe28b7dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlODJkMTFkZTE3MDllZmUxYjg5ZWY3M2U3MTU1MGM4ZmUyOGI3ZGQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-02T06:55:06Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-02T14:58:11Z"}, "message": "Rollup merge of #58730 - timvermeulen:internal_iteration, r=scottmcm\n\nHave all methods of Filter and FilterMap use internal iteration\n\nThis PR changes `Filter::{next, next_back, count}` and `FilterMap::{next, next_back}` to all use internal iteration. The `next` and `next_back` methods are changed to directly forward to `try_for_each` and `try_rfold` respectively, using `Result` as the `Try` type. I think that's okay? Alternatively, I could change their implementations to use `LoopState` instead if there's any benefit in doing so.\n\nr? @scottmcm", "tree": {"sha": "29f84e662598a0ca15f496f273549011478b6467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29f84e662598a0ca15f496f273549011478b6467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e82d11de1709efe1b89ef73e71550c8fe28b7dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlx6mgQACgkQ/vbIBR0O\nATyaDQ//cHgZHtrODRpYlcXFjZo79TIc0zqTQtNRxBm74jegEie+6Cu9RENqqY/j\ni7HthkQDn4bDGZLDQhnp+vPkwdtdraoW405YlkXuqCOETf7LWN1eYiXBFR3ozSsb\nbJ6nHSuXQakApU23JlGVfRwW0xNzmtOkNftIMoiE/DAfE4GTyHjGdzUUHCeslvwV\nH6HSGdCCKylTH95WovpgaNqrFMubVpun02uKYwla9AWA1ecIy5K5tFGEhBH864fm\nRT43zLO7CrmvZH3a3r+9wWwoiDqTSWh3x/PBwVmyaBPN1W6SF3rfQjVpjMwsINJH\nKPWEgwQEMAP4X5JPd9/ozp3K7/jc4D9eq62cSnpObFA1A83okGzBiXc1KgRoiCbj\nmEPy+8qr69lZhYH4c2vVAE00xY8CQt3M0dV9vUkb/HwJXa6g7QwiFC7X2Hp9GYoW\n0ZO3sc3p83fcMtkDW3ewMKhFCWZ83hH1S2dnxQk+z2Pe8aZHSjX/uv3AyORlggJQ\ndSwc3a+wH2Ff0wsIefQDcO+mKMFK2FZ4dairqTNJxbSLNdfUpbQFSjZixWqvaJUg\nwzLIe880aVNZbV6bmZK0g+Iy8Vp8eGc4VkE0gp4qT0h+x80ELHb//dvf2ML/97I4\nsYYY+N/+l8/HYqrQJ1ybU/xIBqE1gqaQCeog+55ICdwm8DQmxZo=\n=N9Kp\n-----END PGP SIGNATURE-----", "payload": "tree 29f84e662598a0ca15f496f273549011478b6467\nparent d987b46bd7e81eb761a06252efb35b6d932a62f5\nparent 88bd624a88692dd4bbda5f3f324f0035dc041534\nauthor kennytm <kennytm@gmail.com> 1551509706 +0800\ncommitter kennytm <kennytm@gmail.com> 1551538691 +0800\n\nRollup merge of #58730 - timvermeulen:internal_iteration, r=scottmcm\n\nHave all methods of Filter and FilterMap use internal iteration\n\nThis PR changes `Filter::{next, next_back, count}` and `FilterMap::{next, next_back}` to all use internal iteration. The `next` and `next_back` methods are changed to directly forward to `try_for_each` and `try_rfold` respectively, using `Result` as the `Try` type. I think that's okay? Alternatively, I could change their implementations to use `LoopState` instead if there's any benefit in doing so.\n\nr? @scottmcm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e82d11de1709efe1b89ef73e71550c8fe28b7dd", "html_url": "https://github.com/rust-lang/rust/commit/2e82d11de1709efe1b89ef73e71550c8fe28b7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e82d11de1709efe1b89ef73e71550c8fe28b7dd/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d987b46bd7e81eb761a06252efb35b6d932a62f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d987b46bd7e81eb761a06252efb35b6d932a62f5", "html_url": "https://github.com/rust-lang/rust/commit/d987b46bd7e81eb761a06252efb35b6d932a62f5"}, {"sha": "88bd624a88692dd4bbda5f3f324f0035dc041534", "url": "https://api.github.com/repos/rust-lang/rust/commits/88bd624a88692dd4bbda5f3f324f0035dc041534", "html_url": "https://github.com/rust-lang/rust/commit/88bd624a88692dd4bbda5f3f324f0035dc041534"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "1dd2bd3ee78aa67a548bb6625d4703109b396f1b", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2e82d11de1709efe1b89ef73e71550c8fe28b7dd/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e82d11de1709efe1b89ef73e71550c8fe28b7dd/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=2e82d11de1709efe1b89ef73e71550c8fe28b7dd", "patch": "@@ -185,13 +185,13 @@ bench_sums! {\n bench_sums! {\n     bench_filter_sum,\n     bench_filter_ref_sum,\n-    (0i64..1000000).filter(|x| x % 2 == 0)\n+    (0i64..1000000).filter(|x| x % 3 == 0)\n }\n \n bench_sums! {\n     bench_filter_chain_sum,\n     bench_filter_chain_ref_sum,\n-    (0i64..1000000).chain(0..1000000).filter(|x| x % 2 == 0)\n+    (0i64..1000000).chain(0..1000000).filter(|x| x % 3 == 0)\n }\n \n bench_sums! {\n@@ -306,3 +306,31 @@ fn bench_skip_then_zip(b: &mut Bencher) {\n         assert_eq!(s, 2009900);\n     });\n }\n+\n+#[bench]\n+fn bench_filter_count(b: &mut Bencher) {\n+    b.iter(|| {\n+        (0i64..1000000).map(black_box).filter(|x| x % 3 == 0).count()\n+    })\n+}\n+\n+#[bench]\n+fn bench_filter_ref_count(b: &mut Bencher) {\n+    b.iter(|| {\n+        (0i64..1000000).map(black_box).by_ref().filter(|x| x % 3 == 0).count()\n+    })\n+}\n+\n+#[bench]\n+fn bench_filter_chain_count(b: &mut Bencher) {\n+    b.iter(|| {\n+        (0i64..1000000).chain(0..1000000).map(black_box).filter(|x| x % 3 == 0).count()\n+    })\n+}\n+\n+#[bench]\n+fn bench_filter_chain_ref_count(b: &mut Bencher) {\n+    b.iter(|| {\n+        (0i64..1000000).chain(0..1000000).map(black_box).by_ref().filter(|x| x % 3 == 0).count()\n+    })\n+}"}, {"sha": "d4ad22c16bbfa697458af3c5d2e7882be0588bc8", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2e82d11de1709efe1b89ef73e71550c8fe28b7dd/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e82d11de1709efe1b89ef73e71550c8fe28b7dd/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=2e82d11de1709efe1b89ef73e71550c8fe28b7dd", "patch": "@@ -681,12 +681,7 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n \n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n-        for x in &mut self.iter {\n-            if (self.predicate)(&x) {\n-                return Some(x);\n-            }\n-        }\n-        None\n+        self.try_for_each(Err).err()\n     }\n \n     #[inline]\n@@ -707,12 +702,9 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n     // Using the branchless version will also simplify the LLVM byte code, thus\n     // leaving more budget for LLVM optimizations.\n     #[inline]\n-    fn count(mut self) -> usize {\n-        let mut count = 0;\n-        for x in &mut self.iter {\n-            count += (self.predicate)(&x) as usize;\n-        }\n-        count\n+    fn count(self) -> usize {\n+        let mut predicate = self.predicate;\n+        self.iter.map(|x| predicate(&x) as usize).sum()\n     }\n \n     #[inline]\n@@ -746,12 +738,7 @@ impl<I: DoubleEndedIterator, P> DoubleEndedIterator for Filter<I, P>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<I::Item> {\n-        for x in self.iter.by_ref().rev() {\n-            if (self.predicate)(&x) {\n-                return Some(x);\n-            }\n-        }\n-        None\n+        self.try_rfold((), |_, x| Err(x)).err()\n     }\n \n     #[inline]\n@@ -820,12 +807,7 @@ impl<B, I: Iterator, F> Iterator for FilterMap<I, F>\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        for x in self.iter.by_ref() {\n-            if let Some(y) = (self.f)(x) {\n-                return Some(y);\n-            }\n-        }\n-        None\n+        self.try_for_each(Err).err()\n     }\n \n     #[inline]\n@@ -863,12 +845,7 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n-        for x in self.iter.by_ref().rev() {\n-            if let Some(y) = (self.f)(x) {\n-                return Some(y);\n-            }\n-        }\n-        None\n+        self.try_rfold((), |_, x| Err(x)).err()\n     }\n \n     #[inline]"}]}