{"sha": "22da16a4c5b22feac0be1fe34795c5781392bb33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZGExNmE0YzViMjJmZWFjMGJlMWZlMzQ3OTVjNTc4MTM5MmJiMzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T22:59:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-27T17:11:15Z"}, "message": "rustc_back: Add x86_64-unknown-linux-musl as a target\n\nThis commit adds support for x86_64-unknown-linux-musl as a target of the\ncompiler. There's some comments in the commit about some of the more flavorful\nflags passed to the linker as it's not quite as trivial as the normal specs.", "tree": {"sha": "5b8803e6f65dabbf4be9bf26c54557bf36fb858f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b8803e6f65dabbf4be9bf26c54557bf36fb858f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22da16a4c5b22feac0be1fe34795c5781392bb33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22da16a4c5b22feac0be1fe34795c5781392bb33", "html_url": "https://github.com/rust-lang/rust/commit/22da16a4c5b22feac0be1fe34795c5781392bb33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22da16a4c5b22feac0be1fe34795c5781392bb33/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd980b3bee5bd48e8a6cd4c0d7c8e0fb0fdb64dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd980b3bee5bd48e8a6cd4c0d7c8e0fb0fdb64dd", "html_url": "https://github.com/rust-lang/rust/commit/cd980b3bee5bd48e8a6cd4c0d7c8e0fb0fdb64dd"}], "stats": {"total": 127, "additions": 96, "deletions": 31}, "files": [{"sha": "823a4a81fa4c19f98f1cf04834c7640ad9695530", "filename": "src/librustc_back/target/linux_base.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22da16a4c5b22feac0be1fe34795c5781392bb33/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22da16a4c5b22feac0be1fe34795c5781392bb33/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs?ref=22da16a4c5b22feac0be1fe34795c5781392bb33", "patch": "@@ -19,12 +19,16 @@ pub fn opts() -> TargetOptions {\n         morestack: true,\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec!(\n-            // GNU-style linkers will use this to omit linking to libraries which\n-            // don't actually fulfill any relocations, but only for libraries which\n-            // follow this flag. Thus, use it before specifying libraries to link to.\n+        pre_link_args: vec![\n+            // We want to be able to strip as much executable code as possible\n+            // from the linker command line, and this flag indicates to the\n+            // linker that it can avoid linking in dynamic libraries that don't\n+            // actually satisfy any symbols up to that point (as with many other\n+            // resolutions the linker does). This option only applies to all\n+            // following libraries so we're sure to pass it as one of the first\n+            // arguments.\n             \"-Wl,--as-needed\".to_string(),\n-        ),\n+        ],\n         position_independent_executables: true,\n         .. Default::default()\n     }"}, {"sha": "c32eacda2a2529d68d17881042ba02b4f6ca2205", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/22da16a4c5b22feac0be1fe34795c5781392bb33/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22da16a4c5b22feac0be1fe34795c5781392bb33/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=22da16a4c5b22feac0be1fe34795c5781392bb33", "patch": "@@ -59,32 +59,6 @@ mod dragonfly_base;\n mod bitrig_base;\n mod openbsd_base;\n \n-mod armv7_apple_ios;\n-mod armv7s_apple_ios;\n-mod i386_apple_ios;\n-\n-mod arm_linux_androideabi;\n-mod arm_unknown_linux_gnueabi;\n-mod arm_unknown_linux_gnueabihf;\n-mod aarch64_apple_ios;\n-mod aarch64_linux_android;\n-mod aarch64_unknown_linux_gnu;\n-mod i686_apple_darwin;\n-mod i686_pc_windows_gnu;\n-mod i686_unknown_dragonfly;\n-mod i686_unknown_linux_gnu;\n-mod mips_unknown_linux_gnu;\n-mod mipsel_unknown_linux_gnu;\n-mod powerpc_unknown_linux_gnu;\n-mod x86_64_apple_darwin;\n-mod x86_64_apple_ios;\n-mod x86_64_pc_windows_gnu;\n-mod x86_64_unknown_freebsd;\n-mod x86_64_unknown_dragonfly;\n-mod x86_64_unknown_bitrig;\n-mod x86_64_unknown_linux_gnu;\n-mod x86_64_unknown_openbsd;\n-\n /// Everything `rustc` knows about how to compile for a specific target.\n ///\n /// Every field here must be specified, and has no default value.\n@@ -333,6 +307,7 @@ impl Target {\n         macro_rules! load_specific {\n             ( $($name:ident),+ ) => (\n                 {\n+                    $(mod $name;)*\n                     let target = target.replace(\"-\", \"_\");\n                     if false { }\n                     $(\n@@ -362,6 +337,7 @@ impl Target {\n             arm_unknown_linux_gnueabi,\n             arm_unknown_linux_gnueabihf,\n             aarch64_unknown_linux_gnu,\n+            x86_64_unknown_linux_musl,\n \n             arm_linux_androideabi,\n             aarch64_linux_android,"}, {"sha": "74d61e90f67fe9f3489c867d96b563b34a35120d", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/22da16a4c5b22feac0be1fe34795c5781392bb33/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22da16a4c5b22feac0be1fe34795c5781392bb33/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=22da16a4c5b22feac0be1fe34795c5781392bb33", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.linker = \"musl-gcc\".to_string();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    // Make sure that the linker/gcc really don't pull in anything, including\n+    // default objects, libs, etc.\n+    base.pre_link_args.push(\"-nostdlib\".to_string());\n+    base.pre_link_args.push(\"-static\".to_string());\n+\n+    // At least when this was tested, the linker would not add the\n+    // `GNU_EH_FRAME` program header to executables generated, which is required\n+    // when unwinding to locate the unwinding information. I'm not sure why this\n+    // argument is *not* necessary for normal builds, but it can't hurt!\n+    base.pre_link_args.push(\"-Wl,--eh-frame-hdr\".to_string());\n+\n+    // There's a whole bunch of circular dependencies when dealing with MUSL\n+    // unfortunately. To put this in perspective libc is statically linked to\n+    // liblibc and libunwind is statically linked to libstd:\n+    //\n+    // * libcore depends on `fmod` which is in libc (transitively in liblibc).\n+    //   liblibc, however, depends on libcore.\n+    // * compiler-rt has personality symbols that depend on libunwind, but\n+    //   libunwind is in libstd which depends on compiler-rt.\n+    //\n+    // Recall that linkers discard libraries and object files as much as\n+    // possible, and with all the static linking and archives flying around with\n+    // MUSL the linker is super aggressively stripping out objects. For example\n+    // the first case has fmod stripped from liblibc (it's in its own object\n+    // file) so it's not there when libcore needs it. In the second example all\n+    // the unused symbols from libunwind are stripped (each is in its own object\n+    // file in libstd) before we end up linking compiler-rt which depends on\n+    // those symbols.\n+    //\n+    // To deal with these circular dependencies we just force the compiler to\n+    // link everything as a group, not stripping anything out until everything\n+    // is processed. The linker will still perform a pass to strip out object\n+    // files but it won't do so until all objects/archives have been processed.\n+    base.pre_link_args.push(\"-Wl,-(\".to_string());\n+    base.post_link_args.push(\"-Wl,-)\".to_string());\n+\n+    // When generating a statically linked executable there's generally some\n+    // small setup needed which is listed in these files. These are provided by\n+    // a musl toolchain and are linked by default by the `musl-gcc` script. Note\n+    // that `gcc` also does this by default, it just uses some different files.\n+    //\n+    // Each target directory for musl has these object files included in it so\n+    // they'll be included from there.\n+    base.pre_link_objects.push(\"crt1.o\".to_string());\n+    base.pre_link_objects.push(\"crti.o\".to_string());\n+    base.post_link_objects.push(\"crtn.o\".to_string());\n+\n+    // MUSL support doesn't currently include dynamic linking, so there's no\n+    // need for dylibs or rpath business. Additionally `-pie` is incompatible\n+    // with `-static`, so we can't pass `-pie`.\n+    base.dynamic_linking = false;\n+    base.has_rpath = false;\n+    base.position_independent_executables = false;\n+\n+    Target {\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n+                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n+        llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        options: base,\n+    }\n+}"}]}