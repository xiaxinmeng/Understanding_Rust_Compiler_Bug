{"sha": "a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZDZlZWE0YzhhYzhiOWJkOTdlY2Q0NjY0MThlZTczOWE5YTk3ZmE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-26T22:30:32Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-27T23:27:48Z"}, "message": "Remove unused scope tracking", "tree": {"sha": "c30719af38b084459828e2b94c024062530c4f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c30719af38b084459828e2b94c024062530c4f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa", "html_url": "https://github.com/rust-lang/rust/commit/a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c798dffac9dc8c82374db48f5b474690cc6e9686", "url": "https://api.github.com/repos/rust-lang/rust/commits/c798dffac9dc8c82374db48f5b474690cc6e9686", "html_url": "https://github.com/rust-lang/rust/commit/c798dffac9dc8c82374db48f5b474690cc6e9686"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "062033304ee89816a023462478b4a54fcae90c05", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa", "patch": "@@ -23,7 +23,7 @@ use rustc_data_structures::fx::FxHashSet;\n use std::path::Path;\n use std::env;\n \n-use syntax::ast::{self, Attribute, NodeId, PatKind, CRATE_NODE_ID};\n+use syntax::ast::{self, Attribute, NodeId, PatKind};\n use syntax::parse::token;\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{\n@@ -82,8 +82,6 @@ pub struct DumpVisitor<'l, 'tcx, 'll> {\n \n     span: SpanUtils<'l>,\n \n-    cur_scope: NodeId,\n-\n     // Set of macro definition (callee) spans, and the set\n     // of macro use (callsite) spans. We store these to ensure\n     // we only write one macro def per unique macro definition, and\n@@ -103,22 +101,11 @@ impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n             save_ctxt,\n             dumper,\n             span: span_utils,\n-            cur_scope: CRATE_NODE_ID,\n             // mac_defs: FxHashSet::default(),\n             // macro_calls: FxHashSet::default(),\n         }\n     }\n \n-    fn nest_scope<F>(&mut self, scope_id: NodeId, f: F)\n-    where\n-        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n-    {\n-        let parent_scope = self.cur_scope;\n-        self.cur_scope = scope_id;\n-        f(self);\n-        self.cur_scope = parent_scope;\n-    }\n-\n     fn nest_tables<F>(&mut self, item_id: NodeId, f: F)\n     where\n         F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n@@ -320,7 +307,7 @@ impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n \n         // walk the fn body\n         if let Some(body) = body {\n-            self.nest_tables(id, |v| v.nest_scope(id, |v| v.visit_block(body)));\n+            self.nest_tables(id, |v| v.visit_block(body));\n         }\n     }\n \n@@ -405,7 +392,7 @@ impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n             self.visit_ty(&ret_ty);\n         }\n \n-        self.nest_tables(item.id, |v| v.nest_scope(item.id, |v| v.visit_block(&body)));\n+        self.nest_tables(item.id, |v| v.visit_block(&body));\n     }\n \n     fn process_static_or_const_item(\n@@ -1349,7 +1336,7 @@ impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n                 attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n             },\n         );\n-        self.nest_scope(id, |v| visit::walk_mod(v, m));\n+        visit::walk_mod(self, m);\n     }\n \n     fn visit_item(&mut self, item: &'l ast::Item) {\n@@ -1404,7 +1391,7 @@ impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n             }\n             Mod(ref m) => {\n                 self.process_mod(item);\n-                self.nest_scope(item.id, |v| visit::walk_mod(v, m));\n+                visit::walk_mod(self, m);\n             }\n             Ty(ref ty, ref ty_params) => {\n                 let qualname = format!(\"::{}\",\n@@ -1570,7 +1557,7 @@ impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n                 // walk the body\n                 self.nest_tables(ex.id, |v| {\n                     v.process_formals(&decl.inputs, &id);\n-                    v.nest_scope(ex.id, |v| v.visit_expr(body))\n+                    v.visit_expr(body)\n                 });\n             }\n             ast::ExprKind::ForLoop(ref pattern, ref subexpression, ref block, _) => {"}]}