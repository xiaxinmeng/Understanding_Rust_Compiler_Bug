{"sha": "708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOGZjM2IxYTJjNmY5ZTZjODNjZmRiYTNlNWU5MDg1NWIwNTRjZDg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-16T20:46:59Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-27T17:45:02Z"}, "message": "Add unsized_fn_params feature", "tree": {"sha": "84c8de7582a3927e9f4c8a7447f97d4a9451d8d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c8de7582a3927e9f4c8a7447f97d4a9451d8d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+YXJ4ACgkQgTGiTgx5\n768yEw/8DO5m0+juGkG+XXKMErQTTW0vr5Um3YhZKPGwfghg1kWzTvdhpWrmifKZ\nW8FbwfN0+i/372HUjbWgZ833ymE7tIrIFU6tX5RFaymdFhL6x6DzW/Nmf0GKr9+r\nVVU6Z5r5m5uhoOVE46aWbUCoy110kX0fSf02Uc7hgcC0r+ntY6uYSmInyAOu5986\n6OkXdaQOfnyR9sffhZx8SXvHsLz5+0oxnBZPlYSQVLVFnu/5CznO97bjAfOtrm4t\n+7SjVmC4PQ28RVzVIOUR8pVZWFf/DfY8WvOYEl5wwY/gpQLgza5uVj3orhZnpxUr\nt1Vpx85r2UKYtG8rD2f4KK8ECawrjdoBDiOEIow12PfupHKQ/f+oY4iTn7BL8xF9\nBV48K68go0nQ8IbDVr0HW3KOd/84ieZLNKgM70kl86lpNqRD9kLy/qe0L1O1lf1p\nsxUDb9EZXe3eN3D0HA0R5PG3AYysb+AyFLFcT3tqairicF22rLjg/YtUYAJl5oGB\nmyyJwTs3y0MmHJnZtF+fzYlAb49EnMBB5KpPruYBqIoV/qzECkuXYCS20sI0drPL\nd+SsleD98+kw1c5Qd+66/RCTY+NIYMsSfXV24fGrFIpxBjWAlXvo1q3ug7XqQkTb\nu9jjvdsemZ44KDa6z7LYBeZ/qE4DOftAJRvgtYPQB4BL4ZTaeWw=\n=eOwv\n-----END PGP SIGNATURE-----", "payload": "tree 84c8de7582a3927e9f4c8a7447f97d4a9451d8d9\nparent 2a71e45411881dda12a704d7491428d8a23347c0\nauthor Santiago Pastorino <spastorino@gmail.com> 1602881219 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1603820702 -0300\n\nAdd unsized_fn_params feature\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "html_url": "https://github.com/rust-lang/rust/commit/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a71e45411881dda12a704d7491428d8a23347c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a71e45411881dda12a704d7491428d8a23347c0", "html_url": "https://github.com/rust-lang/rust/commit/2a71e45411881dda12a704d7491428d8a23347c0"}], "stats": {"total": 251, "additions": 165, "deletions": 86}, "files": [{"sha": "8a5a1066b06c8cadd443e10cc22794a1f38abc44", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -607,6 +607,9 @@ declare_features! (\n     /// Allow anonymous constants from an inline `const` block\n     (active, inline_const, \"1.49.0\", Some(76001), None),\n \n+    /// Allows unsized fn parameters.\n+    (active, unsized_fn_params, \"1.49.0\", Some(48055), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "1bd4440c9c823f6fe901909590857aa33e2029b4", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1456,7 +1456,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n \n                 self.check_rvalue(body, rv, location);\n-                if !self.tcx().features().unsized_locals {\n+                if !(self.tcx().features().unsized_locals\n+                    || self.tcx().features().unsized_fn_params)\n+                {\n                     let trait_ref = ty::TraitRef {\n                         def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                         substs: tcx.mk_substs_trait(place_ty, &[]),\n@@ -1717,9 +1719,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n \n-                // When `#![feature(unsized_locals)]` is not enabled,\n+                // When `unsized_fn_params` or `unsized_locals` is not enabled,\n                 // this check is done at `check_local`.\n-                if self.tcx().features().unsized_locals {\n+                if self.tcx().features().unsized_locals || self.tcx().features().unsized_fn_params {\n                     let span = term.source_info.span;\n                     self.ensure_place_sized(dest_ty, span);\n                 }\n@@ -1880,9 +1882,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             LocalKind::Var | LocalKind::Temp => {}\n         }\n \n-        // When `#![feature(unsized_locals)]` is enabled, only function calls\n+        // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls\n         // and nullary ops are checked in `check_call_dest`.\n-        if !self.tcx().features().unsized_locals {\n+        if !(self.tcx().features().unsized_locals || self.tcx().features().unsized_fn_params) {\n             let span = local_decl.source_info.span;\n             let ty = local_decl.ty;\n             self.ensure_place_sized(ty, span);\n@@ -2024,7 +2026,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n             Rvalue::NullaryOp(_, ty) => {\n                 // Even with unsized locals cannot box an unsized value.\n-                if self.tcx().features().unsized_locals {\n+                if self.tcx().features().unsized_locals || self.tcx().features().unsized_fn_params {\n                     let span = body.source_info(location).span;\n                     self.ensure_place_sized(ty, span);\n                 }"}, {"sha": "cf075abc94bf5f776ce52bd142cb012aed361cb9", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let tcx = this.hir.tcx();\n \n-        if tcx.features().unsized_locals {\n+        if tcx.features().unsized_fn_params {\n             let ty = expr.ty;\n             let span = expr.span;\n             let param_env = this.hir.param_env;"}, {"sha": "beee162eaed2d4bef327a622f768234bca9a3791", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1161,6 +1161,7 @@ symbols! {\n         unsafe_cell,\n         unsafe_no_drop_flag,\n         unsize,\n+        unsized_fn_params,\n         unsized_locals,\n         unsized_tuple_coercion,\n         unstable,"}, {"sha": "c0881befe2481372e64974c333ec905a1023babf", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1845,9 +1845,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.note(\"all function arguments must have a statically known size\");\n                 }\n                 if tcx.sess.opts.unstable_features.is_nightly_build()\n-                    && !self.tcx.features().unsized_locals\n+                    && !self.tcx.features().unsized_fn_params\n                 {\n-                    err.help(\"unsized locals are gated as an unstable feature\");\n+                    err.help(\"unsized fn params are gated as an unstable feature\");\n                 }\n             }\n             ObligationCauseCode::SizedReturnType => {"}, {"sha": "40366003d43413f2a8e56ad77f84fb8b51e72581", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -105,7 +105,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id).to_def_id()).expect_local();\n     let outer_hir_id = hir.local_def_id_to_hir_id(outer_def_id);\n-    GatherLocalsVisitor::new(&fcx, outer_hir_id).visit_body(body);\n+    GatherLocalsVisitor::new(&fcx, outer_hir_id, false).visit_body(body);\n \n     // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n     // (as it's created inside the body itself, not passed in from outside).\n@@ -131,7 +131,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n-        if param.pat.simple_ident().is_none() && !tcx.features().unsized_locals {\n+        if param.pat.simple_ident().is_none() && !tcx.features().unsized_fn_params {\n             fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n         }\n "}, {"sha": "5eba7be3b02dc52ec3a5b53750b5f2572e05d5eb", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -476,7 +476,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let ty::FnDef(..) = ty.kind() {\n             let fn_sig = ty.fn_sig(tcx);\n-            if !tcx.features().unsized_locals {\n+            if !tcx.features().unsized_fn_params {\n                 // We want to remove some Sized bounds from std functions,\n                 // but don't want to expose the removal to stable Rust.\n                 // i.e., we don't want to allow"}, {"sha": "d5e45c3b89f31ea386af1c9fec539482ba83dc02", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -10,11 +10,19 @@ use rustc_trait_selection::traits;\n pub(super) struct GatherLocalsVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     parent_id: hir::HirId,\n+    // params are special cases of pats, but we want to handle them as\n+    // *distinct* cases. so track when we are hitting a pat *within* an fn\n+    // param.\n+    within_fn_param: bool,\n }\n \n impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n-    pub(super) fn new(fcx: &'a FnCtxt<'a, 'tcx>, parent_id: hir::HirId) -> Self {\n-        Self { fcx, parent_id }\n+    pub(super) fn new(\n+        fcx: &'a FnCtxt<'a, 'tcx>,\n+        parent_id: hir::HirId,\n+        within_fn_param: bool,\n+    ) -> Self {\n+        Self { fcx, parent_id, within_fn_param }\n     }\n \n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n@@ -88,13 +96,29 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         intravisit::walk_local(self, local);\n     }\n \n+    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n+        self.within_fn_param = true;\n+        intravisit::walk_param(self, param);\n+        self.within_fn_param = false;\n+    }\n+\n     // Add pattern bindings.\n     fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n         if let PatKind::Binding(_, _, ident, _) = p.kind {\n             let var_ty = self.assign(p.span, p.hir_id, None);\n \n-            if !self.fcx.tcx.features().unsized_locals {\n-                self.fcx.require_type_is_sized(var_ty, p.span, traits::VariableType(p.hir_id));\n+            if self.within_fn_param {\n+                if !self.fcx.tcx.features().unsized_fn_params {\n+                    self.fcx.require_type_is_sized(\n+                        var_ty,\n+                        p.span,\n+                        traits::SizedArgumentType(Some(p.span)),\n+                    );\n+                }\n+            } else {\n+                if !self.fcx.tcx.features().unsized_locals {\n+                    self.fcx.require_type_is_sized(var_ty, p.span, traits::VariableType(p.hir_id));\n+                }\n             }\n \n             debug!("}, {"sha": "4ec114b1f2c5e2c404bbd251c1b105f609429e41", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -553,7 +553,7 @@ fn typeck_with_fallback<'tcx>(\n             };\n \n             // Gather locals in statics (because of block expressions).\n-            GatherLocalsVisitor::new(&fcx, id).visit_body(body);\n+            GatherLocalsVisitor::new(&fcx, id, false).visit_body(body);\n \n             fcx.check_expr_coercable_to_type(&body.value, revealed_ty, None);\n "}, {"sha": "405667e0b2aa6735d43e17f8cbe3ab40ff291665", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -130,7 +130,8 @@\n #![feature(unicode_internals)]\n #![feature(unsafe_block_in_unsafe_fn)]\n #![feature(unsize)]\n-#![feature(unsized_locals)]\n+#![cfg_attr(not(bootstrap), feature(unsized_fn_params))]\n+#![cfg_attr(bootstrap, feature(unsized_locals))]\n #![feature(allocator_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]"}, {"sha": "6de766ffd5679fb4f6b84572a537afac68dd1e01", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -133,6 +133,7 @@\n #![feature(try_blocks)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n+#![cfg_attr(not(bootstrap), feature(unsized_fn_params))]\n #![cfg_attr(bootstrap, feature(untagged_unions))]\n #![feature(unwind_attributes)]\n #![feature(variant_count)]"}, {"sha": "a7b9052617f0c7b95e25d39bef32814b06304510", "filename": "src/test/run-pass-valgrind/unsized-locals/long-live-the-unsized-temporary.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,4 +1,5 @@\n-#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n use std::fmt;\n \n@@ -45,11 +46,7 @@ fn main() {\n \n     {\n         let x: fmt::Display = *gen_foo();\n-        let x = if true {\n-            x\n-        } else {\n-            *gen_foo()\n-        };\n+        let x = if true { x } else { *gen_foo() };\n         foo(x);\n     }\n }"}, {"sha": "0f90a4c336c57e5b136ecd7c069a9c33777ed7b2", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -18,7 +18,7 @@ LL |     async fn frob(self) {}\n    |\n    = help: within `Foo`, the trait `Sized` is not implemented for `str`\n    = note: required because it appears within the type `Foo`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL |     async fn frob(&self) {}"}, {"sha": "72ef5b3b962c734d5386c07b0796aca96c57007b", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -16,7 +16,7 @@ LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `<u32 as T<'_>>::V`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n LL | fn main() where <u32 as T<'_>>::V: Sized {"}, {"sha": "647e0c7d76ff2da1505c07dadbdca668a07a49b1", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -6,11 +6,11 @@ LL | fn f(p: Path) { }\n    |\n    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`\n    = note: required because it appears within the type `Path`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(p: &Path) { }\n-   |         ^\n+LL | fn f(&p: Path) { }\n+   |      ^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:17:15"}, {"sha": "45bde37a3ac5ed8c1b1b6496662e50d0215d0fee", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -0,0 +1,26 @@\n+#[repr(align(256))]\n+#[allow(dead_code)]\n+struct A {\n+    v: u8,\n+}\n+\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+impl Foo for A {\n+    fn foo(&self) {\n+        assert_eq!(self as *const A as usize % 256, 0);\n+    }\n+}\n+\n+fn foo(x: dyn Foo) {\n+    //~^ ERROR: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time [E0277]\n+    x.foo()\n+}\n+\n+fn main() {\n+    let x: Box<dyn Foo> = Box::new(A { v: 22 });\n+    foo(*x);\n+    //~^ ERROR: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time [E0277]\n+}"}, {"sha": "71acbb174ac667b82223581fbd48ddf0eccd620e", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n+  --> $DIR/feature-gate-unsized_fn_params.rs:17:8\n+   |\n+LL | fn foo(x: dyn Foo) {\n+   |        ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(&x: dyn Foo) {\n+   |        ^\n+\n+error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n+  --> $DIR/feature-gate-unsized_fn_params.rs:24:5\n+   |\n+LL |     foo(*x);\n+   |     ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n+   = note: all function arguments must have a statically known size\n+   = help: unsized fn params are gated as an unstable feature\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "522542208724bd10071e9bdcff591130998040a5", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -5,11 +5,11 @@ LL | fn f(f: dyn FnOnce()) {}\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn FnOnce() + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(f: &dyn FnOnce()) {}\n-   |         ^\n+LL | fn f(&f: dyn FnOnce()) {}\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "ecd7c1744a0084d4f113453d1ff050c220bc329b", "filename": "src/test/ui/fn/dyn-fn-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ffn%2Fdyn-fn-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ffn%2Fdyn-fn-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fdyn-fn-alignment.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(unsized_locals)]\n+#![feature(unsized_fn_params)]\n #![allow(dead_code)]\n #[repr(align(256))]\n struct A {"}, {"sha": "69817f10c9f32c9c45663cc3581faec77601073b", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -15,7 +15,7 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to 2 previous errors\n "}, {"sha": "021a08696de2cc831035935513c6c7656323d871", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: consider further restricting `Self`\n    |\n LL |     fn foo(self) -> &'static i32 where Self: Sized {"}, {"sha": "79f5db650d9dcb76e89b0917aeae621e0e6a45bf", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -6,7 +6,7 @@ LL |     &X(*Y)\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "f76063fc55872ceefde07464b6e233aabde2a335", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -5,7 +5,7 @@ LL | fn _test(ref _p: str) {}\n    |          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn _test(ref _p: &str) {}"}, {"sha": "8b37e5e9774e58b69e27ea2e5e5f2cf1375d6259", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -5,7 +5,7 @@ LL | pub fn example(ref s: str) {}\n    |                ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | pub fn example(ref s: &str) {}"}, {"sha": "f69c2a9925de7bd922221ea56208efa27ce8d55d", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -5,7 +5,7 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `<Self as Deref>::Target`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n LL |     fn baz(_: Self::Target) where Self: Deref, <Self as Deref>::Target: Sized {}\n@@ -22,7 +22,7 @@ LL | pub fn f(_: dyn ToString) {}\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn ToString + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | pub fn f(_: &dyn ToString) {}"}, {"sha": "5798733e04be03a86f4296db44e81daa545d0a8e", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -5,11 +5,11 @@ LL | fn new_struct(r: dyn A + 'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn A + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn new_struct(r: &dyn A + 'static)\n-   |                  ^\n+LL | fn new_struct(&r: dyn A + 'static)\n+   |               ^\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5883.rs:8:8"}, {"sha": "abd2faa7dc6590b1dba7ea8fbfee7d9ba9f7f72e", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize, unsized_locals)]\n+#![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize, unsized_locals, unsized_fn_params)]\n \n // This tests a few edge-cases around `arbitrary_self_types`. Most specifically,\n // it checks that the `ObjectCandidate` you get from method matching can't"}, {"sha": "b2084a7a426a66c727edc89e4d72f1ef5cb3a15f", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -5,11 +5,11 @@ LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn I + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(_x: &K) {}\n-   |            ^\n+LL | fn foo(&_x: K) {}\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "19fc3406ccfe43c165b809364beb1c34fa880e52", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -6,11 +6,11 @@ LL | fn f(p: Path) { }\n    |\n    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`\n    = note: required because it appears within the type `Path`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(p: &Path) { }\n-   |         ^\n+LL | fn f(&p: Path) { }\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "48eedc0b0ea430467dd91b9e7167c3f6f0854ae9", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -13,11 +13,11 @@ LL | fn foo(_x: Foo + Send) {\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + Send + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(_x: &Foo + Send) {\n-   |            ^\n+LL | fn foo(&_x: Foo + Send) {\n+   |        ^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "63d9ce6d3c3e544b0d90648617c07e445800113b", "filename": "src/test/ui/unsized-locals/autoderef.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub trait Foo {\n     fn foo(self) -> String;\n@@ -24,7 +24,6 @@ impl Foo for dyn FnMut() -> String {\n     }\n }\n \n-\n fn main() {\n     let x = *(Box::new(['h', 'e', 'l', 'l', 'o']) as Box<[char]>);\n     assert_eq!(&x.foo() as &str, \"hello\");"}, {"sha": "5954abf3a1fc5ea007222a44adb4e3c0e41e910b", "filename": "src/test/ui/unsized-locals/auxiliary/ufuncs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,3 +1,3 @@\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub fn udrop<T: ?Sized>(_x: T) {}"}, {"sha": "4e02ea6a4f49f380ddb581359e287ce02fe466fc", "filename": "src/test/ui/unsized-locals/borrow-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub trait Foo {\n     fn foo(self) -> String;"}, {"sha": "b05504fbe820d251e54e7020adb76f541df9980e", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety-withdefault.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub trait Foo {\n     fn foo(self) -> String {\n@@ -12,7 +12,6 @@ struct A;\n \n impl Foo for A {}\n \n-\n fn main() {\n     let x = *(Box::new(A) as Box<dyn Foo>);\n     assert_eq!(x.foo(), format!(\"hello\"));"}, {"sha": "5c430a0c388e339258ae807166f7f75434a53ed0", "filename": "src/test/ui/unsized-locals/double-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub trait Foo {\n     fn foo(self) -> String;"}, {"sha": "be033c0b176d73a0f0104738e872a093182a453a", "filename": "src/test/ui/unsized-locals/issue-30276-feature-flagged.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -4,9 +4,9 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n LL |     let _x: fn(_) -> Test = Test;\n    |                             ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Test`, the trait `Sized` is not implemented for `[i32]`\n-   = note: required because it appears within the type `Test`\n-   = note: the return type of a function must have a statically known size\n+   = help: the trait `Sized` is not implemented for `[i32]`\n+   = note: all function arguments must have a statically known size\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "8cccbd792da5c0f1d88fa4a42894aba1e72db235", "filename": "src/test/ui/unsized-locals/issue-30276.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -6,7 +6,7 @@ LL |     let _x: fn(_) -> Test = Test;\n    |\n    = help: the trait `Sized` is not implemented for `[i32]`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "310dfc9b62326e7b5862e6d4220e6c7e5056e86d", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n fn main() {\n     struct A<X: ?Sized>(X);"}, {"sha": "8f09b460e004bc1c2cbf98205cae50aacee09816", "filename": "src/test/ui/unsized-locals/issue-50940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -6,7 +6,7 @@ LL |     A as fn(str) -> A<str>;\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "fc564d16ddb68027a9dbab1bb720d35294da9b9b", "filename": "src/test/ui/unsized-locals/unsized-exprs-rpass.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(unused_braces, unused_parens)]\n-#![feature(unsized_tuple_coercion, unsized_locals)]\n+#![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n \n struct A<X: ?Sized>(X);\n \n@@ -24,12 +24,8 @@ fn main() {\n     udrop::<[u8]>(loop {\n         break *foo();\n     });\n-    udrop::<[u8]>(if true {\n-        *foo()\n-    } else {\n-        *foo()\n-    });\n-    udrop::<[u8]>({*foo()});\n+    udrop::<[u8]>(if true { *foo() } else { *foo() });\n+    udrop::<[u8]>({ *foo() });\n     udrop::<[u8]>((*foo()));\n     udrop::<[u8]>((*tfoo()).1);\n     *afoo() + 42;"}, {"sha": "be3140db86b724998960429aa734385b0bcf960a", "filename": "src/test/ui/unsized-locals/unsized-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unsized_tuple_coercion, unsized_locals)]\n+#![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n \n struct A<X: ?Sized>(X);\n "}, {"sha": "495316c276e8d3146795aba545d4cf921cb7ce37", "filename": "src/test/ui/unsized-locals/unsized-exprs2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unsized_tuple_coercion, unsized_locals)]\n+#![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n \n struct A<X: ?Sized>(X);\n "}, {"sha": "57d9978225a2dc204eb36494efa608ebc1e4bfea", "filename": "src/test/ui/unsized-locals/unsized-exprs3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -6,7 +6,7 @@ LL |     udrop as fn([u8]);\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "470e0e2f12ea586d88abd8090c0c9abb3ba7bdb3", "filename": "src/test/ui/unsized-locals/unsized-index.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -5,19 +5,23 @@\n // Tightening the bound now could be a breaking change. Although no crater\n // regression were observed (https://github.com/rust-lang/rust/pull/59527),\n // let's be conservative and just add a test for this.\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n use std::ops;\n \n pub struct A;\n \n impl ops::Index<str> for A {\n     type Output = ();\n-    fn index(&self, _: str) -> &Self::Output { panic!() }\n+    fn index(&self, _: str) -> &Self::Output {\n+        panic!()\n+    }\n }\n \n impl ops::IndexMut<str> for A {\n-    fn index_mut(&mut self, _: str) -> &mut Self::Output { panic!() }\n+    fn index_mut(&mut self, _: str) -> &mut Self::Output {\n+        panic!()\n+    }\n }\n \n fn main() {}"}, {"sha": "6d87f07f43b186709ffa43805f89e757019f6fe4", "filename": "src/test/ui/unsized-locals/unsized-parameters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub fn f0(_f: dyn FnOnce()) {}\n pub fn f1(_s: str) {}"}, {"sha": "71dac236fa31678febd9d85c35a539a10d3662f6", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=708fc3b1a2c6f9e6c83cfdba3e5e90855b054cd8", "patch": "@@ -132,11 +132,11 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |       |\n    |       this type parameter needs to be `Sized`\n    |\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn g1<X: ?Sized>(x: &X) {}\n-   |                     ^\n+LL | fn g1<X: ?Sized>(&x: X) {}\n+   |                  ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:22\n@@ -146,11 +146,11 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       |\n    |       this type parameter needs to be `Sized`\n    |\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn g2<X: ?Sized + T>(x: &X) {}\n-   |                         ^\n+LL | fn g2<X: ?Sized + T>(&x: X) {}\n+   |                      ^\n \n error: aborting due to 13 previous errors\n "}]}