{"sha": "c1ed4399eb3b68a2df0abda9483826f4a0e83046", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWQ0Mzk5ZWIzYjY4YTJkZjBhYmRhOTQ4MzgyNmY0YTBlODMwNDY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-18T19:05:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-19T19:10:23Z"}, "message": "review comments", "tree": {"sha": "909612eaf36ff79ee46c9af606387841cf13cad0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/909612eaf36ff79ee46c9af606387841cf13cad0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ed4399eb3b68a2df0abda9483826f4a0e83046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ed4399eb3b68a2df0abda9483826f4a0e83046", "html_url": "https://github.com/rust-lang/rust/commit/c1ed4399eb3b68a2df0abda9483826f4a0e83046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ed4399eb3b68a2df0abda9483826f4a0e83046/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbd6927a5116e856aa7085bbcab27e87271bb91", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbd6927a5116e856aa7085bbcab27e87271bb91", "html_url": "https://github.com/rust-lang/rust/commit/2fbd6927a5116e856aa7085bbcab27e87271bb91"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "1d87484ef09bebd27f0a4066770eef5cc3bbbc27", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed4399eb3b68a2df0abda9483826f4a0e83046/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed4399eb3b68a2df0abda9483826f4a0e83046/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c1ed4399eb3b68a2df0abda9483826f4a0e83046", "patch": "@@ -1014,6 +1014,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                         _ => \"_\".to_string(),\n                                     }).collect::<Vec<_>>().join(\", \"),\n                             );\n+                            // When the obligation error has been ensured to have been caused by\n+                            // an argument, the `obligation.cause.span` points at the expression\n+                            // of the argument, so we can provide a suggestion. This is signaled\n+                            // by `points_at_arg`. Otherwise, we give a more general note.\n                             if points_at_arg {\n                                 err.span_suggestion(\n                                     obligation.cause.span,"}, {"sha": "c53f4e49971bf161c8c3df7ec73fdb48ccb1550a", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed4399eb3b68a2df0abda9483826f4a0e83046/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed4399eb3b68a2df0abda9483826f4a0e83046/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=c1ed4399eb3b68a2df0abda9483826f4a0e83046", "patch": "@@ -485,6 +485,9 @@ EnumTypeFoldableImpl! {\n pub struct FulfillmentError<'tcx> {\n     pub obligation: PredicateObligation<'tcx>,\n     pub code: FulfillmentErrorCode<'tcx>,\n+    /// Diagnostics only: we opportunistically change the `code.span` when we encounter an\n+    /// obligation error caused by a call argument. When this is the case, we also signal that in\n+    /// this field to ensure accuracy of suggestions.\n     pub points_at_arg_span: bool,\n }\n "}, {"sha": "430e57810d9612ab2a9e12ec2f8df6fec0c133fa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed4399eb3b68a2df0abda9483826f4a0e83046/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed4399eb3b68a2df0abda9483826f4a0e83046/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c1ed4399eb3b68a2df0abda9483826f4a0e83046", "patch": "@@ -885,12 +885,12 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n         };\n \n         // All type checking constraints were added, try to fallback unsolved variables.\n-        fcx.select_obligations_where_possible(false);\n+        fcx.select_obligations_where_possible(false, |_| {});\n         let mut fallback_has_occurred = false;\n         for ty in &fcx.unsolved_variables() {\n             fallback_has_occurred |= fcx.fallback_if_possible(ty);\n         }\n-        fcx.select_obligations_where_possible(fallback_has_occurred);\n+        fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n \n         // Even though coercion casts provide type hints, we check casts after fallback for\n         // backwards compatibility. This makes fallback a stronger type hint than a cast coercion.\n@@ -2356,7 +2356,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // possible. This can help substantially when there are\n         // indirect dependencies that don't seem worth tracking\n         // precisely.\n-        self.select_obligations_where_possible(false);\n+        self.select_obligations_where_possible(false, |_| {});\n         ty = self.resolve_vars_if_possible(&ty);\n \n         debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n@@ -2807,7 +2807,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn resolve_generator_interiors(&self, def_id: DefId) {\n         let mut generators = self.deferred_generator_interiors.borrow_mut();\n         for (body_id, interior, kind) in generators.drain(..) {\n-            self.select_obligations_where_possible(false);\n+            self.select_obligations_where_possible(false, |_| {});\n             generator_interior::resolve_interior(self, def_id, body_id, interior, kind);\n         }\n     }\n@@ -2844,8 +2844,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Select as many obligations as we can at present.\n-    fn select_obligations_where_possible(&self, fallback_has_occurred: bool) {\n-        if let Err(errors) = self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n+    fn select_obligations_where_possible(\n+        &self,\n+        fallback_has_occurred: bool,\n+        f: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n+    ) {\n+        if let Err(mut errors) = self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n+            f(&mut errors);\n             self.report_fulfillment_errors(&errors, self.inh.body_id, fallback_has_occurred);\n         }\n     }\n@@ -3267,20 +3272,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // an \"opportunistic\" vtable resolution of any trait bounds on\n             // the call. This helps coercions.\n             if check_closures {\n-                // We don't use `select_obligations_where_possible` to try to figure out if the\n-                // obligation is comming from a single fn call argument, and if it is, we point\n-                // at the expression corresponding to that argument, instead of the call.\n-                if let Err(\n-                    mut errors,\n-                ) = self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n+                self.select_obligations_where_possible(false, |errors| {\n                     self.point_at_arg_instead_of_call_if_possible(\n-                        &mut errors,\n+                        errors,\n                         &final_arg_types[..],\n                         sp,\n                         &args,\n                     );\n-                    self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n-                }\n+                })\n             }\n \n             // For C-variadic functions, we don't have a declared type for all of\n@@ -3394,8 +3393,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    if referenced_in.len() == 1 {\n-                        error.obligation.cause.span = args[referenced_in[0]].span;\n+                    let mut referenced_in = final_arg_types.iter()\n+                        .flat_map(|(i, ty)| {\n+                            let ty = self.resolve_vars_if_possible(ty);\n+                            ty.walk()\n+                                .filter(|&ty| ty == predicate.skip_binder().self_ty())\n+                                .map(move |_| *i)\n+                        });\n+                    if let (Some(ref_in), None) = (referenced_in.next(), referenced_in.next()) {\n+                        // We make sure that only *one* argument matches the obligation failure\n+                        // and thet the obligation's span to its expression's.\n+                        error.obligation.cause.span = args[ref_in].span;\n                         error.points_at_arg_span = true;\n                     }\n                 }"}, {"sha": "956d04ff6229b388525c25fe52fe32d469ab9dc7", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed4399eb3b68a2df0abda9483826f4a0e83046/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed4399eb3b68a2df0abda9483826f4a0e83046/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=c1ed4399eb3b68a2df0abda9483826f4a0e83046", "patch": "@@ -724,7 +724,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match method {\n             Some(ok) => {\n                 let method = self.register_infer_ok_obligations(ok);\n-                self.select_obligations_where_possible(false);\n+                self.select_obligations_where_possible(false, |_| {});\n \n                 Ok(method)\n             }"}]}