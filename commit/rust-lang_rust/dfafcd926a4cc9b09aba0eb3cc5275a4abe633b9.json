{"sha": "dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYWZjZDkyNmE0Y2M5YjA5YWJhMGViM2NjNTI3NWE0YWJlNjMzYjk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T16:23:19Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T16:56:48Z"}, "message": "Use chalk_ir::ForeignDefId", "tree": {"sha": "cfb4000f57a35b2dc2fdab78a5b422fc3af3667e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb4000f57a35b2dc2fdab78a5b422fc3af3667e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "html_url": "https://github.com/rust-lang/rust/commit/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4533785698d439417bc5474fecd62a7f1707368", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4533785698d439417bc5474fecd62a7f1707368", "html_url": "https://github.com/rust-lang/rust/commit/d4533785698d439417bc5474fecd62a7f1707368"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "9b1e2ad0501be0b454dec22c9d47199d4ae49677", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "patch": "@@ -11,9 +11,9 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    db::HirDatabase, primitive, utils::generics, AdtId, AliasTy, CallableDefId, CallableSig,\n-    GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar,\n-    Substs, TraitRef, Ty, TyKind,\n+    db::HirDatabase, from_foreign_def_id, primitive, utils::generics, AdtId, AliasTy,\n+    CallableDefId, CallableSig, GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy,\n+    OpaqueTyId, ProjectionTy, Scalar, Substs, TraitRef, Ty, TyKind,\n };\n \n pub struct HirFormatter<'a> {\n@@ -491,7 +491,7 @@ impl HirDisplay for Ty {\n                 }\n             }\n             TyKind::ForeignType(type_alias) => {\n-                let type_alias = f.db.type_alias_data(*type_alias);\n+                let type_alias = f.db.type_alias_data(from_foreign_def_id(*type_alias));\n                 write!(f, \"{}\", type_alias.name)?;\n             }\n             TyKind::OpaqueType(opaque_ty_id, parameters) => {"}, {"sha": "94cbb21cac698001f9264987bab52601a384f443", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "patch": "@@ -51,6 +51,8 @@ pub use chalk_ir::{AdtId, BoundVar, DebruijnIndex, Mutability, Scalar, TyVariabl\n \n pub use crate::traits::chalk::Interner;\n \n+pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n+\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n     Parameter(LifetimeParamId),\n@@ -194,7 +196,7 @@ pub enum TyKind {\n     Closure(DefWithBodyId, ExprId, Substs),\n \n     /// Represents a foreign type declared in external blocks.\n-    ForeignType(TypeAliasId),\n+    ForeignType(ForeignDefId),\n \n     /// A pointer to a function.  Written as `fn() -> i32`.\n     ///\n@@ -705,7 +707,7 @@ impl Ty {\n             TyKind::Adt(AdtId(adt), ..) => Some(adt.into()),\n             TyKind::FnDef(callable, ..) => Some(callable.into()),\n             TyKind::AssociatedType(type_alias, ..) => Some(type_alias.into()),\n-            TyKind::ForeignType(type_alias, ..) => Some(type_alias.into()),\n+            TyKind::ForeignType(type_alias, ..) => Some(from_foreign_def_id(type_alias).into()),\n             _ => None,\n         }\n     }\n@@ -724,8 +726,10 @@ impl Ty {\n             (TyKind::Slice(_), TyKind::Slice(_)) | (TyKind::Array(_), TyKind::Array(_)) => true,\n             (TyKind::FnDef(def_id, ..), TyKind::FnDef(def_id2, ..)) => def_id == def_id2,\n             (TyKind::OpaqueType(ty_id, ..), TyKind::OpaqueType(ty_id2, ..)) => ty_id == ty_id2,\n-            (TyKind::AssociatedType(ty_id, ..), TyKind::AssociatedType(ty_id2, ..))\n-            | (TyKind::ForeignType(ty_id, ..), TyKind::ForeignType(ty_id2, ..)) => ty_id == ty_id2,\n+            (TyKind::AssociatedType(ty_id, ..), TyKind::AssociatedType(ty_id2, ..)) => {\n+                ty_id == ty_id2\n+            }\n+            (TyKind::ForeignType(ty_id, ..), TyKind::ForeignType(ty_id2, ..)) => ty_id == ty_id2,\n             (TyKind::Closure(def, expr, _), TyKind::Closure(def2, expr2, _)) => {\n                 expr == expr2 && def == def2\n             }\n@@ -1116,3 +1120,11 @@ pub struct ReturnTypeImplTraits {\n pub(crate) struct ReturnTypeImplTrait {\n     pub(crate) bounds: Binders<Vec<GenericPredicate>>,\n }\n+\n+pub(crate) fn to_foreign_def_id(id: TypeAliasId) -> chalk_ir::ForeignDefId<Interner> {\n+    chalk_ir::ForeignDefId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub(crate) fn from_foreign_def_id(id: chalk_ir::ForeignDefId<Interner>) -> TypeAliasId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}"}, {"sha": "a35d7266d12934a52b563db19ce1be500e9967ac", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "patch": "@@ -1143,7 +1143,7 @@ fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     if db.type_alias_data(t).is_extern {\n-        Binders::new(0, TyKind::ForeignType(t).intern(&Interner))\n+        Binders::new(0, TyKind::ForeignType(crate::to_foreign_def_id(t)).intern(&Interner))\n     } else {\n         let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n         let type_ref = &db.type_alias_data(t).type_ref;"}, {"sha": "c7055bee50f53ded867af64ffdf020f195f44107", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "patch": "@@ -9,18 +9,19 @@ use base_db::CrateId;\n use chalk_ir::Mutability;\n use hir_def::{\n     lang_item::LangItemTarget, AssocContainerId, AssocItemId, FunctionId, GenericDefId, HasModule,\n-    ImplId, Lookup, ModuleId, TraitId, TypeAliasId,\n+    ImplId, Lookup, ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     autoderef,\n     db::HirDatabase,\n+    from_foreign_def_id,\n     primitive::{self, FloatTy, IntTy, UintTy},\n     utils::all_super_traits,\n-    AdtId, Canonical, DebruijnIndex, FnPointer, FnSig, InEnvironment, Interner, Scalar, Substs,\n-    TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n+    AdtId, Canonical, DebruijnIndex, FnPointer, FnSig, ForeignDefId, InEnvironment, Interner,\n+    Scalar, Substs, TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -35,7 +36,7 @@ pub enum TyFingerprint {\n     Adt(hir_def::AdtId),\n     Dyn(TraitId),\n     Tuple(usize),\n-    ForeignType(TypeAliasId),\n+    ForeignType(ForeignDefId),\n     FnPtr(usize, FnSig),\n }\n \n@@ -236,8 +237,10 @@ impl Ty {\n             TyKind::Adt(AdtId(def_id), _) => {\n                 return mod_to_crate_ids(def_id.module(db.upcast()));\n             }\n-            TyKind::ForeignType(type_alias_id) => {\n-                return mod_to_crate_ids(type_alias_id.lookup(db.upcast()).module(db.upcast()));\n+            TyKind::ForeignType(id) => {\n+                return mod_to_crate_ids(\n+                    from_foreign_def_id(*id).lookup(db.upcast()).module(db.upcast()),\n+                );\n             }\n             TyKind::Scalar(Scalar::Bool) => lang_item_crate!(\"bool\"),\n             TyKind::Scalar(Scalar::Char) => lang_item_crate!(\"char\"),"}, {"sha": "e891efb7ba56fb5a24879667578c267d1a989c43", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "patch": "@@ -12,7 +12,6 @@ pub struct Interner;\n \n pub(crate) type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n-pub(crate) type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub(crate) type TraitId = chalk_ir::TraitId<Interner>;\n pub(crate) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n pub(crate) type AdtId = chalk_ir::AdtId<Interner>;"}, {"sha": "cf490f9c5bea60826c4d16499ae30b9ac7896071", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "patch": "@@ -51,11 +51,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::OpaqueType(id, substitution).intern(&Interner)\n             }\n \n-            TyKind::ForeignType(type_alias) => {\n-                let foreign_type = TypeAliasAsForeignType(type_alias);\n-                let foreign_type_id = foreign_type.to_chalk(db);\n-                chalk_ir::TyKind::Foreign(foreign_type_id).intern(&Interner)\n-            }\n+            TyKind::ForeignType(id) => chalk_ir::TyKind::Foreign(id).intern(&Interner),\n \n             TyKind::Scalar(scalar) => chalk_ir::TyKind::Scalar(scalar).intern(&Interner),\n \n@@ -217,9 +213,7 @@ impl ToChalk for Ty {\n                 TyKind::Closure(def, expr, from_chalk(db, subst))\n             }\n \n-            chalk_ir::TyKind::Foreign(foreign_def_id) => {\n-                TyKind::ForeignType(from_chalk::<TypeAliasAsForeignType, _>(db, foreign_def_id).0)\n-            }\n+            chalk_ir::TyKind::Foreign(foreign_def_id) => TyKind::ForeignType(foreign_def_id),\n             chalk_ir::TyKind::Generator(_, _) => unimplemented!(), // FIXME\n             chalk_ir::TyKind::GeneratorWitness(_, _) => unimplemented!(), // FIXME\n         }\n@@ -352,20 +346,6 @@ impl ToChalk for TypeAliasAsAssocType {\n     }\n }\n \n-pub(crate) struct TypeAliasAsForeignType(pub(crate) TypeAliasId);\n-\n-impl ToChalk for TypeAliasAsForeignType {\n-    type Chalk = ForeignDefId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> ForeignDefId {\n-        chalk_ir::ForeignDefId(self.0.as_intern_id())\n-    }\n-\n-    fn from_chalk(_db: &dyn HirDatabase, foreign_def_id: ForeignDefId) -> TypeAliasAsForeignType {\n-        TypeAliasAsForeignType(InternKey::from_intern_id(foreign_def_id.0))\n-    }\n-}\n-\n pub(crate) struct TypeAliasAsValue(pub(crate) TypeAliasId);\n \n impl ToChalk for TypeAliasAsValue {"}]}