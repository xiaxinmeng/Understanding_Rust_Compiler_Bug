{"sha": "fca9093ea36402a8ea2eb9cb2135051b8830881f", "node_id": "C_kwDOAAsO6NoAKGZjYTkwOTNlYTM2NDAyYThlYTJlYjljYjIxMzUwNTFiODgzMDg4MWY", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-11-01T03:03:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-01T03:03:44Z"}, "message": "Rollup merge of #103799 - GuillaumeGomez:search-index-tuple-struct-field, r=notriddle\n\nRemove generation of tuple struct fields in the search index\n\nThis comes from [this discussion](https://github.com/rust-lang/rust/pull/103710) as they're not very useful.\n\nr? `@notriddle`", "tree": {"sha": "a3d5bb9131653d0201d80890bddff09826f70d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3d5bb9131653d0201d80890bddff09826f70d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca9093ea36402a8ea2eb9cb2135051b8830881f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYIyQCRBK7hj4Ov3rIwAAPLYIAAX/dX0msyr6dqnCkNlGVFHK\nYCS6F1T3HQQTnk80iMZCOr6ziL1iilZpdPZFP+Oz/KX+ZiWc35rslL0AeCkkSd6p\nuo416Tv0DbTP3Q+pYL9Zx0Kp16CY3yPv4xCgPIZccrFMSpNtfgo1BrD4+JaDjnA4\nUyic1kiRL6ganWG+wVBWAnOBY7hYLCJzsMrvafWsMJOr04UaP+3vLhAL7fGJFgHn\nbCq3RTUOcserzMaTa7xRwMgB5nuRdeaIzoAjyRbrjR8hl0nlMgpw+6oXbRhmdjz5\nS5DHfd23rIHn6Yd0wV6E1ggvWOOQozP8iwEMhzs1H+v7y+c8UxI+Rie2yZ3zGcI=\n=IgbQ\n-----END PGP SIGNATURE-----\n", "payload": "tree a3d5bb9131653d0201d80890bddff09826f70d88\nparent 0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a\nparent 5062a7712da5b9f53a5389333b1804a97c3acd70\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1667271824 +0900\ncommitter GitHub <noreply@github.com> 1667271824 +0900\n\nRollup merge of #103799 - GuillaumeGomez:search-index-tuple-struct-field, r=notriddle\n\nRemove generation of tuple struct fields in the search index\n\nThis comes from [this discussion](https://github.com/rust-lang/rust/pull/103710) as they're not very useful.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca9093ea36402a8ea2eb9cb2135051b8830881f", "html_url": "https://github.com/rust-lang/rust/commit/fca9093ea36402a8ea2eb9cb2135051b8830881f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca9093ea36402a8ea2eb9cb2135051b8830881f/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "html_url": "https://github.com/rust-lang/rust/commit/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a"}, {"sha": "5062a7712da5b9f53a5389333b1804a97c3acd70", "url": "https://api.github.com/repos/rust-lang/rust/commits/5062a7712da5b9f53a5389333b1804a97c3acd70", "html_url": "https://github.com/rust-lang/rust/commit/5062a7712da5b9f53a5389333b1804a97c3acd70"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "d027fb6e8763cad8fdc3d1ffd6a237111b5de891", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fca9093ea36402a8ea2eb9cb2135051b8830881f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca9093ea36402a8ea2eb9cb2135051b8830881f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=fca9093ea36402a8ea2eb9cb2135051b8830881f", "patch": "@@ -316,21 +316,28 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                         let desc = item.doc_value().map_or_else(String::new, |x| {\n                             short_markdown_summary(x.as_str(), &item.link_names(self.cache))\n                         });\n-                        self.cache.search_index.push(IndexItem {\n-                            ty: item.type_(),\n-                            name: s.to_string(),\n-                            path: join_with_double_colon(path),\n-                            desc,\n-                            parent,\n-                            parent_idx: None,\n-                            search_type: get_function_type_for_search(\n-                                &item,\n-                                self.tcx,\n-                                clean_impl_generics(self.cache.parent_stack.last()).as_ref(),\n-                                self.cache,\n-                            ),\n-                            aliases: item.attrs.get_doc_aliases(),\n-                        });\n+                        let ty = item.type_();\n+                        let name = s.to_string();\n+                        if ty != ItemType::StructField || u16::from_str_radix(&name, 10).is_err() {\n+                            // In case this is a field from a tuple struct, we don't add it into\n+                            // the search index because its name is something like \"0\", which is\n+                            // not useful for rustdoc search.\n+                            self.cache.search_index.push(IndexItem {\n+                                ty,\n+                                name,\n+                                path: join_with_double_colon(path),\n+                                desc,\n+                                parent,\n+                                parent_idx: None,\n+                                search_type: get_function_type_for_search(\n+                                    &item,\n+                                    self.tcx,\n+                                    clean_impl_generics(self.cache.parent_stack.last()).as_ref(),\n+                                    self.cache,\n+                                ),\n+                                aliases: item.attrs.get_doc_aliases(),\n+                            });\n+                        }\n                     }\n                 }\n                 (Some(parent), None) if is_inherent_impl_item => {"}, {"sha": "d301954b6b598debad0405d14f0d7018d41ac0af", "filename": "src/test/rustdoc/no-unit-struct-field.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fca9093ea36402a8ea2eb9cb2135051b8830881f/src%2Ftest%2Frustdoc%2Fno-unit-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca9093ea36402a8ea2eb9cb2135051b8830881f/src%2Ftest%2Frustdoc%2Fno-unit-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fno-unit-struct-field.rs?ref=fca9093ea36402a8ea2eb9cb2135051b8830881f", "patch": "@@ -0,0 +1,18 @@\n+// This test ensures that the tuple struct fields are not generated in the\n+// search index.\n+\n+// @!hasraw search-index.js '\"0\"'\n+// @!hasraw search-index.js '\"1\"'\n+// @hasraw search-index.js '\"foo_a\"'\n+// @hasraw search-index.js '\"bar_a\"'\n+\n+pub struct Bar(pub u32, pub u8);\n+pub struct Foo {\n+    pub foo_a: u8,\n+}\n+pub enum Enum {\n+    Foo(u8),\n+    Bar {\n+        bar_a: u8,\n+    },\n+}"}]}