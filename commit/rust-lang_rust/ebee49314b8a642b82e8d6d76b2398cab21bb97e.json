{"sha": "ebee49314b8a642b82e8d6d76b2398cab21bb97e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZWU0OTMxNGI4YTY0MmI4MmU4ZDZkNzZiMjM5OGNhYjIxYmI5N2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-18T22:01:45Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-18T22:01:45Z"}, "message": "rustc: Get type params from the item when translating native items", "tree": {"sha": "16cf9551d4caf42c607fffa4e41806523d98fc99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16cf9551d4caf42c607fffa4e41806523d98fc99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebee49314b8a642b82e8d6d76b2398cab21bb97e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebee49314b8a642b82e8d6d76b2398cab21bb97e", "html_url": "https://github.com/rust-lang/rust/commit/ebee49314b8a642b82e8d6d76b2398cab21bb97e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebee49314b8a642b82e8d6d76b2398cab21bb97e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ba76d52a50006763b8286168378a486a0b147d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ba76d52a50006763b8286168378a486a0b147d", "html_url": "https://github.com/rust-lang/rust/commit/a9ba76d52a50006763b8286168378a486a0b147d"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "f06789f44e8342b5fdd8a17f5baf826a2f17ac5a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebee49314b8a642b82e8d6d76b2398cab21bb97e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebee49314b8a642b82e8d6d76b2398cab21bb97e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ebee49314b8a642b82e8d6d76b2398cab21bb97e", "patch": "@@ -565,12 +565,12 @@ fn type_of_fn(@crate_ctxt cx,\n \n fn type_of_native_fn(@crate_ctxt cx, ast.native_abi abi,\n                      vec[ty.arg] inputs,\n-                     @ty.t output) -> TypeRef {\n+                     @ty.t output,\n+                     uint ty_param_count) -> TypeRef {\n     let vec[TypeRef] atys = vec();\n     if (abi == ast.native_abi_rust) {\n         atys += vec(T_taskptr(cx.tn));\n         auto t = ty.ty_native_fn(abi, inputs, output);\n-        auto ty_param_count = ty.count_ty_params(plain_ty(t));\n         auto i = 0u;\n         while (i < ty_param_count) {\n             atys += vec(T_ptr(T_tydesc(cx.tn)));\n@@ -638,7 +638,8 @@ fn type_of_inner(@crate_ctxt cx, @ty.t t, bool boxed) -> TypeRef {\n             llty = T_fn_pair(cx.tn, type_of_fn(cx, proto, args, out, 0u));\n         }\n         case (ty.ty_native_fn(?abi, ?args, ?out)) {\n-            llty = T_fn_pair(cx.tn, type_of_native_fn(cx, abi, args, out));\n+            auto nft = type_of_native_fn(cx, abi, args, out, 0u);\n+            llty = T_fn_pair(cx.tn, nft);\n         }\n         case (ty.ty_obj(?meths)) {\n             auto th = mk_type_handle();\n@@ -5417,17 +5418,20 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n \n     register_fn_pair(cx, ps, wrapper_pair_type, wrapper_fn, id);\n \n-    // Declare the function itself.\n-    auto llfty = get_pair_fn_ty(node_type(cx, ann));\n-    auto function = decl_cdecl_fn(cx.llmod, name, llfty);\n-\n     // Build the wrapper.\n     auto fcx = new_fn_ctxt(cx, wrapper_fn);\n     auto bcx = new_top_block_ctxt(fcx);\n-    auto fn_type = node_ann_type(cx, ann);\n \n-    let vec[ValueRef] call_args = vec();\n+    // Declare the function itself.\n+    auto item = cx.native_items.get(id);\n+    auto fn_type = node_ann_type(cx, ann);  // NB: has no type params\n+\n     auto abi = ty.ty_fn_abi(fn_type);\n+    auto llfnty = type_of_native_fn(cx, abi, ty.ty_fn_args(fn_type),\n+                                    ty.ty_fn_ret(fn_type), num_ty_param);\n+    auto function = decl_cdecl_fn(cx.llmod, name, llfnty);\n+\n+    let vec[ValueRef] call_args = vec();\n     auto arg_n = 3u;\n     alt (abi) {\n         case (ast.native_abi_rust) {"}]}