{"sha": "c0894e72320a9b8a80f39fae1908d9e83a8b7277", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODk0ZTcyMzIwYTliOGE4MGYzOWZhZTE5MDhkOWU4M2E4YjcyNzc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-09-09T14:42:37Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-09-10T17:51:56Z"}, "message": "typeck/expr: inaccessible private fields\n\nThis commit adjusts the missing field diagnostic logic for struct\nexpressions in typeck to improve the diagnostic when the missing\nfields are inaccessible.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "75f57c99fefb0eb33c2b29d1dc8035505c3f150d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f57c99fefb0eb33c2b29d1dc8035505c3f150d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0894e72320a9b8a80f39fae1908d9e83a8b7277", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl9aZ7wACgkQJZLnbIc4\nH9nB+hAAkWgGvQKqGiOhPtQbHxexOxmQVqmRH8yh/Z2vAMGs6MwuVQ7jIBQRvq4R\nnQXvI3KoHJ2x+Q2hjNf2WjwvFvsyfzj23lJCjdZjPgIfcVI1DltVvZ2jYBir4kqI\nxoNEkt2rCI3gIKL71iB7dL+6oJ9iAo7IiD8nXFyBMBCAlASIPJh/eTQKv9B3UNR/\nu747v4JRNdzi8L2fdbFZoY4ylFVqHvU41ZxcwSJrp70g1y87OlSyT/AlKOvHkT7p\nwqWyv8BlwnmdNgA5h10WsnqLrBA1aXrnFhOebpIPtaSV+mdVsq1UIU1HgVscXECv\nSh+9GpJys5dy+BY0CCIzcsIpIGWM4xMIVgJF5/NK2e0ACdlCHXC97Sgd8Hhe9Jmp\ndX6e2EmgNPKo8I/05pp50mK2xwhDzHoh6L1RKnqYtRfMfE/SnCE2X0ouZP0nGm2/\nJb2TDpK0a7Pn1B1CbiAFLPHKhVwr/DKxqAjQNkI1zaVJ3f+876ZZY1Xp+aBAXXBV\nym9vFKWTtA/jujOLBXdPXUDYdQq3ZNL7vHvzn6IiIh7+vFJLP1j+PHaMykf+Utve\n1yJPWRMtCae0sA7O/R4buZ+EiVrS+SQ0JM0MG1Wcd7Ozb7ODXqTQ6EYQbvndM8+2\nzy0Yxg1qlA3O4/0/KhwZIEz9lB+gwK/Mp1dxLlyLkgnBqwtAJZU=\n=V7qb\n-----END PGP SIGNATURE-----", "payload": "tree 75f57c99fefb0eb33c2b29d1dc8035505c3f150d\nparent a18b34d9793a88142c122f83fe53683f58f26ecc\nauthor David Wood <david@davidtw.co> 1599662557 +0100\ncommitter David Wood <david@davidtw.co> 1599760316 +0100\n\ntypeck/expr: inaccessible private fields\n\nThis commit adjusts the missing field diagnostic logic for struct\nexpressions in typeck to improve the diagnostic when the missing\nfields are inaccessible.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0894e72320a9b8a80f39fae1908d9e83a8b7277", "html_url": "https://github.com/rust-lang/rust/commit/c0894e72320a9b8a80f39fae1908d9e83a8b7277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0894e72320a9b8a80f39fae1908d9e83a8b7277/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a18b34d9793a88142c122f83fe53683f58f26ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18b34d9793a88142c122f83fe53683f58f26ecc", "html_url": "https://github.com/rust-lang/rust/commit/a18b34d9793a88142c122f83fe53683f58f26ecc"}], "stats": {"total": 136, "additions": 103, "deletions": 33}, "files": [{"sha": "dba46f35dca925643b36c860a55d04473b409db7", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 85, "deletions": 33, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c0894e72320a9b8a80f39fae1908d9e83a8b7277/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0894e72320a9b8a80f39fae1908d9e83a8b7277/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=c0894e72320a9b8a80f39fae1908d9e83a8b7277", "patch": "@@ -1241,42 +1241,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.span_err(span, \"union expressions should have exactly one field\");\n             }\n         } else if check_completeness && !error_happened && !remaining_fields.is_empty() {\n-            let len = remaining_fields.len();\n-\n-            let mut displayable_field_names =\n-                remaining_fields.keys().map(|ident| ident.as_str()).collect::<Vec<_>>();\n-\n-            displayable_field_names.sort();\n+            let no_accessible_remaining_fields = remaining_fields\n+                .iter()\n+                .filter(|(_, (_, field))| {\n+                    field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n+                })\n+                .next()\n+                .is_none();\n \n-            let truncated_fields_error = if len <= 3 {\n-                String::new()\n+            if no_accessible_remaining_fields {\n+                self.report_no_accessible_fields(adt_ty, span);\n             } else {\n-                format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 { \"\" } else { \"s\" })\n-            };\n-\n-            let remaining_fields_names = displayable_field_names\n-                .iter()\n-                .take(3)\n-                .map(|n| format!(\"`{}`\", n))\n-                .collect::<Vec<_>>()\n-                .join(\", \");\n-\n-            struct_span_err!(\n-                tcx.sess,\n-                span,\n-                E0063,\n-                \"missing field{} {}{} in initializer of `{}`\",\n-                pluralize!(remaining_fields.len()),\n-                remaining_fields_names,\n-                truncated_fields_error,\n-                adt_ty\n-            )\n-            .span_label(\n-                span,\n-                format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error),\n-            )\n-            .emit();\n+                self.report_missing_field(adt_ty, span, remaining_fields);\n+            }\n         }\n+\n         error_happened\n     }\n \n@@ -1293,6 +1272,79 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Report an error for a struct field expression when there are fields which aren't provided.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: missing field `you_can_use_this_field` in initializer of `foo::Foo`\n+    ///  --> src/main.rs:8:5\n+    ///   |\n+    /// 8 |     foo::Foo {};\n+    ///   |     ^^^^^^^^ missing `you_can_use_this_field`\n+    ///\n+    /// error: aborting due to previous error\n+    /// ```\n+    fn report_missing_field(\n+        &self,\n+        adt_ty: Ty<'tcx>,\n+        span: Span,\n+        remaining_fields: FxHashMap<Ident, (usize, &ty::FieldDef)>,\n+    ) {\n+        let tcx = self.tcx;\n+        let len = remaining_fields.len();\n+\n+        let mut displayable_field_names =\n+            remaining_fields.keys().map(|ident| ident.as_str()).collect::<Vec<_>>();\n+\n+        displayable_field_names.sort();\n+\n+        let truncated_fields_error = if len <= 3 {\n+            String::new()\n+        } else {\n+            format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 { \"\" } else { \"s\" })\n+        };\n+\n+        let remaining_fields_names = displayable_field_names\n+            .iter()\n+            .take(3)\n+            .map(|n| format!(\"`{}`\", n))\n+            .collect::<Vec<_>>()\n+            .join(\", \");\n+\n+        struct_span_err!(\n+            tcx.sess,\n+            span,\n+            E0063,\n+            \"missing field{} {}{} in initializer of `{}`\",\n+            pluralize!(remaining_fields.len()),\n+            remaining_fields_names,\n+            truncated_fields_error,\n+            adt_ty\n+        )\n+        .span_label(span, format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error))\n+        .emit();\n+    }\n+\n+    /// Report an error for a struct field expression when there are no visible fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    ///  --> src/main.rs:8:5\n+    ///   |\n+    /// 8 |     foo::Foo {};\n+    ///   |     ^^^^^^^^\n+    ///\n+    /// error: aborting due to previous error\n+    /// ```\n+    fn report_no_accessible_fields(&self, adt_ty: Ty<'tcx>, span: Span) {\n+        self.tcx.sess.span_err(\n+            span,\n+            &format!(\n+                \"cannot construct `{}` with struct literal syntax due to inaccessible fields\",\n+                adt_ty,\n+            ),\n+        );\n+    }\n+\n     fn report_unknown_field(\n         &self,\n         ty: Ty<'tcx>,"}, {"sha": "1ecd37de2e14ab85877115e96d7e43e8cc473da5", "filename": "src/test/ui/issues/issue-76077.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0894e72320a9b8a80f39fae1908d9e83a8b7277/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0894e72320a9b8a80f39fae1908d9e83a8b7277/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs?ref=c0894e72320a9b8a80f39fae1908d9e83a8b7277", "patch": "@@ -0,0 +1,10 @@\n+pub mod foo {\n+    pub struct Foo {\n+        you_cant_use_this_field: bool,\n+    }\n+}\n+\n+fn main() {\n+    foo::Foo {};\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+}"}, {"sha": "d834ec5e0edd2a8a482044c57e9e6357a5b59a81", "filename": "src/test/ui/issues/issue-76077.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0894e72320a9b8a80f39fae1908d9e83a8b7277/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0894e72320a9b8a80f39fae1908d9e83a8b7277/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr?ref=c0894e72320a9b8a80f39fae1908d9e83a8b7277", "patch": "@@ -0,0 +1,8 @@\n+error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+  --> $DIR/issue-76077.rs:8:5\n+   |\n+LL |     foo::Foo {};\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}