{"sha": "96c73c592300d9962730201249b844aa097ba62f", "node_id": "C_kwDOAAsO6NoAKDk2YzczYzU5MjMwMGQ5OTYyNzMwMjAxMjQ5Yjg0NGFhMDk3YmE2MmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-11T16:39:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-11T16:39:00Z"}, "message": "Auto merge of #8411 - Alexendoo:dbg_macro, r=flip1995\n\nMigrate `dbg_macro` to late pass\n\nchangelog: Make `dbg_macro` work with crate level attributes and inside macro calls\n\nOne down for #6610, fixes #7275\n\nAlso fixes #7274, and adds parenthesis around the suggestion for `dbg!(1, 2, 3)` as it expands to a tuple", "tree": {"sha": "6064ae609b00f9a16739af74c84c0c1660035972", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6064ae609b00f9a16739af74c84c0c1660035972"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c73c592300d9962730201249b844aa097ba62f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c73c592300d9962730201249b844aa097ba62f", "html_url": "https://github.com/rust-lang/rust/commit/96c73c592300d9962730201249b844aa097ba62f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c73c592300d9962730201249b844aa097ba62f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b3c4b90f4346b3990c1be387c3b3ca7b78412c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b3c4b90f4346b3990c1be387c3b3ca7b78412c", "html_url": "https://github.com/rust-lang/rust/commit/57b3c4b90f4346b3990c1be387c3b3ca7b78412c"}, {"sha": "41d7c7e059b8ae829c7d6480c53a5473d213e0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/41d7c7e059b8ae829c7d6480c53a5473d213e0a4", "html_url": "https://github.com/rust-lang/rust/commit/41d7c7e059b8ae829c7d6480c53a5473d213e0a4"}], "stats": {"total": 157, "additions": 110, "deletions": 47}, "files": [{"sha": "df1a4128af35957aa8cb5bf8fa02d37b905611cd", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 52, "deletions": 45, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/96c73c592300d9962730201249b844aa097ba62f/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c73c592300d9962730201249b844aa097ba62f/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=96c73c592300d9962730201249b844aa097ba62f", "patch": "@@ -1,11 +1,11 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n-use clippy_utils::source::snippet_opt;\n-use rustc_ast::ast;\n-use rustc_ast::tokenstream::TokenStream;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::macros::root_macro_call_first_node;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -15,14 +15,6 @@ declare_clippy_lint! {\n     /// `dbg!` macro is intended as a debugging tool. It\n     /// should not be in version control.\n     ///\n-    /// ### Known problems\n-    /// * The lint level is unaffected by crate attributes. The level can still\n-    ///   be set for functions, modules and other items. To change the level for\n-    ///   the entire crate, please use command line flags. More information and a\n-    ///   configuration example can be found in [clippy#6610].\n-    ///\n-    /// [clippy#6610]: https://github.com/rust-lang/rust-clippy/issues/6610#issuecomment-977120558\n-    ///\n     /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n@@ -39,37 +31,52 @@ declare_clippy_lint! {\n \n declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n \n-impl EarlyLintPass for DbgMacro {\n-    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {\n-        if mac.path == sym!(dbg) {\n-            if let Some(sugg) = tts_span(mac.args.inner_tokens()).and_then(|span| snippet_opt(cx, span)) {\n-                span_lint_and_sugg(\n-                    cx,\n-                    DBG_MACRO,\n-                    mac.span(),\n-                    \"`dbg!` macro is intended as a debugging tool\",\n-                    \"ensure to avoid having uses of it in version control\",\n-                    sugg,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else {\n-                span_lint_and_help(\n-                    cx,\n-                    DBG_MACRO,\n-                    mac.span(),\n-                    \"`dbg!` macro is intended as a debugging tool\",\n-                    None,\n-                    \"ensure to avoid having uses of it in version control\",\n-                );\n-            }\n+impl LateLintPass<'_> for DbgMacro {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n+        if cx.tcx.is_diagnostic_item(sym::dbg_macro, macro_call.def_id) {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let suggestion = match expr.peel_drop_temps().kind {\n+                // dbg!()\n+                ExprKind::Block(_, _) => String::new(),\n+                // dbg!(1)\n+                ExprKind::Match(val, ..) => {\n+                    snippet_with_applicability(cx, val.span.source_callsite(), \"..\", &mut applicability).to_string()\n+                },\n+                // dbg!(2, 3)\n+                ExprKind::Tup(\n+                    [\n+                        Expr {\n+                            kind: ExprKind::Match(first, ..),\n+                            ..\n+                        },\n+                        ..,\n+                        Expr {\n+                            kind: ExprKind::Match(last, ..),\n+                            ..\n+                        },\n+                    ],\n+                ) => {\n+                    let snippet = snippet_with_applicability(\n+                        cx,\n+                        first.span.source_callsite().to(last.span.source_callsite()),\n+                        \"..\",\n+                        &mut applicability,\n+                    );\n+                    format!(\"({snippet})\")\n+                },\n+                _ => return,\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                DBG_MACRO,\n+                macro_call.span,\n+                \"`dbg!` macro is intended as a debugging tool\",\n+                \"ensure to avoid having uses of it in version control\",\n+                suggestion,\n+                applicability,\n+            );\n         }\n     }\n }\n-\n-// Get span enclosing entire the token stream.\n-fn tts_span(tts: TokenStream) -> Option<Span> {\n-    let mut cursor = tts.into_trees();\n-    let first = cursor.next()?.span();\n-    let span = cursor.last().map_or(first, |tree| first.to(tree.span()));\n-    Some(span)\n-}"}, {"sha": "3bd7699792ad70387a2ac5c29bd056cfd51ae83d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c73c592300d9962730201249b844aa097ba62f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c73c592300d9962730201249b844aa097ba62f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=96c73c592300d9962730201249b844aa097ba62f", "patch": "@@ -432,7 +432,6 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n \n     store.register_pre_expansion_pass(|| Box::new(write::Write::default()));\n     store.register_pre_expansion_pass(move || Box::new(attrs::EarlyAttributes { msrv }));\n-    store.register_pre_expansion_pass(|| Box::new(dbg_macro::DbgMacro));\n }\n \n #[doc(hidden)]\n@@ -864,6 +863,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(borrow_as_ptr::BorrowAsPtr::new(msrv)));\n     store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n     store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n+    store.register_late_pass(|| Box::new(dbg_macro::DbgMacro));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "9b03c9b47832f60e1626b6477d404ec8fab87157", "filename": "tests/ui/dbg_macro.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/96c73c592300d9962730201249b844aa097ba62f/tests%2Fui%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c73c592300d9962730201249b844aa097ba62f/tests%2Fui%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.rs?ref=96c73c592300d9962730201249b844aa097ba62f", "patch": "@@ -16,4 +16,27 @@ fn main() {\n     dbg!(42);\n     dbg!(dbg!(dbg!(42)));\n     foo(3) + dbg!(factorial(4));\n+    dbg!(1, 2, dbg!(3, 4));\n+    dbg!(1, 2, 3, 4, 5);\n+}\n+\n+mod issue7274 {\n+    trait Thing<'b> {\n+        fn foo(&self);\n+    }\n+\n+    macro_rules! define_thing {\n+        ($thing:ident, $body:expr) => {\n+            impl<'a> Thing<'a> for $thing {\n+                fn foo<'b>(&self) {\n+                    $body\n+                }\n+            }\n+        };\n+    }\n+\n+    struct MyThing;\n+    define_thing!(MyThing, {\n+        dbg!(2);\n+    });\n }"}, {"sha": "8ee1b328720d919f2e9629bae91bd8ae5ca8e4bc", "filename": "tests/ui/dbg_macro.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/96c73c592300d9962730201249b844aa097ba62f/tests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96c73c592300d9962730201249b844aa097ba62f/tests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.stderr?ref=96c73c592300d9962730201249b844aa097ba62f", "patch": "@@ -76,5 +76,38 @@ help: ensure to avoid having uses of it in version control\n LL |     foo(3) + factorial(4);\n    |              ~~~~~~~~~~~~\n \n-error: aborting due to 7 previous errors\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:19:5\n+   |\n+LL |     dbg!(1, 2, dbg!(3, 4));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     (1, 2, dbg!(3, 4));\n+   |     ~~~~~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:20:5\n+   |\n+LL |     dbg!(1, 2, 3, 4, 5);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     (1, 2, 3, 4, 5);\n+   |     ~~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:40:9\n+   |\n+LL |         dbg!(2);\n+   |         ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         2;\n+   |         ~\n+\n+error: aborting due to 10 previous errors\n "}]}