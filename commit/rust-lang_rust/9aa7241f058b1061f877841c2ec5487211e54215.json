{"sha": "9aa7241f058b1061f877841c2ec5487211e54215", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYTcyNDFmMDU4YjEwNjFmODc3ODQxYzJlYzU0ODcyMTFlNTQyMTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-04T23:12:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-04T23:12:57Z"}, "message": "rustc: Don't allow recursive constants", "tree": {"sha": "9e7812e2ad6f987af75b3a6fab436a9016d32620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7812e2ad6f987af75b3a6fab436a9016d32620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aa7241f058b1061f877841c2ec5487211e54215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa7241f058b1061f877841c2ec5487211e54215", "html_url": "https://github.com/rust-lang/rust/commit/9aa7241f058b1061f877841c2ec5487211e54215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aa7241f058b1061f877841c2ec5487211e54215/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd", "html_url": "https://github.com/rust-lang/rust/commit/38ed2ea0968db8dbcebb1d1c650b8693ffb8a1dd"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "b467c396563e8864872ad37e38c093aee43e1276", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa7241f058b1061f877841c2ec5487211e54215/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa7241f058b1061f877841c2ec5487211e54215/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=9aa7241f058b1061f877841c2ec5487211e54215", "patch": "@@ -149,7 +149,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         time(time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, impl_map, crate));\n     time(time_passes, \"const checking\",\n-         bind middle::check_const::check_crate(sess, crate, def_map,\n+         bind middle::check_const::check_crate(sess, crate, ast_map, def_map,\n                                                method_map, ty_cx));\n \n     if upto == cu_typeck { ret {crate: crate, tcx: some(ty_cx)}; }"}, {"sha": "29a1864c024f38a1cf5d679ac7abeab595044b1d", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 67, "deletions": 5, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9aa7241f058b1061f877841c2ec5487211e54215/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa7241f058b1061f877841c2ec5487211e54215/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=9aa7241f058b1061f877841c2ec5487211e54215", "patch": "@@ -3,20 +3,25 @@ import syntax::{visit, ast_util};\n import driver::session::session;\n import std::map::hashmap;\n \n-fn check_crate(sess: session, crate: @crate, def_map: resolve::def_map,\n+fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n+               def_map: resolve::def_map,\n                 method_map: typeck::method_map, tcx: ty::ctxt) {\n     visit::visit_crate(*crate, false, visit::mk_vt(@{\n-        visit_item: check_item,\n+        visit_item: check_item(sess, ast_map, def_map, _, _, _),\n         visit_pat: check_pat,\n         visit_expr: bind check_expr(sess, def_map, method_map, tcx, _, _, _)\n         with *visit::default_visitor()\n     }));\n     sess.abort_if_errors();\n }\n \n-fn check_item(it: @item, &&_is_const: bool, v: visit::vt<bool>) {\n+fn check_item(sess: session, ast_map: ast_map::map, def_map: resolve::def_map,\n+              it: @item, &&_is_const: bool, v: visit::vt<bool>) {\n     alt it.node {\n-      item_const(_, ex) { v.visit_expr(ex, true, v); }\n+      item_const(_, ex) {\n+        v.visit_expr(ex, true, v);\n+        check_item_recursion(sess, ast_map, def_map, it);\n+      }\n       item_enum(vs, _) {\n         for var in vs {\n             option::with_option_do(var.node.disr_expr) {|ex|\n@@ -73,7 +78,7 @@ fn check_expr(sess: session, def_map: resolve::def_map,\n                               \"` in a constant expression\");\n             }\n           }\n-          expr_path(path) {\n+          expr_path(_) {\n             alt def_map.find(e.id) {\n               some(def_const(def_id)) {\n                 if !ast_util::is_local(def_id) {\n@@ -115,6 +120,63 @@ fn check_expr(sess: session, def_map: resolve::def_map,\n     visit::visit_expr(e, is_const, v);\n }\n \n+// Make sure a const item doesn't recursively refer to itself\n+// FIXME: Should use the dependency graph when it's available\n+fn check_item_recursion(sess: session, ast_map: ast_map::map,\n+                        def_map: resolve::def_map, it: @item) {\n+\n+    type env = {\n+        root_it: @item,\n+        sess: session,\n+        ast_map: ast_map::map,\n+        def_map: resolve::def_map,\n+        idstack: @mut [node_id],\n+    };\n+\n+    let env = {\n+        root_it: it,\n+        sess: sess,\n+        ast_map: ast_map,\n+        def_map: def_map,\n+        idstack: @mut []\n+    };\n+\n+    let visitor = visit::mk_vt(@{\n+        visit_item: visit_item,\n+        visit_expr: visit_expr\n+        with *visit::default_visitor()\n+    });\n+    visitor.visit_item(it, env, visitor);\n+\n+    fn visit_item(it: @item, &&env: env, v: visit::vt<env>) {\n+        if (*env.idstack).contains(it.id) {\n+            env.sess.span_fatal(env.root_it.span, \"recursive constant\");\n+        }\n+        vec::push(*env.idstack, it.id);\n+        visit::visit_item(it, env, v);\n+        vec::pop(*env.idstack);\n+    }\n+\n+    fn visit_expr(e: @expr, &&env: env, v: visit::vt<env>) {\n+        alt e.node {\n+          expr_path(path) {\n+            alt env.def_map.find(e.id) {\n+              some(def_const(def_id)) {\n+                alt check env.ast_map.get(def_id.node) {\n+                  ast_map::node_item(it, _) {\n+                    v.visit_item(it, env, v);\n+                  }\n+                }\n+              }\n+              _ { }\n+            }\n+          }\n+          _ { }\n+        }\n+        visit::visit_expr(e, env, v);\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "e242948b322e90f5d5c60421609f6864a8beb5ea", "filename": "src/test/compile-fail/const-recursive.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aa7241f058b1061f877841c2ec5487211e54215/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa7241f058b1061f877841c2ec5487211e54215/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs?ref=9aa7241f058b1061f877841c2ec5487211e54215", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: recursive constant\n+const a: int = b;\n+const b: int = a;\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}