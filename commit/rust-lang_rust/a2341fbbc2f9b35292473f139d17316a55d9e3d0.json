{"sha": "a2341fbbc2f9b35292473f139d17316a55d9e3d0", "node_id": "C_kwDOAAsO6NoAKGEyMzQxZmJiYzJmOWIzNTI5MjQ3M2YxMzlkMTczMTZhNTVkOWUzZDA", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2023-03-11T19:19:25Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2023-03-11T20:47:12Z"}, "message": "Introduce `Rc::into_inner`, as a parallel to `Arc::into_inner`\n\nUnlike `Arc`, `Rc` doesn't have the same race condition to avoid, but\nmaintaining an equivalent API still makes it easier to work with both\n`Rc` and `Arc`.", "tree": {"sha": "c8fc198c21ce3cb8849763dff862f5318b5675ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8fc198c21ce3cb8849763dff862f5318b5675ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2341fbbc2f9b35292473f139d17316a55d9e3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2341fbbc2f9b35292473f139d17316a55d9e3d0", "html_url": "https://github.com/rust-lang/rust/commit/a2341fbbc2f9b35292473f139d17316a55d9e3d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2341fbbc2f9b35292473f139d17316a55d9e3d0/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7948c843de94245c794e8c63dd4301a78bb5ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7948c843de94245c794e8c63dd4301a78bb5ba3", "html_url": "https://github.com/rust-lang/rust/commit/d7948c843de94245c794e8c63dd4301a78bb5ba3"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "0e0cf145a992f7ac8bc282164247542a5c5c65f7", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2341fbbc2f9b35292473f139d17316a55d9e3d0/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2341fbbc2f9b35292473f139d17316a55d9e3d0/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=a2341fbbc2f9b35292473f139d17316a55d9e3d0", "patch": "@@ -681,6 +681,24 @@ impl<T> Rc<T> {\n             Err(this)\n         }\n     }\n+\n+    /// Returns the inner value, if the `Rc` has exactly one strong reference.\n+    ///\n+    /// Otherwise, [`None`] is returned and the `Rc` is dropped.\n+    ///\n+    /// This will succeed even if there are outstanding weak references.\n+    ///\n+    /// If `Rc::into_inner` is called on every clone of this `Rc`,\n+    /// it is guaranteed that exactly one of the calls returns the inner value.\n+    /// This means in particular that the inner value is not dropped.\n+    ///\n+    /// This is equivalent to `Rc::try_unwrap(...).ok()`. (Note that these are not equivalent for\n+    /// `Arc`, due to race conditions that do not apply to `Rc`.)\n+    #[inline]\n+    #[unstable(feature = \"rc_into_inner\", issue = \"106894\")]\n+    pub fn into_inner(this: Self) -> Option<T> {\n+        Rc::try_unwrap(this).ok()\n+    }\n }\n \n impl<T> Rc<[T]> {"}, {"sha": "342dc686fa3cbb151cbed222982203d0507e9b4c", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2341fbbc2f9b35292473f139d17316a55d9e3d0/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2341fbbc2f9b35292473f139d17316a55d9e3d0/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=a2341fbbc2f9b35292473f139d17316a55d9e3d0", "patch": "@@ -151,6 +151,22 @@ fn try_unwrap() {\n     assert_eq!(Rc::try_unwrap(x), Ok(5));\n }\n \n+#[test]\n+fn into_inner() {\n+    let x = Rc::new(3);\n+    assert_eq!(Rc::into_inner(x), Some(3));\n+\n+    let x = Rc::new(4);\n+    let y = Rc::clone(&x);\n+    assert_eq!(Rc::into_inner(x), None);\n+    assert_eq!(Rc::into_inner(y), Some(4));\n+\n+    let x = Rc::new(5);\n+    let _w = Rc::downgrade(&x);\n+    assert_eq!(Rc::into_inner(x), Some(5));\n+}\n+\n+\n #[test]\n fn into_from_raw() {\n     let x = Rc::new(Box::new(\"hello\"));"}]}