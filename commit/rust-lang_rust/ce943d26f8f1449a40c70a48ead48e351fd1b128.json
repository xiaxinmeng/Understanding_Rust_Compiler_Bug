{"sha": "ce943d26f8f1449a40c70a48ead48e351fd1b128", "node_id": "C_kwDOAAsO6NoAKGNlOTQzZDI2ZjhmMTQ0OWE0MGM3MGE0OGVhZDQ4ZTM1MWZkMWIxMjg", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-11-03T02:38:55Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-11-03T02:38:55Z"}, "message": "Add line number to URLs in \"additional examples\" section of rustdoc", "tree": {"sha": "43c6328a260517afda4c538f2918a9b751cef2a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43c6328a260517afda4c538f2918a9b751cef2a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce943d26f8f1449a40c70a48ead48e351fd1b128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce943d26f8f1449a40c70a48ead48e351fd1b128", "html_url": "https://github.com/rust-lang/rust/commit/ce943d26f8f1449a40c70a48ead48e351fd1b128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce943d26f8f1449a40c70a48ead48e351fd1b128/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b5e08ad79640d7924dac447024e0d873ce478d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5e08ad79640d7924dac447024e0d873ce478d3", "html_url": "https://github.com/rust-lang/rust/commit/4b5e08ad79640d7924dac447024e0d873ce478d3"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "25fef114d95fd8bc67cb857ff9f3670856a4f41d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ce943d26f8f1449a40c70a48ead48e351fd1b128/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce943d26f8f1449a40c70a48ead48e351fd1b128/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ce943d26f8f1449a40c70a48ead48e351fd1b128", "patch": "@@ -76,7 +76,7 @@ use crate::html::format::{\n use crate::html::highlight;\n use crate::html::markdown::{HeadingOffset, Markdown, MarkdownHtml, MarkdownSummaryLine};\n use crate::html::sources;\n-use crate::scrape_examples::CallData;\n+use crate::scrape_examples::{CallData, CallLocation};\n use crate::try_none;\n \n /// A pair of name and its optional document.\n@@ -2594,6 +2594,21 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n         id = id\n     );\n \n+    // Create a URL to a particular location in a reverse-dependency's source file\n+    let link_to_loc = |call_data: &CallData, loc: &CallLocation| -> (String, String) {\n+        let (line_lo, line_hi) = loc.call_expr.line_span;\n+        let (anchor, title) = if line_lo == line_hi {\n+            ((line_lo + 1).to_string(), format!(\"line {}\", line_lo + 1))\n+        } else {\n+            (\n+                format!(\"{}-{}\", line_lo + 1, line_hi + 1),\n+                format!(\"lines {}-{}\", line_lo + 1, line_hi + 1),\n+            )\n+        };\n+        let url = format!(\"{}{}#{}\", cx.root_path(), call_data.url, anchor);\n+        (url, title)\n+    };\n+\n     // Generate the HTML for a single example, being the title and code block\n     let write_example = |w: &mut Buffer, (path, call_data): (&PathBuf, &CallData)| -> bool {\n         let contents = match fs::read_to_string(&path) {\n@@ -2631,15 +2646,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n                 let (line_lo, line_hi) = loc.call_expr.line_span;\n                 let byte_range = (byte_lo - byte_min, byte_hi - byte_min);\n                 let line_range = (line_lo - line_min, line_hi - line_min);\n-                let (anchor, line_title) = if line_lo == line_hi {\n-                    (format!(\"{}\", line_lo + 1), format!(\"line {}\", line_lo + 1))\n-                } else {\n-                    (\n-                        format!(\"{}-{}\", line_lo + 1, line_hi + 1),\n-                        format!(\"lines {}-{}\", line_lo + 1, line_hi + 1),\n-                    )\n-                };\n-                let line_url = format!(\"{}{}#{}\", cx.root_path(), call_data.url, anchor);\n+                let (line_url, line_title) = link_to_loc(call_data, loc);\n \n                 (byte_range, (line_range, line_url, line_title))\n             })\n@@ -2768,11 +2775,11 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n         if it.peek().is_some() {\n             write!(w, r#\"<div class=\"example-links\">Additional examples can be found in:<br><ul>\"#);\n             it.for_each(|(_, call_data)| {\n+                let (url, _) = link_to_loc(&call_data, &call_data.locations[0]);\n                 write!(\n                     w,\n-                    r#\"<li><a href=\"{root}{url}\">{name}</a></li>\"#,\n-                    root = cx.root_path(),\n-                    url = call_data.url,\n+                    r#\"<li><a href=\"{url}\">{name}</a></li>\"#,\n+                    url = url,\n                     name = call_data.display_name\n                 );\n             });"}]}