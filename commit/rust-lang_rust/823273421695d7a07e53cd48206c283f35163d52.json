{"sha": "823273421695d7a07e53cd48206c283f35163d52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMzI3MzQyMTY5NWQ3YTA3ZTUzY2Q0ODIwNmMyODNmMzUxNjNkNTI=", "commit": {"author": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-21T13:20:03Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T11:26:39Z"}, "message": "Fall back to main -> () when termination trait language item is not enabled", "tree": {"sha": "6759913d2adfd9e828ae3a27e41c7cd0354bd429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6759913d2adfd9e828ae3a27e41c7cd0354bd429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/823273421695d7a07e53cd48206c283f35163d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/823273421695d7a07e53cd48206c283f35163d52", "html_url": "https://github.com/rust-lang/rust/commit/823273421695d7a07e53cd48206c283f35163d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/823273421695d7a07e53cd48206c283f35163d52/comments", "author": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f842f7547ec1d58261426447cd87d6e0362d9d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f842f7547ec1d58261426447cd87d6e0362d9d9a", "html_url": "https://github.com/rust-lang/rust/commit/f842f7547ec1d58261426447cd87d6e0362d9d9a"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "e99633519f4d8d53e620f1dac52cf0d3473d16fc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/823273421695d7a07e53cd48206c283f35163d52/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823273421695d7a07e53cd48206c283f35163d52/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=823273421695d7a07e53cd48206c283f35163d52", "patch": "@@ -1066,20 +1066,25 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     }\n     fcx.demand_suptype(span, ret_ty, actual_return_ty);\n \n-    if let Some((id, _)) = *fcx.tcx.sess.entry_fn.borrow() {\n-        if id == fn_id {\n-            match fcx.sess().entry_type.get() {\n-                Some(config::EntryMain) => {\n-                    let term_id = fcx.tcx.require_lang_item(TerminationTraitLangItem);\n-\n-                    let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n-                    let trait_ref = ty::TraitRef::new(term_id, substs);\n-                    let cause = traits::ObligationCause::new(span, fn_id,\n-                                                             ObligationCauseCode::MainFunctionType);\n-                    inherited.register_predicate(\n-                        traits::Obligation::new(cause, param_env, trait_ref.to_predicate()));\n-                },\n-                _ => {},\n+    // If the termination trait language item is activated, check that the main return type\n+    // implements the termination trait.\n+    if fcx.tcx.lang_items().termination().is_some() {\n+        if let Some((id, _)) = *fcx.tcx.sess.entry_fn.borrow() {\n+            if id == fn_id {\n+                match fcx.sess().entry_type.get() {\n+                    Some(config::EntryMain) => {\n+                        let term_id = fcx.tcx.require_lang_item(TerminationTraitLangItem);\n+\n+                        let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n+                        let trait_ref = ty::TraitRef::new(term_id, substs);\n+                        let cause = traits::ObligationCause::new(\n+                            span, fn_id, ObligationCauseCode::MainFunctionType);\n+\n+                        inherited.register_predicate(\n+                            traits::Obligation::new(cause, param_env, trait_ref.to_predicate()));\n+                    },\n+                    _ => {},\n+                }\n             }\n         }\n     }"}, {"sha": "f02998f7edf74e3020b943ed7aabee3909df467c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/823273421695d7a07e53cd48206c283f35163d52/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823273421695d7a07e53cd48206c283f35163d52/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=823273421695d7a07e53cd48206c283f35163d52", "patch": "@@ -203,12 +203,19 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n \n             let actual = tcx.fn_sig(main_def_id);\n+            let expected_return_type = if tcx.lang_items().termination().is_some() {\n+                // we take the return type of the given main function, the real check is done\n+                // in `check_fn`\n+                actual.output().skip_binder()\n+            } else {\n+                // standard () main return type\n+                tcx.mk_nil()\n+            };\n \n             let se_ty = tcx.mk_fn_ptr(ty::Binder(\n                 tcx.mk_fn_sig(\n                     iter::empty(),\n-                    // the return type is checked in `check_fn`\n-                    actual.output().skip_binder(),\n+                    expected_return_type,\n                     false,\n                     hir::Unsafety::Normal,\n                     Abi::Rust"}]}