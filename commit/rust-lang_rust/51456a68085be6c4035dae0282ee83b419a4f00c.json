{"sha": "51456a68085be6c4035dae0282ee83b419a4f00c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNDU2YTY4MDg1YmU2YzQwMzVkYWUwMjgyZWU4M2I0MTlhNGYwMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-27T08:34:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-27T08:34:45Z"}, "message": "Auto merge of #45353 - wesleywiser:untracked_queries, r=michaelwoerister\n\n[incremental] Add support for eval always queries\n\nPart of #45238", "tree": {"sha": "4fad01cc253162c6226d2bd7fb2e1b2672eada19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fad01cc253162c6226d2bd7fb2e1b2672eada19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51456a68085be6c4035dae0282ee83b419a4f00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51456a68085be6c4035dae0282ee83b419a4f00c", "html_url": "https://github.com/rust-lang/rust/commit/51456a68085be6c4035dae0282ee83b419a4f00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51456a68085be6c4035dae0282ee83b419a4f00c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1855aff8d78e74a7ec5140dbd7bd18fc3566095a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1855aff8d78e74a7ec5140dbd7bd18fc3566095a", "html_url": "https://github.com/rust-lang/rust/commit/1855aff8d78e74a7ec5140dbd7bd18fc3566095a"}, {"sha": "8281e883dd12260f00ce650aa8824507d9c447af", "url": "https://api.github.com/repos/rust-lang/rust/commits/8281e883dd12260f00ce650aa8824507d9c447af", "html_url": "https://github.com/rust-lang/rust/commit/8281e883dd12260f00ce650aa8824507d9c447af"}], "stats": {"total": 111, "additions": 94, "deletions": 17}, "files": [{"sha": "4a763d4144edcbf8a044a2cc5a1b6e2ba9085241", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/51456a68085be6c4035dae0282ee83b419a4f00c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51456a68085be6c4035dae0282ee83b419a4f00c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=51456a68085be6c4035dae0282ee83b419a4f00c", "patch": "@@ -90,6 +90,11 @@ macro_rules! is_input_attr {\n     ($attr:ident) => (false);\n }\n \n+macro_rules! is_eval_always_attr {\n+    (eval_always) => (true);\n+    ($attr:ident) => (false);\n+}\n+\n macro_rules! contains_anon_attr {\n     ($($attr:ident),*) => ({$(is_anon_attr!($attr) | )* false});\n }\n@@ -98,6 +103,10 @@ macro_rules! contains_input_attr {\n     ($($attr:ident),*) => ({$(is_input_attr!($attr) | )* false});\n }\n \n+macro_rules! contains_eval_always_attr {\n+    ($($attr:ident),*) => ({$(is_eval_always_attr!($attr) | )* false});\n+}\n+\n macro_rules! define_dep_nodes {\n     (<$tcx:tt>\n     $(\n@@ -160,6 +169,15 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n+            #[inline]\n+            pub fn is_eval_always(&self) -> bool {\n+                match *self {\n+                    $(\n+                        DepKind :: $variant => { contains_eval_always_attr!($($attr), *) }\n+                    )*\n+                }\n+            }\n+\n             #[allow(unreachable_code)]\n             #[inline]\n             pub fn has_params(&self) -> bool {\n@@ -447,10 +465,10 @@ define_dep_nodes!( <'tcx>\n \n     // Represents different phases in the compiler.\n     [] RegionScopeTree(DefId),\n-    [] Coherence,\n-    [] CoherenceInherentImplOverlapCheck,\n+    [eval_always] Coherence,\n+    [eval_always] CoherenceInherentImplOverlapCheck,\n     [] CoherenceCheckTrait(DefId),\n-    [] PrivacyAccessLevels(CrateNum),\n+    [eval_always] PrivacyAccessLevels(CrateNum),\n \n     // Represents the MIR for a fn; also used as the task node for\n     // things read/modify that MIR.\n@@ -467,7 +485,7 @@ define_dep_nodes!( <'tcx>\n \n     [] Reachability,\n     [] MirKeys,\n-    [] CrateVariances,\n+    [eval_always] CrateVariances,\n \n     // Nodes representing bits of computed IR in the tcx. Each shared\n     // table in the tcx (or elsewhere) maps to one of these\n@@ -497,7 +515,7 @@ define_dep_nodes!( <'tcx>\n     [] DtorckConstraint(DefId),\n     [] AdtDestructor(DefId),\n     [] AssociatedItemDefIds(DefId),\n-    [] InherentImpls(DefId),\n+    [eval_always] InherentImpls(DefId),\n     [] TypeckBodiesKrate,\n     [] TypeckTables(DefId),\n     [] UsedTraitImports(DefId),\n@@ -567,7 +585,7 @@ define_dep_nodes!( <'tcx>\n     [] IsCompilerBuiltins(CrateNum),\n     [] HasGlobalAllocator(CrateNum),\n     [] ExternCrate(DefId),\n-    [] LintLevels,\n+    [eval_always] LintLevels,\n     [] Specializes { impl1: DefId, impl2: DefId },\n     [input] InScopeTraits(DefIndex),\n     [] ModuleExports(DefId),\n@@ -626,7 +644,7 @@ define_dep_nodes!( <'tcx>\n     [] StabilityIndex,\n     [] AllCrateNums,\n     [] ExportedSymbols(CrateNum),\n-    [] CollectAndPartitionTranslationItems,\n+    [eval_always] CollectAndPartitionTranslationItems,\n     [] ExportName(DefId),\n     [] ContainsExternIndicator(DefId),\n     [] IsTranslatedFunction(DefId),"}, {"sha": "ec709b301eb7334613088def042015c1126e40ce", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/51456a68085be6c4035dae0282ee83b419a4f00c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51456a68085be6c4035dae0282ee83b419a4f00c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=51456a68085be6c4035dae0282ee83b419a4f00c", "patch": "@@ -199,11 +199,27 @@ impl DepGraph {\n                                    -> (R, DepNodeIndex)\n         where C: DepGraphSafe + StableHashingContextProvider<ContextType=HCX>,\n               R: HashStable<HCX>,\n+    {\n+        self.with_task_impl(key, cx, arg, task,\n+            |data, key| data.borrow_mut().push_task(key),\n+            |data, key| data.borrow_mut().pop_task(key))\n+    }\n+\n+    fn with_task_impl<C, A, R, HCX>(&self,\n+                                    key: DepNode,\n+                                    cx: C,\n+                                    arg: A,\n+                                    task: fn(C, A) -> R,\n+                                    push: fn(&RefCell<CurrentDepGraph>, DepNode),\n+                                    pop: fn(&RefCell<CurrentDepGraph>, DepNode) -> DepNodeIndex)\n+                                    -> (R, DepNodeIndex)\n+        where C: DepGraphSafe + StableHashingContextProvider<ContextType=HCX>,\n+              R: HashStable<HCX>,\n     {\n         if let Some(ref data) = self.data {\n             debug_assert!(!data.colors.borrow().contains_key(&key));\n \n-            data.current.borrow_mut().push_task(key);\n+            push(&data.current, key);\n             if cfg!(debug_assertions) {\n                 profq_msg(ProfileQueriesMsg::TaskBegin(key.clone()))\n             };\n@@ -220,7 +236,7 @@ impl DepGraph {\n                 profq_msg(ProfileQueriesMsg::TaskEnd)\n             };\n \n-            let dep_node_index = data.current.borrow_mut().pop_task(key);\n+            let dep_node_index = pop(&data.current, key);\n \n             let mut stable_hasher = StableHasher::new();\n             result.hash_stable(&mut hcx, &mut stable_hasher);\n@@ -290,6 +306,22 @@ impl DepGraph {\n         }\n     }\n \n+    /// Execute something within an \"eval-always\" task which is a task\n+    // that runs whenever anything changes.\n+    pub fn with_eval_always_task<C, A, R, HCX>(&self,\n+                                   key: DepNode,\n+                                   cx: C,\n+                                   arg: A,\n+                                   task: fn(C, A) -> R)\n+                                   -> (R, DepNodeIndex)\n+        where C: DepGraphSafe + StableHashingContextProvider<ContextType=HCX>,\n+              R: HashStable<HCX>,\n+    {\n+        self.with_task_impl(key, cx, arg, task,\n+            |data, key| data.borrow_mut().push_eval_always_task(key),\n+            |data, key| data.borrow_mut().pop_eval_always_task(key))\n+    }\n+\n     #[inline]\n     pub fn read(&self, v: DepNode) {\n         if let Some(ref data) = self.data {\n@@ -788,6 +820,24 @@ impl CurrentDepGraph {\n         }\n     }\n \n+    fn push_eval_always_task(&mut self, key: DepNode) {\n+        self.task_stack.push(OpenTask::EvalAlways { node: key });\n+    }\n+\n+    fn pop_eval_always_task(&mut self, key: DepNode) -> DepNodeIndex {\n+        let popped_node = self.task_stack.pop().unwrap();\n+\n+        if let OpenTask::EvalAlways {\n+            node,\n+        } = popped_node {\n+            debug_assert_eq!(node, key);\n+            let krate_idx = self.node_to_node_index[&DepNode::new_no_params(DepKind::Krate)];\n+            self.alloc_node(node, vec![krate_idx])\n+        } else {\n+            bug!(\"pop_eval_always_task() - Expected eval always task to be popped\");\n+        }\n+    }\n+\n     fn read_index(&mut self, source: DepNodeIndex) {\n         match self.task_stack.last_mut() {\n             Some(&mut OpenTask::Regular {\n@@ -818,7 +868,8 @@ impl CurrentDepGraph {\n                     reads.push(source);\n                 }\n             }\n-            Some(&mut OpenTask::Ignore) | None => {\n+            Some(&mut OpenTask::Ignore) |\n+            Some(&mut OpenTask::EvalAlways { .. }) | None => {\n                 // ignore\n             }\n         }\n@@ -851,4 +902,7 @@ enum OpenTask {\n         read_set: FxHashSet<DepNodeIndex>,\n     },\n     Ignore,\n+    EvalAlways {\n+        node: DepNode,\n+    },\n }"}, {"sha": "bb042be52542561045a2b8b744e162320e20e34f", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/51456a68085be6c4035dae0282ee83b419a4f00c/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51456a68085be6c4035dae0282ee83b419a4f00c/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=51456a68085be6c4035dae0282ee83b419a4f00c", "patch": "@@ -433,10 +433,17 @@ macro_rules! define_maps {\n                 profq_msg!(tcx, ProfileQueriesMsg::ProviderBegin);\n                 let res = tcx.cycle_check(span, Query::$name(key), || {\n                     tcx.sess.diagnostic().track_diagnostics(|| {\n-                        tcx.dep_graph.with_task(dep_node,\n-                                                tcx,\n-                                                key,\n-                                                Self::compute_result)\n+                        if dep_node.kind.is_eval_always() {\n+                            tcx.dep_graph.with_eval_always_task(dep_node,\n+                                                                tcx,\n+                                                                key,\n+                                                                Self::compute_result)\n+                        } else {\n+                            tcx.dep_graph.with_task(dep_node,\n+                                                    tcx,\n+                                                    key,\n+                                                    Self::compute_result)\n+                        }\n                     })\n                 })?;\n                 profq_msg!(tcx, ProfileQueriesMsg::ProviderEnd);"}, {"sha": "8abf7d3d09cd87b265a3ee14c986dd76df53d9f7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51456a68085be6c4035dae0282ee83b419a4f00c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51456a68085be6c4035dae0282ee83b419a4f00c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=51456a68085be6c4035dae0282ee83b419a4f00c", "patch": "@@ -1563,9 +1563,7 @@ pub fn provide(providers: &mut Providers) {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Rc<AccessLevels> {\n-    tcx.dep_graph.with_ignore(|| { // FIXME\n-        tcx.privacy_access_levels(LOCAL_CRATE)\n-    })\n+    tcx.privacy_access_levels(LOCAL_CRATE)\n }\n \n fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}