{"sha": "c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "node_id": "C_kwDOAAsO6NoAKGMxYmRlNmU0YjY5M2IwOWMzYjM2YzBhMmM5ZjliYWI2NzUxNDhmYTY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-13T12:55:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-13T12:55:13Z"}, "message": "Rollup merge of #89794 - jkugelman:must-use-to_value-conversions, r=joshtriplett\n\nAdd #[must_use] to to_value conversions\n\n`NonNull<T>::cast` snuck in when I wasn't looking. What a scamp!\n\nParent issue: #89692\n\nr? ````@joshtriplett````", "tree": {"sha": "afede48bc4c8b8e90516a7060988c484039eee34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afede48bc4c8b8e90516a7060988c484039eee34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZtcyCRBK7hj4Ov3rIwAAMZYIAIfFn0slYbLXOsSEGb1w2X0y\n/zFSrdUadIp+6Nx7J1Hbq8GB9TFOAUSCdgdC2L2k5IMmfkkaN6uQ5Bj30jKDoAF8\nBv6GR7RU00l/nKVXH1UZYCunQm9VEEADLVZhwj/lH6cFbYLtaVz34b0Gd6wBeodS\nvXJzFp/1v6JtD889lX1wHGuVtrnqY5p9LrKEnCGIV9jECTqIzcNBFchEdMIgGLji\n6oCG/YU51lp8XBDrCw1Hdr8Yw5Xo7PJznolnzDXibcJ4gGDvieC1b/Ed8rS9Tvv4\nKp3fcKO+bKqy6hOdUgP2PF+/nG2Ri27d2iPKe1pFfsgJDeQdEIGfWlqdyoIg2BA=\n=L0Qk\n-----END PGP SIGNATURE-----\n", "payload": "tree afede48bc4c8b8e90516a7060988c484039eee34\nparent cabfda428dcd986f090ecbec297746a2fc27fd9f\nparent 0cf84c8c19753d9614efcde455f5f987b2a43e90\nauthor Yuki Okushi <jtitor@2k36.org> 1634129713 +0900\ncommitter GitHub <noreply@github.com> 1634129713 +0900\n\nRollup merge of #89794 - jkugelman:must-use-to_value-conversions, r=joshtriplett\n\nAdd #[must_use] to to_value conversions\n\n`NonNull<T>::cast` snuck in when I wasn't looking. What a scamp!\n\nParent issue: #89692\n\nr? ````@joshtriplett````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "html_url": "https://github.com/rust-lang/rust/commit/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cabfda428dcd986f090ecbec297746a2fc27fd9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cabfda428dcd986f090ecbec297746a2fc27fd9f", "html_url": "https://github.com/rust-lang/rust/commit/cabfda428dcd986f090ecbec297746a2fc27fd9f"}, {"sha": "0cf84c8c19753d9614efcde455f5f987b2a43e90", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf84c8c19753d9614efcde455f5f987b2a43e90", "html_url": "https://github.com/rust-lang/rust/commit/0cf84c8c19753d9614efcde455f5f987b2a43e90"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "3c4972bd3c9a47f74046c7022098021104200fc4", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "patch": "@@ -328,9 +328,11 @@ impl char {\n     ///\n     /// ```should_panic\n     /// // this panics\n-    /// '1'.to_digit(37);\n+    /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n         assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");"}, {"sha": "ee93f00a7fb9be46c97b0b309774554fdbd34ca2", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "patch": "@@ -242,6 +242,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// The pointer can be later reconstructed with [`NonNull::from_raw_parts`].\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_raw_parts(self) -> (NonNull<()>, <T as super::Pointee>::Metadata) {\n         (self.cast(), super::metadata(self.as_ptr()))\n@@ -386,6 +388,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// ```\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.36.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn cast<U>(self) -> NonNull<U> {\n         // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null"}, {"sha": "6827d3a8d2448342218881c9fc6c66a0116dd257", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "patch": "@@ -1342,6 +1342,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_bytes(), b\"foo\");\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n@@ -1367,6 +1369,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_bytes_with_nul(), b\"foo\\0\");\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n         unsafe { &*(&self.inner as *const [c_char] as *const [u8]) }\n@@ -1437,6 +1441,8 @@ impl CStr {\n     ///     Cow::Owned(String::from(\"Hello \ufffdWorld\")) as Cow<'_, str>\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         String::from_utf8_lossy(self.to_bytes())"}, {"sha": "46c9aa5e627c502082a5cabb691c5107eabd6ed6", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "patch": "@@ -576,6 +576,8 @@ impl OsStr {\n     /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n@@ -627,6 +629,8 @@ impl OsStr {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n@@ -644,6 +648,8 @@ impl OsStr {\n     /// assert_eq!(os_string, OsString::from(\"foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_os_string(&self) -> OsString {\n         OsString { inner: self.inner.to_owned() }"}, {"sha": "e5e9fedb61eaf1b70833540079c8b6534f6ac494", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "patch": "@@ -426,6 +426,8 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).to_canonical().is_loopback(), true);\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     pub const fn to_canonical(&self) -> IpAddr {\n@@ -901,6 +903,8 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv6_compatible(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n@@ -926,6 +930,8 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv6_mapped(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n@@ -1648,6 +1654,8 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {\n@@ -1685,6 +1693,8 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv4(&self) -> Option<Ipv4Addr> {\n         if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n@@ -1708,9 +1718,11 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).is_loopback(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).to_canonical().is_loopback(), true);\n     /// ```\n-    #[inline]\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n+    #[inline]\n     pub const fn to_canonical(&self) -> IpAddr {\n         if let Some(mapped) = self.to_ipv4_mapped() {\n             return IpAddr::V4(mapped);"}, {"sha": "47156dc33e518d1902c7d3b061927c1a416afffe", "filename": "library/std/src/path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=c1bde6e4b693b09c3b36c0a2c9f9bab675148fa6", "patch": "@@ -1952,6 +1952,8 @@ impl Path {\n     /// assert_eq!(path.to_str(), Some(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n@@ -1978,6 +1980,8 @@ impl Path {\n     /// Had `path` contained invalid unicode, the `to_string_lossy` call might\n     /// have returned `\"fo\ufffd.txt\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n@@ -1994,6 +1998,8 @@ impl Path {\n     /// assert_eq!(path_buf, std::path::PathBuf::from(\"foo.txt\"));\n     /// ```\n     #[rustc_conversion_suggestion]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_path_buf(&self) -> PathBuf {\n         PathBuf::from(self.inner.to_os_string())"}]}