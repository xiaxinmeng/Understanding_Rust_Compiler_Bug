{"sha": "8ce9c244ead18dc80437953ad5d44982b05f9727", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZTljMjQ0ZWFkMThkYzgwNDM3OTUzYWQ1ZDQ0OTgyYjA1Zjk3Mjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-10-08T18:10:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-08T18:10:23Z"}, "message": "Merge pull request #2116 from niklasf/range-plus-minus-one\n\nLint range_plus_one and range_minus_one (closes #329)", "tree": {"sha": "c605615b0c2502a5a11448238a8c98d027aa0f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c605615b0c2502a5a11448238a8c98d027aa0f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ce9c244ead18dc80437953ad5d44982b05f9727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce9c244ead18dc80437953ad5d44982b05f9727", "html_url": "https://github.com/rust-lang/rust/commit/8ce9c244ead18dc80437953ad5d44982b05f9727", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ce9c244ead18dc80437953ad5d44982b05f9727/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a54baad4fa177efac04eafd6d9ffe6236f7d3c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/a54baad4fa177efac04eafd6d9ffe6236f7d3c45", "html_url": "https://github.com/rust-lang/rust/commit/a54baad4fa177efac04eafd6d9ffe6236f7d3c45"}, {"sha": "16781a1d89b3cbc89bfb9127885d658f83f310e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/16781a1d89b3cbc89bfb9127885d658f83f310e7", "html_url": "https://github.com/rust-lang/rust/commit/16781a1d89b3cbc89bfb9127885d658f83f310e7"}], "stats": {"total": 219, "additions": 213, "deletions": 6}, "files": [{"sha": "0f27a74ac8e3f97174d0e4e9aa6d443a2ff216dc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ce9c244ead18dc80437953ad5d44982b05f9727/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce9c244ead18dc80437953ad5d44982b05f9727/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8ce9c244ead18dc80437953ad5d44982b05f9727", "patch": "@@ -263,7 +263,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box loops::Pass);\n     reg.register_late_lint_pass(box lifetimes::LifetimePass);\n     reg.register_late_lint_pass(box entry::HashMapLint);\n-    reg.register_late_lint_pass(box ranges::StepByZero);\n+    reg.register_late_lint_pass(box ranges::Pass);\n     reg.register_late_lint_pass(box types::CastPass);\n     reg.register_late_lint_pass(box types::TypeComplexityPass::new(conf.type_complexity_threshold));\n     reg.register_late_lint_pass(box matches::MatchPass);"}, {"sha": "aff0c4b08abad2899e1f50f9c5a12fbff8c68ea4", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 111, "deletions": 5, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/8ce9c244ead18dc80437953ad5d44982b05f9727/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce9c244ead18dc80437953ad5d44982b05f9727/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=8ce9c244ead18dc80437953ad5d44982b05f9727", "patch": "@@ -1,7 +1,10 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{is_integer_literal, paths, snippet, span_lint};\n+use syntax::ast::RangeLimits;\n+use syntax::codemap::Spanned;\n+use utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then};\n use utils::{get_trait_def_id, higher, implements_trait};\n+use utils::sugg::Sugg;\n \n /// **What it does:** Checks for calling `.step_by(0)` on iterators,\n /// which never terminates.\n@@ -38,16 +41,57 @@ declare_lint! {\n     \"zipping iterator with a range when `enumerate()` would do\"\n }\n \n+/// **What it does:** Checks for exclusive ranges where 1 is added to the\n+/// upper bound, e.g. `x..(y+1)`.\n+///\n+/// **Why is this bad?** The code is more readable with an inclusive range\n+/// like `x..=y`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// for x..(y+1) { .. }\n+/// ```\n+declare_lint! {\n+    pub RANGE_PLUS_ONE,\n+    Allow,\n+    \"`x..(y+1)` reads better as `x..=y`\"\n+}\n+\n+/// **What it does:** Checks for inclusive ranges where 1 is subtracted from\n+/// the upper bound, e.g. `x..=(y-1)`.\n+///\n+/// **Why is this bad?** The code is more readable with an exclusive range\n+/// like `x..y`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// for x..=(y-1) { .. }\n+/// ```\n+declare_lint! {\n+    pub RANGE_MINUS_ONE,\n+    Warn,\n+    \"`x..=(y-1)` reads better as `x..y`\"\n+}\n+\n #[derive(Copy, Clone)]\n-pub struct StepByZero;\n+pub struct Pass;\n \n-impl LintPass for StepByZero {\n+impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(ITERATOR_STEP_BY_ZERO, RANGE_ZIP_WITH_LEN)\n+        lint_array!(\n+            ITERATOR_STEP_BY_ZERO,\n+            RANGE_ZIP_WITH_LEN,\n+            RANGE_PLUS_ONE,\n+            RANGE_MINUS_ONE\n+        )\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StepByZero {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprMethodCall(ref path, _, ref args) = expr.node {\n             let name = path.name.as_str();\n@@ -92,6 +136,46 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StepByZero {\n                 }}\n             }\n         }\n+\n+        // exclusive range plus one: x..(y+1)\n+        if_let_chain! {[\n+            let Some(higher::Range { start, end: Some(end), limits: RangeLimits::HalfOpen }) = higher::range(expr),\n+            let Some(y) = y_plus_one(end),\n+        ], {\n+            span_lint_and_then(\n+                cx,\n+                RANGE_PLUS_ONE,\n+                expr.span,\n+                \"an inclusive range would be more readable\",\n+                |db| {\n+                    let start = start.map_or(\"\".to_owned(), |x| Sugg::hir(cx, x, \"x\").to_string());\n+                    let end = Sugg::hir(cx, y, \"y\");\n+                    db.span_suggestion(expr.span,\n+                                       \"use\",\n+                                       format!(\"{}..={}\", start, end));\n+                },\n+            );\n+        }}\n+\n+        // inclusive range minus one: x..=(y-1)\n+        if_let_chain! {[\n+            let Some(higher::Range { start, end: Some(end), limits: RangeLimits::Closed }) = higher::range(expr),\n+            let Some(y) = y_minus_one(end),\n+        ], {\n+            span_lint_and_then(\n+                cx,\n+                RANGE_MINUS_ONE,\n+                expr.span,\n+                \"an exclusive range would be more readable\",\n+                |db| {\n+                    let start = start.map_or(\"\".to_owned(), |x| Sugg::hir(cx, x, \"x\").to_string());\n+                    let end = Sugg::hir(cx, y, \"y\");\n+                    db.span_suggestion(expr.span,\n+                                       \"use\",\n+                                       format!(\"{}..{}\", start, end));\n+                },\n+            );\n+        }}\n     }\n }\n \n@@ -102,3 +186,25 @@ fn has_step_by(cx: &LateContext, expr: &Expr) -> bool {\n \n     get_trait_def_id(cx, &paths::ITERATOR).map_or(false, |iterator_trait| implements_trait(cx, ty, iterator_trait, &[]))\n }\n+\n+fn y_plus_one(expr: &Expr) -> Option<&Expr> {\n+    match expr.node {\n+        ExprBinary(Spanned { node: BiAdd, .. }, ref lhs, ref rhs) => {\n+            if is_integer_literal(lhs, 1) {\n+                Some(rhs)\n+            } else if is_integer_literal(rhs, 1) {\n+                Some(lhs)\n+            } else {\n+                None\n+            }\n+        },\n+        _ => None,\n+    }\n+}\n+\n+fn y_minus_one(expr: &Expr) -> Option<&Expr> {\n+    match expr.node {\n+        ExprBinary(Spanned { node: BiSub, .. }, ref lhs, ref rhs) if is_integer_literal(rhs, 1) => Some(lhs),\n+        _ => None,\n+    }\n+}"}, {"sha": "dce81634876fb195cb543b1fd757aff92c953b8a", "filename": "tests/ui/range_plus_minus_one.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ce9c244ead18dc80437953ad5d44982b05f9727/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce9c244ead18dc80437953ad5d44982b05f9727/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=8ce9c244ead18dc80437953ad5d44982b05f9727", "patch": "@@ -0,0 +1,34 @@\n+#![feature(inclusive_range_syntax)]\n+\n+fn f() -> usize {\n+    42\n+}\n+\n+#[warn(range_plus_one)]\n+fn main() {\n+    for _ in 0..2 { }\n+    for _ in 0..=2 { }\n+\n+    for _ in 0..3+1 { }\n+    for _ in 0..=3+1 { }\n+\n+    for _ in 0..1+5 { }\n+    for _ in 0..=1+5 { }\n+\n+    for _ in 1..1+1 { }\n+    for _ in 1..=1+1 { }\n+\n+    for _ in 0..13+13 { }\n+    for _ in 0..=13-7 { }\n+\n+    for _ in 0..(1+f()) { }\n+    for _ in 0..=(1+f()) { }\n+\n+    let _ = ..11-1;\n+    let _ = ..=11-1;\n+    let _ = ..=(11-1);\n+    let _ = (f()+1)..(f()+1);\n+\n+    let mut vec: Vec<()> = std::vec::Vec::new();\n+    vec.drain(..);\n+}"}, {"sha": "a2a3ae6077f34193453f82892bfcea9a4c60a08e", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8ce9c244ead18dc80437953ad5d44982b05f9727/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ce9c244ead18dc80437953ad5d44982b05f9727/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=8ce9c244ead18dc80437953ad5d44982b05f9727", "patch": "@@ -0,0 +1,67 @@\n+error: an inclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:12:14\n+   |\n+12 |     for _ in 0..3+1 { }\n+   |              ------\n+   |              |\n+   |              help: use: `0..=3`\n+   |              in this macro invocation\n+   |\n+   = note: `-D range-plus-one` implied by `-D warnings`\n+\n+error: an inclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:15:14\n+   |\n+15 |     for _ in 0..1+5 { }\n+   |              ------\n+   |              |\n+   |              help: use: `0..=5`\n+   |              in this macro invocation\n+\n+error: an inclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:18:14\n+   |\n+18 |     for _ in 1..1+1 { }\n+   |              ------\n+   |              |\n+   |              help: use: `1..=1`\n+   |              in this macro invocation\n+\n+error: an inclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:24:14\n+   |\n+24 |     for _ in 0..(1+f()) { }\n+   |              ----------\n+   |              |\n+   |              help: use: `0..=f()`\n+   |              in this macro invocation\n+\n+error: an exclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:28:13\n+   |\n+28 |     let _ = ..=11-1;\n+   |             -------\n+   |             |\n+   |             help: use: `..11`\n+   |             in this macro invocation\n+   |\n+   = note: `-D range-minus-one` implied by `-D warnings`\n+\n+error: an exclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:29:13\n+   |\n+29 |     let _ = ..=(11-1);\n+   |             ---------\n+   |             |\n+   |             help: use: `..11`\n+   |             in this macro invocation\n+\n+error: an inclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:30:13\n+   |\n+30 |     let _ = (f()+1)..(f()+1);\n+   |             ----------------\n+   |             |\n+   |             help: use: `(f()+1)..=f()`\n+   |             in this macro invocation\n+"}]}