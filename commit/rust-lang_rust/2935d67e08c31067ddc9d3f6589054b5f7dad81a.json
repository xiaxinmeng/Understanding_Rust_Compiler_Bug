{"sha": "2935d67e08c31067ddc9d3f6589054b5f7dad81a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MzVkNjdlMDhjMzEwNjdkZGM5ZDNmNjU4OTA1NGI1ZjdkYWQ4MWE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T12:59:06Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T13:12:43Z"}, "message": "Rollup merge of #22277 - pnkfelix:reference-update-feature-gate-list, r=steveklabnik\n\n Added all active features to the list in reference.md.\n\nAdded a second note about keeping the reference.md list up-to-date to the bottom of the list, since not everyone (including me) reads the big comment at the top of it.  :)\n\nEnsured that the feature gate list in reference.md is kept in alphabetical order.", "tree": {"sha": "148257f0e0ac547984e9f24fe64ce3e3f4ead623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148257f0e0ac547984e9f24fe64ce3e3f4ead623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2935d67e08c31067ddc9d3f6589054b5f7dad81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2935d67e08c31067ddc9d3f6589054b5f7dad81a", "html_url": "https://github.com/rust-lang/rust/commit/2935d67e08c31067ddc9d3f6589054b5f7dad81a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2935d67e08c31067ddc9d3f6589054b5f7dad81a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96fb8ecb82bdab279f955a44fdb80e309815c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96fb8ecb82bdab279f955a44fdb80e309815c6c", "html_url": "https://github.com/rust-lang/rust/commit/f96fb8ecb82bdab279f955a44fdb80e309815c6c"}, {"sha": "a7d5c3f682002157c9d74cce773fb792d92333e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d5c3f682002157c9d74cce773fb792d92333e1", "html_url": "https://github.com/rust-lang/rust/commit/a7d5c3f682002157c9d74cce773fb792d92333e1"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "522b4b5966ac1e1c209a8e838d0ab716755a5956", "filename": "src/doc/reference.md", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2935d67e08c31067ddc9d3f6589054b5f7dad81a/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/2935d67e08c31067ddc9d3f6589054b5f7dad81a/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=2935d67e08c31067ddc9d3f6589054b5f7dad81a", "patch": "@@ -2377,21 +2377,33 @@ considered off, and using the features will result in a compiler error.\n \n The currently implemented features of the reference compiler are:\n \n+* `advanced_slice_patterns` - see the [match expressions](#match-expressions)\n+                              section for discussion; the exact semantics of\n+                              slice patterns are subject to change.\n+\n * `asm` - The `asm!` macro provides a means for inline assembly. This is often\n           useful, but the exact syntax for this feature along with its\n           semantics are likely to change, so this macro usage must be opted\n           into.\n \n+* `associated_types` - Allows type aliases in traits. Experimental.\n+\n+* `box_patterns` - Allows `box` patterns, the exact semantics of which\n+                   is subject to change.\n+\n+* `box_syntax` - Allows use of `box` expressions, the exact semantics of which\n+                 is subject to change.\n+\n * `concat_idents` - Allows use of the `concat_idents` macro, which is in many\n                     ways insufficient for concatenating identifiers, and may be\n                     removed entirely for something more wholesome.\n \n-* `default_type_params` - Allows use of default type parameters. The future of\n-                          this feature is uncertain.\n-\n * `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n                  are inherently unstable and no promise about them is made.\n \n+* `int_uint` - Allows the use of the `int` and `uint` types, which are deprecated.\n+               Use `isize` and `usize` instead.\n+\n * `lang_items` - Allows use of the `#[lang]` attribute. Like `intrinsics`,\n                  lang items are inherently unstable and no promise about them\n                  is made.\n@@ -2410,12 +2422,33 @@ The currently implemented features of the reference compiler are:\n * `log_syntax` - Allows use of the `log_syntax` macro attribute, which is a\n                  nasty hack that will certainly be removed.\n \n+* `main` - Allows use of the `#[main]` attribute, which changes the entry point\n+           into a Rust program. This capabiilty is subject to change.\n+\n+* `macro_reexport` - Allows macros to be re-exported from one crate after being imported\n+                     from another. This feature was originally designed with the sole\n+                     use case of the Rust standard library in mind, and is subject to\n+                     change.\n+\n * `non_ascii_idents` - The compiler supports the use of non-ascii identifiers,\n                        but the implementation is a little rough around the\n                        edges, so this can be seen as an experimental feature\n                        for now until the specification of identifiers is fully\n                        fleshed out.\n \n+* `no_std` - Allows the `#![no_std]` crate attribute, which disables the implicit\n+             `extern crate std`. This typically requires use of the unstable APIs\n+             behind the libstd \"facade\", such as libcore and libcollections. It\n+             may also cause problems when using syntax extensions, including\n+             `#[derive]`.\n+\n+* `on_unimplemented` - Allows the `#[rustc_on_unimplemented]` attribute, which allows\n+                       trait definitions to add specialized notes to error messages\n+                       when an implementation was expected but not found.\n+\n+* `optin_builtin_traits` - Allows the definition of default and negative trait\n+                           implementations. Experimental.\n+\n * `plugin` - Usage of [compiler plugins][plugin] for custom lints or syntax extensions.\n              These depend on compiler internals and are subject to change.\n \n@@ -2431,8 +2464,15 @@ The currently implemented features of the reference compiler are:\n * `simd` - Allows use of the `#[simd]` attribute, which is overly simple and\n            not the SIMD interface we want to expose in the long term.\n \n+* `simd_ffi` - Allows use of SIMD vectors in signatures for foreign functions.\n+               The SIMD interface is subject to change.\n+\n * `staged_api` - Allows usage of stability markers and `#![staged_api]` in a crate\n \n+* `start` - Allows use of the `#[start]` attribute, which changes the entry point\n+            into a Rust program. This capabiilty, especially the signature for the\n+            annotated function, is subject to change.\n+\n * `struct_inherit` - Allows using struct inheritance, which is barely\n                      implemented and will probably be removed. Don't use this.\n \n@@ -2460,18 +2500,20 @@ The currently implemented features of the reference compiler are:\n                         which is considered wildly unsafe and will be\n                         obsoleted by language improvements.\n \n+* `unsafe_no_drop_flag` - Allows use of the `#[unsafe_no_drop_flag]` attribute,\n+                          which removes hidden flag added to a type that\n+                          implements the `Drop` trait. The design for the\n+                          `Drop` flag is subject to change, and this feature\n+                          may be removed in the future.\n+\n * `unmarked_api` - Allows use of items within a `#![staged_api]` crate\n                    which have not been marked with a stability marker.\n                    Such items should not be allowed by the compiler to exist,\n                    so if you need this there probably is a compiler bug.\n \n-* `associated_types` - Allows type aliases in traits. Experimental.\n-\n-* `no_std` - Allows the `#![no_std]` crate attribute, which disables the implicit\n-             `extern crate std`. This typically requires use of the unstable APIs\n-             behind the libstd \"facade\", such as libcore and libcollections. It\n-             may also cause problems when using syntax extensions, including\n-             `#[derive]`.\n+* `visible_private_types` - Allows public APIs to expose otherwise private\n+                            types, e.g. as the return type of a public function.\n+                            This capability may be removed in the future.\n \n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about #[feature] directives which enabled"}, {"sha": "fd1ca11818c9832575aefb9a57cc3463e4c20cb6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2935d67e08c31067ddc9d3f6589054b5f7dad81a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2935d67e08c31067ddc9d3f6589054b5f7dad81a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2935d67e08c31067ddc9d3f6589054b5f7dad81a", "patch": "@@ -134,6 +134,7 @@ static KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // switch to Accepted; see RFC 320)\n     (\"unsafe_no_drop_flag\", \"1.0.0\", Active),\n ];\n+// (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n enum Status {\n     /// Represents an active feature that is currently being implemented or"}]}