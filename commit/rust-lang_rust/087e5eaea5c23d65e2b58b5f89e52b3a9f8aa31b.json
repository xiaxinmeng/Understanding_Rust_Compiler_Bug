{"sha": "087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4N2U1ZWFlYTVjMjNkNjVlMmI1OGI1Zjg5ZTUyYjNhOWY4YWEzMWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T20:12:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T20:12:14Z"}, "message": "Auto merge of #4691 - HMPerson1:suggest_iter, r=phansch\n\nFix suggestion of `explicit_counter_loop`\n\nchangelog: In the suggestion of `explicit_counter_loop`, if the `for` loop argument doesn't implement `Iterator`, then we suggest `x.into_iter().enumerate()` (or `x.iter{_mut}()` as appropriate). Also, the span of the suggestion has been corrected.\n\nFixes #4678", "tree": {"sha": "a83810df5c2cb9ae4db767e2195398aa8929f9e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a83810df5c2cb9ae4db767e2195398aa8929f9e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "html_url": "https://github.com/rust-lang/rust/commit/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bce252859a67a22ccede7ba2a6fbefa595043bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bce252859a67a22ccede7ba2a6fbefa595043bf", "html_url": "https://github.com/rust-lang/rust/commit/1bce252859a67a22ccede7ba2a6fbefa595043bf"}, {"sha": "a9cb2b9001313046e7a8ccb2fc4b1619d64cc4da", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb2b9001313046e7a8ccb2fc4b1619d64cc4da", "html_url": "https://github.com/rust-lang/rust/commit/a9cb2b9001313046e7a8ccb2fc4b1619d64cc4da"}], "stats": {"total": 121, "additions": 92, "deletions": 29}, "files": [{"sha": "731dd92c82aefbe4486e504d8fbf0366ae9205a7", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "patch": "@@ -27,9 +27,10 @@ use syntax_pos::{BytePos, Symbol};\n \n use crate::utils::paths;\n use crate::utils::{\n-    get_enclosing_block, get_parent_expr, has_iter_method, higher, is_integer_const, is_refutable, last_path_segment,\n-    match_trait_method, match_type, match_var, multispan_sugg, snippet, snippet_opt, snippet_with_applicability,\n-    span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n+    get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n+    is_integer_const, is_refutable, last_path_segment, match_trait_method, match_type, match_var, multispan_sugg,\n+    snippet, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1460,27 +1461,26 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n             if visitor2.state == VarState::Warn {\n                 if let Some(name) = visitor2.name {\n                     let mut applicability = Applicability::MachineApplicable;\n+\n+                    // for some reason this is the only way to get the `Span`\n+                    // of the entire `for` loop\n+                    let for_span = if let ExprKind::Match(_, arms, _) = &expr.kind {\n+                        arms[0].body.span\n+                    } else {\n+                        unreachable!()\n+                    };\n+\n                     span_lint_and_sugg(\n                         cx,\n                         EXPLICIT_COUNTER_LOOP,\n-                        expr.span,\n+                        for_span.with_hi(arg.span.hi()),\n                         &format!(\"the variable `{}` is used as a loop counter.\", name),\n                         \"consider using\",\n                         format!(\n                             \"for ({}, {}) in {}.enumerate()\",\n                             name,\n                             snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n-                            if higher::range(cx, arg).is_some() {\n-                                format!(\n-                                    \"({})\",\n-                                    snippet_with_applicability(cx, arg.span, \"_\", &mut applicability)\n-                                )\n-                            } else {\n-                                format!(\n-                                    \"{}\",\n-                                    sugg::Sugg::hir_with_applicability(cx, arg, \"_\", &mut applicability).maybe_par()\n-                                )\n-                            }\n+                            make_iterator_snippet(cx, arg, &mut applicability),\n                         ),\n                         applicability,\n                     );\n@@ -1490,6 +1490,39 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n     }\n }\n \n+/// If `arg` was the argument to a `for` loop, return the \"cleanest\" way of writing the\n+/// actual `Iterator` that the loop uses.\n+fn make_iterator_snippet(cx: &LateContext<'_, '_>, arg: &Expr, applic_ref: &mut Applicability) -> String {\n+    let impls_iterator = get_trait_def_id(cx, &paths::ITERATOR)\n+        .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(arg), id, &[]));\n+    if impls_iterator {\n+        format!(\n+            \"{}\",\n+            sugg::Sugg::hir_with_applicability(cx, arg, \"_\", applic_ref).maybe_par()\n+        )\n+    } else {\n+        // (&x).into_iter() ==> x.iter()\n+        // (&mut x).into_iter() ==> x.iter_mut()\n+        match &arg.kind {\n+            ExprKind::AddrOf(mutability, arg_inner) if has_iter_method(cx, cx.tables.expr_ty(&arg_inner)).is_some() => {\n+                let meth_name = match mutability {\n+                    MutMutable => \"iter_mut\",\n+                    MutImmutable => \"iter\",\n+                };\n+                format!(\n+                    \"{}.{}()\",\n+                    sugg::Sugg::hir_with_applicability(cx, &arg_inner, \"_\", applic_ref).maybe_par(),\n+                    meth_name,\n+                )\n+            },\n+            _ => format!(\n+                \"{}.into_iter()\",\n+                sugg::Sugg::hir_with_applicability(cx, arg, \"_\", applic_ref).maybe_par()\n+            ),\n+        }\n+    }\n+}\n+\n /// Checks for the `FOR_KV_MAP` lint.\n fn check_for_loop_over_map_kv<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,"}, {"sha": "4fe41a880cc7ce8705bf210af0ff3c078ab582e6", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "patch": "@@ -46,7 +46,7 @@ impl<'a> Sugg<'a> {\n     pub fn hir_opt(cx: &LateContext<'_, '_>, expr: &hir::Expr) -> Option<Self> {\n         snippet_opt(cx, expr.span).map(|snippet| {\n             let snippet = Cow::Owned(snippet);\n-            Self::hir_from_snippet(expr, snippet)\n+            Self::hir_from_snippet(cx, expr, snippet)\n         })\n     }\n \n@@ -84,12 +84,20 @@ impl<'a> Sugg<'a> {\n     pub fn hir_with_macro_callsite(cx: &LateContext<'_, '_>, expr: &hir::Expr, default: &'a str) -> Self {\n         let snippet = snippet_with_macro_callsite(cx, expr.span, default);\n \n-        Self::hir_from_snippet(expr, snippet)\n+        Self::hir_from_snippet(cx, expr, snippet)\n     }\n \n     /// Generate a suggestion for an expression with the given snippet. This is used by the `hir_*`\n     /// function variants of `Sugg`, since these use different snippet functions.\n-    fn hir_from_snippet(expr: &hir::Expr, snippet: Cow<'a, str>) -> Self {\n+    fn hir_from_snippet(cx: &LateContext<'_, '_>, expr: &hir::Expr, snippet: Cow<'a, str>) -> Self {\n+        if let Some(range) = higher::range(cx, expr) {\n+            let op = match range.limits {\n+                ast::RangeLimits::HalfOpen => AssocOp::DotDot,\n+                ast::RangeLimits::Closed => AssocOp::DotDotEq,\n+            };\n+            return Sugg::BinOp(op, snippet);\n+        }\n+\n         match expr.kind {\n             hir::ExprKind::AddrOf(..)\n             | hir::ExprKind::Box(..)"}, {"sha": "e6fbf83a2879cb18057e8db0f42ac1b39db6d84e", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "patch": "@@ -12,6 +12,16 @@ fn main() {\n     for _v in &vec {\n         _index += 1\n     }\n+\n+    let mut _index = 0;\n+    for _v in &mut vec {\n+        _index += 1;\n+    }\n+\n+    let mut _index = 0;\n+    for _v in vec {\n+        _index += 1;\n+    }\n }\n \n mod issue_1219 {"}, {"sha": "931af46efe663f31ead53ba32bf7d1ce69efaffb", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "patch": "@@ -1,34 +1,46 @@\n error: the variable `_index` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:6:15\n+  --> $DIR/explicit_counter_loop.rs:6:5\n    |\n LL |     for _v in &vec {\n-   |               ^^^^ help: consider using: `for (_index, _v) in (&vec).enumerate()`\n+   |     ^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n    |\n    = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n \n error: the variable `_index` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:12:15\n+  --> $DIR/explicit_counter_loop.rs:12:5\n    |\n LL |     for _v in &vec {\n-   |               ^^^^ help: consider using: `for (_index, _v) in (&vec).enumerate()`\n+   |     ^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n+\n+error: the variable `_index` is used as a loop counter.\n+  --> $DIR/explicit_counter_loop.rs:17:5\n+   |\n+LL |     for _v in &mut vec {\n+   |     ^^^^^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter_mut().enumerate()`\n+\n+error: the variable `_index` is used as a loop counter.\n+  --> $DIR/explicit_counter_loop.rs:22:5\n+   |\n+LL |     for _v in vec {\n+   |     ^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.into_iter().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:51:19\n+  --> $DIR/explicit_counter_loop.rs:61:9\n    |\n LL |         for ch in text.chars() {\n-   |                   ^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:62:19\n+  --> $DIR/explicit_counter_loop.rs:72:9\n    |\n LL |         for ch in text.chars() {\n-   |                   ^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:120:19\n+  --> $DIR/explicit_counter_loop.rs:130:9\n    |\n LL |         for _i in 3..10 {\n-   |                   ^^^^^ help: consider using: `for (count, _i) in (3..10).enumerate()`\n+   |         ^^^^^^^^^^^^^^^ help: consider using: `for (count, _i) in (3..10).enumerate()`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}]}