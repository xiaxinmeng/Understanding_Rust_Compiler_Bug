{"sha": "1d808d106bc88be89eba1354e5dd724bb5816726", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkODA4ZDEwNmJjODhiZTg5ZWJhMTM1NGU1ZGQ3MjRiYjU4MTY3MjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T12:50:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T12:50:04Z"}, "message": "When popping in CTFE, perform validation before jumping to next statement to have a better span for the error", "tree": {"sha": "2b3d2ffa8fb65e5fdc4d7fdf6b4205f5324fc3fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3d2ffa8fb65e5fdc4d7fdf6b4205f5324fc3fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d808d106bc88be89eba1354e5dd724bb5816726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d808d106bc88be89eba1354e5dd724bb5816726", "html_url": "https://github.com/rust-lang/rust/commit/1d808d106bc88be89eba1354e5dd724bb5816726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d808d106bc88be89eba1354e5dd724bb5816726/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9b97bd9b704f85f0184f7a213cc4d62bd9654c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c", "html_url": "https://github.com/rust-lang/rust/commit/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "f9c28753c2dcf667556bc02ad582a5075307cc93", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1d808d106bc88be89eba1354e5dd724bb5816726/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d808d106bc88be89eba1354e5dd724bb5816726/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=1d808d106bc88be89eba1354e5dd724bb5816726", "patch": "@@ -492,23 +492,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         let frame = self.stack.pop().expect(\n             \"tried to pop a stack frame, but there were none\",\n         );\n-        match frame.return_to_block {\n-            StackPopCleanup::Goto(block) => {\n-                self.goto_block(block)?;\n-            }\n-            StackPopCleanup::None { cleanup } => {\n-                if !cleanup {\n-                    // Leak the locals. Also skip validation, this is only used by\n-                    // static/const computation which does its own (stronger) final\n-                    // validation.\n-                    return Ok(());\n-                }\n-            }\n-        }\n-        // Deallocate all locals that are backed by an allocation.\n-        for local in frame.locals {\n-            self.deallocate_local(local)?;\n-        }\n         // Validate the return value.\n         if let Some(return_place) = frame.return_place {\n             if M::enforce_validity(self) {\n@@ -530,6 +513,22 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             // Uh, that shouldn't happen... the function did not intend to return\n             return err!(Unreachable);\n         }\n+        // Jump to new block -- *after* validation so that the spans make more sense.\n+        match frame.return_to_block {\n+            StackPopCleanup::Goto(block) => {\n+                self.goto_block(block)?;\n+            }\n+            StackPopCleanup::None { cleanup } => {\n+                if !cleanup {\n+                    // Leak the locals.\n+                    return Ok(());\n+                }\n+            }\n+        }\n+        // Deallocate all locals that are backed by an allocation.\n+        for local in frame.locals {\n+            self.deallocate_local(local)?;\n+        }\n \n         if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc...\n             debug!(\"CONTINUING({}) {}\", self.cur_frame(), self.frame().instance);"}]}