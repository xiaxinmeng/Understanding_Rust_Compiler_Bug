{"sha": "91d5b764ea1e717641b146d5c3169058a18f3919", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZDViNzY0ZWExZTcxNzY0MWIxNDZkNWMzMTY5MDU4YTE4ZjM5MTk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-04-24T05:02:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-04-25T23:48:52Z"}, "message": "Remove some unused return values.", "tree": {"sha": "75777e832d194cbd7b3a636a64ea1ab32d9a8d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75777e832d194cbd7b3a636a64ea1ab32d9a8d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d5b764ea1e717641b146d5c3169058a18f3919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d5b764ea1e717641b146d5c3169058a18f3919", "html_url": "https://github.com/rust-lang/rust/commit/91d5b764ea1e717641b146d5c3169058a18f3919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d5b764ea1e717641b146d5c3169058a18f3919/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f5101cd5b2cb51ac2873f9d28c1f5f3ce842e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f5101cd5b2cb51ac2873f9d28c1f5f3ce842e3", "html_url": "https://github.com/rust-lang/rust/commit/68f5101cd5b2cb51ac2873f9d28c1f5f3ce842e3"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "b5e41dd22c9f0cedf19b61745b7e7ed6985e9fb1", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/91d5b764ea1e717641b146d5c3169058a18f3919/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5b764ea1e717641b146d5c3169058a18f3919/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=91d5b764ea1e717641b146d5c3169058a18f3919", "patch": "@@ -46,11 +46,10 @@ pub fn remove(sess: &Session, path: &Path) {\n /// Performs the linkage portion of the compilation phase. This will generate all\n /// of the requested outputs for this compilation session.\n pub fn link_binary<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n-                          codegen_results: &CodegenResults,\n-                          outputs: &OutputFilenames,\n-                          crate_name: &str,\n-                          target_cpu: &str) -> Vec<PathBuf> {\n-    let mut out_filenames = Vec::new();\n+                                              codegen_results: &CodegenResults,\n+                                              outputs: &OutputFilenames,\n+                                              crate_name: &str,\n+                                              target_cpu: &str) {\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-codegen, as they will error.\n         let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n@@ -64,13 +63,12 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n            bug!(\"invalid output type `{:?}` for target os `{}`\",\n                 crate_type, sess.opts.target_triple);\n         }\n-        let out_files = link_binary_output::<B>(sess,\n-                                           codegen_results,\n-                                           crate_type,\n-                                           outputs,\n-                                           crate_name,\n-                                           target_cpu);\n-        out_filenames.extend(out_files);\n+        link_binary_output::<B>(sess,\n+                                codegen_results,\n+                                crate_type,\n+                                outputs,\n+                                crate_name,\n+                                target_cpu);\n     }\n \n     // Remove the temporary object file and metadata if we aren't saving temps\n@@ -97,22 +95,18 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n             }\n         }\n     }\n-\n-    out_filenames\n }\n \n fn link_binary_output<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n-                      codegen_results: &CodegenResults,\n-                      crate_type: config::CrateType,\n-                      outputs: &OutputFilenames,\n-                      crate_name: &str,\n-                      target_cpu: &str) -> Vec<PathBuf> {\n+                                                 codegen_results: &CodegenResults,\n+                                                 crate_type: config::CrateType,\n+                                                 outputs: &OutputFilenames,\n+                                                 crate_name: &str,\n+                                                 target_cpu: &str) {\n     for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n         check_file_is_writeable(obj, sess);\n     }\n \n-    let mut out_filenames = vec![];\n-\n     if outputs.outputs.contains_key(&OutputType::Metadata) {\n         let out_filename = filename_for_metadata(sess, crate_name, outputs);\n         // To avoid races with another rustc process scanning the output directory,\n@@ -128,7 +122,6 @@ fn link_binary_output<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n         if let Err(e) = fs::rename(metadata, &out_filename) {\n             sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }\n-        out_filenames.push(out_filename);\n     }\n \n     let tmpdir = TempFileBuilder::new().prefix(\"rustc\").tempdir().unwrap_or_else(|err|\n@@ -158,14 +151,11 @@ fn link_binary_output<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n                 );\n             }\n         }\n-        out_filenames.push(out_filename);\n     }\n \n     if sess.opts.cg.save_temps {\n         let _ = tmpdir.into_path();\n     }\n-\n-    out_filenames\n }\n \n // The third parameter is for env vars, used on windows to set up the"}]}