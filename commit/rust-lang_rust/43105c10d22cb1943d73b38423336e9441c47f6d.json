{"sha": "43105c10d22cb1943d73b38423336e9441c47f6d", "node_id": "C_kwDOAAsO6NoAKDQzMTA1YzEwZDIyY2IxOTQzZDczYjM4NDIzMzM2ZTk0NDFjNDdmNmQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-11T20:35:46Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-11T20:44:19Z"}, "message": "Add some helper functions to LoweringContext.", "tree": {"sha": "4dfa87da48fc89e24781cf551f991ec195259150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dfa87da48fc89e24781cf551f991ec195259150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43105c10d22cb1943d73b38423336e9441c47f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43105c10d22cb1943d73b38423336e9441c47f6d", "html_url": "https://github.com/rust-lang/rust/commit/43105c10d22cb1943d73b38423336e9441c47f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43105c10d22cb1943d73b38423336e9441c47f6d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4046e4f3932991971cdb64915172899532aece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "e21082894bde290f6c3f1a1abbd02a7ebb41a6b7", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/43105c10d22cb1943d73b38423336e9441c47f6d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43105c10d22cb1943d73b38423336e9441c47f6d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=43105c10d22cb1943d73b38423336e9441c47f6d", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::def::Res;\n use rustc_hir::definitions::DefPathData;\n use rustc_session::errors::report_lit_error;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use thin_vec::thin_vec;\n \n@@ -1757,6 +1757,43 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.arena.alloc(self.expr(sp, hir::ExprKind::Tup(&[])))\n     }\n \n+    pub(super) fn expr_usize(&mut self, sp: Span, value: usize) -> hir::Expr<'hir> {\n+        self.expr(\n+            sp,\n+            hir::ExprKind::Lit(hir::Lit {\n+                span: sp,\n+                node: ast::LitKind::Int(\n+                    value as u128,\n+                    ast::LitIntType::Unsigned(ast::UintTy::Usize),\n+                ),\n+            }),\n+        )\n+    }\n+\n+    pub(super) fn expr_u32(&mut self, sp: Span, value: u32) -> hir::Expr<'hir> {\n+        self.expr(\n+            sp,\n+            hir::ExprKind::Lit(hir::Lit {\n+                span: sp,\n+                node: ast::LitKind::Int(value.into(), ast::LitIntType::Unsigned(ast::UintTy::U32)),\n+            }),\n+        )\n+    }\n+\n+    pub(super) fn expr_char(&mut self, sp: Span, value: char) -> hir::Expr<'hir> {\n+        self.expr(sp, hir::ExprKind::Lit(hir::Lit { span: sp, node: ast::LitKind::Char(value) }))\n+    }\n+\n+    pub(super) fn expr_str(&mut self, sp: Span, value: Symbol) -> hir::Expr<'hir> {\n+        self.expr(\n+            sp,\n+            hir::ExprKind::Lit(hir::Lit {\n+                span: sp,\n+                node: ast::LitKind::Str(value, ast::StrStyle::Cooked),\n+            }),\n+        )\n+    }\n+\n     fn expr_call_mut(\n         &mut self,\n         span: Span,\n@@ -1808,6 +1845,27 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         )\n     }\n \n+    /// `<LangItem>::name`\n+    pub(super) fn expr_lang_item_type_relative(\n+        &mut self,\n+        span: Span,\n+        lang_item: hir::LangItem,\n+        name: Symbol,\n+    ) -> hir::Expr<'hir> {\n+        let path = hir::ExprKind::Path(hir::QPath::TypeRelative(\n+            self.arena.alloc(self.ty(\n+                span,\n+                hir::TyKind::Path(hir::QPath::LangItem(lang_item, self.lower_span(span), None)),\n+            )),\n+            self.arena.alloc(hir::PathSegment::new(\n+                Ident::new(name, span),\n+                self.next_id(),\n+                Res::Err,\n+            )),\n+        ));\n+        self.expr(span, path)\n+    }\n+\n     pub(super) fn expr_ident(\n         &mut self,\n         sp: Span,\n@@ -1866,6 +1924,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.expr(b.span, hir::ExprKind::Block(b, None))\n     }\n \n+    pub(super) fn expr_array_ref(\n+        &mut self,\n+        span: Span,\n+        elements: &'hir [hir::Expr<'hir>],\n+    ) -> hir::Expr<'hir> {\n+        let addrof = hir::ExprKind::AddrOf(\n+            hir::BorrowKind::Ref,\n+            hir::Mutability::Not,\n+            self.arena.alloc(self.expr(span, hir::ExprKind::Array(elements))),\n+        );\n+        self.expr(span, addrof)\n+    }\n+\n     pub(super) fn expr(&mut self, span: Span, kind: hir::ExprKind<'hir>) -> hir::Expr<'hir> {\n         let hir_id = self.next_id();\n         hir::Expr { hir_id, kind, span: self.lower_span(span) }"}]}