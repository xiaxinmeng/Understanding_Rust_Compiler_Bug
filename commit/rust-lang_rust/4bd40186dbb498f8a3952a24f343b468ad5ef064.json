{"sha": "4bd40186dbb498f8a3952a24f343b468ad5ef064", "node_id": "C_kwDOAAsO6NoAKDRiZDQwMTg2ZGJiNDk4ZjhhMzk1MmEyNGYzNDNiNDY4YWQ1ZWYwNjQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-24T13:58:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-24T13:58:26Z"}, "message": "Rollup merge of #97321 - RalfJung:int-to-fnptr, r=Dylan-DPC\n\nexplain how to turn integers into fn ptrs\n\n(with an intermediate raw ptr, not a direct transmute)\nDirect int2ptr transmute, under the semantics I am imagining, will produce a ptr with \"invalid\" provenance that is invalid to deref or call. We cannot give it the same semantics as int2ptr casts since those do [something complicated](https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html).\n\nTo my great surprise, that is already what the example in the `transmute` docs does. :)  I still added a comment to say that that part is important, and I added a section explicitly talking about this to the `fn()` type docs.\n\nWith https://github.com/rust-lang/miri/pull/2151, Miri will start complaining about direct int-to-fnptr transmutes (in the sense that it is UB to call the resulting pointer).", "tree": {"sha": "27999aee32cdff30d1658addd4eac9ffd9f935e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27999aee32cdff30d1658addd4eac9ffd9f935e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd40186dbb498f8a3952a24f343b468ad5ef064", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijOSDCRBK7hj4Ov3rIwAAtd8IAKsD7xvWyWHNwIRWlLKjY2KZ\nR4mwvPSAgOSwlytoce6w/533U9kYJKJZpAn1JF1SSlLsvEKaLylqEjQLZvRolmJs\ntP2akTLDY94B+K/FdFuZbeEdLNkPWlnVeFwlUtFCafNB5q8VE2I3uBQfgJ/IqmcJ\ncbsZE8AFb1veMyMwDR3I8iLzm6ugtjVYhGzDbZIskxSZzio/ah/goaHEeeRlBtyO\nKbaxc1dT7qOg8wE1mqM5reD1OpKW+0YjzAjfsq9TqFkDhqIPppwpUmKlJ8GM9CHD\nv9PB+CU65nGXG0KCGfHkW5R2HBq8tGkkykNKM/lXE2Sx8anbqSh5PbaaPCqRjsk=\n=yQdP\n-----END PGP SIGNATURE-----\n", "payload": "tree 27999aee32cdff30d1658addd4eac9ffd9f935e0\nparent af15e45e283640ec72642949511abf113a7a6c57\nparent 5137d15f91d5778a0d037e5bc4f1f70d9b013aa7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653400706 +0200\ncommitter GitHub <noreply@github.com> 1653400706 +0200\n\nRollup merge of #97321 - RalfJung:int-to-fnptr, r=Dylan-DPC\n\nexplain how to turn integers into fn ptrs\n\n(with an intermediate raw ptr, not a direct transmute)\nDirect int2ptr transmute, under the semantics I am imagining, will produce a ptr with \"invalid\" provenance that is invalid to deref or call. We cannot give it the same semantics as int2ptr casts since those do [something complicated](https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html).\n\nTo my great surprise, that is already what the example in the `transmute` docs does. :)  I still added a comment to say that that part is important, and I added a section explicitly talking about this to the `fn()` type docs.\n\nWith https://github.com/rust-lang/miri/pull/2151, Miri will start complaining about direct int-to-fnptr transmutes (in the sense that it is UB to call the resulting pointer).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd40186dbb498f8a3952a24f343b468ad5ef064", "html_url": "https://github.com/rust-lang/rust/commit/4bd40186dbb498f8a3952a24f343b468ad5ef064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd40186dbb498f8a3952a24f343b468ad5ef064/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af15e45e283640ec72642949511abf113a7a6c57", "url": "https://api.github.com/repos/rust-lang/rust/commits/af15e45e283640ec72642949511abf113a7a6c57", "html_url": "https://github.com/rust-lang/rust/commit/af15e45e283640ec72642949511abf113a7a6c57"}, {"sha": "5137d15f91d5778a0d037e5bc4f1f70d9b013aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5137d15f91d5778a0d037e5bc4f1f70d9b013aa7", "html_url": "https://github.com/rust-lang/rust/commit/5137d15f91d5778a0d037e5bc4f1f70d9b013aa7"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "6ba359f6edcd872810a1352972630ae895da30e5", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bd40186dbb498f8a3952a24f343b468ad5ef064/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd40186dbb498f8a3952a24f343b468ad5ef064/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=4bd40186dbb498f8a3952a24f343b468ad5ef064", "patch": "@@ -930,6 +930,9 @@ extern \"rust-intrinsic\" {\n     /// fn foo() -> i32 {\n     ///     0\n     /// }\n+    /// // Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer.\n+    /// // This avoids an integer-to-pointer `transmute`, which can be problematic.\n+    /// // Transmuting between raw pointers and function pointers (i.e., two pointer types) is fine.\n     /// let pointer = foo as *const ();\n     /// let function = unsafe {\n     ///     std::mem::transmute::<*const (), fn() -> i32>(pointer)"}, {"sha": "688ab63bf1366f12f92ff0b58ce8dabb7927c784", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4bd40186dbb498f8a3952a24f343b468ad5ef064/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd40186dbb498f8a3952a24f343b468ad5ef064/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=4bd40186dbb498f8a3952a24f343b468ad5ef064", "patch": "@@ -1351,6 +1351,32 @@ mod prim_ref {}\n /// is a reference to the function-specific ZST. `&bar` is basically never what you\n /// want when `bar` is a function.\n ///\n+/// ### Casting to and from integers\n+///\n+/// You cast function pointers directly to integers:\n+///\n+/// ```rust\n+/// let fnptr: fn(i32) -> i32 = |x| x+2;\n+/// let fnptr_addr = fnptr as usize;\n+/// ```\n+///\n+/// However, a direct cast back is not possible. You need to use `transmute`:\n+///\n+/// ```rust\n+/// # let fnptr: fn(i32) -> i32 = |x| x+2;\n+/// # let fnptr_addr = fnptr as usize;\n+/// let fnptr = fnptr_addr as *const ();\n+/// let fnptr: fn(i32) -> i32 = unsafe { std::mem::transmute(fnptr) };\n+/// assert_eq!(fnptr(40), 42);\n+/// ```\n+///\n+/// Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer.\n+/// This avoids an integer-to-pointer `transmute`, which can be problematic.\n+/// Transmuting between raw pointers and function pointers (i.e., two pointer types) is fine.\n+///\n+/// Note that all of this is not portable to platforms where function pointers and data pointers\n+/// have different sizes.\n+///\n /// ### Traits\n ///\n /// Function pointers implement the following traits:"}, {"sha": "688ab63bf1366f12f92ff0b58ce8dabb7927c784", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4bd40186dbb498f8a3952a24f343b468ad5ef064/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd40186dbb498f8a3952a24f343b468ad5ef064/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=4bd40186dbb498f8a3952a24f343b468ad5ef064", "patch": "@@ -1351,6 +1351,32 @@ mod prim_ref {}\n /// is a reference to the function-specific ZST. `&bar` is basically never what you\n /// want when `bar` is a function.\n ///\n+/// ### Casting to and from integers\n+///\n+/// You cast function pointers directly to integers:\n+///\n+/// ```rust\n+/// let fnptr: fn(i32) -> i32 = |x| x+2;\n+/// let fnptr_addr = fnptr as usize;\n+/// ```\n+///\n+/// However, a direct cast back is not possible. You need to use `transmute`:\n+///\n+/// ```rust\n+/// # let fnptr: fn(i32) -> i32 = |x| x+2;\n+/// # let fnptr_addr = fnptr as usize;\n+/// let fnptr = fnptr_addr as *const ();\n+/// let fnptr: fn(i32) -> i32 = unsafe { std::mem::transmute(fnptr) };\n+/// assert_eq!(fnptr(40), 42);\n+/// ```\n+///\n+/// Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer.\n+/// This avoids an integer-to-pointer `transmute`, which can be problematic.\n+/// Transmuting between raw pointers and function pointers (i.e., two pointer types) is fine.\n+///\n+/// Note that all of this is not portable to platforms where function pointers and data pointers\n+/// have different sizes.\n+///\n /// ### Traits\n ///\n /// Function pointers implement the following traits:"}]}