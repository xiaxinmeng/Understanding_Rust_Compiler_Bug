{"sha": "cb4670deb37dac43dc36ad22d97479921a971f71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDY3MGRlYjM3ZGFjNDNkYzM2YWQyMmQ5NzQ3OTkyMWE5NzFmNzE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-03T17:40:50Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-03T17:40:50Z"}, "message": "Fix use_self ICE", "tree": {"sha": "54003cf4f698e970b5e1d3eec4804be2a02fb536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54003cf4f698e970b5e1d3eec4804be2a02fb536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4670deb37dac43dc36ad22d97479921a971f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4670deb37dac43dc36ad22d97479921a971f71", "html_url": "https://github.com/rust-lang/rust/commit/cb4670deb37dac43dc36ad22d97479921a971f71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4670deb37dac43dc36ad22d97479921a971f71/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c195db7feeb5fb014a4961a0652e5baae61659d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c195db7feeb5fb014a4961a0652e5baae61659d4", "html_url": "https://github.com/rust-lang/rust/commit/c195db7feeb5fb014a4961a0652e5baae61659d4"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "71117e967e31941af9da90b9239e05edf794c4bf", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cb4670deb37dac43dc36ad22d97479921a971f71/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4670deb37dac43dc36ad22d97479921a971f71/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=cb4670deb37dac43dc36ad22d97479921a971f71", "patch": "@@ -87,11 +87,8 @@ const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_item(&mut self, _cx: &LateContext<'_>, item: &Item<'_>) {\n-        if !is_item_interesting(item) {\n-            // This does two things:\n-            //  1) Reduce needless churn on `self.stack`\n-            //  2) Don't push `StackItem::NoCheck` when entering `ItemKind::OpaqueTy`,\n-            //     in order to lint `foo() -> impl <..>`\n+        if matches!(item.kind, ItemKind::OpaqueTy(_)) {\n+            // skip over `ItemKind::OpaqueTy` in order to lint `foo() -> impl <..>`\n             return;\n         }\n         // We push the self types of `impl`s on a stack here. Only the top type on the stack is\n@@ -119,7 +116,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     }\n \n     fn check_item_post(&mut self, _: &LateContext<'_>, item: &Item<'_>) {\n-        if is_item_interesting(item) {\n+        if !matches!(item.kind, ItemKind::OpaqueTy(_)) {\n             self.stack.pop();\n         }\n     }\n@@ -297,11 +294,3 @@ fn lint_path_to_variant(cx: &LateContext<'_>, path: &Path<'_>) {\n         span_lint(cx, span);\n     }\n }\n-\n-fn is_item_interesting(item: &Item<'_>) -> bool {\n-    use rustc_hir::ItemKind::{Const, Enum, Fn, Impl, Static, Struct, Trait, Union};\n-    matches!(\n-        item.kind,\n-        Impl { .. } | Static(..) | Const(..) | Fn(..) | Enum(..) | Struct(..) | Union(..) | Trait(..)\n-    )\n-}"}, {"sha": "31340b012dd0e01418be72e51cf1baecf2de6af5", "filename": "tests/ui/crashes/ice-7423.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb4670deb37dac43dc36ad22d97479921a971f71/tests%2Fui%2Fcrashes%2Fice-7423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4670deb37dac43dc36ad22d97479921a971f71/tests%2Fui%2Fcrashes%2Fice-7423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7423.rs?ref=cb4670deb37dac43dc36ad22d97479921a971f71", "patch": "@@ -0,0 +1,13 @@\n+pub trait Trait {\n+    fn f();\n+}\n+\n+impl Trait for usize {\n+    fn f() {\n+        extern \"C\" {\n+            fn g() -> usize;\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}