{"sha": "0110f5e03c67d7a3590c7c86f50f5546d75f27b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTBmNWUwM2M2N2Q3YTM1OTBjN2M4NmY1MGY1NTQ2ZDc1ZjI3YjE=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-09T17:01:15Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-09T17:01:50Z"}, "message": "syntax::fold: Allow removing attributes", "tree": {"sha": "29d17494704a312639da0c2569855920a045974e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d17494704a312639da0c2569855920a045974e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0110f5e03c67d7a3590c7c86f50f5546d75f27b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0110f5e03c67d7a3590c7c86f50f5546d75f27b1", "html_url": "https://github.com/rust-lang/rust/commit/0110f5e03c67d7a3590c7c86f50f5546d75f27b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0110f5e03c67d7a3590c7c86f50f5546d75f27b1/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba9e1fa52627404a1e5b90f745f96a872a0c564", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba9e1fa52627404a1e5b90f745f96a872a0c564", "html_url": "https://github.com/rust-lang/rust/commit/0ba9e1fa52627404a1e5b90f745f96a872a0c564"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "131bbc4100546985d5436f725fa86c997eef206d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0110f5e03c67d7a3590c7c86f50f5546d75f27b1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0110f5e03c67d7a3590c7c86f50f5546d75f27b1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0110f5e03c67d7a3590c7c86f50f5546d75f27b1", "patch": "@@ -844,7 +844,7 @@ fn expand_arm(arm: ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n         arm.guard.map(|g| fld.fold_expr(rename_fld.fold_expr(g)));\n     let rewritten_body = fld.fold_expr(rename_fld.fold_expr(arm.body));\n     ast::Arm {\n-        attrs: arm.attrs.move_map(|x| fld.fold_attribute(x)),\n+        attrs: fold::fold_attrs(arm.attrs, fld),\n         pats: rewritten_pats,\n         guard: rewritten_guard,\n         body: rewritten_body,\n@@ -1273,7 +1273,7 @@ fn expand_method(m: P<ast::Method>, fld: &mut MacroExpander) -> SmallVector<P<as\n             let (rewritten_fn_decl, rewritten_body)\n                 = expand_and_rename_fn_decl_and_block(decl, body, fld);\n             SmallVector::one(P(ast::Method {\n-                    attrs: m.attrs.move_map(|a| fld.fold_attribute(a)),\n+                    attrs: fold::fold_attrs(m.attrs, fld),\n                     id: id,\n                     span: fld.new_span(m.span),\n                     node: ast::MethDecl(fld.fold_ident(ident),"}, {"sha": "4663fa2ee5c2592b5bcf8020701f9a3c111b2b99", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0110f5e03c67d7a3590c7c86f50f5546d75f27b1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0110f5e03c67d7a3590c7c86f50f5546d75f27b1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0110f5e03c67d7a3590c7c86f50f5546d75f27b1", "patch": "@@ -223,7 +223,7 @@ pub trait Folder : Sized {\n         noop_fold_lifetime_def(l, self)\n     }\n \n-    fn fold_attribute(&mut self, at: Attribute) -> Attribute {\n+    fn fold_attribute(&mut self, at: Attribute) -> Option<Attribute> {\n         noop_fold_attribute(at, self)\n     }\n \n@@ -373,9 +373,13 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n     })\n }\n \n+pub fn fold_attrs<T: Folder>(attrs: Vec<Attribute>, fld: &mut T) -> Vec<Attribute> {\n+    attrs.into_iter().flat_map(|x| fld.fold_attribute(x).into_iter()).collect()\n+}\n+\n pub fn noop_fold_arm<T: Folder>(Arm {attrs, pats, guard, body}: Arm, fld: &mut T) -> Arm {\n     Arm {\n-        attrs: attrs.move_map(|x| fld.fold_attribute(x)),\n+        attrs: fold_attrs(attrs, fld),\n         pats: pats.move_map(|x| fld.fold_pat(x)),\n         guard: guard.map(|x| fld.fold_expr(x)),\n         body: fld.fold_expr(body),\n@@ -475,7 +479,7 @@ pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n         node: Variant_ {\n             id: fld.new_id(id),\n             name: name,\n-            attrs: attrs.move_map(|x| fld.fold_attribute(x)),\n+            attrs: fold_attrs(attrs, fld),\n             kind: match kind {\n                 TupleVariantKind(variant_args) => {\n                     TupleVariantKind(variant_args.move_map(|x|\n@@ -553,17 +557,17 @@ pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> {\n     })\n }\n \n-pub fn noop_fold_attribute<T: Folder>(at: Attribute, fld: &mut T) -> Attribute {\n+pub fn noop_fold_attribute<T: Folder>(at: Attribute, fld: &mut T) -> Option<Attribute> {\n     let Spanned {node: Attribute_ {id, style, value, is_sugared_doc}, span} = at;\n-    Spanned {\n+    Some(Spanned {\n         node: Attribute_ {\n             id: id,\n             style: style,\n             value: fld.fold_meta_item(value),\n             is_sugared_doc: is_sugared_doc\n         },\n         span: fld.new_span(span)\n-    }\n+    })\n }\n \n pub fn noop_fold_explicit_self_underscore<T: Folder>(es: ExplicitSelf_, fld: &mut T)\n@@ -843,8 +847,8 @@ pub fn noop_fold_typedef<T>(t: Typedef, folder: &mut T)\n                             where T: Folder {\n     let new_id = folder.new_id(t.id);\n     let new_span = folder.new_span(t.span);\n-    let new_attrs = t.attrs.iter().map(|attr| {\n-        folder.fold_attribute((*attr).clone())\n+    let new_attrs = t.attrs.iter().flat_map(|attr| {\n+        folder.fold_attribute((*attr).clone()).into_iter()\n     }).collect();\n     let new_ident = folder.fold_ident(t.ident);\n     let new_type = folder.fold_ty(t.typ);\n@@ -864,7 +868,7 @@ pub fn noop_fold_associated_type<T>(at: AssociatedType, folder: &mut T)\n {\n     let new_attrs = at.attrs\n                       .iter()\n-                      .map(|attr| folder.fold_attribute((*attr).clone()))\n+                      .flat_map(|attr| folder.fold_attribute((*attr).clone()).into_iter())\n                       .collect();\n     let new_param = folder.fold_ty_param(at.ty_param);\n     ast::AssociatedType {\n@@ -906,7 +910,7 @@ pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructF\n             id: fld.new_id(id),\n             kind: kind,\n             ty: fld.fold_ty(ty),\n-            attrs: attrs.move_map(|a| fld.fold_attribute(a))\n+            attrs: fold_attrs(attrs, fld),\n         },\n         span: fld.new_span(span)\n     }\n@@ -1069,7 +1073,7 @@ pub fn noop_fold_type_method<T: Folder>(m: TypeMethod, fld: &mut T) -> TypeMetho\n     TypeMethod {\n         id: fld.new_id(id),\n         ident: fld.fold_ident(ident),\n-        attrs: attrs.move_map(|a| fld.fold_attribute(a)),\n+        attrs: fold_attrs(attrs, fld),\n         unsafety: unsafety,\n         abi: abi,\n         decl: fld.fold_fn_decl(decl),\n@@ -1151,7 +1155,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n     Item {\n         id: id,\n         ident: folder.fold_ident(ident),\n-        attrs: attrs.move_map(|e| folder.fold_attribute(e)),\n+        attrs: fold_attrs(attrs, folder),\n         node: node,\n         vis: vis,\n         span: folder.new_span(span)\n@@ -1162,7 +1166,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) ->\n     ni.map(|ForeignItem {id, ident, attrs, node, span, vis}| ForeignItem {\n         id: folder.new_id(id),\n         ident: folder.fold_ident(ident),\n-        attrs: attrs.move_map(|x| folder.fold_attribute(x)),\n+        attrs: fold_attrs(attrs, folder),\n         node: match node {\n             ForeignItemFn(fdec, generics) => {\n                 ForeignItemFn(folder.fold_fn_decl(fdec), folder.fold_generics(generics))\n@@ -1181,7 +1185,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) ->\n pub fn noop_fold_method<T: Folder>(m: P<Method>, folder: &mut T) -> SmallVector<P<Method>> {\n     SmallVector::one(m.map(|Method {id, attrs, node, span}| Method {\n         id: folder.new_id(id),\n-        attrs: attrs.move_map(|a| folder.fold_attribute(a)),\n+        attrs: fold_attrs(attrs, folder),\n         node: match node {\n             MethDecl(ident,\n                      generics,"}]}