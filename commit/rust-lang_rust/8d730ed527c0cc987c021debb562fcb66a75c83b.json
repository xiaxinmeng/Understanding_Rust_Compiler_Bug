{"sha": "8d730ed527c0cc987c021debb562fcb66a75c83b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNzMwZWQ1MjdjMGNjOTg3YzAyMWRlYmI1NjJmY2I2NmE3NWM4M2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T18:15:26Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T05:02:37Z"}, "message": "Run Rustfix on librustc_mir", "tree": {"sha": "fe126a4da2f8c0eb9bb74ed3fc06f2f4298c537c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe126a4da2f8c0eb9bb74ed3fc06f2f4298c537c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d730ed527c0cc987c021debb562fcb66a75c83b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d730ed527c0cc987c021debb562fcb66a75c83b", "html_url": "https://github.com/rust-lang/rust/commit/8d730ed527c0cc987c021debb562fcb66a75c83b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d730ed527c0cc987c021debb562fcb66a75c83b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb7980d79673dfb292545d2466bb29d3fde49546", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7980d79673dfb292545d2466bb29d3fde49546", "html_url": "https://github.com/rust-lang/rust/commit/fb7980d79673dfb292545d2466bb29d3fde49546"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "b6d8e14b74757eaf73702bce621e6a77fa9c2d31", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -176,7 +176,7 @@ impl<'gcx, 'tcx> UseFinder<'gcx, 'tcx> {\n         None\n     }\n \n-    fn def_use(&self, location: Location, thing: &MirVisitable<'tcx>) -> (bool, bool) {\n+    fn def_use(&self, location: Location, thing: &dyn MirVisitable<'tcx>) -> (bool, bool) {\n         let mut visitor = DefUseVisitor {\n             defined: false,\n             used: false,"}, {"sha": "dbfb8a6d06e63575cbc9d28f03ed4dfcdc5a7894", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -260,10 +260,10 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n \n fn for_each_region_constraint(\n     closure_region_requirements: &ClosureRegionRequirements,\n-    with_msg: &mut FnMut(&str) -> io::Result<()>,\n+    with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n ) -> io::Result<()> {\n     for req in &closure_region_requirements.outlives_requirements {\n-        let subject: &Debug = match &req.subject {\n+        let subject: &dyn Debug = match &req.subject {\n             ClosureOutlivesSubject::Region(subject) => subject,\n             ClosureOutlivesSubject::Ty(ty) => ty,\n         };"}, {"sha": "631b1d0f8941dbfa91dbb0f6ab0031b1de3be4de", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -23,7 +23,7 @@ const REGION_WIDTH: usize = 8;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Write out our state into the `.mir` files.\n-    pub(crate) fn dump_mir(&self, out: &mut Write) -> io::Result<()> {\n+    pub(crate) fn dump_mir(&self, out: &mut dyn Write) -> io::Result<()> {\n         writeln!(out, \"| Free Region Mapping\")?;\n \n         for region in self.regions() {\n@@ -67,7 +67,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// inference resulted in the values that it did when debugging.\n     fn for_each_constraint(\n         &self,\n-        with_msg: &mut FnMut(&str) -> io::Result<()>,\n+        with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n     ) -> io::Result<()> {\n         for region in self.definitions.indices() {\n             let value = self.liveness_constraints.region_value_str(region);"}, {"sha": "db773240809c5d7b99d6cd8c135a2a2ba1fdfee6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -20,7 +20,7 @@ use super::*;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Write out the region constraint graph.\n-    pub(crate) fn dump_graphviz(&self, mut w: &mut Write) -> io::Result<()> {\n+    pub(crate) fn dump_graphviz(&self, mut w: &mut dyn Write) -> io::Result<()> {\n         dot::render(self, &mut w)\n     }\n }"}, {"sha": "a06d39d225c45ccc34076495b2534ac9db756cb4", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -127,7 +127,7 @@ fn type_check_internal<'gcx, 'tcx>(\n     mir: &Mir<'tcx>,\n     region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n-    extra: &mut FnMut(&mut TypeChecker<'_, 'gcx, 'tcx>),\n+    extra: &mut dyn FnMut(&mut TypeChecker<'_, 'gcx, 'tcx>),\n ) -> MirTypeckRegionConstraints<'tcx> {\n     let mut checker = TypeChecker::new(\n         infcx,\n@@ -231,7 +231,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.cx.infcx.tcx\n     }\n \n-    fn sanitize_type(&mut self, parent: &fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {\n+    fn sanitize_type(&mut self, parent: &dyn fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if ty.has_escaping_regions() || ty.references_error() {\n             span_mirbug_and_err!(self, parent, \"bad type {:?}\", ty)\n         } else {\n@@ -516,7 +516,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n \n     fn field_ty(\n         &mut self,\n-        parent: &fmt::Debug,\n+        parent: &dyn fmt::Debug,\n         base_ty: PlaceTy<'tcx>,\n         field: Field,\n         location: Location,\n@@ -1171,7 +1171,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn assert_iscleanup(\n         &mut self,\n         mir: &Mir<'tcx>,\n-        ctxt: &fmt::Debug,\n+        ctxt: &dyn fmt::Debug,\n         bb: BasicBlock,\n         iscleanuppad: bool,\n     ) {"}, {"sha": "aa7bb6f97786c5f66f2cce89b84e491297fd370d", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -61,7 +61,7 @@ pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD> where BD: BitDenotation\n pub(crate) struct DebugFormatted(String);\n \n impl DebugFormatted {\n-    pub fn new(input: &fmt::Debug) -> DebugFormatted {\n+    pub fn new(input: &dyn fmt::Debug) -> DebugFormatted {\n         DebugFormatted(format!(\"{:?}\", input))\n     }\n }"}, {"sha": "bc555368f0f5fb95d460470537010de9ebf43c1e", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -168,7 +168,7 @@ impl Error for ConstEvalError {\n         }\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         None\n     }\n }"}, {"sha": "a16ef2adea9be8f6c922eb1c938e983603b65860", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -49,7 +49,7 @@ impl fmt::Display for Disambiguator {\n \n \n pub fn on_mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             pass_num: &fmt::Display,\n+                             pass_num: &dyn fmt::Display,\n                              pass_name: &str,\n                              source: MirSource,\n                              mir: &Mir<'tcx>,"}, {"sha": "5a6aa8638cc4ebf1ee176ab6a91095baa1610096", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -161,7 +161,7 @@ pub macro run_passes($tcx:ident, $mir:ident, $def_id:ident, $suite_index:expr; $\n             promoted\n         };\n         let mut index = 0;\n-        let mut run_pass = |pass: &MirPass| {\n+        let mut run_pass = |pass: &dyn MirPassPassPass| {\n             let run_hooks = |mir: &_, index, is_after| {\n                 dump_mir::on_mir_pass($tcx, &format_args!(\"{:03}-{:03}\", suite_index, index),\n                                       &pass.name(), source, mir, is_after);"}, {"sha": "42ddabddd2dcd8e5dcec6d311fd8d339b578dbed", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -425,12 +425,12 @@ pub fn write_mir_fn<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     src: MirSource,\n     mir: &Mir<'tcx>,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n     result: &LivenessResult,\n ) -> io::Result<()> {\n     write_mir_intro(tcx, src, mir, w)?;\n     for block in mir.basic_blocks().indices() {\n-        let print = |w: &mut Write, prefix, result: &IndexVec<BasicBlock, LocalSet>| {\n+        let print = |w: &mut dyn Write, prefix, result: &IndexVec<BasicBlock, LocalSet>| {\n             let live: Vec<String> = mir.local_decls\n                 .indices()\n                 .filter(|i| result[block].contains(i))"}, {"sha": "4509cace794d4836eee91aa18e4e9f33b2c5a98b", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d730ed527c0cc987c021debb562fcb66a75c83b/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=8d730ed527c0cc987c021debb562fcb66a75c83b", "patch": "@@ -72,14 +72,14 @@ pub enum PassWhere {\n ///   or `typeck` and `bar` both appear in the name.\n pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    pass_num: Option<&Display>,\n+    pass_num: Option<&dyn Display>,\n     pass_name: &str,\n-    disambiguator: &Display,\n+    disambiguator: &dyn Display,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n     extra_data: F,\n ) where\n-    F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n+    F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     if !dump_enabled(tcx, pass_name, source) {\n         return;\n@@ -127,15 +127,15 @@ pub fn dump_enabled<'a, 'gcx, 'tcx>(\n \n fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    pass_num: Option<&Display>,\n+    pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     node_path: &str,\n-    disambiguator: &Display,\n+    disambiguator: &dyn Display,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n     mut extra_data: F,\n ) where\n-    F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n+    F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     let _: io::Result<()> = do catch {\n         let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, source)?;\n@@ -169,9 +169,9 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n fn dump_path(\n     tcx: TyCtxt<'_, '_, '_>,\n     extension: &str,\n-    pass_num: Option<&Display>,\n+    pass_num: Option<&dyn Display>,\n     pass_name: &str,\n-    disambiguator: &Display,\n+    disambiguator: &dyn Display,\n     source: MirSource,\n ) -> PathBuf {\n     let promotion_id = match source.promoted {\n@@ -217,9 +217,9 @@ fn dump_path(\n pub(crate) fn create_dump_file(\n     tcx: TyCtxt<'_, '_, '_>,\n     extension: &str,\n-    pass_num: Option<&Display>,\n+    pass_num: Option<&dyn Display>,\n     pass_name: &str,\n-    disambiguator: &Display,\n+    disambiguator: &dyn Display,\n     source: MirSource,\n ) -> io::Result<fs::File> {\n     let file_path = dump_path(tcx, extension, pass_num, pass_name, disambiguator, source);\n@@ -233,7 +233,7 @@ pub(crate) fn create_dump_file(\n pub fn write_mir_pretty<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     single: Option<DefId>,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n ) -> io::Result<()> {\n     writeln!(\n         w,\n@@ -274,10 +274,10 @@ pub fn write_mir_fn<'a, 'gcx, 'tcx, F>(\n     src: MirSource,\n     mir: &Mir<'tcx>,\n     extra_data: &mut F,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n ) -> io::Result<()>\n where\n-    F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n+    F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     write_mir_intro(tcx, src, mir, w)?;\n     for block in mir.basic_blocks().indices() {\n@@ -298,10 +298,10 @@ pub fn write_basic_block<'cx, 'gcx, 'tcx, F>(\n     block: BasicBlock,\n     mir: &Mir<'tcx>,\n     extra_data: &mut F,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n ) -> io::Result<()>\n where\n-    F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n+    F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     let data = &mir[block];\n \n@@ -362,7 +362,7 @@ where\n /// a statement.\n fn write_extra<'cx, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    write: &mut Write,\n+    write: &mut dyn Write,\n     mut visit_op: F,\n ) -> io::Result<()>\n where\n@@ -450,7 +450,7 @@ fn write_scope_tree(\n     tcx: TyCtxt,\n     mir: &Mir,\n     scope_tree: &FxHashMap<VisibilityScope, Vec<VisibilityScope>>,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n     parent: VisibilityScope,\n     depth: usize,\n ) -> io::Result<()> {\n@@ -515,7 +515,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     src: MirSource,\n     mir: &Mir,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n ) -> io::Result<()> {\n     write_mir_sig(tcx, src, mir, w)?;\n     writeln!(w, \"{{\")?;\n@@ -553,7 +553,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     Ok(())\n }\n \n-fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write) -> io::Result<()> {\n+fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     let id = tcx.hir.as_local_node_id(src.def_id).unwrap();\n     let body_owner_kind = tcx.hir.body_owner_kind(id);\n     match (body_owner_kind, src.promoted) {\n@@ -597,7 +597,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write) -> io::R\n     Ok(())\n }\n \n-fn write_temp_decls(mir: &Mir, w: &mut Write) -> io::Result<()> {\n+fn write_temp_decls(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     // Compiler-introduced temporary types.\n     for temp in mir.temps_iter() {\n         writeln!("}]}