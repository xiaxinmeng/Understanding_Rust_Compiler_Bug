{"sha": "ec5d96228a859932828470c549e673de89844d6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNWQ5NjIyOGE4NTk5MzI4Mjg0NzBjNTQ5ZTY3M2RlODk4NDRkNmM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-02T18:16:27Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-02T18:16:27Z"}, "message": "Merge pull request #534 from Manishearth/macros\n\nAdd a smarter macro check, use it", "tree": {"sha": "abc0bac26fb4d8a74456aad7a101eae7f468f9c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abc0bac26fb4d8a74456aad7a101eae7f468f9c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec5d96228a859932828470c549e673de89844d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5d96228a859932828470c549e673de89844d6c", "html_url": "https://github.com/rust-lang/rust/commit/ec5d96228a859932828470c549e673de89844d6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec5d96228a859932828470c549e673de89844d6c/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cf6e32f66980cea7630edacaa66d1bd0497b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cf6e32f66980cea7630edacaa66d1bd0497b2e", "html_url": "https://github.com/rust-lang/rust/commit/32cf6e32f66980cea7630edacaa66d1bd0497b2e"}, {"sha": "d8d3ee907bafc690f466e34ab790f568dbeeea36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d3ee907bafc690f466e34ab790f568dbeeea36", "html_url": "https://github.com/rust-lang/rust/commit/d8d3ee907bafc690f466e34ab790f568dbeeea36"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "ce01f591c59a24a6679170e3c6588f31597718d1", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec5d96228a859932828470c549e673de89844d6c/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5d96228a859932828470c549e673de89844d6c/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=ec5d96228a859932828470c549e673de89844d6c", "patch": "@@ -79,13 +79,18 @@ impl LateLintPass for BlockInIfCondition {\n                         if let Some(ref ex) = block.expr {\n                             // don't dig into the expression here, just suggest that they remove\n                             // the block\n-\n+                            if differing_macro_contexts(expr.span, ex.span) {\n+                                return;\n+                            }\n                             span_help_and_lint(cx, BLOCK_IN_IF_CONDITION_EXPR, check.span,\n                                 BRACED_EXPR_MESSAGE,\n                                 &format!(\"try\\nif {} {} ... \", snippet_block(cx, ex.span, \"..\"),\n                                 snippet_block(cx, then.span, \"..\")));\n                         }\n                     } else {\n+                        if differing_macro_contexts(expr.span, block.stmts[0].span) {\n+                            return;\n+                        }\n                         // move block higher\n                         span_help_and_lint(cx, BLOCK_IN_IF_CONDITION_STMT, check.span,\n                             COMPLEX_BLOCK_MESSAGE,"}, {"sha": "e119ef63436a3c5e645c3f51949e3c94ed12c7f1", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec5d96228a859932828470c549e673de89844d6c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5d96228a859932828470c549e673de89844d6c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ec5d96228a859932828470c549e673de89844d6c", "patch": "@@ -9,9 +9,7 @@ use syntax::ast::IntTy::*;\n use syntax::ast::UintTy::*;\n use syntax::ast::FloatTy::*;\n \n-use utils::{match_type, snippet, span_lint, span_help_and_lint};\n-use utils::{is_from_for_desugar, in_macro, in_external_macro};\n-use utils::{LL_PATH, VEC_PATH};\n+use utils::*;\n \n /// Handles all the linting of funky types\n #[allow(missing_copy_implementations)]\n@@ -50,6 +48,9 @@ impl LintPass for TypePass {\n \n impl LateLintPass for TypePass {\n     fn check_ty(&mut self, cx: &LateContext, ast_ty: &Ty) {\n+        if in_macro(cx, ast_ty.span) {\n+            return\n+        }\n         if let Some(ty) = cx.tcx.ast_ty_to_ty_cache.borrow().get(&ast_ty.id) {\n             if let ty::TyBox(ref inner) = ty.sty {\n                 if match_type(cx, inner, &VEC_PATH) {"}, {"sha": "90e8e27b4f05540e18bc7ecfecf4ded656d6eea3", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec5d96228a859932828470c549e673de89844d6c/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5d96228a859932828470c549e673de89844d6c/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=ec5d96228a859932828470c549e673de89844d6c", "patch": "@@ -74,6 +74,10 @@ macro_rules! if_let_chain {\n     };\n }\n \n+/// Returns true if the two spans come from differing expansions (i.e. one is from a macro and one isn't)\n+pub fn differing_macro_contexts(sp1: Span, sp2: Span) -> bool {\n+    sp1.expn_id != sp2.expn_id\n+}\n /// returns true if this expn_info was expanded by any macro\n pub fn in_macro<T: LintContext>(cx: &T, span: Span) -> bool {\n     cx.sess().codemap().with_expn_info(span.expn_id,"}, {"sha": "0a68d80c339e2ca1dda4c4ad2390d3266d2551d3", "filename": "tests/compile-fail/block_in_if_condition.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec5d96228a859932828470c549e673de89844d6c/tests%2Fcompile-fail%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5d96228a859932828470c549e673de89844d6c/tests%2Fcompile-fail%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fblock_in_if_condition.rs?ref=ec5d96228a859932828470c549e673de89844d6c", "patch": "@@ -5,6 +5,15 @@\n #![deny(block_in_if_condition_stmt)]\n #![allow(unused)]\n \n+\n+macro_rules! blocky {\n+    () => {{true}}\n+}\n+\n+fn macro_if() {\n+    if blocky!() {\n+    }\n+}\n fn condition_has_block() -> i32 {\n \n     if { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'"}, {"sha": "4fd98cd52ff3be4fd3e30525a7572100f857a05c", "filename": "tests/compile-fail/box_vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec5d96228a859932828470c549e673de89844d6c/tests%2Fcompile-fail%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5d96228a859932828470c549e673de89844d6c/tests%2Fcompile-fail%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbox_vec.rs?ref=ec5d96228a859932828470c549e673de89844d6c", "patch": "@@ -3,6 +3,15 @@\n #![plugin(clippy)]\n #![deny(clippy)]\n \n+macro_rules! boxit {\n+    ($init:expr, $x:ty) => {\n+        let _: Box<$x> = Box::new($init);\n+    }\n+}\n+\n+fn test_macro() {\n+    boxit!(Vec::new(), Vec<u8>);\n+}\n pub fn test(foo: Box<Vec<bool>>) { //~ ERROR you seem to be trying to use `Box<Vec<T>>`\n     println!(\"{:?}\", foo.get(0))\n }\n@@ -14,4 +23,5 @@ pub fn test2(foo: Box<Fn(Vec<u32>)>) { // pass if #31 is fixed\n fn main(){\n     test(Box::new(Vec::new()));\n     test2(Box::new(|v| println!(\"{:?}\", v)));\n+    test_macro();\n }"}]}