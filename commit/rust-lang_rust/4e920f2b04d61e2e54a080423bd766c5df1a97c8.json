{"sha": "4e920f2b04d61e2e54a080423bd766c5df1a97c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlOTIwZjJiMDRkNjFlMmU1NGEwODA0MjNiZDc2NmM1ZGYxYTk3Yzg=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-04-12T20:07:13Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-04-12T20:18:48Z"}, "message": "ci: use a custom android sdk manager with pinning and mirroring", "tree": {"sha": "c3254f6d1699fb9903c34d5e1a3c53d53b88150f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3254f6d1699fb9903c34d5e1a3c53d53b88150f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e920f2b04d61e2e54a080423bd766c5df1a97c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAlyw8qkACgkQPgar6Auq\n8Zz1WA/9Hi80vEYaTKw5TEuS/gVdE8AA0p8OPWYYHZPTCNTB35C7M6ca0My/Wk+t\nANMyCxUl8HPFKnznMRsFWLw0B+hN53JUsGPtOQEtrJ33/BrEMxyatQTzitDmdMxR\ndEN3BeWCAqDdTBOqgV7ne4Lnm/ddO05mFVy4/CZjS/3ovG7EBJY5nJEFRkmeiyhJ\nAD4vIGcONcXutac5dYsHPRYj8aR9ehQDE6Td0GxEnLeTWvE5JCNoCYvXIkgahu0r\n/SaO3DpINjRIEu4+mQWDgVHZtCpUU+TOe8+sk5sL9/E5O2hSClQ1dDaEvwYxC9bB\nbeuNh8Z5FQHJ+0K4Gt6RasZkqmVpJwJaxI/SlHIgSoqmJyrjYCKOk8BiWppF2vqA\nQwtHrSz+iVdDrd6UmEhfDV3l/MlNi7MBtGrLoRClh1wtD1JQr5p1LFbGLGHGNkbo\nsoPLAWvm8AkD9dyatv9A2MMB1cj3P4JJvtJX9Nq8uqLF6StPcwE8TQ7OUgMCYqPG\nLolxs7uZ3kOwEGopXplPK4dP23bf0TE4zPX6PH9WTrKaAmsK+SDakRP9itXk/yXb\nFOMwrmVv5rphBugYvt7xXU9+nhNbWhAv0q4wn9kB1uInvS5SLtJwynFd8QjHUjjF\nJ3wUrp+2YFV4ZTnIXRtr7eyJqblDOmW26fthyBLQdtkZ93cAFKc=\n=PB71\n-----END PGP SIGNATURE-----", "payload": "tree c3254f6d1699fb9903c34d5e1a3c53d53b88150f\nparent ee1474acc43fbf657b0fc910c139cf63cef34dc8\nauthor Pietro Albini <pietro@pietroalbini.org> 1555099633 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1555100328 +0200\n\nci: use a custom android sdk manager with pinning and mirroring\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e920f2b04d61e2e54a080423bd766c5df1a97c8", "html_url": "https://github.com/rust-lang/rust/commit/4e920f2b04d61e2e54a080423bd766c5df1a97c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e920f2b04d61e2e54a080423bd766c5df1a97c8/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee1474acc43fbf657b0fc910c139cf63cef34dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1474acc43fbf657b0fc910c139cf63cef34dc8", "html_url": "https://github.com/rust-lang/rust/commit/ee1474acc43fbf657b0fc910c139cf63cef34dc8"}], "stats": {"total": 292, "additions": 224, "deletions": 68}, "files": [{"sha": "b934d1ce97124d4ee4ccaaf9b87dd1514383f1e2", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e920f2b04d61e2e54a080423bd766c5df1a97c8/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4e920f2b04d61e2e54a080423bd766c5df1a97c8/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=4e920f2b04d61e2e54a080423bd766c5df1a97c8", "patch": "@@ -7,23 +7,21 @@ COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n     download_and_make_toolchain android-ndk-r15c-linux-x86_64.zip arm 14\n \n-# Note:\n-# Do not upgrade to `openjdk-9-jre-headless`, as it will cause certificate error\n-# when installing the Android SDK (see PR #45193). This is unfortunate, but\n-# every search result suggested either disabling HTTPS or replacing JDK 9 by\n-# JDK 8 as the solution (e.g. https://stackoverflow.com/q/41421340). :|\n RUN dpkg --add-architecture i386 && \\\n     apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n   libgl1-mesa-glx \\\n   libpulse0 \\\n   libstdc++6:i386 \\\n-  openjdk-8-jre-headless \\\n-  tzdata\n+  openjdk-9-jre-headless \\\n+  tzdata \\\n+  wget \\\n+  python3\n \n COPY scripts/android-sdk.sh /scripts/\n-RUN . /scripts/android-sdk.sh && \\\n-    download_and_create_avd 4333796 armeabi-v7a 18 5264690\n+COPY scripts/android-sdk-manager.py /scripts/\n+COPY arm-android/android-sdk.lock /android/sdk/android-sdk.lock\n+RUN /scripts/android-sdk.sh\n \n ENV PATH=$PATH:/android/sdk/emulator\n ENV PATH=$PATH:/android/sdk/tools"}, {"sha": "a1be8a4346b6d87c2e1f5f5367e70b6a912a4285", "filename": "src/ci/docker/arm-android/android-sdk.lock", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e920f2b04d61e2e54a080423bd766c5df1a97c8/src%2Fci%2Fdocker%2Farm-android%2Fandroid-sdk.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4e920f2b04d61e2e54a080423bd766c5df1a97c8/src%2Fci%2Fdocker%2Farm-android%2Fandroid-sdk.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Fandroid-sdk.lock?ref=4e920f2b04d61e2e54a080423bd766c5df1a97c8", "patch": "@@ -0,0 +1,6 @@\n+emulator emulator-linux-5264690.zip 48c1cda2bdf3095d9d9d5c010fbfb3d6d673e3ea\n+patcher;v4 3534162-studio.sdk-patcher.zip 046699c5e2716ae11d77e0bad814f7f33fab261e\n+platform-tools platform-tools_r28.0.2-linux.zip 46a4c02a9b8e4e2121eddf6025da3c979bf02e28\n+platforms;android-18 android-18_r03.zip e6b09b3505754cbbeb4a5622008b907262ee91cb\n+system-images;android-18;default;armeabi-v7a sys-img/android/armeabi-v7a-18_r05.zip 580b583720f7de671040d5917c8c9db0c7aa03fd\n+tools sdk-tools-linux-4333796.zip 8c7c28554a32318461802c1291d76fccfafde054"}, {"sha": "7c9a8b82e928266aa914a07093c8352ca4e3698d", "filename": "src/ci/docker/scripts/android-sdk-manager.py", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/4e920f2b04d61e2e54a080423bd766c5df1a97c8/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk-manager.py", "raw_url": "https://github.com/rust-lang/rust/raw/4e920f2b04d61e2e54a080423bd766c5df1a97c8/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk-manager.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk-manager.py?ref=4e920f2b04d61e2e54a080423bd766c5df1a97c8", "patch": "@@ -0,0 +1,190 @@\n+#!/usr/bin/env python3\n+# Simpler reimplementation of Android's sdkmanager\n+# Extra features of this implementation are pinning and mirroring\n+\n+# These URLs are the Google repositories containing the list of available\n+# packages and their versions. The list has been generated by listing the URLs\n+# fetched while executing `tools/bin/sdkmanager --list`\n+BASE_REPOSITORY = \"https://dl.google.com/android/repository/\"\n+REPOSITORIES = [\n+    \"sys-img/android/sys-img2-1.xml\",\n+    \"sys-img/android-wear/sys-img2-1.xml\",\n+    \"sys-img/android-wear-cn/sys-img2-1.xml\",\n+    \"sys-img/android-tv/sys-img2-1.xml\",\n+    \"sys-img/google_apis/sys-img2-1.xml\",\n+    \"sys-img/google_apis_playstore/sys-img2-1.xml\",\n+    \"addon2-1.xml\",\n+    \"glass/addon2-1.xml\",\n+    \"extras/intel/addon2-1.xml\",\n+    \"repository2-1.xml\",\n+]\n+\n+# Available hosts: linux, macosx and windows\n+HOST_OS = \"linux\"\n+\n+# Mirroring options\n+MIRROR_BUCKET = \"rust-lang-ci2\"\n+MIRROR_BASE_DIR = \"rust-ci-mirror/android/\"\n+\n+import argparse\n+import hashlib\n+import os\n+import subprocess\n+import sys\n+import tempfile\n+import urllib.request\n+import xml.etree.ElementTree as ET\n+\n+class Package:\n+    def __init__(self, path, url, sha1, deps=None):\n+        if deps is None:\n+            deps = []\n+        self.path = path.strip()\n+        self.url = url.strip()\n+        self.sha1 = sha1.strip()\n+        self.deps = deps\n+\n+    def download(self, base_url):\n+        _, file = tempfile.mkstemp()\n+        url = base_url + self.url\n+        subprocess.run([\"curl\", \"-o\", file, url], check=True)\n+        # Ensure there are no hash mismatches\n+        with open(file, \"rb\") as f:\n+            sha1 = hashlib.sha1(f.read()).hexdigest()\n+            if sha1 != self.sha1:\n+                raise RuntimeError(\n+                    \"hash mismatch for package \" + self.path + \": \" +\n+                    sha1 + \" vs \" + self.sha1 + \" (known good)\"\n+                )\n+        return file\n+\n+    def __repr__(self):\n+        return \"<Package \"+self.path+\" at \"+self.url+\" (sha1=\"+self.sha1+\")\"\n+\n+def fetch_url(url):\n+    page = urllib.request.urlopen(url)\n+    return page.read()\n+\n+def fetch_repository(base, repo_url):\n+    packages = {}\n+    root = ET.fromstring(fetch_url(base + repo_url))\n+    for package in root:\n+        if package.tag != \"remotePackage\":\n+            continue\n+        path = package.attrib[\"path\"]\n+\n+        for archive in package.find(\"archives\"):\n+            host_os = archive.find(\"host-os\")\n+            if host_os is not None and host_os.text != HOST_OS:\n+                continue\n+            complete = archive.find(\"complete\")\n+            url = os.path.join(os.path.dirname(repo_url), complete.find(\"url\").text)\n+            sha1 = complete.find(\"checksum\").text\n+\n+            deps = []\n+            dependencies = package.find(\"dependencies\")\n+            if dependencies is not None:\n+                for dep in dependencies:\n+                    deps.append(dep.attrib[\"path\"])\n+\n+            packages[path] = Package(path, url, sha1, deps)\n+            break\n+\n+    return packages\n+\n+def fetch_repositories():\n+    packages = {}\n+    for repo in REPOSITORIES:\n+        packages.update(fetch_repository(BASE_REPOSITORY, repo))\n+    return packages\n+\n+class Lockfile:\n+    def __init__(self, path):\n+        self.path = path\n+        self.packages = {}\n+        if os.path.exists(path):\n+            with open(path) as f:\n+                for line in f:\n+                    path, url, sha1 = line.split(\" \")\n+                    self.packages[path] = Package(path, url, sha1)\n+\n+    def add(self, packages, name, *, update=True):\n+        if name not in packages:\n+            raise NameError(\"package not found: \" + name)\n+        if not update and name in self.packages:\n+            return\n+        self.packages[name] = packages[name]\n+        for dep in packages[name].deps:\n+            self.add(packages, dep, update=False)\n+\n+    def save(self):\n+        packages = list(sorted(self.packages.values(), key=lambda p: p.path))\n+        with open(self.path, \"w\") as f:\n+            for package in packages:\n+                f.write(package.path + \" \" + package.url + \" \" + package.sha1 + \"\\n\")\n+\n+def cli_add_to_lockfile(args):\n+    lockfile = Lockfile(args.lockfile)\n+    packages = fetch_repositories()\n+    for package in args.packages:\n+        lockfile.add(packages, package)\n+    lockfile.save()\n+\n+def cli_update_mirror(args):\n+    lockfile = Lockfile(args.lockfile)\n+    for package in lockfile.packages.values():\n+        path = package.download(BASE_REPOSITORY)\n+        subprocess.run([\n+            \"aws\", \"s3\", \"mv\", path,\n+            \"s3://\" + MIRROR_BUCKET + \"/\" + MIRROR_BASE_DIR + package.url,\n+            \"--profile=\" + args.awscli_profile,\n+        ], check=True)\n+\n+def cli_install(args):\n+    lockfile = Lockfile(args.lockfile)\n+    for package in lockfile.packages.values():\n+        # Download the file from the mirror into a temp file\n+        url = \"https://\" + MIRROR_BUCKET + \".s3.amazonaws.com/\" + MIRROR_BASE_DIR\n+        downloaded = package.download(url)\n+        # Extract the file in a temporary directory\n+        extract_dir = tempfile.mkdtemp()\n+        subprocess.run([\n+            \"unzip\", \"-q\", downloaded, \"-d\", extract_dir,\n+        ], check=True)\n+        # Figure out the prefix used in the zip\n+        subdirs = [d for d in os.listdir(extract_dir) if not d.startswith(\".\")]\n+        if len(subdirs) != 1:\n+            raise RuntimeError(\"extracted directory contains more than one dir\")\n+        # Move the extracted files in the proper directory\n+        dest = os.path.join(args.dest, package.path.replace(\";\", \"/\"))\n+        os.makedirs(\"/\".join(dest.split(\"/\")[:-1]), exist_ok=True)\n+        os.rename(os.path.join(extract_dir, subdirs[0]), dest)\n+        os.unlink(downloaded)\n+\n+def cli():\n+    parser = argparse.ArgumentParser()\n+    subparsers = parser.add_subparsers()\n+\n+    add_to_lockfile = subparsers.add_parser(\"add-to-lockfile\")\n+    add_to_lockfile.add_argument(\"lockfile\")\n+    add_to_lockfile.add_argument(\"packages\", nargs=\"+\")\n+    add_to_lockfile.set_defaults(func=cli_add_to_lockfile)\n+\n+    update_mirror = subparsers.add_parser(\"update-mirror\")\n+    update_mirror.add_argument(\"lockfile\")\n+    update_mirror.add_argument(\"--awscli-profile\", default=\"default\")\n+    update_mirror.set_defaults(func=cli_update_mirror)\n+\n+    install = subparsers.add_parser(\"install\")\n+    install.add_argument(\"lockfile\")\n+    install.add_argument(\"dest\")\n+    install.set_defaults(func=cli_install)\n+\n+    args = parser.parse_args()\n+    if not hasattr(args, \"func\"):\n+        print(\"error: a subcommand is required (see --help)\")\n+        exit(1)\n+    args.func(args)\n+\n+if __name__ == \"__main__\":\n+    cli()"}, {"sha": "0b86a2f2dff97263453487dae9504ac26ae4a7cc", "filename": "src/ci/docker/scripts/android-sdk.sh", "status": "modified", "additions": 21, "deletions": 59, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/4e920f2b04d61e2e54a080423bd766c5df1a97c8/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4e920f2b04d61e2e54a080423bd766c5df1a97c8/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh?ref=4e920f2b04d61e2e54a080423bd766c5df1a97c8", "patch": "@@ -2,66 +2,28 @@ set -ex\n \n export ANDROID_HOME=/android/sdk\n PATH=$PATH:\"${ANDROID_HOME}/tools/bin\"\n+LOCKFILE=\"${ANDROID_HOME}/android-sdk.lock\"\n \n-download_sdk() {\n-    mkdir -p /android\n-    curl -fo sdk.zip \"https://dl.google.com/android/repository/sdk-tools-linux-$1.zip\"\n-    unzip -q sdk.zip -d \"$ANDROID_HOME\"\n-    rm -f sdk.zip\n-}\n-\n-download_sysimage() {\n-    abi=$1\n-    api=$2\n-\n-    # See https://developer.android.com/studio/command-line/sdkmanager.html for\n-    # usage of `sdkmanager`.\n-    #\n-    # The output from sdkmanager is so noisy that it will occupy all of the 4 MB\n-    # log extremely quickly. Thus we must silence all output.\n-    yes | sdkmanager --licenses > /dev/null\n-    yes | sdkmanager platform-tools \\\n-        \"platforms;android-$api\" \\\n-        \"system-images;android-$api;default;$abi\" > /dev/null\n-}\n-\n-download_emulator() {\n-    # Download a pinned version of the emulator since upgrades can cause issues\n-    curl -fo emulator.zip \"https://dl.google.com/android/repository/emulator-linux-$1.zip\"\n-    rm -rf \"${ANDROID_HOME}/emulator\"\n-    unzip -q emulator.zip -d \"${ANDROID_HOME}\"\n-    rm -f emulator.zip\n-}\n-\n-create_avd() {\n-    abi=$1\n-    api=$2\n+# To add a new packages to the SDK or to update an existing one you need to\n+# run the command:\n+#\n+#    android-sdk-manager.py add-to-lockfile $LOCKFILE <package-name>\n+#\n+# Then, after every lockfile update the mirror has to be synchronized as well:\n+#\n+#    android-sdk-manager.py update-mirror $LOCKFILE\n+#\n+/scripts/android-sdk-manager.py install \"${LOCKFILE}\" \"${ANDROID_HOME}\"\n \n-    # See https://developer.android.com/studio/command-line/avdmanager.html for\n-    # usage of `avdmanager`.\n-    echo no | avdmanager create avd \\\n-        -n \"$abi-$api\" \\\n-        -k \"system-images;android-$api;default;$abi\"\n-}\n+details=$(cat \"${LOCKFILE}\" \\\n+    | grep system-images \\\n+    | sed 's/^system-images;android-\\([0-9]\\+\\);default;\\([a-z0-9-]\\+\\) /\\1 \\2 /g')\n+api=\"$(echo \"${details}\" | awk '{print($1)}')\"\n+abi=\"$(echo \"${details}\" | awk '{print($2)}')\"\n \n-download_and_create_avd() {\n-    download_sdk $1\n-    download_sysimage $2 $3\n-    create_avd $2 $3\n-    download_emulator $4\n-}\n+# See https://developer.android.com/studio/command-line/avdmanager.html for\n+# usage of `avdmanager`.\n+echo no | avdmanager create avd \\\n+    -n \"$abi-$api\" \\\n+    -k \"system-images;android-$api;default;$abi\"\n \n-# Usage:\n-#\n-#       download_and_create_avd 4333796 armeabi-v7a 18 5264690\n-#\n-# 4333796 =>\n-#   SDK tool version.\n-#   Copy from https://developer.android.com/studio/index.html#command-tools\n-# armeabi-v7a =>\n-#   System image ABI\n-# 18 =>\n-#   Android API Level (18 = Android 4.3 = Jelly Bean MR2)\n-# 5264690 =>\n-#   Android Emulator version.\n-#   Copy from the \"build_id\" in the `/android/sdk/emulator/emulator -version` output"}]}