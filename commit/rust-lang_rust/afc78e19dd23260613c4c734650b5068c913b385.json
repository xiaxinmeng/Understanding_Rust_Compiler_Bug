{"sha": "afc78e19dd23260613c4c734650b5068c913b385", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzc4ZTE5ZGQyMzI2MDYxM2M0YzczNDY1MGI1MDY4YzkxM2IzODU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-22T18:57:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T18:57:46Z"}, "message": "Rollup merge of #66566 - robamler:issue-66476, r=rkruppe\n\nDocument pitfall with `impl PartialEq<B> for A`\n\nFixes #66476 by turning the violating example into an explicit\ncounterexample.", "tree": {"sha": "6969b70fb7e0206d81cf1c77e6119125fd583f06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6969b70fb7e0206d81cf1c77e6119125fd583f06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc78e19dd23260613c4c734650b5068c913b385", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2C+qCRBK7hj4Ov3rIwAAdHIIADT2JkOCT0wi6ZhQ4Ke01IEx\n/ipscpopGS6TVmJ2ftnNKPzZsTU8c7/0KOhCBlFBV9+X13FoGQFNGKxXwGD7/ZTd\nRNoshtv6g7JTLc1EyklokLLYUSUDrPx8Xgxn2J2cIGY/IhuKCkTDLa3VBg1VEkaG\nhbFrI48l1gEQtgvG5irrfO+OvQNLWQrjzJv/YW2KWJhlULpH6wtVOU29b6N91zRc\n9OXuB1FuPbtR4dw+60hhHZUN/RDkdpScVNeFmCg3xFfuh4V4DbikfNI3/y/RpMmx\nazfi3Jo8kzQbE2PB8hh5/oRufErAo9ezNlQxAGVKWeasXN1YKZyVz1AIZNKB48g=\n=c6c8\n-----END PGP SIGNATURE-----\n", "payload": "tree 6969b70fb7e0206d81cf1c77e6119125fd583f06\nparent 8cba0a9073f740791c5d18148d649c61aaf7d6c7\nparent 5028fd8ab9bda648840bb48e03e618f027cc8c85\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574449066 +0100\ncommitter GitHub <noreply@github.com> 1574449066 +0100\n\nRollup merge of #66566 - robamler:issue-66476, r=rkruppe\n\nDocument pitfall with `impl PartialEq<B> for A`\n\nFixes #66476 by turning the violating example into an explicit\ncounterexample.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc78e19dd23260613c4c734650b5068c913b385", "html_url": "https://github.com/rust-lang/rust/commit/afc78e19dd23260613c4c734650b5068c913b385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc78e19dd23260613c4c734650b5068c913b385/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cba0a9073f740791c5d18148d649c61aaf7d6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cba0a9073f740791c5d18148d649c61aaf7d6c7", "html_url": "https://github.com/rust-lang/rust/commit/8cba0a9073f740791c5d18148d649c61aaf7d6c7"}, {"sha": "5028fd8ab9bda648840bb48e03e618f027cc8c85", "url": "https://api.github.com/repos/rust-lang/rust/commits/5028fd8ab9bda648840bb48e03e618f027cc8c85", "html_url": "https://github.com/rust-lang/rust/commit/5028fd8ab9bda648840bb48e03e618f027cc8c85"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "eb5121dd0e0812cd7e5b77129a189b2e98c00129", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/afc78e19dd23260613c4c734650b5068c913b385/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc78e19dd23260613c4c734650b5068c913b385/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=afc78e19dd23260613c4c734650b5068c913b385", "patch": "@@ -135,17 +135,23 @@ use self::Ordering::*;\n /// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n /// we allow `BookFormat`s to be compared with `Book`s.\n ///\n-/// You can also combine these implementations to let the `==` operator work with\n-/// two different types:\n-///\n-/// ```\n+/// A comparison like the one above, which ignores some fields of the struct,\n+/// can be dangerous. It can easily lead to an unintended violation of the\n+/// requirements for a partial equivalence relation. For example, if we kept\n+/// the above implementation of `PartialEq<Book>` for `BookFormat` and added an\n+/// implementation of `PartialEq<Book>` for `Book` (either via a `#[derive]` or\n+/// via the manual implementation from the first example) then the result would\n+/// violate transitivity:\n+///\n+/// ```should_panic\n /// #[derive(PartialEq)]\n /// enum BookFormat {\n ///     Paperback,\n ///     Hardback,\n ///     Ebook,\n /// }\n ///\n+/// #[derive(PartialEq)]\n /// struct Book {\n ///     isbn: i32,\n ///     format: BookFormat,\n@@ -163,18 +169,16 @@ use self::Ordering::*;\n ///     }\n /// }\n ///\n-/// impl PartialEq for Book {\n-///     fn eq(&self, other: &Book) -> bool {\n-///         self.isbn == other.isbn\n-///     }\n-/// }\n+/// fn main() {\n+///     let b1 = Book { isbn: 1, format: BookFormat::Paperback };\n+///     let b2 = Book { isbn: 2, format: BookFormat::Paperback };\n ///\n-/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n-/// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n+///     assert!(b1 == BookFormat::Paperback);\n+///     assert!(BookFormat::Paperback == b2);\n ///\n-/// assert!(b1 == BookFormat::Paperback);\n-/// assert!(BookFormat::Ebook != b1);\n-/// assert!(b1 == b2);\n+///     // The following should hold by transitivity but doesn't.\n+///     assert!(b1 == b2); // <-- PANICS\n+/// }\n /// ```\n ///\n /// # Examples"}]}