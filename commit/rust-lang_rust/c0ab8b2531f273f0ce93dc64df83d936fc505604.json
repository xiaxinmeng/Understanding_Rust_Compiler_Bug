{"sha": "c0ab8b2531f273f0ce93dc64df83d936fc505604", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYWI4YjI1MzFmMjczZjBjZTkzZGM2NGRmODNkOTM2ZmM1MDU2MDQ=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-04T19:44:16Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-04T19:44:16Z"}, "message": "Reimplement the `fn_to_numeric_cast_with_truncation` lint", "tree": {"sha": "4313344834ca35247e06e5522de0375e7250a018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4313344834ca35247e06e5522de0375e7250a018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ab8b2531f273f0ce93dc64df83d936fc505604", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlu2bbsACgkQtvoGpuDi\nZlvcmQ//S8qKY0xo6XYtr4vuxvhSpSn9Y/4EDefE984U83fiVQ/w5PpSdLmMB8tb\nFXBUegRiIGqJDpn1nPgtXifEMHYd5kPGh0pQ2j2ecAhkl/T6sDW9ai3eiNgwi501\nhn/zzO+pRaO50WhdKSDUfOb9qGaX19hi7Ob2g3HDMEKWjqcAaEPqDQDWEotSpr0D\nRUnddKMT2M0mnz+LThjjNo1uhzfYuQH3NzTurA2KLmK9Ez2OsU5qhMte9fsm6DaX\naOH6vkpW81K+gmDwnDaMcWhp0N77dCLMTyKGbNyMeXWz7olVMOlfmNzhFts8hyIX\neW+zGlZIdOjL5PLIroLni2H2cNqVPLW9whB2fGQ3oT6o77qzDhGk+7ljG2BBpLgd\neq60A4SkxU8MRb3q74zShvQLr7B4K8ZwQYMWQQHP9d5Ov+AMc2U4KjH1JBu9mciQ\nMmoYWMHThuJUgo4Sfzt9CLsk90fvuSzj8YX28jNeAIk8HpmE8A0L1Hqzk1Oj0nUJ\nmxwOHpw9in4k6mldJ1RjQnhOMp3n65YznB75zQzph8vRkz5M6vnIeVAJSeLYjtae\nZlBPf8SsmMWQegonHSfc5X4xCR7/+CHCgo3nUYtZjuEMxHnB/0VVrp6sHiJlnMm3\nmvDulUAJtKicD4IRfzpM8deCN1MF2vTUXErRocLCmsQqLPcZFmo=\n=0Vfr\n-----END PGP SIGNATURE-----", "payload": "tree 4313344834ca35247e06e5522de0375e7250a018\nparent 7adf24ebb04641941e47a0582e61461163f929f4\nauthor Philipp Hansch <dev@phansch.net> 1538682256 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1538682256 +0200\n\nReimplement the `fn_to_numeric_cast_with_truncation` lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ab8b2531f273f0ce93dc64df83d936fc505604", "html_url": "https://github.com/rust-lang/rust/commit/c0ab8b2531f273f0ce93dc64df83d936fc505604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ab8b2531f273f0ce93dc64df83d936fc505604/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7adf24ebb04641941e47a0582e61461163f929f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7adf24ebb04641941e47a0582e61461163f929f4", "html_url": "https://github.com/rust-lang/rust/commit/7adf24ebb04641941e47a0582e61461163f929f4"}], "stats": {"total": 252, "additions": 249, "deletions": 3}, "files": [{"sha": "c9bea1e8ef5ebe9e90d7838a5957c9782f577865", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0ab8b2531f273f0ce93dc64df83d936fc505604/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0ab8b2531f273f0ce93dc64df83d936fc505604/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c0ab8b2531f273f0ce93dc64df83d936fc505604", "patch": "@@ -689,6 +689,7 @@ All notable changes to this project will be documented in this file.\n [`float_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_cmp_const\n [`fn_to_numeric_cast`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n+[`fn_to_numeric_cast_with_truncation`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_kv_map\n [`for_loop_over_option`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_loop_over_option\n [`for_loop_over_result`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#for_loop_over_result"}, {"sha": "40ece34c6faf9442296d2f0c66f5d454aa1ffd0c", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ab8b2531f273f0ce93dc64df83d936fc505604/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0ab8b2531f273f0ce93dc64df83d936fc505604/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c0ab8b2531f273f0ce93dc64df83d936fc505604", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 278 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 279 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "3779b09ecf33405b8b6a4521d702b18abcb56369", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ab8b2531f273f0ce93dc64df83d936fc505604/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ab8b2531f273f0ce93dc64df83d936fc505604/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c0ab8b2531f273f0ce93dc64df83d936fc505604", "patch": "@@ -698,6 +698,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::CAST_PTR_ALIGNMENT,\n         types::CHAR_LIT_AS_U8,\n         types::FN_TO_NUMERIC_CAST,\n+        types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         types::OPTION_OPTION,\n@@ -791,6 +792,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         returns::NEEDLESS_RETURN,\n         strings::STRING_LIT_AS_BYTES,\n         types::FN_TO_NUMERIC_CAST,\n+        types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,"}, {"sha": "d3aa8de825be44f95b9098d45f94ea2bede3be1e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c0ab8b2531f273f0ce93dc64df83d936fc505604/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ab8b2531f273f0ce93dc64df83d936fc505604/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c0ab8b2531f273f0ce93dc64df83d936fc505604", "patch": "@@ -746,6 +746,32 @@ declare_clippy_lint! {\n     \"casting a function pointer to a numeric type other than usize\"\n }\n \n+/// **What it does:** Checks for casts of a function pointer to a numeric type not wide enough to\n+/// store address.\n+///\n+/// **Why is this bad?**\n+/// Such a cast discards some bits of the function's address. If this is intended, it would be more\n+/// clearly expressed by casting to usize first, then casting the usize to the intended type (with\n+/// a comment) to perform the truncation.\n+///\n+/// **Example**\n+///\n+/// ```rust\n+/// // Bad\n+/// fn fn1() -> i16 { 1 };\n+/// let _ = fn1 as i32;\n+///\n+/// // Better: Cast to usize first, then comment with the reason for the truncation\n+/// fn fn2() -> i16 { 1 };\n+/// let fn_ptr = fn2 as usize;\n+/// let fn_ptr_truncated = fn_ptr as i32;\n+/// ```\n+declare_clippy_lint! {\n+    pub FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+    style,\n+    \"casting a function pointer to a numeric type not wide enough to store the address\"\n+}\n+\n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n fn int_ty_to_nbits(typ: Ty<'_>, tcx: TyCtxt<'_, '_, '_>) -> u64 {\n@@ -1054,7 +1080,19 @@ fn lint_fn_to_numeric_cast(cx: &LateContext<'_, '_>, expr: &Expr, cast_expr: &Ex\n     match cast_from.sty {\n         ty::FnDef(..) | ty::FnPtr(_) => {\n             let from_snippet = snippet(cx, cast_expr.span, \"x\");\n-            if cast_to.sty != ty::Uint(UintTy::Usize) {\n+\n+            let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n+            if to_nbits < cx.tcx.data_layout.pointer_size.bits() {\n+                span_lint_and_sugg(\n+                    cx,\n+                    FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+                    expr.span,\n+                    &format!(\"casting function pointer `{}` to `{}`, which truncates the value\", from_snippet, cast_to),\n+                    \"try\",\n+                    format!(\"{} as usize\", from_snippet)\n+                );\n+\n+            } else if cast_to.sty != ty::Uint(UintTy::Usize) {\n                 span_lint_and_sugg(\n                     cx,\n                     FN_TO_NUMERIC_CAST,"}, {"sha": "6d0fd3d8ab8e88a60f461bef80ad3a23ca744a09", "filename": "tests/ui/fn_to_numeric_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ab8b2531f273f0ce93dc64df83d936fc505604/tests%2Fui%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ab8b2531f273f0ce93dc64df83d936fc505604/tests%2Fui%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast.rs?ref=c0ab8b2531f273f0ce93dc64df83d936fc505604", "patch": "@@ -1,6 +1,6 @@\n #![feature(tool_lints)]\n \n-#[warn(clippy::fn_to_numeric_cast)]\n+#![warn(clippy::fn_to_numeric_cast)]\n \n fn foo() -> String { String::new() }\n "}, {"sha": "be8bc9058b4eac769f5c140013abedb353d727fd", "filename": "tests/ui/fn_to_numeric_cast.stderr", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/c0ab8b2531f273f0ce93dc64df83d936fc505604/tests%2Fui%2Ffn_to_numeric_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0ab8b2531f273f0ce93dc64df83d936fc505604/tests%2Fui%2Ffn_to_numeric_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast.stderr?ref=c0ab8b2531f273f0ce93dc64df83d936fc505604", "patch": "@@ -0,0 +1,142 @@\n+error: casting function pointer `foo` to `i8`\n+ --> $DIR/fn_to_numeric_cast.rs:8:13\n+  |\n+8 |     let _ = foo as i8;\n+  |             ^^^^^^^^^ help: try: `foo as usize`\n+  |\n+  = note: `-D clippy::fn-to-numeric-cast` implied by `-D warnings`\n+\n+error: casting function pointer `foo` to `i16`\n+ --> $DIR/fn_to_numeric_cast.rs:9:13\n+  |\n+9 |     let _ = foo as i16;\n+  |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `i32`\n+  --> $DIR/fn_to_numeric_cast.rs:10:13\n+   |\n+10 |     let _ = foo as i32;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `i64`\n+  --> $DIR/fn_to_numeric_cast.rs:11:13\n+   |\n+11 |     let _ = foo as i64;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `i128`\n+  --> $DIR/fn_to_numeric_cast.rs:12:13\n+   |\n+12 |     let _ = foo as i128;\n+   |             ^^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `isize`\n+  --> $DIR/fn_to_numeric_cast.rs:13:13\n+   |\n+13 |     let _ = foo as isize;\n+   |             ^^^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u8`\n+  --> $DIR/fn_to_numeric_cast.rs:15:13\n+   |\n+15 |     let _ = foo as u8;\n+   |             ^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u16`\n+  --> $DIR/fn_to_numeric_cast.rs:16:13\n+   |\n+16 |     let _ = foo as u16;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u32`\n+  --> $DIR/fn_to_numeric_cast.rs:17:13\n+   |\n+17 |     let _ = foo as u32;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u64`\n+  --> $DIR/fn_to_numeric_cast.rs:18:13\n+   |\n+18 |     let _ = foo as u64;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u128`\n+  --> $DIR/fn_to_numeric_cast.rs:19:13\n+   |\n+19 |     let _ = foo as u128;\n+   |             ^^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `abc` to `i8`\n+  --> $DIR/fn_to_numeric_cast.rs:28:13\n+   |\n+28 |     let _ = abc as i8;\n+   |             ^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `i16`\n+  --> $DIR/fn_to_numeric_cast.rs:29:13\n+   |\n+29 |     let _ = abc as i16;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `i32`\n+  --> $DIR/fn_to_numeric_cast.rs:30:13\n+   |\n+30 |     let _ = abc as i32;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `i64`\n+  --> $DIR/fn_to_numeric_cast.rs:31:13\n+   |\n+31 |     let _ = abc as i64;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `i128`\n+  --> $DIR/fn_to_numeric_cast.rs:32:13\n+   |\n+32 |     let _ = abc as i128;\n+   |             ^^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `isize`\n+  --> $DIR/fn_to_numeric_cast.rs:33:13\n+   |\n+33 |     let _ = abc as isize;\n+   |             ^^^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u8`\n+  --> $DIR/fn_to_numeric_cast.rs:35:13\n+   |\n+35 |     let _ = abc as u8;\n+   |             ^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u16`\n+  --> $DIR/fn_to_numeric_cast.rs:36:13\n+   |\n+36 |     let _ = abc as u16;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u32`\n+  --> $DIR/fn_to_numeric_cast.rs:37:13\n+   |\n+37 |     let _ = abc as u32;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u64`\n+  --> $DIR/fn_to_numeric_cast.rs:38:13\n+   |\n+38 |     let _ = abc as u64;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u128`\n+  --> $DIR/fn_to_numeric_cast.rs:39:13\n+   |\n+39 |     let _ = abc as u128;\n+   |             ^^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `f` to `i32`\n+  --> $DIR/fn_to_numeric_cast.rs:46:5\n+   |\n+46 |     f as i32\n+   |     ^^^^^^^^ help: try: `f as usize`\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "82bbaec201f4032d994675b9b06e8243c2b0bd2e", "filename": "tests/ui/fn_to_numeric_cast_with_truncation.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c0ab8b2531f273f0ce93dc64df83d936fc505604/tests%2Fui%2Ffn_to_numeric_cast_with_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ab8b2531f273f0ce93dc64df83d936fc505604/tests%2Fui%2Ffn_to_numeric_cast_with_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast_with_truncation.rs?ref=c0ab8b2531f273f0ce93dc64df83d936fc505604", "patch": "@@ -0,0 +1,23 @@\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::fn_to_numeric_cast_with_truncation)]\n+#![allow(clippy::fn_to_numeric_cast)]\n+\n+fn foo() -> String { String::new() }\n+\n+fn test_fn_to_numeric_cast_with_truncation() {\n+    let _ = foo as i8;\n+    let _ = foo as i16;\n+    let _ = foo as i32;\n+    let _ = foo as u8;\n+    let _ = foo as u16;\n+    let _ = foo as u32;\n+\n+    // TODO: Is it bad to have these tests?\n+    // Running the tests on a different architechture will\n+    // produce different results\n+    let _ = foo as u64;\n+    let _ = foo as i64;\n+}\n+\n+fn main() {}"}, {"sha": "cae4b6fbd40a526ad4199de66bd6ff9d12787503", "filename": "tests/ui/fn_to_numeric_cast_with_truncation.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c0ab8b2531f273f0ce93dc64df83d936fc505604/tests%2Fui%2Ffn_to_numeric_cast_with_truncation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0ab8b2531f273f0ce93dc64df83d936fc505604/tests%2Fui%2Ffn_to_numeric_cast_with_truncation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast_with_truncation.stderr?ref=c0ab8b2531f273f0ce93dc64df83d936fc505604", "patch": "@@ -0,0 +1,40 @@\n+error: casting function pointer `foo` to `i8`, which truncates the value\n+ --> $DIR/fn_to_numeric_cast_with_truncation.rs:9:13\n+  |\n+9 |     let _ = foo as i8;\n+  |             ^^^^^^^^^ help: try: `foo as usize`\n+  |\n+  = note: `-D clippy::fn-to-numeric-cast-with-truncation` implied by `-D warnings`\n+\n+error: casting function pointer `foo` to `i16`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_with_truncation.rs:10:13\n+   |\n+10 |     let _ = foo as i16;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `i32`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_with_truncation.rs:11:13\n+   |\n+11 |     let _ = foo as i32;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u8`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_with_truncation.rs:12:13\n+   |\n+12 |     let _ = foo as u8;\n+   |             ^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u16`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_with_truncation.rs:13:13\n+   |\n+13 |     let _ = foo as u16;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u32`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_with_truncation.rs:14:13\n+   |\n+14 |     let _ = foo as u32;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: aborting due to 6 previous errors\n+"}]}