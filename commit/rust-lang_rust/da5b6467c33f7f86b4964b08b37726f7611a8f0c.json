{"sha": "da5b6467c33f7f86b4964b08b37726f7611a8f0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNWI2NDY3YzMzZjdmODZiNDk2NGIwOGIzNzcyNmY3NjExYThmMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-21T08:48:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-21T08:48:31Z"}, "message": "Auto merge of #37247 - jseyfried:future_proof_no_link, r=nrc\n\nmacros: Future proof `#[no_link]`\n\nThis PR future proofs `#[no_link]` for macro modularization (cc #35896).\n\nFirst, we resolve all `#[no_link] extern crate`s. `#[no_link]` crates without `#[macro_use]` or `#[macro_reexport]` are not resolved today, this is a [breaking-change]. For example,\n```rust\n```\nAny breakage can be fixed by simply removing the `#[no_link] extern crate`.\n\nSecond, `#[no_link] extern crate`s will define an empty module in type namespace to eventually allow importing the crate's macros with `use`. This is a [breaking-change], for example:\n```rust\nmod syntax {} //< This becomes a duplicate error.\n```\n\nr? @nrc", "tree": {"sha": "bda505a46fc98c456aa2012b41af936d99fb1a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bda505a46fc98c456aa2012b41af936d99fb1a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5b6467c33f7f86b4964b08b37726f7611a8f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5b6467c33f7f86b4964b08b37726f7611a8f0c", "html_url": "https://github.com/rust-lang/rust/commit/da5b6467c33f7f86b4964b08b37726f7611a8f0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5b6467c33f7f86b4964b08b37726f7611a8f0c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4708273b5401cd572d19f8836e121ce39dc2767", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4708273b5401cd572d19f8836e121ce39dc2767", "html_url": "https://github.com/rust-lang/rust/commit/e4708273b5401cd572d19f8836e121ce39dc2767"}, {"sha": "b283aaf0ff74db93162b402e627f3b4ed7fb7d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b283aaf0ff74db93162b402e627f3b4ed7fb7d4e", "html_url": "https://github.com/rust-lang/rust/commit/b283aaf0ff74db93162b402e627f3b4ed7fb7d4e"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "41e14ea9f406f4386ef1e8f4e2840e7d4f48b31d", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=da5b6467c33f7f86b4964b08b37726f7611a8f0c", "patch": "@@ -52,6 +52,7 @@ impl<'a> CrateLoader<'a> {\n         // Parse the attributes relating to macros.\n         let mut import = ImportSelection::Some(FnvHashMap());\n         let mut reexport = FnvHashMap();\n+        let mut no_link = false;\n \n         for attr in &extern_crate.attrs {\n             let mut used = true;\n@@ -87,24 +88,30 @@ impl<'a> CrateLoader<'a> {\n                         }\n                     }\n                 }\n+                \"no_link\" => no_link = true,\n                 _ => used = false,\n             }\n             if used {\n                 attr::mark_used(attr);\n             }\n         }\n \n-        self.load_macros(extern_crate, allows_macros, import, reexport)\n+        self.load_macros(extern_crate, allows_macros, import, reexport, no_link)\n     }\n \n     fn load_macros<'b>(&mut self,\n                        vi: &ast::Item,\n                        allows_macros: bool,\n                        import: ImportSelection,\n-                       reexport: MacroSelection)\n+                       reexport: MacroSelection,\n+                       no_link: bool)\n                        -> Vec<LoadedMacro> {\n         if let ImportSelection::Some(ref sel) = import {\n             if sel.is_empty() && reexport.is_empty() {\n+                // Make sure we can read macros from `#[no_link]` crates.\n+                if no_link {\n+                    self.creader.read_macros(vi);\n+                }\n                 return Vec::new();\n             }\n         }"}, {"sha": "9ed7be5af4e55fbd1cbf076827eb9baedea64b1c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=da5b6467c33f7f86b4964b08b37726f7611a8f0c", "patch": "@@ -267,7 +267,7 @@ impl<'b> Resolver<'b> {\n                     }\n \n                     self.populate_module_if_necessary(module);\n-                } else if custom_derive_crate {\n+                } else {\n                     // Define an empty module\n                     let def = Def::Mod(self.definitions.local_def_id(item.id));\n                     let module = ModuleS::new(Some(parent), ModuleKind::Def(def, name));"}, {"sha": "f563a1f88d000acdb8e534629d25935c92a8e951", "filename": "src/test/compile-fail-fulldeps/macro-crate-doesnt-resolve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs?ref=da5b6467c33f7f86b4964b08b37726f7611a8f0c", "patch": "@@ -14,6 +14,5 @@\n extern crate macro_crate_test;\n \n fn main() {\n-    macro_crate_test::foo();\n-    //~^ ERROR failed to resolve. Use of undeclared type or module `macro_crate_test`\n+    macro_crate_test::foo(); //~ ERROR unresolved name\n }"}, {"sha": "8e4692bdee19788f28fd642298e0ef11e1d757ac", "filename": "src/test/compile-fail-fulldeps/no-link-unknown-crate.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Ftest%2Fcompile-fail-fulldeps%2Fno-link-unknown-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Ftest%2Fcompile-fail-fulldeps%2Fno-link-unknown-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fno-link-unknown-crate.rs?ref=da5b6467c33f7f86b4964b08b37726f7611a8f0c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_use] #[no_link]\n+#[no_link]\n extern crate doesnt_exist; //~ ERROR can't find crate\n \n fn main() {}", "previous_filename": "src/test/compile-fail-fulldeps/macro-crate-unknown-crate.rs"}, {"sha": "8f6da99806b3b410581f8af8311ddfe2211fd1e1", "filename": "src/test/compile-fail/no-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Ftest%2Fcompile-fail%2Fno-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5b6467c33f7f86b4964b08b37726f7611a8f0c/src%2Ftest%2Fcompile-fail%2Fno-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-link.rs?ref=da5b6467c33f7f86b4964b08b37726f7611a8f0c", "patch": "@@ -13,6 +13,6 @@ extern crate libc;\n \n fn main() {\n     unsafe {\n-        libc::abs(0);  //~ ERROR Use of undeclared type or module `libc`\n+        libc::abs(0);  //~ ERROR unresolved name\n     }\n }"}]}