{"sha": "d0485c7986e0dac6ffd0207aba56467cb9378d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDg1Yzc5ODZlMGRhYzZmZmQwMjA3YWJhNTY0NjdjYjkzNzhkODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T15:06:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T15:06:43Z"}, "message": "Auto merge of #86520 - ssomers:btree_iterators_checked_unwrap, r=Mark-Simulacrum\n\nBTree: consistently avoid unwrap_unchecked in iterators\n\nSome iterator support functions named `_unchecked` internally use `unwrap`, some use `unwrap_unchecked`. This PR tries settling on `unwrap`. #86195 went up the same road but travelled way further and doesn't seem successful.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "ef3dd83981663d931ff5e140bcc582f539f6633f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef3dd83981663d931ff5e140bcc582f539f6633f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0485c7986e0dac6ffd0207aba56467cb9378d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0485c7986e0dac6ffd0207aba56467cb9378d85", "html_url": "https://github.com/rust-lang/rust/commit/d0485c7986e0dac6ffd0207aba56467cb9378d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0485c7986e0dac6ffd0207aba56467cb9378d85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0deb536ff987d7200f5ea35634781e9df9d5b666", "url": "https://api.github.com/repos/rust-lang/rust/commits/0deb536ff987d7200f5ea35634781e9df9d5b666", "html_url": "https://github.com/rust-lang/rust/commit/0deb536ff987d7200f5ea35634781e9df9d5b666"}, {"sha": "6a5b6450e7eae2adbc64b901f8356301a2815f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5b6450e7eae2adbc64b901f8356301a2815f92", "html_url": "https://github.com/rust-lang/rust/commit/6a5b6450e7eae2adbc64b901f8356301a2815f92"}], "stats": {"total": 34, "additions": 10, "deletions": 24}, "files": [{"sha": "bf3542b384d78715117c3094c2feae0ce41c7083", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d0485c7986e0dac6ffd0207aba56467cb9378d85/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0485c7986e0dac6ffd0207aba56467cb9378d85/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=d0485c7986e0dac6ffd0207aba56467cb9378d85", "patch": "@@ -47,14 +47,12 @@ impl<'a, K, V> LeafRange<marker::Immut<'a>, K, V> {\n \n     #[inline]\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n-        debug_assert!(self.front.is_some());\n-        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n+        unsafe { self.front.as_mut().unwrap().next_unchecked() }\n     }\n \n     #[inline]\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n-        debug_assert!(self.back.is_some());\n-        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n+        unsafe { self.back.as_mut().unwrap().next_back_unchecked() }\n     }\n }\n \n@@ -71,14 +69,12 @@ impl<'a, K, V> LeafRange<marker::ValMut<'a>, K, V> {\n \n     #[inline]\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        debug_assert!(self.front.is_some());\n-        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n+        unsafe { self.front.as_mut().unwrap().next_unchecked() }\n     }\n \n     #[inline]\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        debug_assert!(self.back.is_some());\n-        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n+        unsafe { self.back.as_mut().unwrap().next_back_unchecked() }\n     }\n }\n \n@@ -400,9 +396,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     /// There must be another KV in the direction travelled.\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n         super::mem::replace(self, |leaf_edge| {\n-            let kv = leaf_edge.next_kv();\n-            debug_assert!(kv.is_ok());\n-            let kv = unsafe { kv.ok().unwrap_unchecked() };\n+            let kv = leaf_edge.next_kv().ok().unwrap();\n             (kv.next_leaf_edge(), kv.into_kv())\n         })\n     }\n@@ -414,9 +408,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     /// There must be another KV in the direction travelled.\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n         super::mem::replace(self, |leaf_edge| {\n-            let kv = leaf_edge.next_back_kv();\n-            debug_assert!(kv.is_ok());\n-            let kv = unsafe { kv.ok().unwrap_unchecked() };\n+            let kv = leaf_edge.next_back_kv().ok().unwrap();\n             (kv.next_back_leaf_edge(), kv.into_kv())\n         })\n     }\n@@ -430,9 +422,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     /// There must be another KV in the direction travelled.\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let kv = super::mem::replace(self, |leaf_edge| {\n-            let kv = leaf_edge.next_kv();\n-            debug_assert!(kv.is_ok());\n-            let kv = unsafe { kv.ok().unwrap_unchecked() };\n+            let kv = leaf_edge.next_kv().ok().unwrap();\n             (unsafe { ptr::read(&kv) }.next_leaf_edge(), kv)\n         });\n         // Doing this last is faster, according to benchmarks.\n@@ -446,9 +436,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     /// There must be another KV in the direction travelled.\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let kv = super::mem::replace(self, |leaf_edge| {\n-            let kv = leaf_edge.next_back_kv();\n-            debug_assert!(kv.is_ok());\n-            let kv = unsafe { kv.ok().unwrap_unchecked() };\n+            let kv = leaf_edge.next_back_kv().ok().unwrap();\n             (unsafe { ptr::read(&kv) }.next_back_leaf_edge(), kv)\n         });\n         // Doing this last is faster, according to benchmarks.\n@@ -472,9 +460,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n     pub unsafe fn deallocating_next_unchecked(\n         &mut self,\n     ) -> Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV> {\n-        super::mem::replace(self, |leaf_edge| unsafe {\n-            leaf_edge.deallocating_next().unwrap_unchecked()\n-        })\n+        super::mem::replace(self, |leaf_edge| unsafe { leaf_edge.deallocating_next().unwrap() })\n     }\n \n     /// Moves the leaf edge handle to the previous leaf edge and returns the key and value\n@@ -493,7 +479,7 @@ impl<K, V> Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge> {\n         &mut self,\n     ) -> Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV> {\n         super::mem::replace(self, |leaf_edge| unsafe {\n-            leaf_edge.deallocating_next_back().unwrap_unchecked()\n+            leaf_edge.deallocating_next_back().unwrap()\n         })\n     }\n }"}]}