{"sha": "5150277a4f765bb113e163adc7eb495dcbb57129", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNTAyNzdhNGY3NjViYjExM2UxNjNhZGM3ZWI0OTVkY2JiNTcxMjk=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-31T22:37:21Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-03T23:50:45Z"}, "message": "Used clippy to clean itself", "tree": {"sha": "adf753e9d85761086736c38286b3e95a0090abfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adf753e9d85761086736c38286b3e95a0090abfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5150277a4f765bb113e163adc7eb495dcbb57129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5150277a4f765bb113e163adc7eb495dcbb57129", "html_url": "https://github.com/rust-lang/rust/commit/5150277a4f765bb113e163adc7eb495dcbb57129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5150277a4f765bb113e163adc7eb495dcbb57129/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e20475e47d3db1d32a7649a7c3a107caba32a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e20475e47d3db1d32a7649a7c3a107caba32a14", "html_url": "https://github.com/rust-lang/rust/commit/5e20475e47d3db1d32a7649a7c3a107caba32a14"}], "stats": {"total": 221, "additions": 67, "deletions": 154}, "files": [{"sha": "cfad9d79f2b75396bef8f35d64b88fef9fdbd893", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -481,15 +481,11 @@ fn is_relevant_trait(cx: &LateContext<'_>, item: &TraitItem<'_>) -> bool {\n }\n \n fn is_relevant_block(cx: &LateContext<'_>, tables: &ty::TypeckTables<'_>, block: &Block<'_>) -> bool {\n-    if let Some(stmt) = block.stmts.first() {\n-        match &stmt.kind {\n+    block.stmts.first().map_or(block.expr.as_ref().map_or(false, |e| is_relevant_expr(cx, tables, e)), |stmt| match &stmt.kind {\n             StmtKind::Local(_) => true,\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => is_relevant_expr(cx, tables, expr),\n             _ => false,\n-        }\n-    } else {\n-        block.expr.as_ref().map_or(false, |e| is_relevant_expr(cx, tables, e))\n-    }\n+        })\n }\n \n fn is_relevant_expr(cx: &LateContext<'_>, tables: &ty::TypeckTables<'_>, expr: &Expr<'_>) -> bool {\n@@ -499,11 +495,7 @@ fn is_relevant_expr(cx: &LateContext<'_>, tables: &ty::TypeckTables<'_>, expr: &\n         ExprKind::Ret(None) | ExprKind::Break(_, None) => false,\n         ExprKind::Call(path_expr, _) => {\n             if let ExprKind::Path(qpath) = &path_expr.kind {\n-                if let Some(fun_id) = tables.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n-                    !match_def_path(cx, fun_id, &paths::BEGIN_PANIC)\n-                } else {\n-                    true\n-                }\n+                tables.qpath_res(qpath, path_expr.hir_id).opt_def_id().map_or(true, |fun_id| !match_def_path(cx, fun_id, &paths::BEGIN_PANIC))\n             } else {\n                 true\n             }"}, {"sha": "7e44618e90eb11bf3be3c0f544f3b20dc451b568", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -135,13 +135,9 @@ impl<'tcx> Visitor<'tcx> for ArmVisitor<'_, 'tcx> {\n     }\n }\n \n-impl<'tcx> ArmVisitor<'_, 'tcx> {\n+impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n     fn same_mutex(&self, cx: &LateContext<'_>, op_mutex: &Expr<'_>) -> bool {\n-        if let Some(arm_mutex) = self.found_mutex {\n-            SpanlessEq::new(cx).eq_expr(op_mutex, arm_mutex)\n-        } else {\n-            false\n-        }\n+        self.found_mutex.map_or(false, |arm_mutex| SpanlessEq::new(cx).eq_expr(op_mutex, arm_mutex))\n     }\n }\n "}, {"sha": "f57fa830adcddf4d36dbfc88e7123e378f775671", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -303,14 +303,10 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = &walk_ptrs_ty(cx.tables().expr_ty(expr));\n     match ty.kind {\n         ty::Dynamic(ref tt, ..) => {\n-            if let Some(principal) = tt.principal() {\n-                cx.tcx\n+            tt.principal().map_or(false, |principal| cx.tcx\n                     .associated_items(principal.def_id())\n                     .in_definition_order()\n-                    .any(|item| is_is_empty(cx, &item))\n-            } else {\n-                false\n-            }\n+                    .any(|item| is_is_empty(cx, &item)))\n         },\n         ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),\n         ty::Adt(id, _) => has_is_empty_impl(cx, id.did),"}, {"sha": "ea2e23bd3a19e1751db541e80d284879dc40ac15", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -264,10 +264,11 @@ impl LiteralDigitGrouping {\n \n         let (part, mistyped_suffixes, missing_char) = if let Some((_, exponent)) = &mut num_lit.exponent {\n             (exponent, &[\"32\", \"64\"][..], 'f')\n-        } else if let Some(fraction) = &mut num_lit.fraction {\n-            (fraction, &[\"32\", \"64\"][..], 'f')\n         } else {\n-            (&mut num_lit.integer, &[\"8\", \"16\", \"32\", \"64\"][..], 'i')\n+            num_lit.fraction.as_mut().map_or(\n+                (&mut num_lit.integer, &[\"8\", \"16\", \"32\", \"64\"][..], 'i'),\n+                |fraction| (fraction, &[\"32\", \"64\"][..], 'f')\n+            )\n         };\n \n         let mut split = part.rsplit('_');"}, {"sha": "8d48f39a0454ad5ed045628599b6fb9fe530567c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -687,11 +687,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             }\n         },\n         ExprKind::Break(_, ref e) | ExprKind::Ret(ref e) => {\n-            if let Some(ref e) = *e {\n-                combine_seq(never_loop_expr(e, main_loop_id), NeverLoopResult::AlwaysBreak)\n-            } else {\n-                NeverLoopResult::AlwaysBreak\n-            }\n+            e.as_ref().map_or(NeverLoopResult::AlwaysBreak, |e| combine_seq(never_loop_expr(e, main_loop_id), NeverLoopResult::AlwaysBreak))\n         },\n         ExprKind::InlineAsm(ref asm) => asm\n             .operands\n@@ -1882,11 +1878,7 @@ fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.kind {\n         ty::Array(_, n) => {\n-            if let Some(val) = n.try_eval_usize(cx.tcx, cx.param_env) {\n-                (0..=32).contains(&val)\n-            } else {\n-                false\n-            }\n+            n.try_eval_usize(cx.tcx, cx.param_env).map_or(false, |val| (0..=32).contains(&val))\n         },\n         _ => false,\n     }\n@@ -1899,11 +1891,7 @@ fn extract_expr_from_first_stmt<'tcx>(block: &Block<'tcx>) -> Option<&'tcx Expr<\n         return None;\n     }\n     if let StmtKind::Local(ref local) = block.stmts[0].kind {\n-        if let Some(expr) = local.init {\n-            Some(expr)\n-        } else {\n-            None\n-        }\n+        local.init.map(|expr| expr)\n     } else {\n         None\n     }\n@@ -2023,15 +2011,11 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                 if let PatKind::Binding(.., ident, _) = local.pat.kind {\n                     self.name = Some(ident.name);\n \n-                    self.state = if let Some(ref init) = local.init {\n-                        if is_integer_const(&self.cx, init, 0) {\n+                    self.state = local.init.as_ref().map_or(VarState::Declared, |init| if is_integer_const(&self.cx, init, 0) {\n                             VarState::Warn\n                         } else {\n                             VarState::Declared\n-                        }\n-                    } else {\n-                        VarState::Declared\n-                    }\n+                        })\n                 }\n             }\n         }"}, {"sha": "ddad16e163e44ecf245f3a43995d60375888b09c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -2461,11 +2461,7 @@ fn derefs_to_slice<'tcx>(\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym!(vec_type)),\n             ty::Array(_, size) => {\n-                if let Some(size) = size.try_eval_usize(cx.tcx, cx.param_env) {\n-                    size < 32\n-                } else {\n-                    false\n-                }\n+                size.try_eval_usize(cx.tcx, cx.param_env).map_or(false, |size| size < 32)\n             },\n             ty::Ref(_, inner, _) => may_slice(cx, inner),\n             _ => false,"}, {"sha": "97909c97fc7287bcaa5a77195c6e6b3e591a6996", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -78,11 +78,7 @@ fn check_expression<'tcx>(cx: &LateContext<'tcx>, arg_id: hir::HirId, expr: &'tc\n             (true, true)\n         },\n         hir::ExprKind::Block(ref block, _) => {\n-            if let Some(expr) = &block.expr {\n-                check_expression(cx, arg_id, &expr)\n-            } else {\n-                (false, false)\n-            }\n+            block.expr.as_ref().map_or((false, false), |expr| check_expression(cx, arg_id, &expr))\n         },\n         hir::ExprKind::Match(_, arms, _) => {\n             let mut found_mapping = false;"}, {"sha": "a3d1a500aa7c9c6c0b7c8e5549e09689d582d9d7", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -86,16 +86,19 @@ fn fetch_const<'a>(cx: &LateContext<'_>, args: &'a [Expr<'a>], m: MinMax) -> Opt\n     if args.len() != 2 {\n         return None;\n     }\n-    if let Some(c) = constant_simple(cx, cx.tables(), &args[0]) {\n-        if constant_simple(cx, cx.tables(), &args[1]).is_none() {\n-            // otherwise ignore\n-            Some((m, c, &args[1]))\n+    constant_simple(cx, cx.tables, &args[0]).map_or_else(\n+        || if let Some(c) = constant_simple(cx, cx.tables(), &args[1]) {\n+            Some((m, c, &args[0]))\n         } else {\n             None\n+        },\n+        |c| {\n+            if constant_simple(cx, cx.tables, &args[1]).is_none() {\n+                // otherwise ignore\n+                Some((c, &args[1]))\n+            } else {\n+                None\n+            }\n         }\n-    } else if let Some(c) = constant_simple(cx, cx.tables(), &args[1]) {\n-        Some((m, c, &args[0]))\n-    } else {\n-        None\n-    }\n+    ).map(|(c, arg)| (m, c, arg))\n }"}, {"sha": "5b0f9d6e3ec38912c4a09ff0972ea0dc74ed1532", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -682,16 +682,12 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n /// `unused_variables`'s idea\n /// of what it means for an expression to be \"used\".\n fn is_used(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    if let Some(parent) = get_parent_expr(cx, expr) {\n-        match parent.kind {\n+    get_parent_expr(cx, expr).map_or(true, |parent| match parent.kind {\n             ExprKind::Assign(_, ref rhs, _) | ExprKind::AssignOp(_, _, ref rhs) => {\n                 SpanlessEq::new(cx).eq_expr(rhs, expr)\n             },\n             _ => is_used(cx, parent),\n-        }\n-    } else {\n-        true\n-    }\n+        })\n }\n \n /// Tests whether an expression is in a macro expansion (e.g., something"}, {"sha": "b6d08b8ae17a565bcc9da33a672961ca3c87372b", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -37,6 +37,7 @@ declare_clippy_lint! {\n     ///\n     /// ```rust\n     /// # let optional: Option<u32> = Some(0);\n+    /// # fn do_complicated_function() -> u32 { 5 };\n     /// let _ = if let Some(foo) = optional {\n     ///     foo\n     /// } else {\n@@ -54,9 +55,10 @@ declare_clippy_lint! {\n     ///\n     /// ```rust\n     /// # let optional: Option<u32> = Some(0);\n+    /// # fn do_complicated_function() -> u32 { 5 };\n     /// let _ = optional.map_or(5, |foo| foo);\n     /// let _ = optional.map_or_else(||{\n-    ///     let y = do_complicated_function;\n+    ///     let y = do_complicated_function();\n     ///     y*y\n     /// }, |foo| foo);\n     /// ```"}, {"sha": "4d54e3117faf494c07fa606f8bbf05fb7f2bdef3", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -259,15 +259,10 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n \n fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n     let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n-        if let Some(rpos) = fn_source.rfind(\"->\") {\n-            #[allow(clippy::cast_possible_truncation)]\n-            (\n+        fn_source.rfind(\"->\").map_or((ty.span, Applicability::MaybeIncorrect), |rpos| (\n                 ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n                 Applicability::MachineApplicable,\n-            )\n-        } else {\n-            (ty.span, Applicability::MaybeIncorrect)\n-        }\n+            ))\n     } else {\n         (ty.span, Applicability::MaybeIncorrect)\n     };"}, {"sha": "de94fb87147251ebf4d4fb61c223935be9d3aa64", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -164,15 +164,11 @@ fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &\n }\n \n fn is_binding(cx: &LateContext<'_>, pat_id: HirId) -> bool {\n-    let var_ty = cx.tables().node_type_opt(pat_id);\n-    if let Some(var_ty) = var_ty {\n-        match var_ty.kind {\n+    let var_ty = cx.tables.node_type_opt(pat_id);\n+    var_ty.map_or(false, |var_ty| match var_ty.kind {\n             ty::Adt(..) => false,\n             _ => true,\n-        }\n-    } else {\n-        false\n-    }\n+        })\n }\n \n fn check_pat<'tcx>("}, {"sha": "df87c1b9802545b013442693301015375a8e312c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -1205,16 +1205,14 @@ fn span_lossless_lint(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast\n     // has parens on the outside, they are no longer needed.\n     let mut applicability = Applicability::MachineApplicable;\n     let opt = snippet_opt(cx, op.span);\n-    let sugg = if let Some(ref snip) = opt {\n-        if should_strip_parens(op, snip) {\n+    let sugg = opt.as_ref().map_or_else(|| {\n+        applicability = Applicability::HasPlaceholders;\n+        \"..\"\n+    }, |snip| if should_strip_parens(op, snip) {\n             &snip[1..snip.len() - 1]\n         } else {\n             snip.as_str()\n-        }\n-    } else {\n-        applicability = Applicability::HasPlaceholders;\n-        \"..\"\n-    };\n+        });\n \n     span_lint_and_sugg(\n         cx,"}, {"sha": "eac7ae2358e8ce9cb90c6e400683c87324157853", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -167,14 +167,10 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.kind;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n-                let should_check = if let Some(ref params) = *parameters {\n-                    !params.parenthesized && !params.args.iter().any(|arg| match arg {\n+                let should_check = parameters.as_ref().map_or(true, |params| !params.parenthesized && !params.args.iter().any(|arg| match arg {\n                         GenericArg::Lifetime(_) => true,\n                         _ => false,\n-                    })\n-                } else {\n-                    true\n-                };\n+                    }));\n \n                 if should_check {\n                     let visitor = &mut UseSelfVisitor {"}, {"sha": "2d72f9c3fe1724320634ee7af02a9f514ae3cc88", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -65,17 +65,18 @@ pub fn get_attr<'a>(\n         };\n         let attr_segments = &attr.path.segments;\n         if attr_segments.len() == 2 && attr_segments[0].ident.to_string() == \"clippy\" {\n-            if let Some(deprecation_status) =\n-                BUILTIN_ATTRIBUTES\n+            BUILTIN_ATTRIBUTES\n                     .iter()\n                     .find_map(|(builtin_name, deprecation_status)| {\n                         if *builtin_name == attr_segments[1].ident.to_string() {\n                             Some(deprecation_status)\n                         } else {\n                             None\n                         }\n-                    })\n-            {\n+                    }).map_or_else(|| {\n+                sess.span_err(attr_segments[1].ident.span, \"Usage of unknown attribute\");\n+                false\n+            }, |deprecation_status| {\n                 let mut diag = sess.struct_span_err(attr_segments[1].ident.span, \"Usage of deprecated attribute\");\n                 match *deprecation_status {\n                     DeprecationStatus::Deprecated => {\n@@ -97,10 +98,7 @@ pub fn get_attr<'a>(\n                         attr_segments[1].ident.to_string() == name\n                     },\n                 }\n-            } else {\n-                sess.span_err(attr_segments[1].ident.span, \"Usage of unknown attribute\");\n-                false\n-            }\n+            })\n         } else {\n             false\n         }"}, {"sha": "6f23e968006846cc737c971e694226894d9c5252", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -153,11 +153,7 @@ pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symb\n pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str]) -> bool {\n     let def_id = cx.tables().type_dependent_def_id(expr.hir_id).unwrap();\n     let trt_id = cx.tcx.trait_of_item(def_id);\n-    if let Some(trt_id) = trt_id {\n-        match_def_path(cx, trt_id, path)\n-    } else {\n-        false\n-    }\n+    trt_id.map_or(false, |trt_id| match_def_path(cx, trt_id, path))\n }\n \n /// Checks if an expression references a variable of the given name.\n@@ -600,21 +596,13 @@ pub fn snippet_block_with_applicability<'a, T: LintContext>(\n /// //  ^^^^^^^^^^\n /// ```\n pub fn first_line_of_span<T: LintContext>(cx: &T, span: Span) -> Span {\n-    if let Some(first_char_pos) = first_char_in_first_line(cx, span) {\n-        span.with_lo(first_char_pos)\n-    } else {\n-        span\n-    }\n+    first_char_in_first_line(cx, span).map_or(span, |first_char_pos| span.with_lo(first_char_pos))\n }\n \n fn first_char_in_first_line<T: LintContext>(cx: &T, span: Span) -> Option<BytePos> {\n     let line_span = line_span(cx, span);\n-    if let Some(snip) = snippet_opt(cx, line_span) {\n-        snip.find(|c: char| !c.is_whitespace())\n-            .map(|pos| line_span.lo() + BytePos::from_usize(pos))\n-    } else {\n-        None\n-    }\n+    snippet_opt(cx, line_span).and_then(|snip| snip.find(|c: char| !c.is_whitespace())\n+            .map(|pos| line_span.lo() + BytePos::from_usize(pos)))\n }\n \n /// Returns the indentation of the line of a span\n@@ -626,11 +614,7 @@ fn first_char_in_first_line<T: LintContext>(cx: &T, span: Span) -> Option<BytePo\n /// //          ^^ -- will return 4\n /// ```\n pub fn indent_of<T: LintContext>(cx: &T, span: Span) -> Option<usize> {\n-    if let Some(snip) = snippet_opt(cx, line_span(cx, span)) {\n-        snip.find(|c: char| !c.is_whitespace())\n-    } else {\n-        None\n-    }\n+    snippet_opt(cx, line_span(cx, span)).and_then(|snip| snip.find(|c: char| !c.is_whitespace()))\n }\n \n /// Extends the span to the beginning of the spans line, incl. whitespaces.\n@@ -738,8 +722,7 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n     let enclosing_node = map\n         .get_enclosing_scope(hir_id)\n         .and_then(|enclosing_id| map.find(enclosing_id));\n-    if let Some(node) = enclosing_node {\n-        match node {\n+    enclosing_node.and_then(|node| match node {\n             Node::Block(block) => Some(block),\n             Node::Item(&Item {\n                 kind: ItemKind::Fn(_, _, eid),\n@@ -753,10 +736,7 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n                 _ => None,\n             },\n             _ => None,\n-        }\n-    } else {\n-        None\n-    }\n+        })\n }\n \n /// Returns the base type for HIR references and pointers.\n@@ -1328,11 +1308,7 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         _ => None,\n     };\n \n-    if let Some(did) = did {\n-        must_use_attr(&cx.tcx.get_attrs(did)).is_some()\n-    } else {\n-        false\n-    }\n+    did.map_or(false, |did| must_use_attr(&cx.tcx.get_attrs(did)).is_some())\n }\n \n pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {"}, {"sha": "7a79741b30bd09a9e992d003a4573c1b2247ba97", "filename": "clippy_lints/src/utils/numeric_literal.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -200,12 +200,10 @@ impl<'a> NumericLiteral<'a> {\n \n fn split_suffix<'a>(src: &'a str, lit_kind: &LitKind) -> (&'a str, Option<&'a str>) {\n     debug_assert!(lit_kind.is_numeric());\n-    if let Some(suffix_length) = lit_suffix_length(lit_kind) {\n+    lit_suffix_length(lit_kind).map_or((src, None), |suffix_length| {\n         let (unsuffixed, suffix) = src.split_at(src.len() - suffix_length);\n         (unsuffixed, Some(suffix))\n-    } else {\n-        (src, None)\n-    }\n+    })\n }\n \n fn lit_suffix_length(lit_kind: &LitKind) -> Option<usize> {"}, {"sha": "20bea3cbabe64824fd6d17d6cc440c8bde426810", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -492,8 +492,7 @@ fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n /// before it on its line.\n fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n     let lo = cx.sess().source_map().lookup_char_pos(span.lo());\n-    if let Some(line) = lo.file.get_line(lo.line - 1 /* line numbers in `Loc` are 1-based */) {\n-        if let Some((pos, _)) = line.char_indices().find(|&(_, c)| c != ' ' && c != '\\t') {\n+    lo.file.get_line(lo.line - 1 /* line numbers in `Loc` are 1-based */).and_then(|line| if let Some((pos, _)) = line.char_indices().find(|&(_, c)| c != ' ' && c != '\\t') {\n             // We can mix char and byte positions here because we only consider `[ \\t]`.\n             if lo.col == CharPos(pos) {\n                 Some(line[..pos].into())\n@@ -502,10 +501,7 @@ fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n             }\n         } else {\n             None\n-        }\n-    } else {\n-        None\n-    }\n+        })\n }\n \n /// Convenience extension trait for `DiagnosticBuilder`."}, {"sha": "3b10b7b82a089c335315789edc8681bb19182964", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150277a4f765bb113e163adc7eb495dcbb57129/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=5150277a4f765bb113e163adc7eb495dcbb57129", "patch": "@@ -297,12 +297,10 @@ impl EarlyLintPass for Write {\n             if let (Some(fmt_str), expr) = self.check_tts(cx, &mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     let mut applicability = Applicability::MachineApplicable;\n-                    let suggestion = if let Some(e) = expr {\n-                        snippet_with_applicability(cx, e.span, \"v\", &mut applicability)\n-                    } else {\n+                    let suggestion = expr.map_or_else(|| {\n                         applicability = Applicability::HasPlaceholders;\n                         Cow::Borrowed(\"v\")\n-                    };\n+                    }, |e| snippet_with_applicability(cx, e.span, \"v\", &mut Applicability::MachineApplicable));\n \n                     span_lint_and_sugg(\n                         cx,"}]}