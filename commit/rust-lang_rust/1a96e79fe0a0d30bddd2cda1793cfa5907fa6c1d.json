{"sha": "1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOTZlNzlmZTBhMGQzMGJkZGQyY2RhMTc5M2NmYTU5MDdmYTZjMWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-27T03:14:00Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-27T03:50:25Z"}, "message": "Make _|_ unify with anything\n\nThe typechecker had a number of special cases for unifying types\nwith _|_ (as with checking if and alt). But, a value of type _|_\nshould be usable in any context, as such a value always diverges,\nand will never be used by its immediate context. Changed unify\naccordingly, removed special cases.", "tree": {"sha": "f603a455f8e905ce7244b20f37bab44bff1a0aea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f603a455f8e905ce7244b20f37bab44bff1a0aea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "html_url": "https://github.com/rust-lang/rust/commit/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af6b4821c163e5ad22868a270541dc0b7a04534f", "url": "https://api.github.com/repos/rust-lang/rust/commits/af6b4821c163e5ad22868a270541dc0b7a04534f", "html_url": "https://github.com/rust-lang/rust/commit/af6b4821c163e5ad22868a270541dc0b7a04534f"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "56f8ca66c2ffb270c2fccec93f14b1b212cc4a29", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "patch": "@@ -2209,6 +2209,12 @@ mod unify {\n         if (eq_ty(expected, actual)) { ret ures_ok(expected); }\n \n         alt (struct(cx.tcx, actual)) {\n+\n+            // a _|_ type can be used anywhere\n+            case (ty::ty_bot) {\n+                ret ures_ok(expected);\n+            }\n+       \n             // If the RHS is a variable type, then just do the appropriate\n             // binding.\n             case (ty::ty_var(?actual_id)) {"}, {"sha": "47585b4bb7348fd8435fbe27cc5625f996dff8ad", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "patch": "@@ -1341,17 +1341,13 @@ mod pushdown {\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n \n                 auto then_t = ty::block_ty(scx.fcx.ccx.tcx, then_0);\n-                if (!ty::type_is_bot(scx.fcx.ccx.tcx, then_t)) {\n-                    pushdown_block(scx, expected, then_0);\n-                }\n+                pushdown_block(scx, expected, then_0);\n \n                 alt (else_0) {\n                     case (none[@ast::expr]) { /* no-op */ }\n                     case (some[@ast::expr](?e_0)) {\n                         auto else_t = ty::expr_ty(scx.fcx.ccx.tcx, e_0);\n-                        if (!ty::type_is_bot(scx.fcx.ccx.tcx, else_t)) {\n-                            pushdown_expr(scx, expected, e_0);\n-                        }\n+                        pushdown_expr(scx, expected, e_0);\n                     }\n                 }\n                 write::ty_only_fixup(scx, ann.id, t);\n@@ -1472,10 +1468,7 @@ mod pushdown {\n                 for (ast::arm arm_0 in arms_0) {\n                     pushdown_block(scx, expected, arm_0.block);\n                     auto bty = block_ty(scx.fcx.ccx.tcx, arm_0.block);\n-                    // Failing alt arms don't need to have a matching type\n-                    if (!ty::type_is_bot(scx.fcx.ccx.tcx, bty)) {\n-                        t = demand::simple(scx, e.span, t, bty);\n-                    }\n+                    t = demand::simple(scx, e.span, t, bty);\n                 }\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n@@ -2245,8 +2238,6 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n \n             pushdown::pushdown_expr(scx, pattern_ty, expr);\n \n-            // FIXME: If all the the arms were ty_bot then the result should\n-            // also be ty_bot. At the moment this doesn't seem to matter\n             write::ty_only_fixup(scx, a.id, result_ty);\n         }\n "}, {"sha": "b580f5a2b0ecf8748eaf10f8e084b0785df6a799", "filename": "src/test/run-fail/alt-bot-fail.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs?ref=1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "patch": "@@ -0,0 +1,21 @@\n+// xfail-stage0\n+// xfail-stage1\n+// xfail-stage2\n+// xfail-stage3\n+use std;\n+import std::option::*;\n+\n+fn foo(str s) {\n+}\n+\n+fn main() {\n+  auto i = alt (some[int](3)) {\n+    case (none[int]) {\n+      fail\n+    }\n+    case (some[int](_)) {\n+      fail\n+    }\n+  };\n+  foo(i);\n+}\n\\ No newline at end of file"}, {"sha": "6be748da3c7488fd00e7a49d85399905e8854c53", "filename": "src/test/run-pass/alt-bot.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Ftest%2Frun-pass%2Falt-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Ftest%2Frun-pass%2Falt-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot.rs?ref=1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "patch": "@@ -0,0 +1,15 @@\n+// xfail-stage0\n+use std;\n+import std::option::*;\n+\n+fn main() {\n+  let int i = alt (some[int](3)) {\n+    case (none[int]) {\n+      fail\n+    }\n+    case (some[int](_)) {\n+      5\n+    }\n+  };\n+  log i;\n+}\n\\ No newline at end of file"}, {"sha": "6545eedfc853ced9594e9a0cf924985003024353", "filename": "src/test/run-pass/if-bot.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=1a96e79fe0a0d30bddd2cda1793cfa5907fa6c1d", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+  let int i = if (false) {\n+    fail\n+  }\n+  else {\n+    5\n+      };\n+  log i;\n+}\n\\ No newline at end of file"}]}