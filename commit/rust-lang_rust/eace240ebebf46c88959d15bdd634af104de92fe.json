{"sha": "eace240ebebf46c88959d15bdd634af104de92fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhY2UyNDBlYmViZjQ2Yzg4OTU5ZDE1YmRkNjM0YWYxMDRkZTkyZmU=", "commit": {"author": {"name": "Henry Boisdequin", "email": "65845077+henryboisdequin@users.noreply.github.com", "date": "2021-02-14T09:09:24Z"}, "committer": {"name": "Henry Boisdequin", "email": "65845077+henryboisdequin@users.noreply.github.com", "date": "2021-02-14T09:09:24Z"}, "message": "use option<PlaceRef<'tcx>> to clean up mir code a little", "tree": {"sha": "820c60df1eda3478fc5a97dac0751d8b6b0c2d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/820c60df1eda3478fc5a97dac0751d8b6b0c2d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eace240ebebf46c88959d15bdd634af104de92fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eace240ebebf46c88959d15bdd634af104de92fe", "html_url": "https://github.com/rust-lang/rust/commit/eace240ebebf46c88959d15bdd634af104de92fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eace240ebebf46c88959d15bdd634af104de92fe/comments", "author": {"login": "henryboisdequin", "id": 65845077, "node_id": "MDQ6VXNlcjY1ODQ1MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/65845077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryboisdequin", "html_url": "https://github.com/henryboisdequin", "followers_url": "https://api.github.com/users/henryboisdequin/followers", "following_url": "https://api.github.com/users/henryboisdequin/following{/other_user}", "gists_url": "https://api.github.com/users/henryboisdequin/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryboisdequin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryboisdequin/subscriptions", "organizations_url": "https://api.github.com/users/henryboisdequin/orgs", "repos_url": "https://api.github.com/users/henryboisdequin/repos", "events_url": "https://api.github.com/users/henryboisdequin/events{/privacy}", "received_events_url": "https://api.github.com/users/henryboisdequin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "henryboisdequin", "id": 65845077, "node_id": "MDQ6VXNlcjY1ODQ1MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/65845077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryboisdequin", "html_url": "https://github.com/henryboisdequin", "followers_url": "https://api.github.com/users/henryboisdequin/followers", "following_url": "https://api.github.com/users/henryboisdequin/following{/other_user}", "gists_url": "https://api.github.com/users/henryboisdequin/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryboisdequin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryboisdequin/subscriptions", "organizations_url": "https://api.github.com/users/henryboisdequin/orgs", "repos_url": "https://api.github.com/users/henryboisdequin/repos", "events_url": "https://api.github.com/users/henryboisdequin/events{/privacy}", "received_events_url": "https://api.github.com/users/henryboisdequin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1279b3b9232e4c44112d98f19cfa8846776d1fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1279b3b9232e4c44112d98f19cfa8846776d1fe8", "html_url": "https://github.com/rust-lang/rust/commit/1279b3b9232e4c44112d98f19cfa8846776d1fe8"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "718e81c84edddbbdef8bc0c3a465c62812e76cfc", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eace240ebebf46c88959d15bdd634af104de92fe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eace240ebebf46c88959d15bdd634af104de92fe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=eace240ebebf46c88959d15bdd634af104de92fe", "patch": "@@ -962,8 +962,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                     opt_ty_info: _,\n                     opt_match_place: _,\n                     pat_span: _,\n-                })\n-                | BindingForm::ImplicitSelf(ImplicitSelfKind::Imm),\n+                }) | BindingForm::ImplicitSelf(ImplicitSelfKind::Imm),\n             )))\n         )\n     }\n@@ -980,8 +979,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                     opt_ty_info: _,\n                     opt_match_place: _,\n                     pat_span: _,\n-                })\n-                | BindingForm::ImplicitSelf(_),\n+                }) | BindingForm::ImplicitSelf(_),\n             )))\n         )\n     }"}, {"sha": "d8e325f1da7e90dd764e01187eb9f61631c61165", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eace240ebebf46c88959d15bdd634af104de92fe/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eace240ebebf46c88959d15bdd634af104de92fe/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=eace240ebebf46c88959d15bdd634af104de92fe", "patch": "@@ -492,7 +492,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         // Special-case reborrows to be more like a copy of a reference.\n         match *rvalue {\n             Rvalue::Ref(_, kind, place) => {\n-                if let Some(reborrowed_proj) = place_as_reborrow(self.tcx, self.body, place) {\n+                if let Some(place_ref) = place_as_reborrow(self.tcx, self.body, place) {\n                     let ctx = match kind {\n                         BorrowKind::Shared => {\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow)\n@@ -508,20 +508,20 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                         }\n                     };\n                     self.visit_local(&place.local, ctx, location);\n-                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n+                    self.visit_projection(place.local, place_ref.projection, ctx, location);\n                     return;\n                 }\n             }\n             Rvalue::AddressOf(mutbl, place) => {\n-                if let Some(reborrowed_proj) = place_as_reborrow(self.tcx, self.body, place) {\n+                if let Some(place_ref) = place_as_reborrow(self.tcx, self.body, place) {\n                     let ctx = match mutbl {\n                         Mutability::Not => {\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)\n                         }\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n                     self.visit_local(&place.local, ctx, location);\n-                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n+                    self.visit_projection(place.local, place_ref.projection, ctx, location);\n                     return;\n                 }\n             }\n@@ -1016,7 +1016,7 @@ fn place_as_reborrow(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     place: Place<'tcx>,\n-) -> Option<&'a [PlaceElem<'tcx>]> {\n+) -> Option<PlaceRef<'tcx>> {\n     match place.as_ref().last_projection() {\n         Some((place_base, ProjectionElem::Deref)) => {\n             // A borrow of a `static` also looks like `&(*_1)` in the MIR, but `_1` is a `const`\n@@ -1025,13 +1025,14 @@ fn place_as_reborrow(\n                 None\n             } else {\n                 // Ensure the type being derefed is a reference and not a raw pointer.\n-                //\n                 // This is sufficient to prevent an access to a `static mut` from being marked as a\n                 // reborrow, even if the check above were to disappear.\n                 let inner_ty = place_base.ty(body, tcx).ty;\n-                match inner_ty.kind() {\n-                    ty::Ref(..) => Some(place_base.projection),\n-                    _ => None,\n+\n+                if let ty::Ref(..) = inner_ty.kind() {\n+                    return Some(place_base);\n+                } else {\n+                    return None;\n                 }\n             }\n         }"}]}