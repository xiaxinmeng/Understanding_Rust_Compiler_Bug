{"sha": "93e6c26dcf557e4411eb033f0dd8f96401c879c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTZjMjZkY2Y1NTdlNDQxMWViMDMzZjBkZDhmOTY0MDFjODc5YzY=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T17:06:00Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T17:06:00Z"}, "message": "update array_vec to use new rangeargument", "tree": {"sha": "06b6f248be56a841e9ec9ba0614e1c51501dd139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b6f248be56a841e9ec9ba0614e1c51501dd139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e6c26dcf557e4411eb033f0dd8f96401c879c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e6c26dcf557e4411eb033f0dd8f96401c879c6", "html_url": "https://github.com/rust-lang/rust/commit/93e6c26dcf557e4411eb033f0dd8f96401c879c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e6c26dcf557e4411eb033f0dd8f96401c879c6/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4920721f6c25e5e5e5330617e75be4be046e144b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4920721f6c25e5e5e5330617e75be4be046e144b", "html_url": "https://github.com/rust-lang/rust/commit/4920721f6c25e5e5e5330617e75be4be046e144b"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "9baaa44a3704c0567b6273aa716c2a9ef1dd9ea1", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93e6c26dcf557e4411eb033f0dd8f96401c879c6/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e6c26dcf557e4411eb033f0dd8f96401c879c6/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=93e6c26dcf557e4411eb033f0dd8f96401c879c6", "patch": "@@ -119,8 +119,16 @@ impl<A: Array> ArrayVec<A> {\n         // the hole, and the vector length is restored to the new length.\n         //\n         let len = self.len();\n-        let start = *range.start().unwrap_or(&0);\n-        let end = *range.end().unwrap_or(&len);\n+        let start = match range.start() {\n+            Included(&n) => n,\n+            Excluded(&n) => n + 1,\n+            Unbounded    => 0,\n+        };\n+        let end = match range.end() {\n+            Included(&n) => n + 1,\n+            Excluded(&n) => n,\n+            Unbounded    => len,\n+        };\n         assert!(start <= end);\n         assert!(end <= len);\n "}]}