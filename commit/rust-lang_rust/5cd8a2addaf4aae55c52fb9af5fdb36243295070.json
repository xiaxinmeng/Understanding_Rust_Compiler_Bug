{"sha": "5cd8a2addaf4aae55c52fb9af5fdb36243295070", "node_id": "C_kwDOAAsO6NoAKDVjZDhhMmFkZGFmNGFhZTU1YzUyZmI5YWY1ZmRiMzYyNDMyOTUwNzA", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-10T15:19:33Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-10T16:04:05Z"}, "message": "debuginfo: Fix bug in type name generation for dyn types with associated types but no other generic arguments.", "tree": {"sha": "1dcac222d5e2070f97744a1d579f8a358028e926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dcac222d5e2070f97744a1d579f8a358028e926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cd8a2addaf4aae55c52fb9af5fdb36243295070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd8a2addaf4aae55c52fb9af5fdb36243295070", "html_url": "https://github.com/rust-lang/rust/commit/5cd8a2addaf4aae55c52fb9af5fdb36243295070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cd8a2addaf4aae55c52fb9af5fdb36243295070/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282778aee26166754315815552bae454fc968960", "url": "https://api.github.com/repos/rust-lang/rust/commits/282778aee26166754315815552bae454fc968960", "html_url": "https://github.com/rust-lang/rust/commit/282778aee26166754315815552bae454fc968960"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "93df1ec9aac7eedd23718791073f8597f53e74eb", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5cd8a2addaf4aae55c52fb9af5fdb36243295070/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd8a2addaf4aae55c52fb9af5fdb36243295070/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=5cd8a2addaf4aae55c52fb9af5fdb36243295070", "patch": "@@ -212,13 +212,18 @@ fn push_debuginfo_type_name<'tcx>(\n                 if projection_bounds.len() != 0 {\n                     if principal_has_generic_params {\n                         // push_generic_params_internal() above added a `>` but we actually\n-                        // want to add more items to that list, so remove that again.\n+                        // want to add more items to that list, so remove that again...\n                         pop_close_angle_bracket(output);\n+                        // .. and add a comma to separate the regular generic args from the\n+                        // associated types.\n+                        push_arg_separator(cpp_like_debuginfo, output);\n+                    } else {\n+                        // push_generic_params_internal() did not add `<...>`, so we open\n+                        // angle brackets here.\n+                        output.push('<');\n                     }\n \n                     for (item_def_id, ty) in projection_bounds {\n-                        push_arg_separator(cpp_like_debuginfo, output);\n-\n                         if cpp_like_debuginfo {\n                             output.push_str(\"assoc$<\");\n                             push_item_name(tcx, item_def_id, false, output);\n@@ -230,8 +235,10 @@ fn push_debuginfo_type_name<'tcx>(\n                             output.push('=');\n                             push_debuginfo_type_name(tcx, ty, true, output, visited);\n                         }\n+                        push_arg_separator(cpp_like_debuginfo, output);\n                     }\n \n+                    pop_arg_separator(output);\n                     push_close_angle_bracket(cpp_like_debuginfo, output);\n                 }\n "}, {"sha": "e6ec6ef62b88693cb50fabd263432f0b47618c77", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5cd8a2addaf4aae55c52fb9af5fdb36243295070/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd8a2addaf4aae55c52fb9af5fdb36243295070/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=5cd8a2addaf4aae55c52fb9af5fdb36243295070", "patch": "@@ -122,6 +122,9 @@\n // gdb-command:whatis has_associated_type_trait\n // gdb-check:type = &(dyn type_names::Trait3<u32, AssocType=isize> + core::marker::Send)\n \n+// gdb-command:whatis has_associated_type_but_no_generics_trait\n+// gdb-check:type = &dyn type_names::TraitNoGenericsButWithAssocType<Output=isize>\n+\n // BARE FUNCTIONS\n // gdb-command:whatis rust_fn\n // gdb-check:type = (fn(core::option::Option<isize>, core::option::Option<&type_names::mod1::Struct2>), usize)\n@@ -228,6 +231,7 @@\n // cdb-check:struct ref_mut$<dyn$<type_names::Trait1> > mut_ref_trait = [...]\n // cdb-check:struct alloc::boxed::Box<dyn$<core::marker::Send,core::marker::Sync>,alloc::alloc::Global> no_principal_trait = [...]\n // cdb-check:struct ref$<dyn$<type_names::Trait3<u32,assoc$<AssocType,isize> >,core::marker::Send> > has_associated_type_trait = struct ref$<dyn$<type_names::Trait3<u32,assoc$<AssocType,isize> >,core::marker::Send> >\n+// cdb-check:struct ref$<dyn$<type_names::TraitNoGenericsButWithAssocType<assoc$<Output,isize> > > > has_associated_type_but_no_generics_trait = struct ref$<dyn$<type_names::TraitNoGenericsButWithAssocType<assoc$<Output,isize> > > >\n \n // BARE FUNCTIONS\n // cdb-command:dv /t *_fn*\n@@ -318,12 +322,22 @@ trait Trait3<T> {\n         panic!()\n     }\n }\n+trait TraitNoGenericsButWithAssocType {\n+    type Output;\n+    fn foo(&self) -> Self::Output;\n+}\n \n impl Trait1 for isize {}\n impl<T1, T2> Trait2<T1, T2> for isize {}\n impl<T> Trait3<T> for isize {\n     type AssocType = isize;\n }\n+impl TraitNoGenericsButWithAssocType for isize {\n+    type Output = isize;\n+    fn foo(&self) -> Self::Output {\n+        *self\n+    }\n+}\n \n fn rust_fn(_: Option<isize>, _: Option<&mod1::Struct2>) {}\n extern \"C\" fn extern_c_fn(_: isize) {}\n@@ -414,6 +428,8 @@ fn main() {\n     let mut_ref_trait = (&mut mut_int1) as &mut dyn Trait1;\n     let no_principal_trait = Box::new(0_isize) as Box<(dyn Send + Sync)>;\n     let has_associated_type_trait = &0_isize as &(dyn Trait3<u32, AssocType = isize> + Send);\n+    let has_associated_type_but_no_generics_trait =\n+        &0_isize as &dyn TraitNoGenericsButWithAssocType<Output = isize>;\n \n     let generic_box_trait = Box::new(0_isize) as Box<dyn Trait2<i32, mod1::Struct2>>;\n     let generic_ref_trait = (&0_isize) as &dyn Trait2<Struct1, Struct1>;"}]}