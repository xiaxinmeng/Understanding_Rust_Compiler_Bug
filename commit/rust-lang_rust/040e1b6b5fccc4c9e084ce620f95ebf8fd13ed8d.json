{"sha": "040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d", "node_id": "C_kwDOAAsO6NoAKDA0MGUxYjZiNWZjY2M0YzllMDg0Y2U2MjBmOTVlYmY4ZmQxM2VkOGQ", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-04-25T00:04:26Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-04-25T15:17:18Z"}, "message": "Fix ICE on --print=... i/o errors", "tree": {"sha": "5e1f69c46b8c1b9b54b287a6133c2b8a2900f0fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e1f69c46b8c1b9b54b287a6133c2b8a2900f0fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmRH7v4ACgkQ+boUO5X/\nbYJ9FQ/+M6w02eXj3zz7vt5uhe2y7qS3G+nw19v/ESoAQI82EIxTx26CdZ/v6Vtj\nUia27ChYv00fo0lsLkInlB59wijGhpjBnzpIw6hoAJyRAeZ7egYNZWo/sz624OUz\nK0+E8fv45gTYdHR3LV2QvGdIf/4tvm3I1g8mr4XhlylI1DjycnJvrzTnNmdtQQ44\njynMiAdV6ffpBDSB9M63eN7tTdLHk6/VO9Z5e/jPipXgMl//CeAa2HX6eEjgxkL5\nvrJQBpYEdL3unpA3z8LVcXUIIajVoTBQi8Rgm9qP+h4WYFTS0ictUCki4XAENQqA\niW+t9zczGbiI+95Hkq8JwcRGnnlusrO5MQ0gkNPYYOq9RoIugRoGrp+Z3dtW5D1g\nyt+0yuBRsjv4D7tkm1ReZuLf3lCICrw5yjfZpi5N7oQbzOAsj7fAQ46RJy5Z/MVU\nggcEnSNVAnmdvc8mGih3s2Ybs9/4aNmJL2XtLK7NRBeeUkEkFUjUBTh0gpA8jmub\nHwblq7vM55cUx+/pEzb/ns13Rkjo6hYOOXyE2NCmP+RegNVjoahXSxmBXdt6k4Jv\n5s8kctKgxWwv6aVkYDPvDeZxiSBCo0JdNBL7QZKiKtBwoTkSurF2n6cJdDAvRGIq\n0+L1rGwihO3My3i4/qIa5WjgRm9ERLW6abP9abMpCYbkqK6qNGA=\n=PhWP\n-----END PGP SIGNATURE-----", "payload": "tree 5e1f69c46b8c1b9b54b287a6133c2b8a2900f0fe\nparent 521de433f4b520c77f7e6ec9e68291d09028918c\nauthor David Tolnay <dtolnay@gmail.com> 1682381066 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1682435838 -0700\n\nFix ICE on --print=... i/o errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d", "html_url": "https://github.com/rust-lang/rust/commit/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "521de433f4b520c77f7e6ec9e68291d09028918c", "url": "https://api.github.com/repos/rust-lang/rust/commits/521de433f4b520c77f7e6ec9e68291d09028918c", "html_url": "https://github.com/rust-lang/rust/commit/521de433f4b520c77f7e6ec9e68291d09028918c"}], "stats": {"total": 108, "additions": 68, "deletions": 40}, "files": [{"sha": "5fac485de6417dd5c41e73460a3652333a9cfa67", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d", "patch": "@@ -58,8 +58,16 @@ use std::str;\n use std::sync::LazyLock;\n use std::time::Instant;\n \n+// This import blocks the use of panicking `print` and `println` in all the code\n+// below. Please use `safe_print` and `safe_println` to avoid ICE when\n+// encountering an I/O error during print.\n+#[allow(unused_imports)]\n+use std::{compile_error as print, compile_error as println};\n+\n pub mod args;\n pub mod pretty;\n+#[macro_use]\n+mod print;\n mod session_diagnostics;\n \n use crate::session_diagnostics::{\n@@ -511,7 +519,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n             if io::stdout().is_terminal() {\n                 show_content_with_pager(&text);\n             } else {\n-                print!(\"{text}\");\n+                safe_print!(\"{text}\");\n             }\n         }\n         Err(InvalidErrorCode) => {\n@@ -547,7 +555,7 @@ fn show_content_with_pager(content: &str) {\n     // If pager fails for whatever reason, we should still print the content\n     // to standard output\n     if fallback_to_println {\n-        print!(\"{content}\");\n+        safe_print!(\"{content}\");\n     }\n }\n \n@@ -601,7 +609,7 @@ pub fn list_metadata(sess: &Session, metadata_loader: &dyn MetadataLoader) -> Co\n                 let path = &(*ifile);\n                 let mut v = Vec::new();\n                 locator::list_file_metadata(&sess.target, path, metadata_loader, &mut v).unwrap();\n-                println!(\"{}\", String::from_utf8(v).unwrap());\n+                safe_println!(\"{}\", String::from_utf8(v).unwrap());\n             }\n             Input::Str { .. } => {\n                 early_error(ErrorOutputType::default(), \"cannot list metadata for stdin\");\n@@ -642,12 +650,12 @@ fn print_crate_info(\n             TargetList => {\n                 let mut targets = rustc_target::spec::TARGETS.to_vec();\n                 targets.sort_unstable();\n-                println!(\"{}\", targets.join(\"\\n\"));\n+                safe_println!(\"{}\", targets.join(\"\\n\"));\n             }\n-            Sysroot => println!(\"{}\", sess.sysroot.display()),\n-            TargetLibdir => println!(\"{}\", sess.target_tlib_path.dir.display()),\n+            Sysroot => safe_println!(\"{}\", sess.sysroot.display()),\n+            TargetLibdir => safe_println!(\"{}\", sess.target_tlib_path.dir.display()),\n             TargetSpec => {\n-                println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n+                safe_println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n             }\n             AllTargetSpecs => {\n                 let mut targets = BTreeMap::new();\n@@ -656,7 +664,7 @@ fn print_crate_info(\n                     let target = Target::expect_builtin(&triple);\n                     targets.insert(name, target.to_json());\n                 }\n-                println!(\"{}\", serde_json::to_string_pretty(&targets).unwrap());\n+                safe_println!(\"{}\", serde_json::to_string_pretty(&targets).unwrap());\n             }\n             FileNames | CrateName => {\n                 let Some(attrs) = attrs.as_ref() else {\n@@ -666,14 +674,14 @@ fn print_crate_info(\n                 let t_outputs = rustc_interface::util::build_output_filenames(attrs, sess);\n                 let id = rustc_session::output::find_crate_name(sess, attrs);\n                 if *req == PrintRequest::CrateName {\n-                    println!(\"{id}\");\n+                    safe_println!(\"{id}\");\n                     continue;\n                 }\n                 let crate_types = collect_crate_types(sess, attrs);\n                 for &style in &crate_types {\n                     let fname =\n                         rustc_session::output::filename_for_input(sess, style, id, &t_outputs);\n-                    println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n+                    safe_println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n                 }\n             }\n             Cfg => {\n@@ -707,13 +715,13 @@ fn print_crate_info(\n \n                 cfgs.sort();\n                 for cfg in cfgs {\n-                    println!(\"{cfg}\");\n+                    safe_println!(\"{cfg}\");\n                 }\n             }\n             CallingConventions => {\n                 let mut calling_conventions = rustc_target::spec::abi::all_names();\n                 calling_conventions.sort_unstable();\n-                println!(\"{}\", calling_conventions.join(\"\\n\"));\n+                safe_println!(\"{}\", calling_conventions.join(\"\\n\"));\n             }\n             RelocationModels\n             | CodeModels\n@@ -733,7 +741,7 @@ fn print_crate_info(\n                     let stable = sess.target.options.supported_split_debuginfo.contains(split);\n                     let unstable_ok = sess.unstable_options();\n                     if stable || unstable_ok {\n-                        println!(\"{split}\");\n+                        safe_println!(\"{split}\");\n                     }\n                 }\n             }\n@@ -770,14 +778,14 @@ pub fn version_at_macro_invocation(\n ) {\n     let verbose = matches.opt_present(\"verbose\");\n \n-    println!(\"{binary} {version}\");\n+    safe_println!(\"{binary} {version}\");\n \n     if verbose {\n-        println!(\"binary: {binary}\");\n-        println!(\"commit-hash: {commit_hash}\");\n-        println!(\"commit-date: {commit_date}\");\n-        println!(\"host: {}\", config::host_triple());\n-        println!(\"release: {release}\");\n+        safe_println!(\"binary: {binary}\");\n+        safe_println!(\"commit-hash: {commit_hash}\");\n+        safe_println!(\"commit-date: {commit_date}\");\n+        safe_println!(\"host: {}\", config::host_triple());\n+        safe_println!(\"release: {release}\");\n \n         let debug_flags = matches.opt_strs(\"Z\");\n         let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n@@ -807,7 +815,7 @@ fn usage(verbose: bool, include_unstable_options: bool, nightly_build: bool) {\n     } else {\n         \"\"\n     };\n-    println!(\n+    safe_println!(\n         \"{options}{at_path}\\nAdditional help:\n     -C help             Print codegen options\n     -W help             \\\n@@ -820,7 +828,7 @@ fn usage(verbose: bool, include_unstable_options: bool, nightly_build: bool) {\n }\n \n fn print_wall_help() {\n-    println!(\n+    safe_println!(\n         \"\n The flag `-Wall` does not exist in `rustc`. Most useful lints are enabled by\n default. Use `rustc -W help` to see all available lints. It's more common to put\n@@ -832,7 +840,7 @@ the command line flag directly.\n \n /// Write to stdout lint command options, together with a list of all available lints\n pub fn describe_lints(sess: &Session, lint_store: &LintStore, loaded_plugins: bool) {\n-    println!(\n+    safe_println!(\n         \"\n Available lint options:\n     -W <foo>           Warn about <foo>\n@@ -877,21 +885,21 @@ Available lint options:\n         s\n     };\n \n-    println!(\"Lint checks provided by rustc:\\n\");\n+    safe_println!(\"Lint checks provided by rustc:\\n\");\n \n     let print_lints = |lints: Vec<&Lint>| {\n-        println!(\"    {}  {:7.7}  {}\", padded(\"name\"), \"default\", \"meaning\");\n-        println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n+        safe_println!(\"    {}  {:7.7}  {}\", padded(\"name\"), \"default\", \"meaning\");\n+        safe_println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n         for lint in lints {\n             let name = lint.name_lower().replace('_', \"-\");\n-            println!(\n+            safe_println!(\n                 \"    {}  {:7.7}  {}\",\n                 padded(&name),\n                 lint.default_level(sess.edition()).as_str(),\n                 lint.desc\n             );\n         }\n-        println!(\"\\n\");\n+        safe_println!(\"\\n\");\n     };\n \n     print_lints(builtin);\n@@ -912,14 +920,14 @@ Available lint options:\n         s\n     };\n \n-    println!(\"Lint groups provided by rustc:\\n\");\n+    safe_println!(\"Lint groups provided by rustc:\\n\");\n \n     let print_lint_groups = |lints: Vec<(&'static str, Vec<LintId>)>, all_warnings| {\n-        println!(\"    {}  sub-lints\", padded(\"name\"));\n-        println!(\"    {}  ---------\", padded(\"----\"));\n+        safe_println!(\"    {}  sub-lints\", padded(\"name\"));\n+        safe_println!(\"    {}  ---------\", padded(\"----\"));\n \n         if all_warnings {\n-            println!(\"    {}  all lints that are set to issue warnings\", padded(\"warnings\"));\n+            safe_println!(\"    {}  all lints that are set to issue warnings\", padded(\"warnings\"));\n         }\n \n         for (name, to) in lints {\n@@ -929,26 +937,26 @@ Available lint options:\n                 .map(|x| x.to_string().replace('_', \"-\"))\n                 .collect::<Vec<String>>()\n                 .join(\", \");\n-            println!(\"    {}  {}\", padded(&name), desc);\n+            safe_println!(\"    {}  {}\", padded(&name), desc);\n         }\n-        println!(\"\\n\");\n+        safe_println!(\"\\n\");\n     };\n \n     print_lint_groups(builtin_groups, true);\n \n     match (loaded_plugins, plugin.len(), plugin_groups.len()) {\n         (false, 0, _) | (false, _, 0) => {\n-            println!(\"Lint tools like Clippy can provide additional lints and lint groups.\");\n+            safe_println!(\"Lint tools like Clippy can provide additional lints and lint groups.\");\n         }\n         (false, ..) => panic!(\"didn't load lint plugins but got them anyway!\"),\n-        (true, 0, 0) => println!(\"This crate does not load any lint plugins or lint groups.\"),\n+        (true, 0, 0) => safe_println!(\"This crate does not load any lint plugins or lint groups.\"),\n         (true, l, g) => {\n             if l > 0 {\n-                println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n+                safe_println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n                 print_lints(plugin);\n             }\n             if g > 0 {\n-                println!(\"Lint groups provided by plugins loaded by this crate:\\n\");\n+                safe_println!(\"Lint groups provided by plugins loaded by this crate:\\n\");\n                 print_lint_groups(plugin_groups, false);\n             }\n         }\n@@ -996,12 +1004,12 @@ pub fn describe_flag_categories(matches: &Matches) -> bool {\n }\n \n fn describe_debug_flags() {\n-    println!(\"\\nAvailable options:\\n\");\n+    safe_println!(\"\\nAvailable options:\\n\");\n     print_flag_list(\"-Z\", config::Z_OPTIONS);\n }\n \n fn describe_codegen_flags() {\n-    println!(\"\\nAvailable codegen options:\\n\");\n+    safe_println!(\"\\nAvailable codegen options:\\n\");\n     print_flag_list(\"-C\", config::CG_OPTIONS);\n }\n \n@@ -1012,7 +1020,7 @@ fn print_flag_list<T>(\n     let max_len = flag_list.iter().map(|&(name, _, _, _)| name.chars().count()).max().unwrap_or(0);\n \n     for &(name, _, _, desc) in flag_list {\n-        println!(\n+        safe_println!(\n             \"    {} {:>width$}=val -- {}\",\n             cmdline_opt,\n             name.replace('_', \"-\"),"}, {"sha": "70de55320f7ae1830c196887baf30f5f7671542b", "filename": "compiler/rustc_driver_impl/src/print.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs?ref=040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d", "patch": "@@ -0,0 +1,20 @@\n+use std::fmt;\n+use std::io::{self, Write as _};\n+\n+macro_rules! safe_print {\n+    ($($arg:tt)*) => {{\n+        $crate::print::print(std::format_args!($($arg)*));\n+    }};\n+}\n+\n+macro_rules! safe_println {\n+    ($($arg:tt)*) => {\n+        safe_print!(\"{}\\n\", std::format_args!($($arg)*))\n+    };\n+}\n+\n+pub(crate) fn print(args: fmt::Arguments<'_>) {\n+    if let Err(_) = io::stdout().write_fmt(args) {\n+        rustc_errors::FatalError.raise();\n+    }\n+}"}]}