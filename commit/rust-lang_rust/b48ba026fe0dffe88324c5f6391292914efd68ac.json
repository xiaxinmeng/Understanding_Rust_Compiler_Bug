{"sha": "b48ba026fe0dffe88324c5f6391292914efd68ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGJhMDI2ZmUwZGZmZTg4MzI0YzVmNjM5MTI5MjkxNGVmZDY4YWM=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-12-05T23:29:36Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:49Z"}, "message": "Rename more functions from trans to monomorphize", "tree": {"sha": "a59aa46891cd38af02c959ca8c0189679859ad6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a59aa46891cd38af02c959ca8c0189679859ad6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48ba026fe0dffe88324c5f6391292914efd68ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48ba026fe0dffe88324c5f6391292914efd68ac", "html_url": "https://github.com/rust-lang/rust/commit/b48ba026fe0dffe88324c5f6391292914efd68ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48ba026fe0dffe88324c5f6391292914efd68ac/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4b372d6e20f458ba167e5a4ac585520d77f1047", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b372d6e20f458ba167e5a4ac585520d77f1047", "html_url": "https://github.com/rust-lang/rust/commit/d4b372d6e20f458ba167e5a4ac585520d77f1047"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "d34e1292d12ef5c90759c417000fbe601e270031", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b48ba026fe0dffe88324c5f6391292914efd68ac/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48ba026fe0dffe88324c5f6391292914efd68ac/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=b48ba026fe0dffe88324c5f6391292914efd68ac", "patch": "@@ -368,7 +368,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let instance = Instance::mono(tcx, def_id);\n \n             // Sanity check whether this ended up being collected accidentally\n-            debug_assert!(should_trans_locally(tcx, &instance));\n+            debug_assert!(should_monomorphize_locally(tcx, &instance));\n \n             let ty = instance.ty(tcx);\n             visit_drop_use(tcx, ty, true, &mut neighbors);\n@@ -379,7 +379,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n         MonoItem::Fn(instance) => {\n             // Sanity check whether this ended up being collected accidentally\n-            debug_assert!(should_trans_locally(tcx, &instance));\n+            debug_assert!(should_monomorphize_locally(tcx, &instance));\n \n             // Keep track of the monomorphization recursion depth\n             recursion_depth_reset = Some(check_recursion_limit(tcx,\n@@ -411,13 +411,13 @@ fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              caller: MonoItem<'tcx>,\n                              callees: &[MonoItem<'tcx>],\n                              inlining_map: &mut InliningMap<'tcx>) {\n-    let is_inlining_candidate = |trans_item: &MonoItem<'tcx>| {\n-        trans_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy\n+    let is_inlining_candidate = |mono_item: &MonoItem<'tcx>| {\n+        mono_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy\n     };\n \n     let accesses = callees.into_iter()\n-                          .map(|trans_item| {\n-                             (*trans_item, is_inlining_candidate(trans_item))\n+                          .map(|mono_item| {\n+                             (*mono_item, is_inlining_candidate(mono_item))\n                           });\n \n     inlining_map.record_accesses(caller, accesses);\n@@ -541,7 +541,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     ty::TyClosure(def_id, substs) => {\n                         let instance = monomorphize::resolve_closure(\n                             self.tcx, def_id, substs, ty::ClosureKind::FnOnce);\n-                        self.output.push(create_fn_trans_item(instance));\n+                        self.output.push(create_fn_mono_item(instance));\n                     }\n                     _ => bug!(),\n                 }\n@@ -553,8 +553,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     .require(ExchangeMallocFnLangItem)\n                     .unwrap_or_else(|e| tcx.sess.fatal(&e));\n                 let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);\n-                if should_trans_locally(tcx, &instance) {\n-                    self.output.push(create_fn_trans_item(instance));\n+                if should_monomorphize_locally(tcx, &instance) {\n+                    self.output.push(create_fn_mono_item(instance));\n                 }\n             }\n             _ => { /* not interesting */ }\n@@ -644,7 +644,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n         let tcx = self.tcx;\n         let instance = Instance::mono(tcx, static_.def_id);\n-        if should_trans_locally(tcx, &instance) {\n+        if should_monomorphize_locally(tcx, &instance) {\n             let node_id = tcx.hir.as_local_node_id(static_.def_id).unwrap();\n             self.output.push(MonoItem::Static(node_id));\n         }\n@@ -682,7 +682,7 @@ fn visit_instance_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 output: &mut Vec<MonoItem<'tcx>>)\n {\n     debug!(\"visit_item_use({:?}, is_direct_call={:?})\", instance, is_direct_call);\n-    if !should_trans_locally(tcx, &instance) {\n+    if !should_monomorphize_locally(tcx, &instance) {\n         return\n     }\n \n@@ -696,26 +696,26 @@ fn visit_instance_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::InstanceDef::DropGlue(_, None) => {\n             // don't need to emit shim if we are calling directly.\n             if !is_direct_call {\n-                output.push(create_fn_trans_item(instance));\n+                output.push(create_fn_mono_item(instance));\n             }\n         }\n         ty::InstanceDef::DropGlue(_, Some(_)) => {\n-            output.push(create_fn_trans_item(instance));\n+            output.push(create_fn_mono_item(instance));\n         }\n         ty::InstanceDef::ClosureOnceShim { .. } |\n         ty::InstanceDef::Item(..) |\n         ty::InstanceDef::FnPtrShim(..) |\n         ty::InstanceDef::CloneShim(..) => {\n-            output.push(create_fn_trans_item(instance));\n+            output.push(create_fn_mono_item(instance));\n         }\n     }\n }\n \n // Returns true if we should translate an instance in the local crate.\n // Returns false if we can just link to the upstream crate and therefore don't\n-// need a translation item.\n-fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instance<'tcx>)\n-                                  -> bool {\n+// need a mono item.\n+fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instance<'tcx>)\n+                                         -> bool {\n     let def_id = match instance.def {\n         ty::InstanceDef::Item(def_id) => def_id,\n         ty::InstanceDef::ClosureOnceShim { .. } |\n@@ -739,7 +739,7 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n                 false\n             } else {\n                 if !tcx.is_mir_available(def_id) {\n-                    bug!(\"Cannot create local trans-item for {:?}\", def_id)\n+                    bug!(\"Cannot create local mono-item for {:?}\", def_id)\n                 }\n                 true\n             }\n@@ -834,8 +834,8 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn create_fn_trans_item<'a, 'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n-    debug!(\"create_fn_trans_item(instance={})\", instance);\n+fn create_fn_mono_item<'a, 'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n+    debug!(\"create_fn_mono_item(instance={})\", instance);\n     MonoItem::Fn(instance)\n }\n \n@@ -861,8 +861,8 @@ fn create_mono_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         ty::ParamEnv::empty(traits::Reveal::All),\n                         def_id,\n                         substs).unwrap())\n-                .filter(|&instance| should_trans_locally(tcx, &instance))\n-                .map(|instance| create_fn_trans_item(instance));\n+                .filter(|&instance| should_monomorphize_locally(tcx, &instance))\n+                .map(|instance| create_fn_mono_item(instance));\n             output.extend(methods);\n         }\n         // Also add the destructor\n@@ -1009,7 +1009,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             let impl_def_id = tcx.hir.local_def_id(item.id);\n \n-            debug!(\"create_trans_items_for_default_impls(item={})\",\n+            debug!(\"create_mono_items_for_default_impls(item={})\",\n                    def_id_to_string(tcx, impl_def_id));\n \n             if let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id) {\n@@ -1032,9 +1032,10 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                          method.def_id,\n                                                          callee_substs).unwrap();\n \n-                    let trans_item = create_fn_trans_item(instance);\n-                    if trans_item.is_instantiable(tcx) && should_trans_locally(tcx, &instance) {\n-                        output.push(trans_item);\n+                    let mono_item = create_fn_mono_item(instance);\n+                    if mono_item.is_instantiable(tcx)\n+                        && should_monomorphize_locally(tcx, &instance) {\n+                        output.push(mono_item);\n                     }\n                 }\n             }"}]}