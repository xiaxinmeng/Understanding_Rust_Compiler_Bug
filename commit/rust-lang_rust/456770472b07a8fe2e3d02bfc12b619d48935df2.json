{"sha": "456770472b07a8fe2e3d02bfc12b619d48935df2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Njc3MDQ3MmIwN2E4ZmUyZTNkMDJiZmMxMmI2MTlkNDg5MzVkZjI=", "commit": {"author": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-07-18T06:02:57Z"}, "committer": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-07-18T06:26:58Z"}, "message": "Fix rustdoc formatting of impls\n\nSome cases displayed negative impls as positive, and some were missing\nwhere clauses.  This factors all the impl formatting into one\nfunction so the different cases can't get out of sync again.", "tree": {"sha": "4a0e02ea00e5ce1c0ffbc700e01722ddcd105b59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a0e02ea00e5ce1c0ffbc700e01722ddcd105b59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/456770472b07a8fe2e3d02bfc12b619d48935df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/456770472b07a8fe2e3d02bfc12b619d48935df2", "html_url": "https://github.com/rust-lang/rust/commit/456770472b07a8fe2e3d02bfc12b619d48935df2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/456770472b07a8fe2e3d02bfc12b619d48935df2/comments", "author": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e93196e16030ebf7a20c473849534235d676f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e93196e16030ebf7a20c473849534235d676f8", "html_url": "https://github.com/rust-lang/rust/commit/e4e93196e16030ebf7a20c473849534235d676f8"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "2255a2e969f1a362df296884997b5d797c9a76ac", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/456770472b07a8fe2e3d02bfc12b619d48935df2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456770472b07a8fe2e3d02bfc12b619d48935df2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=456770472b07a8fe2e3d02bfc12b619d48935df2", "patch": "@@ -540,6 +540,19 @@ impl fmt::Display for clean::Type {\n     }\n }\n \n+impl fmt::Display for clean::Impl {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, \"impl{} \", self.generics));\n+        if let Some(ref ty) = self.trait_ {\n+            try!(write!(f, \"{}{} for \",\n+                        if self.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" },\n+                        *ty));\n+        }\n+        try!(write!(f, \"{}{}\", self.for_, WhereClause(&self.generics)));\n+        Ok(())\n+    }\n+}\n+\n impl fmt::Display for clean::Arguments {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, input) in self.values.iter().enumerate() {"}, {"sha": "57c0db8f96e665a8c1b0afc6bb8bee8bfcc12e97", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/456770472b07a8fe2e3d02bfc12b619d48935df2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456770472b07a8fe2e3d02bfc12b619d48935df2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=456770472b07a8fe2e3d02bfc12b619d48935df2", "patch": "@@ -118,11 +118,8 @@ pub enum ExternalLocation {\n /// Metadata about an implementor of a trait.\n pub struct Implementor {\n     pub def_id: ast::DefId,\n-    pub generics: clean::Generics,\n-    pub trait_: clean::Type,\n-    pub for_: clean::Type,\n     pub stability: Option<clean::Stability>,\n-    pub polarity: Option<clean::ImplPolarity>,\n+    pub impl_: clean::Impl,\n }\n \n /// Metadata about implementations for a type.\n@@ -644,10 +641,7 @@ fn write_shared(cx: &Context,\n             // going on). If they're in different crates then the crate defining\n             // the trait will be interested in our implementation.\n             if imp.def_id.krate == did.krate { continue }\n-            try!(write!(&mut f, r#\"\"impl{} {}{} for {}\",\"#,\n-                        imp.generics,\n-                        if imp.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" },\n-                        imp.trait_, imp.for_));\n+            try!(write!(&mut f, r#\"\"{}\",\"#, imp.impl_));\n         }\n         try!(writeln!(&mut f, r\"];\"));\n         try!(writeln!(&mut f, \"{}\", r\"\n@@ -888,11 +882,8 @@ impl DocFolder for Cache {\n                 Some(clean::ResolvedPath{ did, .. }) => {\n                     self.implementors.entry(did).or_insert(vec![]).push(Implementor {\n                         def_id: item.def_id,\n-                        generics: i.generics.clone(),\n-                        trait_: i.trait_.as_ref().unwrap().clone(),\n-                        for_: i.for_.clone(),\n                         stability: item.stability.clone(),\n-                        polarity: i.polarity.clone(),\n+                        impl_: i.clone(),\n                     });\n                 }\n                 Some(..) | None => {}\n@@ -1910,8 +1901,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     match cache.implementors.get(&it.def_id) {\n         Some(implementors) => {\n             for i in implementors {\n-                try!(writeln!(w, \"<li><code>impl{} {} for {}{}</code></li>\",\n-                              i.generics, i.trait_, i.for_, WhereClause(&i.generics)));\n+                try!(writeln!(w, \"<li><code>{}</code></li>\", i.impl_));\n             }\n         }\n         None => {}\n@@ -2335,16 +2325,7 @@ fn render_deref_methods(w: &mut fmt::Formatter, impl_: &Impl) -> fmt::Result {\n fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n                render_header: bool) -> fmt::Result {\n     if render_header {\n-        try!(write!(w, \"<h3 class='impl'><code>impl{} \",\n-                    i.impl_.generics));\n-        if let Some(clean::ImplPolarity::Negative) = i.impl_.polarity {\n-            try!(write!(w, \"!\"));\n-        }\n-        if let Some(ref ty) = i.impl_.trait_ {\n-            try!(write!(w, \"{} for \", *ty));\n-        }\n-        try!(write!(w, \"{}{}</code></h3>\", i.impl_.for_,\n-                    WhereClause(&i.impl_.generics)));\n+        try!(write!(w, \"<h3 class='impl'><code>{}</code></h3>\", i.impl_));\n         if let Some(ref dox) = i.dox {\n             try!(write!(w, \"<div class='docblock'>{}</div>\", Markdown(dox)));\n         }"}]}