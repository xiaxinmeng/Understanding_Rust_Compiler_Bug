{"sha": "fca8a1d1510e8a526981eadd3c3fd221b501e6d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYThhMWQxNTEwZThhNTI2OTgxZWFkZDNjM2ZkMjIxYjUwMWU2ZDY=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-09-03T21:57:02Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-09-03T21:59:22Z"}, "message": "Print file permissions in octal form.\n\nCloses #16943.", "tree": {"sha": "a3ece3cf64ccada41242311916e711ba3d5c6d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3ece3cf64ccada41242311916e711ba3d5c6d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca8a1d1510e8a526981eadd3c3fd221b501e6d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca8a1d1510e8a526981eadd3c3fd221b501e6d6", "html_url": "https://github.com/rust-lang/rust/commit/fca8a1d1510e8a526981eadd3c3fd221b501e6d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca8a1d1510e8a526981eadd3c3fd221b501e6d6/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa", "html_url": "https://github.com/rust-lang/rust/commit/dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "1313bf5c1054f0154afc45fd830bb5c28526e0f4", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fca8a1d1510e8a526981eadd3c3fd221b501e6d6/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca8a1d1510e8a526981eadd3c3fd221b501e6d6/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=fca8a1d1510e8a526981eadd3c3fd221b501e6d6", "patch": "@@ -1274,7 +1274,7 @@ mod test {\n \n         error!(result, \"couldn't recursively mkdir\");\n         error!(result, \"couldn't create directory\");\n-        error!(result, \"mode=FilePermission { bits: 448 }\");\n+        error!(result, \"mode=700\");\n         error!(result, format!(\"path={}\", file.display()));\n     })\n "}, {"sha": "cc51ac8e3baf35351e1c67c3b84125573b943f57", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fca8a1d1510e8a526981eadd3c3fd221b501e6d6/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca8a1d1510e8a526981eadd3c3fd221b501e6d6/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=fca8a1d1510e8a526981eadd3c3fd221b501e6d6", "patch": "@@ -1797,7 +1797,6 @@ pub struct UnstableFileStat {\n bitflags!(\n     #[doc=\"A set of permissions for a file or directory is represented\n by a set of flags which are or'd together.\"]\n-    #[deriving(Show)]\n     flags FilePermission: u32 {\n         static UserRead     = 0o400,\n         static UserWrite    = 0o200,\n@@ -1836,6 +1835,14 @@ impl Default for FilePermission {\n     fn default() -> FilePermission { FilePermission::empty() }\n }\n \n+impl fmt::Show for FilePermission {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        formatter.fill = '0';\n+        formatter.width = Some(3);\n+        (&self.bits as &fmt::Octal).fmt(formatter)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::{IoResult, Reader, MemReader, NoProgress, InvalidInput};\n@@ -1937,4 +1944,18 @@ mod tests {\n         let mut r = MemReader::new(Vec::from_slice(b\"hello, world!\"));\n         assert_eq!(r.push_at_least(5, 1, &mut buf).unwrap_err().kind, InvalidInput);\n     }\n+\n+    #[test]\n+    fn test_show() {\n+        use super::*;\n+\n+        assert_eq!(format!(\"{}\", UserRead), \"400\".to_string());\n+        assert_eq!(format!(\"{}\", UserFile), \"644\".to_string());\n+        assert_eq!(format!(\"{}\", UserExec), \"755\".to_string());\n+        assert_eq!(format!(\"{}\", UserRWX),  \"700\".to_string());\n+        assert_eq!(format!(\"{}\", GroupRWX), \"070\".to_string());\n+        assert_eq!(format!(\"{}\", OtherRWX), \"007\".to_string());\n+        assert_eq!(format!(\"{}\", AllPermissions), \"777\".to_string());\n+        assert_eq!(format!(\"{}\", UserRead | UserWrite | OtherWrite), \"602\".to_string());\n+    }\n }"}]}