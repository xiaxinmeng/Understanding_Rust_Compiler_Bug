{"sha": "efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "node_id": "C_kwDOAAsO6NoAKGVmY2EzMmUyM2FiMWNjMjdjZDZiMWU1ZWM0MmZhZjg0OGZlYTVmYzM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-27T03:02:18Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-29T09:28:38Z"}, "message": "Rename some `OwnerId` fields.\n\nspastorino noticed some silly expressions like `item_id.def_id.def_id`.\n\nThis commit renames several `def_id: OwnerId` fields as `owner_id`, so\nthose expressions become `item_id.owner_id.def_id`.\n\n`item_id.owner_id.local_def_id` would be even clearer, but the use of\n`def_id` for values of type `LocalDefId` is *very* widespread, so I left\nthat alone.", "tree": {"sha": "803f16e6f0ef7526fec1114e4aa7349c29432a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803f16e6f0ef7526fec1114e4aa7349c29432a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "html_url": "https://github.com/rust-lang/rust/commit/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26eeeeec7610e45975745a60226dc8a980ed684e", "url": "https://api.github.com/repos/rust-lang/rust/commits/26eeeeec7610e45975745a60226dc8a980ed684e", "html_url": "https://github.com/rust-lang/rust/commit/26eeeeec7610e45975745a60226dc8a980ed684e"}], "stats": {"total": 230, "additions": 115, "deletions": 115}, "files": [{"sha": "e38f77268530113414767597feb7ccb767804ae2", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n                 of_trait: Some(ref trait_ref),\n                 ..\n             }) = item.kind;\n-            let ty = cx.tcx.type_of(item.def_id);\n+            let ty = cx.tcx.type_of(item.owner_id);\n             if is_copy(cx, ty);\n             if let Some(trait_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Iterator, trait_id);"}, {"sha": "dec357ab75c3662064a0e1794758b9abb005f037", "filename": "clippy_lints/src/default_union_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for DefaultUnionRepresentation {\n                 None,\n                 &format!(\n                     \"consider annotating `{}` with `#[repr(C)]` to explicitly specify memory layout\",\n-                    cx.tcx.def_path_str(item.def_id.to_def_id())\n+                    cx.tcx.def_path_str(item.owner_id.to_def_id())\n                 ),\n             );\n         }"}, {"sha": "c029031363bbdc1dd93eff46974b0a5b109ee886", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -715,47 +715,47 @@ fn walk_parents<'tcx>(\n             },\n             Node::Item(&Item {\n                 kind: ItemKind::Static(..) | ItemKind::Const(..),\n-                def_id,\n+                owner_id,\n                 span,\n                 ..\n             })\n             | Node::TraitItem(&TraitItem {\n                 kind: TraitItemKind::Const(..),\n-                def_id,\n+                owner_id,\n                 span,\n                 ..\n             })\n             | Node::ImplItem(&ImplItem {\n                 kind: ImplItemKind::Const(..),\n-                def_id,\n+                owner_id,\n                 span,\n                 ..\n             }) if span.ctxt() == ctxt => {\n-                let ty = cx.tcx.type_of(def_id.def_id);\n+                let ty = cx.tcx.type_of(owner_id.def_id);\n                 Some(ty_auto_deref_stability(cx, ty, precedence).position_for_result(cx))\n             },\n \n             Node::Item(&Item {\n                 kind: ItemKind::Fn(..),\n-                def_id,\n+                owner_id,\n                 span,\n                 ..\n             })\n             | Node::TraitItem(&TraitItem {\n                 kind: TraitItemKind::Fn(..),\n-                def_id,\n+                owner_id,\n                 span,\n                 ..\n             })\n             | Node::ImplItem(&ImplItem {\n                 kind: ImplItemKind::Fn(..),\n-                def_id,\n+                owner_id,\n                 span,\n                 ..\n             }) if span.ctxt() == ctxt => {\n                 let output = cx\n                     .tcx\n-                    .erase_late_bound_regions(cx.tcx.fn_sig(def_id.to_def_id()).output());\n+                    .erase_late_bound_regions(cx.tcx.fn_sig(owner_id.to_def_id()).output());\n                 Some(ty_auto_deref_stability(cx, output, precedence).position_for_result(cx))\n             },\n "}, {"sha": "ae8f6b794499fc47439d2a093fc45944dc47452a", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -70,15 +70,15 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n                 self_ty,\n                 ..\n             }) = item.kind;\n-            if !cx.tcx.has_attr(item.def_id.to_def_id(), sym::automatically_derived);\n+            if !cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n             if !item.span.from_expansion();\n             if let Some(def_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Default, def_id);\n             if let impl_item_hir = child.id.hir_id();\n             if let Some(Node::ImplItem(impl_item)) = cx.tcx.hir().find(impl_item_hir);\n             if let ImplItemKind::Fn(_, b) = &impl_item.kind;\n             if let Body { value: func_expr, .. } = cx.tcx.hir().body(*b);\n-            if let Some(adt_def) = cx.tcx.type_of(item.def_id).ty_adt_def();\n+            if let Some(adt_def) = cx.tcx.type_of(item.owner_id).ty_adt_def();\n             if let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);"}, {"sha": "102a02138bc87e783bf179bc0d7da5a6ae6044e2", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -210,8 +210,8 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n             ..\n         }) = item.kind\n         {\n-            let ty = cx.tcx.type_of(item.def_id);\n-            let is_automatically_derived = cx.tcx.has_attr(item.def_id.to_def_id(), sym::automatically_derived);\n+            let ty = cx.tcx.type_of(item.owner_id);\n+            let is_automatically_derived = cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "24d6a6951af8b3aaa7320ccb32cf314bc5857530", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -257,17 +257,17 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n-                if !(is_entrypoint_fn(cx, item.def_id.to_def_id()) || in_external_macro(cx.tcx.sess, item.span)) {\n+                if !(is_entrypoint_fn(cx, item.owner_id.to_def_id()) || in_external_macro(cx.tcx.sess, item.span)) {\n                     let body = cx.tcx.hir().body(body_id);\n                     let mut fpu = FindPanicUnwrap {\n                         cx,\n-                        typeck_results: cx.tcx.typeck(item.def_id.def_id),\n+                        typeck_results: cx.tcx.typeck(item.owner_id.def_id),\n                         panic_span: None,\n                     };\n                     fpu.visit_expr(body.value);\n                     lint_for_missing_headers(\n                         cx,\n-                        item.def_id.def_id,\n+                        item.owner_id.def_id,\n                         item.span,\n                         sig,\n                         headers,\n@@ -304,7 +304,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.def_id.def_id, item.span, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.owner_id.def_id, item.span, sig, headers, None, None);\n             }\n         }\n     }\n@@ -319,13 +319,13 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             let body = cx.tcx.hir().body(body_id);\n             let mut fpu = FindPanicUnwrap {\n                 cx,\n-                typeck_results: cx.tcx.typeck(item.def_id.def_id),\n+                typeck_results: cx.tcx.typeck(item.owner_id.def_id),\n                 panic_span: None,\n             };\n             fpu.visit_expr(body.value);\n             lint_for_missing_headers(\n                 cx,\n-                item.def_id.def_id,\n+                item.owner_id.def_id,\n                 item.span,\n                 sig,\n                 headers,"}, {"sha": "0570c2a1013890545e493dbd7c369ee8569859fc", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for EmptyEnum {\n         }\n \n         if let ItemKind::Enum(..) = item.kind {\n-            let ty = cx.tcx.type_of(item.def_id);\n+            let ty = cx.tcx.type_of(item.owner_id);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants().is_empty() {\n                 span_lint_and_help("}, {"sha": "223545fa79846cb4b5ac40f90a4e37571debfa39", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -265,7 +265,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n                     }\n                     // The `module_name_repetitions` lint should only trigger if the item has the module in its\n                     // name. Having the same name is accepted.\n-                    if cx.tcx.visibility(item.def_id).is_public() && item_camel.len() > mod_camel.len() {\n+                    if cx.tcx.visibility(item.owner_id).is_public() && item_camel.len() > mod_camel.len() {\n                         let matching = count_match_start(mod_camel, &item_camel);\n                         let rmatching = count_match_end(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();\n@@ -296,7 +296,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            if !(self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(item.def_id.def_id)) {\n+            if !(self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(item.owner_id.def_id)) {\n                 check_variant(cx, self.threshold, def, item_name, item.span);\n             }\n         }"}, {"sha": "7f1a4c4beb1f2dfeded29686c799bd3faac32762", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                         // be sure we have `self` parameter in this function\n                         if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n                             trait_self_ty = Some(\n-                                TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id())\n+                                TraitRef::identity(cx.tcx, trait_item.id.owner_id.to_def_id())\n                                     .self_ty()\n                                     .skip_binder(),\n                             );"}, {"sha": "1fece5d1c480917f606856b1896611b8f3d2016e", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -73,7 +73,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n-            if cx.effective_visibilities.is_exported(item.def_id.def_id);\n+            if cx.effective_visibilities.is_exported(item.owner_id.def_id);\n             let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {"}, {"sha": "0a633f242a5f1672a7d6c48ff680402685bc7e9a", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n             if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);\n@@ -107,7 +107,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n                 let body = cx.tcx.hir().body(body_id);\n                 let mut fpu = FindPanicUnwrap {\n                     lcx: cx,\n-                    typeck_results: cx.tcx.typeck(impl_item.id.def_id.def_id),\n+                    typeck_results: cx.tcx.typeck(impl_item.id.owner_id.def_id),\n                     result: Vec::new(),\n                 };\n                 fpu.visit_expr(body.value);"}, {"sha": "8b24a4962fb296ca4366c36e933206b987d1fa25", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n             && let Some(into_trait_seg) = hir_trait_ref.path.segments.last()\n             // `impl Into<target_ty> for self_ty`\n             && let Some(GenericArgs { args: [GenericArg::Type(target_ty)], .. }) = into_trait_seg.args\n-            && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.def_id)\n+            && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n             && cx.tcx.is_diagnostic_item(sym::Into, middle_trait_ref.def_id)\n         {\n             span_lint_and_then("}, {"sha": "3c7ab9c3182cb7a2f7fd07ac7f0d8dfb230e44fd", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -22,9 +22,9 @@ use super::{DOUBLE_MUST_USE, MUST_USE_CANDIDATE, MUST_USE_UNIT};\n \n pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n-    let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n+    let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n     if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind {\n-        let is_public = cx.effective_visibilities.is_exported(item.def_id.def_id);\n+        let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n@@ -34,7 +34,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.def_id.def_id,\n+                item.owner_id.def_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this function could have a `#[must_use]` attribute\",\n             );\n@@ -44,20 +44,20 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n \n pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n-        let is_public = cx.effective_visibilities.is_exported(item.def_id.def_id);\n+        let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n+        let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id.def_id).is_none()\n+        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n         {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.def_id.def_id,\n+                item.owner_id.def_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this method could have a `#[must_use]` attribute\",\n             );\n@@ -67,11 +67,11 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n \n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n-        let is_public = cx.effective_visibilities.is_exported(item.def_id.def_id);\n+        let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n+        let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n         } else if let hir::TraitFn::Provided(eid) = *eid {\n@@ -82,7 +82,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n                     sig.decl,\n                     body,\n                     item.span,\n-                    item.def_id.def_id,\n+                    item.owner_id.def_id,\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );"}, {"sha": "2c0bf551fd7e2b790c5c5896b85d3e327740d79d", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -31,7 +31,7 @@ pub(super) fn check_fn<'tcx>(\n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(eid)) = item.kind {\n         let body = cx.tcx.hir().body(eid);\n-        check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.def_id.def_id);\n+        check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.owner_id.def_id);\n     }\n }\n "}, {"sha": "5c63fb2acb117f08f729c1658edcd6ff9041aa4e", "filename": "clippy_lints/src/functions/result.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -34,9 +34,9 @@ fn result_err_ty<'tcx>(\n \n pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::Item<'tcx>, large_err_threshold: u64) {\n     if let hir::ItemKind::Fn(ref sig, _generics, _) = item.kind\n-        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span)\n+        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.owner_id.def_id, item.span)\n     {\n-        if cx.effective_visibilities.is_exported(item.def_id.def_id) {\n+        if cx.effective_visibilities.is_exported(item.owner_id.def_id) {\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             check_result_unit_err(cx, err_ty, fn_header_span);\n         }\n@@ -47,10 +47,10 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::Item<'tcx>, l\n pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::ImplItem<'tcx>, large_err_threshold: u64) {\n     // Don't lint if method is a trait's implementation, we can't do anything about those\n     if let hir::ImplItemKind::Fn(ref sig, _) = item.kind\n-        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span)\n-        && trait_ref_of_method(cx, item.def_id.def_id).is_none()\n+        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.owner_id.def_id, item.span)\n+        && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n     {\n-        if cx.effective_visibilities.is_exported(item.def_id.def_id) {\n+        if cx.effective_visibilities.is_exported(item.owner_id.def_id) {\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             check_result_unit_err(cx, err_ty, fn_header_span);\n         }\n@@ -61,8 +61,8 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::ImplItem\n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::TraitItem<'tcx>, large_err_threshold: u64) {\n     if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span) {\n-            if cx.effective_visibilities.is_exported(item.def_id.def_id) {\n+        if let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.owner_id.def_id, item.span) {\n+            if cx.effective_visibilities.is_exported(item.owner_id.def_id) {\n                 check_result_unit_err(cx, err_ty, fn_header_span);\n             }\n             check_result_large_err(cx, err_ty, hir_ty.span, large_err_threshold);"}, {"sha": "94e06cf704ba24c4845ddae70501bc75babd33df", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.effective_visibilities.is_exported(item.def_id.def_id) {\n+        if !cx.effective_visibilities.is_exported(item.owner_id.def_id) {\n             return;\n         }\n "}, {"sha": "14a37f535b46c9e711cd23436ba89bf445f736be", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.def_id.def_id).is_none();\n+            if trait_ref_of_method(cx, impl_item.owner_id.def_id).is_none();\n \n             then {\n                 show_lint(cx, impl_item);\n@@ -124,7 +124,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n         .expect(\"Failed to get trait ID of `Display`!\");\n \n     // Get the real type of 'self'\n-    let self_type = cx.tcx.fn_sig(item.def_id).input(0);\n+    let self_type = cx.tcx.fn_sig(item.owner_id).input(0);\n     let self_type = self_type.skip_binder().peel_refs();\n \n     // Emit either a warning or an error"}, {"sha": "e76de77f195d7aedd1357fdaafbcfeb253c3feaf", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n         let name = item.ident.name.as_str();\n         if matches!(name, \"iter\" | \"iter_mut\") {\n             if let TraitItemKind::Fn(fn_sig, _) = &item.kind {\n-                check_sig(cx, name, fn_sig, item.def_id.def_id);\n+                check_sig(cx, name, fn_sig, item.owner_id.def_id);\n             }\n         }\n     }\n@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n             )\n         {\n             if let ImplItemKind::Fn(fn_sig, _) = &item.kind {\n-                check_sig(cx, name, fn_sig, item.def_id.def_id);\n+                check_sig(cx, name, fn_sig, item.owner_id.def_id);\n             }\n         }\n     }"}, {"sha": "06e957285499cc49f382f3cf5cee0d1e54b2e89e", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -123,7 +123,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n             return;\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let ty = cx.tcx.type_of(item.def_id);\n+            let ty = cx.tcx.type_of(item.owner_id);\n             let Adt(adt, subst) = ty.kind() else {\n                 panic!(\"already checked whether this is an enum\")\n             };"}, {"sha": "b0cba40c27a5d5ccdaca7a0166cbef37fb3eb6b4", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if item.ident.name == sym::len;\n             if let ImplItemKind::Fn(sig, _) = &item.kind;\n             if sig.decl.implicit_self.has_implicit_self();\n-            if cx.effective_visibilities.is_exported(item.def_id.def_id);\n+            if cx.effective_visibilities.is_exported(item.owner_id.def_id);\n             if matches!(sig.decl.output, FnRetTy::Return(_));\n             if let Some(imp) = get_parent_as_impl(cx.tcx, item.hir_id());\n             if imp.of_trait.is_none();\n@@ -143,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if let Some(local_id) = ty_id.as_local();\n             let ty_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_id);\n             if !is_lint_allowed(cx, LEN_WITHOUT_IS_EMPTY, ty_hir_id);\n-            if let Some(output) = parse_len_output(cx, cx.tcx.fn_sig(item.def_id).skip_binder());\n+            if let Some(output) = parse_len_output(cx, cx.tcx.fn_sig(item.owner_id).skip_binder());\n             then {\n                 let (name, kind) = match cx.tcx.hir().find(ty_hir_id) {\n                     Some(Node::ForeignItem(x)) => (x.ident.name, \"extern type\"),\n@@ -195,7 +195,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: Symbol) -> bool {\n         item.ident.name == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && { cx.tcx.fn_sig(item.id.def_id).inputs().skip_binder().len() == 1 }\n+                has_self && { cx.tcx.fn_sig(item.id.owner_id).inputs().skip_binder().len() == 1 }\n             } else {\n                 false\n             }\n@@ -210,11 +210,11 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.effective_visibilities.is_exported(visited_trait.def_id.def_id)\n+    if cx.effective_visibilities.is_exported(visited_trait.owner_id.def_id)\n         && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n     {\n         let mut current_and_super_traits = DefIdSet::default();\n-        fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);\n+        fill_trait_set(visited_trait.owner_id.to_def_id(), &mut current_and_super_traits, cx);\n         let is_empty = sym!(is_empty);\n \n         let is_empty_method_found = current_and_super_traits"}, {"sha": "3bf2d7e4ea4e6cc98cc6229ab8169cf3fb460ff5", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.def_id.def_id).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.owner_id.def_id).is_none();\n             check_fn_inner(\n                 cx,\n                 sig.decl,"}, {"sha": "6806c1466968de17328ad8928f98fc9de8979505", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -166,7 +166,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             if let Some((id, span)) = iter.next()\n                 && iter.next().is_none()\n             {\n-                self.potential_enums.push((item.def_id.def_id, id, item.span, span));\n+                self.potential_enums.push((item.owner_id.def_id, id, item.span, span));\n             }\n         }\n     }"}, {"sha": "8a76ba0b064b547b9d0579f8efc6ccfcb549311c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -3250,15 +3250,15 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let name = impl_item.ident.name.as_str();\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n-        let self_ty = cx.tcx.type_of(item.def_id);\n+        let self_ty = cx.tcx.type_of(item.owner_id);\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n         if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind {\n-            let method_sig = cx.tcx.fn_sig(impl_item.def_id);\n+            let method_sig = cx.tcx.fn_sig(impl_item.owner_id);\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n             let first_arg_ty_opt = method_sig.inputs().iter().next().copied();\n             // if this impl block implements a trait, lint in trait definition instead\n-            if !implements_trait && cx.effective_visibilities.is_exported(impl_item.def_id.def_id) {\n+            if !implements_trait && cx.effective_visibilities.is_exported(impl_item.owner_id.def_id) {\n                 // check missing trait implementations\n                 for method_config in &TRAIT_METHODS {\n                     if name == method_config.method_name\n@@ -3292,7 +3292,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             if sig.decl.implicit_self.has_implicit_self()\n                     && !(self.avoid_breaking_exported_api\n-                    && cx.effective_visibilities.is_exported(impl_item.def_id.def_id))\n+                    && cx.effective_visibilities.is_exported(impl_item.owner_id.def_id))\n                     && let Some(first_arg) = iter_input_pats(sig.decl, cx.tcx.hir().body(id)).next()\n                     && let Some(first_arg_ty) = first_arg_ty_opt\n                 {\n@@ -3370,7 +3370,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             then {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id())\n+                let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n                     .self_ty()\n                     .skip_binder();\n                 wrong_self_convention::check(\n@@ -3389,7 +3389,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n-            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id())\n+            let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n                 .self_ty()\n                 .skip_binder();\n             if !ret_ty.contains(self_ty);"}, {"sha": "2a63681db60e55df076f5a3bc93d77f5f7f684a0", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n-                    let at_root = cx.tcx.local_parent(it.def_id.def_id) == CRATE_DEF_ID;\n+                    let at_root = cx.tcx.local_parent(it.owner_id.def_id) == CRATE_DEF_ID;\n                     if at_root {\n                         return;\n                     }\n@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             | hir::ItemKind::Use(..) => return,\n         };\n \n-        let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(it.owner_id.to_def_id());\n \n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n         if !is_from_proc_macro(cx, it) {\n@@ -164,7 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n-        let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(trait_item.owner_id.to_def_id());\n \n         let attrs = cx.tcx.hir().attrs(trait_item.hir_id());\n         if !is_from_proc_macro(cx, trait_item) {\n@@ -174,15 +174,15 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n-        if let Some(cid) = cx.tcx.associated_item(impl_item.def_id).impl_container(cx.tcx) {\n+        if let Some(cid) = cx.tcx.associated_item(impl_item.owner_id).impl_container(cx.tcx) {\n             if cx.tcx.impl_trait_ref(cid).is_some() {\n                 return;\n             }\n         } else {\n             return;\n         }\n \n-        let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(impl_item.owner_id.to_def_id());\n         let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n         if !is_from_proc_macro(cx, impl_item) {\n             self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);"}, {"sha": "758ce47cf114b8dc3aba594b3ba2ad3d24710a72", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.effective_visibilities.is_exported(it.def_id.def_id) {\n+        if !cx.effective_visibilities.is_exported(it.owner_id.def_id) {\n             return;\n         }\n         match it.kind {\n@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                     match tit_.kind {\n                         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => {},\n                         hir::TraitItemKind::Fn(..) => {\n-                            if cx.tcx.impl_defaultness(tit.id.def_id).has_value() {\n+                            if cx.tcx.impl_defaultness(tit.id.owner_id).has_value() {\n                                 // trait method with default body needs inline in case\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";\n@@ -142,7 +142,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.effective_visibilities.is_exported(impl_item.def_id.def_id) {\n+        if !cx.effective_visibilities.is_exported(impl_item.owner_id.def_id) {\n             return;\n         }\n \n@@ -151,15 +151,15 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(_) => return,\n         };\n \n-        let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n+        let assoc_item = cx.tcx.associated_item(impl_item.owner_id);\n         let container_id = assoc_item.container_id(cx.tcx);\n         let trait_def_id = match assoc_item.container {\n             TraitContainer => Some(container_id),\n             ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if trait_def_id.is_local() && !cx.effective_visibilities.is_exported(impl_item.def_id.def_id) {\n+            if trait_def_id.is_local() && !cx.effective_visibilities.is_exported(impl_item.owner_id.def_id) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "8a2e77980b36e8824642f5bbf27e5dbf5cddd54f", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.def_id.def_id).is_none() {\n+            if trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n                 check_sig(cx, item.hir_id(), sig.decl);\n             }\n         }"}, {"sha": "54a3c82b713daa36684d2da864cbeedc93b5abfc", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             // can't be implemented for unsafe new\n                             return;\n                         }\n-                        if cx.tcx.is_doc_hidden(impl_item.def_id.def_id) {\n+                        if cx.tcx.is_doc_hidden(impl_item.owner_id.def_id) {\n                             // shouldn't be implemented when it is hidden in docs\n                             return;\n                         }\n@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                         if_chain! {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n-                            if cx.effective_visibilities.is_reachable(impl_item.def_id.def_id);\n+                            if cx.effective_visibilities.is_reachable(impl_item.owner_id.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if self_ty == return_ty(cx, id);"}, {"sha": "938560b625eec9c542bbee24c4a27f9b91e8ed13", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -303,7 +303,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                         if let Some(of_trait_def_id) = of_trait_ref.trait_def_id();\n                         if let Some(of_assoc_item) = cx\n                             .tcx\n-                            .associated_item(impl_item.def_id)\n+                            .associated_item(impl_item.owner_id)\n                             .trait_item_def_id;\n                         if cx\n                             .tcx"}, {"sha": "714c0ff227bf829d01f535ea5fc89a944d362b91", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n             if let Some(trait_id) = trait_ref.trait_def_id();\n             if send_trait == trait_id;\n             if hir_impl.polarity == ImplPolarity::Positive;\n-            if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n+            if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n             if let self_ty = ty_trait_ref.self_ty();\n             if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();\n             then {"}, {"sha": "7722a476d7b4e5182abeea83af939b5653c7bc32", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -227,33 +227,33 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n         // `skip_params` is either `0` or `1` to skip the `self` parameter in trait functions.\n         // It can't be renamed, and it can't be removed without removing it from multiple functions.\n         let (fn_id, fn_kind, skip_params) = match get_parent_node(cx.tcx, body.value.hir_id) {\n-            Some(Node::Item(i)) => (i.def_id.to_def_id(), FnKind::Fn, 0),\n+            Some(Node::Item(i)) => (i.owner_id.to_def_id(), FnKind::Fn, 0),\n             Some(Node::TraitItem(&TraitItem {\n                 kind: TraitItemKind::Fn(ref sig, _),\n-                def_id,\n+                owner_id,\n                 ..\n             })) => (\n-                def_id.to_def_id(),\n+                owner_id.to_def_id(),\n                 FnKind::TraitFn,\n                 usize::from(sig.decl.implicit_self.has_implicit_self()),\n             ),\n             Some(Node::ImplItem(&ImplItem {\n                 kind: ImplItemKind::Fn(ref sig, _),\n-                def_id,\n+                owner_id,\n                 ..\n             })) => {\n                 #[allow(trivial_casts)]\n-                if let Some(Node::Item(item)) = get_parent_node(cx.tcx, def_id.into())\n-                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.def_id)\n-                    && let Some(trait_item_id) = cx.tcx.associated_item(def_id).trait_item_def_id\n+                if let Some(Node::Item(item)) = get_parent_node(cx.tcx, owner_id.into())\n+                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n+                    && let Some(trait_item_id) = cx.tcx.associated_item(owner_id).trait_item_def_id\n                 {\n                     (\n                         trait_item_id,\n                         FnKind::ImplTraitFn(cx.tcx.erase_regions(trait_ref.substs) as *const _ as usize),\n                         usize::from(sig.decl.implicit_self.has_implicit_self()),\n                     )\n                 } else {\n-                    (def_id.to_def_id(), FnKind::Fn, 0)\n+                    (owner_id.to_def_id(), FnKind::Fn, 0)\n                 }\n             },\n             _ => return,"}, {"sha": "71b31b5e4a562604efc96a1d30c2e6945f137b2d", "filename": "clippy_lints/src/operators/op_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -204,7 +204,7 @@ fn are_equal<'tcx>(cx: &LateContext<'tcx>, middle_ty: Ty<'_>, hir_ty: &rustc_hir\n         if let ty::Adt(adt_def, _) = middle_ty.kind();\n         if let Some(local_did) = adt_def.did().as_local();\n         let item = cx.tcx.hir().expect_item(local_did);\n-        let middle_ty_id = item.def_id.to_def_id();\n+        let middle_ty_id = item.owner_id.to_def_id();\n         if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind;\n         if let Res::Def(_, hir_ty_id) = path.res;\n "}, {"sha": "5aa3c6f2f9346b5dc39e810d751a90dba91e16c1", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n-            if !cx.tcx.has_attr(item.def_id.to_def_id(), sym::automatically_derived);\n+            if !cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {"}, {"sha": "f9fd3645668a9959ee25a48f9fe46ba1fb9d5300", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -261,7 +261,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.def_id.def_id, method_sig.decl, None);\n+            self.check_poly_fn(cx, item.owner_id.def_id, method_sig.decl, None);\n         }\n     }\n "}, {"sha": "0d74c90a834f7bcab9ff8484518bd9597c432d00", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             check_mut_from_ref(cx, sig, None);\n             for arg in check_fn_args(\n                 cx,\n-                cx.tcx.fn_sig(item.def_id).skip_binder().inputs(),\n+                cx.tcx.fn_sig(item.owner_id).skip_binder().inputs(),\n                 sig.decl.inputs,\n                 &[],\n             )\n@@ -188,7 +188,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n         let (item_id, sig, is_trait_item) = match parents.next() {\n             Some((_, Node::Item(i))) => {\n                 if let ItemKind::Fn(sig, ..) = &i.kind {\n-                    (i.def_id, sig, false)\n+                    (i.owner_id, sig, false)\n                 } else {\n                     return;\n                 }\n@@ -200,14 +200,14 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n                     return;\n                 }\n                 if let ImplItemKind::Fn(sig, _) = &i.kind {\n-                    (i.def_id, sig, false)\n+                    (i.owner_id, sig, false)\n                 } else {\n                     return;\n                 }\n             },\n             Some((_, Node::TraitItem(i))) => {\n                 if let TraitItemKind::Fn(sig, _) = &i.kind {\n-                    (i.def_id, sig, true)\n+                    (i.owner_id, sig, true)\n                 } else {\n                     return;\n                 }"}, {"sha": "26075e9f70faa498d456dde4b9fbff350ab27b71", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -46,12 +46,12 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if_chain! {\n-            if cx.tcx.visibility(item.def_id.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id());\n-            if !cx.effective_visibilities.is_exported(item.def_id.def_id) && self.is_exported.last() == Some(&false);\n+            if cx.tcx.visibility(item.owner_id.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id());\n+            if !cx.effective_visibilities.is_exported(item.owner_id.def_id) && self.is_exported.last() == Some(&false);\n             if is_not_macro_export(item);\n             then {\n                 let span = item.span.with_hi(item.ident.span.hi());\n-                let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n+                let descr = cx.tcx.def_kind(item.owner_id).descr(item.owner_id.to_def_id());\n                 span_lint_and_then(\n                     cx,\n                     REDUNDANT_PUB_CRATE,\n@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n         }\n \n         if let ItemKind::Mod { .. } = item.kind {\n-            self.is_exported.push(cx.effective_visibilities.is_exported(item.def_id.def_id));\n+            self.is_exported.push(cx.effective_visibilities.is_exported(item.owner_id.def_id));\n         }\n     }\n "}, {"sha": "b77faf7322bd00c054a275f4249e844ec9866455", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n         if let TraitItemKind::Fn(ref sig, _) = item.kind {\n-            check_method(cx, sig.decl, item.def_id.def_id, item.span, item.hir_id());\n+            check_method(cx, sig.decl, item.owner_id.def_id, item.span, item.hir_id());\n         }\n     }\n }"}, {"sha": "caab5851bafc94ffe51fafb7d3ebf3d23f518fcc", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n         let mut map = FxHashMap::<Res, ExistingName>::default();\n \n         for id in cx.tcx.hir().items() {\n-            if matches!(cx.tcx.def_kind(id.def_id), DefKind::Impl)\n+            if matches!(cx.tcx.def_kind(id.owner_id), DefKind::Impl)\n                 && let item = cx.tcx.hir().item(id)\n                 && let ItemKind::Impl(Impl {\n                   items,"}, {"sha": "71b387c66a33084845f4b9adcb8ab930b138f672", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n-        let self_ty = cx.tcx.type_of(item.def_id);\n+        let self_ty = cx.tcx.type_of(item.owner_id);\n         let ret_ty = return_ty(cx, impl_item.hir_id());\n \n         // Do not check trait impls"}, {"sha": "8cf3efc8dc73e8df43334c4aa3d73bfd4d094371", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for TrailingEmptyArray {\n                 None,\n                 &format!(\n                     \"consider annotating `{}` with `#[repr(C)]` or another `repr` attribute\",\n-                    cx.tcx.def_path_str(item.def_id.to_def_id())\n+                    cx.tcx.def_path_str(item.owner_id.to_def_id())\n                 ),\n             );\n         }"}, {"sha": "f6de87b0526cd2fe0b8a7ee70c1d23d0353b1d7c", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -333,7 +333,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        let is_exported = cx.effective_visibilities.is_exported(item.def_id.def_id);\n+        let is_exported = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n \n         match item.kind {\n             ItemKind::Static(ty, _, _) | ItemKind::Const(ty, _) => self.check_ty(\n@@ -392,7 +392,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &TraitItem<'_>) {\n-        let is_exported = cx.effective_visibilities.is_exported(item.def_id.def_id);\n+        let is_exported = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n \n         let context = CheckTyContext {\n             is_exported,"}, {"sha": "42bccc7212b3026216cabd16adefa30286f722db", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -56,12 +56,12 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         }\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let parent_item = cx.tcx.hir().expect_item(parent);\n-        let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n+        let assoc_item = cx.tcx.associated_item(impl_item.owner_id);\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n-            if !cx.effective_visibilities.is_exported(impl_item.def_id.def_id) || !self.avoid_breaking_exported_api;\n+            if !cx.effective_visibilities.is_exported(impl_item.owner_id.def_id) || !self.avoid_breaking_exported_api;\n             let body = cx.tcx.hir().body(*body_id);\n             if let [self_param, ..] = body.params;\n             if !is_local_used(cx, body, self_param.pat.hir_id);"}, {"sha": "f3611d174340458fa97177f28b63ddb8ab997b2d", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for UnwrapInResult {\n fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tcx hir::ImplItem<'_>) {\n     if let ImplItemKind::Fn(_, body_id) = impl_item.kind {\n         let body = cx.tcx.hir().body(body_id);\n-        let typeck = cx.tcx.typeck(impl_item.def_id.def_id);\n+        let typeck = cx.tcx.typeck(impl_item.owner_id.def_id);\n         let mut result = Vec::new();\n         let _: Option<!> = for_each_expr(body.value, |e| {\n             // check for `expect`"}, {"sha": "1d2d3eb12e1147fd71a1bb14191e77f9da6972b3", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -105,7 +105,7 @@ impl LateLintPass<'_> for UpperCaseAcronyms {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &Item<'_>) {\n         // do not lint public items or in macros\n         if in_external_macro(cx.sess(), it.span)\n-            || (self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(it.def_id.def_id))\n+            || (self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(it.owner_id.def_id))\n         {\n             return;\n         }"}, {"sha": "c6cdf3f85fc3dd891445c71db7a53847ea485ff8", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !is_from_proc_macro(cx, item); // expensive, should be last check\n             then {\n                 StackItem::Check {\n-                    impl_id: item.def_id.def_id,\n+                    impl_id: item.owner_id.def_id,\n                     in_body: 0,\n                     types_to_skip: std::iter::once(self_ty.hir_id).collect(),\n                 }\n@@ -143,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 // trait, not in the impl of the trait.\n                 let trait_method = cx\n                     .tcx\n-                    .associated_item(impl_item.def_id)\n+                    .associated_item(impl_item.owner_id)\n                     .trait_item_def_id\n                     .expect(\"impl method matches a trait method\");\n                 let trait_method_sig = cx.tcx.fn_sig(trait_method);"}, {"sha": "be98344470b9c5dbc2a6635b9657c820c201a47d", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -120,14 +120,14 @@ impl LateLintPass<'_> for WildcardImports {\n         if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n         }\n-        let module = cx.tcx.parent_module_from_def_id(item.def_id.def_id);\n-        if cx.tcx.visibility(item.def_id.def_id) != ty::Visibility::Restricted(module.to_def_id()) {\n+        let module = cx.tcx.parent_module_from_def_id(item.owner_id.def_id);\n+        if cx.tcx.visibility(item.owner_id.def_id) != ty::Visibility::Restricted(module.to_def_id()) {\n             return;\n         }\n         if_chain! {\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n             if self.warn_on_all || !self.check_exceptions(item, use_path.segments);\n-            let used_imports = cx.tcx.names_imported_by_glob_use(item.def_id.def_id);\n+            let used_imports = cx.tcx.names_imported_by_glob_use(item.owner_id.def_id);\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "3ebfc5e00e1426e8a63a83b3a09da3890655fd53", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=efca32e23ab1cc27cd6b1e5ec42faf848fea5fc3", "patch": "@@ -2281,7 +2281,7 @@ fn with_test_item_names(tcx: TyCtxt<'_>, module: LocalDefId, f: impl Fn(&[Symbol\n         Entry::Vacant(entry) => {\n             let mut names = Vec::new();\n             for id in tcx.hir().module_items(module) {\n-                if matches!(tcx.def_kind(id.def_id), DefKind::Const)\n+                if matches!(tcx.def_kind(id.owner_id), DefKind::Const)\n                     && let item = tcx.hir().item(id)\n                     && let ItemKind::Const(ty, _body) = item.kind {\n                     if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind {"}]}