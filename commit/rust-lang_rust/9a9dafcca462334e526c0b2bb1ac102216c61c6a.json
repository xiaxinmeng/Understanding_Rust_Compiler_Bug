{"sha": "9a9dafcca462334e526c0b2bb1ac102216c61c6a", "node_id": "C_kwDOAAsO6NoAKDlhOWRhZmNjYTQ2MjMzNGU1MjZjMGIyYmIxYWMxMDIyMTZjNjFjNmE", "commit": {"author": {"name": "Jane Losare-Lusby", "email": "jlusby@yaah.dev", "date": "2022-05-24T22:51:54Z"}, "committer": {"name": "Jane Losare-Lusby", "email": "jlusby@yaah.dev", "date": "2022-05-24T22:52:30Z"}, "message": "explained unwrap vs expect", "tree": {"sha": "3842fd86388c1ae6b23ac40bce5dd71f84de25d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3842fd86388c1ae6b23ac40bce5dd71f84de25d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a9dafcca462334e526c0b2bb1ac102216c61c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9dafcca462334e526c0b2bb1ac102216c61c6a", "html_url": "https://github.com/rust-lang/rust/commit/9a9dafcca462334e526c0b2bb1ac102216c61c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a9dafcca462334e526c0b2bb1ac102216c61c6a/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b5dce900d6e5e8f8823720a3746441928eecb23", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5dce900d6e5e8f8823720a3746441928eecb23", "html_url": "https://github.com/rust-lang/rust/commit/7b5dce900d6e5e8f8823720a3746441928eecb23"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "c5782d4520afa7471d4ee4fd32f253e73bd11b32", "filename": "library/std/src/error.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a9dafcca462334e526c0b2bb1ac102216c61c6a/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9dafcca462334e526c0b2bb1ac102216c61c6a/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=9a9dafcca462334e526c0b2bb1ac102216c61c6a", "patch": "@@ -42,10 +42,18 @@\n //! * `Result::unwrap`\n //! * `Result::expect`\n //!\n-//! TODO: how do I bridge these two sections?\n+//! These functions are equivalent, they either return the inner value if the\n+//! `Result` is `Ok` or panic if the `Result` is `Err` printing the inner error\n+//! as the source. The only difference between them is that with `expect` you\n+//! provide a panic error message to be printed alongside the source, whereas\n+//! `unwrap` has a default message indicating only that you unwraped an `Err`.\n //!\n-//! * unwrap is used in prototyping\n-//! * expect is used in !prototyping (????)\n+//! Of the two, `expect` is generally preferred since its `msg` field allows you\n+//! to convey your intent and assumptions which makes tracking down the source\n+//! of a panic easier. `unwrap` on the other hand can still be a good fit in\n+//! situations where you can trivially show that a piece of code will never\n+//! panick, such as `\"127.0.0.1\".parse::<std::net::IpAddr>().unwrap()` or early\n+//! prototyping.\n //!\n //! # Common Message Styles\n //!\n@@ -109,14 +117,10 @@\n //! for why it should have been set, and we let the source error display as\n //! a clear contradiction to our expectation.\n //!\n-//! For programs where panics may be user facing, either style works best\n-//! when paired with a custom [panic hook] like the one provided by the CLI\n-//! working group library, [`human-panic`]. This panic hook dumps the panic\n-//! messages to a crash report file while showing users a more friendly\n-//! \"Oops, something went wrong!\" message with a suggestion to send the\n-//! crash report file back to the developers. Panic messages should be used\n-//! to represent bugs, and the information provided back is context intended\n-//! for the developer, not the user.\n+//! **Hint**: If you're having trouble remembering how to phrase\n+//! expect-as-precondition style error messages remember to focus on the word\n+//! \"should\" as in \"env variable should be set by blah\" or \"the given binary\n+//! should be available and executable by the current user\".\n //!\n //! [panic hook]: crate::panic::set_hook\n //! [`set_hook`]: crate::panic::set_hook\n@@ -129,7 +133,6 @@\n //! [`Termination`]: crate::process::Termination\n //! [`Try`]: crate::ops::Try\n //! [`downcast`]: crate::error::Error\n-//! [`human-panic`]: https://docs.rs/human-panic\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}