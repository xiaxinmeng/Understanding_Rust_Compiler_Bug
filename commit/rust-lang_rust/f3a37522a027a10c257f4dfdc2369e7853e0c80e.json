{"sha": "f3a37522a027a10c257f4dfdc2369e7853e0c80e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYTM3NTIyYTAyN2ExMGMyNTdmNGRmZGMyMzY5ZTc4NTNlMGM4MGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T20:39:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T20:39:39Z"}, "message": "removed untyped typabledef", "tree": {"sha": "392414cbc9a4ecbcf7a597f43d489e97fc568a6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/392414cbc9a4ecbcf7a597f43d489e97fc568a6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a37522a027a10c257f4dfdc2369e7853e0c80e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a37522a027a10c257f4dfdc2369e7853e0c80e", "html_url": "https://github.com/rust-lang/rust/commit/f3a37522a027a10c257f4dfdc2369e7853e0c80e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a37522a027a10c257f4dfdc2369e7853e0c80e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a5a1f590201ba962a1f77ce1a7ff5870712728d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5a1f590201ba962a1f77ce1a7ff5870712728d", "html_url": "https://github.com/rust-lang/rust/commit/6a5a1f590201ba962a1f77ce1a7ff5870712728d"}], "stats": {"total": 29, "additions": 3, "deletions": 26}, "files": [{"sha": "9a1a90eed81f5e47525247f26c2bbae73d231ed0", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3a37522a027a10c257f4dfdc2369e7853e0c80e/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a37522a027a10c257f4dfdc2369e7853e0c80e/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=f3a37522a027a10c257f4dfdc2369e7853e0c80e", "patch": "@@ -24,14 +24,13 @@ use std::ops::Index;\n use std::sync::Arc;\n use std::{fmt, mem};\n \n-use log;\n use ena::unify::{InPlaceUnificationTable, UnifyKey, UnifyValue, NoError};\n use ra_arena::map::ArenaMap;\n use join_to_string::join;\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    Def, DefId, Module, Function, Struct, StructField, Enum, EnumVariant, Path, Name, ImplBlock,\n+    Module, Function, Struct, StructField, Enum, EnumVariant, Path, Name, ImplBlock,\n     FnSignature, FnScopes, ModuleDef, Crate,\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n@@ -447,10 +446,6 @@ impl Ty {\n                 };\n                 (var.parent_enum(db).generic_params(db), segment)\n             }\n-            TypableDef::Def(def_id) => match def_id.resolve(db) {\n-                Def::Trait(t) => (t.generic_params(db), last),\n-                _ => return Substs::empty(),\n-            },\n         };\n         // substs_from_path\n         if let Some(generic_args) = &segment.args_and_bindings {\n@@ -688,25 +683,17 @@ pub enum TypableDef {\n     Struct(Struct),\n     Enum(Enum),\n     EnumVariant(EnumVariant),\n-    Def(DefId),\n }\n impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant);\n \n-impl From<DefId> for TypableDef {\n-    fn from(func: DefId) -> TypableDef {\n-        TypableDef::Def(func)\n-    }\n-}\n-\n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n         let res = match def {\n-            ModuleDef::Def(r) => r.into(),\n             ModuleDef::Function(f) => f.into(),\n             ModuleDef::Struct(s) => s.into(),\n             ModuleDef::Enum(e) => e.into(),\n             ModuleDef::EnumVariant(v) => v.into(),\n-            ModuleDef::Module(_) => return None,\n+            ModuleDef::Def(_) | ModuleDef::Module(_) => return None,\n         };\n         Some(res)\n     }\n@@ -718,14 +705,6 @@ pub(super) fn type_for_def(db: &impl HirDatabase, def: TypableDef) -> Ty {\n         TypableDef::Struct(s) => type_for_struct(db, s),\n         TypableDef::Enum(e) => type_for_enum(db, e),\n         TypableDef::EnumVariant(v) => type_for_enum_variant(db, v),\n-        TypableDef::Def(def_id) => {\n-            log::debug!(\n-                \"trying to get type for item of unknown type {:?} {:?}\",\n-                def_id,\n-                def\n-            );\n-            Ty::Unknown\n-        }\n     }\n }\n \n@@ -1152,9 +1131,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n-            TypableDef::Def(_) | TypableDef::Enum(_) | TypableDef::Function(_) => {\n-                (Ty::Unknown, None)\n-            }\n+            TypableDef::Enum(_) | TypableDef::Function(_) => (Ty::Unknown, None),\n         }\n     }\n "}]}