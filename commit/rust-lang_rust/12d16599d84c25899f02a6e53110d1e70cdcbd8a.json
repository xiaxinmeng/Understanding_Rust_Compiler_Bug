{"sha": "12d16599d84c25899f02a6e53110d1e70cdcbd8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZDE2NTk5ZDg0YzI1ODk5ZjAyYTZlNTMxMTBkMWU3MGNkY2JkOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-01T17:21:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-01T17:21:55Z"}, "message": "Auto merge of #33814 - lambda:rtabort-use-platform-abort, r=alexcrichton\n\nOpen code the __fastfail intrinsic for rtabort! on windows\n\nAs described https://msdn.microsoft.com/en-us/library/dn774154.aspx\n\nThis is a Windows 8+ mechanism for terminating the process quickly,\nwhich degrades to either an access violation or bugcheck in older versions.\n\nI'm not sure this is better the the current mechanism of terminating\nwith an illegal instruction, but we recently converted unix to\nterminate more correctly with SIGABORT, and this *seems* more correct\nfor windows.\n\n[breaking-change]", "tree": {"sha": "e80bd1fa32678c202966526688236550e9bc10b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80bd1fa32678c202966526688236550e9bc10b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d16599d84c25899f02a6e53110d1e70cdcbd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d16599d84c25899f02a6e53110d1e70cdcbd8a", "html_url": "https://github.com/rust-lang/rust/commit/12d16599d84c25899f02a6e53110d1e70cdcbd8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d16599d84c25899f02a6e53110d1e70cdcbd8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2cab1fd58d6373582da189bd2c20ed3f6a7042a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cab1fd58d6373582da189bd2c20ed3f6a7042a", "html_url": "https://github.com/rust-lang/rust/commit/c2cab1fd58d6373582da189bd2c20ed3f6a7042a"}, {"sha": "696a570a00db2528b7934be32da7d8334738a997", "url": "https://api.github.com/repos/rust-lang/rust/commits/696a570a00db2528b7934be32da7d8334738a997", "html_url": "https://github.com/rust-lang/rust/commit/696a570a00db2528b7934be32da7d8334738a997"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "b5d0357633875829c1164e6f8e1685456c77d0f3", "filename": "src/libstd/sys/common/util.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/12d16599d84c25899f02a6e53110d1e70cdcbd8a/src%2Flibstd%2Fsys%2Fcommon%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d16599d84c25899f02a6e53110d1e70cdcbd8a/src%2Flibstd%2Fsys%2Fcommon%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Futil.rs?ref=12d16599d84c25899f02a6e53110d1e70cdcbd8a", "patch": "@@ -42,20 +42,28 @@ pub fn dumb_print(args: fmt::Arguments) {\n // implemented as an illegal instruction.\n #[cfg(unix)]\n unsafe fn abort_internal() -> ! {\n-    use libc;\n-    libc::abort()\n+    ::libc::abort()\n }\n \n-// On Windows, we want to avoid using libc, and there isn't a direct\n-// equivalent of libc::abort.  The __failfast intrinsic may be a reasonable\n-// substitute, but desireability of using it over the abort instrinsic is\n-// debateable; see https://github.com/rust-lang/rust/pull/31519 for details.\n-#[cfg(not(unix))]\n+// On Windows, use the processor-specific __fastfail mechanism.  In Windows 8\n+// and later, this will terminate the process immediately without running any\n+// in-process exception handlers.  In earlier versions of Windows, this\n+// sequence of instructions will be treated as an access violation,\n+// terminating the process but without necessarily bypassing all exception\n+// handlers.\n+//\n+// https://msdn.microsoft.com/en-us/library/dn774154.aspx\n+#[cfg(all(windows, any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n unsafe fn abort_internal() -> ! {\n-    use intrinsics;\n-    intrinsics::abort()\n+    asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n+    ::intrinsics::unreachable();\n }\n \n+// Other platforms should use the appropriate platform-specific mechanism for\n+// aborting the process.  If no platform-specific mechanism is available,\n+// ::intrinsics::abort() may be used instead.  The above implementations cover\n+// all targets currently supported by libstd.\n+\n pub fn abort(args: fmt::Arguments) -> ! {\n     dumb_print(format_args!(\"fatal runtime error: {}\\n\", args));\n     unsafe { abort_internal(); }"}]}