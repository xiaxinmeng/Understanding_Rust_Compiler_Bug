{"sha": "b91383b068dcd8c7cb287858e781c80323601fa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTM4M2IwNjhkY2Q4YzdjYjI4Nzg1OGU3ODFjODAzMjM2MDFmYTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T10:17:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T15:04:31Z"}, "message": "implement proper panicking for other MIR assertions\n\nRequires generalizing the call_function helper to arbitrary Immediate arguments", "tree": {"sha": "9b0889d5d57f64344acbc1c88225858a23b9782f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b0889d5d57f64344acbc1c88225858a23b9782f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b91383b068dcd8c7cb287858e781c80323601fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b91383b068dcd8c7cb287858e781c80323601fa5", "html_url": "https://github.com/rust-lang/rust/commit/b91383b068dcd8c7cb287858e781c80323601fa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b91383b068dcd8c7cb287858e781c80323601fa5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "html_url": "https://github.com/rust-lang/rust/commit/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "f13ef89ff7fe5aa42243ea7c9e5ace479a633bed", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=b91383b068dcd8c7cb287858e781c80323601fa5", "patch": "@@ -103,7 +103,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Env.into());\n         for (idx, arg) in argvs.into_iter().enumerate() {\n             let place = ecx.mplace_field(argvs_place, idx as u64)?;\n-            ecx.write_scalar(Scalar::Ptr(arg), place.into())?;\n+            ecx.write_scalar(arg, place.into())?;\n         }\n         ecx.memory\n             .mark_immutable(argvs_place.ptr.assert_ptr().alloc_id)?;\n@@ -149,7 +149,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     // Call start function.\n     ecx.call_function(\n         start_instance,\n-        &[main_ptr.into(), argc, argv],\n+        &[main_ptr.into(), argc.into(), argv.into()],\n         Some(ret_place.into()),\n         StackPopCleanup::None { cleanup: true },\n     )?;"}, {"sha": "68ce014c30689e41fe9475bb5f3af82578bbe6e7", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=b91383b068dcd8c7cb287858e781c80323601fa5", "patch": "@@ -124,7 +124,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn call_function(\n         &mut self,\n         f: ty::Instance<'tcx>,\n-        args: &[Scalar<Tag>],\n+        args: &[Immediate<Tag>],\n         dest: Option<PlaceTy<'tcx, Tag>>,\n         stack_pop: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n@@ -146,7 +146,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let callee_arg = this.local_place(\n                 callee_args.next().expect(\"callee has fewer arguments than expected\")\n             )?;\n-            this.write_scalar(*arg, callee_arg)?;\n+            this.write_immediate(*arg, callee_arg)?;\n         }\n         callee_args.next().expect_none(\"callee has more arguments than expected\");\n "}, {"sha": "980c6115e91cdb044292c7016e370ead22c14378", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b91383b068dcd8c7cb287858e781c80323601fa5", "patch": "@@ -253,7 +253,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         let malloc = ty::Instance::mono(ecx.tcx.tcx, malloc);\n         ecx.call_function(\n             malloc,\n-            &[size, align],\n+            &[size.into(), align.into()],\n             Some(dest),\n             // Don't do anything when we are done. The `statement()` function will increment\n             // the old stack frame's stmt counter to the next statement, which means that when"}, {"sha": "ae8dae0313f1bfc42c25560f20fac4e05178b6e9", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=b91383b068dcd8c7cb287858e781c80323601fa5", "patch": "@@ -57,7 +57,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(match this.machine.env_vars.map.get(name) {\n             // The offset is used to strip the \"{name}=\" part of the string.\n             Some(var_ptr) => {\n-                Scalar::Ptr(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?)\n+                Scalar::from(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?)\n             }\n             None => Scalar::ptr_null(&*this.tcx),\n         })"}, {"sha": "f27b4fb333527df8ee5ebb09a1a12c1764a3ce19", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b91383b068dcd8c7cb287858e781c80323601fa5", "patch": "@@ -205,7 +205,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         Align::from_bytes(align).unwrap(),\n                         MiriMemoryKind::C.into(),\n                     );\n-                    this.write_scalar(Scalar::Ptr(ptr), ret.into())?;\n+                    this.write_scalar(ptr, ret.into())?;\n                 }\n                 this.write_null(dest)?;\n             }\n@@ -234,7 +234,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     Align::from_bytes(align).unwrap(),\n                     MiriMemoryKind::Rust.into(),\n                 );\n-                this.write_scalar(Scalar::Ptr(ptr), dest)?;\n+                this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_alloc_zeroed\" => {\n                 let size = this.read_scalar(args[0])?.to_machine_usize(this)?;\n@@ -254,7 +254,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.memory\n                     .write_bytes(ptr.into(), iter::repeat(0u8).take(size as usize))\n                     .unwrap();\n-                this.write_scalar(Scalar::Ptr(ptr), dest)?;\n+                this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_dealloc\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n@@ -295,7 +295,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     align,\n                     MiriMemoryKind::Rust.into(),\n                 )?;\n-                this.write_scalar(Scalar::Ptr(new_ptr), dest)?;\n+                this.write_scalar(new_ptr, dest)?;\n             }\n \n             \"syscall\" => {"}, {"sha": "7cdd81d935c2eb976c7e08749af6ec26a4878618", "filename": "src/shims/panic.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=b91383b068dcd8c7cb287858e781c80323601fa5", "patch": "@@ -86,7 +86,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             MPlaceTy::dangling(this.layout_of(tcx.mk_unit())?, this).into();\n         this.call_function(\n             f_instance,\n-            &[f_arg],\n+            &[f_arg.into()],\n             Some(ret_place),\n             // Directly return to caller.\n             StackPopCleanup::Goto { ret: Some(ret), unwind: None },\n@@ -163,6 +163,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         match msg {\n             BoundsCheck { ref index, ref len } => {\n+                // Forward to `panic_bounds_check` lang item.\n+\n                 // First arg: Caller location.\n                 let location = this.alloc_caller_location_for_span(span)?;\n                 // Second arg: index.\n@@ -175,12 +177,31 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let panic_bounds_check = ty::Instance::mono(this.tcx.tcx, panic_bounds_check);\n                 this.call_function(\n                     panic_bounds_check,\n-                    &[location.ptr, index.not_undef()?, len.not_undef()?],\n+                    &[location.ptr.into(), index.into(), len.into()],\n+                    None,\n+                    StackPopCleanup::Goto { ret: None, unwind },\n+                )?;\n+            }\n+            _ => {\n+                // Forward everything else to `panic` lang item.\n+\n+                // First arg: Message.\n+                let msg = msg.description();\n+                let msg = this.allocate_str(msg, MiriMemoryKind::Static.into());\n+\n+                // Second arg: Caller location.\n+                let location = this.alloc_caller_location_for_span(span)?;\n+\n+                // Call the lang item.\n+                let panic = this.tcx.lang_items().panic_fn().unwrap();\n+                let panic = ty::Instance::mono(this.tcx.tcx, panic);\n+                this.call_function(\n+                    panic,\n+                    &[msg.to_ref(), location.ptr.into()],\n                     None,\n                     StackPopCleanup::Goto { ret: None, unwind },\n                 )?;\n             }\n-            _ => unimplemented!()\n         }\n         Ok(())\n     }"}, {"sha": "420fd63a6181e22d57b88f30357555151a555838", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91383b068dcd8c7cb287858e781c80323601fa5/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=b91383b068dcd8c7cb287858e781c80323601fa5", "patch": "@@ -150,7 +150,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n             this.call_function(\n                 instance,\n-                &[ptr],\n+                &[ptr.into()],\n                 Some(ret_place),\n                 StackPopCleanup::None { cleanup: true },\n             )?;"}]}