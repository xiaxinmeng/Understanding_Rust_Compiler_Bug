{"sha": "168615f869ea560aa95e12a3c043c19110368be6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODYxNWY4NjllYTU2MGFhOTVlMTJhM2MwNDNjMTkxMTAzNjhiZTY=", "commit": {"author": {"name": "Theo Belaire", "email": "theo.belaire@gmail.com", "date": "2015-04-25T18:35:47Z"}, "committer": {"name": "Theo Belaire", "email": "theo.belaire@gmail.com", "date": "2015-04-25T18:35:47Z"}, "message": "Now passing in the ImportResolver to check_conflict...\n\nIt compiles, yay.", "tree": {"sha": "9c2be53333212a235156745b251cce77a181ef3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c2be53333212a235156745b251cce77a181ef3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/168615f869ea560aa95e12a3c043c19110368be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/168615f869ea560aa95e12a3c043c19110368be6", "html_url": "https://github.com/rust-lang/rust/commit/168615f869ea560aa95e12a3c043c19110368be6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/168615f869ea560aa95e12a3c043c19110368be6/comments", "author": {"login": "tbelaire", "id": 427239, "node_id": "MDQ6VXNlcjQyNzIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbelaire", "html_url": "https://github.com/tbelaire", "followers_url": "https://api.github.com/users/tbelaire/followers", "following_url": "https://api.github.com/users/tbelaire/following{/other_user}", "gists_url": "https://api.github.com/users/tbelaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbelaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbelaire/subscriptions", "organizations_url": "https://api.github.com/users/tbelaire/orgs", "repos_url": "https://api.github.com/users/tbelaire/repos", "events_url": "https://api.github.com/users/tbelaire/events{/privacy}", "received_events_url": "https://api.github.com/users/tbelaire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbelaire", "id": 427239, "node_id": "MDQ6VXNlcjQyNzIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbelaire", "html_url": "https://github.com/tbelaire", "followers_url": "https://api.github.com/users/tbelaire/followers", "following_url": "https://api.github.com/users/tbelaire/following{/other_user}", "gists_url": "https://api.github.com/users/tbelaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbelaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbelaire/subscriptions", "organizations_url": "https://api.github.com/users/tbelaire/orgs", "repos_url": "https://api.github.com/users/tbelaire/repos", "events_url": "https://api.github.com/users/tbelaire/events{/privacy}", "received_events_url": "https://api.github.com/users/tbelaire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74648b5d647526e421d5015417968b64c1900512", "url": "https://api.github.com/repos/rust-lang/rust/commits/74648b5d647526e421d5015417968b64c1900512", "html_url": "https://github.com/rust-lang/rust/commit/74648b5d647526e421d5015417968b64c1900512"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "daffe08fe3a13234c85fa7327ff0c6def181f9de", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/168615f869ea560aa95e12a3c043c19110368be6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168615f869ea560aa95e12a3c043c19110368be6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=168615f869ea560aa95e12a3c043c19110368be6", "patch": "@@ -618,7 +618,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                namespace_name,\n                                name_bindings.def_for_namespace(namespace));\n                         self.check_for_conflicting_import(\n-                            &import_resolution.target_for_namespace(namespace),\n+                            &import_resolution,\n                             directive.span,\n                             target,\n                             namespace);\n@@ -755,7 +755,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                             // Continue.\n                         }\n                         Some(ref value_target) => {\n-                            self.check_for_conflicting_import(&dest_import_resolution.value_target,\n+                            self.check_for_conflicting_import(&dest_import_resolution,\n                                                               import_directive.span,\n                                                               *ident,\n                                                               ValueNS);\n@@ -767,7 +767,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                             // Continue.\n                         }\n                         Some(ref type_target) => {\n-                            self.check_for_conflicting_import(&dest_import_resolution.type_target,\n+                            self.check_for_conflicting_import(&dest_import_resolution,\n                                                               import_directive.span,\n                                                               *ident,\n                                                               TypeNS);\n@@ -885,32 +885,29 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n     /// Checks that imported names and items don't have the same name.\n     fn check_for_conflicting_import(&mut self,\n-                                    target: &Option<Target>,\n+                                    import_resolution: &ImportResolution,\n                                     import_span: Span,\n                                     name: Name,\n                                     namespace: Namespace) {\n+        let target = import_resolution.target_for_namespace(namespace);\n         debug!(\"check_for_conflicting_import: {}; target exists: {}\",\n                &token::get_name(name),\n                target.is_some());\n \n-        match *target {\n+        match target {\n             Some(ref target) if target.shadowable != Shadowable::Always => {\n-                let msg = format!(\"a {} named `{}` has already been imported \\\n-                                   in this module\",\n-                                  match namespace {\n-                                    TypeNS => \"type\",\n-                                    ValueNS => \"value\",\n-                                  },\n+                let ns_word = match namespace {\n+                    TypeNS => \"type\",\n+                    ValueNS => \"value\",\n+                };\n+                span_err!(self.resolver.session, import_span, E0252,\n+                          \"a {} named `{}` has already been imported \\\n+                           in this module\", ns_word,\n                                   &token::get_name(name));\n-                span_err!(self.resolver.session, import_span, E0252, \"{}\", &msg[..]);\n                 if let Some(sp) = target.bindings.span_for_namespace(namespace) {\n                     span_note!(self.resolver.session, sp,\n                                \"first import of {} `{}` here\",\n-                               match namespace {\n-                                   TypeNS => \"type\",\n-                                   ValueNS => \"value\",\n-                               },\n-                               token::get_name(name));\n+                               ns_word, token::get_name(name));\n                 } else {\n                     span_note!(self.resolver.session, import_span, \"I can't find where it was previously imported\");\n                 }"}]}