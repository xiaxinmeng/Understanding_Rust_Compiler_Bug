{"sha": "7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDQzZTI4NGE5YTNlNzFlZTJlNWQzNGJlOGU0MGFiZjFkYWE0OWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-23T20:19:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-23T20:19:10Z"}, "message": "Rollup merge of #65193 - Mark-Simulacrum:lockless-lintstore, r=nikomatsakis\n\nLockless LintStore\n\nThis removes mutability from the lint store after registration. Each commit stands alone, for the most part, though they don't make sense out of sequence.\n\nThe intent here is to move LintStore to a more parallel-friendly architecture, although also just a cleaner one from an implementation perspective. Specifically, this has the following changes:\n * We no longer implicitly register lints when registering lint passes\n    * For the most part this means that registration calls now likely want to call something like:\n       `lint_store.register_lints(&Pass::get_lints())` as well as `register_*_pass`.\n    * In theory this is a simplification as it's much easier for folks to just register lints and then have passes that implement whichever lint however they want, rather than necessarily tying passes to lints.\n * Lint passes still have a list of associated lints, but a followup PR could plausibly change that\n   * This list must be known for a given pass type, not instance, i.e., `fn get_lints()` is the signature instead of `fn get_lints(&self)` as before.\n * We do not store pass objects, instead storing constructor functions. This means we always get new passes when running lints (this happens approximately once though for a given compiler session, so no behavior change is expected).\n * Registration API is _much_ simpler: generally all functions are just taking `Fn() -> PassObject` rather than several different `bool`s.", "tree": {"sha": "cb01ad8e8d25608e0626c6596097108098606cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb01ad8e8d25608e0626c6596097108098606cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsLW+CRBK7hj4Ov3rIwAAdHIIAJotzZhu/7oGFRF3Nw9tRXHR\n+t/nRJtF56pbxJKWz3gVNv5hhC20Y/sldzRZ5wijJ7RkhzjJ43eDdupGUgzZ0V4u\n2fsQqi+R+XC1AiG9NQ7lwksVVJOToCuzKNfk777YYu/6eHeA8EeBPOvbtvO+HjWf\n4JUhl5/mGmkDtnCeOrTdFty2KIDQ3f6vA1X37KMHR8zef0DuDYvbXt7D0+weRzi0\nNYdvZLqVi3m5Zq9A0hYiYBGjw6Nd+KzafXca8a4WH66keMJSOsPFGMU8Nu1JL7s4\n7JYwH6SgdUuv9ZDK5SlD1vVbS9qVWdblGQg64PzDTiahBe0z5SV3nsK1tiEDl5k=\n=Dqkr\n-----END PGP SIGNATURE-----\n", "payload": "tree cb01ad8e8d25608e0626c6596097108098606cf2\nparent 4b9fbfbc29dbf0192dc0a9ed2bf6d61f2e7b971b\nparent 4e8d1b229217c7c83ce96b44410ccae9470db973\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571861950 +0200\ncommitter GitHub <noreply@github.com> 1571861950 +0200\n\nRollup merge of #65193 - Mark-Simulacrum:lockless-lintstore, r=nikomatsakis\n\nLockless LintStore\n\nThis removes mutability from the lint store after registration. Each commit stands alone, for the most part, though they don't make sense out of sequence.\n\nThe intent here is to move LintStore to a more parallel-friendly architecture, although also just a cleaner one from an implementation perspective. Specifically, this has the following changes:\n * We no longer implicitly register lints when registering lint passes\n    * For the most part this means that registration calls now likely want to call something like:\n       `lint_store.register_lints(&Pass::get_lints())` as well as `register_*_pass`.\n    * In theory this is a simplification as it's much easier for folks to just register lints and then have passes that implement whichever lint however they want, rather than necessarily tying passes to lints.\n * Lint passes still have a list of associated lints, but a followup PR could plausibly change that\n   * This list must be known for a given pass type, not instance, i.e., `fn get_lints()` is the signature instead of `fn get_lints(&self)` as before.\n * We do not store pass objects, instead storing constructor functions. This means we always get new passes when running lints (this happens approximately once though for a given compiler session, so no behavior change is expected).\n * Registration API is _much_ simpler: generally all functions are just taking `Fn() -> PassObject` rather than several different `bool`s.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "html_url": "https://github.com/rust-lang/rust/commit/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9fbfbc29dbf0192dc0a9ed2bf6d61f2e7b971b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9fbfbc29dbf0192dc0a9ed2bf6d61f2e7b971b", "html_url": "https://github.com/rust-lang/rust/commit/4b9fbfbc29dbf0192dc0a9ed2bf6d61f2e7b971b"}, {"sha": "4e8d1b229217c7c83ce96b44410ccae9470db973", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8d1b229217c7c83ce96b44410ccae9470db973", "html_url": "https://github.com/rust-lang/rust/commit/4e8d1b229217c7c83ce96b44410ccae9470db973"}], "stats": {"total": 1034, "additions": 477, "deletions": 557}, "files": [{"sha": "efcbd7b6794f0cb65d1acd301c800d1a28e28afb", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -3483,6 +3483,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_interface\",\n+ \"rustc_lint\",\n  \"rustc_metadata\",\n  \"rustc_mir\",\n  \"rustc_plugin\","}, {"sha": "15598b60f5c0bb4cd749bd5aa7eb18638713aa33", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 138, "deletions": 31, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -4,11 +4,12 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::lint::{LintPass, LateLintPass, LintArray};\n+use crate::lint::{LintPass, LateLintPass, LintArray, FutureIncompatibleInfo};\n use crate::middle::stability;\n use crate::session::Session;\n use errors::{Applicability, DiagnosticBuilder, pluralise};\n use syntax::ast;\n+use syntax::edition::Edition;\n use syntax::source_map::Span;\n use syntax::symbol::Symbol;\n \n@@ -22,7 +23,7 @@ declare_lint! {\n     pub CONST_ERR,\n     Deny,\n     \"constant evaluation detected erroneous expression\",\n-    report_in_external_macro: true\n+    report_in_external_macro\n }\n \n declare_lint! {\n@@ -71,7 +72,7 @@ declare_lint! {\n     pub UNREACHABLE_CODE,\n     Warn,\n     \"detects unreachable code paths\",\n-    report_in_external_macro: true\n+    report_in_external_macro\n }\n \n declare_lint! {\n@@ -131,7 +132,11 @@ declare_lint! {\n declare_lint! {\n     pub PRIVATE_IN_PUBLIC,\n     Warn,\n-    \"detect private items in public interfaces not caught by the old implementation\"\n+    \"detect private items in public interfaces not caught by the old implementation\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -143,13 +148,21 @@ declare_lint! {\n declare_lint! {\n     pub PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n     Deny,\n-    \"detect public re-exports of private extern crates\"\n+    \"detect public re-exports of private extern crates\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub INVALID_TYPE_PARAM_DEFAULT,\n     Deny,\n-    \"type parameter default erroneously allowed in invalid location\"\n+    \"type parameter default erroneously allowed in invalid location\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -161,63 +174,99 @@ declare_lint! {\n declare_lint! {\n     pub SAFE_EXTERN_STATICS,\n     Deny,\n-    \"safe access to extern statics was erroneously allowed\"\n+    \"safe access to extern statics was erroneously allowed\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n-    \"safe borrows of fields of packed structs were was erroneously allowed\"\n+    \"safe borrows of fields of packed structs were was erroneously allowed\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub PATTERNS_IN_FNS_WITHOUT_BODY,\n     Warn,\n-    \"patterns in functions without body were erroneously allowed\"\n+    \"patterns in functions without body were erroneously allowed\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub LEGACY_DIRECTORY_OWNERSHIP,\n     Deny,\n     \"non-inline, non-`#[path]` modules (e.g., `mod foo;`) were erroneously allowed in some files \\\n-     not named `mod.rs`\"\n+     not named `mod.rs`\",\n+     @future_incompatible = FutureIncompatibleInfo {\n+         reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n+         edition: None,\n+     };\n }\n \n declare_lint! {\n     pub LEGACY_CONSTRUCTOR_VISIBILITY,\n     Deny,\n-    \"detects use of struct constructors that would be invisible with new visibility rules\"\n+    \"detects use of struct constructors that would be invisible with new visibility rules\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub MISSING_FRAGMENT_SPECIFIER,\n     Deny,\n-    \"detects missing fragment specifiers in unused `macro_rules!` patterns\"\n+    \"detects missing fragment specifiers in unused `macro_rules!` patterns\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n     Deny,\n-    \"detects parenthesized generic parameters in type and module names\"\n+    \"detects parenthesized generic parameters in type and module names\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub LATE_BOUND_LIFETIME_ARGUMENTS,\n     Warn,\n-    \"detects generic lifetime arguments in path segments with late bound lifetime parameters\"\n+    \"detects generic lifetime arguments in path segments with late bound lifetime parameters\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub ORDER_DEPENDENT_TRAIT_OBJECTS,\n     Deny,\n-    \"trait-object types were treated as different depending on marker-trait order\"\n+    \"trait-object types were treated as different depending on marker-trait order\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n     \"detects use of deprecated items\",\n-    report_in_external_macro: true\n+    report_in_external_macro\n }\n \n declare_lint! {\n@@ -253,7 +302,11 @@ declare_lint! {\n declare_lint! {\n     pub TYVAR_BEHIND_RAW_POINTER,\n     Warn,\n-    \"raw pointer to an inference variable\"\n+    \"raw pointer to an inference variable\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n+        edition: Some(Edition::Edition2018),\n+    };\n }\n \n declare_lint! {\n@@ -272,19 +325,33 @@ declare_lint! {\n     pub ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n     Allow,\n     \"fully qualified paths that start with a module name \\\n-     instead of `crate`, `self`, or an extern crate name\"\n+     instead of `crate`, `self`, or an extern crate name\",\n+     @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #53130 <https://github.com/rust-lang/rust/issues/53130>\",\n+        edition: Some(Edition::Edition2018),\n+     };\n }\n \n declare_lint! {\n     pub ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n     Warn,\n-    \"floating-point literals cannot be used in patterns\"\n+    \"floating-point literals cannot be used in patterns\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub UNSTABLE_NAME_COLLISIONS,\n     Warn,\n-    \"detects name collision with an existing but unstable method\"\n+    \"detects name collision with an existing but unstable method\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n+        edition: None,\n+        // Note: this item represents future incompatibility of all unstable functions in the\n+        //       standard library, and thus should never be removed or changed to an error.\n+    };\n }\n \n declare_lint! {\n@@ -302,7 +369,11 @@ declare_lint! {\n declare_lint! {\n     pub DUPLICATE_MACRO_EXPORTS,\n     Deny,\n-    \"detects duplicate macro exports\"\n+    \"detects duplicate macro exports\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n+        edition: Some(Edition::Edition2018),\n+    };\n }\n \n declare_lint! {\n@@ -326,13 +397,21 @@ declare_lint! {\n declare_lint! {\n     pub WHERE_CLAUSES_OBJECT_SAFETY,\n     Warn,\n-    \"checks the object safety of where clauses\"\n+    \"checks the object safety of where clauses\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #51443 <https://github.com/rust-lang/rust/issues/51443>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n     Warn,\n-    \"detects proc macro derives using inaccessible names from parent modules\"\n+    \"detects proc macro derives using inaccessible names from parent modules\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #50504 <https://github.com/rust-lang/rust/issues/50504>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -346,7 +425,11 @@ declare_lint! {\n     pub MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n     Deny,\n     \"macro-expanded `macro_export` macros from the current crate \\\n-     cannot be referred to by absolute paths\"\n+     cannot be referred to by absolute paths\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n@@ -359,15 +442,23 @@ declare_lint! {\n     pub INDIRECT_STRUCTURAL_MATCH,\n     // defaulting to allow until rust-lang/rust#62614 is fixed.\n     Allow,\n-    \"pattern with const indirectly referencing non-`#[structural_match]` type\"\n+    \"pattern with const indirectly referencing non-`#[structural_match]` type\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n+        edition: None,\n+    };\n }\n \n /// Some lints that are buffered from `libsyntax`. See `syntax::early_buffered_lints`.\n pub mod parser {\n     declare_lint! {\n         pub ILL_FORMED_ATTRIBUTE_INPUT,\n         Warn,\n-        \"ill-formed attribute inputs that were previously accepted and used in practice\"\n+        \"ill-formed attribute inputs that were previously accepted and used in practice\",\n+        @future_incompatible = super::FutureIncompatibleInfo {\n+            reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n+            edition: None,\n+        };\n     }\n \n     declare_lint! {\n@@ -387,31 +478,47 @@ declare_lint! {\n     pub DEPRECATED_IN_FUTURE,\n     Allow,\n     \"detects use of items that will be deprecated in a future version\",\n-    report_in_external_macro: true\n+    report_in_external_macro\n }\n \n declare_lint! {\n     pub AMBIGUOUS_ASSOCIATED_ITEMS,\n     Deny,\n-    \"ambiguous associated items\"\n+    \"ambiguous associated items\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub NESTED_IMPL_TRAIT,\n     Warn,\n-    \"nested occurrence of `impl Trait` type\"\n+    \"nested occurrence of `impl Trait` type\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub MUTABLE_BORROW_RESERVATION_CONFLICT,\n     Warn,\n-    \"reservation of a two-phased borrow conflicts with other shared borrows\"\n+    \"reservation of a two-phased borrow conflicts with other shared borrows\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n+        edition: None,\n+    };\n }\n \n declare_lint! {\n     pub SOFT_UNSTABLE,\n     Deny,\n-    \"a feature gate that doesn't break dependent crates\"\n+    \"a feature gate that doesn't break dependent crates\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n+        edition: None,\n+    };\n }\n \n declare_lint_pass! {"}, {"sha": "595b715c02ef6a0b7b6f5fa88af9e85bb9d426f5", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 84, "deletions": 154, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -22,11 +22,11 @@ use crate::hir::intravisit as hir_visit;\n use crate::hir::intravisit::Visitor;\n use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n use crate::lint::{EarlyLintPass, LateLintPass, EarlyLintPassObject, LateLintPassObject};\n-use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n+use crate::lint::{Level, Lint, LintId, LintPass, LintBuffer, FutureIncompatibleInfo};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::middle::privacy::AccessLevels;\n-use crate::session::{config, early_error, Session};\n+use crate::session::Session;\n use crate::ty::{self, print::Printer, subst::GenericArg, TyCtxt, Ty};\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::util::nodemap::FxHashMap;\n@@ -35,10 +35,9 @@ use crate::util::common::time;\n use errors::DiagnosticBuilder;\n use std::slice;\n use std::default::Default as StdDefault;\n-use rustc_data_structures::sync::{ReadGuard, Lock, ParallelIterator, join, par_iter};\n+use rustc_data_structures::sync::{self, ParallelIterator, join, par_iter};\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use syntax::ast;\n-use syntax::edition;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n@@ -50,24 +49,25 @@ use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n pub struct LintStore {\n     /// Registered lints. The bool is true if the lint was\n     /// added by a plugin.\n-    lints: Vec<(&'static Lint, bool)>,\n+    lints: Vec<&'static Lint>,\n \n-    /// Trait objects for each lint pass.\n-    /// This is only `None` while performing a lint pass.\n-    pre_expansion_passes: Option<Vec<EarlyLintPassObject>>,\n-    early_passes: Option<Vec<EarlyLintPassObject>>,\n-    late_passes: Lock<Option<Vec<LateLintPassObject>>>,\n-    late_module_passes: Vec<LateLintPassObject>,\n+    /// Constructor functions for each variety of lint pass.\n+    ///\n+    /// These should only be called once, but since we want to avoid locks or\n+    /// interior mutability, we don't enforce this (and lints should, in theory,\n+    /// be compatible with being constructed more than once, though not\n+    /// necessarily in a sane manner. This is safe though.)\n+    pre_expansion_passes: Vec<Box<dyn Fn() -> EarlyLintPassObject + sync::Send + sync::Sync>>,\n+    early_passes: Vec<Box<dyn Fn() -> EarlyLintPassObject + sync::Send + sync::Sync>>,\n+    late_passes: Vec<Box<dyn Fn() -> LateLintPassObject + sync::Send + sync::Sync>>,\n+    /// This is unique in that we construct them per-module, so not once.\n+    late_module_passes: Vec<Box<dyn Fn() -> LateLintPassObject + sync::Send + sync::Sync>>,\n \n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n \n     /// Map of registered lint groups to what lints they expand to.\n     lint_groups: FxHashMap<&'static str, LintGroup>,\n-\n-    /// Extra info for future incompatibility lints, describing the\n-    /// issue or RFC that caused the incompatibility.\n-    future_incompatible: FxHashMap<LintId, FutureIncompatibleInfo>,\n }\n \n /// Lints that are buffered up early on in the `Session` before the\n@@ -81,18 +81,6 @@ pub struct BufferedEarlyLint {\n     pub diagnostic: BuiltinLintDiagnostics,\n }\n \n-/// Extra information for a future incompatibility lint. See the call\n-/// to `register_future_incompatible` in `librustc_lint/lib.rs` for\n-/// guidelines.\n-pub struct FutureIncompatibleInfo {\n-    pub id: LintId,\n-    /// e.g., a URL for an issue/PR/RFC or error code\n-    pub reference: &'static str,\n-    /// If this is an edition fixing lint, the edition in which\n-    /// this lint becomes obsolete\n-    pub edition: Option<edition::Edition>,\n-}\n-\n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target\n@@ -142,17 +130,16 @@ impl LintStore {\n     pub fn new() -> LintStore {\n         LintStore {\n             lints: vec![],\n-            pre_expansion_passes: Some(vec![]),\n-            early_passes: Some(vec![]),\n-            late_passes: Lock::new(Some(vec![])),\n+            pre_expansion_passes: vec![],\n+            early_passes: vec![],\n+            late_passes: vec![],\n             late_module_passes: vec![],\n             by_name: Default::default(),\n-            future_incompatible: Default::default(),\n             lint_groups: Default::default(),\n         }\n     }\n \n-    pub fn get_lints<'t>(&'t self) -> &'t [(&'static Lint, bool)] {\n+    pub fn get_lints<'t>(&'t self) -> &'t [&'static Lint] {\n         &self.lints\n     }\n \n@@ -168,99 +155,64 @@ impl LintStore {\n             .collect()\n     }\n \n-    pub fn register_early_pass(&mut self,\n-                               sess: Option<&Session>,\n-                               from_plugin: bool,\n-                               register_only: bool,\n-                               pass: EarlyLintPassObject) {\n-        self.push_pass(sess, from_plugin, &pass);\n-        if !register_only {\n-            self.early_passes.as_mut().unwrap().push(pass);\n-        }\n+    pub fn register_early_pass(\n+        &mut self,\n+        pass: impl Fn() -> EarlyLintPassObject + 'static + sync::Send + sync::Sync\n+    ) {\n+        self.early_passes.push(Box::new(pass));\n     }\n \n     pub fn register_pre_expansion_pass(\n         &mut self,\n-        sess: Option<&Session>,\n-        from_plugin: bool,\n-        register_only: bool,\n-        pass: EarlyLintPassObject,\n+        pass: impl Fn() -> EarlyLintPassObject + 'static + sync::Send + sync::Sync,\n     ) {\n-        self.push_pass(sess, from_plugin, &pass);\n-        if !register_only {\n-            self.pre_expansion_passes.as_mut().unwrap().push(pass);\n-        }\n+        self.pre_expansion_passes.push(Box::new(pass));\n     }\n \n-    pub fn register_late_pass(&mut self,\n-                              sess: Option<&Session>,\n-                              from_plugin: bool,\n-                              register_only: bool,\n-                              per_module: bool,\n-                              pass: LateLintPassObject) {\n-        self.push_pass(sess, from_plugin, &pass);\n-        if !register_only {\n-            if per_module {\n-                self.late_module_passes.push(pass);\n-            } else {\n-                self.late_passes.lock().as_mut().unwrap().push(pass);\n-            }\n-        }\n+    pub fn register_late_pass(\n+        &mut self,\n+        pass: impl Fn() -> LateLintPassObject + 'static + sync::Send + sync::Sync,\n+    ) {\n+        self.late_passes.push(Box::new(pass));\n+    }\n+\n+    pub fn register_late_mod_pass(\n+        &mut self,\n+        pass: impl Fn() -> LateLintPassObject + 'static + sync::Send + sync::Sync,\n+    ) {\n+        self.late_module_passes.push(Box::new(pass));\n     }\n \n     // Helper method for register_early/late_pass\n-    fn push_pass<P: LintPass + ?Sized + 'static>(&mut self,\n-                                        sess: Option<&Session>,\n-                                        from_plugin: bool,\n-                                        pass: &Box<P>) {\n-        for lint in pass.get_lints() {\n-            self.lints.push((lint, from_plugin));\n+    pub fn register_lints(&mut self, lints: &[&'static Lint]) {\n+        for lint in lints {\n+            self.lints.push(lint);\n \n             let id = LintId::of(lint);\n             if self.by_name.insert(lint.name_lower(), Id(id)).is_some() {\n-                let msg = format!(\"duplicate specification of lint {}\", lint.name_lower());\n-                match (sess, from_plugin) {\n-                    // We load builtin lints first, so a duplicate is a compiler bug.\n-                    // Use early_error when handling -W help with no crate.\n-                    (None, _) => early_error(config::ErrorOutputType::default(), &msg[..]),\n-                    (Some(_), false) => bug!(\"{}\", msg),\n-\n-                    // A duplicate name from a plugin is a user error.\n-                    (Some(sess), true)  => sess.err(&msg[..]),\n-                }\n+                bug!(\"duplicate specification of lint {}\", lint.name_lower())\n             }\n-        }\n-    }\n \n-    pub fn register_future_incompatible(&mut self,\n-                                        sess: Option<&Session>,\n-                                        lints: Vec<FutureIncompatibleInfo>) {\n+            if let Some(FutureIncompatibleInfo { edition, .. }) = lint.future_incompatible {\n+                if let Some(edition) = edition {\n+                    self.lint_groups.entry(edition.lint_name())\n+                        .or_insert(LintGroup {\n+                            lint_ids: vec![],\n+                            from_plugin: lint.is_plugin,\n+                            depr: None,\n+                        })\n+                        .lint_ids.push(id);\n+                }\n \n-        for edition in edition::ALL_EDITIONS {\n-            let lints = lints.iter().filter(|f| f.edition == Some(*edition)).map(|f| f.id)\n-                             .collect::<Vec<_>>();\n-            if !lints.is_empty() {\n-                self.register_group(sess, false, edition.lint_name(), None, lints)\n+                self.lint_groups.entry(\"future_incompatible\")\n+                    .or_insert(LintGroup {\n+                        lint_ids: vec![],\n+                        from_plugin: lint.is_plugin,\n+                        depr: None,\n+                    })\n+                    .lint_ids.push(id);\n             }\n         }\n-\n-        let mut future_incompatible = Vec::with_capacity(lints.len());\n-        for lint in lints {\n-            future_incompatible.push(lint.id);\n-            self.future_incompatible.insert(lint.id, lint);\n-        }\n-\n-        self.register_group(\n-            sess,\n-            false,\n-            \"future_incompatible\",\n-            None,\n-            future_incompatible,\n-        );\n-    }\n-\n-    pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {\n-        self.future_incompatible.get(&id)\n     }\n \n     pub fn register_group_alias(\n@@ -277,7 +229,6 @@ impl LintStore {\n \n     pub fn register_group(\n         &mut self,\n-        sess: Option<&Session>,\n         from_plugin: bool,\n         name: &'static str,\n         deprecated_name: Option<&'static str>,\n@@ -300,16 +251,7 @@ impl LintStore {\n         }\n \n         if !new {\n-            let msg = format!(\"duplicate specification of lint group {}\", name);\n-            match (sess, from_plugin) {\n-                // We load builtin lints first, so a duplicate is a compiler bug.\n-                // Use early_error when handling -W help with no crate.\n-                (None, _) => early_error(config::ErrorOutputType::default(), &msg[..]),\n-                (Some(_), false) => bug!(\"{}\", msg),\n-\n-                // A duplicate name from a plugin is a user error.\n-                (Some(sess), true)  => sess.err(&msg[..]),\n-            }\n+            bug!(\"duplicate specification of lint group {}\", name);\n         }\n     }\n \n@@ -522,7 +464,7 @@ pub struct LateContext<'a, 'tcx> {\n     pub access_levels: &'a AccessLevels,\n \n     /// The store of registered lints and the lint levels.\n-    lint_store: ReadGuard<'a, LintStore>,\n+    lint_store: &'tcx LintStore,\n \n     last_node_with_lint_attrs: hir::HirId,\n \n@@ -550,7 +492,7 @@ pub struct EarlyContext<'a> {\n     builder: LintLevelsBuilder<'a>,\n \n     /// The store of registered lints and the lint levels.\n-    lint_store: ReadGuard<'a, LintStore>,\n+    lint_store: &'a LintStore,\n \n     buffered: LintBuffer,\n }\n@@ -639,14 +581,15 @@ pub trait LintContext: Sized {\n impl<'a> EarlyContext<'a> {\n     fn new(\n         sess: &'a Session,\n+        lint_store: &'a LintStore,\n         krate: &'a ast::Crate,\n         buffered: LintBuffer,\n     ) -> EarlyContext<'a> {\n         EarlyContext {\n             sess,\n             krate,\n-            lint_store: sess.lint_store.borrow(),\n-            builder: LintLevelSets::builder(sess),\n+            lint_store,\n+            builder: LintLevelSets::builder(sess, lint_store),\n             buffered,\n         }\n     }\n@@ -681,7 +624,7 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n                           f: F)\n         where F: FnOnce(&mut Self)\n     {\n-        let push = self.context.builder.push(attrs);\n+        let push = self.context.builder.push(attrs, &self.context.lint_store);\n         self.check_id(id);\n         self.enter_attrs(attrs);\n         f(self);\n@@ -1355,10 +1298,6 @@ impl LintPass for LateLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()\n     }\n-\n-    fn get_lints(&self) -> LintArray {\n-        panic!()\n-    }\n }\n \n macro_rules! expand_late_lint_pass_impl_methods {\n@@ -1393,7 +1332,7 @@ fn late_lint_mod_pass<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n         tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(),\n         access_levels,\n-        lint_store: tcx.sess.lint_store.borrow(),\n+        lint_store: &tcx.lint_store,\n         last_node_with_lint_attrs: tcx.hir().as_local_hir_id(module_def_id).unwrap(),\n         generics: None,\n         only_module: true,\n@@ -1425,8 +1364,8 @@ pub fn late_lint_mod<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n \n     late_lint_mod_pass(tcx, module_def_id, builtin_lints);\n \n-    let mut passes: Vec<_> = tcx.sess.lint_store.borrow().late_module_passes\n-                                .iter().map(|pass| pass.fresh_late_pass()).collect();\n+    let mut passes: Vec<_> = tcx.lint_store.late_module_passes\n+                                .iter().map(|pass| (pass)()).collect();\n \n     if !passes.is_empty() {\n         late_lint_mod_pass(tcx, module_def_id, LateLintPassObjects { lints: &mut passes[..] });\n@@ -1443,7 +1382,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tc\n         tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(),\n         access_levels,\n-        lint_store: tcx.sess.lint_store.borrow(),\n+        lint_store: &tcx.lint_store,\n         last_node_with_lint_attrs: hir::CRATE_HIR_ID,\n         generics: None,\n         only_module: false,\n@@ -1467,7 +1406,8 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tc\n }\n \n fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints: T) {\n-    let mut passes = tcx.sess.lint_store.borrow().late_passes.lock().take().unwrap();\n+    let mut passes = tcx.lint_store\n+        .late_passes.iter().map(|p| (p)()).collect::<Vec<_>>();\n \n     if !tcx.sess.opts.debugging_opts.no_interleave_lints {\n         if !passes.is_empty() {\n@@ -1482,18 +1422,15 @@ fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tcx>, b\n             });\n         }\n \n-        let mut passes: Vec<_> = tcx.sess.lint_store.borrow().late_module_passes\n-                                    .iter().map(|pass| pass.fresh_late_pass()).collect();\n+        let mut passes: Vec<_> = tcx.lint_store.late_module_passes\n+                                    .iter().map(|pass| (pass)()).collect();\n \n         for pass in &mut passes {\n             time(tcx.sess, &format!(\"running late module lint: {}\", pass.name()), || {\n                 late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n             });\n         }\n     }\n-\n-    // Put the passes back in the session.\n-    *tcx.sess.lint_store.borrow().late_passes.lock() = Some(passes);\n }\n \n /// Performs lint checking on a crate.\n@@ -1525,10 +1462,6 @@ impl LintPass for EarlyLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()\n     }\n-\n-    fn get_lints(&self) -> LintArray {\n-        panic!()\n-    }\n }\n \n macro_rules! expand_early_lint_pass_impl_methods {\n@@ -1553,12 +1486,13 @@ early_lint_methods!(early_lint_pass_impl, []);\n \n fn early_lint_crate<T: EarlyLintPass>(\n     sess: &Session,\n+    lint_store: &LintStore,\n     krate: &ast::Crate,\n     pass: T,\n     buffered: LintBuffer,\n ) -> LintBuffer {\n     let mut cx = EarlyContextAndPass {\n-        context: EarlyContext::new(sess, krate, buffered),\n+        context: EarlyContext::new(sess, lint_store, krate, buffered),\n         pass,\n     };\n \n@@ -1577,28 +1511,30 @@ fn early_lint_crate<T: EarlyLintPass>(\n \n pub fn check_ast_crate<T: EarlyLintPass>(\n     sess: &Session,\n+    lint_store: &LintStore,\n     krate: &ast::Crate,\n     pre_expansion: bool,\n     builtin_lints: T,\n ) {\n-    let (mut passes, mut buffered) = if pre_expansion {\n+    let (mut passes, mut buffered): (Vec<_>, _) = if pre_expansion {\n         (\n-            sess.lint_store.borrow_mut().pre_expansion_passes.take().unwrap(),\n+            lint_store.pre_expansion_passes.iter().map(|p| (p)()).collect(),\n             LintBuffer::default(),\n         )\n     } else {\n         (\n-            sess.lint_store.borrow_mut().early_passes.take().unwrap(),\n+            lint_store.early_passes.iter().map(|p| (p)()).collect(),\n             sess.buffered_lints.borrow_mut().take().unwrap(),\n         )\n     };\n \n     if !sess.opts.debugging_opts.no_interleave_lints {\n-        buffered = early_lint_crate(sess, krate, builtin_lints, buffered);\n+        buffered = early_lint_crate(sess, lint_store, krate, builtin_lints, buffered);\n \n         if !passes.is_empty() {\n             buffered = early_lint_crate(\n                 sess,\n+                lint_store,\n                 krate,\n                 EarlyLintPassObjects { lints: &mut passes[..] },\n                 buffered,\n@@ -1609,6 +1545,7 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n             buffered = time(sess, &format!(\"running lint: {}\", pass.name()), || {\n                 early_lint_crate(\n                     sess,\n+                    lint_store,\n                     krate,\n                     EarlyLintPassObjects { lints: slice::from_mut(pass) },\n                     buffered,\n@@ -1617,13 +1554,6 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n         }\n     }\n \n-    // Put the lint store levels and passes back in the session.\n-    if pre_expansion {\n-        sess.lint_store.borrow_mut().pre_expansion_passes = Some(passes);\n-    } else {\n-        sess.lint_store.borrow_mut().early_passes = Some(passes);\n-    }\n-\n     // All of the buffered lints should have been emitted at this point.\n     // If not, that means that we somehow buffered a lint for a node id\n     // that was not lint-checked (perhaps it doesn't exist?). This is a bug.\n@@ -1653,7 +1583,7 @@ impl Decodable for LintId {\n     fn decode<D: Decoder>(d: &mut D) -> Result<LintId, D::Error> {\n         let s = d.read_str()?;\n         ty::tls::with(|tcx| {\n-            match tcx.sess.lint_store.borrow().find_lints(&s) {\n+            match tcx.lint_store.find_lints(&s) {\n                 Ok(ids) => {\n                     if ids.len() != 0 {\n                         panic!(\"invalid lint-id `{}`\", s);"}, {"sha": "4c60492e470c2ebd12694a9da05e69db30155719", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -3,7 +3,7 @@ use std::cmp;\n use crate::hir::HirId;\n use crate::ich::StableHashingContext;\n use crate::lint::builtin;\n-use crate::lint::context::CheckLintNameResult;\n+use crate::lint::context::{LintStore, CheckLintNameResult};\n use crate::lint::{self, Lint, LintId, Level, LintSource};\n use crate::session::Session;\n use crate::util::nodemap::FxHashMap;\n@@ -35,21 +35,20 @@ enum LintSet {\n }\n \n impl LintLevelSets {\n-    pub fn new(sess: &Session) -> LintLevelSets {\n+    pub fn new(sess: &Session, lint_store: &LintStore) -> LintLevelSets {\n         let mut me = LintLevelSets {\n             list: Vec::new(),\n             lint_cap: Level::Forbid,\n         };\n-        me.process_command_line(sess);\n+        me.process_command_line(sess, lint_store);\n         return me\n     }\n \n-    pub fn builder(sess: &Session) -> LintLevelsBuilder<'_> {\n-        LintLevelsBuilder::new(sess, LintLevelSets::new(sess))\n+    pub fn builder<'a>(sess: &'a Session, store: &LintStore) -> LintLevelsBuilder<'a> {\n+        LintLevelsBuilder::new(sess, LintLevelSets::new(sess, store))\n     }\n \n-    fn process_command_line(&mut self, sess: &Session) {\n-        let store = sess.lint_store.borrow();\n+    fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n         let mut specs = FxHashMap::default();\n         self.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n@@ -186,9 +185,8 @@ impl<'a> LintLevelsBuilder<'a> {\n     ///   #[allow]\n     ///\n     /// Don't forget to call `pop`!\n-    pub fn push(&mut self, attrs: &[ast::Attribute]) -> BuilderPush {\n+    pub fn push(&mut self, attrs: &[ast::Attribute], store: &LintStore) -> BuilderPush {\n         let mut specs = FxHashMap::default();\n-        let store = self.sess.lint_store.borrow();\n         let sess = self.sess;\n         let bad_attr = |span| {\n             struct_span_err!(sess, span, E0452, \"malformed lint attribute input\")"}, {"sha": "3c35bdae66e9d5ab2f9721d53f50104be82459bc", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 64, "deletions": 39, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -45,7 +45,7 @@ use syntax_pos::Span;\n \n pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate, late_lint_mod, CheckLintNameResult,\n-                        FutureIncompatibleInfo, BufferedEarlyLint,};\n+                        BufferedEarlyLint,};\n \n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]\n@@ -76,9 +76,35 @@ pub struct Lint {\n \n     /// `true` if this lint is reported even inside expansions of external macros.\n     pub report_in_external_macro: bool,\n+\n+    pub future_incompatible: Option<FutureIncompatibleInfo>,\n+\n+    pub is_plugin: bool,\n+}\n+\n+/// Extra information for a future incompatibility lint.\n+#[derive(Copy, Clone, Debug)]\n+pub struct FutureIncompatibleInfo {\n+    /// e.g., a URL for an issue/PR/RFC or error code\n+    pub reference: &'static str,\n+    /// If this is an edition fixing lint, the edition in which\n+    /// this lint becomes obsolete\n+    pub edition: Option<Edition>,\n }\n \n impl Lint {\n+    pub const fn default_fields_for_macro() -> Self {\n+        Lint {\n+            name: \"\",\n+            default_level: Level::Forbid,\n+            desc: \"\",\n+            edition_lint_opts: None,\n+            is_plugin: false,\n+            report_in_external_macro: false,\n+            future_incompatible: None,\n+        }\n+    }\n+\n     /// Returns the `rust::lint::Lint` for a `syntax::early_buffered_lints::BufferedEarlyLintId`.\n     pub fn from_parser_lint_id(lint_id: BufferedEarlyLintId) -> &'static Self {\n         match lint_id {\n@@ -105,18 +131,21 @@ impl Lint {\n #[macro_export]\n macro_rules! declare_lint {\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n-        declare_lint!{$vis $NAME, $Level, $desc, false}\n-    );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, report_in_external_macro: $rep: expr) => (\n-        declare_lint!{$vis $NAME, $Level, $desc, $rep}\n+        declare_lint!(\n+            $vis $NAME, $Level, $desc,\n+        );\n     );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $external: expr) => (\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n+     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n             desc: $desc,\n             edition_lint_opts: None,\n-            report_in_external_macro: $external,\n+            is_plugin: false,\n+            $($v: true,)*\n+            $(future_incompatible: Some($fi),)*\n+            ..$crate::lint::Lint::default_fields_for_macro()\n         };\n     );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n@@ -128,6 +157,7 @@ macro_rules! declare_lint {\n             desc: $desc,\n             edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n             report_in_external_macro: false,\n+            is_plugin: false,\n         };\n     );\n }\n@@ -156,6 +186,8 @@ macro_rules! declare_tool_lint {\n             desc: $desc,\n             edition_lint_opts: None,\n             report_in_external_macro: $external,\n+            future_incompatible: None,\n+            is_plugin: true,\n         };\n     );\n }\n@@ -173,14 +205,6 @@ pub type LintArray = Vec<&'static Lint>;\n \n pub trait LintPass {\n     fn name(&self) -> &'static str;\n-\n-    /// Gets descriptions of the lints this `LintPass` object can emit.\n-    ///\n-    /// N.B., there is no enforcement that the object only emits lints it registered.\n-    /// And some `rustc` internal `LintPass`es register lints to be emitted by other\n-    /// parts of the compiler. If you want enforced access restrictions for your\n-    /// `Lint`, make it a private `static` item in its own module.\n-    fn get_lints(&self) -> LintArray;\n }\n \n /// Implements `LintPass for $name` with the given list of `Lint` statics.\n@@ -189,7 +213,9 @@ macro_rules! impl_lint_pass {\n     ($name:ident => [$($lint:expr),* $(,)?]) => {\n         impl LintPass for $name {\n             fn name(&self) -> &'static str { stringify!($name) }\n-            fn get_lints(&self) -> LintArray { $crate::lint_array!($($lint),*) }\n+        }\n+        impl $name {\n+            pub fn get_lints() -> LintArray { $crate::lint_array!($($lint),*) }\n         }\n     };\n }\n@@ -287,9 +313,6 @@ macro_rules! expand_lint_pass_methods {\n macro_rules! declare_late_lint_pass {\n     ([], [$hir:tt], [$($methods:tt)*]) => (\n         pub trait LateLintPass<'a, $hir>: LintPass {\n-            fn fresh_late_pass(&self) -> LateLintPassObject {\n-                panic!()\n-            }\n             expand_lint_pass_methods!(&LateContext<'a, $hir>, [$($methods)*]);\n         }\n     )\n@@ -327,6 +350,12 @@ macro_rules! declare_combined_late_lint_pass {\n                     $($passes: $constructor,)*\n                 }\n             }\n+\n+            $v fn get_lints() -> LintArray {\n+                let mut lints = Vec::new();\n+                $(lints.extend_from_slice(&$passes::get_lints());)*\n+                lints\n+            }\n         }\n \n         impl<'a, 'tcx> LateLintPass<'a, 'tcx> for $name {\n@@ -337,12 +366,6 @@ macro_rules! declare_combined_late_lint_pass {\n             fn name(&self) -> &'static str {\n                 panic!()\n             }\n-\n-            fn get_lints(&self) -> LintArray {\n-                let mut lints = Vec::new();\n-                $(lints.extend_from_slice(&self.$passes.get_lints());)*\n-                lints\n-            }\n         }\n     )\n }\n@@ -454,6 +477,12 @@ macro_rules! declare_combined_early_lint_pass {\n                     $($passes: $constructor,)*\n                 }\n             }\n+\n+            $v fn get_lints() -> LintArray {\n+                let mut lints = Vec::new();\n+                $(lints.extend_from_slice(&$passes::get_lints());)*\n+                lints\n+            }\n         }\n \n         impl EarlyLintPass for $name {\n@@ -464,12 +493,6 @@ macro_rules! declare_combined_early_lint_pass {\n             fn name(&self) -> &'static str {\n                 panic!()\n             }\n-\n-            fn get_lints(&self) -> LintArray {\n-                let mut lints = Vec::new();\n-                $(lints.extend_from_slice(&self.$passes.get_lints());)*\n-                lints\n-            }\n         }\n     )\n }\n@@ -649,9 +672,8 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     };\n \n     // Check for future incompatibility lints and issue a stronger warning.\n-    let lints = sess.lint_store.borrow();\n     let lint_id = LintId::of(lint);\n-    let future_incompatible = lints.future_incompatible(lint_id);\n+    let future_incompatible = lint.future_incompatible;\n \n     // If this code originates in a foreign macro, aka something that this crate\n     // did not itself author, then it's likely that there's nothing this crate\n@@ -755,13 +777,15 @@ pub fn maybe_lint_level_root(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n \n fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n+    let store = &tcx.lint_store;\n     let mut builder = LintLevelMapBuilder {\n-        levels: LintLevelSets::builder(tcx.sess),\n+        levels: LintLevelSets::builder(tcx.sess, &store),\n         tcx: tcx,\n+        store: store,\n     };\n     let krate = tcx.hir().krate();\n \n-    let push = builder.levels.push(&krate.attrs);\n+    let push = builder.levels.push(&krate.attrs, &store);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     for macro_def in &krate.exported_macros {\n        builder.levels.register_id(macro_def.hir_id);\n@@ -772,19 +796,20 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     tcx.arena.alloc(builder.levels.build_map())\n }\n \n-struct LintLevelMapBuilder<'tcx> {\n+struct LintLevelMapBuilder<'a, 'tcx> {\n     levels: levels::LintLevelsBuilder<'tcx>,\n     tcx: TyCtxt<'tcx>,\n+    store: &'a LintStore,\n }\n \n-impl LintLevelMapBuilder<'tcx> {\n+impl LintLevelMapBuilder<'_, '_> {\n     fn with_lint_attrs<F>(&mut self,\n                           id: hir::HirId,\n                           attrs: &[ast::Attribute],\n                           f: F)\n         where F: FnOnce(&mut Self)\n     {\n-        let push = self.levels.push(attrs);\n+        let push = self.levels.push(attrs, self.store);\n         if push.changed {\n             self.levels.register_id(id);\n         }\n@@ -793,7 +818,7 @@ impl LintLevelMapBuilder<'tcx> {\n     }\n }\n \n-impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n+impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }"}, {"sha": "bd2460cfab116ed3b17de3c7c591ce2f78495aae", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -14,7 +14,7 @@ use crate::util::common::{duration_to_secs_str, ErrorReported};\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{\n-    self, Lrc, Lock, OneThread, Once, RwLock, AtomicU64, AtomicUsize, Ordering,\n+    self, Lrc, Lock, OneThread, Once, AtomicU64, AtomicUsize, Ordering,\n     Ordering::SeqCst,\n };\n \n@@ -77,9 +77,11 @@ pub struct Session {\n     /// if the value stored here has been affected by path remapping.\n     pub working_dir: (PathBuf, bool),\n \n-    // FIXME: `lint_store` and `buffered_lints` are not thread-safe,\n-    // but are only used in a single thread.\n-    pub lint_store: RwLock<lint::LintStore>,\n+    /// This is intended to be used from a single thread.\n+    ///\n+    /// FIXME: there was a previous comment about this not being thread safe,\n+    /// but it's not clear how or why that's the case. The LintBuffer itself is certainly thread\n+    /// safe at least from a \"Rust safety\" standpoint.\n     pub buffered_lints: Lock<Option<lint::LintBuffer>>,\n \n     /// Set of `(DiagnosticId, Option<Span>, message)` tuples tracking\n@@ -1213,7 +1215,6 @@ fn build_session_(\n         sysroot,\n         local_crate_source_file,\n         working_dir,\n-        lint_store: RwLock::new(lint::LintStore::new()),\n         buffered_lints: Lock::new(Some(Default::default())),\n         one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),"}, {"sha": "e630aaa8f486d2ba378df67a7b5d2f0b7dfd2003", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -1031,6 +1031,8 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub sess: &'tcx Session,\n \n+    pub lint_store: Lrc<lint::LintStore>,\n+\n     pub dep_graph: DepGraph,\n \n     pub prof: SelfProfilerRef,\n@@ -1192,6 +1194,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_global_ctxt(\n         s: &'tcx Session,\n+        lint_store: Lrc<lint::LintStore>,\n         cstore: &'tcx CrateStoreDyn,\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n@@ -1255,6 +1258,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         GlobalCtxt {\n             sess: s,\n+            lint_store,\n             cstore,\n             arena: WorkerLocal::new(|_| Arena::default()),\n             interners,"}, {"sha": "a9e4e6db1c75f1d238c3b7f951d1492cc6c2cdce", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -16,6 +16,7 @@ log = \"0.4\"\n env_logger = { version = \"0.7\", default-features = false }\n rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n+rustc_lint = { path = \"../librustc_lint\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "5d9dec14c6c8eeafedfa0554cf9a9b6306fede62", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -106,6 +106,8 @@ pub fn abort_on_err<T>(result: Result<T, ErrorReported>, sess: &Session) -> T {\n pub trait Callbacks {\n     /// Called before creating the compiler instance\n     fn config(&mut self, _config: &mut interface::Config) {}\n+    /// Called early during compilation to allow other drivers to easily register lints.\n+    fn extra_lints(&mut self, _ls: &mut lint::LintStore) {}\n     /// Called after parsing. Return value instructs the compiler whether to\n     /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n     fn after_parsing(&mut self, _compiler: &interface::Compiler) -> Compilation {\n@@ -182,6 +184,7 @@ pub fn run_compiler(\n             stderr: None,\n             crate_name: None,\n             lint_caps: Default::default(),\n+            register_lints: None,\n         };\n         callbacks.config(&mut config);\n         config\n@@ -202,9 +205,13 @@ pub fn run_compiler(\n                     interface::run_compiler(config, |compiler| {\n                         let sopts = &compiler.session().opts;\n                         if sopts.describe_lints {\n+                            let lint_store = rustc_lint::new_lint_store(\n+                                sopts.debugging_opts.no_interleave_lints,\n+                                compiler.session().unstable_options(),\n+                            );\n                             describe_lints(\n                                 compiler.session(),\n-                                &*compiler.session().lint_store.borrow(),\n+                                &lint_store,\n                                 false\n                             );\n                             return;\n@@ -255,6 +262,7 @@ pub fn run_compiler(\n         stderr: None,\n         crate_name: None,\n         lint_caps: Default::default(),\n+        register_lints: None,\n     };\n \n     callbacks.config(&mut config);\n@@ -321,12 +329,14 @@ pub fn run_compiler(\n             return sess.compile_status();\n         }\n \n-        compiler.register_plugins()?;\n+        {\n+            let (_, _, lint_store) = &*compiler.register_plugins()?.peek();\n \n-        // Lint plugins are registered; now we can process command line flags.\n-        if sess.opts.describe_lints {\n-            describe_lints(&sess, &sess.lint_store.borrow(), true);\n-            return sess.compile_status();\n+            // Lint plugins are registered; now we can process command line flags.\n+            if sess.opts.describe_lints {\n+                describe_lints(&sess, &lint_store, true);\n+                return sess.compile_status();\n+            }\n         }\n \n         compiler.expansion()?;\n@@ -835,8 +845,7 @@ Available lint options:\n \n \");\n \n-    fn sort_lints(sess: &Session, lints: Vec<(&'static Lint, bool)>) -> Vec<&'static Lint> {\n-        let mut lints: Vec<_> = lints.into_iter().map(|(x, _)| x).collect();\n+    fn sort_lints(sess: &Session, mut lints: Vec<&'static Lint>) -> Vec<&'static Lint> {\n         // The sort doesn't case-fold but it's doubtful we care.\n         lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess), x.name));\n         lints\n@@ -852,7 +861,7 @@ Available lint options:\n     let (plugin, builtin): (Vec<_>, _) = lint_store.get_lints()\n                                                    .iter()\n                                                    .cloned()\n-                                                   .partition(|&(_, p)| p);\n+                                                   .partition(|&lint| lint.is_plugin);\n     let plugin = sort_lints(sess, plugin);\n     let builtin = sort_lints(sess, builtin);\n "}, {"sha": "24ea0fc8bf635bb11460a03935675e8e84d675ef", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -39,6 +39,7 @@ pub struct Compiler {\n     pub(crate) queries: Queries,\n     pub(crate) cstore: Lrc<CStore>,\n     pub(crate) crate_name: Option<String>,\n+    pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n }\n \n impl Compiler {\n@@ -137,6 +138,13 @@ pub struct Config {\n \n     pub crate_name: Option<String>,\n     pub lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+\n+    /// This is a callback from the driver that is called when we're registering lints;\n+    /// it is called during plugin registration when we have the LintStore in a non-shared state.\n+    ///\n+    /// Note that if you find a Some here you probably want to call that function in the new\n+    /// function being registered.\n+    pub register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n }\n \n pub fn run_compiler_in_existing_thread_pool<F, R>(config: Config, f: F) -> R\n@@ -165,6 +173,7 @@ where\n         output_file: config.output_file,\n         queries: Default::default(),\n         crate_name: config.crate_name,\n+        register_lints: config.register_lints,\n     };\n \n     let _sess_abort_error = OnDrop(|| {"}, {"sha": "2044b73db8aa990d45215855cf4c843b5f49e3f8", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -117,6 +117,7 @@ declare_box_region_type!(\n /// Returns `None` if we're aborting after handling -W help.\n pub fn configure_and_expand(\n     sess: Lrc<Session>,\n+    lint_store: Lrc<lint::LintStore>,\n     cstore: Lrc<CStore>,\n     krate: ast::Crate,\n     crate_name: &str,\n@@ -134,6 +135,7 @@ pub fn configure_and_expand(\n         let resolver_arenas = Resolver::arenas();\n         let res = configure_and_expand_inner(\n             sess,\n+            &lint_store,\n             &*cstore,\n             krate,\n             &crate_name,\n@@ -225,9 +227,10 @@ pub struct PluginInfo {\n pub fn register_plugins<'a>(\n     sess: &'a Session,\n     cstore: &'a CStore,\n+    register_lints: impl Fn(&Session, &mut lint::LintStore),\n     mut krate: ast::Crate,\n     crate_name: &str,\n-) -> Result<(ast::Crate, PluginInfo)> {\n+) -> Result<(ast::Crate, PluginInfo, Lrc<lint::LintStore>)> {\n     krate = time(sess, \"attributes injection\", || {\n         syntax_ext::cmdline_attrs::inject(\n             krate, &sess.parse_sess, &sess.opts.debugging_opts.crate_attr\n@@ -278,7 +281,14 @@ pub fn register_plugins<'a>(\n         )\n     });\n \n-    let mut registry = Registry::new(sess, krate.span);\n+    let mut lint_store = rustc_lint::new_lint_store(\n+        sess.opts.debugging_opts.no_interleave_lints,\n+        sess.unstable_options(),\n+    );\n+\n+    (register_lints)(&sess, &mut lint_store);\n+\n+    let mut registry = Registry::new(sess, &mut lint_store, krate.span);\n \n     time(sess, \"plugin registration\", || {\n         for registrar in registrars {\n@@ -289,34 +299,20 @@ pub fn register_plugins<'a>(\n \n     let Registry {\n         syntax_exts,\n-        early_lint_passes,\n-        late_lint_passes,\n-        lint_groups,\n         llvm_passes,\n         attributes,\n         ..\n     } = registry;\n \n-    let mut ls = sess.lint_store.borrow_mut();\n-    for pass in early_lint_passes {\n-        ls.register_early_pass(Some(sess), true, false, pass);\n-    }\n-    for pass in late_lint_passes {\n-        ls.register_late_pass(Some(sess), true, false, false, pass);\n-    }\n-\n-    for (name, (to, deprecated_name)) in lint_groups {\n-        ls.register_group(Some(sess), true, name, deprecated_name, to);\n-    }\n-\n     *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n     *sess.plugin_attributes.borrow_mut() = attributes;\n \n-    Ok((krate, PluginInfo { syntax_exts }))\n+    Ok((krate, PluginInfo { syntax_exts }, Lrc::new(lint_store)))\n }\n \n fn configure_and_expand_inner<'a>(\n     sess: &'a Session,\n+    lint_store: &'a lint::LintStore,\n     cstore: &'a CStore,\n     mut krate: ast::Crate,\n     crate_name: &str,\n@@ -327,6 +323,7 @@ fn configure_and_expand_inner<'a>(\n     time(sess, \"pre-AST-expansion lint checks\", || {\n         lint::check_ast_crate(\n             sess,\n+            lint_store,\n             &krate,\n             true,\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new());\n@@ -536,6 +533,7 @@ fn configure_and_expand_inner<'a>(\n \n pub fn lower_to_hir(\n     sess: &Session,\n+    lint_store: &lint::LintStore,\n     cstore: &CStore,\n     resolver: &mut Resolver<'_>,\n     dep_graph: &DepGraph,\n@@ -554,7 +552,13 @@ pub fn lower_to_hir(\n     });\n \n     time(sess, \"early lint checks\", || {\n-        lint::check_ast_crate(sess, &krate, false, rustc_lint::BuiltinCombinedEarlyLintPass::new())\n+        lint::check_ast_crate(\n+            sess,\n+            lint_store,\n+            &krate,\n+            false,\n+            rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n+        )\n     });\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n@@ -817,6 +821,7 @@ impl BoxedGlobalCtxt {\n \n pub fn create_global_ctxt(\n     compiler: &Compiler,\n+    lint_store: Lrc<lint::LintStore>,\n     mut hir_forest: hir::map::Forest,\n     defs: hir::map::Definitions,\n     resolutions: Resolutions,\n@@ -854,6 +859,7 @@ pub fn create_global_ctxt(\n \n         let gcx = TyCtxt::create_global_ctxt(\n             sess,\n+            lint_store,\n             cstore,\n             local_providers,\n             extern_providers,"}, {"sha": "84648ca8326fb8fa59fcf69e052022edaf90fecb", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -2,9 +2,13 @@ use crate::interface::{Compiler, Result};\n use crate::passes::{self, BoxedResolver, ExpansionResult, BoxedGlobalCtxt, PluginInfo};\n \n use rustc_incremental::DepGraphFuture;\n+use rustc_data_structures::sync::Lrc;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::util::common::{time, ErrorReported};\n use rustc::hir;\n+use rustc::lint;\n+use rustc::session::Session;\n+use rustc::lint::LintStore;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::ty::steal::Steal;\n use rustc::dep_graph::DepGraph;\n@@ -74,8 +78,8 @@ pub(crate) struct Queries {\n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n-    register_plugins: Query<(ast::Crate, PluginInfo)>,\n-    expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>)>,\n+    register_plugins: Query<(ast::Crate, PluginInfo, Lrc<LintStore>)>,\n+    expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     lower_to_hir: Query<(Steal<hir::map::Forest>, ExpansionResult)>,\n     prepare_outputs: Query<OutputFilenames>,\n@@ -106,14 +110,19 @@ impl Compiler {\n         })\n     }\n \n-    pub fn register_plugins(&self) -> Result<&Query<(ast::Crate, PluginInfo)>> {\n+    pub fn register_plugins(&self) -> Result<&Query<(ast::Crate, PluginInfo, Lrc<LintStore>)>> {\n         self.queries.register_plugins.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let krate = self.parse()?.take();\n \n+            let empty: &(dyn Fn(&Session, &mut lint::LintStore) + Sync + Send) = &|_, _| {};\n             let result = passes::register_plugins(\n                 self.session(),\n                 self.cstore(),\n+                self.register_lints\n+                    .as_ref()\n+                    .map(|p| &**p)\n+                    .unwrap_or_else(|| empty),\n                 krate,\n                 &crate_name,\n             );\n@@ -148,17 +157,20 @@ impl Compiler {\n \n     pub fn expansion(\n         &self\n-    ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>)>> {\n+    ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>> {\n         self.queries.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n-            let (krate, plugin_info) = self.register_plugins()?.take();\n+            let (krate, plugin_info, lint_store) = self.register_plugins()?.take();\n             passes::configure_and_expand(\n                 self.sess.clone(),\n+                lint_store.clone(),\n                 self.cstore().clone(),\n                 krate,\n                 &crate_name,\n                 plugin_info,\n-            ).map(|(krate, resolver)| (krate, Steal::new(Rc::new(RefCell::new(resolver)))))\n+            ).map(|(krate, resolver)| {\n+                (krate, Steal::new(Rc::new(RefCell::new(resolver))), lint_store)\n+            })\n         })\n     }\n \n@@ -185,9 +197,11 @@ impl Compiler {\n             let peeked = expansion_result.peek();\n             let krate = &peeked.0;\n             let resolver = peeked.1.steal();\n+            let lint_store = &peeked.2;\n             let hir = Steal::new(resolver.borrow_mut().access(|resolver| {\n                 passes::lower_to_hir(\n                     self.session(),\n+                    lint_store,\n                     self.cstore(),\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n@@ -212,11 +226,13 @@ impl Compiler {\n         self.queries.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n+            let lint_store = self.expansion()?.peek().2.clone();\n             let hir = self.lower_to_hir()?;\n             let hir = hir.peek();\n             let (ref hir_forest, ref expansion) = *hir;\n             Ok(passes::create_global_ctxt(\n                 self,\n+                lint_store,\n                 hir_forest.steal(),\n                 expansion.defs.steal(),\n                 expansion.resolutions.steal(),"}, {"sha": "8f11dc93727280c2345cbffca81cab15c0f4ff9d", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -13,7 +13,6 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_errors::registry::Registry;\n-use rustc_lint;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_mir;\n use rustc_passes;\n@@ -108,11 +107,6 @@ pub fn create_session(\n \n     let codegen_backend = get_codegen_backend(&sess);\n \n-    rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n-    if sess.unstable_options() {\n-        rustc_lint::register_internals(&mut sess.lint_store.borrow_mut(), Some(&sess));\n-    }\n-\n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));\n     add_configuration(&mut cfg, &sess, &*codegen_backend);\n     sess.parse_sess.config = cfg;"}, {"sha": "ad674911e6f332c79f7b1b480fb579eb40fcbb8a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -27,6 +27,7 @@ use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::{self, Ty, TyCtxt, layout::VariantIdx};\n use rustc::{lint, util};\n+use rustc::lint::FutureIncompatibleInfo;\n use hir::Node;\n use util::nodemap::HirIdSet;\n use lint::{LateContext, LintContext, LintArray};\n@@ -280,7 +281,7 @@ declare_lint! {\n     pub MISSING_DOCS,\n     Allow,\n     \"detects missing documentation for public members\",\n-    report_in_external_macro: true\n+    report_in_external_macro\n }\n \n pub struct MissingDoc {\n@@ -601,7 +602,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n declare_lint! {\n     pub ANONYMOUS_PARAMETERS,\n     Allow,\n-    \"detects anonymous parameters\"\n+    \"detects anonymous parameters\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n+        edition: Some(Edition::Edition2018),\n+    };\n }\n \n declare_lint_pass!(\n@@ -1344,7 +1349,7 @@ declare_lint! {\n     UNNAMEABLE_TEST_ITEMS,\n     Warn,\n     \"detects an item that cannot be named being marked as `#[test_case]`\",\n-    report_in_external_macro: true\n+    report_in_external_macro\n }\n \n pub struct UnnameableTestItems {\n@@ -1393,7 +1398,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n declare_lint! {\n     pub KEYWORD_IDENTS,\n     Allow,\n-    \"detects edition keywords being used as an identifier\"\n+    \"detects edition keywords being used as an identifier\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n+        edition: Some(Edition::Edition2018),\n+    };\n }\n \n declare_lint_pass!("}, {"sha": "b1beef04c5929bd3b26ac49ede799df78c704628", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 39, "deletions": 197, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -33,27 +33,21 @@ use rustc::lint;\n use rustc::lint::{EarlyContext, LateContext, LateLintPass, EarlyLintPass, LintPass, LintArray};\n use rustc::lint::builtin::{\n     BARE_TRAIT_OBJECTS,\n-    ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n     ELIDED_LIFETIMES_IN_PATHS,\n     EXPLICIT_OUTLIVES_REQUIREMENTS,\n     INTRA_DOC_LINK_RESOLUTION_FAILURE,\n     MISSING_DOC_CODE_EXAMPLES,\n     PRIVATE_DOC_TESTS,\n-    parser::ILL_FORMED_ATTRIBUTE_INPUT,\n };\n-use rustc::session;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n \n use syntax::ast;\n-use syntax::edition::Edition;\n use syntax_pos::Span;\n \n-use session::Session;\n use lint::LintId;\n-use lint::FutureIncompatibleInfo;\n \n use redundant_semicolon::*;\n use nonstandard_style::*;\n@@ -192,59 +186,60 @@ late_lint_passes!(declare_combined_late_pass, [pub BuiltinCombinedLateLintPass])\n \n late_lint_mod_passes!(declare_combined_late_pass, [BuiltinCombinedModuleLateLintPass]);\n \n+pub fn new_lint_store(no_interleave_lints: bool, internal_lints: bool) -> lint::LintStore {\n+    let mut lint_store = lint::LintStore::new();\n+\n+    register_builtins(&mut lint_store, no_interleave_lints);\n+    if internal_lints {\n+        register_internals(&mut lint_store);\n+    }\n+\n+    lint_store\n+}\n+\n /// Tell the `LintStore` about all the built-in lints (the ones\n /// defined in this crate and the ones defined in\n /// `rustc::lint::builtin`).\n-pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n+fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n     macro_rules! add_lint_group {\n-        ($sess:ident, $name:expr, $($lint:ident),*) => (\n-            store.register_group($sess, false, $name, None, vec![$(LintId::of($lint)),*]);\n+        ($name:expr, $($lint:ident),*) => (\n+            store.register_group(false, $name, None, vec![$(LintId::of($lint)),*]);\n         )\n     }\n \n     macro_rules! register_pass {\n-        ($method:ident, $constructor:expr, [$($args:expr),*]) => (\n-            store.$method(sess, false, false, $($args,)* box $constructor);\n+        ($method:ident, $ty:ident, $constructor:expr) => (\n+            store.register_lints(&$ty::get_lints());\n+            store.$method(|| box $constructor);\n         )\n     }\n \n     macro_rules! register_passes {\n-        ([$method:ident, $args:tt], [$($passes:ident: $constructor:expr,)*]) => (\n+        ($method:ident, [$($passes:ident: $constructor:expr,)*]) => (\n             $(\n-                register_pass!($method, $constructor, $args);\n+                register_pass!($method, $passes, $constructor);\n             )*\n         )\n     }\n \n-    if sess.map(|sess| sess.opts.debugging_opts.no_interleave_lints).unwrap_or(false) {\n-        pre_expansion_lint_passes!(register_passes, [register_pre_expansion_pass, []]);\n-        early_lint_passes!(register_passes, [register_early_pass, []]);\n-        late_lint_passes!(register_passes, [register_late_pass, [false]]);\n-        late_lint_mod_passes!(register_passes, [register_late_pass, [true]]);\n+    if no_interleave_lints {\n+        pre_expansion_lint_passes!(register_passes, register_pre_expansion_pass);\n+        early_lint_passes!(register_passes, register_early_pass);\n+        late_lint_passes!(register_passes, register_late_pass);\n+        late_lint_mod_passes!(register_passes, register_late_mod_pass);\n     } else {\n-        store.register_pre_expansion_pass(\n-            sess,\n-            false,\n-            true,\n-            box BuiltinCombinedPreExpansionLintPass::new()\n-        );\n-        store.register_early_pass(sess, false, true, box BuiltinCombinedEarlyLintPass::new());\n-        store.register_late_pass(\n-            sess, false, true, true, box BuiltinCombinedModuleLateLintPass::new()\n-        );\n-        store.register_late_pass(\n-            sess, false, true, false, box BuiltinCombinedLateLintPass::new()\n-        );\n+        store.register_lints(&BuiltinCombinedPreExpansionLintPass::get_lints());\n+        store.register_lints(&BuiltinCombinedEarlyLintPass::get_lints());\n+        store.register_lints(&BuiltinCombinedModuleLateLintPass::get_lints());\n+        store.register_lints(&BuiltinCombinedLateLintPass::get_lints());\n     }\n \n-    add_lint_group!(sess,\n-                    \"nonstandard_style\",\n+    add_lint_group!(\"nonstandard_style\",\n                     NON_CAMEL_CASE_TYPES,\n                     NON_SNAKE_CASE,\n                     NON_UPPER_CASE_GLOBALS);\n \n-    add_lint_group!(sess,\n-                    \"unused\",\n+    add_lint_group!(\"unused\",\n                     UNUSED_IMPORTS,\n                     UNUSED_VARIABLES,\n                     UNUSED_ASSIGNMENTS,\n@@ -265,8 +260,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_LABELS,\n                     UNUSED_PARENS);\n \n-    add_lint_group!(sess,\n-                    \"rust_2018_idioms\",\n+    add_lint_group!(\"rust_2018_idioms\",\n                     BARE_TRAIT_OBJECTS,\n                     UNUSED_EXTERN_CRATES,\n                     ELLIPSIS_INCLUSIVE_RANGE_PATTERNS,\n@@ -282,165 +276,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     // MACRO_USE_EXTERN_CRATE,\n                     );\n \n-    add_lint_group!(sess,\n-                    \"rustdoc\",\n+    add_lint_group!(\"rustdoc\",\n                     INTRA_DOC_LINK_RESOLUTION_FAILURE,\n                     MISSING_DOC_CODE_EXAMPLES,\n                     PRIVATE_DOC_TESTS);\n \n-    // Guidelines for creating a future incompatibility lint:\n-    //\n-    // - Create a lint defaulting to warn as normal, with ideally the same error\n-    //   message you would normally give\n-    // - Add a suitable reference, typically an RFC or tracking issue. Go ahead\n-    //   and include the full URL, sort items in ascending order of issue numbers.\n-    // - Later, change lint to error\n-    // - Eventually, remove lint\n-    store.register_future_incompatible(sess, vec![\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PRIVATE_IN_PUBLIC),\n-            reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PUB_USE_OF_PRIVATE_EXTERN_CRATE),\n-            reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n-            reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(DUPLICATE_MACRO_EXPORTS),\n-            reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(KEYWORD_IDENTS),\n-            reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(SAFE_EXTERN_STATICS),\n-            reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n-            reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n-            reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n-            reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n-            reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n-            reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ANONYMOUS_PARAMETERS),\n-            reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n-            reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n-            reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(SAFE_PACKED_BORROWS),\n-            reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ORDER_DEPENDENT_TRAIT_OBJECTS),\n-            reference: \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n-            reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(UNSTABLE_NAME_COLLISIONS),\n-            reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n-            edition: None,\n-            // Note: this item represents future incompatibility of all unstable functions in the\n-            //       standard library, and thus should never be removed or changed to an error.\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE),\n-            reference: \"issue #53130 <https://github.com/rust-lang/rust/issues/53130>\",\n-            edition: Some(Edition::Edition2018),\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(WHERE_CLAUSES_OBJECT_SAFETY),\n-            reference: \"issue #51443 <https://github.com/rust-lang/rust/issues/51443>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PROC_MACRO_DERIVE_RESOLUTION_FALLBACK),\n-            reference: \"issue #50504 <https://github.com/rust-lang/rust/issues/50504>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS),\n-            reference: \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILL_FORMED_ATTRIBUTE_INPUT),\n-            reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(AMBIGUOUS_ASSOCIATED_ITEMS),\n-            reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(NESTED_IMPL_TRAIT),\n-            reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(MUTABLE_BORROW_RESERVATION_CONFLICT),\n-            reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(INDIRECT_STRUCTURAL_MATCH),\n-            reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n-            edition: None,\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(SOFT_UNSTABLE),\n-            reference: \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n-            edition: None,\n-        },\n-        ]);\n-\n     // Register renamed and removed lints.\n     store.register_renamed(\"single_use_lifetime\", \"single_use_lifetimes\");\n     store.register_renamed(\"elided_lifetime_in_path\", \"elided_lifetimes_in_paths\");\n@@ -496,12 +336,14 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/46205\");\n }\n \n-pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n-    store.register_early_pass(sess, false, false, box DefaultHashTypes::new());\n-    store.register_early_pass(sess, false, false, box LintPassImpl);\n-    store.register_late_pass(sess, false, false, false, box TyTyKind);\n+fn register_internals(store: &mut lint::LintStore) {\n+    store.register_lints(&DefaultHashTypes::get_lints());\n+    store.register_early_pass(|| box DefaultHashTypes::new());\n+    store.register_lints(&LintPassImpl::get_lints());\n+    store.register_early_pass(|| box LintPassImpl);\n+    store.register_lints(&TyTyKind::get_lints());\n+    store.register_late_pass(|| box TyTyKind);\n     store.register_group(\n-        sess,\n         false,\n         \"rustc::internal\",\n         None,"}, {"sha": "61b8cbe369aab20fef07c0e036447e90d94b6e19", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -25,7 +25,7 @@ declare_lint! {\n     pub UNUSED_MUST_USE,\n     Warn,\n     \"unused result of a type flagged as `#[must_use]`\",\n-    report_in_external_macro: true\n+    report_in_external_macro\n }\n \n declare_lint! {"}, {"sha": "2e23b8c870cfcbb68d0609fec81ec3f5793a661a", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -1,8 +1,7 @@\n //! Used by plugin crates to tell `rustc` about the plugins they provide.\n \n-use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n+use rustc::lint::LintStore;\n use rustc::session::Session;\n-use rustc::util::nodemap::FxHashMap;\n \n use syntax_expand::base::{SyntaxExtension, SyntaxExtensionKind, NamedSyntaxExtension};\n use syntax_expand::base::MacroExpanderFn;\n@@ -26,6 +25,9 @@ pub struct Registry<'a> {\n     /// from the plugin registrar.\n     pub sess: &'a Session,\n \n+    /// The `LintStore` allows plugins to register new lints.\n+    pub lint_store: &'a mut LintStore,\n+\n     #[doc(hidden)]\n     pub args_hidden: Option<Vec<ast::NestedMetaItem>>,\n \n@@ -35,15 +37,6 @@ pub struct Registry<'a> {\n     #[doc(hidden)]\n     pub syntax_exts: Vec<NamedSyntaxExtension>,\n \n-    #[doc(hidden)]\n-    pub early_lint_passes: Vec<EarlyLintPassObject>,\n-\n-    #[doc(hidden)]\n-    pub late_lint_passes: Vec<LateLintPassObject>,\n-\n-    #[doc(hidden)]\n-    pub lint_groups: FxHashMap<&'static str, (Vec<LintId>, Option<&'static str>)>,\n-\n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n \n@@ -53,15 +46,13 @@ pub struct Registry<'a> {\n \n impl<'a> Registry<'a> {\n     #[doc(hidden)]\n-    pub fn new(sess: &'a Session, krate_span: Span) -> Registry<'a> {\n+    pub fn new(sess: &'a Session, lint_store: &'a mut LintStore, krate_span: Span) -> Registry<'a> {\n         Registry {\n             sess,\n+            lint_store,\n             args_hidden: None,\n             krate_span,\n             syntax_exts: vec![],\n-            early_lint_passes: vec![],\n-            late_lint_passes: vec![],\n-            lint_groups: FxHashMap::default(),\n             llvm_passes: vec![],\n             attributes: vec![],\n         }\n@@ -99,27 +90,6 @@ impl<'a> Registry<'a> {\n         self.register_syntax_extension(Symbol::intern(name), ext);\n     }\n \n-    /// Register a compiler lint pass.\n-    pub fn register_early_lint_pass(&mut self, lint_pass: EarlyLintPassObject) {\n-        self.early_lint_passes.push(lint_pass);\n-    }\n-\n-    /// Register a compiler lint pass.\n-    pub fn register_late_lint_pass(&mut self, lint_pass: LateLintPassObject) {\n-        self.late_lint_passes.push(lint_pass);\n-    }\n-    /// Register a lint group.\n-    pub fn register_lint_group(\n-        &mut self,\n-        name: &'static str,\n-        deprecated_name: Option<&'static str>,\n-        to: Vec<&'static Lint>\n-    ) {\n-        self.lint_groups.insert(name,\n-                                (to.into_iter().map(|x| LintId::of(x)).collect(),\n-                                 deprecated_name));\n-    }\n-\n     /// Register an LLVM pass.\n     ///\n     /// Registration with LLVM itself is handled through static C++ objects with"}, {"sha": "39ab30e8ecfc77282cc53ed0ae39590902add685", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::HirId;\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{Ty, TyCtxt};\n-use rustc::lint::{self, LintPass};\n+use rustc::lint;\n use rustc::session::config::ErrorOutputType;\n use rustc::session::DiagnosticOutput;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -273,10 +273,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     whitelisted_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n \n     let lints = || {\n-        lint::builtin::HardwiredLints\n-            .get_lints()\n+        lint::builtin::HardwiredLints::get_lints()\n             .into_iter()\n-            .chain(rustc_lint::SoftLints.get_lints().into_iter())\n+            .chain(rustc_lint::SoftLints::get_lints().into_iter())\n     };\n \n     let lint_opts = lints().filter_map(|lint| {\n@@ -339,6 +338,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         stderr: None,\n         crate_name,\n         lint_caps,\n+        register_lints: None,\n     };\n \n     interface::run_compiler_in_existing_thread_pool(config, |compiler| {"}, {"sha": "07dc1e4e9157a46e9dda972d5251093e6c656f7b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -77,6 +77,7 @@ pub fn run(options: Options) -> i32 {\n         stderr: None,\n         crate_name: options.crate_name.clone(),\n         lint_caps: Default::default(),\n+        register_lints: None,\n     };\n \n     let mut test_args = options.test_args.clone();"}, {"sha": "9582137eae91c0c4e71ae73011598f66494a2abf", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -59,6 +59,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         stderr: None,\n         crate_name: None,\n         lint_caps: Default::default(),\n+        register_lints: None,\n     };\n \n     interface::run_compiler(config, |compiler| {"}, {"sha": "6b914f501ca79a735456b635a5beabad7a3267a4", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -15,15 +15,14 @@ use syntax::symbol::Symbol;\n \n use rustc::hir;\n use rustc::hir::intravisit;\n-use rustc::hir::map as hir_map;\n use hir::Node;\n use rustc::lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};\n-use rustc::ty;\n-use syntax::{ast, source_map};\n+use syntax::source_map;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box MissingWhitelistedAttrPass);\n+    reg.lint_store.register_lints(&[&MISSING_WHITELISTED_ATTR]);\n+    reg.lint_store.register_late_pass(|| box MissingWhitelistedAttrPass);\n     reg.register_attribute(Symbol::intern(\"whitelisted_attr\"), Whitelisted);\n }\n "}, {"sha": "6874c921c1cc1c26fadcfd8ee90ecfb243b6dcde", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -7,24 +7,20 @@\n extern crate rustc_driver;\n extern crate syntax;\n \n-use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n+use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass};\n use rustc_driver::plugin::Registry;\n use rustc::hir;\n use syntax::attr;\n use syntax::symbol::Symbol;\n \n macro_rules! fake_lint_pass {\n-    ($struct:ident, $lints:expr, $($attr:expr),*) => {\n+    ($struct:ident, $($attr:expr),*) => {\n         struct $struct;\n \n         impl LintPass for $struct {\n             fn name(&self) -> &'static str {\n                 stringify!($struct)\n             }\n-\n-            fn get_lints(&self) -> LintArray {\n-                $lints\n-            }\n         }\n \n         impl<'a, 'tcx> LateLintPass<'a, 'tcx> for $struct {\n@@ -49,25 +45,29 @@ declare_lint!(CRATE_NOT_GREEN, Warn, \"crate not marked with #![crate_green]\");\n \n fake_lint_pass! {\n     PassOkay,\n-    lint_array!(CRATE_NOT_OKAY), // Single lint\n     Symbol::intern(\"rustc_crate_okay\")\n }\n \n fake_lint_pass! {\n     PassRedBlue,\n-    lint_array!(CRATE_NOT_RED, CRATE_NOT_BLUE), // Multiple lints\n     Symbol::intern(\"rustc_crate_red\"), Symbol::intern(\"rustc_crate_blue\")\n }\n \n fake_lint_pass! {\n     PassGreyGreen,\n-    lint_array!(CRATE_NOT_GREY, CRATE_NOT_GREEN, ), // Trailing comma\n     Symbol::intern(\"rustc_crate_grey\"), Symbol::intern(\"rustc_crate_green\")\n }\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box PassOkay);\n-    reg.register_late_lint_pass(box PassRedBlue);\n-    reg.register_late_lint_pass(box PassGreyGreen);\n+    reg.lint_store.register_lints(&[\n+        &CRATE_NOT_OKAY,\n+        &CRATE_NOT_RED,\n+        &CRATE_NOT_BLUE,\n+        &CRATE_NOT_GREY,\n+        &CRATE_NOT_GREEN,\n+    ]);\n+    reg.lint_store.register_late_pass(|| box PassOkay);\n+    reg.lint_store.register_late_pass(|| box PassRedBlue);\n+    reg.lint_store.register_late_pass(|| box PassGreyGreen);\n }"}, {"sha": "1cd3e7b28dba7bd3d48578e9cf91ecc278935a52", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -7,7 +7,7 @@\n extern crate rustc_driver;\n extern crate syntax;\n \n-use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n+use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LintArray};\n use rustc_driver::plugin::Registry;\n use rustc::hir;\n use syntax::attr;\n@@ -32,5 +32,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box Pass);\n+    reg.lint_store.register_lints(&[&CRATE_NOT_OKAY]);\n+    reg.lint_store.register_late_pass(|| box Pass);\n }"}, {"sha": "cb793b43498859aa9008832352a9d929dbc324f4", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -9,7 +9,7 @@ extern crate rustc;\n extern crate rustc_driver;\n \n use rustc::hir;\n-use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n+use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LintArray, LintId};\n use rustc_driver::plugin::Registry;\n \n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n@@ -30,6 +30,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box Pass);\n-    reg.register_lint_group(\"lint_me\", None, vec![TEST_LINT, PLEASE_LINT]);\n+    reg.lint_store.register_lints(&[&TEST_LINT, &PLEASE_LINT]);\n+    reg.lint_store.register_late_pass(|| box Pass);\n+    reg.lint_store.register_group(true, \"lint_me\", None,\n+        vec![LintId::of(&TEST_LINT), LintId::of(&PLEASE_LINT)]);\n }"}, {"sha": "40c37eb570e2d6435f20856b9a10a2b56345db19", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -10,8 +10,7 @@ extern crate syntax;\n extern crate rustc;\n extern crate rustc_driver;\n \n-use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n-                  EarlyLintPassObject, LintArray};\n+use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass, LintArray};\n use rustc_driver::plugin::Registry;\n use syntax::ast;\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n@@ -28,5 +27,6 @@ impl EarlyLintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n+    reg.lint_store.register_lints(&[&TEST_LINT]);\n+    reg.lint_store.register_early_pass(|| box Pass);\n }"}, {"sha": "67135d595f448a53ed1e1a6c777216ad8ce7787c", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -8,7 +8,7 @@ extern crate syntax;\n extern crate rustc;\n extern crate rustc_driver;\n \n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass, LintId};\n use rustc_driver::plugin::Registry;\n use syntax::ast;\n declare_tool_lint!(pub clippy::TEST_LINT, Warn, \"Warn about stuff\");\n@@ -40,6 +40,8 @@ impl EarlyLintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_early_lint_pass(box Pass);\n-    reg.register_lint_group(\"clippy::group\", Some(\"clippy_group\"), vec![TEST_LINT, TEST_GROUP]);\n+    reg.lint_store.register_lints(&[&TEST_RUSTC_TOOL_LINT, &TEST_LINT, &TEST_GROUP]);\n+    reg.lint_store.register_early_pass(|| box Pass);\n+    reg.lint_store.register_group(true, \"clippy::group\", Some(\"clippy_group\"),\n+        vec![LintId::of(&TEST_LINT), LintId::of(&TEST_GROUP)]);\n }"}, {"sha": "0bfb32c6dc43b812d551f3d1a51e3126ce1b7feb", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -6,7 +6,7 @@\n extern crate rustc;\n \n use rustc::lint::{LintArray, LintPass};\n-use rustc::{declare_lint, declare_lint_pass, impl_lint_pass, lint_array};\n+use rustc::{declare_lint, declare_lint_pass, impl_lint_pass};\n \n declare_lint! {\n     pub TEST_LINT,\n@@ -17,10 +17,6 @@ declare_lint! {\n struct Foo;\n \n impl LintPass for Foo { //~ERROR implementing `LintPass` by hand\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT)\n-    }\n-\n     fn name(&self) -> &'static str {\n         \"Foo\"\n     }\n@@ -31,10 +27,6 @@ macro_rules! custom_lint_pass_macro {\n         struct Custom;\n \n         impl LintPass for Custom { //~ERROR implementing `LintPass` by hand\n-            fn get_lints(&self) -> LintArray {\n-                lint_array!(TEST_LINT)\n-            }\n-\n             fn name(&self) -> &'static str {\n                 \"Custom\"\n             }"}, {"sha": "0dbdf4f5aa9e21abac0d0ce2475aa524474f27dd", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c043e284a9a3e71ee2e5d34be8e40abf1daa49e/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=7c043e284a9a3e71ee2e5d34be8e40abf1daa49e", "patch": "@@ -12,7 +12,7 @@ LL | #![deny(rustc::lint_pass_impl_without_macro)]\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:33:14\n+  --> $DIR/lint_pass_impl_without_macro.rs:29:14\n    |\n LL |         impl LintPass for Custom {\n    |              ^^^^^^^^"}]}