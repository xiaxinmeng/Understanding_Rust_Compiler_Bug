{"sha": "c8931885496aaa8f5cf207a607883a90b68ad519", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OTMxODg1NDk2YWFhOGY1Y2YyMDdhNjA3ODgzYTkwYjY4YWQ1MTk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-11T19:23:40Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-11T19:23:49Z"}, "message": "Use some actual or-patterns in resolve.rs", "tree": {"sha": "c62873c308c025c8468d0e63dfd38a6e628ae777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c62873c308c025c8468d0e63dfd38a6e628ae777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8931885496aaa8f5cf207a607883a90b68ad519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8931885496aaa8f5cf207a607883a90b68ad519", "html_url": "https://github.com/rust-lang/rust/commit/c8931885496aaa8f5cf207a607883a90b68ad519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8931885496aaa8f5cf207a607883a90b68ad519/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e348280efbaddd9b5b23617cdaa4f04cebefa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e348280efbaddd9b5b23617cdaa4f04cebefa0", "html_url": "https://github.com/rust-lang/rust/commit/55e348280efbaddd9b5b23617cdaa4f04cebefa0"}], "stats": {"total": 104, "additions": 34, "deletions": 70}, "files": [{"sha": "ad6cf1c6596894c69b8e7f85bff49c3d4d727df9", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 34, "deletions": 70, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c8931885496aaa8f5cf207a607883a90b68ad519/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8931885496aaa8f5cf207a607883a90b68ad519/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c8931885496aaa8f5cf207a607883a90b68ad519", "patch": "@@ -206,13 +206,10 @@ fn map_crate(&@env e, &@ast::crate c) {\n             alt (sc) {\n                 case (cons(scope_item(?i), ?tl)) {\n                     alt (i.node) {\n-                        case (ast::item_mod(_)) {\n+                        ast::item_mod(_) | ast::item_native_mod(_) {\n                             ret e.mod_map.get(i.id);\n                         }\n-                        case (ast::item_native_mod(_)) {\n-                            ret e.mod_map.get(i.id);\n-                        }\n-                        case (_) { be find_mod(e, *tl); }\n+                        _ { be find_mod(e, *tl); }\n                     }\n                 }\n                 case (_) {\n@@ -222,9 +219,8 @@ fn map_crate(&@env e, &@ast::crate c) {\n             }\n         }\n         alt (vi.node) {\n-            case (\n-                 //if it really is a glob import, that is\n-                 ast::view_item_import_glob(?path, _)) {\n+            //if it really is a glob import, that is\n+            case (ast::view_item_import_glob(?path, _)) {\n                 auto imp = follow_import(*e, sc, path, vi.span);\n                 if (option::is_some(imp)) {\n                     find_mod(e, sc).glob_imports +=\n@@ -363,14 +359,11 @@ fn visit_arm_with_scope(&ast::arm a, &scopes sc, &vt[scopes] v) {\n fn visit_expr_with_scope(&@ast::expr x, &scopes sc, &vt[scopes] v) {\n     auto new_sc =\n         alt (x.node) {\n-            case (ast::expr_for(?d, _, _)) {\n-                cons[scope](scope_loop(d), @sc)\n-            }\n-            case (ast::expr_for_each(?d, _, _)) {\n+            ast::expr_for(?d, _, _) | ast::expr_for_each(?d, _, _) {\n                 cons[scope](scope_loop(d), @sc)\n             }\n-            case (ast::expr_fn(?f)) { cons(scope_fn(f.decl, ~[]), @sc) }\n-            case (_) { sc }\n+            ast::expr_fn(?f) { cons(scope_fn(f.decl, ~[]), @sc) }\n+            _ { sc }\n         };\n     visit::visit_expr(x, new_sc, v);\n }\n@@ -388,9 +381,8 @@ fn follow_import(&env e, &scopes sc, &ident[] path, &span sp)\n     }\n     if (i == path_len) {\n         alt (option::get(dcur)) {\n-            case (ast::def_mod(?def_id)) { ret dcur; }\n-            case (ast::def_native_mod(?def_id)) { ret dcur; }\n-            case (_) {\n+            ast::def_mod(_) | ast::def_native_mod(_) { ret dcur; }\n+            _ {\n                 e.sess.span_err(sp, str::connect_ivec(path, \"::\") +\n                                 \" does not name a module.\");\n                 ret none;\n@@ -579,19 +571,16 @@ fn lookup_in_scope_strict(&env e, scopes sc, &span sp, &ident name,\n \n fn scope_is_fn(&scope sc) -> bool {\n     ret alt (sc) {\n-            case (scope_fn(_, _)) { true }\n-            case (scope_native_item(_)) { true }\n-            case (_) { false }\n+            scope_fn(_, _) | scope_native_item(_) { true }\n+            _ { false }\n         };\n }\n \n fn def_is_local(&def d) -> bool {\n     ret alt (d) {\n-            case (ast::def_arg(_)) { true }\n-            case (ast::def_local(_)) { true }\n-            case (ast::def_binding(_)) { true }\n-            case (_) { false }\n-        };\n+        ast::def_arg(_) | ast::def_local(_) | ast::def_binding(_) { true }\n+        _ { false }\n+    };\n }\n \n fn def_is_obj_field(&def d) -> bool {\n@@ -1092,25 +1081,12 @@ fn index_mod(&ast::_mod md) -> mod_index {\n     }\n     for (@ast::item it in md.items) {\n         alt (it.node) {\n-            case (ast::item_const(_, _)) {\n-                add_to_index(index, it.ident, mie_item(it));\n-            }\n-            case (ast::item_fn(_, _)) {\n-                add_to_index(index, it.ident, mie_item(it));\n-            }\n-            case (ast::item_mod(_)) {\n-                add_to_index(index, it.ident, mie_item(it));\n-            }\n-            case (ast::item_native_mod(_)) {\n-                add_to_index(index, it.ident, mie_item(it));\n-            }\n-            case (ast::item_ty(_, _)) {\n-                add_to_index(index, it.ident, mie_item(it));\n-            }\n-            case (ast::item_res(_, _, _, _)) {\n+            ast::item_const(_, _) | ast::item_fn(_, _) | ast::item_mod(_) |\n+            ast::item_native_mod(_) | ast::item_ty(_, _) |\n+            ast::item_res(_, _, _, _) | ast::item_obj(_, _, _) {\n                 add_to_index(index, it.ident, mie_item(it));\n             }\n-            case (ast::item_tag(?variants, _)) {\n+            ast::item_tag(?variants, _) {\n                 add_to_index(index, it.ident, mie_item(it));\n                 let uint variant_idx = 0u;\n                 for (ast::variant v in variants) {\n@@ -1119,9 +1095,6 @@ fn index_mod(&ast::_mod md) -> mod_index {\n                     variant_idx += 1u;\n                 }\n             }\n-            case (ast::item_obj(_, _, _)) {\n-                add_to_index(index, it.ident, mie_item(it));\n-            }\n         }\n     }\n     ret index;\n@@ -1228,12 +1201,12 @@ fn check_mod_name(&env e, &ident name, list[mod_index_entry] entries) {\n }\n \n fn mie_span(&mod_index_entry mie) -> span {\n-    alt (mie) {\n-        case (mie_view_item(?item)) { ret item.span; }\n-        case (mie_item(?item)) { ret item.span; }\n-        case (mie_tag_variant(?item, _)) { ret item.span; }\n-        case (mie_native_item(?item)) { ret item.span; }\n-    }\n+    ret alt (mie) {\n+        mie_view_item(?item) { item.span }\n+        mie_item(?item) { item.span }\n+        mie_tag_variant(?item, _) { item.span }\n+        mie_native_item(?item) { item.span }\n+    };\n }\n \n fn check_item(@env e, &@ast::item i, &() x, &vt[()] v) {\n@@ -1313,41 +1286,32 @@ fn check_block(@env e, &ast::block b, &() x, &vt[()] v) {\n         alt (st.node) {\n             case (ast::stmt_decl(?d, _)) {\n                 alt (d.node) {\n-                    case (ast::decl_local(?loc)) {\n+                    ast::decl_local(?loc) {\n                         add_name(values, d.span, loc.node.ident);\n                     }\n-                    case (ast::decl_item(?it)) {\n+                    ast::decl_item(?it) {\n                         alt (it.node) {\n-                            case (ast::item_tag(?variants, _)) {\n+                            ast::item_tag(?variants, _) {\n                                 add_name(types, it.span, it.ident);\n                                 for (ast::variant v in variants) {\n                                     add_name(values, v.span, v.node.name);\n                                 }\n                             }\n-                            case (ast::item_const(_, _)) {\n-                                add_name(values, it.span, it.ident);\n-                            }\n-                            case (ast::item_fn(_, _)) {\n-                                add_name(values, it.span, it.ident);\n-                            }\n-                            case (ast::item_mod(_)) {\n-                                add_name(mods, it.span, it.ident);\n-                            }\n-                            case (ast::item_native_mod(_)) {\n+                            ast::item_mod(_) | ast::item_native_mod(_) {\n                                 add_name(mods, it.span, it.ident);\n                             }\n-                            case (ast::item_ty(_, _)) {\n-                                add_name(types, it.span, it.ident);\n+                            ast::item_const(_, _) | ast::item_fn(_, _) {\n+                                add_name(values, it.span, it.ident);\n                             }\n-                            case (ast::item_res(_, _, _, _)) {\n+                            ast::item_ty(_, _) {\n                                 add_name(types, it.span, it.ident);\n-                                add_name(values, it.span, it.ident);\n                             }\n-                            case (ast::item_obj(_, _, _)) {\n+                            ast::item_res(_, _, _, _) |\n+                            ast::item_obj(_, _, _) {\n                                 add_name(types, it.span, it.ident);\n                                 add_name(values, it.span, it.ident);\n                             }\n-                            case (_) { }\n+                            _ { }\n                         }\n                     }\n                 }"}]}