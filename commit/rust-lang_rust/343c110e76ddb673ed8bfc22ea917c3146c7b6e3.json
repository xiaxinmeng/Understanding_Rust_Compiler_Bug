{"sha": "343c110e76ddb673ed8bfc22ea917c3146c7b6e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2MxMTBlNzZkZGI2NzNlZDhiZmMyMmVhOTE3YzMxNDZjN2I2ZTM=", "commit": {"author": {"name": "kgv", "email": "mail@kgv.name", "date": "2015-04-01T06:37:19Z"}, "committer": {"name": "kgv", "email": "mail@kgv.name", "date": "2015-04-01T06:37:19Z"}, "message": "Fix rust book error-handling.md for new std::io.\n\nFix example and some text for: `read_line` takes `&mut String` and return `Result` instead `IoResult`.", "tree": {"sha": "bc85558cedac699800eab1146b732e2e4723656e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc85558cedac699800eab1146b732e2e4723656e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343c110e76ddb673ed8bfc22ea917c3146c7b6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343c110e76ddb673ed8bfc22ea917c3146c7b6e3", "html_url": "https://github.com/rust-lang/rust/commit/343c110e76ddb673ed8bfc22ea917c3146c7b6e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343c110e76ddb673ed8bfc22ea917c3146c7b6e3/comments", "author": null, "committer": null, "parents": [{"sha": "d754722a04b99fdcae0fd97fa2a4395521145ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d754722a04b99fdcae0fd97fa2a4395521145ef2", "html_url": "https://github.com/rust-lang/rust/commit/d754722a04b99fdcae0fd97fa2a4395521145ef2"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "b9e7bd78c5b2fa26dd200d632ce8875b1da846e4", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/343c110e76ddb673ed8bfc22ea917c3146c7b6e3/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/343c110e76ddb673ed8bfc22ea917c3146c7b6e3/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=343c110e76ddb673ed8bfc22ea917c3146c7b6e3", "patch": "@@ -200,15 +200,15 @@ Because these kinds of situations are relatively rare, use panics sparingly.\n # Upgrading failures to panics\n \n In certain circumstances, even though a function may fail, we may want to treat\n-it as a panic instead. For example, `io::stdin().read_line()` returns an\n-`IoResult<String>`, a form of `Result`, when there is an error reading the\n-line. This allows us to handle and possibly recover from this sort of error.\n+it as a panic instead. For example, `io::stdin().read_line(&mut buffer)` returns\n+an `Result<usize>`, when there is an error reading the line. This allows us to\n+handle and possibly recover from error.\n \n If we don't want to handle this error, and would rather just abort the program,\n we can use the `unwrap()` method:\n \n ```{rust,ignore}\n-io::stdin().read_line().unwrap();\n+io::stdin().read_line(&mut buffer).unwrap();\n ```\n \n `unwrap()` will `panic!` if the `Option` is `None`. This basically says \"Give\n@@ -219,12 +219,13 @@ shorter. Sometimes, just crashing is appropriate.\n There's another way of doing this that's a bit nicer than `unwrap()`:\n \n ```{rust,ignore}\n-let input = io::stdin().read_line()\n+let mut buffer = String::new();\n+let input = io::stdin().read_line(&mut buffer)\n                        .ok()\n                        .expect(\"Failed to read line\");\n ```\n \n-`ok()` converts the `IoResult` into an `Option`, and `expect()` does the same\n+`ok()` converts the `Result` into an `Option`, and `expect()` does the same\n thing as `unwrap()`, but takes a message. This message is passed along to the\n underlying `panic!`, providing a better error message if the code errors.\n "}]}