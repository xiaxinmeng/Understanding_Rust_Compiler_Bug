{"sha": "4bff385fdadb999f19afb7b1482df7863034d742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZmYzODVmZGFkYjk5OWYxOWFmYjdiMTQ4MmRmNzg2MzAzNGQ3NDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-17T13:31:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-17T13:31:35Z"}, "message": "Auto merge of #52433 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #52286 (Deny bare trait objects in src/librustc_errors)\n - #52306 (Reduce the number of clone()s needed in obligation_forest)\n - #52338 (update miri)\n - #52385 (Pass edition flags to compiler from rustdoc as expected)\n - #52392 (AsRef doc wording tweaks)\n - #52430 (update nomicon)\n - #52434 (Enable incremental independent of stage)\n - #52435 (Calculate the exact capacity for 2 HashMaps)\n - #52446 (Block beta if clippy breaks.)\n\nr? @ghost", "tree": {"sha": "3324f1bb30cd2e88af3653d69f5265f790890121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3324f1bb30cd2e88af3653d69f5265f790890121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bff385fdadb999f19afb7b1482df7863034d742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bff385fdadb999f19afb7b1482df7863034d742", "html_url": "https://github.com/rust-lang/rust/commit/4bff385fdadb999f19afb7b1482df7863034d742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bff385fdadb999f19afb7b1482df7863034d742/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "025e04e1bc51807d3e9d733f4af57d2624b9080d", "url": "https://api.github.com/repos/rust-lang/rust/commits/025e04e1bc51807d3e9d733f4af57d2624b9080d", "html_url": "https://github.com/rust-lang/rust/commit/025e04e1bc51807d3e9d733f4af57d2624b9080d"}, {"sha": "c0db1aafeade826d37db3ca85087bbe349b45e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0db1aafeade826d37db3ca85087bbe349b45e9c", "html_url": "https://github.com/rust-lang/rust/commit/c0db1aafeade826d37db3ca85087bbe349b45e9c"}], "stats": {"total": 138, "additions": 97, "deletions": 41}, "files": [{"sha": "ccc1ccce87aae03967494c2e873c4aebc54fad0e", "filename": "src/Cargo.lock", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -243,6 +243,18 @@ dependencies = [\n  \"serde_json 1.0.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cargo_metadata\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.69 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.69 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cargotest2\"\n version = \"0.1.0\"\n@@ -629,6 +641,14 @@ dependencies = [\n  \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"error-chain\"\n+version = \"0.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n@@ -1216,12 +1236,13 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargo_metadata 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiletest_rs 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -3031,6 +3052,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n \"checksum byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74c0b906e9446b0a2e4f760cdb3fa4b2c48cdc6db8766a845c54b6ff063fd2e9\"\n \"checksum cargo_metadata 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1efca0b863ca03ed4c109fb1c55e0bc4bbeb221d3e103d86251046b06a526bd0\"\n+\"checksum cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d6809b327f87369e6f3651efd2c5a96c49847a3ed2559477ecba79014751ee1\"\n \"checksum cc 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49ec142f5768efb5b7622aebc3fdbdbb8950a4b9ba996393cb76ef7466e8747d\"\n \"checksum cfg-if 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efe5c877e17a9c717a0bf3613b2709f723202c4e4675cc8f12926ded29bcb17e\"\n \"checksum chalk-engine 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a146c19172c7eea48ea55a7123ac95da786639bc665097f1e14034ee5f1d8699\"\n@@ -3062,6 +3084,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum env_logger 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e6e40ebb0e66918a37b38c7acab4e10d299e0463fe2af5d29b9cc86710cfd2a\"\n \"checksum environment 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f4b14e20978669064c33b4c1e0fb4083412e40fe56cbea2eae80fd7591503ee\"\n \"checksum error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff511d5dc435d703f4971bc399647c9bc38e20cb41452e3b9feb4765419ed3f3\"\n+\"checksum error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e791d3be96241c77c43846b665ef1384606da2cd2a48730abe606a12906e02\"\n \"checksum failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"934799b6c1de475a012a02dab0ace1ace43789ee4b99bcfbf1a2e3e8ced5de82\"\n \"checksum failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7cdda555bb90c9bb67a3b670a0f42de8e73f5981524123ad8578aafec8ddb8b\"\n \"checksum filetime 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da4b9849e77b13195302c174324b5ba73eec9b236b24c221a61000daefb95c5f\""}, {"sha": "79167b1fd5e270b4415f98b8863129009ed3a38d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -903,10 +903,7 @@ impl<'a> Builder<'a> {\n                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n-        // Ignore incremental modes except for stage0, since we're\n-        // not guaranteeing correctness across builds if the compiler\n-        // is changing under your feet.`\n-        if self.config.incremental && compiler.stage == 0 {\n+        if self.config.incremental {\n             cargo.env(\"CARGO_INCREMENTAL\", \"1\");\n         }\n "}, {"sha": "fa0b1983510b90075b44b6ff0175a5cf58ada47a", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -51,7 +51,7 @@ pub fn build(build: &mut Build) {\n     build_krate(\"\", build, &mut resolves, \"src/libtest\");\n     build_krate(&build.rustc_features(), build, &mut resolves, \"src/rustc\");\n \n-    let mut id2name = HashMap::new();\n+    let mut id2name = HashMap::with_capacity(build.crates.len());\n     for (name, krate) in build.crates.iter() {\n         id2name.insert(krate.id.clone(), name.clone());\n     }"}, {"sha": "f6d375058a77205c5d23d405218ea128ef40ae9d", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -81,8 +81,8 @@ status_check() {\n     check_dispatch $1 beta rust-by-example src/doc/rust-by-example\n     check_dispatch $1 beta rls src/tools/rls\n     check_dispatch $1 beta rustfmt src/tools/rustfmt\n+    check_dispatch $1 beta clippy-driver src/tools/clippy\n     # these tools are not required for beta to successfully branch\n-    check_dispatch $1 nightly clippy-driver src/tools/clippy\n     check_dispatch $1 nightly miri src/tools/miri\n }\n \n@@ -106,12 +106,14 @@ $COMMIT\\t$(cat \"$TOOLSTATE_FILE\")\n     fi\n }\n \n-if [ \"$RUST_RELEASE_CHANNEL\" = nightly -a -n \"${TOOLSTATE_REPO_ACCESS_TOKEN+is_set}\" ]; then\n-    . \"$(dirname $0)/repo.sh\"\n-    MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n-    echo \"($OS CI update)\" > \"$MESSAGE_FILE\"\n-    commit_toolstate_change \"$MESSAGE_FILE\" change_toolstate\n-    rm -f \"$MESSAGE_FILE\"\n+if [ \"$RUST_RELEASE_CHANNEL\" = nightly ]; then\n+    if [ -n \"${TOOLSTATE_REPO_ACCESS_TOKEN+is_set}\" ]; then\n+        . \"$(dirname $0)/repo.sh\"\n+        MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n+        echo \"($OS CI update)\" > \"$MESSAGE_FILE\"\n+        commit_toolstate_change \"$MESSAGE_FILE\" change_toolstate\n+        rm -f \"$MESSAGE_FILE\"\n+    fi\n     exit 0\n fi\n "}, {"sha": "66ef7373409d1979c2839db8886ac2ec9b6a58cd", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -1 +1 @@\n-Subproject commit 13e3745ca399118df05e8261e12e3ada6e616b48\n+Subproject commit 66ef7373409d1979c2839db8886ac2ec9b6a58cd"}, {"sha": "11cc4ffecf0055af511be82a17af07b08ecf626d", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -63,9 +63,9 @@\n ///\n /// The key difference between the two traits is the intention:\n ///\n-/// - Use `AsRef` when goal is to simply convert into a reference\n-/// - Use `Borrow` when goal is related to writing code that is agnostic to the\n-///   type of borrow and if is reference or value\n+/// - Use `AsRef` when the goal is to simply convert into a reference\n+/// - Use `Borrow` when the goal is related to writing code that is agnostic to\n+///   the type of borrow and whether it is a reference or value\n ///\n /// See [the book][book] for a more detailed comparison.\n ///"}, {"sha": "0d6cf260dcd98978bf18cc33416c906ccb77bb70", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -496,9 +496,14 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     }\n                 }\n                 NodeState::Done => {\n-                    self.waiting_cache.remove(self.nodes[i].obligation.as_predicate());\n-                    // FIXME(HashMap): why can't I get my key back?\n-                    self.done_cache.insert(self.nodes[i].obligation.as_predicate().clone());\n+                    // Avoid cloning the key (predicate) in case it exists in the waiting cache\n+                    if let Some((predicate, _)) = self.waiting_cache\n+                        .remove_entry(self.nodes[i].obligation.as_predicate())\n+                    {\n+                        self.done_cache.insert(predicate);\n+                    } else {\n+                        self.done_cache.insert(self.nodes[i].obligation.as_predicate().clone());\n+                    }\n                     node_rewrites[i] = nodes_len;\n                     dead_nodes += 1;\n                 }"}, {"sha": "5f10c56e8e214cd5f287cd7050a8b54fab2d8a9b", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -220,7 +220,8 @@ pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetr\n }\n \n pub fn write_traces(html_file: &mut File, counts_file: &mut File, traces: &Vec<Rec>) {\n-    let mut counts : HashMap<String,QueryMetric> = HashMap::new();\n+    let capacity = traces.iter().fold(0, |acc, t| acc + 1 + t.extent.len());\n+    let mut counts : HashMap<String, QueryMetric> = HashMap::with_capacity(capacity);\n     compute_counts_rec(&mut counts, traces);\n     write_counts(counts_file, &mut counts);\n "}, {"sha": "d079102a4ba0003e4b362217075c0816b00a6180", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -121,7 +121,7 @@ impl Diagnostic {\n     }\n \n     pub fn note_expected_found(&mut self,\n-                               label: &fmt::Display,\n+                               label: &dyn fmt::Display,\n                                expected: DiagnosticStyledString,\n                                found: DiagnosticStyledString)\n                                -> &mut Self\n@@ -130,11 +130,11 @@ impl Diagnostic {\n     }\n \n     pub fn note_expected_found_extra(&mut self,\n-                                     label: &fmt::Display,\n+                                     label: &dyn fmt::Display,\n                                      expected: DiagnosticStyledString,\n                                      found: DiagnosticStyledString,\n-                                     expected_extra: &fmt::Display,\n-                                     found_extra: &fmt::Display)\n+                                     expected_extra: &dyn fmt::Display,\n+                                     found_extra: &dyn fmt::Display)\n                                      -> &mut Self\n     {\n         let mut msg: Vec<_> = vec![(format!(\"expected {} `\", label), Style::NoStyle)];"}, {"sha": "9c7b7ea3395402dc715ba030e55d3706fb1064ac", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -148,17 +148,17 @@ impl<'a> DiagnosticBuilder<'a> {\n     }\n \n     forward!(pub fn note_expected_found(&mut self,\n-                                        label: &fmt::Display,\n+                                        label: &dyn fmt::Display,\n                                         expected: DiagnosticStyledString,\n                                         found: DiagnosticStyledString)\n                                         -> &mut Self);\n \n     forward!(pub fn note_expected_found_extra(&mut self,\n-                                              label: &fmt::Display,\n+                                              label: &dyn fmt::Display,\n                                               expected: DiagnosticStyledString,\n                                               found: DiagnosticStyledString,\n-                                              expected_extra: &fmt::Display,\n-                                              found_extra: &fmt::Display)\n+                                              expected_extra: &dyn fmt::Display,\n+                                              found_extra: &dyn fmt::Display)\n                                               -> &mut Self);\n \n     forward!(pub fn note(&mut self, msg: &str) -> &mut Self);"}, {"sha": "2f71c3a7232de9238df1d7455488a17825322bc4", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -148,7 +148,7 @@ impl EmitterWriter {\n         }\n     }\n \n-    pub fn new(dst: Box<Write + Send>,\n+    pub fn new(dst: Box<dyn Write + Send>,\n                code_map: Option<Lrc<CodeMapperDyn>>,\n                short_message: bool,\n                teach: bool)\n@@ -1469,13 +1469,13 @@ fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,\n pub enum Destination {\n     Terminal(StandardStream),\n     Buffered(BufferWriter),\n-    Raw(Box<Write + Send>),\n+    Raw(Box<dyn Write + Send>),\n }\n \n pub enum WritableDst<'a> {\n     Terminal(&'a mut StandardStream),\n     Buffered(&'a mut BufferWriter, Buffer),\n-    Raw(&'a mut Box<Write + Send>),\n+    Raw(&'a mut Box<dyn Write + Send>),\n }\n \n impl Destination {"}, {"sha": "f18a7bd9136a209b9e994055a6ee76c20eca405b", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -110,7 +112,7 @@ pub struct SubstitutionPart {\n     pub snippet: String,\n }\n \n-pub type CodeMapperDyn = CodeMapper + sync::Send + sync::Sync;\n+pub type CodeMapperDyn = dyn CodeMapper + sync::Send + sync::Sync;\n \n pub trait CodeMapper {\n     fn lookup_char_pos(&self, pos: BytePos) -> Loc;\n@@ -270,7 +272,7 @@ pub struct Handler {\n     pub flags: HandlerFlags,\n \n     err_count: AtomicUsize,\n-    emitter: Lock<Box<Emitter + sync::Send>>,\n+    emitter: Lock<Box<dyn Emitter + sync::Send>>,\n     continue_after_error: LockCell<bool>,\n     delayed_span_bug: Lock<Option<Diagnostic>>,\n \n@@ -326,7 +328,7 @@ impl Handler {\n \n     pub fn with_emitter(can_emit_warnings: bool,\n                         treat_err_as_bug: bool,\n-                        e: Box<Emitter + sync::Send>)\n+                        e: Box<dyn Emitter + sync::Send>)\n                         -> Handler {\n         Handler::with_emitter_and_flags(\n             e,\n@@ -337,7 +339,8 @@ impl Handler {\n             })\n     }\n \n-    pub fn with_emitter_and_flags(e: Box<Emitter + sync::Send>, flags: HandlerFlags) -> Handler {\n+    pub fn with_emitter_and_flags(e: Box<dyn Emitter + sync::Send>, flags: HandlerFlags) -> Handler\n+    {\n         Handler {\n             flags,\n             err_count: AtomicUsize::new(0),"}, {"sha": "dff8d53986db598a204fba5e6c32b355e8bc71cb", "filename": "src/librustc_errors/lock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustc_errors%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flock.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -23,7 +23,7 @@ use std::any::Any;\n \n #[cfg(windows)]\n #[allow(bad_style)]\n-pub fn acquire_global_lock(name: &str) -> Box<Any> {\n+pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n     use std::ffi::CString;\n     use std::io;\n \n@@ -110,6 +110,6 @@ pub fn acquire_global_lock(name: &str) -> Box<Any> {\n }\n \n #[cfg(unix)]\n-pub fn acquire_global_lock(_name: &str) -> Box<Any> {\n+pub fn acquire_global_lock(_name: &str) -> Box<dyn Any> {\n     Box::new(())\n }"}, {"sha": "b7040ed37d732ae314f3893893104107a3c65d08", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -37,7 +37,7 @@ use syntax::codemap::CodeMap;\n use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::with_globals;\n-use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName};\n+use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName, hygiene};\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -561,6 +561,7 @@ impl Collector {\n                     rustc_driver::in_rustc_thread(move || with_globals(move || {\n                         io::set_panic(panic);\n                         io::set_print(print);\n+                        hygiene::set_default_edition(edition);\n                         run_test(&test,\n                                  &cratename,\n                                  &filename,"}, {"sha": "3475b657d2599930cb2e3e465d25536ed106750b", "filename": "src/test/rustdoc/edition-flag.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bff385fdadb999f19afb7b1482df7863034d742/src%2Ftest%2Frustdoc%2Fedition-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff385fdadb999f19afb7b1482df7863034d742/src%2Ftest%2Frustdoc%2Fedition-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fedition-flag.rs?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test -Z unstable-options\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+/// ```rust\n+/// #![feature(async_await)]\n+/// fn main() {\n+///     let _ = async { };\n+/// }\n+/// ```\n+fn main() {\n+    let _ = async { };\n+}"}, {"sha": "911aedf736992e907d11cb494167f41f28d02368", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=4bff385fdadb999f19afb7b1482df7863034d742", "patch": "@@ -1 +1 @@\n-Subproject commit 5b7bb32b0e46d195b80c4da09b560ac7fc92015d\n+Subproject commit 911aedf736992e907d11cb494167f41f28d02368"}]}