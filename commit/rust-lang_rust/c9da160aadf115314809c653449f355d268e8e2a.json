{"sha": "c9da160aadf115314809c653449f355d268e8e2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZGExNjBhYWRmMTE1MzE0ODA5YzY1MzQ0OWYzNTVkMjY4ZThlMmE=", "commit": {"author": {"name": "Martin Finkel", "email": "finkel2804@gmail.com", "date": "2019-08-09T13:51:16Z"}, "committer": {"name": "Martin Finkel", "email": "finkel2804@gmail.com", "date": "2019-08-12T13:07:23Z"}, "message": "review feedback: move uwp link code to get_linker", "tree": {"sha": "6fecc9e0b12fcef11ac255e563f4c6dd74d70859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fecc9e0b12fcef11ac255e563f4c6dd74d70859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9da160aadf115314809c653449f355d268e8e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9da160aadf115314809c653449f355d268e8e2a", "html_url": "https://github.com/rust-lang/rust/commit/c9da160aadf115314809c653449f355d268e8e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9da160aadf115314809c653449f355d268e8e2a/comments", "author": {"login": "mfkl", "id": 3928834, "node_id": "MDQ6VXNlcjM5Mjg4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3928834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfkl", "html_url": "https://github.com/mfkl", "followers_url": "https://api.github.com/users/mfkl/followers", "following_url": "https://api.github.com/users/mfkl/following{/other_user}", "gists_url": "https://api.github.com/users/mfkl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfkl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfkl/subscriptions", "organizations_url": "https://api.github.com/users/mfkl/orgs", "repos_url": "https://api.github.com/users/mfkl/repos", "events_url": "https://api.github.com/users/mfkl/events{/privacy}", "received_events_url": "https://api.github.com/users/mfkl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mfkl", "id": 3928834, "node_id": "MDQ6VXNlcjM5Mjg4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3928834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfkl", "html_url": "https://github.com/mfkl", "followers_url": "https://api.github.com/users/mfkl/followers", "following_url": "https://api.github.com/users/mfkl/following{/other_user}", "gists_url": "https://api.github.com/users/mfkl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfkl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfkl/subscriptions", "organizations_url": "https://api.github.com/users/mfkl/orgs", "repos_url": "https://api.github.com/users/mfkl/repos", "events_url": "https://api.github.com/users/mfkl/events{/privacy}", "received_events_url": "https://api.github.com/users/mfkl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89044a908ed602ae3dee74905866cffd63c164b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/89044a908ed602ae3dee74905866cffd63c164b3", "html_url": "https://github.com/rust-lang/rust/commit/89044a908ed602ae3dee74905866cffd63c164b3"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "076283d521ffb3bafb3c8c59377d7dda1d0883e2", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c9da160aadf115314809c653449f355d268e8e2a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9da160aadf115314809c653449f355d268e8e2a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=c9da160aadf115314809c653449f355d268e8e2a", "patch": "@@ -32,6 +32,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Output, Stdio, ExitStatus};\n use std::str;\n use std::env;\n+use std::ffi::OsString;\n \n pub use rustc_codegen_utils::link::*;\n \n@@ -158,6 +159,33 @@ pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> (PathB\n         }\n     };\n \n+    let t = &sess.target.target;\n+    if t.linker_flavor == LinkerFlavor::Msvc && t.target_vendor == \"uwp\" {\n+        if let Some(ref tool) = msvc_tool {\n+            let original_path = tool.path();\n+            if let Some(ref root_lib_path) = original_path.ancestors().skip(4).next() {\n+                let arch = match t.arch.as_str() {\n+                    \"x86_64\" => Some(\"x64\".to_string()),\n+                    \"x86\" => Some(\"x86\".to_string()),\n+                    \"aarch64\" => Some(\"arm64\".to_string()),\n+                    _ => None,\n+                };\n+                if let Some(ref a) = arch {\n+                    let mut arg = OsString::from(\"/LIBPATH:\");\n+                    arg.push(format!(\"{}\\\\lib\\\\{}\\\\store\", root_lib_path.display(), a.to_string()));\n+                    cmd.arg(&arg);\n+                }\n+                else {\n+                    warn!(\"arch is not supported\");\n+                }\n+            } else {\n+                warn!(\"MSVC root path lib location not found\");\n+            }\n+        } else {\n+            warn!(\"link.exe not found\");\n+        }\n+    }\n+\n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n     let mut new_path = sess.host_filesearch(PathKind::All)\n@@ -1028,19 +1056,6 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n \n     cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n \n-    if t.linker_flavor == LinkerFlavor::Msvc && t.target_vendor == \"uwp\" {\n-        let link_tool = windows_registry::find_tool(\"x86_64-pc-windows-msvc\", \"link.exe\")\n-            .expect(\"no path found for link.exe\");\n-\n-        let original_path = link_tool.path();\n-        let root_lib_path = original_path.ancestors().skip(4).next().unwrap();\n-        if t.arch == \"aarch64\".to_string() {\n-            cmd.include_path(&root_lib_path.join(format!(\"lib\\\\arm64\\\\store\")));\n-        } else {\n-            cmd.include_path(&root_lib_path.join(format!(\"lib\\\\{}\\\\store\", t.arch)));\n-        }\n-    }\n-    \n     for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n         cmd.add_object(obj);\n     }"}]}