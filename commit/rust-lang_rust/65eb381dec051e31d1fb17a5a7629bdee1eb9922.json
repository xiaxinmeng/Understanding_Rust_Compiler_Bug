{"sha": "65eb381dec051e31d1fb17a5a7629bdee1eb9922", "node_id": "C_kwDOAAsO6NoAKDY1ZWIzODFkZWMwNTFlMzFkMWZiMTdhNWE3NjI5YmRlZTFlYjk5MjI", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-10T23:15:40Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-26T16:43:58Z"}, "message": "Do not suggest importing inaccessible items", "tree": {"sha": "34e873ef33bc6718a27952e244d7f17b5198bf98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e873ef33bc6718a27952e244d7f17b5198bf98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65eb381dec051e31d1fb17a5a7629bdee1eb9922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65eb381dec051e31d1fb17a5a7629bdee1eb9922", "html_url": "https://github.com/rust-lang/rust/commit/65eb381dec051e31d1fb17a5a7629bdee1eb9922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65eb381dec051e31d1fb17a5a7629bdee1eb9922/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8dd1b2f24dc62c962172b27433106b4e84dc62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8dd1b2f24dc62c962172b27433106b4e84dc62", "html_url": "https://github.com/rust-lang/rust/commit/ac8dd1b2f24dc62c962172b27433106b4e84dc62"}], "stats": {"total": 286, "additions": 165, "deletions": 121}, "files": [{"sha": "e75db6f3f0026ee4af358d13e573980d59ab6931", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 58, "deletions": 27, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -1700,41 +1700,72 @@ crate fn show_candidates(\n         return;\n     }\n \n+    let mut accessible_path_strings: Vec<(String, &str)> = Vec::new();\n+    let mut inaccessible_path_strings: Vec<(String, &str)> = Vec::new();\n+\n+    candidates.iter().for_each(|c| {\n+        (if c.accessible { &mut accessible_path_strings } else { &mut inaccessible_path_strings })\n+            .push((path_names_to_string(&c.path), c.descr))\n+    });\n+\n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n-    let mut path_strings: Vec<_> =\n-        candidates.iter().map(|c| path_names_to_string(&c.path)).collect();\n+    for path_strings in [&mut accessible_path_strings, &mut inaccessible_path_strings] {\n+        path_strings.sort();\n+        let core_path_strings =\n+            path_strings.drain_filter(|p| p.starts_with(\"core::\")).collect::<Vec<String>>();\n+        path_strings.extend(core_path_strings);\n+        path_strings.dedup();\n+    }\n \n-    path_strings.sort();\n-    let core_path_strings =\n-        path_strings.drain_filter(|p| p.starts_with(\"core::\")).collect::<Vec<String>>();\n-    path_strings.extend(core_path_strings);\n-    path_strings.dedup();\n+    if !accessible_path_strings.is_empty() {\n+        let (determiner, kind) = if accessible_path_strings.len() == 1 {\n+            (\"this\", accessible_path_strings[0].1)\n+        } else {\n+            (\"one of these\", \"items\")\n+        };\n \n-    let (determiner, kind) = if candidates.len() == 1 {\n-        (\"this\", candidates[0].descr)\n-    } else {\n-        (\"one of these\", \"items\")\n-    };\n-\n-    let instead = if instead { \" instead\" } else { \"\" };\n-    let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n-\n-    if let Some(span) = use_placement_span {\n-        for candidate in &mut path_strings {\n-            // produce an additional newline to separate the new use statement\n-            // from the directly following item.\n-            let additional_newline = if found_use { \"\" } else { \"\\n\" };\n-            *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n-        }\n+        let instead = if instead { \" instead\" } else { \"\" };\n+        let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n \n-        err.span_suggestions(span, &msg, path_strings.into_iter(), Applicability::Unspecified);\n+        if let Some(span) = use_placement_span {\n+            for candidate in &mut accessible_path_strings {\n+                // produce an additional newline to separate the new use statement\n+                // from the directly following item.\n+                let additional_newline = if found_use { \"\" } else { \"\\n\" };\n+                candidate.0 = format!(\"use {};\\n{}\", &candidate.0, additional_newline);\n+            }\n+\n+            err.span_suggestions(\n+                span,\n+                &msg,\n+                accessible_path_strings.into_iter().map(|a| a.0),\n+                Applicability::Unspecified,\n+            );\n+        } else {\n+            msg.push(':');\n+\n+            for candidate in accessible_path_strings {\n+                msg.push('\\n');\n+                msg.push_str(&candidate.0);\n+            }\n+\n+            err.note(&msg);\n+        }\n     } else {\n-        msg.push(':');\n+        assert!(!inaccessible_path_strings.is_empty());\n+\n+        let (determiner, kind, verb1, verb2) = if inaccessible_path_strings.len() == 1 {\n+            (\"this\", inaccessible_path_strings[0].1, \"exists\", \"is\")\n+        } else {\n+            (\"these\", \"items\", \"exist\", \"are\")\n+        };\n+\n+        let mut msg = format!(\"{} {} {} but {} inaccessible:\", determiner, kind, verb1, verb2);\n \n-        for candidate in path_strings {\n+        for candidate in inaccessible_path_strings {\n             msg.push('\\n');\n-            msg.push_str(&candidate);\n+            msg.push_str(&candidate.0);\n         }\n \n         err.note(&msg);"}, {"sha": "6c8b707b8e2f14d7d6db5109bf6bc3e759c36640", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find function `f` in this scope\n LL |         f();\n    |         ^ not found in this scope\n    |\n-help: consider importing one of these items\n+help: consider importing this function\n    |\n LL | use foo::f;\n    |\n@@ -37,7 +37,7 @@ LL | n!(f);\n LL |         n!(f);\n    |            ^ not found in this scope\n    |\n-   = note: consider importing one of these items:\n+   = note: consider importing this function:\n            foo::f\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -50,7 +50,7 @@ LL | n!(f);\n LL |                 f\n    |                 ^ not found in this scope\n    |\n-   = note: consider importing one of these items:\n+   = note: consider importing this function:\n            foo::f\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3e23c278d669dece876d6a7b0f8a6ad087c9dc35", "filename": "src/test/ui/imports/glob-resolve1.stderr", "status": "modified", "additions": 15, "deletions": 39, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -4,21 +4,17 @@ error[E0425]: cannot find function `fpriv` in this scope\n LL |     fpriv();\n    |     ^^^^^ not found in this scope\n    |\n-help: consider importing this function\n-   |\n-LL | use bar::fpriv;\n-   |\n+   = note: this function exists but is inaccessible:\n+           bar::fpriv\n \n error[E0425]: cannot find function `epriv` in this scope\n   --> $DIR/glob-resolve1.rs:27:5\n    |\n LL |     epriv();\n    |     ^^^^^ not found in this scope\n    |\n-help: consider importing this function\n-   |\n-LL | use bar::epriv;\n-   |\n+   = note: this function exists but is inaccessible:\n+           bar::epriv\n \n error[E0423]: expected value, found enum `B`\n   --> $DIR/glob-resolve1.rs:28:5\n@@ -44,10 +40,8 @@ error[E0425]: cannot find value `C` in this scope\n LL |     C;\n    |     ^ not found in this scope\n    |\n-help: consider importing this unit struct\n-   |\n-LL | use bar::C;\n-   |\n+   = note: this unit struct exists but is inaccessible:\n+           bar::C\n \n error[E0425]: cannot find function `import` in this scope\n   --> $DIR/glob-resolve1.rs:30:5\n@@ -67,16 +61,10 @@ LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<A>();\n-   |           ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     foo::<B>();\n-   |           ~\n-help: consider importing this enum\n-   |\n-LL | use bar::A;\n+   |           ^ help: an enum with a similar name exists: `B`\n    |\n+   = note: this enum exists but is inaccessible:\n+           bar::A\n \n error[E0412]: cannot find type `C` in this scope\n   --> $DIR/glob-resolve1.rs:33:11\n@@ -85,16 +73,10 @@ LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<C>();\n-   |           ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     foo::<B>();\n-   |           ~\n-help: consider importing this struct\n-   |\n-LL | use bar::C;\n+   |           ^ help: an enum with a similar name exists: `B`\n    |\n+   = note: this struct exists but is inaccessible:\n+           bar::C\n \n error[E0412]: cannot find type `D` in this scope\n   --> $DIR/glob-resolve1.rs:34:11\n@@ -103,16 +85,10 @@ LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<D>();\n-   |           ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     foo::<B>();\n-   |           ~\n-help: consider importing this type alias\n-   |\n-LL | use bar::D;\n+   |           ^ help: an enum with a similar name exists: `B`\n    |\n+   = note: this type alias exists but is inaccessible:\n+           bar::D\n \n error: aborting due to 8 previous errors\n "}, {"sha": "225104d0dde2409904cfd535821a26927e8f237c", "filename": "src/test/ui/imports/issue-4366-2.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -4,10 +4,8 @@ error[E0412]: cannot find type `Bar` in this scope\n LL |         fn sub() -> Bar { 1 }\n    |                     ^^^ not found in this scope\n    |\n-help: consider importing this type alias\n-   |\n-LL |         use a::b::Bar;\n-   |\n+   = note: this type alias exists but is inaccessible:\n+           a::b::Bar\n \n error[E0423]: expected function, found module `foo`\n   --> $DIR/issue-4366-2.rs:25:5"}, {"sha": "1ca7a6d34f7827ef14f7ef57d4a1dc912897e463", "filename": "src/test/ui/resolve/issue-42944.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -16,10 +16,8 @@ error[E0425]: cannot find function, tuple struct or tuple variant `Bx` in this s\n LL |         Bx(());\n    |         ^^ not found in this scope\n    |\n-help: consider importing this tuple struct\n-   |\n-LL |     use foo::Bx;\n-   |\n+   = note: this tuple struct exists but is inaccessible:\n+           foo::Bx\n \n error: aborting due to 2 previous errors\n "}, {"sha": "53cfec574666402002aafaf52c90ebca173dc054", "filename": "src/test/ui/resolve/issue-88472.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -0,0 +1,35 @@\n+// Regression test for #88472, where a suggestion was issued to\n+// import an inaccessible struct.\n+\n+#![warn(unused_imports)]\n+//~^ NOTE: the lint level is defined here\n+\n+mod a {\n+    struct Foo;\n+}\n+\n+mod b {\n+    use crate::a::*;\n+    //~^ WARNING: unused import\n+    type Bar = Foo;\n+    //~^ ERROR: cannot find type `Foo` in this scope [E0412]\n+    //~| NOTE: not found in this scope\n+    //~| NOTE: this struct exists but is inaccessible\n+}\n+\n+mod c {\n+    enum Eee {}\n+\n+    mod d {\n+        enum Eee {}\n+    }\n+}\n+\n+mod e {\n+    type Baz = Eee;\n+    //~^ ERROR: cannot find type `Eee` in this scope [E0412]\n+    //~| NOTE: not found in this scope\n+    //~| NOTE: these items exist but are inaccessible\n+}\n+\n+fn main() {}"}, {"sha": "6846210b302be0e79a73481145f668c519d0c392", "filename": "src/test/ui/resolve/issue-88472.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -0,0 +1,34 @@\n+error[E0412]: cannot find type `Foo` in this scope\n+  --> $DIR/issue-88472.rs:14:16\n+   |\n+LL |     type Bar = Foo;\n+   |                ^^^ not found in this scope\n+   |\n+   = note: this struct exists but is inaccessible:\n+           a::Foo\n+\n+error[E0412]: cannot find type `Eee` in this scope\n+  --> $DIR/issue-88472.rs:29:16\n+   |\n+LL |     type Baz = Eee;\n+   |                ^^^ not found in this scope\n+   |\n+   = note: these items exist but are inaccessible:\n+           c::Eee\n+           c::d::Eee\n+\n+warning: unused import: `crate::a::*`\n+  --> $DIR/issue-88472.rs:12:9\n+   |\n+LL |     use crate::a::*;\n+   |         ^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-88472.rs:4:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "e79f953970a43edb2cc84aa7462c43964e35871e", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -169,16 +169,10 @@ LL |     pub enum E {\n    |     ---------- similarly named enum `E` defined here\n ...\n LL |     let _: Z = m::n::Z;\n-   |            ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     let _: E = m::n::Z;\n-   |            ~\n-help: consider importing this enum\n-   |\n-LL | use m::Z;\n+   |            ^ help: an enum with a similar name exists: `E`\n    |\n+   = note: this enum exists but is inaccessible:\n+           m::Z\n \n error[E0423]: expected value, found enum `m::n::Z`\n   --> $DIR/privacy-enum-ctor.rs:57:16\n@@ -215,16 +209,10 @@ LL |     pub enum E {\n    |     ---------- similarly named enum `E` defined here\n ...\n LL |     let _: Z = m::n::Z::Fn;\n-   |            ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     let _: E = m::n::Z::Fn;\n-   |            ~\n-help: consider importing this enum\n-   |\n-LL | use m::Z;\n+   |            ^ help: an enum with a similar name exists: `E`\n    |\n+   = note: this enum exists but is inaccessible:\n+           m::Z\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:64:12\n@@ -233,16 +221,10 @@ LL |     pub enum E {\n    |     ---------- similarly named enum `E` defined here\n ...\n LL |     let _: Z = m::n::Z::Struct;\n-   |            ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     let _: E = m::n::Z::Struct;\n-   |            ~\n-help: consider importing this enum\n-   |\n-LL | use m::Z;\n+   |            ^ help: an enum with a similar name exists: `E`\n    |\n+   = note: this enum exists but is inaccessible:\n+           m::Z\n \n error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:64:16\n@@ -262,16 +244,10 @@ LL |     pub enum E {\n    |     ---------- similarly named enum `E` defined here\n ...\n LL |     let _: Z = m::n::Z::Unit {};\n-   |            ^\n-   |\n-help: an enum with a similar name exists\n-   |\n-LL |     let _: E = m::n::Z::Unit {};\n-   |            ~\n-help: consider importing this enum\n-   |\n-LL | use m::Z;\n+   |            ^ help: an enum with a similar name exists: `E`\n    |\n+   = note: this enum exists but is inaccessible:\n+           m::Z\n \n error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:57:22"}, {"sha": "bf1d6753cc1d0aaae11281d99f9fca4cd8519ff6", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -33,10 +33,8 @@ error[E0423]: expected value, found struct `xcrate::S`\n LL |     xcrate::S;\n    |     ^^^^^^^^^ constructor is not visible here due to private fields\n    |\n-help: consider importing this tuple struct instead\n-   |\n-LL | use m::S;\n-   |\n+   = note: this tuple struct exists but is inaccessible:\n+           m::S\n \n error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:18:12"}, {"sha": "57b46058777aeb04bfa7a153ac92fe7e5a5f10cb", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65eb381dec051e31d1fb17a5a7629bdee1eb9922/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=65eb381dec051e31d1fb17a5a7629bdee1eb9922", "patch": "@@ -66,10 +66,8 @@ error[E0531]: cannot find unit struct, unit variant or constant `Self` in this s\n LL |         mut Self => (),\n    |             ^^^^ not found in this scope\n    |\n-help: consider importing this unit struct\n-   |\n-LL | use foo::Self;\n-   |\n+   = note: this unit struct exists but is inaccessible:\n+           foo::Self\n \n error[E0392]: parameter `'Self` is never used\n   --> $DIR/self_type_keyword.rs:6:12"}]}