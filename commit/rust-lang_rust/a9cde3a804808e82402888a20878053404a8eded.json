{"sha": "a9cde3a804808e82402888a20878053404a8eded", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Y2RlM2E4MDQ4MDhlODI0MDI4ODhhMjA4NzgwNTM0MDRhOGVkZWQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-05-31T16:45:16Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-05-31T17:29:03Z"}, "message": "Don't suggest to move empty blocks", "tree": {"sha": "a85cf5fa76e828333b3f431f1f74a803ea741e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a85cf5fa76e828333b3f431f1f74a803ea741e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cde3a804808e82402888a20878053404a8eded", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl7T6V8ACgkQaTCGhp1Q\nZjdT+Q/+Jx2sRXZefuV63Jp8Z1NTRgayWelH+pNqCzG/RFxN2HOhZlnONra0uWaZ\nzsRIb8Yrr/YHH7zP8GJP5wjGTJ5TyIgj0DQQMDKl96pa3R9zRpY5+/RVjcz6zhUb\nFwvbMZJ95TWWYZQbm20ymeWj8LVqbfUZxGMwNLaKPBxphcc8k8HUfwTTH8wselpk\nshS3ySVX58pUtopAPxbzDRCLZIiHyohF3e3Ag+tjfNTwwU2ThJiHFnUr9uCdiX7z\nxuyUhDzlaRQXFG/SozNSRoqovwEKVo+jRUsc6AsmdbR7jdV6VnYSp+fDZQ8ox+Ks\nYAi+Lai0LmZ74gDxqweC9k+8Qd41vjlwQBqFgwKRD1OUkmv5OaLtAfa+GFQRr0Vy\nr5+hsSAD43WB7Bp8PrSmgBHtFl//jh1XNFud7DydM0hlq6s7SoqSQLiccVX5k61X\nKzceYF4rrE5+bTywxtf4jgju1Ys5P2uxTjkSNPiYbMAU43ACLjuYTeSpiCF3oVVt\nkj9Luv3Nqh432yDp6jDE47nTM0Texk2FQuCJymaYUtnmp+agHtBEpKA3SNp6D58a\nzxbvvJrs8dzxmkXw0Z3yzrl4XfvoumCxEcv4YfdlVasTIe9z5o1A/cI4vy5a6e5r\navmEVcXxnFKDtJIlHjEvlO7t3bE/P9lNcimK3ok2N/B6iw9Cn8w=\n=Coq+\n-----END PGP SIGNATURE-----", "payload": "tree a85cf5fa76e828333b3f431f1f74a803ea741e90\nparent 6d15a149640e5647ce232690d54b540346fa1641\nauthor flip1995 <hello@philkrones.com> 1590943516 +0200\ncommitter flip1995 <hello@philkrones.com> 1590946143 +0200\n\nDon't suggest to move empty blocks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cde3a804808e82402888a20878053404a8eded", "html_url": "https://github.com/rust-lang/rust/commit/a9cde3a804808e82402888a20878053404a8eded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cde3a804808e82402888a20878053404a8eded/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d15a149640e5647ce232690d54b540346fa1641", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d15a149640e5647ce232690d54b540346fa1641", "html_url": "https://github.com/rust-lang/rust/commit/6d15a149640e5647ce232690d54b540346fa1641"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "5ca30d598eb15da4e4e98edbd22649095e3afb3d", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a9cde3a804808e82402888a20878053404a8eded/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cde3a804808e82402888a20878053404a8eded/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a9cde3a804808e82402888a20878053404a8eded", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BinOpKind, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n+    BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n     ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, QPath, Stmt, StmtKind, TraitFn,\n     TraitItem, TraitItemKind, TyKind, UnOp,\n };\n@@ -29,10 +29,10 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, is_type_diagnostic_item,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n     last_path_segment, match_def_path, match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral,\n-    qpath_res, same_tys, sext, snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite,\n-    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n+    qpath_res, same_tys, sext, snippet, snippet_block_with_applicability, snippet_opt, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -847,6 +847,7 @@ fn lint_unit_args(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args_to_recover: &[\n                 });\n             let sugg = args_to_recover\n                 .iter()\n+                .filter(|arg| !is_empty_block(arg))\n                 .enumerate()\n                 .map(|(i, arg)| {\n                     let indent = if i == 0 {\n@@ -860,16 +861,20 @@ fn lint_unit_args(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args_to_recover: &[\n                         snippet_block_with_applicability(cx, arg.span, \"..\", Some(expr.span), &mut applicability)\n                     )\n                 })\n-                .collect::<Vec<String>>()\n-                .join(\"\\n\");\n-            db.span_suggestion(\n-                expr.span.with_hi(expr.span.lo()),\n-                &format!(\"{}move the expression{} in front of the call...\", or, plural),\n-                format!(\"{}\\n\", sugg),\n-                applicability,\n-            );\n+                .collect::<Vec<String>>();\n+            let mut and = \"\";\n+            if !sugg.is_empty() {\n+                let plural = if sugg.len() > 1 { \"s\" } else { \"\" };\n+                db.span_suggestion(\n+                    expr.span.with_hi(expr.span.lo()),\n+                    &format!(\"{}move the expression{} in front of the call...\", or, plural),\n+                    format!(\"{}\\n\", sugg.join(\"\\n\")),\n+                    applicability,\n+                );\n+                and = \"...and \"\n+            }\n             db.multipart_suggestion(\n-                &format!(\"...and use {}unit literal{} instead\", singular, plural),\n+                &format!(\"{}use {}unit literal{} instead\", and, singular, plural),\n                 args_to_recover\n                     .iter()\n                     .map(|arg| (arg.span, \"()\".to_string()))\n@@ -880,6 +885,18 @@ fn lint_unit_args(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args_to_recover: &[\n     );\n }\n \n+fn is_empty_block(expr: &Expr<'_>) -> bool {\n+    matches!(\n+        expr.kind,\n+        ExprKind::Block(\n+            Block {\n+                stmts: &[], expr: None, ..\n+            },\n+            _,\n+        )\n+    )\n+}\n+\n fn is_questionmark_desugar_marked_call(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::DesugaringKind;\n     if let ExprKind::Call(ref callee, _) = expr.kind {"}]}