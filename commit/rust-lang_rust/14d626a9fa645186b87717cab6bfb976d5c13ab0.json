{"sha": "14d626a9fa645186b87717cab6bfb976d5c13ab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZDYyNmE5ZmE2NDUxODZiODc3MTdjYWI2YmZiOTc2ZDVjMTNhYjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-13T15:49:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-06-06T23:46:38Z"}, "message": "Simplify MonoId not to include parameters which, given coherence, are purely derived", "tree": {"sha": "841287375bd60d98ff2bbfcee6ed3e893d853d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/841287375bd60d98ff2bbfcee6ed3e893d853d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d626a9fa645186b87717cab6bfb976d5c13ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d626a9fa645186b87717cab6bfb976d5c13ab0", "html_url": "https://github.com/rust-lang/rust/commit/14d626a9fa645186b87717cab6bfb976d5c13ab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d626a9fa645186b87717cab6bfb976d5c13ab0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24a53757e1e78fcf7f3a9208a0496dee26a6423", "url": "https://api.github.com/repos/rust-lang/rust/commits/f24a53757e1e78fcf7f3a9208a0496dee26a6423", "html_url": "https://github.com/rust-lang/rust/commit/f24a53757e1e78fcf7f3a9208a0496dee26a6423"}], "stats": {"total": 37, "additions": 5, "deletions": 32}, "files": [{"sha": "0b26612cb3864107f972df432ba7525318b35602", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/14d626a9fa645186b87717cab6bfb976d5c13ab0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d626a9fa645186b87717cab6bfb976d5c13ab0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=14d626a9fa645186b87717cab6bfb976d5c13ab0", "patch": "@@ -55,23 +55,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     let _icx = push_ctxt(\"monomorphic_fn\");\n \n     let substs_iter = real_substs.self_ty.iter().chain(real_substs.tps.iter());\n-    let param_ids: Vec<MonoParamId> = match vtables {\n-        Some(ref vts) => {\n-            debug!(\"make_mono_id vtables={} psubsts={}\",\n-                   vts.repr(ccx.tcx()), real_substs.tps.repr(ccx.tcx()));\n-            let vts_iter = self_vtables.iter().chain(vts.iter());\n-            vts_iter.zip(substs_iter).map(|(vtable, subst)| MonoParamId {\n-                subst: *subst,\n-                // Do we really need the vtables to be hashed? Isn't the type enough?\n-                vtables: vtable.iter().map(|vt| make_vtable_id(ccx, vt)).collect()\n-            }).collect()\n-        }\n-        None => substs_iter.map(|subst| MonoParamId {\n-            subst: *subst,\n-            vtables: Vec::new()\n-        }).collect()\n-    };\n-\n+    let param_ids: Vec<ty::t> = substs_iter.map(|t| *t).collect();\n     let hash_id = MonoId {\n         def: fn_id,\n         params: param_ids\n@@ -317,33 +301,22 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n #[deriving(PartialEq, Eq, Hash)]\n pub struct MonoParamId {\n     pub subst: ty::t,\n-    // Do we really need the vtables to be hashed? Isn't the type enough?\n-    pub vtables: Vec<MonoId>\n }\n \n #[deriving(PartialEq, Eq, Hash)]\n pub struct MonoId {\n     pub def: ast::DefId,\n-    pub params: Vec<MonoParamId>\n+    pub params: Vec<ty::t>\n }\n \n-pub fn make_vtable_id(ccx: &CrateContext,\n+pub fn make_vtable_id(_ccx: &CrateContext,\n                       origin: &typeck::vtable_origin)\n                       -> MonoId {\n     match origin {\n-        &typeck::vtable_static(impl_id, ref substs, ref sub_vtables) => {\n+        &typeck::vtable_static(impl_id, ref substs, _) => {\n             MonoId {\n                 def: impl_id,\n-                // FIXME(NDM) -- this is pretty bogus. It ignores self-type,\n-                // and vtables are not necessary, AND they are not guaranteed\n-                // to be same length as the number of TPS ANYHOW!\n-                params: sub_vtables.iter().zip(substs.tps.iter()).map(|(vtable, subst)| {\n-                    MonoParamId {\n-                        subst: *subst,\n-                        // Do we really need the vtables to be hashed? Isn't the type enough?\n-                        vtables: vtable.iter().map(|vt| make_vtable_id(ccx, vt)).collect()\n-                    }\n-                }).collect()\n+                params: substs.tps.iter().map(|subst| *subst).collect()\n             }\n         }\n "}]}