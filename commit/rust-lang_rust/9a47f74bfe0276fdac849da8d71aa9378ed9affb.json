{"sha": "9a47f74bfe0276fdac849da8d71aa9378ed9affb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDdmNzRiZmUwMjc2ZmRhYzg0OWRhOGQ3MWFhOTM3OGVkOWFmZmI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-10T23:14:12Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-10T23:14:12Z"}, "message": "Use SmallVec in SwitchTargets\n\nThis allows building common SwitchTargets (eg. for `if`s) without\nallocation.", "tree": {"sha": "2c2b7f1fe356770a77b26649c72758618ce61f4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c2b7f1fe356770a77b26649c72758618ce61f4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a47f74bfe0276fdac849da8d71aa9378ed9affb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a47f74bfe0276fdac849da8d71aa9378ed9affb", "html_url": "https://github.com/rust-lang/rust/commit/9a47f74bfe0276fdac849da8d71aa9378ed9affb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a47f74bfe0276fdac849da8d71aa9378ed9affb/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432535da2b5144d467056efcfa6864d35ba2de0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/432535da2b5144d467056efcfa6864d35ba2de0f", "html_url": "https://github.com/rust-lang/rust/commit/432535da2b5144d467056efcfa6864d35ba2de0f"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "353189ae1f0d46172ae5e5f11cdad1acc002b273", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=9a47f74bfe0276fdac849da8d71aa9378ed9affb", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         mut bx: Bx,\n         discr: &mir::Operand<'tcx>,\n         switch_ty: Ty<'tcx>,\n-        targets: &SwitchTargets<'tcx>,\n+        targets: &SwitchTargets,\n     ) {\n         let discr = self.codegen_operand(&mut bx, &discr);\n         // `switch_ty` is redundant, sanity-check that."}, {"sha": "e1071454e6501444f6d05f103f054f3d32a1c935", "filename": "compiler/rustc_middle/src/mir/terminator/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator%2Fmod.rs?ref=9a47f74bfe0276fdac849da8d71aa9378ed9affb", "patch": "@@ -1,6 +1,7 @@\n use crate::mir::interpret::Scalar;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n+use smallvec::{smallvec, SmallVec};\n \n use super::{\n     AssertMessage, BasicBlock, InlineAsmOperand, Operand, Place, SourceInfo, Successors,\n@@ -17,10 +18,10 @@ use std::slice;\n pub use super::query::*;\n \n #[derive(Debug, Clone, TyEncodable, TyDecodable, HashStable, PartialEq)]\n-pub struct SwitchTargets<'tcx> {\n+pub struct SwitchTargets {\n     /// Possible values. The locations to branch to in each case\n     /// are found in the corresponding indices from the `targets` vector.\n-    values: Cow<'tcx, [u128]>,\n+    values: SmallVec<[u128; 1]>,\n \n     /// Possible branch sites. The last element of this vector is used\n     /// for the otherwise branch, so targets.len() == values.len() + 1\n@@ -34,24 +35,24 @@ pub struct SwitchTargets<'tcx> {\n     //\n     // However we\u2019ve decided to keep this as-is until we figure a case\n     // where some other approach seems to be strictly better than other.\n-    targets: Vec<BasicBlock>,\n+    targets: SmallVec<[BasicBlock; 2]>,\n }\n \n-impl<'tcx> SwitchTargets<'tcx> {\n+impl SwitchTargets {\n     /// Creates switch targets from an iterator of values and target blocks.\n     ///\n     /// The iterator may be empty, in which case the `SwitchInt` instruction is equivalent to\n     /// `goto otherwise;`.\n     pub fn new(targets: impl Iterator<Item = (u128, BasicBlock)>, otherwise: BasicBlock) -> Self {\n-        let (values, mut targets): (Vec<_>, Vec<_>) = targets.unzip();\n+        let (values, mut targets): (SmallVec<_>, SmallVec<_>) = targets.unzip();\n         targets.push(otherwise);\n         Self { values: values.into(), targets }\n     }\n \n     /// Builds a switch targets definition that jumps to `then` if the tested value equals `value`,\n     /// and to `else_` if not.\n-    pub fn static_if(value: &'static [u128; 1], then: BasicBlock, else_: BasicBlock) -> Self {\n-        Self { values: Cow::Borrowed(value), targets: vec![then, else_] }\n+    pub fn static_if(value: u128, then: BasicBlock, else_: BasicBlock) -> Self {\n+        Self { values: smallvec![value], targets: smallvec![then, else_] }\n     }\n \n     /// Returns the fallback target that is jumped to when none of the values match the operand.\n@@ -113,7 +114,7 @@ pub enum TerminatorKind<'tcx> {\n         /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.\n         switch_ty: Ty<'tcx>,\n \n-        targets: SwitchTargets<'tcx>,\n+        targets: SwitchTargets,\n     },\n \n     /// Indicates that the landing pad is finished and unwinding should\n@@ -295,7 +296,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         TerminatorKind::SwitchInt {\n             discr: cond,\n             switch_ty: tcx.types.bool,\n-            targets: SwitchTargets::static_if(&[0], f, t),\n+            targets: SwitchTargets::static_if(0, f, t),\n         }\n     }\n "}, {"sha": "8a9ced91eb3763c66d15f6799f6c7a78e1408526", "filename": "compiler/rustc_mir/src/dataflow/framework/direction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fdirection.rs?ref=9a47f74bfe0276fdac849da8d71aa9378ed9affb", "patch": "@@ -514,7 +514,7 @@ impl Direction for Forward {\n \n struct SwitchIntEdgeEffectApplier<'a, D, F> {\n     exit_state: &'a mut D,\n-    targets: &'a SwitchTargets<'a>,\n+    targets: &'a SwitchTargets,\n     propagate: F,\n \n     effects_applied: bool,"}, {"sha": "6372f8960ddb66f8f0aa64cbd4b03b6f1cf3adbe", "filename": "compiler/rustc_mir/src/transform/simplify_comparison_integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs?ref=9a47f74bfe0276fdac849da8d71aa9378ed9affb", "patch": "@@ -227,5 +227,5 @@ struct OptimizationInfo<'tcx> {\n     /// Either Eq or Ne\n     op: BinOp,\n     /// Current targets used in the switch\n-    targets: SwitchTargets<'tcx>,\n+    targets: SwitchTargets,\n }"}, {"sha": "0e2d8e5495b72590f535884e2a5a75a1c6300ffc", "filename": "compiler/rustc_mir/src/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a47f74bfe0276fdac849da8d71aa9378ed9affb/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs?ref=9a47f74bfe0276fdac849da8d71aa9378ed9affb", "patch": "@@ -760,8 +760,6 @@ where\n         let elem_size = Place::from(self.new_temp(tcx.types.usize));\n         let len = Place::from(self.new_temp(tcx.types.usize));\n \n-        static USIZE_SWITCH_ZERO: &[u128; 1] = &[0];\n-\n         let base_block = BasicBlockData {\n             statements: vec![\n                 self.assign(elem_size, Rvalue::NullaryOp(NullOp::SizeOf, ety)),\n@@ -774,7 +772,7 @@ where\n                     discr: move_(elem_size),\n                     switch_ty: tcx.types.usize,\n                     targets: SwitchTargets::static_if(\n-                        USIZE_SWITCH_ZERO,\n+                        0,\n                         self.drop_loop_pair(ety, false, len),\n                         self.drop_loop_pair(ety, true, len),\n                     ),"}]}