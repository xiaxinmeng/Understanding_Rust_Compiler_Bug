{"sha": "88c515da0728a3a3738be6ffa96168d060243225", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YzUxNWRhMDcyOGEzYTM3MzhiZTZmZmE5NjE2OGQwNjAyNDMyMjU=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-06-25T17:36:30Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-07-03T08:01:03Z"}, "message": "Revert changes to the standard library\n\nMoved to its own PR", "tree": {"sha": "f7c3edd82cf04d10e02275af0a2f5278a3628def", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c3edd82cf04d10e02275af0a2f5278a3628def"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c515da0728a3a3738be6ffa96168d060243225", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl0cYL8ACgkQj1SKWi7R\nP1i3Jg/+L3kwoOZYWvnLAuxrxr73Ufr/qpeylBnrY8sP8e9pm53oT4WJRMLkxM9c\n+i1C6AX9v2qabUWnbJ4DDA4IAjckZYbGdxKIzEm3LwKeYqFWUDjXietLvRKvZq/3\n8jVYHQD9YH+QTpseBbbUN3S0jSf9UPbPKbAUqz6rG9wDBKqdoceciIHgJCPyEj6V\nxiqN55EqhjOeF0dxtC8ZUBEFWcEaOQajkUJya3wL+UBc6i3kUkledcu85Jpibe2N\n16wjN0O+Hyko1WOpz5OaT2Axmss0mfhYF4+YKul7debJdtNK3vbMLBrCL69BBu0U\nijA3KnqUZQ85Tjoa0WeGdVcXLlr504syzrwoUrQ4tE5Yqy72DeNDFjmVK/+UX7l0\nrNEabKgAgyRLACANC/L/9XgNlaFRpRrZVBjBIHeQQxLirJ22RUR4pTEN1fLgvm5y\nI6T2VLNO+vxgDsN4KKmXIBgvMa3sWDalqG+G5m+nfh+ka5WLE7NlUiUBPsyvVVot\ntJ8F2Ghw1g2kkyjI4wGPmduQaQLHVyjKJvZ0T30hZ7tNFM7PakI4EcW9DK07dZsL\nr5sBaRoXgHcQ8zn7rq1+sPyrBjQsjB9Oid2Hmi5gQXdWe7QsZMq28Ntp+lW6u16N\nUgo3GKziQtFlfm7Xh+T9XBSPyjz/rAjlmEJ7ddYM1u8xdQihXhY=\n=X5vV\n-----END PGP SIGNATURE-----", "payload": "tree f7c3edd82cf04d10e02275af0a2f5278a3628def\nparent edcde7025c928de35e8635c6725b20ce91dc241d\nauthor Jeremy Stucki <jeremy@myelin.ch> 1561484190 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1562140863 +0200\n\nRevert changes to the standard library\n\nMoved to its own PR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c515da0728a3a3738be6ffa96168d060243225", "html_url": "https://github.com/rust-lang/rust/commit/88c515da0728a3a3738be6ffa96168d060243225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c515da0728a3a3738be6ffa96168d060243225/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edcde7025c928de35e8635c6725b20ce91dc241d", "url": "https://api.github.com/repos/rust-lang/rust/commits/edcde7025c928de35e8635c6725b20ce91dc241d", "html_url": "https://github.com/rust-lang/rust/commit/edcde7025c928de35e8635c6725b20ce91dc241d"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "6b079fc87cc78905f431a097a2aa8aaee7a33f3b", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -2004,7 +2004,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn keys(&self) -> Keys<'_, K, V> {\n+    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n         Keys { inner: self.iter() }\n     }\n \n@@ -2025,7 +2025,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn values(&self) -> Values<'_, K, V> {\n+    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n         Values { inner: self.iter() }\n     }\n \n@@ -2529,8 +2529,8 @@ enum UnderflowResult<'a, K, V> {\n     Stole(NodeRef<marker::Mut<'a>, K, V, marker::Internal>),\n }\n \n-fn handle_underfull_node<K, V>(node: NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal>)\n-                               -> UnderflowResult<'_, K, V> {\n+fn handle_underfull_node<'a, K, V>(node: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>)\n+                                   -> UnderflowResult<'a, K, V> {\n     let parent = if let Ok(parent) = node.ascend() {\n         parent\n     } else {"}, {"sha": "581c66c7086a5b9f0270e3aee54e80e757bda764", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -394,7 +394,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     }\n \n     /// Temporarily takes out another, immutable reference to the same node.\n-    fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {\n+    fn reborrow<'a>(&'a self) -> NodeRef<marker::Immut<'a>, K, V, Type> {\n         NodeRef {\n             height: self.height,\n             node: self.node,"}, {"sha": "7f7722548f581df43deca22d09a91d2950158911", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -552,7 +552,7 @@ impl String {\n     /// assert_eq!(\"Hello \ufffdWorld\", output);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {\n+    pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> {\n         let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();\n \n         let (first_valid, first_broken) = if let Some(chunk) = iter.next() {"}, {"sha": "d9757d78dcebbf34886c9c6b8915e9faf0e9b9ef", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -498,7 +498,7 @@ macro_rules! impls{\n /// #     end: *const T,\n /// #     phantom: PhantomData<&'a T>,\n /// # }\n-/// fn borrow_vec<T>(vec: &Vec<T>) -> Slice<'_, T> {\n+/// fn borrow_vec<'a, T>(vec: &'a Vec<T>) -> Slice<'a, T> {\n ///     let ptr = vec.as_ptr();\n ///     Slice {\n ///         start: ptr,"}, {"sha": "3158f58e958068c75d8b108d6846a1a229f80c06", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -105,7 +105,7 @@ pub trait Index<Idx: ?Sized> {\n /// impl Index<Side> for Balance {\n ///     type Output = Weight;\n ///\n-///     fn index(&self, index: Side) -> &Self::Output {\n+///     fn index<'a>(&'a self, index: Side) -> &'a Self::Output {\n ///         println!(\"Accessing {:?}-side of balance immutably\", index);\n ///         match index {\n ///             Side::Left => &self.left,\n@@ -115,7 +115,7 @@ pub trait Index<Idx: ?Sized> {\n /// }\n ///\n /// impl IndexMut<Side> for Balance {\n-///     fn index_mut(&mut self, index: Side) -> &mut Self::Output {\n+///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Self::Output {\n ///         println!(\"Accessing {:?}-side of balance mutably\", index);\n ///         match index {\n ///             Side::Left => &mut self.left,"}, {"sha": "3fe048a6986bb2e0bb33d70e7888560ea2226ab8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -392,7 +392,7 @@ impl fmt::Debug for Item {\n impl Item {\n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n-    pub fn doc_value(&self) -> Option<&str> {\n+    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n         self.attrs.doc_value()\n     }\n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n@@ -699,11 +699,11 @@ impl<'a> Iterator for ListAttributesIter<'a> {\n \n pub trait AttributesExt {\n     /// Finds an attribute as List and returns the list of attributes nested inside.\n-    fn lists(&self, name: Symbol) -> ListAttributesIter<'_>;\n+    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n-    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n+    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a> {\n         ListAttributesIter {\n             attrs: self.iter(),\n             current_list: Vec::new().into_iter(),\n@@ -952,7 +952,7 @@ impl Attributes {\n \n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n-    pub fn doc_value(&self) -> Option<&str> {\n+    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n         self.doc_strings.first().map(|s| s.as_str())\n     }\n \n@@ -1037,7 +1037,7 @@ impl Hash for Attributes {\n }\n \n impl AttributesExt for Attributes {\n-    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n+    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a> {\n         self.other_attrs.lists(name)\n     }\n }"}, {"sha": "2080637ecb402dab68c79df8c821c83b45ee5bdc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -2541,7 +2541,7 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n-fn shorter(s: Option<&str>) -> String {\n+fn shorter<'a>(s: Option<&'a str>) -> String {\n     match s {\n         Some(s) => s.lines()\n             .skip_while(|s| s.chars().all(|c| c.is_whitespace()))"}, {"sha": "2564c611e54e59ebc25de0698cf1aab91b08b686", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -119,7 +119,7 @@ impl TocBuilder {\n     /// Push a level `level` heading into the appropriate place in the\n     /// hierarchy, returning a string containing the section number in\n     /// `<num>.<num>.<num>` format.\n-    pub fn push(&mut self, level: u32, name: String, id: String) -> &str {\n+    pub fn push<'a>(&'a mut self, level: u32, name: String, id: String) -> &'a str {\n         assert!(level >= 1);\n \n         // collapse all previous sections into their parents until we"}, {"sha": "b0a37ea9c8081f50025fad2cfa5d50f5b0e80e1d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -17,7 +17,7 @@ use crate::html::markdown::{ErrorCodes, IdMap, Markdown, MarkdownWithToc, find_t\n use crate::test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n-fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n+fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n     let mut metadata = Vec::new();\n     let mut count = 0;\n "}, {"sha": "a7e7c09f9ae4411e9546f493278db7bebdfc3d61", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -1031,7 +1031,7 @@ impl Json {\n \n      /// If the Json value is an Object, returns the value associated with the provided key.\n     /// Otherwise, returns None.\n-    pub fn find(&self, key: &str) -> Option<&Json> {\n+    pub fn find<'a>(&'a self, key: &str) -> Option<&'a Json>{\n         match *self {\n             Json::Object(ref map) => map.get(key),\n             _ => None\n@@ -1052,7 +1052,7 @@ impl Json {\n     /// If the Json value is an Object, performs a depth-first search until\n     /// a value associated with the provided key is found. If no value is found\n     /// or the Json value is not an Object, returns `None`.\n-    pub fn search(&self, key: &str) -> Option<&Json> {\n+    pub fn search<'a>(&'a self, key: &str) -> Option<&'a Json> {\n         match self {\n             &Json::Object(ref map) => {\n                 match map.get(key) {"}, {"sha": "3c4f8e077c922ee536340b607fc3e2c2b29179cc", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -140,7 +140,7 @@ fn wait_timeout_receiver<'a, 'b, T>(lock: &'a Mutex<State<T>>,\n     new_guard\n }\n \n-fn abort_selection<T>(guard: &mut MutexGuard<'_, State<T>>) -> bool {\n+fn abort_selection<'a, T>(guard: &mut MutexGuard<'a , State<T>>) -> bool {\n     match mem::replace(&mut guard.blocker, NoneBlocked) {\n         NoneBlocked => true,\n         BlockedSender(token) => {"}, {"sha": "b3ef5f3064c167f1d658a0ebfe994d9f13241720", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -673,7 +673,7 @@ impl UnixListener {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n-    pub fn incoming(&self) -> Incoming {\n+    pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n         Incoming { listener: self }\n     }\n }"}, {"sha": "41090caee8459fea5e08e6ad9054379d9da08da3", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -894,7 +894,7 @@ impl UnixListener {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub fn incoming(&self) -> Incoming<'_> {\n+    pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n         Incoming { listener: self }\n     }\n }"}, {"sha": "1cb5553912981a532a4273d107855e543a69d6ae", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -195,7 +195,7 @@ fn wide_char_to_multi_byte(code_page: u32,\n     }\n }\n \n-pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {\n+pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n     match v.iter().position(|c| *c == 0) {\n         // don't include the 0\n         Some(i) => &v[..i],"}, {"sha": "f3178a5e9e6909f78eb0a72829bbead4729e3900", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -19,7 +19,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'\\\\'\n }\n \n-pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n+pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix<'a>> {\n     use crate::path::Prefix::*;\n     unsafe {\n         // The unsafety here stems from converting between &OsStr and &[u8]"}, {"sha": "44b0963302ddfe5491d5c020dd5edcc7f487b7a5", "filename": "src/libstd/sys_common/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys_common%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c515da0728a3a3738be6ffa96168d060243225/src%2Flibstd%2Fsys_common%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fio.rs?ref=88c515da0728a3a3738be6ffa96168d060243225", "patch": "@@ -16,7 +16,7 @@ pub mod test {\n             p.join(path)\n         }\n \n-        pub fn path(&self) -> &Path {\n+        pub fn path<'a>(&'a self) -> &'a Path {\n             let TempDir(ref p) = *self;\n             p\n         }"}]}