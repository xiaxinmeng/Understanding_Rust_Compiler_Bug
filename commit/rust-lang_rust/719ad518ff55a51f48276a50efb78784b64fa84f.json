{"sha": "719ad518ff55a51f48276a50efb78784b64fa84f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxOWFkNTE4ZmY1NWE1MWY0ODI3NmE1MGVmYjc4Nzg0YjY0ZmE4NGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-11T13:33:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-11T13:33:20Z"}, "message": "Rollup merge of #24285 - brson:rustup, r=alexcrichton\n\n Now lives at https://github.com/rust-lang/rustup\n\nr? @alexcrichton", "tree": {"sha": "6641ab552ae5422eb8576e50cfb7d80d5e495bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6641ab552ae5422eb8576e50cfb7d80d5e495bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/719ad518ff55a51f48276a50efb78784b64fa84f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/719ad518ff55a51f48276a50efb78784b64fa84f", "html_url": "https://github.com/rust-lang/rust/commit/719ad518ff55a51f48276a50efb78784b64fa84f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/719ad518ff55a51f48276a50efb78784b64fa84f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872de9c71f88c8e27a8eabc00b1a29d8b30ac552", "url": "https://api.github.com/repos/rust-lang/rust/commits/872de9c71f88c8e27a8eabc00b1a29d8b30ac552", "html_url": "https://github.com/rust-lang/rust/commit/872de9c71f88c8e27a8eabc00b1a29d8b30ac552"}, {"sha": "a0f832da523e761b2ccce9d5d7d04c7a772240b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f832da523e761b2ccce9d5d7d04c7a772240b5", "html_url": "https://github.com/rust-lang/rust/commit/a0f832da523e761b2ccce9d5d7d04c7a772240b5"}], "stats": {"total": 615, "additions": 0, "deletions": 615}, "files": [{"sha": "7c207385393c92f2262b278263799893c8d3af10", "filename": "src/etc/rustup.sh", "status": "removed", "additions": 0, "deletions": 615, "changes": 615, "blob_url": "https://github.com/rust-lang/rust/blob/872de9c71f88c8e27a8eabc00b1a29d8b30ac552/src%2Fetc%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/872de9c71f88c8e27a8eabc00b1a29d8b30ac552/src%2Fetc%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frustup.sh?ref=872de9c71f88c8e27a8eabc00b1a29d8b30ac552", "patch": "@@ -1,615 +0,0 @@\n-#!/bin/sh\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-\n-msg() {\n-    echo \"rustup: $1\"\n-}\n-\n-step_msg() {\n-    msg\n-    msg \"$1\"\n-    msg\n-}\n-\n-warn() {\n-    echo \"rustup: WARNING: $1\"\n-}\n-\n-err() {\n-    echo \"rustup: error: $1\"\n-    exit 1\n-}\n-\n-need_ok() {\n-    if [ $? -ne 0 ]\n-    then\n-        err \"$1\"\n-    fi\n-}\n-\n-\n-putvar() {\n-    local T\n-    eval T=\\$$1\n-    eval TLEN=\\${#$1}\n-    if [ $TLEN -gt 35 ]\n-    then\n-        printf \"rustup: %-20s := %.35s ...\\n\" $1 \"$T\"\n-    else\n-        printf \"rustup: %-20s := %s %s\\n\" $1 \"$T\" \"$2\"\n-    fi\n-}\n-\n-probe() {\n-    local V=$1\n-    shift\n-    local P\n-    local T\n-    for P\n-    do\n-        T=$(which $P 2>&1)\n-        if [ $? -eq 0 ]\n-        then\n-            VER0=$($P --version 2>/dev/null | head -1 \\\n-                |  sed -e 's/[^0-9]*\\([vV]\\?[0-9.]\\+[^ ]*\\).*/\\1/' )\n-            if [ $? -eq 0 -a \"x${VER0}\" != \"x\" ]\n-            then\n-              VER=\"($VER0)\"\n-            else\n-              VER=\"\"\n-            fi\n-            break\n-        else\n-            VER=\"\"\n-            T=\"\"\n-        fi\n-    done\n-    eval $V=\\$T\n-    putvar $V \"$VER\"\n-}\n-\n-probe_need() {\n-    local V=$1\n-    probe $*\n-    eval VV=\\$$V\n-    if [ -z \"$VV\" ]\n-    then\n-        err \"needed, but unable to find any of: $*\"\n-    fi\n-}\n-\n-\n-valopt() {\n-    VAL_OPTIONS=\"$VAL_OPTIONS $1\"\n-\n-    local OP=$1\n-    local DEFAULT=$2\n-    shift\n-    shift\n-    local DOC=\"$*\"\n-    if [ $HELP -eq 0 ]\n-    then\n-        local UOP=$(echo $OP | tr '[:lower:]' '[:upper:]' | tr '\\-' '\\_')\n-        local V=\"CFG_${UOP}\"\n-        eval $V=\"$DEFAULT\"\n-        for arg in $CFG_ARGS\n-        do\n-            if echo \"$arg\" | grep -q -- \"--$OP=\"\n-            then\n-                val=$(echo \"$arg\" | cut -f2 -d=)\n-                eval $V=$val\n-            fi\n-        done\n-        putvar $V\n-    else\n-        if [ -z \"$DEFAULT\" ]\n-        then\n-            DEFAULT=\"<none>\"\n-        fi\n-        OP=\"${OP}=[${DEFAULT}]\"\n-        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n-    fi\n-}\n-\n-opt() {\n-    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n-\n-    local OP=$1\n-    local DEFAULT=$2\n-    shift\n-    shift\n-    local DOC=\"$*\"\n-    local FLAG=\"\"\n-\n-    if [ $DEFAULT -eq 0 ]\n-    then\n-        FLAG=\"enable\"\n-    else\n-        FLAG=\"disable\"\n-        DOC=\"don't $DOC\"\n-    fi\n-\n-    if [ $HELP -eq 0 ]\n-    then\n-        for arg in $CFG_ARGS\n-        do\n-            if [ \"$arg\" = \"--${FLAG}-${OP}\" ]\n-            then\n-                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n-                FLAG=$(echo $FLAG | tr 'a-z' 'A-Z')\n-                local V=\"CFG_${FLAG}_${OP}\"\n-                eval $V=1\n-                putvar $V\n-            fi\n-        done\n-    else\n-        if [ ! -z \"$META\" ]\n-        then\n-            OP=\"$OP=<$META>\"\n-        fi\n-        printf \"    --%-30s %s\\n\" \"$FLAG-$OP\" \"$DOC\"\n-     fi\n-}\n-\n-flag() {\n-    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n-\n-    local OP=$1\n-    shift\n-    local DOC=\"$*\"\n-\n-    if [ $HELP -eq 0 ]\n-    then\n-        for arg in $CFG_ARGS\n-        do\n-            if [ \"$arg\" = \"--${OP}\" ]\n-            then\n-                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n-                local V=\"CFG_${OP}\"\n-                eval $V=1\n-                putvar $V\n-            fi\n-        done\n-    else\n-        if [ ! -z \"$META\" ]\n-        then\n-            OP=\"$OP=<$META>\"\n-        fi\n-        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n-     fi\n-}\n-\n-validate_opt() {\n-    for arg in $CFG_ARGS\n-    do\n-        isArgValid=0\n-        for option in $BOOL_OPTIONS\n-        do\n-            if test --disable-$option = $arg\n-            then\n-                isArgValid=1\n-            fi\n-            if test --enable-$option = $arg\n-            then\n-                isArgValid=1\n-            fi\n-            if test --$option = $arg\n-            then\n-                isArgValid=1\n-            fi\n-        done\n-        for option in $VAL_OPTIONS\n-        do\n-            if echo \"$arg\" | grep -q -- \"--$option=\"\n-            then\n-                isArgValid=1\n-            fi\n-        done\n-        if [ \"$arg\" = \"--help\" ]\n-        then\n-            echo\n-            echo \"No more help available for Configure options,\"\n-            echo \"check the Wiki or join our IRC channel\"\n-            break\n-        else\n-            if test $isArgValid -eq 0\n-            then\n-                err \"Option '$arg' is not recognized\"\n-            fi\n-        fi\n-    done\n-}\n-\n-create_tmp_dir() {\n-    local TMP_DIR=`pwd`/rustup-tmp-install\n-\n-    rm -Rf \"${TMP_DIR}\"\n-    need_ok \"failed to remove temporary installation directory\"\n-\n-    mkdir -p \"${TMP_DIR}\"\n-    need_ok \"failed to create create temporary installation directory\"\n-\n-    echo $TMP_DIR\n-}\n-\n-# Make `tr` locale independent\n-LC_CTYPE=C\n-\n-probe_need CFG_CURL  curl\n-probe_need CFG_TAR   tar\n-probe_need CFG_FILE  file\n-\n-probe CFG_SHA256SUM sha256sum\n-probe CFG_SHASUM shasum\n-\n-if [ -z \"$CFG_SHA256SUM\" -a -z \"$CFG_SHASUM\" ]; then\n-    err \"unable to find either sha256sum or shasum\"\n-fi\n-\n-calculate_hash() {\n-    if [ -n \"$CFG_SHA256SUM\" ]; then\n-        ${CFG_SHA256SUM} $@\n-    else\n-        ${CFG_SHASUM} -a 256 $@\n-    fi\n-}\n-\n-CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n-CFG_SELF=\"$0\"\n-CFG_ARGS=\"$@\"\n-\n-HELP=0\n-if [ \"$1\" = \"--help\" ]\n-then\n-    HELP=1\n-    shift\n-    echo\n-    echo \"Usage: $CFG_SELF [options]\"\n-    echo\n-    echo \"Options:\"\n-    echo\n-else\n-    step_msg \"processing $CFG_SELF args\"\n-fi\n-\n-OPTIONS=\"\"\n-BOOL_OPTIONS=\"\"\n-VAL_OPTIONS=\"\"\n-\n-flag uninstall \"only uninstall from the installation prefix\"\n-valopt prefix \"${RUSTUP_PREFIX}\" \"set installation prefix\"\n-valopt date \"\" \"use the YYYY-MM-DD nightly instead of the current nightly\"\n-valopt channel \"beta\" \"use the selected release channel [beta]\"\n-flag save \"save the downloaded nightlies to ~/.rustup\"\n-\n-if [ $HELP -eq 1 ]\n-then\n-    echo\n-    exit 0\n-fi\n-\n-step_msg \"validating $CFG_SELF args\"\n-validate_opt\n-\n-\n-# Platform detection copied from `configure`\n-\n-CFG_OSTYPE=$(uname -s)\n-CFG_CPUTYPE=$(uname -m)\n-\n-if [ $CFG_OSTYPE = Darwin -a $CFG_CPUTYPE = i386 ]\n-then\n-    # Darwin's `uname -m` lies and always returns i386. We have to use sysctl\n-    # instead.\n-    if sysctl hw.optional.x86_64 | grep -q ': 1'\n-    then\n-        CFG_CPUTYPE=x86_64\n-    fi\n-fi\n-\n-# The goal here is to come up with the same triple as LLVM would,\n-# at least for the subset of platforms we're willing to target.\n-\n-case $CFG_OSTYPE in\n-\n-    Linux)\n-        CFG_OSTYPE=unknown-linux-gnu\n-        ;;\n-\n-    FreeBSD)\n-        CFG_OSTYPE=unknown-freebsd\n-        ;;\n-\n-    Darwin)\n-        CFG_OSTYPE=apple-darwin\n-        ;;\n-\n-    MINGW32*)\n-        CFG_OSTYPE=pc-mingw32\n-        ;;\n-# Thad's Cygwin identifiers below\n-\n-#   Vista 32 bit\n-    CYGWIN_NT-6.0)\n-        CFG_OSTYPE=pc-mingw32\n-        CFG_CPUTYPE=i686\n-        ;;\n-\n-#   Vista 64 bit\n-    CYGWIN_NT-6.0-WOW64)\n-        CFG_OSTYPE=w64-mingw32\n-        CFG_CPUTYPE=x86_64\n-        ;;\n-\n-#   Win 7 32 bit\n-    CYGWIN_NT-6.1)\n-        CFG_OSTYPE=pc-mingw32\n-        CFG_CPUTYPE=i686\n-        ;;\n-\n-#   Win 7 64 bit\n-    CYGWIN_NT-6.1-WOW64)\n-        CFG_OSTYPE=w64-mingw32\n-        CFG_CPUTYPE=x86_64\n-        ;;\n-\n-# We do not detect other OS such as XP/2003 using 64 bit using uname.\n-# If we want to in the future, we will need to use Cygwin\n-# Chuck's csih helper in /usr/lib/csih/winProductName.exe or alternative.\n-    *)\n-        err \"unknown OS type: $CFG_OSTYPE\"\n-        ;;\n-esac\n-\n-\n-case $CFG_CPUTYPE in\n-\n-    i386 | i486 | i686 | i786 | x86)\n-        CFG_CPUTYPE=i686\n-        ;;\n-\n-    xscale | arm)\n-        CFG_CPUTYPE=arm\n-        ;;\n-\n-    x86_64 | x86-64 | x64 | amd64)\n-        CFG_CPUTYPE=x86_64\n-        ;;\n-\n-    *)\n-        err \"unknown CPU type: $CFG_CPUTYPE\"\n-esac\n-\n-# Detect 64 bit linux systems with 32 bit userland and force 32 bit compilation\n-if [ $CFG_OSTYPE = unknown-linux-gnu -a $CFG_CPUTYPE = x86_64 ]\n-then\n-    \"${CFG_FILE}\" -L \"$SHELL\" | grep -q \"x86[_-]64\"\n-    if [ $? != 0 ]; then\n-        CFG_CPUTYPE=i686\n-    fi\n-fi\n-\n-HOST_TRIPLE=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n-\n-# Is this a triple we have nightlies for?\n-case $HOST_TRIPLE in\n-\n-        x86_64-unknown-linux-gnu)\n-                ;;\n-\n-        i686-unknown-linux-gnu)\n-                ;;\n-\n-        x86_64-apple-darwin)\n-                ;;\n-\n-        i686-apple-darwin)\n-                ;;\n-\n-        *)\n-                err \"rustup.sh doesn't work for host $HOST_TRIPLE\"\n-\n-esac\n-\n-msg \"host triple: ${HOST_TRIPLE}\"\n-\n-CFG_INSTALL_FLAGS=\"\"\n-if [ -n \"${CFG_UNINSTALL}\" ]\n-then\n-    CFG_INSTALL_FLAGS=\"${CFG_INSTALL_FLAGS} --uninstall\"\n-fi\n-\n-if [ -n \"${CFG_PREFIX}\" ]\n-then\n-    CFG_INSTALL_FLAGS=\"${CFG_INSTALL_FLAGS} --prefix=${CFG_PREFIX}\"\n-fi\n-\n-CFG_TMP_DIR=$(mktemp -d 2>/dev/null \\\n-           || mktemp -d -t 'rustup-tmp-install' 2>/dev/null \\\n-           || create_tmp_dir)\n-\n-# If we're saving nightlies and we didn't specify which one, grab the latest\n-# version from the perspective of the server. Buildbot has typically finished\n-# building and uploading by ~8UTC, but we want to include a little buffer.\n-#\n-# FIXME It would be better to use the known most recent nightly that has been\n-# built. This is waiting on a change to have buildbot publish metadata that\n-# can be queried.\n-if [ -n \"${CFG_SAVE}\" -a -z \"${CFG_DATE}\" ];\n-then\n-    CFG_DATE=`TZ=Etc/UTC+9 date \"+%Y-%m-%d\"`\n-fi\n-\n-RUST_URL=\"https://static.rust-lang.org/dist\"\n-case \"$CFG_CHANNEL\" in\n-    nightly)\n-        # add a date suffix if we want a particular nightly.\n-        if [ -n \"${CFG_DATE}\" ];\n-        then\n-            RUST_URL=\"${RUST_URL}/${CFG_DATE}\"\n-        fi\n-\n-        RUST_PACKAGE_NAME=rust-nightly\n-        ;;\n-    beta)\n-        RUST_PACKAGE_NAME=rust-1.0.0-beta\n-        ;;\n-    *)\n-        err \"Currently 'beta' and 'nightly' are the only supported channels\"\n-esac\n-\n-RUST_PACKAGE_NAME_AND_TRIPLE=\"${RUST_PACKAGE_NAME}-${HOST_TRIPLE}\"\n-RUST_TARBALL_NAME=\"${RUST_PACKAGE_NAME_AND_TRIPLE}.tar.gz\"\n-RUST_LOCAL_INSTALL_DIR=\"${CFG_TMP_DIR}/${RUST_PACKAGE_NAME_AND_TRIPLE}\"\n-RUST_LOCAL_INSTALL_SCRIPT=\"${RUST_LOCAL_INSTALL_DIR}/install.sh\"\n-\n-download_hash() {\n-    msg \"Downloading ${remote_sha256}\"\n-    remote_sha256=`\"${CFG_CURL}\" -f \"${remote_sha256}\"`\n-    if [ -n \"${CFG_SAVE}\" ]; then\n-        echo \"${remote_sha256}\" > \"${local_sha_file}\"\n-    fi\n-    if [ \"$?\" -ne 0 ]; then\n-        rm -Rf \"${CFG_TMP_DIR}\"\n-        err \"Failed to download ${remote_url}\"\n-    fi\n-}\n-\n-verify_hash() {\n-    remote_sha256=\"$1\"\n-    local_file=\"$2\"\n-    local_sha_file=\"${local_file}.sha256\"\n-\n-    if [ -n \"${CFG_SAVE}\" ]; then\n-        if [ -f \"${local_sha_file}\" ]; then\n-            msg \"Local ${local_sha_file} exists, treating as remote hash\"\n-            remote_sha256=`cat \"${local_sha_file}\"`\n-        else\n-            download_hash\n-        fi\n-    else\n-        download_hash\n-    fi\n-\n-    msg \"Verifying hash\"\n-    local_sha256=$(calculate_hash \"${local_file}\")\n-    if [ \"$?\" -ne 0 ]; then\n-        rm -Rf \"${CFG_TMP_DIR}\"\n-        err \"Failed to compute hash for ${local_tarball}\"\n-    fi\n-\n-    # We only need the sha, not the filenames\n-    remote_sha256=`echo ${remote_sha256} | cut -f 1 -d ' '`\n-    local_sha256=`echo ${local_sha256} | cut -f 1 -d ' '`\n-\n-    if [ \"${remote_sha256}\" != \"${local_sha256}\" ]; then\n-        rm -Rf \"${CFG_TMP_DIR}\"\n-        errmsg=\"invalid sha256.\\n\"\n-        errmsg=\"$errmsg ${remote_sha256}\\t${remote_tarball}\\n\"\n-        errmsg=\"$errmsg ${local_sha256}\\t${local_tarball}\"\n-        err \"$errmsg\"\n-    fi\n-}\n-\n-# Fetch the package. Optionally caches the tarballs.\n-download_package() {\n-    remote_tarball=\"$1\"\n-    local_tarball=\"$2\"\n-    remote_sha256=\"${remote_tarball}.sha256\"\n-\n-    # Check if we've already downloaded this file.\n-    if [ -e \"${local_tarball}.tmp\" ]; then\n-        msg \"Resuming ${remote_tarball} to ${local_tarball}\"\n-\n-        \"${CFG_CURL}\" -f -C - -o \"${local_tarball}.tmp\" \"${remote_tarball}\"\n-        if [ $? -ne 0 ]\n-        then\n-            rm -Rf \"${CFG_TMP_DIR}\"\n-            err \"failed to download installer\"\n-        fi\n-\n-        mv \"${local_tarball}.tmp\" \"${local_tarball}\"\n-    elif [ ! -e \"${local_tarball}\" ]; then\n-        msg \"Downloading ${remote_tarball} to ${local_tarball}\"\n-\n-        \"${CFG_CURL}\" -f -o \"${local_tarball}.tmp\" \"${remote_tarball}\"\n-        if [ $? -ne 0 ]\n-        then\n-            rm -Rf \"${CFG_TMP_DIR}\"\n-            err \"failed to download installer\"\n-        fi\n-\n-        mv \"${local_tarball}.tmp\" \"${local_tarball}\"\n-    fi\n-\n-    verify_hash \"${remote_sha256}\" \"${local_tarball}\"\n-}\n-\n-# Wrap all the commands needed to install a package.\n-install_package() {\n-    local_tarball=\"$1\"\n-    install_script=\"$2\"\n-\n-    msg \"Extracting ${local_tarball}\"\n-    (cd \"${CFG_TMP_DIR}\" && \"${CFG_TAR}\" -xzf \"${local_tarball}\")\n-    if [ $? -ne 0 ]; then\n-        rm -Rf \"${CFG_TMP_DIR}\"\n-        err \"failed to unpack installer\"\n-    fi\n-\n-    sh \"${install_script}\" \"${CFG_INSTALL_FLAGS}\"\n-    if [ $? -ne 0 ]\n-    then\n-        rm -Rf \"${CFG_TMP_DIR}\"\n-        err \"failed to install Rust\"\n-    fi\n-}\n-\n-# It's possible that curl could be interrupted partway though downloading\n-# `rustup.sh`, truncating the file. This could be especially bad if we were in\n-# the middle of a line that would run \"rm -rf \". To protect against this, we\n-# wrap up the `rustup.sh` destructive functionality in this helper function,\n-# which we call as the last thing we do. This means we will not do anything\n-# unless we have the entire file downloaded.\n-install_packages() {\n-    rm -Rf \"${CFG_TMP_DIR}\"\n-    need_ok \"failed to remove temporary installation directory\"\n-\n-    mkdir -p \"${CFG_TMP_DIR}\"\n-    need_ok \"failed to create create temporary installation directory\"\n-\n-    # If we're saving our nightlies, put them in $HOME/.rustup.\n-    if [ -n \"${CFG_SAVE}\" ]\n-    then\n-        RUST_DOWNLOAD_DIR=\"${HOME}/.rustup/${CFG_DATE}\"\n-    else\n-        RUST_DOWNLOAD_DIR=\"${CFG_TMP_DIR}\"\n-    fi\n-\n-    mkdir -p \"${RUST_DOWNLOAD_DIR}\"\n-    need_ok \"failed to create create download directory\"\n-\n-    RUST_LOCAL_TARBALL=\"${RUST_DOWNLOAD_DIR}/${RUST_TARBALL_NAME}\"\n-\n-    download_package \\\n-        \"${RUST_URL}/${RUST_TARBALL_NAME}\" \\\n-        \"${RUST_LOCAL_TARBALL}\"\n-\n-    install_package \\\n-        \"${RUST_LOCAL_TARBALL}\" \\\n-        \"${RUST_LOCAL_INSTALL_SCRIPT}\"\n-\n-    rm -Rf \"${CFG_TMP_DIR}\"\n-    need_ok \"couldn't rm temporary installation directory\"\n-}\n-\n-install_packages"}]}