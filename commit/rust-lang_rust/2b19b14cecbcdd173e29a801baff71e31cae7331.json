{"sha": "2b19b14cecbcdd173e29a801baff71e31cae7331", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMTliMTRjZWNiY2RkMTczZTI5YTgwMWJhZmY3MWUzMWNhZTczMzE=", "commit": {"author": {"name": "blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2020-09-23T04:04:31Z"}, "committer": {"name": "blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2020-09-23T04:04:31Z"}, "message": "a few more &mut self -> self changes", "tree": {"sha": "814aab3ff22be0b0a3859e795e32c4be45a66ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/814aab3ff22be0b0a3859e795e32c4be45a66ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b19b14cecbcdd173e29a801baff71e31cae7331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b19b14cecbcdd173e29a801baff71e31cae7331", "html_url": "https://github.com/rust-lang/rust/commit/2b19b14cecbcdd173e29a801baff71e31cae7331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b19b14cecbcdd173e29a801baff71e31cae7331/comments", "author": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "985dff9e7ed1fd7896b071eaf637fd531a690e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/985dff9e7ed1fd7896b071eaf637fd531a690e91", "html_url": "https://github.com/rust-lang/rust/commit/985dff9e7ed1fd7896b071eaf637fd531a690e91"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "8b8cdbf252555089b8e1f0db64b367afa1d2240f", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b19b14cecbcdd173e29a801baff71e31cae7331/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b19b14cecbcdd173e29a801baff71e31cae7331/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=2b19b14cecbcdd173e29a801baff71e31cae7331", "patch": "@@ -160,7 +160,7 @@ impl Global {\n     // SAFETY: Same as `AllocRef::grow`\n     #[inline]\n     unsafe fn grow_impl(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -228,7 +228,7 @@ unsafe impl AllocRef for Global {\n \n     #[inline]\n     unsafe fn grow(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -239,7 +239,7 @@ unsafe impl AllocRef for Global {\n \n     #[inline]\n     unsafe fn grow_zeroed(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -250,7 +250,7 @@ unsafe impl AllocRef for Global {\n \n     #[inline]\n     unsafe fn shrink(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,"}, {"sha": "f9eb8981bbfc24d1a8dafeb52803d4b391edec3c", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b19b14cecbcdd173e29a801baff71e31cae7331/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b19b14cecbcdd173e29a801baff71e31cae7331/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=2b19b14cecbcdd173e29a801baff71e31cae7331", "patch": "@@ -183,7 +183,7 @@ pub unsafe trait AllocRef {\n     ///\n     /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html\n     unsafe fn grow(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -244,7 +244,7 @@ pub unsafe trait AllocRef {\n     ///\n     /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html\n     unsafe fn grow_zeroed(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -308,7 +308,7 @@ pub unsafe trait AllocRef {\n     ///\n     /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html\n     unsafe fn shrink(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -337,13 +337,13 @@ pub unsafe trait AllocRef {\n     ///\n     /// The returned adaptor also implements `AllocRef` and will simply borrow this.\n     #[inline(always)]\n-    fn by_ref(&mut self) -> &mut Self {\n+    fn by_ref(&mut self) -> &Self {\n         self\n     }\n }\n \n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-unsafe impl<A> AllocRef for &mut A\n+unsafe impl<A> AllocRef for &A\n where\n     A: AllocRef + ?Sized,\n {\n@@ -365,7 +365,7 @@ where\n \n     #[inline]\n     unsafe fn grow(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -376,7 +376,7 @@ where\n \n     #[inline]\n     unsafe fn grow_zeroed(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -387,7 +387,7 @@ where\n \n     #[inline]\n     unsafe fn shrink(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,"}, {"sha": "ba158511f64c085eae97538d255f77bebc398c95", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b19b14cecbcdd173e29a801baff71e31cae7331/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b19b14cecbcdd173e29a801baff71e31cae7331/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=2b19b14cecbcdd173e29a801baff71e31cae7331", "patch": "@@ -152,7 +152,7 @@ impl System {\n     // SAFETY: Same as `AllocRef::grow`\n     #[inline]\n     unsafe fn grow_impl(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -190,7 +190,7 @@ impl System {\n             old_size => unsafe {\n                 let new_ptr = self.alloc_impl(new_layout, zeroed)?;\n                 ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);\n-                self.dealloc(ptr, old_layout);\n+                AllocRef::dealloc(&self, ptr, old_layout);\n                 Ok(new_ptr)\n             },\n         }\n@@ -222,7 +222,7 @@ unsafe impl AllocRef for System {\n \n     #[inline]\n     unsafe fn grow(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -233,7 +233,7 @@ unsafe impl AllocRef for System {\n \n     #[inline]\n     unsafe fn grow_zeroed(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -244,7 +244,7 @@ unsafe impl AllocRef for System {\n \n     #[inline]\n     unsafe fn shrink(\n-        &mut self,\n+        &self,\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n@@ -257,7 +257,7 @@ unsafe impl AllocRef for System {\n         match new_layout.size() {\n             // SAFETY: conditions must be upheld by the caller\n             0 => unsafe {\n-                self.dealloc(ptr, old_layout);\n+                AllocRef::dealloc(&self, ptr, old_layout);\n                 Ok(NonNull::slice_from_raw_parts(new_layout.dangling(), 0))\n             },\n \n@@ -277,9 +277,9 @@ unsafe impl AllocRef for System {\n             // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract\n             // for `dealloc` must be upheld by the caller.\n             new_size => unsafe {\n-                let new_ptr = self.alloc(new_layout)?;\n+                let new_ptr = AllocRef::alloc(&self, new_layout)?;\n                 ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), new_size);\n-                self.dealloc(ptr, old_layout);\n+                AllocRef::dealloc(&self, ptr, old_layout);\n                 Ok(new_ptr)\n             },\n         }"}, {"sha": "dfb5d3e9e38d0fb40cd49abd79cf1d32df56d6ce", "filename": "src/test/ui/allocator/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b19b14cecbcdd173e29a801baff71e31cae7331/src%2Ftest%2Fui%2Fallocator%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b19b14cecbcdd173e29a801baff71e31cae7331/src%2Ftest%2Fui%2Fallocator%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fcustom.rs?ref=2b19b14cecbcdd173e29a801baff71e31cae7331", "patch": "@@ -19,7 +19,7 @@ struct A;\n unsafe impl alloc::GlobalAlloc for A {\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n         HITS.fetch_add(1, Ordering::SeqCst);\n-        AllocRef::alloc(&System, layout).unwrap().as_mut_ptr()\n+        alloc::GlobalAlloc::alloc(&System, layout)\n     }\n \n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {"}]}