{"sha": "c69872bb6c0657241a5b3cf8944861dbd3ff7468", "node_id": "C_kwDOAAsO6NoAKGM2OTg3MmJiNmMwNjU3MjQxYTViM2NmODk0NDg2MWRiZDNmZjc0Njg", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-09T14:00:22Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-09T16:43:12Z"}, "message": "add 'is_assign_rhs' to avoid weird suggesting 'let'", "tree": {"sha": "d2708c03d37a36d4383a23e72e125ee4e57db1bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2708c03d37a36d4383a23e72e125ee4e57db1bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c69872bb6c0657241a5b3cf8944861dbd3ff7468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c69872bb6c0657241a5b3cf8944861dbd3ff7468", "html_url": "https://github.com/rust-lang/rust/commit/c69872bb6c0657241a5b3cf8944861dbd3ff7468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c69872bb6c0657241a5b3cf8944861dbd3ff7468/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5689f9c679838a921be5a0ac64e0cd13637efc35", "url": "https://api.github.com/repos/rust-lang/rust/commits/5689f9c679838a921be5a0ac64e0cd13637efc35", "html_url": "https://github.com/rust-lang/rust/commit/5689f9c679838a921be5a0ac64e0cd13637efc35"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "ede67813883d6b2643464e886c8f769156b6c7e8", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c69872bb6c0657241a5b3cf8944861dbd3ff7468/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69872bb6c0657241a5b3cf8944861dbd3ff7468/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=c69872bb6c0657241a5b3cf8944861dbd3ff7468", "patch": "@@ -527,6 +527,7 @@ struct DiagnosticMetadata<'ast> {\n \n     /// Used to detect possible new binding written without `let` and to provide structured suggestion.\n     in_assignment: Option<&'ast Expr>,\n+    is_assign_rhs: bool,\n \n     /// If we are currently in a trait object definition. Used to point at the bounds when\n     /// encountering a struct or enum.\n@@ -3963,10 +3964,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.resolve_expr(elem, Some(expr));\n                 self.visit_expr(idx);\n             }\n-            ExprKind::Assign(..) => {\n-                let old = self.diagnostic_metadata.in_assignment.replace(expr);\n-                visit::walk_expr(self, expr);\n-                self.diagnostic_metadata.in_assignment = old;\n+            ExprKind::Assign(ref lhs, ref rhs, _) => {\n+                if !self.diagnostic_metadata.is_assign_rhs {\n+                    self.diagnostic_metadata.in_assignment = Some(expr);\n+                }\n+                self.visit_expr(lhs);\n+                self.diagnostic_metadata.is_assign_rhs = true;\n+                self.diagnostic_metadata.in_assignment = None;\n+                self.visit_expr(rhs);\n+                self.diagnostic_metadata.is_assign_rhs = false;\n             }\n             _ => {\n                 visit::walk_expr(self, expr);"}, {"sha": "ec1ac015daf2184a33e0f2360ba4473acb860166", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c69872bb6c0657241a5b3cf8944861dbd3ff7468/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69872bb6c0657241a5b3cf8944861dbd3ff7468/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=c69872bb6c0657241a5b3cf8944861dbd3ff7468", "patch": "@@ -1810,36 +1810,22 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         false\n     }\n \n+    // try to give a suggestion for this pattern: `name = blah`, which is common in other languages\n+    // suggest `let name = blah` to introduce a new binding\n     fn let_binding_suggestion(&mut self, err: &mut Diagnostic, ident_span: Span) -> bool {\n-        // try to give a suggestion for this pattern: `name = 1`, which is common in other languages\n-        let mut added_suggestion = false;\n-        if let Some(Expr { kind: ExprKind::Assign(lhs, rhs, _), .. }) =\n-            self.diagnostic_metadata.in_assignment\n-        {\n-            let is_rhs_assign = matches!(rhs.kind, ExprKind::Assign(..));\n-            if let ast::ExprKind::Path(None, _) = lhs.kind && !is_rhs_assign {\n-                let sm = self.r.session.source_map();\n-                let line_span = sm.span_extend_to_line(ident_span);\n-                let ident_name = sm.span_to_snippet(ident_span).unwrap();\n-                // HACK(chenyukang): make sure ident_name is at the starting of the line to protect against macros,\n-                // and avoid some special cases like `x = x = x`\n-                if let Ok(line) = sm.span_to_snippet(line_span) &&\n-                    let stripped = line.split_whitespace().collect::<String>() &&\n-                    stripped.trim().starts_with(&ident_name) &&\n-                    stripped.matches(&format!(\"{}=\", &ident_name)).count() == 1\n-                {\n+        if let Some(Expr { kind: ExprKind::Assign(lhs, .. ), .. }) = self.diagnostic_metadata.in_assignment &&\n+            let ast::ExprKind::Path(None, _) = lhs.kind {\n+                if !ident_span.from_expansion() {\n                     err.span_suggestion_verbose(\n                         ident_span.shrink_to_lo(),\n                         \"you might have meant to introduce a new binding\",\n                         \"let \".to_string(),\n                         Applicability::MaybeIncorrect,\n                     );\n-                    added_suggestion = true;\n+                    return true;\n                 }\n             }\n-            self.diagnostic_metadata.in_assignment = None;\n-        }\n-        added_suggestion\n+        false\n     }\n \n     fn find_module(&mut self, def_id: DefId) -> Option<(Module<'a>, ImportSuggestion)> {"}, {"sha": "fb4ea3121ac677b7a4b6dababc59f7c1952f6ddb", "filename": "src/test/ui/suggestions/issue-104086-suggest-let.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c69872bb6c0657241a5b3cf8944861dbd3ff7468/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c69872bb6c0657241a5b3cf8944861dbd3ff7468/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104086-suggest-let.stderr?ref=c69872bb6c0657241a5b3cf8944861dbd3ff7468", "patch": "@@ -2,7 +2,12 @@ error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-104086-suggest-let.rs:2:5\n    |\n LL |     x = x = x;\n-   |     ^ not found in this scope\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = x = x;\n+   |     +++\n \n error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-104086-suggest-let.rs:2:9\n@@ -20,7 +25,12 @@ error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-104086-suggest-let.rs:7:5\n    |\n LL |     x = y = y = y;\n-   |     ^ not found in this scope\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = y = y = y;\n+   |     +++\n \n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/issue-104086-suggest-let.rs:7:9\n@@ -44,7 +54,12 @@ error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-104086-suggest-let.rs:13:5\n    |\n LL |     x = y = y;\n-   |     ^ not found in this scope\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = y = y;\n+   |     +++\n \n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/issue-104086-suggest-let.rs:13:9\n@@ -62,7 +77,12 @@ error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-104086-suggest-let.rs:18:5\n    |\n LL |     x = x = y;\n-   |     ^ not found in this scope\n+   |     ^\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let x = x = y;\n+   |     +++\n \n error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-104086-suggest-let.rs:18:9"}]}