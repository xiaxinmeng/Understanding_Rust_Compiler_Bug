{"sha": "27a23db66032be9be96e697fdda50e73b0b90cc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTIzZGI2NjAzMmJlOWJlOTZlNjk3ZmRkYTUwZTczYjBiOTBjYzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-23T03:03:51Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-01T23:06:22Z"}, "message": "Rework `parse_ident_attr`", "tree": {"sha": "c13f25a9e6732b48b2037920a03b03101a02e208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c13f25a9e6732b48b2037920a03b03101a02e208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a23db66032be9be96e697fdda50e73b0b90cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a23db66032be9be96e697fdda50e73b0b90cc5", "html_url": "https://github.com/rust-lang/rust/commit/27a23db66032be9be96e697fdda50e73b0b90cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a23db66032be9be96e697fdda50e73b0b90cc5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dee07b12a2dd08a281a84146dc7085299389add", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dee07b12a2dd08a281a84146dc7085299389add", "html_url": "https://github.com/rust-lang/rust/commit/2dee07b12a2dd08a281a84146dc7085299389add"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "5b55f0f232877d157d04e7391948b3c8593e60dd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/27a23db66032be9be96e697fdda50e73b0b90cc5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a23db66032be9be96e697fdda50e73b0b90cc5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=27a23db66032be9be96e697fdda50e73b0b90cc5", "patch": "@@ -761,29 +761,37 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    fn expected_ident_found(&self) -> DiagnosticBuilder<'a> {\n+        let mut err = self.struct_span_err(self.span,\n+                                           &format!(\"expected identifier, found {}\",\n+                                                    self.this_token_descr()));\n+        if let Some(token_descr) = self.token_descr() {\n+            err.span_label(self.span, format!(\"expected identifier, found {}\", token_descr));\n+        } else {\n+            err.span_label(self.span, \"expected identifier\");\n+        }\n+        err\n+    }\n+\n     pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n-        self.parse_ident_common(true, false)\n+        self.parse_ident_common(true)\n     }\n \n     pub fn parse_ident_attr(&mut self) -> PResult<'a, ast::Ident> {\n-        self.parse_ident_common(true, true)\n+        match self.token {\n+            token::Ident(i) if i.name == keywords::SelfType.name() {\n+                self.bump();\n+                Ok(i)\n+            }\n+            _ => self.parse_ident(),\n+        }\n     }\n \n-    fn parse_ident_common(&mut self, recover: bool, accept_self: bool) -> PResult<'a, ast::Ident> {\n+    fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, ast::Ident> {\n         match self.token {\n             token::Ident(i) => {\n-                if self.token.is_reserved_ident()\n-                    && !(accept_self && i.name == keywords::SelfType.name())\n-                {\n-                    let mut err = self.struct_span_err(self.span,\n-                                                       &format!(\"expected identifier, found {}\",\n-                                                                self.this_token_descr()));\n-                    if let Some(token_descr) = self.token_descr() {\n-                        err.span_label(self.span, format!(\"expected identifier, found {}\",\n-                                                          token_descr));\n-                    } else {\n-                        err.span_label(self.span, \"expected identifier\");\n-                    }\n+                if self.token.is_reserved_ident() {\n+                    let mut err = self.expected_ident_found();\n                     if recover {\n                         err.emit();\n                     } else {\n@@ -797,14 +805,7 @@ impl<'a> Parser<'a> {\n                 Err(if self.prev_token_kind == PrevTokenKind::DocComment {\n                         self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n                     } else {\n-                        let mut err = self.fatal(&format!(\"expected identifier, found `{}`\",\n-                                                          self.this_token_to_string()));\n-                        if let Some(token_descr) = self.token_descr() {\n-                            err.span_label(self.span, format!(\"expected identifier, found {}\",\n-                                                              token_descr));\n-                        } else {\n-                            err.span_label(self.span, \"expected identifier\");\n-                        }\n+                        let mut err = self.expected_ident_found();\n                         if self.token == token::Underscore {\n                             err.note(\"`_` is a wildcard pattern, not an identifier\");\n                         }\n@@ -2117,7 +2118,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             Ok(Ident::with_empty_ctxt(name))\n         } else {\n-            self.parse_ident_common(false, false)\n+            self.parse_ident_common(false)\n         }\n     }\n \n@@ -2134,7 +2135,7 @@ impl<'a> Parser<'a> {\n             hi = self.prev_span;\n             (fieldname, self.parse_expr()?, false)\n         } else {\n-            let fieldname = self.parse_ident_common(false, false)?;\n+            let fieldname = self.parse_ident_common(false)?;\n             hi = self.prev_span;\n \n             // Mimic `x: x` for the `x` field shorthand."}]}