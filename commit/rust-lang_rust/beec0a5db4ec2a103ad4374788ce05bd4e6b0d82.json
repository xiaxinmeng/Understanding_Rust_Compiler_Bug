{"sha": "beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZWMwYTVkYjRlYzJhMTAzYWQ0Mzc0Nzg4Y2UwNWJkNGU2YjBkODI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-19T05:10:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-19T05:10:03Z"}, "message": "Rollup merge of #65174 - SimonSapin:zero-box, r=alexcrichton\n\nFix zero-size uninitialized boxes\n\nRequesting a zero-size allocation is not allowed, return a dangling pointer instead.\n\nCC https://github.com/rust-lang/rust/issues/63291#issuecomment-538692745", "tree": {"sha": "86930db0e8c3238370b05fe874b6311aa8f35e88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86930db0e8c3238370b05fe874b6311aa8f35e88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqpqrCRBK7hj4Ov3rIwAAdHIIAHG6qRiiRXb0+q+tmXxd/wMM\nyCAgvJ5jgQQh/MmomRHbx5XcbzMELPzCrMXlASvF134dMVJWi8cGcy6E+MHu59D3\nHiEC7kuIqjuMg1EJ19bSAbsjN2Kf1BblnkfslnrdcGMcPyy3HGtTZDv9ap3VIjnS\nF7xeGs+iLB6KVRIYwSTI2w4iDFQLx+aGbncnwOgDfAdT8enZZG+ow2aoR054KcPq\nrA6PdhKVn6SDFkcBLRxjA7ZT758sDQWPhRCWMzr/geKy4DrcPhqosrSXZ+1jCsJr\nXtG759GG2M4M3gJVTLOz9hPq5gZ4e0rH6fpWJXjS6fIaDFo+sRIPjMLCfuDK1W0=\n=VVGt\n-----END PGP SIGNATURE-----\n", "payload": "tree 86930db0e8c3238370b05fe874b6311aa8f35e88\nparent 14f0ed64e306cfc232c3209985afb53fa2cadbb2\nparent 227db40a98e5bd903aa3658c16f19a3d6f694deb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571461803 +0200\ncommitter GitHub <noreply@github.com> 1571461803 +0200\n\nRollup merge of #65174 - SimonSapin:zero-box, r=alexcrichton\n\nFix zero-size uninitialized boxes\n\nRequesting a zero-size allocation is not allowed, return a dangling pointer instead.\n\nCC https://github.com/rust-lang/rust/issues/63291#issuecomment-538692745\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "html_url": "https://github.com/rust-lang/rust/commit/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f0ed64e306cfc232c3209985afb53fa2cadbb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f0ed64e306cfc232c3209985afb53fa2cadbb2", "html_url": "https://github.com/rust-lang/rust/commit/14f0ed64e306cfc232c3209985afb53fa2cadbb2"}, {"sha": "227db40a98e5bd903aa3658c16f19a3d6f694deb", "url": "https://api.github.com/repos/rust-lang/rust/commits/227db40a98e5bd903aa3658c16f19a3d6f694deb", "html_url": "https://github.com/rust-lang/rust/commit/227db40a98e5bd903aa3658c16f19a3d6f694deb"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "567b8ea722491edbe2c9bfe9218b1632038dbc92", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "patch": "@@ -142,6 +142,9 @@ impl<T> Box<T> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         let layout = alloc::Layout::new::<mem::MaybeUninit<T>>();\n+        if layout.size() == 0 {\n+            return Box(NonNull::dangling().into())\n+        }\n         let ptr = unsafe {\n             Global.alloc(layout)\n                 .unwrap_or_else(|_| alloc::handle_alloc_error(layout))\n@@ -182,9 +185,16 @@ impl<T> Box<[T]> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         let layout = alloc::Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n-        let ptr = unsafe { alloc::alloc(layout) };\n-        let unique = Unique::new(ptr).unwrap_or_else(|| alloc::handle_alloc_error(layout));\n-        let slice = unsafe { slice::from_raw_parts_mut(unique.cast().as_ptr(), len) };\n+        let ptr = if layout.size() == 0 {\n+            NonNull::dangling()\n+        } else {\n+            unsafe {\n+                Global.alloc(layout)\n+                    .unwrap_or_else(|_| alloc::handle_alloc_error(layout))\n+                    .cast()\n+            }\n+        };\n+        let slice = unsafe { slice::from_raw_parts_mut(ptr.as_ptr(), len) };\n         Box(Unique::from(slice))\n     }\n }"}, {"sha": "bc3d53bf30da37446fac708800e0abe71cd25962", "filename": "src/liballoc/tests/boxed.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82/src%2Fliballoc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82/src%2Fliballoc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fboxed.rs?ref=beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "patch": "@@ -0,0 +1,18 @@\n+use std::ptr::NonNull;\n+use std::mem::MaybeUninit;\n+\n+#[test]\n+fn unitialized_zero_size_box() {\n+    assert_eq!(\n+        &*Box::<()>::new_uninit() as *const _,\n+        NonNull::<MaybeUninit<()>>::dangling().as_ptr(),\n+    );\n+    assert_eq!(\n+        Box::<[()]>::new_uninit_slice(4).as_ptr(),\n+        NonNull::<MaybeUninit<()>>::dangling().as_ptr(),\n+    );\n+    assert_eq!(\n+        Box::<[String]>::new_uninit_slice(0).as_ptr(),\n+        NonNull::<MaybeUninit<String>>::dangling().as_ptr(),\n+    );\n+}"}, {"sha": "676874c8b27df07666641a6fada446d60cc8bf1a", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "patch": "@@ -2,6 +2,7 @@\n #![feature(box_syntax)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n+#![feature(new_uninit)]\n #![feature(option_flattening)]\n #![feature(pattern)]\n #![feature(trusted_len)]\n@@ -14,6 +15,7 @@ use std::collections::hash_map::DefaultHasher;\n \n mod arc;\n mod binary_heap;\n+mod boxed;\n mod btree;\n mod cow_str;\n mod fmt;"}]}