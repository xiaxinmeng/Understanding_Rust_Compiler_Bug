{"sha": "61575582ba853cd4ebf406cb7f8024bdf17fecfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNTc1NTgyYmE4NTNjZDRlYmY0MDZjYjdmODAyNGJkZjE3ZmVjZmM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-26T20:26:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-26T21:43:43Z"}, "message": "Describe warnings on command line if user says -W help.", "tree": {"sha": "8efe60215516d1ee56e03a3bd878ee5b9fd73791", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8efe60215516d1ee56e03a3bd878ee5b9fd73791"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61575582ba853cd4ebf406cb7f8024bdf17fecfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61575582ba853cd4ebf406cb7f8024bdf17fecfc", "html_url": "https://github.com/rust-lang/rust/commit/61575582ba853cd4ebf406cb7f8024bdf17fecfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61575582ba853cd4ebf406cb7f8024bdf17fecfc/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eec6eb2bba04ee8cd46df7c640abab4610cd4b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eec6eb2bba04ee8cd46df7c640abab4610cd4b7", "html_url": "https://github.com/rust-lang/rust/commit/7eec6eb2bba04ee8cd46df7c640abab4610cd4b7"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "efd54826590614083f2ea85bf80223d947e06ac7", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/61575582ba853cd4ebf406cb7f8024bdf17fecfc/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61575582ba853cd4ebf406cb7f8024bdf17fecfc/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=61575582ba853cd4ebf406cb7f8024bdf17fecfc", "patch": "@@ -9,23 +9,24 @@ import core::*;\n // -*- rust -*-\n import result::{ok, err};\n import std::getopts;\n-import io::writer_util;\n+import std::map::hashmap;\n import getopts::{opt_present};\n import rustc::driver::driver::*;\n import rustc::syntax::codemap;\n import rustc::driver::diagnostic;\n+import rustc::middle::lint;\n \n fn version(argv0: str) {\n     let mut vers = \"unknown version\";\n     let env_vers = #env[\"CFG_VERSION\"];\n     if str::len(env_vers) != 0u { vers = env_vers; }\n-    io::stdout().write_str(#fmt[\"%s %s\\n\", argv0, vers]);\n-    io::stdout().write_str(#fmt[\"host: %s\\n\", host_triple()]);\n+    io::println(#fmt(\"%s %s\", argv0, vers));\n+    io::println(#fmt(\"host: %s\", host_triple()));\n }\n \n fn usage(argv0: str) {\n-    io::stdout().write_str(#fmt[\"Usage: %s [options] <input>\\n\", argv0] +\n-                               \"\n+    io::println(#fmt(\"Usage: %s [options] <input>\\n\", argv0) +\n+                 \"\n Options:\n \n     --bin              Compile an executable crate (default)\n@@ -70,6 +71,8 @@ Options:\n     -W no-<foo>        disable warning <foo>\n     -W err-<foo>       enable warning <foo> as an error\n \n+    -W help            Print available warnings and default settings\n+\n     --time-passes      Time the individual phases of the compiler\n     --time-llvm-passes Time the individual phases of the LLVM backend\n     --count-llvm-insns Count and categorize generated LLVM instructions\n@@ -78,6 +81,30 @@ Options:\n \");\n }\n \n+fn describe_warnings() {\n+    let lint_dict = lint::get_lint_dict();\n+    let mut max_key = 0u;\n+    for lint_dict.each_key {|k| max_key = uint::max(k.len(), max_key); }\n+    fn padded(max: uint, s: str) -> str {\n+        str::from_bytes(vec::from_elem(max - s.len(), ' ' as u8)) + s\n+    }\n+    io::println(#fmt(\"\\nAvailable warnings:\\n\"));\n+    io::println(#fmt(\"    %s  %7.7s  %s\",\n+                     padded(max_key, \"name\"), \"default\", \"meaning\"));\n+    io::println(#fmt(\"    %s  %7.7s  %s\\n\",\n+                     padded(max_key, \"----\"), \"-------\", \"-------\"));\n+    for lint_dict.each {|k, v|\n+        let k = str::replace(k, \"_\", \"-\");\n+        io::println(#fmt(\"    %s  %7.7s  %s\",\n+                         padded(max_key, k),\n+                         alt v.default { lint::warn { \"warn\" }\n+                                        lint::error { \"error\" }\n+                                        lint::ignore { \"ignore\" } },\n+                         v.desc));\n+    }\n+    io::println(\"\");\n+}\n+\n fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n     // Don't display log spew by default. Can override with RUST_LOG.\n     logging::console_off();\n@@ -94,10 +121,19 @@ fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n             early_error(demitter, getopts::fail_str(f))\n           }\n         };\n+\n     if opt_present(match, \"h\") || opt_present(match, \"help\") {\n         usage(binary);\n         ret;\n     }\n+\n+    let lint_flags = (getopts::opt_strs(match, \"W\")\n+                      + getopts::opt_strs(match, \"warn\"));\n+    if lint_flags.contains(\"help\") {\n+        describe_warnings();\n+        ret;\n+    }\n+\n     if opt_present(match, \"v\") || opt_present(match, \"version\") {\n         version(binary);\n         ret;"}]}