{"sha": "801ae1333c05ab641ff08c14fee776c08f42cff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMWFlMTMzM2MwNWFiNjQxZmYwOGMxNGZlZTc3NmMwOGY0MmNmZjg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T22:49:42Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libcore: use unboxed closures in the fields of `Filter`", "tree": {"sha": "54bcd60d4849836466405c781f4d43830556a51b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54bcd60d4849836466405c781f4d43830556a51b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801ae1333c05ab641ff08c14fee776c08f42cff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801ae1333c05ab641ff08c14fee776c08f42cff8", "html_url": "https://github.com/rust-lang/rust/commit/801ae1333c05ab641ff08c14fee776c08f42cff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801ae1333c05ab641ff08c14fee776c08f42cff8/comments", "author": null, "committer": null, "parents": [{"sha": "44b419b82084e1dc1abd8f8cb4b603fe1c43483c", "url": "https://api.github.com/repos/rust-lang/rust/commits/44b419b82084e1dc1abd8f8cb4b603fe1c43483c", "html_url": "https://github.com/rust-lang/rust/commit/44b419b82084e1dc1abd8f8cb4b603fe1c43483c"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "490f4e68bcc9d657cdfa8f71cbefbfa8352439d9", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/801ae1333c05ab641ff08c14fee776c08f42cff8/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801ae1333c05ab641ff08c14fee776c08f42cff8/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=801ae1333c05ab641ff08c14fee776c08f42cff8", "patch": "@@ -183,7 +183,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    fn filter<'r>(self, predicate: |&A|: 'r -> bool) -> Filter<'r, A, Self> {\n+    fn filter<P>(self, predicate: P) -> Filter<A, Self, P> where P: FnMut(&A) -> bool {\n         Filter{iter: self, predicate: predicate}\n     }\n \n@@ -1438,13 +1438,13 @@ impl<A, B, I, F> RandomAccessIterator<B> for Map<A, B, I, F> where\n /// An iterator which filters the elements of `iter` with `predicate`\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n-pub struct Filter<'a, A, T> {\n-    iter: T,\n-    predicate: |&A|: 'a -> bool\n+pub struct Filter<A, I, P> where I: Iterator<A>, P: FnMut(&A) -> bool {\n+    iter: I,\n+    predicate: P,\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, T: Iterator<A>> Iterator<A> for Filter<'a, A, T> {\n+impl<A, I, P> Iterator<A> for Filter<A, I, P> where I: Iterator<A>, P: FnMut(&A) -> bool {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         for x in self.iter {\n@@ -1465,7 +1465,10 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for Filter<'a, A, T> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'a, A, T> {\n+impl<A, I, P> DoubleEndedIterator<A> for Filter<A, I, P> where\n+    I: DoubleEndedIterator<A>,\n+    P: FnMut(&A) -> bool,\n+{\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         for x in self.iter.by_ref().rev() {"}]}