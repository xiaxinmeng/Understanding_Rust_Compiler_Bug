{"sha": "dda980dec07fb7093a153180f19f967ce55fe1f9", "node_id": "C_kwDOAAsO6NoAKGRkYTk4MGRlYzA3ZmI3MDkzYTE1MzE4MGYxOWY5NjdjZTU1ZmUxZjk", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-06-18T13:32:26Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-06-20T15:00:48Z"}, "message": "Rename ContextInfo into HrefContext", "tree": {"sha": "1d44c0b0cfebf35b857d1513abb6f5c36061fe9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d44c0b0cfebf35b857d1513abb6f5c36061fe9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda980dec07fb7093a153180f19f967ce55fe1f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda980dec07fb7093a153180f19f967ce55fe1f9", "html_url": "https://github.com/rust-lang/rust/commit/dda980dec07fb7093a153180f19f967ce55fe1f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda980dec07fb7093a153180f19f967ce55fe1f9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f12fa7fda96de6687cdd281affcee4a61c35b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f12fa7fda96de6687cdd281affcee4a61c35b80", "html_url": "https://github.com/rust-lang/rust/commit/3f12fa7fda96de6687cdd281affcee4a61c35b80"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "4c54b569762c6f2f1e4d77f3b92f433e605168ca", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dda980dec07fb7093a153180f19f967ce55fe1f9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda980dec07fb7093a153180f19f967ce55fe1f9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=dda980dec07fb7093a153180f19f967ce55fe1f9", "patch": "@@ -26,7 +26,7 @@ use super::format::{self, Buffer};\n use super::render::LinkFromSrc;\n \n /// This type is needed in case we want to render links on items to allow to go to their definition.\n-pub(crate) struct ContextInfo<'a, 'b, 'c> {\n+pub(crate) struct HrefContext<'a, 'b, 'c> {\n     pub(crate) context: &'a Context<'b>,\n     /// This span contains the current file we're going through.\n     pub(crate) file_span: Span,\n@@ -48,7 +48,7 @@ pub(crate) fn render_with_highlighting(\n     tooltip: Option<(Option<Edition>, &str)>,\n     edition: Edition,\n     extra_content: Option<Buffer>,\n-    context_info: Option<ContextInfo<'_, '_, '_>>,\n+    href_context: Option<HrefContext<'_, '_, '_>>,\n     decoration_info: Option<DecorationInfo>,\n ) {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n@@ -66,7 +66,7 @@ pub(crate) fn render_with_highlighting(\n     }\n \n     write_header(out, class, extra_content);\n-    write_code(out, src, edition, context_info, decoration_info);\n+    write_code(out, src, edition, href_context, decoration_info);\n     write_footer(out, playground_button);\n }\n \n@@ -89,16 +89,16 @@ fn write_header(out: &mut Buffer, class: Option<&str>, extra_content: Option<Buf\n ///\n /// Some explanations on the last arguments:\n ///\n-/// In case we are rendering a code block and not a source code file, `context_info` will be `None`.\n-/// To put it more simply: if `context_info` is `None`, the code won't try to generate links to an\n+/// In case we are rendering a code block and not a source code file, `href_context` will be `None`.\n+/// To put it more simply: if `href_context` is `None`, the code won't try to generate links to an\n /// item definition.\n ///\n /// More explanations about spans and how we use them here are provided in the\n fn write_code(\n     out: &mut Buffer,\n     src: &str,\n     edition: Edition,\n-    context_info: Option<ContextInfo<'_, '_, '_>>,\n+    href_context: Option<HrefContext<'_, '_, '_>>,\n     decoration_info: Option<DecorationInfo>,\n ) {\n     // This replace allows to fix how the code source with DOS backline characters is displayed.\n@@ -107,13 +107,13 @@ fn write_code(\n     Classifier::new(\n         &src,\n         edition,\n-        context_info.as_ref().map(|c| c.file_span).unwrap_or(DUMMY_SP),\n+        href_context.as_ref().map(|c| c.file_span).unwrap_or(DUMMY_SP),\n         decoration_info,\n     )\n     .highlight(&mut |highlight| {\n         match highlight {\n-            Highlight::Token { text, class } => string(out, Escape(text), class, &context_info),\n-            Highlight::EnterSpan { class } => closing_tag = enter_span(out, class, &context_info),\n+            Highlight::Token { text, class } => string(out, Escape(text), class, &href_context),\n+            Highlight::EnterSpan { class } => closing_tag = enter_span(out, class, &href_context),\n             Highlight::ExitSpan => exit_span(out, &closing_tag),\n         };\n     });\n@@ -680,9 +680,9 @@ impl<'a> Classifier<'a> {\n fn enter_span(\n     out: &mut Buffer,\n     klass: Class,\n-    context_info: &Option<ContextInfo<'_, '_, '_>>,\n+    href_context: &Option<HrefContext<'_, '_, '_>>,\n ) -> &'static str {\n-    string_without_closing_tag(out, \"\", Some(klass), context_info)\n+    string_without_closing_tag(out, \"\", Some(klass), href_context)\n         .expect(\"no closing tag to close wrapper...\")\n }\n \n@@ -711,9 +711,9 @@ fn string<T: Display>(\n     out: &mut Buffer,\n     text: T,\n     klass: Option<Class>,\n-    context_info: &Option<ContextInfo<'_, '_, '_>>,\n+    href_context: &Option<HrefContext<'_, '_, '_>>,\n ) {\n-    if let Some(closing_tag) = string_without_closing_tag(out, text, klass, context_info) {\n+    if let Some(closing_tag) = string_without_closing_tag(out, text, klass, href_context) {\n         out.write_str(closing_tag);\n     }\n }\n@@ -722,7 +722,7 @@ fn string_without_closing_tag<T: Display>(\n     out: &mut Buffer,\n     text: T,\n     klass: Option<Class>,\n-    context_info: &Option<ContextInfo<'_, '_, '_>>,\n+    href_context: &Option<HrefContext<'_, '_, '_>>,\n ) -> Option<&'static str> {\n     let Some(klass) = klass\n     else {\n@@ -754,10 +754,10 @@ fn string_without_closing_tag<T: Display>(\n             path\n         });\n     }\n-    if let Some(context_info) = context_info {\n+    if let Some(href_context) = href_context {\n         if let Some(href) =\n-            context_info.context.shared.span_correspondance_map.get(&def_span).and_then(|href| {\n-                let context = context_info.context;\n+            href_context.context.shared.span_correspondance_map.get(&def_span).and_then(|href| {\n+                let context = href_context.context;\n                 // FIXME: later on, it'd be nice to provide two links (if possible) for all items:\n                 // one to the documentation page and one to the source definition.\n                 // FIXME: currently, external items only generate a link to their documentation,\n@@ -766,15 +766,15 @@ fn string_without_closing_tag<T: Display>(\n                 match href {\n                     LinkFromSrc::Local(span) => context\n                         .href_from_span(*span, true)\n-                        .map(|s| format!(\"{}{}\", context_info.root_path, s)),\n+                        .map(|s| format!(\"{}{}\", href_context.root_path, s)),\n                     LinkFromSrc::External(def_id) => {\n-                        format::href_with_root_path(*def_id, context, Some(context_info.root_path))\n+                        format::href_with_root_path(*def_id, context, Some(href_context.root_path))\n                             .map(|(url, _, _)| url)\n                             .or_else(|e| {\n                                 if e == format::HrefError::NotInExternalCache\n                                     && matches!(klass, Class::Macro(_))\n                                 {\n-                                    Ok(generate_macro_def_id_path(context_info, *def_id))\n+                                    Ok(generate_macro_def_id_path(href_context, *def_id))\n                                 } else {\n                                     Err(e)\n                                 }\n@@ -784,7 +784,7 @@ fn string_without_closing_tag<T: Display>(\n                     LinkFromSrc::Primitive(prim) => format::href_with_root_path(\n                         PrimitiveType::primitive_locations(context.tcx())[prim],\n                         context,\n-                        Some(context_info.root_path),\n+                        Some(href_context.root_path),\n                     )\n                     .ok()\n                     .map(|(url, _, _)| url),\n@@ -801,10 +801,10 @@ fn string_without_closing_tag<T: Display>(\n \n /// This function is to get the external macro path because they are not in the cache used n\n /// `href_with_root_path`.\n-fn generate_macro_def_id_path(context_info: &ContextInfo<'_, '_, '_>, def_id: DefId) -> String {\n-    let tcx = context_info.context.shared.tcx;\n+fn generate_macro_def_id_path(href_context: &HrefContext<'_, '_, '_>, def_id: DefId) -> String {\n+    let tcx = href_context.context.shared.tcx;\n     let crate_name = tcx.crate_name(def_id.krate).to_string();\n-    let cache = &context_info.context.cache();\n+    let cache = &href_context.context.cache();\n \n     let relative = tcx.def_path(def_id).data.into_iter().filter_map(|elem| {\n         // extern blocks have an empty name\n@@ -825,7 +825,7 @@ fn generate_macro_def_id_path(context_info: &ContextInfo<'_, '_, '_>, def_id: De\n \n     let url_parts = match cache.extern_locations[&def_id.krate] {\n         ExternalLocation::Remote(ref s) => vec![s.trim_end_matches('/')],\n-        ExternalLocation::Local => vec![context_info.root_path.trim_end_matches('/'), &crate_name],\n+        ExternalLocation::Local => vec![href_context.root_path.trim_end_matches('/'), &crate_name],\n         ExternalLocation::Unknown => panic!(\"unknown crate\"),\n     };\n "}, {"sha": "bc0a56f2b052f39cc293dee8d2132eab23e44549", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dda980dec07fb7093a153180f19f967ce55fe1f9/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda980dec07fb7093a153180f19f967ce55fe1f9/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=dda980dec07fb7093a153180f19f967ce55fe1f9", "patch": "@@ -299,7 +299,7 @@ pub(crate) fn print_src(\n         None,\n         edition,\n         Some(line_numbers),\n-        Some(highlight::ContextInfo { context, file_span, root_path }),\n+        Some(highlight::HrefContext { context, file_span, root_path }),\n         decoration_info,\n     );\n }"}]}