{"sha": "8f93e7b9a4f99a458bf03c7ef9871060fa8f2cf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOTNlN2I5YTRmOTlhNDU4YmYwM2M3ZWY5ODcxMDYwZmE4ZjJjZjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T21:48:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T21:48:54Z"}, "message": "remove duplication in tests", "tree": {"sha": "b8d3864cd7c369280440438ec7109768963f0ab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d3864cd7c369280440438ec7109768963f0ab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f93e7b9a4f99a458bf03c7ef9871060fa8f2cf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f93e7b9a4f99a458bf03c7ef9871060fa8f2cf9", "html_url": "https://github.com/rust-lang/rust/commit/8f93e7b9a4f99a458bf03c7ef9871060fa8f2cf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f93e7b9a4f99a458bf03c7ef9871060fa8f2cf9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f74e33ca53a7897e9020d3de75cc76a6b89d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f74e33ca53a7897e9020d3de75cc76a6b89d79", "html_url": "https://github.com/rust-lang/rust/commit/46f74e33ca53a7897e9020d3de75cc76a6b89d79"}], "stats": {"total": 88, "additions": 33, "deletions": 55}, "files": [{"sha": "ac96bea37c7daf00250f676358dccdea505a9c78", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 33, "deletions": 55, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8f93e7b9a4f99a458bf03c7ef9871060fa8f2cf9/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f93e7b9a4f99a458bf03c7ef9871060fa8f2cf9/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=8f93e7b9a4f99a458bf03c7ef9871060fa8f2cf9", "patch": "@@ -322,9 +322,33 @@ fn reexport_across_crates() {\n     );\n }\n \n+fn check_item_map_is_not_recomputed(initial: &str, file_change: &str) {\n+    let (mut db, pos) = MockDatabase::with_position(initial);\n+    let source_root = db.file_source_root(pos.file_id);\n+    {\n+        let events = db.log_executed(|| {\n+            db.item_map(source_root).unwrap();\n+        });\n+        assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n+    }\n+    db.query_mut(ra_db::FileTextQuery)\n+        .set(pos.file_id, Arc::new(file_change.to_string()));\n+\n+    {\n+        let events = db.log_executed(|| {\n+            db.item_map(source_root).unwrap();\n+        });\n+        assert!(\n+            !format!(\"{:?}\", events).contains(\"item_map\"),\n+            \"{:#?}\",\n+            events\n+        )\n+    }\n+}\n+\n #[test]\n fn typing_inside_a_function_should_not_invalidate_item_map() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    check_item_map_is_not_recomputed(\n         \"\n         //- /lib.rs\n         mod foo;\n@@ -342,42 +366,19 @@ fn typing_inside_a_function_should_not_invalidate_item_map() {\n             }\n         }\n         \",\n-    );\n-    let source_root = db.file_source_root(pos.file_id);\n-    {\n-        let events = db.log_executed(|| {\n-            db.item_map(source_root).unwrap();\n-        });\n-        assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n-    }\n-\n-    let new_text = \"\n+        \"\n         salsa::query_group! {\n             trait Baz {\n                 fn foo() -> i32 { 92 }\n             }\n         }\n-    \"\n-    .to_string();\n-\n-    db.query_mut(ra_db::FileTextQuery)\n-        .set(pos.file_id, Arc::new(new_text));\n-\n-    {\n-        let events = db.log_executed(|| {\n-            db.item_map(source_root).unwrap();\n-        });\n-        assert!(\n-            !format!(\"{:?}\", events).contains(\"item_map\"),\n-            \"{:#?}\",\n-            events\n-        )\n-    }\n+        \",\n+    );\n }\n \n #[test]\n fn typing_inside_a_function_inside_a_macro_should_not_invalidate_item_map() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    check_item_map_is_not_recomputed(\n         \"\n         //- /lib.rs\n         mod foo;<|>\n@@ -392,36 +393,13 @@ fn typing_inside_a_function_inside_a_macro_should_not_invalidate_item_map() {\n \n         //- /foo/bar.rs\n         pub struct Baz;\n-    \",\n-    );\n-    let source_root = db.file_source_root(pos.file_id);\n-    {\n-        let events = db.log_executed(|| {\n-            db.item_map(source_root).unwrap();\n-        });\n-        assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n-    }\n-\n-    let new_text = \"\n+        \",\n+        \"\n         mod foo;\n \n         use crate::foo::bar::Baz;\n \n         fn foo() -> i32 { 92 }\n-    \"\n-    .to_string();\n-\n-    db.query_mut(ra_db::FileTextQuery)\n-        .set(pos.file_id, Arc::new(new_text));\n-\n-    {\n-        let events = db.log_executed(|| {\n-            db.item_map(source_root).unwrap();\n-        });\n-        assert!(\n-            !format!(\"{:?}\", events).contains(\"item_map\"),\n-            \"{:#?}\",\n-            events\n-        )\n-    }\n+        \",\n+    );\n }"}]}