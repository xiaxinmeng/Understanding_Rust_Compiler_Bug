{"sha": "f00904e996e9bc59749fb0d2696a711e9b881ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMDkwNGU5OTZlOWJjNTk3NDlmYjBkMjY5NmE3MTFlOWI4ODFhZTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-19T16:15:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-19T16:15:19Z"}, "message": "Merge #2598\n\n2598: Touch up TokenSet a bit r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "69341c02cf6de6238102bef32014c11839fce289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69341c02cf6de6238102bef32014c11839fce289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f00904e996e9bc59749fb0d2696a711e9b881ae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+6IXCRBK7hj4Ov3rIwAAdHIIAHjL/1FMG++GmElx+ZiuN/Hy\nwcOer5NNgQD7/3EN1PmtEo5f+eW2Cg/b8JM/OZM2Lk0HqRl2EVlGO+ScOpCTTsja\nAwWzFwesb4coFuvFeuZdvefk46Vj8g7kihuXC73ZPbr4N9aUeB75QFRpN561sSZY\nY77/QG1frAkTAD5Whw6DuL0xnCqr2xpifyEQiweUxyXv4eSlztOA4zYN7enoY6IU\ncT7gPIL05JgQXqsp/14sm6RVDjzSyvdUoqO4zenT59vx4OGYlz32owb8I/jnWl3e\nbplwGUV5hxPjqYhad4KDw45chmD9+c13xJRdw0W1G+/y9lj198gYb5vpXJzrf4M=\n=huBq\n-----END PGP SIGNATURE-----\n", "payload": "tree 69341c02cf6de6238102bef32014c11839fce289\nparent aee2eee3626020cbfa338d94f5371b0d3c8d82e3\nparent 0ed8ce096d3ae9ee4027ab4723958a021ef24194\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576772119 +0000\ncommitter GitHub <noreply@github.com> 1576772119 +0000\n\nMerge #2598\n\n2598: Touch up TokenSet a bit r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f00904e996e9bc59749fb0d2696a711e9b881ae3", "html_url": "https://github.com/rust-lang/rust/commit/f00904e996e9bc59749fb0d2696a711e9b881ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f00904e996e9bc59749fb0d2696a711e9b881ae3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee2eee3626020cbfa338d94f5371b0d3c8d82e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee2eee3626020cbfa338d94f5371b0d3c8d82e3", "html_url": "https://github.com/rust-lang/rust/commit/aee2eee3626020cbfa338d94f5371b0d3c8d82e3"}, {"sha": "0ed8ce096d3ae9ee4027ab4723958a021ef24194", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed8ce096d3ae9ee4027ab4723958a021ef24194", "html_url": "https://github.com/rust-lang/rust/commit/0ed8ce096d3ae9ee4027ab4723958a021ef24194"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "22f64a9f4addede1a7219dec317424be281552fa", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f00904e996e9bc59749fb0d2696a711e9b881ae3/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00904e996e9bc59749fb0d2696a711e9b881ae3/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=f00904e996e9bc59749fb0d2696a711e9b881ae3", "patch": "@@ -264,7 +264,7 @@ fn name_r(p: &mut Parser, recovery: TokenSet) {\n }\n \n fn name(p: &mut Parser) {\n-    name_r(p, TokenSet::empty())\n+    name_r(p, TokenSet::EMPTY)\n }\n \n fn name_ref(p: &mut Parser) {"}, {"sha": "4ac1d6334a0e64447c61ca9651b68ae1d4af7c3c", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f00904e996e9bc59749fb0d2696a711e9b881ae3/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00904e996e9bc59749fb0d2696a711e9b881ae3/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=f00904e996e9bc59749fb0d2696a711e9b881ae3", "patch": "@@ -444,7 +444,7 @@ fn match_arm(p: &mut Parser) -> BlockLike {\n     // }\n     attributes::outer_attributes(p);\n \n-    patterns::pattern_list_r(p, TokenSet::empty());\n+    patterns::pattern_list_r(p, TokenSet::EMPTY);\n     if p.at(T![if]) {\n         match_guard(p);\n     }"}, {"sha": "1071c46dc8eb00006b59f3d1a71e9bc65aae15e0", "filename": "crates/ra_parser/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f00904e996e9bc59749fb0d2696a711e9b881ae3/crates%2Fra_parser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00904e996e9bc59749fb0d2696a711e9b881ae3/crates%2Fra_parser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fparser.rs?ref=f00904e996e9bc59749fb0d2696a711e9b881ae3", "patch": "@@ -208,7 +208,7 @@ impl<'t> Parser<'t> {\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_and_bump(&mut self, message: &str) {\n-        self.err_recover(message, TokenSet::empty());\n+        self.err_recover(message, TokenSet::EMPTY);\n     }\n \n     /// Create an error node and consume the next token."}, {"sha": "994017acfd4409b2912313a9fb5cda9e3eb45ae6", "filename": "crates/ra_parser/src/token_set.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f00904e996e9bc59749fb0d2696a711e9b881ae3/crates%2Fra_parser%2Fsrc%2Ftoken_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00904e996e9bc59749fb0d2696a711e9b881ae3/crates%2Fra_parser%2Fsrc%2Ftoken_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Ftoken_set.rs?ref=f00904e996e9bc59749fb0d2696a711e9b881ae3", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! A bit-set of `SyntaxKind`s.\n \n use crate::SyntaxKind;\n \n@@ -7,9 +7,7 @@ use crate::SyntaxKind;\n pub(crate) struct TokenSet(u128);\n \n impl TokenSet {\n-    pub(crate) const fn empty() -> TokenSet {\n-        TokenSet(0)\n-    }\n+    pub(crate) const EMPTY: TokenSet = TokenSet(0);\n \n     pub(crate) const fn singleton(kind: SyntaxKind) -> TokenSet {\n         TokenSet(mask(kind))\n@@ -30,7 +28,7 @@ const fn mask(kind: SyntaxKind) -> u128 {\n \n #[macro_export]\n macro_rules! token_set {\n-    ($($t:expr),*) => { TokenSet::empty()$(.union(TokenSet::singleton($t)))* };\n+    ($($t:expr),*) => { TokenSet::EMPTY$(.union(TokenSet::singleton($t)))* };\n     ($($t:expr),* ,) => { token_set!($($t),*) };\n }\n "}]}