{"sha": "7c1c7de85f47cd527d1935295e68218857d2d969", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMWM3ZGU4NWY0N2NkNTI3ZDE5MzUyOTVlNjgyMTg4NTdkMmQ5Njk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-02T01:24:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-02T01:24:27Z"}, "message": "Rollup merge of #76088 - hbina:add_example, r=LukasKalbertodt\n\nAdd more examples to lexicographic cmp on Iterators.\n\nGiven two arrays of T1 and T2, the most important rule of lexicographical comparison is that two arrays\nof equal length will be compared until the first difference occured.\n\nThe examples provided only focuses on the second rule that says that the\nshorter array will be filled with some T2 that is less than every T1.\nWhich is only possible because of the first rule.", "tree": {"sha": "2fc022dd482d57f04c1bfd1660e87059c60789d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fc022dd482d57f04c1bfd1660e87059c60789d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c1c7de85f47cd527d1935295e68218857d2d969", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTvRMCRBK7hj4Ov3rIwAAdHIIAKn25SNIhHfxXScus24xqaw/\n1vztu8PSxwOzBv71X7VU4FFC5ItIFDHHCRVSg+6hhvdAn5q+8TvjSp41OV+slAbh\nyrkasNRWs4D/hLmnMj3rVLaWlWQHzN0vP8oXsBrRbqtTxE5YX3eFb6HarrwBzJ0m\nZ0XUt3kZeSnPNSYQgdSyozBlYgoVZjllHIPIMEUtbXrWmCZPrRUsHNEHja7+zYfR\nhkImPK1lcNHbAiCIMS8GSC5oBSAfX4Sk68N/fiD6tCktN2tDLGHZaW9A8tBTXj7A\nvjAX4PW159YGJRgyv7/tsFRY2VWJ5QOGYGqZ+u53vdaq+nbhKOejTpX1v/zA1hk=\n=jvS7\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fc022dd482d57f04c1bfd1660e87059c60789d1\nparent 5f28831a40477a0d564368e11fe6c5d6a26cd56f\nparent cc3b2f9e1da2bb1bf2eda2e265687ed028cb0e22\nauthor Tyler Mandry <tmandry@gmail.com> 1599009867 -0700\ncommitter GitHub <noreply@github.com> 1599009867 -0700\n\nRollup merge of #76088 - hbina:add_example, r=LukasKalbertodt\n\nAdd more examples to lexicographic cmp on Iterators.\n\nGiven two arrays of T1 and T2, the most important rule of lexicographical comparison is that two arrays\nof equal length will be compared until the first difference occured.\n\nThe examples provided only focuses on the second rule that says that the\nshorter array will be filled with some T2 that is less than every T1.\nWhich is only possible because of the first rule.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1c7de85f47cd527d1935295e68218857d2d969", "html_url": "https://github.com/rust-lang/rust/commit/7c1c7de85f47cd527d1935295e68218857d2d969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c1c7de85f47cd527d1935295e68218857d2d969/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f28831a40477a0d564368e11fe6c5d6a26cd56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f28831a40477a0d564368e11fe6c5d6a26cd56f", "html_url": "https://github.com/rust-lang/rust/commit/5f28831a40477a0d564368e11fe6c5d6a26cd56f"}, {"sha": "cc3b2f9e1da2bb1bf2eda2e265687ed028cb0e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc3b2f9e1da2bb1bf2eda2e265687ed028cb0e22", "html_url": "https://github.com/rust-lang/rust/commit/cc3b2f9e1da2bb1bf2eda2e265687ed028cb0e22"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "0bac21406bf4ee025e8792eaf98bdbdf3f0d3c58", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c1c7de85f47cd527d1935295e68218857d2d969/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1c7de85f47cd527d1935295e68218857d2d969/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=7c1c7de85f47cd527d1935295e68218857d2d969", "patch": "@@ -3078,6 +3078,7 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().lt([1].iter()), false);\n     /// assert_eq!([1].iter().lt([1, 2].iter()), true);\n     /// assert_eq!([1, 2].iter().lt([1].iter()), false);\n+    /// assert_eq!([1, 2].iter().lt([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn lt<I>(self, other: I) -> bool\n@@ -3098,6 +3099,7 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().le([1].iter()), true);\n     /// assert_eq!([1].iter().le([1, 2].iter()), true);\n     /// assert_eq!([1, 2].iter().le([1].iter()), false);\n+    /// assert_eq!([1, 2].iter().le([1, 2].iter()), true);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn le<I>(self, other: I) -> bool\n@@ -3118,6 +3120,7 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().gt([1].iter()), false);\n     /// assert_eq!([1].iter().gt([1, 2].iter()), false);\n     /// assert_eq!([1, 2].iter().gt([1].iter()), true);\n+    /// assert_eq!([1, 2].iter().gt([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn gt<I>(self, other: I) -> bool\n@@ -3138,6 +3141,7 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().ge([1].iter()), true);\n     /// assert_eq!([1].iter().ge([1, 2].iter()), false);\n     /// assert_eq!([1, 2].iter().ge([1].iter()), true);\n+    /// assert_eq!([1, 2].iter().ge([1, 2].iter()), true);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn ge<I>(self, other: I) -> bool"}]}