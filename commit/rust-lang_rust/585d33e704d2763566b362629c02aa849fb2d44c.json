{"sha": "585d33e704d2763566b362629c02aa849fb2d44c", "node_id": "C_kwDOAAsO6NoAKDU4NWQzM2U3MDRkMjc2MzU2NmIzNjI2MjljMDJhYTg0OWZiMmQ0NGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-27T17:48:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-27T17:48:50Z"}, "message": "Rollup merge of #108522 - compiler-errors:new-solver-more-tests, r=jackh726\n\nCommit some new solver tests\n\nLazy norm is hard.\n\n`<?0 as Trait>::Assoc = ?0` ... probably should emit an alias-eq goal, but currently we don't do that. Right now it fails with a cyclical ty error.\n\nAlso committed a check-pass test that broken when I attempted to fix this (unsuccessfully).\n\nr? types", "tree": {"sha": "62e8446199233de7ac704b9262bc80c425e586f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62e8446199233de7ac704b9262bc80c425e586f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585d33e704d2763566b362629c02aa849fb2d44c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/O0CCRBK7hj4Ov3rIwAAsF4IAHu2NhFd8qRIndIz9MhLJw4a\nPgOPTrVjhB6nlJQUnu+xsWIQAcDV5p5y+0K6QAwXMFzBTWG0sAFiCX4jmosjVBSF\nyG3kFE9PhWw1LP0lavxNktJ0Ex5RDqXjDzlJFz80iXJzbzTIiKDpUhsQrBu0ZQdQ\n942S8XYK3dV+2bDjSgtntKw8BqIpYpdyFxz4Egt5H1iL8GqcTronkLWNzPMa5JSV\n5FznaQ6w0+EWQuSN6Sk/CHqFKNiVWbAio7sIzaoyuT5yL3xTAQeys10H/cow/BOq\nH/2e8E1cYYj3GMqH8Yg6McGuEZywmR684bxSexqaGCDlFi8mgnG2Lsx1zeecF60=\n=+39A\n-----END PGP SIGNATURE-----\n", "payload": "tree 62e8446199233de7ac704b9262bc80c425e586f5\nparent 2596bd26cc94a6982cb8b5dd8dfc2eed2a56e46b\nparent e1485202ac13d18e4b20e45b3dd02ced4dd8e778\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677520130 +0100\ncommitter GitHub <noreply@github.com> 1677520130 +0100\n\nRollup merge of #108522 - compiler-errors:new-solver-more-tests, r=jackh726\n\nCommit some new solver tests\n\nLazy norm is hard.\n\n`<?0 as Trait>::Assoc = ?0` ... probably should emit an alias-eq goal, but currently we don't do that. Right now it fails with a cyclical ty error.\n\nAlso committed a check-pass test that broken when I attempted to fix this (unsuccessfully).\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585d33e704d2763566b362629c02aa849fb2d44c", "html_url": "https://github.com/rust-lang/rust/commit/585d33e704d2763566b362629c02aa849fb2d44c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585d33e704d2763566b362629c02aa849fb2d44c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2596bd26cc94a6982cb8b5dd8dfc2eed2a56e46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2596bd26cc94a6982cb8b5dd8dfc2eed2a56e46b", "html_url": "https://github.com/rust-lang/rust/commit/2596bd26cc94a6982cb8b5dd8dfc2eed2a56e46b"}, {"sha": "e1485202ac13d18e4b20e45b3dd02ced4dd8e778", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1485202ac13d18e4b20e45b3dd02ced4dd8e778", "html_url": "https://github.com/rust-lang/rust/commit/e1485202ac13d18e4b20e45b3dd02ced4dd8e778"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "e826f3a00599bcd62595b9e12b6878cee75a88a1", "filename": "tests/ui/traits/new-solver/try-example.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/585d33e704d2763566b362629c02aa849fb2d44c/tests%2Fui%2Ftraits%2Fnew-solver%2Ftry-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585d33e704d2763566b362629c02aa849fb2d44c/tests%2Fui%2Ftraits%2Fnew-solver%2Ftry-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftry-example.rs?ref=585d33e704d2763566b362629c02aa849fb2d44c", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+use std::error::Error;\n+\n+fn main() -> Result<(), Box<dyn Error>> {\n+    let x: i32 = parse()?;\n+    Ok(())\n+}\n+\n+trait Parse {}\n+\n+impl Parse for i32 {}\n+\n+#[derive(Debug)]\n+struct ParseError;\n+\n+impl std::fmt::Display for ParseError {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(f, \"ParseError\")\n+    }\n+}\n+\n+impl Error for ParseError {}\n+\n+fn parse<T: Parse>() -> Result<T, ParseError> {\n+    todo!()\n+}"}, {"sha": "019c6e81c50e9affd64e64cc22d04a71a0660172", "filename": "tests/ui/typeck/lazy-norm/equating-projection-cyclically.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/585d33e704d2763566b362629c02aa849fb2d44c/tests%2Fui%2Ftypeck%2Flazy-norm%2Fequating-projection-cyclically.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585d33e704d2763566b362629c02aa849fb2d44c/tests%2Fui%2Ftypeck%2Flazy-norm%2Fequating-projection-cyclically.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Flazy-norm%2Fequating-projection-cyclically.rs?ref=585d33e704d2763566b362629c02aa849fb2d44c", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Ztrait-solver=next\n+// known-bug: unknown\n+\n+trait Test {\n+    type Assoc;\n+}\n+\n+fn transform<T: Test>(x: T) -> T::Assoc {\n+    todo!()\n+}\n+\n+impl Test for i32 {\n+    type Assoc = i32;\n+}\n+\n+impl Test for String {\n+    type Assoc = String;\n+}\n+\n+fn main() {\n+    let mut x = Default::default();\n+    x = transform(x);\n+    x = 1i32;\n+}"}, {"sha": "57cbc65a17a925957d70dd881ed4c59badd55f8d", "filename": "tests/ui/typeck/lazy-norm/equating-projection-cyclically.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/585d33e704d2763566b362629c02aa849fb2d44c/tests%2Fui%2Ftypeck%2Flazy-norm%2Fequating-projection-cyclically.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/585d33e704d2763566b362629c02aa849fb2d44c/tests%2Fui%2Ftypeck%2Flazy-norm%2Fequating-projection-cyclically.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Flazy-norm%2Fequating-projection-cyclically.stderr?ref=585d33e704d2763566b362629c02aa849fb2d44c", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/equating-projection-cyclically.rs:22:19\n+   |\n+LL |     x = transform(x);\n+   |                   ^ expected inferred type, found associated type\n+   |\n+   = note:         expected type `_`\n+           found associated type `<_ as Test>::Assoc`\n+   = help: consider constraining the associated type `<_ as Test>::Assoc` to `_`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}