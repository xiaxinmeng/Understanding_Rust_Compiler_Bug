{"sha": "9e4943c9229e15fa11069eeb2b20060994f9ac0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNDk0M2M5MjI5ZTE1ZmExMTA2OWVlYjJiMjAwNjA5OTRmOWFjMGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T21:50:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T21:50:42Z"}, "message": "Parse, add to AST, and otherwise ignore 'export' view items. Need to add support to resolve.", "tree": {"sha": "ecd8c204e4026e865ab3576e3b87bd334aa00a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd8c204e4026e865ab3576e3b87bd334aa00a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4943c9229e15fa11069eeb2b20060994f9ac0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4943c9229e15fa11069eeb2b20060994f9ac0f", "html_url": "https://github.com/rust-lang/rust/commit/9e4943c9229e15fa11069eeb2b20060994f9ac0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4943c9229e15fa11069eeb2b20060994f9ac0f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d33110ebfcf7f2a5796d3a4c4f969efbf13e7548", "url": "https://api.github.com/repos/rust-lang/rust/commits/d33110ebfcf7f2a5796d3a4c4f969efbf13e7548", "html_url": "https://github.com/rust-lang/rust/commit/d33110ebfcf7f2a5796d3a4c4f969efbf13e7548"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "474dc4aaa462377acdcb6100a96ff92f5d1d5394", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e4943c9229e15fa11069eeb2b20060994f9ac0f/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4943c9229e15fa11069eeb2b20060994f9ac0f/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=9e4943c9229e15fa11069eeb2b20060994f9ac0f", "patch": "@@ -279,6 +279,7 @@ type view_item = spanned[view_item_];\n tag view_item_ {\n     view_item_use(ident, vec[@meta_item], def_id);\n     view_item_import(ident, vec[ident], def_id, option.t[def]);\n+    view_item_export(ident);\n }\n \n type item = spanned[item_];\n@@ -306,6 +307,11 @@ fn index_view_item(mod_index index, @view_item it) {\n         case(ast.view_item_import(?def_ident,_,_,_)) {\n             index.insert(def_ident, ast.mie_view_item(it));\n         }\n+        case(ast.view_item_export(_)) {\n+            // NB: don't index these, they might collide with\n+            // the import or use that they're exporting. Have\n+            // to do linear search for exports.\n+        }\n     }\n }\n "}, {"sha": "1be4226c0387b07cda7d5f6adb4b5f85dce7b869", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9e4943c9229e15fa11069eeb2b20060994f9ac0f/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4943c9229e15fa11069eeb2b20060994f9ac0f/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=9e4943c9229e15fa11069eeb2b20060994f9ac0f", "patch": "@@ -2187,31 +2187,43 @@ impure fn parse_import(parser p) -> @ast.view_item {\n     fail;\n }\n \n-impure fn parse_use_or_import(parser p) -> @ast.view_item {\n+impure fn parse_export(parser p) -> @ast.view_item {\n+    auto lo = p.get_span();\n+    expect(p, token.EXPORT);\n+    auto id = parse_ident(p);\n+    auto hi = p.get_span();\n+    expect(p, token.SEMI);\n+    ret @spanned(lo, hi, ast.view_item_export(id));\n+}\n+\n+impure fn parse_view_item(parser p) -> @ast.view_item {\n     alt (p.peek()) {\n         case (token.USE) {\n             ret parse_use(p);\n         }\n         case (token.IMPORT) {\n             ret parse_import(p);\n         }\n+        case (token.EXPORT) {\n+            ret parse_export(p);\n+        }\n     }\n }\n \n-fn is_use_or_import(token.token t) -> bool {\n-    if (t == token.USE) {\n-        ret true;\n-    }\n-    if (t == token.IMPORT) {\n-        ret true;\n+fn is_view_item(token.token t) -> bool {\n+    alt (t) {\n+        case (token.USE) { ret true; }\n+        case (token.IMPORT) { ret true; }\n+        case (token.EXPORT) { ret true; }\n+        case (_) {}\n     }\n     ret false;\n }\n \n impure fn parse_view(parser p, ast.mod_index index) -> vec[@ast.view_item] {\n     let vec[@ast.view_item] items = vec();\n-    while (is_use_or_import(p.peek())) {\n-        auto item = parse_use_or_import(p);\n+    while (is_view_item(p.peek())) {\n+        auto item = parse_view_item(p);\n         items += vec(item);\n \n         ast.index_view_item(index, item);\n@@ -2305,12 +2317,17 @@ impure fn parse_crate_directive(parser p) -> ast.crate_directive\n         }\n \n         case (token.USE) {\n-            auto vi = parse_use_or_import(p);\n+            auto vi = parse_view_item(p);\n             ret spanned(lo, vi.span, ast.cdir_view_item(vi));\n         }\n \n         case (token.IMPORT) {\n-            auto vi = parse_use_or_import(p);\n+            auto vi = parse_view_item(p);\n+            ret spanned(lo, vi.span, ast.cdir_view_item(vi));\n+        }\n+\n+        case (token.EXPORT) {\n+            auto vi = parse_view_item(p);\n             ret spanned(lo, vi.span, ast.cdir_view_item(vi));\n         }\n "}]}