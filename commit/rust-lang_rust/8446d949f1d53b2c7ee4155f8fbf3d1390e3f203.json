{"sha": "8446d949f1d53b2c7ee4155f8fbf3d1390e3f203", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NDZkOTQ5ZjFkNTNiMmM3ZWU0MTU1ZjhmYmYzZDEzOTBlM2YyMDM=", "commit": {"author": {"name": "Ryan Scott", "email": "ryan@ryan-scott.me", "date": "2020-10-14T05:58:59Z"}, "committer": {"name": "Ryan Scott", "email": "rscott@zendesk.com", "date": "2020-10-15T12:21:26Z"}, "message": "Following #74010 by converting some newer cases of backticked O notations to be italicized", "tree": {"sha": "df256530e8b629e248bb57da772145888b00883a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df256530e8b629e248bb57da772145888b00883a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203", "html_url": "https://github.com/rust-lang/rust/commit/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203/comments", "author": {"login": "ryan-scott-dev", "id": 1508992, "node_id": "MDQ6VXNlcjE1MDg5OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1508992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryan-scott-dev", "html_url": "https://github.com/ryan-scott-dev", "followers_url": "https://api.github.com/users/ryan-scott-dev/followers", "following_url": "https://api.github.com/users/ryan-scott-dev/following{/other_user}", "gists_url": "https://api.github.com/users/ryan-scott-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryan-scott-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryan-scott-dev/subscriptions", "organizations_url": "https://api.github.com/users/ryan-scott-dev/orgs", "repos_url": "https://api.github.com/users/ryan-scott-dev/repos", "events_url": "https://api.github.com/users/ryan-scott-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/ryan-scott-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ryan-scott-dev", "id": 1508992, "node_id": "MDQ6VXNlcjE1MDg5OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1508992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryan-scott-dev", "html_url": "https://github.com/ryan-scott-dev", "followers_url": "https://api.github.com/users/ryan-scott-dev/followers", "following_url": "https://api.github.com/users/ryan-scott-dev/following{/other_user}", "gists_url": "https://api.github.com/users/ryan-scott-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryan-scott-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryan-scott-dev/subscriptions", "organizations_url": "https://api.github.com/users/ryan-scott-dev/orgs", "repos_url": "https://api.github.com/users/ryan-scott-dev/repos", "events_url": "https://api.github.com/users/ryan-scott-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/ryan-scott-dev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000ec5e2f8e7bf3f5da59f6f219fe02dff42d116", "url": "https://api.github.com/repos/rust-lang/rust/commits/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116", "html_url": "https://github.com/rust-lang/rust/commit/000ec5e2f8e7bf3f5da59f6f219fe02dff42d116"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "7c834f034c1f157d1035caba65bfe49b14df201d", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=8446d949f1d53b2c7ee4155f8fbf3d1390e3f203", "patch": "@@ -259,7 +259,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     /// Ensures that the buffer contains at least enough space to hold `len +\n     /// additional` elements. If it doesn't already have enough capacity, will\n     /// reallocate enough space plus comfortable slack space to get amortized\n-    /// `O(1)` behavior. Will limit this behavior if it would needlessly cause\n+    /// *O*(1) behavior. Will limit this behavior if it would needlessly cause\n     /// itself to panic.\n     ///\n     /// If `len` exceeds `self.capacity()`, this may fail to actually allocate"}, {"sha": "808adb5d47cc7e90415fd374cdc18d059014a06b", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=8446d949f1d53b2c7ee4155f8fbf3d1390e3f203", "patch": "@@ -259,7 +259,7 @@ use crate::raw_vec::RawVec;\n /// `Vec` does not guarantee any particular growth strategy when reallocating\n /// when full, nor when [`reserve`] is called. The current strategy is basic\n /// and it may prove desirable to use a non-constant growth factor. Whatever\n-/// strategy is used will of course guarantee `O(1)` amortized [`push`].\n+/// strategy is used will of course guarantee *O*(1) amortized [`push`].\n ///\n /// `vec![x; n]`, `vec![a, b, c, d]`, and\n /// [`Vec::with_capacity(n)`][`Vec::with_capacity`], will all produce a `Vec`"}, {"sha": "af1ce007e8b7c826ab8e827f67151b6a2dfda532", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8446d949f1d53b2c7ee4155f8fbf3d1390e3f203/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=8446d949f1d53b2c7ee4155f8fbf3d1390e3f203", "patch": "@@ -89,7 +89,7 @@ fn str_index_overflow_fail() -> ! {\n /// self`. Equivalent to `&self[0 .. len]` or `&mut self[0 .. len]`. Unlike\n /// other indexing operations, this can never panic.\n ///\n-/// This operation is `O(1)`.\n+/// This operation is *O*(1).\n ///\n /// Prior to 1.20.0, these indexing operations were still supported by\n /// direct implementation of `Index` and `IndexMut`.\n@@ -130,7 +130,7 @@ unsafe impl SliceIndex<str> for ops::RangeFull {\n /// Returns a slice of the given string from the byte range\n /// [`begin`, `end`).\n ///\n-/// This operation is `O(1)`.\n+/// This operation is *O*(1).\n ///\n /// Prior to 1.20.0, these indexing operations were still supported by\n /// direct implementation of `Index` and `IndexMut`.\n@@ -237,7 +237,7 @@ unsafe impl SliceIndex<str> for ops::Range<usize> {\n /// Returns a slice of the given string from the byte range [`0`, `end`).\n /// Equivalent to `&self[0 .. end]` or `&mut self[0 .. end]`.\n ///\n-/// This operation is `O(1)`.\n+/// This operation is *O*(1).\n ///\n /// Prior to 1.20.0, these indexing operations were still supported by\n /// direct implementation of `Index` and `IndexMut`.\n@@ -308,7 +308,7 @@ unsafe impl SliceIndex<str> for ops::RangeTo<usize> {\n /// `len`). Equivalent to `&self[begin .. len]` or `&mut self[begin ..\n /// len]`.\n ///\n-/// This operation is `O(1)`.\n+/// This operation is *O*(1).\n ///\n /// Prior to 1.20.0, these indexing operations were still supported by\n /// direct implementation of `Index` and `IndexMut`.\n@@ -385,7 +385,7 @@ unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {\n /// self[begin .. end + 1]`, except if `end` has the maximum value for\n /// `usize`.\n ///\n-/// This operation is `O(1)`.\n+/// This operation is *O*(1).\n ///\n /// # Panics\n ///\n@@ -441,7 +441,7 @@ unsafe impl SliceIndex<str> for ops::RangeInclusive<usize> {\n /// Equivalent to `&self [0 .. end + 1]`, except if `end` has the maximum\n /// value for `usize`.\n ///\n-/// This operation is `O(1)`.\n+/// This operation is *O*(1).\n ///\n /// # Panics\n ///"}]}