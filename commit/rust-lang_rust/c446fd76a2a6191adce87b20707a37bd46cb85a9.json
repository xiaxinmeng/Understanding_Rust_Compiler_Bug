{"sha": "c446fd76a2a6191adce87b20707a37bd46cb85a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NDZmZDc2YTJhNjE5MWFkY2U4N2IyMDcwN2EzN2JkNDZjYjg1YTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T12:00:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T12:01:10Z"}, "message": "Snippetify fill_match_arms", "tree": {"sha": "3ec14623c37c8c34f85ac40528c354d6d2379712", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec14623c37c8c34f85ac40528c354d6d2379712"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c446fd76a2a6191adce87b20707a37bd46cb85a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c446fd76a2a6191adce87b20707a37bd46cb85a9", "html_url": "https://github.com/rust-lang/rust/commit/c446fd76a2a6191adce87b20707a37bd46cb85a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c446fd76a2a6191adce87b20707a37bd46cb85a9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a622b54ac029994328a99e30ee3169c21de498b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a622b54ac029994328a99e30ee3169c21de498b7", "html_url": "https://github.com/rust-lang/rust/commit/a622b54ac029994328a99e30ee3169c21de498b7"}], "stats": {"total": 197, "additions": 79, "deletions": 118}, "files": [{"sha": "cc303285b35d77d2d235676bc9e287f1265e8115", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 77, "deletions": 116, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/c446fd76a2a6191adce87b20707a37bd46cb85a9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c446fd76a2a6191adce87b20707a37bd46cb85a9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=c446fd76a2a6191adce87b20707a37bd46cb85a9", "patch": "@@ -6,7 +6,10 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n use test_utils::mark;\n \n-use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n+use crate::{\n+    utils::{render_snippet, Cursor, FamousDefs},\n+    AssistContext, AssistId, Assists,\n+};\n \n // Assist: fill_match_arms\n //\n@@ -27,7 +30,7 @@ use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n //\n // fn handle(action: Action) {\n //     match action {\n-//         Action::Move { distance } => {}\n+//         $0Action::Move { distance } => {}\n //         Action::Stop => {}\n //     }\n // }\n@@ -100,10 +103,23 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     }\n \n     let target = match_expr.syntax().text_range();\n-    acc.add(AssistId(\"fill_match_arms\"), \"Fill match arms\", target, |edit| {\n-        let new_arm_list = match_arm_list.remove_placeholder().append_arms(missing_arms);\n-        edit.set_cursor(expr.syntax().text_range().start());\n-        edit.replace_ast(match_arm_list, new_arm_list);\n+    acc.add(AssistId(\"fill_match_arms\"), \"Fill match arms\", target, |builder| {\n+        let new_arm_list = match_arm_list.remove_placeholder();\n+        let n_old_arms = new_arm_list.arms().count();\n+        let new_arm_list = new_arm_list.append_arms(missing_arms);\n+        let first_new_arm = new_arm_list.arms().nth(n_old_arms);\n+        let old_range = match_arm_list.syntax().text_range();\n+        match (first_new_arm, ctx.config.snippet_cap) {\n+            (Some(first_new_arm), Some(cap)) => {\n+                let snippet = render_snippet(\n+                    cap,\n+                    new_arm_list.syntax(),\n+                    Cursor::Before(first_new_arm.syntax()),\n+                );\n+                builder.replace_snippet(cap, old_range, snippet);\n+            }\n+            _ => builder.replace(old_range, new_arm_list.to_string()),\n+        }\n     })\n }\n \n@@ -226,27 +242,27 @@ mod tests {\n             r#\"\n             enum A {\n                 As,\n-                Bs{x:i32, y:Option<i32>},\n+                Bs { x: i32, y: Option<i32> },\n                 Cs(i32, Option<i32>),\n             }\n             fn main() {\n                 match A::As<|> {\n-                    A::Bs{x,y:Some(_)} => {}\n+                    A::Bs { x, y: Some(_) } => {}\n                     A::Cs(_, Some(_)) => {}\n                 }\n             }\n             \"#,\n             r#\"\n             enum A {\n                 As,\n-                Bs{x:i32, y:Option<i32>},\n+                Bs { x: i32, y: Option<i32> },\n                 Cs(i32, Option<i32>),\n             }\n             fn main() {\n-                match <|>A::As {\n-                    A::Bs{x,y:Some(_)} => {}\n+                match A::As {\n+                    A::Bs { x, y: Some(_) } => {}\n                     A::Cs(_, Some(_)) => {}\n-                    A::As => {}\n+                    $0A::As => {}\n                 }\n             }\n             \"#,\n@@ -276,9 +292,9 @@ mod tests {\n                 Cs(Option<i32>),\n             }\n             fn main() {\n-                match <|>A::As {\n+                match A::As {\n                     A::Cs(_) | A::Bs => {}\n-                    A::As => {}\n+                    $0A::As => {}\n                 }\n             }\n             \"#,\n@@ -322,11 +338,11 @@ mod tests {\n                 Ys,\n             }\n             fn main() {\n-                match <|>A::As {\n+                match A::As {\n                     A::Bs if 0 < 1 => {}\n                     A::Ds(_value) => { let x = 1; }\n                     A::Es(B::Xs) => (),\n-                    A::As => {}\n+                    $0A::As => {}\n                     A::Cs => {}\n                 }\n             }\n@@ -344,7 +360,7 @@ mod tests {\n                 Bs,\n                 Cs(String),\n                 Ds(String, String),\n-                Es{ x: usize, y: usize }\n+                Es { x: usize, y: usize }\n             }\n \n             fn main() {\n@@ -358,13 +374,13 @@ mod tests {\n                 Bs,\n                 Cs(String),\n                 Ds(String, String),\n-                Es{ x: usize, y: usize }\n+                Es { x: usize, y: usize }\n             }\n \n             fn main() {\n                 let a = A::As;\n-                match <|>a {\n-                    A::As => {}\n+                match a {\n+                    $0A::As => {}\n                     A::Bs => {}\n                     A::Cs(_) => {}\n                     A::Ds(_, _) => {}\n@@ -380,14 +396,8 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -396,20 +406,14 @@ mod tests {\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n                 let b = B::One;\n-                match <|>(a, b) {\n-                    (A::One, B::One) => {}\n+                match (a, b) {\n+                    $0(A::One, B::One) => {}\n                     (A::One, B::Two) => {}\n                     (A::Two, B::One) => {}\n                     (A::Two, B::Two) => {}\n@@ -424,14 +428,8 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -440,20 +438,14 @@ mod tests {\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n                 let b = B::One;\n-                match <|>(&a, &b) {\n-                    (A::One, B::One) => {}\n+                match (&a, &b) {\n+                    $0(A::One, B::One) => {}\n                     (A::One, B::Two) => {}\n                     (A::Two, B::One) => {}\n                     (A::Two, B::Two) => {}\n@@ -468,14 +460,8 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -493,14 +479,8 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -524,10 +504,7 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -543,23 +520,19 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                As,\n-            }\n+            enum A { As }\n \n             fn foo(a: &A) {\n                 match a<|> {\n                 }\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                As,\n-            }\n+            enum A { As }\n \n             fn foo(a: &A) {\n-                match <|>a {\n-                    A::As => {}\n+                match a {\n+                    $0A::As => {}\n                 }\n             }\n             \"#,\n@@ -569,7 +542,7 @@ mod tests {\n             fill_match_arms,\n             r#\"\n             enum A {\n-                Es{ x: usize, y: usize }\n+                Es { x: usize, y: usize }\n             }\n \n             fn foo(a: &mut A) {\n@@ -579,12 +552,12 @@ mod tests {\n             \"#,\n             r#\"\n             enum A {\n-                Es{ x: usize, y: usize }\n+                Es { x: usize, y: usize }\n             }\n \n             fn foo(a: &mut A) {\n-                match <|>a {\n-                    A::Es { x, y } => {}\n+                match a {\n+                    $0A::Es { x, y } => {}\n                 }\n             }\n             \"#,\n@@ -623,8 +596,8 @@ mod tests {\n             enum E { X, Y }\n \n             fn main() {\n-                match <|>E::X {\n-                    E::X => {}\n+                match E::X {\n+                    $0E::X => {}\n                     E::Y => {}\n                 }\n             }\n@@ -651,8 +624,8 @@ mod tests {\n             use foo::E::X;\n \n             fn main() {\n-                match <|>X {\n-                    X => {}\n+                match X {\n+                    $0X => {}\n                     foo::E::Y => {}\n                 }\n             }\n@@ -665,10 +638,7 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n             fn foo(a: A) {\n                 match a {\n                     // foo bar baz<|>\n@@ -678,16 +648,13 @@ mod tests {\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n             fn foo(a: A) {\n-                match <|>a {\n+                match a {\n                     // foo bar baz\n                     A::One => {}\n                     // This is where the rest should be\n-                    A::Two => {}\n+                    $0A::Two => {}\n                 }\n             }\n             \"#,\n@@ -699,25 +666,19 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n             fn foo(a: A) {\n                 match a {\n                     // foo bar baz<|>\n                 }\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n             fn foo(a: A) {\n-                match <|>a {\n+                match a {\n                     // foo bar baz\n-                    A::One => {}\n+                    $0A::One => {}\n                     A::Two => {}\n                 }\n             }\n@@ -740,8 +701,8 @@ mod tests {\n             r#\"\n             enum A { One, Two, }\n             fn foo(a: A) {\n-                match <|>a {\n-                    A::One => {}\n+                match a {\n+                    $0A::One => {}\n                     A::Two => {}\n                 }\n             }\n@@ -765,8 +726,8 @@ fn foo(opt: Option<i32>) {\n             before,\n             r#\"\n fn foo(opt: Option<i32>) {\n-    match <|>opt {\n-        Some(_) => {}\n+    match opt {\n+        $0Some(_) => {}\n         None => {}\n     }\n }"}, {"sha": "d841b6f565a3af8c4e10c220673d27123e80390c", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c446fd76a2a6191adce87b20707a37bd46cb85a9/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c446fd76a2a6191adce87b20707a37bd46cb85a9/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=c446fd76a2a6191adce87b20707a37bd46cb85a9", "patch": "@@ -336,7 +336,7 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => {}\n+        $0Action::Move { distance } => {}\n         Action::Stop => {}\n     }\n }"}, {"sha": "a33c490b8dae4fc9ebbefb709bb961787bfe1e37", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c446fd76a2a6191adce87b20707a37bd46cb85a9/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/c446fd76a2a6191adce87b20707a37bd46cb85a9/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=c446fd76a2a6191adce87b20707a37bd46cb85a9", "patch": "@@ -325,7 +325,7 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => {}\n+        $0Action::Move { distance } => {}\n         Action::Stop => {}\n     }\n }"}]}