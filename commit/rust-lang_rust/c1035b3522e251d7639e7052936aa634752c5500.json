{"sha": "c1035b3522e251d7639e7052936aa634752c5500", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDM1YjM1MjJlMjUxZDc2MzllNzA1MjkzNmFhNjM0NzUyYzU1MDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-29T22:21:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-29T22:21:57Z"}, "message": "Auto merge of #30619 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30253, #30390, #30405, #30549, #30603, #30610\n- Failed merges:", "tree": {"sha": "6c058d3fabc80e762922323447740748fb8b1a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c058d3fabc80e762922323447740748fb8b1a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1035b3522e251d7639e7052936aa634752c5500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1035b3522e251d7639e7052936aa634752c5500", "html_url": "https://github.com/rust-lang/rust/commit/c1035b3522e251d7639e7052936aa634752c5500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1035b3522e251d7639e7052936aa634752c5500/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9007d63f2484c0c19cb122cd909db3efe3607313", "url": "https://api.github.com/repos/rust-lang/rust/commits/9007d63f2484c0c19cb122cd909db3efe3607313", "html_url": "https://github.com/rust-lang/rust/commit/9007d63f2484c0c19cb122cd909db3efe3607313"}, {"sha": "5a02d2293a6a5c9b5bfaa5e77bc541578943b3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a02d2293a6a5c9b5bfaa5e77bc541578943b3e2", "html_url": "https://github.com/rust-lang/rust/commit/5a02d2293a6a5c9b5bfaa5e77bc541578943b3e2"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "7c8b74bd6495d0f44cf279a4c3daec98faa4b55e", "filename": "src/doc/book/macros.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1035b3522e251d7639e7052936aa634752c5500/src%2Fdoc%2Fbook%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/c1035b3522e251d7639e7052936aa634752c5500/src%2Fdoc%2Fbook%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmacros.md?ref=c1035b3522e251d7639e7052936aa634752c5500", "patch": "@@ -611,8 +611,7 @@ to define a single macro that works both inside and outside our library. The\n function name will expand to either `::increment` or `::mylib::increment`.\n \n To keep this system simple and correct, `#[macro_use] extern crate ...` may\n-only appear at the root of your crate, not inside `mod`. This ensures that\n-`$crate` is a single identifier.\n+only appear at the root of your crate, not inside `mod`.\n \n # The deep end\n "}, {"sha": "628bf654873c7cfc7e8195fbf9d7146d607ef618", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c1035b3522e251d7639e7052936aa634752c5500", "patch": "@@ -356,7 +356,7 @@ impl<'a> Display for Arguments<'a> {\n /// `Debug` implementations using either `derive` or the debug builder API\n /// on `Formatter` support pretty printing using the alternate flag: `{:#?}`.\n ///\n-/// [debug_struct]: ../std/fmt/struct.Formatter.html#method.debug_struct\n+/// [debug_struct]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n ///\n /// Pretty printing with `#?`:\n ///"}, {"sha": "526c2e1c6b523c4cb5acdcdf4fb1564fa65ca758", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c1035b3522e251d7639e7052936aa634752c5500", "patch": "@@ -604,7 +604,7 @@ pub trait Iterator {\n     /// iterators, returning a tuple where the first element comes from the\n     /// first iterator, and the second element comes from the second iterator.\n     ///\n-    /// In other words, it zips two iterators together, into a single one. \ud83e\udd10\n+    /// In other words, it zips two iterators together, into a single one.\n     ///\n     /// When either iterator returns `None`, all further calls to `next()`\n     /// will return `None`."}, {"sha": "154ca30c62dd148398744744912fed670a34ada3", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=c1035b3522e251d7639e7052936aa634752c5500", "patch": "@@ -135,10 +135,10 @@ macro_rules! debug_assert {\n     ($($arg:tt)*) => (if cfg!(debug_assertions) { assert!($($arg)*); })\n }\n \n-/// Asserts that two expressions are equal to each other, testing equality in\n-/// both directions.\n+/// Asserts that two expressions are equal to each other.\n ///\n-/// On panic, this macro will print the values of the expressions.\n+/// On panic, this macro will print the values of the expressions with their\n+/// debug representations.\n ///\n /// Unlike `assert_eq!`, `debug_assert_eq!` statements are only enabled in non\n /// optimized builds by default. An optimized build will omit all"}, {"sha": "d1892b87f8bcc3b7d8d734f6bf76da960a64974d", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=c1035b3522e251d7639e7052936aa634752c5500", "patch": "@@ -664,6 +664,8 @@ impl<'a> Context<'a> {\n                 }\n                 sess.err(&format!(\"extern location for {} is of an unknown type: {}\",\n                                  self.crate_name, loc.display()));\n+                sess.help(&format!(\"file name should be lib*.rlib or {}*.{}\",\n+                                   dylibname.0, dylibname.1));\n                 false\n             });\n "}, {"sha": "04ab3fe70e9fabdea01732ec67a15b205bf09c21", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1035b3522e251d7639e7052936aa634752c5500/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=c1035b3522e251d7639e7052936aa634752c5500", "patch": "@@ -274,7 +274,7 @@ https://doc.rust-lang.org/reference.html#use-declarations\n \"##,\n \n E0401: r##\"\n-Inner functions do not inherit type parameters from the functions they are\n+Inner items do not inherit type parameters from the functions they are\n embedded in. For example, this will not compile:\n \n ```\n@@ -286,12 +286,32 @@ fn foo<T>(x: T) {\n }\n ```\n \n-Functions inside functions are basically just like top-level functions, except\n-that they can only be called from the function they are in.\n+nor will this:\n+\n+```\n+fn foo<T>(x: T) {\n+    type MaybeT = Option<T>;\n+    // ...\n+}\n+```\n+\n+or this:\n+\n+```\n+fn foo<T>(x: T) {\n+    struct Foo {\n+        x: T,\n+    }\n+    // ...\n+}\n+```\n+\n+Items inside functions are basically just like top-level items, except\n+that they can only be used from the function they are in.\n \n There are a couple of solutions for this.\n \n-You can use a closure:\n+If the item is a function, you may use a closure:\n \n ```\n fn foo<T>(x: T) {\n@@ -302,7 +322,7 @@ fn foo<T>(x: T) {\n }\n ```\n \n-or copy over the parameters:\n+For a generic item, you can copy over the parameters:\n \n ```\n fn foo<T>(x: T) {\n@@ -313,6 +333,12 @@ fn foo<T>(x: T) {\n }\n ```\n \n+```\n+fn foo<T>(x: T) {\n+    type MaybeT<T> = Option<T>;\n+}\n+```\n+\n Be sure to copy over any bounds as well:\n \n ```\n@@ -324,10 +350,18 @@ fn foo<T: Copy>(x: T) {\n }\n ```\n \n+```\n+fn foo<T: Copy>(x: T) {\n+    struct Foo<T: Copy> {\n+        x: T,\n+    }\n+}\n+```\n+\n This may require additional type hints in the function body.\n \n-In case the function is in an `impl`, defining a private helper function might\n-be easier:\n+In case the item is a function inside an `impl`, defining a private helper\n+function might be easier:\n \n ```\n impl<T> Foo<T> {"}]}