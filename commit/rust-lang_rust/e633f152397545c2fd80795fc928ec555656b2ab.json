{"sha": "e633f152397545c2fd80795fc928ec555656b2ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MzNmMTUyMzk3NTQ1YzJmZDgwNzk1ZmM5MjhlYzU1NTY1NmIyYWI=", "commit": {"author": {"name": "Nick Fitzgerald", "email": "fitzgen@gmail.com", "date": "2019-02-07T14:01:30Z"}, "committer": {"name": "Nick Fitzgerald", "email": "fitzgen@gmail.com", "date": "2019-02-07T14:01:30Z"}, "message": "Un-monomorphize and inline formatting with padding\n\nThe generic `F` in `with_padding` was causing a bunch of stuff to get inlined\nthat otherwise needn't be, blowing up code size.", "tree": {"sha": "c0b8820291c5d5732b2f1196350fa9783f856355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b8820291c5d5732b2f1196350fa9783f856355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e633f152397545c2fd80795fc928ec555656b2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e633f152397545c2fd80795fc928ec555656b2ab", "html_url": "https://github.com/rust-lang/rust/commit/e633f152397545c2fd80795fc928ec555656b2ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e633f152397545c2fd80795fc928ec555656b2ab/comments", "author": {"login": "fitzgen", "id": 74571, "node_id": "MDQ6VXNlcjc0NTcx", "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fitzgen", "html_url": "https://github.com/fitzgen", "followers_url": "https://api.github.com/users/fitzgen/followers", "following_url": "https://api.github.com/users/fitzgen/following{/other_user}", "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}", "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions", "organizations_url": "https://api.github.com/users/fitzgen/orgs", "repos_url": "https://api.github.com/users/fitzgen/repos", "events_url": "https://api.github.com/users/fitzgen/events{/privacy}", "received_events_url": "https://api.github.com/users/fitzgen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fitzgen", "id": 74571, "node_id": "MDQ6VXNlcjc0NTcx", "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fitzgen", "html_url": "https://github.com/fitzgen", "followers_url": "https://api.github.com/users/fitzgen/followers", "following_url": "https://api.github.com/users/fitzgen/following{/other_user}", "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}", "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions", "organizations_url": "https://api.github.com/users/fitzgen/orgs", "repos_url": "https://api.github.com/users/fitzgen/repos", "events_url": "https://api.github.com/users/fitzgen/events{/privacy}", "received_events_url": "https://api.github.com/users/fitzgen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed2157a38f6ccdfe460f2f058f60a67daac6cc5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2157a38f6ccdfe460f2f058f60a67daac6cc5a", "html_url": "https://github.com/rust-lang/rust/commit/ed2157a38f6ccdfe460f2f058f60a67daac6cc5a"}], "stats": {"total": 86, "additions": 57, "deletions": 29}, "files": [{"sha": "605779046ef51407aeafded96af58d0346586eaf", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 57, "deletions": 29, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e633f152397545c2fd80795fc928ec555656b2ab/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e633f152397545c2fd80795fc928ec555656b2ab/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e633f152397545c2fd80795fc928ec555656b2ab", "patch": "@@ -1036,6 +1036,32 @@ pub fn write(output: &mut dyn Write, args: Arguments) -> Result {\n     Ok(())\n }\n \n+/// Padding after the end of something. Returned by `Formatter::padding`.\n+#[must_use = \"don't forget to write the post padding\"]\n+struct PostPadding {\n+    fill: [u8; 4],\n+    fill_len: u32,\n+    padding: usize,\n+}\n+\n+impl PostPadding {\n+    /// Safety relies on `fill[..fill_len]` being a valid UTF-8 char.\n+    unsafe fn new(fill: [u8; 4], fill_len: u32, padding: usize) -> PostPadding {\n+        PostPadding { fill, fill_len, padding }\n+    }\n+\n+    /// Write this post padding.\n+    fn write(self, buf: &mut dyn Write) -> Result {\n+        let fill = unsafe {\n+            str::from_utf8_unchecked(&self.fill.get_unchecked(..self.fill_len as usize))\n+        };\n+        for _ in 0..self.padding {\n+            buf.write_str(fill)?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n impl<'a> Formatter<'a> {\n     fn wrap_buf<'b, 'c, F>(&'b mut self, wrap: F) -> Formatter<'c>\n         where 'b: 'c, F: FnOnce(&'b mut (dyn Write+'b)) -> &'c mut (dyn Write+'c)\n@@ -1193,16 +1219,16 @@ impl<'a> Formatter<'a> {\n                 self.fill = '0';\n                 self.align = rt::v1::Alignment::Right;\n                 write_prefix(self, sign, prefix)?;\n-                self.with_padding(min - width, rt::v1::Alignment::Right, |f| {\n-                    f.buf.write_str(buf)\n-                })\n+                let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;\n+                self.buf.write_str(buf)?;\n+                post_padding.write(self.buf)\n             }\n             // Otherwise, the sign and prefix goes after the padding\n             Some(min) => {\n-                self.with_padding(min - width, rt::v1::Alignment::Right, |f| {\n-                    write_prefix(f, sign, prefix)?;\n-                    f.buf.write_str(buf)\n-                })\n+                let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;\n+                write_prefix(self, sign, prefix)?;\n+                self.buf.write_str(buf)?;\n+                post_padding.write(self.buf)\n             }\n         }\n     }\n@@ -1273,19 +1299,21 @@ impl<'a> Formatter<'a> {\n             // up the minimum width with the specified string + some alignment.\n             Some(width) => {\n                 let align = rt::v1::Alignment::Left;\n-                self.with_padding(width - s.chars().count(), align, |me| {\n-                    me.buf.write_str(s)\n-                })\n+                let post_padding = self.padding(width - s.chars().count(), align)?;\n+                self.buf.write_str(s)?;\n+                post_padding.write(self.buf)\n             }\n         }\n     }\n \n-    /// Runs a callback, emitting the correct padding either before or\n-    /// afterwards depending on whether right or left alignment is requested.\n-    fn with_padding<F>(&mut self, padding: usize, default: rt::v1::Alignment,\n-                       f: F) -> Result\n-        where F: FnOnce(&mut Formatter) -> Result,\n-    {\n+    /// Write the pre-padding and return the unwritten post-padding. Callers are\n+    /// responsible for ensuring post-padding is written after the thing that is\n+    /// being padded.\n+    fn padding(\n+        &mut self,\n+        padding: usize,\n+        default: rt::v1::Alignment\n+    ) -> result::Result<PostPadding, Error> {\n         let align = match self.align {\n             rt::v1::Alignment::Unknown => default,\n             _ => self.align\n@@ -1299,19 +1327,19 @@ impl<'a> Formatter<'a> {\n         };\n \n         let mut fill = [0; 4];\n-        let fill = self.fill.encode_utf8(&mut fill);\n-\n-        for _ in 0..pre_pad {\n-            self.buf.write_str(fill)?;\n-        }\n+        let fill_len = {\n+            let fill = self.fill.encode_utf8(&mut fill);\n \n-        f(self)?;\n+            for _ in 0..pre_pad {\n+                self.buf.write_str(fill)?;\n+            }\n \n-        for _ in 0..post_pad {\n-            self.buf.write_str(fill)?;\n-        }\n+            fill.len()\n+        };\n \n-        Ok(())\n+        Ok(unsafe {\n+            PostPadding::new(fill, fill_len as u32, post_pad)\n+        })\n     }\n \n     /// Takes the formatted parts and applies the padding.\n@@ -1343,9 +1371,9 @@ impl<'a> Formatter<'a> {\n             let ret = if width <= len { // no padding\n                 self.write_formatted_parts(&formatted)\n             } else {\n-                self.with_padding(width - len, align, |f| {\n-                    f.write_formatted_parts(&formatted)\n-                })\n+                let post_padding = self.padding(width - len, align)?;\n+                self.write_formatted_parts(&formatted)?;\n+                post_padding.write(self.buf)\n             };\n             self.fill = old_fill;\n             self.align = old_align;"}]}