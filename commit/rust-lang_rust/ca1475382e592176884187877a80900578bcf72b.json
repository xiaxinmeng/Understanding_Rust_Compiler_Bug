{"sha": "ca1475382e592176884187877a80900578bcf72b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMTQ3NTM4MmU1OTIxNzY4ODQxODc4NzdhODA5MDA1NzhiY2Y3MmI=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-09-07T08:21:18Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-09-07T08:21:18Z"}, "message": "Add hashmap tests exercising strings as keys and values.  No longer leaks on linux.", "tree": {"sha": "87be9ddcacb9978a97e732d23022ce86cd999c86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87be9ddcacb9978a97e732d23022ce86cd999c86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca1475382e592176884187877a80900578bcf72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1475382e592176884187877a80900578bcf72b", "html_url": "https://github.com/rust-lang/rust/commit/ca1475382e592176884187877a80900578bcf72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca1475382e592176884187877a80900578bcf72b/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e5112dac672d2364e446faf55a8fb326d53e741", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5112dac672d2364e446faf55a8fb326d53e741", "html_url": "https://github.com/rust-lang/rust/commit/5e5112dac672d2364e446faf55a8fb326d53e741"}], "stats": {"total": 132, "additions": 95, "deletions": 37}, "files": [{"sha": "3b46f355e1a38771b3dac6523998bac45969d387", "filename": "src/test/run-pass/lib-map.rs", "status": "modified", "additions": 95, "deletions": 37, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ca1475382e592176884187877a80900578bcf72b/src%2Ftest%2Frun-pass%2Flib-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1475382e592176884187877a80900578bcf72b/src%2Ftest%2Frun-pass%2Flib-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-map.rs?ref=ca1475382e592176884187877a80900578bcf72b", "patch": "@@ -3,6 +3,7 @@\n use std;\n import std.map;\n import std._str;\n+import std._uint;\n import std.util;\n \n fn test_simple() {\n@@ -42,16 +43,20 @@ fn test_simple() {\n   check (hm_uu.get(12u) == 12u);\n \n \n-  /*\n+  let str ten = \"ten\";\n+  let str eleven = \"eleven\";\n+  let str twelve = \"twelve\";\n+\n   log \"str -> uint\";\n \n   let map.hashmap[str, uint] hm_su = map.mk_hashmap[str, uint](hasher_str,\n                                                                eqer_str);\n-\n   check (hm_su.insert(\"ten\", 12u));\n-  check (hm_su.insert(\"eleven\", 13u));\n+  check (hm_su.insert(eleven, 13u));\n   check (hm_su.insert(\"twelve\", 14u));\n \n+  check (hm_su.get(eleven) == 13u);\n+\n   check (hm_su.get(\"eleven\") == 13u);\n   check (hm_su.get(\"twelve\") == 14u);\n   check (hm_su.get(\"ten\") == 12u);\n@@ -88,9 +93,9 @@ fn test_simple() {\n   let map.hashmap[str, str] hm_ss = map.mk_hashmap[str, str](hasher_str,\n                                                              eqer_str);\n \n-  check (hm_ss.insert(\"ten\", \"twelve\"));\n-  check (hm_ss.insert(\"eleven\", \"thirteen\"));\n-  check (hm_ss.insert(\"twelve\", \"fourteen\"));\n+  check (hm_ss.insert(ten, \"twelve\"));\n+  check (hm_ss.insert(eleven, \"thirteen\"));\n+  check (hm_ss.insert(twelve, \"fourteen\"));\n \n   check (_str.eq(hm_ss.get(\"eleven\"), \"thirteen\"));\n   check (_str.eq(hm_ss.get(\"twelve\"), \"fourteen\"));\n@@ -101,8 +106,6 @@ fn test_simple() {\n \n   check (!hm_ss.insert(\"twelve\", \"twelve\"));\n   check (_str.eq(hm_ss.get(\"twelve\"), \"twelve\"));\n-  */\n-\n \n   log \"*** finished test_simple\";\n }\n@@ -115,47 +118,100 @@ fn test_growth() {\n \n   let uint num_to_insert = 64u;\n \n-  fn eq(&uint x, &uint y) -> bool { ret x == y; }\n-  fn hash(&uint u) -> uint {\n+  fn eq_uint(&uint x, &uint y) -> bool { ret x == y; }\n+  fn hash_uint(&uint u) -> uint {\n     // FIXME: can't use std.util.id since we'd be capturing a type param,\n     // and presently we can't close items over type params.\n     ret u;\n   }\n \n-  let map.hashfn[uint] hasher = hash;\n-  let map.eqfn[uint] eqer = eq;\n-  let map.hashmap[uint, uint] hm = map.mk_hashmap[uint, uint](hasher, eqer);\n+\n+  log \"uint -> uint\";\n+\n+  let map.hashfn[uint] hasher_uint = hash_uint;\n+  let map.eqfn[uint] eqer_uint = eq_uint;\n+  let map.hashmap[uint, uint] hm_uu = map.mk_hashmap[uint, uint](hasher_uint,\n+                                                                 eqer_uint);\n \n   let uint i = 0u;\n   while (i < num_to_insert) {\n-    check (hm.insert(i, i * i));\n-    log \"inserting \" + std._uint.to_str(i, 10u)\n-      + \" -> \" + std._uint.to_str(i * i, 10u);\n+    check (hm_uu.insert(i, i * i));\n+    log \"inserting \" + _uint.to_str(i, 10u)\n+      + \" -> \" + _uint.to_str(i * i, 10u);\n     i += 1u;\n   }\n \n   log \"-----\";\n \n   i = 0u;\n   while (i < num_to_insert) {\n-    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n-      + std._uint.to_str(hm.get(i), 10u);\n-    check (hm.get(i) == i * i);\n+    log \"get(\" + _uint.to_str(i, 10u) + \") = \"\n+      + _uint.to_str(hm_uu.get(i), 10u);\n+    check (hm_uu.get(i) == i * i);\n     i += 1u;\n   }\n \n-  check (hm.insert(num_to_insert, 17u));\n-  check (hm.get(num_to_insert) == 17u);\n+  check (hm_uu.insert(num_to_insert, 17u));\n+  check (hm_uu.get(num_to_insert) == 17u);\n \n   log \"-----\";\n \n-  hm.rehash();\n+  hm_uu.rehash();\n \n   i = 0u;\n   while (i < num_to_insert) {\n-    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n-      + std._uint.to_str(hm.get(i), 10u);\n-    check (hm.get(i) == i * i);\n+    log \"get(\" + _uint.to_str(i, 10u) + \") = \"\n+      + _uint.to_str(hm_uu.get(i), 10u);\n+    check (hm_uu.get(i) == i * i);\n+    i += 1u;\n+  }\n+\n+\n+  log \"str -> str\";\n+\n+  let map.hashfn[str] hasher_str = _str.hash;\n+  let map.eqfn[str] eqer_str = _str.eq;\n+  let map.hashmap[str, str] hm_ss = map.mk_hashmap[str, str](hasher_str,\n+                                                             eqer_str);\n+\n+  i = 0u;\n+  while (i < num_to_insert) {\n+    check (hm_ss.insert(_uint.to_str(i, 2u), _uint.to_str(i * i, 2u)));\n+    log \"inserting \\\"\" + _uint.to_str(i, 2u)\n+      + \"\\\" -> \\\"\" + _uint.to_str(i * i, 2u) + \"\\\"\";\n+    i += 1u;\n+  }\n+\n+  log \"-----\";\n+\n+  i = 0u;\n+  while (i < num_to_insert) {\n+    log \"get(\\\"\"\n+      + _uint.to_str(i, 2u)\n+      + \"\\\") = \\\"\"\n+      + hm_ss.get(_uint.to_str(i, 2u)) + \"\\\"\";\n+\n+    check (_str.eq(hm_ss.get(_uint.to_str(i, 2u)),\n+                   _uint.to_str(i * i, 2u)));\n+    i += 1u;\n+  }\n+\n+  check (hm_ss.insert(_uint.to_str(num_to_insert, 2u),\n+                      _uint.to_str(17u, 2u)));\n+\n+  check (_str.eq(hm_ss.get(_uint.to_str(num_to_insert, 2u)),\n+                 _uint.to_str(17u, 2u)));\n+\n+  log \"-----\";\n+\n+  hm_ss.rehash();\n+\n+  i = 0u;\n+  while (i < num_to_insert) {\n+    log \"get(\\\"\" + _uint.to_str(i, 2u) + \"\\\") = \\\"\"\n+      + hm_ss.get(_uint.to_str(i, 2u)) + \"\\\"\";\n+    check (_str.eq(hm_ss.get(_uint.to_str(i, 2u)),\n+                   _uint.to_str(i * i, 2u)));\n     i += 1u;\n   }\n \n@@ -185,8 +241,8 @@ fn test_removal() {\n   let uint i = 0u;\n   while (i < num_to_insert) {\n     check (hm.insert(i, i * i));\n-    log \"inserting \" + std._uint.to_str(i, 10u)\n-      + \" -> \" + std._uint.to_str(i * i, 10u);\n+    log \"inserting \" + _uint.to_str(i, 10u)\n+      + \" -> \" + _uint.to_str(i * i, 10u);\n     i += 1u;\n   }\n \n@@ -223,8 +279,8 @@ fn test_removal() {\n \n   i = 1u;\n   while (i < num_to_insert) {\n-    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n-      + std._uint.to_str(hm.get(i), 10u);\n+    log \"get(\" + _uint.to_str(i, 10u) + \") = \"\n+      + _uint.to_str(hm.get(i), 10u);\n     check (hm.get(i) == i * i);\n     i += 2u;\n   }\n@@ -238,8 +294,8 @@ fn test_removal() {\n \n   i = 1u;\n   while (i < num_to_insert) {\n-    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n-      + std._uint.to_str(hm.get(i), 10u);\n+    log \"get(\" + _uint.to_str(i, 10u) + \") = \"\n+      + _uint.to_str(hm.get(i), 10u);\n     check (hm.get(i) == i * i);\n     i += 2u;\n   }\n@@ -249,8 +305,8 @@ fn test_removal() {\n   i = 0u;\n   while (i < num_to_insert) {\n     check (hm.insert(i, i * i));\n-    log \"inserting \" + std._uint.to_str(i, 10u)\n-      + \" -> \" + std._uint.to_str(i * i, 10u);\n+    log \"inserting \" + _uint.to_str(i, 10u)\n+      + \" -> \" + _uint.to_str(i * i, 10u);\n     i += 2u;\n   }\n \n@@ -260,8 +316,8 @@ fn test_removal() {\n \n   i = 0u;\n   while (i < num_to_insert) {\n-    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n-      + std._uint.to_str(hm.get(i), 10u);\n+    log \"get(\" + _uint.to_str(i, 10u) + \") = \"\n+      + _uint.to_str(hm.get(i), 10u);\n     check (hm.get(i) == i * i);\n     i += 1u;\n   }\n@@ -277,8 +333,8 @@ fn test_removal() {\n \n   i = 0u;\n   while (i < num_to_insert) {\n-    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n-      + std._uint.to_str(hm.get(i), 10u);\n+    log \"get(\" + _uint.to_str(i, 10u) + \") = \"\n+      + _uint.to_str(hm.get(i), 10u);\n     check (hm.get(i) == i * i);\n     i += 1u;\n   }\n@@ -290,4 +346,6 @@ fn main() {\n   test_simple();\n   test_growth();\n   test_removal();\n+\n+  std.sys.rustrt.gc();\n }"}]}