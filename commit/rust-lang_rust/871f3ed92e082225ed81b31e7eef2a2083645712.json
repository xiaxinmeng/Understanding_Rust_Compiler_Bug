{"sha": "871f3ed92e082225ed81b31e7eef2a2083645712", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MWYzZWQ5MmUwODIyMjVlZDgxYjMxZTdlZWYyYTIwODM2NDU3MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T12:55:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T12:55:26Z"}, "message": "Auto merge of #5655 - matthiaskrgr:source_mod, r=flip1995\n\ncargo_dev: add ra-setup\n\nIt takes an absolute path to a rustc repo and adds path-dependencies\nthat point towards the respective rustc subcrates into the Cargo.tomls of\nthe clippy and clippy_lints crate.\n\nThis allows rustc-analyzer to show proper type annotations etc on rustc-internals inside the clippy repo.\n\nUsage: cargo dev ra-setup /absolute/path/to/rust/\n\ncc https://github.com/rust-analyzer/rust-analyzer/issues/3517\ncc https://github.com/rust-lang/rust-clippy/issues/5514\n\nchangelog: none", "tree": {"sha": "5b9b4d5f976012ff321785f94d4284a0aeb64d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b9b4d5f976012ff321785f94d4284a0aeb64d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871f3ed92e082225ed81b31e7eef2a2083645712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871f3ed92e082225ed81b31e7eef2a2083645712", "html_url": "https://github.com/rust-lang/rust/commit/871f3ed92e082225ed81b31e7eef2a2083645712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871f3ed92e082225ed81b31e7eef2a2083645712/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5713574991d0a542a237d3442d6e020c92a300e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5713574991d0a542a237d3442d6e020c92a300e1", "html_url": "https://github.com/rust-lang/rust/commit/5713574991d0a542a237d3442d6e020c92a300e1"}, {"sha": "7b490903809ce5c03c83869357a68e88f8cc0799", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b490903809ce5c03c83869357a68e88f8cc0799", "html_url": "https://github.com/rust-lang/rust/commit/7b490903809ce5c03c83869357a68e88f8cc0799"}], "stats": {"total": 109, "additions": 107, "deletions": 2}, "files": [{"sha": "5baa31d5cde0cb5f0fd4bc9f5978e0f1955efeb9", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/871f3ed92e082225ed81b31e7eef2a2083645712/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871f3ed92e082225ed81b31e7eef2a2083645712/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=871f3ed92e082225ed81b31e7eef2a2083645712", "patch": "@@ -11,6 +11,7 @@ use walkdir::WalkDir;\n \n pub mod fmt;\n pub mod new_lint;\n+pub mod ra_setup;\n pub mod stderr_length_check;\n pub mod update_lints;\n \n@@ -400,7 +401,7 @@ fn test_replace_region_no_changes() {\n         changed: false,\n         new_lines: \"123\\n456\\n789\".to_string(),\n     };\n-    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, || vec![]);\n+    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, Vec::new);\n     assert_eq!(expected, result);\n }\n "}, {"sha": "281037ae37c9714b91ab03fa4d3f6b35e667664b", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/871f3ed92e082225ed81b31e7eef2a2083645712/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871f3ed92e082225ed81b31e7eef2a2083645712/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=871f3ed92e082225ed81b31e7eef2a2083645712", "patch": "@@ -1,7 +1,7 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use clap::{App, Arg, SubCommand};\n-use clippy_dev::{fmt, new_lint, stderr_length_check, update_lints};\n+use clippy_dev::{fmt, new_lint, ra_setup, stderr_length_check, update_lints};\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n@@ -87,6 +87,19 @@ fn main() {\n             SubCommand::with_name(\"limit_stderr_length\")\n                 .about(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"ra-setup\")\n+                .about(\"Alter dependencies so rust-analyzer can find rustc internals\")\n+                .arg(\n+                    Arg::with_name(\"rustc-repo-path\")\n+                        .long(\"repo-path\")\n+                        .short(\"r\")\n+                        .help(\"The path to a rustc repo that will be used for setting the dependencies\")\n+                        .takes_value(true)\n+                        .value_name(\"path\")\n+                        .required(true),\n+                ),\n+        )\n         .get_matches();\n \n     match matches.subcommand() {\n@@ -115,6 +128,7 @@ fn main() {\n         (\"limit_stderr_length\", _) => {\n             stderr_length_check::check();\n         },\n+        (\"ra-setup\", Some(matches)) => ra_setup::run(matches.value_of(\"rustc-repo-path\")),\n         _ => {},\n     }\n }"}, {"sha": "8617445c8a60030147556c0e221fe9155a09287e", "filename": "clippy_dev/src/ra_setup.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/871f3ed92e082225ed81b31e7eef2a2083645712/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871f3ed92e082225ed81b31e7eef2a2083645712/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=871f3ed92e082225ed81b31e7eef2a2083645712", "patch": "@@ -0,0 +1,90 @@\n+#![allow(clippy::filter_map)]\n+\n+use std::fs;\n+use std::fs::File;\n+use std::io::prelude::*;\n+use std::path::PathBuf;\n+\n+// This module takes an absolute path to a rustc repo and alters the dependencies to point towards\n+// the respective rustc subcrates instead of using extern crate xyz.\n+// This allows rust analyzer to analyze rustc internals and show proper information inside clippy\n+// code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n+\n+pub fn run(rustc_path: Option<&str>) {\n+    // we can unwrap here because the arg is required here\n+    let rustc_path = PathBuf::from(rustc_path.unwrap());\n+    assert!(rustc_path.is_dir(), \"path is not a directory\");\n+    let rustc_source_basedir = rustc_path.join(\"src\");\n+    assert!(\n+        rustc_source_basedir.is_dir(),\n+        \"are you sure the path leads to a rustc repo?\"\n+    );\n+\n+    let clippy_root_manifest = fs::read_to_string(\"Cargo.toml\").expect(\"failed to read ./Cargo.toml\");\n+    let clippy_root_lib_rs = fs::read_to_string(\"src/driver.rs\").expect(\"failed to read ./src/driver.rs\");\n+    inject_deps_into_manifest(\n+        &rustc_source_basedir,\n+        \"Cargo.toml\",\n+        &clippy_root_manifest,\n+        &clippy_root_lib_rs,\n+    )\n+    .expect(\"Failed to inject deps into ./Cargo.toml\");\n+\n+    let clippy_lints_manifest =\n+        fs::read_to_string(\"clippy_lints/Cargo.toml\").expect(\"failed to read ./clippy_lints/Cargo.toml\");\n+    let clippy_lints_lib_rs =\n+        fs::read_to_string(\"clippy_lints/src/lib.rs\").expect(\"failed to read ./clippy_lints/src/lib.rs\");\n+    inject_deps_into_manifest(\n+        &rustc_source_basedir,\n+        \"clippy_lints/Cargo.toml\",\n+        &clippy_lints_manifest,\n+        &clippy_lints_lib_rs,\n+    )\n+    .expect(\"Failed to inject deps into ./clippy_lints/Cargo.toml\");\n+}\n+\n+fn inject_deps_into_manifest(\n+    rustc_source_dir: &PathBuf,\n+    manifest_path: &str,\n+    cargo_toml: &str,\n+    lib_rs: &str,\n+) -> std::io::Result<()> {\n+    let extern_crates = lib_rs\n+        .lines()\n+        // get the deps\n+        .filter(|line| line.starts_with(\"extern crate\"))\n+        // we have something like \"extern crate foo;\", we only care about the \"foo\"\n+        //              \u2193          \u2193\n+        // extern crate rustc_middle;\n+        .map(|s| &s[13..(s.len() - 1)]);\n+\n+    let new_deps = extern_crates.map(|dep| {\n+        // format the dependencies that are going to be put inside the Cargo.toml\n+        format!(\n+            \"{dep} = {{ path = \\\"{source_path}/lib{dep}\\\" }}\\n\",\n+            dep = dep,\n+            source_path = rustc_source_dir.display()\n+        )\n+    });\n+\n+    // format a new [dependencies]-block with the new deps we need to inject\n+    let mut all_deps = String::from(\"[dependencies]\\n\");\n+    new_deps.for_each(|dep_line| {\n+        all_deps.push_str(&dep_line);\n+    });\n+\n+    // replace \"[dependencies]\" with\n+    // [dependencies]\n+    // dep1 = { path = ... }\n+    // dep2 = { path = ... }\n+    // etc\n+    let new_manifest = cargo_toml.replacen(\"[dependencies]\\n\", &all_deps, 1);\n+\n+    // println!(\"{}\", new_manifest);\n+    let mut file = File::create(manifest_path)?;\n+    file.write_all(new_manifest.as_bytes())?;\n+\n+    println!(\"Dependency paths injected: {}\", manifest_path);\n+\n+    Ok(())\n+}"}]}