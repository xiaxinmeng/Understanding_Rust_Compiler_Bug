{"sha": "d91032a9efab1f552ce5a50d0f213d185b06129d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTAzMmE5ZWZhYjFmNTUyY2U1YTUwZDBmMjEzZDE4NWIwNjEyOWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-16T13:08:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-16T13:08:29Z"}, "message": "Rollup merge of #56790 - rust-lang:borrowck-niche-discriminants, r=nikomatsakis\n\nMake RValue::Discriminant a normal Shallow read\n\nEnum layout optimizations mean that the discriminant of an enum may not be stored in a tag disjoint from the rest of the fields of the enum. Stop borrow checking as though they are.\n\nRun with MIRI to see why this is needed: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=09a3236685a06b6096e2e2e3968b852c.\n\nThis issue exists with the lexical borrow checker as well (see #45045) so migrate mode should prevent this from being immediately breaking.\n\nr? @nikomatsakis\n\nFixes #56797", "tree": {"sha": "83042c1bd0c1b08d24c1417e0264cb81326aa12d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83042c1bd0c1b08d24c1417e0264cb81326aa12d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d91032a9efab1f552ce5a50d0f213d185b06129d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcFk5NCRBK7hj4Ov3rIwAAdHIIAJjCzyL8cK6tg+HuOmUbCLCd\nB4VksMvWCbN70r4Ctl2vIU1/QS25+AsorIV0XAmrvC0nM6v77RM2uuiG3a5/80Vf\nHSzdZ6ZmDI1LKo9MHk7dPHJ+8QaK/fldc4XjguH1+IX7xFCetgRYhowPJeyAu3Lw\ngw07sOch0Kepgv/tyrLTcvUVuyZU9wNbuBIWKDtKdmMcm31e2qsfUYwDD98QUES0\nxSzXLNNNeB60q9slzE5mOMsS/aumVHJwcJpOI2ZB7mc3tCDx2WrhhDbHd4GJz4k1\n9P79zsFQhWE5c5+aidjC0kCBHHVvsiR33xGuwdNDa37FxDngcJ4YhNuXa784YV4=\n=dbTa\n-----END PGP SIGNATURE-----\n", "payload": "tree 83042c1bd0c1b08d24c1417e0264cb81326aa12d\nparent f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5\nparent cdd537339eb9fe009f75f285a99aa8257775e656\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1544965709 +0100\ncommitter GitHub <noreply@github.com> 1544965709 +0100\n\nRollup merge of #56790 - rust-lang:borrowck-niche-discriminants, r=nikomatsakis\n\nMake RValue::Discriminant a normal Shallow read\n\nEnum layout optimizations mean that the discriminant of an enum may not be stored in a tag disjoint from the rest of the fields of the enum. Stop borrow checking as though they are.\n\nRun with MIRI to see why this is needed: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=09a3236685a06b6096e2e2e3968b852c.\n\nThis issue exists with the lexical borrow checker as well (see #45045) so migrate mode should prevent this from being immediately breaking.\n\nr? @nikomatsakis\n\nFixes #56797\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d91032a9efab1f552ce5a50d0f213d185b06129d", "html_url": "https://github.com/rust-lang/rust/commit/d91032a9efab1f552ce5a50d0f213d185b06129d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d91032a9efab1f552ce5a50d0f213d185b06129d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "html_url": "https://github.com/rust-lang/rust/commit/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5"}, {"sha": "cdd537339eb9fe009f75f285a99aa8257775e656", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd537339eb9fe009f75f285a99aa8257775e656", "html_url": "https://github.com/rust-lang/rust/commit/cdd537339eb9fe009f75f285a99aa8257775e656"}], "stats": {"total": 97, "additions": 73, "deletions": 24}, "files": [{"sha": "5eca62938f7a8c821cbe68b18930779f7c770b12", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d91032a9efab1f552ce5a50d0f213d185b06129d", "patch": "@@ -545,7 +545,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 self.mutate_place(\n                     ContextKind::SetDiscrim.new(location),\n                     (place, span),\n-                    Shallow(Some(ArtificialField::Discriminant)),\n+                    Shallow(None),\n                     JustWrite,\n                     flow_state,\n                 );\n@@ -782,7 +782,6 @@ use self::AccessDepth::{Deep, Shallow};\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum ArtificialField {\n-    Discriminant,\n     ArrayLength,\n     ShallowBorrow,\n }\n@@ -1191,14 +1190,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             Rvalue::Len(ref place) | Rvalue::Discriminant(ref place) => {\n                 let af = match *rvalue {\n-                    Rvalue::Len(..) => ArtificialField::ArrayLength,\n-                    Rvalue::Discriminant(..) => ArtificialField::Discriminant,\n+                    Rvalue::Len(..) => Some(ArtificialField::ArrayLength),\n+                    Rvalue::Discriminant(..) => None,\n                     _ => unreachable!(),\n                 };\n                 self.access_place(\n                     context,\n                     (place, span),\n-                    (Shallow(Some(af)), Read(ReadKind::Copy)),\n+                    (Shallow(af), Read(ReadKind::Copy)),\n                     LocalMutationIsAllowed::No,\n                     flow_state,\n                 );"}, {"sha": "07bda8af62618a6191df91d1533277641add6939", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=d91032a9efab1f552ce5a50d0f213d185b06129d", "patch": "@@ -99,7 +99,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                 self.mutate_place(\n                     ContextKind::SetDiscrim.new(location),\n                     place,\n-                    Shallow(Some(ArtificialField::Discriminant)),\n+                    Shallow(None),\n                     JustWrite,\n                 );\n             }\n@@ -360,14 +360,14 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n \n             Rvalue::Len(ref place) | Rvalue::Discriminant(ref place) => {\n                 let af = match *rvalue {\n-                    Rvalue::Len(..) => ArtificialField::ArrayLength,\n-                    Rvalue::Discriminant(..) => ArtificialField::Discriminant,\n+                    Rvalue::Len(..) => Some(ArtificialField::ArrayLength),\n+                    Rvalue::Discriminant(..) => None,\n                     _ => unreachable!(),\n                 };\n                 self.access_place(\n                     context,\n                     place,\n-                    (Shallow(Some(af)), Read(ReadKind::Copy)),\n+                    (Shallow(af), Read(ReadKind::Copy)),\n                     LocalMutationIsAllowed::No,\n                 );\n             }"}, {"sha": "e24586cca0929ba372e8e084253a839f6e3b4c13", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=d91032a9efab1f552ce5a50d0f213d185b06129d", "patch": "@@ -165,15 +165,12 @@ fn place_components_conflict<'gcx, 'tcx>(\n                 let base_ty = base.ty(mir, tcx).to_ty(tcx);\n \n                 match (elem, &base_ty.sty, access) {\n-                    (_, _, Shallow(Some(ArtificialField::Discriminant)))\n-                    | (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n+                    (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n                     | (_, _, Shallow(Some(ArtificialField::ShallowBorrow))) => {\n-                        // The discriminant and array length are like\n-                        // additional fields on the type; they do not\n-                        // overlap any existing data there. Furthermore,\n-                        // they cannot actually be a prefix of any\n-                        // borrowed place (at least in MIR as it is\n-                        // currently.)\n+                        // The array length is like  additional fields on the\n+                        // type; it does not overlap any existing data there.\n+                        // Furthermore, if cannot actually be a prefix of any\n+                        // borrowed place (at least in MIR as it is currently.)\n                         //\n                         // e.g., a (mutable) borrow of `a[5]` while we read the\n                         // array length of `a`."}, {"sha": "6f72de0edee327be283d5389f05ea746f85fd5e7", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=d91032a9efab1f552ce5a50d0f213d185b06129d", "patch": "@@ -1,3 +1,31 @@\n+warning[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:27:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(_, ref mut b) => b,\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+error[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:44:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+\n error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n   --> $DIR/borrowck-anon-fields-variant.rs:44:14\n    |\n@@ -10,6 +38,7 @@ LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n LL |     *a += 1;\n    |     ------- first borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0499`.\n+Some errors occurred: E0499, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "edce2b185df34bdcd3372e1845953e7d49ddaf96", "filename": "src/test/ui/nll/match-on-borrowed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs?ref=d91032a9efab1f552ce5a50d0f213d185b06129d", "patch": "@@ -46,9 +46,9 @@ fn enum_example(mut e: E) {\n         E::V(ref mut x, _) => x,\n         E::W => panic!(),\n     };\n-    match e { // OK, no access of borrowed data\n+    match e { // Don't know that E uses a tag for its discriminant\n         _ if false => (),\n-        E::V(_, r) => (),\n+        E::V(_, r) => (), //~ ERROR\n         E::W => (),\n     }\n     x;\n@@ -59,9 +59,9 @@ fn indirect_enum_example(mut f: &mut E) {\n         E::V(ref mut x, _) => x,\n         E::W => panic!(),\n     };\n-    match f { // OK, no access of borrowed data\n+    match f { // Don't know that E uses a tag for its discriminant\n         _ if false => (),\n-        E::V(_, r) => (),\n+        E::V(_, r) => (), //~ ERROR\n         E::W => (),\n     }\n     x;"}, {"sha": "2d34dd7805dbf5337f08b3d3a5d00937d117363a", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91032a9efab1f552ce5a50d0f213d185b06129d/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=d91032a9efab1f552ce5a50d0f213d185b06129d", "patch": "@@ -1,3 +1,27 @@\n+error[E0503]: cannot use `e` because it was mutably borrowed\n+  --> $DIR/match-on-borrowed.rs:51:9\n+   |\n+LL |         E::V(ref mut x, _) => x,\n+   |              --------- borrow of `e.0` occurs here\n+...\n+LL |         E::V(_, r) => (), //~ ERROR\n+   |         ^^^^^^^^^^ use of borrowed `e.0`\n+...\n+LL |     x;\n+   |     - borrow later used here\n+\n+error[E0503]: cannot use `*f` because it was mutably borrowed\n+  --> $DIR/match-on-borrowed.rs:64:9\n+   |\n+LL |         E::V(ref mut x, _) => x,\n+   |              --------- borrow of `f.0` occurs here\n+...\n+LL |         E::V(_, r) => (), //~ ERROR\n+   |         ^^^^^^^^^^ use of borrowed `f.0`\n+...\n+LL |     x;\n+   |     - borrow later used here\n+\n error[E0503]: cannot use `t` because it was mutably borrowed\n   --> $DIR/match-on-borrowed.rs:82:9\n    |\n@@ -16,7 +40,7 @@ error[E0381]: use of possibly uninitialized variable: `n`\n LL |     match n {} //~ ERROR\n    |           ^ use of possibly uninitialized `n`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0381, E0503.\n For more information about an error, try `rustc --explain E0381`."}]}