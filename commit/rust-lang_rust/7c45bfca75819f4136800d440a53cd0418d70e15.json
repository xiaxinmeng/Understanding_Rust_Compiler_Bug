{"sha": "7c45bfca75819f4136800d440a53cd0418d70e15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNDViZmNhNzU4MTlmNDEzNjgwMGQ0NDBhNTNjZDA0MThkNzBlMTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-07T08:47:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-07T08:47:58Z"}, "message": "Merge branch 'rustup' into nightly-fix", "tree": {"sha": "db958588f9450ab91200af578508c8b3030895dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db958588f9450ab91200af578508c8b3030895dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c45bfca75819f4136800d440a53cd0418d70e15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa8BK+CRBK7hj4Ov3rIwAAdHIIAA7WaQnDwkSOY+wXOqonizNN\nFnw/Su4sSMTruKOADcUvd8yiy6oyqdQ63T9t46OOzM9n9BCr3XJdVRaXj6+gRFTu\nHIuSSs58rGCMcAKeBqbyxtL11S808ug0FanN9wN0USpJVk2BPEMYnxRXAbwNQFL1\nXbENNZ0WLWeKF/3wcNe8UVh+wx97eNeOGDFWgCYti9bKd+0zqE5mETMFME0M7Tyb\nIKsMZOLhthjYVlJoucw2zaSnEzaEX+YHQmlosmL86QzsfUHROcwq6YmurX+YrNE4\nneS+SGeaqCqR5yI6DgY6KHbO46rGL9grSYOcQXMVJ8Iqrrv6ZiReiYg0p23ISOE=\n=I5Ho\n-----END PGP SIGNATURE-----\n", "payload": "tree db958588f9450ab91200af578508c8b3030895dd\nparent 3d8c7a8dba7cab5d2d222cc08eaac648d6529b6a\nparent 0eb3c18565070e4af530e0ec0f707d99be7c5cef\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1525682878 +0200\ncommitter GitHub <noreply@github.com> 1525682878 +0200\n\nMerge branch 'rustup' into nightly-fix"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c45bfca75819f4136800d440a53cd0418d70e15", "html_url": "https://github.com/rust-lang/rust/commit/7c45bfca75819f4136800d440a53cd0418d70e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c45bfca75819f4136800d440a53cd0418d70e15/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8c7a8dba7cab5d2d222cc08eaac648d6529b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8c7a8dba7cab5d2d222cc08eaac648d6529b6a", "html_url": "https://github.com/rust-lang/rust/commit/3d8c7a8dba7cab5d2d222cc08eaac648d6529b6a"}, {"sha": "0eb3c18565070e4af530e0ec0f707d99be7c5cef", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb3c18565070e4af530e0ec0f707d99be7c5cef", "html_url": "https://github.com/rust-lang/rust/commit/0eb3c18565070e4af530e0ec0f707d99be7c5cef"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "4e0be7bd32048b5739c5a959a65f54acc668093e", "filename": "miri/bin/miri.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c45bfca75819f4136800d440a53cd0418d70e15/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c45bfca75819f4136800d440a53cd0418d70e15/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=7c45bfca75819f4136800d440a53cd0418d70e15", "patch": "@@ -24,6 +24,10 @@ use std::path::PathBuf;\n \n struct MiriCompilerCalls {\n     default: RustcDefaultCalls,\n+    /// Whether to begin interpretation at the start_fn lang item or not\n+    /// \n+    /// If false, the interpretation begins at the `main` function\n+    start_fn: bool,\n }\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n@@ -80,7 +84,8 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n     ) -> CompileController<'a> {\n         let mut control = self.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n-        control.after_analysis.callback = Box::new(after_analysis);\n+        let start_fn = self.start_fn;\n+        control.after_analysis.callback = Box::new(move |state| after_analysis(state, start_fn));\n         if sess.target.target != sess.host {\n             // only fully compile targets on the host. linking will fail for cross-compilation.\n             control.after_analysis.stop = Compilation::Stop;\n@@ -97,7 +102,7 @@ fn after_hir_lowering(state: &mut CompileState) {\n     state.session.plugin_attributes.borrow_mut().push(attr);\n }\n \n-fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n+fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>, use_start_fn: bool) {\n     state.session.abort_if_errors();\n \n     let tcx = state.tcx.unwrap();\n@@ -133,7 +138,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n     } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n         let start_wrapper = tcx.lang_items().start_fn().and_then(|start_fn| {\n-            if tcx.is_mir_available(start_fn) {\n+            if use_start_fn {\n                 Some(start_fn)\n             } else {\n                 None\n@@ -216,10 +221,21 @@ fn main() {\n         args.push(find_sysroot());\n     }\n \n+    let mut start_fn = false;\n+    args.retain(|arg| {\n+        if arg == \"-Zmiri-start-fn\" {\n+            start_fn = true;\n+            false\n+        } else {\n+            true\n+        }\n+    });\n+\n     // Make sure we always have all the MIR (e.g. for auxilary builds in unit tests).\n     args.push(\"-Zalways-encode-mir\".to_owned());\n \n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls {\n         default: RustcDefaultCalls,\n+        start_fn,\n     }, None, None);\n }"}, {"sha": "6c79a71a1e89b4ad237e86cdd29119f1ba370a24", "filename": "miri/fn_call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c45bfca75819f4136800d440a53cd0418d70e15/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c45bfca75819f4136800d440a53cd0418d70e15/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=7c45bfca75819f4136800d440a53cd0418d70e15", "patch": "@@ -3,7 +3,6 @@ use rustc::ty::layout::{self, Align, LayoutOf};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::codemap::Span;\n "}, {"sha": "8f444f19bd867246a83faabd73ba64e27aa04acd", "filename": "miri/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c45bfca75819f4136800d440a53cd0418d70e15/miri%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c45bfca75819f4136800d440a53cd0418d70e15/miri%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fvalidation.rs?ref=7c45bfca75819f4136800d440a53cd0418d70e15", "patch": "@@ -455,7 +455,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                     }\n \n                     // Discriminant field for enums (where applicable).\n-                    Variants::Tagged { ref discr, .. } |\n+                    Variants::Tagged { tag: ref discr, .. } |\n                     Variants::NicheFilling { niche: ref discr, .. } => {\n                         assert_eq!(i, 0);\n                         return Ok(discr.value.to_ty(tcx))"}, {"sha": "3fb7f2784a6ac78eb16544365e17932f0222f4fe", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c45bfca75819f4136800d440a53cd0418d70e15/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c45bfca75819f4136800d440a53cd0418d70e15/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=7c45bfca75819f4136800d440a53cd0418d70e15", "patch": "@@ -114,6 +114,7 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n             .join(\".xargo\")\n             .join(\"HOST\");\n \n+        flags.push(\"-Zmiri-start-fn\".to_owned());\n         flags.push(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n     }\n     if opt {"}]}