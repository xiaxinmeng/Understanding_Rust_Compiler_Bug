{"sha": "c09a9529c51cde41c1101e56049d418edb07bf71", "node_id": "C_kwDOAAsO6NoAKGMwOWE5NTI5YzUxY2RlNDFjMTEwMWU1NjA0OWQ0MThlZGIwN2JmNzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-23T19:43:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-23T19:43:04Z"}, "message": "Auto merge of #92232 - matthiaskrgr:rollup-eqdac7z, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #90625 (Add `UnwindSafe` to `Once`)\n - #92121 (disable test with self-referential generator on Miri)\n - #92166 (Fixed a small typo in ui test comments)\n - #92203 (Store a `DefId` instead of an `AdtDef` in `AggregateKind::Adt`)\n - #92231 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0ccbb239ed96ad77fa9487d16b5931ee788213db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ccbb239ed96ad77fa9487d16b5931ee788213db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09a9529c51cde41c1101e56049d418edb07bf71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09a9529c51cde41c1101e56049d418edb07bf71", "html_url": "https://github.com/rust-lang/rust/commit/c09a9529c51cde41c1101e56049d418edb07bf71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09a9529c51cde41c1101e56049d418edb07bf71/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77497c74f9268ccf91d7b4c17f23bf07117d7433", "url": "https://api.github.com/repos/rust-lang/rust/commits/77497c74f9268ccf91d7b4c17f23bf07117d7433", "html_url": "https://github.com/rust-lang/rust/commit/77497c74f9268ccf91d7b4c17f23bf07117d7433"}, {"sha": "996fb28298157ebccdff0cb2718289de3d775ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/996fb28298157ebccdff0cb2718289de3d775ad3", "html_url": "https://github.com/rust-lang/rust/commit/996fb28298157ebccdff0cb2718289de3d775ad3"}], "stats": {"total": 83, "additions": 46, "deletions": 37}, "files": [{"sha": "1f745f977d4c41b998ba44ccbd31ab1d5d56d560", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -1916,7 +1916,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let tcx = self.tcx();\n \n         match *ak {\n-            AggregateKind::Adt(def, variant_index, substs, _, active_field_index) => {\n+            AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {\n+                let def = tcx.adt_def(adt_did);\n                 let variant = &def.variants[variant_index];\n                 let adj_field_index = active_field_index.unwrap_or(field_index);\n                 if let Some(field) = variant.fields.get(adj_field_index) {\n@@ -2621,8 +2622,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n \n         let (def_id, instantiated_predicates) = match aggregate_kind {\n-            AggregateKind::Adt(def, _, substs, _, _) => {\n-                (def.did, tcx.predicates_of(def.did).instantiate(tcx, substs))\n+            AggregateKind::Adt(adt_did, _, substs, _, _) => {\n+                (*adt_did, tcx.predicates_of(*adt_did).instantiate(tcx, substs))\n             }\n \n             // For closures, we have some **extra requirements** we"}, {"sha": "6f960ca44cdd3f298028fe21e7df7bb4c530c899", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -112,9 +112,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n                 let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n+                    mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n                         dest.codegen_set_discr(&mut bx, variant_index);\n-                        if adt_def.is_enum() {\n+                        if bx.tcx().adt_def(adt_did).is_enum() {\n                             (dest.project_downcast(&mut bx, variant_index), active_field_index)\n                         } else {\n                             (dest, active_field_index)"}, {"sha": "6e37aae0f5e5cf2f31898189e37ac419cf3614f3", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -199,9 +199,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Aggregate(ref kind, ref operands) => {\n                 // active_field_index is for union initialization.\n                 let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n+                    mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n                         self.write_discriminant(variant_index, &dest)?;\n-                        if adt_def.is_enum() {\n+                        if self.tcx.adt_def(adt_did).is_enum() {\n                             assert!(active_field_index.is_none());\n                             (self.place_downcast(&dest, variant_index)?, None)\n                         } else {"}, {"sha": "27f2da34262a1f2e851f95a979bd3ed7d54d583d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -270,7 +270,8 @@ where\n         Rvalue::Aggregate(kind, operands) => {\n             // Return early if we know that the struct or enum being constructed is always\n             // qualified.\n-            if let AggregateKind::Adt(def, _, substs, ..) = **kind {\n+            if let AggregateKind::Adt(adt_did, _, substs, ..) = **kind {\n+                let def = cx.tcx.adt_def(adt_did);\n                 if Q::in_adt_inherently(cx, def, substs) {\n                     return true;\n                 }"}, {"sha": "e5f5e7072d5906e4ef25de23f481340c0980aa3b", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -22,7 +22,8 @@ pub fn expand_aggregate<'tcx>(\n ) -> impl Iterator<Item = Statement<'tcx>> + TrustedLen {\n     let mut set_discriminant = None;\n     let active_field_index = match kind {\n-        AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n+        AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n+            let adt_def = tcx.adt_def(adt_did);\n             if adt_def.is_enum() {\n                 set_discriminant = Some(Statement {\n                     kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },"}, {"sha": "c7c306e7d06cc518f82879234746c3f71a80e9d5", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -2268,7 +2268,7 @@ pub enum AggregateKind<'tcx> {\n     /// active field number and is present only for union expressions\n     /// -- e.g., for a union expression `SomeUnion { c: .. }`, the\n     /// active field index would identity the field `c`\n-    Adt(&'tcx AdtDef, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n+    Adt(DefId, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n     Closure(DefId, SubstsRef<'tcx>),\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n@@ -2427,28 +2427,26 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }\n \n-                    AggregateKind::Adt(adt_def, variant, substs, _user_ty, _) => {\n-                        let variant_def = &adt_def.variants[variant];\n-\n-                        let name = ty::tls::with(|tcx| {\n+                    AggregateKind::Adt(adt_did, variant, substs, _user_ty, _) => {\n+                        ty::tls::with(|tcx| {\n                             let mut name = String::new();\n+                            let variant_def = &tcx.adt_def(adt_did).variants[variant];\n                             let substs = tcx.lift(substs).expect(\"could not lift for printing\");\n                             FmtPrinter::new(tcx, &mut name, Namespace::ValueNS)\n                                 .print_def_path(variant_def.def_id, substs)?;\n-                            Ok(name)\n-                        })?;\n-\n-                        match variant_def.ctor_kind {\n-                            CtorKind::Const => fmt.write_str(&name),\n-                            CtorKind::Fn => fmt_tuple(fmt, &name),\n-                            CtorKind::Fictive => {\n-                                let mut struct_fmt = fmt.debug_struct(&name);\n-                                for (field, place) in iter::zip(&variant_def.fields, places) {\n-                                    struct_fmt.field(field.ident.as_str(), place);\n+\n+                            match variant_def.ctor_kind {\n+                                CtorKind::Const => fmt.write_str(&name),\n+                                CtorKind::Fn => fmt_tuple(fmt, &name),\n+                                CtorKind::Fictive => {\n+                                    let mut struct_fmt = fmt.debug_struct(&name);\n+                                    for (field, place) in iter::zip(&variant_def.fields, places) {\n+                                        struct_fmt.field(field.ident.as_str(), place);\n+                                    }\n+                                    struct_fmt.finish()\n                                 }\n-                                struct_fmt.finish()\n                             }\n-                        }\n+                        })\n                     }\n \n                     AggregateKind::Closure(def_id, substs) => ty::tls::with(|tcx| {"}, {"sha": "e577df482055674770ff57bdd874b5f41a9364fb", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -200,7 +200,7 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n                 AggregateKind::Tuple => tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx))),\n-                AggregateKind::Adt(def, _, substs, _, _) => tcx.type_of(def.did).subst(tcx, substs),\n+                AggregateKind::Adt(did, _, substs, _, _) => tcx.type_of(did).subst(tcx, substs),\n                 AggregateKind::Closure(did, substs) => tcx.mk_closure(did, substs),\n                 AggregateKind::Generator(did, substs, movability) => {\n                     tcx.mk_generator(did, substs, movability)"}, {"sha": "d9896ff5ac93ecd9c910e1ca792541c3a834b7fd", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     })\n                 });\n                 let adt = Box::new(AggregateKind::Adt(\n-                    adt_def,\n+                    adt_def.did,\n                     variant_index,\n                     substs,\n                     user_ty,"}, {"sha": "a40c4d1c3662b302c152d88490e26b03bca9553f", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -117,8 +117,8 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n         match rvalue {\n             Rvalue::Aggregate(box ref aggregate, _) => match aggregate {\n                 &AggregateKind::Array(..) | &AggregateKind::Tuple => {}\n-                &AggregateKind::Adt(ref def, ..) => {\n-                    match self.tcx.layout_scalar_valid_range(def.did) {\n+                &AggregateKind::Adt(adt_did, ..) => {\n+                    match self.tcx.layout_scalar_valid_range(adt_did) {\n                         (Bound::Unbounded, Bound::Unbounded) => {}\n                         _ => self.require_unsafe(\n                             UnsafetyViolationKind::General,"}, {"sha": "bc9a104e849dc95a9b84c64c5f49814e696796db", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> TransformVisitor<'tcx> {\n         val: Operand<'tcx>,\n         source_info: SourceInfo,\n     ) -> impl Iterator<Item = Statement<'tcx>> {\n-        let kind = AggregateKind::Adt(self.state_adt_ref, idx, self.state_substs, None, None);\n+        let kind = AggregateKind::Adt(self.state_adt_ref.did, idx, self.state_substs, None, None);\n         assert_eq!(self.state_adt_ref.variants[idx].fields.len(), 1);\n         let ty = self\n             .tcx"}, {"sha": "58996dcd6735a20dbf6c12594529c5d97af219d5", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -777,7 +777,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n         adt_def.variants[variant_index].fields.iter().enumerate().map(|(idx, field_def)| {\n             (Operand::Move(Place::from(Local::new(idx + 1))), field_def.ty(tcx, substs))\n         }),\n-        AggregateKind::Adt(adt_def, variant_index, substs, None, None),\n+        AggregateKind::Adt(adt_def.did, variant_index, substs, None, None),\n         source_info,\n         tcx,\n     )"}, {"sha": "0ed8c52c21224a7b22676ec7aeb97301f36718d8", "filename": "library/core/tests/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/library%2Fcore%2Ftests%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/library%2Fcore%2Ftests%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffuture.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -30,6 +30,7 @@ fn poll_n(val: usize, num: usize) -> PollN {\n }\n \n #[test]\n+#[cfg_attr(miri, ignore)] // self-referential generators do not work with Miri's aliasing checks\n fn test_join() {\n     block_on(async move {\n         let x = join!(async { 0 }).await;"}, {"sha": "f76d0759561acdc5f6f8a321c3f7a821cc13eaa1", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -90,6 +90,7 @@ mod tests;\n use crate::cell::Cell;\n use crate::fmt;\n use crate::marker;\n+use crate::panic::{RefUnwindSafe, UnwindSafe};\n use crate::sync::atomic::{AtomicBool, AtomicUsize, Ordering};\n use crate::thread::{self, Thread};\n \n@@ -123,6 +124,12 @@ unsafe impl Sync for Once {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Send for Once {}\n \n+#[stable(feature = \"sync_once_unwind_safe\", since = \"1.59.0\")]\n+impl UnwindSafe for Once {}\n+\n+#[stable(feature = \"sync_once_unwind_safe\", since = \"1.59.0\")]\n+impl RefUnwindSafe for Once {}\n+\n /// State yielded to [`Once::call_once_force()`]\u2019s closure parameter. The state\n /// can be used to query the poison status of the [`Once`].\n #[stable(feature = \"once_poison\", since = \"1.51.0\")]"}, {"sha": "8a0bb3c96e71927b80fa2286d7a5a5f2547c6aa4", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -1 +1 @@\n-Subproject commit 5f9358faeb1f46e19b8a23a21e79fd7fe150491e\n+Subproject commit 8a0bb3c96e71927b80fa2286d7a5a5f2547c6aa4"}, {"sha": "c05c452b36358821bf4122f9c418674edd1d713d", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -1 +1 @@\n-Subproject commit 49681ea4a9fa81173dbe9ffed74b4d4a35eae9e3\n+Subproject commit c05c452b36358821bf4122f9c418674edd1d713d"}, {"sha": "06f9e61931bcf58b91dfe6c924057e42ce273ee1", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -1 +1 @@\n-Subproject commit 954f3d441ad880737a13e241108f791a4d2a38cd\n+Subproject commit 06f9e61931bcf58b91dfe6c924057e42ce273ee1"}, {"sha": "9bf0028b557798ddd07a6f652e4d0c635d3d6620", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -1 +1 @@\n-Subproject commit a374e7d8bb6b79de45b92295d06b4ac0ef35bc09\n+Subproject commit 9bf0028b557798ddd07a6f652e4d0c635d3d6620"}, {"sha": "9bf0886084f912e577c0fe980560a5f1ed213ed9", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-92111.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09a9529c51cde41c1101e56049d418edb07bf71/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09a9529c51cde41c1101e56049d418edb07bf71/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs?ref=c09a9529c51cde41c1101e56049d418edb07bf71", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #92111.\n //\n // The issue was that we normalize trait bounds before caching\n-// results of selection. Checking that `impl NoDrop for S` requires\n+// results of selection. Checking that `impl Tr for S` requires\n // checking `S: !Drop` because it cannot overlap with the blanket\n // impl. Then we save the (unsatisfied) result from checking `S: Drop`.\n // Then the call to `a` checks whether `S: ~const Drop` but we normalize"}]}