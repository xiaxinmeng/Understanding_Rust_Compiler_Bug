{"sha": "780616ed74d22d96cb7464c2d558244bd665e39a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MDYxNmVkNzRkMjJkOTZjYjc0NjRjMmQ1NTgyNDRiZDY2NWUzOWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-05T19:45:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-15T20:24:16Z"}, "message": "proc_macro: Validate inputs to `Punct::new` and `Ident::new`", "tree": {"sha": "693e8f57a1f278a9a21b344e4cf2bfe73b2d13a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693e8f57a1f278a9a21b344e4cf2bfe73b2d13a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/780616ed74d22d96cb7464c2d558244bd665e39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/780616ed74d22d96cb7464c2d558244bd665e39a", "html_url": "https://github.com/rust-lang/rust/commit/780616ed74d22d96cb7464c2d558244bd665e39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/780616ed74d22d96cb7464c2d558244bd665e39a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f116ab6e6e2c02d5b623c64793e25742244bec55", "url": "https://api.github.com/repos/rust-lang/rust/commits/f116ab6e6e2c02d5b623c64793e25742244bec55", "html_url": "https://github.com/rust-lang/rust/commit/f116ab6e6e2c02d5b623c64793e25742244bec55"}], "stats": {"total": 225, "additions": 203, "deletions": 22}, "files": [{"sha": "472307682d8f2fbcd43da2b4dc3e4d836a9e28e7", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -55,9 +55,9 @@ use std::str::FromStr;\n use syntax::ast;\n use syntax::errors::DiagnosticBuilder;\n use syntax::parse::{self, token};\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{keywords, Symbol};\n use syntax::tokenstream;\n-use syntax::parse::lexer::comments;\n+use syntax::parse::lexer::{self, comments};\n use syntax_pos::{FileMap, Pos, SyntaxContext, FileName};\n use syntax_pos::hygiene::Mark;\n \n@@ -700,16 +700,13 @@ impl fmt::Display for Group {\n /// Multicharacter operators like `+=` are represented as two instances of `Punct` with different\n /// forms of `Spacing` returned.\n ///\n-/// REVIEW We should guarantee that `Punct` contains a valid punctuation character permitted by\n-/// REVIEW the language and not a random unicode code point. The check is already performed in\n-/// REVIEW `TokenTree::to_internal`, but we should do it on construction.\n-/// REVIEW `Punct` can also avoid using `char` internally and keep an u8-like enum.\n-///\n /// REVIEW ATTENTION: `Copy` impl on a struct with private fields.\n /// REVIEW Do we want to guarantee `Punct` to be `Copy`?\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n #[derive(Copy, Clone, Debug)]\n pub struct Punct {\n+    // REVIEW(INTERNAL) `Punct` can avoid using `char` internally and\n+    // REVIEW(INTERNAL) can keep u8 or an u8-like enum.\n     ch: char,\n     spacing: Spacing,\n     span: Span,\n@@ -733,17 +730,21 @@ pub enum Spacing {\n \n impl Punct {\n     /// Creates a new `Punct` from the given character and spacing.\n+    /// The `ch` argument must be a valid punctuation character permitted by the language,\n+    /// otherwise the function will panic.\n     ///\n     /// The returned `Punct` will have the default span of `Span::call_site()`\n     /// which can be further configured with the `set_span` method below.\n     ///\n     /// REVIEW Why we even use `char` here? There's no reason to use unicode here.\n     /// REVIEW I guess because it's more convenient to write `new('+')` than `new(b'+')`, that's ok.\n-    ///\n-    /// REVIEW TO_DO Do input validation on construction, the argument should be a valid punctuation\n-    /// REVIEW character permitted by the language.\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn new(ch: char, spacing: Spacing) -> Punct {\n+        const LEGAL_CHARS: &[char] = &['=', '<', '>', '!', '~', '+', '-', '*', '/', '%',\n+                                       '^', '&', '|', '@', '.', ',', ';', ':', '#', '$', '?'];\n+        if !LEGAL_CHARS.contains(&ch) {\n+            panic!(\"unsupported character `{:?}`\", ch)\n+        }\n         Punct {\n             ch: ch,\n             spacing: spacing,\n@@ -794,9 +795,6 @@ impl fmt::Display for Punct {\n \n /// An identifier (`ident`) or lifetime identifier (`'ident`).\n ///\n-/// REVIEW We should guarantee that `Ident` contains a valid identifier permitted by\n-/// REVIEW the language and not a random unicode string, at least for a start.\n-///\n /// REVIEW ATTENTION: `Copy` impl on a struct with private fields.\n /// REVIEW Do we want to guarantee `Ident` to be `Copy`?\n #[derive(Copy, Clone, Debug)]\n@@ -816,6 +814,8 @@ impl !Sync for Ident {}\n impl Ident {\n     /// Creates a new `Ident` with the given `string` as well as the specified\n     /// `span`.\n+    /// The `string` argument must be a valid identifier or lifetime identifier permitted by the\n+    /// language, otherwise the function will panic.\n     ///\n     /// Note that `span`, currently in rustc, configures the hygiene information\n     /// for this identifier.\n@@ -831,11 +831,11 @@ impl Ident {\n     ///\n     /// Due to the current importance of hygiene this constructor, unlike other\n     /// tokens, requires a `Span` to be specified at construction.\n-    ///\n-    /// REVIEW TO_DO Do input validation, the argument should be a valid identifier or\n-    /// REVIEW lifetime identifier.\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn new(string: &str, span: Span) -> Ident {\n+        if !lexer::is_valid_ident(string) {\n+            panic!(\"`{:?}` is not a valid identifier\", string)\n+        }\n         Ident {\n             sym: Symbol::intern(string),\n             span,\n@@ -847,6 +847,11 @@ impl Ident {\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         let mut ident = Ident::new(string, span);\n+        if ident.sym == keywords::Underscore.name() ||\n+           token::is_path_segment_keyword(ast::Ident::with_empty_ctxt(ident.sym)) ||\n+           ident.sym.as_str().starts_with(\"\\'\") {\n+            panic!(\"`{:?}` is not a valid raw identifier\", string)\n+        }\n         ident.is_raw = true;\n         ident\n     }\n@@ -1365,7 +1370,7 @@ impl TokenTree {\n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n #[doc(hidden)]\n pub mod __internal {\n-    pub use quote::{LiteralKind, Quoter, unquote};\n+    pub use quote::{LiteralKind, SpannedSymbol, Quoter, unquote};\n \n     use std::cell::Cell;\n "}, {"sha": "e77e1d01a012baefe9217d3c99f87083d82e1b74", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -18,6 +18,7 @@ use {Delimiter, Literal, Spacing, Span, Ident, Punct, Group, TokenStream, TokenT\n \n use syntax::ext::base::{ExtCtxt, ProcMacro};\n use syntax::parse::token;\n+use syntax::symbol::Symbol;\n use syntax::tokenstream;\n \n pub struct Quoter;\n@@ -195,14 +196,32 @@ impl Quote for Span {\n \n macro_rules! literals {\n     ($($i:ident),*; $($raw:ident),*) => {\n+        pub struct SpannedSymbol {\n+            sym: Symbol,\n+            span: Span,\n+        }\n+\n+        impl SpannedSymbol {\n+            pub fn new(string: &str, span: Span) -> SpannedSymbol {\n+                SpannedSymbol { sym: Symbol::intern(string), span }\n+            }\n+        }\n+\n+        impl Quote for SpannedSymbol {\n+            fn quote(self) -> TokenStream {\n+                quote!(::__internal::SpannedSymbol::new((quote self.sym.as_str()),\n+                                                        (quote self.span)))\n+            }\n+        }\n+\n         pub enum LiteralKind {\n             $($i,)*\n             $($raw(u16),)*\n         }\n \n         impl LiteralKind {\n-            pub fn with_contents_and_suffix(self, contents: Ident, suffix: Option<Ident>)\n-                                            -> Literal {\n+            pub fn with_contents_and_suffix(self, contents: SpannedSymbol,\n+                                            suffix: Option<SpannedSymbol>) -> Literal {\n                 let sym = contents.sym;\n                 let suffix = suffix.map(|t| t.sym);\n                 match self {\n@@ -225,13 +244,14 @@ macro_rules! literals {\n         }\n \n         impl Literal {\n-            fn kind_contents_and_suffix(self) -> (LiteralKind, Ident, Option<Ident>) {\n+            fn kind_contents_and_suffix(self) -> (LiteralKind, SpannedSymbol, Option<SpannedSymbol>)\n+            {\n                 let (kind, contents) = match self.lit {\n                     $(token::Lit::$i(contents) => (LiteralKind::$i, contents),)*\n                     $(token::Lit::$raw(contents, n) => (LiteralKind::$raw(n), contents),)*\n                 };\n-                let suffix = self.suffix.map(|sym| Ident::new(&sym.as_str(), self.span()));\n-                (kind, Ident::new(&contents.as_str(), self.span()), suffix)\n+                let suffix = self.suffix.map(|sym| SpannedSymbol::new(&sym.as_str(), self.span()));\n+                (kind, SpannedSymbol::new(&contents.as_str(), self.span()), suffix)\n             }\n         }\n "}, {"sha": "4da7b8e93d9a47230d04c6b5454cca5ac84da8a7", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -1770,6 +1770,15 @@ fn ident_continue(c: Option<char>) -> bool {\n     (c > '\\x7f' && c.is_xid_continue())\n }\n \n+// The string is a valid identifier or a lifetime identifier.\n+pub fn is_valid_ident(s: &str) -> bool {\n+    let mut chars = s.chars();\n+    match chars.next() {\n+        Some('\\'') => ident_start(chars.next()) && chars.all(|ch| ident_continue(Some(ch))),\n+        ch => ident_start(ch) && chars.all(|ch| ident_continue(Some(ch)))\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "6bdfe5f86aadb0e840323de56ac8a4fd847b53bb", "filename": "src/test/ui-fulldeps/auxiliary/invalid-punct-ident.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Finvalid-punct-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Finvalid-punct-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Finvalid-punct-ident.rs?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn invalid_punct(_: TokenStream) -> TokenStream {\n+    TokenTree::from(Punct::new('`', Spacing::Alone)).into()\n+}\n+\n+#[proc_macro]\n+pub fn invalid_ident(_: TokenStream) -> TokenStream {\n+    TokenTree::from(Ident::new(\"*\", Span::call_site())).into()\n+}\n+\n+#[proc_macro]\n+pub fn invalid_raw_ident(_: TokenStream) -> TokenStream {\n+    TokenTree::from(Ident::new_raw(\"self\", Span::call_site())).into()\n+}\n+\n+#[proc_macro]\n+pub fn lexer_failure(_: TokenStream) -> TokenStream {\n+    \"a b ) c\".parse().expect(\"parsing failed without panic\")\n+}"}, {"sha": "95397f490c2cb5a50da2aeac14b033dc9c918e9e", "filename": "src/test/ui-fulldeps/invalid-punct-ident-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-1.rs?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:invalid-punct-ident.rs\n+#![feature(proc_macro)]\n+#[macro_use]\n+extern crate invalid_punct_ident;\n+\n+invalid_punct!(); //~ ERROR proc macro panicked"}, {"sha": "3b3619e2637f88ca62747c0995ae89bfa93cddbd", "filename": "src/test/ui-fulldeps/invalid-punct-ident-1.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-1.stderr?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,10 @@\n+error: proc macro panicked\n+  --> $DIR/invalid-punct-ident-1.rs:16:1\n+   |\n+LL | invalid_punct!(); //~ ERROR proc macro panicked\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: message: unsupported character `'`'`\n+\n+error: aborting due to previous error\n+"}, {"sha": "2d9aa69f7117c41ad96722049eeb116d701682fd", "filename": "src/test/ui-fulldeps/invalid-punct-ident-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-2.rs?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:invalid-punct-ident.rs\n+#![feature(proc_macro)]\n+#[macro_use]\n+extern crate invalid_punct_ident;\n+\n+invalid_ident!(); //~ ERROR proc macro panicked"}, {"sha": "869c0908bb51a6d1793e8137ec1f6a4415c687b5", "filename": "src/test/ui-fulldeps/invalid-punct-ident-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-2.stderr?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,10 @@\n+error: proc macro panicked\n+  --> $DIR/invalid-punct-ident-2.rs:16:1\n+   |\n+LL | invalid_ident!(); //~ ERROR proc macro panicked\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: message: `\"*\"` is not a valid identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "3f8b7a32c809d4b0c7e5e40088a340f1de3c4425", "filename": "src/test/ui-fulldeps/invalid-punct-ident-3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-3.rs?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:invalid-punct-ident.rs\n+#![feature(proc_macro)]\n+#[macro_use]\n+extern crate invalid_punct_ident;\n+\n+invalid_raw_ident!(); //~ ERROR proc macro panicked"}, {"sha": "716f6ffa098203255685bbda8a82ad70498de7d3", "filename": "src/test/ui-fulldeps/invalid-punct-ident-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-3.stderr?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,10 @@\n+error: proc macro panicked\n+  --> $DIR/invalid-punct-ident-3.rs:16:1\n+   |\n+LL | invalid_raw_ident!(); //~ ERROR proc macro panicked\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: message: `\"self\"` is not a valid raw identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "14b8f6583368ff16bd6a672264b0a13a8d708aec", "filename": "src/test/ui-fulldeps/invalid-punct-ident-4.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.rs?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:invalid-punct-ident.rs\n+#![feature(proc_macro)]\n+#[macro_use]\n+extern crate invalid_punct_ident;\n+\n+lexer_failure!(); //~ ERROR proc macro panicked\n+                  //~| ERROR unexpected close delimiter: `)`"}, {"sha": "4493e37eeb2739ed877dd1776b298c3540093dda", "filename": "src/test/ui-fulldeps/invalid-punct-ident-4.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/780616ed74d22d96cb7464c2d558244bd665e39a/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finvalid-punct-ident-4.stderr?ref=780616ed74d22d96cb7464c2d558244bd665e39a", "patch": "@@ -0,0 +1,14 @@\n+error: unexpected close delimiter: `)`\n+  --> $DIR/invalid-punct-ident-4.rs:16:1\n+   |\n+LL | lexer_failure!(); //~ ERROR proc macro panicked\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: proc macro panicked\n+  --> $DIR/invalid-punct-ident-4.rs:16:1\n+   |\n+LL | lexer_failure!(); //~ ERROR proc macro panicked\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}