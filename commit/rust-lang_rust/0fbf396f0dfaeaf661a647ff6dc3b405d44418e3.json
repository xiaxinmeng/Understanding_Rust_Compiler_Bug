{"sha": "0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYmYzOTZmMGRmYWVhZjY2MWE2NDdmZjZkYzNiNDA1ZDQ0NDE4ZTM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-28T13:59:02Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-28T13:59:02Z"}, "message": "Make most completions respect `#[doc(hidden)]`", "tree": {"sha": "5a4dc4760d33cb897ad1e2272b3f6d4597bc9e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4dc4760d33cb897ad1e2272b3f6d4597bc9e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "html_url": "https://github.com/rust-lang/rust/commit/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33dcc895c1f87306eebea1033fcf843ce3d1a58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/33dcc895c1f87306eebea1033fcf843ce3d1a58c", "html_url": "https://github.com/rust-lang/rust/commit/33dcc895c1f87306eebea1033fcf843ce3d1a58c"}], "stats": {"total": 175, "additions": 165, "deletions": 10}, "files": [{"sha": "162ff55471e14708805f412331d778baa37928da", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "patch": "@@ -351,6 +351,20 @@ impl ModuleDef {\n         }\n         acc\n     }\n+\n+    pub fn attrs(&self, db: &dyn HirDatabase) -> Option<AttrsWithOwner> {\n+        Some(match self {\n+            ModuleDef::Module(it) => it.attrs(db),\n+            ModuleDef::Function(it) => it.attrs(db),\n+            ModuleDef::Adt(it) => it.attrs(db),\n+            ModuleDef::Variant(it) => it.attrs(db),\n+            ModuleDef::Const(it) => it.attrs(db),\n+            ModuleDef::Static(it) => it.attrs(db),\n+            ModuleDef::Trait(it) => it.attrs(db),\n+            ModuleDef::TypeAlias(it) => it.attrs(db),\n+            ModuleDef::BuiltinType(_) => return None,\n+        })\n+    }\n }\n \n impl HasVisibility for ModuleDef {\n@@ -2725,6 +2739,32 @@ impl ScopeDef {\n \n         items\n     }\n+\n+    pub fn attrs(&self, db: &dyn HirDatabase) -> Option<AttrsWithOwner> {\n+        match self {\n+            ScopeDef::ModuleDef(it) => it.attrs(db),\n+            ScopeDef::MacroDef(it) => Some(it.attrs(db)),\n+            ScopeDef::GenericParam(it) => Some(it.attrs(db)),\n+            ScopeDef::ImplSelfType(_)\n+            | ScopeDef::AdtSelfType(_)\n+            | ScopeDef::Local(_)\n+            | ScopeDef::Label(_)\n+            | ScopeDef::Unknown => None,\n+        }\n+    }\n+\n+    pub fn krate(&self, db: &dyn HirDatabase) -> Option<Crate> {\n+        match self {\n+            ScopeDef::ModuleDef(it) => it.module(db).map(|m| m.krate()),\n+            ScopeDef::MacroDef(it) => it.module(db).map(|m| m.krate()),\n+            ScopeDef::GenericParam(it) => Some(it.module(db).krate()),\n+            ScopeDef::ImplSelfType(_) => None,\n+            ScopeDef::AdtSelfType(it) => Some(it.module(db).krate()),\n+            ScopeDef::Local(it) => Some(it.module(db).krate()),\n+            ScopeDef::Label(it) => Some(it.module(db).krate()),\n+            ScopeDef::Unknown => None,\n+        }\n+    }\n }\n \n impl From<ItemInNs> for ScopeDef {"}, {"sha": "b53824aec6cdd95417c5a7b34bf2ac2af01cdf3d", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "patch": "@@ -54,7 +54,7 @@ fn get_derive_names_in_scope(\n     ctx: &CompletionContext,\n ) -> FxHashMap<String, Option<hir::Documentation>> {\n     let mut result = FxHashMap::default();\n-    ctx.scope.process_all_names(&mut |name, scope_def| {\n+    ctx.process_all_names(&mut |name, scope_def| {\n         if let hir::ScopeDef::MacroDef(mac) = scope_def {\n             if mac.kind() == hir::MacroKind::Derive {\n                 result.insert(name.to_string(), mac.docs(ctx.db));"}, {"sha": "f892a3150515f33612c40a1c2d2bd50f5e5de4c7", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n \n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n-    ctx.scope.process_all_names(&mut |name, res| {\n+    ctx.process_all_names(&mut |name, res| {\n         let add_resolution = match &res {\n             hir::ScopeDef::ModuleDef(def) => match def {\n                 hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {"}, {"sha": "970f7db55920adb191d9c544f0540f35efd6e7e2", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "patch": "@@ -102,6 +102,11 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     }\n                 }\n \n+                if ctx.is_scope_def_hidden(&def) {\n+                    cov_mark::hit!(qualified_path_doc_hidden);\n+                    continue;\n+                }\n+\n                 let add_resolution = match def {\n                     // Don't suggest attribute macros and derives.\n                     hir::ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n@@ -119,7 +124,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     _ => true,\n                 };\n \n-                // FIXME: respect #[doc(hidden)] (see `CompletionContext::is_visible`)\n                 if add_resolution {\n                     acc.add_resolution(ctx, name, &def);\n                 }\n@@ -666,4 +670,34 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn respects_doc_hidden() {\n+        cov_mark::check!(qualified_path_doc_hidden);\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib deps:dep\n+fn f() {\n+    dep::$0\n+}\n+\n+//- /dep.rs crate:dep\n+#[doc(hidden)]\n+#[macro_export]\n+macro_rules! m {\n+    () => {}\n+}\n+\n+#[doc(hidden)]\n+pub fn f() {}\n+\n+#[doc(hidden)]\n+pub struct S;\n+\n+#[doc(hidden)]\n+pub mod m {}\n+            \"#,\n+            expect![[r#\"\"#]],\n+        )\n+    }\n }"}, {"sha": "5d0eee08ee160562ec954ac3c17be09afa7ccc80", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if ctx.in_use_tree() {\n         // only show modules in a fresh UseTree\n         cov_mark::hit!(unqualified_path_only_modules_in_import);\n-        ctx.scope.process_all_names(&mut |name, res| {\n+        ctx.process_all_names(&mut |name, res| {\n             if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n                 acc.add_resolution(ctx, name, &res);\n             }\n@@ -29,7 +29,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         Some(ImmediateLocation::Visibility(_)) => return,\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n             // only show macros in {Assoc}ItemList\n-            ctx.scope.process_all_names(&mut |name, res| {\n+            ctx.process_all_names(&mut |name, res| {\n                 if let hir::ScopeDef::MacroDef(mac) = res {\n                     if mac.is_fn_like() {\n                         acc.add_macro(ctx, Some(name.clone()), mac);\n@@ -42,7 +42,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             return;\n         }\n         Some(ImmediateLocation::TypeBound) => {\n-            ctx.scope.process_all_names(&mut |name, res| {\n+            ctx.process_all_names(&mut |name, res| {\n                 let add_resolution = match res {\n                     ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n                     ScopeDef::ModuleDef(hir::ModuleDef::Trait(_) | hir::ModuleDef::Module(_)) => {\n@@ -83,7 +83,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         }\n     }\n \n-    ctx.scope.process_all_names(&mut |name, res| {\n+    ctx.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) | ScopeDef::Label(_) =\n             res\n         {\n@@ -252,4 +252,58 @@ pub mod prelude {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn respects_doc_hidden() {\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib deps:std\n+fn f() {\n+    format_$0\n+}\n+\n+//- /std.rs crate:std\n+#[doc(hidden)]\n+#[macro_export]\n+macro_rules! format_args_nl {\n+    () => {}\n+}\n+\n+pub mod prelude {\n+    pub mod rust_2018 {}\n+}\n+            \"#,\n+            expect![[r#\"\n+                fn f() fn()\n+                md std\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn respects_doc_hidden_in_assoc_item_list() {\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib deps:std\n+struct S;\n+impl S {\n+    format_$0\n+}\n+\n+//- /std.rs crate:std\n+#[doc(hidden)]\n+#[macro_export]\n+macro_rules! format_args_nl {\n+    () => {}\n+}\n+\n+pub mod prelude {\n+    pub mod rust_2018 {}\n+}\n+            \"#,\n+            expect![[r#\"\n+                md std\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "e4455b6941620bbb147c0421152cfd9991e73575", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf396f0dfaeaf661a647ff6dc3b405d44418e3/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=0fbf396f0dfaeaf661a647ff6dc3b405d44418e3", "patch": "@@ -1,7 +1,7 @@\n //! See `CompletionContext` structure.\n \n use base_db::SourceDatabaseExt;\n-use hir::{Local, ScopeDef, Semantics, SemanticsScope, Type};\n+use hir::{Local, Name, ScopeDef, Semantics, SemanticsScope, Type};\n use ide_db::{\n     base_db::{FilePosition, SourceDatabase},\n     call_info::ActiveParameter,\n@@ -370,6 +370,25 @@ impl<'a> CompletionContext<'a> {\n         self.is_visible_impl(&item.visibility(self.db), &item.attrs(self.db), item.krate(self.db))\n     }\n \n+    pub(crate) fn is_scope_def_hidden(&self, scope_def: &ScopeDef) -> bool {\n+        if let (Some(attrs), Some(krate)) = (scope_def.attrs(self.db), scope_def.krate(self.db)) {\n+            return self.is_doc_hidden(&attrs, krate);\n+        }\n+\n+        false\n+    }\n+\n+    /// A version of [`SemanticsScope::process_all_names`] that filters out `#[doc(hidden)]` items.\n+    pub(crate) fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef)) {\n+        self.scope.process_all_names(&mut |name, def| {\n+            if self.is_scope_def_hidden(&def) {\n+                return;\n+            }\n+\n+            f(name, def);\n+        })\n+    }\n+\n     fn is_visible_impl(\n         &self,\n         vis: &hir::Visibility,\n@@ -388,12 +407,20 @@ impl<'a> CompletionContext<'a> {\n             return is_editable;\n         }\n \n+        !self.is_doc_hidden(attrs, defining_crate)\n+    }\n+\n+    fn is_doc_hidden(&self, attrs: &hir::Attrs, defining_crate: hir::Crate) -> bool {\n+        let module = match self.scope.module() {\n+            Some(it) => it,\n+            None => return true,\n+        };\n         if module.krate() != defining_crate && attrs.has_doc_hidden() {\n             // `doc(hidden)` items are only completed within the defining crate.\n-            return false;\n+            return true;\n         }\n \n-        true\n+        false\n     }\n \n     fn fill_impl_def(&mut self) {"}]}