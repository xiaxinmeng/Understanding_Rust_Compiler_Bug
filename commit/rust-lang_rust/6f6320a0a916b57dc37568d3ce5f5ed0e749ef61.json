{"sha": "6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "node_id": "C_kwDOAAsO6NoAKDZmNjMyMGEwYTkxNmI1N2RjMzc1NjhkM2NlNWY1ZWQwZTc0OWVmNjE", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-10-07T20:24:31Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-19T15:47:42Z"}, "message": "constify `pointer::is_aligned{,_to}`", "tree": {"sha": "174f96c95e58a75b88b93ef90b430a271c3131fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/174f96c95e58a75b88b93ef90b430a271c3131fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "html_url": "https://github.com/rust-lang/rust/commit/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61/comments", "author": null, "committer": null, "parents": [{"sha": "8cf6b16185745822b109dfa17c26d2a4ee4184ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf6b16185745822b109dfa17c26d2a4ee4184ab", "html_url": "https://github.com/rust-lang/rust/commit/8cf6b16185745822b109dfa17c26d2a4ee4184ab"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "848eccd7f2908ef05ac3a55930797e5c429465e1", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "patch": "@@ -130,6 +130,7 @@\n #![feature(const_option)]\n #![feature(const_option_ext)]\n #![feature(const_pin)]\n+#![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_sub_ptr)]\n #![feature(const_replace)]\n #![feature(const_result_drop)]"}, {"sha": "8b96cf06be462a0adeeaf0c29b87aaac5982bcd8", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "patch": "@@ -1363,10 +1363,13 @@ impl<T: ?Sized> *const T {\n     }\n \n     /// Returns whether the pointer is properly aligned for `T`.\n+    // #[cfg(not(bootstrap))] -- Calling this function in a const context from the bootstrap\n+    // compiler will always return false.\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n-    pub fn is_aligned(self) -> bool\n+    #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"none\")]\n+    pub const fn is_aligned(self) -> bool\n     where\n         T: Sized,\n     {\n@@ -1381,16 +1384,26 @@ impl<T: ?Sized> *const T {\n     /// # Panics\n     ///\n     /// The function panics if `align` is not a power-of-two (this includes 0).\n+    // #[cfg(not(bootstrap))] -- Calling this function in a const context from the bootstrap\n+    // compiler will always return false.\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n-    pub fn is_aligned_to(self, align: usize) -> bool {\n-        if !align.is_power_of_two() {\n-            panic!(\"is_aligned_to: align is not a power-of-two\");\n+    #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"none\")]\n+    pub const fn is_aligned_to(self, align: usize) -> bool {\n+        assert!(align.is_power_of_two(), \"is_aligned_to: align is not a power-of-two\");\n+\n+        #[inline]\n+        fn runtime(ptr: *const u8, align: usize) -> bool {\n+            ptr.addr() & (align - 1) == 0\n+        }\n+\n+        const fn comptime(ptr: *const u8, align: usize) -> bool {\n+            ptr.align_offset(align) == 0\n         }\n \n-        // Cast is needed for `T: !Sized`\n-        self.cast::<u8>().addr() & align - 1 == 0\n+        // SAFETY: `ptr.align_offset(align)` returns 0 if and only if the pointer is already aligned.\n+        unsafe { intrinsics::const_eval_select((self.cast::<u8>(), align), comptime, runtime) }\n     }\n }\n "}, {"sha": "2d73c24b5b4c8c3c460b22d6018dd69d9429bb5a", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "patch": "@@ -1631,10 +1631,13 @@ impl<T: ?Sized> *mut T {\n     }\n \n     /// Returns whether the pointer is properly aligned for `T`.\n+    // #[cfg(not(bootstrap))] -- Calling this function in a const context from the bootstrap\n+    // compiler will always return false.\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n-    pub fn is_aligned(self) -> bool\n+    #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"none\")]\n+    pub const fn is_aligned(self) -> bool\n     where\n         T: Sized,\n     {\n@@ -1649,16 +1652,26 @@ impl<T: ?Sized> *mut T {\n     /// # Panics\n     ///\n     /// The function panics if `align` is not a power-of-two (this includes 0).\n+    // #[cfg(not(bootstrap))] -- Calling this function in a const context from the bootstrap\n+    // compiler will always return false.\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n-    pub fn is_aligned_to(self, align: usize) -> bool {\n-        if !align.is_power_of_two() {\n-            panic!(\"is_aligned_to: align is not a power-of-two\");\n+    #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"none\")]\n+    pub const fn is_aligned_to(self, align: usize) -> bool {\n+        assert!(align.is_power_of_two(), \"is_aligned_to: align is not a power-of-two\");\n+\n+        #[inline]\n+        fn runtime(ptr: *mut u8, align: usize) -> bool {\n+            ptr.addr() & (align - 1) == 0\n+        }\n+\n+        const fn comptime(ptr: *mut u8, align: usize) -> bool {\n+            ptr.align_offset(align) == 0\n         }\n \n-        // Cast is needed for `T: !Sized`\n-        self.cast::<u8>().addr() & align - 1 == 0\n+        // SAFETY: `ptr.align_offset(align)` returns 0 if and only if the pointer is already aligned.\n+        unsafe { intrinsics::const_eval_select((self.cast::<u8>(), align), comptime, runtime) }\n     }\n }\n "}]}