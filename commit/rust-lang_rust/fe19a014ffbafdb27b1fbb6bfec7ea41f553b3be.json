{"sha": "fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTlhMDE0ZmZiYWZkYjI3YjFmYmI2YmZlYzdlYTQxZjU1M2IzYmU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-08T04:58:48Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-08T04:58:48Z"}, "message": "Move lvalue data structures out of eval_context.", "tree": {"sha": "bd2d51699378526522bace03ff0fd8ddb6135b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2d51699378526522bace03ff0fd8ddb6135b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "html_url": "https://github.com/rust-lang/rust/commit/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4702d970939ae1eff389b1c334c10125a7666d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4702d970939ae1eff389b1c334c10125a7666d1a", "html_url": "https://github.com/rust-lang/rust/commit/4702d970939ae1eff389b1c334c10125a7666d1a"}], "stats": {"total": 149, "additions": 82, "deletions": 67}, "files": [{"sha": "2605732d526ea76816f899996a5ab158a1591e0c", "filename": "src/eval_context.rs", "status": "modified", "additions": 1, "deletions": 61, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use syntax::codemap::{self, DUMMY_SP};\n \n use error::{EvalError, EvalResult};\n+use lvalue::{Global, GlobalId, Lvalue, LvalueExtra};\n use memory::{Memory, Pointer};\n use primval::{self, PrimVal, PrimValKind};\n \n@@ -96,67 +97,6 @@ pub struct Frame<'tcx> {\n     pub stmt: usize,\n }\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub enum Lvalue<'tcx> {\n-    /// An lvalue referring to a value allocated in the `Memory` system.\n-    Ptr {\n-        ptr: Pointer,\n-        extra: LvalueExtra,\n-    },\n-\n-    /// An lvalue referring to a value on the stack. Represented by a stack frame index paired with\n-    /// a Mir local index.\n-    Local {\n-        frame: usize,\n-        local: mir::Local,\n-    },\n-\n-    Global(GlobalId<'tcx>),\n-\n-    // TODO(solson): None/Never?\n-}\n-\n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub enum LvalueExtra {\n-    None,\n-    Length(u64),\n-    Vtable(Pointer),\n-    DowncastVariant(usize),\n-}\n-\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n-/// Uniquely identifies a specific constant or static\n-pub struct GlobalId<'tcx> {\n-    /// the def id of the constant/static or in case of promoteds, the def id of the function they belong to\n-    pub(super) def_id: DefId,\n-\n-    /// In case of statics and constants this is `Substs::empty()`, so only promoteds and associated\n-    /// constants actually have something useful here. We could special case statics and constants,\n-    /// but that would only require more branching when working with constants, and not bring any\n-    /// real benefits.\n-    pub(super) substs: &'tcx Substs<'tcx>,\n-\n-    /// The promoted index for this global, if it is a promoted.\n-    pub(super) promoted: Option<mir::Promoted>,\n-}\n-\n-#[derive(Copy, Clone, Debug)]\n-pub struct Global<'tcx> {\n-    data: Option<Value>,\n-    mutable: bool,\n-    ty: Ty<'tcx>,\n-}\n-\n-impl<'tcx> Global<'tcx> {\n-    pub(super) fn uninitialized(ty: Ty<'tcx>) -> Self {\n-        Global {\n-            data: None,\n-            mutable: true,\n-            ty: ty,\n-        }\n-    }\n-}\n-\n #[derive(Clone, Debug, Eq, PartialEq, Hash)]\n pub enum StackPopCleanup {\n     /// The stackframe existed to compute the initial value of a static/constant, make sure it"}, {"sha": "697c4ffa302c06d11e79e517761ce4c88cc6b314", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "patch": "@@ -25,14 +25,14 @@ extern crate byteorder;\n mod cast;\n mod error;\n mod eval_context;\n+mod lvalue;\n mod memory;\n mod primval;\n mod step;\n mod terminator;\n mod value;\n mod vtable;\n \n-\n pub use error::{\n     EvalError,\n     EvalResult,\n@@ -41,15 +41,18 @@ pub use error::{\n pub use eval_context::{\n     EvalContext,\n     Frame,\n-    Lvalue,\n-    LvalueExtra,\n     ResourceLimits,\n     StackPopCleanup,\n     Value,\n     eval_main,\n     run_mir_passes,\n };\n \n+pub use lvalue::{\n+    Lvalue,\n+    LvalueExtra,\n+};\n+\n pub use memory::{\n     Memory,\n     Pointer,"}, {"sha": "ad3de8a6f4f08ba984df57224b119c5746593bce", "filename": "src/lvalue.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "patch": "@@ -0,0 +1,69 @@\n+use rustc::hir::def_id::DefId;\n+use rustc::mir;\n+use rustc::ty::Ty;\n+use rustc::ty::subst::Substs;\n+\n+use memory::Pointer;\n+use eval_context::Value;\n+\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub enum Lvalue<'tcx> {\n+    /// An lvalue referring to a value allocated in the `Memory` system.\n+    Ptr {\n+        ptr: Pointer,\n+        extra: LvalueExtra,\n+    },\n+\n+    /// An lvalue referring to a value on the stack. Represented by a stack frame index paired with\n+    /// a Mir local index.\n+    Local {\n+        frame: usize,\n+        local: mir::Local,\n+    },\n+\n+    /// An lvalue referring to a global\n+    Global(GlobalId<'tcx>),\n+}\n+\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub enum LvalueExtra {\n+    None,\n+    Length(u64),\n+    Vtable(Pointer),\n+    DowncastVariant(usize),\n+}\n+\n+/// Uniquely identifies a specific constant or static.\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n+pub struct GlobalId<'tcx> {\n+    /// For a constant or static, the `DefId` of the item itself.\n+    /// For a promoted global, the `DefId` of the function they belong to.\n+    pub(super) def_id: DefId,\n+\n+    /// For statics and constants this is `Substs::empty()`, so only promoteds and associated\n+    /// constants actually have something useful here. We could special case statics and constants,\n+    /// but that would only require more branching when working with constants, and not bring any\n+    /// real benefits.\n+    pub(super) substs: &'tcx Substs<'tcx>,\n+\n+    /// The index for promoted globals within their function's `Mir`.\n+    pub(super) promoted: Option<mir::Promoted>,\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Global<'tcx> {\n+    pub(super) data: Option<Value>,\n+    pub(super) mutable: bool,\n+    pub(super) ty: Ty<'tcx>,\n+}\n+\n+impl<'tcx> Global<'tcx> {\n+    pub(super) fn uninitialized(ty: Ty<'tcx>) -> Self {\n+        Global {\n+            data: None,\n+            mutable: true,\n+            ty: ty,\n+        }\n+    }\n+}\n+"}, {"sha": "ddd6c40e4c79b5ba4c84df16e92f6145f506b265", "filename": "src/step.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "patch": "@@ -11,7 +11,8 @@ use rustc::mir;\n use rustc::ty::{subst, self};\n \n use error::{EvalResult, EvalError};\n-use eval_context::{GlobalId, EvalContext, Lvalue, StackPopCleanup, Global, MirRef};\n+use eval_context::{EvalContext, StackPopCleanup, MirRef};\n+use lvalue::{Global, GlobalId, Lvalue};\n use syntax::codemap::Span;\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {"}, {"sha": "9a2939001a12179235e043d5dd0363582b47d8f6", "filename": "src/terminator/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsics.rs?ref=fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "patch": "@@ -5,7 +5,8 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n \n use error::{EvalError, EvalResult};\n-use eval_context::{EvalContext, Lvalue, LvalueExtra};\n+use eval_context::EvalContext;\n+use lvalue::{Lvalue, LvalueExtra};\n use primval::{self, PrimVal, PrimValKind};\n use value::Value;\n "}, {"sha": "0f2484fa9f624c2c399febfac80f67f855fea480", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=fe19a014ffbafdb27b1fbb6bfec7ea41f553b3be", "patch": "@@ -9,7 +9,8 @@ use syntax::codemap::{DUMMY_SP, Span};\n use syntax::{ast, attr};\n \n use error::{EvalError, EvalResult};\n-use eval_context::{EvalContext, Lvalue, IntegerExt, StackPopCleanup, LvalueExtra, monomorphize_field_ty};\n+use eval_context::{EvalContext, IntegerExt, StackPopCleanup, monomorphize_field_ty};\n+use lvalue::{Lvalue, LvalueExtra};\n use memory::Pointer;\n use primval::PrimVal;\n use value::Value;"}]}