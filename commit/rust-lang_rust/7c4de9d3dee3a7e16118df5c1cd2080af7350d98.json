{"sha": "7c4de9d3dee3a7e16118df5c1cd2080af7350d98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNGRlOWQzZGVlM2E3ZTE2MTE4ZGY1YzFjZDIwODBhZjczNTBkOTg=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-12T00:52:47Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-03T23:47:38Z"}, "message": "Refactoring pt. 2", "tree": {"sha": "790dc69cce0b7dc21f0924d665d583908add6285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790dc69cce0b7dc21f0924d665d583908add6285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c4de9d3dee3a7e16118df5c1cd2080af7350d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4de9d3dee3a7e16118df5c1cd2080af7350d98", "html_url": "https://github.com/rust-lang/rust/commit/7c4de9d3dee3a7e16118df5c1cd2080af7350d98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c4de9d3dee3a7e16118df5c1cd2080af7350d98/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73b455b99694fbc5ddec38317f705f546729db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73b455b99694fbc5ddec38317f705f546729db2", "html_url": "https://github.com/rust-lang/rust/commit/f73b455b99694fbc5ddec38317f705f546729db2"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "6e8d7515671fb5cbdfd057ec90912e7eb9f6adb5", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7c4de9d3dee3a7e16118df5c1cd2080af7350d98/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4de9d3dee3a7e16118df5c1cd2080af7350d98/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=7c4de9d3dee3a7e16118df5c1cd2080af7350d98", "patch": "@@ -179,18 +179,10 @@ fn should_wrap_in_braces(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n     })\n }\n \n-fn format_option_in_sugg(\n-    cx: &LateContext<'_, '_>,\n-    cond_expr: &Expr<'_>,\n-    parens_around_option: bool,\n-    as_ref: bool,\n-    as_mut: bool,\n-) -> String {\n+fn format_option_in_sugg(cx: &LateContext<'_, '_>, cond_expr: &Expr<'_>, as_ref: bool, as_mut: bool) -> String {\n     format!(\n-        \"{}{}{}{}\",\n-        if parens_around_option { \"(\" } else { \"\" },\n-        Sugg::hir(cx, cond_expr, \"..\"),\n-        if parens_around_option { \")\" } else { \"\" },\n+        \"{}{}\",\n+        Sugg::hir(cx, cond_expr, \"..\").maybe_par(),\n         if as_mut {\n             \".as_mut()\"\n         } else if as_ref {\n@@ -230,28 +222,13 @@ fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -\n                 ExprKind::AddrOf(_, Mutability::Mut, _) => (false, true),\n                 _ => (bind_annotation == &BindingAnnotation::Ref, bind_annotation == &BindingAnnotation::RefMut),\n             };\n-            let parens_around_option = match &cond_expr.kind {\n-                // Put parens around the option expression if not doing so might\n-                // mess up the order of operations.\n-                ExprKind::Call(..)\n-                        | ExprKind::MethodCall(..)\n-                        | ExprKind::Loop(..)\n-                        | ExprKind::Match(..)\n-                        | ExprKind::Block(..)\n-                        | ExprKind::Field(..)\n-                        | ExprKind::Path(_)\n-                        | ExprKind::Unary(UnOp::UnDeref, _)\n-                        | ExprKind::AddrOf(..)\n-                    => false,\n-                _ => true,\n-            };\n             let cond_expr = match &cond_expr.kind {\n                 // Pointer dereferencing happens automatically, so we can omit it in the suggestion\n-                ExprKind::Unary(UnOp::UnDeref, expr)|ExprKind::AddrOf(_, _, expr) => expr,\n+                ExprKind::Unary(UnOp::UnDeref, expr) | ExprKind::AddrOf(_, _, expr) => expr,\n                 _ => cond_expr,\n             };\n             Some(OptionIfLetElseOccurence {\n-                option: format_option_in_sugg(cx, cond_expr, parens_around_option, as_ref, as_mut),\n+                option: format_option_in_sugg(cx, cond_expr, as_ref, as_mut),\n                 method_sugg: method_sugg.to_string(),\n                 some_expr: format!(\"|{}{}| {}\", capture_mut, capture_name, Sugg::hir(cx, some_body, \"..\")),\n                 none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir(cx, none_body, \"..\")),"}]}