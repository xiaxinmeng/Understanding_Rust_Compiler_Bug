{"sha": "b65dc42b25c71a1f032a08a2d592a3687cbefe86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NWRjNDJiMjVjNzFhMWYwMzJhMDhhMmQ1OTJhMzY4N2NiZWZlODY=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T00:28:06Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T01:24:47Z"}, "message": "TypeChecker: Avoid unnecessary copies", "tree": {"sha": "ca7d75f62d921f711ac07f570dfc8aa39950d59e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca7d75f62d921f711ac07f570dfc8aa39950d59e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b65dc42b25c71a1f032a08a2d592a3687cbefe86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b65dc42b25c71a1f032a08a2d592a3687cbefe86", "html_url": "https://github.com/rust-lang/rust/commit/b65dc42b25c71a1f032a08a2d592a3687cbefe86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b65dc42b25c71a1f032a08a2d592a3687cbefe86/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de1df3608b5ece9e492cbda06c443249691b017a", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1df3608b5ece9e492cbda06c443249691b017a", "html_url": "https://github.com/rust-lang/rust/commit/de1df3608b5ece9e492cbda06c443249691b017a"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "76681674892096761b70102939a07c0a8e5b2fa0", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b65dc42b25c71a1f032a08a2d592a3687cbefe86/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dc42b25c71a1f032a08a2d592a3687cbefe86/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=b65dc42b25c71a1f032a08a2d592a3687cbefe86", "patch": "@@ -434,12 +434,12 @@ pub fn super_fn_sigs<C:Combine>(\n pub fn super_tys<C:Combine>(\n     this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n     let tcx = this.infcx().tcx;\n-    return match (/*bad*/copy ty::get(a).sty, /*bad*/copy ty::get(b).sty) {\n+    return match (&ty::get(a).sty, &ty::get(b).sty) {\n       // The \"subtype\" ought to be handling cases involving bot or var:\n-      (ty::ty_bot, _) |\n-      (_, ty::ty_bot) |\n-      (ty::ty_infer(TyVar(_)), _) |\n-      (_, ty::ty_infer(TyVar(_))) => {\n+      (&ty::ty_bot, _) |\n+      (_, &ty::ty_bot) |\n+      (&ty::ty_infer(TyVar(_)), _) |\n+      (_, &ty::ty_infer(TyVar(_))) => {\n         tcx.sess.bug(\n             fmt!(\"%s: bot and var types should have been handled (%s,%s)\",\n                  this.tag(),\n@@ -448,68 +448,68 @@ pub fn super_tys<C:Combine>(\n       }\n \n         // Relate integral variables to other types\n-        (ty::ty_infer(IntVar(a_id)), ty::ty_infer(IntVar(b_id))) => {\n+        (&ty::ty_infer(IntVar(a_id)), &ty::ty_infer(IntVar(b_id))) => {\n             if_ok!(this.infcx().simple_vars(this.a_is_expected(),\n                                             a_id, b_id));\n             Ok(a)\n         }\n-        (ty::ty_infer(IntVar(v_id)), ty::ty_int(v)) => {\n+        (&ty::ty_infer(IntVar(v_id)), &ty::ty_int(v)) => {\n             unify_integral_variable(this, this.a_is_expected(),\n                                     v_id, IntType(v))\n         }\n-        (ty::ty_int(v), ty::ty_infer(IntVar(v_id))) => {\n+        (&ty::ty_int(v), &ty::ty_infer(IntVar(v_id))) => {\n             unify_integral_variable(this, !this.a_is_expected(),\n                                     v_id, IntType(v))\n         }\n-        (ty::ty_infer(IntVar(v_id)), ty::ty_uint(v)) => {\n+        (&ty::ty_infer(IntVar(v_id)), &ty::ty_uint(v)) => {\n             unify_integral_variable(this, this.a_is_expected(),\n                                     v_id, UintType(v))\n         }\n-        (ty::ty_uint(v), ty::ty_infer(IntVar(v_id))) => {\n+        (&ty::ty_uint(v), &ty::ty_infer(IntVar(v_id))) => {\n             unify_integral_variable(this, !this.a_is_expected(),\n                                     v_id, UintType(v))\n         }\n \n         // Relate floating-point variables to other types\n-        (ty::ty_infer(FloatVar(a_id)), ty::ty_infer(FloatVar(b_id))) => {\n+        (&ty::ty_infer(FloatVar(a_id)), &ty::ty_infer(FloatVar(b_id))) => {\n             if_ok!(this.infcx().simple_vars(this.a_is_expected(),\n                                             a_id, b_id));\n             Ok(a)\n         }\n-        (ty::ty_infer(FloatVar(v_id)), ty::ty_float(v)) => {\n+        (&ty::ty_infer(FloatVar(v_id)), &ty::ty_float(v)) => {\n             unify_float_variable(this, this.a_is_expected(), v_id, v)\n         }\n-        (ty::ty_float(v), ty::ty_infer(FloatVar(v_id))) => {\n+        (&ty::ty_float(v), &ty::ty_infer(FloatVar(v_id))) => {\n             unify_float_variable(this, !this.a_is_expected(), v_id, v)\n         }\n \n-      (ty::ty_nil, _) |\n-      (ty::ty_bool, _) |\n-      (ty::ty_int(_), _) |\n-      (ty::ty_uint(_), _) |\n-      (ty::ty_float(_), _) => {\n+      (&ty::ty_nil, _) |\n+      (&ty::ty_bool, _) |\n+      (&ty::ty_int(_), _) |\n+      (&ty::ty_uint(_), _) |\n+      (&ty::ty_float(_), _) => {\n         if ty::get(a).sty == ty::get(b).sty {\n             Ok(a)\n         } else {\n             Err(ty::terr_sorts(expected_found(this, a, b)))\n         }\n       }\n \n-      (ty::ty_param(ref a_p), ty::ty_param(ref b_p)) if a_p.idx == b_p.idx => {\n+      (&ty::ty_param(ref a_p), &ty::ty_param(ref b_p)) if a_p.idx == b_p.idx => {\n         Ok(a)\n       }\n \n-      (ty::ty_enum(a_id, ref a_substs),\n-       ty::ty_enum(b_id, ref b_substs))\n+      (&ty::ty_enum(a_id, ref a_substs),\n+       &ty::ty_enum(b_id, ref b_substs))\n       if a_id == b_id => {\n           let type_def = ty::lookup_item_type(tcx, a_id);\n           do this.substs(&type_def.generics, a_substs, b_substs).chain |substs| {\n               Ok(ty::mk_enum(tcx, a_id, substs))\n           }\n       }\n \n-      (ty::ty_trait(a_id, ref a_substs, a_store, a_mutbl),\n-       ty::ty_trait(b_id, ref b_substs, b_store, b_mutbl))\n+      (&ty::ty_trait(a_id, ref a_substs, a_store, a_mutbl),\n+       &ty::ty_trait(b_id, ref b_substs, b_store, b_mutbl))\n       if a_id == b_id && a_mutbl == b_mutbl => {\n           let trait_def = ty::lookup_trait_def(tcx, a_id);\n           do this.substs(&trait_def.generics, a_substs, b_substs).chain |substs| {\n@@ -519,53 +519,53 @@ pub fn super_tys<C:Combine>(\n           }\n       }\n \n-      (ty::ty_struct(a_id, ref a_substs), ty::ty_struct(b_id, ref b_substs))\n+      (&ty::ty_struct(a_id, ref a_substs), &ty::ty_struct(b_id, ref b_substs))\n       if a_id == b_id => {\n           let type_def = ty::lookup_item_type(tcx, a_id);\n           do this.substs(&type_def.generics, a_substs, b_substs).chain |substs| {\n               Ok(ty::mk_struct(tcx, a_id, substs))\n           }\n       }\n \n-      (ty::ty_box(ref a_mt), ty::ty_box(ref b_mt)) => {\n+      (&ty::ty_box(ref a_mt), &ty::ty_box(ref b_mt)) => {\n         do this.mts(a_mt, b_mt).chain |mt| {\n             Ok(ty::mk_box(tcx, mt))\n         }\n       }\n \n-      (ty::ty_uniq(ref a_mt), ty::ty_uniq(ref b_mt)) => {\n+      (&ty::ty_uniq(ref a_mt), &ty::ty_uniq(ref b_mt)) => {\n         do this.mts(a_mt, b_mt).chain |mt| {\n             Ok(ty::mk_uniq(tcx, mt))\n         }\n       }\n \n-      (ty::ty_ptr(ref a_mt), ty::ty_ptr(ref b_mt)) => {\n+      (&ty::ty_ptr(ref a_mt), &ty::ty_ptr(ref b_mt)) => {\n         do this.mts(a_mt, b_mt).chain |mt| {\n             Ok(ty::mk_ptr(tcx, mt))\n         }\n       }\n \n-      (ty::ty_rptr(a_r, ref a_mt), ty::ty_rptr(b_r, ref b_mt)) => {\n+      (&ty::ty_rptr(a_r, ref a_mt), &ty::ty_rptr(b_r, ref b_mt)) => {\n           let r = if_ok!(this.contraregions(a_r, b_r));\n           let mt = if_ok!(this.mts(a_mt, b_mt));\n           Ok(ty::mk_rptr(tcx, r, mt))\n       }\n \n-      (ty::ty_evec(ref a_mt, vs_a), ty::ty_evec(ref b_mt, vs_b)) => {\n+      (&ty::ty_evec(ref a_mt, vs_a), &ty::ty_evec(ref b_mt, vs_b)) => {\n         do this.mts(a_mt, b_mt).chain |mt| {\n             do this.vstores(ty::terr_vec, vs_a, vs_b).chain |vs| {\n                 Ok(ty::mk_evec(tcx, mt, vs))\n             }\n         }\n       }\n \n-      (ty::ty_estr(vs_a), ty::ty_estr(vs_b)) => {\n+      (&ty::ty_estr(vs_a), &ty::ty_estr(vs_b)) => {\n         do this.vstores(ty::terr_str, vs_a, vs_b).chain |vs| {\n             Ok(ty::mk_estr(tcx,vs))\n         }\n       }\n \n-      (ty::ty_tup(ref as_), ty::ty_tup(ref bs)) => {\n+      (&ty::ty_tup(ref as_), &ty::ty_tup(ref bs)) => {\n         if as_.len() == bs.len() {\n             map_vec2(*as_, *bs, |a, b| this.tys(*a, *b) )\n                 .chain(|ts| Ok(ty::mk_tup(tcx, ts)) )\n@@ -575,13 +575,13 @@ pub fn super_tys<C:Combine>(\n         }\n       }\n \n-      (ty::ty_bare_fn(ref a_fty), ty::ty_bare_fn(ref b_fty)) => {\n+      (&ty::ty_bare_fn(ref a_fty), &ty::ty_bare_fn(ref b_fty)) => {\n         do this.bare_fn_tys(a_fty, b_fty).chain |fty| {\n             Ok(ty::mk_bare_fn(tcx, fty))\n         }\n       }\n \n-      (ty::ty_closure(ref a_fty), ty::ty_closure(ref b_fty)) => {\n+      (&ty::ty_closure(ref a_fty), &ty::ty_closure(ref b_fty)) => {\n         do this.closure_tys(a_fty, b_fty).chain |fty| {\n             Ok(ty::mk_closure(tcx, fty))\n         }"}]}