{"sha": "01097cbab00f64b922bcf5b91fb26a68f6d0d9cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMDk3Y2JhYjAwZjY0YjkyMmJjZjViOTFmYjI2YTY4ZjZkMGQ5Y2Y=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-08-31T21:41:35Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-10-29T16:09:20Z"}, "message": "Unbreak the debuginfo tests.\n\nThe variant used in debug-info/method-on-enum.rs had its layout changed\nby the smaller discriminant, so that the `u32` no longer overlaps both\nof the `u16`s, and thus the debugger is printing partially uninitialized\ndata when it prints the wrong variant.\n\nThus, the test runner is modified to accept wildcards (using a string\nthat should be unlikely to occur literally), to allow for this.", "tree": {"sha": "372b464afcee7c0e97b024df05c24f04d3523494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372b464afcee7c0e97b024df05c24f04d3523494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf", "html_url": "https://github.com/rust-lang/rust/commit/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a027f164bcda6f99d0b44f79ca9f676ecc12a50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a027f164bcda6f99d0b44f79ca9f676ecc12a50a", "html_url": "https://github.com/rust-lang/rust/commit/a027f164bcda6f99d0b44f79ca9f676ecc12a50a"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "13c4c7948b803c9a69f64ab914a88836fd3981b7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=01097cbab00f64b922bcf5b91fb26a68f6d0d9cf", "patch": "@@ -281,7 +281,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n     };\n     let config = &mut config;\n     let cmds = props.debugger_cmds.connect(\"\\n\");\n-    let check_lines = props.check_lines.clone();\n+    let check_lines = &props.check_lines;\n \n     // compile test file (it shoud have 'compile-flags:-g' in the header)\n     let mut ProcRes = compile_test(config, props, testfile);\n@@ -315,11 +315,34 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n \n     let num_check_lines = check_lines.len();\n     if num_check_lines > 0 {\n+        // Allow check lines to leave parts unspecified (e.g., uninitialized\n+        // bits in the wrong case of an enum) with the notation \"[...]\".\n+        let check_fragments: ~[~[&str]] = check_lines.map(|s| s.split_str_iter(\"[...]\").collect());\n         // check if each line in props.check_lines appears in the\n         // output (in order)\n         let mut i = 0u;\n         for line in ProcRes.stdout.line_iter() {\n-            if check_lines[i].trim() == line.trim() {\n+            let mut rest = line.trim();\n+            let mut first = true;\n+            let mut failed = false;\n+            for &frag in check_fragments[i].iter() {\n+                let found = if first {\n+                    if rest.starts_with(frag) { Some(0) } else { None }\n+                } else {\n+                    rest.find_str(frag)\n+                };\n+                match found {\n+                    None => {\n+                        failed = true;\n+                        break;\n+                    }\n+                    Some(i) => {\n+                        rest = rest.slice_from(i + frag.len());\n+                    }\n+                }\n+                first = false;\n+            }\n+            if !failed && rest.len() == 0 {\n                 i += 1u;\n             }\n             if i == num_check_lines {"}, {"sha": "a6aacdf8e665ab59cbf3654db4f2386c2724f394", "filename": "src/test/debug-info/method-on-enum.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs?ref=01097cbab00f64b922bcf5b91fb26a68f6d0d9cf", "patch": "@@ -15,7 +15,7 @@\n // STACK BY REF\n // debugger:finish\n // debugger:print *self\n-// check:$1 = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// check:$1 = {{Variant2, [...]}, {Variant2, 117901063}}\n // debugger:print arg1\n // check:$2 = -1\n // debugger:print arg2\n@@ -25,7 +25,7 @@\n // STACK BY VAL\n // debugger:finish\n // d ebugger:print self -- ignored for now because of issue #8512\n-// c heck:$X = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// c heck:$X = {{Variant2, [...]}, {Variant2, 117901063}}\n // debugger:print arg1\n // check:$4 = -3\n // debugger:print arg2\n@@ -35,7 +35,7 @@\n // OWNED BY REF\n // debugger:finish\n // debugger:print *self\n-// check:$6 = {{Variant1, x = 1799, y = 1799}, {Variant1, 117901063}}\n+// check:$6 = {{Variant1, x = 1799, y = 1799}, {Variant1, [...]}}\n // debugger:print arg1\n // check:$7 = -5\n // debugger:print arg2\n@@ -45,7 +45,7 @@\n // OWNED BY VAL\n // debugger:finish\n // d ebugger:print self -- ignored for now because of issue #8512\n-// c heck:$X = {{Variant1, x = 1799, y = 1799}, {Variant1, 117901063}}\n+// c heck:$X = {{Variant1, x = 1799, y = 1799}, {Variant1, [...]}}\n // debugger:print arg1\n // check:$9 = -7\n // debugger:print arg2\n@@ -55,7 +55,7 @@\n // OWNED MOVED\n // debugger:finish\n // debugger:print *self\n-// check:$11 = {{Variant1, x = 1799, y = 1799}, {Variant1, 117901063}}\n+// check:$11 = {{Variant1, x = 1799, y = 1799}, {Variant1, [...]}}\n // debugger:print arg1\n // check:$12 = -9\n // debugger:print arg2\n@@ -65,7 +65,7 @@\n // MANAGED BY REF\n // debugger:finish\n // debugger:print *self\n-// check:$14 = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// check:$14 = {{Variant2, [...]}, {Variant2, 117901063}}\n // debugger:print arg1\n // check:$15 = -11\n // debugger:print arg2\n@@ -75,7 +75,7 @@\n // MANAGED BY VAL\n // debugger:finish\n // d ebugger:print self -- ignored for now because of issue #8512\n-// c heck:$X = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// c heck:$X = {{Variant2, [...]}, {Variant2, 117901063}}\n // debugger:print arg1\n // check:$17 = -13\n // debugger:print arg2\n@@ -85,7 +85,7 @@\n // MANAGED SELF\n // debugger:finish\n // debugger:print self->val\n-// check:$19 = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// check:$19 = {{Variant2, [...]}, {Variant2, 117901063}}\n // debugger:print arg1\n // check:$20 = -15\n // debugger:print arg2"}]}