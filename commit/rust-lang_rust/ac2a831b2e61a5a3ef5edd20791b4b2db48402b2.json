{"sha": "ac2a831b2e61a5a3ef5edd20791b4b2db48402b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMmE4MzFiMmU2MWE1YTNlZjVlZGQyMDc5MWI0YjJkYjQ4NDAyYjI=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T18:48:35Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T18:50:55Z"}, "message": "hir_ty: iterate_method_candidates_for_self_ty pass `visible_from_module` down to `iterate_inherent_methods`", "tree": {"sha": "eddd897a54d750390c358ae8031e65ae0f8a372f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eddd897a54d750390c358ae8031e65ae0f8a372f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac2a831b2e61a5a3ef5edd20791b4b2db48402b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2a831b2e61a5a3ef5edd20791b4b2db48402b2", "html_url": "https://github.com/rust-lang/rust/commit/ac2a831b2e61a5a3ef5edd20791b4b2db48402b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac2a831b2e61a5a3ef5edd20791b4b2db48402b2/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66d295d72df72640573522df527deb90abc94fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/66d295d72df72640573522df527deb90abc94fcd", "html_url": "https://github.com/rust-lang/rust/commit/66d295d72df72640573522df527deb90abc94fcd"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "80e7b7b799f00329a6f2eae871c837e1aca3cbf2", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac2a831b2e61a5a3ef5edd20791b4b2db48402b2/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2a831b2e61a5a3ef5edd20791b4b2db48402b2/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=ac2a831b2e61a5a3ef5edd20791b4b2db48402b2", "patch": "@@ -420,6 +420,7 @@ fn iterate_method_candidates_impl(\n                 env,\n                 krate,\n                 traits_in_scope,\n+                visible_from_module,\n                 name,\n                 callback,\n             )\n@@ -537,10 +538,12 @@ fn iterate_method_candidates_for_self_ty(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n+    visible_from_module: Option<ModuleId>,\n     name: Option<&Name>,\n     mut callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n ) -> bool {\n-    if iterate_inherent_methods(self_ty, db, name, None, krate, None, &mut callback) {\n+    if iterate_inherent_methods(self_ty, db, name, None, krate, visible_from_module, &mut callback)\n+    {\n         return true;\n     }\n     iterate_trait_method_candidates(self_ty, db, env, krate, traits_in_scope, name, None, callback)\n@@ -577,6 +580,8 @@ fn iterate_trait_method_candidates(\n         // iteration\n         let mut known_implemented = false;\n         for (_name, item) in data.items.iter() {\n+            // Don't pass a `visible_from_module` down to `is_valid_candidate`,\n+            // since only inherent methods should be included into visibility checking.\n             if !is_valid_candidate(db, name, receiver_ty, *item, self_ty, None) {\n                 continue;\n             }"}]}