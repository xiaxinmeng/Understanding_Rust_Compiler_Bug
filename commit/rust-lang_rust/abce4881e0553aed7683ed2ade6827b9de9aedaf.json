{"sha": "abce4881e0553aed7683ed2ade6827b9de9aedaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiY2U0ODgxZTA1NTNhZWQ3NjgzZWQyYWRlNjgyN2I5ZGU5YWVkYWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-22T03:54:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-27T06:39:14Z"}, "message": "split parse_angle_args into loop / single step", "tree": {"sha": "5433e839ec5b7c652e00fa02a55efb32e9f791fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5433e839ec5b7c652e00fa02a55efb32e9f791fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abce4881e0553aed7683ed2ade6827b9de9aedaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abce4881e0553aed7683ed2ade6827b9de9aedaf", "html_url": "https://github.com/rust-lang/rust/commit/abce4881e0553aed7683ed2ade6827b9de9aedaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abce4881e0553aed7683ed2ade6827b9de9aedaf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91194f795c3ce323b50b5caa30c089ec026200f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/91194f795c3ce323b50b5caa30c089ec026200f0", "html_url": "https://github.com/rust-lang/rust/commit/91194f795c3ce323b50b5caa30c089ec026200f0"}], "stats": {"total": 130, "additions": 67, "deletions": 63}, "files": [{"sha": "3e0fc3a5478d34ca3b1d72720be465f5a8c46d31", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 67, "deletions": 63, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/abce4881e0553aed7683ed2ade6827b9de9aedaf/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abce4881e0553aed7683ed2ade6827b9de9aedaf/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=abce4881e0553aed7683ed2ade6827b9de9aedaf", "patch": "@@ -388,73 +388,77 @@ impl<'a> Parser<'a> {\n     /// possibly including trailing comma.\n     fn parse_angle_args(&mut self) -> PResult<'a, Vec<AngleBracketedArg>> {\n         let mut args = Vec::new();\n-        loop {\n-            if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n-                // Parse lifetime argument.\n-                args.push(AngleBracketedArg::Arg(GenericArg::Lifetime(self.expect_lifetime())));\n-            } else if self.check_ident()\n-                && self.look_ahead(1, |t| matches!(t.kind, token::Eq | token::Colon))\n-            {\n-                // Parse associated type constraint.\n-                let lo = self.token.span;\n-                let ident = self.parse_ident()?;\n-                let kind = if self.eat(&token::Eq) {\n-                    AssocTyConstraintKind::Equality { ty: self.parse_ty()? }\n-                } else if self.eat(&token::Colon) {\n-                    let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n-                    AssocTyConstraintKind::Bound { bounds }\n-                } else {\n-                    unreachable!();\n-                };\n-\n-                let span = lo.to(self.prev_token.span);\n-\n-                // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n-                if let AssocTyConstraintKind::Bound { .. } = kind {\n-                    self.sess.gated_spans.gate(sym::associated_type_bounds, span);\n-                }\n-\n-                let constraint = AssocTyConstraint { id: ast::DUMMY_NODE_ID, ident, kind, span };\n-                args.push(AngleBracketedArg::Constraint(constraint));\n-            } else if self.check_const_arg() {\n-                // Parse const argument.\n-                let expr = if let token::OpenDelim(token::Brace) = self.token.kind {\n-                    self.parse_block_expr(\n-                        None,\n-                        self.token.span,\n-                        BlockCheckMode::Default,\n-                        ast::AttrVec::new(),\n-                    )?\n-                } else if self.token.is_ident() {\n-                    // FIXME(const_generics): to distinguish between idents for types and consts,\n-                    // we should introduce a GenericArg::Ident in the AST and distinguish when\n-                    // lowering to the HIR. For now, idents for const args are not permitted.\n-                    if self.token.is_bool_lit() {\n-                        self.parse_literal_maybe_minus()?\n-                    } else {\n-                        let span = self.token.span;\n-                        let msg = \"identifiers may currently not be used for const generics\";\n-                        self.struct_span_err(span, msg).emit();\n-                        let block = self.mk_block_err(span);\n-                        self.mk_expr(span, ast::ExprKind::Block(block, None), ast::AttrVec::new())\n-                    }\n-                } else {\n-                    self.parse_literal_maybe_minus()?\n-                };\n-                let value = AnonConst { id: ast::DUMMY_NODE_ID, value: expr };\n-                args.push(AngleBracketedArg::Arg(GenericArg::Const(value)));\n-            } else if self.check_type() {\n-                // Parse type argument.\n-                args.push(AngleBracketedArg::Arg(GenericArg::Type(self.parse_ty()?)));\n-            } else {\n-                break;\n-            }\n-\n+        while let Some(arg) = self.parse_angle_arg()? {\n+            args.push(arg);\n             if !self.eat(&token::Comma) {\n                 break;\n             }\n         }\n-\n         Ok(args)\n     }\n+\n+    /// Parses a single argument in the angle arguments `<...>` of a path segment.\n+    fn parse_angle_arg(&mut self) -> PResult<'a, Option<AngleBracketedArg>> {\n+        let arg = if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n+            // Parse lifetime argument.\n+            AngleBracketedArg::Arg(GenericArg::Lifetime(self.expect_lifetime()))\n+        } else if self.check_ident()\n+            && self.look_ahead(1, |t| matches!(t.kind, token::Eq | token::Colon))\n+        {\n+            // Parse associated type constraint.\n+            let lo = self.token.span;\n+            let ident = self.parse_ident()?;\n+            let kind = if self.eat(&token::Eq) {\n+                AssocTyConstraintKind::Equality { ty: self.parse_ty()? }\n+            } else if self.eat(&token::Colon) {\n+                let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n+                AssocTyConstraintKind::Bound { bounds }\n+            } else {\n+                unreachable!();\n+            };\n+\n+            let span = lo.to(self.prev_token.span);\n+\n+            // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n+            if let AssocTyConstraintKind::Bound { .. } = kind {\n+                self.sess.gated_spans.gate(sym::associated_type_bounds, span);\n+            }\n+\n+            let constraint = AssocTyConstraint { id: ast::DUMMY_NODE_ID, ident, kind, span };\n+            AngleBracketedArg::Constraint(constraint)\n+        } else if self.check_const_arg() {\n+            // Parse const argument.\n+            let expr = if let token::OpenDelim(token::Brace) = self.token.kind {\n+                self.parse_block_expr(\n+                    None,\n+                    self.token.span,\n+                    BlockCheckMode::Default,\n+                    ast::AttrVec::new(),\n+                )?\n+            } else if self.token.is_ident() {\n+                // FIXME(const_generics): to distinguish between idents for types and consts,\n+                // we should introduce a GenericArg::Ident in the AST and distinguish when\n+                // lowering to the HIR. For now, idents for const args are not permitted.\n+                if self.token.is_bool_lit() {\n+                    self.parse_literal_maybe_minus()?\n+                } else {\n+                    let span = self.token.span;\n+                    let msg = \"identifiers may currently not be used for const generics\";\n+                    self.struct_span_err(span, msg).emit();\n+                    let block = self.mk_block_err(span);\n+                    self.mk_expr(span, ast::ExprKind::Block(block, None), ast::AttrVec::new())\n+                }\n+            } else {\n+                self.parse_literal_maybe_minus()?\n+            };\n+            let value = AnonConst { id: ast::DUMMY_NODE_ID, value: expr };\n+            AngleBracketedArg::Arg(GenericArg::Const(value))\n+        } else if self.check_type() {\n+            // Parse type argument.\n+            AngleBracketedArg::Arg(GenericArg::Type(self.parse_ty()?))\n+        } else {\n+            return Ok(None);\n+        };\n+        Ok(Some(arg))\n+    }\n }"}]}