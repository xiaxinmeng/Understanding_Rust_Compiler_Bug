{"sha": "d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OWI3YmNiMmYwYzgxNjM2NDU0MjliYjZiYTQwYWI2NzYxYTZjZTI=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-30T04:53:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-23T05:29:15Z"}, "message": "std: pushing existing code in net.rs -> net_ip.rs and re-import/exporting", "tree": {"sha": "3934e9b8cdfc186c250ebb92dc7007d702cceffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3934e9b8cdfc186c250ebb92dc7007d702cceffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2", "html_url": "https://github.com/rust-lang/rust/commit/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffdaf14dd90995273fd697b9b87018d5dba84379", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffdaf14dd90995273fd697b9b87018d5dba84379", "html_url": "https://github.com/rust-lang/rust/commit/ffdaf14dd90995273fd697b9b87018d5dba84379"}], "stats": {"total": 127, "additions": 80, "deletions": 47}, "files": [{"sha": "9d56bef657db646a68eb29265ed94196fb3fcc15", "filename": "src/libstd/net.rs", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2/src%2Flibstd%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2/src%2Flibstd%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet.rs?ref=d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2", "patch": "@@ -1,49 +1,7 @@\n-import vec;\n-import uint;\n+#[doc=\"\n+Top-level module for network-related functionality\n+\"];\n \n-#[doc = \"An IP address\"]\n-enum ip_addr {\n-    /*\n-    Variant: ipv4\n \n-    An IPv4 address\n-    */\n-    ipv4(u8, u8, u8, u8),\n-}\n-\n-#[doc = \"Convert an `ip_addr` to a str\"]\n-fn format_addr(ip: ip_addr) -> str {\n-    alt ip {\n-      ipv4(a, b, c, d) {\n-        #fmt[\"%u.%u.%u.%u\", a as uint, b as uint, c as uint, d as uint]\n-      }\n-    }\n-}\n-\n-#[doc = \"\n-Convert a str to `ip_addr`\n-\n-Converts a string of the format `x.x.x.x` into an ip_addr enum.\n-\n-Fails if the string is not a valid IPv4 address\n-\"]\n-fn parse_addr(ip: str) -> ip_addr {\n-    let parts = vec::map(str::split_char(ip, '.'), {|s|\n-        alt uint::from_str(s) {\n-          some(n) if n <= 255u { n }\n-          _ { fail \"Invalid IP Address part.\" }\n-        }\n-    });\n-    if vec::len(parts) != 4u { fail \"Too many dots in IP address\"; }\n-    ipv4(parts[0] as u8, parts[1] as u8, parts[2] as u8, parts[3] as u8)\n-}\n-\n-#[test]\n-fn test_format_ip() {\n-    assert (net::format_addr(net::ipv4(127u8, 0u8, 0u8, 1u8)) == \"127.0.0.1\")\n-}\n-\n-#[test]\n-fn test_parse_ip() {\n-    assert (net::parse_addr(\"127.0.0.1\") == net::ipv4(127u8, 0u8, 0u8, 1u8));\n-}\n+import ip = net_ip;\n+export ip; "}, {"sha": "ed8fc622b945892b717c343c491f1c618c6d01bb", "filename": "src/libstd/net_ip.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2", "patch": "@@ -0,0 +1,74 @@\n+#[doc=\"\n+Types/fns concerning Internet Protocol (IP), versions 4 & 6\n+\"];\n+\n+import vec;\n+import uint;\n+\n+export ip_addr;\n+export v4;\n+//format_addr, parse_addr;\n+\n+#[doc = \"An IP address\"]\n+enum ip_addr {\n+    #[doc=\"An IPv4 address\"]\n+    ipv4(u8, u8, u8, u8),\n+}\n+\n+#[doc=\"\n+Convert a `ip_addr` to a str\n+\n+# Arguments\n+\n+* ip - a `std::net::ip::ip_addr`\n+\"]\n+fn format_addr(ip: ip_addr) -> str {\n+    alt ip {\n+      ipv4(a, b, c, d) {\n+        #fmt[\"%u.%u.%u.%u\", a as uint, b as uint, c as uint, d as uint]\n+      }\n+    }\n+}\n+\n+mod v4 {\n+    #[doc = \"\n+    Convert a str to `ip_addr`\n+\n+    # Failure\n+\n+j    Fails if the string is not a valid IPv4 address\n+\n+    # Arguments\n+\n+    * ip - a string of the format `x.x.x.x`\n+\n+    # Returns\n+\n+    * an `ip_addr` of the `ipv4` variant\n+    \"]\n+    fn parse_addr(ip: str) -> ip_addr {\n+        let parts = vec::map(str::split_char(ip, '.'), {|s|\n+            alt uint::from_str(s) {\n+              some(n) if n <= 255u { n }\n+              _ { fail \"Invalid IP Address part.\" }\n+            }\n+        });\n+        if vec::len(parts) != 4u { fail \"Too many dots in IP address\"; }\n+        ipv4(parts[0] as u8, parts[1] as u8, parts[2] as u8, parts[3] as u8)\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    #[test]\n+    fn test_format_ip() {\n+        assert (format_addr(ipv4(127u8, 0u8, 0u8, 1u8))\n+                == \"127.0.0.1\")\n+    }\n+\n+    #[test]\n+    fn test_parse_ip() {\n+        assert (v4::parse_addr(\"127.0.0.1\") ==\n+                ipv4(127u8, 0u8, 0u8, 1u8));\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "7e2d3b86a417a28dd6e918c668301f21d14e4672", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=d99b7bcb2f0c8163645429bb6ba40ab6761a6ce2", "patch": "@@ -23,6 +23,7 @@ export test, tempfile, serialization;\n // General io and system-services modules\n \n mod net;\n+mod net_ip;\n mod net_tcp;\n \n // libuv modules"}]}