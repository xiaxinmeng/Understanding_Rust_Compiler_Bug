{"sha": "f8a78bdfdfffffe74f516eec4303d7f3d4ac879e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YTc4YmRmZGZmZmZmZTc0ZjUxNmVlYzQzMDNkN2YzZDRhYzg3OWU=", "commit": {"author": {"name": "James Duley", "email": "james.duley@arm.com", "date": "2018-09-14T16:32:16Z"}, "committer": {"name": "James Duley", "email": "james.duley@arm.com", "date": "2018-09-14T16:35:12Z"}, "message": "Add comments and assertion to `park`/`unpark`\n\nregarding the synchronization.", "tree": {"sha": "177119e375eee491f5cea6de6cf89c7c9deec1ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177119e375eee491f5cea6de6cf89c7c9deec1ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8a78bdfdfffffe74f516eec4303d7f3d4ac879e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a78bdfdfffffe74f516eec4303d7f3d4ac879e", "html_url": "https://github.com/rust-lang/rust/commit/f8a78bdfdfffffe74f516eec4303d7f3d4ac879e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8a78bdfdfffffe74f516eec4303d7f3d4ac879e/comments", "author": null, "committer": null, "parents": [{"sha": "204d9608e35f7dc56e179d4539e931766fd88f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/204d9608e35f7dc56e179d4539e931766fd88f28", "html_url": "https://github.com/rust-lang/rust/commit/204d9608e35f7dc56e179d4539e931766fd88f28"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "1f03ee3e37deb059bab26c620f5209655259ba63", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8a78bdfdfffffe74f516eec4303d7f3d4ac879e/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a78bdfdfffffe74f516eec4303d7f3d4ac879e/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=f8a78bdfdfffffe74f516eec4303d7f3d4ac879e", "patch": "@@ -800,7 +800,11 @@ pub fn park() {\n     match thread.inner.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n         Ok(_) => {}\n         Err(NOTIFIED) => {\n-            thread.inner.state.swap(EMPTY, SeqCst);\n+            // We must read again here, even though we know it will be NOTIFY,\n+            // to synchronize with an write in `unpark` that occurred since we\n+            // last read.\n+            let old = thread.inner.state.swap(EMPTY, SeqCst);\n+            assert_eq!(old, NOTIFIED, \"park state changed unexpectedly\");\n             return;\n         } // should consume this notification, so prohibit spurious wakeups in next park.\n         Err(_) => panic!(\"inconsistent park state\"),\n@@ -889,7 +893,11 @@ pub fn park_timeout(dur: Duration) {\n     match thread.inner.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n         Ok(_) => {}\n         Err(NOTIFIED) => {\n-            thread.inner.state.swap(EMPTY, SeqCst);\n+            // We must read again here, even though we know it will be NOTIFY,\n+            // to synchronize with an write in `unpark` that occurred since we\n+            // last read.\n+            let old = thread.inner.state.swap(EMPTY, SeqCst);\n+            assert_eq!(old, NOTIFIED, \"park state changed unexpectedly\");\n             return;\n         } // should consume this notification, so prohibit spurious wakeups in next park.\n         Err(_) => panic!(\"inconsistent park_timeout state\"),\n@@ -1058,6 +1066,8 @@ impl Thread {\n     /// [park]: fn.park.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unpark(&self) {\n+        // We must unconditionally write NOTIFIED here to\n+        // synchronize with a read in `park`.\n         match self.inner.state.swap(NOTIFIED, SeqCst) {\n             EMPTY => return, // no one was waiting\n             NOTIFIED => return, // already unparked"}]}