{"sha": "34754bd0e27c6fdba617c1033144e88e887d815d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzU0YmQwZTI3YzZmZGJhNjE3YzEwMzMxNDRlODhlODg3ZDgxNWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-25T12:45:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-25T12:45:02Z"}, "message": "Merge #5874\n\n5874: Remove AttrDef\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7db11f5c8abbcef1f6c847bd47dcae02a2d96583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7db11f5c8abbcef1f6c847bd47dcae02a2d96583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34754bd0e27c6fdba617c1033144e88e887d815d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRQfOCRBK7hj4Ov3rIwAAdHIIAKeLRuaJAU7VacUlV85o0w6P\njaNjaCyWEhJWgAB5M4neeovUNkRilN18A1EDpOSO/ExXeSwQRcTGB/rOCv27Nf9w\nR6sCpnMWRbVqbswODr//axHm3mn+grzzi6mB73y38/SsZ85KQqIY0f2NVQRzq/iB\nWkQrZX93CU0VsSsxuWnPzPfw9biiXq8Klz4r0Nhdg4/kkwThZtLFddTRnjOIZATD\nV/rYQtNxpkDpdw99qU20AiFZlpk/G/vUyK1a6KXyA8hAUSVYd+vegW/Ka3PmZtOi\nGtT6Xsz8l9yv67n4JhDgKwZLu9RCOpsOjk+L8IMSHyiGukK9jNl4h/2QglaijpU=\n=MHQV\n-----END PGP SIGNATURE-----\n", "payload": "tree 7db11f5c8abbcef1f6c847bd47dcae02a2d96583\nparent 8a845eda7bfd24aa4d85f1656bd053db05446a3e\nparent 66e5ced894e430117d4d040e13721313237936ab\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598359502 +0000\ncommitter GitHub <noreply@github.com> 1598359502 +0000\n\nMerge #5874\n\n5874: Remove AttrDef\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34754bd0e27c6fdba617c1033144e88e887d815d", "html_url": "https://github.com/rust-lang/rust/commit/34754bd0e27c6fdba617c1033144e88e887d815d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34754bd0e27c6fdba617c1033144e88e887d815d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a845eda7bfd24aa4d85f1656bd053db05446a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a845eda7bfd24aa4d85f1656bd053db05446a3e", "html_url": "https://github.com/rust-lang/rust/commit/8a845eda7bfd24aa4d85f1656bd053db05446a3e"}, {"sha": "66e5ced894e430117d4d040e13721313237936ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e5ced894e430117d4d040e13721313237936ab", "html_url": "https://github.com/rust-lang/rust/commit/66e5ced894e430117d4d040e13721313237936ab"}], "stats": {"total": 118, "additions": 52, "deletions": 66}, "files": [{"sha": "36027d183e155b2fdb680ebe4d367eb39dadb9d0", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 42, "deletions": 39, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/34754bd0e27c6fdba617c1033144e88e887d815d/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34754bd0e27c6fdba617c1033144e88e887d815d/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=34754bd0e27c6fdba617c1033144e88e887d815d", "patch": "@@ -4,60 +4,63 @@ use hir_def::{\n     db::DefDatabase,\n     docs::Documentation,\n     resolver::{HasResolver, Resolver},\n-    AdtId, FunctionId, GenericDefId, ModuleId, StaticId, TraitId, VariantId,\n+    AdtId, AttrDefId, FunctionId, GenericDefId, ModuleId, StaticId, TraitId, VariantId,\n };\n use hir_ty::db::HirDatabase;\n-use stdx::impl_from;\n \n use crate::{\n     doc_links::Resolvable, Adt, Const, Enum, EnumVariant, Field, Function, GenericDef, ImplDef,\n     Local, MacroDef, Module, ModuleDef, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n };\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum AttrDef {\n-    Module(Module),\n-    Field(Field),\n-    Adt(Adt),\n-    Function(Function),\n-    EnumVariant(EnumVariant),\n-    Static(Static),\n-    Const(Const),\n-    Trait(Trait),\n-    TypeAlias(TypeAlias),\n-    MacroDef(MacroDef),\n-}\n-\n-impl_from!(\n-    Module,\n-    Field,\n-    Adt(Struct, Enum, Union),\n-    EnumVariant,\n-    Static,\n-    Const,\n-    Function,\n-    Trait,\n-    TypeAlias,\n-    MacroDef\n-    for AttrDef\n-);\n-\n pub trait HasAttrs {\n     fn attrs(self, db: &dyn HirDatabase) -> Attrs;\n     fn docs(self, db: &dyn HirDatabase) -> Option<Documentation>;\n }\n \n-impl<T: Into<AttrDef>> HasAttrs for T {\n-    fn attrs(self, db: &dyn HirDatabase) -> Attrs {\n-        let def: AttrDef = self.into();\n-        db.attrs(def.into())\n-    }\n-    fn docs(self, db: &dyn HirDatabase) -> Option<Documentation> {\n-        let def: AttrDef = self.into();\n-        db.documentation(def.into())\n-    }\n+macro_rules! impl_has_attrs {\n+    ($(($def:ident, $def_id:ident),)*) => {$(\n+        impl HasAttrs for $def {\n+            fn attrs(self, db: &dyn HirDatabase) -> Attrs {\n+                let def = AttrDefId::$def_id(self.into());\n+                db.attrs(def)\n+            }\n+            fn docs(self, db: &dyn HirDatabase) -> Option<Documentation> {\n+                let def = AttrDefId::$def_id(self.into());\n+                db.documentation(def)\n+            }\n+        }\n+    )*};\n+}\n+\n+impl_has_attrs![\n+    (Field, FieldId),\n+    (EnumVariant, EnumVariantId),\n+    (Static, StaticId),\n+    (Const, ConstId),\n+    (Trait, TraitId),\n+    (TypeAlias, TypeAliasId),\n+    (MacroDef, MacroDefId),\n+    (Function, FunctionId),\n+    (Adt, AdtId),\n+    (Module, ModuleId),\n+];\n+\n+macro_rules! impl_has_attrs_adt {\n+    ($($adt:ident),*) => {$(\n+        impl HasAttrs for $adt {\n+            fn attrs(self, db: &dyn HirDatabase) -> Attrs {\n+                Adt::$adt(self).attrs(db)\n+            }\n+            fn docs(self, db: &dyn HirDatabase) -> Option<Documentation> {\n+                Adt::$adt(self).docs(db)\n+            }\n+        }\n+    )*};\n }\n \n+impl_has_attrs_adt![Struct, Union, Enum];\n+\n impl Resolvable for ModuleDef {\n     fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n         Some(match self {"}, {"sha": "c2ee20dbbe89a4b212ccbada99c71cddf14521d1", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34754bd0e27c6fdba617c1033144e88e887d815d/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34754bd0e27c6fdba617c1033144e88e887d815d/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=34754bd0e27c6fdba617c1033144e88e887d815d", "patch": "@@ -17,9 +17,9 @@ use hir_def::{\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AssocContainerId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule,\n-    ImplId, LocalEnumVariantId, LocalFieldId, LocalModuleId, Lookup, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeParamId, UnionId,\n+    AdtId, AssocContainerId, AttrDefId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId,\n+    HasModule, ImplId, LocalEnumVariantId, LocalFieldId, LocalModuleId, Lookup, ModuleId, StaticId,\n+    StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -43,7 +43,7 @@ use tt::{Ident, Leaf, Literal, TokenTree};\n use crate::{\n     db::{DefDatabase, HirDatabase},\n     has_source::HasSource,\n-    AttrDef, HirDisplay, InFile, Name,\n+    HirDisplay, InFile, Name,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -126,7 +126,7 @@ impl Crate {\n     /// Try to get the root URL of the documentation of a crate.\n     pub fn get_html_root_url(self: &Crate, db: &dyn HirDatabase) -> Option<String> {\n         // Look for #![doc(html_root_url = \"...\")]\n-        let attrs = db.attrs(AttrDef::from(self.root_module(db)).into());\n+        let attrs = db.attrs(AttrDefId::ModuleId(self.root_module(db).into()));\n         let doc_attr_q = attrs.by_key(\"doc\");\n \n         if !doc_attr_q.exists() {"}, {"sha": "033f53ac2a30b15f36f6f82bd793ca370319b74b", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/34754bd0e27c6fdba617c1033144e88e887d815d/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34754bd0e27c6fdba617c1033144e88e887d815d/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=34754bd0e27c6fdba617c1033144e88e887d815d", "patch": "@@ -4,13 +4,13 @@\n //! are splitting the hir.\n \n use hir_def::{\n-    expr::PatId, AdtId, AssocItemId, AttrDefId, DefWithBodyId, EnumVariantId, FieldId,\n-    GenericDefId, ModuleDefId, VariantId,\n+    expr::PatId, AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, GenericDefId,\n+    ModuleDefId, VariantId,\n };\n \n use crate::{\n-    code_model::ItemInNs, Adt, AssocItem, AttrDef, DefWithBody, EnumVariant, Field, GenericDef,\n-    Local, MacroDef, ModuleDef, VariantDef,\n+    code_model::ItemInNs, Adt, AssocItem, DefWithBody, EnumVariant, Field, GenericDef, Local,\n+    MacroDef, ModuleDef, VariantDef,\n };\n \n macro_rules! from_id {\n@@ -196,23 +196,6 @@ impl From<FieldId> for Field {\n     }\n }\n \n-impl From<AttrDef> for AttrDefId {\n-    fn from(def: AttrDef) -> Self {\n-        match def {\n-            AttrDef::Module(it) => AttrDefId::ModuleId(it.id),\n-            AttrDef::Field(it) => AttrDefId::FieldId(it.into()),\n-            AttrDef::Adt(it) => AttrDefId::AdtId(it.into()),\n-            AttrDef::Function(it) => AttrDefId::FunctionId(it.id),\n-            AttrDef::EnumVariant(it) => AttrDefId::EnumVariantId(it.into()),\n-            AttrDef::Static(it) => AttrDefId::StaticId(it.id),\n-            AttrDef::Const(it) => AttrDefId::ConstId(it.id),\n-            AttrDef::Trait(it) => AttrDefId::TraitId(it.id),\n-            AttrDef::TypeAlias(it) => AttrDefId::TypeAliasId(it.id),\n-            AttrDef::MacroDef(it) => AttrDefId::MacroDefId(it.id),\n-        }\n-    }\n-}\n-\n impl From<AssocItem> for GenericDefId {\n     fn from(item: AssocItem) -> Self {\n         match item {"}, {"sha": "03915ea1bc4f4e1e9459703b40b29ee56ffee1a9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34754bd0e27c6fdba617c1033144e88e887d815d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34754bd0e27c6fdba617c1033144e88e887d815d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=34754bd0e27c6fdba617c1033144e88e887d815d", "patch": "@@ -32,7 +32,7 @@ mod attrs;\n mod has_source;\n \n pub use crate::{\n-    attrs::{AttrDef, HasAttrs},\n+    attrs::HasAttrs,\n     code_model::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n         Crate, CrateDependency, DefWithBody, Enum, EnumVariant, Field, FieldSource, Function,"}]}