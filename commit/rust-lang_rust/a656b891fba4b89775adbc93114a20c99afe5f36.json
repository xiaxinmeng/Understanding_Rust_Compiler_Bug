{"sha": "a656b891fba4b89775adbc93114a20c99afe5f36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTZiODkxZmJhNGI4OTc3NWFkYmM5MzExNGEyMGM5OWFmZTVmMzY=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-23T15:55:47Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-23T16:00:49Z"}, "message": "Remove LocalEdit usage", "tree": {"sha": "eeded272590ef2410a7ff779a3438ea69be31d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeded272590ef2410a7ff779a3438ea69be31d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a656b891fba4b89775adbc93114a20c99afe5f36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a656b891fba4b89775adbc93114a20c99afe5f36", "html_url": "https://github.com/rust-lang/rust/commit/a656b891fba4b89775adbc93114a20c99afe5f36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a656b891fba4b89775adbc93114a20c99afe5f36/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c15deac760a654f03de3ae433e5260b5bdfb8c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c15deac760a654f03de3ae433e5260b5bdfb8c2", "html_url": "https://github.com/rust-lang/rust/commit/0c15deac760a654f03de3ae433e5260b5bdfb8c2"}], "stats": {"total": 125, "additions": 55, "deletions": 70}, "files": [{"sha": "0e7b47e3c42238e96e9b734db072d0408e1e98e7", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a656b891fba4b89775adbc93114a20c99afe5f36/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656b891fba4b89775adbc93114a20c99afe5f36/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=a656b891fba4b89775adbc93114a20c99afe5f36", "patch": "@@ -72,7 +72,7 @@ pub use crate::{\n     folding_ranges::{Fold, FoldKind},\n };\n pub use ra_ide_api_light::{\n-    HighlightedRange, Severity, StructureNode, LocalEdit,\n+    HighlightedRange, Severity, StructureNode,\n };\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, SourceRootId,\n@@ -295,9 +295,7 @@ impl Analysis {\n     /// Returns an edit which should be applied when opening a new line, fixing\n     /// up minor stuff like continuing the comment.\n     pub fn on_enter(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.db.parse(position.file_id);\n-        let edit = typing::on_enter(&file, position.offset)?;\n-        Some(SourceChange::from_local_edit(position.file_id, edit))\n+        typing::on_enter(&self.db, position)\n     }\n \n     /// Returns an edit which should be applied after `=` was typed. Primarily,\n@@ -306,14 +304,17 @@ impl Analysis {\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n         let file = self.db.parse(position.file_id);\n         let edit = typing::on_eq_typed(&file, position.offset)?;\n-        Some(SourceChange::from_local_edit(position.file_id, edit))\n+        Some(SourceChange {\n+            label: \"add semicolon\".to_string(),\n+            source_file_edits: vec![SourceFileEdit { edit, file_id: position.file_id }],\n+            file_system_edits: vec![],\n+            cursor_position: None,\n+        })\n     }\n \n     /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n     pub fn on_dot_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.db.parse(position.file_id);\n-        let edit = typing::on_dot_typed(&file, position.offset)?;\n-        Some(SourceChange::from_local_edit(position.file_id, edit))\n+        typing::on_dot_typed(&self.db, position)\n     }\n \n     /// Returns a tree representation of symbols in the file. Useful to draw a\n@@ -435,18 +436,6 @@ impl Analysis {\n     }\n }\n \n-impl SourceChange {\n-    pub(crate) fn from_local_edit(file_id: FileId, edit: LocalEdit) -> SourceChange {\n-        let file_edit = SourceFileEdit { file_id, edit: edit.edit };\n-        SourceChange {\n-            label: edit.label,\n-            source_file_edits: vec![file_edit],\n-            file_system_edits: vec![],\n-            cursor_position: edit.cursor_position.map(|offset| FilePosition { offset, file_id }),\n-        }\n-    }\n-}\n-\n #[test]\n fn analysis_is_send() {\n     fn is_send<T: Send>() {}"}, {"sha": "94b228466c5992b70a93a0132fef43d765540f51", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 46, "deletions": 35, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a656b891fba4b89775adbc93114a20c99afe5f36/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656b891fba4b89775adbc93114a20c99afe5f36/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=a656b891fba4b89775adbc93114a20c99afe5f36", "patch": "@@ -5,31 +5,37 @@ use ra_syntax::{\n     ast::{self, AstToken},\n };\n use ra_fmt::leading_indent;\n-use crate::LocalEdit;\n-use ra_text_edit::TextEditBuilder;\n+use ra_text_edit::{TextEdit, TextEditBuilder};\n+use ra_db::{FilePosition, SourceDatabase};\n+use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n \n-pub fn on_enter(file: &SourceFile, offset: TextUnit) -> Option<LocalEdit> {\n-    let comment =\n-        find_leaf_at_offset(file.syntax(), offset).left_biased().and_then(ast::Comment::cast)?;\n+pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n+    let file = db.parse(position.file_id);\n+    let comment = find_leaf_at_offset(file.syntax(), position.offset)\n+        .left_biased()\n+        .and_then(ast::Comment::cast)?;\n \n     if let ast::CommentFlavor::Multiline = comment.flavor() {\n         return None;\n     }\n \n     let prefix = comment.prefix();\n-    if offset < comment.syntax().range().start() + TextUnit::of_str(prefix) + TextUnit::from(1) {\n+    if position.offset\n+        < comment.syntax().range().start() + TextUnit::of_str(prefix) + TextUnit::from(1)\n+    {\n         return None;\n     }\n \n-    let indent = node_indent(file, comment.syntax())?;\n+    let indent = node_indent(&file, comment.syntax())?;\n     let inserted = format!(\"\\n{}{} \", indent, prefix);\n-    let cursor_position = offset + TextUnit::of_str(&inserted);\n+    let cursor_position = position.offset + TextUnit::of_str(&inserted);\n     let mut edit = TextEditBuilder::default();\n-    edit.insert(offset, inserted);\n-    Some(LocalEdit {\n+    edit.insert(position.offset, inserted);\n+    Some(SourceChange {\n         label: \"on enter\".to_string(),\n-        edit: edit.finish(),\n-        cursor_position: Some(cursor_position),\n+        source_file_edits: vec![SourceFileEdit { edit: edit.finish(), file_id: position.file_id }],\n+        file_system_edits: vec![],\n+        cursor_position: Some(FilePosition { offset: cursor_position, file_id: position.file_id }),\n     })\n }\n \n@@ -53,7 +59,7 @@ fn node_indent<'a>(file: &'a SourceFile, node: &SyntaxNode) -> Option<&'a str> {\n     Some(&text[pos..])\n }\n \n-pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<LocalEdit> {\n+pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<TextEdit> {\n     assert_eq!(file.syntax().text().char_at(eq_offset), Some('='));\n     let let_stmt: &ast::LetStmt = find_node_at_offset(file.syntax(), eq_offset)?;\n     if let_stmt.has_semi() {\n@@ -73,17 +79,14 @@ pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<LocalEdit>\n     let offset = let_stmt.syntax().range().end();\n     let mut edit = TextEditBuilder::default();\n     edit.insert(offset, \";\".to_string());\n-    Some(LocalEdit {\n-        label: \"add semicolon\".to_string(),\n-        edit: edit.finish(),\n-        cursor_position: None,\n-    })\n+    Some(edit.finish())\n }\n \n-pub fn on_dot_typed(file: &SourceFile, dot_offset: TextUnit) -> Option<LocalEdit> {\n-    assert_eq!(file.syntax().text().char_at(dot_offset), Some('.'));\n+pub(crate) fn on_dot_typed(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n+    let file = db.parse(position.file_id);\n+    assert_eq!(file.syntax().text().char_at(position.offset), Some('.'));\n \n-    let whitespace = find_leaf_at_offset(file.syntax(), dot_offset)\n+    let whitespace = find_leaf_at_offset(file.syntax(), position.offset)\n         .left_biased()\n         .and_then(ast::Whitespace::cast)?;\n \n@@ -104,15 +107,18 @@ pub fn on_dot_typed(file: &SourceFile, dot_offset: TextUnit) -> Option<LocalEdit\n     }\n     let mut edit = TextEditBuilder::default();\n     edit.replace(\n-        TextRange::from_to(dot_offset - current_indent_len, dot_offset),\n+        TextRange::from_to(position.offset - current_indent_len, position.offset),\n         target_indent.into(),\n     );\n-    let res = LocalEdit {\n+    let res = SourceChange {\n         label: \"reindent dot\".to_string(),\n-        edit: edit.finish(),\n-        cursor_position: Some(\n-            dot_offset + target_indent_len - current_indent_len + TextUnit::of_char('.'),\n-        ),\n+        source_file_edits: vec![SourceFileEdit { edit: edit.finish(), file_id: position.file_id }],\n+        file_system_edits: vec![],\n+        cursor_position: Some(FilePosition {\n+            offset: position.offset + target_indent_len - current_indent_len\n+                + TextUnit::of_char('.'),\n+            file_id: position.file_id,\n+        }),\n     };\n     Some(res)\n }\n@@ -121,6 +127,8 @@ pub fn on_dot_typed(file: &SourceFile, dot_offset: TextUnit) -> Option<LocalEdit\n mod tests {\n     use test_utils::{add_cursor, assert_eq_text, extract_offset};\n \n+    use crate::mock_analysis::single_file;\n+\n     use super::*;\n \n     #[test]\n@@ -132,7 +140,7 @@ mod tests {\n             let before = edit.finish().apply(&before);\n             let file = SourceFile::parse(&before);\n             if let Some(result) = on_eq_typed(&file, offset) {\n-                let actual = result.edit.apply(&before);\n+                let actual = result.apply(&before);\n                 assert_eq_text!(after, &actual);\n             } else {\n                 assert_eq_text!(&before, after)\n@@ -178,9 +186,10 @@ fn foo() {\n         let mut edit = TextEditBuilder::default();\n         edit.insert(offset, \".\".to_string());\n         let before = edit.finish().apply(&before);\n-        let file = SourceFile::parse(&before);\n-        if let Some(result) = on_dot_typed(&file, offset) {\n-            let actual = result.edit.apply(&before);\n+        let (analysis, file_id) = single_file(&before);\n+        if let Some(result) = analysis.on_dot_typed(FilePosition { offset, file_id }) {\n+            assert_eq!(result.source_file_edits.len(), 1);\n+            let actual = result.source_file_edits[0].edit.apply(&before);\n             assert_eq_text!(after, &actual);\n         } else {\n             assert_eq_text!(&before, after)\n@@ -359,10 +368,12 @@ fn foo() {\n     fn test_on_enter() {\n         fn apply_on_enter(before: &str) -> Option<String> {\n             let (offset, before) = extract_offset(before);\n-            let file = SourceFile::parse(&before);\n-            let result = on_enter(&file, offset)?;\n-            let actual = result.edit.apply(&before);\n-            let actual = add_cursor(&actual, result.cursor_position.unwrap());\n+            let (analysis, file_id) = single_file(&before);\n+            let result = analysis.on_enter(FilePosition { offset, file_id })?;\n+\n+            assert_eq!(result.source_file_edits.len(), 1);\n+            let actual = result.source_file_edits[0].edit.apply(&before);\n+            let actual = add_cursor(&actual, result.cursor_position.unwrap().offset);\n             Some(actual)\n         }\n "}, {"sha": "1c5fa08377a7cbf60818004616720b900a3e70f2", "filename": "crates/ra_ide_api_light/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a656b891fba4b89775adbc93114a20c99afe5f36/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656b891fba4b89775adbc93114a20c99afe5f36/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs?ref=a656b891fba4b89775adbc93114a20c99afe5f36", "patch": "@@ -17,13 +17,6 @@ pub use crate::{\n     structure::{file_structure, StructureNode},\n };\n \n-#[derive(Debug)]\n-pub struct LocalEdit {\n-    pub label: String,\n-    pub edit: ra_text_edit::TextEdit,\n-    pub cursor_position: Option<TextUnit>,\n-}\n-\n #[derive(Debug)]\n pub struct HighlightedRange {\n     pub range: TextRange,\n@@ -36,14 +29,6 @@ pub enum Severity {\n     WeakWarning,\n }\n \n-#[derive(Debug)]\n-pub struct Diagnostic {\n-    pub range: TextRange,\n-    pub msg: String,\n-    pub severity: Severity,\n-    pub fix: Option<LocalEdit>,\n-}\n-\n pub fn matching_brace(file: &SourceFile, offset: TextUnit) -> Option<TextUnit> {\n     const BRACES: &[SyntaxKind] =\n         &[L_CURLY, R_CURLY, L_BRACK, R_BRACK, L_PAREN, R_PAREN, L_ANGLE, R_ANGLE];"}]}