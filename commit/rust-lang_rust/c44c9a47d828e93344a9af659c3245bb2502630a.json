{"sha": "c44c9a47d828e93344a9af659c3245bb2502630a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NGM5YTQ3ZDgyOGU5MzM0NGE5YWY2NTljMzI0NWJiMjUwMjYzMGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-14T22:51:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-14T22:51:16Z"}, "message": "Revert \"Convert libstd to use the Drop trait\"\n\nThis reverts commit 28c7a251514919a2d7bdf6c67b8edf5eed9043db.", "tree": {"sha": "b1be0dc47544f308e22b3378d523dd66b343e89c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1be0dc47544f308e22b3378d523dd66b343e89c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44c9a47d828e93344a9af659c3245bb2502630a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44c9a47d828e93344a9af659c3245bb2502630a", "html_url": "https://github.com/rust-lang/rust/commit/c44c9a47d828e93344a9af659c3245bb2502630a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44c9a47d828e93344a9af659c3245bb2502630a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11024eaebbd5d958df3944178e5746c0d9fda383", "url": "https://api.github.com/repos/rust-lang/rust/commits/11024eaebbd5d958df3944178e5746c0d9fda383", "html_url": "https://github.com/rust-lang/rust/commit/11024eaebbd5d958df3944178e5746c0d9fda383"}], "stats": {"total": 159, "additions": 52, "deletions": 107}, "files": [{"sha": "0033a4eaccd07acf59dfd78cb498d2e671f0d15b", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=c44c9a47d828e93344a9af659c3245bb2502630a", "patch": "@@ -217,10 +217,7 @@ fn check_poison(is_mutex: bool, failed: bool) {\n #[doc(hidden)]\n struct PoisonOnFail {\n     failed: &mut bool,\n-}\n-\n-impl PoisonOnFail : Drop {\n-    fn finalize() {\n+    drop {\n         /* assert !*self.failed; -- might be false in case of cond.wait() */\n         if task::failing() { *self.failed = true; }\n     }"}, {"sha": "9f40794b28a7915cfef45d2f4abfb9c2859a909f", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=c44c9a47d828e93344a9af659c3245bb2502630a", "patch": "@@ -55,10 +55,7 @@ pub struct Arena {\n     priv mut head: Chunk,\n     priv mut pod_head: Chunk,\n     priv mut chunks: @List<Chunk>,\n-}\n-\n-impl Arena : Drop {\n-    fn finalize() {\n+    drop {\n         unsafe {\n             destroy_chunk(&self.head);\n             for list::each(self.chunks) |chunk| {"}, {"sha": "06d56ed1ae529c5d2322c5d23971ba5506b49b63", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=c44c9a47d828e93344a9af659c3245bb2502630a", "patch": "@@ -39,15 +39,12 @@ pub enum CVec<T> {\n \n struct DtorRes {\n   dtor: Option<fn@()>,\n-}\n-\n-impl DtorRes : Drop {\n-    fn finalize() {\n+  drop {\n     match self.dtor {\n       option::None => (),\n       option::Some(f) => f()\n     }\n-    }\n+  }\n }\n \n fn DtorRes(dtor: Option<fn@()>) -> DtorRes {"}, {"sha": "503e915cf8783f78b191864bf2ce047005c648bb", "filename": "src/libstd/future.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=c44c9a47d828e93344a9af659c3245bb2502630a", "patch": "@@ -23,12 +23,10 @@ use cast::copy_lifetime;\n #[doc = \"The future type\"]\n pub struct Future<A> {\n     /*priv*/ mut state: FutureState<A>,\n-}\n \n-// FIXME(#2829) -- futures should not be copyable, because they close\n-// over fn~'s that have pipes and so forth within!\n-impl<A> Future<A> : Drop {\n-    fn finalize() {}\n+    // FIXME(#2829) -- futures should not be copyable, because they close\n+    // over fn~'s that have pipes and so forth within!\n+    drop {}\n }\n \n priv enum FutureState<A> {"}, {"sha": "d58ab844f117a5cdabd86cedef0f6fbcbd577da2", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=c44c9a47d828e93344a9af659c3245bb2502630a", "patch": "@@ -27,14 +27,11 @@ extern mod rustrt {\n  */\n struct TcpSocket {\n   socket_data: @TcpSocketData,\n-}\n-\n-impl TcpSocket : Drop {\n-    fn finalize() {\n+  drop {\n     unsafe {\n         tear_down_socket_data(self.socket_data)\n     }\n-    }\n+  }\n }\n \n pub fn TcpSocket(socket_data: @TcpSocketData) -> TcpSocket {"}, {"sha": "40c81951b5e9c4e4801c69678bc9f21ad9c31c4c", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=c44c9a47d828e93344a9af659c3245bb2502630a", "patch": "@@ -1133,10 +1133,7 @@ mod big_tests {\n         val: uint,\n         key: fn(@uint),\n \n-    }\n-\n-    impl LVal : Drop {\n-        fn finalize() {\n+        drop {\n             let x = unsafe { task::local_data::local_data_get(self.key) };\n             match x {\n                 Some(@y) => {"}, {"sha": "43d1c9664a51f652c36b40db5a3ad9b697f4e064", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 41, "deletions": 76, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=c44c9a47d828e93344a9af659c3245bb2502630a", "patch": "@@ -150,12 +150,7 @@ impl &Sem<~[mut Waitqueue]> {\n #[doc(hidden)]\n struct SemRelease {\n     sem: &Sem<()>,\n-}\n-\n-impl SemRelease : Drop {\n-    fn finalize() {\n-        self.sem.release();\n-    }\n+    drop { self.sem.release(); }\n }\n \n fn SemRelease(sem: &r/Sem<()>) -> SemRelease/&r {\n@@ -167,12 +162,7 @@ fn SemRelease(sem: &r/Sem<()>) -> SemRelease/&r {\n #[doc(hidden)]\n struct SemAndSignalRelease {\n     sem: &Sem<~[mut Waitqueue]>,\n-}\n-\n-impl SemAndSignalRelease : Drop {\n-    fn finalize() {\n-        self.sem.release();\n-    }\n+    drop { self.sem.release(); }\n }\n \n fn SemAndSignalRelease(sem: &r/Sem<~[mut Waitqueue]>)\n@@ -183,9 +173,7 @@ fn SemAndSignalRelease(sem: &r/Sem<~[mut Waitqueue]>)\n }\n \n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n-pub struct Condvar { priv sem: &Sem<~[mut Waitqueue]> }\n-\n-impl Condvar : Drop { fn finalize() {} }\n+pub struct Condvar { priv sem: &Sem<~[mut Waitqueue]>, drop { } }\n \n impl &Condvar {\n     /**\n@@ -254,15 +242,10 @@ impl &Condvar {\n         // bounded in when it gets released, this shouldn't hang forever.\n         struct SemAndSignalReacquire {\n             sem: &Sem<~[mut Waitqueue]>,\n-        }\n-\n-        impl SemAndSignalReacquire : Drop {\n-            fn finalize() {\n-                unsafe {\n-                    // Needs to succeed, instead of itself dying.\n-                    do task::unkillable {\n-                        self.sem.acquire();\n-                    }\n+            drop unsafe {\n+                // Needs to succeed, instead of itself dying.\n+                do task::unkillable {\n+                    self.sem.acquire();\n                 }\n             }\n         }\n@@ -598,26 +581,21 @@ impl &RWlock {\n #[doc(hidden)]\n struct RWlockReleaseRead {\n     lock: &RWlock,\n-}\n-\n-impl RWlockReleaseRead : Drop {\n-    fn finalize() {\n-        unsafe {\n-            do task::unkillable {\n-                let mut last_reader = false;\n-                do self.lock.state.with |state| {\n-                    assert state.read_mode;\n-                    assert state.read_count > 0;\n-                    state.read_count -= 1;\n-                    if state.read_count == 0 {\n-                        last_reader = true;\n-                        state.read_mode = false;\n-                    }\n-                }\n-                if last_reader {\n-                    (&self.lock.access_lock).release();\n+    drop unsafe {\n+        do task::unkillable {\n+            let mut last_reader = false;\n+            do self.lock.state.with |state| {\n+                assert state.read_mode;\n+                assert state.read_count > 0;\n+                state.read_count -= 1;\n+                if state.read_count == 0 {\n+                    last_reader = true;\n+                    state.read_mode = false;\n                 }\n             }\n+            if last_reader {\n+                (&self.lock.access_lock).release();\n+            }\n         }\n     }\n }\n@@ -632,34 +610,28 @@ fn RWlockReleaseRead(lock: &r/RWlock) -> RWlockReleaseRead/&r {\n #[doc(hidden)]\n struct RWlockReleaseDowngrade {\n     lock: &RWlock,\n-}\n-\n-impl RWlockReleaseDowngrade : Drop {\n-    fn finalize() {\n-        unsafe {\n-            do task::unkillable {\n-                let mut writer_or_last_reader = false;\n-                do self.lock.state.with |state| {\n-                    if state.read_mode {\n-                        assert state.read_count > 0;\n-                        state.read_count -= 1;\n-                        if state.read_count == 0 {\n-                            // Case 1: Writer downgraded & was the last reader\n-                            writer_or_last_reader = true;\n-                            state.read_mode = false;\n-                        } else {\n-                            // Case 2: Writer downgraded & was not the last\n-                            // reader\n-                        }\n-                    } else {\n-                        // Case 3: Writer did not downgrade\n+    drop unsafe {\n+        do task::unkillable {\n+            let mut writer_or_last_reader = false;\n+            do self.lock.state.with |state| {\n+                if state.read_mode {\n+                    assert state.read_count > 0;\n+                    state.read_count -= 1;\n+                    if state.read_count == 0 {\n+                        // Case 1: Writer downgraded & was the last reader\n                         writer_or_last_reader = true;\n+                        state.read_mode = false;\n+                    } else {\n+                        // Case 2: Writer downgraded & was not the last reader\n                     }\n-                }\n-                if writer_or_last_reader {\n-                    (&self.lock.access_lock).release();\n+                } else {\n+                    // Case 3: Writer did not downgrade\n+                    writer_or_last_reader = true;\n                 }\n             }\n+            if writer_or_last_reader {\n+                (&self.lock.access_lock).release();\n+            }\n         }\n     }\n }\n@@ -671,11 +643,9 @@ fn RWlockReleaseDowngrade(lock: &r/RWlock) -> RWlockReleaseDowngrade/&r {\n }\n \n /// The \"write permission\" token used for rwlock.write_downgrade().\n-pub struct RWlockWriteMode { /* priv */ lock: &RWlock }\n-impl RWlockWriteMode : Drop { fn finalize() {} }\n+pub struct RWlockWriteMode { /* priv */ lock: &RWlock, drop { } }\n /// The \"read permission\" token used for rwlock.write_downgrade().\n-pub struct RWlockReadMode  { priv lock: &RWlock }\n-impl RWlockReadMode : Drop { fn finalize() {} }\n+pub struct RWlockReadMode  { priv lock: &RWlock, drop { } }\n \n impl &RWlockWriteMode {\n     /// Access the pre-downgrade rwlock in write mode.\n@@ -984,12 +954,7 @@ mod tests {\n         }\n         struct SendOnFailure {\n             c: pipes::Chan<()>,\n-        }\n-\n-        impl SendOnFailure : Drop {\n-            fn finalize() {\n-                self.c.send(());\n-            }\n+            drop { self.c.send(()); }\n         }\n \n         fn SendOnFailure(c: pipes::Chan<()>) -> SendOnFailure {"}, {"sha": "4bded2093d0fccb520f875706f2c60ca6c0c6ff6", "filename": "src/libstd/thread_pool.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fthread_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c9a47d828e93344a9af659c3245bb2502630a/src%2Flibstd%2Fthread_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_pool.rs?ref=c44c9a47d828e93344a9af659c3245bb2502630a", "patch": "@@ -13,10 +13,7 @@ pub struct ThreadPool<T> {\n     channels: ~[Chan<Msg<T>>],\n     mut next_index: uint,\n \n-}\n-\n-impl<T> ThreadPool<T> {\n-    fn finalize() {\n+    drop {\n         for self.channels.each |channel| {\n             channel.send(Quit);\n         }"}]}