{"sha": "b4ac26289f17a5779d4318fb63436d94aebbf5ea", "node_id": "C_kwDOAAsO6NoAKGI0YWMyNjI4OWYxN2E1Nzc5ZDQzMThmYjYzNDM2ZDk0YWViYmY1ZWE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-03T13:09:05Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-10T13:20:16Z"}, "message": "errors: `AddToDiagnostic::add_to_diagnostic_with`\n\n`AddToDiagnostic::add_to_diagnostic_with` is similar to the previous\n`AddToDiagnostic::add_to_diagnostic` but takes a function that can be\nused by the caller to modify diagnostic messages originating from the\nsubdiagnostic (such as performing translation eagerly).\n\n`add_to_diagnostic` now just calls `add_to_diagnostic_with` with an\nempty closure.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "fce3d4cf2f0940a396eb8aed0626dfe2a22bbe9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce3d4cf2f0940a396eb8aed0626dfe2a22bbe9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4ac26289f17a5779d4318fb63436d94aebbf5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ac26289f17a5779d4318fb63436d94aebbf5ea", "html_url": "https://github.com/rust-lang/rust/commit/b4ac26289f17a5779d4318fb63436d94aebbf5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4ac26289f17a5779d4318fb63436d94aebbf5ea/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508d7e6d26bd636081c96ee6ed61f833917343ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/508d7e6d26bd636081c96ee6ed61f833917343ea", "html_url": "https://github.com/rust-lang/rust/commit/508d7e6d26bd636081c96ee6ed61f833917343ea"}], "stats": {"total": 179, "additions": 129, "deletions": 50}, "files": [{"sha": "c6c85ffa84dd720a55a51305e9cb4f2e227e3ea0", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -1,4 +1,7 @@\n-use rustc_errors::{fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay};\n+use rustc_errors::{\n+    fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay,\n+    SubdiagnosticMessage,\n+};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -19,7 +22,10 @@ pub struct UseAngleBrackets {\n }\n \n impl AddToDiagnostic for UseAngleBrackets {\n-    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         diag.multipart_suggestion(\n             fluent::ast_lowering::use_angle_brackets,\n             vec![(self.open_param, String::from(\"<\")), (self.close_param, String::from(\">\"))],\n@@ -69,7 +75,10 @@ pub enum AssocTyParenthesesSub {\n }\n \n impl AddToDiagnostic for AssocTyParenthesesSub {\n-    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         match self {\n             Self::Empty { parentheses_span } => diag.multipart_suggestion(\n                 fluent::ast_lowering::remove_parentheses,"}, {"sha": "ba2ed24fc08fc08095d240d45d6c90f334c6371c", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -1,6 +1,6 @@\n //! Errors emitted by ast_passes.\n \n-use rustc_errors::{fluent, AddToDiagnostic, Applicability, Diagnostic};\n+use rustc_errors::{fluent, AddToDiagnostic, Applicability, Diagnostic, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n@@ -17,7 +17,10 @@ pub struct ForbiddenLet {\n }\n \n impl AddToDiagnostic for ForbiddenLetReason {\n-    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         match self {\n             Self::GenericForbidden => {}\n             Self::NotSupportedOr(span) => {\n@@ -228,7 +231,10 @@ pub struct ExternBlockSuggestion {\n }\n \n impl AddToDiagnostic for ExternBlockSuggestion {\n-    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         let start_suggestion = if let Some(abi) = self.abi {\n             format!(\"extern \\\"{}\\\" {{\", abi)\n         } else {"}, {"sha": "2a6dd6da415cfb0c592aa1822099dcee26506d94", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -203,9 +203,20 @@ impl IntoDiagnosticArg for ast::token::TokenKind {\n /// `#[derive(Subdiagnostic)]` -- see [rustc_macros::Subdiagnostic].\n #[cfg_attr(bootstrap, rustc_diagnostic_item = \"AddSubdiagnostic\")]\n #[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"AddToDiagnostic\")]\n-pub trait AddToDiagnostic {\n+pub trait AddToDiagnostic\n+where\n+    Self: Sized,\n+{\n     /// Add a subdiagnostic to an existing diagnostic.\n-    fn add_to_diagnostic(self, diag: &mut Diagnostic);\n+    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+        self.add_to_diagnostic_with(diag, |_, m| m);\n+    }\n+\n+    /// Add a subdiagnostic to an existing diagnostic where `f` is invoked on every message used\n+    /// (to optionally perform eager translation).\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, f: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage;\n }\n \n /// Trait implemented by lint types. This should not be implemented manually. Instead, use\n@@ -921,8 +932,8 @@ impl Diagnostic {\n         self\n     }\n \n-    /// Add a subdiagnostic from a type that implements `Subdiagnostic` - see\n-    /// [rustc_macros::Subdiagnostic].\n+    /// Add a subdiagnostic from a type that implements `Subdiagnostic` (see\n+    /// [rustc_macros::Subdiagnostic]).\n     pub fn subdiagnostic(&mut self, subdiagnostic: impl AddToDiagnostic) -> &mut Self {\n         subdiagnostic.add_to_diagnostic(self);\n         self"}, {"sha": "500900d3d4a74b7310be4483c3a7a87e01ffff45", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -1,6 +1,7 @@\n use hir::GenericParamKind;\n use rustc_errors::{\n-    fluent, AddToDiagnostic, Applicability, DiagnosticMessage, DiagnosticStyledString, MultiSpan,\n+    fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticMessage, DiagnosticStyledString,\n+    MultiSpan, SubdiagnosticMessage,\n };\n use rustc_hir as hir;\n use rustc_hir::{FnRetTy, Ty};\n@@ -229,7 +230,10 @@ pub enum RegionOriginNote<'a> {\n }\n \n impl AddToDiagnostic for RegionOriginNote<'_> {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         let mut label_or_note = |span, msg: DiagnosticMessage| {\n             let sub_count = diag.children.iter().filter(|d| d.span.is_dummy()).count();\n             let expanded_sub_count = diag.children.iter().filter(|d| !d.span.is_dummy()).count();\n@@ -290,7 +294,10 @@ pub enum LifetimeMismatchLabels {\n }\n \n impl AddToDiagnostic for LifetimeMismatchLabels {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         match self {\n             LifetimeMismatchLabels::InRet { param_span, ret_span, span, label_var1 } => {\n                 diag.span_label(param_span, fluent::infer::declared_different);\n@@ -340,7 +347,10 @@ pub struct AddLifetimeParamsSuggestion<'a> {\n }\n \n impl AddToDiagnostic for AddLifetimeParamsSuggestion<'_> {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         let mut mk_suggestion = || {\n             let (\n                 hir::Ty { kind: hir::TyKind::Rptr(lifetime_sub, _), .. },\n@@ -439,7 +449,10 @@ pub struct IntroducesStaticBecauseUnmetLifetimeReq {\n }\n \n impl AddToDiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n-    fn add_to_diagnostic(mut self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(mut self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         self.unmet_requirements\n             .push_span_label(self.binding_span, fluent::infer::msl_introduces_static);\n         diag.span_note(self.unmet_requirements, fluent::infer::msl_unmet_req);\n@@ -451,7 +464,10 @@ pub struct ImplNote {\n }\n \n impl AddToDiagnostic for ImplNote {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         match self.impl_span {\n             Some(span) => diag.span_note(span, fluent::infer::msl_impl_note),\n             None => diag.note(fluent::infer::msl_impl_note),\n@@ -466,7 +482,10 @@ pub enum TraitSubdiag {\n \n // FIXME(#100717) used in `Vec<TraitSubdiag>` so requires eager translation/list support\n impl AddToDiagnostic for TraitSubdiag {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         match self {\n             TraitSubdiag::Note { span } => {\n                 diag.span_note(span, \"this has an implicit `'static` lifetime requirement\");"}, {"sha": "201a3c7100cc8da1c57654a2d0e208cece4f2dec", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -1,5 +1,7 @@\n use crate::infer::error_reporting::nice_region_error::find_anon_type;\n-use rustc_errors::{self, fluent, AddToDiagnostic, IntoDiagnosticArg};\n+use rustc_errors::{\n+    self, fluent, AddToDiagnostic, Diagnostic, IntoDiagnosticArg, SubdiagnosticMessage,\n+};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{symbol::kw, Span};\n \n@@ -159,7 +161,10 @@ impl RegionExplanation<'_> {\n }\n \n impl AddToDiagnostic for RegionExplanation<'_> {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         if let Some(span) = self.desc.span {\n             diag.span_note(span, fluent::infer::region_explanation);\n         } else {"}, {"sha": "97d012fb611d036e6eb81b61e728636df73241f3", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -1,4 +1,7 @@\n-use rustc_errors::{fluent, AddToDiagnostic, ErrorGuaranteed, Handler, IntoDiagnostic};\n+use rustc_errors::{\n+    fluent, AddToDiagnostic, Diagnostic, ErrorGuaranteed, Handler, IntoDiagnostic,\n+    SubdiagnosticMessage,\n+};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::lint::Level;\n use rustc_span::{Span, Symbol};\n@@ -23,7 +26,10 @@ pub enum OverruledAttributeSub {\n }\n \n impl AddToDiagnostic for OverruledAttributeSub {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         match self {\n             OverruledAttributeSub::DefaultSource { id } => {\n                 diag.note(fluent::lint::default_source);\n@@ -88,7 +94,10 @@ pub struct RequestedLevel {\n }\n \n impl AddToDiagnostic for RequestedLevel {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         diag.note(fluent::lint::requested_level);\n         diag.set_arg(\n             \"level\","}, {"sha": "f98cc66e9e93e706e68c39263a473b54ace24b70", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -9,7 +9,7 @@ use diagnostic::{DiagnosticDerive, LintDiagnosticDerive};\n pub(crate) use fluent::fluent_messages;\n use proc_macro2::TokenStream;\n use quote::format_ident;\n-use subdiagnostic::SubdiagnosticDerive;\n+use subdiagnostic::SubdiagnosticDeriveBuilder;\n use synstructure::Structure;\n \n /// Implements `#[derive(Diagnostic)]`, which allows for errors to be specified as a struct,\n@@ -155,5 +155,5 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// diag.subdiagnostic(RawIdentifierSuggestion { span, applicability, ident });\n /// ```\n pub fn session_subdiagnostic_derive(s: Structure<'_>) -> TokenStream {\n-    SubdiagnosticDerive::new(s).into_tokens()\n+    SubdiagnosticDeriveBuilder::new().into_tokens(s)\n }"}, {"sha": "ef17dbd0426feeeb3d9f9c40d00e430de2097dbf", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -15,19 +15,19 @@ use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, NestedMeta\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n /// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n-pub(crate) struct SubdiagnosticDerive<'a> {\n-    structure: Structure<'a>,\n+pub(crate) struct SubdiagnosticDeriveBuilder {\n     diag: syn::Ident,\n+    f: syn::Ident,\n }\n \n-impl<'a> SubdiagnosticDerive<'a> {\n-    pub(crate) fn new(structure: Structure<'a>) -> Self {\n+impl SubdiagnosticDeriveBuilder {\n+    pub(crate) fn new() -> Self {\n         let diag = format_ident!(\"diag\");\n-        Self { structure, diag }\n+        let f = format_ident!(\"f\");\n+        Self { diag, f }\n     }\n \n-    pub(crate) fn into_tokens(self) -> TokenStream {\n-        let SubdiagnosticDerive { mut structure, diag } = self;\n+    pub(crate) fn into_tokens<'a>(self, mut structure: Structure<'a>) -> TokenStream {\n         let implementation = {\n             let ast = structure.ast();\n             let span = ast.span().unwrap();\n@@ -53,8 +53,8 @@ impl<'a> SubdiagnosticDerive<'a> {\n \n             structure.bind_with(|_| synstructure::BindStyle::Move);\n             let variants_ = structure.each_variant(|variant| {\n-                let mut builder = SubdiagnosticDeriveBuilder {\n-                    diag: &diag,\n+                let mut builder = SubdiagnosticDeriveVariantBuilder {\n+                    parent: &self,\n                     variant,\n                     span,\n                     fields: build_field_mapping(variant),\n@@ -72,9 +72,17 @@ impl<'a> SubdiagnosticDerive<'a> {\n             }\n         };\n \n+        let diag = &self.diag;\n+        let f = &self.f;\n         let ret = structure.gen_impl(quote! {\n             gen impl rustc_errors::AddToDiagnostic for @Self {\n-                fn add_to_diagnostic(self, #diag: &mut rustc_errors::Diagnostic) {\n+                fn add_to_diagnostic_with<__F>(self, #diag: &mut rustc_errors::Diagnostic, #f: __F)\n+                where\n+                    __F: Fn(\n+                        &mut rustc_errors::Diagnostic,\n+                        rustc_errors::SubdiagnosticMessage\n+                    ) -> rustc_errors::SubdiagnosticMessage,\n+                {\n                     use rustc_errors::{Applicability, IntoDiagnosticArg};\n                     #implementation\n                 }\n@@ -88,9 +96,9 @@ impl<'a> SubdiagnosticDerive<'a> {\n /// for the final generated method. This is a separate struct to `SubdiagnosticDerive`\n /// only to be able to destructure and split `self.builder` and the `self.structure` up to avoid a\n /// double mut borrow later on.\n-struct SubdiagnosticDeriveBuilder<'a> {\n+struct SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     /// The identifier to use for the generated `DiagnosticBuilder` instance.\n-    diag: &'a syn::Ident,\n+    parent: &'parent SubdiagnosticDeriveBuilder,\n \n     /// Info for the current variant (or the type if not an enum).\n     variant: &'a VariantInfo<'a>,\n@@ -112,7 +120,7 @@ struct SubdiagnosticDeriveBuilder<'a> {\n     has_suggestion_parts: bool,\n }\n \n-impl<'a> HasFieldMap for SubdiagnosticDeriveBuilder<'a> {\n+impl<'parent, 'a> HasFieldMap for SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     fn get_field_binding(&self, field: &String) -> Option<&TokenStream> {\n         self.fields.get(field)\n     }\n@@ -156,7 +164,7 @@ impl<'a> FromIterator<&'a SubdiagnosticKind> for KindsStatistics {\n     }\n }\n \n-impl<'a> SubdiagnosticDeriveBuilder<'a> {\n+impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     fn identify_kind(&mut self) -> Result<Vec<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n         let mut kind_slugs = vec![];\n \n@@ -187,7 +195,7 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n         let ast = binding.ast();\n         assert_eq!(ast.attrs.len(), 0, \"field with attribute used as diagnostic arg\");\n \n-        let diag = &self.diag;\n+        let diag = &self.parent.diag;\n         let ident = ast.ident.as_ref().unwrap();\n         // strip `r#` prefix, if present\n         let ident = format_ident!(\"{}\", ident);\n@@ -442,11 +450,14 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n \n         let span_field = self.span_field.value_ref();\n \n-        let diag = &self.diag;\n+        let diag = &self.parent.diag;\n+        let f = &self.parent.f;\n         let mut calls = TokenStream::new();\n         for (kind, slug) in kind_slugs {\n+            let message = format_ident!(\"__message\");\n+            calls.extend(quote! { let #message = #f(#diag, rustc_errors::fluent::#slug.into()); });\n+\n             let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n-            let message = quote! { rustc_errors::fluent::#slug };\n             let call = match kind {\n                 SubdiagnosticKind::Suggestion { suggestion_kind, applicability, code } => {\n                     let applicability = applicability"}, {"sha": "debdf9dbf4403598fb6d433a723ce98f17a84b98", "filename": "compiler/rustc_query_system/src/error.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::AddToDiagnostic;\n+use rustc_errors::{AddToDiagnostic, Diagnostic, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n@@ -9,7 +9,10 @@ pub struct CycleStack {\n }\n \n impl AddToDiagnostic for CycleStack {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         diag.span_note(self.span, &format!(\"...which requires {}...\", self.desc));\n     }\n }"}, {"sha": "462f5e78498495503b9ca17e6e4ff3bd773e15ed", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -13,7 +13,7 @@ extern crate rustc_span;\n \n use rustc_errors::{\n     AddToDiagnostic, IntoDiagnostic, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed, Handler, fluent\n+    ErrorGuaranteed, Handler, fluent, SubdiagnosticMessage,\n };\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n@@ -52,7 +52,10 @@ impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for TranslatableInIntoDiagnostic {\n pub struct UntranslatableInAddToDiagnostic;\n \n impl AddToDiagnostic for UntranslatableInAddToDiagnostic {\n-    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         diag.note(\"untranslatable diagnostic\");\n         //~^ ERROR diagnostics should be created using translatable messages\n     }\n@@ -61,7 +64,10 @@ impl AddToDiagnostic for UntranslatableInAddToDiagnostic {\n pub struct TranslatableInAddToDiagnostic;\n \n impl AddToDiagnostic for TranslatableInAddToDiagnostic {\n-    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n         diag.note(fluent::compiletest::note);\n     }\n }"}, {"sha": "ac820a79db274b8888880b5ddad43cdd79ba8090", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4ac26289f17a5779d4318fb63436d94aebbf5ea/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4ac26289f17a5779d4318fb63436d94aebbf5ea/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr?ref=b4ac26289f17a5779d4318fb63436d94aebbf5ea", "patch": "@@ -11,13 +11,13 @@ LL | #![deny(rustc::untranslatable_diagnostic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostics should be created using translatable messages\n-  --> $DIR/diagnostics.rs:56:14\n+  --> $DIR/diagnostics.rs:59:14\n    |\n LL |         diag.note(\"untranslatable diagnostic\");\n    |              ^^^^\n \n error: diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n-  --> $DIR/diagnostics.rs:70:25\n+  --> $DIR/diagnostics.rs:76:25\n    |\n LL |     let _diag = handler.struct_err(fluent::compiletest::example);\n    |                         ^^^^^^^^^^\n@@ -29,13 +29,13 @@ LL | #![deny(rustc::diagnostic_outside_of_impl)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n-  --> $DIR/diagnostics.rs:73:25\n+  --> $DIR/diagnostics.rs:79:25\n    |\n LL |     let _diag = handler.struct_err(\"untranslatable diagnostic\");\n    |                         ^^^^^^^^^^\n \n error: diagnostics should be created using translatable messages\n-  --> $DIR/diagnostics.rs:73:25\n+  --> $DIR/diagnostics.rs:79:25\n    |\n LL |     let _diag = handler.struct_err(\"untranslatable diagnostic\");\n    |                         ^^^^^^^^^^"}]}