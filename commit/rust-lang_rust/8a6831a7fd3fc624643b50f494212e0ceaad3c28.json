{"sha": "8a6831a7fd3fc624643b50f494212e0ceaad3c28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNjgzMWE3ZmQzZmM2MjQ2NDNiNTBmNDk0MjEyZTBjZWFhZDNjMjg=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-30T02:27:58Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-30T02:27:58Z"}, "message": "Say \"doesn't\" instead of \"wouldn't\" in convert message", "tree": {"sha": "23f127a82824ff1a13057234665bfa4bd83aa299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23f127a82824ff1a13057234665bfa4bd83aa299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a6831a7fd3fc624643b50f494212e0ceaad3c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6831a7fd3fc624643b50f494212e0ceaad3c28", "html_url": "https://github.com/rust-lang/rust/commit/8a6831a7fd3fc624643b50f494212e0ceaad3c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a6831a7fd3fc624643b50f494212e0ceaad3c28/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "094f14c554c3a1f103a5d6778d4b4e131c297f11", "url": "https://api.github.com/repos/rust-lang/rust/commits/094f14c554c3a1f103a5d6778d4b4e131c297f11", "html_url": "https://github.com/rust-lang/rust/commit/094f14c554c3a1f103a5d6778d4b4e131c297f11"}], "stats": {"total": 352, "additions": 176, "deletions": 176}, "files": [{"sha": "7c1d4fc41294fd9c4c13f408394142332e7bd68d", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -827,7 +827,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let suggestion = format!(\"{}::from({})\", checked_ty, lhs_src);\n                     (lhs_expr.span, msg, suggestion)\n                 } else {\n-                    let msg = format!(\"{} and panic if the converted value wouldn't fit\", msg);\n+                    let msg = format!(\"{} and panic if the converted value doesn't fit\", msg);\n                     let suggestion =\n                         format!(\"{}{}.try_into().unwrap()\", prefix, with_opt_paren(&src));\n                     (expr.span, msg, suggestion)"}, {"sha": "0881258aca1ac47bbf123c687ba5957e791d683b", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -47,7 +47,7 @@ LL |     let _: i32 = f2(2i32);\n    |            |\n    |            expected due to this\n    |\n-help: you can convert a `u32` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3152dec30a0e6cf4b613b5387f394bd591ccc515", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n    |                  ^ expected `isize`, found `usize`\n    |\n-help: you can convert a `usize` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bfb47515823a3c4a9caf61d3ffce1efe66d21888", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     id_i8(a16);\n    |           ^^^ expected `i8`, found `i16`\n    |\n-help: you can convert an `i16` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     id_i8(a32);\n    |           ^^^ expected `i8`, found `i32`\n    |\n-help: you can convert an `i32` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n LL |     id_i8(a64);\n    |           ^^^ expected `i8`, found `i64`\n    |\n-help: you can convert an `i64` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n LL |     id_i8(asize);\n    |           ^^^^^ expected `i8`, found `isize`\n    |\n-help: you can convert an `isize` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(asize.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n LL |     id_i16(a32);\n    |            ^^^ expected `i16`, found `i32`\n    |\n-help: you can convert an `i32` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(a32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n LL |     id_i16(a64);\n    |            ^^^ expected `i16`, found `i64`\n    |\n-help: you can convert an `i64` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ error[E0308]: mismatched types\n LL |     id_i16(asize);\n    |            ^^^^^ expected `i16`, found `isize`\n    |\n-help: you can convert an `isize` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(asize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ error[E0308]: mismatched types\n LL |     id_i32(a64);\n    |            ^^^ expected `i32`, found `i64`\n    |\n-help: you can convert an `i64` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n LL |     id_i32(asize);\n    |            ^^^^^ expected `i32`, found `isize`\n    |\n-help: you can convert an `isize` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(asize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -157,7 +157,7 @@ error[E0308]: mismatched types\n LL |     id_i64(asize);\n    |            ^^^^^ expected `i64`, found `isize`\n    |\n-help: you can convert an `isize` to an `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     id_i64(asize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -186,7 +186,7 @@ error[E0308]: mismatched types\n LL |     id_isize(a32);\n    |              ^^^ expected `isize`, found `i32`\n    |\n-help: you can convert an `i32` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     id_isize(a32.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -197,7 +197,7 @@ error[E0308]: mismatched types\n LL |     id_isize(a64);\n    |              ^^^ expected `isize`, found `i64`\n    |\n-help: you can convert an `i64` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     id_isize(a64.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -208,7 +208,7 @@ error[E0308]: mismatched types\n LL |     id_i8(c16);\n    |           ^^^ expected `i8`, found `i16`\n    |\n-help: you can convert an `i16` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -219,7 +219,7 @@ error[E0308]: mismatched types\n LL |     id_i8(c32);\n    |           ^^^ expected `i8`, found `i32`\n    |\n-help: you can convert an `i32` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -230,7 +230,7 @@ error[E0308]: mismatched types\n LL |     id_i8(c64);\n    |           ^^^ expected `i8`, found `i64`\n    |\n-help: you can convert an `i64` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,7 +250,7 @@ error[E0308]: mismatched types\n LL |     id_i16(c32);\n    |            ^^^ expected `i16`, found `i32`\n    |\n-help: you can convert an `i32` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(c32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -261,7 +261,7 @@ error[E0308]: mismatched types\n LL |     id_i16(c64);\n    |            ^^^ expected `i16`, found `i64`\n    |\n-help: you can convert an `i64` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -290,7 +290,7 @@ error[E0308]: mismatched types\n LL |     id_i32(c64);\n    |            ^^^ expected `i32`, found `i64`\n    |\n-help: you can convert an `i64` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -328,7 +328,7 @@ error[E0308]: mismatched types\n LL |     id_u8(b16);\n    |           ^^^ expected `u8`, found `u16`\n    |\n-help: you can convert a `u16` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -339,7 +339,7 @@ error[E0308]: mismatched types\n LL |     id_u8(b32);\n    |           ^^^ expected `u8`, found `u32`\n    |\n-help: you can convert a `u32` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -350,7 +350,7 @@ error[E0308]: mismatched types\n LL |     id_u8(b64);\n    |           ^^^ expected `u8`, found `u64`\n    |\n-help: you can convert a `u64` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -361,7 +361,7 @@ error[E0308]: mismatched types\n LL |     id_u8(bsize);\n    |           ^^^^^ expected `u8`, found `usize`\n    |\n-help: you can convert a `usize` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(bsize.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -381,7 +381,7 @@ error[E0308]: mismatched types\n LL |     id_u16(b32);\n    |            ^^^ expected `u16`, found `u32`\n    |\n-help: you can convert a `u32` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -392,7 +392,7 @@ error[E0308]: mismatched types\n LL |     id_u16(b64);\n    |            ^^^ expected `u16`, found `u64`\n    |\n-help: you can convert a `u64` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -403,7 +403,7 @@ error[E0308]: mismatched types\n LL |     id_u16(bsize);\n    |            ^^^^^ expected `u16`, found `usize`\n    |\n-help: you can convert a `usize` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -432,7 +432,7 @@ error[E0308]: mismatched types\n LL |     id_u32(b64);\n    |            ^^^ expected `u32`, found `u64`\n    |\n-help: you can convert a `u64` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -443,7 +443,7 @@ error[E0308]: mismatched types\n LL |     id_u32(bsize);\n    |            ^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert a `usize` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     id_u32(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -481,7 +481,7 @@ error[E0308]: mismatched types\n LL |     id_u64(bsize);\n    |            ^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert a `usize` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     id_u64(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -510,7 +510,7 @@ error[E0308]: mismatched types\n LL |     id_usize(b32);\n    |              ^^^ expected `usize`, found `u32`\n    |\n-help: you can convert a `u32` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     id_usize(b32.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -521,7 +521,7 @@ error[E0308]: mismatched types\n LL |     id_usize(b64);\n    |              ^^^ expected `usize`, found `u64`\n    |\n-help: you can convert a `u64` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     id_usize(b64.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "115b471e96b465fd6681dfbdd4f6b7a0b414b75b", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(1*(1 as isize));\n    |         ^^^^^^^^^^^^^^ expected `i16`, found `isize`\n    |\n-help: you can convert an `isize` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo((1*(1 as isize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     bar(1*(1 as usize));\n    |         ^^^^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert a `usize` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     bar((1*(1 as usize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "82660a7c416930dba56bd3b3c767adafb96200ed", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -14,7 +14,7 @@ LL |     let y: usize = x.foo();\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `isize` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     let y: usize = x.foo().try_into().unwrap();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e608cd99af238a21835ea8fa2c897bcb929bad80", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -8,7 +8,7 @@ LL |     write!(hello);\n    |     -------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: you can convert a `usize` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5a275d5d089b14ef2299f13de3649f0bd8fa0f8b", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -57,7 +57,7 @@ LL |     let d: i8 = c;\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `i32` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     let d: i8 = c.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "79b38b069863187fbb5c14f496d39ff621cb57a1", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     test(array.len());\n    |          ^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert a `usize` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     test(array.len().try_into().unwrap());\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "858990fe59bd50e4fff77632a3f177fc8dfbb7cb", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -6,7 +6,7 @@ LL |     let x: u16 = foo();\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `i32` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     let x: u16 = foo().try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "cb051aa1230212c26ebe7a162d432ea483eed076", "filename": "src/test/ui/numeric/numeric-cast-binop.stderr", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -152,7 +152,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_usize;\n    |                 ^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert a `usize` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -201,7 +201,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_usize;\n    |                 ^^^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert a `usize` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -248,7 +248,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_usize;\n    |                  ^^^^^^^ expected `u128`, found `usize`\n    |\n-help: you can convert a `usize` to a `u128` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_usize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -277,7 +277,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_u32;\n    |                   ^^^^^ expected `usize`, found `u32`\n    |\n-help: you can convert a `u32` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -288,7 +288,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_u64;\n    |                   ^^^^^ expected `usize`, found `u64`\n    |\n-help: you can convert a `u64` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -299,7 +299,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_u128;\n    |                   ^^^^^^ expected `usize`, found `u128`\n    |\n-help: you can convert a `u128` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -458,7 +458,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_isize;\n    |                 ^^^^^^^ expected `i32`, found `isize`\n    |\n-help: you can convert an `isize` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -507,7 +507,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_isize;\n    |                 ^^^^^^^ expected `i64`, found `isize`\n    |\n-help: you can convert an `isize` to an `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -554,7 +554,7 @@ error[E0308]: mismatched types\n LL |         x_i128 > x_isize;\n    |                  ^^^^^^^ expected `i128`, found `isize`\n    |\n-help: you can convert an `isize` to an `i128` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_isize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -583,7 +583,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_i32;\n    |                   ^^^^^ expected `isize`, found `i32`\n    |\n-help: you can convert an `i32` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -594,7 +594,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_i64;\n    |                   ^^^^^ expected `isize`, found `i64`\n    |\n-help: you can convert an `i64` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -605,7 +605,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_i128;\n    |                   ^^^^^^ expected `isize`, found `i128`\n    |\n-help: you can convert an `i128` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i128` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -616,7 +616,7 @@ error[E0308]: mismatched types\n LL |         x_u8 > x_i8;\n    |                ^^^^ expected `u8`, found `i8`\n    |\n-help: you can convert an `i8` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |         x_u8 > x_i8.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -682,7 +682,7 @@ error[E0308]: mismatched types\n LL |         x_u16 > x_i8;\n    |                 ^^^^ expected `u16`, found `i8`\n    |\n-help: you can convert an `i8` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_i8.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -693,7 +693,7 @@ error[E0308]: mismatched types\n LL |         x_u16 > x_i16;\n    |                 ^^^^^ expected `u16`, found `i16`\n    |\n-help: you can convert an `i16` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_i16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -737,7 +737,7 @@ error[E0308]: mismatched types\n LL |         x_u16 > x_isize;\n    |                 ^^^^^^^ expected `u16`, found `isize`\n    |\n-help: you can convert an `isize` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -748,7 +748,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_i8;\n    |                 ^^^^ expected `u32`, found `i8`\n    |\n-help: you can convert an `i8` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i8.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -759,7 +759,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_i16;\n    |                 ^^^^^ expected `u32`, found `i16`\n    |\n-help: you can convert an `i16` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -770,7 +770,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_i32;\n    |                 ^^^^^ expected `u32`, found `i32`\n    |\n-help: you can convert an `i32` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -803,7 +803,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_isize;\n    |                 ^^^^^^^ expected `u32`, found `isize`\n    |\n-help: you can convert an `isize` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -814,7 +814,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_i8;\n    |                 ^^^^ expected `u64`, found `i8`\n    |\n-help: you can convert an `i8` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i8.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -825,7 +825,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_i16;\n    |                 ^^^^^ expected `u64`, found `i16`\n    |\n-help: you can convert an `i16` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -836,7 +836,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_i32;\n    |                 ^^^^^ expected `u64`, found `i32`\n    |\n-help: you can convert an `i32` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -847,7 +847,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_i64;\n    |                 ^^^^^ expected `u64`, found `i64`\n    |\n-help: you can convert an `i64` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -869,7 +869,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_isize;\n    |                 ^^^^^^^ expected `u64`, found `isize`\n    |\n-help: you can convert an `isize` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -880,7 +880,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i8;\n    |                  ^^^^ expected `u128`, found `i8`\n    |\n-help: you can convert an `i8` to a `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i8.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -891,7 +891,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i16;\n    |                  ^^^^^ expected `u128`, found `i16`\n    |\n-help: you can convert an `i16` to a `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i16.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -902,7 +902,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i32;\n    |                  ^^^^^ expected `u128`, found `i32`\n    |\n-help: you can convert an `i32` to a `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i32.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -913,7 +913,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i64;\n    |                  ^^^^^ expected `u128`, found `i64`\n    |\n-help: you can convert an `i64` to a `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i64.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -924,7 +924,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i128;\n    |                  ^^^^^^ expected `u128`, found `i128`\n    |\n-help: you can convert an `i128` to a `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i128` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i128.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -935,7 +935,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_isize;\n    |                  ^^^^^^^ expected `u128`, found `isize`\n    |\n-help: you can convert an `isize` to a `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_isize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -946,7 +946,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i8;\n    |                   ^^^^ expected `usize`, found `i8`\n    |\n-help: you can convert an `i8` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i8.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -957,7 +957,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i16;\n    |                   ^^^^^ expected `usize`, found `i16`\n    |\n-help: you can convert an `i16` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i16.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -968,7 +968,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i32;\n    |                   ^^^^^ expected `usize`, found `i32`\n    |\n-help: you can convert an `i32` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -979,7 +979,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i64;\n    |                   ^^^^^ expected `usize`, found `i64`\n    |\n-help: you can convert an `i64` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -990,7 +990,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i128;\n    |                   ^^^^^^ expected `usize`, found `i128`\n    |\n-help: you can convert an `i128` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i128` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1001,7 +1001,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_isize;\n    |                   ^^^^^^^ expected `usize`, found `isize`\n    |\n-help: you can convert an `isize` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_isize.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1012,7 +1012,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u8;\n    |                ^^^^ expected `i8`, found `u8`\n    |\n-help: you can convert a `u8` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u8` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u8.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1023,7 +1023,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u16;\n    |                ^^^^^ expected `i8`, found `u16`\n    |\n-help: you can convert a `u16` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u16.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1034,7 +1034,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u32;\n    |                ^^^^^ expected `i8`, found `u32`\n    |\n-help: you can convert a `u32` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u32.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1045,7 +1045,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u64;\n    |                ^^^^^ expected `i8`, found `u64`\n    |\n-help: you can convert a `u64` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u64.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1056,7 +1056,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u128;\n    |                ^^^^^^ expected `i8`, found `u128`\n    |\n-help: you can convert a `u128` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u128.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1067,7 +1067,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_usize;\n    |                ^^^^^^^ expected `i8`, found `usize`\n    |\n-help: you can convert a `usize` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_usize.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1087,7 +1087,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u16;\n    |                 ^^^^^ expected `i16`, found `u16`\n    |\n-help: you can convert a `u16` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1098,7 +1098,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u32;\n    |                 ^^^^^ expected `i16`, found `u32`\n    |\n-help: you can convert a `u32` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1109,7 +1109,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u64;\n    |                 ^^^^^ expected `i16`, found `u64`\n    |\n-help: you can convert a `u64` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1120,7 +1120,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u128;\n    |                 ^^^^^^ expected `i16`, found `u128`\n    |\n-help: you can convert a `u128` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1131,7 +1131,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_usize;\n    |                 ^^^^^^^ expected `i16`, found `usize`\n    |\n-help: you can convert a `usize` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1160,7 +1160,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_u32;\n    |                 ^^^^^ expected `i32`, found `u32`\n    |\n-help: you can convert a `u32` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1171,7 +1171,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_u64;\n    |                 ^^^^^ expected `i32`, found `u64`\n    |\n-help: you can convert a `u64` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1182,7 +1182,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_u128;\n    |                 ^^^^^^ expected `i32`, found `u128`\n    |\n-help: you can convert a `u128` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1193,7 +1193,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_usize;\n    |                 ^^^^^^^ expected `i32`, found `usize`\n    |\n-help: you can convert a `usize` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1231,7 +1231,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_u64;\n    |                 ^^^^^ expected `i64`, found `u64`\n    |\n-help: you can convert a `u64` to an `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1242,7 +1242,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_u128;\n    |                 ^^^^^^ expected `i64`, found `u128`\n    |\n-help: you can convert a `u128` to an `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1253,7 +1253,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_usize;\n    |                 ^^^^^^^ expected `i64`, found `usize`\n    |\n-help: you can convert a `usize` to an `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1300,7 +1300,7 @@ error[E0308]: mismatched types\n LL |         x_i128 > x_u128;\n    |                  ^^^^^^ expected `i128`, found `u128`\n    |\n-help: you can convert a `u128` to an `i128` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_u128.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1311,7 +1311,7 @@ error[E0308]: mismatched types\n LL |         x_i128 > x_usize;\n    |                  ^^^^^^^ expected `i128`, found `usize`\n    |\n-help: you can convert a `usize` to an `i128` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_usize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1331,7 +1331,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u16;\n    |                   ^^^^^ expected `isize`, found `u16`\n    |\n-help: you can convert a `u16` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u16.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1342,7 +1342,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u32;\n    |                   ^^^^^ expected `isize`, found `u32`\n    |\n-help: you can convert a `u32` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1353,7 +1353,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u64;\n    |                   ^^^^^ expected `isize`, found `u64`\n    |\n-help: you can convert a `u64` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1364,7 +1364,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u128;\n    |                   ^^^^^^ expected `isize`, found `u128`\n    |\n-help: you can convert a `u128` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1375,7 +1375,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_usize;\n    |                   ^^^^^^^ expected `isize`, found `usize`\n    |\n-help: you can convert a `usize` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_usize.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ffd6368bac15faad009235f265822e2fe0b8faf0", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected `usize`, found `u64`\n    |\n-help: you can convert a `u64` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected `usize`, found `u32`\n    |\n-help: you can convert a `u32` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_isize);\n    |                  ^^^^^^^ expected `usize`, found `isize`\n    |\n-help: you can convert an `isize` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_isize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -55,7 +55,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_i64);\n    |                  ^^^^^ expected `usize`, found `i64`\n    |\n-help: you can convert an `i64` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_i32);\n    |                  ^^^^^ expected `usize`, found `i32`\n    |\n-help: you can convert an `i32` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_i16);\n    |                  ^^^^^ expected `usize`, found `i16`\n    |\n-help: you can convert an `i16` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -88,7 +88,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_i8);\n    |                  ^^^^ expected `usize`, found `i8`\n    |\n-help: you can convert an `i8` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected `isize`, found `usize`\n    |\n-help: you can convert a `usize` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected `isize`, found `u64`\n    |\n-help: you can convert a `u64` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -121,7 +121,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected `isize`, found `u32`\n    |\n-help: you can convert a `u32` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected `isize`, found `u16`\n    |\n-help: you can convert a `u16` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -152,7 +152,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_i64);\n    |                  ^^^^^ expected `isize`, found `i64`\n    |\n-help: you can convert an `i64` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_i32);\n    |                  ^^^^^ expected `isize`, found `i32`\n    |\n-help: you can convert an `i32` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -192,7 +192,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert a `usize` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -230,7 +230,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_isize);\n    |                ^^^^^^^ expected `u64`, found `isize`\n    |\n-help: you can convert an `isize` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -241,7 +241,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_i64);\n    |                ^^^^^ expected `u64`, found `i64`\n    |\n-help: you can convert an `i64` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -252,7 +252,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_i32);\n    |                ^^^^^ expected `u64`, found `i32`\n    |\n-help: you can convert an `i32` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -263,7 +263,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_i16);\n    |                ^^^^^ expected `u64`, found `i16`\n    |\n-help: you can convert an `i16` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -274,7 +274,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_i8);\n    |                ^^^^ expected `u64`, found `i8`\n    |\n-help: you can convert an `i8` to a `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -285,7 +285,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_usize);\n    |                ^^^^^^^ expected `i64`, found `usize`\n    |\n-help: you can convert a `usize` to an `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -296,7 +296,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_u64);\n    |                ^^^^^ expected `i64`, found `u64`\n    |\n-help: you can convert a `u64` to an `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -334,7 +334,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_isize);\n    |                ^^^^^^^ expected `i64`, found `isize`\n    |\n-help: you can convert an `isize` to an `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -372,7 +372,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_usize);\n    |                ^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert a `usize` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -383,7 +383,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_u64);\n    |                ^^^^^ expected `u32`, found `u64`\n    |\n-help: you can convert a `u64` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -412,7 +412,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_isize);\n    |                ^^^^^^^ expected `u32`, found `isize`\n    |\n-help: you can convert an `isize` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -423,7 +423,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_i64);\n    |                ^^^^^ expected `u32`, found `i64`\n    |\n-help: you can convert an `i64` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -434,7 +434,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_i32);\n    |                ^^^^^ expected `u32`, found `i32`\n    |\n-help: you can convert an `i32` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -445,7 +445,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_i16);\n    |                ^^^^^ expected `u32`, found `i16`\n    |\n-help: you can convert an `i16` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -456,7 +456,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_i8);\n    |                ^^^^ expected `u32`, found `i8`\n    |\n-help: you can convert an `i8` to a `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -467,7 +467,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_usize);\n    |                ^^^^^^^ expected `i32`, found `usize`\n    |\n-help: you can convert a `usize` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -478,7 +478,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_u64);\n    |                ^^^^^ expected `i32`, found `u64`\n    |\n-help: you can convert a `u64` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -489,7 +489,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_u32);\n    |                ^^^^^ expected `i32`, found `u32`\n    |\n-help: you can convert a `u32` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -518,7 +518,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_isize);\n    |                ^^^^^^^ expected `i32`, found `isize`\n    |\n-help: you can convert an `isize` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -529,7 +529,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_i64);\n    |                ^^^^^ expected `i32`, found `i64`\n    |\n-help: you can convert an `i64` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -558,7 +558,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_usize);\n    |                ^^^^^^^ expected `u16`, found `usize`\n    |\n-help: you can convert a `usize` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -569,7 +569,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_u64);\n    |                ^^^^^ expected `u16`, found `u64`\n    |\n-help: you can convert a `u64` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -580,7 +580,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_u32);\n    |                ^^^^^ expected `u16`, found `u32`\n    |\n-help: you can convert a `u32` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -600,7 +600,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_isize);\n    |                ^^^^^^^ expected `u16`, found `isize`\n    |\n-help: you can convert an `isize` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -611,7 +611,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_i64);\n    |                ^^^^^ expected `u16`, found `i64`\n    |\n-help: you can convert an `i64` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -622,7 +622,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_i32);\n    |                ^^^^^ expected `u16`, found `i32`\n    |\n-help: you can convert an `i32` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -633,7 +633,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_i16);\n    |                ^^^^^ expected `u16`, found `i16`\n    |\n-help: you can convert an `i16` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -644,7 +644,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_i8);\n    |                ^^^^ expected `u16`, found `i8`\n    |\n-help: you can convert an `i8` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -655,7 +655,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_usize);\n    |                ^^^^^^^ expected `i16`, found `usize`\n    |\n-help: you can convert a `usize` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -666,7 +666,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u64);\n    |                ^^^^^ expected `i16`, found `u64`\n    |\n-help: you can convert a `u64` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -677,7 +677,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u32);\n    |                ^^^^^ expected `i16`, found `u32`\n    |\n-help: you can convert a `u32` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -688,7 +688,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u16);\n    |                ^^^^^ expected `i16`, found `u16`\n    |\n-help: you can convert a `u16` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -708,7 +708,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_isize);\n    |                ^^^^^^^ expected `i16`, found `isize`\n    |\n-help: you can convert an `isize` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -719,7 +719,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_i64);\n    |                ^^^^^ expected `i16`, found `i64`\n    |\n-help: you can convert an `i64` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -730,7 +730,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_i32);\n    |                ^^^^^ expected `i16`, found `i32`\n    |\n-help: you can convert an `i32` to an `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -750,7 +750,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_usize);\n    |               ^^^^^^^ expected `u8`, found `usize`\n    |\n-help: you can convert a `usize` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -761,7 +761,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u64);\n    |               ^^^^^ expected `u8`, found `u64`\n    |\n-help: you can convert a `u64` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -772,7 +772,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u32);\n    |               ^^^^^ expected `u8`, found `u32`\n    |\n-help: you can convert a `u32` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -783,7 +783,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u16);\n    |               ^^^^^ expected `u8`, found `u16`\n    |\n-help: you can convert a `u16` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -794,7 +794,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_isize);\n    |               ^^^^^^^ expected `u8`, found `isize`\n    |\n-help: you can convert an `isize` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -805,7 +805,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_i64);\n    |               ^^^^^ expected `u8`, found `i64`\n    |\n-help: you can convert an `i64` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -816,7 +816,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_i32);\n    |               ^^^^^ expected `u8`, found `i32`\n    |\n-help: you can convert an `i32` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -827,7 +827,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_i16);\n    |               ^^^^^ expected `u8`, found `i16`\n    |\n-help: you can convert an `i16` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -838,7 +838,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_i8);\n    |               ^^^^ expected `u8`, found `i8`\n    |\n-help: you can convert an `i8` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -849,7 +849,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_usize);\n    |               ^^^^^^^ expected `i8`, found `usize`\n    |\n-help: you can convert a `usize` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -860,7 +860,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u64);\n    |               ^^^^^ expected `i8`, found `u64`\n    |\n-help: you can convert a `u64` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -871,7 +871,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u32);\n    |               ^^^^^ expected `i8`, found `u32`\n    |\n-help: you can convert a `u32` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -882,7 +882,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u16);\n    |               ^^^^^ expected `i8`, found `u16`\n    |\n-help: you can convert a `u16` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -893,7 +893,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u8);\n    |               ^^^^ expected `i8`, found `u8`\n    |\n-help: you can convert a `u8` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u8` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -904,7 +904,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_isize);\n    |               ^^^^^^^ expected `i8`, found `isize`\n    |\n-help: you can convert an `isize` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -915,7 +915,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_i64);\n    |               ^^^^^ expected `i8`, found `i64`\n    |\n-help: you can convert an `i64` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -926,7 +926,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_i32);\n    |               ^^^^^ expected `i8`, found `i32`\n    |\n-help: you can convert an `i32` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -937,7 +937,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_i16);\n    |               ^^^^^ expected `i8`, found `i16`\n    |\n-help: you can convert an `i16` to an `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4064c5b3819ec0851c1ed2afaf839e4a20b2483d", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -15,7 +15,7 @@ LL |     match x {\n LL |         Some(x) => { return x },\n    |                             ^ expected `usize`, found `isize`\n    |\n-help: you can convert an `isize` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         Some(x) => { return x.try_into().unwrap() },\n    |                             ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "63b70f7fcd95c35d160e99100215cd71da43f804", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -30,7 +30,7 @@ LL |     let _: i32 = 22_i64 >> 1_i32;\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `i64` to an `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     let _: i32 = (22_i64 >> 1_i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "cff0991072103d3fe9b0a2bceb8b32b718f886c0", "filename": "src/test/ui/tail-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Ftail-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Ftail-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftail-typeck.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -6,7 +6,7 @@ LL | fn f() -> isize { return g(); }\n    |           |\n    |           expected `isize` because of return type\n    |\n-help: you can convert a `usize` to an `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL | fn f() -> isize { return g().try_into().unwrap(); }\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "edb48b6625ee223865ddea1cdbf506f8ec7f307b", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -7,7 +7,7 @@ LL | fn global_bound_is_hidden() -> u8\n LL |     B::get_x()\n    |     ^^^^^^^^^^ expected `u8`, found `i32`\n    |\n-help: you can convert an `i32` to a `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     B::get_x().try_into().unwrap()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f9974acfb7071c2d2a359d8319b69d333b985cc1", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     identity_u16(y);\n    |                  ^ expected `u16`, found `i32`\n    |\n-help: you can convert an `i32` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     identity_u16(y.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n LL |     identity_u16(a);\n    |                  ^ expected `u16`, found `isize`\n    |\n-help: you can convert an `isize` to a `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     identity_u16(a.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5498dae718f1e46605f70f7942a15b958fa6c4d2", "filename": "src/test/ui/wrong-ret-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6831a7fd3fc624643b50f494212e0ceaad3c28/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-ret-type.stderr?ref=8a6831a7fd3fc624643b50f494212e0ceaad3c28", "patch": "@@ -6,7 +6,7 @@ LL | fn mk_int() -> usize { let i: isize = 3; return i; }\n    |                |\n    |                expected `usize` because of return type\n    |\n-help: you can convert an `isize` to a `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL | fn mk_int() -> usize { let i: isize = 3; return i.try_into().unwrap(); }\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^"}]}