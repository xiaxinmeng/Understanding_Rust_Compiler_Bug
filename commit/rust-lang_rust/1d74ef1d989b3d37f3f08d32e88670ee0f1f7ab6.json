{"sha": "1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNzRlZjFkOTg5YjNkMzdmM2YwOGQzMmU4ODY3MGVlMGYxZjdhYjY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-08T14:50:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-08T14:50:10Z"}, "message": "Don't complete values in type position", "tree": {"sha": "33560270745b1f2ad509612dc404683af7ffa6ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33560270745b1f2ad509612dc404683af7ffa6ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "html_url": "https://github.com/rust-lang/rust/commit/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "590472607c9629fdd37e3f6f33dacfdc2a3f56cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/590472607c9629fdd37e3f6f33dacfdc2a3f56cc", "html_url": "https://github.com/rust-lang/rust/commit/590472607c9629fdd37e3f6f33dacfdc2a3f56cc"}], "stats": {"total": 131, "additions": 76, "deletions": 55}, "files": [{"sha": "589641760263e42f615c1526f61ec9340e9d29b1", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "patch": "@@ -2496,6 +2496,18 @@ impl ScopeDef {\n \n         items\n     }\n+\n+    pub fn is_value_def(&self) -> bool {\n+        matches!(\n+            self,\n+            ScopeDef::ModuleDef(ModuleDef::Function(_))\n+                | ScopeDef::ModuleDef(ModuleDef::Variant(_))\n+                | ScopeDef::ModuleDef(ModuleDef::Const(_))\n+                | ScopeDef::ModuleDef(ModuleDef::Static(_))\n+                | ScopeDef::GenericParam(GenericParam::ConstParam(_))\n+                | ScopeDef::Local(_)\n+        )\n+    }\n }\n \n impl From<ItemInNs> for ScopeDef {"}, {"sha": "827e23e2bd05a3bef8f394da70a9adbea8135f16", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "patch": "@@ -35,8 +35,9 @@ pub enum PathResolution {\n     Def(ModuleDef),\n     /// A local binding (only value namespace)\n     Local(Local),\n-    /// A generic parameter\n+    /// A type parameter\n     TypeParam(TypeParam),\n+    /// A const parameter\n     ConstParam(ConstParam),\n     SelfType(Impl),\n     Macro(MacroDef),"}, {"sha": "e07a4c403f370a29c44126fbeeaee9be8406d49a", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "patch": "@@ -56,10 +56,16 @@ impl Builder {\n }\n \n impl Completions {\n-    pub(crate) fn add(&mut self, item: CompletionItem) {\n+    fn add(&mut self, item: CompletionItem) {\n         self.buf.push(item)\n     }\n \n+    fn add_opt(&mut self, item: Option<CompletionItem>) {\n+        if let Some(item) = item {\n+            self.buf.push(item)\n+        }\n+    }\n+\n     pub(crate) fn add_all<I>(&mut self, items: I)\n     where\n         I: IntoIterator,\n@@ -103,9 +109,10 @@ impl Completions {\n         local_name: hir::Name,\n         resolution: &hir::ScopeDef,\n     ) {\n-        if let Some(item) = render_resolution(RenderContext::new(ctx), local_name, resolution) {\n-            self.add(item);\n+        if ctx.expects_type() && resolution.is_value_def() {\n+            return;\n         }\n+        self.add_opt(render_resolution(RenderContext::new(ctx), local_name, resolution));\n     }\n \n     pub(crate) fn add_macro(\n@@ -118,9 +125,7 @@ impl Completions {\n             Some(it) => it,\n             None => return,\n         };\n-        if let Some(item) = render_macro(RenderContext::new(ctx), None, name, macro_) {\n-            self.add(item);\n-        }\n+        self.add_opt(render_macro(RenderContext::new(ctx), None, name, macro_));\n     }\n \n     pub(crate) fn add_function(\n@@ -129,9 +134,10 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_fn(RenderContext::new(ctx), None, local_name, func) {\n-            self.add(item)\n+        if ctx.expects_type() {\n+            return;\n         }\n+        self.add_opt(render_fn(RenderContext::new(ctx), None, local_name, func));\n     }\n \n     pub(crate) fn add_method(\n@@ -141,10 +147,7 @@ impl Completions {\n         receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_method(RenderContext::new(ctx), None, receiver, local_name, func)\n-        {\n-            self.add(item)\n-        }\n+        self.add_opt(render_method(RenderContext::new(ctx), None, receiver, local_name, func));\n     }\n \n     pub(crate) fn add_variant_pat(\n@@ -153,9 +156,7 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_variant_pat(RenderContext::new(ctx), variant, local_name, None) {\n-            self.add(item);\n-        }\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, local_name, None));\n     }\n \n     pub(crate) fn add_qualified_variant_pat(\n@@ -164,9 +165,7 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        if let Some(item) = render_variant_pat(RenderContext::new(ctx), variant, None, Some(path)) {\n-            self.add(item);\n-        }\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, None, Some(path)));\n     }\n \n     pub(crate) fn add_struct_pat(\n@@ -175,21 +174,18 @@ impl Completions {\n         strukt: hir::Struct,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_struct_pat(RenderContext::new(ctx), strukt, local_name) {\n-            self.add(item);\n-        }\n+        self.add_opt(render_struct_pat(RenderContext::new(ctx), strukt, local_name));\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        if let Some(item) = render_const(RenderContext::new(ctx), constant) {\n-            self.add(item);\n+        if ctx.expects_type() {\n+            return;\n         }\n+        self.add_opt(render_const(RenderContext::new(ctx), constant));\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        if let Some(item) = render_type_alias(RenderContext::new(ctx), type_alias) {\n-            self.add(item)\n-        }\n+        self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n     }\n \n     pub(crate) fn add_qualified_enum_variant("}, {"sha": "7f76e357ec34d01e14b4ec96fb4284883d0d49f8", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "patch": "@@ -69,7 +69,7 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n         }\n \n         if is_inner || !attr_completion.prefer_inner {\n-            acc.add(item.build());\n+            item.add_to(acc);\n         }\n     };\n \n@@ -96,7 +96,7 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n                 if let Some(docs) = mac.docs(ctx.sema.db) {\n                     item.documentation(docs);\n                 }\n-                acc.add(item.build());\n+                item.add_to(acc);\n             }\n         }\n     });"}, {"sha": "c010cbbca64058ef1e33e2383ce5613eaf1e9572", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "patch": "@@ -90,7 +90,6 @@\n //! Note that having this flag set to `true` does not guarantee that the feature is enabled: your client needs to have the corredponding\n //! capability enabled.\n \n-use hir::ModPath;\n use ide_db::helpers::{\n     import_assets::{ImportAssets, ImportCandidate},\n     insert_use::ImportScope,\n@@ -208,7 +207,7 @@ fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAs\n }\n \n fn compute_fuzzy_completion_order_key(\n-    proposed_mod_path: &ModPath,\n+    proposed_mod_path: &hir::ModPath,\n     user_input_lowercased: &str,\n ) -> usize {\n     cov_mark::hit!(certain_fuzzy_order_test);"}, {"sha": "f370dbdf0bb003b14eeeb87b897e23746fcfa680", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "patch": "@@ -339,7 +339,6 @@ fn x() -> $0\n \"#,\n             expect![[r#\"\n                 st Foo\n-                fn x() fn()\n             \"#]],\n         );\n     }\n@@ -391,7 +390,6 @@ pub mod prelude {\n }\n \"#,\n             expect![[r#\"\n-                fn foo()  fn()\n                 md std\n                 st Option\n             \"#]],\n@@ -448,7 +446,6 @@ pub mod prelude {\n }\n \"#,\n             expect![[r#\"\n-                fn foo()  fn()\n                 md std\n                 md core\n                 st String\n@@ -509,7 +506,6 @@ macro_rules! foo { () => {} }\n fn main() { let x: $0 }\n \"#,\n             expect![[r#\"\n-                fn main()  fn()\n                 ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );"}, {"sha": "2c2a4aa6bf1de96496ef0886561b79f555abb56b", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "patch": "@@ -29,20 +29,25 @@ pub(crate) enum PatternRefutability {\n     Irrefutable,\n }\n \n+#[derive(Debug)]\n+pub(super) enum PathKind {\n+    Expr,\n+    Type,\n+}\n+\n #[derive(Debug)]\n pub(crate) struct PathCompletionContext {\n     /// If this is a call with () already there\n     call_kind: Option<CallKind>,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n-    pub(super) path_qual: Option<ast::Path>,\n-    pub(super) is_path_type: bool,\n+    pub(super) qualifier: Option<ast::Path>,\n+    pub(super) kind: Option<PathKind>,\n+    /// Whether the path segment has type args or not.\n     pub(super) has_type_args: bool,\n     /// `true` if we are a statement or a last expr in the block.\n     pub(super) can_be_stmt: bool,\n-    /// `true` if we expect an expression at the cursor position.\n-    pub(super) is_expr: bool,\n     pub(super) in_loop_body: bool,\n }\n \n@@ -308,19 +313,23 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expects_expression(&self) -> bool {\n-        self.path_context.as_ref().map_or(false, |it| it.is_expr)\n+        matches!(self.path_context, Some(PathCompletionContext { kind: Some(PathKind::Expr), .. }))\n+    }\n+\n+    pub(crate) fn expects_type(&self) -> bool {\n+        matches!(self.path_context, Some(PathCompletionContext { kind: Some(PathKind::Type), .. }))\n     }\n \n     pub(crate) fn path_call_kind(&self) -> Option<CallKind> {\n         self.path_context.as_ref().and_then(|it| it.call_kind)\n     }\n \n     pub(crate) fn is_trivial_path(&self) -> bool {\n-        self.path_context.as_ref().map_or(false, |it| it.is_trivial_path)\n+        matches!(self.path_context, Some(PathCompletionContext { is_trivial_path: true, .. }))\n     }\n \n     pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n-        self.path_context.as_ref().and_then(|it| it.path_qual.as_ref())\n+        self.path_context.as_ref().and_then(|it| it.qualifier.as_ref())\n     }\n \n     fn fill_impl_def(&mut self) {\n@@ -573,12 +582,11 @@ impl<'a> CompletionContext<'a> {\n             let path_ctx = self.path_context.get_or_insert(PathCompletionContext {\n                 call_kind: None,\n                 is_trivial_path: false,\n-                path_qual: None,\n+                qualifier: None,\n                 has_type_args: false,\n-                is_path_type: false,\n                 can_be_stmt: false,\n-                is_expr: false,\n                 in_loop_body: false,\n+                kind: None,\n             });\n             path_ctx.in_loop_body = is_in_loop_body(name_ref.syntax());\n             let path = segment.parent_path();\n@@ -593,11 +601,20 @@ impl<'a> CompletionContext<'a> {\n                     }\n                 };\n             }\n-            path_ctx.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n+\n+            if let Some(parent) = path.syntax().parent() {\n+                path_ctx.kind = match_ast! {\n+                    match parent {\n+                        ast::PathType(_it) => Some(PathKind::Type),\n+                        ast::PathExpr(_it) => Some(PathKind::Expr),\n+                        _ => None,\n+                    }\n+                };\n+            }\n             path_ctx.has_type_args = segment.generic_arg_list().is_some();\n \n             if let Some(path) = path_or_use_tree_qualifier(&path) {\n-                path_ctx.path_qual = path\n+                path_ctx.qualifier = path\n                     .segment()\n                     .and_then(|it| {\n                         find_node_with_range::<ast::PathSegment>(\n@@ -635,7 +652,6 @@ impl<'a> CompletionContext<'a> {\n                     None\n                 })\n                 .unwrap_or(false);\n-            path_ctx.is_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n         }\n     }\n }"}, {"sha": "7118183fe061fab31423773e5c61c636cee21be7", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=1d74ef1d989b3d37f3f08d32e88670ee0f1f7ab6", "patch": "@@ -18,6 +18,7 @@ use ide_db::{\n use syntax::TextRange;\n \n use crate::{\n+    context::{PathCompletionContext, PathKind},\n     item::{CompletionRelevanceTypeMatch, ImportEdit},\n     render::{enum_variant::render_variant, function::render_fn, macro_::render_macro},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, CompletionRelevance,\n@@ -54,6 +55,9 @@ pub(crate) fn render_resolution_with_import<'a>(\n     import_edit: ImportEdit,\n ) -> Option<CompletionItem> {\n     let resolution = hir::ScopeDef::from(import_edit.import.original_item);\n+    if ctx.completion.expects_type() && resolution.is_value_def() {\n+        return None;\n+    }\n     let local_name = match resolution {\n         hir::ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n         hir::ScopeDef::ModuleDef(hir::ModuleDef::Const(c)) => c.name(ctx.completion.db)?,\n@@ -275,13 +279,10 @@ impl<'a> Render<'a> {\n         };\n \n         // Add `<>` for generic types\n-        if self\n-            .ctx\n-            .completion\n-            .path_context\n-            .as_ref()\n-            .map_or(false, |it| it.is_path_type && !it.has_type_args)\n-            && self.ctx.completion.config.add_call_parenthesis\n+        if matches!(\n+            self.ctx.completion.path_context,\n+            Some(PathCompletionContext { kind: Some(PathKind::Type), has_type_args: false, .. })\n+        ) && self.ctx.completion.config.add_call_parenthesis\n         {\n             if let Some(cap) = self.ctx.snippet_cap() {\n                 let has_non_default_type_params = match resolution {"}]}