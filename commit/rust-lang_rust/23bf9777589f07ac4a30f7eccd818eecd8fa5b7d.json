{"sha": "23bf9777589f07ac4a30f7eccd818eecd8fa5b7d", "node_id": "C_kwDOAAsO6NoAKDIzYmY5Nzc3NTg5ZjA3YWM0YTMwZjdlY2NkODE4ZWVjZDhmYTViN2Q", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-04-12T19:23:36Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-04-12T19:23:36Z"}, "message": "Implement tuples using recursion", "tree": {"sha": "49f717e0a335c8a0b7eb226bb39e2d56d24f8847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f717e0a335c8a0b7eb226bb39e2d56d24f8847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bf9777589f07ac4a30f7eccd818eecd8fa5b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bf9777589f07ac4a30f7eccd818eecd8fa5b7d", "html_url": "https://github.com/rust-lang/rust/commit/23bf9777589f07ac4a30f7eccd818eecd8fa5b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bf9777589f07ac4a30f7eccd818eecd8fa5b7d/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7fb6413d6d6c0c929b223e478e44c3db991b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7fb6413d6d6c0c929b223e478e44c3db991b03", "html_url": "https://github.com/rust-lang/rust/commit/1f7fb6413d6d6c0c929b223e478e44c3db991b03"}], "stats": {"total": 141, "additions": 74, "deletions": 67}, "files": [{"sha": "181717f35bd25dd3de4f763b032a624f349b5108", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 74, "deletions": 67, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/23bf9777589f07ac4a30f7eccd818eecd8fa5b7d/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bf9777589f07ac4a30f7eccd818eecd8fa5b7d/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=23bf9777589f07ac4a30f7eccd818eecd8fa5b7d", "patch": "@@ -3,68 +3,88 @@\n use crate::cmp::Ordering::*;\n use crate::cmp::*;\n \n-// macro for implementing n-ary tuple functions and operations\n+// Recursive macro for implementing n-ary tuple functions and operations\n+//\n+// Also provides implementations for tuples with lesser arity. For example, tuple_impls!(A B C)\n+// will implement everything for (A, B, C), (A, B) and (A,).\n macro_rules! tuple_impls {\n-    ( $( ( $( $T:ident )+ ) )+ ) => {\n-        $(\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {\n-                #[inline]\n-                fn eq(&self, other: &($($T,)+)) -> bool {\n-                    $( ${ignore(T)} self.${index()} == other.${index()} )&&+\n-                }\n-                #[inline]\n-                fn ne(&self, other: &($($T,)+)) -> bool {\n-                    $( ${ignore(T)} self.${index()} != other.${index()} )||+\n-                }\n+    // Stopping criteria (1-ary tuple)\n+    ($T:ident) => {\n+        tuple_impls!(@impl $T);\n+    };\n+    // Running criteria (n-ary tuple, with n >= 2)\n+    ($T:ident $( $U:ident )+) => {\n+        tuple_impls!($( $U )+);\n+        tuple_impls!(@impl $T $( $U )+);\n+    };\n+    // \"Private\" internal implementation\n+    (@impl $( $T:ident )+) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<$($T:PartialEq),+> PartialEq for ($($T,)+)\n+        where\n+            last_type!($($T,)+): ?Sized\n+        {\n+            #[inline]\n+            fn eq(&self, other: &($($T,)+)) -> bool {\n+                $( ${ignore(T)} self.${index()} == other.${index()} )&&+\n+            }\n+            #[inline]\n+            fn ne(&self, other: &($($T,)+)) -> bool {\n+                $( ${ignore(T)} self.${index()} != other.${index()} )||+\n             }\n+        }\n \n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Eq),+> Eq for ($($T,)+) where last_type!($($T,)+): ?Sized {}\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<$($T:Eq),+> Eq for ($($T,)+)\n+        where\n+            last_type!($($T,)+): ?Sized\n+        {}\n \n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)\n-            where\n-                last_type!($($T,)+): ?Sized\n-            {\n-                #[inline]\n-                fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {\n-                    lexical_partial_cmp!($( ${ignore(T)} self.${index()}, other.${index()} ),+)\n-                }\n-                #[inline]\n-                fn lt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(lt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n-                }\n-                #[inline]\n-                fn le(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(le, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n-                }\n-                #[inline]\n-                fn ge(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(ge, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n-                }\n-                #[inline]\n-                fn gt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(gt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n-                }\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)\n+        where\n+            last_type!($($T,)+): ?Sized\n+        {\n+            #[inline]\n+            fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {\n+                lexical_partial_cmp!($( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+            }\n+            #[inline]\n+            fn lt(&self, other: &($($T,)+)) -> bool {\n+                lexical_ord!(lt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+            }\n+            #[inline]\n+            fn le(&self, other: &($($T,)+)) -> bool {\n+                lexical_ord!(le, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n             }\n+            #[inline]\n+            fn ge(&self, other: &($($T,)+)) -> bool {\n+                lexical_ord!(ge, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+            }\n+            #[inline]\n+            fn gt(&self, other: &($($T,)+)) -> bool {\n+                lexical_ord!(gt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+            }\n+        }\n \n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {\n-                #[inline]\n-                fn cmp(&self, other: &($($T,)+)) -> Ordering {\n-                    lexical_cmp!($( ${ignore(T)} self.${index()}, other.${index()} ),+)\n-                }\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<$($T:Ord),+> Ord for ($($T,)+)\n+        where\n+            last_type!($($T,)+): ?Sized\n+        {\n+            #[inline]\n+            fn cmp(&self, other: &($($T,)+)) -> Ordering {\n+                lexical_cmp!($( ${ignore(T)} self.${index()}, other.${index()} ),+)\n             }\n+        }\n \n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Default),+> Default for ($($T,)+) {\n-                #[inline]\n-                fn default() -> ($($T,)+) {\n-                    ($({ let x: $T = Default::default(); x},)+)\n-                }\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<$($T:Default),+> Default for ($($T,)+) {\n+            #[inline]\n+            fn default() -> ($($T,)+) {\n+                ($({ let x: $T = Default::default(); x},)+)\n             }\n-        )+\n+        }\n     }\n }\n \n@@ -105,17 +125,4 @@ macro_rules! last_type {\n     ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n }\n \n-tuple_impls! {\n-    (A)\n-    (A B)\n-    (A B C)\n-    (A B C D)\n-    (A B C D E)\n-    (A B C D E F)\n-    (A B C D E F G)\n-    (A B C D E F G H)\n-    (A B C D E F G H I)\n-    (A B C D E F G H I J)\n-    (A B C D E F G H I J K)\n-    (A B C D E F G H I J K L)\n-}\n+tuple_impls!(A B C D E F G H I J K L);"}]}