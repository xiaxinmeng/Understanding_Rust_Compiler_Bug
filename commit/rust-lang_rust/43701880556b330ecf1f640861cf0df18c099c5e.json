{"sha": "43701880556b330ecf1f640861cf0df18c099c5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNzAxODgwNTU2YjMzMGVjZjFmNjQwODYxY2YwZGYxOGMwOTljNWU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-02-18T21:17:12Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-02-18T21:17:12Z"}, "message": "Merge pull request #1860 from erickt/master\n\nadd str::find_from_bytes and str::index_from_bytes", "tree": {"sha": "e062604c2368f182c425ed8f097c98edc9d004a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e062604c2368f182c425ed8f097c98edc9d004a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43701880556b330ecf1f640861cf0df18c099c5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43701880556b330ecf1f640861cf0df18c099c5e", "html_url": "https://github.com/rust-lang/rust/commit/43701880556b330ecf1f640861cf0df18c099c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43701880556b330ecf1f640861cf0df18c099c5e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8fc364b09ff0cd4820d784b3e747c9738ed67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8fc364b09ff0cd4820d784b3e747c9738ed67b", "html_url": "https://github.com/rust-lang/rust/commit/9e8fc364b09ff0cd4820d784b3e747c9738ed67b"}, {"sha": "23703c06613b6740113ac799747c394f37eb51e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23703c06613b6740113ac799747c394f37eb51e7", "html_url": "https://github.com/rust-lang/rust/commit/23703c06613b6740113ac799747c394f37eb51e7"}], "stats": {"total": 143, "additions": 96, "deletions": 47}, "files": [{"sha": "744ea97441d0fdf491bc4f44e42fd72c1b3bd090", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43701880556b330ecf1f640861cf0df18c099c5e/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43701880556b330ecf1f640861cf0df18c099c5e/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=43701880556b330ecf1f640861cf0df18c099c5e", "patch": "@@ -157,7 +157,8 @@ fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n \n fn get_line(fm: filemap, line: int) -> str unsafe {\n     let begin: uint = fm.lines[line].byte - fm.start_pos.byte;\n-    let end = alt str::byte_index(*fm.src, '\\n' as u8, begin) {\n+    let end = alt str::byte_index_from(*fm.src, '\\n' as u8, begin,\n+                                  str::len(*fm.src)) {\n       some(e) { e }\n       none { str::len(*fm.src) }\n     };"}, {"sha": "0a44d1fb414cbd57f62e7793e0e4efe16eae7db4", "filename": "src/libcore/str.rs", "status": "modified", "additions": 94, "deletions": 46, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/43701880556b330ecf1f640861cf0df18c099c5e/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43701880556b330ecf1f640861cf0df18c099c5e/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=43701880556b330ecf1f640861cf0df18c099c5e", "patch": "@@ -9,6 +9,8 @@ for correctness, but some UTF-8 unsafe functions are also provided.\n For some heavy-duty uses, we recommend trying std::rope.\n */\n \n+import option::{some, none};\n+\n export\n    // Creating a string\n    from_bytes,\n@@ -69,9 +71,11 @@ export\n    // Searching\n    index,\n    byte_index,\n+   byte_index_from,\n    rindex,\n    find,\n    find_bytes,\n+   find_from_bytes,\n    contains,\n    starts_with,\n    ends_with,\n@@ -665,8 +669,8 @@ fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str unsafe {\n     } else {\n         let idx;\n         alt find_bytes(s, from) {\n-            option::some(x) { idx = x; }\n-            option::none { ret s; }\n+            some(x) { idx = x; }\n+            none { ret s; }\n         }\n         let before = unsafe::slice_bytes(s, 0u, idx as uint);\n         let after  = unsafe::slice_bytes(s, idx as uint + len_bytes(from),\n@@ -842,28 +846,34 @@ fn index(ss: str, cc: char) -> option<uint> {\n \n         // found here?\n         if ch == cc {\n-            ret option::some(cii);\n+            ret some(cii);\n         }\n \n         cii += 1u;\n         bii = next;\n     }\n \n     // wasn't found\n-    ret option::none;\n+    ret none;\n }\n \n // Function: byte_index\n //\n // Returns the index of the first matching byte\n // (as option some/none)\n-fn byte_index(s: str, b: u8, start: uint) -> option<uint> {\n-    let i = start, l = len_bytes(s);\n-    while i < l {\n-        if s[i] == b { ret some(i); }\n-        i += 1u;\n-    }\n-    ret none;\n+fn byte_index(s: str, b: u8) -> option<uint> {\n+    byte_index_from(s, b, 0u, len_bytes(s))\n+}\n+\n+// Function: byte_index_from\n+//\n+// Returns the index of the first matching byte within the range [`start`,\n+// `end`).\n+// (as option some/none)\n+fn byte_index_from(s: str, b: u8, start: uint, end: uint) -> option<uint> {\n+    assert end <= len_bytes(s);\n+\n+    str::as_bytes(s) { |v| vec::position_from(v, start, end) { |x| x == b } }\n }\n \n // Function: rindex\n@@ -880,40 +890,50 @@ fn rindex(ss: str, cc: char) -> option<uint> {\n \n         // found here?\n         if ch == cc {\n-            ret option::some(cii);\n+            ret some(cii);\n         }\n     }\n \n     // wasn't found\n-    ret option::none;\n+    ret none;\n }\n \n //Function: find_bytes\n //\n // Find the char position of the first instance of one string\n // within another, or return option::none\n+fn find_bytes(haystack: str, needle: str) -> option<uint> {\n+    find_from_bytes(haystack, needle, 0u, len_bytes(haystack))\n+}\n+\n+//Function: find_from_bytes\n+//\n+// Find the char position of the first instance of one string\n+// within another, or return option::none\n //\n // FIXME: Boyer-Moore should be significantly faster\n-fn find_bytes(haystack: str, needle: str) -> option<uint> {\n-    let haystack_len = len_bytes(haystack);\n-    let needle_len   = len_bytes(needle);\n+fn find_from_bytes(haystack: str, needle: str, start: uint, end:uint)\n+  -> option<uint> {\n+    assert end <= len_bytes(haystack);\n+\n+    let needle_len = len_bytes(needle);\n \n-    if needle_len == 0u { ret option::some(0u); }\n-    if needle_len > haystack_len { ret option::none; }\n+    if needle_len == 0u { ret some(start); }\n+    if needle_len > end { ret none; }\n \n     fn match_at(haystack: str, needle: str, ii: uint) -> bool {\n         let jj = ii;\n         for c: u8 in needle { if haystack[jj] != c { ret false; } jj += 1u; }\n         ret true;\n     }\n \n-    let ii = 0u;\n-    while ii <= haystack_len - needle_len {\n-        if match_at(haystack, needle, ii) { ret option::some(ii); }\n+    let ii = start;\n+    while ii <= end - needle_len {\n+        if match_at(haystack, needle, ii) { ret some(ii); }\n         ii += 1u;\n     }\n \n-    ret option::none;\n+    ret none;\n }\n \n // Function: find\n@@ -922,8 +942,8 @@ fn find_bytes(haystack: str, needle: str) -> option<uint> {\n // within another, or return option::none\n fn find(haystack: str, needle: str) -> option<uint> {\n    alt find_bytes(haystack, needle) {\n-      option::none { ret option::none; }\n-      option::some(nn) { ret option::some(b2c_pos(haystack, nn)); }\n+      none { ret none; }\n+      some(nn) { ret some(b2c_pos(haystack, nn)); }\n    }\n }\n \n@@ -1522,18 +1542,18 @@ mod tests {\n \n     #[test]\n     fn test_index() {\n-        assert ( index(\"hello\", 'h') == option::some(0u));\n-        assert ( index(\"hello\", 'e') == option::some(1u));\n-        assert ( index(\"hello\", 'o') == option::some(4u));\n-        assert ( index(\"hello\", 'z') == option::none);\n+        assert ( index(\"hello\", 'h') == some(0u));\n+        assert ( index(\"hello\", 'e') == some(1u));\n+        assert ( index(\"hello\", 'o') == some(4u));\n+        assert ( index(\"hello\", 'z') == none);\n     }\n \n     #[test]\n     fn test_rindex() {\n-        assert (rindex(\"hello\", 'l') == option::some(3u));\n-        assert (rindex(\"hello\", 'o') == option::some(4u));\n-        assert (rindex(\"hello\", 'h') == option::some(0u));\n-        assert (rindex(\"hello\", 'z') == option::none);\n+        assert (rindex(\"hello\", 'l') == some(3u));\n+        assert (rindex(\"hello\", 'o') == some(4u));\n+        assert (rindex(\"hello\", 'h') == some(0u));\n+        assert (rindex(\"hello\", 'z') == none);\n     }\n \n     #[test]\n@@ -1738,29 +1758,57 @@ mod tests {\n     #[test]\n     fn test_find_bytes() {\n         // byte positions\n-        assert (find_bytes(\"banana\", \"apple pie\") == option::none);\n-        assert (find_bytes(\"\", \"\") == option::some(0u));\n+        assert (find_bytes(\"banana\", \"apple pie\") == none);\n+        assert (find_bytes(\"\", \"\") == some(0u));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert (find_bytes(data, \"\")     == option::some(0u));\n-        assert (find_bytes(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some( 0u));\n-        assert (find_bytes(data, \"\u0e30\u0e40\")   == option::some( 6u));\n-        assert (find_bytes(data, \"\u4e2d\u534e\") == option::some(27u));\n-        assert (find_bytes(data, \"\u0e44\u0e17\u534e\") == option::none);\n+        assert (find_bytes(data, \"\")     == some(0u));\n+        assert (find_bytes(data, \"\u0e1b\u0e23\u0e30\u0e40\") == some( 0u));\n+        assert (find_bytes(data, \"\u0e30\u0e40\")   == some( 6u));\n+        assert (find_bytes(data, \"\u4e2d\u534e\") == some(27u));\n+        assert (find_bytes(data, \"\u0e44\u0e17\u534e\") == none);\n+    }\n+\n+    #[test]\n+    fn test_find_from_bytes() {\n+        // byte positions\n+        assert (find_from_bytes(\"\", \"\", 0u, 0u) == some(0u));\n+\n+        let data = \"abcabc\";\n+        assert find_from_bytes(data, \"ab\", 0u, 6u) == some(0u);\n+        assert find_from_bytes(data, \"ab\", 2u, 6u) == some(3u);\n+        assert find_from_bytes(data, \"ab\", 2u, 4u) == none;\n+\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        data += data;\n+        assert find_from_bytes(data, \"\", 0u, 43u) == some(0u);\n+        assert find_from_bytes(data, \"\", 6u, 43u) == some(6u);\n+\n+        assert find_from_bytes(data, \"\u0e1b\u0e23\u0e30\", 0u, 43u) == some( 0u);\n+        assert find_from_bytes(data, \"\u0e17\u0e28\u0e44\", 0u, 43u) == some(12u);\n+        assert find_from_bytes(data, \"\u0e22\u4e2d\", 0u, 43u) == some(24u);\n+        assert find_from_bytes(data, \"i\u1ec7t\", 0u, 43u) == some(34u);\n+        assert find_from_bytes(data, \"Nam\", 0u, 43u) == some(40u);\n+\n+        assert find_from_bytes(data, \"\u0e1b\u0e23\u0e30\", 43u, 86u) == some(43u);\n+        assert find_from_bytes(data, \"\u0e17\u0e28\u0e44\", 43u, 86u) == some(55u);\n+        assert find_from_bytes(data, \"\u0e22\u4e2d\", 43u, 86u) == some(67u);\n+        assert find_from_bytes(data, \"i\u1ec7t\", 43u, 86u) == some(77u);\n+        assert find_from_bytes(data, \"Nam\", 43u, 86u) == some(83u);\n     }\n \n     #[test]\n     fn test_find() {\n         // char positions\n-        assert (find(\"banana\", \"apple pie\") == option::none);\n-        assert (find(\"\", \"\") == option::some(0u));\n+        assert (find(\"banana\", \"apple pie\") == none);\n+        assert (find(\"\", \"\") == some(0u));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert (find(data, \"\")     == option::some(0u));\n-        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some(0u));\n-        assert (find(data, \"\u0e30\u0e40\")   == option::some(2u));\n-        assert (find(data, \"\u4e2d\u534e\") == option::some(9u));\n-        assert (find(data, \"\u0e44\u0e17\u534e\") == option::none);\n+        assert (find(data, \"\")     == some(0u));\n+        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") == some(0u));\n+        assert (find(data, \"\u0e30\u0e40\")   == some(2u));\n+        assert (find(data, \"\u4e2d\u534e\") == some(9u));\n+        assert (find(data, \"\u0e44\u0e17\u534e\") == none);\n     }\n \n     #[test]"}]}