{"sha": "7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNTA5MmVlN2I1NDllZGViOGEyZmM2YWY0YzgxYzhlZmEyOWI4NWM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-10T23:03:09Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-10T23:28:34Z"}, "message": "Some trivial cleanup.", "tree": {"sha": "ec73e2104d77382917f4450fd764ed8323844e12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec73e2104d77382917f4450fd764ed8323844e12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c", "html_url": "https://github.com/rust-lang/rust/commit/7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b084e4e366cacaf63036667dc4c378ce653324b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b084e4e366cacaf63036667dc4c378ce653324b", "html_url": "https://github.com/rust-lang/rust/commit/5b084e4e366cacaf63036667dc4c378ce653324b"}], "stats": {"total": 37, "additions": 4, "deletions": 33}, "files": [{"sha": "5001b806e78e4bc20af9951c115a26c255b08bcd", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c", "patch": "@@ -1226,14 +1226,14 @@ fn gather_locals(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n     };\n     let tcx = ccx.tcx;\n \n-    let next_var_id = lambda(nvi: @mutable int) -> int {\n+    let next_var_id = lambda() -> int {\n         let rv = *nvi;\n         *nvi += 1;\n         ret rv;\n     };\n     let assign = lambda(nid: ast::node_id, ident: &ast::ident,\n                         ty_opt: option::t[ty::t]) {\n-        let var_id = next_var_id(nvi);\n+        let var_id = next_var_id();\n         locals.insert(nid, var_id);\n         local_names.insert(nid, ident);\n         alt ty_opt {\n@@ -2027,7 +2027,7 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n       ast::expr_alt(expr, arms) {\n         bot = check_expr(fcx, expr);\n         // Typecheck the patterns first, so that we get types for all the\n-       // bindings.\n+        // bindings.\n \n         let pattern_ty = ty::expr_ty(tcx, expr);\n         for arm: ast::arm  in arms {"}, {"sha": "f93398591c5bb69554916795279b1aea4ea6e813", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=7d5092ee7b549edeb8a2fc6af4c81c8efa29b85c", "patch": "@@ -42,17 +42,13 @@ tag def {\n     def_arg(def_id);\n     def_local(def_id);\n     def_variant(def_id, /* tag */def_id);\n-\n-\n     /* variant */\n     def_ty(def_id);\n     def_ty_arg(uint, kind);\n     def_binding(def_id);\n     def_use(def_id);\n     def_native_ty(def_id);\n     def_native_fn(def_id);\n-\n-\n     /* A \"fake\" def for upvars. This never appears in the def_map, but\n      * freevars::def_lookup will return it for a def that is an upvar.\n      * It contains the actual def. */\n@@ -256,8 +252,6 @@ type stmt = spanned[stmt_];\n tag stmt_ {\n     stmt_decl(@decl, node_id);\n     stmt_expr(@expr, node_id);\n-\n-\n     // These only exist in crate-level blocks.\n     stmt_crate_directive(@crate_directive);\n }\n@@ -314,7 +308,6 @@ tag expr_ {\n     expr_alt(@expr, [arm]);\n     expr_fn(_fn);\n     expr_block(blk);\n-\n     /*\n      * FIXME: many of these @exprs should be constrained with\n      * is_lval once we have constrained types working.\n@@ -335,15 +328,10 @@ tag expr_ {\n     expr_put(option::t[@expr]);\n     expr_be(@expr);\n     expr_log(int, @expr);\n-\n-\n     /* just an assert, no significance to typestate */\n     expr_assert(@expr);\n-\n-\n     /* preds that typestate is aware of */\n     expr_check(check_mode, @expr);\n-\n     /* FIXME Would be nice if expr_check desugared\n        to expr_if_check. */\n     expr_if_check(@expr, blk, option::t[@expr]);\n@@ -438,29 +426,20 @@ tag ty_ {\n     ty_bot; /* return type of ! functions and type of\n              ret/fail/break/cont. there is no syntax\n              for this type. */\n-\n-\n-\n      /* bot represents the value of functions that don't return a value\n         locally to their context. in contrast, things like log that do\n         return, but don't return a meaningful value, have result type nil. */\n-     ty_bool;\n+    ty_bool;\n     ty_int;\n     ty_uint;\n     ty_float;\n     ty_machine(ty_mach);\n     ty_char;\n     ty_str;\n     ty_istr; // interior string\n-\n-\n-\n     ty_box(mt);\n     ty_vec(mt);\n     ty_ivec(mt); // interior vector\n-\n-\n-\n     ty_ptr(mt);\n     ty_task;\n     ty_port(@ty);\n@@ -523,21 +502,13 @@ type fn_decl =\n \n tag purity {\n     pure_fn; // declared with \"pred\"\n-\n-\n-\n     impure_fn; // declared with \"fn\"\n-\n }\n \n tag controlflow {\n     noreturn; // functions with return type _|_ that always\n               // raise an error or exit (i.e. never return to the caller)\n-\n-\n-\n     return; // everything else\n-\n }\n \n type _fn = {decl: fn_decl, proto: proto, body: blk};"}]}