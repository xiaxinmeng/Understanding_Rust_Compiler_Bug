{"sha": "dfa47eaadbc2d999cdf7b18fe18dbaa3b630240a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYTQ3ZWFhZGJjMmQ5OTljZGY3YjE4ZmUxOGRiYWEzYjYzMDI0MGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-26T10:23:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-26T10:23:51Z"}, "message": "Move annotations below item attributes", "tree": {"sha": "d7e3a65714ace1c126909bf9db58690e763f2427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e3a65714ace1c126909bf9db58690e763f2427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa47eaadbc2d999cdf7b18fe18dbaa3b630240a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa47eaadbc2d999cdf7b18fe18dbaa3b630240a", "html_url": "https://github.com/rust-lang/rust/commit/dfa47eaadbc2d999cdf7b18fe18dbaa3b630240a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa47eaadbc2d999cdf7b18fe18dbaa3b630240a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a1369955800752ed3a24f52ed2eb6be7ddf22a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1369955800752ed3a24f52ed2eb6be7ddf22a4", "html_url": "https://github.com/rust-lang/rust/commit/3a1369955800752ed3a24f52ed2eb6be7ddf22a4"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "b0c4ed60aa9f011b3dfd2140ef053cdb74c95da3", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dfa47eaadbc2d999cdf7b18fe18dbaa3b630240a/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa47eaadbc2d999cdf7b18fe18dbaa3b630240a/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=dfa47eaadbc2d999cdf7b18fe18dbaa3b630240a", "patch": "@@ -5,7 +5,7 @@ use ide_db::{\n     helpers::visit_file_defs,\n     RootDatabase,\n };\n-use syntax::{ast::NameOwner, AstNode, TextRange, TextSize};\n+use syntax::{ast::NameOwner, AstNode, TextRange};\n \n use crate::{\n     fn_references::find_all_methods,\n@@ -80,26 +80,26 @@ pub(crate) fn annotations(\n \n     visit_file_defs(&Semantics::new(db), file_id, &mut |def| match def {\n         Either::Left(def) => {\n-            let node = match def {\n+            let range = match def {\n                 hir::ModuleDef::Const(konst) => {\n-                    konst.source(db).and_then(|node| range_and_position_of(&node, file_id))\n+                    konst.source(db).and_then(|node| name_range(&node, file_id))\n                 }\n                 hir::ModuleDef::Trait(trait_) => {\n-                    trait_.source(db).and_then(|node| range_and_position_of(&node, file_id))\n+                    trait_.source(db).and_then(|node| name_range(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n-                    strukt.source(db).and_then(|node| range_and_position_of(&node, file_id))\n+                    strukt.source(db).and_then(|node| name_range(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Enum(enum_)) => {\n-                    enum_.source(db).and_then(|node| range_and_position_of(&node, file_id))\n+                    enum_.source(db).and_then(|node| name_range(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Union(union)) => {\n-                    union.source(db).and_then(|node| range_and_position_of(&node, file_id))\n+                    union.source(db).and_then(|node| name_range(&node, file_id))\n                 }\n                 _ => None,\n             };\n-            let (offset, range) = match node {\n-                Some(node) => node,\n+            let (range, offset) = match range {\n+                Some(range) => (range, range.start()),\n                 None => return,\n             };\n \n@@ -122,32 +122,28 @@ pub(crate) fn annotations(\n                 });\n             }\n \n-            fn range_and_position_of<T: NameOwner>(\n-                node: &InFile<T>,\n-                file_id: FileId,\n-            ) -> Option<(TextSize, TextRange)> {\n-                if node.file_id != file_id.into() {\n+            fn name_range<T: NameOwner>(node: &InFile<T>, file_id: FileId) -> Option<TextRange> {\n+                if node.file_id == file_id.into() {\n+                    node.value.name().map(|it| it.syntax().text_range())\n+                } else {\n                     // Node is outside the file we are adding annotations to (e.g. macros).\n                     None\n-                } else {\n-                    Some((\n-                        node.value.name()?.syntax().text_range().start(),\n-                        node.value.syntax().text_range(),\n-                    ))\n                 }\n             }\n         }\n         Either::Right(_) => (),\n     });\n \n     if config.annotate_method_references {\n-        annotations.extend(find_all_methods(db, file_id).into_iter().map(|method| Annotation {\n-            range: method.range,\n-            kind: AnnotationKind::HasReferences {\n-                position: FilePosition { file_id, offset: method.range.start() },\n-                data: None,\n+        annotations.extend(find_all_methods(db, file_id).into_iter().map(\n+            |FileRange { file_id, range }| Annotation {\n+                range,\n+                kind: AnnotationKind::HasReferences {\n+                    position: FilePosition { file_id, offset: range.start() },\n+                    data: None,\n+                },\n             },\n-        }));\n+        ));\n     }\n \n     annotations\n@@ -266,7 +262,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 0..22,\n+                        range: 6..10,\n                         kind: HasReferences {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -287,7 +283,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 24..48,\n+                        range: 30..36,\n                         kind: HasReferences {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -370,7 +366,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 0..12,\n+                        range: 7..11,\n                         kind: HasImpls {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -384,7 +380,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 0..12,\n+                        range: 7..11,\n                         kind: HasReferences {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -478,7 +474,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 0..12,\n+                        range: 7..11,\n                         kind: HasImpls {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -502,7 +498,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 0..12,\n+                        range: 7..11,\n                         kind: HasReferences {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -529,7 +525,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 14..34,\n+                        range: 20..31,\n                         kind: HasImpls {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -553,7 +549,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 14..34,\n+                        range: 20..31,\n                         kind: HasReferences {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -712,7 +708,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 0..12,\n+                        range: 7..11,\n                         kind: HasImpls {\n                             position: FilePosition {\n                                 file_id: FileId(\n@@ -736,7 +732,7 @@ fn main() {\n                         },\n                     },\n                     Annotation {\n-                        range: 0..12,\n+                        range: 7..11,\n                         kind: HasReferences {\n                             position: FilePosition {\n                                 file_id: FileId("}]}