{"sha": "50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZTFhZTE1ZTlmMzAzNWIwNmJhZTAwZTFiMWRjN2EzNTg1NDZkM2U=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-12-12T14:32:30Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-01-18T20:09:30Z"}, "message": "Use ty::{IntTy,UintTy,FloatTy} in rustc", "tree": {"sha": "e5cee77dc418dba544f105f5732636aa63f558f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5cee77dc418dba544f105f5732636aa63f558f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "html_url": "https://github.com/rust-lang/rust/commit/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/933bb18956f8e8a57e130ce0c9d342becc0ad0ae", "html_url": "https://github.com/rust-lang/rust/commit/933bb18956f8e8a57e130ce0c9d342becc0ad0ae"}], "stats": {"total": 382, "additions": 188, "deletions": 194}, "files": [{"sha": "f31c58b92e4079e0d0caf5a3c3f3591632036c6b", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -83,15 +83,14 @@ mod vtable;\n mod prelude {\n     pub(crate) use std::convert::{TryFrom, TryInto};\n \n-    pub(crate) use rustc_ast::ast::{FloatTy, IntTy, UintTy};\n     pub(crate) use rustc_span::Span;\n \n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n     pub(crate) use rustc_middle::bug;\n     pub(crate) use rustc_middle::mir::{self, *};\n     pub(crate) use rustc_middle::ty::layout::{self, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n-        self, FnSig, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeAndMut, TypeFoldable,\n+        self, FloatTy, FnSig, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut, TypeFoldable, UintTy,\n     };\n     pub(crate) use rustc_target::abi::{Abi, LayoutOf, Scalar, Size, VariantIdx};\n "}, {"sha": "d2f4d3edc2207d4fffdce73c200482eb6cc6df12", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -304,9 +304,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         lhs: Self::Value,\n         rhs: Self::Value,\n     ) -> (Self::Value, Self::Value) {\n-        use rustc_ast::IntTy::*;\n-        use rustc_ast::UintTy::*;\n         use rustc_middle::ty::{Int, Uint};\n+        use rustc_middle::ty::{IntTy::*, UintTy::*};\n \n         let new_kind = match ty.kind() {\n             Int(t @ Isize) => Int(t.normalize(self.tcx.sess.target.pointer_width)),"}, {"sha": "3a4e1492af3378750372afb487c966151528df58", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -18,7 +18,6 @@ use crate::llvm::debuginfo::{\n };\n use crate::value::Value;\n \n-use rustc_ast as ast;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -830,37 +829,37 @@ trait MsvcBasicName {\n     fn msvc_basic_name(self) -> &'static str;\n }\n \n-impl MsvcBasicName for ast::IntTy {\n+impl MsvcBasicName for ty::IntTy {\n     fn msvc_basic_name(self) -> &'static str {\n         match self {\n-            ast::IntTy::Isize => \"ptrdiff_t\",\n-            ast::IntTy::I8 => \"__int8\",\n-            ast::IntTy::I16 => \"__int16\",\n-            ast::IntTy::I32 => \"__int32\",\n-            ast::IntTy::I64 => \"__int64\",\n-            ast::IntTy::I128 => \"__int128\",\n+            ty::IntTy::Isize => \"ptrdiff_t\",\n+            ty::IntTy::I8 => \"__int8\",\n+            ty::IntTy::I16 => \"__int16\",\n+            ty::IntTy::I32 => \"__int32\",\n+            ty::IntTy::I64 => \"__int64\",\n+            ty::IntTy::I128 => \"__int128\",\n         }\n     }\n }\n \n-impl MsvcBasicName for ast::UintTy {\n+impl MsvcBasicName for ty::UintTy {\n     fn msvc_basic_name(self) -> &'static str {\n         match self {\n-            ast::UintTy::Usize => \"size_t\",\n-            ast::UintTy::U8 => \"unsigned __int8\",\n-            ast::UintTy::U16 => \"unsigned __int16\",\n-            ast::UintTy::U32 => \"unsigned __int32\",\n-            ast::UintTy::U64 => \"unsigned __int64\",\n-            ast::UintTy::U128 => \"unsigned __int128\",\n+            ty::UintTy::Usize => \"size_t\",\n+            ty::UintTy::U8 => \"unsigned __int8\",\n+            ty::UintTy::U16 => \"unsigned __int16\",\n+            ty::UintTy::U32 => \"unsigned __int32\",\n+            ty::UintTy::U64 => \"unsigned __int64\",\n+            ty::UintTy::U128 => \"unsigned __int128\",\n         }\n     }\n }\n \n-impl MsvcBasicName for ast::FloatTy {\n+impl MsvcBasicName for ty::FloatTy {\n     fn msvc_basic_name(self) -> &'static str {\n         match self {\n-            ast::FloatTy::F32 => \"float\",\n-            ast::FloatTy::F64 => \"double\",\n+            ty::FloatTy::F32 => \"float\",\n+            ty::FloatTy::F64 => \"double\",\n         }\n     }\n }"}, {"sha": "8fd0caae479a8cc2ff4fdecfc2b55e1340f0726d", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -7,13 +7,12 @@ use crate::llvm;\n use crate::llvm::{Bool, False, True};\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use rustc_ast as ast;\n use rustc_codegen_ssa::common::TypeKind;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::bug;\n use rustc_middle::ty::layout::TyAndLayout;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{self, Ty};\n use rustc_target::abi::call::{CastTarget, FnAbi, Reg};\n use rustc_target::abi::{AddressSpace, Align, Integer, Size};\n \n@@ -80,32 +79,32 @@ impl CodegenCx<'ll, 'tcx> {\n         self.type_i8()\n     }\n \n-    crate fn type_int_from_ty(&self, t: ast::IntTy) -> &'ll Type {\n+    crate fn type_int_from_ty(&self, t: ty::IntTy) -> &'ll Type {\n         match t {\n-            ast::IntTy::Isize => self.type_isize(),\n-            ast::IntTy::I8 => self.type_i8(),\n-            ast::IntTy::I16 => self.type_i16(),\n-            ast::IntTy::I32 => self.type_i32(),\n-            ast::IntTy::I64 => self.type_i64(),\n-            ast::IntTy::I128 => self.type_i128(),\n+            ty::IntTy::Isize => self.type_isize(),\n+            ty::IntTy::I8 => self.type_i8(),\n+            ty::IntTy::I16 => self.type_i16(),\n+            ty::IntTy::I32 => self.type_i32(),\n+            ty::IntTy::I64 => self.type_i64(),\n+            ty::IntTy::I128 => self.type_i128(),\n         }\n     }\n \n-    crate fn type_uint_from_ty(&self, t: ast::UintTy) -> &'ll Type {\n+    crate fn type_uint_from_ty(&self, t: ty::UintTy) -> &'ll Type {\n         match t {\n-            ast::UintTy::Usize => self.type_isize(),\n-            ast::UintTy::U8 => self.type_i8(),\n-            ast::UintTy::U16 => self.type_i16(),\n-            ast::UintTy::U32 => self.type_i32(),\n-            ast::UintTy::U64 => self.type_i64(),\n-            ast::UintTy::U128 => self.type_i128(),\n+            ty::UintTy::Usize => self.type_isize(),\n+            ty::UintTy::U8 => self.type_i8(),\n+            ty::UintTy::U16 => self.type_i16(),\n+            ty::UintTy::U32 => self.type_i32(),\n+            ty::UintTy::U64 => self.type_i64(),\n+            ty::UintTy::U128 => self.type_i128(),\n         }\n     }\n \n-    crate fn type_float_from_ty(&self, t: ast::FloatTy) -> &'ll Type {\n+    crate fn type_float_from_ty(&self, t: ty::FloatTy) -> &'ll Type {\n         match t {\n-            ast::FloatTy::F32 => self.type_f32(),\n-            ast::FloatTy::F64 => self.type_f64(),\n+            ty::FloatTy::F32 => self.type_f32(),\n+            ty::FloatTy::F64 => self.type_f64(),\n         }\n     }\n "}, {"sha": "c821908167870088f98a72425f2ec1f0e39834fb", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -875,20 +875,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             ty::Uint(_) => value.to_string(),\n                             ty::Int(int_ty) => {\n                                 match int_ty.normalize(bx.tcx().sess.target.pointer_width) {\n-                                    ast::IntTy::I8 => (value as i8).to_string(),\n-                                    ast::IntTy::I16 => (value as i16).to_string(),\n-                                    ast::IntTy::I32 => (value as i32).to_string(),\n-                                    ast::IntTy::I64 => (value as i64).to_string(),\n-                                    ast::IntTy::I128 => (value as i128).to_string(),\n-                                    ast::IntTy::Isize => unreachable!(),\n+                                    ty::IntTy::I8 => (value as i8).to_string(),\n+                                    ty::IntTy::I16 => (value as i16).to_string(),\n+                                    ty::IntTy::I32 => (value as i32).to_string(),\n+                                    ty::IntTy::I64 => (value as i64).to_string(),\n+                                    ty::IntTy::I128 => (value as i128).to_string(),\n+                                    ty::IntTy::Isize => unreachable!(),\n                                 }\n                             }\n-                            ty::Float(ast::FloatTy::F32) => {\n-                                f32::from_bits(value as u32).to_string()\n-                            }\n-                            ty::Float(ast::FloatTy::F64) => {\n-                                f64::from_bits(value as u64).to_string()\n-                            }\n+                            ty::Float(ty::FloatTy::F32) => f32::from_bits(value as u32).to_string(),\n+                            ty::Float(ty::FloatTy::F64) => f64::from_bits(value as u64).to_string(),\n                             _ => span_bug!(span, \"asm const has bad type {}\", ty),\n                         };\n                         InlineAsmOperandRef::Const { string }"}, {"sha": "e034ac5e8fd70c665c86f0bc9d12d736112311dc", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -34,7 +34,6 @@ use super::{InferCtxt, MiscVariable, TypeTrace};\n \n use crate::traits::{Obligation, PredicateObligations};\n \n-use rustc_ast as ast;\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::traits::ObligationCause;\n@@ -281,7 +280,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         &self,\n         vid_is_expected: bool,\n         vid: ty::FloatVid,\n-        val: ast::FloatTy,\n+        val: ty::FloatTy,\n     ) -> RelateResult<'tcx, Ty<'tcx>> {\n         self.inner\n             .borrow_mut()"}, {"sha": "1e879d29370607d096f01c27f95a82b09ff90c3c", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -168,25 +168,25 @@ fn lint_overflowing_range_endpoint<'tcx>(\n \n // For `isize` & `usize`, be conservative with the warnings, so that the\n // warnings are consistent between 32- and 64-bit platforms.\n-fn int_ty_range(int_ty: ast::IntTy) -> (i128, i128) {\n+fn int_ty_range(int_ty: ty::IntTy) -> (i128, i128) {\n     match int_ty {\n-        ast::IntTy::Isize => (i64::MIN.into(), i64::MAX.into()),\n-        ast::IntTy::I8 => (i8::MIN.into(), i8::MAX.into()),\n-        ast::IntTy::I16 => (i16::MIN.into(), i16::MAX.into()),\n-        ast::IntTy::I32 => (i32::MIN.into(), i32::MAX.into()),\n-        ast::IntTy::I64 => (i64::MIN.into(), i64::MAX.into()),\n-        ast::IntTy::I128 => (i128::MIN, i128::MAX),\n+        ty::IntTy::Isize => (i64::MIN.into(), i64::MAX.into()),\n+        ty::IntTy::I8 => (i8::MIN.into(), i8::MAX.into()),\n+        ty::IntTy::I16 => (i16::MIN.into(), i16::MAX.into()),\n+        ty::IntTy::I32 => (i32::MIN.into(), i32::MAX.into()),\n+        ty::IntTy::I64 => (i64::MIN.into(), i64::MAX.into()),\n+        ty::IntTy::I128 => (i128::MIN, i128::MAX),\n     }\n }\n \n-fn uint_ty_range(uint_ty: ast::UintTy) -> (u128, u128) {\n+fn uint_ty_range(uint_ty: ty::UintTy) -> (u128, u128) {\n     let max = match uint_ty {\n-        ast::UintTy::Usize => u64::MAX.into(),\n-        ast::UintTy::U8 => u8::MAX.into(),\n-        ast::UintTy::U16 => u16::MAX.into(),\n-        ast::UintTy::U32 => u32::MAX.into(),\n-        ast::UintTy::U64 => u64::MAX.into(),\n-        ast::UintTy::U128 => u128::MAX,\n+        ty::UintTy::Usize => u64::MAX.into(),\n+        ty::UintTy::U8 => u8::MAX.into(),\n+        ty::UintTy::U16 => u16::MAX.into(),\n+        ty::UintTy::U32 => u32::MAX.into(),\n+        ty::UintTy::U64 => u64::MAX.into(),\n+        ty::UintTy::U128 => u128::MAX,\n     };\n     (0, max)\n }\n@@ -258,8 +258,8 @@ fn report_bin_hex_error(\n //\n // No suggestion for: `isize`, `usize`.\n fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<&'static str> {\n-    use rustc_ast::IntTy::*;\n-    use rustc_ast::UintTy::*;\n+    use ty::IntTy::*;\n+    use ty::UintTy::*;\n     macro_rules! find_fit {\n         ($ty:expr, $val:expr, $negative:expr,\n          $($type:ident => [$($utypes:expr),*] => [$($itypes:expr),*]),+) => {\n@@ -302,7 +302,7 @@ fn lint_int_literal<'tcx>(\n     type_limits: &TypeLimits,\n     e: &'tcx hir::Expr<'tcx>,\n     lit: &hir::Lit,\n-    t: ast::IntTy,\n+    t: ty::IntTy,\n     v: u128,\n ) {\n     let int_type = t.normalize(cx.sess().target.pointer_width);\n@@ -314,7 +314,14 @@ fn lint_int_literal<'tcx>(\n     // avoiding use of -min to prevent overflow/panic\n     if (negative && v > max + 1) || (!negative && v > max) {\n         if let Some(repr_str) = get_bin_hex_repr(cx, lit) {\n-            report_bin_hex_error(cx, e, attr::IntType::SignedInt(t), repr_str, v, negative);\n+            report_bin_hex_error(\n+                cx,\n+                e,\n+                attr::IntType::SignedInt(ty::ast_int_ty(t)),\n+                repr_str,\n+                v,\n+                negative,\n+            );\n             return;\n         }\n \n@@ -351,7 +358,7 @@ fn lint_uint_literal<'tcx>(\n     cx: &LateContext<'tcx>,\n     e: &'tcx hir::Expr<'tcx>,\n     lit: &hir::Lit,\n-    t: ast::UintTy,\n+    t: ty::UintTy,\n ) {\n     let uint_type = t.normalize(cx.sess().target.pointer_width);\n     let (min, max) = uint_ty_range(uint_type);\n@@ -391,7 +398,14 @@ fn lint_uint_literal<'tcx>(\n             }\n         }\n         if let Some(repr_str) = get_bin_hex_repr(cx, lit) {\n-            report_bin_hex_error(cx, e, attr::IntType::UnsignedInt(t), repr_str, lit_val, false);\n+            report_bin_hex_error(\n+                cx,\n+                e,\n+                attr::IntType::UnsignedInt(ty::ast_uint_ty(t)),\n+                repr_str,\n+                lit_val,\n+                false,\n+            );\n             return;\n         }\n         cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, |lint| {\n@@ -430,8 +444,8 @@ fn lint_literal<'tcx>(\n         ty::Float(t) => {\n             let is_infinite = match lit.node {\n                 ast::LitKind::Float(v, _) => match t {\n-                    ast::FloatTy::F32 => v.as_str().parse().map(f32::is_infinite),\n-                    ast::FloatTy::F64 => v.as_str().parse().map(f64::is_infinite),\n+                    ty::FloatTy::F32 => v.as_str().parse().map(f32::is_infinite),\n+                    ty::FloatTy::F64 => v.as_str().parse().map(f64::is_infinite),\n                 },\n                 _ => bug!(),\n             };\n@@ -984,7 +998,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 help: Some(\"consider using `u32` or `libc::wchar_t` instead\".into()),\n             },\n \n-            ty::Int(ast::IntTy::I128) | ty::Uint(ast::UintTy::U128) => FfiUnsafe {\n+            ty::Int(ty::IntTy::I128) | ty::Uint(ty::UintTy::U128) => FfiUnsafe {\n                 ty,\n                 reason: \"128-bit integers don't currently have a known stable ABI\".into(),\n                 help: None,"}, {"sha": "128d8cff95e6b321719e66197a9e1b2f4c7a1c0c", "filename": "compiler/rustc_mir/src/interpret/cast.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -2,13 +2,11 @@ use std::convert::TryFrom;\n \n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::{Float, FloatConvert};\n-use rustc_ast::FloatTy;\n-use rustc_attr as attr;\n use rustc_middle::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc_middle::mir::CastKind;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::{IntegerExt, TyAndLayout};\n-use rustc_middle::ty::{self, Ty, TypeAndMut};\n+use rustc_middle::ty::{self, FloatTy, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n use rustc_target::abi::{Integer, LayoutOf, Variants};\n \n@@ -203,8 +201,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match *cast_ty.kind() {\n             Int(_) | Uint(_) | RawPtr(_) => {\n                 let size = match *cast_ty.kind() {\n-                    Int(t) => Integer::from_attr(self, attr::IntType::SignedInt(t)).size(),\n-                    Uint(t) => Integer::from_attr(self, attr::IntType::UnsignedInt(t)).size(),\n+                    Int(t) => Integer::from_int_ty(self, t).size(),\n+                    Uint(t) => Integer::from_uint_ty(self, t).size(),\n                     RawPtr(_) => self.pointer_size(),\n                     _ => bug!(),\n                 };\n@@ -235,7 +233,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match *dest_ty.kind() {\n             // float -> uint\n             Uint(t) => {\n-                let size = Integer::from_attr(self, attr::IntType::UnsignedInt(t)).size();\n+                let size = Integer::from_uint_ty(self, t).size();\n                 // `to_u128` is a saturating cast, which is what we need\n                 // (https://doc.rust-lang.org/nightly/nightly-rustc/rustc_apfloat/trait.Float.html#method.to_i128_r).\n                 let v = f.to_u128(size.bits_usize()).value;\n@@ -244,7 +242,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             // float -> int\n             Int(t) => {\n-                let size = Integer::from_attr(self, attr::IntType::SignedInt(t)).size();\n+                let size = Integer::from_int_ty(self, t).size();\n                 // `to_i128` is a saturating cast, which is what we need\n                 // (https://doc.rust-lang.org/nightly/nightly-rustc/rustc_apfloat/trait.Float.html#method.to_i128_r).\n                 let v = f.to_i128(size.bits_usize()).value;"}, {"sha": "f5081655015b479027e4ddc63d856f7ee21b0fcb", "filename": "compiler/rustc_mir/src/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperator.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -1,10 +1,9 @@\n use std::convert::TryFrom;\n \n use rustc_apfloat::Float;\n-use rustc_ast::FloatTy;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n-use rustc_middle::ty::{self, layout::TyAndLayout, Ty};\n+use rustc_middle::ty::{self, layout::TyAndLayout, FloatTy, Ty};\n use rustc_target::abi::LayoutOf;\n \n use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};"}, {"sha": "02cc4de529035045ce97677b400d8ece93802af0", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -15,7 +15,6 @@\n use crate::build::matches::{Ascription, Binding, Candidate, MatchPair};\n use crate::build::Builder;\n use crate::thir::{self, *};\n-use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_hir::RangeEnd;\n use rustc_middle::mir::Place;\n use rustc_middle::ty;\n@@ -203,13 +202,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         (Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32))), 0)\n                     }\n                     ty::Int(ity) => {\n-                        let size = Integer::from_attr(&tcx, SignedInt(ity)).size();\n+                        let size = Integer::from_int_ty(&tcx, ity).size();\n                         let max = size.truncate(u128::MAX);\n                         let bias = 1u128 << (size.bits() - 1);\n                         (Some((0, max, size)), bias)\n                     }\n                     ty::Uint(uty) => {\n-                        let size = Integer::from_attr(&tcx, UnsignedInt(uty)).size();\n+                        let size = Integer::from_uint_ty(&tcx, uty).size();\n                         let max = size.truncate(u128::MAX);\n                         (Some((0, max, size)), 0)\n                     }"}, {"sha": "969f7d1e3a458f92d1329d5b7ac7fc58bc95ffd7", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -39,7 +39,7 @@ crate fn lit_to_const<'tcx>(\n             let id = tcx.allocate_bytes(data);\n             ConstValue::Scalar(Scalar::Ptr(id.into()))\n         }\n-        (ast::LitKind::Byte(n), ty::Uint(ast::UintTy::U8)) => {\n+        (ast::LitKind::Byte(n), ty::Uint(ty::UintTy::U8)) => {\n             ConstValue::Scalar(Scalar::from_uint(*n, Size::from_bytes(1)))\n         }\n         (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n@@ -56,11 +56,11 @@ crate fn lit_to_const<'tcx>(\n     Ok(ty::Const::from_value(tcx, lit, ty))\n }\n \n-fn parse_float<'tcx>(num: Symbol, fty: ast::FloatTy, neg: bool) -> Result<ConstValue<'tcx>, ()> {\n+fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> Result<ConstValue<'tcx>, ()> {\n     let num = num.as_str();\n     use rustc_apfloat::ieee::{Double, Single};\n     let scalar = match fty {\n-        ast::FloatTy::F32 => {\n+        ty::FloatTy::F32 => {\n             num.parse::<f32>().map_err(|_| ())?;\n             let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n                 panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n@@ -70,7 +70,7 @@ fn parse_float<'tcx>(num: Symbol, fty: ast::FloatTy, neg: bool) -> Result<ConstV\n             }\n             Scalar::from_f32(f)\n         }\n-        ast::FloatTy::F64 => {\n+        ty::FloatTy::F64 => {\n             num.parse::<f64>().map_err(|_| ())?;\n             let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n                 panic!(\"apfloat::ieee::Double failed to parse `{}`: {:?}\", num, e)"}, {"sha": "e67166c99c8daa08a49104a5b87f6f226833fcbd", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -52,7 +52,6 @@ use super::{FieldPat, Pat, PatKind, PatRange};\n use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n \n-use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{HirId, RangeEnd};\n use rustc_middle::mir::interpret::ConstValue;\n@@ -103,10 +102,10 @@ impl IntRange {\n             ty::Bool => Some((Size::from_bytes(1), 0)),\n             ty::Char => Some((Size::from_bytes(4), 0)),\n             ty::Int(ity) => {\n-                let size = Integer::from_attr(&tcx, SignedInt(ity)).size();\n+                let size = Integer::from_int_ty(&tcx, ity).size();\n                 Some((size, 1u128 << (size.bits() as u128 - 1)))\n             }\n-            ty::Uint(uty) => Some((Integer::from_attr(&tcx, UnsignedInt(uty)).size(), 0)),\n+            ty::Uint(uty) => Some((Integer::from_uint_ty(&tcx, uty).size(), 0)),\n             _ => None,\n         }\n     }\n@@ -167,7 +166,7 @@ impl IntRange {\n     fn signed_bias(tcx: TyCtxt<'_>, ty: Ty<'_>) -> u128 {\n         match *ty.kind() {\n             ty::Int(ity) => {\n-                let bits = Integer::from_attr(&tcx, SignedInt(ity)).size().bits() as u128;\n+                let bits = Integer::from_int_ty(&tcx, ity).size().bits() as u128;\n                 1u128 << (bits - 1)\n             }\n             _ => 0,\n@@ -959,13 +958,13 @@ impl<'tcx> SplitWildcard<'tcx> {\n                 smallvec![NonExhaustive]\n             }\n             &ty::Int(ity) => {\n-                let bits = Integer::from_attr(&cx.tcx, SignedInt(ity)).size().bits() as u128;\n+                let bits = Integer::from_int_ty(&cx.tcx, ity).size().bits() as u128;\n                 let min = 1u128 << (bits - 1);\n                 let max = min - 1;\n                 smallvec![make_range(min, max)]\n             }\n             &ty::Uint(uty) => {\n-                let size = Integer::from_attr(&cx.tcx, UnsignedInt(uty)).size();\n+                let size = Integer::from_uint_ty(&cx.tcx, uty).size();\n                 let max = size.truncate(u128::MAX);\n                 smallvec![make_range(0, max)]\n             }"}, {"sha": "7186e26be800ea12285d13db07698dd9dd1762f1", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -9,7 +9,6 @@ pub(crate) use self::check_match::check_match;\n \n use crate::thir::util::UserAnnotatedTyHelpers;\n \n-use rustc_ast as ast;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n@@ -1069,20 +1068,19 @@ crate fn compare_const_vals<'tcx>(\n     if let (Some(a), Some(b)) = (a_bits, b_bits) {\n         use rustc_apfloat::Float;\n         return match *ty.kind() {\n-            ty::Float(ast::FloatTy::F32) => {\n+            ty::Float(ty::FloatTy::F32) => {\n                 let l = rustc_apfloat::ieee::Single::from_bits(a);\n                 let r = rustc_apfloat::ieee::Single::from_bits(b);\n                 l.partial_cmp(&r)\n             }\n-            ty::Float(ast::FloatTy::F64) => {\n+            ty::Float(ty::FloatTy::F64) => {\n                 let l = rustc_apfloat::ieee::Double::from_bits(a);\n                 let r = rustc_apfloat::ieee::Double::from_bits(b);\n                 l.partial_cmp(&r)\n             }\n             ty::Int(ity) => {\n-                use rustc_attr::SignedInt;\n                 use rustc_middle::ty::layout::IntegerExt;\n-                let size = rustc_target::abi::Integer::from_attr(&tcx, SignedInt(ity)).size();\n+                let size = rustc_target::abi::Integer::from_int_ty(&tcx, ity).size();\n                 let a = size.sign_extend(a);\n                 let b = size.sign_extend(b);\n                 Some((a as i128).cmp(&(b as i128)))"}, {"sha": "0f4bb635eeefd87c2c671853210537b3a12713f5", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::{FloatTy, InlineAsmTemplatePiece, IntTy, UintTy};\n+use rustc_ast::InlineAsmTemplatePiece;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -7,7 +7,7 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, FloatTy, IntTy, Ty, TyCtxt, UintTy};\n use rustc_session::lint;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};"}, {"sha": "c84e2cb45a6c4ea725ab88a99d89970f76f05d78", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -1,12 +1,11 @@\n-use rustc_ast::{FloatTy, IntTy, UintTy};\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeFoldable, UintTy};\n use rustc_target::spec::abi::Abi;\n \n use std::fmt::Write;"}, {"sha": "bb48ed936188b1f70442f208f08e93e7dbcf17f4", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -346,26 +346,26 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 (ty::Char, Scalar(Char)) => true,\n                 (ty::Int(ty1), Scalar(Int(ty2))) => matches!(\n                     (ty1, ty2),\n-                    (ast::IntTy::Isize, chalk_ir::IntTy::Isize)\n-                        | (ast::IntTy::I8, chalk_ir::IntTy::I8)\n-                        | (ast::IntTy::I16, chalk_ir::IntTy::I16)\n-                        | (ast::IntTy::I32, chalk_ir::IntTy::I32)\n-                        | (ast::IntTy::I64, chalk_ir::IntTy::I64)\n-                        | (ast::IntTy::I128, chalk_ir::IntTy::I128)\n+                    (ty::IntTy::Isize, chalk_ir::IntTy::Isize)\n+                        | (ty::IntTy::I8, chalk_ir::IntTy::I8)\n+                        | (ty::IntTy::I16, chalk_ir::IntTy::I16)\n+                        | (ty::IntTy::I32, chalk_ir::IntTy::I32)\n+                        | (ty::IntTy::I64, chalk_ir::IntTy::I64)\n+                        | (ty::IntTy::I128, chalk_ir::IntTy::I128)\n                 ),\n                 (ty::Uint(ty1), Scalar(Uint(ty2))) => matches!(\n                     (ty1, ty2),\n-                    (ast::UintTy::Usize, chalk_ir::UintTy::Usize)\n-                        | (ast::UintTy::U8, chalk_ir::UintTy::U8)\n-                        | (ast::UintTy::U16, chalk_ir::UintTy::U16)\n-                        | (ast::UintTy::U32, chalk_ir::UintTy::U32)\n-                        | (ast::UintTy::U64, chalk_ir::UintTy::U64)\n-                        | (ast::UintTy::U128, chalk_ir::UintTy::U128)\n+                    (ty::UintTy::Usize, chalk_ir::UintTy::Usize)\n+                        | (ty::UintTy::U8, chalk_ir::UintTy::U8)\n+                        | (ty::UintTy::U16, chalk_ir::UintTy::U16)\n+                        | (ty::UintTy::U32, chalk_ir::UintTy::U32)\n+                        | (ty::UintTy::U64, chalk_ir::UintTy::U64)\n+                        | (ty::UintTy::U128, chalk_ir::UintTy::U128)\n                 ),\n                 (ty::Float(ty1), Scalar(Float(ty2))) => matches!(\n                     (ty1, ty2),\n-                    (ast::FloatTy::F32, chalk_ir::FloatTy::F32)\n-                        | (ast::FloatTy::F64, chalk_ir::FloatTy::F64)\n+                    (ty::FloatTy::F32, chalk_ir::FloatTy::F32)\n+                        | (ty::FloatTy::F64, chalk_ir::FloatTy::F64)\n                 ),\n                 (&ty::Tuple(substs), Tuple(len, _)) => substs.len() == *len,\n                 (&ty::Array(..), Array(..)) => true,"}, {"sha": "2a1a3f57e2313f702ba852b465aa1cb4da4e054b", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -233,8 +233,6 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::AliasEq<RustInterner<'tcx>>>\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n     fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::Ty<RustInterner<'tcx>> {\n-        use rustc_ast as ast;\n-\n         let int = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Int(i));\n         let uint = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Uint(i));\n         let float = |f| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Float(f));\n@@ -243,24 +241,24 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             ty::Bool => chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Bool),\n             ty::Char => chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Char),\n             ty::Int(ty) => match ty {\n-                ast::IntTy::Isize => int(chalk_ir::IntTy::Isize),\n-                ast::IntTy::I8 => int(chalk_ir::IntTy::I8),\n-                ast::IntTy::I16 => int(chalk_ir::IntTy::I16),\n-                ast::IntTy::I32 => int(chalk_ir::IntTy::I32),\n-                ast::IntTy::I64 => int(chalk_ir::IntTy::I64),\n-                ast::IntTy::I128 => int(chalk_ir::IntTy::I128),\n+                ty::IntTy::Isize => int(chalk_ir::IntTy::Isize),\n+                ty::IntTy::I8 => int(chalk_ir::IntTy::I8),\n+                ty::IntTy::I16 => int(chalk_ir::IntTy::I16),\n+                ty::IntTy::I32 => int(chalk_ir::IntTy::I32),\n+                ty::IntTy::I64 => int(chalk_ir::IntTy::I64),\n+                ty::IntTy::I128 => int(chalk_ir::IntTy::I128),\n             },\n             ty::Uint(ty) => match ty {\n-                ast::UintTy::Usize => uint(chalk_ir::UintTy::Usize),\n-                ast::UintTy::U8 => uint(chalk_ir::UintTy::U8),\n-                ast::UintTy::U16 => uint(chalk_ir::UintTy::U16),\n-                ast::UintTy::U32 => uint(chalk_ir::UintTy::U32),\n-                ast::UintTy::U64 => uint(chalk_ir::UintTy::U64),\n-                ast::UintTy::U128 => uint(chalk_ir::UintTy::U128),\n+                ty::UintTy::Usize => uint(chalk_ir::UintTy::Usize),\n+                ty::UintTy::U8 => uint(chalk_ir::UintTy::U8),\n+                ty::UintTy::U16 => uint(chalk_ir::UintTy::U16),\n+                ty::UintTy::U32 => uint(chalk_ir::UintTy::U32),\n+                ty::UintTy::U64 => uint(chalk_ir::UintTy::U64),\n+                ty::UintTy::U128 => uint(chalk_ir::UintTy::U128),\n             },\n             ty::Float(ty) => match ty {\n-                ast::FloatTy::F32 => float(chalk_ir::FloatTy::F32),\n-                ast::FloatTy::F64 => float(chalk_ir::FloatTy::F64),\n+                ty::FloatTy::F32 => float(chalk_ir::FloatTy::F32),\n+                ty::FloatTy::F64 => float(chalk_ir::FloatTy::F64),\n             },\n             ty::Adt(def, substs) => {\n                 chalk_ir::TyKind::Adt(chalk_ir::AdtId(def), substs.lower_into(interner))\n@@ -347,24 +345,24 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 chalk_ir::Scalar::Bool => ty::Bool,\n                 chalk_ir::Scalar::Char => ty::Char,\n                 chalk_ir::Scalar::Int(int_ty) => match int_ty {\n-                    chalk_ir::IntTy::Isize => ty::Int(ast::IntTy::Isize),\n-                    chalk_ir::IntTy::I8 => ty::Int(ast::IntTy::I8),\n-                    chalk_ir::IntTy::I16 => ty::Int(ast::IntTy::I16),\n-                    chalk_ir::IntTy::I32 => ty::Int(ast::IntTy::I32),\n-                    chalk_ir::IntTy::I64 => ty::Int(ast::IntTy::I64),\n-                    chalk_ir::IntTy::I128 => ty::Int(ast::IntTy::I128),\n+                    chalk_ir::IntTy::Isize => ty::Int(ty::IntTy::Isize),\n+                    chalk_ir::IntTy::I8 => ty::Int(ty::IntTy::I8),\n+                    chalk_ir::IntTy::I16 => ty::Int(ty::IntTy::I16),\n+                    chalk_ir::IntTy::I32 => ty::Int(ty::IntTy::I32),\n+                    chalk_ir::IntTy::I64 => ty::Int(ty::IntTy::I64),\n+                    chalk_ir::IntTy::I128 => ty::Int(ty::IntTy::I128),\n                 },\n                 chalk_ir::Scalar::Uint(int_ty) => match int_ty {\n-                    chalk_ir::UintTy::Usize => ty::Uint(ast::UintTy::Usize),\n-                    chalk_ir::UintTy::U8 => ty::Uint(ast::UintTy::U8),\n-                    chalk_ir::UintTy::U16 => ty::Uint(ast::UintTy::U16),\n-                    chalk_ir::UintTy::U32 => ty::Uint(ast::UintTy::U32),\n-                    chalk_ir::UintTy::U64 => ty::Uint(ast::UintTy::U64),\n-                    chalk_ir::UintTy::U128 => ty::Uint(ast::UintTy::U128),\n+                    chalk_ir::UintTy::Usize => ty::Uint(ty::UintTy::Usize),\n+                    chalk_ir::UintTy::U8 => ty::Uint(ty::UintTy::U8),\n+                    chalk_ir::UintTy::U16 => ty::Uint(ty::UintTy::U16),\n+                    chalk_ir::UintTy::U32 => ty::Uint(ty::UintTy::U32),\n+                    chalk_ir::UintTy::U64 => ty::Uint(ty::UintTy::U64),\n+                    chalk_ir::UintTy::U128 => ty::Uint(ty::UintTy::U128),\n                 },\n                 chalk_ir::Scalar::Float(float_ty) => match float_ty {\n-                    chalk_ir::FloatTy::F32 => ty::Float(ast::FloatTy::F32),\n-                    chalk_ir::FloatTy::F64 => ty::Float(ast::FloatTy::F64),\n+                    chalk_ir::FloatTy::F32 => ty::Float(ty::FloatTy::F32),\n+                    chalk_ir::FloatTy::F64 => ty::Float(ty::FloatTy::F64),\n                 },\n             },\n             TyKind::Array(ty, c) => {"}, {"sha": "437813ea41bd592f13e6ff16c8a2d83b2c1afc21", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -2059,9 +2059,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 match prim_ty {\n                     hir::PrimTy::Bool => tcx.types.bool,\n                     hir::PrimTy::Char => tcx.types.char,\n-                    hir::PrimTy::Int(it) => tcx.mk_mach_int(it),\n-                    hir::PrimTy::Uint(uit) => tcx.mk_mach_uint(uit),\n-                    hir::PrimTy::Float(ft) => tcx.mk_mach_float(ft),\n+                    hir::PrimTy::Int(it) => tcx.mk_mach_int(ty::int_ty(it)),\n+                    hir::PrimTy::Uint(uit) => tcx.mk_mach_uint(ty::uint_ty(uit)),\n+                    hir::PrimTy::Float(ft) => tcx.mk_mach_float(ty::float_ty(ft)),\n                     hir::PrimTy::Str => tcx.types.str_,\n                 }\n             }"}, {"sha": "7924ffe8a6fd5a133f7b9d1731acd724d25801a5", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -32,7 +32,6 @@ use super::FnCtxt;\n \n use crate::hir::def_id::DefId;\n use crate::type_error_struct;\n-use rustc_ast as ast;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n@@ -660,7 +659,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             (_, Int(Bool)) => Err(CastError::CastToBool),\n \n             // * -> Char\n-            (Int(U(ast::UintTy::U8)), Int(Char)) => Ok(CastKind::U8CharCast), // u8-char-cast\n+            (Int(U(ty::UintTy::U8)), Int(Char)) => Ok(CastKind::U8CharCast), // u8-char-cast\n             (_, Int(Char)) => Err(CastError::CastToChar),\n \n             // prim -> float,ptr"}, {"sha": "ee693e4b5da2ef9082b8cac37853b2b56b6c8ac1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -373,13 +373,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // in C but we just error out instead and require explicit casts.\n                 let arg_ty = self.structurally_resolved_type(arg.span, arg_ty);\n                 match arg_ty.kind() {\n-                    ty::Float(ast::FloatTy::F32) => {\n+                    ty::Float(ty::FloatTy::F32) => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_double\");\n                     }\n-                    ty::Int(ast::IntTy::I8 | ast::IntTy::I16) | ty::Bool => {\n+                    ty::Int(ty::IntTy::I8 | ty::IntTy::I16) | ty::Bool => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_int\");\n                     }\n-                    ty::Uint(ast::UintTy::U8 | ast::UintTy::U16) => {\n+                    ty::Uint(ty::UintTy::U8 | ty::UintTy::U16) => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_uint\");\n                     }\n                     ty::FnDef(..) => {\n@@ -408,8 +408,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ast::LitKind::Byte(_) => tcx.types.u8,\n             ast::LitKind::Char(_) => tcx.types.char,\n-            ast::LitKind::Int(_, ast::LitIntType::Signed(t)) => tcx.mk_mach_int(t),\n-            ast::LitKind::Int(_, ast::LitIntType::Unsigned(t)) => tcx.mk_mach_uint(t),\n+            ast::LitKind::Int(_, ast::LitIntType::Signed(t)) => tcx.mk_mach_int(ty::int_ty(t)),\n+            ast::LitKind::Int(_, ast::LitIntType::Unsigned(t)) => tcx.mk_mach_uint(ty::uint_ty(t)),\n             ast::LitKind::Int(_, ast::LitIntType::Unsuffixed) => {\n                 let opt_ty = expected.to_option(self).and_then(|ty| match ty.kind() {\n                     ty::Int(_) | ty::Uint(_) => Some(ty),\n@@ -420,7 +420,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 });\n                 opt_ty.unwrap_or_else(|| self.next_int_var())\n             }\n-            ast::LitKind::Float(_, ast::LitFloatType::Suffixed(t)) => tcx.mk_mach_float(t),\n+            ast::LitKind::Float(_, ast::LitFloatType::Suffixed(t)) => {\n+                tcx.mk_mach_float(ty::float_ty(t))\n+            }\n             ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) => {\n                 let opt_ty = expected.to_option(self).and_then(|ty| match ty.kind() {\n                     ty::Float(_) => Some(ty),"}, {"sha": "158c214759db27c507c325742742cb15e2a836e4", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -8,7 +8,6 @@ use crate::errors::MethodCallOnUnknownType;\n use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n \n-use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n@@ -662,30 +661,30 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             }\n             ty::Int(i) => {\n                 let lang_def_id = match i {\n-                    ast::IntTy::I8 => lang_items.i8_impl(),\n-                    ast::IntTy::I16 => lang_items.i16_impl(),\n-                    ast::IntTy::I32 => lang_items.i32_impl(),\n-                    ast::IntTy::I64 => lang_items.i64_impl(),\n-                    ast::IntTy::I128 => lang_items.i128_impl(),\n-                    ast::IntTy::Isize => lang_items.isize_impl(),\n+                    ty::IntTy::I8 => lang_items.i8_impl(),\n+                    ty::IntTy::I16 => lang_items.i16_impl(),\n+                    ty::IntTy::I32 => lang_items.i32_impl(),\n+                    ty::IntTy::I64 => lang_items.i64_impl(),\n+                    ty::IntTy::I128 => lang_items.i128_impl(),\n+                    ty::IntTy::Isize => lang_items.isize_impl(),\n                 };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::Uint(i) => {\n                 let lang_def_id = match i {\n-                    ast::UintTy::U8 => lang_items.u8_impl(),\n-                    ast::UintTy::U16 => lang_items.u16_impl(),\n-                    ast::UintTy::U32 => lang_items.u32_impl(),\n-                    ast::UintTy::U64 => lang_items.u64_impl(),\n-                    ast::UintTy::U128 => lang_items.u128_impl(),\n-                    ast::UintTy::Usize => lang_items.usize_impl(),\n+                    ty::UintTy::U8 => lang_items.u8_impl(),\n+                    ty::UintTy::U16 => lang_items.u16_impl(),\n+                    ty::UintTy::U32 => lang_items.u32_impl(),\n+                    ty::UintTy::U64 => lang_items.u64_impl(),\n+                    ty::UintTy::U128 => lang_items.u128_impl(),\n+                    ty::UintTy::Usize => lang_items.usize_impl(),\n                 };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::Float(f) => {\n                 let (lang_def_id1, lang_def_id2) = match f {\n-                    ast::FloatTy::F32 => (lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n-                    ast::FloatTy::F64 => (lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n+                    ty::FloatTy::F32 => (lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n+                    ty::FloatTy::F64 => (lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n                 };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id1);\n                 self.assemble_inherent_impl_for_primitive(lang_def_id2);"}, {"sha": "8a500852a03263bc66420a3451e3e50f7e48e18f", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e1ae15e9f3035b06bae00e1b1dc7a358546d3e/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=50e1ae15e9f3035b06bae00e1b1dc7a358546d3e", "patch": "@@ -13,7 +13,6 @@ use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::{self, CrateInherentImpls, TyCtxt};\n \n-use rustc_ast as ast;\n use rustc_span::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n@@ -178,7 +177,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Int(ast::IntTy::I8) => {\n+            ty::Int(ty::IntTy::I8) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.i8_impl(),\n@@ -189,7 +188,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Int(ast::IntTy::I16) => {\n+            ty::Int(ty::IntTy::I16) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.i16_impl(),\n@@ -200,7 +199,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Int(ast::IntTy::I32) => {\n+            ty::Int(ty::IntTy::I32) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.i32_impl(),\n@@ -211,7 +210,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Int(ast::IntTy::I64) => {\n+            ty::Int(ty::IntTy::I64) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.i64_impl(),\n@@ -222,7 +221,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Int(ast::IntTy::I128) => {\n+            ty::Int(ty::IntTy::I128) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.i128_impl(),\n@@ -233,7 +232,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Int(ast::IntTy::Isize) => {\n+            ty::Int(ty::IntTy::Isize) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.isize_impl(),\n@@ -244,7 +243,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Uint(ast::UintTy::U8) => {\n+            ty::Uint(ty::UintTy::U8) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.u8_impl(),\n@@ -255,7 +254,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Uint(ast::UintTy::U16) => {\n+            ty::Uint(ty::UintTy::U16) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.u16_impl(),\n@@ -266,7 +265,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Uint(ast::UintTy::U32) => {\n+            ty::Uint(ty::UintTy::U32) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.u32_impl(),\n@@ -277,7 +276,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Uint(ast::UintTy::U64) => {\n+            ty::Uint(ty::UintTy::U64) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.u64_impl(),\n@@ -288,7 +287,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Uint(ast::UintTy::U128) => {\n+            ty::Uint(ty::UintTy::U128) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.u128_impl(),\n@@ -299,7 +298,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Uint(ast::UintTy::Usize) => {\n+            ty::Uint(ty::UintTy::Usize) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.usize_impl(),\n@@ -310,7 +309,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Float(ast::FloatTy::F32) => {\n+            ty::Float(ty::FloatTy::F32) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.f32_impl(),\n@@ -321,7 +320,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     assoc_items,\n                 );\n             }\n-            ty::Float(ast::FloatTy::F64) => {\n+            ty::Float(ty::FloatTy::F64) => {\n                 self.check_primitive_impl(\n                     def_id,\n                     lang_items.f64_impl(),"}]}