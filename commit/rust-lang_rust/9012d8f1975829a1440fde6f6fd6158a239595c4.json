{"sha": "9012d8f1975829a1440fde6f6fd6158a239595c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMTJkOGYxOTc1ODI5YTE0NDBmZGU2ZjZmZDYxNThhMjM5NTk1YzQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-25T18:11:03Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-25T18:11:03Z"}, "message": "fixed false positives on structs/enum variants", "tree": {"sha": "eaeaaeea4424a1dd43508698521ddd0034be70f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaeaaeea4424a1dd43508698521ddd0034be70f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9012d8f1975829a1440fde6f6fd6158a239595c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9012d8f1975829a1440fde6f6fd6158a239595c4", "html_url": "https://github.com/rust-lang/rust/commit/9012d8f1975829a1440fde6f6fd6158a239595c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9012d8f1975829a1440fde6f6fd6158a239595c4/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56cdd58ad2312ecd941ba6eca8ddb5d7061a6a21", "url": "https://api.github.com/repos/rust-lang/rust/commits/56cdd58ad2312ecd941ba6eca8ddb5d7061a6a21", "html_url": "https://github.com/rust-lang/rust/commit/56cdd58ad2312ecd941ba6eca8ddb5d7061a6a21"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "2c16d9d78f429694fddfc573d9a135e58f47f306", "filename": "src/shadow.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9012d8f1975829a1440fde6f6fd6158a239595c4/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9012d8f1975829a1440fde6f6fd6158a239595c4/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=9012d8f1975829a1440fde6f6fd6158a239595c4", "patch": "@@ -65,13 +65,20 @@ fn check_decl(cx: &Context, decl: &Decl, bindings: &mut Vec<Name>) {\n     }\n }\n \n+fn is_binding(cx: &Context, pat: &Pat) -> bool {\n+    match cx.tcx.def_map.borrow().get(&pat.id).map(|d| d.full_def()) {\n+        Some(DefVariant(..)) | Some(DefStruct(..)) => false,\n+        _ => true\n+    }\n+}\n+\n fn check_pat<T>(cx: &Context, pat: &Pat, init: &Option<T>, span: Span,  \n         bindings: &mut Vec<Name>) where T: Deref<Target=Expr> {\n     //TODO: match more stuff / destructuring\n     match pat.node {\n         PatIdent(_, ref ident, ref inner) => {\n             let name = ident.node.name;\n-            if pat_is_binding(&cx.tcx.def_map, pat) {\n+            if is_binding(cx, pat) {\n                 if bindings.contains(&name) {\n                     lint_shadow(cx, name, span, pat.span, init);\n                 }"}]}