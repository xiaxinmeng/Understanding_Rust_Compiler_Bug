{"sha": "7695bd0be9cc6d08b9d58c1c0ef193458857ece7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OTViZDBiZTljYzZkMDhiOWQ1OGMxYzBlZjE5MzQ1ODg1N2VjZTc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-21T22:51:01Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:04Z"}, "message": "Use bit operators for min_max_ty", "tree": {"sha": "e400d4ef361fd57adbe70a9e0662b755281c625d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e400d4ef361fd57adbe70a9e0662b755281c625d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7695bd0be9cc6d08b9d58c1c0ef193458857ece7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7695bd0be9cc6d08b9d58c1c0ef193458857ece7", "html_url": "https://github.com/rust-lang/rust/commit/7695bd0be9cc6d08b9d58c1c0ef193458857ece7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7695bd0be9cc6d08b9d58c1c0ef193458857ece7/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00fd8f58c9c7780b83fbb4e5e2e419f1ddd37e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00fd8f58c9c7780b83fbb4e5e2e419f1ddd37e2", "html_url": "https://github.com/rust-lang/rust/commit/c00fd8f58c9c7780b83fbb4e5e2e419f1ddd37e2"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "9f0f07f2a9ce9703e4b7af8239caf0d6c0595e3f", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7695bd0be9cc6d08b9d58c1c0ef193458857ece7/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7695bd0be9cc6d08b9d58c1c0ef193458857ece7/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=7695bd0be9cc6d08b9d58c1c0ef193458857ece7", "patch": "@@ -472,18 +472,20 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         }\n         ty::TyInt(int_ty) if exhaustive_integer_patterns => {\n             use syntax::ast::IntTy::*;\n-            macro_rules! min_max_ty {\n-                ($ity:ident, $uty:ty, $sty:expr) => {\n-                    ($ity::MIN as $uty as u128, $ity::MAX as $uty as u128, $sty)\n-                }\n-            }\n+            let min_max_ty = |sty| {\n+                let size = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(sty))\n+                                  .unwrap().size.bits() as i128;\n+                let min = -(1 << (size - 1));\n+                let max = (1 << (size - 1)) - 1;\n+                (min as u128, max as u128, sty)\n+            };\n             let (min, max, ty) = match int_ty {\n-                Isize => min_max_ty!(isize, usize, cx.tcx.types.isize),\n-                I8    => min_max_ty!(i8, u8, cx.tcx.types.i8),\n-                I16   => min_max_ty!(i16, u16, cx.tcx.types.i16),\n-                I32   => min_max_ty!(i32, u32, cx.tcx.types.i32),\n-                I64   => min_max_ty!(i64, u64, cx.tcx.types.i64),\n-                I128  => min_max_ty!(i128, u128, cx.tcx.types.i128),\n+                Isize => min_max_ty(cx.tcx.types.isize),\n+                I8    => min_max_ty(cx.tcx.types.i8),\n+                I16   => min_max_ty(cx.tcx.types.i16),\n+                I32   => min_max_ty(cx.tcx.types.i32),\n+                I64   => min_max_ty(cx.tcx.types.i64),\n+                I128  => min_max_ty(cx.tcx.types.i128),\n             };\n             value_constructors = true;\n             vec![ConstantRange(ty::Const::from_bits(cx.tcx, min, ty),\n@@ -492,14 +494,20 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         }\n         ty::TyUint(uint_ty) if exhaustive_integer_patterns => {\n             use syntax::ast::UintTy::*;\n-            let (min, (max, ty)) = (0u128, match uint_ty {\n-                Usize => (usize::MAX as u128, cx.tcx.types.usize),\n-                U8    => (   u8::MAX as u128, cx.tcx.types.u8),\n-                U16   => (  u16::MAX as u128, cx.tcx.types.u16),\n-                U32   => (  u32::MAX as u128, cx.tcx.types.u32),\n-                U64   => (  u64::MAX as u128, cx.tcx.types.u64),\n-                U128  => ( u128::MAX as u128, cx.tcx.types.u128),\n-            });\n+            let min_max_ty = |sty| {\n+                let size = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(sty))\n+                                  .unwrap().size.bits() as i128;\n+                let max = (1 << size) - 1;\n+                (0u128, max as u128, sty)\n+            };\n+            let (min, max, ty) = match uint_ty {\n+                Usize => min_max_ty(cx.tcx.types.usize),\n+                U8    => min_max_ty(cx.tcx.types.u8),\n+                U16   => min_max_ty(cx.tcx.types.u16),\n+                U32   => min_max_ty(cx.tcx.types.u32),\n+                U64   => min_max_ty(cx.tcx.types.u64),\n+                U128  => min_max_ty(cx.tcx.types.u128),\n+            };\n             value_constructors = true;\n             vec![ConstantRange(ty::Const::from_bits(cx.tcx, min, ty),\n                                ty::Const::from_bits(cx.tcx, max, ty),"}]}