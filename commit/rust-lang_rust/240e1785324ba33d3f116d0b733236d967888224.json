{"sha": "240e1785324ba33d3f116d0b733236d967888224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MGUxNzg1MzI0YmEzM2QzZjExNmQwYjczMzIzNmQ5Njc4ODgyMjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-08T14:14:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-08T14:14:11Z"}, "message": "Don't panic on io errors\n\nFixes #920", "tree": {"sha": "4b7748225dcb90129d6daf06a506af87803f0d86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b7748225dcb90129d6daf06a506af87803f0d86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240e1785324ba33d3f116d0b733236d967888224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240e1785324ba33d3f116d0b733236d967888224", "html_url": "https://github.com/rust-lang/rust/commit/240e1785324ba33d3f116d0b733236d967888224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240e1785324ba33d3f116d0b733236d967888224/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5afffb823c3e8af9b77c877af78cf3753d1e7072", "url": "https://api.github.com/repos/rust-lang/rust/commits/5afffb823c3e8af9b77c877af78cf3753d1e7072", "html_url": "https://github.com/rust-lang/rust/commit/5afffb823c3e8af9b77c877af78cf3753d1e7072"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "0878e54545ed97fa737c574ce448926bac82d695", "filename": "src/archive.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/240e1785324ba33d3f116d0b733236d967888224/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240e1785324ba33d3f116d0b733236d967888224/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=240e1785324ba33d3f116d0b733236d967888224", "patch": "@@ -149,6 +149,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             Gnu(ar::GnuBuilder<File>),\n         }\n \n+        let sess = self.config.sess;\n+\n         let mut symbol_table = BTreeMap::new();\n \n         let mut entries = Vec::new();\n@@ -169,10 +171,11 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                     let mut data = Vec::new();\n                     entry.read_to_end(&mut data).unwrap();\n                     data\n-\n                 }\n                 ArchiveEntry::File(file) => {\n-                    std::fs::read(file).unwrap()\n+                    std::fs::read(file).unwrap_or_else(|err| {\n+                        sess.fatal(&format!(\"error while reading object file during archive building: {}\", err));\n+                    })\n                 }\n             };\n \n@@ -192,7 +195,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                         if err == \"Unknown file magic\" {\n                             // Not an object file; skip it.\n                         } else {\n-                            self.config.sess.fatal(&format!(\"Error parsing `{}` during archive creation: {}\", entry_name, err));\n+                            sess.fatal(&format!(\"error parsing `{}` during archive creation: {}\", entry_name, err));\n                         }\n                     }\n                 }\n@@ -203,7 +206,9 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n \n         let mut builder = if self.config.use_gnu_style_archive {\n             BuilderKind::Gnu(ar::GnuBuilder::new(\n-                File::create(&self.config.dst).unwrap(),\n+                File::create(&self.config.dst).unwrap_or_else(|err| {\n+                    sess.fatal(&format!(\"error opening destination during archive building: {}\", err));\n+                }),\n                 entries\n                     .iter()\n                     .map(|(name, _)| name.as_bytes().to_vec())\n@@ -213,7 +218,9 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             ).unwrap())\n         } else {\n             BuilderKind::Bsd(ar::Builder::new(\n-                File::create(&self.config.dst).unwrap(),\n+                File::create(&self.config.dst).unwrap_or_else(|err| {\n+                    sess.fatal(&format!(\"error opening destination during archive building: {}\", err));\n+                }),\n                 symbol_table,\n             ).unwrap())\n         };\n@@ -260,8 +267,10 @@ impl<'a> ArArchiveBuilder<'a> {\n \n         let mut i = 0;\n         while let Some(entry) = archive.next_entry() {\n-            let entry = entry.unwrap();\n-            let file_name = String::from_utf8(entry.header().identifier().to_vec()).unwrap();\n+            let entry = entry?;\n+            let file_name = String::from_utf8(entry.header().identifier().to_vec()).map_err(|err| {\n+                std::io::Error::new(std::io::ErrorKind::InvalidData, err)\n+            })?;\n             if !skip(&file_name) {\n                 self.entries.push((\n                     file_name,"}, {"sha": "9f6b0c5147576d1ba96499ac3ccea2040618771f", "filename": "src/driver/aot.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/240e1785324ba33d3f116d0b733236d967888224/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240e1785324ba33d3f116d0b733236d967888224/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=240e1785324ba33d3f116d0b733236d967888224", "patch": "@@ -54,7 +54,9 @@ fn emit_module<B: Backend>(\n         .output_filenames(LOCAL_CRATE)\n         .temp_path(OutputType::Object, Some(&name));\n     let obj = product.emit();\n-    std::fs::write(&tmp_file, obj).unwrap();\n+    if let Err(err) = std::fs::write(&tmp_file, obj) {\n+        tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n+    }\n \n     let work_product = if std::env::var(\"CG_CLIF_INCR_CACHE_DISABLED\").is_ok() {\n         None\n@@ -254,7 +256,9 @@ pub(super) fn run_aot(\n                 crate::metadata::write_metadata(tcx, object);\n             });\n \n-            std::fs::write(&tmp_file, obj).unwrap();\n+            if let Err(err) = std::fs::write(&tmp_file, obj) {\n+                tcx.sess.fatal(&format!(\"error writing metadata object file: {}\", err));\n+            }\n \n             (metadata_cgu_name, tmp_file)\n         });"}, {"sha": "bc0bae9c28daba7634f54682ce006b4b84eeb175", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240e1785324ba33d3f116d0b733236d967888224/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240e1785324ba33d3f116d0b733236d967888224/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=240e1785324ba33d3f116d0b733236d967888224", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, decl_macro, type_alias_impl_trait, associated_type_bounds, never_type)]\n+#![feature(rustc_private, decl_macro, type_alias_impl_trait, associated_type_bounds, never_type, try_blocks)]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n "}, {"sha": "ef48a9f358ecc71d55897977484a4775216057ca", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/240e1785324ba33d3f116d0b733236d967888224/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240e1785324ba33d3f116d0b733236d967888224/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=240e1785324ba33d3f116d0b733236d967888224", "patch": "@@ -243,19 +243,18 @@ pub(crate) fn write_clif_file<'tcx>(\n     )\n     .unwrap();\n \n-    match ::std::fs::File::create(clif_file_name) {\n-        Ok(mut file) => {\n-            let target_triple = crate::target_triple(tcx.sess);\n-            writeln!(file, \"test compile\").unwrap();\n-            writeln!(file, \"set is_pic\").unwrap();\n-            writeln!(file, \"set enable_simd\").unwrap();\n-            writeln!(file, \"target {} haswell\", target_triple).unwrap();\n-            writeln!(file, \"\").unwrap();\n-            file.write(clif.as_bytes()).unwrap();\n-        }\n-        Err(e) => {\n-            tcx.sess.warn(&format!(\"err opening clif file: {:?}\", e));\n-        }\n+    let res: std::io::Result<()> = try {\n+        let mut file = std::fs::File::create(clif_file_name)?;\n+        let target_triple = crate::target_triple(tcx.sess);\n+        writeln!(file, \"test compile\")?;\n+        writeln!(file, \"set is_pic\")?;\n+        writeln!(file, \"set enable_simd\")?;\n+        writeln!(file, \"target {} haswell\", target_triple)?;\n+        writeln!(file, \"\")?;\n+        file.write(clif.as_bytes())?;\n+    };\n+    if let Err(err) = res {\n+        tcx.sess.warn(&format!(\"err writing clif file: {}\", err));\n     }\n }\n "}]}