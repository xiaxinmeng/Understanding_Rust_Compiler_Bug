{"sha": "320dbc18d89537b306226b74c3daa452ab828751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMGRiYzE4ZDg5NTM3YjMwNjIyNmI3NGMzZGFhNDUyYWI4Mjg3NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-20T06:11:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-20T06:11:32Z"}, "message": "auto merge of #15745 : treeman/rust/tutorial-fixup, r=steveklabnik\n\nSimplify example in 5.2 to remove hidden `#[deriving(Show)]`. Traits haven't been introduced yet and now it's easier to just type in the code and expect it to work. Add in some examples for constructing the enum types. Explicitly expose `#![feature(struct_variant)]` in the code to make it more transparent, this bit me when I worked through the tutorial.\r\n\r\nAdd references in chapter 8 to later chapters describing `Rc`, `Gc` and `Send`. This is a simple fix for #15293.\r\n\r\nSimplify vector indexing example in chapter 13 and removed hidden, unnecessary, code. Gave an example usage of the derived `Rand` trait in chapter 17.\r\n\r\nRemoved references to removed 'extra' crate.", "tree": {"sha": "38f670527da3d42e6f0b2857789b788b41d31c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38f670527da3d42e6f0b2857789b788b41d31c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/320dbc18d89537b306226b74c3daa452ab828751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/320dbc18d89537b306226b74c3daa452ab828751", "html_url": "https://github.com/rust-lang/rust/commit/320dbc18d89537b306226b74c3daa452ab828751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/320dbc18d89537b306226b74c3daa452ab828751/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d0a613d0c462a07b97a35faf73cac8de66bc52a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0a613d0c462a07b97a35faf73cac8de66bc52a", "html_url": "https://github.com/rust-lang/rust/commit/7d0a613d0c462a07b97a35faf73cac8de66bc52a"}, {"sha": "89e28d3df997fd19fa6d8dfc1e4843e9bd6f56bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e28d3df997fd19fa6d8dfc1e4843e9bd6f56bf", "html_url": "https://github.com/rust-lang/rust/commit/89e28d3df997fd19fa6d8dfc1e4843e9bd6f56bf"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "2b85bc50de3ab34571478f9ca9166a7270797971", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/320dbc18d89537b306226b74c3daa452ab828751/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/320dbc18d89537b306226b74c3daa452ab828751/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=320dbc18d89537b306226b74c3daa452ab828751", "patch": "@@ -716,8 +716,8 @@ When an enum has simple integer discriminators, you can apply the `as` cast\n operator to convert a variant to its discriminator value as an `int`:\n \n ~~~~\n-# #[deriving(Show)] enum Direction { North }\n-println!( \"{} => {}\", North, North as int );\n+# enum Direction { North, East, South, West }\n+println!( \"North => {}\", North as int );\n ~~~~\n \n It is possible to set the discriminator values to chosen constant values:\n@@ -748,15 +748,23 @@ includes an identifier of the actual form that it holds, much like the\n \n This declaration defines a type `Shape` that can refer to such shapes, and two\n functions, `Circle` and `Rectangle`, which can be used to construct values of\n-the type. To create a new Circle, write `Circle(Point { x: 0.0, y: 0.0 },\n-10.0)`.\n+the type.\n+\n+To create a new `Circle`, write:\n+\n+~~~~\n+# struct Point { x: f64, y: f64 }\n+# enum Shape { Circle(Point, f64), Rectangle(Point, Point) }\n+let circle = Circle(Point { x: 0.0, y: 0.0 }, 10.0);\n+~~~~\n \n All of these variant constructors may be used as patterns. The only way to\n access the contents of an enum instance is the destructuring of a match. For\n example:\n \n ~~~~\n use std::f64;\n+\n # struct Point {x: f64, y: f64}\n # enum Shape { Circle(Point, f64), Rectangle(Point, Point) }\n fn area(sh: Shape) -> f64 {\n@@ -765,6 +773,9 @@ fn area(sh: Shape) -> f64 {\n         Rectangle(Point { x, y }, Point { x: x2, y: y2 }) => (x2 - x) * (y2 - y)\n     }\n }\n+\n+let rect = Rectangle(Point { x: 0.0, y: 0.0 }, Point { x: 2.0, y: 2.0 });\n+println!(\"area: {}\", area(rect));\n ~~~~\n \n Use a lone `_` to ignore an individual field. Ignore all fields of a variant\n@@ -786,8 +797,9 @@ fn point_from_direction(dir: Direction) -> Point {\n Enum variants may also be structs. For example:\n \n ~~~~\n-# #![feature(struct_variant)]\n+#![feature(struct_variant)]\n use std::f64;\n+\n # struct Point { x: f64, y: f64 }\n # fn square(x: f64) -> f64 { x * x }\n enum Shape {\n@@ -802,7 +814,14 @@ fn area(sh: Shape) -> f64 {\n         }\n     }\n }\n-# fn main() {}\n+\n+fn main() {\n+    let rect = Rectangle {\n+        top_left: Point { x: 0.0, y: 0.0 },\n+        bottom_right: Point { x: 2.0, y: -2.0 }\n+    };\n+    println!(\"area: {}\", area(rect));\n+}\n ~~~~\n \n > *Note:* This feature of the compiler is currently gated behind the\n@@ -986,6 +1005,10 @@ that are `Send`, but non-`Send` types can still *contain* types with custom\n destructors. Example of types which are not `Send` are [`Gc<T>`][gc] and\n [`Rc<T>`][rc], the shared-ownership types.\n \n+> *Note:* See a [later chapter](#ownership-escape-hatches) for a discussion about\n+> [`Gc<T>`][gc] and [`Rc<T>`][rc], and the [chapter about traits](#traits) for\n+> a discussion about `Send`.\n+\n [gc]: http://doc.rust-lang.org/std/gc/struct.Gc.html\n [rc]: http://doc.rust-lang.org/std/rc/struct.Rc.html\n \n@@ -1645,6 +1668,13 @@ let string = \"foobar\";\n let view: &str = string.slice(0, 3);\n ~~~\n \n+Square brackets denote indexing into a slice or fixed-size vector:\n+\n+~~~~\n+let crayons: [&str, ..3] = [\"BananaMania\", \"Beaver\", \"Bittersweet\"];\n+println!(\"Crayon 2 is '{}'\", crayons[2]);\n+~~~~\n+\n Mutable slices also exist, just as there are mutable references. However, there\n are no mutable string slices. Strings are a multi-byte encoding (UTF-8) of\n Unicode code points, so they cannot be freely mutated without the ability to\n@@ -1659,20 +1689,6 @@ view[0] = 5;\n let ys: &mut [int] = &mut [1i, 2i, 3i];\n ~~~\n \n-Square brackets denote indexing into a slice or fixed-size vector:\n-\n-~~~~\n-# enum Crayon { Almond, AntiqueBrass, Apricot,\n-#               Aquamarine, Asparagus, AtomicTangerine,\n-#               BananaMania, Beaver, Bittersweet };\n-# fn draw_scene(c: Crayon) { }\n-let crayons: [Crayon, ..3] = [BananaMania, Beaver, Bittersweet];\n-match crayons[0] {\n-    Bittersweet => draw_scene(crayons[0]),\n-    _ => ()\n-}\n-~~~~\n-\n A slice or fixed-size vector can be destructured using pattern matching:\n \n ~~~~\n@@ -1738,6 +1754,8 @@ via dynamic checks and can fail at runtime.\n The `Rc` and `Gc` types are not sendable, so they cannot be used to share memory between tasks. Safe\n immutable and mutable shared memory is provided by the `sync::arc` module.\n \n+> *Note:* See a [later chapter](#traits) for a discussion about `Send` and sendable types.\n+\n # Closures\n \n Named functions, like those we've seen so far, may not refer to local\n@@ -2609,7 +2627,7 @@ let nonsense = mycircle.radius() * mycircle.area();\n \n ## Deriving implementations for traits\n \n-A small number of traits in `std` and `extra` can have implementations\n+A small number of traits in can have implementations\n that can be automatically derived. These instances are specified by\n placing the `deriving` attribute on a data type declaration. For\n example, the following will mean that `Circle` has an implementation\n@@ -2618,6 +2636,7 @@ of type `ABC` can be randomly generated and converted to a string:\n \n ~~~\n extern crate rand;\n+use std::rand::{task_rng, Rng};\n \n #[deriving(PartialEq)]\n struct Circle { radius: f64 }\n@@ -2628,6 +2647,13 @@ enum ABC { A, B, C }\n fn main() {\n     // Use the Show trait to print \"A, B, C.\"\n     println!(\"{}, {}, {}\", A, B, C);\n+\n+    let mut rng = task_rng();\n+\n+    // Use the Rand trait to generate a random variants.\n+    for _ in range(0i, 10) {\n+        println!(\"{}\", rng.gen::<ABC>());\n+    }\n }\n ~~~\n \n@@ -3136,8 +3162,8 @@ In Rust terminology, we need a way to refer to other crates.\n For that, Rust offers you the `extern crate` declaration:\n \n ~~~\n+// `num` ships with Rust.\n extern crate num;\n-// `num` ships with Rust (much like `extra`; more details further down).\n \n fn main() {\n     // The rational number '1/2':"}]}