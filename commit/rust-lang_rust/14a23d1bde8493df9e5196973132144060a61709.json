{"sha": "14a23d1bde8493df9e5196973132144060a61709", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YTIzZDFiZGU4NDkzZGY5ZTUxOTY5NzMxMzIxNDQwNjBhNjE3MDk=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-08-17T06:37:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-25T09:56:23Z"}, "message": "Strip indents and empty lines in check_apply_diagnostic_fix_from_position", "tree": {"sha": "69afb7abd0ef73f03065e3420524b64de85911d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69afb7abd0ef73f03065e3420524b64de85911d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14a23d1bde8493df9e5196973132144060a61709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14a23d1bde8493df9e5196973132144060a61709", "html_url": "https://github.com/rust-lang/rust/commit/14a23d1bde8493df9e5196973132144060a61709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14a23d1bde8493df9e5196973132144060a61709/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59dd30402b7a1924a0f49d1c902e799654a54f5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/59dd30402b7a1924a0f49d1c902e799654a54f5a", "html_url": "https://github.com/rust-lang/rust/commit/59dd30402b7a1924a0f49d1c902e799654a54f5a"}], "stats": {"total": 91, "additions": 55, "deletions": 36}, "files": [{"sha": "1a4882824f65a2ecd63f753870f12a41fab0c853", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/14a23d1bde8493df9e5196973132144060a61709/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a23d1bde8493df9e5196973132144060a61709/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=14a23d1bde8493df9e5196973132144060a61709", "patch": "@@ -184,6 +184,7 @@ fn check_struct_shorthand_initialization(\n #[cfg(test)]\n mod tests {\n     use insta::assert_debug_snapshot_matches;\n+    use join_to_string::join;\n     use ra_syntax::SourceFile;\n     use test_utils::assert_eq_text;\n \n@@ -228,9 +229,30 @@ mod tests {\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n         let actual = edit.apply(&target_file_contents);\n-        assert_eq_text!(after, &actual);\n+\n+        // Strip indent and empty lines from `after`, to match the behaviour of\n+        // `parse_fixture` called from `analysis_and_position`.\n+        let margin = fixture\n+            .lines()\n+            .filter(|it| it.trim_start().starts_with(\"//-\"))\n+            .map(|it| it.len() - it.trim_start().len())\n+            .next()\n+            .expect(\"empty fixture\");\n+        let after = join(after.lines().filter_map(|line| {\n+            if line.len() > margin {\n+                Some(&line[margin..])\n+            } else {\n+                None\n+            }\n+        }))\n+        .separator(\"\\n\")\n+        .suffix(\"\\n\")\n+        .to_string();\n+\n+        assert_eq_text!(&after, &actual);\n         assert!(\n-            diagnostic.range.start() <= file_position.offset && diagnostic.range.end() >= file_position.offset,\n+            diagnostic.range.start() <= file_position.offset\n+                && diagnostic.range.end() >= file_position.offset,\n             \"diagnostic range {} does not touch cursor position {}\",\n             diagnostic.range,\n             file_position.offset\n@@ -281,17 +303,16 @@ mod tests {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n-        // The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n-        // it strips empty lines and leading whitespace. The important part of this test is that the final\n-        // `x / y` expr is now wrapped in `Ok(..)`\n-        let after = r#\"use std::{string::String, result::Result::{self, Ok, Err}};\n-fn div(x: i32, y: i32) -> Result<i32, String> {\n-    if y == 0 {\n-        return Err(\"div by zero\".into());\n-    }\n-    Ok(x / y)\n-}\n-\"#;\n+        let after = r#\"\n+            use std::{string::String, result::Result::{self, Ok, Err}};\n+\n+            fn div(x: i32, y: i32) -> Result<i32, String> {\n+                if y == 0 {\n+                    return Err(\"div by zero\".into());\n+                }\n+                Ok(x / y)\n+            }\n+        \"#;\n         check_apply_diagnostic_fix_from_position(before, after);\n     }\n \n@@ -313,17 +334,16 @@ fn div(x: i32, y: i32) -> Result<i32, String> {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n-        // The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n-        // it strips empty lines and leading whitespace. The important part of this test is that the final\n-        // expr is now wrapped in `Ok(..)`\n-        let after = r#\"use std::result::Result::{self, Ok, Err};\n-fn div<T>(x: T) -> Result<T, i32> {\n-    if x == 0 {\n-        return Err(7);\n-    }\n-    Ok(x)\n-}\n-\"#;\n+        let after = r#\"\n+            use std::result::Result::{self, Ok, Err};\n+\n+            fn div<T>(x: T) -> Result<T, i32> {\n+                if x == 0 {\n+                    return Err(7);\n+                }\n+                Ok(x)\n+            }\n+        \"#;\n         check_apply_diagnostic_fix_from_position(before, after);\n     }\n \n@@ -350,18 +370,17 @@ fn div<T>(x: T) -> Result<T, i32> {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n-        // The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n-        // it strips empty lines and leading whitespace. The important part of this test is that the final\n-        // `x / y` expr is now wrapped in `Ok(..)`\n-        let after = r#\"use std::{string::String, result::Result::{self, Ok, Err}};\n-type MyResult<T> = Result<T, String>;\n-fn div(x: i32, y: i32) -> MyResult<i32> {\n-    if y == 0 {\n-        return Err(\"div by zero\".into());\n-    }\n-    Ok(x / y)\n-}\n-\"#;\n+        let after = r#\"\n+            use std::{string::String, result::Result::{self, Ok, Err}};\n+\n+            type MyResult<T> = Result<T, String>;\n+            fn div(x: i32, y: i32) -> MyResult<i32> {\n+                if y == 0 {\n+                    return Err(\"div by zero\".into());\n+                }\n+                Ok(x / y)\n+            }\n+        \"#;\n         check_apply_diagnostic_fix_from_position(before, after);\n     }\n "}]}