{"sha": "684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "node_id": "C_kwDOAAsO6NoAKDY4NGEzNzE3Y2I3OGVmOGE4YzMxODJiMGIyZWY2MzBkYWRiN2M0YWE", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-09T23:05:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-09T23:05:34Z"}, "message": "Rollup merge of #106175 - compiler-errors:bad-import-sugg, r=oli-obk\n\nFix bad import suggestion with nested `use` tree\n\nFixes #105566\nFixes #105373\n\nIdeally, we'd find some way to turn these into structured suggestions -- perhaps on a separate line as a different `use` statement, but I have no idea how to access the span for the whole `use` from this point in the import resolution code.", "tree": {"sha": "c4d8e34ecdfb95eafa1a9f4b09611e03f1090caf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d8e34ecdfb95eafa1a9f4b09611e03f1090caf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvJ2+CRBK7hj4Ov3rIwAAiasIAAZb1pBd9vtPRSoSaaPqXOOM\np1RGcAT2UieBi0pI/XKIcLi+aERVnrvYfqy1lc5y6G344eF73OdB0XoVviz+6Iri\nEKMnC3FR0nWZcdC7JUxti2HEnhm5VsQT8/PsILxaTzw85NxLSeB47LIYt5OAyw0n\n2VbhW0DsQfCbH+Z2tLKZHQLRSrHhWYeoeWhx06tb3+fQfh3ych21V81xXmR1wdgV\nGCYnDYs+JMSKCXxq5bw7i3fqAeYJNJ+t02m5lvRzf2JzoDLiJWRMChzP5s6uYtGM\n+2lnkUxKkThqkhsGXvnYWFDiZJ4SDS7vUlMvM5LNlphL0sN6xwN/BUMMu5zfem4=\n=NZaz\n-----END PGP SIGNATURE-----\n", "payload": "tree c4d8e34ecdfb95eafa1a9f4b09611e03f1090caf\nparent 5773e8baf017956849f821d5c85837ca1162b4ae\nparent 1d66a675bb61c21555dcb848ed7378b6f2848de7\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673305534 +0900\ncommitter GitHub <noreply@github.com> 1673305534 +0900\n\nRollup merge of #106175 - compiler-errors:bad-import-sugg, r=oli-obk\n\nFix bad import suggestion with nested `use` tree\n\nFixes #105566\nFixes #105373\n\nIdeally, we'd find some way to turn these into structured suggestions -- perhaps on a separate line as a different `use` statement, but I have no idea how to access the span for the whole `use` from this point in the import resolution code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "html_url": "https://github.com/rust-lang/rust/commit/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5773e8baf017956849f821d5c85837ca1162b4ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5773e8baf017956849f821d5c85837ca1162b4ae", "html_url": "https://github.com/rust-lang/rust/commit/5773e8baf017956849f821d5c85837ca1162b4ae"}, {"sha": "1d66a675bb61c21555dcb848ed7378b6f2848de7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d66a675bb61c21555dcb848ed7378b6f2848de7", "html_url": "https://github.com/rust-lang/rust/commit/1d66a675bb61c21555dcb848ed7378b6f2848de7"}], "stats": {"total": 210, "additions": 167, "deletions": 43}, "files": [{"sha": "7d62d67d64f078256ed63ba4d1f211858fca1b09", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "patch": "@@ -161,6 +161,7 @@ impl<'a> Resolver<'a> {\n                     found_use,\n                     DiagnosticMode::Normal,\n                     path,\n+                    \"\",\n                 );\n                 err.emit();\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n@@ -690,6 +691,7 @@ impl<'a> Resolver<'a> {\n                         FoundUse::Yes,\n                         DiagnosticMode::Pattern,\n                         vec![],\n+                        \"\",\n                     );\n                 }\n                 err\n@@ -1344,6 +1346,7 @@ impl<'a> Resolver<'a> {\n             FoundUse::Yes,\n             DiagnosticMode::Normal,\n             vec![],\n+            \"\",\n         );\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n@@ -2309,7 +2312,7 @@ enum FoundUse {\n }\n \n /// Whether a binding is part of a pattern or a use statement. Used for diagnostics.\n-enum DiagnosticMode {\n+pub(crate) enum DiagnosticMode {\n     Normal,\n     /// The binding is part of a pattern\n     Pattern,\n@@ -2324,6 +2327,8 @@ pub(crate) fn import_candidates(\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n     candidates: &[ImportSuggestion],\n+    mode: DiagnosticMode,\n+    append: &str,\n ) {\n     show_candidates(\n         session,\n@@ -2333,8 +2338,9 @@ pub(crate) fn import_candidates(\n         candidates,\n         Instead::Yes,\n         FoundUse::Yes,\n-        DiagnosticMode::Import,\n+        mode,\n         vec![],\n+        append,\n     );\n }\n \n@@ -2352,6 +2358,7 @@ fn show_candidates(\n     found_use: FoundUse,\n     mode: DiagnosticMode,\n     path: Vec<Segment>,\n+    append: &str,\n ) {\n     if candidates.is_empty() {\n         return;\n@@ -2416,7 +2423,7 @@ fn show_candidates(\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n                 let additional_newline = if let FoundUse::Yes = found_use { \"\" } else { \"\\n\" };\n-                candidate.0 = format!(\"{}{};\\n{}\", add_use, &candidate.0, additional_newline);\n+                candidate.0 = format!(\"{add_use}{}{append};\\n{additional_newline}\", &candidate.0);\n             }\n \n             err.span_suggestions("}, {"sha": "00f65ac37b6a8eaaa0105b5fd422184229679c2c", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "patch": "@@ -1,6 +1,6 @@\n //! A bunch of methods and structures more or less related to resolving imports.\n \n-use crate::diagnostics::{import_candidates, Suggestion};\n+use crate::diagnostics::{import_candidates, DiagnosticMode, Suggestion};\n use crate::Determinacy::{self, *};\n use crate::Namespace::*;\n use crate::{module_to_string, names_to_string, ImportSuggestion};\n@@ -402,7 +402,7 @@ struct UnresolvedImportError {\n     label: Option<String>,\n     note: Option<String>,\n     suggestion: Option<Suggestion>,\n-    candidate: Option<Vec<ImportSuggestion>>,\n+    candidates: Option<Vec<ImportSuggestion>>,\n }\n \n pub struct ImportResolver<'a, 'b> {\n@@ -475,12 +475,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     errors = vec![];\n                 }\n                 if seen_spans.insert(err.span) {\n-                    let path = import_path_to_string(\n-                        &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n-                        &import.kind,\n-                        err.span,\n-                    );\n-                    errors.push((path, err));\n+                    errors.push((import, err));\n                     prev_root_id = import.root_id;\n                 }\n             } else if is_indeterminate {\n@@ -494,10 +489,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     label: None,\n                     note: None,\n                     suggestion: None,\n-                    candidate: None,\n+                    candidates: None,\n                 };\n+                // FIXME: there should be a better way of doing this than\n+                // formatting this as a string then checking for `::`\n                 if path.contains(\"::\") {\n-                    errors.push((path, err))\n+                    errors.push((import, err))\n                 }\n             }\n         }\n@@ -507,7 +504,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         }\n     }\n \n-    fn throw_unresolved_import_error(&self, errors: Vec<(String, UnresolvedImportError)>) {\n+    fn throw_unresolved_import_error(&self, errors: Vec<(&Import<'_>, UnresolvedImportError)>) {\n         if errors.is_empty() {\n             return;\n         }\n@@ -516,7 +513,17 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         const MAX_LABEL_COUNT: usize = 10;\n \n         let span = MultiSpan::from_spans(errors.iter().map(|(_, err)| err.span).collect());\n-        let paths = errors.iter().map(|(path, _)| format!(\"`{}`\", path)).collect::<Vec<_>>();\n+        let paths = errors\n+            .iter()\n+            .map(|(import, err)| {\n+                let path = import_path_to_string(\n+                    &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n+                    &import.kind,\n+                    err.span,\n+                );\n+                format!(\"`{path}`\")\n+            })\n+            .collect::<Vec<_>>();\n         let msg = format!(\"unresolved import{} {}\", pluralize!(paths.len()), paths.join(\", \"),);\n \n         let mut diag = struct_span_err!(self.r.session, span, E0432, \"{}\", &msg);\n@@ -525,7 +532,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             diag.note(note);\n         }\n \n-        for (_, err) in errors.into_iter().take(MAX_LABEL_COUNT) {\n+        for (import, err) in errors.into_iter().take(MAX_LABEL_COUNT) {\n             if let Some(label) = err.label {\n                 diag.span_label(err.span, label);\n             }\n@@ -538,14 +545,36 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 diag.multipart_suggestion(&msg, suggestions, applicability);\n             }\n \n-            if let Some(candidate) = &err.candidate {\n-                import_candidates(\n-                    self.r.session,\n-                    &self.r.untracked.source_span,\n-                    &mut diag,\n-                    Some(err.span),\n-                    &candidate,\n-                )\n+            if let Some(candidates) = &err.candidates {\n+                match &import.kind {\n+                    ImportKind::Single { nested: false, source, target, .. } => import_candidates(\n+                        self.r.session,\n+                        &self.r.untracked.source_span,\n+                        &mut diag,\n+                        Some(err.span),\n+                        &candidates,\n+                        DiagnosticMode::Import,\n+                        (source != target)\n+                            .then(|| format!(\" as {target}\"))\n+                            .as_deref()\n+                            .unwrap_or(\"\"),\n+                    ),\n+                    ImportKind::Single { nested: true, source, target, .. } => {\n+                        import_candidates(\n+                            self.r.session,\n+                            &self.r.untracked.source_span,\n+                            &mut diag,\n+                            None,\n+                            &candidates,\n+                            DiagnosticMode::Normal,\n+                            (source != target)\n+                                .then(|| format!(\" as {target}\"))\n+                                .as_deref()\n+                                .unwrap_or(\"\"),\n+                        );\n+                    }\n+                    _ => {}\n+                }\n             }\n         }\n \n@@ -707,14 +736,14 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 String::from(\"a similar path exists\"),\n                                 Applicability::MaybeIncorrect,\n                             )),\n-                            candidate: None,\n+                            candidates: None,\n                         },\n                         None => UnresolvedImportError {\n                             span,\n                             label: Some(label),\n                             note: None,\n                             suggestion,\n-                            candidate: None,\n+                            candidates: None,\n                         },\n                     };\n                     return Some(err);\n@@ -761,7 +790,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 )),\n                                 note: None,\n                                 suggestion: None,\n-                                candidate: None,\n+                                candidates: None,\n                             });\n                         }\n                     }\n@@ -873,7 +902,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 let resolutions = resolutions.as_ref().into_iter().flat_map(|r| r.iter());\n                 let names = resolutions\n                     .filter_map(|(BindingKey { ident: i, .. }, resolution)| {\n-                        if *i == ident {\n+                        if i.name == ident.name {\n                             return None;\n                         } // Never suggest the same name\n                         match *resolution.borrow() {\n@@ -943,7 +972,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     label: Some(label),\n                     note,\n                     suggestion,\n-                    candidate: if !parent_suggestion.is_empty() {\n+                    candidates: if !parent_suggestion.is_empty() {\n                         Some(parent_suggestion)\n                     } else {\n                         None"}, {"sha": "f1f4caee3619744a870e51ed89d51770f5500521", "filename": "src/test/ui/hygiene/extern-prelude-from-opaque-fail.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr?ref=684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "patch": "@@ -2,10 +2,7 @@ error[E0432]: unresolved import `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:20:9\n    |\n LL |     use my_core;\n-   |         ^^^^^^^\n-   |         |\n-   |         no `my_core` in the root\n-   |         help: a similar name exists in the module: `my_core`\n+   |         ^^^^^^^ no `my_core` in the root\n \n error[E0432]: unresolved import `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:7:13"}, {"sha": "2e95480ad412e5d227718d0131377c12f0b66a7e", "filename": "src/test/ui/imports/bad-import-in-nested.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs?ref=684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "patch": "@@ -0,0 +1,27 @@\n+// edition: 2021\n+\n+#![allow(unused)]\n+\n+mod A {\n+    pub(crate) type AA = ();\n+    pub(crate) type BB = ();\n+\n+    mod A2 {\n+        use super::{super::C::D::AA, AA as _};\n+        //~^ ERROR unresolved import\n+    }\n+}\n+\n+mod C {\n+    pub mod D {}\n+}\n+\n+mod B {\n+    use crate::C::{self, AA};\n+    //~^ ERROR unresolved import\n+\n+    use crate::{A, C::BB};\n+    //~^ ERROR unresolved import\n+}\n+\n+fn main() {}"}, {"sha": "855b1e637e97f5c892796597fae452c54fadc21d", "filename": "src/test/ui/imports/bad-import-in-nested.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr?ref=684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "patch": "@@ -0,0 +1,30 @@\n+error[E0432]: unresolved import `super::super::C::D::AA`\n+  --> $DIR/bad-import-in-nested.rs:10:21\n+   |\n+LL |         use super::{super::C::D::AA, AA as _};\n+   |                     ^^^^^^^^^^^^^^^ no `AA` in `C::D`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::AA\n+\n+error[E0432]: unresolved import `crate::C::AA`\n+  --> $DIR/bad-import-in-nested.rs:20:26\n+   |\n+LL |     use crate::C::{self, AA};\n+   |                          ^^ no `AA` in `C`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::AA\n+\n+error[E0432]: unresolved import `crate::C::BB`\n+  --> $DIR/bad-import-in-nested.rs:23:20\n+   |\n+LL |     use crate::{A, C::BB};\n+   |                    ^^^^^ no `BB` in `C`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::BB\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "ffe56916f92f018f8e5dfe945c5152a798b4d47f", "filename": "src/test/ui/imports/bad-import-with-rename.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs?ref=684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "patch": "@@ -0,0 +1,16 @@\n+mod A {\n+    pub type B = ();\n+    pub type B2 = ();\n+}\n+\n+mod C {\n+    use crate::D::B as _;\n+    //~^ ERROR unresolved import `crate::D::B`\n+\n+    use crate::D::B2;\n+    //~^ ERROR unresolved import `crate::D::B2`\n+}\n+\n+mod D {}\n+\n+fn main() {}"}, {"sha": "cace2a7a51c8eca5529630fd7788f7415af90c71", "filename": "src/test/ui/imports/bad-import-with-rename.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr?ref=684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "patch": "@@ -0,0 +1,25 @@\n+error[E0432]: unresolved import `crate::D::B`\n+  --> $DIR/bad-import-with-rename.rs:7:9\n+   |\n+LL |     use crate::D::B as _;\n+   |         ^^^^^^^^^^^^^^^^ no `B` in `D`\n+   |\n+help: consider importing this type alias instead\n+   |\n+LL |     use A::B as _;\n+   |         ~~~~~~~~~~\n+\n+error[E0432]: unresolved import `crate::D::B2`\n+  --> $DIR/bad-import-with-rename.rs:10:9\n+   |\n+LL |     use crate::D::B2;\n+   |         ^^^^^^^^^^^^ no `B2` in `D`\n+   |\n+help: consider importing this type alias instead\n+   |\n+LL |     use A::B2;\n+   |         ~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "a45c5bd45880fde209a40cb74048715bf0a58c05", "filename": "src/test/ui/test-attrs/inaccessible-test-modules.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr?ref=684a3717cb78ef8a8c3182b0b2ef630dadb7c4aa", "patch": "@@ -2,25 +2,18 @@ error[E0432]: unresolved import `main`\n   --> $DIR/inaccessible-test-modules.rs:5:5\n    |\n LL | use main as x;\n-   |     ----^^^^^\n-   |     |\n-   |     no `main` in the root\n-   |     help: a similar name exists in the module: `main`\n+   |     ^^^^^^^^^ no `main` in the root\n \n error[E0432]: unresolved import `test`\n   --> $DIR/inaccessible-test-modules.rs:6:5\n    |\n LL | use test as y;\n    |     ^^^^^^^^^ no `test` in the root\n    |\n-help: a similar name exists in the module\n-   |\n-LL | use test as y;\n-   |     ~~~~\n help: consider importing this module instead\n    |\n-LL | use test::test;\n-   |     ~~~~~~~~~~~\n+LL | use test::test as y;\n+   |     ~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}]}