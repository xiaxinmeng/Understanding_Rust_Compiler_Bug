{"sha": "ad02dc46badee510bd3a2c093edf80fcaade91b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMDJkYzQ2YmFkZWU1MTBiZDNhMmMwOTNlZGY4MGZjYWFkZTkxYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-26T19:15:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-26T19:15:09Z"}, "message": "Auto merge of #87194 - eddyb:const-value-mangling, r=michaelwoerister,oli-obk\n\nrustc_symbol_mangling: support structural constants and &str in v0.\n\nThis PR should unblock #85530 (except for float `const` generics, which AFAIK should've never worked).\n(cc `@tmiasko` could the https://github.com/rust-lang/rust/pull/85530#issuecomment-857855379 failures be retried with a quick crater \"subset\" run of this PR + changing the default to `v0`? Just to make sure I didn't miss anything other than the floats)\n\nThe encoding is the one suggested before in e.g. https://github.com/rust-lang/rust/issues/61486#issuecomment-878932102, tho this PR won't by itself finish #61486, before closing that we'd likely want to move to `@oli-obk's` \"valtrees\" (i.e. #83234 and other associated work).\n\n<hr>\n\n**EDITs**:\n1. switched unit/tuple/braced-with-named-fields `<const-fields>` prefixes from `\"u\"`/`\"T\"`/`\"\"` to `\"U\"`/`\"T\"`/`\"S\"` to avoid the ambiguity reported by `@tmiasko` in https://github.com/rust-lang/rust/pull/87194#issuecomment-884279921.\n\n2. `rustc-demangle` PR: https://github.com/alexcrichton/rustc-demangle/pull/55\n\n3. RFC amendment PR: https://github.com/rust-lang/rfcs/pull/3161\n    * also removed the grammar changes included in that PR, from this description\n\n4. added tests (temporarily using my fork of `rustc-demangle`)\n\n<hr>\n\nr? `@michaelwoerister`", "tree": {"sha": "c7343646fb600f41303b16ba522bd12022d56546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7343646fb600f41303b16ba522bd12022d56546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad02dc46badee510bd3a2c093edf80fcaade91b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad02dc46badee510bd3a2c093edf80fcaade91b1", "html_url": "https://github.com/rust-lang/rust/commit/ad02dc46badee510bd3a2c093edf80fcaade91b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad02dc46badee510bd3a2c093edf80fcaade91b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9f4b221b92193c7e95b1beb502c6eb32c3b613", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9f4b221b92193c7e95b1beb502c6eb32c3b613", "html_url": "https://github.com/rust-lang/rust/commit/4b9f4b221b92193c7e95b1beb502c6eb32c3b613"}, {"sha": "24526bbe779b552c3323f3ee1046b534f0888be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/24526bbe779b552c3323f3ee1046b534f0888be7", "html_url": "https://github.com/rust-lang/rust/commit/24526bbe779b552c3323f3ee1046b534f0888be7"}], "stats": {"total": 672, "additions": 609, "deletions": 63}, "files": [{"sha": "5e6b11032ab269999338706270750a8b2479517a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -3398,9 +3398,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.18\"\n+version = \"0.1.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6e3bad0ee36814ca07d7968269dd4b7ec89ec2da10c4bb613928d3077083c232\"\n+checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\","}, {"sha": "521ce344180a1063fdbee45863a2c64df17b07d3", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -15,7 +15,7 @@ measureme = \"9.1.0\"\n snap = \"1\"\n tracing = \"0.1\"\n rustc_middle = { path = \"../rustc_middle\" }\n-rustc-demangle = \"0.1.18\"\n+rustc-demangle = \"0.1.21\"\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_codegen_ssa = { path = \"../rustc_codegen_ssa\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "56be2843056c444237b25fa123063989f1f92135", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -1220,13 +1220,20 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                         p!(\")\");\n                     }\n-                    ty::Adt(def, substs) if def.variants.is_empty() => {\n-                        p!(print_value_path(def.did, substs));\n+                    ty::Adt(def, _) if def.variants.is_empty() => {\n+                        self = self.typed_value(\n+                            |mut this| {\n+                                write!(this, \"unreachable()\")?;\n+                                Ok(this)\n+                            },\n+                            |this| this.print_type(ty),\n+                            \": \",\n+                        )?;\n                     }\n                     ty::Adt(def, substs) => {\n-                        let variant_id =\n-                            contents.variant.expect(\"destructed const of adt without variant id\");\n-                        let variant_def = &def.variants[variant_id];\n+                        let variant_idx =\n+                            contents.variant.expect(\"destructed const of adt without variant idx\");\n+                        let variant_def = &def.variants[variant_idx];\n                         p!(print_value_path(variant_def.def_id, substs));\n \n                         match variant_def.ctor_kind {"}, {"sha": "aebf77a1fd85ffc1e276068968eea533c387f3da", "filename": "compiler/rustc_symbol_mangling/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_symbol_mangling%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_symbol_mangling%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2FCargo.toml?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -9,7 +9,7 @@ doctest = false\n [dependencies]\n tracing = \"0.1\"\n punycode = \"0.4.0\"\n-rustc-demangle = \"0.1.18\"\n+rustc-demangle = \"0.1.21\"\n \n rustc_span = { path = \"../rustc_span\" }\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "551309f4a8cc43156338bd398175dcbaa31a5ae2", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -91,6 +91,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "80f29aa9c4f192bf1ae1f17ed8941e7192de9433", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 139, "deletions": 22, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -1,8 +1,10 @@\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n+use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n@@ -11,6 +13,7 @@ use rustc_target::abi::Integer;\n use rustc_target::spec::abi::Abi;\n \n use std::fmt::Write;\n+use std::iter;\n use std::ops::Range;\n \n pub(super) fn mangle(\n@@ -534,39 +537,153 @@ impl Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     }\n \n     fn print_const(mut self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+        // We only mangle a typed value if the const can be evaluated.\n+        let ct = ct.eval(self.tcx, ty::ParamEnv::reveal_all());\n+        match ct.val {\n+            ty::ConstKind::Value(_) => {}\n+\n+            // Placeholders (should be demangled as `_`).\n+            // NOTE(eddyb) despite `Unevaluated` having a `DefId` (and therefore\n+            // a path), even for it we still need to encode a placeholder, as\n+            // the path could refer back to e.g. an `impl` using the constant.\n+            ty::ConstKind::Unevaluated(_)\n+            | ty::ConstKind::Param(_)\n+            | ty::ConstKind::Infer(_)\n+            | ty::ConstKind::Bound(..)\n+            | ty::ConstKind::Placeholder(_)\n+            | ty::ConstKind::Error(_) => {\n+                // Never cached (single-character).\n+                self.push(\"p\");\n+                return Ok(self);\n+            }\n+        }\n+\n         if let Some(&i) = self.consts.get(&ct) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n \n-        let mut neg = false;\n-        let val = match ct.ty.kind() {\n-            ty::Uint(_) | ty::Bool | ty::Char => {\n-                ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty)\n-            }\n-            ty::Int(ity) => {\n-                ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty).and_then(|b| {\n-                    let val = Integer::from_int_ty(&self.tcx, *ity).size().sign_extend(b) as i128;\n+        match ct.ty.kind() {\n+            ty::Uint(_) | ty::Int(_) | ty::Bool | ty::Char => {\n+                self = ct.ty.print(self)?;\n+\n+                let mut bits = ct.eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty);\n+\n+                // Negative integer values are mangled using `n` as a \"sign prefix\".\n+                if let ty::Int(ity) = ct.ty.kind() {\n+                    let val =\n+                        Integer::from_int_ty(&self.tcx, *ity).size().sign_extend(bits) as i128;\n                     if val < 0 {\n-                        neg = true;\n+                        self.push(\"n\");\n                     }\n-                    Some(val.unsigned_abs())\n-                })\n+                    bits = val.unsigned_abs();\n+                }\n+\n+                let _ = write!(self.out, \"{:x}_\", bits);\n             }\n+\n+            // HACK(eddyb) because `ty::Const` only supports sized values (for now),\n+            // we can't use `deref_const` + supporting `str`, we have to specially\n+            // handle `&str` and include both `&` (\"R\") and `str` (\"e\") prefixes.\n+            ty::Ref(_, ty, hir::Mutability::Not) if *ty == self.tcx.types.str_ => {\n+                self.push(\"R\");\n+                match ct.val {\n+                    ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => {\n+                        // NOTE(eddyb) the following comment was kept from `ty::print::pretty`:\n+                        // The `inspect` here is okay since we checked the bounds, and there are no\n+                        // relocations (we have an active `str` reference here). We don't use this\n+                        // result to affect interpreter execution.\n+                        let slice =\n+                            data.inspect_with_uninit_and_ptr_outside_interpreter(start..end);\n+                        let s = std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n+\n+                        self.push(\"e\");\n+                        // FIXME(eddyb) use a specialized hex-encoding loop.\n+                        for byte in s.bytes() {\n+                            let _ = write!(self.out, \"{:02x}\", byte);\n+                        }\n+                        self.push(\"_\");\n+                    }\n+\n+                    _ => {\n+                        bug!(\"symbol_names: unsupported `&str` constant: {:?}\", ct);\n+                    }\n+                }\n+            }\n+\n+            ty::Ref(_, _, mutbl) => {\n+                self.push(match mutbl {\n+                    hir::Mutability::Not => \"R\",\n+                    hir::Mutability::Mut => \"Q\",\n+                });\n+                self = self.tcx.deref_const(ty::ParamEnv::reveal_all().and(ct)).print(self)?;\n+            }\n+\n+            ty::Array(..) | ty::Tuple(..) | ty::Adt(..) => {\n+                let contents = self.tcx.destructure_const(ty::ParamEnv::reveal_all().and(ct));\n+                let fields = contents.fields.iter().copied();\n+\n+                let print_field_list = |mut this: Self| {\n+                    for field in fields.clone() {\n+                        this = field.print(this)?;\n+                    }\n+                    this.push(\"E\");\n+                    Ok(this)\n+                };\n+\n+                match *ct.ty.kind() {\n+                    ty::Array(..) => {\n+                        self.push(\"A\");\n+                        self = print_field_list(self)?;\n+                    }\n+                    ty::Tuple(..) => {\n+                        self.push(\"T\");\n+                        self = print_field_list(self)?;\n+                    }\n+                    ty::Adt(def, substs) => {\n+                        let variant_idx =\n+                            contents.variant.expect(\"destructed const of adt without variant idx\");\n+                        let variant_def = &def.variants[variant_idx];\n+\n+                        self.push(\"V\");\n+                        self = self.print_def_path(variant_def.def_id, substs)?;\n+\n+                        match variant_def.ctor_kind {\n+                            CtorKind::Const => {\n+                                self.push(\"U\");\n+                            }\n+                            CtorKind::Fn => {\n+                                self.push(\"T\");\n+                                self = print_field_list(self)?;\n+                            }\n+                            CtorKind::Fictive => {\n+                                self.push(\"S\");\n+                                for (field_def, field) in iter::zip(&variant_def.fields, fields) {\n+                                    // HACK(eddyb) this mimics `path_append`,\n+                                    // instead of simply using `field_def.ident`,\n+                                    // just to be able to handle disambiguators.\n+                                    let disambiguated_field =\n+                                        self.tcx.def_key(field_def.did).disambiguated_data;\n+                                    let field_name =\n+                                        disambiguated_field.data.get_opt_name().map(|s| s.as_str());\n+                                    self.push_disambiguator(\n+                                        disambiguated_field.disambiguator as u64,\n+                                    );\n+                                    self.push_ident(&field_name.as_ref().map_or(\"\", |s| &s[..]));\n+\n+                                    self = field.print(self)?;\n+                                }\n+                                self.push(\"E\");\n+                            }\n+                        }\n+                    }\n+                    _ => unreachable!(),\n+                }\n+            }\n+\n             _ => {\n                 bug!(\"symbol_names: unsupported constant of type `{}` ({:?})\", ct.ty, ct);\n             }\n-        };\n-\n-        if let Some(bits) = val {\n-            // We only print the type if the const can be evaluated.\n-            self = ct.ty.print(self)?;\n-            let _ = write!(self.out, \"{}{:x}_\", if neg { \"n\" } else { \"\" }, bits);\n-        } else {\n-            // NOTE(eddyb) despite having the path, we need to\n-            // encode a placeholder, as the path could refer\n-            // back to e.g. an `impl` using the constant.\n-            self.push(\"p\");\n         }\n \n         // Only cache consts that do not refer to an enclosing"}, {"sha": "1b051b0d0f6e5079802b5bf394152ab5284901b5", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -24,7 +24,7 @@ std_detect = { path = \"../stdarch/crates/std_detect\", default-features = false,\n \n # Dependencies of the `backtrace` crate\n addr2line = { version = \"0.16.0\", optional = true, default-features = false }\n-rustc-demangle = { version = \"0.1.18\", features = ['rustc-dep-of-std'] }\n+rustc-demangle = { version = \"0.1.21\", features = ['rustc-dep-of-std'] }\n miniz_oxide = { version = \"0.4.0\", optional = true, default-features = false }\n [dependencies.object]\n version = \"0.26.1\""}, {"sha": "75334558b589d36a0bcec7334dd826e68b369dab", "filename": "src/test/debuginfo/function-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fdebuginfo%2Ffunction-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fdebuginfo%2Ffunction-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-call.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -1,5 +1,5 @@\n // This test does not passed with gdb < 8.0. See #53497.\n-// min-gdb-version: 8.0\n+// min-gdb-version: 10.1\n \n // compile-flags:-g\n "}, {"sha": "b9e59f8e8297c538819b2b47002a77f53c9f31f0", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -1,5 +1,5 @@\n // Function names are formatted differently in old versions of GDB\n-// min-gdb-version: 9.2\n+// min-gdb-version: 10.1\n \n // compile-flags:-g\n "}, {"sha": "fcdc070a4c39e40e9001251ed8ab814439f6f9f7", "filename": "src/test/ui/panics/issue-47429-short-backtraces.legacy.run.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.legacy.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.legacy.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.legacy.run.stderr?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -1,4 +1,4 @@\n-thread 'main' panicked at 'explicit panic', $DIR/issue-47429-short-backtraces.rs:16:5\n+thread 'main' panicked at 'explicit panic', $DIR/issue-47429-short-backtraces.rs:21:5\n stack backtrace:\n    0: std::panicking::begin_panic\n    1: issue_47429_short_backtraces::main", "previous_filename": "src/test/ui/panics/issue-47429-short-backtraces.run.stderr"}, {"sha": "35ecfc0b27158720d8e493fcb31efd2ef1c62724", "filename": "src/test/ui/panics/issue-47429-short-backtraces.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -12,6 +12,11 @@\n // ignore-emscripten no panic or subprocess support\n // ignore-sgx no subprocess support\n \n+// NOTE(eddyb) output differs between symbol mangling schemes\n+// revisions: legacy v0\n+// [legacy] compile-flags: -Zsymbol-mangling-version=legacy\n+//     [v0] compile-flags: -Zsymbol-mangling-version=v0\n+\n fn main() {\n     panic!()\n }"}, {"sha": "1cbf11739bfc629f7796282ad6e706486a4b90d0", "filename": "src/test/ui/panics/issue-47429-short-backtraces.v0.run.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.v0.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.v0.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.v0.run.stderr?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -0,0 +1,5 @@\n+thread 'main' panicked at 'explicit panic', $DIR/issue-47429-short-backtraces.rs:21:5\n+stack backtrace:\n+   0: std::panicking::begin_panic::<&str>\n+   1: issue_47429_short_backtraces::main\n+note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}, {"sha": "38b07acbdb27edfdc28b8535b46e172d1b29b550", "filename": "src/test/ui/symbol-names/const-generics-demangling.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -1,37 +1,37 @@\n // build-fail\n-// compile-flags: -Z symbol-mangling-version=v0\n+// compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n #![feature(rustc_attrs)]\n \n pub struct Unsigned<const F: u8>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMCsaP8qXevlYG3_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n-//~| ERROR demangling(<const_generics_demangling[7e153590edc26969]::Unsigned<11: u8>>)\n-//~| ERROR demangling-alt(<const_generics_demangling::Unsigned<11>>)\n+//~^ ERROR symbol-name(_RMCsno73SFvQKx_1cINtB0_8UnsignedKhb_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Unsigned<11u8>>)\n+//~| ERROR demangling-alt(<c::Unsigned<11>>)\n impl Unsigned<11> {}\n \n pub struct Signed<const F: i16>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs_CsaP8qXevlYG3_25const_generics_demanglingINtB2_6SignedKsn98_E)\n-//~| ERROR demangling(<const_generics_demangling[7e153590edc26969]::Signed<-152: i16>>)\n-//~| ERROR demangling-alt(<const_generics_demangling::Signed<-152>>)\n+//~^ ERROR symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6SignedKsn98_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Signed<-152i16>>)\n+//~| ERROR demangling-alt(<c::Signed<-152>>)\n impl Signed<-152> {}\n \n pub struct Bool<const F: bool>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs0_CsaP8qXevlYG3_25const_generics_demanglingINtB3_4BoolKb1_E)\n-//~| ERROR demangling(<const_generics_demangling[7e153590edc26969]::Bool<true: bool>>)\n-//~| ERROR demangling-alt(<const_generics_demangling::Bool<true>>)\n+//~^ ERROR symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_4BoolKb1_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Bool<true>>)\n+//~| ERROR demangling-alt(<c::Bool<true>>)\n impl Bool<true> {}\n \n pub struct Char<const F: char>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs1_CsaP8qXevlYG3_25const_generics_demanglingINtB3_4CharKc2202_E)\n-//~| ERROR demangling(<const_generics_demangling[7e153590edc26969]::Char<'\u2202': char>>)\n-//~| ERROR demangling-alt(<const_generics_demangling::Char<'\u2202'>>)\n+//~^ ERROR symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_4CharKc2202_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Char<'\u2202'>>)\n+//~| ERROR demangling-alt(<c::Char<'\u2202'>>)\n impl Char<'\u2202'> {}\n \n fn main() {}"}, {"sha": "2abf293071f040bd683318ec93dedf6c4f490882", "filename": "src/test/ui/symbol-names/const-generics-demangling.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -1,70 +1,70 @@\n-error: symbol-name(_RMCsaP8qXevlYG3_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n+error: symbol-name(_RMCsno73SFvQKx_1cINtB0_8UnsignedKhb_E)\n   --> $DIR/const-generics-demangling.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[7e153590edc26969]::Unsigned<11: u8>>)\n+error: demangling(<c[464da6a86cb672f]::Unsigned<11u8>>)\n   --> $DIR/const-generics-demangling.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<const_generics_demangling::Unsigned<11>>)\n+error: demangling-alt(<c::Unsigned<11>>)\n   --> $DIR/const-generics-demangling.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs_CsaP8qXevlYG3_25const_generics_demanglingINtB2_6SignedKsn98_E)\n+error: symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6SignedKsn98_E)\n   --> $DIR/const-generics-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[7e153590edc26969]::Signed<-152: i16>>)\n+error: demangling(<c[464da6a86cb672f]::Signed<-152i16>>)\n   --> $DIR/const-generics-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<const_generics_demangling::Signed<-152>>)\n+error: demangling-alt(<c::Signed<-152>>)\n   --> $DIR/const-generics-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs0_CsaP8qXevlYG3_25const_generics_demanglingINtB3_4BoolKb1_E)\n+error: symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_4BoolKb1_E)\n   --> $DIR/const-generics-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[7e153590edc26969]::Bool<true: bool>>)\n+error: demangling(<c[464da6a86cb672f]::Bool<true>>)\n   --> $DIR/const-generics-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<const_generics_demangling::Bool<true>>)\n+error: demangling-alt(<c::Bool<true>>)\n   --> $DIR/const-generics-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs1_CsaP8qXevlYG3_25const_generics_demanglingINtB3_4CharKc2202_E)\n+error: symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_4CharKc2202_E)\n   --> $DIR/const-generics-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[7e153590edc26969]::Char<'\u2202': char>>)\n+error: demangling(<c[464da6a86cb672f]::Char<'\u2202'>>)\n   --> $DIR/const-generics-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<const_generics_demangling::Char<'\u2202'>>)\n+error: demangling-alt(<c::Char<'\u2202'>>)\n   --> $DIR/const-generics-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "af111dd39face675e7219a112997ec7ab813595d", "filename": "src/test/ui/symbol-names/const-generics-str-demangling.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -0,0 +1,44 @@\n+// build-fail\n+// compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n+#![feature(const_generics, rustc_attrs)]\n+#![allow(incomplete_features)]\n+\n+pub struct Str<const S: &'static str>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMCsno73SFvQKx_1cINtB0_3StrKRe616263_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"abc\">>)\n+//~| ERROR demangling-alt(<c::Str<\"abc\">>)\n+impl Str<\"abc\"> {}\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs_Csno73SFvQKx_1cINtB2_3StrKRe27_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"'\">>)\n+//~| ERROR demangling-alt(<c::Str<\"'\">>)\n+impl Str<\"'\"> {}\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_3StrKRe090a_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"\\t\\n\">>)\n+//~| ERROR demangling-alt(<c::Str<\"\\t\\n\">>)\n+impl Str<\"\\t\\n\"> {}\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_3StrKRee28882c3bc_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"\u2202\u00fc\">>)\n+//~| ERROR demangling-alt(<c::Str<\"\u2202\u00fc\">>)\n+impl Str<\"\u2202\u00fc\"> {}\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_3StrKRee183a1e18390e183ade1839be18394e1839ae18390e183935fe18392e18394e1839be183a0e18398e18394e1839ae183985fe183a1e18390e18393e18398e1839ae18398_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n+//~| ERROR demangling-alt(<c::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n+impl Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\"> {}\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_3StrKRef09f908af09fa688f09fa686f09f90ae20c2a720f09f90b6f09f9192e29895f09f94a520c2a720f09fa7a1f09f929bf09f929af09f9299f09f929c_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n+//~| ERROR demangling-alt(<c::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n+impl Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\"> {}\n+\n+fn main() {}"}, {"sha": "f401997017fb54d6da9f7e8bbd4ddc9c6a2e4ec4", "filename": "src/test/ui/symbol-names/const-generics-str-demangling.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.stderr?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -0,0 +1,110 @@\n+error: symbol-name(_RMCsno73SFvQKx_1cINtB0_3StrKRe616263_E)\n+  --> $DIR/const-generics-str-demangling.rs:8:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Str<\"abc\">>)\n+  --> $DIR/const-generics-str-demangling.rs:8:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Str<\"abc\">>)\n+  --> $DIR/const-generics-str-demangling.rs:8:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs_Csno73SFvQKx_1cINtB2_3StrKRe27_E)\n+  --> $DIR/const-generics-str-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Str<\"'\">>)\n+  --> $DIR/const-generics-str-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Str<\"'\">>)\n+  --> $DIR/const-generics-str-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_3StrKRe090a_E)\n+  --> $DIR/const-generics-str-demangling.rs:20:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Str<\"\\t\\n\">>)\n+  --> $DIR/const-generics-str-demangling.rs:20:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Str<\"\\t\\n\">>)\n+  --> $DIR/const-generics-str-demangling.rs:20:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_3StrKRee28882c3bc_E)\n+  --> $DIR/const-generics-str-demangling.rs:26:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Str<\"\u2202\u00fc\">>)\n+  --> $DIR/const-generics-str-demangling.rs:26:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Str<\"\u2202\u00fc\">>)\n+  --> $DIR/const-generics-str-demangling.rs:26:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_3StrKRee183a1e18390e183ade1839be18394e1839ae18390e183935fe18392e18394e1839be183a0e18398e18394e1839ae183985fe183a1e18390e18393e18398e1839ae18398_E)\n+  --> $DIR/const-generics-str-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n+  --> $DIR/const-generics-str-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n+  --> $DIR/const-generics-str-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_3StrKRef09f908af09fa688f09fa686f09f90ae20c2a720f09f90b6f09f9192e29895f09f94a520c2a720f09fa7a1f09f929bf09f929af09f9299f09f929c_E)\n+  --> $DIR/const-generics-str-demangling.rs:38:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n+  --> $DIR/const-generics-str-demangling.rs:38:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n+  --> $DIR/const-generics-str-demangling.rs:38:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 18 previous errors\n+"}, {"sha": "9da6a0f18e6968e4ef5a30c19fe61e4e1fedeb4e", "filename": "src/test/ui/symbol-names/const-generics-structural-demangling.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -0,0 +1,96 @@\n+// build-fail\n+// compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n+\n+// NOTE(eddyb) we need `core` for `core::option::Option`, normalize away its\n+// disambiguator hash, which can/should change (including between stage{1,2}).\n+// normalize-stderr-test: \"Cs[0-9a-zA-Z]+_4core\" -> \"Cs$$HASH_4core\"\n+// normalize-stderr-test: \"core\\[[0-9a-f]+\\]\" -> \"core[$$HASH_HEX]\"\n+\n+#![feature(const_generics, decl_macro, rustc_attrs)]\n+#![allow(incomplete_features)]\n+\n+pub struct RefByte<const RB: &'static u8>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMCsno73SFvQKx_1cINtB0_7RefByteKRh7b_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::RefByte<{&123u8}>>)\n+//~| ERROR demangling-alt(<c::RefByte<{&123}>>)\n+impl RefByte<{&123}> {}\n+\n+// FIXME(eddyb) this was supposed to be `RefMutZst` with `&mut []`,\n+// but that is currently not allowed in const generics.\n+pub struct RefZst<const RMZ: &'static [u8; 0]>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6RefZstKRAEE)\n+//~| ERROR demangling(<c[464da6a86cb672f]::RefZst<{&[]}>>)\n+//~| ERROR demangling-alt(<c::RefZst<{&[]}>>)\n+impl RefZst<{&[]}> {}\n+\n+pub struct Array3Bytes<const A3B: [u8; 3]>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_11Array3BytesKAh1_h2_h3_EE)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Array3Bytes<{[1u8, 2u8, 3u8]}>>)\n+//~| ERROR demangling-alt(<c::Array3Bytes<{[1, 2, 3]}>>)\n+impl Array3Bytes<{[1, 2, 3]}> {}\n+\n+pub struct TupleByteBool<const TBB: (u8, bool)>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_13TupleByteBoolKTh1_b0_EE)\n+//~| ERROR demangling(<c[464da6a86cb672f]::TupleByteBool<{(1u8, false)}>>)\n+//~| ERROR demangling-alt(<c::TupleByteBool<{(1, false)}>>)\n+impl TupleByteBool<{(1, false)}> {}\n+\n+pub struct OptionUsize<const OU: Option<usize>>;\n+\n+// HACK(eddyb) the full mangling is only in `.stderr` because we can normalize\n+// the `core` disambiguator hash away there, but not here.\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs\n+//~| ERROR demangling(<c[464da6a86cb672f]::OptionUsize<{core[\n+//~| ERROR demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::None}>>)\n+impl OptionUsize<{None}> {}\n+\n+// HACK(eddyb) the full mangling is only in `.stderr` because we can normalize\n+// the `core` disambiguator hash away there, but not here.\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs\n+//~| ERROR demangling(<c[464da6a86cb672f]::OptionUsize<{core[\n+//~| ERROR demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::Some(0)}>>)\n+impl OptionUsize<{Some(0)}> {}\n+\n+#[derive(PartialEq, Eq)]\n+pub struct Foo {\n+    s: &'static str,\n+    ch: char,\n+    slice: &'static [u8],\n+}\n+pub struct Foo_<const F: Foo>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs4_Csno73SFvQKx_1cINtB3_4Foo_KVNtB3_3FooS1sRe616263_2chc78_5sliceRAh1_h2_h3_EEE)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Foo_<{c[464da6a86cb672f]::Foo { s: \"abc\", ch: 'x', slice: &[1u8, 2u8, 3u8] }}>>)\n+//~| ERROR demangling-alt(<c::Foo_<{c::Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}>>)\n+impl Foo_<{Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}> {}\n+\n+// NOTE(eddyb) this tests specifically the use of disambiguators in field names,\n+// using macros 2.0 hygiene to create a `struct` with conflicting field names.\n+macro duplicate_field_name_test($x:ident) {\n+    #[derive(PartialEq, Eq)]\n+    pub struct Bar {\n+        $x: u8,\n+        x: u16,\n+    }\n+    pub struct Bar_<const B: Bar>;\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_RMs9_Csno73SFvQKx_1cINtB3_4Bar_KVNtB3_3BarS1xh7b_s_1xt1000_EE)\n+    //~| ERROR demangling(<c[464da6a86cb672f]::Bar_<{c[464da6a86cb672f]::Bar { x: 123u8, x: 4096u16 }}>>)\n+    //~| ERROR demangling-alt(<c::Bar_<{c::Bar { x: 123, x: 4096 }}>>)\n+    impl Bar_<{Bar { $x: 123, x: 4096 }}> {}\n+}\n+duplicate_field_name_test!(x);\n+\n+fn main() {}"}, {"sha": "b3c5bd2b89d307ac2d4d6fa7a7881ccb9a33ed8e", "filename": "src/test/ui/symbol-names/const-generics-structural-demangling.stderr", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -0,0 +1,161 @@\n+error: symbol-name(_RMCsno73SFvQKx_1cINtB0_7RefByteKRh7b_E)\n+  --> $DIR/const-generics-structural-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::RefByte<{&123u8}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::RefByte<{&123}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6RefZstKRAEE)\n+  --> $DIR/const-generics-structural-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::RefZst<{&[]}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::RefZst<{&[]}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_11Array3BytesKAh1_h2_h3_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Array3Bytes<{[1u8, 2u8, 3u8]}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Array3Bytes<{[1, 2, 3]}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_13TupleByteBoolKTh1_b0_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:40:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::TupleByteBool<{(1u8, false)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:40:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::TupleByteBool<{(1, false)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:40:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs$HASH_4core6option6OptionjE4NoneUE)\n+  --> $DIR/const-generics-structural-demangling.rs:50:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::OptionUsize<{core[$HASH_HEX]::option::Option::<usize>::None}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:50:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::None}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:50:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs$HASH_4core6option6OptionjE4SomeTj0_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:58:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::OptionUsize<{core[$HASH_HEX]::option::Option::<usize>::Some(0usize)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:58:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::Some(0)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:58:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs4_Csno73SFvQKx_1cINtB3_4Foo_KVNtB3_3FooS1sRe616263_2chc78_5sliceRAh1_h2_h3_EEE)\n+  --> $DIR/const-generics-structural-demangling.rs:72:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Foo_<{c[464da6a86cb672f]::Foo { s: \"abc\", ch: 'x', slice: &[1u8, 2u8, 3u8] }}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:72:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Foo_<{c::Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:72:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs9_Csno73SFvQKx_1cINtB3_4Bar_KVNtB3_3BarS1xh7b_s_1xt1000_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:88:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | duplicate_field_name_test!(x);\n+   | ------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: demangling(<c[464da6a86cb672f]::Bar_<{c[464da6a86cb672f]::Bar { x: 123u8, x: 4096u16 }}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:88:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | duplicate_field_name_test!(x);\n+   | ------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: demangling-alt(<c::Bar_<{c::Bar { x: 123, x: 4096 }}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:88:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | duplicate_field_name_test!(x);\n+   | ------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "60f19266ba9fc7a146fe615e1a31c73ec9924e34", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -64,7 +64,7 @@ fn main() {\n             //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method\n             //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method)\n              //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs2qSCrjELJET_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-                //[v0]~| ERROR demangling(<[&dyn impl1[1c5860ab79c9e305]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[1c5860ab79c9e305]::AutoTrait; 3: usize] as impl1[1c5860ab79c9e305]::main::{closure#1}::Bar>::method)\n+                //[v0]~| ERROR demangling(<[&dyn impl1[1c5860ab79c9e305]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[1c5860ab79c9e305]::AutoTrait; 3usize] as impl1[1c5860ab79c9e305]::main::{closure#1}::Bar>::method)\n                 //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n             //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)"}, {"sha": "926e750e3cda711bf384cf20ad5f011e2f75298a", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -52,7 +52,7 @@ error: symbol-name(_RNvXNCNvCs2qSCrjELJET_5impl14mains_0ARDNtB6_3Foop5AssocFG_KC\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[1c5860ab79c9e305]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[1c5860ab79c9e305]::AutoTrait; 3: usize] as impl1[1c5860ab79c9e305]::main::{closure#1}::Bar>::method)\n+error: demangling(<[&dyn impl1[1c5860ab79c9e305]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[1c5860ab79c9e305]::AutoTrait; 3usize] as impl1[1c5860ab79c9e305]::main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "51a4d74109a639181ee8d1087a7f7e631947728d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad02dc46badee510bd3a2c093edf80fcaade91b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ad02dc46badee510bd3a2c093edf80fcaade91b1", "patch": "@@ -3227,7 +3227,7 @@ impl<'test> TestCx<'test> {\n                 // so it needs to be removed when comparing the run-pass test execution output\n                 lazy_static! {\n                     static ref REMOTE_TEST_RE: Regex = Regex::new(\n-                        \"^uploaded \\\"\\\\$TEST_BUILD_DIR(/[[:alnum:]_\\\\-]+)+\\\", waiting for result\\n\"\n+                        \"^uploaded \\\"\\\\$TEST_BUILD_DIR(/[[:alnum:]_\\\\-.]+)+\\\", waiting for result\\n\"\n                     )\n                     .unwrap();\n                 }"}]}