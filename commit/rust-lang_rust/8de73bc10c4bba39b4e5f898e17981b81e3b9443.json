{"sha": "8de73bc10c4bba39b4e5f898e17981b81e3b9443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZTczYmMxMGM0YmJhMzliNGU1Zjg5OGUxNzk4MWI4MWUzYjk0NDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-09T19:18:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-09T19:18:39Z"}, "message": "Rollup merge of #67975 - EmbarkStudios:export-statics-wasm, r=alexcrichton\n\nExport public scalar statics in wasm\n\nFixes #67453\n\nI am not sure which export level statics should get when exporting them in wasm. This small change fixes the issue that I had, but this might not be the correct way to implement this.", "tree": {"sha": "2ab0cf521bf07d4c8ce7100a5a1c1e41839abae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab0cf521bf07d4c8ce7100a5a1c1e41839abae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de73bc10c4bba39b4e5f898e17981b81e3b9443", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeF3yPCRBK7hj4Ov3rIwAAdHIIAAWCb3xD3Vv74t2zU75HPDk8\nCIdLA2NPzfOu2JDrhbWy0shRXv2a4HIEBjuDbdJ1cjOKkL8cAabIWusDWRFhE0u7\nLCrsoaGar2lvmqnazWXIN9mbQns5E53G+BAVORdgVESXK68kKrvEfdU72jbCCuW+\nh3NqZDmPKnu3bG28ptBS+aJimqZIp+UFvbwK7y8lEiKj4L0W9gflScv7SZdj6g0q\n4sCYCbNc2WUvodAux1FM/sY2PrXfG4tzFOkNO4FgJBOybNdV8lw3K0Ua05TOi1W9\nSRXT5sZNWgdVnyc4TRzaJwaDwDTa+vL1Y1bTg8MKB5R4lEZH6t0FA4YSGjmtjyw=\n=vbZQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ab0cf521bf07d4c8ce7100a5a1c1e41839abae7\nparent 08c5999dc44c49e77098f532f14b6eff36bb2c40\nparent f1fb384cd62dc13d0b4647c9f988f6f46cbf4b6f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578597519 +0900\ncommitter GitHub <noreply@github.com> 1578597519 +0900\n\nRollup merge of #67975 - EmbarkStudios:export-statics-wasm, r=alexcrichton\n\nExport public scalar statics in wasm\n\nFixes #67453\n\nI am not sure which export level statics should get when exporting them in wasm. This small change fixes the issue that I had, but this might not be the correct way to implement this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de73bc10c4bba39b4e5f898e17981b81e3b9443", "html_url": "https://github.com/rust-lang/rust/commit/8de73bc10c4bba39b4e5f898e17981b81e3b9443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de73bc10c4bba39b4e5f898e17981b81e3b9443/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08c5999dc44c49e77098f532f14b6eff36bb2c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/08c5999dc44c49e77098f532f14b6eff36bb2c40", "html_url": "https://github.com/rust-lang/rust/commit/08c5999dc44c49e77098f532f14b6eff36bb2c40"}, {"sha": "f1fb384cd62dc13d0b4647c9f988f6f46cbf4b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fb384cd62dc13d0b4647c9f988f6f46cbf4b6f", "html_url": "https://github.com/rust-lang/rust/commit/f1fb384cd62dc13d0b4647c9f988f6f46cbf4b6f"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "a406b5f103b9d2f85f73109b6bb4cb33e7625699", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8de73bc10c4bba39b4e5f898e17981b81e3b9443/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de73bc10c4bba39b4e5f898e17981b81e3b9443/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=8de73bc10c4bba39b4e5f898e17981b81e3b9443", "patch": "@@ -345,7 +345,7 @@ fn symbol_export_level(tcx: TyCtxt<'_>, sym_def_id: DefId) -> SymbolExportLevel\n     if is_extern && !std_internal {\n         let target = &tcx.sess.target.target.llvm_target;\n         // WebAssembly cannot export data symbols, so reduce their export level\n-        if target.contains(\"wasm32\") || target.contains(\"emscripten\") {\n+        if target.contains(\"emscripten\") {\n             if let Some(Node::Item(&hir::Item { kind: hir::ItemKind::Static(..), .. })) =\n                 tcx.hir().get_if_local(sym_def_id)\n             {"}, {"sha": "ac9c20a57e5a4e005e0d665a2cd65f2a7d4eab8e", "filename": "src/test/run-make/wasm-export-all-symbols/bar.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8de73bc10c4bba39b4e5f898e17981b81e3b9443/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de73bc10c4bba39b4e5f898e17981b81e3b9443/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fbar.rs?ref=8de73bc10c4bba39b4e5f898e17981b81e3b9443", "patch": "@@ -2,3 +2,6 @@\n \n #[no_mangle]\n pub extern fn foo() {}\n+\n+#[no_mangle]\n+pub static FOO: u64 = 42;"}, {"sha": "72db3356f5635146259f438b8019973eda1c906c", "filename": "src/test/run-make/wasm-export-all-symbols/verify.js", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8de73bc10c4bba39b4e5f898e17981b81e3b9443/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js", "raw_url": "https://github.com/rust-lang/rust/raw/8de73bc10c4bba39b4e5f898e17981b81e3b9443/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js?ref=8de73bc10c4bba39b4e5f898e17981b81e3b9443", "patch": "@@ -9,16 +9,20 @@ console.log('exports', list);\n \n const my_exports = {};\n let nexports = 0;\n+\n for (const entry of list) {\n-  if (entry.kind !== 'function')\n-    continue;\n-  my_exports[entry.name] = true;\n-  nexports += 1;\n+  if (entry.kind == 'function'){\n+    nexports += 1;\n+  }\n+  my_exports[entry.name] = entry.kind;\n }\n \n-if (my_exports.foo === undefined)\n+if (my_exports.foo != \"function\")\n   throw new Error(\"`foo` wasn't defined\");\n \n+if (my_exports.FOO != \"global\")\n+  throw new Error(\"`FOO` wasn't defined\");\n+\n if (my_exports.main === undefined) {\n   if (nexports != 1)\n     throw new Error(\"should only have one function export\");"}]}