{"sha": "a6d011a98668cf672db2de8aae42f3654df4787f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZDAxMWE5ODY2OGNmNjcyZGIyZGU4YWFlNDJmMzY1NGRmNDc4N2Y=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-08-23T14:18:28Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-22T19:01:21Z"}, "message": "adapt to change in Session API", "tree": {"sha": "b3de3bdcbb9aa246e22a00b6a45711a37bb322fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3de3bdcbb9aa246e22a00b6a45711a37bb322fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d011a98668cf672db2de8aae42f3654df4787f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d011a98668cf672db2de8aae42f3654df4787f", "html_url": "https://github.com/rust-lang/rust/commit/a6d011a98668cf672db2de8aae42f3654df4787f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d011a98668cf672db2de8aae42f3654df4787f/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8503d5afb51b22b44c457c95328411c17f078f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8503d5afb51b22b44c457c95328411c17f078f", "html_url": "https://github.com/rust-lang/rust/commit/ce8503d5afb51b22b44c457c95328411c17f078f"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "e876585db656a17378f3019794f81cf5b179441e", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d011a98668cf672db2de8aae42f3654df4787f/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d011a98668cf672db2de8aae42f3654df4787f/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=a6d011a98668cf672db2de8aae42f3654df4787f", "patch": "@@ -466,7 +466,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 if (intrinsic == Some(\"init\") || intrinsic == Some(\"uninit\")) &&\n                     bx.cx.layout_of(sig.output()).abi.is_uninhabited()\n                 {\n-                    let loc = bx.sess().codemap().lookup_char_pos(span.lo());\n+                    let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n                     let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n                     let filename = C_str_slice(bx.cx, filename);\n                     let line = C_u32(bx.cx, loc.line as u32);"}]}