{"sha": "dbd2d77641e87ac841d12db1ca8e1f38d96f85d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZDJkNzc2NDFlODdhYzg0MWQxMmRiMWNhOGUxZjM4ZDk2Zjg1ZDM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-27T17:14:29Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-17T17:41:09Z"}, "message": "Drop orig_id.", "tree": {"sha": "6fcbf9b468132e4b84af438177144811eebeccc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fcbf9b468132e4b84af438177144811eebeccc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd2d77641e87ac841d12db1ca8e1f38d96f85d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd2d77641e87ac841d12db1ca8e1f38d96f85d3", "html_url": "https://github.com/rust-lang/rust/commit/dbd2d77641e87ac841d12db1ca8e1f38d96f85d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd2d77641e87ac841d12db1ca8e1f38d96f85d3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a13def486e2133db264ec9b83735c4c4546e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a13def486e2133db264ec9b83735c4c4546e58", "html_url": "https://github.com/rust-lang/rust/commit/37a13def486e2133db264ec9b83735c4c4546e58"}], "stats": {"total": 44, "additions": 10, "deletions": 34}, "files": [{"sha": "a3f8c7e771b85acba9a2962958236e08c797a1db", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbd2d77641e87ac841d12db1ca8e1f38d96f85d3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd2d77641e87ac841d12db1ca8e1f38d96f85d3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=dbd2d77641e87ac841d12db1ca8e1f38d96f85d3", "patch": "@@ -1653,7 +1653,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         };\n \n         let data = self.root.expn_data.get(self, index).unwrap().decode(self);\n-        rustc_span::hygiene::register_expn_id(data, hash)\n+        rustc_span::hygiene::register_expn_id(index, data, hash)\n     }\n \n     /// Imports the source_map from an external crate into the source_map of the crate"}, {"sha": "32149f1550e304d7f183f76705572f4b4bfb05dc", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dbd2d77641e87ac841d12db1ca8e1f38d96f85d3/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd2d77641e87ac841d12db1ca8e1f38d96f85d3/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=dbd2d77641e87ac841d12db1ca8e1f38d96f85d3", "patch": "@@ -179,14 +179,12 @@ impl LocalExpnId {\n     }\n \n     #[inline]\n-    pub fn set_expn_data(self, mut expn_data: ExpnData, ctx: impl HashStableContext) {\n+    pub fn set_expn_data(self, expn_data: ExpnData, ctx: impl HashStableContext) {\n         debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);\n         HygieneData::with(|data| {\n             let old_expn_data = &mut data.local_expn_data[self];\n             assert!(old_expn_data.is_none(), \"expansion data is reset for an expansion ID\");\n-            assert_eq!(expn_data.orig_id, None);\n             debug_assert_eq!(expn_data.krate, LOCAL_CRATE);\n-            expn_data.orig_id = Some(self.as_u32());\n             *old_expn_data = Some(expn_data);\n         });\n         update_disambiguator(self, ctx)\n@@ -306,14 +304,13 @@ pub struct HygieneData {\n \n impl HygieneData {\n     crate fn new(edition: Edition) -> Self {\n-        let mut root_data = ExpnData::default(\n+        let root_data = ExpnData::default(\n             ExpnKind::Root,\n             DUMMY_SP,\n             edition,\n             Some(CRATE_DEF_ID.to_def_id()),\n             None,\n         );\n-        root_data.orig_id = Some(0);\n \n         HygieneData {\n             local_expn_data: IndexVec::from_elem_n(Some(root_data), 1),\n@@ -339,13 +336,11 @@ impl HygieneData {\n         with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))\n     }\n \n-    fn fresh_expn(&mut self, mut expn_data: Option<ExpnData>) -> LocalExpnId {\n-        let expn_id = self.local_expn_data.next_index();\n-        if let Some(data) = expn_data.as_mut() {\n+    fn fresh_expn(&mut self, expn_data: Option<ExpnData>) -> LocalExpnId {\n+        if let Some(data) = &expn_data {\n             debug_assert_eq!(data.krate, LOCAL_CRATE);\n-            assert_eq!(data.orig_id, None);\n-            data.orig_id = Some(expn_id.as_u32());\n         }\n+        let expn_id = self.local_expn_data.next_index();\n         self.local_expn_data.push(expn_data);\n         let _eid = self.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));\n         debug_assert_eq!(expn_id, _eid);\n@@ -884,14 +879,6 @@ pub struct ExpnData {\n     /// foreign `ExpnId`s will have their `ExpnData` looked up\n     /// from the crate specified by `Crate\n     krate: CrateNum,\n-    /// The raw that this `ExpnData` had in its original crate.\n-    /// An `ExpnData` can be created before being assigned an `ExpnId`,\n-    /// so this might be `None` until `set_expn_data` is called\n-    // This is used only for serialization/deserialization purposes:\n-    // two `ExpnData`s that differ only in their `orig_id` should\n-    // be considered equivalent.\n-    #[stable_hasher(ignore)]\n-    orig_id: Option<u32>,\n     /// Used to force two `ExpnData`s to have different `Fingerprint`s.\n     /// Due to macro expansion, it's possible to end up with two `ExpnId`s\n     /// that have identical `ExpnData`s. This violates the contract of `HashStable`\n@@ -930,7 +917,6 @@ pub struct ExpnData {\n     pub parent_module: Option<DefId>,\n }\n \n-// These would require special handling of `orig_id`.\n impl !PartialEq for ExpnData {}\n impl !Hash for ExpnData {}\n \n@@ -959,7 +945,6 @@ impl ExpnData {\n             macro_def_id,\n             parent_module,\n             krate: LOCAL_CRATE,\n-            orig_id: None,\n             disambiguator: 0,\n         }\n     }\n@@ -984,7 +969,6 @@ impl ExpnData {\n             macro_def_id,\n             parent_module,\n             krate: LOCAL_CRATE,\n-            orig_id: None,\n             disambiguator: 0,\n         }\n     }\n@@ -1222,15 +1206,9 @@ pub struct HygieneDecodeContext {\n }\n \n /// Register an expansion which has been decoded from the on-disk-cache for the local crate.\n-pub fn register_local_expn_id(mut data: ExpnData, hash: ExpnHash) -> ExpnId {\n+pub fn register_local_expn_id(data: ExpnData, hash: ExpnHash) -> ExpnId {\n     HygieneData::with(|hygiene_data| {\n-        // If we just deserialized an `ExpnData` owned by\n-        // the local crate, its `orig_id` will be stale,\n-        // so we need to update it to its own value.\n-        // This only happens when we deserialize the incremental cache,\n-        // since a crate will never decode its own metadata.\n         let expn_id = hygiene_data.local_expn_data.next_index();\n-        data.orig_id = Some(expn_id.as_u32());\n         hygiene_data.local_expn_data.push(Some(data));\n         let _eid = hygiene_data.local_expn_hashes.push(hash);\n         debug_assert_eq!(expn_id, _eid);\n@@ -1244,9 +1222,8 @@ pub fn register_local_expn_id(mut data: ExpnData, hash: ExpnHash) -> ExpnId {\n }\n \n /// Register an expansion which has been decoded from the metadata of a foreign crate.\n-pub fn register_expn_id(data: ExpnData, hash: ExpnHash) -> ExpnId {\n-    let expn_id =\n-        ExpnId { krate: data.krate, local_id: ExpnIndex::from_u32(data.orig_id.unwrap()) };\n+pub fn register_expn_id(local_id: ExpnIndex, data: ExpnData, hash: ExpnHash) -> ExpnId {\n+    let expn_id = ExpnId { krate: data.krate, local_id };\n     HygieneData::with(|hygiene_data| {\n         let _old_data = hygiene_data.foreign_expn_data.insert(expn_id, data);\n         debug_assert!(_old_data.is_none());\n@@ -1284,9 +1261,8 @@ pub fn decode_expn_id(\n     // other ExpnIds\n     let (expn_data, hash) = decode_data(expn_id);\n     debug_assert_eq!(krate, expn_data.krate);\n-    debug_assert_eq!(Some(index.as_u32()), expn_data.orig_id);\n \n-    register_expn_id(expn_data, hash)\n+    register_expn_id(index, expn_data, hash)\n }\n \n // Decodes `SyntaxContext`, using the provided `HygieneDecodeContext`"}]}