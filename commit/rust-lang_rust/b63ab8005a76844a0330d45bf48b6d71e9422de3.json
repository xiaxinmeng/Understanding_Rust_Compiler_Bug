{"sha": "b63ab8005a76844a0330d45bf48b6d71e9422de3", "node_id": "C_kwDOAAsO6NoAKGI2M2FiODAwNWE3Njg0NGEwMzMwZDQ1YmY0OGI2ZDcxZTk0MjJkZTM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-10-19T07:27:59Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-10-24T01:55:57Z"}, "message": "update cfg(bootstrap)", "tree": {"sha": "6466588771528125a1745d1816f400be2ac8abbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6466588771528125a1745d1816f400be2ac8abbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b63ab8005a76844a0330d45bf48b6d71e9422de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b63ab8005a76844a0330d45bf48b6d71e9422de3", "html_url": "https://github.com/rust-lang/rust/commit/b63ab8005a76844a0330d45bf48b6d71e9422de3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b63ab8005a76844a0330d45bf48b6d71e9422de3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d088abfb3dfd45f2d021fd2eef7a0f8ba1a204a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d088abfb3dfd45f2d021fd2eef7a0f8ba1a204a", "html_url": "https://github.com/rust-lang/rust/commit/5d088abfb3dfd45f2d021fd2eef7a0f8ba1a204a"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "c4fc7e0df005fb3dd5409ed2de65aa0162e505b0", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(in_band_lifetimes)]"}, {"sha": "77784bf1705234d0018ef5aca044267902dd6735", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -11,7 +11,6 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(bool_to_option)]\n-#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(control_flow_enum)]\n #![feature(core_intrinsics)]\n #![feature(extend_one)]"}, {"sha": "45639bad24313164070e1ce4ae9162b3e71aa8b7", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -124,21 +124,15 @@ macro_rules! newtype_index {\n \n             #[inline]\n             $v const fn from_usize(value: usize) -> Self {\n-                #[cfg(not(bootstrap))]\n                 assert!(value <= ($max as usize));\n-                #[cfg(bootstrap)]\n-                [()][(value > ($max as usize)) as usize];\n                 unsafe {\n                     Self::from_u32_unchecked(value as u32)\n                 }\n             }\n \n             #[inline]\n             $v const fn from_u32(value: u32) -> Self {\n-                #[cfg(not(bootstrap))]\n                 assert!(value <= $max);\n-                #[cfg(bootstrap)]\n-                [()][(value > $max) as usize];\n                 unsafe {\n                     Self::from_u32_unchecked(value)\n                 }"}, {"sha": "77a72ce63ce5ee53ccc2ed8e74ce159fcafc1d27", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -2,7 +2,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(exact_size_is_empty)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]"}, {"sha": "3df4ece39f0a011db754afe6326cddcfeee6e77d", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -1,7 +1,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "5e6fe3b9b32b93efe9c64567fa12613418e0e51d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -156,7 +156,7 @@\n //\n // Rustdoc features:\n #![feature(doc_cfg)]\n-#![cfg_attr(not(bootstrap), feature(doc_cfg_hide))]\n+#![feature(doc_cfg_hide)]\n // Technically, this is a bug in rustdoc: rustdoc sees the documentation on `#[lang = slice_alloc]`\n // blocks is for `&[T]`, which also has documentation using this feature in `core`, and gets mad\n // that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs"}, {"sha": "281ff3badfbd8de32fc47e83cfeec042890dbd67", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -105,7 +105,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"clone\"]\n #[rustc_diagnostic_item = \"Clone\"]\n-#[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]\n+#[rustc_trivial_field_reads]\n pub trait Clone: Sized {\n     /// Returns a copy of the value.\n     ///"}, {"sha": "9258b4d0818f5ff929d4256bcfef78bf291e6ffc", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -374,7 +374,6 @@ impl<'a> Arguments<'a> {\n     ///    valid index of `args`.\n     /// 3. Every [`Count::Param`] within `fmt` must contain a valid index of\n     ///    `args`.\n-    #[cfg(not(bootstrap))]\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n@@ -388,19 +387,6 @@ impl<'a> Arguments<'a> {\n         Arguments { pieces, fmt: Some(fmt), args }\n     }\n \n-    #[cfg(bootstrap)]\n-    #[doc(hidden)]\n-    #[inline]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n-    pub const unsafe fn new_v1_formatted(\n-        pieces: &'a [&'static str],\n-        args: &'a [ArgumentV1<'a>],\n-        fmt: &'a [rt::v1::Argument],\n-    ) -> Arguments<'a> {\n-        Arguments { pieces, fmt: Some(fmt), args }\n-    }\n-\n     /// Estimates the length of the formatted text.\n     ///\n     /// This is intended to be used for setting initial `String` capacity\n@@ -619,7 +605,7 @@ impl Display for Arguments<'_> {\n )]\n #[doc(alias = \"{:?}\")]\n #[rustc_diagnostic_item = \"Debug\"]\n-#[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]\n+#[rustc_trivial_field_reads]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     ///"}, {"sha": "91230c027c2d2f6e91031b1af3c397e01c1a00dd", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -2252,7 +2252,6 @@ pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n /// or have any other observable side-effects, the behavior is undefined.\n ///\n /// [referential transparency]: https://en.wikipedia.org/wiki/Referential_transparency\n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"const_eval_select\",\n     issue = \"none\",\n@@ -2273,7 +2272,6 @@ where\n     called_at_rt.call_once(arg)\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(\n     feature = \"const_eval_select\",\n     issue = \"none\","}, {"sha": "bc6173b7ffaf66b0cc9219825441d7b7a5b52c61", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -150,7 +150,6 @@\n #![feature(const_fn_trait_bound)]\n #![feature(const_impl_trait)]\n #![feature(const_mut_refs)]\n-#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(const_precise_live_drops)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_refs_to_cell)]\n@@ -159,7 +158,7 @@\n #![feature(doc_notable_trait)]\n #![feature(doc_primitive)]\n #![feature(exhaustive_patterns)]\n-#![cfg_attr(not(bootstrap), feature(doc_cfg_hide))]\n+#![feature(doc_cfg_hide)]\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(if_let_guard)]\n@@ -170,7 +169,7 @@\n #![feature(llvm_asm)]\n #![feature(min_specialization)]\n #![feature(mixed_integer_ops)]\n-#![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n+#![feature(must_not_suspend)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(no_core)]"}, {"sha": "37446bafacb240740873234b3f51dce261457b67", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -30,8 +30,7 @@ use crate::hash::Hasher;\n /// [arc]: ../../std/sync/struct.Arc.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(all(not(test), bootstrap), rustc_diagnostic_item = \"send_trait\")]\n-#[cfg_attr(all(not(test), not(bootstrap)), rustc_diagnostic_item = \"Send\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Send\")]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` cannot be sent between threads safely\",\n     label = \"`{Self}` cannot be sent between threads safely\""}, {"sha": "087d2348ace0896e6a9fea346022f761169f953c", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -59,7 +59,7 @@ pub fn panic_str(expr: &str) -> ! {\n \n #[inline]\n #[track_caller]\n-#[cfg_attr(not(bootstrap), lang = \"panic_display\")] // needed for const-evaluated panics\n+#[lang = \"panic_display\"] // needed for const-evaluated panics\n pub fn panic_display<T: fmt::Display>(x: &T) -> ! {\n     panic_fmt(format_args!(\"{}\", *x));\n }"}, {"sha": "1948844e1fd7b2e2dfa49bbefbc640972ad7d9b3", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -11,7 +11,6 @@\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n #![feature(const_maybe_uninit_assume_init)]\n-#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]"}, {"sha": "335e0e072f3d9ac38f666cb5aeb9b0da87a3306d", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63ab8005a76844a0330d45bf48b6d71e9422de3/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=b63ab8005a76844a0330d45bf48b6d71e9422de3", "patch": "@@ -272,7 +272,7 @@\n #![feature(custom_test_frameworks)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n-#![cfg_attr(not(bootstrap), feature(doc_cfg_hide))]\n+#![feature(doc_cfg_hide)]\n #![feature(doc_keyword)]\n #![feature(doc_masked)]\n #![feature(doc_notable_trait)]\n@@ -308,7 +308,7 @@\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n #![feature(mixed_integer_ops)]\n-#![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n+#![feature(must_not_suspend)]\n #![feature(needs_panic_runtime)]\n #![feature(negative_impls)]\n #![feature(never_type)]"}]}