{"sha": "610e1a1e05e7160d775f433855138f6063169c56", "node_id": "C_kwDOAAsO6NoAKDYxMGUxYTFlMDVlNzE2MGQ3NzVmNDMzODU1MTM4ZjYwNjMxNjljNTY", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-04-19T15:39:49Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-02-07T09:37:55Z"}, "message": "Add tag for ignoring wasm", "tree": {"sha": "1b114d68e13d27f940a3c6ea3c0a8d067a02fc92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b114d68e13d27f940a3c6ea3c0a8d067a02fc92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610e1a1e05e7160d775f433855138f6063169c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610e1a1e05e7160d775f433855138f6063169c56", "html_url": "https://github.com/rust-lang/rust/commit/610e1a1e05e7160d775f433855138f6063169c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610e1a1e05e7160d775f433855138f6063169c56/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9f5145ac9ce07d79aeb75ad049cab957b0fb92", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9f5145ac9ce07d79aeb75ad049cab957b0fb92", "html_url": "https://github.com/rust-lang/rust/commit/5d9f5145ac9ce07d79aeb75ad049cab957b0fb92"}], "stats": {"total": 537, "additions": 269, "deletions": 268}, "files": [{"sha": "859fddd65c1ae0bc87a43ea996d06cd1df4e87e6", "filename": "tests/mir-opt/enum_opt.cand.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -2,54 +2,54 @@\n + // MIR for `cand` after EnumSizeOpt\n   \n   fn cand() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:49:15: 49:15\n-      let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:50:7: 50:12\n-      let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:51:7: 51:34\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:51:24: 51:33\n-+     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _8: *mut Candidate;          // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:50:15: 50:15\n+      let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:51:7: 51:12\n+      let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:52:7: 52:34\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:52:24: 52:33\n++     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _8: *mut Candidate;          // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:50:7: 50:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:51:7: 51:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:50:7: 50:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:50:15: 50:34\n-          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:50:15: 50:34\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:50:15: 50:34\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:51:7: 51:34\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:51:24: 51:33\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:51:24: 51:33\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:51:7: 51:34\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:51:7: 51:34\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:51:7: 51:34\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:51:33: 51:34\n--         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _4 = const [2_usize, 8196_usize]; // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:51:33: 51:34\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:49:15: 52:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:52:1: 52:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:52:2: 52:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:51:7: 51:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n+          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:52:24: 52:33\n+          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:52:24: 52:33\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:52:33: 52:34\n+-         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _4 = const [2_usize, 8196_usize]; // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:52:33: 52:34\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:50:15: 53:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:53:1: 53:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:53:2: 53:2\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:49:1: 52:2\n+          resume;                          // scope 0 at $DIR/enum_opt.rs:50:1: 53:2\n       }\n   }\n   "}, {"sha": "c3325f2d81f6ef3546ec823105c9d1e2f13c8b38", "filename": "tests/mir-opt/enum_opt.cand.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -2,54 +2,54 @@\n + // MIR for `cand` after EnumSizeOpt\n   \n   fn cand() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:49:15: 49:15\n-      let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:50:7: 50:12\n-      let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:51:7: 51:34\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:51:24: 51:33\n-+     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _8: *mut Candidate;          // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n-+     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:51:3: 51:34\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:50:15: 50:15\n+      let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:51:7: 51:12\n+      let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:52:7: 52:34\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:52:24: 52:33\n++     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _8: *mut Candidate;          // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n++     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:50:7: 50:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:51:7: 51:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:50:7: 50:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:50:15: 50:34\n-          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:50:15: 50:34\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:50:15: 50:34\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:51:7: 51:34\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:51:24: 51:33\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:51:24: 51:33\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:51:7: 51:34\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:51:7: 51:34\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:51:7: 51:34\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:51:33: 51:34\n--         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _4 = const [2_usize, 8200_usize]; // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-+         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:51:3: 51:34\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:51:33: 51:34\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:49:15: 52:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:52:1: 52:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:52:2: 52:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:51:7: 51:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n+          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:52:24: 52:33\n+          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:52:24: 52:33\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:52:33: 52:34\n+-         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _4 = const [2_usize, 8200_usize]; // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n++         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:52:33: 52:34\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:50:15: 53:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:53:1: 53:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:53:2: 53:2\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:49:1: 52:2\n+          resume;                          // scope 0 at $DIR/enum_opt.rs:50:1: 53:2\n       }\n   }\n   "}, {"sha": "bc16a780683afa1958813b2a4bf8cca3b814fc01", "filename": "tests/mir-opt/enum_opt.invalid.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `invalid` after EnumSizeOpt\n   \n   fn invalid() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:55:18: 55:18\n-      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:56:7: 56:12\n-      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:57:7: 57:36\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:57:26: 57:35\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:56:18: 56:18\n+      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:57:7: 57:12\n+      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:58:7: 58:36\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:58:26: 58:35\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:56:7: 56:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:57:7: 57:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:56:7: 56:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:56:15: 56:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:56:15: 56:29\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:57:7: 57:36\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:57:26: 57:35\n-          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:57:26: 57:35\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:57:7: 57:36\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:57:7: 57:36\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:57:7: 57:36\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:57:35: 57:36\n-          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:57:3: 57:36\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:57:35: 57:36\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:55:18: 58:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:58:1: 58:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:58:2: 58:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:57:7: 57:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:57:15: 57:29\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:57:15: 57:29\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:58:26: 58:35\n+          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:58:26: 58:35\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:58:35: 58:36\n+          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:58:3: 58:36\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:58:35: 58:36\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:56:18: 59:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:59:1: 59:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:59:2: 59:2\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:55:1: 58:2\n+          resume;                          // scope 0 at $DIR/enum_opt.rs:56:1: 59:2\n       }\n   }\n   "}, {"sha": "bc16a780683afa1958813b2a4bf8cca3b814fc01", "filename": "tests/mir-opt/enum_opt.invalid.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `invalid` after EnumSizeOpt\n   \n   fn invalid() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:55:18: 55:18\n-      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:56:7: 56:12\n-      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:57:7: 57:36\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:57:26: 57:35\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:56:18: 56:18\n+      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:57:7: 57:12\n+      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:58:7: 58:36\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:58:26: 58:35\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:56:7: 56:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:57:7: 57:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:56:7: 56:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:56:15: 56:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:56:15: 56:29\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:57:7: 57:36\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:57:26: 57:35\n-          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:57:26: 57:35\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:57:7: 57:36\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:57:7: 57:36\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:57:7: 57:36\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:57:35: 57:36\n-          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:57:3: 57:36\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:57:35: 57:36\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:55:18: 58:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:58:1: 58:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:58:2: 58:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:57:7: 57:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:57:15: 57:29\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:57:15: 57:29\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:58:26: 58:35\n+          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:58:26: 58:35\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:58:35: 58:36\n+          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:58:3: 58:36\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:58:35: 58:36\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:56:18: 59:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:59:1: 59:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:59:2: 59:2\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:55:1: 58:2\n+          resume;                          // scope 0 at $DIR/enum_opt.rs:56:1: 59:2\n       }\n   }\n   "}, {"sha": "65f77af0592ea95b71451b84b7a68914ac69fbb7", "filename": "tests/mir-opt/enum_opt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.rs?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -1,5 +1,6 @@\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // compile-flags: -Zunsound-mir-opts -Zmir-opt-level=3\n+// ignore-wasm32-bare compiled with panic=abort by default\n #![feature(arbitrary_enum_discriminant, repr128)]\n \n // Tests that an enum with a variant with no data gets correctly transformed."}, {"sha": "654e385bfe7854d8e3c5eef9a5b29a2d1c873494", "filename": "tests/mir-opt/enum_opt.trunc.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -2,45 +2,45 @@\n + // MIR for `trunc` after EnumSizeOpt\n   \n   fn trunc() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:61:16: 61:16\n-      let mut _1: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:62:7: 62:12\n-      let mut _2: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:63:7: 63:32\n-      let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:63:22: 63:31\n-      let mut _4: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:64:7: 64:32\n-      let mut _5: [u8; 4096];              // in scope 0 at $DIR/enum_opt.rs:64:22: 64:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:62:16: 62:16\n+      let mut _1: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:63:7: 63:12\n+      let mut _2: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:64:7: 64:32\n+      let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:64:22: 64:31\n+      let mut _4: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:65:7: 65:32\n+      let mut _5: [u8; 4096];              // in scope 0 at $DIR/enum_opt.rs:65:22: 65:31\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:62:7: 62:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:63:7: 63:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:62:7: 62:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:62:15: 62:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:62:15: 62:29\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:63:7: 63:32\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:63:22: 63:31\n-          _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:63:22: 63:31\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:63:7: 63:32\n-          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:63:7: 63:32\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:63:7: 63:32\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:63:31: 63:32\n-          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:63:3: 63:32\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:63:31: 63:32\n-          StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n-          _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n-          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n-          _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:64:3: 64:32\n-          StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:61:16: 65:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:65:1: 65:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:65:2: 65:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:63:7: 63:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:63:15: 63:29\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:63:15: 63:29\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n+          _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n+          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n+          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:64:3: 64:32\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n+          StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n+          StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:65:22: 65:31\n+          _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:65:22: 65:31\n+          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n+          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n+          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n+          StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:65:31: 65:32\n+          _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:65:3: 65:32\n+          StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:65:31: 65:32\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:62:16: 66:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:66:1: 66:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:66:2: 66:2\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:61:1: 65:2\n+          resume;                          // scope 0 at $DIR/enum_opt.rs:62:1: 66:2\n       }\n   }\n   "}, {"sha": "654e385bfe7854d8e3c5eef9a5b29a2d1c873494", "filename": "tests/mir-opt/enum_opt.trunc.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -2,45 +2,45 @@\n + // MIR for `trunc` after EnumSizeOpt\n   \n   fn trunc() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:61:16: 61:16\n-      let mut _1: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:62:7: 62:12\n-      let mut _2: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:63:7: 63:32\n-      let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:63:22: 63:31\n-      let mut _4: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:64:7: 64:32\n-      let mut _5: [u8; 4096];              // in scope 0 at $DIR/enum_opt.rs:64:22: 64:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:62:16: 62:16\n+      let mut _1: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:63:7: 63:12\n+      let mut _2: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:64:7: 64:32\n+      let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:64:22: 64:31\n+      let mut _4: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:65:7: 65:32\n+      let mut _5: [u8; 4096];              // in scope 0 at $DIR/enum_opt.rs:65:22: 65:31\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:62:7: 62:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:63:7: 63:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:62:7: 62:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:62:15: 62:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:62:15: 62:29\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:63:7: 63:32\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:63:22: 63:31\n-          _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:63:22: 63:31\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:63:7: 63:32\n-          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:63:7: 63:32\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:63:7: 63:32\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:63:31: 63:32\n-          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:63:3: 63:32\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:63:31: 63:32\n-          StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n-          _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n-          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n-          _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:64:3: 64:32\n-          StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:61:16: 65:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:65:1: 65:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:65:2: 65:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:63:7: 63:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:63:15: 63:29\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:63:15: 63:29\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n+          _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n+          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n+          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:64:3: 64:32\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n+          StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n+          StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:65:22: 65:31\n+          _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:65:22: 65:31\n+          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n+          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n+          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n+          StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:65:31: 65:32\n+          _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:65:3: 65:32\n+          StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:65:31: 65:32\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:62:16: 66:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:66:1: 66:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:66:2: 66:2\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:61:1: 65:2\n+          resume;                          // scope 0 at $DIR/enum_opt.rs:62:1: 66:2\n       }\n   }\n   "}, {"sha": "bc72e507d5ab7a89e78763e32dd95510f0b7791e", "filename": "tests/mir-opt/enum_opt.unin.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -2,53 +2,53 @@\n + // MIR for `unin` after EnumSizeOpt\n   \n   fn unin() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:43:15: 43:15\n-      let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:44:7: 44:12\n-      let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:45:7: 45:31\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:45:21: 45:30\n-+     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _8: *mut NoData;             // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:44:15: 44:15\n+      let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:45:7: 45:12\n+      let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:46:7: 46:31\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:46:21: 46:30\n++     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _8: *mut NoData;             // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:44:7: 44:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:45:7: 45:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:44:7: 44:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:44:15: 44:27\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:44:15: 44:27\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:45:7: 45:31\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:45:21: 45:30\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:45:21: 45:30\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:45:7: 45:31\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:45:7: 45:31\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:45:7: 45:31\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:45:30: 45:31\n--         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _4 = const [4_usize, 8196_usize]; // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:45:30: 45:31\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:43:15: 46:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:46:1: 46:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:46:2: 46:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:45:7: 45:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:45:15: 45:27\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:45:15: 45:27\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:46:21: 46:30\n+          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:46:21: 46:30\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:46:30: 46:31\n+-         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _4 = const [4_usize, 8196_usize]; // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:46:30: 46:31\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:44:15: 47:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:47:1: 47:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:47:2: 47:2\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:43:1: 46:2\n+          resume;                          // scope 0 at $DIR/enum_opt.rs:44:1: 47:2\n       }\n   }\n   "}, {"sha": "9001268dc2087940ed58cc9fb6bc3873cae47aad", "filename": "tests/mir-opt/enum_opt.unin.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/610e1a1e05e7160d775f433855138f6063169c56/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff?ref=610e1a1e05e7160d775f433855138f6063169c56", "patch": "@@ -2,53 +2,53 @@\n + // MIR for `unin` after EnumSizeOpt\n   \n   fn unin() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:43:15: 43:15\n-      let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:44:7: 44:12\n-      let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:45:7: 45:31\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:45:21: 45:30\n-+     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _8: *mut NoData;             // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n-+     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:45:3: 45:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:44:15: 44:15\n+      let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:45:7: 45:12\n+      let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:46:7: 46:31\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:46:21: 46:30\n++     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _8: *mut NoData;             // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n++     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:44:7: 44:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:45:7: 45:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:44:7: 44:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:44:15: 44:27\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:44:15: 44:27\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:45:7: 45:31\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:45:21: 45:30\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:45:21: 45:30\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:45:7: 45:31\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:45:7: 45:31\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:45:7: 45:31\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:45:30: 45:31\n--         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _4 = const [8_usize, 8200_usize]; // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-+         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:45:3: 45:31\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:45:30: 45:31\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:43:15: 46:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:46:1: 46:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:46:2: 46:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:45:7: 45:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:45:15: 45:27\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:45:15: 45:27\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:46:21: 46:30\n+          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:46:21: 46:30\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:46:30: 46:31\n+-         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _4 = const [8_usize, 8200_usize]; // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n++         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:46:30: 46:31\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:44:15: 47:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:47:1: 47:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:47:2: 47:2\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:43:1: 46:2\n+          resume;                          // scope 0 at $DIR/enum_opt.rs:44:1: 47:2\n       }\n   }\n   "}]}