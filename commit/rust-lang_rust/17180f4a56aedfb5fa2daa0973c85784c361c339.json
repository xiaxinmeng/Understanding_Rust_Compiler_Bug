{"sha": "17180f4a56aedfb5fa2daa0973c85784c361c339", "node_id": "C_kwDOAAsO6NoAKDE3MTgwZjRhNTZhZWRmYjVmYTJkYWEwOTczYzg1Nzg0YzM2MWMzMzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T08:20:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T08:20:11Z"}, "message": "Auto merge of #94872 - mati865:mingw-llvm-target, r=petrochenkov\n\nAdd MVP LLVM based mingw-w64 targets\n\nFixes https://github.com/rust-lang/rust/issues/72241\n\nThose are `rustc` side changes to create working x86_64 and AArch64 Rustc hosts and targets.\nApart from this PR changes to various crates are required which I'll do once this is accepted.\n\nI'm expecting more changes on `rustc` side later on as I cannot even run full testsuite at this moment because passing JSON spec breaks paths in various tests.\n\nTier 3 policy:\n\n> A tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target. (The mechanism to track and CC such developers may evolve over time.)\n\nI pledge to do my best maintaining it, MSYS2 is one of interested consumers so it should have enough testing (after the releases).\n\n > Targets must use naming consistent with any existing targets; for instance, a target for the same CPU or OS as an existing Rust target should use the same name for that CPU or OS. Targets should normally use the same names and naming conventions as used elsewhere in the broader ecosystem beyond Rust (such as in other toolchains), unless they have a very good reason to diverge. Changing the name of a target can be highly disruptive, especially once the target reaches a higher tier, so getting the name right is important even for a tier 3 target.\n\nThis triple name was discussed at [`t-compiler/LLVM+mingw-w64 Windows targets`](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/LLVM.2Bmingw-w64.20Windows.20targets)\n\n> Target names should not introduce undue confusion or ambiguity unless absolutely necessary to maintain ecosystem compatibility. For example, if the name of the target makes people extremely likely to form incorrect beliefs about what it targets, the name should be changed or augmented to disambiguate it.\n\nI think the explanation in platform support doc is enough to make this aspect clear.\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nIt's using open source tools only.\n\n> The target must not introduce license incompatibilities.\n\nIt's even more liberal than already existing `*-pc-windows-gnu`.\n\n> Anything added to the Rust repository must be under the standard Rust license (MIT OR Apache-2.0).\n\nUnderstood.\n\n> The target must not cause the Rust tools or libraries built for any other host (even when supporting cross-compilation to the target) to depend on any new dependency less permissive than the Rust licensing policy. This applies whether the dependency is a Rust crate that would require adding new license exceptions (as specified by the tidy tool in the rust-lang/rust repository), or whether the dependency is a native library or binary. In other words, the introduction of the target must not cause a user installing or running a version of Rust or the Rust tools to be subject to any new license requirements.\n\nThere are no new dependencies/features required.\n\n> Compiling, linking, and emitting functional binaries, libraries, or other code for the target (whether hosted on the target itself or cross-compiling from another target) must not depend on proprietary (non-FOSS) libraries. Host tools built for the target itself may depend on the ordinary runtime libraries supplied by the platform and commonly used by other applications built for the target, but those libraries must not be required for code generation for the target; cross-compilation to the target must not require such libraries at all. For instance, rustc built for the target may depend on a common proprietary C runtime library or console output library, but must not depend on a proprietary code generation library or code optimization library. Rust's license permits such combinations, but the Rust project has no interest in maintaining such combinations within the scope of Rust itself, even at tier 3.\n\nAs previously said it's using open source tools only.\n\n> \"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\" legal/licensing terms include but are not limited to: non-disclosure requirements, non-compete requirements, contributor license agreements (CLAs) or equivalent, \"non-commercial\"/\"research-only\"/etc terms, requirements conditional on the employer or employment of any particular Rust developers, revocable terms, any requirements that create liability for the Rust project or its developers or users, or any requirements that adversely affect the livelihood or prospects of the Rust project or its developers or users.\n\nThere are no such terms present/\n\n> Neither this policy nor any decisions made regarding targets shall create any binding agreement or estoppel by any party. If any member of an approving Rust team serves as one of the maintainers of a target, or has any legal or employment requirement (explicit or implicit) that might affect their decisions regarding a target, they must recuse themselves from any approval decisions regarding the target's tier status, though they may otherwise participate in discussions.\n\nI'm not the reviewer here.\n\n> This requirement does not prevent part or all of this policy from being cited in an explicit contract or work agreement (e.g. to implement or maintain support for a target). This requirement exists to ensure that a developer or team responsible for reviewing and approving a target does not face any legal threats or obligations that would prevent them from freely exercising their judgment in such approval, even if such judgment involves subjective matters or goes beyond the letter of these requirements.\n\nAgain I'm not the reviewer here.\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate (core for most targets, alloc for targets that can support dynamic memory allocation, std for targets with an operating system or equivalent layer of system-provided functionality), but may leave some code unimplemented (either unavailable or stubbed out as appropriate), whether because the target makes it impossible to implement or challenging to implement. The authors of pull requests are not obligated to avoid calling any portions of the standard library on the basis of a tier 3 target not implementing those portions.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible. If the target supports running binaries, or running tests (even if they do not pass), the documentation must explain how to run such binaries or tests for the target, using emulation if possible or dedicated hardware if necessary.\n\nBuilding is described in platform support doc, running tests doesn't work right now (without hacks) because Rust's build system doesn't seem to support testing targets built from `.json`.\nDocs will be updated once this lands in beta allowing master branch to build and run tests without `.json` files.\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target. In particular, do not post comments (automated or manual) on a PR that derail or suggest a block on the PR based on a tier 3 target. Do not send automated messages or notifications (via any medium, including via `@)` to a PR author or others involved with a PR regarding a tier 3 target, unless they have opted into such messages.\n\nUnderstood.\n\n> Backlinks such as those generated by the issue/PR tracker when linking to an issue or PR are not considered a violation of this policy, within reason. However, such messages (even on a separate repository) must not generate notifications to anyone involved with a PR who has not requested such notifications.\n\nUnderstood.\n\n > Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\n\nI believe I didn't break any other target.\n\n> In particular, this may come up when working on closely related targets, such as variations of the same architecture with different features. Avoid introducing unconditional uses of features that another variation of the target may not have; use conditional compilation or runtime detection, as appropriate, to let each target run code supported by that target.\n\nI think there are no such problems in this PR.", "tree": {"sha": "32f22541cf0bbfbc3133937dd52728c0c9d5a25c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f22541cf0bbfbc3133937dd52728c0c9d5a25c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17180f4a56aedfb5fa2daa0973c85784c361c339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17180f4a56aedfb5fa2daa0973c85784c361c339", "html_url": "https://github.com/rust-lang/rust/commit/17180f4a56aedfb5fa2daa0973c85784c361c339", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17180f4a56aedfb5fa2daa0973c85784c361c339/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31879922e6ec8200eee6c144073eafcc4a73e38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31879922e6ec8200eee6c144073eafcc4a73e38", "html_url": "https://github.com/rust-lang/rust/commit/c31879922e6ec8200eee6c144073eafcc4a73e38"}, {"sha": "60361f2ca34f24955aff729826971c43ec254cf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/60361f2ca34f24955aff729826971c43ec254cf8", "html_url": "https://github.com/rust-lang/rust/commit/60361f2ca34f24955aff729826971c43ec254cf8"}], "stats": {"total": 193, "additions": 175, "deletions": 18}, "files": [{"sha": "8f6438e85ad7f7955205e022d69b9773d42a6dc7", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -152,8 +152,10 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n         };\n \n         let target = &self.config.sess.target;\n-        let mingw_gnu_toolchain =\n-            target.vendor == \"pc\" && target.os == \"windows\" && target.env == \"gnu\";\n+        let mingw_gnu_toolchain = target.vendor == \"pc\"\n+            && target.os == \"windows\"\n+            && target.env == \"gnu\"\n+            && target.abi.is_empty();\n \n         let import_name_and_ordinal_vector: Vec<(String, Option<u16>)> = dll_imports\n             .iter()"}, {"sha": "7729ec6bef4a7409eff955dc96b90e90524fcf4a", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -324,9 +324,10 @@ fn main() {\n \n     let stdcppname = if target.contains(\"openbsd\") {\n         if target.contains(\"sparc64\") { \"estdc++\" } else { \"c++\" }\n-    } else if target.contains(\"freebsd\") {\n-        \"c++\"\n-    } else if target.contains(\"darwin\") {\n+    } else if target.contains(\"darwin\")\n+        || target.contains(\"freebsd\")\n+        || target.contains(\"windows-gnullvm\")\n+    {\n         \"c++\"\n     } else if target.contains(\"netbsd\") && llvm_static_stdcpp.is_some() {\n         // NetBSD uses a separate library when relocation is required\n@@ -365,7 +366,7 @@ fn main() {\n \n     // Libstdc++ depends on pthread which Rust doesn't link on MinGW\n     // since nothing else requires it.\n-    if target.contains(\"windows-gnu\") {\n+    if target.ends_with(\"windows-gnu\") {\n         println!(\"cargo:rustc-link-lib=static:-bundle=pthread\");\n     }\n }"}, {"sha": "59c6a95c2c5c2de0e1739c6cd2d0e825ea57e19f", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_gnullvm.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -0,0 +1,16 @@\n+use crate::spec::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::windows_gnullvm_base::opts();\n+    base.max_atomic_width = Some(64);\n+    base.features = \"+neon,+fp-armv8\".into();\n+    base.linker = Some(\"aarch64-w64-mingw32-clang\".into());\n+\n+    Target {\n+        llvm_target: \"aarch64-pc-windows-gnu\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: base,\n+    }\n+}"}, {"sha": "832eeec3e8b272bb7b9cf7d2c26719c7d530f93e", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -82,6 +82,7 @@ mod uefi_msvc_base;\n mod vxworks_base;\n mod wasm_base;\n mod windows_gnu_base;\n+mod windows_gnullvm_base;\n mod windows_msvc_base;\n mod windows_uwp_gnu_base;\n mod windows_uwp_msvc_base;\n@@ -939,6 +940,9 @@ supported_targets! {\n     (\"i686-uwp-windows-gnu\", i686_uwp_windows_gnu),\n     (\"x86_64-uwp-windows-gnu\", x86_64_uwp_windows_gnu),\n \n+    (\"aarch64-pc-windows-gnullvm\", aarch64_pc_windows_gnullvm),\n+    (\"x86_64-pc-windows-gnullvm\", x86_64_pc_windows_gnullvm),\n+\n     (\"aarch64-pc-windows-msvc\", aarch64_pc_windows_msvc),\n     (\"aarch64-uwp-windows-msvc\", aarch64_uwp_windows_msvc),\n     (\"x86_64-pc-windows-msvc\", x86_64_pc_windows_msvc),"}, {"sha": "9f9f8be87184e0094aaccacb0abe7edf404aea3c", "filename": "compiler/rustc_target/src/spec/windows_gnullvm_base.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -0,0 +1,52 @@\n+use crate::spec::{cvs, LinkArgs, LinkerFlavor, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    let pre_link_args = LinkArgs::from([(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            // We cannot use `-nodefaultlibs` because compiler-rt has to be passed\n+            // as a path since it's not added to linker search path by the default.\n+            // There were attemts to make it behave like libgcc (so one can just use -l<name>)\n+            // but LLVM maintainers rejected it: https://reviews.llvm.org/D51440\n+            \"-nolibc\".into(),\n+            \"--unwindlib=none\".into(),\n+        ],\n+    )]);\n+    let late_link_args = LinkArgs::from([(\n+        LinkerFlavor::Gcc,\n+        // Order of `late_link_args*` does not matter with LLD.\n+        vec![\n+            \"-lmingw32\".into(),\n+            \"-lmingwex\".into(),\n+            \"-lmsvcrt\".into(),\n+            \"-lkernel32\".into(),\n+            \"-luser32\".into(),\n+        ],\n+    )]);\n+\n+    TargetOptions {\n+        os: \"windows\".into(),\n+        env: \"gnu\".into(),\n+        vendor: \"pc\".into(),\n+        abi: \"llvm\".into(),\n+        linker: Some(\"clang\".into()),\n+        dynamic_linking: true,\n+        executables: true,\n+        dll_prefix: \"\".into(),\n+        dll_suffix: \".dll\".into(),\n+        exe_suffix: \".exe\".into(),\n+        families: cvs![\"windows\"],\n+        is_like_windows: true,\n+        allows_weak_linkage: false,\n+        pre_link_args,\n+        late_link_args,\n+        abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n+        requires_uwtable: true,\n+        eh_frame_header: false,\n+        no_default_libraries: false,\n+        has_thread_local: true,\n+\n+        ..Default::default()\n+    }\n+}"}, {"sha": "b5ff63e0532fd98ccb64dd316cde28361ad5fa3f", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnullvm.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -0,0 +1,19 @@\n+use crate::spec::{LinkerFlavor, Target};\n+\n+pub fn target() -> Target {\n+    let mut base = super::windows_gnullvm_base::opts();\n+    base.cpu = \"x86-64\".into();\n+    let gcc_pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n+    gcc_pre_link_args.push(\"-m64\".into());\n+    base.max_atomic_width = Some(64);\n+    base.linker = Some(\"x86_64-w64-mingw32-clang\".into());\n+\n+    Target {\n+        llvm_target: \"x86_64-pc-windows-gnu\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n+        arch: \"x86_64\".into(),\n+        options: base,\n+    }\n+}"}, {"sha": "f88e6a924b5f04ef9bb756b5192f722c018f551f", "filename": "library/unwind/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/library%2Funwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/library%2Funwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fbuild.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -36,7 +36,7 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"dragonfly\") {\n         println!(\"cargo:rustc-link-lib=gcc_pic\");\n-    } else if target.contains(\"pc-windows-gnu\") {\n+    } else if target.ends_with(\"pc-windows-gnu\") {\n         // This is handled in the target spec with late_link_args_[static|dynamic]\n     } else if target.contains(\"uwp-windows-gnu\") {\n         println!(\"cargo:rustc-link-lib=unwind\");"}, {"sha": "c92a7d310f309db0cc1a6fc0f08333434568346b", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -5,6 +5,7 @@\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(c_unwind)]\n+#![feature(cfg_target_abi)]\n #![cfg_attr(not(target_env = \"msvc\"), feature(libc))]\n \n cfg_if::cfg_if! {\n@@ -85,3 +86,7 @@ extern \"C\" {}\n #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n #[link(name = \"unwind\", kind = \"static\", modifiers = \"-bundle\")]\n extern \"C\" {}\n+\n+#[cfg(all(target_os = \"windows\", target_env = \"gnu\", target_abi = \"llvm\"))]\n+#[link(name = \"unwind\", kind = \"static\", modifiers = \"-bundle\")]\n+extern \"C\" {}"}, {"sha": "7a8c7fee5f5499e637488ca8eeda8d77949135f4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -175,6 +175,7 @@ fn copy_third_party_objects(\n     }\n \n     if target == \"x86_64-fortanix-unknown-sgx\"\n+        || target.contains(\"pc-windows-gnullvm\")\n         || builder.config.llvm_libunwind == LlvmLibunwind::InTree\n             && (target.contains(\"linux\") || target.contains(\"fuchsia\"))\n     {\n@@ -246,7 +247,7 @@ fn copy_self_contained_objects(\n                 DependencyType::TargetSelfContained,\n             );\n         }\n-    } else if target.contains(\"windows-gnu\") {\n+    } else if target.ends_with(\"windows-gnu\") {\n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n             let src = compiler_file(builder, builder.cc(target), target, CLang::C, obj);\n             let target = libdir_self_contained.join(obj);\n@@ -477,7 +478,7 @@ impl Step for StartupObjects {\n     fn run(self, builder: &Builder<'_>) -> Vec<(PathBuf, DependencyType)> {\n         let for_compiler = self.compiler;\n         let target = self.target;\n-        if !target.contains(\"windows-gnu\") {\n+        if !target.ends_with(\"windows-gnu\") {\n             return vec![];\n         }\n "}, {"sha": "6181a611ec315442d9377196548fddbf0a891400", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -285,7 +285,7 @@ impl Step for Mingw {\n     /// without any extra installed software (e.g., we bundle gcc, libraries, etc).\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n-        if !host.contains(\"pc-windows-gnu\") {\n+        if !host.ends_with(\"pc-windows-gnu\") {\n             return None;\n         }\n \n@@ -341,7 +341,7 @@ impl Step for Rustc {\n         // anything requiring us to distribute a license, but it's likely the\n         // install will *also* include the rust-mingw package, which also needs\n         // licenses, so to be safe we just include it here in all MinGW packages.\n-        if host.contains(\"pc-windows-gnu\") {\n+        if host.ends_with(\"pc-windows-gnu\") {\n             make_win_dist(tarball.image_dir(), &tmpdir(builder), host, builder);\n             tarball.add_dir(builder.src.join(\"src/etc/third-party\"), \"share/doc\");\n         }\n@@ -1352,7 +1352,7 @@ impl Step for Extended {\n         tarballs.push(builder.ensure(Rustc { compiler: builder.compiler(stage, target) }));\n         tarballs.push(builder.ensure(Std { compiler, target }).expect(\"missing std\"));\n \n-        if target.contains(\"windows-gnu\") {\n+        if target.ends_with(\"windows-gnu\") {\n             tarballs.push(builder.ensure(Mingw { host: target }).expect(\"missing mingw\"));\n         }\n \n@@ -1522,7 +1522,7 @@ impl Step for Extended {\n                     prepare(tool);\n                 }\n             }\n-            if target.contains(\"windows-gnu\") {\n+            if target.ends_with(\"windows-gnu\") {\n                 prepare(\"rust-mingw\");\n             }\n \n@@ -1711,7 +1711,7 @@ impl Step for Extended {\n                     .arg(\"-t\")\n                     .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n             );\n-            if target.contains(\"windows-gnu\") {\n+            if target.ends_with(\"windows-gnu\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1760,7 +1760,7 @@ impl Step for Extended {\n                 if built_tools.contains(\"miri\") {\n                     cmd.arg(\"-dMiriDir=miri\");\n                 }\n-                if target.contains(\"windows-gnu\") {\n+                if target.ends_with(\"windows-gnu\") {\n                     cmd.arg(\"-dGccDir=rust-mingw\");\n                 }\n                 builder.run(&mut cmd);\n@@ -1787,7 +1787,7 @@ impl Step for Extended {\n             }\n             candle(\"AnalysisGroup.wxs\".as_ref());\n \n-            if target.contains(\"windows-gnu\") {\n+            if target.ends_with(\"windows-gnu\") {\n                 candle(\"GccGroup.wxs\".as_ref());\n             }\n \n@@ -1829,7 +1829,7 @@ impl Step for Extended {\n                 cmd.arg(\"MiriGroup.wixobj\");\n             }\n \n-            if target.contains(\"windows-gnu\") {\n+            if target.ends_with(\"windows-gnu\") {\n                 cmd.arg(\"GccGroup.wixobj\");\n             }\n             // ICE57 wrongly complains about the shortcuts\n@@ -1859,7 +1859,9 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n         .env(\"CFG_BUILD\", target.triple)\n         .env(\"CFG_CHANNEL\", &builder.config.channel);\n \n-    if target.contains(\"windows-gnu\") {\n+    if target.contains(\"windows-gnullvm\") {\n+        cmd.env(\"CFG_MINGW\", \"1\").env(\"CFG_ABI\", \"LLVM\");\n+    } else if target.contains(\"windows-gnu\") {\n         cmd.env(\"CFG_MINGW\", \"1\").env(\"CFG_ABI\", \"GNU\");\n     } else {\n         cmd.env(\"CFG_MINGW\", \"0\").env(\"CFG_ABI\", \"MSVC\");"}, {"sha": "977b0e80f62d5c86664eec2d514fc6fc3510f4c3", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -1372,6 +1372,10 @@ impl Step for Libunwind {\n                 cfg.define(\"__LIBUNWIND_IS_NATIVE_ONLY\", None);\n                 cfg.define(\"NDEBUG\", None);\n             }\n+            if self.target.contains(\"windows\") {\n+                cfg.define(\"_LIBUNWIND_HIDE_SYMBOLS\", \"1\");\n+                cfg.define(\"_LIBUNWIND_IS_NATIVE_ONLY\", \"1\");\n+            }\n         }\n \n         cc_cfg.compiler(builder.cc(self.target));"}, {"sha": "c2d44ac0e4dce55c99f0f88f754755e4dc34792b", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -21,6 +21,7 @@\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)\n     - [nvptx64-nvidia-cuda](platform-support/nvptx64-nvidia-cuda.md)\n+    - [*-pc-windows-gnullvm](platform-support/pc-windows-gnullvm.md)\n     - [*-unknown-openbsd](platform-support/openbsd.md)\n     - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)"}, {"sha": "ab98651a1ec3a204d107c0991b06ee1e6a5c92a7", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -208,6 +208,7 @@ target | std | host | notes\n `aarch64-apple-ios-macabi` | ? |  | Apple Catalyst on ARM64\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n+[`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore\n `aarch64-unknown-uefi` | * |  | ARM64 UEFI\n@@ -288,6 +289,7 @@ target | std | host | notes\n [`wasm64-unknown-unknown`](platform-support/wasm64-unknown-unknown.md) | ? |  | WebAssembly\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n+[`x86_64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `x86_64-pc-windows-msvc` | * |  | 64-bit Windows XP support\n `x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos\n `x86_64-unknown-dragonfly` | \u2713 | \u2713 | 64-bit DragonFlyBSD"}, {"sha": "96ae065b31b0b2615e1327c9c9fc8378ac280b0d", "filename": "src/doc/rustc/src/platform-support/pc-windows-gnullvm.md", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "raw_url": "https://github.com/rust-lang/rust/raw/17180f4a56aedfb5fa2daa0973c85784c361c339/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md?ref=17180f4a56aedfb5fa2daa0973c85784c361c339", "patch": "@@ -0,0 +1,48 @@\n+# \\*-pc-windows-gnullvm\n+\n+**Tier: 3**\n+\n+Windows targets similar to `*-pc-windows-gnu` but using UCRT as the runtime and various LLVM tools/libraries instead of GCC/Binutils.\n+\n+Target triples avaiable so far:\n+- `aarch64-pc-windows-gnullvm`\n+- `x86_64-pc-windows-gnullvm`\n+\n+## Target maintainers\n+\n+- [@mati865](https://github.com/mati865)\n+\n+## Requirements\n+\n+The easiest way to obtain these targets is cross-compilation but native build from `x86_64-pc-windows-gnu` is possible with few hacks which I don't recommend.\n+Std support is expected to be on pair with `*-pc-windows-gnu`.\n+\n+Binaries for this target should be at least on pair with `*-pc-windows-gnu` in terms of requirements and functionality.\n+\n+Those targets follow Windows calling convention for `extern \"C\"`.\n+\n+Like with any other Windows target created binaries are in PE format.\n+\n+## Building the target\n+\n+For cross-compilation I recommend using [llvm-mingw](https://github.com/mstorsjo/llvm-mingw) toolchain, one change that seems necessary beside configuring corss compilers is disabling experimental `m86k` target. Otherwise LLVM build fails with `multiple definition ...` errors.\n+Native bootstrapping builds require rather fragile hacks until host artifacts are avaiable so I won't describe them here.\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+Created binaries work fine on Windows or Wine using native hardware. Testing AArch64 on x86_64 is problematic though and requires spending some time with QEMU.\n+Once these targets bootstrap themselves on native hardware they should pass Rust testsuite.\n+\n+## Cross-compilation toolchains and C code\n+\n+Compatible C code can be built with Clang's `aarch64-pc-windows-gnu` and `x86_64-pc-windows-gnu` targets as long as LLVM based C toolchains are used.\n+Those include:\n+- [llvm-mingw](https://github.com/mstorsjo/llvm-mingw)\n+- [MSYS2 with CLANG* environment](https://www.msys2.org/docs/environments)"}]}