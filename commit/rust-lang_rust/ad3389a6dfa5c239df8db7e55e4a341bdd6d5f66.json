{"sha": "ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMzM4OWE2ZGZhNWMyMzlkZjhkYjdlNTVlNGEzNDFiZGQ2ZDVmNjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-25T21:15:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-25T21:15:14Z"}, "message": "Rollup merge of #84516 - torhovland:issue-84114, r=estebank\n\nAdd suggestion to \"use break\" when attempting to implicit-break a loop\n\nFixes #84114", "tree": {"sha": "1d01e0414bbe90f4abbfc244c30c434a040b58bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d01e0414bbe90f4abbfc244c30c434a040b58bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghdvjCRBK7hj4Ov3rIwAAc7gIAKIJgKlSDnm68/+Oamhngw9s\nNUUQe7fbpsu9kcxvXnxdCxNxU+qrJuN2dvA8bbR84R5IoR6Jmv5++CG6WPMh/4mY\nbOZN0sdh+b/g1aZ7XpQc//FIOh5eWholj9AEerdIAJwJwCujZzO5TwU5ofmOJmEb\n0zznHsp0mNEajAb3oYzTMtQHi8vvqdkAMbrIoTJAu6oz8d0xqYM7AJ7uDYJbo7zs\nt5vVEFSSCLk67JIV7gba2OjRTJX2q2CI+HUiR/kyd5lxDvIUuksMaLfndMkMPhQ+\nQ8GU2JPvKwG0c6jnMf2buS5eYH5k6gjHdQYgatoba6ffRnvC3gIyiYATnwfvKCs=\n=Y+wM\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d01e0414bbe90f4abbfc244c30c434a040b58bb\nparent ae316d6603cfe333b56c49516a1197bee32c2758\nparent 3b504610b6768d8cb700bc2a8fa2a6263b9d3a06\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619385314 +0200\ncommitter GitHub <noreply@github.com> 1619385314 +0200\n\nRollup merge of #84516 - torhovland:issue-84114, r=estebank\n\nAdd suggestion to \"use break\" when attempting to implicit-break a loop\n\nFixes #84114\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66", "html_url": "https://github.com/rust-lang/rust/commit/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae316d6603cfe333b56c49516a1197bee32c2758", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae316d6603cfe333b56c49516a1197bee32c2758", "html_url": "https://github.com/rust-lang/rust/commit/ae316d6603cfe333b56c49516a1197bee32c2758"}, {"sha": "3b504610b6768d8cb700bc2a8fa2a6263b9d3a06", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b504610b6768d8cb700bc2a8fa2a6263b9d3a06", "html_url": "https://github.com/rust-lang/rust/commit/3b504610b6768d8cb700bc2a8fa2a6263b9d3a06"}], "stats": {"total": 126, "additions": 121, "deletions": 5}, "files": [{"sha": "236fec94bdba79fc0e28bd9d3adc9fcade141fb0", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66", "patch": "@@ -1494,7 +1494,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         if let (Some((expr, _)), Some((fn_decl, _, _))) =\n             (expression, fcx.get_node_fn_decl(parent_item))\n         {\n-            fcx.suggest_missing_return_expr(&mut err, expr, fn_decl, expected, found, parent_id);\n+            fcx.suggest_missing_break_or_return_expr(\n+                &mut err, expr, fn_decl, expected, found, id, parent_id,\n+            );\n         }\n \n         if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {"}, {"sha": "d6b1e56316b3751d20cf1e5b07a5b33d208c9493", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, ItemKind, Node};\n+use rustc_hir::{Expr, ExprKind, ItemKind, Node, Stmt, StmtKind};\n use rustc_infer::infer;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, Ty};\n@@ -55,7 +55,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             pointing_at_return_type =\n                 self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n             let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n-            self.suggest_missing_return_expr(err, expr, &fn_decl, expected, found, fn_id);\n+            self.suggest_missing_break_or_return_expr(\n+                err, expr, &fn_decl, expected, found, blk_id, fn_id,\n+            );\n         }\n         pointing_at_return_type\n     }\n@@ -472,22 +474,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub(in super::super) fn suggest_missing_return_expr(\n+    pub(in super::super) fn suggest_missing_break_or_return_expr(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         expr: &'tcx hir::Expr<'tcx>,\n         fn_decl: &hir::FnDecl<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         id: hir::HirId,\n+        fn_id: hir::HirId,\n     ) {\n         if !expected.is_unit() {\n             return;\n         }\n         let found = self.resolve_vars_with_obligations(found);\n+\n+        let in_loop = self.is_loop(id)\n+            || self.tcx.hir().parent_iter(id).any(|(parent_id, _)| self.is_loop(parent_id));\n+\n+        let in_local_statement = self.is_local_statement(id)\n+            || self\n+                .tcx\n+                .hir()\n+                .parent_iter(id)\n+                .any(|(parent_id, _)| self.is_local_statement(parent_id));\n+\n+        if in_loop && in_local_statement {\n+            err.multipart_suggestion(\n+                \"you might have meant to break the loop with this value\",\n+                vec![\n+                    (expr.span.shrink_to_lo(), \"break \".to_string()),\n+                    (expr.span.shrink_to_hi(), \";\".to_string()),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n+            return;\n+        }\n+\n         if let hir::FnRetTy::Return(ty) = fn_decl.output {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n-            let bound_vars = self.tcx.late_bound_vars(id);\n+            let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n             let ty = self.normalize_associated_types_in(expr.span, ty);\n             if self.can_coerce(found, ty) {\n@@ -514,4 +540,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.sess.parse_sess.expr_parentheses_needed(err, *sp, None);\n         }\n     }\n+\n+    fn is_loop(&self, id: hir::HirId) -> bool {\n+        let node = self.tcx.hir().get(id);\n+        matches!(node, Node::Expr(Expr { kind: ExprKind::Loop(..), .. }))\n+    }\n+\n+    fn is_local_statement(&self, id: hir::HirId) -> bool {\n+        let node = self.tcx.hir().get(id);\n+        matches!(node, Node::Stmt(Stmt { kind: StmtKind::Local(..), .. }))\n+    }\n }"}, {"sha": "93078cb4b144beddda2329566c1383c223316689", "filename": "src/test/ui/loops/loop-no-implicit-break.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.rs?ref=ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66", "patch": "@@ -0,0 +1,31 @@\n+fn main() {\n+    let a: i8 = loop {\n+        1 //~ ERROR mismatched types\n+    };\n+\n+    let b: i8 = loop {\n+        break 1;\n+    };\n+}\n+\n+fn foo() -> i8 {\n+    let a: i8 = loop {\n+        1 //~ ERROR mismatched types\n+    };\n+\n+    let b: i8 = loop {\n+        break 1;\n+    };\n+\n+    loop {\n+        1 //~ ERROR mismatched types\n+    }\n+\n+    loop {\n+        return 1;\n+    }\n+\n+    loop {\n+        1 //~ ERROR mismatched types\n+    }\n+}"}, {"sha": "5087662e7bfa4c879c687f504ba354c14b4e4048", "filename": "src/test/ui/loops/loop-no-implicit-break.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-no-implicit-break.stderr?ref=ad3389a6dfa5c239df8db7e55e4a341bdd6d5f66", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/loop-no-implicit-break.rs:3:9\n+   |\n+LL |         1\n+   |         ^ expected `()`, found integer\n+   |\n+help: you might have meant to break the loop with this value\n+   |\n+LL |         break 1;\n+   |         ^^^^^  ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/loop-no-implicit-break.rs:13:9\n+   |\n+LL |         1\n+   |         ^ expected `()`, found integer\n+   |\n+help: you might have meant to break the loop with this value\n+   |\n+LL |         break 1;\n+   |         ^^^^^  ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/loop-no-implicit-break.rs:21:9\n+   |\n+LL |         1\n+   |         ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |         return 1;\n+   |         ^^^^^^  ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/loop-no-implicit-break.rs:29:9\n+   |\n+LL |         1\n+   |         ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |         return 1;\n+   |         ^^^^^^  ^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}