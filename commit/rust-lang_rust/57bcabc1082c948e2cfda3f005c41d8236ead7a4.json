{"sha": "57bcabc1082c948e2cfda3f005c41d8236ead7a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YmNhYmMxMDgyYzk0OGUyY2ZkYTNmMDA1YzQxZDgyMzZlYWQ3YTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-19T15:46:13Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-21T20:02:53Z"}, "message": "Generate alias file", "tree": {"sha": "744cbb891ca3bf1b6648699f4257c36f0390d01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/744cbb891ca3bf1b6648699f4257c36f0390d01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57bcabc1082c948e2cfda3f005c41d8236ead7a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57bcabc1082c948e2cfda3f005c41d8236ead7a4", "html_url": "https://github.com/rust-lang/rust/commit/57bcabc1082c948e2cfda3f005c41d8236ead7a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57bcabc1082c948e2cfda3f005c41d8236ead7a4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654cb84852a0485146f95bbebe14ac75b7ee111a", "url": "https://api.github.com/repos/rust-lang/rust/commits/654cb84852a0485146f95bbebe14ac75b7ee111a", "html_url": "https://github.com/rust-lang/rust/commit/654cb84852a0485146f95bbebe14ac75b7ee111a"}], "stats": {"total": 94, "additions": 87, "deletions": 7}, "files": [{"sha": "537828de2c7f35fd56bdabc7a4e89b5400c60675", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=57bcabc1082c948e2cfda3f005c41d8236ead7a4", "patch": "@@ -19,7 +19,7 @@ use clean;\n /// discriminants. JavaScript then is used to decode them into the original value.\n /// Consequently, every change to this type should be synchronized to\n /// the `itemTypes` mapping table in `static/main.js`.\n-#[derive(Copy, PartialEq, Clone)]\n+#[derive(Copy, PartialEq, Clone, Debug)]\n pub enum ItemType {\n     Module          = 0,\n     ExternCrate     = 1,"}, {"sha": "1880baeddf4daa6d21c9c791e8e8375c8164019e", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=57bcabc1082c948e2cfda3f005c41d8236ead7a4", "patch": "@@ -145,6 +145,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     </script>\\\n     <script src=\\\"{root_path}main{suffix}.js\\\"></script>\\\n     <script defer src=\\\"{root_path}search-index.js\\\"></script>\\\n+    <script defer src=\\\"{root_path}aliases.js\\\"></script>\\\n </body>\\\n </html>\",\n     css_extension = if css_file_extension {"}, {"sha": "8fe8fe671dd7512d3ba2cd33b74adc5382adc950", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 74, "deletions": 6, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=57bcabc1082c948e2cfda3f005c41d8236ead7a4", "patch": "@@ -329,6 +329,10 @@ pub struct Cache {\n     // yet when its implementation methods are being indexed. Caches such methods\n     // and their parent id here and indexes them at the end of crate parsing.\n     orphan_impl_items: Vec<(DefId, clean::Item)>,\n+\n+    /// Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n+    /// we need the alias element to have an array of items.\n+    aliases: FxHashMap<String, Vec<IndexItem>>,\n }\n \n /// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n@@ -369,6 +373,7 @@ struct Sidebar<'a> { cx: &'a Context, item: &'a clean::Item, }\n \n /// Struct representing one entry in the JS search index. These are all emitted\n /// by hand to a large JS file at the end of cache-creation.\n+#[derive(Debug)]\n struct IndexItem {\n     ty: ItemType,\n     name: String,\n@@ -396,6 +401,7 @@ impl ToJson for IndexItem {\n }\n \n /// A type used for the search index.\n+#[derive(Debug)]\n struct Type {\n     name: Option<String>,\n     generics: Option<Vec<String>>,\n@@ -418,9 +424,10 @@ impl ToJson for Type {\n }\n \n /// Full type of functions/methods in the search index.\n+#[derive(Debug)]\n struct IndexItemFunctionType {\n     inputs: Vec<Type>,\n-    output: Option<Type>\n+    output: Option<Type>,\n }\n \n impl ToJson for IndexItemFunctionType {\n@@ -609,6 +616,7 @@ pub fn run(mut krate: clean::Crate,\n         owned_box_did,\n         masked_crates: mem::replace(&mut krate.masked_crates, FxHashSet()),\n         typarams: external_typarams,\n+        aliases: FxHashMap(),\n     };\n \n     // Cache where all our extern crates are located\n@@ -847,8 +855,7 @@ themePicker.onclick = function() {{\n     write(cx.dst.join(\"COPYRIGHT.txt\"),\n           include_bytes!(\"static/COPYRIGHT.txt\"))?;\n \n-    fn collect(path: &Path, krate: &str,\n-               key: &str) -> io::Result<Vec<String>> {\n+    fn collect(path: &Path, krate: &str, key: &str) -> io::Result<Vec<String>> {\n         let mut ret = Vec::new();\n         if path.exists() {\n             for line in BufReader::new(File::open(path)?).lines() {\n@@ -865,6 +872,36 @@ themePicker.onclick = function() {{\n         Ok(ret)\n     }\n \n+    fn show_item(item: &IndexItem, krate: &str) -> String {\n+        format!(\"{{'crate':'{}','ty':'{}','name':'{}','path':'{}','parent':{}}}\",\n+                krate, item.ty, item.name, item.path,\n+                if let Some(p) = item.parent_idx { p.to_string() } else { \"null\".to_owned() })\n+    }\n+\n+    let dst = cx.dst.join(\"aliases.js\");\n+    {\n+        let mut all_aliases = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n+        let mut w = try_err!(File::create(&dst), &dst);\n+        let mut output = String::with_capacity(100);\n+        for (alias, items) in &cache.aliases {\n+            if items.is_empty() {\n+                continue\n+            }\n+            output.push_str(&format!(\"\\\"{}\\\":[{}],\",\n+                                     alias,\n+                                     items.iter()\n+                                          .map(|v| show_item(v, &krate.name))\n+                                          .collect::<Vec<_>>()\n+                                          .join(\",\")));\n+        }\n+        all_aliases.push(format!(\"ALIASES['{}'] = {{{}}};\", krate.name, output));\n+        all_aliases.sort();\n+        try_err!(writeln!(&mut w, \"var ALIASES = {{}};\"), &dst);\n+        for aliases in &all_aliases {\n+            try_err!(writeln!(&mut w, \"{}\", aliases), &dst);\n+        }\n+    }\n+\n     // Update the search index\n     let dst = cx.dst.join(\"search-index.js\");\n     let mut all_indexes = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n@@ -1251,13 +1288,13 @@ impl DocFolder for Cache {\n                 // `public_items` map, so we can skip inserting into the\n                 // paths map if there was already an entry present and we're\n                 // not a public item.\n-                if\n-                    !self.paths.contains_key(&item.def_id) ||\n-                    self.access_levels.is_public(item.def_id)\n+                if !self.paths.contains_key(&item.def_id) ||\n+                   self.access_levels.is_public(item.def_id)\n                 {\n                     self.paths.insert(item.def_id,\n                                       (self.stack.clone(), item.type_()));\n                 }\n+                self.add_aliases(&item);\n             }\n             // Link variants to their parent enum because pages aren't emitted\n             // for each variant.\n@@ -1268,6 +1305,7 @@ impl DocFolder for Cache {\n             }\n \n             clean::PrimitiveItem(..) if item.visibility.is_some() => {\n+                self.add_aliases(&item);\n                 self.paths.insert(item.def_id, (self.stack.clone(),\n                                                 item.type_()));\n             }\n@@ -1372,6 +1410,36 @@ impl<'a> Cache {\n             }\n         }\n     }\n+\n+    fn add_aliases(&mut self, item: &clean::Item) {\n+        if item.def_id.index == CRATE_DEF_INDEX {\n+            return\n+        }\n+        if let Some(ref item_name) = item.name {\n+            let path = self.paths.get(&item.def_id)\n+                                 .map(|p| p.0.join(\"::\").to_string())\n+                                 .unwrap_or(\"std\".to_owned());\n+            for alias in item.attrs.lists(\"doc\")\n+                                   .filter(|a| a.check_name(\"alias\"))\n+                                   .filter_map(|a| a.value_str()\n+                                                    .map(|s| s.to_string().replace(\"\\\"\", \"\")))\n+                                   .filter(|v| !v.is_empty())\n+                                   .collect::<FxHashSet<_>>()\n+                                   .into_iter() {\n+                self.aliases.entry(alias)\n+                            .or_insert(Vec::with_capacity(1))\n+                            .push(IndexItem {\n+                                ty: item.type_(),\n+                                name: item_name.to_string(),\n+                                path: path.clone(),\n+                                desc: String::new(),\n+                                parent: None,\n+                                parent_idx: None,\n+                                search_type: get_index_search_type(&item),\n+                            });\n+            }\n+        }\n+    }\n }\n \n #[derive(Debug, Eq, PartialEq, Hash)]"}, {"sha": "579fd0eaf3faf57d8dd80d2356e810ad9a21a670", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=57bcabc1082c948e2cfda3f005c41d8236ead7a4", "patch": "@@ -316,6 +316,7 @@\n #![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(used))]\n+#![feature(doc_alias)]\n \n #![default_lib_allocator]\n "}, {"sha": "e2fcfb7c4b1c06355eaa46bbacf8497102f3b091", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=57bcabc1082c948e2cfda3f005c41d8236ead7a4", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #[doc(primitive = \"bool\")]\n+#[doc(alias = \"true\")]\n+#[doc(alias = \"false\")]\n //\n /// The boolean type.\n ///\n@@ -68,6 +70,7 @@\n mod prim_bool { }\n \n #[doc(primitive = \"never\")]\n+#[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n ///"}, {"sha": "3f0a402c213312f4d31af2e11547c24607b440f1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bcabc1082c948e2cfda3f005c41d8236ead7a4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=57bcabc1082c948e2cfda3f005c41d8236ead7a4", "patch": "@@ -460,6 +460,9 @@ declare_features! (\n     (active, proc_macro_mod, \"1.27.0\", None, None),\n     (active, proc_macro_expr, \"1.27.0\", None, None),\n     (active, proc_macro_non_items, \"1.27.0\", None, None),\n+\n+    // #[doc(alias = \"...\")]\n+    (active, doc_alias, \"1.27.0\", None, None),\n );\n \n declare_features! (\n@@ -1455,6 +1458,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, doc_spotlight, attr.span,\n                         \"#[doc(spotlight)] is experimental\"\n                     );\n+                } else if content.iter().any(|c| c.check_name(\"alias\")) {\n+                    gate_feature_post!(&self, doc_alias, attr.span,\n+                        \"#[doc(alias = \\\"...\\\")] is experimental\"\n+                    );\n                 }\n             }\n         }"}]}