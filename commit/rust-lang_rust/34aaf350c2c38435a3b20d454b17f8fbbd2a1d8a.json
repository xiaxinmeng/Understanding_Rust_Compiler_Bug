{"sha": "34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YWFmMzUwYzJjMzg0MzVhM2IyMGQ0NTRiMTdmOGZiYmQyYTFkOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-12T14:51:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-12T14:51:54Z"}, "message": "auto merge of #5317 : luqmana/rust/inline-asm, r=graydon\n\n```Rust\r\n#[cfg(target_os = \"macos\")]\r\nfn helloworld() {\r\n    unsafe {\r\n        asm!(\".pushsection __RODATA, __rodata\r\n                  msg: .asciz \\\"Hello World!\\\"\r\n              .popsection\r\n              movq msg@GOTPCREL(%rip), %rdi\r\n              call _puts\");\r\n    }\r\n}\r\n\r\n#[cfg(target_os = \"linux\")]\r\nfn helloworld() {\r\n    unsafe {\r\n        asm!(\".pushsection .rodata\r\n                  msg: .asciz \\\"Hello World!\\\"\r\n              .popsection\r\n              movq msg@GOTPCREL(%rip), %rdi\r\n              call puts\");\r\n    }\r\n}\r\n\r\nfn main() {\r\n    helloworld();\r\n}\r\n```\r\n\r\n```\r\n% rustc foo.rs\r\n% ./foo\r\nHello World!\r\n```", "tree": {"sha": "080d38a2c80450e956bffb75267deb1a114fed2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/080d38a2c80450e956bffb75267deb1a114fed2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "html_url": "https://github.com/rust-lang/rust/commit/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "014620af902c4798ede78462b2d0e3b749fb2fff", "url": "https://api.github.com/repos/rust-lang/rust/commits/014620af902c4798ede78462b2d0e3b749fb2fff", "html_url": "https://github.com/rust-lang/rust/commit/014620af902c4798ede78462b2d0e3b749fb2fff"}, {"sha": "18b71a78314505b4dd3816f9662709860aafaf4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b71a78314505b4dd3816f9662709860aafaf4c", "html_url": "https://github.com/rust-lang/rust/commit/18b71a78314505b4dd3816f9662709860aafaf4c"}], "stats": {"total": 280, "additions": 269, "deletions": 11}, "files": [{"sha": "b0cc18a30a41dceff13f059019da73cfb2ff1b22", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -188,6 +188,12 @@ pub enum Metadata {\n     MD_tbaa_struct = 5\n }\n \n+// Inline Asm Dialect\n+pub enum AsmDialect {\n+    AD_ATT   = 0,\n+    AD_Intel = 1\n+}\n+\n // Opaque pointer types\n pub enum Module_opaque {}\n pub type ModuleRef = *Module_opaque;\n@@ -217,9 +223,9 @@ pub enum SectionIterator_opaque {}\n pub type SectionIteratorRef = *SectionIterator_opaque;\n \n pub mod llvm {\n-    use super::{AtomicBinOp, AtomicOrdering, BasicBlockRef, Bool, BuilderRef};\n-    use super::{ContextRef, MemoryBufferRef, ModuleRef, ObjectFileRef};\n-    use super::{Opcode, PassManagerRef, PassManagerBuilderRef};\n+    use super::{AsmDialect, AtomicBinOp, AtomicOrdering, BasicBlockRef};\n+    use super::{Bool, BuilderRef, ContextRef, MemoryBufferRef, ModuleRef};\n+    use super::{ObjectFileRef, Opcode, PassManagerRef, PassManagerBuilderRef};\n     use super::{SectionIteratorRef, TargetDataRef, TypeKind, TypeRef, UseRef};\n     use super::{ValueRef};\n \n@@ -1433,6 +1439,12 @@ pub mod llvm {\n \n         /** Enables LLVM debug output. */\n         pub unsafe fn LLVMSetDebug(Enabled: c_int);\n+\n+        /** Prepares inline assembly. */\n+        pub unsafe fn LLVMInlineAsm(Ty: TypeRef, AsmString: *c_char,\n+                                    Constraints: *c_char, SideEffects: Bool,\n+                                    AlignStack: Bool, Dialect: AsmDialect)\n+                                 -> ValueRef;\n     }\n }\n "}, {"sha": "d300698da59d131124a790f7df88d4c7e64ad9e7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -620,7 +620,8 @@ fn visit_expr(expr: @expr, &&self: @mut IrMaps, vt: vt<@mut IrMaps>) {\n       expr_do_body(*) | expr_cast(*) | expr_unary(*) | expr_break(_) |\n       expr_again(_) | expr_lit(_) | expr_ret(*) | expr_block(*) |\n       expr_assign(*) | expr_swap(*) | expr_assign_op(*) | expr_mac(*) |\n-      expr_struct(*) | expr_repeat(*) | expr_paren(*) => {\n+      expr_struct(*) | expr_repeat(*) | expr_paren(*) |\n+      expr_inline_asm(*) => {\n           visit::visit_expr(expr, self, vt);\n       }\n     }\n@@ -1345,6 +1346,7 @@ pub impl Liveness {\n             self.propagate_through_expr(e, succ)\n           }\n \n+          expr_inline_asm(*) |\n           expr_lit(*) => {\n             succ\n           }\n@@ -1618,7 +1620,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n       expr_cast(*) | expr_unary(*) | expr_ret(*) | expr_break(*) |\n       expr_again(*) | expr_lit(_) | expr_block(*) | expr_swap(*) |\n       expr_mac(*) | expr_addr_of(*) | expr_struct(*) | expr_repeat(*) |\n-      expr_paren(*) => {\n+      expr_paren(*) | expr_inline_asm(*) => {\n         visit::visit_expr(expr, self, vt);\n       }\n     }"}, {"sha": "5881f95f298693439042a18f5c9531294642442b", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -447,7 +447,7 @@ pub impl mem_categorization_ctxt {\n           ast::expr_while(*) | ast::expr_block(*) | ast::expr_loop(*) |\n           ast::expr_match(*) | ast::expr_lit(*) | ast::expr_break(*) |\n           ast::expr_mac(*) | ast::expr_again(*) | ast::expr_struct(*) |\n-          ast::expr_repeat(*) => {\n+          ast::expr_repeat(*) | ast::expr_inline_asm(*) => {\n             return self.cat_rvalue(expr, expr_ty);\n           }\n         }"}, {"sha": "734f4651f3bede040a04f4561ddb7b78e9c3b30d", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -560,7 +560,8 @@ pub impl VisitContext {\n \n             expr_break(*) |\n             expr_again(*) |\n-            expr_lit(*) => {}\n+            expr_lit(*)   |\n+            expr_inline_asm(*) => {}\n \n             expr_loop(ref blk, _) => {\n                 self.consume_block(blk, visitor);"}, {"sha": "50a7669a1be9f0035e087e11585dc6396325c2c1", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use lib::llvm::llvm;\n-use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n+use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering, AsmDialect};\n use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n use lib;\n@@ -18,7 +18,7 @@ use syntax::codemap::span;\n \n use core::prelude::*;\n use core::cast;\n-use core::libc::{c_uint, c_int, c_ulonglong};\n+use core::libc::{c_uint, c_int, c_ulonglong, c_char};\n use core::libc;\n use core::option::Some;\n use core::ptr;\n@@ -872,6 +872,25 @@ pub fn add_comment(bcx: block, text: &str) {\n     }\n }\n \n+pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n+                     volatile: bool, alignstack: bool,\n+                     dia: AsmDialect) -> ValueRef {\n+    unsafe {\n+        count_insn(cx, \"inlineasm\");\n+\n+        let volatile = if volatile { lib::llvm::True }\n+                       else        { lib::llvm::False };\n+        let alignstack = if alignstack { lib::llvm::True }\n+                         else          { lib::llvm::False };\n+\n+        let llfty = T_fn(~[], T_void());\n+        let v = llvm::LLVMInlineAsm(llfty, asm, cons, volatile,\n+                                    alignstack, dia);\n+\n+        Call(cx, v, ~[])\n+    }\n+}\n+\n pub fn Call(cx: block, Fn: ValueRef, Args: &[ValueRef]) -> ValueRef {\n     if cx.unreachable { return _UndefReturn(cx, Fn); }\n     unsafe {"}, {"sha": "c163183bfc8efef0284913c436dbb1961ffd1479", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -691,6 +691,17 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         ast::expr_assign_op(op, dst, src) => {\n             return trans_assign_op(bcx, expr, op, dst, src);\n         }\n+        ast::expr_inline_asm(asm, cons, volatile, alignstack) => {\n+            // XXX: cons doesn't actual contain ALL the stuff we should\n+            // be passing since the constraints for in/outputs aren't included\n+            do str::as_c_str(*asm) |a| {\n+                do str::as_c_str(*cons) |c| {\n+                    InlineAsmCall(bcx, a, c, volatile, alignstack,\n+                                  lib::llvm::AD_ATT);\n+                }\n+            }\n+            return bcx;\n+        }\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,"}, {"sha": "9a0c330d2d106a8a8b79050e3a864b4ad653f7d7", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -353,7 +353,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n       expr_match(*) | expr_block(_) | expr_if(*) | expr_while(*) |\n       expr_break(_) | expr_again(_) | expr_unary(_, _) | expr_lit(_) |\n       expr_mac(_) | expr_addr_of(_, _) | expr_ret(_) | expr_loop(_, _) |\n-      expr_loop_body(_) | expr_do_body(_) => ()\n+      expr_loop_body(_) | expr_do_body(_) | expr_inline_asm(*) => ()\n     }\n }\n "}, {"sha": "6e21439fc3563174d14514457d6751bd4de340a4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -3076,6 +3076,7 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_block(*) |\n         ast::expr_copy(*) |\n         ast::expr_repeat(*) |\n+        ast::expr_inline_asm(*) |\n         ast::expr_lit(@codemap::spanned {node: lit_str(_), _}) |\n         ast::expr_vstore(_, ast::expr_vstore_slice) |\n         ast::expr_vstore(_, ast::expr_vstore_mut_slice) |"}, {"sha": "445cab4ba95fd4b94e9f21880551f24a8cdeb0f7", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -2303,6 +2303,10 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let region_lb = ty::re_scope(expr.id);\n         instantiate_path(fcx, pth, tpt, expr.span, expr.id, region_lb);\n       }\n+      ast::expr_inline_asm(*) => {\n+          fcx.require_unsafe(expr.span, ~\"use of inline assembly\");\n+          fcx.write_nil(id);\n+      }\n       ast::expr_mac(_) => tcx.sess.bug(~\"unexpanded macro\"),\n       ast::expr_break(_) => { fcx.write_bot(id); bot = true; }\n       ast::expr_again(_) => { fcx.write_bot(id); bot = true; }"}, {"sha": "1dd88e6408ba0e8d8058fcf45dcbbefbcd0466ef", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -682,6 +682,7 @@ pub mod guarantor {\n \n             // All of these expressions are rvalues and hence their\n             // value is not guaranteed by a region pointer.\n+            ast::expr_inline_asm(*) |\n             ast::expr_mac(*) |\n             ast::expr_lit(_) |\n             ast::expr_unary(*) |"}, {"sha": "b22018c4c76e13b577766b90c8462c29b1942f72", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -601,6 +601,9 @@ pub enum expr_ {\n     expr_ret(Option<@expr>),\n     expr_log(log_level, @expr, @expr),\n \n+    /* asm, clobbers + constraints, volatile, align stack */\n+    expr_inline_asm(@~str, @~str, bool, bool),\n+\n     expr_mac(mac),\n \n     // A struct literal expression."}, {"sha": "8051a67d8fdc72c74e778556386ca51a87c8dc41", "filename": "src/libsyntax/ext/asm.rs", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -0,0 +1,174 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+\n+/*\n+ * Inline assembly support.\n+ */\n+\n+use core::prelude::*;\n+\n+use ast;\n+use codemap::span;\n+use ext::base;\n+use ext::base::*;\n+use parse;\n+use parse::token;\n+\n+enum State {\n+    Asm,\n+    Outputs,\n+    Inputs,\n+    Clobbers,\n+    Options\n+}\n+\n+fn next_state(s: State) -> Option<State> {\n+    match s {\n+        Asm      => Some(Outputs),\n+        Outputs  => Some(Inputs),\n+        Inputs   => Some(Clobbers),\n+        Clobbers => Some(Options),\n+        Options  => None\n+    }\n+}\n+\n+pub fn expand_asm(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n+    -> base::MacResult {\n+\n+    let p = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(),\n+                                       vec::from_slice(tts));\n+\n+    let mut asm = ~\"\";\n+    let mut outputs = ~[];\n+    let mut inputs = ~[];\n+    let mut cons = ~\"\";\n+    let mut volatile = false;\n+    let mut alignstack = false;\n+\n+    let mut state = Asm;\n+    loop outer: {\n+        match state {\n+            Asm => {\n+                asm = expr_to_str(cx, p.parse_expr(),\n+                                ~\"inline assembly must be a string literal.\");\n+            }\n+            Outputs => {\n+                while *p.token != token::EOF &&\n+                      *p.token != token::COLON &&\n+                      *p.token != token::MOD_SEP {\n+\n+                    if outputs.len() != 0 {\n+                        p.eat(&token::COMMA);\n+                    }\n+\n+                    let constraint = p.parse_str();\n+                    p.expect(&token::LPAREN);\n+                    let out = p.parse_expr();\n+                    p.expect(&token::RPAREN);\n+\n+                    outputs.push((constraint, out));\n+                }\n+            }\n+            Inputs => {\n+                while *p.token != token::EOF &&\n+                      *p.token != token::COLON &&\n+                      *p.token != token::MOD_SEP {\n+\n+                    if inputs.len() != 0 {\n+                        p.eat(&token::COMMA);\n+                    }\n+\n+                    let constraint = p.parse_str();\n+                    p.expect(&token::LPAREN);\n+                    let in = p.parse_expr();\n+                    p.expect(&token::RPAREN);\n+\n+                    inputs.push((constraint, in));\n+                }\n+            }\n+            Clobbers => {\n+                let mut clobs = ~[];\n+                while *p.token != token::EOF &&\n+                      *p.token != token::COLON &&\n+                      *p.token != token::MOD_SEP {\n+\n+                    if clobs.len() != 0 {\n+                        p.eat(&token::COMMA);\n+                    }\n+\n+                    let clob = ~\"~{\" + *p.parse_str() + ~\"}\";\n+                    clobs.push(clob);\n+                }\n+\n+                cons = str::connect(clobs, \",\");\n+            }\n+            Options => {\n+                let option = *p.parse_str();\n+\n+                if option == ~\"volatile\" {\n+                    volatile = true;\n+                } else if option == ~\"alignstack\" {\n+                    alignstack = true;\n+                }\n+\n+                if *p.token == token::COMMA {\n+                    p.eat(&token::COMMA);\n+                }\n+            }\n+        }\n+\n+        while *p.token == token::COLON   ||\n+              *p.token == token::MOD_SEP ||\n+              *p.token == token::EOF {\n+            state = if *p.token == token::COLON {\n+                p.bump();\n+                match next_state(state) {\n+                    Some(x) => x,\n+                    None    => break outer\n+                }\n+            } else if *p.token == token::MOD_SEP {\n+                p.bump();\n+                let s = match next_state(state) {\n+                    Some(x) => x,\n+                    None    => break outer\n+                };\n+                match next_state(s) {\n+                    Some(x) => x,\n+                    None    => break outer\n+                }\n+            } else if *p.token == token::EOF {\n+                break outer;\n+            } else {\n+               state\n+            };\n+        }\n+    }\n+\n+    MRExpr(@ast::expr {\n+        id: cx.next_id(),\n+        callee_id: cx.next_id(),\n+        node: ast::expr_inline_asm(@asm, @cons, volatile, alignstack),\n+        span: sp\n+    })\n+}\n+\n+\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "1eae4b84cc99206156812aafa0f7dc79703e3823", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -198,6 +198,8 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n                                 ext::source_util::expand_mod));\n     syntax_expanders.insert(@~\"proto\",\n                             builtin_item_tt(ext::pipes::expand_proto));\n+    syntax_expanders.insert(@~\"asm\",\n+                            builtin_normal_tt(ext::asm::expand_asm));\n     syntax_expanders.insert(\n         @~\"trace_macros\",\n         builtin_normal_tt(ext::trace_macros::expand_trace_macros));"}, {"sha": "15097f57b02e03e1fc830757a3b8af30f43e8aec", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -560,6 +560,7 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n                 fld.fold_expr(e)\n             )\n         }\n+        expr_inline_asm(*) => copy *e,\n         expr_mac(ref mac) => expr_mac(fold_mac((*mac))),\n         expr_struct(path, ref fields, maybe_expr) => {\n             expr_struct("}, {"sha": "51e36d9ec02c1559ceca165bbcd59cc3ea16156c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -27,7 +27,7 @@ use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n-use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n+use ast::{expr_vec, expr_vstore, expr_vstore_mut_box, expr_inline_asm};\n use ast::{expr_vstore_fixed, expr_vstore_slice, expr_vstore_box};\n use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n use ast::{expr_vstore_uniq, TyClosure, TyBareFn, Onceness, Once, Many};"}, {"sha": "92883123782067af68c214e1ee5d0045b3bdd8f4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -1398,6 +1398,18 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n           }\n         }\n       }\n+      ast::expr_inline_asm(a, c, v, _) => {\n+        if v {\n+            word(s.s, ~\"__volatile__ asm!\");\n+        } else {\n+            word(s.s, ~\"asm!\");\n+        }\n+        popen(s);\n+        print_string(s, *a);\n+        word_space(s, ~\",\");\n+        print_string(s, *c);\n+        pclose(s);\n+      }\n       ast::expr_mac(ref m) => print_mac(s, (*m)),\n       ast::expr_paren(e) => {\n           popen(s);"}, {"sha": "e13ef976d976b2ddbe556c972990ff55706e0726", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -60,6 +60,7 @@ pub mod print {\n }\n \n pub mod ext {\n+    pub mod asm;\n     pub mod base;\n     pub mod expand;\n "}, {"sha": "95ab603f584330804e888b989a1c00a3801b3dbf", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -562,6 +562,7 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         }\n         expr_mac(ref mac) => visit_mac((*mac), e, v),\n         expr_paren(x) => (v.visit_expr)(x, e, v),\n+        expr_inline_asm(*) => (),\n     }\n     (v.visit_expr_post)(ex, e, v);\n }"}, {"sha": "7686dcd4ff4dca1c1d97e520a2333483db735270", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -15,6 +15,7 @@\n //\n //===----------------------------------------------------------------------===\n \n+#include \"llvm/InlineAsm.h\"\n #include \"llvm/LLVMContext.h\"\n #include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n@@ -539,3 +540,14 @@ extern \"C\" void LLVMSetDebug(int Enabled) {\n   DebugFlag = Enabled;\n #endif\n }\n+\n+extern \"C\" LLVMValueRef LLVMInlineAsm(LLVMTypeRef Ty,\n+                                      char *AsmString,\n+                                      char *Constraints,\n+                                      LLVMBool HasSideEffects,\n+                                      LLVMBool IsAlignStack,\n+                                      InlineAsm::AsmDialect Dialect) {\n+    return wrap(InlineAsm::get(unwrap<FunctionType>(Ty), AsmString,\n+                               Constraints, HasSideEffects,\n+                               IsAlignStack, Dialect));\n+}"}, {"sha": "8b1c9d5ec7fbcc4587e2130101de2d661e9b5902", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "patch": "@@ -583,3 +583,4 @@ LLVMX86MMXTypeInContext\n LLVMConstNamedStruct\n LLVMStructCreateNamed\n LLVMStructSetBody\n+LLVMInlineAsm"}]}