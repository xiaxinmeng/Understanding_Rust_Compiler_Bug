{"sha": "16f218b6006faa752925ca5934372c34f1eb2953", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZjIxOGI2MDA2ZmFhNzUyOTI1Y2E1OTM0MzcyYzM0ZjFlYjI5NTM=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2016-01-25T00:51:19Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2016-02-23T06:37:53Z"}, "message": "Rename CStr::from_bytes to from_bytes_with_nul", "tree": {"sha": "177d0e4458be5caeaa189c5fccb96a1d8262c312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177d0e4458be5caeaa189c5fccb96a1d8262c312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f218b6006faa752925ca5934372c34f1eb2953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f218b6006faa752925ca5934372c34f1eb2953", "html_url": "https://github.com/rust-lang/rust/commit/16f218b6006faa752925ca5934372c34f1eb2953", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f218b6006faa752925ca5934372c34f1eb2953/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a70ae2ffb9a5dd08d916b9938eeca820486ba7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70ae2ffb9a5dd08d916b9938eeca820486ba7a0", "html_url": "https://github.com/rust-lang/rust/commit/a70ae2ffb9a5dd08d916b9938eeca820486ba7a0"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "e3c51a74b0962a8bc400446de37aa60ddca435ba", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16f218b6006faa752925ca5934372c34f1eb2953/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f218b6006faa752925ca5934372c34f1eb2953/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=16f218b6006faa752925ca5934372c34f1eb2953", "patch": "@@ -449,16 +449,16 @@ impl CStr {\n     /// use std::ffi::CStr;\n     ///\n     /// # fn main() {\n-    /// let cstr = CStr::from_bytes(b\"hello\\0\");\n+    /// let cstr = CStr::from_bytes_with_nul(b\"hello\\0\");\n     /// assert!(cstr.is_some());\n     /// # }\n     /// ```\n     #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"0\")]\n-    pub fn from_bytes<'a>(bytes: &'a [u8]) -> Option<&'a CStr> {\n+    pub fn from_bytes_with_nul<'a>(bytes: &'a [u8]) -> Option<&'a CStr> {\n         if bytes.is_empty() || memchr::memchr(0, &bytes) != Some(bytes.len() - 1) {\n             None\n         } else {\n-            Some(unsafe { Self::from_bytes_unchecked(bytes) })\n+            Some(unsafe { Self::from_bytes_with_nul_unchecked(bytes) })\n         }\n     }\n \n@@ -477,13 +477,13 @@ impl CStr {\n     /// # fn main() {\n     /// unsafe {\n     ///     let cstring = CString::new(\"hello\").unwrap();\n-    ///     let cstr = CStr::from_bytes_unchecked(cstring.to_bytes_with_nul());\n+    ///     let cstr = CStr::from_bytes_with_nul_unchecked(cstring.to_bytes_with_nul());\n     ///     assert_eq!(cstr, &*cstring);\n     /// }\n     /// # }\n     /// ```\n     #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"0\")]\n-    pub unsafe fn from_bytes_unchecked<'a>(bytes: &'a [u8]) -> &'a CStr {\n+    pub unsafe fn from_bytes_with_nul_unchecked<'a>(bytes: &'a [u8]) -> &'a CStr {\n         mem::transmute(bytes)\n     }\n "}]}