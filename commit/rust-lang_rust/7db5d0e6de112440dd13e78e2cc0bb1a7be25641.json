{"sha": "7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYjVkMGU2ZGUxMTI0NDBkZDEzZTc4ZTJjYzBiYjFhN2JlMjU2NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-19T23:19:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-19T23:19:51Z"}, "message": "Auto merge of #4221 - lzutao:redundant-lifetime, r=matthiaskrgr\n\nFix warnings about unnecessary lifetime bounds\n\nRustup https://github.com/rust-lang/rust/pull/61172\n\nchangelog: none", "tree": {"sha": "49422af678f41892a1233ae0900582ea86650294", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49422af678f41892a1233ae0900582ea86650294"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "html_url": "https://github.com/rust-lang/rust/commit/7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "149a988146e1e23849338cefe8df7823e1ca3853", "url": "https://api.github.com/repos/rust-lang/rust/commits/149a988146e1e23849338cefe8df7823e1ca3853", "html_url": "https://github.com/rust-lang/rust/commit/149a988146e1e23849338cefe8df7823e1ca3853"}, {"sha": "4fa498a3eb63071a1492b319b1673d585db66a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa498a3eb63071a1492b319b1673d585db66a28", "html_url": "https://github.com/rust-lang/rust/commit/4fa498a3eb63071a1492b319b1673d585db66a28"}], "stats": {"total": 170, "additions": 83, "deletions": 87}, "files": [{"sha": "28a5f8246f77b1574ba935e42bc8e810052ff32e", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -236,13 +236,13 @@ fn is_commutative(op: hir::BinOpKind) -> bool {\n     }\n }\n \n-struct ExprVisitor<'a, 'tcx: 'a> {\n+struct ExprVisitor<'a, 'tcx> {\n     assignee: &'a hir::Expr,\n     counter: u8,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         if SpanlessEq::new(self.cx).ignore_fn().eq_expr(self.assignee, expr) {\n             self.counter += 1;"}, {"sha": "4fd9e271af084d734e74d6e11566b84dd3951d75", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -44,12 +44,12 @@ declare_clippy_lint! {\n \n declare_lint_pass!(BlockInIfCondition => [BLOCK_IN_IF_CONDITION_EXPR, BLOCK_IN_IF_CONDITION_STMT]);\n \n-struct ExVisitor<'a, 'tcx: 'a> {\n+struct ExVisitor<'a, 'tcx> {\n     found_block: Option<&'tcx Expr>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         if let ExprKind::Closure(_, _, eid, _, _) = expr.node {\n             let body = self.cx.tcx.hir().body(eid);"}, {"sha": "0acf620cd17e823b7f002181a983e92b3a59ec53", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -68,12 +68,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonminimalBool {\n     }\n }\n \n-struct NonminimalBoolVisitor<'a, 'tcx: 'a> {\n+struct NonminimalBoolVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n use quine_mc_cluskey::Bool;\n-struct Hir2Qmm<'a, 'tcx: 'a, 'v> {\n+struct Hir2Qmm<'a, 'tcx, 'v> {\n     terminals: Vec<&'v Expr>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n@@ -155,7 +155,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n     }\n }\n \n-struct SuggestContext<'a, 'tcx: 'a, 'v> {\n+struct SuggestContext<'a, 'tcx, 'v> {\n     terminals: &'v [&'v Expr],\n     cx: &'a LateContext<'a, 'tcx>,\n     output: String,"}, {"sha": "ea644450f6f4116f51b57c5acc5efef99ad071b3", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -41,7 +41,7 @@ impl CognitiveComplexity {\n impl_lint_pass!(CognitiveComplexity => [COGNITIVE_COMPLEXITY]);\n \n impl CognitiveComplexity {\n-    fn check<'a, 'tcx: 'a>(&mut self, cx: &'a LateContext<'a, 'tcx>, body: &'tcx Body, span: Span) {\n+    fn check<'a, 'tcx>(&mut self, cx: &'a LateContext<'a, 'tcx>, body: &'tcx Body, span: Span) {\n         if in_macro_or_desugar(span) {\n             return;\n         }\n@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CognitiveComplexity {\n     }\n }\n \n-struct CCHelper<'a, 'tcx: 'a> {\n+struct CCHelper<'a, 'tcx> {\n     match_arms: u64,\n     divergence: u64,\n     returns: u64,"}, {"sha": "480118ca7ea412b21681644a1318140ee61acb33", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -210,7 +210,7 @@ pub fn constant_context<'c, 'cc>(\n     }\n }\n \n-pub struct ConstEvalLateContext<'a, 'tcx: 'a> {\n+pub struct ConstEvalLateContext<'a, 'tcx> {\n     lcx: &'a LateContext<'a, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,"}, {"sha": "83f78b2d72d60ba2613da75b2607b7fc087a2aa8", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -112,7 +112,7 @@ fn check_cond<'a, 'tcx, 'b>(\n     None\n }\n \n-struct InsertVisitor<'a, 'tcx: 'a, 'b> {\n+struct InsertVisitor<'a, 'tcx, 'b> {\n     cx: &'a LateContext<'a, 'tcx>,\n     span: Span,\n     ty: &'static str,"}, {"sha": "bbc3084c157291acc0a1ecce0f0a226854d96cb6", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -43,7 +43,7 @@ fn is_non_trait_box(ty: Ty<'_>) -> bool {\n     ty.is_box() && !ty.boxed_ty().is_trait()\n }\n \n-struct EscapeDelegate<'a, 'tcx: 'a> {\n+struct EscapeDelegate<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     set: HirIdSet,\n     too_large_for_stack: u64,"}, {"sha": "00143896951614470eddfbbd4b554952145828e9", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n     }\n }\n \n-struct DivergenceVisitor<'a, 'tcx: 'a> {\n+struct DivergenceVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n@@ -272,7 +272,7 @@ fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt) -> St\n }\n \n /// A visitor that looks for reads from a variable.\n-struct ReadVisitor<'a, 'tcx: 'a> {\n+struct ReadVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     /// The ID of the variable we're looking for.\n     var: HirId,"}, {"sha": "1d2de8978fb6068088ab17cb51dab1726ee9d138", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -49,13 +49,13 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n     use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n     use rustc::hir::*;\n \n-    struct FindPanicUnwrap<'a, 'tcx: 'a> {\n+    struct FindPanicUnwrap<'a, 'tcx> {\n         lcx: &'a LateContext<'a, 'tcx>,\n         tables: &'tcx ty::TypeckTables<'tcx>,\n         result: Vec<Span>,\n     }\n \n-    impl<'a, 'tcx: 'a> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n+    impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n         fn visit_expr(&mut self, expr: &'tcx Expr) {\n             // check for `begin_panic`\n             if_chain! {"}, {"sha": "aeb9b0c42d71fa1067f544063d2ae54c637addc6", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -291,7 +291,7 @@ fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<hir::HirId> {\n     }\n }\n \n-struct DerefVisitor<'a, 'tcx: 'a> {\n+struct DerefVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     ptrs: FxHashSet<hir::HirId>,\n     tables: &'a ty::TypeckTables<'tcx>,\n@@ -330,7 +330,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx: 'a> DerefVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr) {\n         if let hir::ExprKind::Path(ref qpath) = ptr.node {\n             if let Res::Local(id) = self.cx.tables.qpath_res(qpath, ptr.hir_id) {"}, {"sha": "845e40c5edf083b79477e4f48053a93c9c6bdbba", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n     }\n }\n \n-struct UsedVisitor<'a, 'tcx: 'a> {\n+struct UsedVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     id: hir::HirId,\n     used: bool,\n@@ -194,7 +194,7 @@ fn check_assign<'a, 'tcx>(\n     None\n }\n \n-fn used_in_expr<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, id: hir::HirId, expr: &'tcx hir::Expr) -> bool {\n+fn used_in_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, id: hir::HirId, expr: &'tcx hir::Expr) -> bool {\n     let mut v = UsedVisitor { cx, id, used: false };\n     hir::intravisit::walk_expr(&mut v, expr);\n     v.used"}, {"sha": "dbdb3c51962759d2c0aa5a4b0165f2c9c34b3327", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -147,7 +147,7 @@ fn check_fn_inner<'a, 'tcx>(\n     report_extra_lifetimes(cx, decl, generics);\n }\n \n-fn could_use_elision<'a, 'tcx: 'a>(\n+fn could_use_elision<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     func: &'tcx FnDecl,\n     body: Option<BodyId>,\n@@ -264,7 +264,7 @@ fn unique_lifetimes(lts: &[RefLt]) -> usize {\n }\n \n /// A visitor usable for `rustc_front::visit::walk_ty()`.\n-struct RefVisitor<'a, 'tcx: 'a> {\n+struct RefVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     lts: Vec<RefLt>,\n     abort: bool,\n@@ -377,7 +377,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n /// Are any lifetimes mentioned in the `where` clause? If so, we don't try to\n /// reason about elision.\n-fn has_where_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, where_clause: &'tcx WhereClause) -> bool {\n+fn has_where_lifetimes<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, where_clause: &'tcx WhereClause) -> bool {\n     for predicate in &where_clause.predicates {\n         match *predicate {\n             WherePredicate::RegionPredicate(..) => return true,\n@@ -445,7 +445,7 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n     }\n }\n \n-fn report_extra_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, func: &'tcx FnDecl, generics: &'tcx Generics) {\n+fn report_extra_lifetimes<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, func: &'tcx FnDecl, generics: &'tcx Generics) {\n     let hs = generics\n         .params\n         .iter()"}, {"sha": "b4d2e921e05098ba3cee7aaf47e8855cfc36b09f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -1723,13 +1723,13 @@ impl<'tcx> Visitor<'tcx> for UsedVisitor {\n     }\n }\n \n-struct LocalUsedVisitor<'a, 'tcx: 'a> {\n+struct LocalUsedVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     local: HirId,\n     used: bool,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for LocalUsedVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for LocalUsedVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         if same_var(self.cx, expr, self.local) {\n             self.used = true;\n@@ -1743,7 +1743,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for LocalUsedVisitor<'a, 'tcx> {\n     }\n }\n \n-struct VarVisitor<'a, 'tcx: 'a> {\n+struct VarVisitor<'a, 'tcx> {\n     /// context reference\n     cx: &'a LateContext<'a, 'tcx>,\n     /// var name to look for as index\n@@ -1914,7 +1914,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n     }\n }\n \n-fn is_used_inside<'a, 'tcx: 'a>(cx: &'a LateContext<'a, 'tcx>, expr: &'tcx Expr, container: &'tcx Expr) -> bool {\n+fn is_used_inside<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, expr: &'tcx Expr, container: &'tcx Expr) -> bool {\n     let def_id = match var_def_id(cx, expr) {\n         Some(id) => id,\n         None => return false,\n@@ -1927,7 +1927,7 @@ fn is_used_inside<'a, 'tcx: 'a>(cx: &'a LateContext<'a, 'tcx>, expr: &'tcx Expr,\n     false\n }\n \n-fn is_iterator_used_after_while_let<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, iter_expr: &'tcx Expr) -> bool {\n+fn is_iterator_used_after_while_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, iter_expr: &'tcx Expr) -> bool {\n     let def_id = match var_def_id(cx, iter_expr) {\n         Some(id) => id,\n         None => return false,\n@@ -1945,7 +1945,7 @@ fn is_iterator_used_after_while_let<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, it\n     visitor.var_used_after_while_let\n }\n \n-struct VarUsedAfterLoopVisitor<'a, 'tcx: 'a> {\n+struct VarUsedAfterLoopVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     def_id: HirId,\n     iter_expr_id: HirId,\n@@ -2051,7 +2051,7 @@ enum VarState {\n }\n \n /// Scan a for loop for variables that are incremented exactly once.\n-struct IncrementVisitor<'a, 'tcx: 'a> {\n+struct IncrementVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,      // context reference\n     states: FxHashMap<HirId, VarState>, // incremented variables\n     depth: u32,                         // depth of conditional expressions\n@@ -2105,7 +2105,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n }\n \n /// Checks whether a variable is initialized to zero at the start of a loop.\n-struct InitializeVisitor<'a, 'tcx: 'a> {\n+struct InitializeVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>, // context reference\n     end_expr: &'tcx Expr,          // the for loop. Stop scanning here.\n     var_id: HirId,\n@@ -2374,7 +2374,7 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, e\n /// Stops analysis if a function call is found\n /// Note: In some cases such as `self`, there are no mutable annotation,\n /// All variables definition IDs are collected\n-struct VarCollectorVisitor<'a, 'tcx: 'a> {\n+struct VarCollectorVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     ids: FxHashSet<HirId>,\n     def_ids: FxHashMap<def_id::DefId, bool>,"}, {"sha": "566082c9be05156e6939454ae2f997eabfd3f795", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -763,7 +763,7 @@ where\n     T: Copy + Ord,\n {\n     #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-    enum Kind<'a, T: 'a> {\n+    enum Kind<'a, T> {\n         Start(T, &'a SpannedRange<T>),\n         End(Bound<T>, &'a SpannedRange<T>),\n     }"}, {"sha": "1bcdbfec59003e1b9955dcc7b1cc192ab84626ad", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -1046,15 +1046,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n \n /// Checks for the `OR_FUN_CALL` lint.\n #[allow(clippy::too_many_lines)]\n-fn lint_or_fun_call<'a, 'tcx: 'a>(\n+fn lint_or_fun_call<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &hir::Expr,\n     method_span: Span,\n     name: &str,\n     args: &'tcx [hir::Expr],\n ) {\n     // Searches an expression for method calls or function calls that aren't ctors\n-    struct FunCallFinder<'a, 'tcx: 'a> {\n+    struct FunCallFinder<'a, 'tcx> {\n         cx: &'a LateContext<'a, 'tcx>,\n         found: bool,\n     }\n@@ -1142,7 +1142,7 @@ fn lint_or_fun_call<'a, 'tcx: 'a>(\n \n     /// Checks for `*or(foo())`.\n     #[allow(clippy::too_many_arguments)]\n-    fn check_general_case<'a, 'tcx: 'a>(\n+    fn check_general_case<'a, 'tcx>(\n         cx: &LateContext<'a, 'tcx>,\n         name: &str,\n         method_span: Span,"}, {"sha": "769392a6fd8ff8d550282e6ff2eb6e1944e5e2dd", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -77,12 +77,12 @@ pub(super) fn lint<'a, 'tcx>(\n     }\n }\n \n-struct UnwrapVisitor<'a, 'tcx: 'a> {\n+struct UnwrapVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     identifiers: FxHashSet<Symbol>,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n@@ -93,13 +93,13 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n     }\n }\n \n-struct MapExprVisitor<'a, 'tcx: 'a> {\n+struct MapExprVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     identifiers: FxHashSet<Symbol>,\n     found_identifier: bool,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n             self.found_identifier = true;"}, {"sha": "a28e9b1e3079bb2e6d71cc5ac2acb147b1000627", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -53,7 +53,7 @@ pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr\n }\n \n // returns (found_mapping, found_filtering)\n-fn check_expression<'a, 'tcx: 'a>(\n+fn check_expression<'a, 'tcx>(\n     cx: &'a LateContext<'a, 'tcx>,\n     arg_id: hir::HirId,\n     expr: &'tcx hir::Expr,\n@@ -104,7 +104,7 @@ fn check_expression<'a, 'tcx: 'a>(\n     }\n }\n \n-struct ReturnVisitor<'a, 'tcx: 'a> {\n+struct ReturnVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     arg_id: hir::HirId,\n     // Found a non-None return that isn't Some(input)\n@@ -113,7 +113,7 @@ struct ReturnVisitor<'a, 'tcx: 'a> {\n     found_filtering: bool,\n }\n \n-impl<'a, 'tcx: 'a> ReturnVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> ReturnVisitor<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'a, 'tcx>, arg_id: hir::HirId) -> ReturnVisitor<'a, 'tcx> {\n         ReturnVisitor {\n             cx,"}, {"sha": "858ad50e10439c9799b8a7855c2449716df71209", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {\n     }\n }\n \n-pub struct MutVisitor<'a, 'tcx: 'a> {\n+pub struct MutVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n }\n "}, {"sha": "710c8975a1ef9c0e34de4ed89bfb067653d09e57", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -326,7 +326,7 @@ fn requires_exact_signature(attrs: &[Attribute]) -> bool {\n     })\n }\n \n-struct MovedVariablesCtxt<'a, 'tcx: 'a> {\n+struct MovedVariablesCtxt<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     moved_vars: FxHashSet<HirId>,\n     /// Spans which need to be prefixed with `*` for dereferencing the"}, {"sha": "cc0192feb5cb4ab6d6ca4d6cc47c99c71e97843a", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -77,7 +77,7 @@ struct ExistingName {\n     whitelist: &'static [&'static str],\n }\n \n-struct SimilarNamesLocalVisitor<'a, 'tcx: 'a> {\n+struct SimilarNamesLocalVisitor<'a, 'tcx> {\n     names: Vec<ExistingName>,\n     cx: &'a EarlyContext<'tcx>,\n     lint: &'a NonExpressiveNames,\n@@ -86,7 +86,7 @@ struct SimilarNamesLocalVisitor<'a, 'tcx: 'a> {\n     single_char_names: Vec<Vec<Ident>>,\n }\n \n-impl<'a, 'tcx: 'a> SimilarNamesLocalVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> SimilarNamesLocalVisitor<'a, 'tcx> {\n     fn check_single_char_names(&self) {\n         let num_single_char_names = self.single_char_names.iter().flatten().count();\n         let threshold = self.lint.single_char_binding_names_threshold;\n@@ -123,9 +123,9 @@ const WHITELIST: &[&[&str]] = &[\n     &[\"lit\", \"lint\"],\n ];\n \n-struct SimilarNamesNameVisitor<'a: 'b, 'tcx: 'a, 'b>(&'b mut SimilarNamesLocalVisitor<'a, 'tcx>);\n+struct SimilarNamesNameVisitor<'a, 'tcx, 'b>(&'b mut SimilarNamesLocalVisitor<'a, 'tcx>);\n \n-impl<'a, 'tcx: 'a, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n+impl<'a, 'tcx, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n     fn visit_pat(&mut self, pat: &'tcx Pat) {\n         match pat.node {\n             PatKind::Ident(_, ident, _) => self.check_ident(ident),"}, {"sha": "95cd118c98ebaaba0b72d1fc4c71cc9b52d2b917", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -236,7 +236,7 @@ fn check_pat<'a, 'tcx>(\n     }\n }\n \n-fn lint_shadow<'a, 'tcx: 'a>(\n+fn lint_shadow<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     name: Name,\n     span: Span,"}, {"sha": "dde9412c52e830534796791d36e0040993a30ac0", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -180,7 +180,7 @@ impl SlowVectorInit {\n \n /// `VectorInitializationVisitor` searches for unsafe or slow vector initializations for the given\n /// vector.\n-struct VectorInitializationVisitor<'a, 'tcx: 'a> {\n+struct VectorInitializationVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n \n     /// Contains the information."}, {"sha": "a480d98b2fd1d75af997236dd3d1ade6c48d7fe6", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -183,7 +183,7 @@ struct BinaryExprVisitor {\n     in_binary_expr: bool,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for BinaryExprVisitor {\n+impl<'a, 'tcx> Visitor<'tcx> for BinaryExprVisitor {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         match expr.node {\n             hir::ExprKind::Binary(..)"}, {"sha": "f484dc7987530d3f9bfc971c37948b25e3ab611e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -2136,18 +2136,18 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n     }\n }\n \n-struct ImplicitHasherTypeVisitor<'a, 'tcx: 'a> {\n+struct ImplicitHasherTypeVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     found: Vec<ImplicitHasherType<'tcx>>,\n }\n \n-impl<'a, 'tcx: 'a> ImplicitHasherTypeVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> ImplicitHasherTypeVisitor<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n         Self { cx, found: vec![] }\n     }\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n         if let Some(target) = ImplicitHasherType::new(self.cx, t) {\n             self.found.push(target);\n@@ -2162,14 +2162,14 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n }\n \n /// Looks for default-hasher-dependent constructors like `HashMap::new`.\n-struct ImplicitHasherConstructorVisitor<'a, 'b, 'tcx: 'a + 'b> {\n+struct ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     body: &'a TypeckTables<'tcx>,\n     target: &'b ImplicitHasherType<'tcx>,\n     suggestions: BTreeMap<Span, String>,\n }\n \n-impl<'a, 'b, 'tcx: 'a + 'b> ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx> ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n     fn new(cx: &'a LateContext<'a, 'tcx>, target: &'b ImplicitHasherType<'tcx>) -> Self {\n         Self {\n             cx,\n@@ -2180,7 +2180,7 @@ impl<'a, 'b, 'tcx: 'a + 'b> ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'tcx: 'a + 'b> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n     fn visit_body(&mut self, body: &'tcx Body) {\n         let prev_body = self.body;\n         self.body = self.cx.tcx.body_tables(body.id());"}, {"sha": "a9d78d30f2bf48d748a605f6ac0518bb90ef471a", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     \"unused labels\"\n }\n \n-struct UnusedLabelVisitor<'a, 'tcx: 'a> {\n+struct UnusedLabelVisitor<'a, 'tcx> {\n     labels: FxHashMap<LocalInternedString, Span>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n@@ -60,7 +60,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n     }\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for UnusedLabelVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for UnusedLabelVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         match expr.node {\n             hir::ExprKind::Break(destination, _) | hir::ExprKind::Continue(destination) => {"}, {"sha": "568087b366797fc3610253aaf34f945252ef364d", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -57,7 +57,7 @@ declare_clippy_lint! {\n }\n \n /// Visitor that keeps track of which variables are unwrappable.\n-struct UnwrappableVariablesVisitor<'a, 'tcx: 'a> {\n+struct UnwrappableVariablesVisitor<'a, 'tcx> {\n     unwrappables: Vec<UnwrapInfo<'tcx>>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n@@ -74,7 +74,7 @@ struct UnwrapInfo<'tcx> {\n \n /// Collects the information about unwrappable variables from an if condition\n /// The `invert` argument tells us whether the condition is negated.\n-fn collect_unwrap_info<'a, 'tcx: 'a>(\n+fn collect_unwrap_info<'a, 'tcx>(\n     cx: &'a LateContext<'a, 'tcx>,\n     expr: &'tcx Expr,\n     invert: bool,\n@@ -113,7 +113,7 @@ fn collect_unwrap_info<'a, 'tcx: 'a>(\n     Vec::new()\n }\n \n-impl<'a, 'tcx: 'a> UnwrappableVariablesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> UnwrappableVariablesVisitor<'a, 'tcx> {\n     fn visit_branch(&mut self, cond: &'tcx Expr, branch: &'tcx Expr, else_branch: bool) {\n         let prev_len = self.unwrappables.len();\n         for unwrap_info in collect_unwrap_info(self.cx, cond, else_branch) {\n@@ -130,7 +130,7 @@ impl<'a, 'tcx: 'a> UnwrappableVariablesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         if let Some((cond, then, els)) = if_block(&expr) {\n             walk_expr(self, cond);"}, {"sha": "96e725c42297b29c8abf34250ce436d2a05ae9b5", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -68,7 +68,7 @@ fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path) {\n     );\n }\n \n-struct TraitImplTyVisitor<'a, 'tcx: 'a> {\n+struct TraitImplTyVisitor<'a, 'tcx> {\n     item_type: Ty<'tcx>,\n     cx: &'a LateContext<'a, 'tcx>,\n     trait_type_walker: ty::walk::TypeWalker<'tcx>,\n@@ -108,7 +108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n     }\n }\n \n-fn check_trait_method_impl_decl<'a, 'tcx: 'a>(\n+fn check_trait_method_impl_decl<'a, 'tcx>(\n     cx: &'a LateContext<'a, 'tcx>,\n     item_type: Ty<'tcx>,\n     impl_item: &ImplItem,\n@@ -213,7 +213,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n     }\n }\n \n-struct UseSelfVisitor<'a, 'tcx: 'a> {\n+struct UseSelfVisitor<'a, 'tcx> {\n     item_path: &'a Path,\n     cx: &'a LateContext<'a, 'tcx>,\n }"}, {"sha": "3a54c5d0a02c9d61318e53fbc7a71c921bea249b", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -14,7 +14,7 @@ use syntax::ptr::P;\n /// span.\n ///\n /// Note that some expressions kinds are not considered but could be added.\n-pub struct SpanlessEq<'a, 'tcx: 'a> {\n+pub struct SpanlessEq<'a, 'tcx> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'a, 'tcx>,\n     tables: &'a TypeckTables<'tcx>,\n@@ -23,7 +23,7 @@ pub struct SpanlessEq<'a, 'tcx: 'a> {\n     ignore_fn: bool,\n }\n \n-impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n+impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n         Self {\n             cx,\n@@ -349,14 +349,14 @@ where\n /// trait would consider IDs and spans.\n ///\n /// All expressions kind are hashed, but some might have a weaker hash.\n-pub struct SpanlessHash<'a, 'tcx: 'a> {\n+pub struct SpanlessHash<'a, 'tcx> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'a, 'tcx>,\n     tables: &'a TypeckTables<'tcx>,\n     s: DefaultHasher,\n }\n \n-impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n+impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'a, 'tcx>, tables: &'a TypeckTables<'tcx>) -> Self {\n         Self {\n             cx,"}, {"sha": "aba2543b13c8455e17a7c39da252b55e558320be", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -217,12 +217,12 @@ fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty) -> bool {\n     false\n }\n \n-struct LintCollector<'a, 'tcx: 'a> {\n+struct LintCollector<'a, 'tcx> {\n     output: &'a mut FxHashSet<Name>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         walk_expr(self, expr);\n     }"}, {"sha": "bee44d092ee851789ec9b1fe877cff1cd80beed5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -605,7 +605,7 @@ pub fn get_parent_expr<'c>(cx: &'c LateContext<'_, '_>, e: &Expr) -> Option<&'c\n     })\n }\n \n-pub fn get_enclosing_block<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, hir_id: HirId) -> Option<&'tcx Block> {\n+pub fn get_enclosing_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, hir_id: HirId) -> Option<&'tcx Block> {\n     let map = &cx.tcx.hir();\n     let enclosing_node = map\n         .get_enclosing_scope(hir_id)"}, {"sha": "e378ef0c0a90403950abef0c2aff7c2a79af5fa2", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -22,7 +22,7 @@ pub fn get_spans(\n     }\n }\n \n-fn extract_clone_suggestions<'a, 'tcx: 'a>(\n+fn extract_clone_suggestions<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     name: Name,\n     replace: &[(&'static str, &'static str)],\n@@ -43,15 +43,15 @@ fn extract_clone_suggestions<'a, 'tcx: 'a>(\n     }\n }\n \n-struct PtrCloneVisitor<'a, 'tcx: 'a> {\n+struct PtrCloneVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     name: Name,\n     replace: &'a [(&'static str, &'static str)],\n     spans: Vec<(Span, Cow<'static, str>)>,\n     abort: bool,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         if self.abort {\n             return;"}, {"sha": "5474837d8a7870316799583451455f9e3fa603f2", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::fx::FxHashSet;\n use syntax::source_map::Span;\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n-pub fn mutated_variables<'a, 'tcx: 'a>(expr: &'tcx Expr, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<HirId>> {\n+pub fn mutated_variables<'a, 'tcx>(expr: &'tcx Expr, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<HirId>> {\n     let mut delegate = MutVarsDelegate {\n         used_mutably: FxHashSet::default(),\n         skip: false,\n@@ -33,11 +33,7 @@ pub fn mutated_variables<'a, 'tcx: 'a>(expr: &'tcx Expr, cx: &'a LateContext<'a,\n     Some(delegate.used_mutably)\n }\n \n-pub fn is_potentially_mutated<'a, 'tcx: 'a>(\n-    variable: &'tcx Path,\n-    expr: &'tcx Expr,\n-    cx: &'a LateContext<'a, 'tcx>,\n-) -> bool {\n+pub fn is_potentially_mutated<'a, 'tcx>(variable: &'tcx Path, expr: &'tcx Expr, cx: &'a LateContext<'a, 'tcx>) -> bool {\n     if let Res::Local(id) = variable.res {\n         mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&id))\n     } else {"}, {"sha": "dbc7d597b2c1fc8cdf0c557db5b0836b5f1a813d", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -122,9 +122,9 @@ impl IgnoreUnsafeNew {\n }\n \n #[derive(Default)]\n-pub struct OptionRefWrapper<'a, T: 'a>(Option<&'a T>);\n+pub struct OptionRefWrapper<'a, T>(Option<&'a T>);\n \n-impl<'a, T: 'a> OptionRefWrapper<'a, T> {\n+impl<'a, T> OptionRefWrapper<'a, T> {\n     pub fn new() -> Self {\n         OptionRefWrapper(None)\n     }"}, {"sha": "6ec7697c0d6e88458ed2f7815600054d063cdbd4", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db5d0e6de112440dd13e78e2cc0bb1a7be25641/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=7db5d0e6de112440dd13e78e2cc0bb1a7be25641", "patch": "@@ -53,7 +53,7 @@ unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n \n #[warn(clippy::transmute_ptr_to_ref)]\n fn issue1231() {\n-    struct Foo<'a, T: 'a> {\n+    struct Foo<'a, T> {\n         bar: &'a T,\n     }\n "}]}