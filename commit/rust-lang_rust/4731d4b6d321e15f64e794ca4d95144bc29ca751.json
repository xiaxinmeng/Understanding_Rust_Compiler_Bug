{"sha": "4731d4b6d321e15f64e794ca4d95144bc29ca751", "node_id": "C_kwDOAAsO6NoAKDQ3MzFkNGI2ZDMyMWUxNWY2NGU3OTRjYTRkOTUxNDRiYzI5Y2E3NTE", "commit": {"author": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-06-25T19:36:52Z"}, "committer": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-06-25T19:43:33Z"}, "message": "rustc_passes: De-duplicate more code with `fn throw_attr_err()`\n\nSo we can re-use the code for other attributes later.", "tree": {"sha": "f3d0b8374d4304d557e9b863640bdf9a658818c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d0b8374d4304d557e9b863640bdf9a658818c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4731d4b6d321e15f64e794ca4d95144bc29ca751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4731d4b6d321e15f64e794ca4d95144bc29ca751", "html_url": "https://github.com/rust-lang/rust/commit/4731d4b6d321e15f64e794ca4d95144bc29ca751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4731d4b6d321e15f64e794ca4d95144bc29ca751/comments", "author": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "html_url": "https://github.com/rust-lang/rust/commit/00ce47209dfdd8ef8871c6ec804f0e0e04d10702"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "1add91fc9c53137739edd65719b7736171e73fa8", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4731d4b6d321e15f64e794ca4d95144bc29ca751/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4731d4b6d321e15f64e794ca4d95144bc29ca751/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=4731d4b6d321e15f64e794ca4d95144bc29ca751", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::entry::EntryPointType;\n+use rustc_ast::{entry::EntryPointType, Attribute};\n use rustc_errors::struct_span_err;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n@@ -7,9 +7,8 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::config::{CrateType, EntryFnType};\n use rustc_session::parse::feature_err;\n-use rustc_session::Session;\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n \n struct EntryContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -72,9 +71,16 @@ fn entry_point_type(ctxt: &EntryContext<'_>, id: ItemId, at_root: bool) -> Entry\n     }\n }\n \n-fn throw_attr_err(sess: &Session, span: Span, attr: &str) {\n-    sess.struct_span_err(span, &format!(\"`{}` attribute can only be used on functions\", attr))\n-        .emit();\n+fn err_if_attr_found(ctxt: &EntryContext<'_>, attrs: &[Attribute], sym: Symbol) {\n+    if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym) {\n+        ctxt.tcx\n+            .sess\n+            .struct_span_err(\n+                attr.span,\n+                &format!(\"`{}` attribute can only be used on functions\", sym.as_str()),\n+            )\n+            .emit();\n+    }\n }\n \n fn find_item(id: ItemId, ctxt: &mut EntryContext<'_>) {\n@@ -84,12 +90,8 @@ fn find_item(id: ItemId, ctxt: &mut EntryContext<'_>) {\n         EntryPointType::None => (),\n         _ if !matches!(ctxt.tcx.def_kind(id.def_id), DefKind::Fn) => {\n             let attrs = ctxt.tcx.hir().attrs(id.hir_id());\n-            if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym::start) {\n-                throw_attr_err(&ctxt.tcx.sess, attr.span, \"start\");\n-            }\n-            if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym::rustc_main) {\n-                throw_attr_err(&ctxt.tcx.sess, attr.span, \"rustc_main\");\n-            }\n+            err_if_attr_found(ctxt, attrs, sym::start);\n+            err_if_attr_found(ctxt, attrs, sym::rustc_main);\n         }\n         EntryPointType::MainNamed => (),\n         EntryPointType::OtherMain => {"}]}