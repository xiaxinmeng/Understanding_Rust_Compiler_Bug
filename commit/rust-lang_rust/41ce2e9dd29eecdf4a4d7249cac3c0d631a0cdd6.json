{"sha": "41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxY2UyZTlkZDI5ZWVjZGY0YTRkNzI0OWNhYzNjMGQ2MzFhMGNkZDY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-23T11:07:11Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-27T09:18:07Z"}, "message": "Simplified closure handling to need no new cosntraint categories.", "tree": {"sha": "98daabd738ce742661816abafae0473481434113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98daabd738ce742661816abafae0473481434113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlta408ACgkQAXYLT59T\n8VThOA//U35+C5mbXXEbmp5M+prfeLuPXpeTOZ1nPNmdBNVPV6UghZnyfATK5c7B\n5bPtGf8xAZBpbpeEZU9AVyi+YToAVEQe0TI47KAoqGZEbKFgBl1srl6+madELScy\nLHwf5+70CSWk1wsMD+GmvtCiS8YIUkiGImvWKwM5I1dUEjQblD0wtAHPI2Ip+h7s\n2sunFacieEnoSBHnPEdhV+kndiaP1mpdqLOXIZZ++ceVS65sw9a5U3h6oYCUua8C\nlnLNpA4d4Ao9strmmCKaCB77RE7B8qJucYt+hflgTQFiKSU0x/o2lJI8zA63XfWn\nIDIIkb7FJ9imleifs8ZQiTqAg9mcEyHWU1T+gB2ft/jl023JaUF/I8W4qw9a6/4q\nU6SjnD7sntFPlTyAtnHcJwprrLK7wLY+chadWEZA5N72OVdrRcxVmP/NsNUuvllJ\nFZPF+dFnAzaB4ddlehHxT2TQnMB55PObrupMoplhgPU79mOAgS2cRClH+bBwEG0I\ntoGyoEIzxgeKcL/L7tcuD5RSckqPtpxWoAD+WpUiHjUoIpJO5/A0yZHFVyAxL6P1\nHZWK3AwnZIMzDGjcoI0+5VjthgjE665N2p8Jp0912bAsMQ7VshUy+1TRW3sSjJfr\nljIsSU6jGxHizbHiLY+d/AU3S2qfyzLPlcMfmZFm2wQhkcArj08=\n=QlKy\n-----END PGP SIGNATURE-----", "payload": "tree 98daabd738ce742661816abafae0473481434113\nparent 3d0e93309d61636585cfe5ac75c0db8cb5ba03e1\nauthor David Wood <david@davidtw.co> 1532344031 +0200\ncommitter David Wood <david@davidtw.co> 1532683087 +0200\n\nSimplified closure handling to need no new cosntraint categories.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6", "html_url": "https://github.com/rust-lang/rust/commit/41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0e93309d61636585cfe5ac75c0db8cb5ba03e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0e93309d61636585cfe5ac75c0db8cb5ba03e1", "html_url": "https://github.com/rust-lang/rust/commit/3d0e93309d61636585cfe5ac75c0db8cb5ba03e1"}], "stats": {"total": 112, "additions": 45, "deletions": 67}, "files": [{"sha": "836eaa23f68534cf6544550d4309c290f8d009f1", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 45, "deletions": 67, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6", "patch": "@@ -31,9 +31,7 @@ mod var_name;\n enum ConstraintCategory {\n     Cast,\n     Assignment,\n-    AssignmentToUpvar,\n     Return,\n-    CallArgumentToUpvar,\n     CallArgument,\n     Other,\n     Boring,\n@@ -42,14 +40,10 @@ enum ConstraintCategory {\n impl fmt::Display for ConstraintCategory {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self {\n-            ConstraintCategory::Assignment | ConstraintCategory::AssignmentToUpvar => {\n-                write!(f, \"assignment\")\n-            }\n+            ConstraintCategory::Assignment => write!(f, \"assignment\"),\n             ConstraintCategory::Return => write!(f, \"return\"),\n             ConstraintCategory::Cast => write!(f, \"cast\"),\n-            ConstraintCategory::CallArgument | ConstraintCategory::CallArgumentToUpvar => {\n-                write!(f, \"argument\")\n-            }\n+            ConstraintCategory::CallArgument => write!(f, \"argument\"),\n             _ => write!(f, \"free region\"),\n         }\n     }\n@@ -224,10 +218,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             \"constraint_is_interesting: locations={:?} constraint={:?}\",\n             constraint.locations, constraint\n         );\n-        if let Locations::Interesting(_) = constraint.locations {\n-            true\n-        } else {\n-            false\n+\n+        match constraint.locations {\n+            Locations::Interesting(_) | Locations::All => true,\n+            _ => false,\n         }\n     }\n \n@@ -320,45 +314,25 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         }\n \n-        let category = match (\n-            category,\n+        let (fr_is_local, outlived_fr_is_local): (bool, bool) = (\n             self.universal_regions.is_local_free_region(fr),\n             self.universal_regions.is_local_free_region(outlived_fr),\n-        ) {\n-            (ConstraintCategory::Assignment, true, false) => ConstraintCategory::AssignmentToUpvar,\n-            (ConstraintCategory::CallArgument, true, false) => {\n-                ConstraintCategory::CallArgumentToUpvar\n-            }\n-            (category, _, _) => category,\n+        );\n+        debug!(\"report_error: fr_is_local={:?} outlived_fr_is_local={:?} category={:?}\",\n+               fr_is_local, outlived_fr_is_local, category);\n+\n+        match (fr_is_local, outlived_fr_is_local) {\n+            (true, false) =>\n+                self.report_escapes_closure_error(mir, infcx, mir_def_id, fr, outlived_fr,\n+                                                  category, span, errors_buffer),\n+            _ =>\n+                self.report_general_error(mir, infcx, mir_def_id, fr, fr_is_local,\n+                                          outlived_fr, outlived_fr_is_local,\n+                                          category, span, errors_buffer),\n         };\n-\n-        debug!(\"report_error: category={:?}\", category);\n-        match category {\n-            ConstraintCategory::AssignmentToUpvar | ConstraintCategory::CallArgumentToUpvar => self\n-                .report_closure_error(\n-                    mir,\n-                    infcx,\n-                    mir_def_id,\n-                    fr,\n-                    outlived_fr,\n-                    category,\n-                    span,\n-                    errors_buffer,\n-                ),\n-            _ => self.report_general_error(\n-                mir,\n-                infcx,\n-                mir_def_id,\n-                fr,\n-                outlived_fr,\n-                category,\n-                span,\n-                errors_buffer,\n-            ),\n-        }\n     }\n \n-    fn report_closure_error(\n+    fn report_escapes_closure_error(\n         &self,\n         mir: &Mir<'tcx>,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n@@ -374,16 +348,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.get_var_name_and_span_for_region(infcx.tcx, mir, outlived_fr);\n \n         if fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none() {\n-            return self.report_general_error(\n-                mir,\n-                infcx,\n-                mir_def_id,\n-                fr,\n-                outlived_fr,\n-                category,\n-                span,\n-                errors_buffer,\n-            );\n+            return self.report_general_error(mir, infcx, mir_def_id,\n+                                             fr, true, outlived_fr, false,\n+                                             category, span, errors_buffer);\n         }\n \n         let mut diag = infcx\n@@ -423,7 +390,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n+        fr_is_local: bool,\n         outlived_fr: RegionVid,\n+        outlived_fr_is_local: bool,\n         category: ConstraintCategory,\n         span: Span,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -434,17 +403,26 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         let counter = &mut 1;\n-        let fr_name = self.give_region_a_name(infcx.tcx, mir, mir_def_id, fr, counter, &mut diag);\n-        let outlived_fr_name =\n-            self.give_region_a_name(infcx.tcx, mir, mir_def_id, outlived_fr, counter, &mut diag);\n-\n-        diag.span_label(\n-            span,\n-            format!(\n-                \"{} requires that `{}` must outlive `{}`\",\n-                category, fr_name, outlived_fr_name,\n-            ),\n-        );\n+        let fr_name = self.give_region_a_name(\n+            infcx.tcx, mir, mir_def_id, fr, counter, &mut diag);\n+        let outlived_fr_name = self.give_region_a_name(\n+            infcx.tcx, mir, mir_def_id, outlived_fr, counter, &mut diag);\n+\n+        match (category, outlived_fr_is_local, fr_is_local) {\n+            (ConstraintCategory::Return, true, _) => {\n+                diag.span_label(span, format!(\n+                    \"closure was supposed to return data with lifetime `{}` but it is returning \\\n+                    data with lifetime `{}`\",\n+                    fr_name, outlived_fr_name,\n+                ));\n+            },\n+            _ => {\n+                diag.span_label(span, format!(\n+                    \"{} requires that `{}` must outlive `{}`\",\n+                    category, fr_name, outlived_fr_name,\n+                ));\n+            },\n+        }\n \n         diag.buffer(errors_buffer);\n     }"}]}