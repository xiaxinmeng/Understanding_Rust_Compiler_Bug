{"sha": "ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4", "node_id": "C_kwDOAAsO6NoAKGFkMzM1MTk0NTVjN2YxMGJjNWU3ZmRiN2NjNDVlZjZmMWNjYzUxYzQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-28T10:39:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-28T10:39:36Z"}, "message": "ptr::invalid is not equivalent to a int2ptr cast", "tree": {"sha": "87060e97948979b53e7ac426412108f71835bcbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87060e97948979b53e7ac426412108f71835bcbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4", "html_url": "https://github.com/rust-lang/rust/commit/ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97bfc3b38ad46fef419950d434d9a8e8f5c2d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97bfc3b38ad46fef419950d434d9a8e8f5c2d80", "html_url": "https://github.com/rust-lang/rust/commit/b97bfc3b38ad46fef419950d434d9a8e8f5c2d80"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "93728f844ddbad619fe41f7cd9192f89a716dad5", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4", "patch": "@@ -557,16 +557,16 @@ pub const fn null_mut<T>() -> *mut T {\n \n /// Creates an invalid pointer with the given address.\n ///\n-/// This is *currently* equivalent to `addr as *const T` but it expresses the intended semantic\n-/// more clearly, and may become important under future memory models.\n+/// This is different from `addr as *const T`, which creates a pointer that picks up a previously\n+/// exposed provenance. See [`from_exposed_addr`] for more details on that operation.\n ///\n /// The module's top-level documentation discusses the precise meaning of an \"invalid\"\n /// pointer but essentially this expresses that the pointer is not associated\n /// with any actual allocation and is little more than a usize address in disguise.\n ///\n /// This pointer will have no provenance associated with it and is therefore\n /// UB to read/write/offset. This mostly exists to facilitate things\n-/// like ptr::null and NonNull::dangling which make invalid pointers.\n+/// like `ptr::null` and `NonNull::dangling` which make invalid pointers.\n ///\n /// (Standard \"Zero-Sized-Types get to cheat and lie\" caveats apply, although it\n /// may be desirable to give them their own API just to make that 100% clear.)\n@@ -588,16 +588,16 @@ pub const fn invalid<T>(addr: usize) -> *const T {\n \n /// Creates an invalid mutable pointer with the given address.\n ///\n-/// This is *currently* equivalent to `addr as *mut T` but it expresses the intended semantic\n-/// more clearly, and may become important under future memory models.\n+/// This is different from `addr as *mut T`, which creates a pointer that picks up a previously\n+/// exposed provenance. See [`from_exposed_addr_mut`] for more details on that operation.\n ///\n /// The module's top-level documentation discusses the precise meaning of an \"invalid\"\n /// pointer but essentially this expresses that the pointer is not associated\n /// with any actual allocation and is little more than a usize address in disguise.\n ///\n /// This pointer will have no provenance associated with it and is therefore\n /// UB to read/write/offset. This mostly exists to facilitate things\n-/// like ptr::null and NonNull::dangling which make invalid pointers.\n+/// like `ptr::null` and `NonNull::dangling` which make invalid pointers.\n ///\n /// (Standard \"Zero-Sized-Types get to cheat and lie\" caveats apply, although it\n /// may be desirable to give them their own API just to make that 100% clear.)"}]}