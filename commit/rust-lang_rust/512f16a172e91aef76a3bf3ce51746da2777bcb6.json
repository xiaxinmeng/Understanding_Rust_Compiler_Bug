{"sha": "512f16a172e91aef76a3bf3ce51746da2777bcb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMmYxNmExNzJlOTFhZWY3NmEzYmYzY2U1MTc0NmRhMjc3N2JjYjY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-10-18T02:50:33Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-10-26T22:47:39Z"}, "message": "[incremental] Add support for eval always queries\n\nPart of #45238", "tree": {"sha": "93eba996b584be8a85134971b62bfef1f54c74ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93eba996b584be8a85134971b62bfef1f54c74ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/512f16a172e91aef76a3bf3ce51746da2777bcb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/512f16a172e91aef76a3bf3ce51746da2777bcb6", "html_url": "https://github.com/rust-lang/rust/commit/512f16a172e91aef76a3bf3ce51746da2777bcb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/512f16a172e91aef76a3bf3ce51746da2777bcb6/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c053db233d69519b548e5b8ed7192d0783e582a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c053db233d69519b548e5b8ed7192d0783e582a", "html_url": "https://github.com/rust-lang/rust/commit/4c053db233d69519b548e5b8ed7192d0783e582a"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "ec709b301eb7334613088def042015c1126e40ce", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/512f16a172e91aef76a3bf3ce51746da2777bcb6/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/512f16a172e91aef76a3bf3ce51746da2777bcb6/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=512f16a172e91aef76a3bf3ce51746da2777bcb6", "patch": "@@ -199,11 +199,27 @@ impl DepGraph {\n                                    -> (R, DepNodeIndex)\n         where C: DepGraphSafe + StableHashingContextProvider<ContextType=HCX>,\n               R: HashStable<HCX>,\n+    {\n+        self.with_task_impl(key, cx, arg, task,\n+            |data, key| data.borrow_mut().push_task(key),\n+            |data, key| data.borrow_mut().pop_task(key))\n+    }\n+\n+    fn with_task_impl<C, A, R, HCX>(&self,\n+                                    key: DepNode,\n+                                    cx: C,\n+                                    arg: A,\n+                                    task: fn(C, A) -> R,\n+                                    push: fn(&RefCell<CurrentDepGraph>, DepNode),\n+                                    pop: fn(&RefCell<CurrentDepGraph>, DepNode) -> DepNodeIndex)\n+                                    -> (R, DepNodeIndex)\n+        where C: DepGraphSafe + StableHashingContextProvider<ContextType=HCX>,\n+              R: HashStable<HCX>,\n     {\n         if let Some(ref data) = self.data {\n             debug_assert!(!data.colors.borrow().contains_key(&key));\n \n-            data.current.borrow_mut().push_task(key);\n+            push(&data.current, key);\n             if cfg!(debug_assertions) {\n                 profq_msg(ProfileQueriesMsg::TaskBegin(key.clone()))\n             };\n@@ -220,7 +236,7 @@ impl DepGraph {\n                 profq_msg(ProfileQueriesMsg::TaskEnd)\n             };\n \n-            let dep_node_index = data.current.borrow_mut().pop_task(key);\n+            let dep_node_index = pop(&data.current, key);\n \n             let mut stable_hasher = StableHasher::new();\n             result.hash_stable(&mut hcx, &mut stable_hasher);\n@@ -290,6 +306,22 @@ impl DepGraph {\n         }\n     }\n \n+    /// Execute something within an \"eval-always\" task which is a task\n+    // that runs whenever anything changes.\n+    pub fn with_eval_always_task<C, A, R, HCX>(&self,\n+                                   key: DepNode,\n+                                   cx: C,\n+                                   arg: A,\n+                                   task: fn(C, A) -> R)\n+                                   -> (R, DepNodeIndex)\n+        where C: DepGraphSafe + StableHashingContextProvider<ContextType=HCX>,\n+              R: HashStable<HCX>,\n+    {\n+        self.with_task_impl(key, cx, arg, task,\n+            |data, key| data.borrow_mut().push_eval_always_task(key),\n+            |data, key| data.borrow_mut().pop_eval_always_task(key))\n+    }\n+\n     #[inline]\n     pub fn read(&self, v: DepNode) {\n         if let Some(ref data) = self.data {\n@@ -788,6 +820,24 @@ impl CurrentDepGraph {\n         }\n     }\n \n+    fn push_eval_always_task(&mut self, key: DepNode) {\n+        self.task_stack.push(OpenTask::EvalAlways { node: key });\n+    }\n+\n+    fn pop_eval_always_task(&mut self, key: DepNode) -> DepNodeIndex {\n+        let popped_node = self.task_stack.pop().unwrap();\n+\n+        if let OpenTask::EvalAlways {\n+            node,\n+        } = popped_node {\n+            debug_assert_eq!(node, key);\n+            let krate_idx = self.node_to_node_index[&DepNode::new_no_params(DepKind::Krate)];\n+            self.alloc_node(node, vec![krate_idx])\n+        } else {\n+            bug!(\"pop_eval_always_task() - Expected eval always task to be popped\");\n+        }\n+    }\n+\n     fn read_index(&mut self, source: DepNodeIndex) {\n         match self.task_stack.last_mut() {\n             Some(&mut OpenTask::Regular {\n@@ -818,7 +868,8 @@ impl CurrentDepGraph {\n                     reads.push(source);\n                 }\n             }\n-            Some(&mut OpenTask::Ignore) | None => {\n+            Some(&mut OpenTask::Ignore) |\n+            Some(&mut OpenTask::EvalAlways { .. }) | None => {\n                 // ignore\n             }\n         }\n@@ -851,4 +902,7 @@ enum OpenTask {\n         read_set: FxHashSet<DepNodeIndex>,\n     },\n     Ignore,\n+    EvalAlways {\n+        node: DepNode,\n+    },\n }"}]}