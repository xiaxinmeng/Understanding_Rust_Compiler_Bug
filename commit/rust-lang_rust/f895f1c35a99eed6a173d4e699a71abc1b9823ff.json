{"sha": "f895f1c35a99eed6a173d4e699a71abc1b9823ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OTVmMWMzNWE5OWVlZDZhMTczZDRlNjk5YTcxYWJjMWI5ODIzZmY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-21T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-27T09:18:06Z"}, "message": "Add option enabling MIR inlining independently of mir-opt-level", "tree": {"sha": "fa50dff11e33d50672423ffaa8c16d004161f832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa50dff11e33d50672423ffaa8c16d004161f832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f895f1c35a99eed6a173d4e699a71abc1b9823ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f895f1c35a99eed6a173d4e699a71abc1b9823ff", "html_url": "https://github.com/rust-lang/rust/commit/f895f1c35a99eed6a173d4e699a71abc1b9823ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f895f1c35a99eed6a173d4e699a71abc1b9823ff/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0846043440b480e4bbf36ac19db3948f0c835bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0846043440b480e4bbf36ac19db3948f0c835bb1", "html_url": "https://github.com/rust-lang/rust/commit/0846043440b480e4bbf36ac19db3948f0c835bb1"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "c0816b10ebb21fb4d57fe27ccb22ae74777ec679", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f895f1c35a99eed6a173d4e699a71abc1b9823ff/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f895f1c35a99eed6a173d4e699a71abc1b9823ff/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=f895f1c35a99eed6a173d4e699a71abc1b9823ff", "patch": "@@ -557,6 +557,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(function_sections, Some(false));\n     tracked!(human_readable_cgu_names, true);\n     tracked!(inline_in_all_cgus, Some(true));\n+    tracked!(inline_mir, Some(true));\n     tracked!(inline_mir_threshold, 123);\n     tracked!(inline_mir_hint_threshold, 123);\n     tracked!(insert_sideeffect, true);"}, {"sha": "daf91c676a12ceba6450235515ed99cfd4527989", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f895f1c35a99eed6a173d4e699a71abc1b9823ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f895f1c35a99eed6a173d4e699a71abc1b9823ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=f895f1c35a99eed6a173d4e699a71abc1b9823ff", "patch": "@@ -37,21 +37,27 @@ struct CallSite<'tcx> {\n     source_info: SourceInfo,\n }\n \n+/// Returns true if MIR inlining is enabled in the current compilation session.\n+crate fn is_enabled(tcx: TyCtxt<'_>) -> bool {\n+    if tcx.sess.opts.debugging_opts.instrument_coverage {\n+        // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n+        // counters can be invalidated, such as by merging coverage counter statements from\n+        // a pre-inlined function into a different function. This kind of change is invalid,\n+        // so inlining must be skipped. Note: This check is performed here so inlining can\n+        // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n+        return false;\n+    }\n+\n+    if let Some(enabled) = tcx.sess.opts.debugging_opts.inline_mir {\n+        return enabled;\n+    }\n+\n+    tcx.sess.opts.debugging_opts.mir_opt_level >= 2\n+}\n+\n impl<'tcx> MirPass<'tcx> for Inline {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        // If you change this optimization level, also change the level in\n-        // `mir_drops_elaborated_and_const_checked` for the call to `mir_inliner_callees`.\n-        // Otherwise you will get an ICE about stolen MIR.\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n-            return;\n-        }\n-\n-        if tcx.sess.opts.debugging_opts.instrument_coverage {\n-            // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n-            // counters can be invalidated, such as by merging coverage counter statements from\n-            // a pre-inlined function into a different function. This kind of change is invalid,\n-            // so inlining must be skipped. Note: This check is performed here so inlining can\n-            // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n+        if !is_enabled(tcx) {\n             return;\n         }\n "}, {"sha": "56a7d337e0ba84e9eb2b8f06537c2a4015cf8c6c", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f895f1c35a99eed6a173d4e699a71abc1b9823ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f895f1c35a99eed6a173d4e699a71abc1b9823ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=f895f1c35a99eed6a173d4e699a71abc1b9823ff", "patch": "@@ -429,8 +429,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n         let def = ty::WithOptConstParam::unknown(did);\n \n         // Do not compute the mir call graph without said call graph actually being used.\n-        // Keep this in sync with the mir inliner's optimization level.\n-        if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+        if inline::is_enabled(tcx) {\n             let _ = tcx.mir_inliner_callees(ty::InstanceDef::Item(def));\n         }\n     }"}, {"sha": "55691463a1f5515f6c05ab1b481e70ff5c3265c3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f895f1c35a99eed6a173d4e699a71abc1b9823ff/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f895f1c35a99eed6a173d4e699a71abc1b9823ff/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=f895f1c35a99eed6a173d4e699a71abc1b9823ff", "patch": "@@ -957,6 +957,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n+    inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable MIR inlining (default: no)\"),\n     inline_mir_threshold: usize = (50, parse_uint, [TRACKED],\n         \"a default MIR inlining threshold (default: 50)\"),\n     inline_mir_hint_threshold: usize = (100, parse_uint, [TRACKED],"}]}