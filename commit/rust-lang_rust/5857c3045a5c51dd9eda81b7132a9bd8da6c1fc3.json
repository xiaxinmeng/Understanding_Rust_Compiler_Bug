{"sha": "5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3", "node_id": "C_kwDOAAsO6NoAKDU4NTdjMzA0NWE1YzUxZGQ5ZWRhODFiNzEzMmE5YmQ4ZGE2YzFmYzM", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-10-27T15:49:59Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-10-27T16:21:30Z"}, "message": "Use stdio in UWP apps\n\nThis has been supported since Windows 10.0.16299. See https://learn.microsoft.com/en-us/uwp/win32-and-com/win32-apis#apis-from-api-ms-win-core-console-l1-1-0dll", "tree": {"sha": "88758b7849bb795dd44029e92aa15a20aebae7d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88758b7849bb795dd44029e92aa15a20aebae7d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmNasAoACgkQcTRy8vRW\nJ96sBA//U4Ms6csK6RjkhGHhXdhJN2n4yQl3y6Fyf4UzpI1rI4wopEoLeeiqJvhm\nFIPqt+0nWS7gndtd2BY/g43StDMdbpiy7/5gdzdYrYLuWRVAUpxqTgZsQdqqdcFN\nF1vha/5xZus0HS21v+MvB1PFMDGKK5U/o26+PR2ZRnTVOpyn5BHqoAQeHRmCYO3v\n3CRvTMbdLL0RCc/JcrADxYI5pWhUUASYkYqyu2gzgWAFofLe0kdj9a+I0rqC0e4I\nB4Ls56Z9s2112Iwj0XEc4DyagpqBt9AQFvWWQBf5fMKxX2hR/EbzN98s8MBvSyYP\nCheeK+iro6z0DCS7D08A31xFjE8igQ6lObfJVS6z4CWgPIQwNSmMUlleIWA4txoK\nchp7OKbmpOThoAw/11HZiH2DFWUlDv3lqeiOsyQNi6eJHLykntEZ9sEBD7x2QwEY\n6ryOJiiD84SwXDMvlUqEMeBeccw+9evJ0DNEoyjt+4IEPNr/tE0FPLEiLH9XaYQe\nWuiAATK11TLvRGGqEUrOZ7SJ5qOsk2waw1BAgVAbWqLbM4LyOZht1Oud0rYJ+OeZ\n87zh6Y4UfxIl02eZEYvHP62yHDbqD2u6MW/byipCwS1wGQHroxVNaSkuiMiWJocw\nbkdnL0wfuW+XQEvl3Tn0FGADDmFA/p+2MwxmVsa0OVNVaon6RZ0=\n=j51G\n-----END PGP SIGNATURE-----", "payload": "tree 88758b7849bb795dd44029e92aa15a20aebae7d4\nparent 0da281b6068a7d889ae89a9bd8991284cc9b7535\nauthor Chris Denton <christophersdenton@gmail.com> 1666885799 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1666887690 +0100\n\nUse stdio in UWP apps\n\nThis has been supported since Windows 10.0.16299. See https://learn.microsoft.com/en-us/uwp/win32-and-com/win32-apis#apis-from-api-ms-win-core-console-l1-1-0dll\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3", "html_url": "https://github.com/rust-lang/rust/commit/5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da281b6068a7d889ae89a9bd8991284cc9b7535", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da281b6068a7d889ae89a9bd8991284cc9b7535", "html_url": "https://github.com/rust-lang/rust/commit/0da281b6068a7d889ae89a9bd8991284cc9b7535"}], "stats": {"total": 148, "additions": 28, "deletions": 120}, "files": [{"sha": "fc2dc42833d0788d37d71b7821efd9f9b6b58b49", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3", "patch": "@@ -56,6 +56,7 @@ pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n pub type LPSECURITY_ATTRIBUTES = *mut SECURITY_ATTRIBUTES;\n pub type LPSTARTUPINFO = *mut STARTUPINFO;\n pub type LPVOID = *mut c_void;\n+pub type LPCVOID = *const c_void;\n pub type LPWCH = *mut WCHAR;\n pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n pub type LPWSADATA = *mut WSADATA;\n@@ -773,6 +774,16 @@ pub struct timeval {\n     pub tv_usec: c_long,\n }\n \n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub struct CONSOLE_READCONSOLE_CONTROL {\n+    pub nLength: ULONG,\n+    pub nInitialChars: ULONG,\n+    pub dwCtrlWakeupMask: ULONG,\n+    pub dwControlKeyState: ULONG,\n+}\n+pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n+\n // Desktop specific functions & types\n cfg_if::cfg_if! {\n if #[cfg(not(target_vendor = \"uwp\"))] {\n@@ -801,17 +812,6 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n     pub type PVECTORED_EXCEPTION_HANDLER =\n         extern \"system\" fn(ExceptionInfo: *mut EXCEPTION_POINTERS) -> LONG;\n \n-    #[repr(C)]\n-    #[derive(Copy, Clone)]\n-    pub struct CONSOLE_READCONSOLE_CONTROL {\n-        pub nLength: ULONG,\n-        pub nInitialChars: ULONG,\n-        pub dwCtrlWakeupMask: ULONG,\n-        pub dwControlKeyState: ULONG,\n-    }\n-\n-    pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n-\n     #[repr(C)]\n     pub struct BY_HANDLE_FILE_INFORMATION {\n         pub dwFileAttributes: DWORD,\n@@ -827,7 +827,6 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n     }\n \n     pub type LPBY_HANDLE_FILE_INFORMATION = *mut BY_HANDLE_FILE_INFORMATION;\n-    pub type LPCVOID = *const c_void;\n \n     pub const HANDLE_FLAG_INHERIT: DWORD = 0x00000001;\n \n@@ -855,24 +854,6 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n \n     #[link(name = \"kernel32\")]\n     extern \"system\" {\n-        // Functions forbidden when targeting UWP\n-        pub fn ReadConsoleW(\n-            hConsoleInput: HANDLE,\n-            lpBuffer: LPVOID,\n-            nNumberOfCharsToRead: DWORD,\n-            lpNumberOfCharsRead: LPDWORD,\n-            pInputControl: PCONSOLE_READCONSOLE_CONTROL,\n-        ) -> BOOL;\n-\n-        pub fn WriteConsoleW(\n-            hConsoleOutput: HANDLE,\n-            lpBuffer: LPCVOID,\n-            nNumberOfCharsToWrite: DWORD,\n-            lpNumberOfCharsWritten: LPDWORD,\n-            lpReserved: LPVOID,\n-        ) -> BOOL;\n-\n-        pub fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n         // Allowed but unused by UWP\n         pub fn GetFileInformationByHandle(\n             hFile: HANDLE,\n@@ -914,6 +895,22 @@ if #[cfg(target_vendor = \"uwp\")] {\n extern \"system\" {\n     pub fn GetCurrentProcessId() -> DWORD;\n \n+    pub fn ReadConsoleW(\n+        hConsoleInput: HANDLE,\n+        lpBuffer: LPVOID,\n+        nNumberOfCharsToRead: DWORD,\n+        lpNumberOfCharsRead: LPDWORD,\n+        pInputControl: PCONSOLE_READCONSOLE_CONTROL,\n+    ) -> BOOL;\n+    pub fn WriteConsoleW(\n+        hConsoleOutput: HANDLE,\n+        lpBuffer: LPCVOID,\n+        nNumberOfCharsToWrite: DWORD,\n+        lpNumberOfCharsWritten: LPDWORD,\n+        lpReserved: LPVOID,\n+    ) -> BOOL;\n+    pub fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n+\n     pub fn GetSystemDirectoryW(lpBuffer: LPWSTR, uSize: UINT) -> UINT;\n     pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn SetFileAttributesW(lpFileName: LPCWSTR, dwFileAttributes: DWORD) -> BOOL;"}, {"sha": "e67411e16860e679cbb83cb2c6a7080f9542a0e5", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=5857c3045a5c51dd9eda81b7132a9bd8da6c1fc3", "patch": "@@ -29,19 +29,17 @@ pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n+pub mod stdio;\n pub mod thread;\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod thread_parker;\n pub mod time;\n cfg_if::cfg_if! {\n     if #[cfg(not(target_vendor = \"uwp\"))] {\n-        pub mod stdio;\n         pub mod stack_overflow;\n     } else {\n-        pub mod stdio_uwp;\n         pub mod stack_overflow_uwp;\n-        pub use self::stdio_uwp as stdio;\n         pub use self::stack_overflow_uwp as stack_overflow;\n     }\n }"}, {"sha": "32550f796ec64d8ba818caf51d00c18100e3041a", "filename": "library/std/src/sys/windows/stdio_uwp.rs", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/0da281b6068a7d889ae89a9bd8991284cc9b7535/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da281b6068a7d889ae89a9bd8991284cc9b7535/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs?ref=0da281b6068a7d889ae89a9bd8991284cc9b7535", "patch": "@@ -1,87 +0,0 @@\n-#![unstable(issue = \"none\", feature = \"windows_stdio\")]\n-\n-use crate::io;\n-use crate::mem::ManuallyDrop;\n-use crate::os::windows::io::FromRawHandle;\n-use crate::sys::c;\n-use crate::sys::handle::Handle;\n-\n-pub struct Stdin {}\n-pub struct Stdout;\n-pub struct Stderr;\n-\n-const MAX_BUFFER_SIZE: usize = 8192;\n-pub const STDIN_BUF_SIZE: usize = MAX_BUFFER_SIZE / 2 * 3;\n-\n-pub fn get_handle(handle_id: c::DWORD) -> io::Result<c::HANDLE> {\n-    let handle = unsafe { c::GetStdHandle(handle_id) };\n-    if handle == c::INVALID_HANDLE_VALUE {\n-        Err(io::Error::last_os_error())\n-    } else if handle.is_null() {\n-        Err(io::Error::from_raw_os_error(c::ERROR_INVALID_HANDLE as i32))\n-    } else {\n-        Ok(handle)\n-    }\n-}\n-\n-fn write(handle_id: c::DWORD, data: &[u8]) -> io::Result<usize> {\n-    let handle = get_handle(handle_id)?;\n-    // SAFETY: The handle returned from `get_handle` must be valid and non-null.\n-    let handle = unsafe { Handle::from_raw_handle(handle) };\n-    ManuallyDrop::new(handle).write(data)\n-}\n-\n-impl Stdin {\n-    pub const fn new() -> Stdin {\n-        Stdin {}\n-    }\n-}\n-\n-impl io::Read for Stdin {\n-    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        let handle = get_handle(c::STD_INPUT_HANDLE)?;\n-        // SAFETY: The handle returned from `get_handle` must be valid and non-null.\n-        let handle = unsafe { Handle::from_raw_handle(handle) };\n-        ManuallyDrop::new(handle).read(buf)\n-    }\n-}\n-\n-impl Stdout {\n-    pub const fn new() -> Stdout {\n-        Stdout\n-    }\n-}\n-\n-impl io::Write for Stdout {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        write(c::STD_OUTPUT_HANDLE, buf)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-impl Stderr {\n-    pub const fn new() -> Stderr {\n-        Stderr\n-    }\n-}\n-\n-impl io::Write for Stderr {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        write(c::STD_ERROR_HANDLE, buf)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(c::ERROR_INVALID_HANDLE as i32)\n-}\n-\n-pub fn panic_output() -> Option<impl io::Write> {\n-    Some(Stderr::new())\n-}"}]}