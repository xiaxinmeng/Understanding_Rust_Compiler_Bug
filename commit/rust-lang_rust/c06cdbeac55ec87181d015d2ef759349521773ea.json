{"sha": "c06cdbeac55ec87181d015d2ef759349521773ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNmNkYmVhYzU1ZWM4NzE4MWQwMTVkMmVmNzU5MzQ5NTIxNzczZWE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-14T05:13:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-19T23:17:02Z"}, "message": "Introduce `LocalInternedString::intern`.\n\n`LocalInternedString::intern(x)` is preferable to\n`Symbol::intern(x).as_str()`, because the former involves one call to\n`with_interner` while the latter involves two.", "tree": {"sha": "7aca56810dc84cec24f397aac620b77a25cc55f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aca56810dc84cec24f397aac620b77a25cc55f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06cdbeac55ec87181d015d2ef759349521773ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06cdbeac55ec87181d015d2ef759349521773ea", "html_url": "https://github.com/rust-lang/rust/commit/c06cdbeac55ec87181d015d2ef759349521773ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06cdbeac55ec87181d015d2ef759349521773ea/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257eaf523f7faabfc9845a238ec3776fc45fcd81", "url": "https://api.github.com/repos/rust-lang/rust/commits/257eaf523f7faabfc9845a238ec3776fc45fcd81", "html_url": "https://github.com/rust-lang/rust/commit/257eaf523f7faabfc9845a238ec3776fc45fcd81"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "7e1e751e856478197de92a2e69dc2e2b86ebcea3", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c06cdbeac55ec87181d015d2ef759349521773ea/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06cdbeac55ec87181d015d2ef759349521773ea/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c06cdbeac55ec87181d015d2ef759349521773ea", "patch": "@@ -828,8 +828,8 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n \n                 // This shouldn't ever be needed, but just in case:\n                 Ok(vec![match trait_ref {\n-                    Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)).as_str(),\n-                    None => Symbol::intern(&format!(\"<{}>\", self_ty)).as_str(),\n+                    Some(trait_ref) => LocalInternedString::intern(&format!(\"{:?}\", trait_ref)),\n+                    None => LocalInternedString::intern(&format!(\"<{}>\", self_ty)),\n                 }])\n             }\n \n@@ -845,9 +845,10 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n                 // This shouldn't ever be needed, but just in case:\n                 path.push(match trait_ref {\n                     Some(trait_ref) => {\n-                        Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref, self_ty)).as_str()\n+                        LocalInternedString::intern(&format!(\"<impl {} for {}>\", trait_ref,\n+                                                    self_ty))\n                     },\n-                    None => Symbol::intern(&format!(\"<impl {}>\", self_ty)).as_str(),\n+                    None => LocalInternedString::intern(&format!(\"<impl {}>\", self_ty)),\n                 });\n \n                 Ok(path)"}, {"sha": "9ae0e26196d94fb142ef516b6a2942fca28c5cb9", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c06cdbeac55ec87181d015d2ef759349521773ea/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06cdbeac55ec87181d015d2ef759349521773ea/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c06cdbeac55ec87181d015d2ef759349521773ea", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use syntax::ast::{self, FloatTy};\n-use syntax::symbol::Symbol;\n+use syntax::symbol::LocalInternedString;\n \n use rustc_codegen_ssa::traits::*;\n \n@@ -213,7 +213,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n             \"type_name\" => {\n                 let tp_ty = substs.type_at(0);\n-                let ty_name = Symbol::intern(&tp_ty.to_string()).as_str();\n+                let ty_name = LocalInternedString::intern(&tp_ty.to_string());\n                 self.const_str_slice(ty_name)\n             }\n             \"type_id\" => {"}, {"sha": "c7dd019fc3eb8abb464c0bcca87e15059a312c76", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c06cdbeac55ec87181d015d2ef759349521773ea/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06cdbeac55ec87181d015d2ef759349521773ea/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=c06cdbeac55ec87181d015d2ef759349521773ea", "patch": "@@ -15,7 +15,7 @@ use crate::traits::*;\n \n use std::borrow::Cow;\n \n-use syntax::symbol::Symbol;\n+use syntax::symbol::LocalInternedString;\n use syntax_pos::Pos;\n \n use super::{FunctionCx, LocalRef};\n@@ -401,7 +401,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Get the location information.\n         let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-        let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n+        let filename = LocalInternedString::intern(&loc.file.name.to_string());\n         let line = bx.const_u32(loc.line as u32);\n         let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n@@ -423,7 +423,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n             _ => {\n                 let str = msg.description();\n-                let msg_str = Symbol::intern(str).as_str();\n+                let msg_str = LocalInternedString::intern(str);\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,\n@@ -535,15 +535,15 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let layout = bx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n                 let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n+                let filename = LocalInternedString::intern(&loc.file.name.to_string());\n                 let line = bx.const_u32(loc.line as u32);\n                 let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n                 let str = format!(\n                     \"Attempted to instantiate uninhabited type {}\",\n                     ty\n                 );\n-                let msg_str = Symbol::intern(&str).as_str();\n+                let msg_str = LocalInternedString::intern(&str);\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,"}, {"sha": "043238789345573815402095d925f87230266f7f", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c06cdbeac55ec87181d015d2ef759349521773ea/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06cdbeac55ec87181d015d2ef759349521773ea/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c06cdbeac55ec87181d015d2ef759349521773ea", "patch": "@@ -1029,6 +1029,17 @@ pub struct LocalInternedString {\n }\n \n impl LocalInternedString {\n+    /// Maps a string to its interned representation.\n+    pub fn intern(string: &str) -> Self {\n+        let string = with_interner(|interner| {\n+            let symbol = interner.intern(string);\n+            interner.strings[symbol.0.as_usize()]\n+        });\n+        LocalInternedString {\n+            string: unsafe { std::mem::transmute::<&str, &str>(string) }\n+        }\n+    }\n+\n     pub fn as_interned_str(self) -> InternedString {\n         InternedString {\n             symbol: Symbol::intern(self.string)\n@@ -1105,7 +1116,7 @@ impl fmt::Display for LocalInternedString {\n \n impl Decodable for LocalInternedString {\n     fn decode<D: Decoder>(d: &mut D) -> Result<LocalInternedString, D::Error> {\n-        Ok(Symbol::intern(&d.read_str()?).as_str())\n+        Ok(LocalInternedString::intern(&d.read_str()?))\n     }\n }\n "}]}