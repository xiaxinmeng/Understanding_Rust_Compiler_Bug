{"sha": "1d2b20ee2c4b6a0f71a4c2f85e4b10157d616c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMmIyMGVlMmM0YjZhMGY3MWE0YzJmODVlNGIxMDE1N2Q2MTZjMGY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-19T21:58:04Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-23T21:54:24Z"}, "message": "Check existential type contents against destination trait bounds.", "tree": {"sha": "e535a1151e25128882bd5b68ce8759748b5b3a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e535a1151e25128882bd5b68ce8759748b5b3a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d2b20ee2c4b6a0f71a4c2f85e4b10157d616c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2b20ee2c4b6a0f71a4c2f85e4b10157d616c0f", "html_url": "https://github.com/rust-lang/rust/commit/1d2b20ee2c4b6a0f71a4c2f85e4b10157d616c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d2b20ee2c4b6a0f71a4c2f85e4b10157d616c0f/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "html_url": "https://github.com/rust-lang/rust/commit/1ffcc6fc82caae4e6d17f1156c815998a0b5e080"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "7f7a81fa974a6bb69cc4b797acb4d1be0db1dd60", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1d2b20ee2c4b6a0f71a4c2f85e4b10157d616c0f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2b20ee2c4b6a0f71a4c2f85e4b10157d616c0f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=1d2b20ee2c4b6a0f71a4c2f85e4b10157d616c0f", "patch": "@@ -291,7 +291,13 @@ pub fn check_expr(e: @expr, (cx, v): (Context, visit::vt<Context>)) {\n     match e.node {\n         expr_cast(source, _) => {\n             check_cast_for_escaping_regions(cx, source, e);\n-            check_kind_bounds_of_cast(cx, source, e);\n+            match ty::get(ty::expr_ty(cx.tcx, e)).sty {\n+                ty::ty_trait(_, _, store, _, bounds) => {\n+                    let source_ty = ty::expr_ty(cx.tcx, source);\n+                    check_trait_cast_bounds(cx, e.span, source_ty, bounds, store)\n+                }\n+                _ => { }\n+            }\n         }\n         expr_copy(expr) => {\n             // Note: This is the only place where we must check whether the\n@@ -335,8 +341,9 @@ fn check_ty(aty: @Ty, (cx, v): (Context, visit::vt<Context>)) {\n     visit::visit_ty(aty, (cx, v));\n }\n \n-pub fn check_builtin_bounds(cx: Context, ty: ty::t, bounds: ty::BuiltinBounds)\n-                           -> ty::BuiltinBounds // returns the missing bounds\n+// Calls \"any_missing\" if any bounds were missing.\n+pub fn check_builtin_bounds(cx: Context, ty: ty::t, bounds: ty::BuiltinBounds,\n+                            any_missing: &fn(ty::BuiltinBounds))\n {\n     let kind = ty::type_contents(cx.tcx, ty);\n     let mut missing = ty::EmptyBuiltinBounds();\n@@ -345,7 +352,9 @@ pub fn check_builtin_bounds(cx: Context, ty: ty::t, bounds: ty::BuiltinBounds)\n             missing.add(bound);\n         }\n     }\n-    missing\n+    if !missing.is_empty() {\n+        any_missing(missing);\n+    }\n }\n \n pub fn check_typaram_bounds(cx: Context,\n@@ -354,8 +363,7 @@ pub fn check_typaram_bounds(cx: Context,\n                     ty: ty::t,\n                     type_param_def: &ty::TypeParameterDef)\n {\n-    let missing = check_builtin_bounds(cx, ty, type_param_def.bounds.builtin_bounds);\n-    if !missing.is_empty() {\n+    do check_builtin_bounds(cx, ty, type_param_def.bounds.builtin_bounds) |missing| {\n         cx.tcx.sess.span_err(\n             sp,\n             fmt!(\"instantiating a type parameter with an incompatible type \\\n@@ -368,8 +376,7 @@ pub fn check_typaram_bounds(cx: Context,\n pub fn check_freevar_bounds(cx: Context, sp: span, ty: ty::t,\n                             bounds: ty::BuiltinBounds)\n {\n-    let missing = check_builtin_bounds(cx, ty, bounds);\n-    if !missing.is_empty() {\n+    do check_builtin_bounds(cx, ty, bounds) |missing| {\n         cx.tcx.sess.span_err(\n             sp,\n             fmt!(\"cannot capture variable of type `%s`, which does not fulfill \\\n@@ -382,6 +389,22 @@ pub fn check_freevar_bounds(cx: Context, sp: span, ty: ty::t,\n     }\n }\n \n+pub fn check_trait_cast_bounds(cx: Context, sp: span, ty: ty::t,\n+                               bounds: ty::BuiltinBounds, store: ty::TraitStore) {\n+    do check_builtin_bounds(cx, ty, bounds) |missing| {\n+        cx.tcx.sess.span_err(sp,\n+            fmt!(\"cannot pack type `%s`, which does not fulfill \\\n+                  `%s`, as a trait bounded by %s\",\n+                 ty_to_str(cx.tcx, ty), missing.user_string(cx.tcx),\n+                 bounds.user_string(cx.tcx)));\n+    }\n+    // FIXME(#3569): Remove this check when the corresponding restriction\n+    // is made with type contents.\n+    if store == ty::UniqTraitStore && !ty::type_is_owned(cx.tcx, ty) {\n+        cx.tcx.sess.span_err(sp, \"uniquely-owned trait objects must be sendable\");\n+    }\n+}\n+\n fn is_nullary_variant(cx: Context, ex: @expr) -> bool {\n     match ex.node {\n       expr_path(_) => {\n@@ -564,20 +587,3 @@ pub fn check_cast_for_escaping_regions(\n         cx.tcx.region_maps.is_subregion_of(r_sub, r_sup)\n     }\n }\n-\n-/// Ensures that values placed into a ~Trait are copyable and sendable.\n-pub fn check_kind_bounds_of_cast(cx: Context, source: @expr, target: @expr) {\n-    let target_ty = ty::expr_ty(cx.tcx, target);\n-    match ty::get(target_ty).sty {\n-        // FIXME(#3569) kind check bounds here\n-        ty::ty_trait(_, _, ty::UniqTraitStore, _, _bounds) => {\n-            let source_ty = ty::expr_ty(cx.tcx, source);\n-            if !ty::type_is_owned(cx.tcx, source_ty) {\n-                cx.tcx.sess.span_err(\n-                    target.span,\n-                    \"uniquely-owned trait objects must be sendable\");\n-            }\n-        }\n-        _ => {} // Nothing to do.\n-    }\n-}"}]}