{"sha": "171d8a3f57b00ff9d213c74729c5ff228b016c8c", "node_id": "C_kwDOAAsO6NoAKDE3MWQ4YTNmNTdiMDBmZjlkMjEzYzc0NzI5YzVmZjIyOGIwMTZjOGM", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-07-08T15:15:43Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-08-12T08:53:08Z"}, "message": "[debuginfo] Don't mark fields and types as artificial in CPP-like enum debuginfo encoding.\n\nLLDB historically has had problems with \"artificial\" entries and there\nis no real benefit to emitting that flag.", "tree": {"sha": "8da59deca67eb5f0e49332b48cc756290df84584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da59deca67eb5f0e49332b48cc756290df84584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/171d8a3f57b00ff9d213c74729c5ff228b016c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/171d8a3f57b00ff9d213c74729c5ff228b016c8c", "html_url": "https://github.com/rust-lang/rust/commit/171d8a3f57b00ff9d213c74729c5ff228b016c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/171d8a3f57b00ff9d213c74729c5ff228b016c8c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8433e2a66fad920e1312c02dc4395ceed98a2705", "url": "https://api.github.com/repos/rust-lang/rust/commits/8433e2a66fad920e1312c02dc4395ceed98a2705", "html_url": "https://github.com/rust-lang/rust/commit/8433e2a66fad920e1312c02dc4395ceed98a2705"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "410cfbc2de8ca1a1db22b44513d5fa217fa3b322", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/171d8a3f57b00ff9d213c74729c5ff228b016c8c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171d8a3f57b00ff9d213c74729c5ff228b016c8c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=171d8a3f57b00ff9d213c74729c5ff228b016c8c", "patch": "@@ -119,7 +119,7 @@ const SINGLE_VARIANT_VIRTUAL_DISR: u64 = 0;\n ///\n /// The following pseudocode shows how to decode an enum value in a debugger:\n ///\n-/// ```ignore\n+/// ```text\n ///\n /// fn find_active_variant(enum_value) -> (VariantName, VariantValue) {\n ///     let is_128_bit = enum_value.has_field(\"tag128_lo\");\n@@ -365,7 +365,7 @@ fn build_single_variant_union_fields<'ll, 'tcx>(\n                 unknown_file_metadata(cx),\n                 UNKNOWN_LINE_NUMBER,\n                 variant_names_type_di_node,\n-                DIFlags::FlagArtificial,\n+                DIFlags::FlagZero,\n                 Some(cx.const_u64(SINGLE_VARIANT_VIRTUAL_DISR)),\n                 tag_base_type_align.bits() as u32,\n             )\n@@ -482,7 +482,7 @@ fn build_variant_struct_wrapper_type_di_node<'ll, 'tcx>(\n             // NOTE: We use size and align of enum_type, not from variant_layout:\n             size_and_align_of(enum_or_generator_type_and_layout),\n             Some(enum_or_generator_type_di_node),\n-            DIFlags::FlagArtificial,\n+            DIFlags::FlagZero,\n         ),\n         |cx, wrapper_struct_type_di_node| {\n             enum DiscrKind {\n@@ -526,7 +526,7 @@ fn build_variant_struct_wrapper_type_di_node<'ll, 'tcx>(\n                 \"value\",\n                 size_and_align_of(enum_or_generator_type_and_layout),\n                 Size::ZERO,\n-                DIFlags::FlagArtificial,\n+                DIFlags::FlagZero,\n                 variant_struct_type_di_node,\n             ));\n \n@@ -540,7 +540,7 @@ fn build_variant_struct_wrapper_type_di_node<'ll, 'tcx>(\n                         unknown_file_metadata(cx),\n                         UNKNOWN_LINE_NUMBER,\n                         type_di_node,\n-                        DIFlags::FlagArtificial,\n+                        DIFlags::FlagZero,\n                         Some(cx.const_u64(value)),\n                         align.bits() as u32,\n                     )"}]}