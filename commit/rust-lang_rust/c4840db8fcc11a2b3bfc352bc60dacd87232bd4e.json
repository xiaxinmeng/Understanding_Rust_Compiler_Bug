{"sha": "c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODQwZGI4ZmNjMTFhMmIzYmZjMzUyYmM2MGRhY2Q4NzIzMmJkNGU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-06T09:52:02Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-20T08:43:16Z"}, "message": "skol -> placeholder", "tree": {"sha": "108781b46b122f00a50d169762b4f42a3af641c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108781b46b122f00a50d169762b4f42a3af641c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "html_url": "https://github.com/rust-lang/rust/commit/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "42a6a6ff40afd9986dd96eadedbc8f2b9cd61ad5", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "patch": "@@ -290,7 +290,7 @@ pub(crate) enum UndoLog<'tcx> {\n     /// We added a GLB/LUB \"combination variable\".\n     AddCombination(CombineMapType, TwoRegions<'tcx>),\n \n-    /// During skolemization, we sometimes purge entries from the undo\n+    /// During freshening, we sometimes purge entries from the undo\n     /// log in a kind of minisnapshot (unlike other snapshots, this\n     /// purging actually takes place *on success*). In that case, we\n     /// replace the corresponding entry with `Noop` so as to avoid the\n@@ -489,7 +489,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     /// Removes all the edges to/from the placeholder regions that are\n-    /// in `skols`. This is used after a higher-ranked operation\n+    /// in `placeholders`. This is used after a higher-ranked operation\n     /// completes to remove all trace of the placeholder regions\n     /// created in that time.\n     pub fn pop_placeholders(&mut self, placeholders: &FxHashSet<ty::Region<'tcx>>) {"}, {"sha": "c3b1079fb1284248d7129d4cb3cc3211f3515e31", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "patch": "@@ -1754,38 +1754,37 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Vec<PredicateObligation<'tcx>> {\n         // Because the types were potentially derived from\n         // higher-ranked obligations they may reference late-bound\n-        // regions. For example, `for<'a> Foo<&'a int> : Copy` would\n-        // yield a type like `for<'a> &'a int`. In general, we\n+        // regions. For example, `for<'a> Foo<&'a i32> : Copy` would\n+        // yield a type like `for<'a> &'a i32`. In general, we\n         // maintain the invariant that we never manipulate bound\n         // regions, so we have to process these bound regions somehow.\n         //\n         // The strategy is to:\n         //\n         // 1. Instantiate those regions to placeholder regions (e.g.,\n-        //    `for<'a> &'a int` becomes `&0 int`.\n-        // 2. Produce something like `&'0 int : Copy`\n-        // 3. Re-bind the regions back to `for<'a> &'a int : Copy`\n+        //    `for<'a> &'a int` becomes `&0 i32`.\n+        // 2. Produce something like `&'0 i32 : Copy`\n+        // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`\n \n         types\n-            .skip_binder()\n+            .skip_binder() // binder moved -\\\n             .iter()\n             .flat_map(|ty| {\n-                // binder moved -\\\n                 let ty: ty::Binder<Ty<'tcx>> = ty::Binder::bind(ty); // <----/\n \n                 self.infcx.commit_unconditionally(|_| {\n-                    let (skol_ty, _) = self.infcx.replace_bound_vars_with_placeholders(&ty);\n+                    let (placeholder_ty, _) = self.infcx.replace_bound_vars_with_placeholders(&ty);\n                     let Normalized { value: normalized_ty, mut obligations } =\n                         ensure_sufficient_stack(|| {\n                             project::normalize_with_depth(\n                                 self,\n                                 param_env,\n                                 cause.clone(),\n                                 recursion_depth,\n-                                &skol_ty,\n+                                &placeholder_ty,\n                             )\n                         });\n-                    let skol_obligation = predicate_for_trait_def(\n+                    let placeholder_obligation = predicate_for_trait_def(\n                         self.tcx(),\n                         param_env,\n                         cause.clone(),\n@@ -1794,7 +1793,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         normalized_ty,\n                         &[],\n                     );\n-                    obligations.push(skol_obligation);\n+                    obligations.push(placeholder_obligation);\n                     obligations\n                 })\n             })\n@@ -1844,9 +1843,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Err(());\n         }\n \n-        let (skol_obligation, placeholder_map) =\n+        let (placeholder_obligation, placeholder_map) =\n             self.infcx().replace_bound_vars_with_placeholders(&obligation.predicate);\n-        let skol_obligation_trait_ref = skol_obligation.trait_ref;\n+        let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;\n \n         let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);\n \n@@ -1865,14 +1864,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(\n             \"match_impl(impl_def_id={:?}, obligation={:?}, \\\n-             impl_trait_ref={:?}, skol_obligation_trait_ref={:?})\",\n-            impl_def_id, obligation, impl_trait_ref, skol_obligation_trait_ref\n+             impl_trait_ref={:?}, placeholder_obligation_trait_ref={:?})\",\n+            impl_def_id, obligation, impl_trait_ref, placeholder_obligation_trait_ref\n         );\n \n         let InferOk { obligations, .. } = self\n             .infcx\n             .at(&obligation.cause, obligation.param_env)\n-            .eq(skol_obligation_trait_ref, impl_trait_ref)\n+            .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n             .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n         nested_obligations.extend(obligations);\n "}, {"sha": "42901102c10760d0c92f077221501c04e9cb0e3f", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "patch": "@@ -130,7 +130,7 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n \n     // We determine whether there's a subset relationship by:\n     //\n-    // - skolemizing impl1,\n+    // - replacing bound vars with placeholders in impl1,\n     // - assuming the where clauses for impl1,\n     // - instantiating impl2 with fresh inference variables,\n     // - unifying,"}, {"sha": "1d47e64630c18f9dcee66084bc60e10fd0dfe282", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4840db8fcc11a2b3bfc352bc60dacd87232bd4e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=c4840db8fcc11a2b3bfc352bc60dacd87232bd4e", "patch": "@@ -91,14 +91,14 @@ fn compare_predicate_entailment<'tcx>(\n \n     // This code is best explained by example. Consider a trait:\n     //\n-    //     trait Trait<'t,T> {\n-    //          fn method<'a,M>(t: &'t T, m: &'a M) -> Self;\n+    //     trait Trait<'t, T> {\n+    //         fn method<'a, M>(t: &'t T, m: &'a M) -> Self;\n     //     }\n     //\n     // And an impl:\n     //\n     //     impl<'i, 'j, U> Trait<'j, &'i U> for Foo {\n-    //          fn method<'b,N>(t: &'j &'i U, m: &'b N) -> Foo;\n+    //          fn method<'b, N>(t: &'j &'i U, m: &'b N) -> Foo;\n     //     }\n     //\n     // We wish to decide if those two method types are compatible.\n@@ -116,9 +116,9 @@ fn compare_predicate_entailment<'tcx>(\n     // regions (Note: but only early-bound regions, i.e., those\n     // declared on the impl or used in type parameter bounds).\n     //\n-    //     impl_to_skol_substs = {'i => 'i0, U => U0, N => N0 }\n+    //     impl_to_placeholder_substs = {'i => 'i0, U => U0, N => N0 }\n     //\n-    // Now we can apply skol_substs to the type of the impl method\n+    // Now we can apply placeholder_substs to the type of the impl method\n     // to yield a new function type in terms of our fresh, placeholder\n     // types:\n     //\n@@ -127,11 +127,11 @@ fn compare_predicate_entailment<'tcx>(\n     // We now want to extract and substitute the type of the *trait*\n     // method and compare it. To do so, we must create a compound\n     // substitution by combining trait_to_impl_substs and\n-    // impl_to_skol_substs, and also adding a mapping for the method\n+    // impl_to_placeholder_substs, and also adding a mapping for the method\n     // type parameters. We extend the mapping to also include\n     // the method parameters.\n     //\n-    //     trait_to_skol_substs = { T => &'i0 U0, Self => Foo, M => N0 }\n+    //     trait_to_placeholder_substs = { T => &'i0 U0, Self => Foo, M => N0 }\n     //\n     // Applying this to the trait method type yields:\n     //\n@@ -145,20 +145,20 @@ fn compare_predicate_entailment<'tcx>(\n     // satisfied by the implementation's method.\n     //\n     // We do this by creating a parameter environment which contains a\n-    // substitution corresponding to impl_to_skol_substs. We then build\n-    // trait_to_skol_substs and use it to convert the predicates contained\n+    // substitution corresponding to impl_to_placeholder_substs. We then build\n+    // trait_to_placeholder_substs and use it to convert the predicates contained\n     // in the trait_m.generics to the placeholder form.\n     //\n     // Finally we register each of these predicates as an obligation in\n     // a fresh FulfillmentCtxt, and invoke select_all_or_error.\n \n     // Create mapping from impl to placeholder.\n-    let impl_to_skol_substs = InternalSubsts::identity_for_item(tcx, impl_m.def_id);\n+    let impl_to_placeholder_substs = InternalSubsts::identity_for_item(tcx, impl_m.def_id);\n \n     // Create mapping from trait to placeholder.\n-    let trait_to_skol_substs =\n-        impl_to_skol_substs.rebase_onto(tcx, impl_m.container.id(), trait_to_impl_substs);\n-    debug!(\"compare_impl_method: trait_to_skol_substs={:?}\", trait_to_skol_substs);\n+    let trait_to_placeholder_substs =\n+        impl_to_placeholder_substs.rebase_onto(tcx, impl_m.container.id(), trait_to_impl_substs);\n+    debug!(\"compare_impl_method: trait_to_placeholder_substs={:?}\", trait_to_placeholder_substs);\n \n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n@@ -194,7 +194,7 @@ fn compare_predicate_entailment<'tcx>(\n     // if all constraints hold.\n     hybrid_preds\n         .predicates\n-        .extend(trait_m_predicates.instantiate_own(tcx, trait_to_skol_substs).predicates);\n+        .extend(trait_m_predicates.instantiate_own(tcx, trait_to_placeholder_substs).predicates);\n \n     // Construct trait parameter environment and then shift it into the placeholder viewpoint.\n     // The key step here is to update the caller_bounds's predicates to be\n@@ -220,7 +220,7 @@ fn compare_predicate_entailment<'tcx>(\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n-        let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_skol_substs);\n+        let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n         let (impl_m_own_bounds, _) = infcx.replace_bound_vars_with_fresh_vars(\n             impl_m_span,\n             infer::HigherRankedType,\n@@ -261,7 +261,7 @@ fn compare_predicate_entailment<'tcx>(\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, &tcx.fn_sig(trait_m.def_id));\n-        let trait_sig = trait_sig.subst(tcx, trait_to_skol_substs);\n+        let trait_sig = trait_sig.subst(tcx, trait_to_placeholder_substs);\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, &trait_sig);\n         let trait_fty = tcx.mk_fn_ptr(ty::Binder::bind(trait_sig));"}]}