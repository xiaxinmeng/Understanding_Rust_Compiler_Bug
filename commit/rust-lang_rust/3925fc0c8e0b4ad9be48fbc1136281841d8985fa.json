{"sha": "3925fc0c8e0b4ad9be48fbc1136281841d8985fa", "node_id": "C_kwDOAAsO6NoAKDM5MjVmYzBjOGUwYjRhZDliZTQ4ZmJjMTEzNjI4MTg0MWQ4OTg1ZmE", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-07T23:13:26Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-07T23:13:26Z"}, "message": "document and improve array Guard type\n\nThe type is unsafe and now exposed to the whole crate.\nDocument it properly and add an unsafe method so the\ncaller can make it visible that something unsafe is happening.", "tree": {"sha": "44d3c16724c253a218fde8a9fe9b568a03df7d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d3c16724c253a218fde8a9fe9b568a03df7d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3925fc0c8e0b4ad9be48fbc1136281841d8985fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3925fc0c8e0b4ad9be48fbc1136281841d8985fa", "html_url": "https://github.com/rust-lang/rust/commit/3925fc0c8e0b4ad9be48fbc1136281841d8985fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3925fc0c8e0b4ad9be48fbc1136281841d8985fa/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c353fff73a1ee38d0ec29042e42bdeea05c191", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c353fff73a1ee38d0ec29042e42bdeea05c191", "html_url": "https://github.com/rust-lang/rust/commit/43c353fff73a1ee38d0ec29042e42bdeea05c191"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "2090756d7a3ec82252be10dc39e91d16cdff1234", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3925fc0c8e0b4ad9be48fbc1136281841d8985fa/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3925fc0c8e0b4ad9be48fbc1136281841d8985fa/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=3925fc0c8e0b4ad9be48fbc1136281841d8985fa", "patch": "@@ -878,13 +878,11 @@ where\n                     ControlFlow::Continue(elem) => elem,\n                 };\n \n-                // SAFETY: `guard.initialized` starts at 0, is increased by one in the\n-                // loop and the loop is aborted once it reaches N (which is\n-                // `array.len()`).\n+                // SAFETY: `guard.initialized` starts at 0, which means push can be called\n+                // at most N times, which this loop does.\n                 unsafe {\n-                    guard.array_mut.get_unchecked_mut(guard.initialized).write(item);\n+                    guard.push_unchecked(item);\n                 }\n-                guard.initialized += 1;\n             }\n             None => {\n                 let alive = 0..guard.initialized;\n@@ -902,11 +900,42 @@ where\n     Ok(Try::from_output(output))\n }\n \n+/// Panic guard for incremental initialization of arrays.\n+///\n+/// Disarm the guard with `mem::forget` once the array has been initialized.\n+///\n+/// # Safety\n+///\n+/// All write accesses to this structure are unsafe and must maintain a correct\n+/// count of `initialized` elements.\n+///\n+/// To minimize indirection fields are still pub but callers should at least use\n+/// `push_unchecked` to signal that something unsafe is going on.\n pub(crate) struct Guard<'a, T, const N: usize> {\n+    /// The array to be initialized.\n     pub array_mut: &'a mut [MaybeUninit<T>; N],\n+    /// The number of items that have been initialized so far.\n     pub initialized: usize,\n }\n \n+impl<T, const N: usize> Guard<'_, T, N> {\n+    /// Adds an item to the array and updates the initialized item counter.\n+    ///\n+    /// # Safety\n+    ///\n+    /// No more than N elements must be initialized.\n+    #[inline]\n+    pub unsafe fn push_unchecked(&mut self, item: T) {\n+        // SAFETY: If `initialized` was correct before and the caller does not\n+        // invoke this method more than N times then writes will be in-bounds\n+        // and slots will not be initialized more than once.\n+        unsafe {\n+            self.array_mut.get_unchecked_mut(self.initialized).write(item);\n+            self.initialized = self.initialized.unchecked_add(1);\n+        }\n+    }\n+}\n+\n impl<T, const N: usize> Drop for Guard<'_, T, N> {\n     fn drop(&mut self) {\n         debug_assert!(self.initialized <= N);"}, {"sha": "5e4211058aa6f2b8bcd0182ef18fc340f54c771d", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3925fc0c8e0b4ad9be48fbc1136281841d8985fa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3925fc0c8e0b4ad9be48fbc1136281841d8985fa/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=3925fc0c8e0b4ad9be48fbc1136281841d8985fa", "patch": "@@ -216,11 +216,13 @@ where\n         while inner_len - i >= N {\n             let mut chunk = MaybeUninit::uninit_array();\n             let mut guard = array::Guard { array_mut: &mut chunk, initialized: 0 };\n-            for j in 0..N {\n+            while guard.initialized < N {\n                 // SAFETY: The method consumes the iterator and the loop condition ensures that\n                 // all accesses are in bounds and only happen once.\n-                guard.array_mut[j].write(unsafe { self.iter.__iterator_get_unchecked(i + j) });\n-                guard.initialized = j + 1;\n+                unsafe {\n+                    let idx = i + guard.initialized;\n+                    guard.push_unchecked(self.iter.__iterator_get_unchecked(idx));\n+                }\n             }\n             mem::forget(guard);\n             // SAFETY: The loop above initialized all elements"}]}