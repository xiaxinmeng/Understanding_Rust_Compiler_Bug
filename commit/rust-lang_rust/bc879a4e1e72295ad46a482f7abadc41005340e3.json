{"sha": "bc879a4e1e72295ad46a482f7abadc41005340e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjODc5YTRlMWU3MjI5NWFkNDZhNDgyZjdhYmFkYzQxMDA1MzQwZTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-07T01:56:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T18:44:47Z"}, "message": "rustc: Replace our homebrew list of passes with the standard function and module passes, along with the TargetData passes.", "tree": {"sha": "3ff0f6136012e2953bc9993bb60d822ab9a73e3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff0f6136012e2953bc9993bb60d822ab9a73e3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc879a4e1e72295ad46a482f7abadc41005340e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc879a4e1e72295ad46a482f7abadc41005340e3", "html_url": "https://github.com/rust-lang/rust/commit/bc879a4e1e72295ad46a482f7abadc41005340e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc879a4e1e72295ad46a482f7abadc41005340e3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d97c5d97de5858cd287f4e45d9ba257ad97cfe03", "url": "https://api.github.com/repos/rust-lang/rust/commits/d97c5d97de5858cd287f4e45d9ba257ad97cfe03", "html_url": "https://github.com/rust-lang/rust/commit/d97c5d97de5858cd287f4e45d9ba257ad97cfe03"}], "stats": {"total": 72, "additions": 21, "deletions": 51}, "files": [{"sha": "15be6dc88de7fa5b557e643a8e3b717285cb192a", "filename": "src/comp/back/Link.rs", "status": "modified", "additions": 16, "deletions": 50, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bc879a4e1e72295ad46a482f7abadc41005340e3/src%2Fcomp%2Fback%2FLink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc879a4e1e72295ad46a482f7abadc41005340e3/src%2Fcomp%2Fback%2FLink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2FLink.rs?ref=bc879a4e1e72295ad46a482f7abadc41005340e3", "patch": "@@ -10,6 +10,7 @@ import lib.llvm.mk_pass_manager;\n import lib.llvm.mk_target_data;\n import lib.llvm.mk_type_names;\n import lib.llvm.False;\n+import lib.llvm.True;\n \n tag output_type {\n     output_type_none;\n@@ -79,6 +80,9 @@ mod Write {\n         auto pm = mk_pass_manager();\n         auto opts = sess.get_opts();\n \n+        auto td = mk_target_data(x86.get_data_layout());\n+        llvm.LLVMAddTargetData(td.lltd, pm.llpm);\n+\n         // TODO: run the linter here also, once there are llvm-c bindings for\n         // it.\n \n@@ -109,58 +113,20 @@ mod Write {\n         // tool?\n         if (opts.optimize) {\n             auto fpm = mk_pass_manager();\n-\n-            // createStandardFunctionPasses\n-            llvm.LLVMAddTypeBasedAliasAnalysisPass(fpm.llpm);\n-            llvm.LLVMAddBasicAliasAnalysisPass(fpm.llpm);\n-            llvm.LLVMAddCFGSimplificationPass(fpm.llpm);\n-            llvm.LLVMAddScalarReplAggregatesPass(fpm.llpm);\n-            llvm.LLVMAddEarlyCSEPass(fpm.llpm);\n-\n+            llvm.LLVMAddTargetData(td.lltd, fpm.llpm);\n+            llvm.LLVMAddStandardFunctionPasses(fpm.llpm, 2u);\n             llvm.LLVMRunPassManager(fpm.llpm, llmod);\n \n-            // createStandardModulePasses\n-            llvm.LLVMAddTypeBasedAliasAnalysisPass(pm.llpm);\n-            llvm.LLVMAddBasicAliasAnalysisPass(pm.llpm);\n-            llvm.LLVMAddGlobalOptimizerPass(pm.llpm);\n-            llvm.LLVMAddIPSCCPPass(pm.llpm);\n-            llvm.LLVMAddDeadArgEliminationPass(pm.llpm);\n-            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-            llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n-            llvm.LLVMAddPruneEHPass(pm.llpm);\n-            llvm.LLVMAddFunctionInliningPass(pm.llpm);\n-            llvm.LLVMAddFunctionAttrsPass(pm.llpm);\n-            llvm.LLVMAddScalarReplAggregatesPassSSA(pm.llpm);\n-            llvm.LLVMAddEarlyCSEPass(pm.llpm);\n-            llvm.LLVMAddSimplifyLibCallsPass(pm.llpm);\n-            llvm.LLVMAddJumpThreadingPass(pm.llpm);\n-            llvm.LLVMAddCorrelatedValuePropagationPass(pm.llpm);\n-            llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n-            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-            llvm.LLVMAddTailCallEliminationPass(pm.llpm);\n-            llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n-            llvm.LLVMAddReassociatePass(pm.llpm);\n-            llvm.LLVMAddLoopRotatePass(pm.llpm);\n-            llvm.LLVMAddLICMPass(pm.llpm);\n-            llvm.LLVMAddLoopUnswitchPass(pm.llpm);\n-            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-            llvm.LLVMAddIndVarSimplifyPass(pm.llpm);\n-            llvm.LLVMAddLoopIdiomPass(pm.llpm);\n-            llvm.LLVMAddLoopDeletionPass(pm.llpm);\n-            llvm.LLVMAddLoopUnrollPass(pm.llpm);\n-            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-            llvm.LLVMAddGVNPass(pm.llpm);\n-            llvm.LLVMAddMemCpyOptPass(pm.llpm);\n-            llvm.LLVMAddSCCPPass(pm.llpm);\n-            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-            llvm.LLVMAddJumpThreadingPass(pm.llpm);\n-            llvm.LLVMAddCorrelatedValuePropagationPass(pm.llpm);\n-            llvm.LLVMAddDeadStoreEliminationPass(pm.llpm);\n-            llvm.LLVMAddAggressiveDCEPass(pm.llpm);\n-            llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n-            llvm.LLVMAddStripDeadPrototypesPass(pm.llpm);\n-            llvm.LLVMAddDeadTypeEliminationPass(pm.llpm);\n-            llvm.LLVMAddConstantMergePass(pm.llpm);\n+            // TODO: On -O3, use 275 instead of 225 for the inlining\n+            // threshold.\n+            llvm.LLVMAddStandardModulePasses(pm.llpm,\n+                                             2u,    // optimization level\n+                                             False, // optimize for size\n+                                             True,  // unit-at-a-time\n+                                             True,  // unroll loops\n+                                             True,  // simplify lib calls\n+                                             True,  // have exceptions\n+                                             225u); // inlining threshold\n         }\n \n         if (opts.verify) {"}, {"sha": "c4114261797302c04510ff2c03c05cdaa5453665", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc879a4e1e72295ad46a482f7abadc41005340e3/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc879a4e1e72295ad46a482f7abadc41005340e3/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=bc879a4e1e72295ad46a482f7abadc41005340e3", "patch": "@@ -748,6 +748,9 @@ native mod llvm = llvm_lib {\n \n     /** Creates target data from a target layout string. */\n     fn LLVMCreateTargetData(sbuf StringRep) -> TargetDataRef;\n+    /** Adds the target data to the given pass manager. The pass manager\n+        references the target data only weakly. */\n+    fn LLVMAddTargetData(TargetDataRef TD, PassManagerRef PM);\n     /** Returns the size of a type. FIXME: rv is actually a ULongLong! */\n     fn LLVMStoreSizeOfType(TargetDataRef TD, TypeRef Ty) -> uint;\n     /** Returns the alignment of a type. */\n@@ -802,7 +805,8 @@ native mod llvm = llvm_lib {\n     fn LLVMAddTypeBasedAliasAnalysisPass(PassManagerRef PM);\n     fn LLVMAddBasicAliasAnalysisPass(PassManagerRef PM);\n \n-    // FIXME: Native stubs don't allow this many arguments yet.\n+    fn LLVMAddStandardFunctionPasses(PassManagerRef PM,\n+                                     uint OptimizationLevel);\n     fn LLVMAddStandardModulePasses(PassManagerRef PM,\n                                    uint OptimizationLevel,\n                                    Bool OptimizeSize,"}]}