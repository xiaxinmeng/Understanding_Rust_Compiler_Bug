{"sha": "02a943b3fb5966aa326b1ec9986d568ec422c668", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYTk0M2IzZmI1OTY2YWEzMjZiMWVjOTk4NmQ1NjhlYzQyMmM2Njg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-13T12:36:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-13T12:36:52Z"}, "message": "Merge pull request #335 from solson/rustup\n\nRustup", "tree": {"sha": "0f5725bbd118a2bed84b7fc5e29339e8e17ee225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f5725bbd118a2bed84b7fc5e29339e8e17ee225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02a943b3fb5966aa326b1ec9986d568ec422c668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02a943b3fb5966aa326b1ec9986d568ec422c668", "html_url": "https://github.com/rust-lang/rust/commit/02a943b3fb5966aa326b1ec9986d568ec422c668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02a943b3fb5966aa326b1ec9986d568ec422c668/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d3e3b34880232c606ae8fcce4c410e60fb544d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d3e3b34880232c606ae8fcce4c410e60fb544d", "html_url": "https://github.com/rust-lang/rust/commit/d5d3e3b34880232c606ae8fcce4c410e60fb544d"}, {"sha": "2cf984d76ef40d2107e0c2c2a8f815a0d278ceaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf984d76ef40d2107e0c2c2a8f815a0d278ceaa", "html_url": "https://github.com/rust-lang/rust/commit/2cf984d76ef40d2107e0c2c2a8f815a0d278ceaa"}], "stats": {"total": 106, "additions": 56, "deletions": 50}, "files": [{"sha": "5ae7c9da31c09b939878bc8815f5a924df46e9f6", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=02a943b3fb5966aa326b1ec9986d568ec422c668", "patch": "@@ -38,38 +38,45 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         self.cast_from_int(val as u128, ty, val < 0)\n     }\n \n+    fn int_to_int(&self, v: i128, ty: IntTy) -> u128 {\n+        match ty {\n+            IntTy::I8 => v as i8 as u128,\n+            IntTy::I16 => v as i16 as u128,\n+            IntTy::I32 => v as i32 as u128,\n+            IntTy::I64 => v as i64 as u128,\n+            IntTy::I128 => v as u128,\n+            IntTy::Is => {\n+                let ty = self.tcx.sess.target.isize_ty;\n+                self.int_to_int(v, ty)\n+            }\n+        }\n+    }\n+    fn int_to_uint(&self, v: u128, ty: UintTy) -> u128 {\n+        match ty {\n+            UintTy::U8 => v as u8 as u128,\n+            UintTy::U16 => v as u16 as u128,\n+            UintTy::U32 => v as u32 as u128,\n+            UintTy::U64 => v as u64 as u128,\n+            UintTy::U128 => v,\n+            UintTy::Us => {\n+                let ty = self.tcx.sess.target.usize_ty;\n+                self.int_to_uint(v, ty)\n+            }\n+        }\n+    }\n+\n     fn cast_from_int(\n         &self,\n         v: u128,\n         ty: ty::Ty<'tcx>,\n         negative: bool,\n     ) -> EvalResult<'tcx, PrimVal> {\n+        trace!(\"cast_from_int: {}, {}, {}\", v, ty, negative);\n         use rustc::ty::TypeVariants::*;\n         match ty.sty {\n             // Casts to bool are not permitted by rustc, no need to handle them here.\n-            TyInt(IntTy::I8) => Ok(PrimVal::Bytes(v as i128 as i8 as u128)),\n-            TyInt(IntTy::I16) => Ok(PrimVal::Bytes(v as i128 as i16 as u128)),\n-            TyInt(IntTy::I32) => Ok(PrimVal::Bytes(v as i128 as i32 as u128)),\n-            TyInt(IntTy::I64) => Ok(PrimVal::Bytes(v as i128 as i64 as u128)),\n-            TyInt(IntTy::I128) => Ok(PrimVal::Bytes(v as u128)),\n-\n-            TyUint(UintTy::U8) => Ok(PrimVal::Bytes(v as u8 as u128)),\n-            TyUint(UintTy::U16) => Ok(PrimVal::Bytes(v as u16 as u128)),\n-            TyUint(UintTy::U32) => Ok(PrimVal::Bytes(v as u32 as u128)),\n-            TyUint(UintTy::U64) => Ok(PrimVal::Bytes(v as u64 as u128)),\n-            TyUint(UintTy::U128) => Ok(PrimVal::Bytes(v)),\n-\n-            TyInt(IntTy::Is) => {\n-                let int_ty = self.tcx.sess.target.int_type;\n-                let ty = self.tcx.mk_mach_int(int_ty);\n-                self.cast_from_int(v, ty, negative)\n-            }\n-\n-            TyUint(UintTy::Us) => {\n-                let uint_ty = self.tcx.sess.target.uint_type;\n-                let ty = self.tcx.mk_mach_uint(uint_ty);\n-                self.cast_from_int(v, ty, negative)\n-            }\n+            TyInt(ty) => Ok(PrimVal::Bytes(self.int_to_int(v as i128, ty))),\n+            TyUint(ty) => Ok(PrimVal::Bytes(self.int_to_uint(v, ty))),\n \n             TyFloat(FloatTy::F64) if negative => Ok(PrimVal::from_f64(v as i128 as f64)),\n             TyFloat(FloatTy::F64) => Ok(PrimVal::from_f64(v as f64)),"}, {"sha": "c6483ff178333f7ad60f02e1fd52dff1ad9e5627", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=02a943b3fb5966aa326b1ec9986d568ec422c668", "patch": "@@ -92,7 +92,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         TyInt(IntTy::I64) => ConstInt::I64(prim as i128 as i64),\n         TyInt(IntTy::I128) => ConstInt::I128(prim as i128),\n         TyInt(IntTy::Is) => ConstInt::Isize(\n-            ConstIsize::new(prim as i128 as i64, tcx.sess.target.int_type)\n+            ConstIsize::new(prim as i128 as i64, tcx.sess.target.isize_ty)\n                 .expect(\"miri should already have errored\"),\n         ),\n         TyUint(UintTy::U8) => ConstInt::U8(prim as u8),\n@@ -101,7 +101,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         TyUint(UintTy::U64) => ConstInt::U64(prim as u64),\n         TyUint(UintTy::U128) => ConstInt::U128(prim),\n         TyUint(UintTy::Us) => ConstInt::Usize(\n-            ConstUsize::new(prim as u64, tcx.sess.target.uint_type)\n+            ConstUsize::new(prim as u64, tcx.sess.target.usize_ty)\n                 .expect(\"miri should already have errored\"),\n         ),\n         _ => {"}, {"sha": "ea895c35fe5fcd143dd985a5122a01f89d2c5361", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=02a943b3fb5966aa326b1ec9986d568ec422c668", "patch": "@@ -240,17 +240,23 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             Str(ref s) => return self.str_to_value(s),\n \n             ByteStr(ref bs) => {\n-                let ptr = self.memory.allocate_cached(bs)?;\n+                let ptr = self.memory.allocate_cached(bs.data)?;\n                 PrimVal::Ptr(ptr)\n             }\n \n-            Variant(_) => unimplemented!(),\n-            Struct(_) => unimplemented!(),\n-            Tuple(_) => unimplemented!(),\n+            Unevaluated(def_id, substs) => {\n+                let instance = self.resolve_associated_const(def_id, substs);\n+                let cid = GlobalId {\n+                    instance,\n+                    promoted: None,\n+                };\n+                return Ok(Value::ByRef(*self.globals.get(&cid).expect(\"static/const not cached\")));\n+            }\n+\n+            Aggregate(..) |\n+            Variant(_) => bug!(\"should not have aggregate or variant constants in MIR\"),\n             // function items are zero sized and thus have no readable value\n             Function(..) => PrimVal::Undef,\n-            Array(_) => unimplemented!(),\n-            Repeat(_, _) => unimplemented!(),\n         };\n \n         Ok(Value::ByVal(primval))\n@@ -817,7 +823,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n             Repeat(ref operand, _) => {\n                 let (elem_ty, length) = match dest_ty.sty {\n-                    ty::TyArray(elem_ty, n) => (elem_ty, n as u64),\n+                    ty::TyArray(elem_ty, n) => (elem_ty, n.val.to_const_int().unwrap().to_u64().unwrap()),\n                     _ => {\n                         bug!(\n                             \"tried to assign array-repeat to non-array type {:?}\",\n@@ -1288,16 +1294,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 use rustc::mir::Literal;\n                 let mir::Constant { ref literal, .. } = **constant;\n                 let value = match *literal {\n-                    Literal::Value { ref value } => self.const_to_value(value)?,\n-\n-                    Literal::Item { def_id, substs } => {\n-                        let instance = self.resolve_associated_const(def_id, substs);\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None,\n-                        };\n-                        Value::ByRef(*self.globals.get(&cid).expect(\"static/const not cached\"))\n-                    }\n+                    Literal::Value { ref value } => self.const_to_value(&value.val)?,\n \n                     Literal::Promoted { index } => {\n                         let cid = GlobalId {\n@@ -1920,7 +1917,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 let ptr = src.into_ptr(&self.memory)?;\n                 // u64 cast is from usize to u64, which is always good\n                 let valty = ValTy {\n-                    value: ptr.to_value_with_len(length as u64),\n+                    value: ptr.to_value_with_len(length.val.to_const_int().unwrap().to_u64().unwrap() ),\n                     ty: dest_ty,\n                 };\n                 self.write_value(valty, dest)\n@@ -2505,7 +2502,7 @@ struct AssociatedTypeNormalizer<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> AssociatedTypeNormalizer<'a, 'tcx> {\n     fn fold<T: TypeFoldable<'tcx>>(&mut self, value: &T) -> T {\n-        if !value.has_projection_types() {\n+        if !value.has_projections() {\n             value.clone()\n         } else {\n             value.fold_with(self)\n@@ -2519,7 +2516,7 @@ impl<'a, 'tcx> ::rustc::ty::fold::TypeFolder<'tcx, 'tcx> for AssociatedTypeNorma\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if !ty.has_projection_types() {\n+        if !ty.has_projections() {\n             ty\n         } else {\n             self.tcx.normalize_associated_type(&ty)"}, {"sha": "ba0f5fafa747f81d909fd72f4cdf9c83282a40ee", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=02a943b3fb5966aa326b1ec9986d568ec422c668", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> Lvalue {\n \n     pub(super) fn elem_ty_and_len(self, ty: Ty<'tcx>) -> (Ty<'tcx>, u64) {\n         match ty.sty {\n-            ty::TyArray(elem, n) => (elem, n as u64),\n+            ty::TyArray(elem, n) => (elem, n.val.to_const_int().unwrap().to_u64().unwrap() as u64),\n \n             ty::TySlice(elem) => {\n                 match self {\n@@ -266,7 +266,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 let field = field_index as u64;\n                 let elem_size = match base_ty.sty {\n                     ty::TyArray(elem_ty, n) => {\n-                        assert!(field < n as u64);\n+                        assert!(field < n.val.to_const_int().unwrap().to_u64().unwrap() as u64);\n                         self.type_size(elem_ty)?.expect(\"array elements are sized\") as u64\n                     }\n                     _ => {"}, {"sha": "05f1bd10e87e85efac1f516f15896001a9f38c05", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=02a943b3fb5966aa326b1ec9986d568ec422c668", "patch": "@@ -10,6 +10,7 @@ use rustc::traits::Reveal;\n use rustc::ty;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::Substs;\n+use rustc::middle::const_val::ConstVal;\n \n use super::{EvalResult, EvalContext, StackPopCleanup, PtrAndAlign, GlobalId, Lvalue,\n             MemoryKind, Machine, PrimVal};\n@@ -300,8 +301,7 @@ impl<'a, 'b, 'tcx, M: Machine<'tcx>> Visitor<'tcx> for ConstantExtractor<'a, 'b,\n         self.super_constant(constant, location);\n         match constant.literal {\n             // already computed by rustc\n-            mir::Literal::Value { .. } => {}\n-            mir::Literal::Item { def_id, substs } => {\n+            mir::Literal::Value { value: &ty::Const { val: ConstVal::Unevaluated(def_id, substs), .. } } => {\n                 self.try(|this| {\n                     this.ecx.global_item(\n                         def_id,\n@@ -311,6 +311,7 @@ impl<'a, 'b, 'tcx, M: Machine<'tcx>> Visitor<'tcx> for ConstantExtractor<'a, 'b,\n                     )\n                 });\n             }\n+            mir::Literal::Value { .. } => {}\n             mir::Literal::Promoted { index } => {\n                 let cid = GlobalId {\n                     instance: self.instance,"}, {"sha": "2477001bec49ab8c14b4a8d7f858a1a18932ac09", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a943b3fb5966aa326b1ec9986d568ec422c668/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=02a943b3fb5966aa326b1ec9986d568ec422c668", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         {\n             let param_env = ty::ParamEnv::empty(Reveal::All);\n \n-            if !value.has_projection_types() {\n+            if !value.has_projections() {\n                 return value.clone();\n             }\n \n@@ -525,6 +525,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 Ok(())\n             }\n             TyArray(elem_ty, len) => {\n+                let len = len.val.to_const_int().unwrap().to_u64().unwrap();\n                 for i in 0..len {\n                     let inner_lvalue = self.lvalue_index(query.lval, query.ty, i as u64)?;\n                     self.validate("}]}