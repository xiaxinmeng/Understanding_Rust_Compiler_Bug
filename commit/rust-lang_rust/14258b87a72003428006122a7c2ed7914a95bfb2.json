{"sha": "14258b87a72003428006122a7c2ed7914a95bfb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MjU4Yjg3YTcyMDAzNDI4MDA2MTIyYTdjMmVkNzkxNGE5NWJmYjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-14T21:37:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-14T23:00:30Z"}, "message": "rustc: Free heapified interior vectors", "tree": {"sha": "dbf2c4d22b7c2ab21b41f435c8ee6d143f8e5319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf2c4d22b7c2ab21b41f435c8ee6d143f8e5319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14258b87a72003428006122a7c2ed7914a95bfb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14258b87a72003428006122a7c2ed7914a95bfb2", "html_url": "https://github.com/rust-lang/rust/commit/14258b87a72003428006122a7c2ed7914a95bfb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14258b87a72003428006122a7c2ed7914a95bfb2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd18860be713acf95933dc11aa8a5b18c0f1e1d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd18860be713acf95933dc11aa8a5b18c0f1e1d4", "html_url": "https://github.com/rust-lang/rust/commit/bd18860be713acf95933dc11aa8a5b18c0f1e1d4"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "cba884c04b356608fa16cd25fa834b65ba21bba8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14258b87a72003428006122a7c2ed7914a95bfb2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14258b87a72003428006122a7c2ed7914a95bfb2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=14258b87a72003428006122a7c2ed7914a95bfb2", "patch": "@@ -2274,6 +2274,31 @@ fn make_free_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n     rslt.bcx.build.RetVoid();\n }\n \n+fn maybe_free_ivec_heap_part(&@block_ctxt cx, ValueRef v0, ty::t unit_ty)\n+        -> result {\n+    auto llunitty = type_of_or_i8(cx, unit_ty);\n+\n+    auto stack_len = cx.build.Load(cx.build.InBoundsGEP(v0, [C_int(0),\n+        C_uint(abi::ivec_elt_len)]));\n+    auto maybe_on_heap_cx = new_sub_block_ctxt(cx, \"maybe_on_heap\");\n+    auto next_cx = new_sub_block_ctxt(cx, \"next\");\n+    auto maybe_on_heap = cx.build.ICmp(lib::llvm::LLVMIntEQ, stack_len,\n+                                       C_int(0));\n+    cx.build.CondBr(maybe_on_heap, maybe_on_heap_cx.llbb, next_cx.llbb);\n+\n+    // Might be on the heap. Load the heap pointer and free it. (It's ok to\n+    // free a null pointer.)\n+    auto stub_ptr = maybe_on_heap_cx.build.PointerCast(v0,\n+        T_ptr(T_ivec_heap(llunitty)));\n+    auto heap_ptr = maybe_on_heap_cx.build.Load(\n+        maybe_on_heap_cx.build.InBoundsGEP(stub_ptr,\n+            [C_int(0), C_uint(abi::ivec_heap_stub_elt_ptr)]));\n+    auto after_free_cx = trans_non_gc_free(maybe_on_heap_cx, heap_ptr).bcx;\n+    after_free_cx.build.Br(next_cx.llbb);\n+\n+    ret res(next_cx, C_nil());\n+}\n+\n fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n     // NB: v0 is an *alias* of type t here, not a direct value.\n     auto rslt;\n@@ -2286,6 +2311,11 @@ fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n             rslt = decr_refcnt_maybe_free(cx, v0, v0, t);\n         }\n \n+        case (ty::ty_ivec(?tm)) {\n+            rslt = iter_structural_ty(cx, v0, t, drop_ty);\n+            rslt = maybe_free_ivec_heap_part(rslt.bcx, v0, tm.ty);\n+        }\n+\n         case (ty::ty_box(_)) {\n             rslt = decr_refcnt_maybe_free(cx, v0, v0, t);\n         }"}]}