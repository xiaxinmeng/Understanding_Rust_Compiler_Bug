{"sha": "b174b0b95536d487e02fa87fac20e6c1b0316b85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzRiMGI5NTUzNmQ0ODdlMDJmYTg3ZmFjMjBlNmMxYjAzMTZiODU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-07T15:45:07Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T13:24:45Z"}, "message": "miri-engine value visitor update to VariantIdx", "tree": {"sha": "73ed7811154d6054bb80444dc3eb6768f1b90c31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ed7811154d6054bb80444dc3eb6768f1b90c31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b174b0b95536d487e02fa87fac20e6c1b0316b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b174b0b95536d487e02fa87fac20e6c1b0316b85", "html_url": "https://github.com/rust-lang/rust/commit/b174b0b95536d487e02fa87fac20e6c1b0316b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b174b0b95536d487e02fa87fac20e6c1b0316b85/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a9ed3f25a4473afcf9245798e373ead73738633", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9ed3f25a4473afcf9245798e373ead73738633", "html_url": "https://github.com/rust-lang/rust/commit/4a9ed3f25a4473afcf9245798e373ead73738633"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "38170949734a9389942ea588c05704b019e74779", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b174b0b95536d487e02fa87fac20e6c1b0316b85/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b174b0b95536d487e02fa87fac20e6c1b0316b85/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b174b0b95536d487e02fa87fac20e6c1b0316b85", "patch": "@@ -13,7 +13,7 @@ use std::hash::Hash;\n use std::ops::RangeInclusive;\n \n use syntax_pos::symbol::Symbol;\n-use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf};\n+use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf, VariantIdx};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n@@ -74,6 +74,7 @@ macro_rules! try_validation {\n #[derive(Copy, Clone, Debug)]\n pub enum PathElem {\n     Field(Symbol),\n+    Variant(Symbol),\n     ClosureVar(Symbol),\n     ArrayElem(usize),\n     TupleElem(usize),\n@@ -107,6 +108,7 @@ fn path_format(path: &Vec<PathElem>) -> String {\n     for elem in path.iter() {\n         match elem {\n             Field(name) => write!(out, \".{}\", name),\n+            Variant(name) => write!(out, \".<downcast-variant({})>\", name),\n             ClosureVar(name) => write!(out, \".<closure-var({})>\", name),\n             TupleElem(idx) => write!(out, \".{}\", idx),\n             ArrayElem(idx) => write!(out, \"[{}]\", idx),\n@@ -192,9 +194,11 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> ValidityVisitor<'rt, 'a, '\n                     layout::Variants::Single { index } =>\n                         // Inside a variant\n                         PathElem::Field(def.variants[index].fields[field].ident.name),\n-                    _ =>\n-                        // To a variant\n-                        PathElem::Field(def.variants[field].name)\n+                    _ => {\n+                        // Enums have no fields other than their tag\n+                        assert_eq!(field, 0);\n+                        PathElem::Tag\n+                    }\n                 }\n             }\n \n@@ -241,6 +245,24 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         Ok(())\n     }\n \n+    #[inline]\n+    fn visit_variant(\n+        &mut self,\n+        old_op: OpTy<'tcx, M::PointerTag>,\n+        variant_id: VariantIdx,\n+        new_op: OpTy<'tcx, M::PointerTag>\n+    ) -> EvalResult<'tcx> {\n+        // Remember the old state\n+        let path_len = self.path.len();\n+        // Perform operation\n+        let name = old_op.layout.ty.ty_adt_def().unwrap().variants[variant_id].name;\n+        self.path.push(PathElem::Variant(name));\n+        self.visit_value(new_op)?;\n+        // Undo changes\n+        self.path.truncate(path_len);\n+        Ok(())\n+    }\n+\n     #[inline]\n     fn visit_value(&mut self, op: OpTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n     {"}, {"sha": "4a470456432533fb1a13f4835508fe07a709385c", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b174b0b95536d487e02fa87fac20e6c1b0316b85/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b174b0b95536d487e02fa87fac20e6c1b0316b85/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=b174b0b95536d487e02fa87fac20e6c1b0316b85", "patch": "@@ -1,7 +1,7 @@\n //! Visitor for a run-time value with a given layout: Traverse enums, structs and other compound\n //! types until we arrive at the leaves, with custom handling for primitive types.\n \n-use rustc::ty::layout::{self, TyLayout};\n+use rustc::ty::layout::{self, TyLayout, VariantIdx};\n use rustc::ty;\n use rustc::mir::interpret::{\n     EvalResult,\n@@ -32,7 +32,7 @@ pub trait Value<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: Copy\n     fn project_downcast(\n         self,\n         ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n-        variant: usize,\n+        variant: VariantIdx,\n     ) -> EvalResult<'tcx, Self>;\n \n     /// Project to the n-th field.\n@@ -70,7 +70,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     fn project_downcast(\n         self,\n         ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n-        variant: usize,\n+        variant: VariantIdx,\n     ) -> EvalResult<'tcx, Self> {\n         ecx.operand_downcast(self, variant)\n     }\n@@ -109,7 +109,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     fn project_downcast(\n         self,\n         ecx: &EvalContext<'a, 'mir, 'tcx, M>,\n-        variant: usize,\n+        variant: VariantIdx,\n     ) -> EvalResult<'tcx, Self> {\n         ecx.mplace_downcast(self, variant)\n     }\n@@ -171,6 +171,16 @@ macro_rules! make_value_visitor {\n                 self.visit_value(new_val)\n             }\n \n+            #[inline(always)]\n+            fn visit_variant(\n+                &mut self,\n+                _old_val: Self::V,\n+                _variant: VariantIdx,\n+                new_val: Self::V,\n+            ) -> EvalResult<'tcx> {\n+                self.visit_value(new_val)\n+            }\n+\n             /// Called whenever we reach a value with uninhabited layout.\n             /// Recursing to fields will *always* continue after this!  This is not meant to control\n             /// whether and how we descend recursively/ into the scalar's fields if there are any,\n@@ -221,7 +231,7 @@ macro_rules! make_value_visitor {\n                         let inner = v.project_downcast(self.ecx(), idx)?;\n                         trace!(\"walk_value: variant layout: {:#?}\", inner.layout());\n                         // recurse with the inner type\n-                        return self.visit_field(v, idx, inner);\n+                        return self.visit_variant(v, idx, inner);\n                     }\n                     layout::Variants::Single { .. } => {}\n                 }"}, {"sha": "d36e96b08174a125cfb6f30bcca976d39587ef58", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b174b0b95536d487e02fa87fac20e6c1b0316b85/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b174b0b95536d487e02fa87fac20e6c1b0316b85/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=b174b0b95536d487e02fa87fac20e6c1b0316b85", "patch": "@@ -42,7 +42,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:61:1\n    |\n LL | const BAD_ENUM_CHAR: Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .Some.0.1, but expected something less or equal to 1114111\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .<downcast-variant(Some)>.0.1, but expected something less or equal to 1114111\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}]}