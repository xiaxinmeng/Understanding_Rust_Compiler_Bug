{"sha": "6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMDc2NDFkMjEwMWU2NDg5YWE2YjlhM2JhODRiNmEyYjliMDRmYTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-02T10:41:57Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T02:15:32Z"}, "message": "gating diagnostics -> rustc_session::parse", "tree": {"sha": "353a36be5e908f39eb2fe9d7f1b49e8934174acb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/353a36be5e908f39eb2fe9d7f1b49e8934174acb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "html_url": "https://github.com/rust-lang/rust/commit/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175631311716d7dfeceec40d2587cde7142ffa8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/175631311716d7dfeceec40d2587cde7142ffa8c", "html_url": "https://github.com/rust-lang/rust/commit/175631311716d7dfeceec40d2587cde7142ffa8c"}], "stats": {"total": 153, "additions": 77, "deletions": 76}, "files": [{"sha": "6116ae033875e1fe206e97630daa1819b88fa311", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "patch": "@@ -3866,6 +3866,7 @@ dependencies = [\n  \"log\",\n  \"num_cpus\",\n  \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_fs_util\","}, {"sha": "377ea141ed57c6678162534a7e0515ebeb0600f0", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n log = \"0.4\"\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "2a5945d2b059538376ad02980cd9fa311ad4a132", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "patch": "@@ -6,10 +6,10 @@ use crate::node_id::NodeId;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc, Once};\n-use rustc_errors::{\n-    emitter::SilentEmitter, Applicability, ColorConfig, DiagnosticBuilder, Handler,\n-};\n-use rustc_feature::UnstableFeatures;\n+use rustc_error_codes::E0658;\n+use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder};\n+use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n@@ -62,6 +62,70 @@ impl GatedSpans {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq)]\n+pub enum GateStrength {\n+    /// A hard error. (Most feature gates should use this.)\n+    Hard,\n+    /// Only a warning. (Use this only as backwards-compatibility demands.)\n+    Soft,\n+}\n+\n+pub fn feature_err<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    explain: &str,\n+) -> DiagnosticBuilder<'a> {\n+    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n+}\n+\n+pub fn feature_err_issue<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    issue: GateIssue,\n+    explain: &str,\n+) -> DiagnosticBuilder<'a> {\n+    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n+}\n+\n+pub fn leveled_feature_err<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    issue: GateIssue,\n+    explain: &str,\n+    level: GateStrength,\n+) -> DiagnosticBuilder<'a> {\n+    let diag = &sess.span_diagnostic;\n+\n+    let mut err = match level {\n+        GateStrength::Hard => diag.struct_span_err_with_code(span, explain, error_code!(E0658)),\n+        GateStrength::Soft => diag.struct_span_warn(span, explain),\n+    };\n+\n+    if let Some(n) = find_feature_issue(feature, issue) {\n+        err.note(&format!(\n+            \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n+            n,\n+        ));\n+    }\n+\n+    // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n+    if sess.unstable_features.is_nightly_build() {\n+        err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n+    }\n+\n+    // If we're on stable and only emitting a \"soft\" warning, add a note to\n+    // clarify that the feature isn't \"on\" (rather than being on but\n+    // warning-worthy).\n+    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n+        err.help(\"a nightly build of the compiler is required to enable this feature\");\n+    }\n+\n+    err\n+}\n+\n /// Info about a parsing session.\n pub struct ParseSess {\n     pub span_diagnostic: Handler,"}, {"sha": "70f4f47621a348ce36acbef9d39d83b42db36d6c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "patch": "@@ -2,9 +2,8 @@\n \n use super::{mark_used, MetaItemKind};\n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::feature_gate::feature_err;\n use crate::print::pprust;\n-use crate::sess::ParseSess;\n+use crate::sess::{feature_err, ParseSess};\n \n use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};"}, {"sha": "2b49a296a082ab12c9869a456d016b8b987b2abd", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 4, "deletions": 69, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "patch": "@@ -1,22 +1,21 @@\n use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use crate::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n use crate::attr;\n-use crate::sess::ParseSess;\n+use crate::sess::{feature_err, leveled_feature_err, GateStrength, ParseSess};\n use crate::visit::{self, FnKind, Visitor};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_error_codes::*;\n-use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Handler};\n-use rustc_feature::{find_feature_issue, GateIssue};\n+use rustc_errors::{error_code, struct_span_err, Applicability, Handler};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n-use rustc_feature::{Feature, Features, State as FeatureState, UnstableFeatures};\n+use rustc_feature::{Feature, Features, GateIssue, State as FeatureState, UnstableFeatures};\n use rustc_feature::{\n     ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n };\n use rustc_span::edition::{Edition, ALL_EDITIONS};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n \n use log::debug;\n \n@@ -53,70 +52,6 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq)]\n-pub enum GateStrength {\n-    /// A hard error. (Most feature gates should use this.)\n-    Hard,\n-    /// Only a warning. (Use this only as backwards-compatibility demands.)\n-    Soft,\n-}\n-\n-pub fn feature_err<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    explain: &str,\n-) -> DiagnosticBuilder<'a> {\n-    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n-}\n-\n-pub fn feature_err_issue<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    issue: GateIssue,\n-    explain: &str,\n-) -> DiagnosticBuilder<'a> {\n-    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n-}\n-\n-fn leveled_feature_err<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    issue: GateIssue,\n-    explain: &str,\n-    level: GateStrength,\n-) -> DiagnosticBuilder<'a> {\n-    let diag = &sess.span_diagnostic;\n-\n-    let mut err = match level {\n-        GateStrength::Hard => diag.struct_span_err_with_code(span, explain, error_code!(E0658)),\n-        GateStrength::Soft => diag.struct_span_warn(span, explain),\n-    };\n-\n-    if let Some(n) = find_feature_issue(feature, issue) {\n-        err.note(&format!(\n-            \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n-            n,\n-        ));\n-    }\n-\n-    // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n-    if sess.unstable_features.is_nightly_build() {\n-        err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n-    }\n-\n-    // If we're on stable and only emitting a \"soft\" warning, add a note to\n-    // clarify that the feature isn't \"on\" (rather than being on but\n-    // warning-worthy).\n-    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n-        err.help(\"a nightly build of the compiler is required to enable this feature\");\n-    }\n-\n-    err\n-}\n-\n struct PostExpansionVisitor<'a> {\n     parse_sess: &'a ParseSess,\n     features: &'a Features,"}, {"sha": "ffb0d7e7f970659a41b72267dc7a7871c6bd0678", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=6007641d2101e6489aa6b9a3ba84b6a2b9b04fa5", "patch": "@@ -77,7 +77,8 @@ pub mod entry;\n pub mod expand;\n pub mod feature_gate {\n     mod check;\n-    pub use check::{check_attribute, check_crate, feature_err, feature_err_issue, get_features};\n+    pub use check::{check_attribute, check_crate, get_features};\n+    pub use rustc_session::parse::{feature_err, feature_err_issue};\n }\n pub mod mut_visit;\n pub mod ptr;"}]}