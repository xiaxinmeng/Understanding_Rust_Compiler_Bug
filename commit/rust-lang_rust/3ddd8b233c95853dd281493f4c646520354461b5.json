{"sha": "3ddd8b233c95853dd281493f4c646520354461b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZGQ4YjIzM2M5NTg1M2RkMjgxNDkzZjRjNjQ2NTIwMzU0NDYxYjU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-17T22:21:31Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-19T12:18:24Z"}, "message": "Return all impls, not just the primary one", "tree": {"sha": "b065e73062692ceda12d9a0df8d42e8a592a90d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b065e73062692ceda12d9a0df8d42e8a592a90d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ddd8b233c95853dd281493f4c646520354461b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddd8b233c95853dd281493f4c646520354461b5", "html_url": "https://github.com/rust-lang/rust/commit/3ddd8b233c95853dd281493f4c646520354461b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ddd8b233c95853dd281493f4c646520354461b5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a0aa7bd9d65dcc9a052fbbcc95ef40100744092", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0aa7bd9d65dcc9a052fbbcc95ef40100744092", "html_url": "https://github.com/rust-lang/rust/commit/8a0aa7bd9d65dcc9a052fbbcc95ef40100744092"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "fc4e72138e7a5765a1f5fd4ef20a2880093b86e1", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ddd8b233c95853dd281493f4c646520354461b5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3ddd8b233c95853dd281493f4c646520354461b5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3ddd8b233c95853dd281493f4c646520354461b5", "patch": "@@ -4106,6 +4106,7 @@ dependencies = [\n  \"rustc-rayon\",\n  \"serde\",\n  \"serde_json\",\n+ \"smallvec 1.4.0\",\n  \"tempfile\",\n ]\n "}, {"sha": "1354ef5cbdeb4982aef4b7ca5fc222f3e29c5d13", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ddd8b233c95853dd281493f4c646520354461b5/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3ddd8b233c95853dd281493f4c646520354461b5/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=3ddd8b233c95853dd281493f4c646520354461b5", "patch": "@@ -14,5 +14,6 @@ minifier = \"0.0.33\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n+smallvec = \"1.0\"\n tempfile = \"3\"\n itertools = \"0.8\""}, {"sha": "969098122bfcab6c56d953f849e41e954e950fb3", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3ddd8b233c95853dd281493f4c646520354461b5/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddd8b233c95853dd281493f4c646520354461b5/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=3ddd8b233c95853dd281493f4c646520354461b5", "patch": "@@ -17,6 +17,7 @@ use rustc_middle::mir::interpret::{sign_extend, ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n+use smallvec::SmallVec;\n use std::mem;\n \n pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n@@ -350,11 +351,14 @@ pub fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n     s\n }\n \n-pub fn impl_for_type(tcx: TyCtxt<'_>, primitive: PrimitiveType) -> Option<DefId> {\n+pub fn impl_for_type(tcx: TyCtxt<'_>, primitive: PrimitiveType) -> SmallVec<[DefId; 4]> {\n     use self::PrimitiveType::*;\n \n+    let both =\n+        |a: Option<DefId>, b: Option<DefId>| -> SmallVec<_> { a.into_iter().chain(b).collect() };\n+\n     let lang_items = tcx.lang_items();\n-    match primitive {\n+    let primary_impl = match primitive {\n         Isize => lang_items.isize_impl(),\n         I8 => lang_items.i8_impl(),\n         I16 => lang_items.i16_impl(),\n@@ -367,20 +371,38 @@ pub fn impl_for_type(tcx: TyCtxt<'_>, primitive: PrimitiveType) -> Option<DefId>\n         U32 => lang_items.u32_impl(),\n         U64 => lang_items.u64_impl(),\n         U128 => lang_items.u128_impl(),\n-        F32 => lang_items.f32_impl(),\n-        F64 => lang_items.f64_impl(),\n+        F32 => return both(lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n+        F64 => return both(lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n         Char => lang_items.char_impl(),\n         Bool => lang_items.bool_impl(),\n-        Str => lang_items.str_impl(),\n-        Slice => lang_items.slice_impl(),\n+        Str => return both(lang_items.str_impl(), lang_items.str_alloc_impl()),\n+        Slice => {\n+            return lang_items\n+                .slice_impl()\n+                .into_iter()\n+                .chain(lang_items.slice_u8_impl())\n+                .chain(lang_items.slice_alloc_impl())\n+                .chain(lang_items.slice_u8_alloc_impl())\n+                .collect();\n+        }\n         Array => lang_items.array_impl(),\n         Tuple => None,\n         Unit => None,\n-        RawPointer => lang_items.const_ptr_impl(),\n+        RawPointer => {\n+            return lang_items\n+                .const_ptr_impl()\n+                .into_iter()\n+                .chain(lang_items.mut_ptr_impl())\n+                .chain(lang_items.const_slice_ptr_impl())\n+                .chain(lang_items.mut_slice_ptr_impl())\n+                .collect();\n+        }\n         Reference => None,\n         Fn => None,\n         Never => None,\n-    }\n+    };\n+\n+    primary_impl.into_iter().collect()\n }\n \n pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n@@ -402,8 +424,7 @@ pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut V\n                 None => continue,\n             },\n         };\n-        let did = impl_for_type(tcx, primitive);\n-        if let Some(did) = did {\n+        for did in impl_for_type(tcx, primitive) {\n             if !did.is_local() {\n                 inline::build_impl(cx, did, None, ret);\n             }"}]}