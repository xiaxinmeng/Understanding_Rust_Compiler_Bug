{"sha": "3b52d3181a44a0ccedd30c52e70ce84231918e72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNTJkMzE4MWE0NGEwY2NlZGQzMGM1MmU3MGNlODQyMzE5MThlNzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-21T09:06:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T09:06:24Z"}, "message": "Merge #6043\n\n6043: Allow missing trait members assist without needing braces r=matklad a=M-J-Hooper\n\nAssist to complete missing items when implementing a trait does not appear without impl def braces (see #5144 ).\r\n\r\nThe reason behind this was that this assist is based on `ast::AssocItemList` which only appears in the AST after the braces are added to the impl def.\r\n\r\nInstead of relying on and replacing the item list, we now instead replace the entire `ast::Impl` and add the item list if its missing.\n\nCo-authored-by: Matt Hooper <matthewjhooper94@gmail.com>", "tree": {"sha": "0cf70a2a1d5db2b7afa39dafcb0fcd72ba05dc4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf70a2a1d5db2b7afa39dafcb0fcd72ba05dc4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b52d3181a44a0ccedd30c52e70ce84231918e72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaG0QCRBK7hj4Ov3rIwAAdHIIAKDIkCWfil3f/kiwCpyv09O+\nxkCVxzgYblQrvy7IfEgfkhUVKb1+QaedylJta791H3Ppyvn3ElKlQeH8unfLLv92\nAFgwecNDPm+bPaUZYWkz6QfHI8rbjheE2uClob3/vFCeHMCFelOCb7qlEJgT0I0H\nm0ZT6yN/kEy7NyDAHHPlnccKqDpCoaZcUX8ytWB+PqRvmBDC3TyjF4ftlOSh6dfu\nbrhxeAd1fih+5v7XmuHl2RIvv8Ye+CB8rlEHOoLDwx3B8/+QcH7JM4QqqhpWbGLl\nxrQ3E86lKMDbGOSED3q7wzbcFRfcKvsRaAOLUQqssOxiAtNBy8e9T9VzDaMgFEA=\n=G/nC\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cf70a2a1d5db2b7afa39dafcb0fcd72ba05dc4d\nparent e70cf706bb7c6c07e8c33b537ad24e5333aa5e75\nparent 7d90bb1f47e1ab6f0ac1d7a042d7161295cf9320\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1600679184 +0000\ncommitter GitHub <noreply@github.com> 1600679184 +0000\n\nMerge #6043\n\n6043: Allow missing trait members assist without needing braces r=matklad a=M-J-Hooper\n\nAssist to complete missing items when implementing a trait does not appear without impl def braces (see #5144 ).\r\n\r\nThe reason behind this was that this assist is based on `ast::AssocItemList` which only appears in the AST after the braces are added to the impl def.\r\n\r\nInstead of relying on and replacing the item list, we now instead replace the entire `ast::Impl` and add the item list if its missing.\n\nCo-authored-by: Matt Hooper <matthewjhooper94@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b52d3181a44a0ccedd30c52e70ce84231918e72", "html_url": "https://github.com/rust-lang/rust/commit/3b52d3181a44a0ccedd30c52e70ce84231918e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b52d3181a44a0ccedd30c52e70ce84231918e72/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70cf706bb7c6c07e8c33b537ad24e5333aa5e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75", "html_url": "https://github.com/rust-lang/rust/commit/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75"}, {"sha": "7d90bb1f47e1ab6f0ac1d7a042d7161295cf9320", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d90bb1f47e1ab6f0ac1d7a042d7161295cf9320", "html_url": "https://github.com/rust-lang/rust/commit/7d90bb1f47e1ab6f0ac1d7a042d7161295cf9320"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "8df1d786b1cf69219d36d6c40d987de5cea388ff", "filename": "crates/assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3b52d3181a44a0ccedd30c52e70ce84231918e72/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b52d3181a44a0ccedd30c52e70ce84231918e72/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=3b52d3181a44a0ccedd30c52e70ce84231918e72", "patch": "@@ -111,8 +111,6 @@ fn add_missing_impl_members_inner(\n ) -> Option<()> {\n     let _p = profile::span(\"add_missing_impl_members_inner\");\n     let impl_def = ctx.find_node_at_offset::<ast::Impl>()?;\n-    let impl_item_list = impl_def.assoc_item_list()?;\n-\n     let trait_ = resolve_target_trait(&ctx.sema, &impl_def)?;\n \n     let def_name = |item: &ast::AssocItem| -> Option<SmolStr> {\n@@ -148,11 +146,14 @@ fn add_missing_impl_members_inner(\n \n     let target = impl_def.syntax().text_range();\n     acc.add(AssistId(assist_id, AssistKind::QuickFix), label, target, |builder| {\n+        let impl_item_list = impl_def.assoc_item_list().unwrap_or(make::assoc_item_list());\n+\n         let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = ctx.sema.scope_for_def(trait_);\n-        let target_scope = ctx.sema.scope(impl_item_list.syntax());\n+        let target_scope = ctx.sema.scope(impl_def.syntax());\n         let ast_transform = QualifyPaths::new(&target_scope, &source_scope)\n-            .or(SubstituteTypeParams::for_trait_impl(&source_scope, trait_, impl_def));\n+            .or(SubstituteTypeParams::for_trait_impl(&source_scope, trait_, impl_def.clone()));\n+\n         let items = missing_items\n             .into_iter()\n             .map(|it| ast_transform::apply(&*ast_transform, it))\n@@ -162,12 +163,14 @@ fn add_missing_impl_members_inner(\n                 _ => it,\n             })\n             .map(|it| edit::remove_attrs_and_docs(&it));\n+\n         let new_impl_item_list = impl_item_list.append_items(items);\n-        let first_new_item = new_impl_item_list.assoc_items().nth(n_existing_items).unwrap();\n+        let new_impl_def = impl_def.with_assoc_item_list(new_impl_item_list);\n+        let first_new_item =\n+            new_impl_def.assoc_item_list().unwrap().assoc_items().nth(n_existing_items).unwrap();\n \n-        let original_range = impl_item_list.syntax().text_range();\n         match ctx.config.snippet_cap {\n-            None => builder.replace(original_range, new_impl_item_list.to_string()),\n+            None => builder.replace(target, new_impl_def.to_string()),\n             Some(cap) => {\n                 let mut cursor = Cursor::Before(first_new_item.syntax());\n                 let placeholder;\n@@ -181,8 +184,8 @@ fn add_missing_impl_members_inner(\n                 }\n                 builder.replace_snippet(\n                     cap,\n-                    original_range,\n-                    render_snippet(cap, new_impl_item_list.syntax(), cursor),\n+                    target,\n+                    render_snippet(cap, new_impl_def.syntax(), cursor),\n                 )\n             }\n         };\n@@ -310,6 +313,25 @@ impl Foo for S {\n         );\n     }\n \n+    #[test]\n+    fn test_impl_def_without_braces() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Foo { fn foo(&self); }\n+struct S;\n+impl Foo for S<|>\"#,\n+            r#\"\n+trait Foo { fn foo(&self); }\n+struct S;\n+impl Foo for S {\n+    fn foo(&self) {\n+        ${0:todo!()}\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn fill_in_type_params_1() {\n         check_assist("}, {"sha": "dda0a031907d9d0fcad3f0b4ffa53a94f3dcdff6", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b52d3181a44a0ccedd30c52e70ce84231918e72/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b52d3181a44a0ccedd30c52e70ce84231918e72/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=3b52d3181a44a0ccedd30c52e70ce84231918e72", "patch": "@@ -93,6 +93,22 @@ where\n     }\n }\n \n+impl ast::Impl {\n+    #[must_use]\n+    pub fn with_assoc_item_list(&self, items: ast::AssocItemList) -> ast::Impl {\n+        let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n+        if let Some(old_items) = self.assoc_item_list() {\n+            let to_replace: SyntaxElement = old_items.syntax().clone().into();\n+            to_insert.push(items.syntax().clone().into());\n+            self.replace_children(single_node(to_replace), to_insert)\n+        } else {\n+            to_insert.push(make::tokens::single_space().into());\n+            to_insert.push(items.syntax().clone().into());\n+            self.insert_children(InsertPosition::Last, to_insert)\n+        }\n+    }\n+}\n+\n impl ast::AssocItemList {\n     #[must_use]\n     pub fn append_items("}, {"sha": "4a0ffcbb0707a346087f15738047a4a22fd6de2c", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b52d3181a44a0ccedd30c52e70ce84231918e72/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b52d3181a44a0ccedd30c52e70ce84231918e72/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=3b52d3181a44a0ccedd30c52e70ce84231918e72", "patch": "@@ -21,6 +21,10 @@ pub fn ty(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"impl {} for D {{}};\", text))\n }\n \n+pub fn assoc_item_list() -> ast::AssocItemList {\n+    ast_from_text(\"impl C for D {};\")\n+}\n+\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"use {};\", name_ref))\n }"}]}