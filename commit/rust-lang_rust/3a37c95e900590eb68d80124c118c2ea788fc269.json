{"sha": "3a37c95e900590eb68d80124c118c2ea788fc269", "node_id": "C_kwDOAAsO6NoAKDNhMzdjOTVlOTAwNTkwZWI2OGQ4MDEyNGMxMThjMmVhNzg4ZmMyNjk", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-14T19:10:34Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-14T19:10:34Z"}, "message": "rustdoc: remove tuple link on round braces\n\nThis is 682889fb06591c4245422b73b005c5d8ae2d0cad but for tuples. The\nreasoning is the same:\n\n* This commit also changes it so that tuples with all-generic elements still\n  link to the primitive.tuple.html page, just like slices. So there still\n  plenty of on-ramps for anybody who doesn't know about it.\n* It's too hard to see when round braces are a separate link from the type\n  inside of them.\n* It's too hard to click even if you do notice them.", "tree": {"sha": "724187b566b152e64b5272a918be52b6eea0b45b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/724187b566b152e64b5272a918be52b6eea0b45b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a37c95e900590eb68d80124c118c2ea788fc269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a37c95e900590eb68d80124c118c2ea788fc269", "html_url": "https://github.com/rust-lang/rust/commit/3a37c95e900590eb68d80124c118c2ea788fc269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a37c95e900590eb68d80124c118c2ea788fc269/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872503d918b2c3266d828f85e42951df74f5e303", "url": "https://api.github.com/repos/rust-lang/rust/commits/872503d918b2c3266d828f85e42951df74f5e303", "html_url": "https://github.com/rust-lang/rust/commit/872503d918b2c3266d828f85e42951df74f5e303"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "7a49f5d66776c090a5de14deae09ca2917e378c0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3a37c95e900590eb68d80124c118c2ea788fc269/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a37c95e900590eb68d80124c118c2ea788fc269/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3a37c95e900590eb68d80124c118c2ea788fc269", "patch": "@@ -23,6 +23,8 @@ use rustc_span::symbol::kw;\n use rustc_span::{sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n+use itertools::Itertools;\n+\n use crate::clean::{\n     self, types::ExternalLocation, utils::find_nearest_parent_module, ExternalCrate, ItemId,\n     PrimitiveType,\n@@ -864,20 +866,42 @@ fn fmt_type<'cx>(\n             match &typs[..] {\n                 &[] => primitive_link(f, PrimitiveType::Unit, \"()\", cx),\n                 &[ref one] => {\n-                    primitive_link(f, PrimitiveType::Tuple, \"(\", cx)?;\n-                    // Carry `f.alternate()` into this display w/o branching manually.\n-                    fmt::Display::fmt(&one.print(cx), f)?;\n-                    primitive_link(f, PrimitiveType::Tuple, \",)\", cx)\n+                    if let clean::Generic(name) = one {\n+                        primitive_link(f, PrimitiveType::Tuple, &format!(\"({name},)\"), cx)\n+                    } else {\n+                        write!(f, \"(\")?;\n+                        // Carry `f.alternate()` into this display w/o branching manually.\n+                        fmt::Display::fmt(&one.print(cx), f)?;\n+                        write!(f, \",)\")\n+                    }\n                 }\n                 many => {\n-                    primitive_link(f, PrimitiveType::Tuple, \"(\", cx)?;\n-                    for (i, item) in many.iter().enumerate() {\n-                        if i != 0 {\n-                            write!(f, \", \")?;\n+                    let generic_names: Vec<Symbol> = many\n+                        .iter()\n+                        .filter_map(|t| match t {\n+                            clean::Generic(name) => Some(*name),\n+                            _ => None,\n+                        })\n+                        .collect();\n+                    let is_generic = generic_names.len() == many.len();\n+                    if is_generic {\n+                        primitive_link(\n+                            f,\n+                            PrimitiveType::Tuple,\n+                            &format!(\"({})\", generic_names.iter().map(|s| s.as_str()).join(\", \")),\n+                            cx,\n+                        )\n+                    } else {\n+                        write!(f, \"(\")?;\n+                        for (i, item) in many.iter().enumerate() {\n+                            if i != 0 {\n+                                write!(f, \", \")?;\n+                            }\n+                            // Carry `f.alternate()` into this display w/o branching manually.\n+                            fmt::Display::fmt(&item.print(cx), f)?;\n                         }\n-                        fmt::Display::fmt(&item.print(cx), f)?;\n+                        write!(f, \")\")\n                     }\n-                    primitive_link(f, PrimitiveType::Tuple, \")\", cx)\n                 }\n             }\n         }"}]}