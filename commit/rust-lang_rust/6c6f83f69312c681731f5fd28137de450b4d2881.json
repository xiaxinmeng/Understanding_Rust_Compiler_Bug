{"sha": "6c6f83f69312c681731f5fd28137de450b4d2881", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNmY4M2Y2OTMxMmM2ODE3MzFmNWZkMjgxMzdkZTQ1MGI0ZDI4ODE=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-12-12T09:24:12Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-13T00:15:29Z"}, "message": "rustc: Refactor and get built on Windows", "tree": {"sha": "f511f352c528cfb58bcce0a9cab9d2576aad8db5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f511f352c528cfb58bcce0a9cab9d2576aad8db5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c6f83f69312c681731f5fd28137de450b4d2881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6f83f69312c681731f5fd28137de450b4d2881", "html_url": "https://github.com/rust-lang/rust/commit/6c6f83f69312c681731f5fd28137de450b4d2881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c6f83f69312c681731f5fd28137de450b4d2881/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba0649cb41d90a2e866b9e90ebabd1a8e445d58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0649cb41d90a2e866b9e90ebabd1a8e445d58c", "html_url": "https://github.com/rust-lang/rust/commit/ba0649cb41d90a2e866b9e90ebabd1a8e445d58c"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "aa00cf680549a9f8ed4ad091202fd271bb96da04", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c6f83f69312c681731f5fd28137de450b4d2881/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6f83f69312c681731f5fd28137de450b4d2881/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=6c6f83f69312c681731f5fd28137de450b4d2881", "patch": "@@ -561,6 +561,13 @@ fn link_binary(sess: session::session,\n                obj_filename: str,\n                out_filename: str,\n                lm: link_meta) {\n+    let output = if sess.building_library() {\n+        let long_libname =\n+            std::os::dylib_filename(#fmt(\"%s-%s-%s\",\n+                                         lm.name, lm.extras_hash, lm.vers));\n+        fs::connect(fs::dirname(out_filename), long_libname)\n+    } else { out_filename };\n+\n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n     let stage: str = \"-L\" + sess.filesearch().get_target_lib_path();\n@@ -570,9 +577,9 @@ fn link_binary(sess: session::session,\n \n     let gcc_args =\n         [stage] + sess.get_targ_cfg().target_strs.gcc_args +\n-        [\"-o\", out_filename, obj_filename];\n-    let lib_cmd;\n+        [\"-o\", output, obj_filename];\n \n+    let lib_cmd;\n     let os = sess.get_targ_cfg().os;\n     if os == session::os_macos {\n         lib_cmd = \"-dynamiclib\";\n@@ -620,24 +627,20 @@ fn link_binary(sess: session::session,\n     let used_libs = cstore::get_used_libraries(cstore);\n     for l: str in used_libs { gcc_args += [\"-l\" + l]; }\n \n-    let long_libname =\n-        std::os::dylib_filename(#fmt(\"%s-%s-%s\",\n-                                     lm.name, lm.extras_hash, lm.vers));\n-\n     if sess.building_library() {\n         gcc_args += [lib_cmd];\n \n         // On mac we need to tell the linker to let this library\n         // be rpathed\n         if sess.get_targ_cfg().os == session::os_macos {\n-            gcc_args += [\"-Wl,-install_name,@rpath/\" + long_libname];\n+            gcc_args += [\"-Wl,-install_name,@rpath/\"\n+                        + fs::basename(output)];\n         }\n     } else {\n         // FIXME: why do we hardcode -lm?\n         gcc_args += [\"-lm\"];\n     }\n \n-\n     // Always want the runtime linked in\n     gcc_args += [\"-lrustrt\"];\n \n@@ -666,18 +669,13 @@ fn link_binary(sess: session::session,\n \n     // Clean up on Darwin\n     if sess.get_targ_cfg().os == session::os_macos {\n-        run::run_program(\"dsymutil\", [out_filename]);\n+        run::run_program(\"dsymutil\", [output]);\n     }\n \n     // Remove the temporary object file if we aren't saving temps\n     if !sess.get_opts().save_temps {\n         run::run_program(\"rm\", [obj_filename]);\n     }\n-\n-    if sess.building_library() {\n-        let fullname = fs::connect(fs::dirname(out_filename), long_libname);\n-        run::run_program(\"mv\", [out_filename, fullname]);\n-    }\n }\n //\n // Local Variables:"}]}