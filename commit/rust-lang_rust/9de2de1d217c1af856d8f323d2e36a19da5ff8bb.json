{"sha": "9de2de1d217c1af856d8f323d2e36a19da5ff8bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZTJkZTFkMjE3YzFhZjg1NmQ4ZjMyM2QyZTM2YTE5ZGE1ZmY4YmI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2016-06-17T09:05:19Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2016-06-17T09:05:19Z"}, "message": "Pretty-print attributes on tuple structs and add tests\n\nThis adds support to the pretty printer to print attributes\nadded to tuple struct elements.  Furthermore, it adds a test\nthat makes sure we will print attributes on all variant data\ntypes.", "tree": {"sha": "f41a7133560844d37618dda2a0ea716a33f710a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f41a7133560844d37618dda2a0ea716a33f710a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9de2de1d217c1af856d8f323d2e36a19da5ff8bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9de2de1d217c1af856d8f323d2e36a19da5ff8bb", "html_url": "https://github.com/rust-lang/rust/commit/9de2de1d217c1af856d8f323d2e36a19da5ff8bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9de2de1d217c1af856d8f323d2e36a19da5ff8bb/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be203ac258365a2fb85a40314708d26112c40381", "url": "https://api.github.com/repos/rust-lang/rust/commits/be203ac258365a2fb85a40314708d26112c40381", "html_url": "https://github.com/rust-lang/rust/commit/be203ac258365a2fb85a40314708d26112c40381"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "6340f9e74724a71c90a9b0e9cd016c70b11ed49a", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9de2de1d217c1af856d8f323d2e36a19da5ff8bb/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de2de1d217c1af856d8f323d2e36a19da5ff8bb/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=9de2de1d217c1af856d8f323d2e36a19da5ff8bb", "patch": "@@ -911,8 +911,9 @@ impl<'a> State<'a> {\n             if struct_def.is_tuple() {\n                 self.popen()?;\n                 self.commasep(Inconsistent, struct_def.fields(), |s, field| {\n-                    s.print_visibility(&field.vis)?;\n                     s.maybe_print_comment(field.span.lo)?;\n+                    s.print_outer_attributes(&field.attrs)?;\n+                    s.print_visibility(&field.vis)?;\n                     s.print_type(&field.ty)\n                 })?;\n                 self.pclose()?;"}, {"sha": "34bb83711f2f670415e7cf8e3491c15bc5f8cabc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9de2de1d217c1af856d8f323d2e36a19da5ff8bb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de2de1d217c1af856d8f323d2e36a19da5ff8bb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9de2de1d217c1af856d8f323d2e36a19da5ff8bb", "patch": "@@ -1403,8 +1403,9 @@ impl<'a> State<'a> {\n                 try!(self.commasep(\n                     Inconsistent, struct_def.fields(),\n                     |s, field| {\n-                        try!(s.print_visibility(&field.vis));\n                         try!(s.maybe_print_comment(field.span.lo));\n+                        try!(s.print_outer_attributes(&field.attrs));\n+                        try!(s.print_visibility(&field.vis));\n                         s.print_type(&field.ty)\n                     }\n                 ));"}, {"sha": "1ffacaa9f5a5d89bbc6add9c3674d0ec2ba77cfb", "filename": "src/test/pretty/attr-variant-data.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9de2de1d217c1af856d8f323d2e36a19da5ff8bb/src%2Ftest%2Fpretty%2Fattr-variant-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de2de1d217c1af856d8f323d2e36a19da5ff8bb/src%2Ftest%2Fpretty%2Fattr-variant-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-variant-data.rs?ref=9de2de1d217c1af856d8f323d2e36a19da5ff8bb", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+// Testing that both the inner item and next outer item are\n+// preserved, and that the first outer item parsed in main is not\n+// accidentally carried over to each inner function\n+\n+#![feature(custom_attribute)]\n+#![feature(custom_derive)]\n+\n+#[derive(Serialize, Deserialize)]\n+struct X;\n+\n+#[derive(Serialize, Deserialize)]\n+struct WithRef<'a, T: 'a> {\n+    #[serde(skip_deserializing)]\n+    t: Option<&'a T>,\n+    #[serde(serialize_with = \"ser_x\", deserialize_with = \"de_x\")]\n+    x: X,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+enum EnumWith<T> {\n+    Unit,\n+    Newtype(\n+            #[serde(serialize_with = \"ser_x\", deserialize_with = \"de_x\")]\n+            X),\n+    Tuple(T,\n+          #[serde(serialize_with = \"ser_x\", deserialize_with = \"de_x\")]\n+          X),\n+    Struct {\n+        t: T,\n+        #[serde(serialize_with = \"ser_x\", deserialize_with = \"de_x\")]\n+        x: X,\n+    },\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+struct Tuple<T>(T,\n+                #[serde(serialize_with = \"ser_x\", deserialize_with = \"de_x\")]\n+                X);\n+\n+fn main() { }"}]}