{"sha": "f381744d91d214501c96c67b3a5687207ee7ff42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzODE3NDRkOTFkMjE0NTAxYzk2YzY3YjNhNTY4NzIwN2VlN2ZmNDI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T14:54:50Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-09-17T19:40:13Z"}, "message": "Get the miri test suite to run inside the rustc dev environment", "tree": {"sha": "4cbbdabc56501441e151ade1cc7175197544465a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cbbdabc56501441e151ade1cc7175197544465a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f381744d91d214501c96c67b3a5687207ee7ff42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCABKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlm+z50sHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASp\nbhAApKVpVG1eYFeHeQw0EG7x8aRMJy925kwrjKtrAhSZGoCJXJowTIXIPykJVBVG\ntJt6BkSW3cWx36VMkQFsfGjMasG0/6Na4B7pizFBj/C5trgWXJe1sBr/1Gbd55S3\nIUM5MuLPSfO4uALdTnJjSDgFsdTX6QMhV3D4WRGSmCBChF0wSCjAdAX51gAHVBKb\nvcuUS9z1aLux5G/J0YHvpcMk5NBOQBJJZY5/hlcITxfPQPNjCaHYz9Xqjqql4Vmh\nYIudFu89kRyW5JsqCfuUUPmapksi7KaHt3UNHNYhZsVDRD32livEz/RJKINUpsSk\nKrGPpsyeZqsI0tX5meA4XLj9BMkndfrBbSVeYAKv7Fj8kO55t6339mw3eoa5APMf\nUs+cQ+ysl0vOw2FPKit2dADBQxwB2mwnJZt20FUnNAkoxpRp8b7Jq1W6iHEvlhEn\n5jM4YFTidqqXAAWrv/c+owVrSEkAcE1OyfCAjFSDosbvV5aUDZx3cGEqmZ1xUQz5\nuSe7Z+8sa+J7olWE9umcTlZC3o5ehCXDqckmd1aGBUY+Ryx9wxmmMG6DQnHZgTVg\ncBPdq9ry68gIag7bCIlzw6UiT8mFiQgF6z7UHg8DDQXQf7K66ULchTJsI2eIER6g\nGCczIttsde5asaG9af90+11mWtxhowOHJXRxbH+/ktgTnEI=\n=Xl1k\n-----END PGP SIGNATURE-----", "payload": "tree 4cbbdabc56501441e151ade1cc7175197544465a\nparent 1cdd68922d143c6d1f18f66572251b7078e9e850\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503932090 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1505677213 +0200\n\nGet the miri test suite to run inside the rustc dev environment\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f381744d91d214501c96c67b3a5687207ee7ff42", "html_url": "https://github.com/rust-lang/rust/commit/f381744d91d214501c96c67b3a5687207ee7ff42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f381744d91d214501c96c67b3a5687207ee7ff42/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdd68922d143c6d1f18f66572251b7078e9e850", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdd68922d143c6d1f18f66572251b7078e9e850", "html_url": "https://github.com/rust-lang/rust/commit/1cdd68922d143c6d1f18f66572251b7078e9e850"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "2802c8d63913f8aa43a39628e2877e81d9ee98ff", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -39,3 +39,6 @@\n [submodule \"src/tools/rustfmt\"]\n \tpath = src/tools/rustfmt\n \turl = https://github.com/rust-lang-nursery/rustfmt.git\n+[submodule \"src/tools/miri\"]\n+\tpath = src/tools/miri\n+\turl = https://github.com/solson/miri.git"}, {"sha": "a3790c8d202587c7ee13a206f476057ee8c5f376", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -291,6 +291,10 @@\n # When creating source tarballs whether or not to create a source tarball.\n #dist-src = false\n \n+# Whether to also run the Miri tests suite when running tests.\n+# As a side-effect also generates MIR for all libraries.\n+#test-miri = false\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "fc27c5d3866c371ac7544b59883d74e96004970b", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -246,6 +246,12 @@ fn main() {\n             }\n         }\n \n+        // When running miri tests, we need to generate MIR for all libraries\n+        if env::var(\"TEST_MIRI\").ok().map_or(false, |val| val == \"true\") && stage != \"0\" {\n+            cmd.arg(\"-Zalways-encode-mir\");\n+            cmd.arg(\"-Zmir-emit-validate=1\");\n+        }\n+\n         // Force all crates compiled by this compiler to (a) be unstable and (b)\n         // allow the `rustc_private` feature to link to other unstable crates\n         // also in the sysroot."}, {"sha": "9df7d6c6bef007158e9c4bac80657565caca13e8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -249,11 +249,11 @@ impl<'a> Builder<'a> {\n                 tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n                 tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc, tool::Clippy,\n-                native::Llvm, tool::Rustfmt),\n+                native::Llvm, tool::Rustfmt, tool::Miri),\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Rustdoc,\n                 check::Linkcheck, check::Cargotest, check::Cargo, check::Rls, check::Docs,\n-                check::ErrorIndex, check::Distcheck, check::Rustfmt),\n+                check::ErrorIndex, check::Distcheck, check::Rustfmt, check::Miri),\n             Kind::Bench => describe!(check::Crate, check::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,\n@@ -475,6 +475,7 @@ impl<'a> Builder<'a> {\n              } else {\n                  PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n              })\n+             .env(\"TEST_MIRI\", self.config.test_miri.to_string())\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n         if mode != Mode::Tool {"}, {"sha": "d2e0a8e93681cb4e7ba010043cffb60a63a334e1", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -293,6 +293,50 @@ impl Step for Rustfmt {\n         try_run(build, &mut cargo);\n     }\n }\n+pub struct Miri {\n+    host: Interned<String>,\n+}\n+\n+impl Step for Miri {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let test_miri = run.builder.build.config.test_miri;\n+        run.path(\"src/tools/miri\").default_condition(test_miri)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Miri {\n+            host: run.target,\n+        });\n+    }\n+\n+    /// Runs `cargo test` for miri.\n+    fn run(self, builder: &Builder) {\n+        let build = builder.build;\n+        let host = self.host;\n+        let compiler = builder.compiler(1, host);\n+\n+        let miri = builder.ensure(tool::Miri { compiler, target: self.host });\n+        let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n+        cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/miri/Cargo.toml\"));\n+\n+        // Don't build tests dynamically, just a pain to work with\n+        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+        // miri tests need to know about the stage sysroot\n+        cargo.env(\"MIRI_SYSROOT\", builder.sysroot(compiler));\n+        cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n+        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n+        cargo.env(\"MIRI_PATH\", miri);\n+\n+        builder.add_rustc_lib_path(compiler, &mut cargo);\n+\n+        try_run(build, &mut cargo);\n+    }\n+}\n+\n \n fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     // Configure PATH to find the right rustc. NB. we have to use PATH"}, {"sha": "349482eab5f879692472388fcad598730d6a629b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -111,6 +111,7 @@ pub struct Config {\n     pub low_priority: bool,\n     pub channel: String,\n     pub quiet_tests: bool,\n+    pub test_miri: bool,\n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<PathBuf>,\n@@ -269,6 +270,7 @@ struct Rust {\n     debug: Option<bool>,\n     dist_src: Option<bool>,\n     quiet_tests: Option<bool>,\n+    test_miri: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -304,6 +306,7 @@ impl Config {\n         config.codegen_tests = true;\n         config.ignore_git = false;\n         config.rust_dist_src = true;\n+        config.test_miri = false;\n \n         config.on_fail = flags.on_fail;\n         config.stage = flags.stage;\n@@ -444,6 +447,7 @@ impl Config {\n             set(&mut config.channel, rust.channel.clone());\n             set(&mut config.rust_dist_src, rust.dist_src);\n             set(&mut config.quiet_tests, rust.quiet_tests);\n+            set(&mut config.test_miri, rust.test_miri);\n             config.rustc_default_linker = rust.default_linker.clone();\n             config.rustc_default_ar = rust.default_ar.clone();\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);"}, {"sha": "2438be89776da9217e5cd2528beb07abcb17a4a5", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -38,6 +38,7 @@ def v(*args):\n o(\"docs\", \"build.docs\", \"build standard library documentation\")\n o(\"compiler-docs\", \"build.compiler-docs\", \"build compiler documentation\")\n o(\"optimize-tests\", \"rust.optimize-tests\", \"build tests with optimizations\")\n+o(\"test-miri\", \"rust.test-miri\", \"run miri's test suite\")\n o(\"debuginfo-tests\", \"rust.debuginfo-tests\", \"build tests with debugger metadata\")\n o(\"quiet-tests\", \"rust.quiet-tests\", \"enable quieter output when running tests\")\n o(\"ccache\", \"llvm.ccache\", \"invoke gcc/clang via ccache to reuse object files between builds\")"}, {"sha": "004f0c31024cd999a367d30059570f22e236eef8", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -56,6 +56,7 @@ check-aux:\n \t\tsrc/tools/cargo \\\n \t\tsrc/tools/rls \\\n \t\tsrc/tools/rustfmt \\\n+\t\tsrc/tools/miri \\\n \t\tsrc/test/pretty \\\n \t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\"}, {"sha": "541247804857b02424abebc62d1c26b5c4ece052", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -479,6 +479,41 @@ impl Step for Rustfmt {\n     }\n }\n \n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Miri {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Miri {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let builder = run.builder;\n+        run.path(\"src/tools/miri\").default_condition(builder.build.config.test_miri)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Miri {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> PathBuf {\n+        builder.ensure(ToolBuild {\n+            compiler: self.compiler,\n+            target: self.target,\n+            tool: \"miri\",\n+            mode: Mode::Librustc,\n+            path: \"src/tools/miri\",\n+        })\n+    }\n+}\n+\n impl<'a> Builder<'a> {\n     /// Get a `Command` which is ready to run `tool` in `stage` built for\n     /// `host`."}, {"sha": "a453c62cc9e83e10ff0c187d4ad3b2da4e399b20", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -17,5 +17,5 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-test-miri\n ENV RUST_CHECK_TARGET check-aux"}, {"sha": "ce3576f7d81931f77264f85a3c68077605310019", "filename": "src/tools/miri", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -0,0 +1 @@\n+Subproject commit ce3576f7d81931f77264f85a3c68077605310019"}, {"sha": "90bf7a5e0a6877ba72c20bbbe2abf5805c76522a", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f381744d91d214501c96c67b3a5687207ee7ff42/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=f381744d91d214501c96c67b3a5687207ee7ff42", "patch": "@@ -65,6 +65,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/clippy\",\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n+        \"src/tools/miri\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}