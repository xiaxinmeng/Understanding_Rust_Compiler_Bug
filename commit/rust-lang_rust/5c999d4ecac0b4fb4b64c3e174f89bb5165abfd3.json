{"sha": "5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOTk5ZDRlY2FjMGI0ZmI0YjY0YzNlMTc0Zjg5YmI1MTY1YWJmZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-20T17:55:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-20T17:55:34Z"}, "message": "auto merge of #7894 : pcwalton/rust/and-pointers-in-at-boxes, r=brson\n\nr? @brson", "tree": {"sha": "4b39e15a052cec1cd0fb69fb911a7b7ca0641c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b39e15a052cec1cd0fb69fb911a7b7ca0641c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "html_url": "https://github.com/rust-lang/rust/commit/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aae6edce09a8e2a32a154acb55c9879dbebf99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aae6edce09a8e2a32a154acb55c9879dbebf99c", "html_url": "https://github.com/rust-lang/rust/commit/8aae6edce09a8e2a32a154acb55c9879dbebf99c"}, {"sha": "9089cf2ec9297a3b558d24352cde6a5206a08444", "url": "https://api.github.com/repos/rust-lang/rust/commits/9089cf2ec9297a3b558d24352cde6a5206a08444", "html_url": "https://github.com/rust-lang/rust/commit/9089cf2ec9297a3b558d24352cde6a5206a08444"}], "stats": {"total": 165, "additions": 84, "deletions": 81}, "files": [{"sha": "edbe323ec2d0bde3c07755bc45d5f03a5c488e06", "filename": "src/libextra/fun_treemap.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibextra%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibextra%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffun_treemap.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -31,10 +31,17 @@ enum TreeNode<K, V> {\n }\n \n /// Create a treemap\n-pub fn init<K, V>() -> Treemap<K, V> { @Empty }\n+pub fn init<K: 'static, V: 'static>() -> Treemap<K, V> {\n+    @Empty\n+}\n \n /// Insert a value into the map\n-pub fn insert<K:Eq + Ord,V>(m: Treemap<K, V>, k: K, v: V) -> Treemap<K, V> {\n+pub fn insert<K:Eq + Ord + 'static,\n+              V:'static>(\n+              m: Treemap<K, V>,\n+              k: K,\n+              v: V)\n+              -> Treemap<K, V> {\n     @match m {\n         @Empty => Node(@k, @v, @Empty, @Empty),\n         @Node(kk, vv, left, right) => cond!(\n@@ -46,7 +53,11 @@ pub fn insert<K:Eq + Ord,V>(m: Treemap<K, V>, k: K, v: V) -> Treemap<K, V> {\n }\n \n /// Find a value based on the key\n-pub fn find<K:Eq + Ord,V:Clone>(m: Treemap<K, V>, k: K) -> Option<V> {\n+pub fn find<K:Eq + Ord + 'static,\n+            V:Clone + 'static>(\n+            m: Treemap<K, V>,\n+            k: K)\n+            -> Option<V> {\n     match *m {\n         Empty => None,\n         Node(kk, v, left, right) => cond!("}, {"sha": "8f7ade7228b0205e422d6ac42e5aac96af181738", "filename": "src/libextra/list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibextra%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibextra%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flist.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -25,7 +25,7 @@ pub enum MutList<T> {\n }\n \n /// Create a list from a vector\n-pub fn from_vec<T:Clone>(v: &[T]) -> @List<T> {\n+pub fn from_vec<T:Clone + 'static>(v: &[T]) -> @List<T> {\n     v.rev_iter().fold(@Nil::<T>, |t, h| @Cons((*h).clone(), t))\n }\n \n@@ -109,7 +109,7 @@ pub fn head<T:Clone>(ls: @List<T>) -> T {\n }\n \n /// Appends one list to another\n-pub fn append<T:Clone>(l: @List<T>, m: @List<T>) -> @List<T> {\n+pub fn append<T:Clone + 'static>(l: @List<T>, m: @List<T>) -> @List<T> {\n     match *l {\n       Nil => return m,\n       Cons(ref x, xs) => {"}, {"sha": "679e5e46547c615fc560d366294daea66f86b5c6", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -423,7 +423,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for @T {\n     }\n }\n \n-impl<D:Decoder,T:Decodable<D>> Decodable<D> for @T {\n+impl<D:Decoder,T:Decodable<D> + 'static> Decodable<D> for @T {\n     fn decode(d: &mut D) -> @T {\n         @Decodable::decode(d)\n     }\n@@ -435,7 +435,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for @mut T {\n     }\n }\n \n-impl<D:Decoder,T:Decodable<D>> Decodable<D> for @mut T {\n+impl<D:Decoder,T:Decodable<D> + 'static> Decodable<D> for @mut T {\n     fn decode(d: &mut D) -> @mut T {\n         @mut Decodable::decode(d)\n     }"}, {"sha": "3ad85a8cedf0ffae23fb376b6f733e5e0ab66e64", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -1238,8 +1238,9 @@ fn encode_info_for_items(ecx: &EncodeContext,\n \n // Path and definition ID indexing\n \n-fn create_index<T:Clone + Hash + IterBytes>(index: ~[entry<T>])\n-                                            -> ~[@~[entry<T>]] {\n+fn create_index<T:Clone + Hash + IterBytes + 'static>(\n+                index: ~[entry<T>])\n+                -> ~[@~[entry<T>]] {\n     let mut buckets: ~[@mut ~[entry<T>]] = ~[];\n     for uint::range(0u, 256u) |_i| { buckets.push(@mut ~[]); };\n     for index.iter().advance |elt| {\n@@ -1254,9 +1255,10 @@ fn create_index<T:Clone + Hash + IterBytes>(index: ~[entry<T>])\n     return buckets_frozen;\n }\n \n-fn encode_index<T>(ebml_w: &mut writer::Encoder,\n-                   buckets: ~[@~[entry<T>]],\n-                   write_fn: &fn(@io::Writer, &T)) {\n+fn encode_index<T:'static>(\n+                ebml_w: &mut writer::Encoder,\n+                buckets: ~[@~[entry<T>]],\n+                write_fn: &fn(@io::Writer, &T)) {\n     let writer = ebml_w.writer;\n     ebml_w.start_tag(tag_index);\n     let mut bucket_locs: ~[uint] = ~[];"}, {"sha": "acb01e5bf67a6f3b1e107db9610105ab522ca6bd", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -285,6 +285,10 @@ pub fn check_expr(e: @expr, (cx, v): (Context, visit::vt<Context>)) {\n     }\n \n     match e.node {\n+        expr_unary(_, box(_), interior) => {\n+            let interior_type = ty::expr_ty(cx.tcx, interior);\n+            let _ = check_durable(cx.tcx, interior_type, interior.span);\n+        }\n         expr_cast(source, _) => {\n             check_cast_for_escaping_regions(cx, source, e);\n             match ty::get(ty::expr_ty(cx.tcx, e)).sty {"}, {"sha": "d43cea2c7336a588f06a2f1f3de9901927ff97c0", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -79,7 +79,7 @@ impl<T:Subst> Subst for ~[T] {\n     }\n }\n \n-impl<T:Subst> Subst for @T {\n+impl<T:Subst + 'static> Subst for @T {\n     fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> @T {\n         match self {\n             &@ref t => @t.subst(tcx, substs)"}, {"sha": "0f48f5e75afb78b80a0ef9e5d2f8db46d3b924c4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -858,7 +858,7 @@ fn mk_rcache() -> creader_cache {\n     return @mut HashMap::new();\n }\n \n-pub fn new_ty_hash<V>() -> @mut HashMap<t, V> {\n+pub fn new_ty_hash<V:'static>() -> @mut HashMap<t, V> {\n     @mut HashMap::new()\n }\n "}, {"sha": "d7220fdeb60bfd51907924282059fa4b21294bbe", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -112,15 +112,15 @@ impl<T: DeepClone> DeepClone for ~T {\n }\n \n // FIXME: #6525: should also be implemented for `T: Send + DeepClone`\n-impl<T: Freeze + DeepClone> DeepClone for @T {\n+impl<T: Freeze + DeepClone + 'static> DeepClone for @T {\n     /// Return a deep copy of the managed box. The `Freeze` trait is required to prevent performing\n     /// a deep clone of a potentially cyclical type.\n     #[inline]\n     fn deep_clone(&self) -> @T { @(**self).deep_clone() }\n }\n \n // FIXME: #6525: should also be implemented for `T: Send + DeepClone`\n-impl<T: Freeze + DeepClone> DeepClone for @mut T {\n+impl<T: Freeze + DeepClone + 'static> DeepClone for @mut T {\n     /// Return a deep copy of the managed box. The `Freeze` trait is required to prevent performing\n     /// a deep clone of a potentially cyclical type.\n     #[inline]"}, {"sha": "f35f495def3a1645a776e71f0bdc894308dc29aa", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -446,12 +446,12 @@ pub fn pow_with_uint<T:NumCast+One+Zero+Div<T,T>+Mul<T,T>>(radix: uint, pow: uin\n     total\n }\n \n-impl<T: Zero> Zero for @mut T {\n+impl<T: Zero + 'static> Zero for @mut T {\n     fn zero() -> @mut T { @mut Zero::zero() }\n     fn is_zero(&self) -> bool { (**self).is_zero() }\n }\n \n-impl<T: Zero> Zero for @T {\n+impl<T: Zero + 'static> Zero for @T {\n     fn zero() -> @T { @Zero::zero() }\n     fn is_zero(&self) -> bool { (**self).is_zero() }\n }"}, {"sha": "c2fb94f37bb6a5b453a9e07aafd15c9b7870f22d", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -242,7 +242,7 @@ impl<T: Rand> Rand for ~T {\n     fn rand<R: Rng>(rng: &mut R) -> ~T { ~rng.gen() }\n }\n \n-impl<T: Rand> Rand for @T {\n+impl<T: Rand + 'static> Rand for @T {\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> @T { @rng.gen() }\n }"}, {"sha": "2f86a0460d1bb455d9e1b371a76f87f7ffc61eb3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -414,8 +414,7 @@ pub enum MapChain<K,V> {\n \n \n // get the map from an env frame\n-impl <K: Eq + Hash + IterBytes, V> MapChain<K,V>{\n-\n+impl <K: Eq + Hash + IterBytes + 'static, V: 'static> MapChain<K,V>{\n     // Constructor. I don't think we need a zero-arg one.\n     fn new(init: ~HashMap<K,@V>) -> @mut MapChain<K,V> {\n         @mut BaseMapChain(init)"}, {"sha": "014186c9ff415f44ac527db887b20fdba26120ce", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -21,7 +21,7 @@ pub struct Interner<T> {\n }\n \n // when traits can extend traits, we should extend index<uint,T> to get []\n-impl<T:Eq + IterBytes + Hash + Freeze + Clone> Interner<T> {\n+impl<T:Eq + IterBytes + Hash + Freeze + Clone + 'static> Interner<T> {\n     pub fn new() -> Interner<T> {\n         Interner {\n             map: @mut HashMap::new(),"}, {"sha": "b8e831c4503ec1211d42117378b7e04f67d614c2", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -18,11 +18,15 @@ pub struct alist<A,B> {\n     data: @mut ~[Entry<A,B>]\n }\n \n-pub fn alist_add<A,B>(lst: &alist<A,B>, k: A, v: B) {\n+pub fn alist_add<A:'static,B:'static>(lst: &alist<A,B>, k: A, v: B) {\n     lst.data.push(Entry{key:k, value:v});\n }\n \n-pub fn alist_get<A:Clone,B:Clone>(lst: &alist<A,B>, k: A) -> B {\n+pub fn alist_get<A:Clone + 'static,\n+                 B:Clone + 'static>(\n+                 lst: &alist<A,B>,\n+                 k: A)\n+                 -> B {\n     let eq_fn = lst.eq_fn;\n     for lst.data.iter().advance |entry| {\n         if eq_fn(entry.key.clone(), k.clone()) {\n@@ -33,13 +37,13 @@ pub fn alist_get<A:Clone,B:Clone>(lst: &alist<A,B>, k: A) -> B {\n }\n \n #[inline]\n-pub fn new_int_alist<B>() -> alist<int, B> {\n+pub fn new_int_alist<B:'static>() -> alist<int, B> {\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {eq_fn: eq_int, data: @mut ~[]};\n }\n \n #[inline]\n-pub fn new_int_alist_2<B>() -> alist<int, B> {\n+pub fn new_int_alist_2<B:'static>() -> alist<int, B> {\n     #[inline]\n     fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {eq_fn: eq_int, data: @mut ~[]};"}, {"sha": "69d7bedbd371816956efe7657165b125feac08fe", "filename": "src/test/compile-fail/box-static-bound.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -0,0 +1,10 @@\n+fn f<T>(x: T) -> @T {\n+    @x  //~ ERROR value may contain borrowed pointers\n+}\n+\n+fn g<T:'static>(x: T) -> @T {\n+    @x  // ok\n+}\n+\n+fn main() {}\n+"}, {"sha": "ef9cbfe5dd93272c959beee1877580e44daabb13", "filename": "src/test/compile-fail/kindck-owned-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -14,6 +14,7 @@ fn to_foo<T:Clone + foo>(t: T) -> @foo {\n     @t as @foo\n     //~^ ERROR value may contain borrowed pointers; add `'static` bound\n     //~^^ ERROR cannot pack type\n+    //~^^^ ERROR value may contain borrowed pointers\n }\n \n fn to_foo2<T:Clone + foo + 'static>(t: T) -> @foo {"}, {"sha": "2dfdb2629f7f4f2374dda3ff41f63db30922c1d1", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -23,5 +23,6 @@ fn main() {\n     copy2(&x); //~ ERROR does not fulfill `'static`\n \n     copy2(@3);\n-    copy2(@&x); //~ ERROR does not fulfill `'static`\n+    copy2(@&x); //~ ERROR value may contain borrowed pointers\n+    //~^ ERROR does not fulfill `'static`\n }"}, {"sha": "e924c31bad6b5dfef0b242d186a74e068bc654c3", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -18,12 +18,16 @@ struct Rec<A> {\n     rec: Option<@mut RecEnum<A>>\n }\n \n-fn make_cycle<A>(a: A) {\n+fn make_cycle<A:'static>(a: A) {\n     let g: @mut RecEnum<A> = @mut RecEnum(Rec {val: a, rec: None});\n     g.rec = Some(g);\n }\n \n-fn f<A:Send + Clone,B:Send + Clone>(a: A, b: B) -> @fn() -> (A, B) {\n+fn f<A:Send + Clone + 'static,\n+     B:Send + Clone + 'static>(\n+     a: A,\n+     b: B)\n+     -> @fn() -> (A, B) {\n     let result: @fn() -> (A, B) = || (a.clone(), b.clone());\n     result\n }"}, {"sha": "ce1582b3c3c7e2455702bdd103ca59fb9d3b3b26", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn box<T>(x: Box<T>) -> @Box<T> { return @x; }\n+fn box<T:'static>(x: Box<T>) -> @Box<T> { return @x; }\n \n struct Box<T> {x: T, y: T, z: T}\n "}, {"sha": "795c73007d55e8a787351d75021516dd30641d01", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -12,7 +12,7 @@\n \n struct Recbox<T> {x: @T}\n \n-fn reclift<T>(t: T) -> Recbox<T> { return Recbox {x: @t}; }\n+fn reclift<T:'static>(t: T) -> Recbox<T> { return Recbox {x: @t}; }\n \n pub fn main() {\n     let foo: int = 17;"}, {"sha": "6f2fd54bc9cbc499af7613e7eb68a38c7c521d0c", "filename": "src/test/run-pass/infer-with-expected.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -14,12 +14,12 @@\n // happen.)\n \n fn eat_tup(_r: ~@(int, @fn(Pair) -> int)) {}\n-fn eat_rec(_r: @~Rec) {}\n+fn eat_rec(_r: ~Rec) {}\n \n struct Rec<'self> { a: int, b: &'self fn(Pair) -> int }\n struct Pair { x: int, y: int }\n \n pub fn main() {\n     eat_tup(~@(10, |a| a.x ));\n-    eat_rec(@~Rec{a: 10, b: |a| a.x });\n+    eat_rec(~Rec{a: 10, b: |a| a.x });\n }"}, {"sha": "64483ab80a4f0db301fff9040d1382a4d68642d4", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct list<'self, T> {\n-    element: &'self T,\n-    next: Option<@mut list<'self, T>>\n+static S: &'static str = \"str\";\n+\n+struct list<T> {\n+    element: T,\n+    next: Option<@mut list<T>>\n }\n \n-impl<'self, T> list<'self, T>{\n-    pub fn addEnd(&mut self, element: &'self T) {\n+impl<T:'static> list<T> {\n+    pub fn addEnd(&mut self, element: T) {\n         let newList = list {\n             element: element,\n             next: None\n@@ -25,10 +27,9 @@ impl<'self, T> list<'self, T>{\n }\n \n pub fn main() {\n-    let s = @\"str\";\n     let ls = list {\n-        element: &s,\n+        element: S,\n         next: None\n     };\n-    println(*ls.element);\n+    println(ls.element);\n }"}, {"sha": "29a89a65a9b17236080abece2cdae7313ae7eee4", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -10,19 +10,19 @@\n \n trait repeat<A> { fn get(&self) -> A; }\n \n-impl<A:Clone> repeat<A> for @A {\n+impl<A:Clone + 'static> repeat<A> for @A {\n     fn get(&self) -> A {\n         (**self).clone()\n     }\n }\n \n-fn repeater<A:Clone>(v: @A) -> @repeat:<A> {\n+fn repeater<A:Clone + 'static>(v: @A) -> @repeat:<A> {\n     // Note: owned kind is not necessary as A appears in the trait type\n     @v as @repeat:<A> // No\n }\n \n pub fn main() {\n-    let x = &3;\n+    let x = 3;\n     let y = repeater(@x);\n-    assert_eq!(*x, *(y.get()));\n+    assert_eq!(x, y.get());\n }"}, {"sha": "97b8c77c31567ecbdded2ca33a3e5bf5cdeb7ede", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=5c999d4ecac0b4fb4b64c3e174f89bb5165abfd3", "patch": "@@ -19,12 +19,12 @@ struct Smallintmap<T> {v: ~[option<T>]}\n \n struct V<T> { v: ~[option<T>] }\n \n-fn mk<T>() -> @mut Smallintmap<T> {\n+fn mk<T:'static>() -> @mut Smallintmap<T> {\n     let mut v: ~[option<T>] = ~[];\n     return @mut Smallintmap {v: v};\n }\n \n-fn f<T,U>() {\n+fn f<T,U:'static>() {\n     let mut sim = mk::<U>();\n     error!(sim);\n }"}, {"sha": "049d5305ca427f68b0cad94024e3c0e4bdb26606", "filename": "src/test/run-pass/regions-trait.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8aae6edce09a8e2a32a154acb55c9879dbebf99c/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aae6edce09a8e2a32a154acb55c9879dbebf99c/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=8aae6edce09a8e2a32a154acb55c9879dbebf99c", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct Ctxt { v: uint }\n-\n-trait get_ctxt<'self> {\n-    fn get_ctxt(&self) -> &'self Ctxt;\n-}\n-\n-struct HasCtxt<'self> { c: &'self Ctxt }\n-\n-impl<'self> get_ctxt<'self> for HasCtxt<'self> {\n-    fn get_ctxt(&self) -> &'self Ctxt {\n-        self.c\n-    }\n-}\n-\n-fn get_v(gc: @get_ctxt:) -> uint {\n-    gc.get_ctxt().v\n-}\n-\n-pub fn main() {\n-    let ctxt = Ctxt { v: 22 };\n-    let hc = HasCtxt { c: &ctxt };\n-\n-    assert_eq!(get_v(@hc as @get_ctxt:), 22);\n-}"}]}