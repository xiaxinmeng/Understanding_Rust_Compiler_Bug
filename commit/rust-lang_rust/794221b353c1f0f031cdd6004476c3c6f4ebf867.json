{"sha": "794221b353c1f0f031cdd6004476c3c6f4ebf867", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDIyMWIzNTNjMWYwZjAzMWNkZDYwMDQ0NzZjM2M2ZjRlYmY4Njc=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-06-04T20:34:26Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-06-04T20:36:08Z"}, "message": "rustc: Return the correct span from parse_seq", "tree": {"sha": "0c83cff9981541d6202110e2d3cf94a40218e9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c83cff9981541d6202110e2d3cf94a40218e9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/794221b353c1f0f031cdd6004476c3c6f4ebf867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/794221b353c1f0f031cdd6004476c3c6f4ebf867", "html_url": "https://github.com/rust-lang/rust/commit/794221b353c1f0f031cdd6004476c3c6f4ebf867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/794221b353c1f0f031cdd6004476c3c6f4ebf867/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c18f2e2dac5f733fd3f6d21c043a0ccf7d26e320", "url": "https://api.github.com/repos/rust-lang/rust/commits/c18f2e2dac5f733fd3f6d21c043a0ccf7d26e320", "html_url": "https://github.com/rust-lang/rust/commit/c18f2e2dac5f733fd3f6d21c043a0ccf7d26e320"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "f23a1eece2dc830ca1d873e3c90a9100a20da849", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/794221b353c1f0f031cdd6004476c3c6f4ebf867/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794221b353c1f0f031cdd6004476c3c6f4ebf867/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=794221b353c1f0f031cdd6004476c3c6f4ebf867", "patch": "@@ -608,7 +608,6 @@ fn parse_arg(&parser p) -> ast::arg {\n fn parse_seq_to_end[T](token::token ket,\n                        option::t[token::token] sep,\n                        (fn(&parser) -> T) f,\n-                       uint hi,\n                        &parser p) -> vec[T] {\n     let bool first = true;\n     let vec[T] v = [];\n@@ -628,7 +627,6 @@ fn parse_seq_to_end[T](token::token ket,\n         let T t = f(p);\n         v += [t];\n     }\n-    hi = p.get_hi_pos();\n     expect(p, ket);\n     ret v;\n }\n@@ -639,9 +637,9 @@ fn parse_seq[T](token::token bra,\n                 (fn(&parser) -> T) f,\n                 &parser p) -> util::common::spanned[vec[T]] {\n     auto lo = p.get_lo_pos();\n-    auto hi = p.get_hi_pos();\n     expect(p, bra);\n-    auto result = parse_seq_to_end[T](ket, sep, f, hi, p);\n+    auto result = parse_seq_to_end[T](ket, sep, f, p);\n+    auto hi = p.get_hi_pos();\n     ret spanned(lo, hi, result);\n }\n \n@@ -823,7 +821,7 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n \n         auto es = parse_seq_to_end[@ast::expr](token::RBRACKET,\n                                                some(token::COMMA),\n-                                               pf, hi, p);\n+                                               pf, p);\n         ex = ast::expr_vec(es, mut, p.get_ann());\n     } else if (eat_word(p, \"obj\")) {\n         // Anonymous object\n@@ -836,15 +834,14 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n             none[vec[ast::obj_field]];\n         if (p.peek() == token::LPAREN) {\n             auto pf = parse_obj_field;\n-            hi = p.get_hi_pos();\n             expect(p, token::LPAREN);\n \n \n             fields = some[vec[ast::obj_field]]\n                 (parse_seq_to_end[ast::obj_field] \n                  (token::RPAREN,\n                   some(token::COMMA),\n-                  pf, hi, p));\n+                  pf, p));\n         }\n \n         let vec[@ast::method] meths = [];"}]}