{"sha": "5e9b50d4f5c62afbee8f913661ad7b31d34a15bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOWI1MGQ0ZjVjNjJhZmJlZThmOTEzNjYxYWQ3YjMxZDM0YTE1YmY=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-06-09T14:32:58Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-16T19:18:55Z"}, "message": "fix lint", "tree": {"sha": "e5dcedd6bc7b36b511f63eb2877162885f9bf685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5dcedd6bc7b36b511f63eb2877162885f9bf685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e9b50d4f5c62afbee8f913661ad7b31d34a15bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9b50d4f5c62afbee8f913661ad7b31d34a15bf", "html_url": "https://github.com/rust-lang/rust/commit/5e9b50d4f5c62afbee8f913661ad7b31d34a15bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e9b50d4f5c62afbee8f913661ad7b31d34a15bf/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a3762b912e00e893b5021c68132c1a684f6db0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a3762b912e00e893b5021c68132c1a684f6db0", "html_url": "https://github.com/rust-lang/rust/commit/e1a3762b912e00e893b5021c68132c1a684f6db0"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "857e913bb3efd38de4865a828484b0a98c5020cf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e9b50d4f5c62afbee8f913661ad7b31d34a15bf/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9b50d4f5c62afbee8f913661ad7b31d34a15bf/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5e9b50d4f5c62afbee8f913661ad7b31d34a15bf", "patch": "@@ -4488,7 +4488,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         for UseError { mut err, candidates, node_id, better } in self.use_injections.drain(..) {\n             let (span, found_use) = UsePlacementFinder::check(krate, node_id);\n             if !candidates.is_empty() {\n-                show_candidates(&mut err, span, &candidates, better, found_use, self.session.features_untracked().crate_in_paths);\n+                let crate_in_paths = self.session.features_untracked().crate_in_paths;\n+                show_candidates(&mut err, span, &candidates, better, found_use, crate_in_paths);\n             }\n             err.emit();\n         }"}]}