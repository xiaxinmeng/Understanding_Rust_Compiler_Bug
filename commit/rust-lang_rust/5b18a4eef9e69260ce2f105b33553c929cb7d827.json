{"sha": "5b18a4eef9e69260ce2f105b33553c929cb7d827", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMThhNGVlZjllNjkyNjBjZTJmMTA1YjMzNTUzYzkyOWNiN2Q4Mjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-23T12:55:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-23T13:59:50Z"}, "message": "rename struct -> record, pos -> tuple", "tree": {"sha": "15f55b3eab48c3d0bbb1975fbd4db7cbb56d3e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15f55b3eab48c3d0bbb1975fbd4db7cbb56d3e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b18a4eef9e69260ce2f105b33553c929cb7d827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b18a4eef9e69260ce2f105b33553c929cb7d827", "html_url": "https://github.com/rust-lang/rust/commit/5b18a4eef9e69260ce2f105b33553c929cb7d827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b18a4eef9e69260ce2f105b33553c929cb7d827/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c12dce0073c1766f7d2b10a69f8526a8093e70dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12dce0073c1766f7d2b10a69f8526a8093e70dc", "html_url": "https://github.com/rust-lang/rust/commit/c12dce0073c1766f7d2b10a69f8526a8093e70dc"}], "stats": {"total": 1190, "additions": 598, "deletions": 592}, "files": [{"sha": "6815638dc87c220af6c859668b36552f2091f9df", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -93,15 +93,15 @@ impl<N: AstNode> AstEditor<N> {\n     }\n }\n \n-impl AstEditor<ast::NamedFieldList> {\n-    pub fn append_field(&mut self, field: &ast::NamedField) {\n+impl AstEditor<ast::RecordFieldList> {\n+    pub fn append_field(&mut self, field: &ast::RecordField) {\n         self.insert_field(InsertPosition::Last, field)\n     }\n \n     pub fn insert_field(\n         &mut self,\n-        position: InsertPosition<&'_ ast::NamedField>,\n-        field: &ast::NamedField,\n+        position: InsertPosition<&'_ ast::RecordField>,\n+        field: &ast::RecordField,\n     ) {\n         let is_multiline = self.ast().syntax().text().contains_char('\\n');\n         let ws;\n@@ -245,16 +245,16 @@ pub struct AstBuilder<N: AstNode> {\n     _phantom: std::marker::PhantomData<N>,\n }\n \n-impl AstBuilder<ast::NamedField> {\n-    pub fn from_name(name: &Name) -> ast::NamedField {\n+impl AstBuilder<ast::RecordField> {\n+    pub fn from_name(name: &Name) -> ast::RecordField {\n         ast_node_from_file_text(&format!(\"fn f() {{ S {{ {}: (), }} }}\", name))\n     }\n \n-    fn from_text(text: &str) -> ast::NamedField {\n+    fn from_text(text: &str) -> ast::RecordField {\n         ast_node_from_file_text(&format!(\"fn f() {{ S {{ {}, }} }}\", text))\n     }\n \n-    pub fn from_pieces(name: &ast::NameRef, expr: Option<&ast::Expr>) -> ast::NamedField {\n+    pub fn from_pieces(name: &ast::NameRef, expr: Option<&ast::Expr>) -> ast::RecordField {\n         match expr {\n             Some(expr) => Self::from_text(&format!(\"{}: {}\", name.syntax(), expr.syntax())),\n             None => Self::from_text(&name.syntax().to_string()),\n@@ -336,12 +336,12 @@ impl AstBuilder<ast::TupleStructPat> {\n     }\n }\n \n-impl AstBuilder<ast::StructPat> {\n-    fn from_text(text: &str) -> ast::StructPat {\n+impl AstBuilder<ast::RecordPat> {\n+    fn from_text(text: &str) -> ast::RecordPat {\n         ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n     }\n \n-    pub fn from_pieces(path: &ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::StructPat {\n+    pub fn from_pieces(path: &ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::RecordPat {\n         let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n         Self::from_text(&format!(\"{}{{ {} }}\", path.syntax(), pats_str))\n     }"}, {"sha": "60c74debcaa19fc2610ac38a932c369ac1bceb3f", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -38,7 +38,7 @@ fn add_vis(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         (vis_offset(&parent), keyword.text_range())\n     } else {\n         let ident = ctx.token_at_offset().find(|leaf| leaf.kind() == IDENT)?;\n-        let field = ident.parent().ancestors().find_map(ast::NamedFieldDef::cast)?;\n+        let field = ident.parent().ancestors().find_map(ast::RecordFieldDef::cast)?;\n         if field.name()?.syntax().text_range() != ident.text_range() && field.visibility().is_some()\n         {\n             return None;"}, {"sha": "cc387956247b5469e0d7e18115fd4420d360df25", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -78,7 +78,7 @@ fn build_pat(var: ast::EnumVariant) -> Option<ast::Pat> {\n             let pats = field_list\n                 .fields()\n                 .map(|f| AstBuilder::<ast::BindPat>::from_name(&f.name().unwrap()).into());\n-            AstBuilder::<ast::StructPat>::from_pieces(path, pats).into()\n+            AstBuilder::<ast::RecordPat>::from_pieces(path, pats).into()\n         }\n         ast::StructKind::Unit => AstBuilder::<ast::PathPat>::from_path(path).into(),\n     };"}, {"sha": "66a58efed3dd67968099a8f64abcd027209fe7f6", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -318,8 +318,8 @@ pub struct StructField {\n \n #[derive(Debug)]\n pub enum FieldSource {\n-    Named(ast::NamedFieldDef),\n-    Pos(ast::PosFieldDef),\n+    Named(ast::RecordFieldDef),\n+    Pos(ast::TupleFieldDef),\n }\n \n impl StructField {"}, {"sha": "301109cb8daf8fc44a5d66f49f1ff4bd5934dae4", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -79,7 +79,7 @@ impl<'a> DiagnosticSink<'a> {\n #[derive(Debug)]\n pub struct NoSuchField {\n     pub file: HirFileId,\n-    pub field: AstPtr<ast::NamedField>,\n+    pub field: AstPtr<ast::RecordField>,\n }\n \n impl Diagnostic for NoSuchField {\n@@ -118,7 +118,7 @@ impl Diagnostic for UnresolvedModule {\n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,\n-    pub field_list: AstPtr<ast::NamedFieldList>,\n+    pub field_list: AstPtr<ast::RecordFieldList>,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -135,11 +135,11 @@ impl Diagnostic for MissingFields {\n }\n \n impl AstDiagnostic for MissingFields {\n-    type AST = ast::NamedFieldList;\n+    type AST = ast::RecordFieldList;\n \n     fn ast(&self, db: &impl HirDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().ast.to_node(&root);\n-        ast::NamedFieldList::cast(node).unwrap()\n+        ast::RecordFieldList::cast(node).unwrap()\n     }\n }"}, {"sha": "9e85849084a06b44e0f807a3ad62438524ba4ef2", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -60,7 +60,7 @@ pub struct BodySourceMap {\n     expr_map_back: ArenaMap<ExprId, SyntaxNodePtr>,\n     pat_map: FxHashMap<PatPtr, PatId>,\n     pat_map_back: ArenaMap<PatId, PatPtr>,\n-    field_map: FxHashMap<(ExprId, usize), AstPtr<ast::NamedField>>,\n+    field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n }\n \n type PatPtr = Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>;\n@@ -148,7 +148,7 @@ impl BodySourceMap {\n         self.pat_map.get(&Either::A(AstPtr::new(node))).cloned()\n     }\n \n-    pub(crate) fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::NamedField> {\n+    pub(crate) fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n         self.field_map[&(expr, field)]\n     }\n }\n@@ -210,9 +210,9 @@ pub enum Expr {\n     Return {\n         expr: Option<ExprId>,\n     },\n-    StructLit {\n+    RecordLit {\n         path: Option<Path>,\n-        fields: Vec<StructLitField>,\n+        fields: Vec<RecordLitField>,\n         spread: Option<ExprId>,\n     },\n     Field {\n@@ -316,7 +316,7 @@ pub struct MatchArm {\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n-pub struct StructLitField {\n+pub struct RecordLitField {\n     pub name: Name,\n     pub expr: ExprId,\n }\n@@ -388,7 +388,7 @@ impl Expr {\n                     f(*expr);\n                 }\n             }\n-            Expr::StructLit { fields, spread, .. } => {\n+            Expr::RecordLit { fields, spread, .. } => {\n                 for field in fields {\n                     f(field.expr);\n                 }\n@@ -474,7 +474,7 @@ impl BindingAnnotation {\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n-pub struct FieldPat {\n+pub struct RecordFieldPat {\n     pub(crate) name: Name,\n     pub(crate) pat: PatId,\n }\n@@ -487,7 +487,7 @@ pub enum Pat {\n     Tuple(Vec<PatId>),\n     Struct {\n         path: Option<Path>,\n-        args: Vec<FieldPat>,\n+        args: Vec<RecordFieldPat>,\n         // FIXME: 'ellipsis' option\n     },\n     Range {\n@@ -746,14 +746,14 @@ where\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n-            ast::Expr::StructLit(e) => {\n+            ast::Expr::RecordLit(e) => {\n                 let path = e.path().and_then(Path::from_ast);\n                 let mut field_ptrs = Vec::new();\n-                let struct_lit = if let Some(nfl) = e.named_field_list() {\n+                let record_lit = if let Some(nfl) = e.record_field_list() {\n                     let fields = nfl\n                         .fields()\n                         .inspect(|field| field_ptrs.push(AstPtr::new(field)))\n-                        .map(|field| StructLitField {\n+                        .map(|field| RecordLitField {\n                             name: field\n                                 .name_ref()\n                                 .map(|nr| nr.as_name())\n@@ -776,12 +776,12 @@ where\n                         })\n                         .collect();\n                     let spread = nfl.spread().map(|s| self.collect_expr(s));\n-                    Expr::StructLit { path, fields, spread }\n+                    Expr::RecordLit { path, fields, spread }\n                 } else {\n-                    Expr::StructLit { path, fields: Vec::new(), spread: None }\n+                    Expr::RecordLit { path, fields: Vec::new(), spread: None }\n                 };\n \n-                let res = self.alloc_expr(struct_lit, syntax_ptr);\n+                let res = self.alloc_expr(record_lit, syntax_ptr);\n                 for (i, ptr) in field_ptrs.into_iter().enumerate() {\n                     self.source_map.field_map.insert((res, i), ptr);\n                 }\n@@ -994,25 +994,25 @@ where\n                 Pat::Tuple(args)\n             }\n             ast::Pat::PlaceholderPat(_) => Pat::Wild,\n-            ast::Pat::StructPat(p) => {\n+            ast::Pat::RecordPat(p) => {\n                 let path = p.path().and_then(Path::from_ast);\n-                let field_pat_list =\n-                    p.field_pat_list().expect(\"every struct should have a field list\");\n-                let mut fields: Vec<_> = field_pat_list\n+                let record_field_pat_list =\n+                    p.record_field_pat_list().expect(\"every struct should have a field list\");\n+                let mut fields: Vec<_> = record_field_pat_list\n                     .bind_pats()\n                     .filter_map(|bind_pat| {\n                         let ast_pat =\n                             ast::Pat::cast(bind_pat.syntax().clone()).expect(\"bind pat is a pat\");\n                         let pat = self.collect_pat(ast_pat);\n                         let name = bind_pat.name()?.as_name();\n-                        Some(FieldPat { name, pat })\n+                        Some(RecordFieldPat { name, pat })\n                     })\n                     .collect();\n-                let iter = field_pat_list.field_pats().filter_map(|f| {\n+                let iter = record_field_pat_list.record_field_pats().filter_map(|f| {\n                     let ast_pat = f.pat()?;\n                     let pat = self.collect_pat(ast_pat);\n                     let name = f.name()?.as_name();\n-                    Some(FieldPat { name, pat })\n+                    Some(RecordFieldPat { name, pat })\n                 });\n                 fields.extend(iter);\n "}, {"sha": "62f7d41f5d3ede5035d0b2b2d0b0c4388f386e85", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -1,9 +1,9 @@\n use rustc_hash::FxHashSet;\n use std::sync::Arc;\n \n-use ra_syntax::ast::{AstNode, StructLit};\n+use ra_syntax::ast::{AstNode, RecordLit};\n \n-use super::{Expr, ExprId, StructLitField};\n+use super::{Expr, ExprId, RecordLitField};\n use crate::{\n     adt::AdtDef,\n     diagnostics::{DiagnosticSink, MissingFields},\n@@ -30,17 +30,17 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     pub(crate) fn validate_body(&mut self, db: &impl HirDatabase) {\n         let body = self.func.body(db);\n         for e in body.exprs() {\n-            if let (id, Expr::StructLit { path, fields, spread }) = e {\n-                self.validate_struct_literal(id, path, fields, *spread, db);\n+            if let (id, Expr::RecordLit { path, fields, spread }) = e {\n+                self.validate_record_literal(id, path, fields, *spread, db);\n             }\n         }\n     }\n \n-    fn validate_struct_literal(\n+    fn validate_record_literal(\n         &mut self,\n         id: ExprId,\n         _path: &Option<Path>,\n-        fields: &[StructLitField],\n+        fields: &[RecordLitField],\n         spread: Option<ExprId>,\n         db: &impl HirDatabase,\n     ) {\n@@ -76,8 +76,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         if let Some(field_list_node) = source_map\n             .expr_syntax(id)\n             .map(|ptr| ptr.to_node(source_file.syntax()))\n-            .and_then(StructLit::cast)\n-            .and_then(|lit| lit.named_field_list())\n+            .and_then(RecordLit::cast)\n+            .and_then(|lit| lit.record_field_list())\n         {\n             let field_list_ptr = AstPtr::new(&field_list_node);\n             self.sink.push(MissingFields {"}, {"sha": "56ff7da3ab8b7504081a380de5abce983e78101c", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -278,13 +278,13 @@ impl SourceAnalyzer {\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n-    pub fn resolve_struct_literal(&self, struct_lit: &ast::StructLit) -> Option<crate::VariantDef> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(&struct_lit.clone().into())?;\n+    pub fn resolve_record_literal(&self, record_lit: &ast::RecordLit) -> Option<crate::VariantDef> {\n+        let expr_id = self.body_source_map.as_ref()?.node_expr(&record_lit.clone().into())?;\n         self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n     }\n \n-    pub fn resolve_struct_pattern(&self, struct_pat: &ast::StructPat) -> Option<crate::VariantDef> {\n-        let pat_id = self.body_source_map.as_ref()?.node_pat(&struct_pat.clone().into())?;\n+    pub fn resolve_record_pattern(&self, record_pat: &ast::RecordPat) -> Option<crate::VariantDef> {\n+        let pat_id = self.body_source_map.as_ref()?.node_pat(&record_pat.clone().into())?;\n         self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n     }\n "}, {"sha": "b33de5687cd1f48c2677e378a1cb9cc1fe55977f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -37,8 +37,8 @@ use crate::{\n     code_model::{ModuleDef::Trait, TypeAlias},\n     diagnostics::DiagnosticSink,\n     expr::{\n-        self, Array, BinaryOp, BindingAnnotation, Body, Expr, ExprId, FieldPat, Literal, Pat,\n-        PatId, Statement, UnaryOp,\n+        self, Array, BinaryOp, BindingAnnotation, Body, Expr, ExprId, Literal, Pat, PatId,\n+        RecordFieldPat, Statement, UnaryOp,\n     },\n     generics::{GenericParams, HasGenericParams},\n     name,\n@@ -705,10 +705,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n-    fn infer_struct_pat(\n+    fn infer_record_pat(\n         &mut self,\n         path: Option<&Path>,\n-        subpats: &[FieldPat],\n+        subpats: &[RecordFieldPat],\n         expected: &Ty,\n         default_bm: BindingMode,\n         id: PatId,\n@@ -800,7 +800,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.infer_tuple_struct_pat(p.as_ref(), subpats, expected, default_bm)\n             }\n             Pat::Struct { path: ref p, args: ref fields } => {\n-                self.infer_struct_pat(p.as_ref(), fields, expected, default_bm, pat)\n+                self.infer_record_pat(p.as_ref(), fields, expected, default_bm, pat)\n             }\n             Pat::Path(path) => {\n                 // FIXME use correct resolver for the surrounding expression\n@@ -1103,7 +1103,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n                 Ty::simple(TypeCtor::Never)\n             }\n-            Expr::StructLit { path, fields, spread } => {\n+            Expr::RecordLit { path, fields, spread } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_ref());\n                 if let Some(variant) = def_id {\n                     self.write_variant_resolution(tgt_expr.into(), variant);"}, {"sha": "a4f080adc693ce2be835953cdaa4e79e42ad7059", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -3,8 +3,8 @@ mod completion_context;\n mod presentation;\n \n mod complete_dot;\n-mod complete_struct_literal;\n-mod complete_struct_pattern;\n+mod complete_record_literal;\n+mod complete_record_pattern;\n mod complete_pattern;\n mod complete_fn_param;\n mod complete_keyword;\n@@ -65,8 +65,8 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     complete_path::complete_path(&mut acc, &ctx);\n     complete_scope::complete_scope(&mut acc, &ctx);\n     complete_dot::complete_dot(&mut acc, &ctx);\n-    complete_struct_literal::complete_struct_literal(&mut acc, &ctx);\n-    complete_struct_pattern::complete_struct_pattern(&mut acc, &ctx);\n+    complete_record_literal::complete_record_literal(&mut acc, &ctx);\n+    complete_record_pattern::complete_record_pattern(&mut acc, &ctx);\n     complete_pattern::complete_pattern(&mut acc, &ctx);\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     Some(acc)"}, {"sha": "27256f879607619b3d4744fbd139d9be12368cb8", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -45,7 +45,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n                 // FIXME unions\n                 TypeCtor::Tuple { .. } => {\n                     for (i, ty) in a_ty.parameters.iter().enumerate() {\n-                        acc.add_pos_field(ctx, i, ty);\n+                        acc.add_tuple_field(ctx, i, ty);\n                     }\n                 }\n                 _ => {}"}, {"sha": "6b929a8acfadf11c8e9ad86373db6c859ff875b9", "filename": "crates/ra_ide_api/src/completion/complete_record_literal.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -3,11 +3,11 @@ use hir::Substs;\n use crate::completion::{CompletionContext, Completions};\n \n /// Complete fields in fields literals.\n-pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (ty, variant) = match ctx.struct_lit_syntax.as_ref().and_then(|it| {\n+pub(super) fn complete_record_literal(acc: &mut Completions, ctx: &CompletionContext) {\n+    let (ty, variant) = match ctx.record_lit_syntax.as_ref().and_then(|it| {\n         Some((\n             ctx.analyzer.type_of(ctx.db, &it.clone().into())?,\n-            ctx.analyzer.resolve_struct_literal(it)?,\n+            ctx.analyzer.resolve_record_literal(it)?,\n         ))\n     }) {\n         Some(it) => it,\n@@ -30,7 +30,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_struct_literal_field() {\n+    fn test_record_literal_field() {\n         let completions = complete(\n             r\"\n             struct A { the_field: u32 }\n@@ -54,7 +54,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_struct_literal_enum_variant() {\n+    fn test_record_literal_enum_variant() {\n         let completions = complete(\n             r\"\n             enum E {\n@@ -80,7 +80,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_struct_literal_two_structs() {\n+    fn test_record_literal_two_structs() {\n         let completions = complete(\n             r\"\n             struct A { a: u32 }\n@@ -106,7 +106,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_struct_literal_generic_struct() {\n+    fn test_record_literal_generic_struct() {\n         let completions = complete(\n             r\"\n             struct A<T> { a: T }", "previous_filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs"}, {"sha": "8c8b47ea4648f97ea72652410ddf78afcaf19671", "filename": "crates/ra_ide_api/src/completion/complete_record_pattern.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -2,11 +2,11 @@ use hir::Substs;\n \n use crate::completion::{CompletionContext, Completions};\n \n-pub(super) fn complete_struct_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (ty, variant) = match ctx.struct_lit_pat.as_ref().and_then(|it| {\n+pub(super) fn complete_record_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n+    let (ty, variant) = match ctx.record_lit_pat.as_ref().and_then(|it| {\n         Some((\n             ctx.analyzer.type_of_pat(ctx.db, &it.clone().into())?,\n-            ctx.analyzer.resolve_struct_pattern(it)?,\n+            ctx.analyzer.resolve_record_pattern(it)?,\n         ))\n     }) {\n         Some(it) => it,\n@@ -29,7 +29,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_struct_pattern_field() {\n+    fn test_record_pattern_field() {\n         let completions = complete(\n             r\"\n             struct S { foo: u32 }\n@@ -56,7 +56,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_struct_pattern_enum_variant() {\n+    fn test_record_pattern_enum_variant() {\n         let completions = complete(\n             r\"\n             enum E {", "previous_filename": "crates/ra_ide_api/src/completion/complete_struct_pattern.rs"}, {"sha": "7139947b34bd99508456323e284203040520f0ce", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -20,8 +20,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) module: Option<hir::Module>,\n     pub(super) function_syntax: Option<ast::FnDef>,\n     pub(super) use_item_syntax: Option<ast::UseItem>,\n-    pub(super) struct_lit_syntax: Option<ast::StructLit>,\n-    pub(super) struct_lit_pat: Option<ast::StructPat>,\n+    pub(super) record_lit_syntax: Option<ast::RecordLit>,\n+    pub(super) record_lit_pat: Option<ast::RecordPat>,\n     pub(super) is_param: bool,\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n@@ -60,8 +60,8 @@ impl<'a> CompletionContext<'a> {\n             module,\n             function_syntax: None,\n             use_item_syntax: None,\n-            struct_lit_syntax: None,\n-            struct_lit_pat: None,\n+            record_lit_syntax: None,\n+            record_lit_pat: None,\n             is_param: false,\n             is_pat_binding: false,\n             is_trivial_path: false,\n@@ -120,17 +120,17 @@ impl<'a> CompletionContext<'a> {\n                 self.is_param = true;\n                 return;\n             }\n-            if name.syntax().ancestors().find_map(ast::FieldPatList::cast).is_some() {\n-                self.struct_lit_pat =\n+            if name.syntax().ancestors().find_map(ast::RecordFieldPatList::cast).is_some() {\n+                self.record_lit_pat =\n                     find_node_at_offset(original_parse.tree().syntax(), self.offset);\n             }\n         }\n     }\n \n     fn classify_name_ref(&mut self, original_file: SourceFile, name_ref: ast::NameRef) {\n         let name_range = name_ref.syntax().text_range();\n-        if name_ref.syntax().parent().and_then(ast::NamedField::cast).is_some() {\n-            self.struct_lit_syntax = find_node_at_offset(original_file.syntax(), self.offset);\n+        if name_ref.syntax().parent().and_then(ast::RecordField::cast).is_some() {\n+            self.record_lit_syntax = find_node_at_offset(original_file.syntax(), self.offset);\n         }\n \n         let top_node = name_ref"}, {"sha": "147ceda0c7cfb63524abb9247ca0feb2a7ebaddb", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -28,7 +28,7 @@ impl Completions {\n         .add_to(self);\n     }\n \n-    pub(crate) fn add_pos_field(&mut self, ctx: &CompletionContext, field: usize, ty: &hir::Ty) {\n+    pub(crate) fn add_tuple_field(&mut self, ctx: &CompletionContext, field: usize, ty: &hir::Ty) {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), field.to_string())\n             .kind(CompletionItemKind::Field)\n             .detail(ty.display(ctx.db).to_string())"}, {"sha": "c2b959cb3c24f9447ea4f6e1e4a2ca1d0331f3ce", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -9,7 +9,7 @@ use ra_assists::ast_editor::{AstBuilder, AstEditor};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, AstNode, NamedField},\n+    ast::{self, AstNode, RecordField},\n     Location, SyntaxNode, TextRange, T,\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n@@ -62,7 +62,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let node = d.ast(db);\n         let mut ast_editor = AstEditor::new(node);\n         for f in d.missed_fields.iter() {\n-            ast_editor.append_field(&AstBuilder::<NamedField>::from_name(f));\n+            ast_editor.append_field(&AstBuilder::<RecordField>::from_name(f));\n         }\n \n         let mut builder = TextEditBuilder::default();\n@@ -141,20 +141,20 @@ fn check_struct_shorthand_initialization(\n     file_id: FileId,\n     node: &SyntaxNode,\n ) -> Option<()> {\n-    let struct_lit = ast::StructLit::cast(node.clone())?;\n-    let named_field_list = struct_lit.named_field_list()?;\n-    for named_field in named_field_list.fields() {\n-        if let (Some(name_ref), Some(expr)) = (named_field.name_ref(), named_field.expr()) {\n+    let record_lit = ast::RecordLit::cast(node.clone())?;\n+    let record_field_list = record_lit.record_field_list()?;\n+    for record_field in record_field_list.fields() {\n+        if let (Some(name_ref), Some(expr)) = (record_field.name_ref(), record_field.expr()) {\n             let field_name = name_ref.syntax().text().to_string();\n             let field_expr = expr.syntax().text().to_string();\n             if field_name == field_expr {\n                 let mut edit_builder = TextEditBuilder::default();\n-                edit_builder.delete(named_field.syntax().text_range());\n-                edit_builder.insert(named_field.syntax().text_range().start(), field_name);\n+                edit_builder.delete(record_field.syntax().text_range());\n+                edit_builder.insert(record_field.syntax().text_range().start(), field_name);\n                 let edit = edit_builder.finish();\n \n                 acc.push(Diagnostic {\n-                    range: named_field.syntax().text_range(),\n+                    range: record_field.syntax().text_range(),\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n                     fix: Some(SourceChange::source_file_edit("}, {"sha": "c85214bb3549d6f1eeca94fc323409d7dffe5f24", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -314,7 +314,7 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n         .visit(|it: ast::TypeAliasDef| it.doc_comment_text())\n         .visit(|it: ast::ConstDef| it.doc_comment_text())\n         .visit(|it: ast::StaticDef| it.doc_comment_text())\n-        .visit(|it: ast::NamedFieldDef| it.doc_comment_text())\n+        .visit(|it: ast::RecordFieldDef| it.doc_comment_text())\n         .visit(|it: ast::EnumVariant| it.doc_comment_text())\n         .visit(|it: ast::MacroCall| it.doc_comment_text())\n         .accept(&node)?\n@@ -336,7 +336,7 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n         .visit(|node: ast::TypeAliasDef| node.short_label())\n         .visit(|node: ast::ConstDef| node.short_label())\n         .visit(|node: ast::StaticDef| node.short_label())\n-        .visit(|node: ast::NamedFieldDef| node.short_label())\n+        .visit(|node: ast::RecordFieldDef| node.short_label())\n         .visit(|node: ast::EnumVariant| node.short_label())\n         .accept(&node)?\n }"}, {"sha": "b16d504e1457b8b82ef2dd01c51fa1e2015f56fc", "filename": "crates/ra_ide_api/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -53,7 +53,7 @@ impl ShortLabel for ast::StaticDef {\n     }\n }\n \n-impl ShortLabel for ast::NamedFieldDef {\n+impl ShortLabel for ast::RecordFieldDef {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_ascribed_node(self, \"\")\n     }"}, {"sha": "a2025ed591c9bad6c7e97f23ecef01a036c3fc9b", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -124,7 +124,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             let ty = td.type_ref();\n             decl_with_type_ref(td, ty)\n         })\n-        .visit(decl_with_ascription::<ast::NamedFieldDef>)\n+        .visit(decl_with_ascription::<ast::RecordFieldDef>)\n         .visit(decl_with_ascription::<ast::ConstDef>)\n         .visit(decl_with_ascription::<ast::StaticDef>)\n         .visit(|im: ast::ImplBlock| {\n@@ -222,7 +222,7 @@ fn very_obsolete() {}\n         label: \"x\",\n         navigation_range: [18; 19),\n         node_range: [18; 24),\n-        kind: NAMED_FIELD_DEF,\n+        kind: RECORD_FIELD_DEF,\n         detail: Some(\n             \"i32\",\n         ),"}, {"sha": "e990eb0d13a9d7a520a9b1375bf8cea8f1855b26", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -18,11 +18,11 @@ pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRang\n fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange> {\n     let string_kinds = [COMMENT, STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING];\n     let list_kinds = [\n-        FIELD_PAT_LIST,\n+        RECORD_FIELD_PAT_LIST,\n         MATCH_ARM_LIST,\n-        NAMED_FIELD_DEF_LIST,\n-        POS_FIELD_DEF_LIST,\n-        NAMED_FIELD_LIST,\n+        RECORD_FIELD_DEF_LIST,\n+        TUPLE_FIELD_DEF_LIST,\n+        RECORD_FIELD_LIST,\n         ENUM_VARIANT_LIST,\n         USE_TREE_LIST,\n         TYPE_PARAM_LIST,"}, {"sha": "3ab6c195e6e9913792712bc7d3eb4173d697b4e5", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -81,8 +81,14 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n     match kind {\n         COMMENT => Some(FoldKind::Comment),\n         USE_ITEM => Some(FoldKind::Imports),\n-        NAMED_FIELD_DEF_LIST | FIELD_PAT_LIST | ITEM_LIST | EXTERN_ITEM_LIST | USE_TREE_LIST\n-        | BLOCK | ENUM_VARIANT_LIST | TOKEN_TREE => Some(FoldKind::Block),\n+        RECORD_FIELD_DEF_LIST\n+        | RECORD_FIELD_PAT_LIST\n+        | ITEM_LIST\n+        | EXTERN_ITEM_LIST\n+        | USE_TREE_LIST\n+        | BLOCK\n+        | ENUM_VARIANT_LIST\n+        | TOKEN_TREE => Some(FoldKind::Block),\n         _ => None,\n     }\n }"}, {"sha": "28529a2de02d90202756946a04e0bbdaf88939dc", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -178,7 +178,7 @@ fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget>\n                 node.short_label(),\n             )\n         })\n-        .visit(|node: ast::NamedFieldDef| {\n+        .visit(|node: ast::RecordFieldDef| {\n             NavigationTarget::from_named(\n                 file_id,\n                 &node,\n@@ -344,13 +344,13 @@ mod tests {\n                 foo.spam<|>;\n             }\n             \",\n-            \"spam NAMED_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n+            \"spam RECORD_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n         );\n     }\n \n     #[test]\n-    fn goto_definition_works_for_named_fields() {\n-        covers!(goto_definition_works_for_named_fields);\n+    fn goto_definition_works_for_record_fields() {\n+        covers!(goto_definition_works_for_record_fields);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -364,7 +364,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"spam NAMED_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n+            \"spam RECORD_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n         );\n     }\n     #[test]\n@@ -473,7 +473,7 @@ mod tests {\n                 field<|>: string,\n             }\n             \"#,\n-            \"field NAMED_FIELD_DEF FileId(1) [17; 30) [17; 22)\",\n+            \"field RECORD_FIELD_DEF FileId(1) [17; 30) [17; 22)\",\n         );\n \n         check_goto("}, {"sha": "1981e62d35f13bb0e7f60ac3434a0cd6da2541c0", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -197,7 +197,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 .visit(|node: ast::TraitDef| {\n                     hover_text(node.doc_comment_text(), node.short_label())\n                 })\n-                .visit(|node: ast::NamedFieldDef| {\n+                .visit(|node: ast::RecordFieldDef| {\n                     hover_text(node.doc_comment_text(), node.short_label())\n                 })\n                 .visit(|node: ast::Module| hover_text(node.doc_comment_text(), node.short_label()))"}, {"sha": "61ccb74b61d4b5a4cc124a0eea140a243d6c64e5", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -125,13 +125,13 @@ fn get_leaf_pats(root_pat: ast::Pat) -> Vec<ast::Pat> {\n                     pats_to_process.push_back(arg_pat);\n                 }\n             }\n-            ast::Pat::StructPat(struct_pat) => {\n-                if let Some(pat_list) = struct_pat.field_pat_list() {\n+            ast::Pat::RecordPat(record_pat) => {\n+                if let Some(pat_list) = record_pat.record_field_pat_list() {\n                     pats_to_process.extend(\n                         pat_list\n-                            .field_pats()\n-                            .filter_map(|field_pat| {\n-                                field_pat\n+                            .record_field_pats()\n+                            .filter_map(|record_field_pat| {\n+                                record_field_pat\n                                     .pat()\n                                     .filter(|pat| pat.syntax().kind() != SyntaxKind::BIND_PAT)\n                             })"}, {"sha": "c3752cc54143aea492689d8b4a813cbe3c43542a", "filename": "crates/ra_ide_api/src/marks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -3,7 +3,7 @@ test_utils::marks!(\n     goto_definition_works_for_macros\n     goto_definition_works_for_methods\n     goto_definition_works_for_fields\n-    goto_definition_works_for_named_fields\n+    goto_definition_works_for_record_fields\n     call_info_bad_offset\n     dont_complete_current_use\n     dont_complete_primitive_in_use"}, {"sha": "34a8bcc365b9d3338b693b45d56fe09765f1f7c7", "filename": "crates/ra_ide_api/src/name_ref_kind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -54,12 +54,12 @@ pub(crate) fn classify_name_ref(\n     }\n \n     // It could also be a named field\n-    if let Some(field_expr) = name_ref.syntax().parent().and_then(ast::NamedField::cast) {\n-        tested_by!(goto_definition_works_for_named_fields);\n+    if let Some(field_expr) = name_ref.syntax().parent().and_then(ast::RecordField::cast) {\n+        tested_by!(goto_definition_works_for_record_fields);\n \n-        let struct_lit = field_expr.syntax().ancestors().find_map(ast::StructLit::cast);\n+        let record_lit = field_expr.syntax().ancestors().find_map(ast::RecordLit::cast);\n \n-        if let Some(ty) = struct_lit.and_then(|lit| analyzer.type_of(db, &lit.into())) {\n+        if let Some(ty) = record_lit.and_then(|lit| analyzer.type_of(db, &lit.into())) {\n             if let Some((hir::AdtDef::Struct(s), _)) = ty.as_adt() {\n                 let hir_path = hir::Path::from_name_ref(name_ref);\n                 let hir_name = hir_path.as_ident().unwrap();"}, {"sha": "06ccf0728679e0f1db5e2fc65c5a141e2031aa8c", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -165,7 +165,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                                 TYPE_PARAM | STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => {\n                                     \"type\"\n                                 }\n-                                NAMED_FIELD_DEF => \"field\",\n+                                RECORD_FIELD_DEF => \"field\",\n                                 _ => \"function\",\n                             })\n                             .unwrap_or(\"function\")"}, {"sha": "5fa52ec1b45b8e958fad4fc0c5803001aa92a89f", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -42,7 +42,7 @@ impl Conv for SyntaxKind {\n             SyntaxKind::TRAIT_DEF => SymbolKind::Interface,\n             SyntaxKind::MODULE => SymbolKind::Module,\n             SyntaxKind::TYPE_ALIAS_DEF => SymbolKind::TypeParameter,\n-            SyntaxKind::NAMED_FIELD_DEF => SymbolKind::Field,\n+            SyntaxKind::RECORD_FIELD_DEF => SymbolKind::Field,\n             SyntaxKind::STATIC_DEF => SymbolKind::Constant,\n             SyntaxKind::CONST_DEF => SymbolKind::Constant,\n             SyntaxKind::IMPL_BLOCK => SymbolKind::Object,"}, {"sha": "1dbf229970ccfb203e54c9f8697d600faf54db14", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -419,9 +419,9 @@ MACRO_ITEMS@[0; 40)\n     STRUCT_KW@[0; 6) \"struct\"\n     NAME@[6; 9)\n       IDENT@[6; 9) \"Foo\"\n-    NAMED_FIELD_DEF_LIST@[9; 20)\n+    RECORD_FIELD_DEF_LIST@[9; 20)\n       L_CURLY@[9; 10) \"{\"\n-      NAMED_FIELD_DEF@[10; 19)\n+      RECORD_FIELD_DEF@[10; 19)\n         NAME@[10; 15)\n           IDENT@[10; 15) \"field\"\n         COLON@[15; 16) \":\"\n@@ -435,9 +435,9 @@ MACRO_ITEMS@[0; 40)\n     STRUCT_KW@[20; 26) \"struct\"\n     NAME@[26; 29)\n       IDENT@[26; 29) \"Bar\"\n-    NAMED_FIELD_DEF_LIST@[29; 40)\n+    RECORD_FIELD_DEF_LIST@[29; 40)\n       L_CURLY@[29; 30) \"{\"\n-      NAMED_FIELD_DEF@[30; 39)\n+      RECORD_FIELD_DEF@[30; 39)\n         NAME@[30; 35)\n           IDENT@[30; 35) \"field\"\n         COLON@[35; 36) \":\""}, {"sha": "dee3a229d60fe5f53a56db5d29a8a287beb2b918", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -150,8 +150,8 @@ pub(crate) fn reparser(\n ) -> Option<fn(&mut Parser)> {\n     let res = match node {\n         BLOCK => expressions::block,\n-        NAMED_FIELD_DEF_LIST => items::named_field_def_list,\n-        NAMED_FIELD_LIST => items::named_field_list,\n+        RECORD_FIELD_DEF_LIST => items::record_field_def_list,\n+        RECORD_FIELD_LIST => items::record_field_list,\n         ENUM_VARIANT_LIST => items::enum_variant_list,\n         MATCH_ARM_LIST => items::match_arm_list,\n         USE_TREE_LIST => items::use_tree_list,"}, {"sha": "783d6a6f08a3c3c3aa4754834b2f9cb9943caf06", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -559,8 +559,8 @@ fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n     paths::expr_path(p);\n     match p.current() {\n         T!['{'] if !r.forbid_structs => {\n-            named_field_list(p);\n-            (m.complete(p, STRUCT_LIT), BlockLike::NotBlock)\n+            record_field_list(p);\n+            (m.complete(p, RECORD_LIT), BlockLike::NotBlock)\n         }\n         T![!] => {\n             let block_like = items::macro_call_after_excl(p);\n@@ -570,20 +570,20 @@ fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n     }\n }\n \n-// test struct_lit\n+// test record_lit\n // fn foo() {\n //     S {};\n //     S { x, y: 32, };\n //     S { x, y: 32, ..Default::default() };\n //     TupleStruct { 0: 1 };\n // }\n-pub(crate) fn named_field_list(p: &mut Parser) {\n+pub(crate) fn record_field_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump();\n     while !p.at(EOF) && !p.at(T!['}']) {\n         match p.current() {\n-            // test struct_literal_field_with_attr\n+            // test record_literal_field_with_attr\n             // fn main() {\n             //     S { #[cfg(test)] field: 1 }\n             // }\n@@ -594,7 +594,7 @@ pub(crate) fn named_field_list(p: &mut Parser) {\n                 if p.eat(T![:]) {\n                     expr(p);\n                 }\n-                m.complete(p, NAMED_FIELD);\n+                m.complete(p, RECORD_FIELD);\n             }\n             T![..] => {\n                 p.bump();\n@@ -608,5 +608,5 @@ pub(crate) fn named_field_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, NAMED_FIELD_LIST);\n+    m.complete(p, RECORD_FIELD_LIST);\n }"}, {"sha": "6d426206e94c490a72a9851192368367da2479e5", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -4,8 +4,8 @@ mod traits;\n mod use_item;\n \n pub(crate) use self::{\n-    expressions::{match_arm_list, named_field_list},\n-    nominal::{enum_variant_list, named_field_def_list},\n+    expressions::{match_arm_list, record_field_list},\n+    nominal::{enum_variant_list, record_field_def_list},\n     traits::{impl_item_list, trait_item_list},\n     use_item::use_tree_list,\n };"}, {"sha": "54f02c7c93168c5c3ba0d086b41653224d9af768", "filename": "crates/ra_parser/src/grammar/items/nominal.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -13,7 +13,7 @@ pub(super) fn struct_def(p: &mut Parser, m: Marker, kind: SyntaxKind) {\n                 T![;] => {\n                     p.bump();\n                 }\n-                T!['{'] => named_field_def_list(p),\n+                T!['{'] => record_field_def_list(p),\n                 _ => {\n                     //FIXME: special case `(` error message\n                     p.error(\"expected `;` or `{`\");\n@@ -23,9 +23,9 @@ pub(super) fn struct_def(p: &mut Parser, m: Marker, kind: SyntaxKind) {\n         T![;] if kind == T![struct] => {\n             p.bump();\n         }\n-        T!['{'] => named_field_def_list(p),\n+        T!['{'] => record_field_def_list(p),\n         T!['('] if kind == T![struct] => {\n-            pos_field_def_list(p);\n+            tuple_field_def_list(p);\n             // test tuple_struct_where\n             // struct Test<T>(T) where T: Clone;\n             // struct Test<T>(T);\n@@ -70,8 +70,8 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n         if p.at(IDENT) {\n             name(p);\n             match p.current() {\n-                T!['{'] => named_field_def_list(p),\n-                T!['('] => pos_field_def_list(p),\n+                T!['{'] => record_field_def_list(p),\n+                T!['('] => tuple_field_def_list(p),\n                 T![=] => {\n                     p.bump();\n                     expressions::expr(p);\n@@ -91,7 +91,7 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n     m.complete(p, ENUM_VARIANT_LIST);\n }\n \n-pub(crate) fn named_field_def_list(p: &mut Parser) {\n+pub(crate) fn record_field_def_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump();\n@@ -100,17 +100,17 @@ pub(crate) fn named_field_def_list(p: &mut Parser) {\n             error_block(p, \"expected field\");\n             continue;\n         }\n-        named_field_def(p);\n+        record_field_def(p);\n         if !p.at(T!['}']) {\n             p.expect(T![,]);\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, NAMED_FIELD_DEF_LIST);\n+    m.complete(p, RECORD_FIELD_DEF_LIST);\n \n-    fn named_field_def(p: &mut Parser) {\n+    fn record_field_def(p: &mut Parser) {\n         let m = p.start();\n-        // test field_attrs\n+        // test record_field_attrs\n         // struct S {\n         //     #[serde(with = \"url_serde\")]\n         //     pub uri: Uri,\n@@ -121,23 +121,23 @@ pub(crate) fn named_field_def_list(p: &mut Parser) {\n             name(p);\n             p.expect(T![:]);\n             types::type_(p);\n-            m.complete(p, NAMED_FIELD_DEF);\n+            m.complete(p, RECORD_FIELD_DEF);\n         } else {\n             m.abandon(p);\n             p.err_and_bump(\"expected field declaration\");\n         }\n     }\n }\n \n-fn pos_field_def_list(p: &mut Parser) {\n+fn tuple_field_def_list(p: &mut Parser) {\n     assert!(p.at(T!['(']));\n     let m = p.start();\n     if !p.expect(T!['(']) {\n         return;\n     }\n     while !p.at(T![')']) && !p.at(EOF) {\n         let m = p.start();\n-        // test pos_field_attrs\n+        // test tuple_field_attrs\n         // struct S (\n         //     #[serde(with = \"url_serde\")]\n         //     pub Uri,\n@@ -154,12 +154,12 @@ fn pos_field_def_list(p: &mut Parser) {\n             break;\n         }\n         types::type_(p);\n-        m.complete(p, POS_FIELD_DEF);\n+        m.complete(p, TUPLE_FIELD_DEF);\n \n         if !p.at(T![')']) {\n             p.expect(T![,]);\n         }\n     }\n     p.expect(T![')']);\n-    m.complete(p, POS_FIELD_DEF_LIST);\n+    m.complete(p, TUPLE_FIELD_DEF_LIST);\n }"}, {"sha": "8979aa499a4a254ff5e1ac7f73b26239cd558589", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -127,8 +127,8 @@ fn path_pat(p: &mut Parser) -> CompletedMarker {\n             TUPLE_STRUCT_PAT\n         }\n         T!['{'] => {\n-            field_pat_list(p);\n-            STRUCT_PAT\n+            record_field_pat_list(p);\n+            RECORD_PAT\n         }\n         _ => PATH_PAT,\n     };\n@@ -149,21 +149,21 @@ fn tuple_pat_fields(p: &mut Parser) {\n     p.expect(T![')']);\n }\n \n-// test field_pat_list\n+// test record_field_pat_list\n // fn foo() {\n //     let S {} = ();\n //     let S { f, ref mut g } = ();\n //     let S { h: _, ..} = ();\n //     let S { h: _, } = ();\n // }\n-fn field_pat_list(p: &mut Parser) {\n+fn record_field_pat_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump();\n     while !p.at(EOF) && !p.at(T!['}']) {\n         match p.current() {\n             T![..] => p.bump(),\n-            IDENT if p.nth(1) == T![:] => field_pat(p),\n+            IDENT if p.nth(1) == T![:] => record_field_pat(p),\n             T!['{'] => error_block(p, \"expected ident\"),\n             _ => {\n                 bind_pat(p, false);\n@@ -174,18 +174,18 @@ fn field_pat_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, FIELD_PAT_LIST);\n+    m.complete(p, RECORD_FIELD_PAT_LIST);\n }\n \n-fn field_pat(p: &mut Parser) {\n+fn record_field_pat(p: &mut Parser) {\n     assert!(p.at(IDENT));\n     assert!(p.nth(1) == T![:]);\n \n     let m = p.start();\n     name(p);\n     p.bump();\n     pattern(p);\n-    m.complete(p, FIELD_PAT);\n+    m.complete(p, RECORD_FIELD_PAT);\n }\n \n // test placeholder_pat"}, {"sha": "f15e98e6858344ebb6a85e990e1979c0b84ec7ca", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -152,9 +152,9 @@ pub enum SyntaxKind {\n     BIND_PAT,\n     PLACEHOLDER_PAT,\n     PATH_PAT,\n-    STRUCT_PAT,\n-    FIELD_PAT_LIST,\n-    FIELD_PAT,\n+    RECORD_PAT,\n+    RECORD_FIELD_PAT_LIST,\n+    RECORD_FIELD_PAT,\n     TUPLE_STRUCT_PAT,\n     TUPLE_PAT,\n     SLICE_PAT,\n@@ -179,9 +179,9 @@ pub enum SyntaxKind {\n     MATCH_ARM_LIST,\n     MATCH_ARM,\n     MATCH_GUARD,\n-    STRUCT_LIT,\n-    NAMED_FIELD_LIST,\n-    NAMED_FIELD,\n+    RECORD_LIT,\n+    RECORD_FIELD_LIST,\n+    RECORD_FIELD,\n     TRY_BLOCK_EXPR,\n     BOX_EXPR,\n     CALL_EXPR,\n@@ -199,10 +199,10 @@ pub enum SyntaxKind {\n     EXTERN_BLOCK,\n     EXTERN_ITEM_LIST,\n     ENUM_VARIANT,\n-    NAMED_FIELD_DEF_LIST,\n-    NAMED_FIELD_DEF,\n-    POS_FIELD_DEF_LIST,\n-    POS_FIELD_DEF,\n+    RECORD_FIELD_DEF_LIST,\n+    RECORD_FIELD_DEF,\n+    TUPLE_FIELD_DEF_LIST,\n+    TUPLE_FIELD_DEF,\n     ENUM_VARIANT_LIST,\n     ITEM_LIST,\n     ATTR,"}, {"sha": "d7ea4354df470d678005e206612e56bb0dab01a9", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -296,8 +296,8 @@ fn test_literal_with_attr() {\n     assert_eq!(lit.token().text(), r#\"\"Hello\"\"#);\n }\n \n-impl ast::NamedField {\n-    pub fn parent_struct_lit(&self) -> ast::StructLit {\n-        self.syntax().ancestors().find_map(ast::StructLit::cast).unwrap()\n+impl ast::RecordField {\n+    pub fn parent_record_lit(&self) -> ast::RecordLit {\n+        self.syntax().ancestors().find_map(ast::RecordLit::cast).unwrap()\n     }\n }"}, {"sha": "d3a375f87969054adad61eef35d60fab1ad7d548", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -195,16 +195,16 @@ impl ast::ImplBlock {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum StructKind {\n-    Tuple(ast::PosFieldDefList),\n-    Named(ast::NamedFieldDefList),\n+    Tuple(ast::TupleFieldDefList),\n+    Named(ast::RecordFieldDefList),\n     Unit,\n }\n \n impl StructKind {\n     fn from_node<N: AstNode>(node: &N) -> StructKind {\n-        if let Some(nfdl) = child_opt::<_, ast::NamedFieldDefList>(node) {\n+        if let Some(nfdl) = child_opt::<_, ast::RecordFieldDefList>(node) {\n             StructKind::Named(nfdl)\n-        } else if let Some(pfl) = child_opt::<_, ast::PosFieldDefList>(node) {\n+        } else if let Some(pfl) = child_opt::<_, ast::TupleFieldDefList>(node) {\n             StructKind::Tuple(pfl)\n         } else {\n             StructKind::Unit"}, {"sha": "07cc3e0dba3737b4b72684484210acb1f6e028b3", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 261, "deletions": 261, "changes": 522, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -607,7 +607,7 @@ pub enum Expr {\n     BlockExpr(BlockExpr),\n     ReturnExpr(ReturnExpr),\n     MatchExpr(MatchExpr),\n-    StructLit(StructLit),\n+    RecordLit(RecordLit),\n     CallExpr(CallExpr),\n     IndexExpr(IndexExpr),\n     MethodCallExpr(MethodCallExpr),\n@@ -698,9 +698,9 @@ impl From<MatchExpr> for Expr {\n         Expr::MatchExpr(node)\n     }\n }\n-impl From<StructLit> for Expr {\n-    fn from(node: StructLit) -> Expr {\n-        Expr::StructLit(node)\n+impl From<RecordLit> for Expr {\n+    fn from(node: RecordLit) -> Expr {\n+        Expr::RecordLit(node)\n     }\n }\n impl From<CallExpr> for Expr {\n@@ -778,7 +778,7 @@ impl AstNode for Expr {\n         match kind {\n             TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR\n             | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL\n-            | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | STRUCT_LIT | CALL_EXPR | INDEX_EXPR\n+            | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | RECORD_LIT | CALL_EXPR | INDEX_EXPR\n             | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | TRY_BLOCK_EXPR\n             | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL => {\n                 true\n@@ -803,7 +803,7 @@ impl AstNode for Expr {\n             BLOCK_EXPR => Expr::BlockExpr(BlockExpr { syntax }),\n             RETURN_EXPR => Expr::ReturnExpr(ReturnExpr { syntax }),\n             MATCH_EXPR => Expr::MatchExpr(MatchExpr { syntax }),\n-            STRUCT_LIT => Expr::StructLit(StructLit { syntax }),\n+            RECORD_LIT => Expr::RecordLit(RecordLit { syntax }),\n             CALL_EXPR => Expr::CallExpr(CallExpr { syntax }),\n             INDEX_EXPR => Expr::IndexExpr(IndexExpr { syntax }),\n             METHOD_CALL_EXPR => Expr::MethodCallExpr(MethodCallExpr { syntax }),\n@@ -839,7 +839,7 @@ impl AstNode for Expr {\n             Expr::BlockExpr(it) => &it.syntax,\n             Expr::ReturnExpr(it) => &it.syntax,\n             Expr::MatchExpr(it) => &it.syntax,\n-            Expr::StructLit(it) => &it.syntax,\n+            Expr::RecordLit(it) => &it.syntax,\n             Expr::CallExpr(it) => &it.syntax,\n             Expr::IndexExpr(it) => &it.syntax,\n             Expr::MethodCallExpr(it) => &it.syntax,\n@@ -946,64 +946,6 @@ impl FieldExpr {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FieldPat {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl AstNode for FieldPat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FIELD_PAT => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        &self.syntax\n-    }\n-}\n-impl ast::NameOwner for FieldPat {}\n-impl FieldPat {\n-    pub fn pat(&self) -> Option<Pat> {\n-        AstChildren::new(&self.syntax).next()\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FieldPatList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl AstNode for FieldPatList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            FIELD_PAT_LIST => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        &self.syntax\n-    }\n-}\n-impl FieldPatList {\n-    pub fn field_pats(&self) -> AstChildren<FieldPat> {\n-        AstChildren::new(&self.syntax)\n-    }\n-    pub fn bind_pats(&self) -> AstChildren<BindPat> {\n-        AstChildren::new(&self.syntax)\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FnDef {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1942,121 +1884,6 @@ impl AstNode for NameRef {\n }\n impl NameRef {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct NamedField {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl AstNode for NamedField {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            NAMED_FIELD => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        &self.syntax\n-    }\n-}\n-impl NamedField {\n-    pub fn name_ref(&self) -> Option<NameRef> {\n-        AstChildren::new(&self.syntax).next()\n-    }\n-    pub fn expr(&self) -> Option<Expr> {\n-        AstChildren::new(&self.syntax).next()\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct NamedFieldDef {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl AstNode for NamedFieldDef {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            NAMED_FIELD_DEF => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        &self.syntax\n-    }\n-}\n-impl ast::VisibilityOwner for NamedFieldDef {}\n-impl ast::NameOwner for NamedFieldDef {}\n-impl ast::AttrsOwner for NamedFieldDef {}\n-impl ast::DocCommentsOwner for NamedFieldDef {}\n-impl ast::TypeAscriptionOwner for NamedFieldDef {}\n-impl NamedFieldDef {}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct NamedFieldDefList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl AstNode for NamedFieldDefList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            NAMED_FIELD_DEF_LIST => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        &self.syntax\n-    }\n-}\n-impl NamedFieldDefList {\n-    pub fn fields(&self) -> AstChildren<NamedFieldDef> {\n-        AstChildren::new(&self.syntax)\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct NamedFieldList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl AstNode for NamedFieldList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            NAMED_FIELD_LIST => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        &self.syntax\n-    }\n-}\n-impl NamedFieldList {\n-    pub fn fields(&self) -> AstChildren<NamedField> {\n-        AstChildren::new(&self.syntax)\n-    }\n-    pub fn spread(&self) -> Option<Expr> {\n-        AstChildren::new(&self.syntax).next()\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct NeverType {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -2239,7 +2066,7 @@ pub enum Pat {\n     BindPat(BindPat),\n     PlaceholderPat(PlaceholderPat),\n     PathPat(PathPat),\n-    StructPat(StructPat),\n+    RecordPat(RecordPat),\n     TupleStructPat(TupleStructPat),\n     TuplePat(TuplePat),\n     SlicePat(SlicePat),\n@@ -2266,9 +2093,9 @@ impl From<PathPat> for Pat {\n         Pat::PathPat(node)\n     }\n }\n-impl From<StructPat> for Pat {\n-    fn from(node: StructPat) -> Pat {\n-        Pat::StructPat(node)\n+impl From<RecordPat> for Pat {\n+    fn from(node: RecordPat) -> Pat {\n+        Pat::RecordPat(node)\n     }\n }\n impl From<TupleStructPat> for Pat {\n@@ -2299,7 +2126,7 @@ impl From<LiteralPat> for Pat {\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            REF_PAT | BIND_PAT | PLACEHOLDER_PAT | PATH_PAT | STRUCT_PAT | TUPLE_STRUCT_PAT\n+            REF_PAT | BIND_PAT | PLACEHOLDER_PAT | PATH_PAT | RECORD_PAT | TUPLE_STRUCT_PAT\n             | TUPLE_PAT | SLICE_PAT | RANGE_PAT | LITERAL_PAT => true,\n             _ => false,\n         }\n@@ -2310,7 +2137,7 @@ impl AstNode for Pat {\n             BIND_PAT => Pat::BindPat(BindPat { syntax }),\n             PLACEHOLDER_PAT => Pat::PlaceholderPat(PlaceholderPat { syntax }),\n             PATH_PAT => Pat::PathPat(PathPat { syntax }),\n-            STRUCT_PAT => Pat::StructPat(StructPat { syntax }),\n+            RECORD_PAT => Pat::RecordPat(RecordPat { syntax }),\n             TUPLE_STRUCT_PAT => Pat::TupleStructPat(TupleStructPat { syntax }),\n             TUPLE_PAT => Pat::TuplePat(TuplePat { syntax }),\n             SLICE_PAT => Pat::SlicePat(SlicePat { syntax }),\n@@ -2326,7 +2153,7 @@ impl AstNode for Pat {\n             Pat::BindPat(it) => &it.syntax,\n             Pat::PlaceholderPat(it) => &it.syntax,\n             Pat::PathPat(it) => &it.syntax,\n-            Pat::StructPat(it) => &it.syntax,\n+            Pat::RecordPat(it) => &it.syntax,\n             Pat::TupleStructPat(it) => &it.syntax,\n             Pat::TuplePat(it) => &it.syntax,\n             Pat::SlicePat(it) => &it.syntax,\n@@ -2551,13 +2378,13 @@ impl PointerType {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct PosFieldDef {\n+pub struct PrefixExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for PosFieldDef {\n+impl AstNode for PrefixExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            POS_FIELD_DEF => true,\n+            PREFIX_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -2572,21 +2399,19 @@ impl AstNode for PosFieldDef {\n         &self.syntax\n     }\n }\n-impl ast::VisibilityOwner for PosFieldDef {}\n-impl ast::AttrsOwner for PosFieldDef {}\n-impl PosFieldDef {\n-    pub fn type_ref(&self) -> Option<TypeRef> {\n+impl PrefixExpr {\n+    pub fn expr(&self) -> Option<Expr> {\n         AstChildren::new(&self.syntax).next()\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct PosFieldDefList {\n+pub struct RangeExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for PosFieldDefList {\n+impl AstNode for RangeExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            POS_FIELD_DEF_LIST => true,\n+            RANGE_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -2601,19 +2426,38 @@ impl AstNode for PosFieldDefList {\n         &self.syntax\n     }\n }\n-impl PosFieldDefList {\n-    pub fn fields(&self) -> AstChildren<PosFieldDef> {\n-        AstChildren::new(&self.syntax)\n+impl RangeExpr {}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct RangePat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for RangePat {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            RANGE_PAT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n     }\n }\n+impl RangePat {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct PrefixExpr {\n+pub struct RecordField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for PrefixExpr {\n+impl AstNode for RecordField {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            PREFIX_EXPR => true,\n+            RECORD_FIELD => true,\n             _ => false,\n         }\n     }\n@@ -2628,19 +2472,22 @@ impl AstNode for PrefixExpr {\n         &self.syntax\n     }\n }\n-impl PrefixExpr {\n+impl RecordField {\n+    pub fn name_ref(&self) -> Option<NameRef> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n     pub fn expr(&self) -> Option<Expr> {\n         AstChildren::new(&self.syntax).next()\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RangeExpr {\n+pub struct RecordFieldDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for RangeExpr {\n+impl AstNode for RecordFieldDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            RANGE_EXPR => true,\n+            RECORD_FIELD_DEF => true,\n             _ => false,\n         }\n     }\n@@ -2655,15 +2502,20 @@ impl AstNode for RangeExpr {\n         &self.syntax\n     }\n }\n-impl RangeExpr {}\n+impl ast::VisibilityOwner for RecordFieldDef {}\n+impl ast::NameOwner for RecordFieldDef {}\n+impl ast::AttrsOwner for RecordFieldDef {}\n+impl ast::DocCommentsOwner for RecordFieldDef {}\n+impl ast::TypeAscriptionOwner for RecordFieldDef {}\n+impl RecordFieldDef {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RangePat {\n+pub struct RecordFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for RangePat {\n+impl AstNode for RecordFieldDefList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            RANGE_PAT => true,\n+            RECORD_FIELD_DEF_LIST => true,\n             _ => false,\n         }\n     }\n@@ -2678,7 +2530,159 @@ impl AstNode for RangePat {\n         &self.syntax\n     }\n }\n-impl RangePat {}\n+impl RecordFieldDefList {\n+    pub fn fields(&self) -> AstChildren<RecordFieldDef> {\n+        AstChildren::new(&self.syntax)\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct RecordFieldList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for RecordFieldList {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            RECORD_FIELD_LIST => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl RecordFieldList {\n+    pub fn fields(&self) -> AstChildren<RecordField> {\n+        AstChildren::new(&self.syntax)\n+    }\n+    pub fn spread(&self) -> Option<Expr> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct RecordFieldPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for RecordFieldPat {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            RECORD_FIELD_PAT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl ast::NameOwner for RecordFieldPat {}\n+impl RecordFieldPat {\n+    pub fn pat(&self) -> Option<Pat> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct RecordFieldPatList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for RecordFieldPatList {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            RECORD_FIELD_PAT_LIST => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl RecordFieldPatList {\n+    pub fn record_field_pats(&self) -> AstChildren<RecordFieldPat> {\n+        AstChildren::new(&self.syntax)\n+    }\n+    pub fn bind_pats(&self) -> AstChildren<BindPat> {\n+        AstChildren::new(&self.syntax)\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct RecordLit {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for RecordLit {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            RECORD_LIT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl RecordLit {\n+    pub fn path(&self) -> Option<Path> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+    pub fn record_field_list(&self) -> Option<RecordFieldList> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct RecordPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for RecordPat {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            RECORD_PAT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl RecordPat {\n+    pub fn record_field_pat_list(&self) -> Option<RecordFieldPatList> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+    pub fn path(&self) -> Option<Path> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RefExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -3018,13 +3022,13 @@ impl ast::AttrsOwner for StructDef {}\n impl ast::DocCommentsOwner for StructDef {}\n impl StructDef {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StructLit {\n+pub struct TokenTree {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for StructLit {\n+impl AstNode for TokenTree {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            STRUCT_LIT => true,\n+            TOKEN_TREE => true,\n             _ => false,\n         }\n     }\n@@ -3039,22 +3043,15 @@ impl AstNode for StructLit {\n         &self.syntax\n     }\n }\n-impl StructLit {\n-    pub fn path(&self) -> Option<Path> {\n-        AstChildren::new(&self.syntax).next()\n-    }\n-    pub fn named_field_list(&self) -> Option<NamedFieldList> {\n-        AstChildren::new(&self.syntax).next()\n-    }\n-}\n+impl TokenTree {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StructPat {\n+pub struct TraitDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for StructPat {\n+impl AstNode for TraitDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            STRUCT_PAT => true,\n+            TRAIT_DEF => true,\n             _ => false,\n         }\n     }\n@@ -3069,22 +3066,25 @@ impl AstNode for StructPat {\n         &self.syntax\n     }\n }\n-impl StructPat {\n-    pub fn field_pat_list(&self) -> Option<FieldPatList> {\n-        AstChildren::new(&self.syntax).next()\n-    }\n-    pub fn path(&self) -> Option<Path> {\n+impl ast::VisibilityOwner for TraitDef {}\n+impl ast::NameOwner for TraitDef {}\n+impl ast::AttrsOwner for TraitDef {}\n+impl ast::DocCommentsOwner for TraitDef {}\n+impl ast::TypeParamsOwner for TraitDef {}\n+impl ast::TypeBoundsOwner for TraitDef {}\n+impl TraitDef {\n+    pub fn item_list(&self) -> Option<ItemList> {\n         AstChildren::new(&self.syntax).next()\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TokenTree {\n+pub struct TryBlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for TokenTree {\n+impl AstNode for TryBlockExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            TOKEN_TREE => true,\n+            TRY_BLOCK_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3099,15 +3099,16 @@ impl AstNode for TokenTree {\n         &self.syntax\n     }\n }\n-impl TokenTree {}\n+impl ast::TryBlockBodyOwner for TryBlockExpr {}\n+impl TryBlockExpr {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TraitDef {\n+pub struct TryExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for TraitDef {\n+impl AstNode for TryExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            TRAIT_DEF => true,\n+            TRY_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3122,25 +3123,19 @@ impl AstNode for TraitDef {\n         &self.syntax\n     }\n }\n-impl ast::VisibilityOwner for TraitDef {}\n-impl ast::NameOwner for TraitDef {}\n-impl ast::AttrsOwner for TraitDef {}\n-impl ast::DocCommentsOwner for TraitDef {}\n-impl ast::TypeParamsOwner for TraitDef {}\n-impl ast::TypeBoundsOwner for TraitDef {}\n-impl TraitDef {\n-    pub fn item_list(&self) -> Option<ItemList> {\n+impl TryExpr {\n+    pub fn expr(&self) -> Option<Expr> {\n         AstChildren::new(&self.syntax).next()\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TryBlockExpr {\n+pub struct TupleExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for TryBlockExpr {\n+impl AstNode for TupleExpr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            TRY_BLOCK_EXPR => true,\n+            TUPLE_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3155,16 +3150,19 @@ impl AstNode for TryBlockExpr {\n         &self.syntax\n     }\n }\n-impl ast::TryBlockBodyOwner for TryBlockExpr {}\n-impl TryBlockExpr {}\n+impl TupleExpr {\n+    pub fn exprs(&self) -> AstChildren<Expr> {\n+        AstChildren::new(&self.syntax)\n+    }\n+}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TryExpr {\n+pub struct TupleFieldDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for TryExpr {\n+impl AstNode for TupleFieldDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            TRY_EXPR => true,\n+            TUPLE_FIELD_DEF => true,\n             _ => false,\n         }\n     }\n@@ -3179,19 +3177,21 @@ impl AstNode for TryExpr {\n         &self.syntax\n     }\n }\n-impl TryExpr {\n-    pub fn expr(&self) -> Option<Expr> {\n+impl ast::VisibilityOwner for TupleFieldDef {}\n+impl ast::AttrsOwner for TupleFieldDef {}\n+impl TupleFieldDef {\n+    pub fn type_ref(&self) -> Option<TypeRef> {\n         AstChildren::new(&self.syntax).next()\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TupleExpr {\n+pub struct TupleFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for TupleExpr {\n+impl AstNode for TupleFieldDefList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            TUPLE_EXPR => true,\n+            TUPLE_FIELD_DEF_LIST => true,\n             _ => false,\n         }\n     }\n@@ -3206,8 +3206,8 @@ impl AstNode for TupleExpr {\n         &self.syntax\n     }\n }\n-impl TupleExpr {\n-    pub fn exprs(&self) -> AstChildren<Expr> {\n+impl TupleFieldDefList {\n+    pub fn fields(&self) -> AstChildren<TupleFieldDef> {\n         AstChildren::new(&self.syntax)\n     }\n }"}, {"sha": "4659192cdb893d2fd5d1f0bbf89f4860b6893367", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -161,9 +161,9 @@ Grammar(\n         \"BIND_PAT\",\n         \"PLACEHOLDER_PAT\",\n         \"PATH_PAT\",\n-        \"STRUCT_PAT\",\n-        \"FIELD_PAT_LIST\",\n-        \"FIELD_PAT\",\n+        \"RECORD_PAT\",\n+        \"RECORD_FIELD_PAT_LIST\",\n+        \"RECORD_FIELD_PAT\",\n         \"TUPLE_STRUCT_PAT\",\n         \"TUPLE_PAT\",\n         \"SLICE_PAT\",\n@@ -190,9 +190,9 @@ Grammar(\n         \"MATCH_ARM_LIST\",\n         \"MATCH_ARM\",\n         \"MATCH_GUARD\",\n-        \"STRUCT_LIT\",\n-        \"NAMED_FIELD_LIST\",\n-        \"NAMED_FIELD\",\n+        \"RECORD_LIT\",\n+        \"RECORD_FIELD_LIST\",\n+        \"RECORD_FIELD\",\n         \"TRY_BLOCK_EXPR\",\n         \"BOX_EXPR\",\n \n@@ -216,10 +216,10 @@ Grammar(\n         \"EXTERN_BLOCK\",\n         \"EXTERN_ITEM_LIST\",\n         \"ENUM_VARIANT\",\n-        \"NAMED_FIELD_DEF_LIST\",\n-        \"NAMED_FIELD_DEF\",\n-        \"POS_FIELD_DEF_LIST\",\n-        \"POS_FIELD_DEF\",\n+        \"RECORD_FIELD_DEF_LIST\",\n+        \"RECORD_FIELD_DEF\",\n+        \"TUPLE_FIELD_DEF_LIST\",\n+        \"TUPLE_FIELD_DEF\",\n         \"ENUM_VARIANT_LIST\",\n         \"ITEM_LIST\",\n         \"ATTR\",\n@@ -286,8 +286,8 @@ Grammar(\n                 \"DocCommentsOwner\"\n             ]\n         ),\n-        \"NamedFieldDefList\": (collections: [(\"fields\", \"NamedFieldDef\")]),\n-        \"NamedFieldDef\": (\n+        \"RecordFieldDefList\": (collections: [(\"fields\", \"RecordFieldDef\")]),\n+        \"RecordFieldDef\": (\n             traits: [\n                 \"VisibilityOwner\",\n                 \"NameOwner\",\n@@ -296,8 +296,8 @@ Grammar(\n                 \"TypeAscriptionOwner\"\n             ]\n         ),\n-        \"PosFieldDefList\": (collections: [(\"fields\", \"PosFieldDef\")]),\n-        \"PosFieldDef\": ( traits: [\"VisibilityOwner\", \"AttrsOwner\"], options: [\"TypeRef\"]),\n+        \"TupleFieldDefList\": (collections: [(\"fields\", \"TupleFieldDef\")]),\n+        \"TupleFieldDef\": ( traits: [\"VisibilityOwner\", \"AttrsOwner\"], options: [\"TypeRef\"]),\n         \"EnumDef\": ( traits: [\n             \"VisibilityOwner\",\n             \"NameOwner\",\n@@ -461,12 +461,12 @@ Grammar(\n             traits: [ \"AttrsOwner\" ]\n         ),\n         \"MatchGuard\": (options: [\"Expr\"]),\n-        \"StructLit\": (options: [\"Path\", \"NamedFieldList\"]),\n-        \"NamedFieldList\": (\n-            collections: [ (\"fields\", \"NamedField\") ],\n+        \"RecordLit\": (options: [\"Path\", \"RecordFieldList\"]),\n+        \"RecordFieldList\": (\n+            collections: [ (\"fields\", \"RecordField\") ],\n             options: [[\"spread\", \"Expr\"]]\n         ),\n-        \"NamedField\": (options: [\"NameRef\", \"Expr\"]),\n+        \"RecordField\": (options: [\"NameRef\", \"Expr\"]),\n         \"CallExpr\": (\n             traits: [\"ArgListOwner\"],\n             options: [ \"Expr\" ],\n@@ -504,7 +504,7 @@ Grammar(\n                 \"BlockExpr\",\n                 \"ReturnExpr\",\n                 \"MatchExpr\",\n-                \"StructLit\",\n+                \"RecordLit\",\n                 \"CallExpr\",\n                 \"IndexExpr\",\n                 \"MethodCallExpr\",\n@@ -529,14 +529,14 @@ Grammar(\n         ),\n         \"PlaceholderPat\": (),\n         \"PathPat\": ( options: [ \"Path\" ] ),\n-        \"StructPat\": ( options: [\"FieldPatList\", \"Path\"] ),\n-        \"FieldPatList\": (\n+        \"RecordPat\": ( options: [\"RecordFieldPatList\", \"Path\"] ),\n+        \"RecordFieldPatList\": (\n             collections: [\n-                (\"field_pats\", \"FieldPat\"),\n+                (\"record_field_pats\", \"RecordFieldPat\"),\n                 (\"bind_pats\", \"BindPat\"),\n             ]\n         ),\n-        \"FieldPat\": (\n+        \"RecordFieldPat\": (\n             traits: [\"NameOwner\"],\n             options: [\"Pat\"]\n         ),\n@@ -555,7 +555,7 @@ Grammar(\n                 \"BindPat\",\n                 \"PlaceholderPat\",\n                 \"PathPat\",\n-                \"StructPat\",\n+                \"RecordPat\",\n                 \"TupleStructPat\",\n                 \"TuplePat\",\n                 \"SlicePat\","}, {"sha": "f59c559e95fcfee51aafb4771725aac07550897b", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -145,7 +145,7 @@ fn n_attached_trivias<'a>(\n ) -> usize {\n     match kind {\n         CONST_DEF | TYPE_ALIAS_DEF | STRUCT_DEF | ENUM_DEF | ENUM_VARIANT | FN_DEF | TRAIT_DEF\n-        | MODULE | NAMED_FIELD_DEF => {\n+        | MODULE | RECORD_FIELD_DEF => {\n             let mut res = 0;\n             for (i, (kind, text)) in trivias.enumerate() {\n                 match kind {"}, {"sha": "d24660ac3a084b9894f2ebf76b6d78ab8c315011", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -80,7 +80,7 @@ fn test_local_syntax_ptr() {\n     use crate::{ast, AstNode, SourceFile};\n \n     let file = SourceFile::parse(\"struct Foo { f: u32, }\").ok().unwrap();\n-    let field = file.syntax().descendants().find_map(ast::NamedFieldDef::cast).unwrap();\n+    let field = file.syntax().descendants().find_map(ast::RecordFieldDef::cast).unwrap();\n     let ptr = SyntaxNodePtr::new(field.syntax());\n     let field_syntax = ptr.to_node(file.syntax());\n     assert_eq!(field.syntax(), &field_syntax);"}, {"sha": "ee879741092dddb18b593d73800a2908938ab93d", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -99,7 +99,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n             .visit::<ast::Literal, _>(validate_literal)\n             .visit::<ast::Block, _>(block::validate_block_node)\n             .visit::<ast::FieldExpr, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n-            .visit::<ast::NamedField, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n+            .visit::<ast::RecordField, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n             .accept(&node);\n     }\n     errors"}, {"sha": "dc143945ad1b2400bb15a52708620189d78638e8", "filename": "crates/ra_syntax/test_data/parser/err/0000_struct_field_missing_comma.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@[0; 34)\n     NAME@[7; 8)\n       IDENT@[7; 8) \"S\"\n     WHITESPACE@[8; 9) \" \"\n-    NAMED_FIELD_DEF_LIST@[9; 34)\n+    RECORD_FIELD_DEF_LIST@[9; 34)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      NAMED_FIELD_DEF@[15; 21)\n+      RECORD_FIELD_DEF@[15; 21)\n         NAME@[15; 16)\n           IDENT@[15; 16) \"a\"\n         COLON@[16; 17) \":\"\n@@ -19,7 +19,7 @@ SOURCE_FILE@[0; 34)\n               NAME_REF@[18; 21)\n                 IDENT@[18; 21) \"u32\"\n       WHITESPACE@[21; 26) \"\\n    \"\n-      NAMED_FIELD_DEF@[26; 32)\n+      RECORD_FIELD_DEF@[26; 32)\n         NAME@[26; 27)\n           IDENT@[26; 27) \"b\"\n         COLON@[27; 28) \":\""}, {"sha": "181bcdb9ec40d097cf11356dbeb03e4e8875398e", "filename": "crates/ra_syntax/test_data/parser/err/0001_item_recovery_in_file.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -11,7 +11,7 @@ SOURCE_FILE@[0; 21)\n     NAME@[17; 18)\n       IDENT@[17; 18) \"S\"\n     WHITESPACE@[18; 19) \" \"\n-    NAMED_FIELD_DEF_LIST@[19; 21)\n+    RECORD_FIELD_DEF_LIST@[19; 21)\n       L_CURLY@[19; 20) \"{\"\n       R_CURLY@[20; 21) \"}\"\n error 0: expected an item"}, {"sha": "58d005902b346b44535fca996f61244c72ae4317", "filename": "crates/ra_syntax/test_data/parser/err/0003_C++_semicolon.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@[0; 40)\n     NAME@[7; 8)\n       IDENT@[7; 8) \"S\"\n     WHITESPACE@[8; 9) \" \"\n-    NAMED_FIELD_DEF_LIST@[9; 39)\n+    RECORD_FIELD_DEF_LIST@[9; 39)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      NAMED_FIELD_DEF@[15; 21)\n+      RECORD_FIELD_DEF@[15; 21)\n         NAME@[15; 16)\n           IDENT@[15; 16) \"a\"\n         COLON@[16; 17) \":\"\n@@ -20,7 +20,7 @@ SOURCE_FILE@[0; 40)\n                 IDENT@[18; 21) \"i32\"\n       COMMA@[21; 22) \",\"\n       WHITESPACE@[22; 27) \"\\n    \"\n-      NAMED_FIELD_DEF@[27; 36)\n+      RECORD_FIELD_DEF@[27; 36)\n         NAME@[27; 28)\n           IDENT@[27; 28) \"b\"\n         COLON@[28; 29) \":\""}, {"sha": "5f5198b31e48f470da6213b29a40c50312a4e536", "filename": "crates/ra_syntax/test_data/parser/err/0006_named_field_recovery.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@[0; 74)\n     NAME@[7; 8)\n       IDENT@[7; 8) \"S\"\n     WHITESPACE@[8; 9) \" \"\n-    NAMED_FIELD_DEF_LIST@[9; 73)\n+    RECORD_FIELD_DEF_LIST@[9; 73)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      NAMED_FIELD_DEF@[15; 21)\n+      RECORD_FIELD_DEF@[15; 21)\n         NAME@[15; 16)\n           IDENT@[15; 16) \"f\"\n         COLON@[16; 17) \":\"\n@@ -35,7 +35,7 @@ SOURCE_FILE@[0; 74)\n       ERROR@[42; 43)\n         STAR@[42; 43) \"*\"\n       WHITESPACE@[43; 48) \"\\n    \"\n-      NAMED_FIELD_DEF@[48; 58)\n+      RECORD_FIELD_DEF@[48; 58)\n         VISIBILITY@[48; 51)\n           PUB_KW@[48; 51) \"pub\"\n         WHITESPACE@[51; 52) \" \"\n@@ -50,7 +50,7 @@ SOURCE_FILE@[0; 74)\n                 IDENT@[55; 58) \"u32\"\n       COMMA@[58; 59) \",\"\n       WHITESPACE@[59; 64) \"\\n    \"\n-      NAMED_FIELD_DEF@[64; 70)\n+      RECORD_FIELD_DEF@[64; 70)\n         NAME@[64; 65)\n           IDENT@[64; 65) \"z\"\n         COLON@[65; 66) \":\""}, {"sha": "4907bac6dadd0999523abc2333abf563f818cc92", "filename": "crates/ra_syntax/test_data/parser/err/0013_invalid_type.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -7,10 +7,10 @@ SOURCE_FILE@[0; 86)\n     WHITESPACE@[10; 11) \" \"\n     NAME@[11; 16)\n       IDENT@[11; 16) \"Cache\"\n-    POS_FIELD_DEF_LIST@[16; 72)\n+    TUPLE_FIELD_DEF_LIST@[16; 72)\n       L_PAREN@[16; 17) \"(\"\n       WHITESPACE@[17; 22) \"\\n    \"\n-      POS_FIELD_DEF@[22; 68)\n+      TUPLE_FIELD_DEF@[22; 68)\n         PATH_TYPE@[22; 68)\n           PATH@[22; 68)\n             PATH_SEGMENT@[22; 68)\n@@ -47,7 +47,7 @@ SOURCE_FILE@[0; 86)\n                                       ERROR@[67; 68)\n                                         AT@[67; 68) \"@\"\n       WHITESPACE@[68; 69) \" \"\n-      POS_FIELD_DEF@[69; 72)\n+      TUPLE_FIELD_DEF@[69; 72)\n         PATH_TYPE@[69; 72)\n           PATH@[69; 72)\n             PATH_SEGMENT@[69; 72)"}, {"sha": "52eb7d5e22a796c0cbc8babf4fe3b166409cf9ef", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -75,16 +75,16 @@ SOURCE_FILE@[0; 183)\n               IDENT@[106; 110) \"push\"\n             ARG_LIST@[110; 155)\n               L_PAREN@[110; 111) \"(\"\n-              STRUCT_LIT@[111; 154)\n+              RECORD_LIT@[111; 154)\n                 PATH@[111; 120)\n                   PATH_SEGMENT@[111; 120)\n                     NAME_REF@[111; 120)\n                       IDENT@[111; 120) \"ScopeData\"\n                 WHITESPACE@[120; 121) \" \"\n-                NAMED_FIELD_LIST@[121; 154)\n+                RECORD_FIELD_LIST@[121; 154)\n                   L_CURLY@[121; 122) \"{\"\n                   WHITESPACE@[122; 123) \" \"\n-                  NAMED_FIELD@[123; 135)\n+                  RECORD_FIELD@[123; 135)\n                     NAME_REF@[123; 129)\n                       IDENT@[123; 129) \"parent\"\n                     COLON@[129; 130) \":\"\n@@ -96,7 +96,7 @@ SOURCE_FILE@[0; 183)\n                             IDENT@[131; 135) \"None\"\n                   COMMA@[135; 136) \",\"\n                   WHITESPACE@[136; 137) \" \"\n-                  NAMED_FIELD@[137; 152)\n+                  RECORD_FIELD@[137; 152)\n                     NAME_REF@[137; 144)\n                       IDENT@[137; 144) \"entries\"\n                     COLON@[144; 145) \":\""}, {"sha": "7b228a8ed973d932ccb16fbee9bd60aa66db043d", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -28,9 +28,9 @@ SOURCE_FILE@[0; 575)\n           ENUM_VARIANT@[50; 62)\n             NAME@[50; 54)\n               IDENT@[50; 54) \"Var2\"\n-            POS_FIELD_DEF_LIST@[54; 62)\n+            TUPLE_FIELD_DEF_LIST@[54; 62)\n               L_PAREN@[54; 55) \"(\"\n-              POS_FIELD_DEF@[55; 61)\n+              TUPLE_FIELD_DEF@[55; 61)\n                 PATH_TYPE@[55; 61)\n                   PATH@[55; 61)\n                     PATH_SEGMENT@[55; 61)\n@@ -43,10 +43,10 @@ SOURCE_FILE@[0; 575)\n             NAME@[72; 76)\n               IDENT@[72; 76) \"Var3\"\n             WHITESPACE@[76; 77) \" \"\n-            NAMED_FIELD_DEF_LIST@[77; 145)\n+            RECORD_FIELD_DEF_LIST@[77; 145)\n               L_CURLY@[77; 78) \"{\"\n               WHITESPACE@[78; 91) \"\\n            \"\n-              NAMED_FIELD_DEF@[91; 95)\n+              RECORD_FIELD_DEF@[91; 95)\n                 NAME@[91; 94)\n                   IDENT@[91; 94) \"abc\"\n                 COLON@[94; 95) \":\"\n@@ -108,10 +108,10 @@ SOURCE_FILE@[0; 575)\n             NAME@[250; 259)\n               IDENT@[250; 259) \"StillFine\"\n             WHITESPACE@[259; 260) \" \"\n-            NAMED_FIELD_DEF_LIST@[260; 293)\n+            RECORD_FIELD_DEF_LIST@[260; 293)\n               L_CURLY@[260; 261) \"{\"\n               WHITESPACE@[261; 274) \"\\n            \"\n-              NAMED_FIELD_DEF@[274; 282)\n+              RECORD_FIELD_DEF@[274; 282)\n                 NAME@[274; 277)\n                   IDENT@[274; 277) \"def\"\n                 COLON@[277; 278) \":\"\n@@ -147,9 +147,9 @@ SOURCE_FILE@[0; 575)\n                 ENUM_VARIANT@[363; 372)\n                   NAME@[363; 367)\n                     IDENT@[363; 367) \"Nope\"\n-                  POS_FIELD_DEF_LIST@[367; 372)\n+                  TUPLE_FIELD_DEF_LIST@[367; 372)\n                     L_PAREN@[367; 368) \"(\"\n-                    POS_FIELD_DEF@[368; 371)\n+                    TUPLE_FIELD_DEF@[368; 371)\n                       PATH_TYPE@[368; 371)\n                         PATH@[368; 371)\n                           PATH_SEGMENT@[368; 371)"}, {"sha": "0e6e0ccc3ffb3e527e4e13822997cce7d11fc2c8", "filename": "crates/ra_syntax/test_data/parser/fuzz-failures/0000.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -86,7 +86,7 @@ fn find_reparsable_node(node: SyntaxNodeRef, range: TextRange) -> Option<(Syntax\n     fn reparser(node: SyntaxNodeRef) -> Option<fn(&mut Parser)> {\n         let res = match node.kind() {\n             BLOCK => grammar::block,\n-            NAMED_FIELD_DEF_LIST => grammar::named_field_def_list,\n+            RECORD_FIELD_DEF_LIST => grammar::record_field_def_list,\n             _ => return None,\n         };\n         Some(res)\n@@ -138,7 +138,7 @@ fn find_reparsable_node(node: SyntaxNodeRef, range: TextRange) -> Option<(Syntax\n         let res = match node.kind() {\n      ;\n     let end = u32::from(range.end()) as usize;\n-    text.replaT => grammar::named_field_def_list,\n+    text.replaT => grammar::record_field_def_list,\n             _ => return None,\n         };\n         Some(res)"}, {"sha": "4108762e524713b8e87e8e35670defa96768dcea", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0008_path_part.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -52,13 +52,13 @@ SOURCE_FILE@[0; 103)\n       LET_STMT@[58; 78)\n         LET_KW@[58; 61) \"let\"\n         WHITESPACE@[61; 62) \" \"\n-        STRUCT_PAT@[62; 72)\n+        RECORD_PAT@[62; 72)\n           PATH@[62; 65)\n             PATH_SEGMENT@[62; 65)\n               NAME_REF@[62; 65)\n                 IDENT@[62; 65) \"Bar\"\n           WHITESPACE@[65; 66) \" \"\n-          FIELD_PAT_LIST@[66; 72)\n+          RECORD_FIELD_PAT_LIST@[66; 72)\n             L_CURLY@[66; 67) \"{\"\n             WHITESPACE@[67; 68) \" \"\n             DOTDOT@[68; 70) \"..\""}, {"sha": "882e4a9aec0463667f5782036df862839f54fadb", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0040_crate_keyword_vis.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -22,10 +22,10 @@ SOURCE_FILE@[0; 71)\n     NAME@[27; 28)\n       IDENT@[27; 28) \"S\"\n     WHITESPACE@[28; 29) \" \"\n-    NAMED_FIELD_DEF_LIST@[29; 49)\n+    RECORD_FIELD_DEF_LIST@[29; 49)\n       L_CURLY@[29; 30) \"{\"\n       WHITESPACE@[30; 31) \" \"\n-      NAMED_FIELD_DEF@[31; 47)\n+      RECORD_FIELD_DEF@[31; 47)\n         VISIBILITY@[31; 36)\n           CRATE_KW@[31; 36) \"crate\"\n         WHITESPACE@[36; 37) \" \"\n@@ -46,9 +46,9 @@ SOURCE_FILE@[0; 71)\n     WHITESPACE@[56; 57) \" \"\n     NAME@[57; 58)\n       IDENT@[57; 58) \"T\"\n-    POS_FIELD_DEF_LIST@[58; 69)\n+    TUPLE_FIELD_DEF_LIST@[58; 69)\n       L_PAREN@[58; 59) \"(\"\n-      POS_FIELD_DEF@[59; 68)\n+      TUPLE_FIELD_DEF@[59; 68)\n         VISIBILITY@[59; 64)\n           CRATE_KW@[59; 64) \"crate\"\n         WHITESPACE@[64; 65) \" \""}, {"sha": "4744d8ac06597ffd9908f2bf70c983037d3607e0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0054_record_field_attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0054_field_attrs.rs"}, {"sha": "56aeba7681b7a7c779e3d2530ab510beed574920", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0054_record_field_attrs.txt", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@[0; 64)\n     NAME@[7; 8)\n       IDENT@[7; 8) \"S\"\n     WHITESPACE@[8; 9) \" \"\n-    NAMED_FIELD_DEF_LIST@[9; 63)\n+    RECORD_FIELD_DEF_LIST@[9; 63)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      NAMED_FIELD_DEF@[15; 60)\n+      RECORD_FIELD_DEF@[15; 60)\n         ATTR@[15; 43)\n           POUND@[15; 16) \"#\"\n           TOKEN_TREE@[16; 43)", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0054_field_attrs.txt"}, {"sha": "6285e554977220d75cfeef116439828ae3c6b182", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_record_lit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_struct_lit.rs"}, {"sha": "1c915ea0c1b17e4a942c649aa224e64efb7abc63", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_record_lit.txt", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -12,33 +12,33 @@ SOURCE_FILE@[0; 112)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n       EXPR_STMT@[15; 20)\n-        STRUCT_LIT@[15; 19)\n+        RECORD_LIT@[15; 19)\n           PATH@[15; 16)\n             PATH_SEGMENT@[15; 16)\n               NAME_REF@[15; 16)\n                 IDENT@[15; 16) \"S\"\n           WHITESPACE@[16; 17) \" \"\n-          NAMED_FIELD_LIST@[17; 19)\n+          RECORD_FIELD_LIST@[17; 19)\n             L_CURLY@[17; 18) \"{\"\n             R_CURLY@[18; 19) \"}\"\n         SEMI@[19; 20) \";\"\n       WHITESPACE@[20; 25) \"\\n    \"\n       EXPR_STMT@[25; 41)\n-        STRUCT_LIT@[25; 40)\n+        RECORD_LIT@[25; 40)\n           PATH@[25; 26)\n             PATH_SEGMENT@[25; 26)\n               NAME_REF@[25; 26)\n                 IDENT@[25; 26) \"S\"\n           WHITESPACE@[26; 27) \" \"\n-          NAMED_FIELD_LIST@[27; 40)\n+          RECORD_FIELD_LIST@[27; 40)\n             L_CURLY@[27; 28) \"{\"\n             WHITESPACE@[28; 29) \" \"\n-            NAMED_FIELD@[29; 30)\n+            RECORD_FIELD@[29; 30)\n               NAME_REF@[29; 30)\n                 IDENT@[29; 30) \"x\"\n             COMMA@[30; 31) \",\"\n             WHITESPACE@[31; 32) \" \"\n-            NAMED_FIELD@[32; 37)\n+            RECORD_FIELD@[32; 37)\n               NAME_REF@[32; 33)\n                 IDENT@[32; 33) \"y\"\n               COLON@[33; 34) \":\"\n@@ -51,21 +51,21 @@ SOURCE_FILE@[0; 112)\n         SEMI@[40; 41) \";\"\n       WHITESPACE@[41; 46) \"\\n    \"\n       EXPR_STMT@[46; 83)\n-        STRUCT_LIT@[46; 82)\n+        RECORD_LIT@[46; 82)\n           PATH@[46; 47)\n             PATH_SEGMENT@[46; 47)\n               NAME_REF@[46; 47)\n                 IDENT@[46; 47) \"S\"\n           WHITESPACE@[47; 48) \" \"\n-          NAMED_FIELD_LIST@[48; 82)\n+          RECORD_FIELD_LIST@[48; 82)\n             L_CURLY@[48; 49) \"{\"\n             WHITESPACE@[49; 50) \" \"\n-            NAMED_FIELD@[50; 51)\n+            RECORD_FIELD@[50; 51)\n               NAME_REF@[50; 51)\n                 IDENT@[50; 51) \"x\"\n             COMMA@[51; 52) \",\"\n             WHITESPACE@[52; 53) \" \"\n-            NAMED_FIELD@[53; 58)\n+            RECORD_FIELD@[53; 58)\n               NAME_REF@[53; 54)\n                 IDENT@[53; 54) \"y\"\n               COLON@[54; 55) \":\"\n@@ -94,16 +94,16 @@ SOURCE_FILE@[0; 112)\n         SEMI@[82; 83) \";\"\n       WHITESPACE@[83; 88) \"\\n    \"\n       EXPR_STMT@[88; 109)\n-        STRUCT_LIT@[88; 108)\n+        RECORD_LIT@[88; 108)\n           PATH@[88; 99)\n             PATH_SEGMENT@[88; 99)\n               NAME_REF@[88; 99)\n                 IDENT@[88; 99) \"TupleStruct\"\n           WHITESPACE@[99; 100) \" \"\n-          NAMED_FIELD_LIST@[100; 108)\n+          RECORD_FIELD_LIST@[100; 108)\n             L_CURLY@[100; 101) \"{\"\n             WHITESPACE@[101; 102) \" \"\n-            NAMED_FIELD@[102; 106)\n+            RECORD_FIELD@[102; 106)\n               NAME_REF@[102; 103)\n                 INT_NUMBER@[102; 103) \"0\"\n               COLON@[103; 104) \":\"", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_struct_lit.txt"}, {"sha": "35f02378268475a9f6404cd122e3cf81e5c1c449", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -49,14 +49,14 @@ SOURCE_FILE@[0; 215)\n                   WHITESPACE@[60; 61) \" \"\n                   R_ANGLE@[61; 62) \">\"\n                   WHITESPACE@[62; 63) \" \"\n-                  STRUCT_LIT@[63; 77)\n+                  RECORD_LIT@[63; 77)\n                     PATH@[63; 67)\n                       PATH_SEGMENT@[63; 67)\n                         NAME_REF@[63; 67)\n                           IDENT@[63; 67) \"Test\"\n-                    NAMED_FIELD_LIST@[67; 77)\n+                    RECORD_FIELD_LIST@[67; 77)\n                       L_CURLY@[67; 68) \"{\"\n-                      NAMED_FIELD@[68; 76)\n+                      RECORD_FIELD@[68; 76)\n                         NAME_REF@[68; 73)\n                           IDENT@[68; 73) \"field\"\n                         COLON@[73; 74) \":\""}, {"sha": "f9ace02ee077a70e7b555d882293806fc6278080", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0068_union_items.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -5,7 +5,7 @@ SOURCE_FILE@[0; 51)\n     NAME@[6; 9)\n       IDENT@[6; 9) \"Foo\"\n     WHITESPACE@[9; 10) \" \"\n-    NAMED_FIELD_DEF_LIST@[10; 12)\n+    RECORD_FIELD_DEF_LIST@[10; 12)\n       L_CURLY@[10; 11) \"{\"\n       R_CURLY@[11; 12) \"}\"\n   WHITESPACE@[12; 13) \"\\n\"\n@@ -15,10 +15,10 @@ SOURCE_FILE@[0; 51)\n     NAME@[19; 22)\n       IDENT@[19; 22) \"Foo\"\n     WHITESPACE@[22; 23) \" \"\n-    NAMED_FIELD_DEF_LIST@[23; 50)\n+    RECORD_FIELD_DEF_LIST@[23; 50)\n       L_CURLY@[23; 24) \"{\"\n       WHITESPACE@[24; 29) \"\\n    \"\n-      NAMED_FIELD_DEF@[29; 35)\n+      RECORD_FIELD_DEF@[29; 35)\n         NAME@[29; 30)\n           IDENT@[29; 30) \"a\"\n         COLON@[30; 31) \":\"\n@@ -30,7 +30,7 @@ SOURCE_FILE@[0; 51)\n                 IDENT@[32; 35) \"i32\"\n       COMMA@[35; 36) \",\"\n       WHITESPACE@[36; 41) \"\\n    \"\n-      NAMED_FIELD_DEF@[41; 47)\n+      RECORD_FIELD_DEF@[41; 47)\n         NAME@[41; 42)\n           IDENT@[41; 42) \"b\"\n         COLON@[42; 43) \":\""}, {"sha": "e909f2b78561009b91478f3726f653dbf93ad664", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0083_struct_items.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@[0; 106)\n     NAME@[19; 22)\n       IDENT@[19; 22) \"Foo\"\n     WHITESPACE@[22; 23) \" \"\n-    NAMED_FIELD_DEF_LIST@[23; 25)\n+    RECORD_FIELD_DEF_LIST@[23; 25)\n       L_CURLY@[23; 24) \"{\"\n       R_CURLY@[24; 25) \"}\"\n   WHITESPACE@[25; 26) \"\\n\"\n@@ -21,7 +21,7 @@ SOURCE_FILE@[0; 106)\n     WHITESPACE@[32; 33) \" \"\n     NAME@[33; 36)\n       IDENT@[33; 36) \"Foo\"\n-    POS_FIELD_DEF_LIST@[36; 38)\n+    TUPLE_FIELD_DEF_LIST@[36; 38)\n       L_PAREN@[36; 37) \"(\"\n       R_PAREN@[37; 38) \")\"\n     SEMI@[38; 39) \";\"\n@@ -31,17 +31,17 @@ SOURCE_FILE@[0; 106)\n     WHITESPACE@[46; 47) \" \"\n     NAME@[47; 50)\n       IDENT@[47; 50) \"Foo\"\n-    POS_FIELD_DEF_LIST@[50; 65)\n+    TUPLE_FIELD_DEF_LIST@[50; 65)\n       L_PAREN@[50; 51) \"(\"\n-      POS_FIELD_DEF@[51; 57)\n+      TUPLE_FIELD_DEF@[51; 57)\n         PATH_TYPE@[51; 57)\n           PATH@[51; 57)\n             PATH_SEGMENT@[51; 57)\n               NAME_REF@[51; 57)\n                 IDENT@[51; 57) \"String\"\n       COMMA@[57; 58) \",\"\n       WHITESPACE@[58; 59) \" \"\n-      POS_FIELD_DEF@[59; 64)\n+      TUPLE_FIELD_DEF@[59; 64)\n         PATH_TYPE@[59; 64)\n           PATH@[59; 64)\n             PATH_SEGMENT@[59; 64)\n@@ -56,10 +56,10 @@ SOURCE_FILE@[0; 106)\n     NAME@[74; 77)\n       IDENT@[74; 77) \"Foo\"\n     WHITESPACE@[77; 78) \" \"\n-    NAMED_FIELD_DEF_LIST@[78; 105)\n+    RECORD_FIELD_DEF_LIST@[78; 105)\n       L_CURLY@[78; 79) \"{\"\n       WHITESPACE@[79; 84) \"\\n    \"\n-      NAMED_FIELD_DEF@[84; 90)\n+      RECORD_FIELD_DEF@[84; 90)\n         NAME@[84; 85)\n           IDENT@[84; 85) \"a\"\n         COLON@[85; 86) \":\"\n@@ -71,7 +71,7 @@ SOURCE_FILE@[0; 106)\n                 IDENT@[87; 90) \"i32\"\n       COMMA@[90; 91) \",\"\n       WHITESPACE@[91; 96) \"\\n    \"\n-      NAMED_FIELD_DEF@[96; 102)\n+      RECORD_FIELD_DEF@[96; 102)\n         NAME@[96; 97)\n           IDENT@[96; 97) \"b\"\n         COLON@[97; 98) \":\""}, {"sha": "da3412fa8a94a44de833d2edfae5d7b9dd1e2660", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0102_record_field_pat_list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0102_field_pat_list.rs"}, {"sha": "22db72c1297c804c3bc108e6401244455d100370", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0102_record_field_pat_list.txt", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -14,13 +14,13 @@ SOURCE_FILE@[0; 119)\n       LET_STMT@[15; 29)\n         LET_KW@[15; 18) \"let\"\n         WHITESPACE@[18; 19) \" \"\n-        STRUCT_PAT@[19; 23)\n+        RECORD_PAT@[19; 23)\n           PATH@[19; 20)\n             PATH_SEGMENT@[19; 20)\n               NAME_REF@[19; 20)\n                 IDENT@[19; 20) \"S\"\n           WHITESPACE@[20; 21) \" \"\n-          FIELD_PAT_LIST@[21; 23)\n+          RECORD_FIELD_PAT_LIST@[21; 23)\n             L_CURLY@[21; 22) \"{\"\n             R_CURLY@[22; 23) \"}\"\n         WHITESPACE@[23; 24) \" \"\n@@ -34,13 +34,13 @@ SOURCE_FILE@[0; 119)\n       LET_STMT@[34; 62)\n         LET_KW@[34; 37) \"let\"\n         WHITESPACE@[37; 38) \" \"\n-        STRUCT_PAT@[38; 56)\n+        RECORD_PAT@[38; 56)\n           PATH@[38; 39)\n             PATH_SEGMENT@[38; 39)\n               NAME_REF@[38; 39)\n                 IDENT@[38; 39) \"S\"\n           WHITESPACE@[39; 40) \" \"\n-          FIELD_PAT_LIST@[40; 56)\n+          RECORD_FIELD_PAT_LIST@[40; 56)\n             L_CURLY@[40; 41) \"{\"\n             WHITESPACE@[41; 42) \" \"\n             BIND_PAT@[42; 43)\n@@ -68,16 +68,16 @@ SOURCE_FILE@[0; 119)\n       LET_STMT@[67; 90)\n         LET_KW@[67; 70) \"let\"\n         WHITESPACE@[70; 71) \" \"\n-        STRUCT_PAT@[71; 84)\n+        RECORD_PAT@[71; 84)\n           PATH@[71; 72)\n             PATH_SEGMENT@[71; 72)\n               NAME_REF@[71; 72)\n                 IDENT@[71; 72) \"S\"\n           WHITESPACE@[72; 73) \" \"\n-          FIELD_PAT_LIST@[73; 84)\n+          RECORD_FIELD_PAT_LIST@[73; 84)\n             L_CURLY@[73; 74) \"{\"\n             WHITESPACE@[74; 75) \" \"\n-            FIELD_PAT@[75; 79)\n+            RECORD_FIELD_PAT@[75; 79)\n               NAME@[75; 76)\n                 IDENT@[75; 76) \"h\"\n               COLON@[76; 77) \":\"\n@@ -99,16 +99,16 @@ SOURCE_FILE@[0; 119)\n       LET_STMT@[95; 116)\n         LET_KW@[95; 98) \"let\"\n         WHITESPACE@[98; 99) \" \"\n-        STRUCT_PAT@[99; 110)\n+        RECORD_PAT@[99; 110)\n           PATH@[99; 100)\n             PATH_SEGMENT@[99; 100)\n               NAME_REF@[99; 100)\n                 IDENT@[99; 100) \"S\"\n           WHITESPACE@[100; 101) \" \"\n-          FIELD_PAT_LIST@[101; 110)\n+          RECORD_FIELD_PAT_LIST@[101; 110)\n             L_CURLY@[101; 102) \"{\"\n             WHITESPACE@[102; 103) \" \"\n-            FIELD_PAT@[103; 107)\n+            RECORD_FIELD_PAT@[103; 107)\n               NAME@[103; 104)\n                 IDENT@[103; 104) \"h\"\n               COLON@[104; 105) \":\"", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0102_field_pat_list.txt"}, {"sha": "f5de0140587885d8d7eb21359714fa8d1b463653", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0114_tuple_struct_where.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -10,9 +10,9 @@ SOURCE_FILE@[0; 53)\n         NAME@[12; 13)\n           IDENT@[12; 13) \"T\"\n       R_ANGLE@[13; 14) \">\"\n-    POS_FIELD_DEF_LIST@[14; 17)\n+    TUPLE_FIELD_DEF_LIST@[14; 17)\n       L_PAREN@[14; 15) \"(\"\n-      POS_FIELD_DEF@[15; 16)\n+      TUPLE_FIELD_DEF@[15; 16)\n         PATH_TYPE@[15; 16)\n           PATH@[15; 16)\n             PATH_SEGMENT@[15; 16)\n@@ -51,9 +51,9 @@ SOURCE_FILE@[0; 53)\n         NAME@[46; 47)\n           IDENT@[46; 47) \"T\"\n       R_ANGLE@[47; 48) \">\"\n-    POS_FIELD_DEF_LIST@[48; 51)\n+    TUPLE_FIELD_DEF_LIST@[48; 51)\n       L_PAREN@[48; 49) \"(\"\n-      POS_FIELD_DEF@[49; 50)\n+      TUPLE_FIELD_DEF@[49; 50)\n         PATH_TYPE@[49; 50)\n           PATH@[49; 50)\n             PATH_SEGMENT@[49; 50)"}, {"sha": "635b9ac21af745a1bb1ef411c18ea2af36e624f1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0115_tuple_field_attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0115_pos_field_attrs.rs"}, {"sha": "cb6d9f76d0196a803612b968a2010793d0b184a6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0115_tuple_field_attrs.txt", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@[0; 60)\n     NAME@[7; 8)\n       IDENT@[7; 8) \"S\"\n     WHITESPACE@[8; 9) \" \"\n-    POS_FIELD_DEF_LIST@[9; 58)\n+    TUPLE_FIELD_DEF_LIST@[9; 58)\n       L_PAREN@[9; 10) \"(\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      POS_FIELD_DEF@[15; 55)\n+      TUPLE_FIELD_DEF@[15; 55)\n         ATTR@[15; 43)\n           POUND@[15; 16) \"#\"\n           TOKEN_TREE@[16; 43)", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0115_pos_field_attrs.txt"}, {"sha": "a6c7760c7672ba9f6f2781a37897e9a08ac4aab5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0125_record_literal_field_with_attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rs?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0125_struct_literal_field_with_attr.rs"}, {"sha": "8fdf3756f413f555900c6108d7a2e46a1e73a3e6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0125_record_literal_field_with_attr.txt", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -11,16 +11,16 @@ SOURCE_FILE@[0; 46)\n     BLOCK@[10; 45)\n       L_CURLY@[10; 11) \"{\"\n       WHITESPACE@[11; 16) \"\\n    \"\n-      STRUCT_LIT@[16; 43)\n+      RECORD_LIT@[16; 43)\n         PATH@[16; 17)\n           PATH_SEGMENT@[16; 17)\n             NAME_REF@[16; 17)\n               IDENT@[16; 17) \"S\"\n         WHITESPACE@[17; 18) \" \"\n-        NAMED_FIELD_LIST@[18; 43)\n+        RECORD_FIELD_LIST@[18; 43)\n           L_CURLY@[18; 19) \"{\"\n           WHITESPACE@[19; 20) \" \"\n-          NAMED_FIELD@[20; 41)\n+          RECORD_FIELD@[20; 41)\n             ATTR@[20; 32)\n               POUND@[20; 21) \"#\"\n               TOKEN_TREE@[21; 32)", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0125_struct_literal_field_with_attr.txt"}, {"sha": "64cbf4632ac459d53a79a44cd54fcf98775d2da8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0134_nocontentexpr_after_item.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -53,7 +53,7 @@ SOURCE_FILE@[0; 111)\n         NAME@[103; 104)\n           IDENT@[103; 104) \"S\"\n         WHITESPACE@[104; 105) \" \"\n-        NAMED_FIELD_DEF_LIST@[105; 107)\n+        RECORD_FIELD_DEF_LIST@[105; 107)\n           L_CURLY@[105; 106) \"{\"\n           R_CURLY@[106; 107) \"}\"\n       SEMI@[107; 108) \";\""}, {"sha": "c4db9da40a901766c9d3b9c4fdbde18ddee532bc", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0138_expression_after_block.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -22,14 +22,14 @@ SOURCE_FILE@[0; 52)\n         WHITESPACE@[23; 24) \" \"\n         EQ@[24; 25) \"=\"\n         WHITESPACE@[25; 26) \" \"\n-        STRUCT_LIT@[26; 33)\n+        RECORD_LIT@[26; 33)\n           PATH@[26; 27)\n             PATH_SEGMENT@[26; 27)\n               NAME_REF@[26; 27)\n                 IDENT@[26; 27) \"F\"\n-          NAMED_FIELD_LIST@[27; 33)\n+          RECORD_FIELD_LIST@[27; 33)\n             L_CURLY@[27; 28) \"{\"\n-            NAMED_FIELD@[28; 32)\n+            RECORD_FIELD@[28; 32)\n               NAME_REF@[28; 29)\n                 IDENT@[28; 29) \"x\"\n               COLON@[29; 30) \":\""}, {"sha": "fdc2d676895d4630ceb406d85f7a332e3a2bbe95", "filename": "crates/ra_syntax/test_data/parser/ok/0001_struct_item.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -20,10 +20,10 @@ SOURCE_FILE@[0; 32)\n                     IDENT@[12; 16) \"Copy\"\n       R_ANGLE@[16; 17) \">\"\n     WHITESPACE@[17; 18) \" \"\n-    NAMED_FIELD_DEF_LIST@[18; 31)\n+    RECORD_FIELD_DEF_LIST@[18; 31)\n       L_CURLY@[18; 19) \"{\"\n       WHITESPACE@[19; 24) \"\\n    \"\n-      NAMED_FIELD_DEF@[24; 28)\n+      RECORD_FIELD_DEF@[24; 28)\n         NAME@[24; 25)\n           IDENT@[24; 25) \"f\"\n         COLON@[25; 26) \":\""}, {"sha": "ef34702fd0d44458e096da446a5aa5509437be8f", "filename": "crates/ra_syntax/test_data/parser/ok/0002_struct_item_field.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@[0; 25)\n     NAME@[7; 8)\n       IDENT@[7; 8) \"S\"\n     WHITESPACE@[8; 9) \" \"\n-    NAMED_FIELD_DEF_LIST@[9; 25)\n+    RECORD_FIELD_DEF_LIST@[9; 25)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      NAMED_FIELD_DEF@[15; 23)\n+      RECORD_FIELD_DEF@[15; 23)\n         NAME@[15; 18)\n           IDENT@[15; 18) \"foo\"\n         COLON@[18; 19) \":\""}, {"sha": "5c16d0be673d322e934439add49cf8925d2f40da", "filename": "crates/ra_syntax/test_data/parser/ok/0008_mod_item.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -46,7 +46,7 @@ SOURCE_FILE@[0; 118)\n         NAME@[59; 60)\n           IDENT@[59; 60) \"S\"\n         WHITESPACE@[60; 61) \" \"\n-        NAMED_FIELD_DEF_LIST@[61; 63)\n+        RECORD_FIELD_DEF_LIST@[61; 63)\n           L_CURLY@[61; 62) \"{\"\n           R_CURLY@[62; 63) \"}\"\n       WHITESPACE@[63; 64) \"\\n\""}, {"sha": "3fbd14d7b7adb55e1e88eb937d36e136488b4f98", "filename": "crates/ra_syntax/test_data/parser/ok/0016_struct_flavors.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@[0; 97)\n     NAME@[17; 18)\n       IDENT@[17; 18) \"B\"\n     WHITESPACE@[18; 19) \" \"\n-    NAMED_FIELD_DEF_LIST@[19; 21)\n+    RECORD_FIELD_DEF_LIST@[19; 21)\n       L_CURLY@[19; 20) \"{\"\n       R_CURLY@[20; 21) \"}\"\n   WHITESPACE@[21; 22) \"\\n\"\n@@ -21,7 +21,7 @@ SOURCE_FILE@[0; 97)\n     WHITESPACE@[28; 29) \" \"\n     NAME@[29; 30)\n       IDENT@[29; 30) \"C\"\n-    POS_FIELD_DEF_LIST@[30; 32)\n+    TUPLE_FIELD_DEF_LIST@[30; 32)\n       L_PAREN@[30; 31) \"(\"\n       R_PAREN@[31; 32) \")\"\n     SEMI@[32; 33) \";\"\n@@ -32,10 +32,10 @@ SOURCE_FILE@[0; 97)\n     NAME@[42; 43)\n       IDENT@[42; 43) \"D\"\n     WHITESPACE@[43; 44) \" \"\n-    NAMED_FIELD_DEF_LIST@[44; 74)\n+    RECORD_FIELD_DEF_LIST@[44; 74)\n       L_CURLY@[44; 45) \"{\"\n       WHITESPACE@[45; 50) \"\\n    \"\n-      NAMED_FIELD_DEF@[50; 56)\n+      RECORD_FIELD_DEF@[50; 56)\n         NAME@[50; 51)\n           IDENT@[50; 51) \"a\"\n         COLON@[51; 52) \":\"\n@@ -47,7 +47,7 @@ SOURCE_FILE@[0; 97)\n                 IDENT@[53; 56) \"u32\"\n       COMMA@[56; 57) \",\"\n       WHITESPACE@[57; 62) \"\\n    \"\n-      NAMED_FIELD_DEF@[62; 72)\n+      RECORD_FIELD_DEF@[62; 72)\n         VISIBILITY@[62; 65)\n           PUB_KW@[62; 65) \"pub\"\n         WHITESPACE@[65; 66) \" \"\n@@ -68,9 +68,9 @@ SOURCE_FILE@[0; 97)\n     WHITESPACE@[82; 83) \" \"\n     NAME@[83; 84)\n       IDENT@[83; 84) \"E\"\n-    POS_FIELD_DEF_LIST@[84; 95)\n+    TUPLE_FIELD_DEF_LIST@[84; 95)\n       L_PAREN@[84; 85) \"(\"\n-      POS_FIELD_DEF@[85; 90)\n+      TUPLE_FIELD_DEF@[85; 90)\n         VISIBILITY@[85; 88)\n           PUB_KW@[85; 88) \"pub\"\n         WHITESPACE@[88; 89) \" \"\n@@ -81,7 +81,7 @@ SOURCE_FILE@[0; 97)\n                 IDENT@[89; 90) \"x\"\n       COMMA@[90; 91) \",\"\n       WHITESPACE@[91; 92) \" \"\n-      POS_FIELD_DEF@[92; 93)\n+      TUPLE_FIELD_DEF@[92; 93)\n         PATH_TYPE@[92; 93)\n           PATH@[92; 93)\n             PATH_SEGMENT@[92; 93)"}, {"sha": "1e4e58dd3ffb9ec3d7466bcea550bfd4b93763cf", "filename": "crates/ra_syntax/test_data/parser/ok/0018_struct_type_params.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -23,9 +23,9 @@ SOURCE_FILE@[0; 290)\n         NAME@[24; 25)\n           IDENT@[24; 25) \"T\"\n       R_ANGLE@[25; 26) \">\"\n-    POS_FIELD_DEF_LIST@[26; 31)\n+    TUPLE_FIELD_DEF_LIST@[26; 31)\n       L_PAREN@[26; 27) \"(\"\n-      POS_FIELD_DEF@[27; 30)\n+      TUPLE_FIELD_DEF@[27; 30)\n         PATH_TYPE@[27; 30)\n           PATH@[27; 30)\n             PATH_SEGMENT@[27; 30)\n@@ -46,10 +46,10 @@ SOURCE_FILE@[0; 290)\n           IDENT@[43; 44) \"T\"\n       R_ANGLE@[44; 45) \">\"\n     WHITESPACE@[45; 46) \" \"\n-    NAMED_FIELD_DEF_LIST@[46; 56)\n+    RECORD_FIELD_DEF_LIST@[46; 56)\n       L_CURLY@[46; 47) \"{\"\n       WHITESPACE@[47; 48) \" \"\n-      NAMED_FIELD_DEF@[48; 54)\n+      RECORD_FIELD_DEF@[48; 54)\n         NAME@[48; 49)\n           IDENT@[48; 49) \"u\"\n         COLON@[49; 50) \":\""}, {"sha": "9d4a47a51bf47d500881313afab6d13e275415fc", "filename": "crates/ra_syntax/test_data/parser/ok/0019_enums.txt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -86,10 +86,10 @@ SOURCE_FILE@[0; 182)\n         NAME@[101; 102)\n           IDENT@[101; 102) \"C\"\n         WHITESPACE@[102; 103) \" \"\n-        NAMED_FIELD_DEF_LIST@[103; 146)\n+        RECORD_FIELD_DEF_LIST@[103; 146)\n           L_CURLY@[103; 104) \"{\"\n           WHITESPACE@[104; 113) \"\\n        \"\n-          NAMED_FIELD_DEF@[113; 119)\n+          RECORD_FIELD_DEF@[113; 119)\n             NAME@[113; 114)\n               IDENT@[113; 114) \"a\"\n             COLON@[114; 115) \":\"\n@@ -101,7 +101,7 @@ SOURCE_FILE@[0; 182)\n                     IDENT@[116; 119) \"u32\"\n           COMMA@[119; 120) \",\"\n           WHITESPACE@[120; 129) \"\\n        \"\n-          NAMED_FIELD_DEF@[129; 139)\n+          RECORD_FIELD_DEF@[129; 139)\n             VISIBILITY@[129; 132)\n               PUB_KW@[129; 132) \"pub\"\n             WHITESPACE@[132; 133) \" \"\n@@ -123,17 +123,17 @@ SOURCE_FILE@[0; 182)\n         NAME@[152; 153)\n           IDENT@[152; 153) \"F\"\n         WHITESPACE@[153; 154) \" \"\n-        NAMED_FIELD_DEF_LIST@[154; 156)\n+        RECORD_FIELD_DEF_LIST@[154; 156)\n           L_CURLY@[154; 155) \"{\"\n           R_CURLY@[155; 156) \"}\"\n       COMMA@[156; 157) \",\"\n       WHITESPACE@[157; 162) \"\\n    \"\n       ENUM_VARIANT@[162; 169)\n         NAME@[162; 163)\n           IDENT@[162; 163) \"D\"\n-        POS_FIELD_DEF_LIST@[163; 169)\n+        TUPLE_FIELD_DEF_LIST@[163; 169)\n           L_PAREN@[163; 164) \"(\"\n-          POS_FIELD_DEF@[164; 167)\n+          TUPLE_FIELD_DEF@[164; 167)\n             PATH_TYPE@[164; 167)\n               PATH@[164; 167)\n                 PATH_SEGMENT@[164; 167)\n@@ -146,7 +146,7 @@ SOURCE_FILE@[0; 182)\n       ENUM_VARIANT@[175; 178)\n         NAME@[175; 176)\n           IDENT@[175; 176) \"E\"\n-        POS_FIELD_DEF_LIST@[176; 178)\n+        TUPLE_FIELD_DEF_LIST@[176; 178)\n           L_PAREN@[176; 177) \"(\"\n           R_PAREN@[177; 178) \")\"\n       COMMA@[178; 179) \",\""}, {"sha": "c13ebfe37b4bb8c28fc149d3f51daea4aa54b315", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -1564,10 +1564,10 @@ SOURCE_FILE@[0; 3813)\n             LIFETIME@[2863; 2869) \"\\'union\"\n           R_ANGLE@[2869; 2870) \">\"\n         WHITESPACE@[2870; 2871) \" \"\n-        NAMED_FIELD_DEF_LIST@[2871; 2904)\n+        RECORD_FIELD_DEF_LIST@[2871; 2904)\n           L_CURLY@[2871; 2872) \"{\"\n           WHITESPACE@[2872; 2873) \" \"\n-          NAMED_FIELD_DEF@[2873; 2901)\n+          RECORD_FIELD_DEF@[2873; 2901)\n             NAME@[2873; 2878)\n               IDENT@[2873; 2878) \"union\"\n             COLON@[2878; 2879) \":\""}, {"sha": "05f2c656f541d60d0dab0995fb425227290be035", "filename": "crates/ra_syntax/test_data/parser/ok/0040_raw_struct_item_field.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@[0; 27)\n     NAME@[7; 8)\n       IDENT@[7; 8) \"S\"\n     WHITESPACE@[8; 9) \" \"\n-    NAMED_FIELD_DEF_LIST@[9; 27)\n+    RECORD_FIELD_DEF_LIST@[9; 27)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n-      NAMED_FIELD_DEF@[15; 25)\n+      RECORD_FIELD_DEF@[15; 25)\n         NAME@[15; 20)\n           IDENT@[15; 20) \"r#foo\"\n         COLON@[20; 21) \":\""}, {"sha": "1f2456afac6d34c10676abe14979934ba60be348", "filename": "crates/ra_syntax/test_data/parser/ok/0043_complex_assignment.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -7,10 +7,10 @@ SOURCE_FILE@[0; 160)\n     NAME@[69; 73)\n       IDENT@[69; 73) \"Repr\"\n     WHITESPACE@[73; 74) \" \"\n-    NAMED_FIELD_DEF_LIST@[74; 90)\n+    RECORD_FIELD_DEF_LIST@[74; 90)\n       L_CURLY@[74; 75) \"{\"\n       WHITESPACE@[75; 76) \" \"\n-      NAMED_FIELD_DEF@[76; 88)\n+      RECORD_FIELD_DEF@[76; 88)\n         NAME@[76; 79)\n           IDENT@[76; 79) \"raw\"\n         COLON@[79; 80) \":\"\n@@ -46,16 +46,16 @@ SOURCE_FILE@[0; 160)\n         BIN_EXPR@[107; 135)\n           INDEX_EXPR@[107; 131)\n             FIELD_EXPR@[107; 128)\n-              STRUCT_LIT@[107; 124)\n+              RECORD_LIT@[107; 124)\n                 PATH@[107; 111)\n                   PATH_SEGMENT@[107; 111)\n                     NAME_REF@[107; 111)\n                       IDENT@[107; 111) \"Repr\"\n                 WHITESPACE@[111; 112) \" \"\n-                NAMED_FIELD_LIST@[112; 124)\n+                RECORD_FIELD_LIST@[112; 124)\n                   L_CURLY@[112; 113) \"{\"\n                   WHITESPACE@[113; 114) \" \"\n-                  NAMED_FIELD@[114; 122)\n+                  RECORD_FIELD@[114; 122)\n                     NAME_REF@[114; 117)\n                       IDENT@[114; 117) \"raw\"\n                     COLON@[117; 118) \":\"\n@@ -83,14 +83,14 @@ SOURCE_FILE@[0; 160)\n       WHITESPACE@[136; 141) \"\\n    \"\n       EXPR_STMT@[141; 157)\n         CALL_EXPR@[141; 156)\n-          STRUCT_LIT@[141; 154)\n+          RECORD_LIT@[141; 154)\n             PATH@[141; 145)\n               PATH_SEGMENT@[141; 145)\n                 NAME_REF@[141; 145)\n                   IDENT@[141; 145) \"Repr\"\n-            NAMED_FIELD_LIST@[145; 154)\n+            RECORD_FIELD_LIST@[145; 154)\n               L_CURLY@[145; 146) \"{\"\n-              NAMED_FIELD@[146; 153)\n+              RECORD_FIELD@[146; 153)\n                 NAME_REF@[146; 149)\n                   IDENT@[146; 149) \"raw\"\n                 COLON@[149; 150) \":\""}, {"sha": "136e2aae1a8e3ba2813cd4889c62ea5e77c6067f", "filename": "crates/ra_syntax/test_data/parser/ok/0047_minus_in_inner_pattern.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b18a4eef9e69260ce2f105b33553c929cb7d827/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.txt?ref=5b18a4eef9e69260ce2f105b33553c929cb7d827", "patch": "@@ -268,17 +268,17 @@ SOURCE_FILE@[0; 395)\n       ENUM_VARIANT@[356; 365)\n         NAME@[356; 357)\n           IDENT@[356; 357) \"B\"\n-        POS_FIELD_DEF_LIST@[357; 365)\n+        TUPLE_FIELD_DEF_LIST@[357; 365)\n           L_PAREN@[357; 358) \"(\"\n-          POS_FIELD_DEF@[358; 360)\n+          TUPLE_FIELD_DEF@[358; 360)\n             PATH_TYPE@[358; 360)\n               PATH@[358; 360)\n                 PATH_SEGMENT@[358; 360)\n                   NAME_REF@[358; 360)\n                     IDENT@[358; 360) \"i8\"\n           COMMA@[360; 361) \",\"\n           WHITESPACE@[361; 362) \" \"\n-          POS_FIELD_DEF@[362; 364)\n+          TUPLE_FIELD_DEF@[362; 364)\n             PATH_TYPE@[362; 364)\n               PATH@[362; 364)\n                 PATH_SEGMENT@[362; 364)"}]}