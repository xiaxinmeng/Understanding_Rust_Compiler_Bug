{"sha": "bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYTE1OTZjNzE5ODliZGJhZDE5ZWMwNmIyN2ZhMGQ4MWQ1YmM1OGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-25T10:12:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-10T11:50:13Z"}, "message": "also print the expected type in the error message", "tree": {"sha": "3ea362e1628b2e4e14e34d0cf5caf2690d475333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ea362e1628b2e4e14e34d0cf5caf2690d475333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "html_url": "https://github.com/rust-lang/rust/commit/bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b15c7160e165621f0a7ae6a71db30dded254df", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b15c7160e165621f0a7ae6a71db30dded254df", "html_url": "https://github.com/rust-lang/rust/commit/54b15c7160e165621f0a7ae6a71db30dded254df"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "f56c42738e71e6f10edf6597d0d016f2f904e364", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "patch": "@@ -465,7 +465,8 @@ pub enum ErrKind {\n     Math(ConstMathErr),\n \n     IntermediateUnsignedNegative,\n-    InferredWrongType(ConstInt),\n+    /// Expected, Got\n+    TypeMismatch(String, ConstInt),\n     BadType(ConstVal),\n }\n \n@@ -528,7 +529,10 @@ impl ConstEvalErr {\n                                              number was encountered. This is most likely a bug in\\\n                                              the constant evaluator\".into_cow(),\n \n-            InferredWrongType(ref i) => format!(\"inferred wrong type for {}\", i).into_cow(),\n+            TypeMismatch(ref expected, ref got) => {\n+                format!(\"mismatched types: expected `{}`, found `{}`\",\n+                        expected, got.description()).into_cow()\n+            },\n             BadType(ref i) => format!(\"value of wrong type: {:?}\", i).into_cow(),\n         }\n     }\n@@ -745,7 +749,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n \n         let val = match eval_const_expr_partial(tcx, &base, base_hint, fn_args) {\n             Ok(val) => val,\n-            Err(ConstEvalErr { kind: InferredWrongType(val), .. }) => {\n+            Err(ConstEvalErr { kind: TypeMismatch(_, val), .. }) => {\n                 // Something like `5i8 as usize` doesn't need a type hint for the base\n                 // instead take the type hint from the inner value\n                 let hint = match val.int_type() {\n@@ -1085,8 +1089,8 @@ fn infer<'tcx>(\n         (&ty::TyUint(_), Infer(_)) => Err(err(Math(ConstMathErr::NotInRange))),\n         (&ty::TyUint(_), InferSigned(_)) => Err(err(IntermediateUnsignedNegative)),\n \n-        (&ty::TyInt(_), i) |\n-        (&ty::TyUint(_), i) => Err(err(InferredWrongType(i))),\n+        (&ty::TyInt(ity), i) => Err(err(TypeMismatch(ity.to_string(), i))),\n+        (&ty::TyUint(ity), i) => Err(err(TypeMismatch(ity.to_string(), i))),\n \n         (&ty::TyEnum(ref adt, _), i) => {\n             let hints = tcx.lookup_repr_hints(adt.did);"}, {"sha": "c90ae045f96b4aa0430e2b3c020f47d33caeba1a", "filename": "src/test/compile-fail/const-eval-overflow-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs?ref=bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "patch": "@@ -17,7 +17,7 @@\n // self-hosted and a cross-compiled setup; therefore resorting to\n // error-pattern for now.\n \n-// error-pattern: expected constant integer for repeat count, but tried to add two integrals of\n+// error-pattern: expected constant integer for repeat count, but attempted to add with overflow\n \n #![allow(unused_imports)]\n "}, {"sha": "5aa93cf6383fe4c37e2209f3c33cb350e1ed2681", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "patch": "@@ -21,7 +21,9 @@ use std::{u8, u16, u32, u64, usize};\n \n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n-    //~^ ERROR tried to add two integrals of different types [E0250]\n+    //~^ ERROR mismatched types:\n+    //~| expected `i8`,\n+    //~| found `u8` [E0250]\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {"}, {"sha": "1c98abce0304e149f092ea7e0a4137c0cac303d5", "filename": "src/test/compile-fail/issue-8761.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs?ref=bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "patch": "@@ -10,9 +10,13 @@\n \n enum Foo {\n     A = 1i64,\n-    //~^ ERROR mismatched types: expected `isize` got `i64`\n+    //~^ ERROR mismatched types:\n+    //~| expected `isize`,\n+    //~| found `i64` [E0080]\n     B = 2u8\n-    //~^ ERROR mismatched types: expected `isize` got `u8`\n+    //~^ ERROR mismatched types:\n+    //~| expected `isize`,\n+    //~| found `u8` [E0080]\n }\n \n fn main() {}"}, {"sha": "10b722946a8a89f847c5af45081ee29e40f9470c", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba1596c71989bdbad19ec06b27fa0d81d5bc58f/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=bba1596c71989bdbad19ec06b27fa0d81d5bc58f", "patch": "@@ -43,13 +43,17 @@ fn main() {\n     let f = [0; -4_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n-    //~| found `isize`\n-    //~| ERROR expected positive integer for repeat count, found isize [E0306]\n+    //~| found `isize` [E0308]\n+    //~| ERROR mismatched types:\n+    //~| expected `usize`,\n+    //~| found `isize` [E0307]\n     let f = [0_usize; -1_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n-    //~| found `isize`\n-    //~| ERROR expected positive integer for repeat count, found isize [E0306]\n+    //~| found `isize` [E0308]\n+    //~| ERROR mismatched types\n+    //~| expected `usize`\n+    //~| found `isize` [E0307]\n     struct G {\n         g: (),\n     }"}]}