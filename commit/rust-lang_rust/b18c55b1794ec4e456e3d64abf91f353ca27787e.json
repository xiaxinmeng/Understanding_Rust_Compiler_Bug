{"sha": "b18c55b1794ec4e456e3d64abf91f353ca27787e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOGM1NWIxNzk0ZWM0ZTQ1NmUzZDY0YWJmOTFmMzUzY2EyNzc4N2U=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-29T00:33:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T00:33:07Z"}, "message": "Rollup merge of #72239 - hch12907:master, r=dtolnay\n\nImplement PartialOrd and Ord for SocketAddr*\n\nThe implementation is mostly the same as the one found in `IpAddr` (other than adding comparison for ports, of course).\nContinues #53788 and #53863\nFixes #53710", "tree": {"sha": "7d72ba7c9d4f54cfea59263c0e2e0a4cbc2f2cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d72ba7c9d4f54cfea59263c0e2e0a4cbc2f2cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b18c55b1794ec4e456e3d64abf91f353ca27787e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0FhECRBK7hj4Ov3rIwAAdHIIAAd0q7PSvNOPyX27o++rP12N\n4syJVD9OLf0mKRDFPInvhkXEsIqQAt9gA+19lNKC4UmkH8MWVH5y9w3WEAxnjqnq\nyMPCFSYOn7C+D3V/EbJda+OvNwlb4ovxsuhP9uXwFZkmxp59rceQS8NHYcFNUyJk\nkQ1iu0JW8Zm8R5+YH54R2dKX4frz1xJOdeStf0obQBGEG6n1dTLLlUZYeKZiO4Rp\nn7nP/91UWrUtIbOkrTcc3PFfFoTtXClQ/b6PEYQYjkqZJzlgvpvgB7JSDMNAypxU\nHtNoVNIigNwQu58sCj4ZtACGmK+1g/sGLrSrG2J/Io6/r/lFjSLTHqCHld8MNGo=\n=i8Ng\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d72ba7c9d4f54cfea59263c0e2e0a4cbc2f2cc8\nparent 45127211566c53bac386b66909a830649182ab7a\nparent d1bc8ada45c5049ff329f02e6de152891f4504e1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590712387 +0200\ncommitter GitHub <noreply@github.com> 1590712387 +0200\n\nRollup merge of #72239 - hch12907:master, r=dtolnay\n\nImplement PartialOrd and Ord for SocketAddr*\n\nThe implementation is mostly the same as the one found in `IpAddr` (other than adding comparison for ports, of course).\nContinues #53788 and #53863\nFixes #53710\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b18c55b1794ec4e456e3d64abf91f353ca27787e", "html_url": "https://github.com/rust-lang/rust/commit/b18c55b1794ec4e456e3d64abf91f353ca27787e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b18c55b1794ec4e456e3d64abf91f353ca27787e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45127211566c53bac386b66909a830649182ab7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45127211566c53bac386b66909a830649182ab7a", "html_url": "https://github.com/rust-lang/rust/commit/45127211566c53bac386b66909a830649182ab7a"}, {"sha": "d1bc8ada45c5049ff329f02e6de152891f4504e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1bc8ada45c5049ff329f02e6de152891f4504e1", "html_url": "https://github.com/rust-lang/rust/commit/d1bc8ada45c5049ff329f02e6de152891f4504e1"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "08536de4d55c333c96924dc91089fce36d7cf489", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 106, "deletions": 1, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b18c55b1794ec4e456e3d64abf91f353ca27787e/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18c55b1794ec4e456e3d64abf91f353ca27787e/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=b18c55b1794ec4e456e3d64abf91f353ca27787e", "patch": "@@ -1,3 +1,4 @@\n+use crate::cmp::Ordering;\n use crate::convert::TryInto;\n use crate::fmt;\n use crate::hash;\n@@ -36,7 +37,7 @@ use crate::vec;\n /// assert_eq!(socket.port(), 8080);\n /// assert_eq!(socket.is_ipv4(), true);\n /// ```\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum SocketAddr {\n     /// An IPv4 socket address.\n@@ -653,11 +654,75 @@ impl PartialEq for SocketAddrV6 {\n             && self.inner.sin6_scope_id == other.inner.sin6_scope_id\n     }\n }\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddrV4> for SocketAddr {\n+    fn eq(&self, other: &SocketAddrV4) -> bool {\n+        match self {\n+            SocketAddr::V4(v4) => v4 == other,\n+            SocketAddr::V6(_) => false,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddrV6> for SocketAddr {\n+    fn eq(&self, other: &SocketAddrV6) -> bool {\n+        match self {\n+            SocketAddr::V4(_) => false,\n+            SocketAddr::V6(v6) => v6 == other,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddr> for SocketAddrV4 {\n+    fn eq(&self, other: &SocketAddr) -> bool {\n+        match other {\n+            SocketAddr::V4(v4) => self == v4,\n+            SocketAddr::V6(_) => false,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddr> for SocketAddrV6 {\n+    fn eq(&self, other: &SocketAddr) -> bool {\n+        match other {\n+            SocketAddr::V4(_) => false,\n+            SocketAddr::V6(v6) => self == v6,\n+        }\n+    }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for SocketAddrV4 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for SocketAddrV6 {}\n \n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd for SocketAddrV4 {\n+    fn partial_cmp(&self, other: &SocketAddrV4) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd for SocketAddrV6 {\n+    fn partial_cmp(&self, other: &SocketAddrV6) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl Ord for SocketAddrV4 {\n+    fn cmp(&self, other: &SocketAddrV4) -> Ordering {\n+        self.ip().cmp(other.ip()).then(self.port().cmp(&other.port()))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl Ord for SocketAddrV6 {\n+    fn cmp(&self, other: &SocketAddrV6) -> Ordering {\n+        self.ip().cmp(other.ip()).then(self.port().cmp(&other.port()))\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for SocketAddrV4 {\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n@@ -1102,4 +1167,44 @@ mod tests {\n         assert!(!v6.is_ipv4());\n         assert!(v6.is_ipv6());\n     }\n+\n+    #[test]\n+    fn compare() {\n+        let v4_1 = \"224.120.45.1:23456\".parse::<SocketAddrV4>().unwrap();\n+        let v4_2 = \"224.210.103.5:12345\".parse::<SocketAddrV4>().unwrap();\n+        let v4_3 = \"224.210.103.5:23456\".parse::<SocketAddrV4>().unwrap();\n+        let v6_1 = \"[2001:db8:f00::1002]:23456\".parse::<SocketAddrV6>().unwrap();\n+        let v6_2 = \"[2001:db8:f00::2001]:12345\".parse::<SocketAddrV6>().unwrap();\n+        let v6_3 = \"[2001:db8:f00::2001]:23456\".parse::<SocketAddrV6>().unwrap();\n+\n+        // equality\n+        assert_eq!(v4_1, v4_1);\n+        assert_eq!(v6_1, v6_1);\n+        assert_eq!(v4_1, SocketAddr::V4(v4_1));\n+        assert_eq!(v6_1, SocketAddr::V6(v6_1));\n+        assert_eq!(SocketAddr::V4(v4_1), SocketAddr::V4(v4_1));\n+        assert_eq!(SocketAddr::V6(v6_1), SocketAddr::V6(v6_1));\n+        assert!(v4_1 != SocketAddr::V6(v6_1));\n+        assert!(v6_1 != SocketAddr::V4(v4_1));\n+        assert!(v4_1 != v4_2);\n+        assert!(v6_1 != v6_2);\n+\n+        // compare different addresses\n+        assert!(v4_1 < v4_2);\n+        assert!(v6_1 < v6_2);\n+        assert!(v4_2 > v4_1);\n+        assert!(v6_2 > v6_1);\n+\n+        // compare the same address with different ports\n+        assert!(v4_2 < v4_3);\n+        assert!(v6_2 < v6_3);\n+        assert!(v4_3 > v4_2);\n+        assert!(v6_3 > v6_2);\n+\n+        // compare different addresses with the same port\n+        assert!(v4_1 < v4_3);\n+        assert!(v6_1 < v6_3);\n+        assert!(v4_3 > v4_1);\n+        assert!(v6_3 > v6_1);\n+    }\n }"}]}