{"sha": "d442c104eadfaf01d8a12ff6e646ccaec4c7948b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDJjMTA0ZWFkZmFmMDFkOGExMmZmNmU2NDZjY2FlYzRjNzk0OGI=", "commit": {"author": {"name": "Iago-lito", "email": "iago-lito@etak", "date": "2021-06-07T14:19:54Z"}, "committer": {"name": "Iago-lito", "email": "iago-lito@etak", "date": "2021-06-09T15:28:34Z"}, "message": "Fix diverging doc regarding signedness.", "tree": {"sha": "7375ab529702d06e6daae57f6d5cec702127c237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7375ab529702d06e6daae57f6d5cec702127c237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d442c104eadfaf01d8a12ff6e646ccaec4c7948b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d442c104eadfaf01d8a12ff6e646ccaec4c7948b", "html_url": "https://github.com/rust-lang/rust/commit/d442c104eadfaf01d8a12ff6e646ccaec4c7948b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d442c104eadfaf01d8a12ff6e646ccaec4c7948b/comments", "author": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c168b0dc63e782f4ee866052d9b1c2220abaa1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c168b0dc63e782f4ee866052d9b1c2220abaa1e", "html_url": "https://github.com/rust-lang/rust/commit/3c168b0dc63e782f4ee866052d9b1c2220abaa1e"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "3eb887cd377743d1f0abd9074d5b523807e6d0dd", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d442c104eadfaf01d8a12ff6e646ccaec4c7948b/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d442c104eadfaf01d8a12ff6e646ccaec4c7948b/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=d442c104eadfaf01d8a12ff6e646ccaec4c7948b", "patch": "@@ -360,8 +360,7 @@ macro_rules! nonzero_unsigned_operations {\n                 /// Overflow is unchecked, and it is undefined behaviour to overflow\n                 /// *even if the result would wrap to a non-zero value*.\n                 /// The behaviour is undefined as soon as\n-                #[doc = concat!(\"`self + rhs > \", stringify!($Int), \"::MAX`\")]\n-                #[doc = concat!(\" or `self + rhs < \", stringify!($Int), \"::MIN`.\")]\n+                #[doc = concat!(\"`self + rhs > \", stringify!($Int), \"::MAX`.\")]\n                 ///\n                 /// # Examples\n                 ///\n@@ -650,7 +649,7 @@ nonzero_signed_operations! {\n \n // A bunch of methods for both signed and unsigned nonzero types.\n macro_rules! nonzero_unsigned_signed_operations {\n-    ( $( $Ty: ident($Int: ty); )+ ) => {\n+    ( $( $signedness:ident $Ty: ident($Int: ty); )+ ) => {\n         $(\n             impl $Ty {\n                 /// Multiply two non-zero integers together.\n@@ -723,8 +722,16 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// Overflow is unchecked, and it is undefined behaviour to overflow\n                 /// *even if the result would wrap to a non-zero value*.\n                 /// The behaviour is undefined as soon as\n-                #[doc = concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`, \")]\n-                #[doc = concat!(\"or `self * rhs < \", stringify!($Int), \"::MIN`.\")]\n+                #[doc = sign_dependent_expr!{\n+                    $signedness ?\n+                    if signed {\n+                        concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`, \",\n+                                \"or `self * rhs < \", stringify!($Int), \"::MIN`.\")\n+                    }\n+                    if unsigned {\n+                        concat!(\"`self * rhs > \", stringify!($Int), \"::MAX`.\")\n+                    }\n+                }]\n                 ///\n                 /// # Examples\n                 ///\n@@ -783,7 +790,16 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 }\n \n                 /// Raise non-zero value to an integer power.\n-                #[doc = concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")]\n+                #[doc = sign_dependent_expr!{\n+                    $signedness ?\n+                    if signed {\n+                        concat!(\"Return [`\", stringify!($Int), \"::MIN`] \",\n+                                    \"or [`\", stringify!($Int), \"::MAX`] on overflow.\")\n+                    }\n+                    if unsigned {\n+                        concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")\n+                    }\n+                }]\n                 ///\n                 /// # Examples\n                 ///\n@@ -815,19 +831,29 @@ macro_rules! nonzero_unsigned_signed_operations {\n     }\n }\n \n+// Use this when the generated code should differ between signed and unsigned types.\n+macro_rules! sign_dependent_expr {\n+    (signed ? if signed { $signed_case:expr } if unsigned { $unsigned_case:expr } ) => {\n+        $signed_case\n+    };\n+    (unsigned ? if signed { $signed_case:expr } if unsigned { $unsigned_case:expr } ) => {\n+        $unsigned_case\n+    };\n+}\n+\n nonzero_unsigned_signed_operations! {\n-    NonZeroU8(u8);\n-    NonZeroU16(u16);\n-    NonZeroU32(u32);\n-    NonZeroU64(u64);\n-    NonZeroU128(u128);\n-    NonZeroUsize(usize);\n-    NonZeroI8(i8);\n-    NonZeroI16(i16);\n-    NonZeroI32(i32);\n-    NonZeroI64(i64);\n-    NonZeroI128(i128);\n-    NonZeroIsize(isize);\n+    unsigned NonZeroU8(u8);\n+    unsigned NonZeroU16(u16);\n+    unsigned NonZeroU32(u32);\n+    unsigned NonZeroU64(u64);\n+    unsigned NonZeroU128(u128);\n+    unsigned NonZeroUsize(usize);\n+    signed NonZeroI8(i8);\n+    signed NonZeroI16(i16);\n+    signed NonZeroI32(i32);\n+    signed NonZeroI64(i64);\n+    signed NonZeroI128(i128);\n+    signed NonZeroIsize(isize);\n }\n \n macro_rules! nonzero_unsigned_is_power_of_two {"}]}