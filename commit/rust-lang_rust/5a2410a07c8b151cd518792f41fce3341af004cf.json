{"sha": "5a2410a07c8b151cd518792f41fce3341af004cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMjQxMGEwN2M4YjE1MWNkNTE4NzkyZjQxZmNlMzM0MWFmMDA0Y2Y=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-31T21:27:26Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-02T00:55:46Z"}, "message": "Add error for pattern-matching on arrays without a fixed size", "tree": {"sha": "4d124b6e225617e0c0c95e4d4509ca82f7164711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d124b6e225617e0c0c95e4d4509ca82f7164711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a2410a07c8b151cd518792f41fce3341af004cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2410a07c8b151cd518792f41fce3341af004cf", "html_url": "https://github.com/rust-lang/rust/commit/5a2410a07c8b151cd518792f41fce3341af004cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a2410a07c8b151cd518792f41fce3341af004cf/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21551359a5e5272b5a71a69a9115fdd83379fcb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/21551359a5e5272b5a71a69a9115fdd83379fcb7", "html_url": "https://github.com/rust-lang/rust/commit/21551359a5e5272b5a71a69a9115fdd83379fcb7"}], "stats": {"total": 103, "additions": 85, "deletions": 18}, "files": [{"sha": "64e2eedd721ef21ce8d155990fb4ca723c64f8ba", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5a2410a07c8b151cd518792f41fce3341af004cf/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2410a07c8b151cd518792f41fce3341af004cf/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=5a2410a07c8b151cd518792f41fce3341af004cf", "patch": "@@ -400,27 +400,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::Array(inner_ty, size) => {\n-                        let size = size.unwrap_usize(tcx);\n-                        let min_len = before.len() as u64 + after.len() as u64;\n-                        if slice.is_none() {\n-                            if min_len != size {\n-                                struct_span_err!(\n-                                    tcx.sess, pat.span, E0527,\n-                                    \"pattern requires {} elements but array has {}\",\n-                                    min_len, size)\n-                                    .span_label(pat.span, format!(\"expected {} elements\", size))\n+                        if let Some(size) = size.assert_usize(tcx) {\n+                            let min_len = before.len() as u64 + after.len() as u64;\n+                            if slice.is_none() {\n+                                if min_len != size {\n+                                    struct_span_err!(\n+                                        tcx.sess, pat.span, E0527,\n+                                        \"pattern requires {} elements but array has {}\",\n+                                        min_len, size)\n+                                        .span_label(pat.span, format!(\"expected {} elements\", size))\n+                                        .emit();\n+                                }\n+                                (inner_ty, tcx.types.err)\n+                            } else if let Some(rest) = size.checked_sub(min_len) {\n+                                (inner_ty, tcx.mk_array(inner_ty, rest))\n+                            } else {\n+                                struct_span_err!(tcx.sess, pat.span, E0528,\n+                                        \"pattern requires at least {} elements but array has {}\",\n+                                        min_len, size)\n+                                    .span_label(pat.span,\n+                                        format!(\"pattern cannot match array of {} elements\", size))\n                                     .emit();\n+                                (inner_ty, tcx.types.err)\n                             }\n-                            (inner_ty, tcx.types.err)\n-                        } else if let Some(rest) = size.checked_sub(min_len) {\n-                            (inner_ty, tcx.mk_array(inner_ty, rest))\n                         } else {\n-                            struct_span_err!(tcx.sess, pat.span, E0528,\n-                                    \"pattern requires at least {} elements but array has {}\",\n-                                    min_len, size)\n-                                .span_label(pat.span,\n-                                    format!(\"pattern cannot match array of {} elements\", size))\n-                                .emit();\n+                            struct_span_err!(\n+                                tcx.sess,\n+                                pat.span,\n+                                E0730,\n+                                \"cannot pattern-match on an array without a fixed length\",\n+                            ).emit();\n                             (inner_ty, tcx.types.err)\n                         }\n                     }"}, {"sha": "b5a50f43875816debe1ef11b32b13a456dcc7cd1", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a2410a07c8b151cd518792f41fce3341af004cf/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2410a07c8b151cd518792f41fce3341af004cf/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=5a2410a07c8b151cd518792f41fce3341af004cf", "patch": "@@ -4648,6 +4648,38 @@ fn make_recursive_type() -> impl Sized {\n ```\n \"##,\n \n+E0730: r##\"\n+An array without a fixed length was pattern-matched.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0730\n+#![feature(const_generics)]\n+\n+fn is_123<const N: usize>(x: [u32; N]) -> bool {\n+    match x {\n+        [1, 2, 3] => true, // error: cannot pattern-match on an\n+                           //        array without a fixed length\n+        _ => false\n+    }\n+}\n+```\n+\n+Ensure that the pattern is consistent with the size of the matched\n+array. Additional elements can be matched with `..`:\n+\n+```\n+#![feature(slice_patterns)]\n+\n+let r = &[1, 2, 3, 4];\n+match r {\n+    &[a, b, ..] => { // ok!\n+        println!(\"a={}, b={}\", a, b);\n+    }\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "e5048d6e6e320d0d12d16e87893c16ed4084e7d7", "filename": "src/test/ui/error-codes/E0730.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a2410a07c8b151cd518792f41fce3341af004cf/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2410a07c8b151cd518792f41fce3341af004cf/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs?ref=5a2410a07c8b151cd518792f41fce3341af004cf", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn is_123<const N: usize>(x: [u32; N]) -> bool {\n+    match x {\n+        [1, 2, 3] => true, //~ ERROR cannot pattern-match on an array without a fixed length\n+        _ => false\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f9281262bb71b9b98ce75c0f16ec74d7260d73d8", "filename": "src/test/ui/error-codes/E0730.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a2410a07c8b151cd518792f41fce3341af004cf/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a2410a07c8b151cd518792f41fce3341af004cf/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr?ref=5a2410a07c8b151cd518792f41fce3341af004cf", "patch": "@@ -0,0 +1,15 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/E0730.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0730]: cannot pattern-match on an array without a fixed length\n+  --> $DIR/E0730.rs:6:9\n+   |\n+LL |         [1, 2, 3] => true,\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0730`."}]}