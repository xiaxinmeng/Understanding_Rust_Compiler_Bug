{"sha": "f84b4c51ce08a5db9a45017362a27cc33e6af34d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NGI0YzUxY2UwOGE1ZGI5YTQ1MDE3MzYyYTI3Y2MzM2U2YWYzNGQ=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-04-08T21:18:25Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-05-04T00:11:09Z"}, "message": "Valid underscores in hex/octal/binary literal docs\n\nCurrently hex/octal/binary literals with computed values are displayed\nlike `0_xff_fff_fffu32`, which is invalid since underscores can't be in\nthe middle of integer prefixes. This properly formats prefixed integers.", "tree": {"sha": "f3b1cf40d7f065a745a133d3dd220d0c4cecce34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3b1cf40d7f065a745a133d3dd220d0c4cecce34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f84b4c51ce08a5db9a45017362a27cc33e6af34d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f84b4c51ce08a5db9a45017362a27cc33e6af34d", "html_url": "https://github.com/rust-lang/rust/commit/f84b4c51ce08a5db9a45017362a27cc33e6af34d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f84b4c51ce08a5db9a45017362a27cc33e6af34d/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603a42ec5458c547b51173cfa48c23ad37b03c3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/603a42ec5458c547b51173cfa48c23ad37b03c3f", "html_url": "https://github.com/rust-lang/rust/commit/603a42ec5458c547b51173cfa48c23ad37b03c3f"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "20eae7cf6800f8d77500496aca274c342abc2548", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f84b4c51ce08a5db9a45017362a27cc33e6af34d/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84b4c51ce08a5db9a45017362a27cc33e6af34d/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f84b4c51ce08a5db9a45017362a27cc33e6af34d", "patch": "@@ -16,6 +16,9 @@ use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n \n+#[cfg(test)]\n+mod tests;\n+\n crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     use crate::visit_lib::LibEmbargoVisitor;\n \n@@ -335,11 +338,27 @@ crate fn print_evaluated_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<String>\n \n fn format_integer_with_underscore_sep(num: &str) -> String {\n     let num_chars: Vec<_> = num.chars().collect();\n-    let num_start_index = if num_chars.get(0) == Some(&'-') { 1 } else { 0 };\n+    let mut num_start_index = if num_chars.get(0) == Some(&'-') { 1 } else { 0 };\n+    let chunk_size = match num[num_start_index..].as_bytes() {\n+        [b'0', b'b' | b'x', ..] => {\n+            num_start_index += 2;\n+            4\n+        }\n+        [b'0', b'o', ..] => {\n+            num_start_index += 2;\n+            let remaining_chars = num_chars.len() - num_start_index;\n+            if remaining_chars <= 6 {\n+                // don't add underscores to Unix permissions like 0755 or 100755\n+                return num.to_string();\n+            }\n+            3\n+        }\n+        _ => 3,\n+    };\n \n     num_chars[..num_start_index]\n         .iter()\n-        .chain(num_chars[num_start_index..].rchunks(3).rev().intersperse(&['_']).flatten())\n+        .chain(num_chars[num_start_index..].rchunks(chunk_size).rev().intersperse(&['_']).flatten())\n         .collect()\n }\n "}, {"sha": "ebf4b49548394e8930a62eb425036b9c74f65cee", "filename": "src/librustdoc/clean/utils/tests.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f84b4c51ce08a5db9a45017362a27cc33e6af34d/src%2Flibrustdoc%2Fclean%2Futils%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84b4c51ce08a5db9a45017362a27cc33e6af34d/src%2Flibrustdoc%2Fclean%2Futils%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils%2Ftests.rs?ref=f84b4c51ce08a5db9a45017362a27cc33e6af34d", "patch": "@@ -0,0 +1,41 @@\n+use super::*;\n+\n+#[test]\n+fn int_format_decimal() {\n+    assert_eq!(format_integer_with_underscore_sep(\"12345678\"), \"12_345_678\");\n+    assert_eq!(format_integer_with_underscore_sep(\"123\"), \"123\");\n+    assert_eq!(format_integer_with_underscore_sep(\"123459\"), \"123_459\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-12345678\"), \"-12_345_678\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-123\"), \"-123\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-123459\"), \"-123_459\");\n+}\n+\n+#[test]\n+fn int_format_hex() {\n+    assert_eq!(format_integer_with_underscore_sep(\"0xab3\"), \"0xab3\");\n+    assert_eq!(format_integer_with_underscore_sep(\"0xa2345b\"), \"0xa2_345b\");\n+    assert_eq!(format_integer_with_underscore_sep(\"0xa2e6345b\"), \"0xa2e6_345b\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0xab3\"), \"-0xab3\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0xa2345b\"), \"-0xa2_345b\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0xa2e6345b\"), \"-0xa2e6_345b\");\n+}\n+\n+#[test]\n+fn int_format_binary() {\n+    assert_eq!(format_integer_with_underscore_sep(\"0o12345671\"), \"0o12_345_671\");\n+    assert_eq!(format_integer_with_underscore_sep(\"0o123\"), \"0o123\");\n+    assert_eq!(format_integer_with_underscore_sep(\"0o123451\"), \"0o123451\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0o12345671\"), \"-0o12_345_671\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0o123\"), \"-0o123\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0o123451\"), \"-0o123451\");\n+}\n+\n+#[test]\n+fn int_format_octal() {\n+    assert_eq!(format_integer_with_underscore_sep(\"0b101\"), \"0b101\");\n+    assert_eq!(format_integer_with_underscore_sep(\"0b101101011\"), \"0b1_0110_1011\");\n+    assert_eq!(format_integer_with_underscore_sep(\"0b01101011\"), \"0b0110_1011\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0b101\"), \"-0b101\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0b101101011\"), \"-0b1_0110_1011\");\n+    assert_eq!(format_integer_with_underscore_sep(\"-0b01101011\"), \"-0b0110_1011\");\n+}"}]}