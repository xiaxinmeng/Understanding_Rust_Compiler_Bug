{"sha": "c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MjVjNzRkYzlhYjVlNWY3MmU5ZTE3MzZkZGYzY2I1OGUzNTQ3ZWQ=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-17T19:42:29Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-17T19:42:29Z"}, "message": "Move change to check_fn, fix up overloaded-calls-nontuple", "tree": {"sha": "288b7e14fd1112ae242aa5b4a66b6f295c464f69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/288b7e14fd1112ae242aa5b4a66b6f295c464f69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAl+0J6UACgkQfsyTL4ss\ncx5KLRAAsJK7Lk+JHOWaeweiMz6rAYeIPDY+ebkUL3bygr3DgGoRWHISiY0Rqpx6\nfJ1Wal8HN71s49Wuj1DzCcNDyKJOzdrQSWG6+u0GXCQB4x/2hKf9A5ORnPJGqf4h\n66uwB4T5y3pmiEr/bvyVx4tnLoCwh/7m6ARiILDksYPcWUsgLp0GBtpQNugmvlhy\nvhqAyTv/fAvwabn/dSzijkcYiprLFiIxa6vKUzPGZpgooybCxiZqtM+ddQs9r1QZ\nbtmjCDM4J4Qg3nOpUow6hZiFL8QML3WMN3U1ATWUacbOHDrVCDEFQdqOoR76Asns\nJY6zsbfcyLxOSBbz7AfLJ2lWln7tbP5ntPZVx9/x59+pxbJ1TQbSkpdZyZbnhlBN\n85rudgtGRGT3De9ef/z/eblplbwaL7h1rVaTiWHFX/ixLdQzQgjesqq1ATD7lKzW\n7d25o90fmgVZGKskDVmD6GPxUc8XsL0u3z7UN58BJ3NsQCGAMH9vrEwqoJd6PW1q\nZU7LOEFvNXxDGPR7FPRitcsVN0QHAfh5sG8eIEY1xxzUEH7fTc1BHa2IKYjA1AD4\nV52SL+BcIWLqTmpwjhF+l9o5jB06PNYCOE4bPmQeiZ6jiZrOFwMD5hynyZ3bWGx9\nCxo+0euCERHFZ/k7OUhMYSnIS/nVFMtRRxjP2LsvBBHR41wCeno=\n=YBmN\n-----END PGP SIGNATURE-----", "payload": "tree 288b7e14fd1112ae242aa5b4a66b6f295c464f69\nparent 1e9d5c70c1c435cd9ae217ab0adbb053e643b01f\nauthor Rune Tynan <runetynan@gmail.com> 1605642149 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1605642149 -0500\n\nMove change to check_fn, fix up overloaded-calls-nontuple\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed", "html_url": "https://github.com/rust-lang/rust/commit/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e9d5c70c1c435cd9ae217ab0adbb053e643b01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9d5c70c1c435cd9ae217ab0adbb053e643b01f", "html_url": "https://github.com/rust-lang/rust/commit/1e9d5c70c1c435cd9ae217ab0adbb053e643b01f"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "9d5d1e8c8e235ca7688d3da439e32bb1b7e1c913", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed", "patch": "@@ -94,6 +94,37 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     fn_maybe_err(tcx, span, fn_sig.abi);\n \n+    if fn_sig.abi == abi::Abi::RustCall {\n+        let expected_args = if let ImplicitSelfKind::None = decl.implicit_self { 1 } else { 2 };\n+\n+        let err = || {\n+            let item = match tcx.hir().get(fn_id) {\n+                Node::Item(hir::Item { kind: ItemKind::Fn(header, ..), .. }) => Some(header),\n+                Node::ImplItem(hir::ImplItem {\n+                    kind: hir::ImplItemKind::Fn(header, ..), ..\n+                }) => Some(header),\n+                // Closures are RustCall, but they tuple their arguments, so shouldn't be checked\n+                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => None,\n+                node => bug!(\"Item being checked wasn't a function/closure: {:?}\", node),\n+            };\n+\n+            if let Some(header) = item {\n+                tcx.sess.span_err(header.span, \"A function with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n+            }\n+        };\n+\n+        if fn_sig.inputs().len() != expected_args {\n+            err()\n+        } else {\n+            // FIXME(CraftSpider) Add a check on parameter expansion, so we don't just make the ICE happen later on\n+            //   This will probably require wide-scale changes to support a TupleKind obligation\n+            //   We can't resolve this without knowing the type of the param\n+            if !matches!(fn_sig.inputs()[expected_args - 1].kind(), ty::Tuple(_) | ty::Param(_)) {\n+                err()\n+            }\n+        }\n+    }\n+\n     if body.generator_kind.is_some() && can_be_generator.is_some() {\n         let yield_ty = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span });"}, {"sha": "35854b0340eeefe7982fd9ed4377fea72f64b4f6", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed", "patch": "@@ -521,31 +521,6 @@ fn typeck_with_fallback<'tcx>(\n \n             let fn_sig = fixup_opaque_types(tcx, &fn_sig);\n \n-            if fn_sig.abi == abi::Abi::RustCall {\n-                let expected_args = if let ImplicitSelfKind::None = decl.implicit_self { 1 } else { 2 };\n-\n-                let err = || {\n-                    let item = tcx.hir().expect_item(id);\n-\n-                    if let hir::ItemKind::Fn(header, ..) = &item.kind {\n-                        tcx.sess.span_err(header.span, \"A function with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n-                    } else {\n-                        bug!(\"Item being checked wasn't a function\")\n-                    }\n-                };\n-\n-                if fn_sig.inputs().len() != expected_args {\n-                    err()\n-                } else {\n-                    // FIXME(CraftSpider) Add a check on parameter expansion, so we don't just make the ICE happen later on\n-                    //   This will probably require wide-scale changes to support a TupleKind obligation\n-                    //   We can't resolve this without knowing the type of the param\n-                    if !matches!(fn_sig.inputs()[expected_args - 1].kind(), ty::Tuple(_) | ty::Param(_)) {\n-                        err()\n-                    }\n-                }\n-            }\n-\n             let fcx = check_fn(&inh, param_env, fn_sig, decl, id, body, None).0;\n             fcx\n         } else {"}, {"sha": "76b114c55925b7f215bb6529465e61d09349b9c6", "filename": "src/test/ui/overloaded-calls-nontuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs?ref=c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed", "patch": "@@ -11,11 +11,13 @@ impl FnMut<isize> for S {\n     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n         self.x + self.y + z\n     }\n+    //~^^^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n }\n \n impl FnOnce<isize> for S {\n     type Output = isize;\n     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n+    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n }\n \n fn main() {"}, {"sha": "bdadb95db29477eb784f1290d951b65e3b384f4b", "filename": "src/test/ui/overloaded-calls-nontuple.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr?ref=c825c74dc9ab5e5f72e9e1736ddf3cb58e3547ed", "patch": "@@ -1,9 +1,21 @@\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/overloaded-calls-nontuple.rs:11:5\n+   |\n+LL |     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/overloaded-calls-nontuple.rs:19:5\n+   |\n+LL |     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n-  --> $DIR/overloaded-calls-nontuple.rs:26:10\n+  --> $DIR/overloaded-calls-nontuple.rs:28:10\n    |\n LL |     drop(s(3))\n    |          ^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0059`."}]}