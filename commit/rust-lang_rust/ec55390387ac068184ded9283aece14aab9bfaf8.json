{"sha": "ec55390387ac068184ded9283aece14aab9bfaf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNTUzOTAzODdhYzA2ODE4NGRlZDkyODNhZWNlMTRhYWI5YmZhZjg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-14T15:45:06Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-04-06T10:14:08Z"}, "message": "Update a few comments about symbol visibility.", "tree": {"sha": "70da821af9e0d07bc31ceb314a797b7c192f7e0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70da821af9e0d07bc31ceb314a797b7c192f7e0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec55390387ac068184ded9283aece14aab9bfaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec55390387ac068184ded9283aece14aab9bfaf8", "html_url": "https://github.com/rust-lang/rust/commit/ec55390387ac068184ded9283aece14aab9bfaf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec55390387ac068184ded9283aece14aab9bfaf8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c7f5ccbb442af38dbdcbd688b13352c2a4f566", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c7f5ccbb442af38dbdcbd688b13352c2a4f566", "html_url": "https://github.com/rust-lang/rust/commit/69c7f5ccbb442af38dbdcbd688b13352c2a4f566"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "ef018237dbad9c21fe26c4a89dcc260dd015ee36", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec55390387ac068184ded9283aece14aab9bfaf8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec55390387ac068184ded9283aece14aab9bfaf8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=ec55390387ac068184ded9283aece14aab9bfaf8", "patch": "@@ -762,14 +762,22 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n                                                -> bool {\n         debug_assert!(!def_id.is_local());\n \n+        // If we are not in share generics mode, we don't link to upstream\n+        // monomorphizations but always instantiate our own internal versions\n+        // instead.\n         if !tcx.share_generics() {\n             return false\n         }\n \n+        // If this instance has no type parameters, it cannot be a shared\n+        // monomorphization. Non-generic instances are already handled above\n+        // by `is_reachable_non_generic()`\n         if substs.types().next().is_none() {\n             return false\n         }\n \n+        // Take a look at the available monomorphizations listed in the metadata\n+        // of upstream crates.\n         tcx.upstream_monomorphizations_for(def_id)\n            .map(|set| set.contains_key(substs))\n            .unwrap_or(false)"}, {"sha": "da4cb4ec789041d219ce33d3c0084cba30b0a5b0", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec55390387ac068184ded9283aece14aab9bfaf8/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec55390387ac068184ded9283aece14aab9bfaf8/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=ec55390387ac068184ded9283aece14aab9bfaf8", "patch": "@@ -301,6 +301,11 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut codegen_units = FxHashMap();\n     let is_incremental_build = tcx.sess.opts.incremental.is_some();\n     let mut internalization_candidates = FxHashSet();\n+\n+    // Determine if monomorphizations instantiated in this crate will be made\n+    // available to downstream crates. This depends on whether we are in\n+    // share-generics mode and whether the current crate can even have\n+    // downstream crates.\n     let export_generics = tcx.share_generics() &&\n                           tcx.local_crate_exports_generics();\n "}, {"sha": "2c503bdab30a9b68745c2641635c3be58bfa2f4a", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ec55390387ac068184ded9283aece14aab9bfaf8/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec55390387ac068184ded9283aece14aab9bfaf8/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=ec55390387ac068184ded9283aece14aab9bfaf8", "patch": "@@ -118,59 +118,57 @@ pub fn get_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         // This is sort of subtle. Inside our codegen unit we started off\n         // compilation by predefining all our own `TransItem` instances. That\n         // is, everything we're translating ourselves is already defined. That\n-        // means that anything we're actually translating ourselves will have\n-        // hit the above branch in `get_declared_value`. As a result, we're\n-        // guaranteed here that we're declaring a symbol that won't get defined,\n-        // or in other words we're referencing a foreign value.\n+        // means that anything we're actually translating in this codegen unit\n+        // will have hit the above branch in `get_declared_value`. As a result,\n+        // we're guaranteed here that we're declaring a symbol that won't get\n+        // defined, or in other words we're referencing a value from another\n+        // codegen unit or even another crate.\n         //\n         // So because this is a foreign value we blanket apply an external\n         // linkage directive because it's coming from a different object file.\n         // The visibility here is where it gets tricky. This symbol could be\n         // referencing some foreign crate or foreign library (an `extern`\n         // block) in which case we want to leave the default visibility. We may\n-        // also, though, have multiple codegen units.\n-        //\n-        // In the situation of multiple codegen units this function may be\n-        // referencing a function from another codegen unit. If we're\n-        // indeed referencing a symbol in another codegen unit then we're in one\n-        // of two cases:\n-        //\n-        //  * This is a symbol defined in a foreign crate and we're just\n-        //    monomorphizing in another codegen unit. In this case this symbols\n-        //    is for sure not exported, so both codegen units will be using\n-        //    hidden visibility. Hence, we apply a hidden visibility here.\n-        //\n-        //  * This is a symbol defined in our local crate. If the symbol in the\n-        //    other codegen unit is also not exported then like with the foreign\n-        //    case we apply a hidden visibility. If the symbol is exported from\n-        //    the foreign object file, however, then we leave this at the\n-        //    default visibility as we'll just import it naturally.\n+        // also, though, have multiple codegen units. It could be a\n+        // monomorphization, in which case its expected visibility depends on\n+        // whether we are sharing generics or not. The important thing here is\n+        // that the visibility we apply to the declaration is the same one that\n+        // has been applied to the definition (wherever that definition may be).\n         unsafe {\n             llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n \n             let is_generic = instance.substs.types().next().is_some();\n \n             if is_generic {\n+                // This is a monomorphization. Its expected visibility depends\n+                // on whether we are in share-generics mode.\n+\n                 if cx.tcx.share_generics() {\n                     // We are in share_generics mode.\n \n                     if instance_def_id.is_local() {\n                         // This is a definition from the current crate. If the\n                         // definition is unreachable for downstream crates or\n                         // the current crate does not re-export generics, the\n-                        // instance has been hidden\n+                        // definition of the instance will have been declared\n+                        // as `hidden`.\n                         if cx.tcx.is_unreachable_local_definition(instance_def_id) ||\n                            !cx.tcx.local_crate_exports_generics() {\n                             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n                         }\n                     } else {\n+                        // This is a monomorphization of a generic function\n+                        // defined in an upstream crate.\n                         if cx.tcx.upstream_monomorphizations_for(instance_def_id)\n                                  .map(|set| set.contains_key(instance.substs))\n                                  .unwrap_or(false) {\n-                            // This is instantiated in another crate. It cannot be hidden\n+                            // This is instantiated in another crate. It cannot\n+                            // be `hidden`.\n                         } else {\n                             // This is a local instantiation of an upstream definition.\n-                            // If the current crate does not re-export it, it is hidden.\n+                            // If the current crate does not re-export it\n+                            // (because it is a C library or an executable), it\n+                            // will have been declared `hidden`.\n                             if !cx.tcx.local_crate_exports_generics() {\n                                 llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n                             }"}]}