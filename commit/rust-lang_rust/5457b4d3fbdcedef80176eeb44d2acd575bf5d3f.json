{"sha": "5457b4d3fbdcedef80176eeb44d2acd575bf5d3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NTdiNGQzZmJkY2VkZWY4MDE3NmVlYjQ0ZDJhY2Q1NzViZjVkM2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T22:49:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:34Z"}, "message": "rustdoc: Add fold module", "tree": {"sha": "5bb43834defb0f0149298021fc93c1adc286781e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb43834defb0f0149298021fc93c1adc286781e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f", "html_url": "https://github.com/rust-lang/rust/commit/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77b8db7077bc6eca5955149820f331618977df9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77b8db7077bc6eca5955149820f331618977df9", "html_url": "https://github.com/rust-lang/rust/commit/e77b8db7077bc6eca5955149820f331618977df9"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "02438f8469ae71ed9d055394f9e84e4483c77b7a", "filename": "src/rustdoc/fold.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=5457b4d3fbdcedef80176eeb44d2acd575bf5d3f", "patch": "@@ -0,0 +1,106 @@\n+export fold;\n+export fold_crate, fold_mod, fold_fn, fold_modlist, fold_fnlist;\n+export default_seq_fold;\n+\n+tag fold = t;\n+\n+type fold_crate = fn~(fold: fold, doc: doc::cratedoc) -> doc::cratedoc;\n+type fold_mod = fn~(fold: fold, doc: doc::moddoc) -> doc::moddoc;\n+type fold_fn = fn~(fold: fold, doc: doc::fndoc) -> doc::fndoc;\n+type fold_modlist = fn~(fold: fold, list: doc::modlist) -> doc::modlist;\n+type fold_fnlist = fn~(fold: fold, list: doc::fnlist) -> doc::fnlist;\n+\n+type t = {\n+    fold_crate: fold_crate,\n+    fold_mod: fold_mod,\n+    fold_fn: fold_fn,\n+    fold_modlist: fold_modlist,\n+    fold_fnlist: fold_fnlist\n+};\n+\n+\n+// This exists because fn types don't infer correctly as record\n+// initializers, but they do as function arguments\n+fn mk_fold(\n+    fold_crate: fold_crate,\n+    fold_mod: fold_mod,\n+    fold_fn: fold_fn,\n+    fold_modlist: fold_modlist,\n+    fold_fnlist: fold_fnlist\n+) -> fold {\n+    fold({\n+        fold_crate: fold_crate,\n+        fold_mod: fold_mod,\n+        fold_fn: fold_fn,\n+        fold_modlist: fold_modlist,\n+        fold_fnlist: fold_fnlist\n+    })\n+}\n+\n+fn default_seq_fold() -> fold {\n+    mk_fold(\n+        default_seq_fold_crate,\n+        default_seq_fold_mod,\n+        default_seq_fold_fn,\n+        default_seq_fold_modlist,\n+        default_seq_fold_fnlist\n+    )\n+}\n+\n+fn default_seq_fold_crate(\n+    fold: fold,\n+    doc: doc::cratedoc\n+) -> doc::cratedoc {\n+    ~{\n+        topmod: fold.fold_mod(fold, doc.topmod)\n+    }\n+}\n+\n+fn default_seq_fold_mod(\n+    fold: fold,\n+    doc: doc::moddoc\n+) -> doc::moddoc {\n+    ~{\n+        name: doc.name,\n+        mods: fold.fold_modlist(fold, doc.mods),\n+        fns: fold.fold_fnlist(fold, doc.fns)\n+    }\n+}\n+\n+fn default_seq_fold_fn(\n+    _fold: fold,\n+    doc: doc::fndoc\n+) -> doc::fndoc {\n+    doc\n+}\n+\n+fn default_seq_fold_modlist(\n+    fold: fold,\n+    list: doc::modlist\n+) -> doc::modlist {\n+    doc::modlist(vec::map(*list) {|doc|\n+        fold.fold_mod(fold, doc)\n+    })\n+}\n+\n+fn default_seq_fold_fnlist(\n+    fold: fold,\n+    list: doc::fnlist\n+) -> doc::fnlist {\n+    doc::fnlist(vec::map(*list) {|doc|\n+        fold.fold_fn(fold, doc)\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn default_fold_should_produce_same_doc() {\n+        let source = \"mod a { fn b() { } mod c { fn d() { } } }\";\n+        let ast = parse::from_str(source);\n+        let doc = extract::extract(ast, \"\");\n+        let fld = default_seq_fold();\n+        let folded = fld.fold_crate(fld, doc);\n+        assert doc == folded;\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "8fc39afbd07daef8813fe834b4de60209fba5055", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=5457b4d3fbdcedef80176eeb44d2acd575bf5d3f", "patch": "@@ -11,4 +11,5 @@ mod parse;\n mod extract;\n mod attr_parser;\n mod doc;\n-mod gen;\n\\ No newline at end of file\n+mod gen;\n+mod fold;\n\\ No newline at end of file"}]}