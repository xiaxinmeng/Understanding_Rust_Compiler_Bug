{"sha": "5bdd6409139193ad73d991cba0ee8354457fa99a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZGQ2NDA5MTM5MTkzYWQ3M2Q5OTFjYmEwZWU4MzU0NDU3ZmE5OWE=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-11-30T20:21:15Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-11-30T20:21:15Z"}, "message": "Fix several broken links in doc that used the wrong qualifier or Self::", "tree": {"sha": "29bf74316fb7a9a600d17213cf7a32cd7bf0496f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29bf74316fb7a9a600d17213cf7a32cd7bf0496f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bdd6409139193ad73d991cba0ee8354457fa99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bdd6409139193ad73d991cba0ee8354457fa99a", "html_url": "https://github.com/rust-lang/rust/commit/5bdd6409139193ad73d991cba0ee8354457fa99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bdd6409139193ad73d991cba0ee8354457fa99a/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0560c275587db1131414dd395092ea5b80070b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0560c275587db1131414dd395092ea5b80070b6", "html_url": "https://github.com/rust-lang/rust/commit/c0560c275587db1131414dd395092ea5b80070b6"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "18dfe890a0c1e7ae6bf8b39d430e027614ba49f0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bdd6409139193ad73d991cba0ee8354457fa99a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5bdd6409139193ad73d991cba0ee8354457fa99a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5bdd6409139193ad73d991cba0ee8354457fa99a", "patch": "@@ -5256,7 +5256,7 @@ dependencies = [\n  \"chrono\",\n  \"lazy_static\",\n  \"matchers\",\n- \"parking_lot 0.9.0\",\n+ \"parking_lot 0.11.0\",\n  \"regex\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "c7a76d33a6666381dcab93efc9f85312c16c6ac4", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bdd6409139193ad73d991cba0ee8354457fa99a/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdd6409139193ad73d991cba0ee8354457fa99a/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=5bdd6409139193ad73d991cba0ee8354457fa99a", "patch": "@@ -929,7 +929,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// Also, please be aware that this method is only for special circumstances and is usually\n     /// not what you want. In case of doubt, use [`borrow_mut`] instead.\n     ///\n-    /// [`borrow_mut`]: Self::borrow_mut()\n+    /// [`borrow_mut`]: RefCell::borrow_mut()\n     ///\n     /// # Examples\n     ///\n@@ -953,7 +953,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ensure no borrows exist and then resets the state tracking shared borrows. This is relevant\n     /// if some `Ref` or `RefMut` borrows have been leaked.\n     ///\n-    /// [`get_mut`]: Self::get_mut()\n+    /// [`get_mut`]: RefCell::get_mut()\n     ///\n     /// # Examples\n     ///\n@@ -1745,7 +1745,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// when casting to `&mut T`, and ensure that there are no mutations\n     /// or mutable aliases going on when casting to `&T`.\n     ///\n-    /// [`get`]: Self::get()\n+    /// [`get`]: UnsafeCell::get()\n     ///\n     /// # Examples\n     ///"}, {"sha": "33df175bfc54d628ff3db0f9fd1763bd5b4e92eb", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bdd6409139193ad73d991cba0ee8354457fa99a/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdd6409139193ad73d991cba0ee8354457fa99a/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=5bdd6409139193ad73d991cba0ee8354457fa99a", "patch": "@@ -776,8 +776,8 @@ impl f32 {\n     /// As the target platform's native endianness is used, portable code\n     /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate, instead.\n     ///\n-    /// [`to_be_bytes`]: prim@f32::to_be_bytes()\n-    /// [`to_le_bytes`]: prim@f32::to_le_bytes()\n+    /// [`to_be_bytes`]: #method.to_be_bytes\n+    /// [`to_le_bytes`]: #method.to_le_bytes\n     ///\n     /// # Examples\n     ///\n@@ -804,7 +804,7 @@ impl f32 {\n     ///\n     /// [`to_ne_bytes`] should be preferred over this whenever possible.\n     ///\n-    /// [`to_ne_bytes`]: prim@f32::to_ne_bytes()\n+    /// [`to_ne_bytes`]: #method.to_ne_bytes\n     ///\n     /// # Examples\n     ///\n@@ -864,8 +864,8 @@ impl f32 {\n     /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n     /// appropriate instead.\n     ///\n-    /// [`from_be_bytes`]: prim@f32::from_be_bytes()\n-    /// [`from_le_bytes`]: prim@f32::from_le_bytes()\n+    /// [`from_be_bytes`]: #method.from_be_bytes\n+    /// [`from_le_bytes`]: #method.from_le_bytes\n     ///\n     /// # Examples\n     ///"}, {"sha": "b85e8deb6d22c47606b95456a5698b0b37a1e751", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bdd6409139193ad73d991cba0ee8354457fa99a/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdd6409139193ad73d991cba0ee8354457fa99a/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=5bdd6409139193ad73d991cba0ee8354457fa99a", "patch": "@@ -790,8 +790,8 @@ impl f64 {\n     /// As the target platform's native endianness is used, portable code\n     /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate, instead.\n     ///\n-    /// [`to_be_bytes`]: prim@f64::to_be_bytes()\n-    /// [`to_le_bytes`]: prim@f64::to_le_bytes()\n+    /// [`to_be_bytes`]: #method.to_be_bytes\n+    /// [`to_le_bytes`]: #method.to_le_bytes\n     ///\n     /// # Examples\n     ///\n@@ -818,7 +818,7 @@ impl f64 {\n     ///\n     /// [`to_ne_bytes`] should be preferred over this whenever possible.\n     ///\n-    /// [`to_ne_bytes`]: prim@f64::to_ne_bytes()\n+    /// [`to_ne_bytes`]: #method.to_ne_bytes\n     ///\n     /// # Examples\n     ///\n@@ -878,8 +878,8 @@ impl f64 {\n     /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n     /// appropriate instead.\n     ///\n-    /// [`from_be_bytes`]: prim@f64::from_be_bytes()\n-    /// [`from_le_bytes`]: prim@f64::from_le_bytes()\n+    /// [`from_be_bytes`]: #method.from_be_bytes\n+    /// [`from_le_bytes`]: #method.from_le_bytes\n     ///\n     /// # Examples\n     ///"}, {"sha": "a944514f694b68d63819578ed9ba55338edfdced", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bdd6409139193ad73d991cba0ee8354457fa99a/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdd6409139193ad73d991cba0ee8354457fa99a/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=5bdd6409139193ad73d991cba0ee8354457fa99a", "patch": "@@ -2254,7 +2254,7 @@ impl str {\n     /// To return a new uppercased value without modifying the existing one, use\n     /// [`to_ascii_uppercase()`].\n     ///\n-    /// [`to_ascii_uppercase()`]: prim@str::to_ascii_uppercase()\n+    /// [`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n     ///\n     /// # Examples\n     ///\n@@ -2281,7 +2281,7 @@ impl str {\n     /// To return a new lowercased value without modifying the existing one, use\n     /// [`to_ascii_lowercase()`].\n     ///\n-    /// [`to_ascii_lowercase()`]: prim@str::to_ascii_lowercase()\n+    /// [`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n     ///\n     /// # Examples\n     ///"}]}