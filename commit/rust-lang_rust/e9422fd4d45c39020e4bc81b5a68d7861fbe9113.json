{"sha": "e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NDIyZmQ0ZDQ1YzM5MDIwZTRiYzgxYjVhNjhkNzg2MWZiZTkxMTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T09:41:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T09:42:35Z"}, "message": "Implement Rvalue::Aggregate(AggregateKind::Array, ...)", "tree": {"sha": "86ed275e46c2f6c108efe97d30a9c3dc6ff335e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ed275e46c2f6c108efe97d30a9c3dc6ff335e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "html_url": "https://github.com/rust-lang/rust/commit/e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9422fd4d45c39020e4bc81b5a68d7861fbe9113/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd0d528343009a215119857a4197a827f61214b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd0d528343009a215119857a4197a827f61214b", "html_url": "https://github.com/rust-lang/rust/commit/2fd0d528343009a215119857a4197a827f61214b"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "9beef71df313f5ab3f527944a7dfc54bd618c19c", "filename": "examples/example.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9422fd4d45c39020e4bc81b5a68d7861fbe9113/examples%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9422fd4d45c39020e4bc81b5a68d7861fbe9113/examples%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fexample.rs?ref=e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "patch": "@@ -166,3 +166,7 @@ fn float_cast(a: f32, b: f64) -> (f64, f32) {\n fn int_to_float(a: u8, b: i32) -> (f64, f32) {\n     (a as f64, b as f32)\n }\n+\n+fn make_array() -> [u8; 3] {\n+    [42, 0, 5]\n+}"}, {"sha": "2bcdd454dac54b60687249219db1964469ac6f26", "filename": "examples/mini_core.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9422fd4d45c39020e4bc81b5a68d7861fbe9113/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9422fd4d45c39020e4bc81b5a68d7861fbe9113/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "patch": "@@ -30,6 +30,21 @@ unsafe impl Copy for char {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n unsafe impl<T: ?Sized> Copy for *const T {}\n \n+#[lang = \"sync\"]\n+pub unsafe trait Sync {}\n+\n+unsafe impl Sync for bool {}\n+unsafe impl Sync for u8 {}\n+unsafe impl Sync for u16 {}\n+unsafe impl Sync for u32 {}\n+unsafe impl Sync for u64 {}\n+unsafe impl Sync for usize {}\n+unsafe impl Sync for i8 {}\n+unsafe impl Sync for i16 {}\n+unsafe impl Sync for i32 {}\n+unsafe impl Sync for isize {}\n+unsafe impl Sync for char {}\n+\n #[lang = \"freeze\"]\n trait Freeze {}\n "}, {"sha": "19341981ff5fda733e7e56a9dea3cfb1b164b470", "filename": "src/base.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9422fd4d45c39020e4bc81b5a68d7861fbe9113/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9422fd4d45c39020e4bc81b5a68d7861fbe9113/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "patch": "@@ -463,7 +463,17 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                     let val = CValue::const_val(fx, fx.tcx.types.usize, ty_size as i64);\n                     lval.write_cvalue(fx, val);\n                 }\n-                Rvalue::Aggregate(_, _) => unimpl!(\"shouldn't exist at trans {:?}\", rval),\n+                Rvalue::Aggregate(kind, operands) => match **kind {\n+                    AggregateKind::Array(_ty) => {\n+                        for (i, operand) in operands.into_iter().enumerate() {\n+                            let operand = trans_operand(fx, operand);\n+                            let index = fx.bcx.ins().iconst(types::I64, i as i64);\n+                            let to = lval.place_index(fx, index);\n+                            to.write_cvalue(fx, operand);\n+                        }\n+                    }\n+                    _ => unimpl!(\"shouldn't exist at trans {:?}\", rval),\n+                },\n             }\n         }\n         StatementKind::StorageLive(_)"}]}