{"sha": "6d61d87b227f2314e06f8da7c33bab9633119006", "node_id": "C_kwDOAAsO6NoAKDZkNjFkODdiMjI3ZjIzMTRlMDZmOGRhN2MzM2JhYjk2MzMxMTkwMDY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T16:25:28Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T22:17:03Z"}, "message": "Split inline const to two feature gates", "tree": {"sha": "9221eb0e15e78fcdb3e42edaf5a0a16903644407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9221eb0e15e78fcdb3e42edaf5a0a16903644407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d61d87b227f2314e06f8da7c33bab9633119006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d61d87b227f2314e06f8da7c33bab9633119006", "html_url": "https://github.com/rust-lang/rust/commit/6d61d87b227f2314e06f8da7c33bab9633119006", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d61d87b227f2314e06f8da7c33bab9633119006/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cebd2dda1d9071f2209079370c412f4ef9ef2b82", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebd2dda1d9071f2209079370c412f4ef9ef2b82", "html_url": "https://github.com/rust-lang/rust/commit/cebd2dda1d9071f2209079370c412f4ef9ef2b82"}], "stats": {"total": 98, "additions": 67, "deletions": 31}, "files": [{"sha": "6a19984f8ea4612e82289b7c95d09839ca65a4e4", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -719,6 +719,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n+    gate_all!(inline_const_pat, \"inline-const in pattern position is experimental\");\n     gate_all!(\n         const_generics_defaults,\n         \"default values for const generic parameters are experimental\""}, {"sha": "34a8de67ca0f5769bc430ba822522637c3b9f86a", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -410,6 +410,8 @@ declare_features! (\n     (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n     /// Allow anonymous constants from an inline `const` block\n     (incomplete, inline_const, \"1.49.0\", Some(76001), None),\n+    /// Allow anonymous constants from an inline `const` block in pattern position\n+    (incomplete, inline_const_pat, \"1.58.0\", Some(76001), None),\n     /// Allows using `pointer` and `reference` in intra-doc links\n     (active, intra_doc_pointers, \"1.51.0\", Some(80896), None),\n     /// Allows `#[instruction_set(_)]` attribute"}, {"sha": "3669a4fce9cbf9ba0048156ca6e697cd93d07ebb", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -1243,7 +1243,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(kw::Unsafe) {\n             self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)\n         } else if self.check_inline_const(0) {\n-            self.parse_const_block(lo.to(self.token.span))\n+            self.parse_const_block(lo.to(self.token.span), false)\n         } else if self.is_do_catch_block() {\n             self.recover_do_catch(attrs)\n         } else if self.is_try_block() {"}, {"sha": "9212aaa87d1947fdce1deecfb60ac460b662485b", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -1095,8 +1095,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses inline const expressions.\n-    fn parse_const_block(&mut self, span: Span) -> PResult<'a, P<Expr>> {\n-        self.sess.gated_spans.gate(sym::inline_const, span);\n+    fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {\n+        if pat {\n+            self.sess.gated_spans.gate(sym::inline_const_pat, span);\n+        } else {\n+            self.sess.gated_spans.gate(sym::inline_const, span);\n+        }\n         self.eat_keyword(kw::Const);\n         let blk = self.parse_block()?;\n         let anon_const = AnonConst {"}, {"sha": "bb3947bb47a2550bd5e82d3a633fd7c006bcbf28", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -437,7 +437,7 @@ impl<'a> Parser<'a> {\n             PatKind::Box(pat)\n         } else if self.check_inline_const(0) {\n             // Parse `const pat`\n-            let const_expr = self.parse_const_block(lo.to(self.token.span))?;\n+            let const_expr = self.parse_const_block(lo.to(self.token.span), true)?;\n \n             if let Some(re) = self.parse_range_end() {\n                 self.parse_pat_range_begin_with(const_expr, re)?\n@@ -884,7 +884,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_pat_range_end(&mut self) -> PResult<'a, P<Expr>> {\n         if self.check_inline_const(0) {\n-            self.parse_const_block(self.token.span)\n+            self.parse_const_block(self.token.span, true)\n         } else if self.check_path() {\n             let lo = self.token.span;\n             let (qself, path) = if self.eat_lt() {"}, {"sha": "46f1ce0797f620cf2eb10d2dc4e767c85a833a2e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -731,6 +731,7 @@ symbols! {\n         inlateout,\n         inline,\n         inline_const,\n+        inline_const_pat,\n         inout,\n         instruction_set,\n         intel,"}, {"sha": "5f0f7547a0a894ec14166ec7d29e4c96b2eba9f3", "filename": "src/doc/unstable-book/src/language-features/inline-const-pat.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const-pat.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const-pat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const-pat.md?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -0,0 +1,24 @@\n+# `inline_const_pat`\n+\n+The tracking issue for this feature is: [#76001]\n+\n+See also [`inline_const`](inline-const.md)\n+\n+------\n+\n+This feature allows you to use inline constant expressions in pattern position:\n+\n+```rust\n+#![feature(inline_const_pat)]\n+\n+const fn one() -> i32 { 1 }\n+\n+let some_int = 3;\n+match some_int {\n+    const { 1 + 2 } => println!(\"Matched 1 + 2\"),\n+    const { one() } => println!(\"Matched const fn returning 1\"),\n+    _ => println!(\"Didn't match anything :(\"),\n+}\n+```\n+\n+[#76001]: https://github.com/rust-lang/rust/issues/76001"}, {"sha": "7be70eed6cedc534144e360fe86db86693011d0d", "filename": "src/doc/unstable-book/src/language-features/inline-const.md", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const.md?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -2,6 +2,8 @@\n \n The tracking issue for this feature is: [#76001]\n \n+See also [`inline_const_pat`](inline-const-pat.md)\n+\n ------\n \n This feature allows you to use inline constant expressions. For example, you can\n@@ -27,19 +29,4 @@ fn main() {\n }\n ```\n \n-You can also use inline constant expressions in patterns:\n-\n-```rust\n-#![feature(inline_const)]\n-\n-const fn one() -> i32 { 1 }\n-\n-let some_int = 3;\n-match some_int {\n-    const { 1 + 2 } => println!(\"Matched 1 + 2\"),\n-    const { one() } => println!(\"Matched const fn returning 1\"),\n-    _ => println!(\"Didn't match anything :(\"),\n-}\n-```\n-\n [#76001]: https://github.com/rust-lang/rust/issues/76001"}, {"sha": "3d0df289fb74a2ca71b0fe4e40ceae082a016e07", "filename": "src/test/ui/feature-gates/feature-gate-inline_const_pat.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let const { () } = ();\n+    //~^ ERROR inline-const in pattern position is experimental [E0658]\n+}"}, {"sha": "ca533d8505cf793084e9a0da57f42a73256afbb2", "filename": "src/test/ui/feature-gates/feature-gate-inline_const_pat.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.stderr?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: inline-const in pattern position is experimental\n+  --> $DIR/feature-gate-inline_const_pat.rs:2:9\n+   |\n+LL |     let const { () } = ();\n+   |         ^^^^^\n+   |\n+   = note: see issue #76001 <https://github.com/rust-lang/rust/issues/76001> for more information\n+   = help: add `#![feature(inline_const_pat)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8f745e8104f811b3a2f4823d6ec7a60591352700", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -2,7 +2,7 @@\n #![allow(incomplete_features)]\n #![feature(exclusive_range_pattern)]\n #![feature(half_open_range_patterns)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n fn main() {\n     let mut if_lettable = vec![];"}, {"sha": "41c7e46dfc1ed2fdf6f12b830ab9d4c8f966cd0f", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -12,7 +12,7 @@ fn main() {\n             y @ (0..5 | 6) => or_two.push(y),\n             //~^ exclusive range pattern syntax is experimental\n             y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n-            //~^ inline-const is experimental\n+            //~^ inline-const in pattern position is experimental\n             //~| exclusive range pattern syntax is experimental\n             y @ -5.. => range_from.push(y),\n             y @ ..-7 => assert_eq!(y, -8),"}, {"sha": "5e36996a462b283968818c4c197801aa74cffb2f", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -7,14 +7,14 @@ LL |             y @ ..-7 => assert_eq!(y, -8),\n    = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n-error[E0658]: inline-const is experimental\n+error[E0658]: inline-const in pattern position is experimental\n   --> $DIR/range_pat_interactions3.rs:14:20\n    |\n LL |             y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n    |                    ^^^^^\n    |\n    = note: see issue #76001 <https://github.com/rust-lang/rust/issues/76001> for more information\n-   = help: add `#![feature(inline_const)]` to the crate attributes to enable\n+   = help: add `#![feature(inline_const_pat)]` to the crate attributes to enable\n \n error[E0658]: exclusive range pattern syntax is experimental\n   --> $DIR/range_pat_interactions3.rs:10:17"}, {"sha": "4486411698af964d0adae9b8ba5e3b098f56d841", "filename": "src/test/ui/inline-const/const-match-pat-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -1,5 +1,5 @@\n #![allow(incomplete_features)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n // rust-lang/rust#82518: ICE with inline-const in match referencing const-generic parameter\n "}, {"sha": "d83ae6e983486fe3bd21018fc8f2679f4999faeb", "filename": "src/test/ui/inline-const/const-match-pat-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n #![allow(incomplete_features)]\n \n fn main() {"}, {"sha": "436b8037f3093a586de0d1d8ea0ff5f034a4c29b", "filename": "src/test/ui/inline-const/const-match-pat-lifetime-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(incomplete_features)]\n #![feature(const_mut_refs)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n use std::marker::PhantomData;\n "}, {"sha": "6d943bbcc0160f2ce184413ae0158b9353d68413", "filename": "src/test/ui/inline-const/const-match-pat-lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -3,6 +3,7 @@\n #![allow(incomplete_features)]\n #![feature(const_mut_refs)]\n #![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n use std::marker::PhantomData;\n "}, {"sha": "7dc8c11355ab035990bd63a1cba36920dc74f774", "filename": "src/test/ui/inline-const/const-match-pat-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n \n #![allow(incomplete_features)]\n-#![feature(inline_const, half_open_range_patterns, exclusive_range_pattern)]\n+#![feature(inline_const_pat, half_open_range_patterns, exclusive_range_pattern)]\n fn main() {\n     const N: u32 = 10;\n     let x: u32 = 3;"}, {"sha": "2f55e16b35cd934617108ed762dd94b86bc67cd5", "filename": "src/test/ui/inline-const/const-match-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![allow(incomplete_features)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n const MMIO_BIT1: u8 = 4;\n const MMIO_BIT2: u8 = 5;\n "}, {"sha": "d3e39c0de69c85db3a6bfff5bad18ff1526ed826", "filename": "src/test/ui/lint/dead-code/anon-const-in-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n #![allow(incomplete_features)]\n #![deny(dead_code)]\n "}, {"sha": "5c33154736650b04f59982bbedd104f99bf75c2c", "filename": "src/test/ui/pattern/non-structural-match-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d61d87b227f2314e06f8da7c33bab9633119006/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs?ref=6d61d87b227f2314e06f8da7c33bab9633119006", "patch": "@@ -2,7 +2,7 @@\n #![allow(incomplete_features)]\n #![allow(unreachable_code)]\n #![feature(const_async_blocks)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n fn main() {\n     match loop {} {"}]}