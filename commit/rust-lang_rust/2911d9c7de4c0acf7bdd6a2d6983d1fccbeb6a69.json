{"sha": "2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MTFkOWM3ZGU0YzBhY2Y3YmRkNmEyZDY5ODNkMWZjY2JlYjZhNjk=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-18T11:09:06Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-26T10:02:07Z"}, "message": "Use better placeholders for some methods lint messages", "tree": {"sha": "c37d46c98a0dd8abd06d7a004025db9ab2a309d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c37d46c98a0dd8abd06d7a004025db9ab2a309d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "html_url": "https://github.com/rust-lang/rust/commit/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1c6f9871f430e284b17aa44059e0d0395e28a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1c6f9871f430e284b17aa44059e0d0395e28a6", "html_url": "https://github.com/rust-lang/rust/commit/bf1c6f9871f430e284b17aa44059e0d0395e28a6"}], "stats": {"total": 146, "additions": 73, "deletions": 73}, "files": [{"sha": "fc77cd52b8f9ad8c1b5d362c44045f6fd76f1c50", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -1748,7 +1748,7 @@ fn lint_or_fun_call<'tcx>(\n                     \"try this\",\n                     format!(\n                         \"{}.unwrap_or_default()\",\n-                        snippet_with_applicability(cx, self_expr.span, \"_\", &mut applicability)\n+                        snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability)\n                     ),\n                     applicability,\n                 );\n@@ -2155,7 +2155,7 @@ fn lint_clone_on_ref_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::\n             return;\n         };\n \n-        let snippet = snippet_with_macro_callsite(cx, arg.span, \"_\");\n+        let snippet = snippet_with_macro_callsite(cx, arg.span, \"..\");\n \n         span_lint_and_sugg(\n             cx,\n@@ -2191,9 +2191,9 @@ fn lint_string_extend(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::E\n             \"try this\",\n             format!(\n                 \"{}.push_str({}{})\",\n-                snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability),\n+                snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability),\n                 ref_str,\n-                snippet_with_applicability(cx, target.span, \"_\", &mut applicability)\n+                snippet_with_applicability(cx, target.span, \"..\", &mut applicability)\n             ),\n             applicability,\n         );\n@@ -2460,7 +2460,7 @@ fn lint_get_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, get_args:\n     let mut applicability = Applicability::MachineApplicable;\n     let expr_ty = cx.typeck_results().expr_ty(&get_args[0]);\n     let get_args_str = if get_args.len() > 1 {\n-        snippet_with_applicability(cx, get_args[1].span, \"_\", &mut applicability)\n+        snippet_with_applicability(cx, get_args[1].span, \"..\", &mut applicability)\n     } else {\n         return; // not linting on a .get().unwrap() chain or variant\n     };\n@@ -2520,7 +2520,7 @@ fn lint_get_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, get_args:\n         format!(\n             \"{}{}[{}]\",\n             borrow_str,\n-            snippet_with_applicability(cx, get_args[0].span, \"_\", &mut applicability),\n+            snippet_with_applicability(cx, get_args[0].span, \"..\", &mut applicability),\n             get_args_str\n         ),\n         applicability,\n@@ -2536,7 +2536,7 @@ fn lint_iter_skip_next(cx: &LateContext<'_>, expr: &hir::Expr<'_>, skip_args: &[\n                 cx,\n                 ITER_SKIP_NEXT,\n                 expr.span.trim_start(caller.span).unwrap(),\n-                \"called `skip(x).next()` on an iterator\",\n+                \"called `skip(..).next()` on an iterator\",\n                 \"use `nth` instead\",\n                 hint,\n                 Applicability::MachineApplicable,\n@@ -2739,11 +2739,11 @@ fn lint_map_unwrap_or_else<'tcx>(\n \n         // lint message\n         let msg = if is_option {\n-            \"called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling \\\n-            `map_or_else(g, f)` instead\"\n+            \"called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling \\\n+            `map_or_else(<g>, <f>)` instead\"\n         } else {\n-            \"called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling \\\n-            `.map_or_else(g, f)` instead\"\n+            \"called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling \\\n+            `.map_or_else(<g>, <f>)` instead\"\n         };\n         // get snippets for args to map() and unwrap_or_else()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n@@ -2809,8 +2809,8 @@ fn lint_map_or_none<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n         if is_option {\n             let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n             let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n-            let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n-                       `and_then(f)` instead\";\n+            let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n+                       `and_then(..)` instead\";\n             (\n                 OPTION_MAP_OR_NONE,\n                 msg,\n@@ -2848,8 +2848,8 @@ fn lint_map_or_none<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n fn lint_filter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, filter_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.filter().next()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n-                   `.find(p)` instead.\";\n+        let msg = \"called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n+                   `.find(..)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n             // add note if not multi-line\n@@ -2879,9 +2879,9 @@ fn lint_skip_while_next<'tcx>(\n             cx,\n             SKIP_WHILE_NEXT,\n             expr.span,\n-            \"called `skip_while(p).next()` on an `Iterator`\",\n+            \"called `skip_while(<p>).next()` on an `Iterator`\",\n             None,\n-            \"this is more succinctly expressed by calling `.find(!p)` instead\",\n+            \"this is more succinctly expressed by calling `.find(!<p>)` instead\",\n         );\n     }\n }\n@@ -2895,7 +2895,7 @@ fn lint_filter_map<'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).map(q)` on an `Iterator`\";\n+        let msg = \"called `filter(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n@@ -2904,8 +2904,8 @@ fn lint_filter_map<'tcx>(\n /// lint use of `filter_map().next()` for `Iterators`\n fn lint_filter_map_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, filter_args: &'tcx [hir::Expr<'_>]) {\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n-                   `.find_map(p)` instead.\";\n+        let msg = \"called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n+                   `.find_map(..)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n             span_lint_and_note(\n@@ -2931,7 +2931,7 @@ fn lint_find_map<'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n-        let msg = \"called `find(p).map(q)` on an `Iterator`\";\n+        let msg = \"called `find(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n         span_lint_and_help(cx, FIND_MAP, expr.span, msg, None, hint);\n     }\n@@ -2946,7 +2946,7 @@ fn lint_filter_map_map<'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).map(q)` on an `Iterator`\";\n+        let msg = \"called `filter_map(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n@@ -2961,7 +2961,7 @@ fn lint_filter_flat_map<'tcx>(\n ) {\n     // lint if caller of `.filter().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).flat_map(q)` on an `Iterator`\";\n+        let msg = \"called `filter(..).flat_map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n@@ -2977,7 +2977,7 @@ fn lint_filter_map_flat_map<'tcx>(\n ) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`\";\n+        let msg = \"called `filter_map(..).flat_map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n@@ -3148,9 +3148,9 @@ fn lint_chars_cmp(\n                 \"like this\",\n                 format!(\"{}{}.{}({})\",\n                         if info.eq { \"\" } else { \"!\" },\n-                        snippet_with_applicability(cx, args[0][0].span, \"_\", &mut applicability),\n+                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n                         suggest,\n-                        snippet_with_applicability(cx, arg_char[0].span, \"_\", &mut applicability)),\n+                        snippet_with_applicability(cx, arg_char[0].span, \"..\", &mut applicability)),\n                 applicability,\n             );\n \n@@ -3197,7 +3197,7 @@ fn lint_chars_cmp_with_unwrap<'tcx>(\n                 \"like this\",\n                 format!(\"{}{}.{}('{}')\",\n                         if info.eq { \"\" } else { \"!\" },\n-                        snippet_with_applicability(cx, args[0][0].span, \"_\", &mut applicability),\n+                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n                         suggest,\n                         c),\n                 applicability,\n@@ -3272,7 +3272,7 @@ fn lint_single_char_pattern(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &h\n fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n-        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n+        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability);\n         let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n         span_lint_and_sugg(\n             cx,\n@@ -3315,7 +3315,7 @@ fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_re\n                 expr.span,\n                 &format!(\"this call to `{}` does nothing\", call_name),\n                 \"try this\",\n-                snippet_with_applicability(cx, recvr.span, \"_\", &mut applicability).to_string(),\n+                snippet_with_applicability(cx, recvr.span, \"..\", &mut applicability).to_string(),\n                 applicability,\n             );\n         }"}, {"sha": "d30b85d6a78173677c1a4fd97f9b7e2acd889502", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -53,15 +53,15 @@ pub(super) fn lint<'tcx>(\n         // lint message\n         // comparing the snippet from source to raw text (\"None\") below is safe\n         // because we already have checked the type.\n-        let arg = if unwrap_snippet == \"None\" { \"None\" } else { \"a\" };\n+        let arg = if unwrap_snippet == \"None\" { \"None\" } else { \"<a>\" };\n         let unwrap_snippet_none = unwrap_snippet == \"None\";\n         let suggest = if unwrap_snippet_none {\n-            \"and_then(f)\"\n+            \"and_then(<f>)\"\n         } else {\n-            \"map_or(a, f)\"\n+            \"map_or(<a>, <f>)\"\n         };\n         let msg = &format!(\n-            \"called `map(f).unwrap_or({})` on an `Option` value. \\\n+            \"called `map(<f>).unwrap_or({})` on an `Option` value. \\\n             This can be done more directly by calling `{}` instead\",\n             arg, suggest\n         );"}, {"sha": "01281ebaf6a6486b95f5eb80ad38070a2f6b3949", "filename": "tests/ui/filter_map_next.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Ffilter_map_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Ffilter_map_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.stderr?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -1,4 +1,4 @@\n-error: called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(p)` instead.\n+error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n   --> $DIR/filter_map_next.rs:6:32\n    |\n LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n@@ -7,7 +7,7 @@ LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next\n    = note: `-D clippy::filter-map-next` implied by `-D warnings`\n    = note: replace `filter_map(|s| s.parse().ok()).next()` with `find_map(|s| s.parse().ok())`\n \n-error: called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(p)` instead.\n+error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n   --> $DIR/filter_map_next.rs:10:26\n    |\n LL |       let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]"}, {"sha": "91718dd11755b75310056c4a60277da2b63e8329", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -1,4 +1,4 @@\n-error: called `filter(p).map(q)` on an `Iterator`\n+error: called `filter(..).map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:5:21\n    |\n LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n@@ -7,7 +7,7 @@ LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x *\n    = note: `-D clippy::filter-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n \n-error: called `filter(p).flat_map(q)` on an `Iterator`\n+error: called `filter(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:7:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -19,7 +19,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n-error: called `filter_map(p).flat_map(q)` on an `Iterator`\n+error: called `filter_map(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:13:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -31,7 +31,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n-error: called `filter_map(p).map(q)` on an `Iterator`\n+error: called `filter_map(..).map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:19:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]"}, {"sha": "aea3cc62afcc41631213bbafca089acc6f9b72b5", "filename": "tests/ui/find_map.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -1,4 +1,4 @@\n-error: called `find(p).map(q)` on an `Iterator`\n+error: called `find(..).map(..)` on an `Iterator`\n   --> $DIR/find_map.rs:20:26\n    |\n LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n@@ -7,7 +7,7 @@ LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s\n    = note: `-D clippy::find-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.find_map(..)` instead\n \n-error: called `find(p).map(q)` on an `Iterator`\n+error: called `find(..).map(..)` on an `Iterator`\n   --> $DIR/find_map.rs:23:29\n    |\n LL |       let _: Option<Flavor> = desserts_of_the_week"}, {"sha": "486de718bb563f9064338396bf07f16d1e7c7bfd", "filename": "tests/ui/iter_skip_next.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Fiter_skip_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Fiter_skip_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.stderr?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -1,24 +1,24 @@\n-error: called `skip(x).next()` on an iterator\n+error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:15:28\n    |\n LL |     let _ = some_vec.iter().skip(42).next();\n    |                            ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(42)`\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n-error: called `skip(x).next()` on an iterator\n+error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:16:36\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |                                    ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(42)`\n \n-error: called `skip(x).next()` on an iterator\n+error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:17:20\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |                    ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(10)`\n \n-error: called `skip(x).next()` on an iterator\n+error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:18:33\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();"}, {"sha": "6fa2800e9bda15f2f765815722f9beea3c9fc65c", "filename": "tests/ui/map_unwrap_or.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:17:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n@@ -8,12 +8,12 @@ LL | |         .unwrap_or(0);\n    | |_____________________^\n    |\n    = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n-help: use `map_or(a, f)` instead\n+help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = opt.map_or(0, |x| x + 1);\n    |                 ^^^^^^ ^^          --\n \n-error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:21:13\n    |\n LL |       let _ = opt.map(|x| {\n@@ -23,15 +23,15 @@ LL | |     }\n LL | |     ).unwrap_or(0);\n    | |__________________^\n    |\n-help: use `map_or(a, f)` instead\n+help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = opt.map_or(0, |x| {\n LL |         x + 1\n LL |     }\n LL |     );\n    |\n \n-error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:25:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n@@ -41,25 +41,25 @@ LL | |             0\n LL | |         });\n    | |__________^\n    |\n-help: use `map_or(a, f)` instead\n+help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = opt.map_or({\n LL |             0\n LL |         }, |x| x + 1);\n    |\n \n-error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n   --> $DIR/map_unwrap_or.rs:30:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: use `and_then(f)` instead\n+help: use `and_then(<f>)` instead\n    |\n LL |     let _ = opt.and_then(|x| Some(x + 1));\n    |                 ^^^^^^^^                --\n \n-error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n   --> $DIR/map_unwrap_or.rs:32:13\n    |\n LL |       let _ = opt.map(|x| {\n@@ -69,15 +69,15 @@ LL | |     }\n LL | |     ).unwrap_or(None);\n    | |_____________________^\n    |\n-help: use `and_then(f)` instead\n+help: use `and_then(<f>)` instead\n    |\n LL |     let _ = opt.and_then(|x| {\n LL |         Some(x + 1)\n LL |     }\n LL |     );\n    |\n \n-error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n   --> $DIR/map_unwrap_or.rs:36:13\n    |\n LL |       let _ = opt\n@@ -86,23 +86,23 @@ LL | |         .map(|x| Some(x + 1))\n LL | |         .unwrap_or(None);\n    | |________________________^\n    |\n-help: use `and_then(f)` instead\n+help: use `and_then(<f>)` instead\n    |\n LL |         .and_then(|x| Some(x + 1));\n    |          ^^^^^^^^                --\n \n-error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:47:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: use `map_or(a, f)` instead\n+help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |                            ^^^^^^ ^^^                      --\n \n-error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n+error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:51:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n@@ -113,7 +113,7 @@ LL | |         .unwrap_or_else(|| 0);\n    |\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n-error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n+error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:55:13\n    |\n LL |       let _ = opt.map(|x| {\n@@ -123,7 +123,7 @@ LL | |     }\n LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n-error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n+error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:59:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n@@ -133,23 +133,23 @@ LL | |             0\n LL | |         );\n    | |_________^\n \n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:88:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:90:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:91:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);"}, {"sha": "74d8533d4da85e7cf6e6a09804bd8f1f27539410", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -8,7 +8,7 @@ LL | |     }\n    |\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n-error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n   --> $DIR/methods.rs:126:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n@@ -17,7 +17,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: `-D clippy::filter-next` implied by `-D warnings`\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n-error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n   --> $DIR/methods.rs:129:13\n    |\n LL |       let _ = v.iter().filter(|&x| {"}, {"sha": "1cba29412b872b927a359b74ab397d5b1b2798a9", "filename": "tests/ui/option_map_or_none.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Foption_map_or_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Foption_map_or_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_or_none.stderr?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -1,12 +1,12 @@\n-error: called `map_or(None, f)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling `and_then(..)` instead\n   --> $DIR/option_map_or_none.rs:10:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n-error: called `map_or(None, f)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling `and_then(..)` instead\n   --> $DIR/option_map_or_none.rs:13:13\n    |\n LL |       let _ = opt.map_or(None, |x| {"}, {"sha": "269cc13468bc83a3ba58d280b5e1c62373f30c42", "filename": "tests/ui/skip_while_next.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Fskip_while_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69/tests%2Fui%2Fskip_while_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fskip_while_next.stderr?ref=2911d9c7de4c0acf7bdd6a2d6983d1fccbeb6a69", "patch": "@@ -1,13 +1,13 @@\n-error: called `skip_while(p).next()` on an `Iterator`\n+error: called `skip_while(<p>).next()` on an `Iterator`\n   --> $DIR/skip_while_next.rs:14:13\n    |\n LL |     let _ = v.iter().skip_while(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::skip-while-next` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.find(!p)` instead\n+   = help: this is more succinctly expressed by calling `.find(!<p>)` instead\n \n-error: called `skip_while(p).next()` on an `Iterator`\n+error: called `skip_while(<p>).next()` on an `Iterator`\n   --> $DIR/skip_while_next.rs:17:13\n    |\n LL |       let _ = v.iter().skip_while(|&x| {\n@@ -17,7 +17,7 @@ LL | |                             }\n LL | |                    ).next();\n    | |___________________________^\n    |\n-   = help: this is more succinctly expressed by calling `.find(!p)` instead\n+   = help: this is more succinctly expressed by calling `.find(!<p>)` instead\n \n error: aborting due to 2 previous errors\n "}]}