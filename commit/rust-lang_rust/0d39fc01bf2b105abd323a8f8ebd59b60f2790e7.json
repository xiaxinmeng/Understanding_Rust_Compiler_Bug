{"sha": "0d39fc01bf2b105abd323a8f8ebd59b60f2790e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMzlmYzAxYmYyYjEwNWFiZDMyM2E4ZjhlYmQ1OWI2MGYyNzkwZTc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T21:16:07Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libcollections: use unboxed closures in `TreeMap` methods", "tree": {"sha": "22cd6809808f58d8ccca13696ab35119dbe3050d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22cd6809808f58d8ccca13696ab35119dbe3050d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d39fc01bf2b105abd323a8f8ebd59b60f2790e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d39fc01bf2b105abd323a8f8ebd59b60f2790e7", "html_url": "https://github.com/rust-lang/rust/commit/0d39fc01bf2b105abd323a8f8ebd59b60f2790e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d39fc01bf2b105abd323a8f8ebd59b60f2790e7/comments", "author": null, "committer": null, "parents": [{"sha": "02e7389c5d3e7fd9dfec13f691a04cfff003205d", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e7389c5d3e7fd9dfec13f691a04cfff003205d", "html_url": "https://github.com/rust-lang/rust/commit/02e7389c5d3e7fd9dfec13f691a04cfff003205d"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "5c2cf4a81808dd73b4b96c6ce7813d7d73577864", "filename": "src/libcollections/tree/map.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0d39fc01bf2b105abd323a8f8ebd59b60f2790e7/src%2Flibcollections%2Ftree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d39fc01bf2b105abd323a8f8ebd59b60f2790e7/src%2Flibcollections%2Ftree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmap.rs?ref=0d39fc01bf2b105abd323a8f8ebd59b60f2790e7", "patch": "@@ -616,7 +616,7 @@ impl<K, V> TreeMap<K, V> {\n     /// ```\n     #[inline]\n     #[experimental = \"likely to be renamed, may be removed\"]\n-    pub fn find_with(&self, f:|&K| -> Ordering) -> Option<&V> {\n+    pub fn find_with<F>(&self, f: F) -> Option<&V> where F: FnMut(&K) -> Ordering {\n         tree_find_with(&self.root, f)\n     }\n \n@@ -641,7 +641,9 @@ impl<K, V> TreeMap<K, V> {\n     /// ```\n     #[inline]\n     #[experimental = \"likely to be renamed, may be removed\"]\n-    pub fn find_with_mut<'a>(&'a mut self, f:|&K| -> Ordering) -> Option<&'a mut V> {\n+    pub fn find_with_mut<'a, F>(&'a mut self, f: F) -> Option<&'a mut V> where\n+        F: FnMut(&K) -> Ordering\n+    {\n         tree_find_with_mut(&mut self.root, f)\n     }\n }\n@@ -1129,8 +1131,12 @@ fn split<K: Ord, V>(node: &mut Box<TreeNode<K, V>>) {\n // Next 2 functions have the same convention: comparator gets\n // at input current key and returns search_key cmp cur_key\n // (i.e. search_key.cmp(&cur_key))\n-fn tree_find_with<'r, K, V>(node: &'r Option<Box<TreeNode<K, V>>>,\n-                            f: |&K| -> Ordering) -> Option<&'r V> {\n+fn tree_find_with<'r, K, V, F>(\n+    node: &'r Option<Box<TreeNode<K, V>>>,\n+    mut f: F,\n+) -> Option<&'r V> where\n+    F: FnMut(&K) -> Ordering,\n+{\n     let mut current: &'r Option<Box<TreeNode<K, V>>> = node;\n     loop {\n         match *current {\n@@ -1147,8 +1153,12 @@ fn tree_find_with<'r, K, V>(node: &'r Option<Box<TreeNode<K, V>>>,\n }\n \n // See comments above tree_find_with\n-fn tree_find_with_mut<'r, K, V>(node: &'r mut Option<Box<TreeNode<K, V>>>,\n-                                f: |&K| -> Ordering) -> Option<&'r mut V> {\n+fn tree_find_with_mut<'r, K, V, F>(\n+    node: &'r mut Option<Box<TreeNode<K, V>>>,\n+    mut f: F,\n+) -> Option<&'r mut V> where\n+    F: FnMut(&K) -> Ordering,\n+{\n \n     let mut current = node;\n     loop {"}]}