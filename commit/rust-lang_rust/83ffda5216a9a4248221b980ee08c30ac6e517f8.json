{"sha": "83ffda5216a9a4248221b980ee08c30ac6e517f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZmZkYTUyMTZhOWE0MjQ4MjIxYjk4MGVlMDhjMzBhYzZlNTE3Zjg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-13T22:16:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-18T19:02:22Z"}, "message": "Specific labels when referring to \"expected\" and \"found\" types", "tree": {"sha": "e176c52a39ce4554f0f769a25e627fa5b167c398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e176c52a39ce4554f0f769a25e627fa5b167c398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83ffda5216a9a4248221b980ee08c30ac6e517f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83ffda5216a9a4248221b980ee08c30ac6e517f8", "html_url": "https://github.com/rust-lang/rust/commit/83ffda5216a9a4248221b980ee08c30ac6e517f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83ffda5216a9a4248221b980ee08c30ac6e517f8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d40f8bdfcc3c28355467973f97fd4c45ac5876", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d40f8bdfcc3c28355467973f97fd4c45ac5876", "html_url": "https://github.com/rust-lang/rust/commit/a0d40f8bdfcc3c28355467973f97fd4c45ac5876"}], "stats": {"total": 3124, "additions": 1602, "deletions": 1522}, "files": [{"sha": "caf9f7288b99fa33357ab8ad2f52d57654d4329a", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -1197,18 +1197,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         if let Some((expected, found)) = expected_found {\n+            let expected_label = exp_found.map(|ef| ef.expected.prefix_string())\n+                .unwrap_or(\"type\".into());\n+            let found_label = exp_found.map(|ef| ef.found.prefix_string())\n+                .unwrap_or(\"type\".into());\n             match (terr, is_simple_error, expected == found) {\n-                (&TypeError::Sorts(ref values), false, true) => {\n-                    let sort_string = | a_type: Ty<'tcx> |\n-                        if let ty::Opaque(def_id, _) = a_type.kind {\n-                            format!(\" (opaque type at {})\", self.tcx.sess.source_map()\n-                                .mk_substr_filename(self.tcx.def_span(def_id)))\n-                        } else {\n-                            format!(\" ({})\", a_type.sort_string(self.tcx))\n-                        };\n+                (&TypeError::Sorts(ref values), false, extra) => {\n+                    let sort_string = |ty: Ty<'tcx>| match (extra, &ty.kind) {\n+                        (true, ty::Opaque(def_id, _)) => format!(\n+                            \" (opaque type at {})\",\n+                            self.tcx.sess.source_map()\n+                                .mk_substr_filename(self.tcx.def_span(*def_id)),\n+                        ),\n+                        (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n+                        (false, _) => \"\".to_string(),\n+                    };\n                     diag.note_expected_found_extra(\n-                        &\"type\",\n+                        &expected_label,\n                         expected,\n+                        &found_label,\n                         found,\n                         &sort_string(values.expected),\n                         &sort_string(values.found),\n@@ -1222,15 +1229,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         \"note_type_err: exp_found={:?}, expected={:?} found={:?}\",\n                         exp_found, expected, found\n                     );\n-                    if let Some(exp_found) = exp_found {\n-                        self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n-                    }\n-\n-                    diag.note_expected_found(&\"type\", expected, found);\n+                    diag.note_expected_found(&expected_label, expected, &found_label, found);\n                 }\n                 _ => (),\n             }\n         }\n+        if let Some(exp_found) = exp_found {\n+            self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n+        }\n \n         // In some (most?) cases cause.body_id points to actual body, but in some cases\n         // it's a actual definition. According to the comments (e.g. in"}, {"sha": "8babd0584b3346ef2bb42795d60456cb9feab2a0", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -246,6 +246,37 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Error => \"type error\".into(),\n         }\n     }\n+\n+    pub fn prefix_string(&self) -> Cow<'static, str> {\n+        debug!(\"prefix_string {:?} {} {:?}\", self, self, self.kind);\n+        match self.kind {\n+            ty::Infer(_) | ty::Error | ty::Bool | ty::Char | ty::Int(_) |\n+            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => \"type\".into(),\n+            ty::Tuple(ref tys) if tys.is_empty() => \"type\".into(),\n+            ty::Adt(def, _) => def.descr().into(),\n+            ty::Foreign(_) => \"extern type\".into(),\n+            ty::Array(..) => \"array\".into(),\n+            ty::Slice(_) => \"slice\".into(),\n+            ty::RawPtr(_) => \"raw pointer\".into(),\n+            ty::Ref(.., mutbl) => match mutbl {\n+                hir::Mutability::Mutable => \"mutable reference\",\n+                _ => \"reference\"\n+            }.into(),\n+            ty::FnDef(..) => \"fn item\".into(),\n+            ty::FnPtr(_) => \"fn pointer\".into(),\n+            ty::Dynamic(..) => \"trait\".into(),\n+            ty::Closure(..) => \"closure\".into(),\n+            ty::Generator(..) => \"generator\".into(),\n+            ty::GeneratorWitness(..) => \"generator witness\".into(),\n+            ty::Tuple(..) => \"tuple\".into(),\n+            ty::Placeholder(..) => \"placeholder type\".into(),\n+            ty::Bound(..) => \"bound type\".into(),\n+            ty::Projection(_) => \"associated type\".into(),\n+            ty::UnnormalizedProjection(_) => \"associated type\".into(),\n+            ty::Param(_) => \"type parameter\".into(),\n+            ty::Opaque(..) => \"opaque type\".into(),\n+        }\n+    }\n }\n \n impl<'tcx> TyCtxt<'tcx> {"}, {"sha": "35da2d29da8dc3203ba053d001ba788b2d2c7081", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -143,20 +143,21 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn note_expected_found(&mut self,\n-                               label: &dyn fmt::Display,\n-                               expected: DiagnosticStyledString,\n-                               found: DiagnosticStyledString)\n-                               -> &mut Self\n-    {\n-        self.note_expected_found_extra(label, expected, found, &\"\", &\"\")\n-    }\n-\n-    pub fn note_unsuccessfull_coercion(&mut self,\n-                                       expected: DiagnosticStyledString,\n-                                       found: DiagnosticStyledString)\n-                                       -> &mut Self\n-    {\n+    pub fn note_expected_found(\n+        &mut self,\n+        expected_label: &dyn fmt::Display,\n+        expected: DiagnosticStyledString,\n+        found_label: &dyn fmt::Display,\n+        found: DiagnosticStyledString,\n+    ) -> &mut Self {\n+        self.note_expected_found_extra(expected_label, expected, found_label, found, &\"\", &\"\")\n+    }\n+\n+    pub fn note_unsuccessfull_coercion(\n+        &mut self,\n+        expected: DiagnosticStyledString,\n+        found: DiagnosticStyledString,\n+    ) -> &mut Self {\n         let mut msg: Vec<_> =\n             vec![(format!(\"required when trying to coerce from type `\"),\n                   Style::NoStyle)];\n@@ -178,27 +179,38 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn note_expected_found_extra(&mut self,\n-                                     label: &dyn fmt::Display,\n-                                     expected: DiagnosticStyledString,\n-                                     found: DiagnosticStyledString,\n-                                     expected_extra: &dyn fmt::Display,\n-                                     found_extra: &dyn fmt::Display)\n-                                     -> &mut Self\n-    {\n-        let mut msg: Vec<_> = vec![(format!(\"expected {} `\", label), Style::NoStyle)];\n+    pub fn note_expected_found_extra(\n+        &mut self,\n+        expected_label: &dyn fmt::Display,\n+        expected: DiagnosticStyledString,\n+        found_label: &dyn fmt::Display,\n+        found: DiagnosticStyledString,\n+        expected_extra: &dyn fmt::Display,\n+        found_extra: &dyn fmt::Display,\n+    ) -> &mut Self {\n+        let expected_label = format!(\"expected {}\", expected_label);\n+        let found_label = format!(\"found {}\", found_label);\n+        let (found_padding, expected_padding) = if expected_label.len() > found_label.len() {\n+            (expected_label.len() - found_label.len(), 0)\n+        } else {\n+            (0, found_label.len() - expected_label.len())\n+        };\n+        let mut msg: Vec<_> = vec![(\n+            format!(\"{}{} `\", \" \".repeat(expected_padding), expected_label),\n+            Style::NoStyle,\n+        )];\n         msg.extend(expected.0.iter()\n-                   .map(|x| match *x {\n-                       StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n-                       StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n-                   }));\n+            .map(|x| match *x {\n+                StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n+                StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n+            }));\n         msg.push((format!(\"`{}\\n\", expected_extra), Style::NoStyle));\n-        msg.push((format!(\"   found {} `\", label), Style::NoStyle));\n+        msg.push((format!(\"{}{} `\", \" \".repeat(found_padding), found_label), Style::NoStyle));\n         msg.extend(found.0.iter()\n-                   .map(|x| match *x {\n-                       StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n-                       StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n-                   }));\n+            .map(|x| match *x {\n+                StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n+                StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n+            }));\n         msg.push((format!(\"`{}\", found_extra), Style::NoStyle));\n \n         // For now, just attach these as notes"}, {"sha": "a95c29f8c2729fd4fde3efe97a92d82114cea7c2", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -195,37 +195,44 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n-    forward!(pub fn note_expected_found(&mut self,\n-                                        label: &dyn fmt::Display,\n-                                        expected: DiagnosticStyledString,\n-                                        found: DiagnosticStyledString,\n-                                        ) -> &mut Self);\n-\n-    forward!(pub fn note_expected_found_extra(&mut self,\n-                                              label: &dyn fmt::Display,\n-                                              expected: DiagnosticStyledString,\n-                                              found: DiagnosticStyledString,\n-                                              expected_extra: &dyn fmt::Display,\n-                                              found_extra: &dyn fmt::Display,\n-                                              ) -> &mut Self);\n-\n-    forward!(pub fn note_unsuccessfull_coercion(&mut self,\n-                                                expected: DiagnosticStyledString,\n-                                                found: DiagnosticStyledString,\n-                                                ) -> &mut Self);\n+    forward!(pub fn note_expected_found(\n+        &mut self,\n+        expected_label: &dyn fmt::Display,\n+        expected: DiagnosticStyledString,\n+        found_label: &dyn fmt::Display,\n+        found: DiagnosticStyledString,\n+    ) -> &mut Self);\n+\n+    forward!(pub fn note_expected_found_extra(\n+        &mut self,\n+        expected_label: &dyn fmt::Display,\n+        expected: DiagnosticStyledString,\n+        found_label: &dyn fmt::Display,\n+        found: DiagnosticStyledString,\n+        expected_extra: &dyn fmt::Display,\n+        found_extra: &dyn fmt::Display,\n+    ) -> &mut Self);\n+\n+    forward!(pub fn note_unsuccessfull_coercion(\n+        &mut self,\n+        expected: DiagnosticStyledString,\n+        found: DiagnosticStyledString,\n+    ) -> &mut Self);\n \n     forward!(pub fn note(&mut self, msg: &str) -> &mut Self);\n-    forward!(pub fn span_note<S: Into<MultiSpan>>(&mut self,\n-                                                  sp: S,\n-                                                  msg: &str,\n-                                                  ) -> &mut Self);\n+    forward!(pub fn span_note<S: Into<MultiSpan>>(\n+        &mut self,\n+        sp: S,\n+        msg: &str,\n+    ) -> &mut Self);\n     forward!(pub fn warn(&mut self, msg: &str) -> &mut Self);\n     forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self);\n     forward!(pub fn help(&mut self, msg: &str) -> &mut Self);\n-    forward!(pub fn span_help<S: Into<MultiSpan>>(&mut self,\n-                                                  sp: S,\n-                                                  msg: &str,\n-                                                  ) -> &mut Self);\n+    forward!(pub fn span_help<S: Into<MultiSpan>>(\n+        &mut self,\n+        sp: S,\n+        msg: &str,\n+    ) -> &mut Self);\n \n     pub fn multipart_suggestion(\n         &mut self,"}, {"sha": "1fbbb0e79bbf063348774d1d616f7475394f917f", "filename": "src/test/ui/array-break-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -17,7 +17,7 @@ LL |         |_: [_; break]| {}\n    |         ^^^^^^^^^^^^^^^^^^ expected (), found closure\n    |\n    = note: expected type `()`\n-              found type `[closure@$DIR/array-break-length.rs:3:9: 3:27]`\n+           found closure `[closure@$DIR/array-break-length.rs:3:9: 3:27]`\n \n error[E0308]: mismatched types\n   --> $DIR/array-break-length.rs:8:9\n@@ -26,7 +26,7 @@ LL |         |_: [_; continue]| {}\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found closure\n    |\n    = note: expected type `()`\n-              found type `[closure@$DIR/array-break-length.rs:8:9: 8:30]`\n+           found closure `[closure@$DIR/array-break-length.rs:8:9: 8:30]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "838951c7c1d484f7e4fb19a772fbe5c0f8339e57", "filename": "src/test/ui/array-not-vector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -2,13 +2,13 @@ fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n     //~| expected type `i32`\n-    //~| found type `[{integer}; 3]`\n+    //~| found array `[{integer}; 3]`\n     //~| expected i32, found array of 3 elements\n \n     let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;\n     //~^ ERROR mismatched types\n-    //~| expected type `&i32`\n-    //~| found type `&[i32]`\n+    //~| expected reference `&i32`\n+    //~| found reference `&[i32]`\n     //~| expected i32, found slice\n }"}, {"sha": "2a2fbe6660a358e703c131fbbd13a991ce778ef8", "filename": "src/test/ui/array-not-vector.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,16 +5,16 @@ LL |     let _x: i32 = [1, 2, 3];\n    |                   ^^^^^^^^^ expected i32, found array of 3 elements\n    |\n    = note: expected type `i32`\n-              found type `[{integer}; 3]`\n+             found array `[{integer}; 3]`\n \n error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:9:20\n    |\n LL |     let _y: &i32 = x;\n    |                    ^ expected i32, found slice\n    |\n-   = note: expected type `&i32`\n-              found type `&[i32]`\n+   = note: expected reference `&i32`\n+              found reference `&[i32]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6a48bbabe1078b650010db4f9757cd3c9bf58d90", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     const FROM: Self::Out;\n LL |     const FROM: &'static str = \"foo\";\n    |                 ^^^^^^^^^^^^ expected associated type, found reference\n    |\n-   = note: expected type `<T as Foo>::Out`\n-              found type `&'static str`\n+   = note: expected associated type `<T as Foo>::Out`\n+                    found reference `&'static str`\n    = note: consider constraining the associated type `<T as Foo>::Out` to `&'static str` or calling a method that returns `<T as Foo>::Out`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}, {"sha": "0cce10b54a4a9f4ffac2ecf639212c6e66dd58fd", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     const NAME: &'a str = \"unit\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&'static str`\n-              found type `&'a str`\n+   = note: expected reference `&'static str`\n+              found reference `&'a str`\n note: the lifetime `'a` as defined on the impl at 6:6...\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:6:6\n    |"}, {"sha": "483c7e7707e4f7f9c6def3e1505be76295d40a19", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,35 +4,35 @@ error[E0308]: mismatched types\n LL | fn b() { dent(ModelT, Blue); }\n    |                       ^^^^ expected struct `Black`, found struct `Blue`\n    |\n-   = note: expected type `Black`\n-              found type `Blue`\n+   = note: expected struct `Black`\n+              found struct `Blue`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n    |                       ^^^^^ expected struct `Blue`, found struct `Black`\n    |\n-   = note: expected type `Blue`\n-              found type `Black`\n+   = note: expected struct `Blue`\n+              found struct `Black`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n    |                            ^^^^ expected struct `Black`, found struct `Blue`\n    |\n-   = note: expected type `Black`\n-              found type `Blue`\n+   = note: expected struct `Black`\n+              found struct `Blue`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n    |                            ^^^^^ expected struct `Blue`, found struct `Black`\n    |\n-   = note: expected type `Blue`\n-              found type `Black`\n+   = note: expected struct `Blue`\n+              found struct `Black`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6443de5878181facb998901523de8e95028f73b4", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Blue`, found struct `Black`\n    |\n-   = note: expected type `Blue`\n-              found type `Black`\n+   = note: expected struct `Blue`\n+              found struct `Black`\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n@@ -19,8 +19,8 @@ LL | fn black_car<C:Car<Color=Black>>(c: C) {\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Black`, found struct `Blue`\n    |\n-   = note: expected type `Black`\n-              found type `Blue`\n+   = note: expected struct `Black`\n+              found struct `Blue`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2bc302914a5bba64785b5e52137fe0c33bd91949", "filename": "src/test/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -22,9 +22,9 @@ fn foo1<I: Foo<A=Bar>>(x: I) {\n fn foo2<I: Foo>(x: I) {\n     let _: Bar = x.boo();\n     //~^ ERROR mismatched types\n-    //~| expected type `Bar`\n-    //~| found type `<I as Foo>::A`\n+    //~| found associated type `<I as Foo>::A`\n     //~| expected struct `Bar`, found associated type\n+    //~| expected struct `Bar`\n }\n \n "}, {"sha": "88910f6de2a3a49688eed8f8940e19c9febaef21", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: Bar = x.boo();\n    |                  ^^^^^^^ expected struct `Bar`, found associated type\n    |\n-   = note: expected type `Bar`\n-              found type `<I as Foo>::A`\n+   = note:       expected struct `Bar`\n+           found associated type `<I as Foo>::A`\n    = note: consider constraining the associated type `<I as Foo>::A` to `Bar`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n@@ -18,17 +18,17 @@ LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n LL |     foo1(a);\n    |     ^^^^ expected struct `Bar`, found usize\n    |\n-   = note: expected type `Bar`\n-              found type `usize`\n+   = note: expected struct `Bar`\n+                found type `usize`\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:41:9\n    |\n LL |     baz(&a);\n    |         ^^ expected struct `Bar`, found usize\n    |\n-   = note: expected type `Bar`\n-              found type `usize`\n+   = note: expected struct `Bar`\n+                found type `usize`\n    = note: required for the cast to the object type `dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors"}, {"sha": "6ed91b9ff473fb32d339f862972b3fbc5f158dad", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ expected isize, found usize\n    |\n-   = note: expected type `&isize`\n-              found type `&usize`\n+   = note: expected reference `&isize`\n+              found reference `&usize`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:86:5\n@@ -23,8 +23,8 @@ LL |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ expected usize, found isize\n    |\n-   = note: expected type `&usize`\n-              found type `&isize`\n+   = note: expected reference `&usize`\n+              found reference `&isize`\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n   --> $DIR/associated-types-eq-hr.rs:91:17"}, {"sha": "cebcae44fd00c3b1fd2119d7d69afdbf5b97c58a", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,7 +10,7 @@ LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found type parameter `T`\n    |\n-   = note: expected type `std::option::Option<T>`\n+   = note: expected enum `std::option::Option<T>`\n               found type `T`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters"}, {"sha": "69596fa4b90386a10e3d44596c684259abea0156", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     want_y(t);\n LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n    |    ------       ----- required by this bound in `want_y`\n    |\n-   = note: expected type `i32`\n-              found type `<T as Foo>::Y`\n+   = note:         expected type `i32`\n+           found associated type `<T as Foo>::Y`\n    = note: consider constraining the associated type `<T as Foo>::Y` to `i32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n@@ -21,8 +21,8 @@ LL |     want_x(t);\n LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n    |    ------       ----- required by this bound in `want_x`\n    |\n-   = note: expected type `u32`\n-              found type `<T as Foo>::X`\n+   = note:         expected type `u32`\n+           found associated type `<T as Foo>::X`\n    = note: consider constraining the associated type `<T as Foo>::X` to `u32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}, {"sha": "556fd0766c2ebcaaaa9ebd5982f912408a3e3c2b", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     fn visit() {}\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected (), found &()\n    |\n-   = note: expected type `()`\n-              found type `&()`\n+   = note:   expected type `()`\n+           found reference `&()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n \n error: aborting due to previous error"}, {"sha": "bdfa0443f8cc94b17038e1ee2236ad904c93e235", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -73,7 +73,7 @@ LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `std::result::Result<u8, MyErr>`\n+   = note: expected enum `std::result::Result<u8, MyErr>`\n               found type `()`\n \n error[E0308]: mismatched types\n@@ -84,7 +84,7 @@ LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `std::result::Result<u8, MyErr>`\n+   = note: expected enum `std::result::Result<u8, MyErr>`\n               found type `()`\n \n error: aborting due to 8 previous errors"}, {"sha": "6f3d10d08686afb6ab7f62a050446330803c86ff", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         take_u32(x)\n    |                  ^ expected u32, found opaque type\n    |\n-   = note: expected type `u32`\n-              found type `impl std::future::Future`\n+   = note:     expected type `u32`\n+           found opaque type `impl std::future::Future`\n \n error: aborting due to previous error\n "}, {"sha": "56d2682636637a49a1818b3555e524d582d60ab4", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |         take_u32(x)\n    |                  expected u32, found opaque type\n    |                  help: consider using `.await` here: `x.await`\n    |\n-   = note: expected type `u32`\n-              found type `impl std::future::Future`\n+   = note:     expected type `u32`\n+           found opaque type `impl std::future::Future`\n \n error: aborting due to previous error\n "}, {"sha": "e44438bfa58d80216aa713b5af67f74ee098b429", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     take_u32(x)\n    |              expected u32, found opaque type\n    |              help: consider using `.await` here: `x.await`\n    |\n-   = note: expected type `u32`\n-              found type `impl std::future::Future`\n+   = note:     expected type `u32`\n+           found opaque type `impl std::future::Future`\n \n error: aborting due to previous error\n "}, {"sha": "aacc796e2a84a1278def556abec04dd4ae530ca6", "filename": "src/test/ui/bad/bad-const-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -1,6 +1,6 @@\n static i: String = 10;\n //~^ ERROR mismatched types\n-//~| expected type `std::string::String`\n-//~| found type `{integer}`\n //~| expected struct `std::string::String`, found integer\n+//~| expected struct `std::string::String`\n+//~| found type `{integer}`\n fn main() { println!(\"{}\", i); }"}, {"sha": "d3da6bd771897cb576dd673a35b0bfdf9b48316f", "filename": "src/test/ui/bad/bad-const-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL | static i: String = 10;\n    |                    expected struct `std::string::String`, found integer\n    |                    help: try using a conversion method: `10.to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `{integer}`\n+   = note: expected struct `std::string::String`\n+                found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "faba9911f866e248e287c9ff5a99934bccb18ace", "filename": "src/test/ui/bad/bad-expr-path.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -22,8 +22,8 @@ error[E0580]: main function has wrong type\n LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected type `fn()`\n-              found type `fn(std::vec::Vec<std::string::String>)`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn(std::vec::Vec<std::string::String>)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "53b6d35e8f3a28612f7a9be153cfe2bb055a1344", "filename": "src/test/ui/bad/bad-expr-path2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -22,8 +22,8 @@ error[E0580]: main function has wrong type\n LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected type `fn()`\n-              found type `fn(std::vec::Vec<std::string::String>)`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn(std::vec::Vec<std::string::String>)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1e57c2488e9efdabdfb26a79fb8fd71f365bca6c", "filename": "src/test/ui/bad/bad-main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0580]: main function has wrong type\n LL | fn main(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected type `fn()`\n-              found type `fn(isize)`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn(isize)`\n \n error: aborting due to previous error\n "}, {"sha": "8e6e754df5b213118796590382b6a0b87a0f50dc", "filename": "src/test/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     let bar = 5;\n    |         ^^^ expected integer, found struct `foo::bar`\n    |\n    = note: expected type `{integer}`\n-              found type `foo::bar`\n+            found struct `foo::bar`\n \n error: aborting due to previous error\n "}, {"sha": "b028bfd5203237b018928bba92da5cd0fc9b9ab9", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n    |\n-   = note: expected type `std::string::String`\n-              found type `()`\n+   = note: expected struct `std::string::String`\n+                found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:6:11\n@@ -23,8 +23,8 @@ LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon\n    |\n-   = note: expected type `std::string::String`\n-              found type `()`\n+   = note: expected struct `std::string::String`\n+                found type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7b24ddbf55b919756c8b3db0d90b94090919290", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL | fn foo() -> String {\n LL |     ;\n    |     - help: consider removing this semicolon\n    |\n-   = note: expected type `std::string::String`\n-              found type `()`\n+   = note: expected struct `std::string::String`\n+                found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n@@ -23,8 +23,8 @@ LL |     \"foobar\".to_string()\n LL |     ;\n    |     - help: consider removing this semicolon\n    |\n-   = note: expected type `std::string::String`\n-              found type `()`\n+   = note: expected struct `std::string::String`\n+                found type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0eeaa771631104077eb719137da3acabbedf2e20", "filename": "src/test/ui/block-result/issue-13624.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,9 +6,9 @@ mod a {\n   pub fn get_enum_struct_variant() -> () {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n-    //~| found type `a::Enum`\n     //~| expected (), found enum `a::Enum`\n+    //~| expected type `()`\n+    //~| found enum `a::Enum`\n   }\n }\n \n@@ -21,9 +21,9 @@ mod b {\n       match enum_struct_variant {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n-        //~| expected type `()`\n-        //~| found type `a::Enum`\n         //~| expected (), found enum `a::Enum`\n+        //~| expected type `()`\n+        //~| found enum `a::Enum`\n         }\n       }\n     }"}, {"sha": "81daff5b5ccccf556e4ecbba289308ef317524b0", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,7 +7,7 @@ LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |\n    = note: expected type `()`\n-              found type `a::Enum`\n+              found enum `a::Enum`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:22:9\n@@ -18,7 +18,7 @@ LL |         a::Enum::EnumStructVariant { x, y, z } => {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |\n    = note: expected type `()`\n-              found type `a::Enum`\n+              found enum `a::Enum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bcbc9b711adf6fcaea6a34c5b527c5043690a5d8", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,7 +7,7 @@ LL |     |y| x + y\n    |     ^^^^^^^^^ expected (), found closure\n    |\n    = note: expected type `()`\n-              found type `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n+           found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n \n error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:7:13"}, {"sha": "379553b9e0d97573da5d7604b513dcddad55c9b3", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -18,7 +18,7 @@ LL |   b + 3\n    |   ^^^^^ expected (), found struct `Bob`\n    |\n    = note: expected type `()`\n-              found type `Bob`\n+            found struct `Bob`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0df7533e38da68d7c2f13ebfb5d12ba08876aebb", "filename": "src/test/ui/block-result/issue-5500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     &panic!()\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `&_`\n+    //~| found reference `&_`\n     //~| expected (), found reference\n }"}, {"sha": "27e492837248b8bf34504c294c16c90466874b2f", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL |     &panic!()\n    |     expected (), found reference\n    |     help: consider removing the borrow: `panic!()`\n    |\n-   = note: expected type `()`\n-              found type `&_`\n+   = note:   expected type `()`\n+           found reference `&_`\n \n error: aborting due to previous error\n "}, {"sha": "421c57fc74a0f647ef437742900e8bae137579c0", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -22,8 +22,8 @@ error[E0308]: method not compatible with trait\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n-              found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n+   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n+              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n note: the lifetime `'c` as defined on the method body at 27:24...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |"}, {"sha": "3d1710648daa26b3ec84c7cf02bae3d3ffa88708", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -28,17 +28,17 @@ error[E0308]: mismatched types\n LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                                                        ^^^ expected non-variadic fn, found variadic function\n    |\n-   = note: expected type `unsafe extern \"C\" fn(isize, u8)`\n-              found type `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n+   = note: expected fn pointer `unsafe extern \"C\" fn(isize, u8)`\n+                 found fn item `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:20:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                                                      ^^^ expected variadic fn, found non-variadic function\n    |\n-   = note: expected type `extern \"C\" fn(isize, u8, ...)`\n-              found type `extern \"C\" fn(isize, u8) {bar}`\n+   = note: expected fn pointer `extern \"C\" fn(isize, u8, ...)`\n+                 found fn item `extern \"C\" fn(isize, u8) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function\n   --> $DIR/variadic-ffi-1.rs:22:19"}, {"sha": "c80ed5ebf5cef6d0b1be235a624a71d98d0a99be", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     ap\n    |     ^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaListImpl<'f>`\n-              found type `core::ffi::VaListImpl<'_>`\n+   = note: expected struct `core::ffi::VaListImpl<'f>`\n+              found struct `core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 7:78...\n   --> $DIR/variadic-ffi-4.rs:7:78\n    |\n@@ -26,8 +26,8 @@ error[E0308]: mismatched types\n LL |     ap\n    |     ^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaListImpl<'static>`\n-              found type `core::ffi::VaListImpl<'_>`\n+   = note: expected struct `core::ffi::VaListImpl<'static>`\n+              found struct `core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 11:79...\n   --> $DIR/variadic-ffi-4.rs:11:79\n    |\n@@ -69,8 +69,8 @@ error[E0308]: mismatched types\n LL |     *ap0 = ap1;\n    |            ^^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaListImpl<'_>`\n-              found type `core::ffi::VaListImpl<'_>`\n+   = note: expected struct `core::ffi::VaListImpl<'_>`\n+              found struct `core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 19:87...\n   --> $DIR/variadic-ffi-4.rs:19:87\n    |\n@@ -121,8 +121,8 @@ error[E0308]: mismatched types\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&mut core::ffi::VaListImpl<'_>`\n-              found type `&mut core::ffi::VaListImpl<'_>`\n+   = note: expected mutable reference `&mut core::ffi::VaListImpl<'_>`\n+              found mutable reference `&mut core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 23:83...\n   --> $DIR/variadic-ffi-4.rs:23:83\n    |\n@@ -189,8 +189,8 @@ error[E0308]: mismatched types\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaListImpl<'_>`\n-              found type `core::ffi::VaListImpl<'_>`\n+   = note: expected struct `core::ffi::VaListImpl<'_>`\n+              found struct `core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 30:87...\n   --> $DIR/variadic-ffi-4.rs:30:87\n    |"}, {"sha": "a15444207f5cd422ba989cdefcd64031335bc5ff", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `fn(&u32)`\n-              found type `fn(&'x u32)`\n+   = note: expected fn pointer `fn(&u32)`\n+              found fn pointer `fn(&'x u32)`\n note: the anonymous lifetime #2 defined on the body at 14:48...\n   --> $DIR/expect-fn-supply-fn.rs:14:48\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `fn(&u32)`\n-              found type `fn(&'x u32)`\n+   = note: expected fn pointer `fn(&u32)`\n+              found fn pointer `fn(&'x u32)`\n note: the lifetime `'x` as defined on the function body at 11:36...\n   --> $DIR/expect-fn-supply-fn.rs:11:36\n    |"}, {"sha": "44c9ee335756030c58a8e3b56c2b4cb8624585f4", "filename": "src/test/ui/closures/closure-array-break-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -23,7 +23,7 @@ LL |     while |_: [_; continue]| {} {}\n    |           ^^^^^^^^^^^^^^^^^^^^^ expected bool, found closure\n    |\n    = note: expected type `bool`\n-              found type `[closure@$DIR/closure-array-break-length.rs:4:11: 4:32]`\n+           found closure `[closure@$DIR/closure-array-break-length.rs:4:11: 4:32]`\n \n error[E0308]: mismatched types\n   --> $DIR/closure-array-break-length.rs:7:11\n@@ -32,7 +32,7 @@ LL |     while |_: [_; break]| {} {}\n    |           ^^^^^^^^^^^^^^^^^^ expected bool, found closure\n    |\n    = note: expected type `bool`\n-              found type `[closure@$DIR/closure-array-break-length.rs:7:11: 7:29]`\n+           found closure `[closure@$DIR/closure-array-break-length.rs:7:11: 7:29]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "eb860f9aef243d1d7e5ecf8382e8b027a4ebbab0", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -24,8 +24,8 @@ error[E0308]: mismatched types\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&u32`\n-              found type `&'x u32`\n+   = note: expected reference `&u32`\n+              found reference `&'x u32`\n note: the anonymous lifetime #2 defined on the body at 37:29...\n   --> $DIR/expect-region-supply-region.rs:37:29\n    |\n@@ -50,8 +50,8 @@ error[E0308]: mismatched types\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&u32`\n-              found type `&'x u32`\n+   = note: expected reference `&u32`\n+              found reference `&'x u32`\n note: the lifetime `'x` as defined on the function body at 32:30...\n   --> $DIR/expect-region-supply-region.rs:32:30\n    |"}, {"sha": "9945530a5a7fe9fd4fffb1f0d9f0dfbdd8eed442", "filename": "src/test/ui/closures/closure-no-fn-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |                             ^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found closure\n    |\n-   = note: expected type `fn(u8) -> u8`\n-              found type `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50 a:_]`\n+   = note: expected fn pointer `fn(u8) -> u8`\n+                 found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50 a:_]`\n \n error: aborting due to previous error\n "}, {"sha": "f3b0d155dd9fe86c936a57cef4f27115fa0e0189", "filename": "src/test/ui/closures/closure-no-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let bar: fn() -> u8 = || { b };\n    |                           ^^^^^^^^ expected fn pointer, found closure\n    |\n-   = note: expected type `fn() -> u8`\n-              found type `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35 b:_]`\n+   = note: expected fn pointer `fn() -> u8`\n+                 found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35 b:_]`\n \n error: aborting due to previous error\n "}, {"sha": "63236cf542464ec9e6619b76a29f34e05c46157c", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     call_bare(f)\n    |               ^ expected fn pointer, found closure\n    |\n-   = note: expected type `for<'r> fn(&'r str)`\n-              found type `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50 string:_]`\n+   = note: expected fn pointer `for<'r> fn(&'r str)`\n+                 found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50 string:_]`\n \n error: aborting due to previous error\n "}, {"sha": "d2d52e282daa667ca2fddb123afe6ff8b394b08d", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,8 +12,8 @@ LL | fn foo() {\n LL |     \"bar            boo\"\n    |     ^^^^^^^^^^^^^^^^^^^^ expected (), found reference\n    |\n-   = note: expected type `()`\n-              found type `&'static str`\n+   = note:   expected type `()`\n+           found reference `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "acbc8339b1911999b6d52a6dad766beb4363372a", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,125 +4,125 @@ error[E0308]: mismatched types\n LL |     let _ = box { [1, 2, 3] }: Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `std::boxed::Box<[i32]>`\n-              found type `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `std::boxed::Box<[i32]>`\n+              found struct `std::boxed::Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:10:13\n    |\n LL |     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `std::boxed::Box<[i32]>`\n-              found type `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `std::boxed::Box<[i32]>`\n+              found struct `std::boxed::Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:11:13\n    |\n LL |     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `std::boxed::Box<[i32]>`\n-              found type `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `std::boxed::Box<[i32]>`\n+              found struct `std::boxed::Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n    |\n LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n-   = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n-              found type `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n+   = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n+              found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n    |\n LL |     let _ = box if true { false } else { true }: Box<dyn Debug>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n    |\n-   = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n-              found type `std::boxed::Box<bool>`\n+   = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n+              found struct `std::boxed::Box<bool>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n    |\n LL |     let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n    |\n-   = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n-              found type `std::boxed::Box<char>`\n+   = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n+              found struct `std::boxed::Box<char>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:17:13\n    |\n LL |     let _ = &{ [1, 2, 3] }: &[i32];\n    |             ^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `&[i32]`\n-              found type `&[i32; 3]`\n+   = note: expected reference `&[i32]`\n+              found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:18:13\n    |\n LL |     let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `&[i32]`\n-              found type `&[i32; 3]`\n+   = note: expected reference `&[i32]`\n+              found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:19:13\n    |\n LL |     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `&[i32]`\n-              found type `&[i32; 3]`\n+   = note: expected reference `&[i32]`\n+              found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n    |\n LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n    |             ^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n-   = note: expected type `&dyn std::ops::Fn(i32) -> u8`\n-              found type `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:29]`\n+   = note: expected reference `&dyn std::ops::Fn(i32) -> u8`\n+              found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:29]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n    |\n LL |     let _ = &if true { false } else { true }: &dyn Debug;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n    |\n-   = note: expected type `&dyn std::fmt::Debug`\n-              found type `&bool`\n+   = note: expected reference `&dyn std::fmt::Debug`\n+              found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n    |\n LL |     let _ = &match true { true => 'a', false => 'b' }: &dyn Debug;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n    |\n-   = note: expected type `&dyn std::fmt::Debug`\n-              found type `&char`\n+   = note: expected reference `&dyn std::fmt::Debug`\n+              found reference `&char`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:25:13\n    |\n LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `std::boxed::Box<[i32]>`\n-              found type `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `std::boxed::Box<[i32]>`\n+              found struct `std::boxed::Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n    |\n LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n-   = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`\n-              found type `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`\n+   = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`\n+              found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "43f0b55856d3c6eba5908cd584b83d67297973bc", "filename": "src/test/ui/coercion/coerce-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let x = 0;\n     f(&x);\n     //~^ ERROR mismatched types\n-    //~| expected type `&mut i32`\n-    //~| found type `&{integer}`\n+    //~| expected mutable reference `&mut i32`\n+    //~| found reference `&{integer}`\n     //~| types differ in mutability\n }"}, {"sha": "2601ca5e91e5b4253a85258d7998dced020b674f", "filename": "src/test/ui/coercion/coerce-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     f(&x);\n    |       ^^ types differ in mutability\n    |\n-   = note: expected type `&mut i32`\n-              found type `&{integer}`\n+   = note: expected mutable reference `&mut i32`\n+                      found reference `&{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "284c20b6e28841bf99f92061bcda257e1169b0a4", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -49,8 +49,8 @@ error[E0308]: mismatched types\n LL |     let x: [!; 2] = [return, 22];\n    |                     ^^^^^^^^^^^^ expected !, found integer\n    |\n-   = note: expected type `[!; 2]`\n-              found type `[{integer}; 2]`\n+   = note: expected array `[!; 2]`\n+              found array `[{integer}; 2]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:55:22"}, {"sha": "3c44fdb195454370d6b179989b9247b473ccad6d", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -21,7 +21,7 @@ LL | fn foo() -> Result<u8, u64> {\n LL |     Ok(1);\n    |          - help: consider removing this semicolon\n    |\n-   = note: expected type `std::result::Result<u8, u64>`\n+   = note: expected enum `std::result::Result<u8, u64>`\n               found type `()`\n \n error: aborting due to 2 previous errors"}, {"sha": "fbfe1984b9f4ae324b85c838b00dc47495c7f541", "filename": "src/test/ui/coercion/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n-    //~| expected type `&[i32]`\n+    //~| expected reference `&[i32]`\n     //~| expected &[i32], found array of 1 element\n }"}, {"sha": "55523933f5472c438324f5045bbda16a23139e5f", "filename": "src/test/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     let _: &[i32] = [0];\n    |                     expected &[i32], found array of 1 element\n    |                     help: consider borrowing here: `&[0]`\n    |\n-   = note: expected type `&[i32]`\n-              found type `[{integer}; 1]`\n+   = note: expected reference `&[i32]`\n+                  found array `[{integer}; 1]`\n \n error: aborting due to previous error\n "}, {"sha": "f1f8a663f21209f45f803517c1560da72861238c", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,8 +10,8 @@ LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |        |       found type parameter\n    |        expected type parameter\n    |\n-   = note: expected type `fn(&E, F) -> F`\n-              found type `fn(&E, G) -> G`\n+   = note: expected fn pointer `fn(&E, F) -> F`\n+              found fn pointer `fn(&E, G) -> G`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "8461755dbfe57c1ef55241504e3093784f76f61b", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n    |\n-   = note: expected type `[u8; 3]`\n-              found type `[u8; 2]`\n+   = note: expected array `[u8; 3]`\n+              found array `[u8; 2]`\n \n error[E0308]: mismatched types\n   --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n    |\n-   = note: expected type `[u8; 2]`\n-              found type `[u8; 3]`\n+   = note: expected array `[u8; 2]`\n+              found array `[u8; 3]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d62383e1224c66f673fea13cc33cd4272493b518", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,17 +12,17 @@ error[E0308]: mismatched types\n LL |     let _: Checked<{not_one}> = Checked::<{not_two}>;\n    |                                 ^^^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n    |\n-   = note: expected type `Checked<not_one>`\n-              found type `Checked<not_two>`\n+   = note: expected struct `Checked<not_one>`\n+              found struct `Checked<not_two>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:20:24\n    |\n LL |     let _ = Checked::<{generic_arg::<u32>}>;\n    |                        ^^^^^^^^^^^^^^^^^^ expected usize, found u32\n    |\n-   = note: expected type `fn(usize) -> bool`\n-              found type `fn(u32) -> bool {generic_arg::<u32>}`\n+   = note: expected fn pointer `fn(usize) -> bool`\n+                 found fn item `fn(u32) -> bool {generic_arg::<u32>}`\n \n error[E0282]: type annotations needed\n   --> $DIR/fn-const-param-infer.rs:22:24\n@@ -36,8 +36,8 @@ error[E0308]: mismatched types\n LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `generic::<u32>`, found `generic::<u16>`\n    |\n-   = note: expected type `Checked<generic::<u32>>`\n-              found type `Checked<generic::<u16>>`\n+   = note: expected struct `Checked<generic::<u32>>`\n+              found struct `Checked<generic::<u16>>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ff5c59fa375fffb86a040eaef510720dd65693e6", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL |     let _: Const<{15 as *const _}> = Const::<{10 as *const _}>;\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{pointer}`, found `{pointer}`\n    |\n-   = note: expected type `Const<{pointer}>`\n-              found type `Const<{pointer}>`\n+   = note: expected struct `Const<{pointer}>`\n+              found struct `Const<{pointer}>`\n \n error: aborting due to previous error\n "}, {"sha": "9d11da13315857a435509ec80ac774de3c1bdfea", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,26 +12,26 @@ error[E0308]: mismatched types\n LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `\"Hello\"`, found `\"World\"`\n    |\n-   = note: expected type `ConstString<\"Hello\">`\n-              found type `ConstString<\"World\">`\n+   = note: expected struct `ConstString<\"Hello\">`\n+              found struct `ConstString<\"World\">`\n \n error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:11:33\n    |\n LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n    |                                  ^^^^^^^^^^^^^^^^^^^^^ expected `\"\u2107\u31c8\u21a6\"`, found `\"\u2107\u31c8\u21a5\"`\n    |\n-   = note: expected type `ConstString<\"\u2107\u31c8\u21a6\">`\n-              found type `ConstString<\"\u2107\u31c8\u21a5\">`\n+   = note: expected struct `ConstString<\"\u2107\u31c8\u21a6\">`\n+              found struct `ConstString<\"\u2107\u31c8\u21a5\">`\n \n error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:13:33\n    |\n LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n    |                                 ^^^^^^^^^^^^^^^^^^^^ expected `b\"AAA\"`, found `b\"BBB\"`\n    |\n-   = note: expected type `ConstBytes<b\"AAA\">`\n-              found type `ConstBytes<b\"BBB\">`\n+   = note: expected struct `ConstBytes<b\"AAA\">`\n+              found struct `ConstBytes<b\"BBB\">`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c912d9d0abf098e3c63a93e7f5a00936d8730cd4", "filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,17 +12,17 @@ error[E0308]: mismatched types\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n    |\n-   = note: expected type `A<'_, _, 2u32, _>`\n-              found type `A<'_, _, 4u32, _>`\n+   = note: expected struct `A<'_, _, 2u32, _>`\n+              found struct `A<'_, _, 4u32, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:15:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u16, found u32\n    |\n-   = note: expected type `A<'a, u16, _, _>`\n-              found type `A<'b, u32, _, _>`\n+   = note: expected struct `A<'a, u16, _, _>`\n+              found struct `A<'b, u32, _, _>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f4a4c091e78a00aeb99cab28205e33ae5391d5f5", "filename": "src/test/ui/consts/const-array-oob-arith.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL | const BLUB: [i32; (ARR[0] - 40) as usize] = [5];\n    |                                             ^^^ expected an array with a fixed size of 2 elements, found one with 1 element\n    |\n-   = note: expected type `[i32; 2]`\n-              found type `[i32; 1]`\n+   = note: expected array `[i32; 2]`\n+              found array `[i32; 1]`\n \n error[E0308]: mismatched types\n   --> $DIR/const-array-oob-arith.rs:10:44\n    |\n LL | const BOO: [i32; (ARR[0] - 41) as usize] = [5, 99];\n    |                                            ^^^^^^^ expected an array with a fixed size of 1 element, found one with 2 elements\n    |\n-   = note: expected type `[i32; 1]`\n-              found type `[i32; 2]`\n+   = note: expected array `[i32; 1]`\n+              found array `[i32; 2]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "279fe7fb7fed5ea93079b79d72ce64ebbe64fc0e", "filename": "src/test/ui/consts/const-eval/const-eval-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,7 +9,7 @@ enum E {\n     V = CONSTANT,\n     //~^ ERROR mismatched types\n     //~| expected isize, found struct `S`\n-    //~|         found type `S`\n+    //~|         found struct `S`\n }\n \n fn main() {}"}, {"sha": "5b046e266a2df03d9f3a306cb3a0e1f6c0315d8b", "filename": "src/test/ui/consts/const-eval/const-eval-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     V = CONSTANT,\n    |         ^^^^^^^^ expected isize, found struct `S`\n    |\n    = note: expected type `isize`\n-              found type `S`\n+            found struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "1d280026a01908c76259060173919b519eba6053", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | const TUP: (usize,) = 5usize << 64;\n    |                       ^^^^^^^^^^^^ expected tuple, found usize\n    |\n-   = note: expected type `(usize,)`\n-              found type `usize`\n+   = note: expected tuple `(usize,)`\n+               found type `usize`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-tup-index-span.rs:6:18"}, {"sha": "11384d92cb8a6271507a39f1f3f30dfea7416582", "filename": "src/test/ui/conversion-methods.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconversion-methods.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     let _tis_an_instants_play: String = \"'Tis a fond Ambush\u2014\";\n    |                                         expected struct `std::string::String`, found reference\n    |                                         help: try using a conversion method: `\"'Tis a fond Ambush\u2014\".to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `&'static str`\n+   = note: expected struct `std::string::String`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:6:40\n@@ -19,8 +19,8 @@ LL |     let _just_to_make_bliss: PathBuf = Path::new(\"/ern/her/own/surprise\");\n    |                                        expected struct `std::path::PathBuf`, found reference\n    |                                        help: try using a conversion method: `Path::new(\"/ern/her/own/surprise\").to_path_buf()`\n    |\n-   = note: expected type `std::path::PathBuf`\n-              found type `&std::path::Path`\n+   = note: expected struct `std::path::PathBuf`\n+           found reference `&std::path::Path`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:9:40\n@@ -31,8 +31,8 @@ LL |     let _but_should_the_play: String = 2; // Perhaps surprisingly, we sugge\n    |                                        expected struct `std::string::String`, found integer\n    |                                        help: try using a conversion method: `2.to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `{integer}`\n+   = note: expected struct `std::string::String`\n+                found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:12:47\n@@ -43,8 +43,8 @@ LL |     let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3];\n    |                                               expected struct `std::vec::Vec`, found reference\n    |                                               help: try using a conversion method: `(&[1, 2, 3]).to_vec()`\n    |\n-   = note: expected type `std::vec::Vec<usize>`\n-              found type `&[{integer}; 3]`\n+   = note: expected struct `std::vec::Vec<usize>`\n+           found reference `&[{integer}; 3]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ce42b696ddf8ea5e284da68bac4d9c13028def71", "filename": "src/test/ui/cross/cross-borrow-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,6 +8,6 @@ impl Trait for Foo {}\n pub fn main() {\n     let x: Box<dyn Trait> = Box::new(Foo);\n     let _y: &dyn Trait = x; //~ ERROR E0308\n-                            //~| expected type `&dyn Trait`\n-                            //~| found type `std::boxed::Box<dyn Trait>`\n+                            //~| expected reference `&dyn Trait`\n+                            //~| found struct `std::boxed::Box<dyn Trait>`\n }"}, {"sha": "282912e076eb989430ec3bbc36e4db516e05908c", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     let _y: &dyn Trait = x;\n    |                          expected &dyn Trait, found struct `std::boxed::Box`\n    |                          help: consider borrowing here: `&x`\n    |\n-   = note: expected type `&dyn Trait`\n-              found type `std::boxed::Box<dyn Trait>`\n+   = note: expected reference `&dyn Trait`\n+                 found struct `std::boxed::Box<dyn Trait>`\n \n error: aborting due to previous error\n "}, {"sha": "53bc3212a7fb01f7b44f52be5f0747585c9d68d1", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     foo(s);\n    |         expected struct `std::string::String`, found reference\n    |         help: try using a conversion method: `s.to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `&std::string::String`\n+   = note: expected struct `std::string::String`\n+           found reference `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:14:10\n@@ -19,8 +19,8 @@ LL |     foo3(u);\n    |          expected u32, found &u32\n    |          help: consider dereferencing the borrow: `*u`\n    |\n-   = note: expected type `u32`\n-              found type `&u32`\n+   = note:   expected type `u32`\n+           found reference `&u32`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n@@ -31,8 +31,8 @@ LL |     foo(&\"aaa\".to_owned());\n    |         expected struct `std::string::String`, found reference\n    |         help: consider removing the borrow: `\"aaa\".to_owned()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `&std::string::String`\n+   = note: expected struct `std::string::String`\n+           found reference `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n@@ -43,8 +43,8 @@ LL |     foo(&mut \"aaa\".to_owned());\n    |         expected struct `std::string::String`, found mutable reference\n    |         help: consider removing the borrow: `\"aaa\".to_owned()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `&mut std::string::String`\n+   = note:         expected struct `std::string::String`\n+           found mutable reference `&mut std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:2:20\n@@ -55,17 +55,17 @@ LL |     ($x:expr) => { &$x }\n LL |     foo3(borrow!(0));\n    |          ---------- in this macro invocation\n    |\n-   = note: expected type `u32`\n-              found type `&{integer}`\n+   = note:   expected type `u32`\n+           found reference `&{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found &i32\n    |\n-   = note: expected type `i32`\n-              found type `&i32`\n+   = note:   expected type `i32`\n+           found reference `&i32`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0308]: mismatched types\n@@ -77,8 +77,8 @@ LL |     let s = S { u };\n    |                 expected &u32, found integer\n    |                 help: consider borrowing here: `u: &u`\n    |\n-   = note: expected type `&u32`\n-              found type `{integer}`\n+   = note: expected reference `&u32`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:41:20\n@@ -89,8 +89,8 @@ LL |     let s = S { u: u };\n    |                    expected &u32, found integer\n    |                    help: consider borrowing here: `&u`\n    |\n-   = note: expected type `&u32`\n-              found type `{integer}`\n+   = note: expected reference `&u32`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:44:17\n@@ -101,8 +101,8 @@ LL |     let r = R { i };\n    |                 expected u32, found &{integer}\n    |                 help: consider dereferencing the borrow: `i: *i`\n    |\n-   = note: expected type `u32`\n-              found type `&{integer}`\n+   = note:   expected type `u32`\n+           found reference `&{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:46:20\n@@ -113,8 +113,8 @@ LL |     let r = R { i: i };\n    |                    expected u32, found &{integer}\n    |                    help: consider dereferencing the borrow: `*i`\n    |\n-   = note: expected type `u32`\n-              found type `&{integer}`\n+   = note:   expected type `u32`\n+           found reference `&{integer}`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "1c79282639969fe243412f7206cad8078866864b", "filename": "src/test/ui/destructure-trait-ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -31,16 +31,16 @@ fn main() {\n     // n > m\n     let &&x = &1isize as &dyn T;\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn T`\n-    //~| found type `&_`\n+    //~| expected trait `dyn T`\n+    //~| found reference `&_`\n     //~| expected trait T, found reference\n     let &&&x = &(&1isize as &dyn T);\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn T`\n-    //~| found type `&_`\n+    //~| expected trait `dyn T`\n+    //~| found reference `&_`\n     //~| expected trait T, found reference\n     let box box x = box 1isize as Box<dyn T>;\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn T`\n-    //~| found type `std::boxed::Box<_>`\n+    //~| expected trait `dyn T`\n+    //~| found struct `std::boxed::Box<_>`\n }"}, {"sha": "05545a7098c97ea39a75e20bb084aaf7abee25eb", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -25,8 +25,8 @@ LL |     let &&x = &1isize as &dyn T;\n    |          expected trait T, found reference\n    |          help: you can probably remove the explicit borrow: `x`\n    |\n-   = note: expected type `dyn T`\n-              found type `&_`\n+   = note:  expected trait `dyn T`\n+           found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:37:11\n@@ -37,17 +37,17 @@ LL |     let &&&x = &(&1isize as &dyn T);\n    |           expected trait T, found reference\n    |           help: you can probably remove the explicit borrow: `x`\n    |\n-   = note: expected type `dyn T`\n-              found type `&_`\n+   = note:  expected trait `dyn T`\n+           found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:42:13\n    |\n LL |     let box box x = box 1isize as Box<dyn T>;\n    |             ^^^^^ expected trait T, found struct `std::boxed::Box`\n    |\n-   = note: expected type `dyn T`\n-              found type `std::boxed::Box<_>`\n+   = note: expected trait `dyn T`\n+             found struct `std::boxed::Box<_>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "bd913649dd07012022cafef4b2102830be91b5ac", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     this_function_expects_a_double_option(n);\n    |                                           ^ expected enum `DoubleOption`, found usize\n    |\n-   = note: expected type `DoubleOption<_>`\n+   = note: expected enum `DoubleOption<_>`\n               found type `usize`\n help: try using a variant of the expected enum\n    |\n@@ -19,8 +19,8 @@ error[E0308]: mismatched types\n LL |     let _c = Context { wrapper: Payload{} };\n    |                                 ^^^^^^^^^ expected struct `Wrapper`, found struct `Payload`\n    |\n-   = note: expected type `Wrapper`\n-              found type `Payload`\n+   = note: expected struct `Wrapper`\n+              found struct `Payload`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "233474e5fe689f6553ec1f99bd9a24dd532aaf09", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL |     let x: &Bottom = &t;\n    |                      ^^ expected struct `Bottom`, found struct `Top`\n    |\n-   = note: expected type `&Bottom`\n-              found type `&Top`\n+   = note: expected reference `&Bottom`\n+              found reference `&Top`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ebca760e235498881bcdf777eb1e483f34fd8d9e", "filename": "src/test/ui/diverging-fn-tail-35849.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,7 +8,7 @@ LL |         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected !, found array of 8 elements\n    |\n    = note: expected type `!`\n-              found type `[u8; 8]`\n+             found array `[u8; 8]`\n \n error: aborting due to previous error\n "}, {"sha": "72cdfad6f7771000a75c5abe191ac958c1e0f425", "filename": "src/test/ui/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     &panic!()\n    |     ^^^^^^^^^ expected (), found reference\n    |\n-   = note: expected type `()`\n-              found type `&_`\n+   = note:   expected type `()`\n+           found reference `&_`\n help: try adding a return type\n    |\n LL | fn g() -> &_ {\n@@ -24,7 +24,7 @@ LL |     (return 1, return 2)\n    |     ^^^^^^^^^^^^^^^^^^^^ expected isize, found tuple\n    |\n    = note: expected type `isize`\n-              found type `(!, !)`\n+             found tuple `(!, !)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8f0748f0a69bce6ab8ddd17a1ce81238f284091f", "filename": "src/test/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -32,8 +32,8 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn ToBar`\n-    //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n+    //~| expected trait `dyn ToBar`\n+    //~| found struct `Bar1`\n     //~| ERROR the size for values of type\n }"}, {"sha": "773837e7994cbc002bc9734a7d34ce41231f6c10", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     f5.2 = Bar1 {f: 36};\n    |            ^^^^^^^^^^^^ expected trait ToBar, found struct `Bar1`\n    |\n-   = note: expected type `dyn ToBar`\n-              found type `Bar1`\n+   = note: expected trait `dyn ToBar`\n+             found struct `Bar1`\n \n error[E0277]: the size for values of type `dyn ToBar` cannot be known at compilation time\n   --> $DIR/dst-bad-assign-3.rs:33:5"}, {"sha": "c84c61ecb0ecd9a1b7567ba2a6c3786548853e8d", "filename": "src/test/ui/dst/dst-bad-assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -34,8 +34,8 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn ToBar`\n-    //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n+    //~| expected trait `dyn ToBar`\n+    //~| found struct `Bar1`\n     //~| ERROR the size for values of type\n }"}, {"sha": "d01cbf7a3e982bfbfca60a09f64182c77071cd29", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     f5.ptr = Bar1 {f: 36};\n    |              ^^^^^^^^^^^^ expected trait ToBar, found struct `Bar1`\n    |\n-   = note: expected type `dyn ToBar`\n-              found type `Bar1`\n+   = note: expected trait `dyn ToBar`\n+             found struct `Bar1`\n \n error[E0277]: the size for values of type `dyn ToBar` cannot be known at compilation time\n   --> $DIR/dst-bad-assign.rs:35:5"}, {"sha": "7e9d127a9af6e485a85da14113a7b37611186998", "filename": "src/test/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let f3: &Fat<[usize]> = f2;\n    |                             ^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `&Fat<[usize]>`\n-              found type `&Fat<[isize; 3]>`\n+   = note: expected reference `&Fat<[usize]>`\n+              found reference `&Fat<[isize; 3]>`\n \n error[E0277]: the trait bound `Foo: Bar` is not satisfied\n   --> $DIR/dst-bad-coerce1.rs:22:29\n@@ -21,8 +21,8 @@ error[E0308]: mismatched types\n LL |     let f3: &([usize],) = f2;\n    |                           ^^ expected slice, found array of 3 elements\n    |\n-   = note: expected type `&([usize],)`\n-              found type `&([isize; 3],)`\n+   = note: expected reference `&([usize],)`\n+              found reference `&([isize; 3],)`\n \n error[E0277]: the trait bound `Foo: Bar` is not satisfied\n   --> $DIR/dst-bad-coerce1.rs:34:27"}, {"sha": "e76fcb5f72d596961c8b539ac4d6c9c9ce701a52", "filename": "src/test/ui/dst/dst-bad-coerce2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,35 +4,35 @@ error[E0308]: mismatched types\n LL |     let f3: &mut Fat<[isize]> = f2;\n    |                                 ^^ types differ in mutability\n    |\n-   = note: expected type `&mut Fat<[isize]>`\n-              found type `&Fat<[isize; 3]>`\n+   = note: expected mutable reference `&mut Fat<[isize]>`\n+                      found reference `&Fat<[isize; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:20:33\n    |\n LL |     let f3: &mut Fat<dyn Bar> = f2;\n    |                                 ^^ types differ in mutability\n    |\n-   = note: expected type `&mut Fat<dyn Bar>`\n-              found type `&Fat<Foo>`\n+   = note: expected mutable reference `&mut Fat<dyn Bar>`\n+                      found reference `&Fat<Foo>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:25:31\n    |\n LL |     let f3: &mut ([isize],) = f2;\n    |                               ^^ types differ in mutability\n    |\n-   = note: expected type `&mut ([isize],)`\n-              found type `&([isize; 3],)`\n+   = note: expected mutable reference `&mut ([isize],)`\n+                      found reference `&([isize; 3],)`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:30:31\n    |\n LL |     let f3: &mut (dyn Bar,) = f2;\n    |                               ^^ types differ in mutability\n    |\n-   = note: expected type `&mut (dyn Bar,)`\n-              found type `&(Foo,)`\n+   = note: expected mutable reference `&mut (dyn Bar,)`\n+                      found reference `&(Foo,)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d1c590347eda03c2d3c605a1b9265c4a4a1cc04a", "filename": "src/test/ui/dst/dst-bad-coerce4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -11,15 +11,15 @@ pub fn main() {\n     let f1: &Fat<[isize]> = &Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[isize; 3]> = f1;\n     //~^ ERROR mismatched types\n-    //~| expected type `&Fat<[isize; 3]>`\n-    //~| found type `&Fat<[isize]>`\n+    //~| expected reference `&Fat<[isize; 3]>`\n+    //~| found reference `&Fat<[isize]>`\n     //~| expected array of 3 elements, found slice\n \n     // Tuple with a vec of isizes.\n     let f1: &([isize],) = &([1, 2, 3],);\n     let f2: &([isize; 3],) = f1;\n     //~^ ERROR mismatched types\n-    //~| expected type `&([isize; 3],)`\n-    //~| found type `&([isize],)`\n+    //~| expected reference `&([isize; 3],)`\n+    //~| found reference `&([isize],)`\n     //~| expected array of 3 elements, found slice\n }"}, {"sha": "fad34633da5cbde393ccb1ea853e05fe5b34cf89", "filename": "src/test/ui/dst/dst-bad-coerce4.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     let f2: &Fat<[isize; 3]> = f1;\n    |                                ^^ expected array of 3 elements, found slice\n    |\n-   = note: expected type `&Fat<[isize; 3]>`\n-              found type `&Fat<[isize]>`\n+   = note: expected reference `&Fat<[isize; 3]>`\n+              found reference `&Fat<[isize]>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:20:30\n    |\n LL |     let f2: &([isize; 3],) = f1;\n    |                              ^^ expected array of 3 elements, found slice\n    |\n-   = note: expected type `&([isize; 3],)`\n-              found type `&([isize],)`\n+   = note: expected reference `&([isize; 3],)`\n+              found reference `&([isize],)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3c6111a345bb8b111e16026dd92bb23ffa5a90ae", "filename": "src/test/ui/dst/dst-bad-coercions.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let y: &S = x;\n    |                 ^ expected &S, found *-ptr\n    |\n-   = note: expected type `&S`\n-              found type `*const S`\n+   = note: expected reference `&S`\n+            found raw pointer `*const S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:15:21\n@@ -16,17 +16,17 @@ LL |     let y: &dyn T = x;\n    |                     expected &dyn T, found *-ptr\n    |                     help: consider borrowing here: `&x`\n    |\n-   = note: expected type `&dyn T`\n-              found type `*const S`\n+   = note: expected reference `&dyn T`\n+            found raw pointer `*const S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:19:17\n    |\n LL |     let y: &S = x;\n    |                 ^ expected &S, found *-ptr\n    |\n-   = note: expected type `&S`\n-              found type `*mut S`\n+   = note: expected reference `&S`\n+            found raw pointer `*mut S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:20:21\n@@ -37,35 +37,35 @@ LL |     let y: &dyn T = x;\n    |                     expected &dyn T, found *-ptr\n    |                     help: consider borrowing here: `&x`\n    |\n-   = note: expected type `&dyn T`\n-              found type `*mut S`\n+   = note: expected reference `&dyn T`\n+            found raw pointer `*mut S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:23:25\n    |\n LL |     let x: &mut dyn T = &S;\n    |                         ^^ types differ in mutability\n    |\n-   = note: expected type `&mut dyn T`\n-              found type `&S`\n+   = note: expected mutable reference `&mut dyn T`\n+                      found reference `&S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:24:25\n    |\n LL |     let x: *mut dyn T = &S;\n    |                         ^^ types differ in mutability\n    |\n-   = note: expected type `*mut dyn T`\n-              found type `&S`\n+   = note: expected raw pointer `*mut dyn T`\n+                found reference `&S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:25:21\n    |\n LL |     let x: *mut S = &S;\n    |                     ^^ types differ in mutability\n    |\n-   = note: expected type `*mut S`\n-              found type `&S`\n+   = note: expected raw pointer `*mut S`\n+                found reference `&S`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "122c71bebc488acf0b6b7a9ba1af20e728385a0b", "filename": "src/test/ui/elide-errors-on-mismatched-tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let (a, b, c) = (A::new(), A::new()); // This tuple is 2 elements, should be three\n    |         ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n    |\n-   = note: expected type `(A, A)`\n-              found type `(_, _, _)`\n+   = note: expected tuple `(A, A)`\n+              found tuple `(_, _, _)`\n \n error: aborting due to previous error\n "}, {"sha": "2f9191b43269b0038630c271915d88b98ed01830", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n LL |     foo(3_i8);\n    |     ^^^ expected u32, found reference\n    |\n-   = note: expected type `u32`\n-              found type `&'static str`\n+   = note:   expected type `u32`\n+           found reference `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "0251c3bee6a8ad8e62dfbce9fff862e84674e089", "filename": "src/test/ui/error-codes/E0308.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: intrinsic has wrong type\n LL |     fn size_of<T>();\n    |     ^^^^^^^^^^^^^^^^ expected (), found usize\n    |\n-   = note: expected type `extern \"rust-intrinsic\" fn()`\n-              found type `extern \"rust-intrinsic\" fn() -> usize`\n+   = note: expected fn pointer `extern \"rust-intrinsic\" fn()`\n+              found fn pointer `extern \"rust-intrinsic\" fn() -> usize`\n \n error: aborting due to previous error\n "}, {"sha": "810c52a57066bf2a0191fdbc696f2ac974c501d8", "filename": "src/test/ui/estr-subtyping.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Festr-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Festr-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |    wants_uniq(x);\n    |               expected struct `std::string::String`, found &str\n    |               help: try using a conversion method: `x.to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `&str`\n+   = note: expected struct `std::string::String`\n+           found reference `&str`\n \n error: aborting due to previous error\n "}, {"sha": "2029cfaf75dfed5bb6cb0c7ba012c433d7023064", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,8 +12,8 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [_, 99.., _] => {},\n    |             ^^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: expected type `std::ops::Range<{integer}>`\n-              found type `{integer}`\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6a88d05837a879c4c8b509825624e71767c9e1aa", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -18,8 +18,8 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [_, 99..] => {},\n    |             ^^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: expected type `std::ops::Range<{integer}>`\n-              found type `{integer}`\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5c49fbe4c5c94e6e789e20d9b813cfa9d552fbb4", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,8 +12,8 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [..9, 99..100, _] => {},\n    |          ^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: expected type `std::ops::Range<{integer}>`\n-              found type `{integer}`\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:15\n@@ -23,8 +23,8 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [..9, 99..100, _] => {},\n    |               ^^^^^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: expected type `std::ops::Range<{integer}>`\n-              found type `{integer}`\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a9a6f50fb8ea5f5ec79eb01f12f70f3501dc8f77", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,12 +7,12 @@ impl<'a,'b> Foo<'a,'b> {\n     fn bar(self:\n            Foo<'b,'a>\n     //~^ ERROR mismatched `self` parameter type\n-    //~| expected type `Foo<'a, 'b>`\n-    //~| found type `Foo<'b, 'a>`\n+    //~| expected struct `Foo<'a, 'b>`\n+    //~| found struct `Foo<'b, 'a>`\n     //~| lifetime mismatch\n     //~| ERROR mismatched `self` parameter type\n-    //~| expected type `Foo<'a, 'b>`\n-    //~| found type `Foo<'b, 'a>`\n+    //~| expected struct `Foo<'a, 'b>`\n+    //~| found struct `Foo<'b, 'a>`\n     //~| lifetime mismatch\n            ) {}\n }"}, {"sha": "5c976098ae3bcef311ed2fc98a952f6a8a2f4737", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched `self` parameter type\n LL |            Foo<'b,'a>\n    |            ^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Foo<'a, 'b>`\n-              found type `Foo<'b, 'a>`\n+   = note: expected struct `Foo<'a, 'b>`\n+              found struct `Foo<'b, 'a>`\n note: the lifetime `'b` as defined on the impl at 6:9...\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:9\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched `self` parameter type\n LL |            Foo<'b,'a>\n    |            ^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Foo<'a, 'b>`\n-              found type `Foo<'b, 'a>`\n+   = note: expected struct `Foo<'a, 'b>`\n+              found struct `Foo<'b, 'a>`\n note: the lifetime `'a` as defined on the impl at 6:6...\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:6\n    |"}, {"sha": "6f6983d42832ccf882f6266699e902118fbff29e", "filename": "src/test/ui/extern/extern-main-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0580]: main function has wrong type\n LL | extern fn main() {}\n    | ^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"C\" fn\n    |\n-   = note: expected type `fn()`\n-              found type `extern \"C\" fn()`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `extern \"C\" fn()`\n \n error: aborting due to previous error\n "}, {"sha": "2e258d687d38533862e1c2abb5a9074314b4bed1", "filename": "src/test/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     r\n    |     ^ expected extern type `B`, found extern type `A`\n    |\n-   = note: expected type `&B`\n-              found type `&A`\n+   = note: expected reference `&B`\n+              found reference `&A`\n \n error: aborting due to previous error\n "}, {"sha": "fa74d027f1eaa6a492168b7bd43fdd3879b3b31b", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -21,8 +21,8 @@ error[E0308]: mismatched types\n LL |     let x = f == g;\n    |                  ^ expected fn item, found a different fn item\n    |\n-   = note: expected type `fn() {main::f}`\n-              found type `fn() {main::g}`\n+   = note: expected fn item `fn() {main::f}`\n+              found fn item `fn() {main::g}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ab4e8f92153b0422120295e409e86c887bee952", "filename": "src/test/ui/fn/fn-item-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,8 +12,8 @@ impl<T> Foo for T { /* `foo` is still default here */ }\n fn main() {\n     eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n-    //~|  expected type `fn(isize) -> isize {foo::<u8>}`\n-    //~|  found type `fn(isize) -> isize {bar::<u8>}`\n+    //~|  expected fn item `fn(isize) -> isize {foo::<u8>}`\n+    //~|  found fn item `fn(isize) -> isize {bar::<u8>}`\n     //~|  expected fn item, found a different fn item\n \n     eq(foo::<u8>, foo::<i8>);\n@@ -22,8 +22,8 @@ fn main() {\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n-    //~|  expected type `fn(isize) -> isize {bar::<std::string::String>}`\n-    //~|  found type `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n+    //~|  expected fn item `fn(isize) -> isize {bar::<std::string::String>}`\n+    //~|  found fn item `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n     //~|  expected struct `std::string::String`, found struct `std::vec::Vec`\n \n     // Make sure we distinguish between trait methods correctly."}, {"sha": "f6c4f735939c4c0d3851864265fe049edb69b93b", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,35 +4,35 @@ error[E0308]: mismatched types\n LL |     eq(foo::<u8>, bar::<u8>);\n    |                   ^^^^^^^^^ expected fn item, found a different fn item\n    |\n-   = note: expected type `fn(isize) -> isize {foo::<u8>}`\n-              found type `fn(isize) -> isize {bar::<u8>}`\n+   = note: expected fn item `fn(isize) -> isize {foo::<u8>}`\n+              found fn item `fn(isize) -> isize {bar::<u8>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:19:19\n    |\n LL |     eq(foo::<u8>, foo::<i8>);\n    |                   ^^^^^^^^^ expected u8, found i8\n    |\n-   = note: expected type `fn(isize) -> isize {foo::<u8>}`\n-              found type `fn(isize) -> isize {foo::<i8>}`\n+   = note: expected fn item `fn(isize) -> isize {foo::<u8>}`\n+              found fn item `fn(isize) -> isize {foo::<i8>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:23:23\n    |\n LL |     eq(bar::<String>, bar::<Vec<u8>>);\n    |                       ^^^^^^^^^^^^^^ expected struct `std::string::String`, found struct `std::vec::Vec`\n    |\n-   = note: expected type `fn(isize) -> isize {bar::<std::string::String>}`\n-              found type `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n+   = note: expected fn item `fn(isize) -> isize {bar::<std::string::String>}`\n+              found fn item `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:30:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n    |                          ^^^^^^^^^^^^^^^^^ expected u8, found u16\n    |\n-   = note: expected type `fn() {<u8 as Foo>::foo}`\n-              found type `fn() {<u16 as Foo>::foo}`\n+   = note: expected fn item `fn() {<u8 as Foo>::foo}`\n+              found fn item `fn() {<u16 as Foo>::foo}`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c74b79e3a6225117622a7e78116c9a39428e89ff", "filename": "src/test/ui/fn/fn-trait-formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,15 +6,15 @@ fn main() {\n     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n+    //~| found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n+    //~| found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n+    //~| found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n     needs_fn(1);\n     //~^ ERROR expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`"}, {"sha": "962a310b875d7b52838be3de1564e20811a2d122", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n    = note: expected type `()`\n-              found type `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n+            found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n@@ -14,7 +14,7 @@ LL |     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n    = note: expected type `()`\n-              found type `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n+            found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n@@ -23,7 +23,7 @@ LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n    = note: expected type `()`\n-              found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n+            found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:14"}, {"sha": "b4f9a38ff3507ca561a22612cf2f912f06d82e4e", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let x: Option<usize>;\n     x = 5;\n     //~^ ERROR mismatched types\n-    //~| expected type `std::option::Option<usize>`\n+    //~| expected enum `std::option::Option<usize>`\n     //~| found type `{integer}`\n     //~| expected enum `std::option::Option`, found integer\n }"}, {"sha": "6a550b93be2901fe5bcbaaeaea2687bf034e29a8", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,7 +7,7 @@ LL |     x = 5;\n    |         expected enum `std::option::Option`, found integer\n    |         help: try using a variant of the expected enum: `Some(5)`\n    |\n-   = note: expected type `std::option::Option<usize>`\n+   = note: expected enum `std::option::Option<usize>`\n               found type `{integer}`\n \n error: aborting due to previous error"}, {"sha": "af4a633090b0e1585f7fc49592ef086568d9adb3", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -11,9 +11,9 @@ mod y {\n fn bar(x: x::Foo) -> y::Foo {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected type `y::Foo`\n-    //~| found type `x::Foo`\n     //~| expected enum `y::Foo`, found enum `x::Foo`\n+    //~| expected enum `y::Foo`\n+    //~| found enum `x::Foo`\n }\n \n fn main() {"}, {"sha": "fe4579f49b910b3ff69bf84ccca5740122d1e933", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL | fn bar(x: x::Foo) -> y::Foo {\n LL |     return x;\n    |            ^ expected enum `y::Foo`, found enum `x::Foo`\n    |\n-   = note: expected type `y::Foo`\n-              found type `x::Foo`\n+   = note: expected enum `y::Foo`\n+              found enum `x::Foo`\n \n error: aborting due to previous error\n "}, {"sha": "c41e6c4c9f03ac063b6519c6af82059d82f7661e", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ use std::option::Option;\n fn bar(x: usize) -> Option<usize> {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected type `std::option::Option<usize>`\n+    //~| expected enum `std::option::Option<usize>`\n     //~| found type `usize`\n     //~| expected enum `std::option::Option`, found usize\n }"}, {"sha": "26389f4671863c39040e530b945d9c6bd629dad8", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,7 +6,7 @@ LL | fn bar(x: usize) -> Option<usize> {\n LL |     return x;\n    |            ^ expected enum `std::option::Option`, found usize\n    |\n-   = note: expected type `std::option::Option<usize>`\n+   = note: expected enum `std::option::Option<usize>`\n               found type `usize`\n \n error: aborting due to previous error"}, {"sha": "7cae50f42f9e4a6fbcd443848226a218c9bdc0a9", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |             return Ok(6);\n    |                    ^^^^^ expected i32, found enum `std::result::Result`\n    |\n    = note: expected type `i32`\n-              found type `std::result::Result<{integer}, _>`\n+              found enum `std::result::Result<{integer}, _>`\n \n error: aborting due to previous error\n "}, {"sha": "e544cd1bb3a47ed581b0761f7772f3d46fda1bbc", "filename": "src/test/ui/generic/generic-arg-mismatch-recover.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,8 +10,8 @@ error[E0308]: mismatched types\n LL |     Foo::<'static, 'static, ()>(&0);\n    |                                 ^^ expected (), found integer\n    |\n-   = note: expected type `&'static ()`\n-              found type `&{integer}`\n+   = note: expected reference `&'static ()`\n+              found reference `&{integer}`\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n   --> $DIR/generic-arg-mismatch-recover.rs:9:20"}, {"sha": "65d409a983770808a47272a476ebb7198286decb", "filename": "src/test/ui/generic/generic-type-params-name-repr.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,40 +12,40 @@ fn main() {\n     // Ensure that the printed type doesn't include the default type params...\n     let _: Foo<isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<isize>`\n-    //~| found type `()`\n     //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo<isize>`\n+    //~| found type `()`\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<isize, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<isize>`\n-    //~| found type `()`\n     //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo<isize>`\n+    //~| found type `()`\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `HashMap<std::string::String, isize>`\n-    //~| found type `()`\n     //~| expected struct `HashMap`, found ()\n+    //~| expected struct `HashMap<std::string::String, isize>`\n+    //~| found type `()`\n     let _: HashMap<String, isize, Hash<String>> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `HashMap<std::string::String, isize>`\n-    //~| found type `()`\n     //~| expected struct `HashMap`, found ()\n+    //~| expected struct `HashMap<std::string::String, isize>`\n+    //~| found type `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, isize, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<A, isize>`\n-    //~| found type `()`\n     //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo<A, isize>`\n+    //~| found type `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo`\n-    //~| found type `()`\n     //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`\n+    //~| found type `()`\n }"}, {"sha": "86146f7e9bf7d087cc76d04f1dfd0e9b7690e883", "filename": "src/test/ui/generic/generic-type-params-name-repr.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,53 +4,53 @@ error[E0308]: mismatched types\n LL |     let _: Foo<isize> = ();\n    |                         ^^ expected struct `Foo`, found ()\n    |\n-   = note: expected type `Foo<isize>`\n-              found type `()`\n+   = note: expected struct `Foo<isize>`\n+                found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:20:31\n    |\n LL |     let _: Foo<isize, B, C> = ();\n    |                               ^^ expected struct `Foo`, found ()\n    |\n-   = note: expected type `Foo<isize>`\n-              found type `()`\n+   = note: expected struct `Foo<isize>`\n+                found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:27:37\n    |\n LL |     let _: HashMap<String, isize> = ();\n    |                                     ^^ expected struct `HashMap`, found ()\n    |\n-   = note: expected type `HashMap<std::string::String, isize>`\n-              found type `()`\n+   = note: expected struct `HashMap<std::string::String, isize>`\n+                found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:32:51\n    |\n LL |     let _: HashMap<String, isize, Hash<String>> = ();\n    |                                                   ^^ expected struct `HashMap`, found ()\n    |\n-   = note: expected type `HashMap<std::string::String, isize>`\n-              found type `()`\n+   = note: expected struct `HashMap<std::string::String, isize>`\n+                found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:39:31\n    |\n LL |     let _: Foo<A, isize, C> = ();\n    |                               ^^ expected struct `Foo`, found ()\n    |\n-   = note: expected type `Foo<A, isize>`\n-              found type `()`\n+   = note: expected struct `Foo<A, isize>`\n+                found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:46:27\n    |\n LL |     let _: Foo<A, B, C> = ();\n    |                           ^^ expected struct `Foo`, found ()\n    |\n-   = note: expected type `Foo`\n-              found type `()`\n+   = note: expected struct `Foo`\n+                found type `()`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c8521a54e6c75ec30c6854033f8c3606fddcfec5", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u3\n LL | |                                             for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n    | |_________________________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n-              found type `std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n+              found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n \n error: aborting due to previous error\n "}, {"sha": "3ad802c5450b36bfdc018244c49866ad07c687aa", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n LL | |                                 for<'a>    fn(&'a u32, &'a u32)) }\n    | |__________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n-              found type `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n+              found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n \n error: aborting due to previous error\n "}, {"sha": "3d09633367cdafbf1665dff712ade85c68617f12", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | |                              fn(&'x u32)) }\n    | |___________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a> fn(&'a u32)>`\n-              found type `std::option::Option<fn(&'x u32)>`\n+   = note: expected enum `std::option::Option<for<'a> fn(&'a u32)>`\n+              found enum `std::option::Option<fn(&'x u32)>`\n \n error: aborting due to previous error\n "}, {"sha": "8b623a4c0bea948abf0ca197a6e4bff9b3ea9328", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n LL | |                                       for<'a>    fn(Co<'a>, Co<'a>)) }\n    | |______________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n-              found type `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n+              found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n \n error: aborting due to previous error\n "}, {"sha": "f12bff696913eb3e63058a836ddae25cf3e21902", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) ->\n LL | |                                         for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n    | |______________________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n-              found type `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n+              found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n \n error: aborting due to previous error\n "}, {"sha": "37ba44cf2e9bacdc4c398456800d1f46c2831327", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Con\n LL | |                                             for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n    | |______________________________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n-              found type `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n+              found enum `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n \n error: aborting due to previous error\n "}, {"sha": "a00bbea6d1818582b27d22e6feadec9f1cd63ced", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | |                                         for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    | |__________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n-              found type `std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n+              found enum `std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n \n error: aborting due to previous error\n "}, {"sha": "561f35191767e85fab12875981377e9da6c0815a", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<fn(Inv<'y>)>`\n-              found type `std::option::Option<fn(Inv<'x>)>`\n+   = note: expected enum `std::option::Option<fn(Inv<'y>)>`\n+              found enum `std::option::Option<fn(Inv<'x>)>`\n note: the lifetime `'x` as defined on the function body at 32:20...\n   --> $DIR/hr-subtype.rs:32:20\n    |\n@@ -39,8 +39,8 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<fn(Inv<'x>)>`\n-              found type `std::option::Option<fn(Inv<'y>)>`\n+   = note: expected enum `std::option::Option<fn(Inv<'x>)>`\n+              found enum `std::option::Option<fn(Inv<'y>)>`\n note: the lifetime `'x` as defined on the function body at 38:22...\n   --> $DIR/hr-subtype.rs:38:22\n    |"}, {"sha": "082627050b357c32bf47fd91d8e10dd5e0532c6f", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<fn(&'x u32)>`\n-              found type `std::option::Option<fn(&'y u32)>`\n+   = note: expected enum `std::option::Option<fn(&'x u32)>`\n+              found enum `std::option::Option<fn(&'y u32)>`\n note: the lifetime `'x` as defined on the function body at 38:22...\n   --> $DIR/hr-subtype.rs:38:22\n    |"}, {"sha": "8534ee99c1fa7d6e2b36cfc92e767a01221c67dd", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: for<'b> fn(&'b u32) = foo();\n    |                                  ^^^^^ expected concrete lifetime, found bound lifetime parameter 'b\n    |\n-   = note: expected type `for<'b> fn(&'b u32)`\n-              found type `fn(&u32)`\n+   = note: expected fn pointer `for<'b> fn(&'b u32)`\n+              found fn pointer `fn(&u32)`\n \n error: aborting due to previous error\n "}, {"sha": "16847727aef30eef35f61f635a0e56a51623e110", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb\n LL |     let v = Unit2.m(\n    |                   ^ expected struct `Unit4`, found associated type\n    |\n-   = note: expected type `Unit4`\n-              found type `<_ as Ty<'_>>::V`\n+   = note:       expected struct `Unit4`\n+           found associated type `<_ as Ty<'_>>::V`\n    = note: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n@@ -15,8 +15,8 @@ error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42\n LL |     let v = Unit2.m(\n    |                   ^ expected struct `Unit4`, found struct `Unit3`\n    |\n-   = note: expected type `Unit4`\n-              found type `Unit3`\n+   = note: expected struct `Unit4`\n+              found struct `Unit3`\n    = note: required because of the requirements on the impl of `for<'r> T0<'r, (<Unit2 as Ty<'r>>::V,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n \n error: aborting due to 2 previous errors"}, {"sha": "215e236f6b01ee0fe9d532e3001f6a40b4424310", "filename": "src/test/ui/if/if-no-match-bindings.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     if b_ref() {}\n    |        expected bool, found &bool\n    |        help: consider dereferencing the borrow: `*b_ref()`\n    |\n-   = note: expected type `bool`\n-              found type `&bool`\n+   = note:   expected type `bool`\n+           found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:19:8\n@@ -19,8 +19,8 @@ LL |     if b_mut_ref() {}\n    |        expected bool, found &mut bool\n    |        help: consider dereferencing the borrow: `*b_mut_ref()`\n    |\n-   = note: expected type `bool`\n-              found type `&mut bool`\n+   = note:           expected type `bool`\n+           found mutable reference `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:20:8\n@@ -31,8 +31,8 @@ LL |     if &true {}\n    |        expected bool, found &bool\n    |        help: consider removing the borrow: `true`\n    |\n-   = note: expected type `bool`\n-              found type `&bool`\n+   = note:   expected type `bool`\n+           found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:21:8\n@@ -43,8 +43,8 @@ LL |     if &mut true {}\n    |        expected bool, found &mut bool\n    |        help: consider removing the borrow: `true`\n    |\n-   = note: expected type `bool`\n-              found type `&mut bool`\n+   = note:           expected type `bool`\n+           found mutable reference `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:24:11\n@@ -55,8 +55,8 @@ LL |     while b_ref() {}\n    |           expected bool, found &bool\n    |           help: consider dereferencing the borrow: `*b_ref()`\n    |\n-   = note: expected type `bool`\n-              found type `&bool`\n+   = note:   expected type `bool`\n+           found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:25:11\n@@ -67,8 +67,8 @@ LL |     while b_mut_ref() {}\n    |           expected bool, found &mut bool\n    |           help: consider dereferencing the borrow: `*b_mut_ref()`\n    |\n-   = note: expected type `bool`\n-              found type `&mut bool`\n+   = note:           expected type `bool`\n+           found mutable reference `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:26:11\n@@ -79,8 +79,8 @@ LL |     while &true {}\n    |           expected bool, found &bool\n    |           help: consider removing the borrow: `true`\n    |\n-   = note: expected type `bool`\n-              found type `&bool`\n+   = note:   expected type `bool`\n+           found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:27:11\n@@ -91,8 +91,8 @@ LL |     while &mut true {}\n    |           expected bool, found &mut bool\n    |           help: consider removing the borrow: `true`\n    |\n-   = note: expected type `bool`\n-              found type `&mut bool`\n+   = note:           expected type `bool`\n+           found mutable reference `&mut bool`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "2bddcc707c6e49b801e0b6fce8b62be95db39261", "filename": "src/test/ui/if/if-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     if f { }\n    |        ^ expected bool, found fn item\n    |\n    = note: expected type `bool`\n-              found type `fn() {f}`\n+           found fn item `fn() {f}`\n \n error: aborting due to previous error\n "}, {"sha": "2f81c3938efa8e7c1e1f04fffe76b445522c9c2e", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -302,17 +302,17 @@ error[E0308]: mismatched types\n LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n    |                                ^^^ expected usize, found floating-point number\n    |\n-   = note: expected type `&usize`\n-              found type `&{float}`\n+   = note: expected reference `&usize`\n+              found reference `&{float}`\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n    |\n LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    |                                   ^^^ expected usize, found floating-point number\n    |\n-   = note: expected type `&usize`\n-              found type `&{float}`\n+   = note: expected reference `&usize`\n+              found reference `&{float}`\n \n error: aborting due to 36 previous errors\n "}, {"sha": "0074ac314178c9395bac3c58288d88c46f99a902", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,8 +12,8 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n    |\n-   = note: expected type `()`\n-              found type `<T as impl_trait::Trait>::Assoc`\n+   = note:         expected type `()`\n+           found associated type `<T as impl_trait::Trait>::Assoc`\n    = note: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n@@ -30,8 +30,8 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n    |\n-   = note: expected type `()`\n-              found type `<T as lifetimes::Trait<'static>>::Assoc`\n+   = note:         expected type `()`\n+           found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n    = note: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size"}, {"sha": "29cd67a806d58a060cea72034510e215330139c6", "filename": "src/test/ui/impl-trait/equality2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -25,13 +25,13 @@ fn main() {\n     let _: u32 = hide(0_u32);\n     //~^ ERROR mismatched types\n     //~| expected type `u32`\n-    //~| found type `impl Foo`\n+    //~| found opaque type `impl Foo`\n     //~| expected u32, found opaque type\n \n     let _: i32 = Leak::leak(hide(0_i32));\n     //~^ ERROR mismatched types\n     //~| expected type `i32`\n-    //~| found type `<impl Foo as Leak>::T`\n+    //~| found associated type `<impl Foo as Leak>::T`\n     //~| expected i32, found associated type\n \n     let mut x = (hide(0_u32), hide(0_i32));"}, {"sha": "de85f5f6eec9f6a569fd101e97608e7f8c895055", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     let _: u32 = hide(0_u32);\n    |                  ^^^^^^^^^^^ expected u32, found opaque type\n    |\n-   = note: expected type `u32`\n-              found type `impl Foo`\n+   = note:     expected type `u32`\n+           found opaque type `impl Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:31:18\n    |\n LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found associated type\n    |\n-   = note: expected type `i32`\n-              found type `<impl Foo as Leak>::T`\n+   = note:         expected type `i32`\n+           found associated type `<impl Foo as Leak>::T`\n    = note: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n@@ -24,17 +24,17 @@ error[E0308]: mismatched types\n LL |     x = (x.1,\n    |          ^^^ expected u32, found i32\n    |\n-   = note: expected type `impl Foo` (u32)\n-              found type `impl Foo` (i32)\n+   = note: expected opaque type `impl Foo` (u32)\n+              found opaque type `impl Foo` (i32)\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:41:10\n    |\n LL |          x.0);\n    |          ^^^ expected i32, found u32\n    |\n-   = note: expected type `impl Foo` (i32)\n-              found type `impl Foo` (u32)\n+   = note: expected opaque type `impl Foo` (i32)\n+              found opaque type `impl Foo` (u32)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "638a0093fb21d1df5a86e4b97b741786517c2873", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n    |            |\n    |            expected type parameter\n    |\n-   = note: expected type `fn(&(), &B, &impl Debug)`\n-              found type `fn(&(), &impl Debug, &B)`\n+   = note: expected fn pointer `fn(&(), &B, &impl Debug)`\n+              found fn pointer `fn(&(), &impl Debug, &B)`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "d95b62e469e8c2741725250265b04c8d45a342c3", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `fmt` has an incompatible type for trait\n LL |    fn fmt(&self, x: &str) -> () { }\n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n    |\n-   = note: expected type `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n-              found type `fn(&MyType, &str)`\n+   = note: expected fn pointer `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+              found fn pointer `fn(&MyType, &str)`\n \n error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n   --> $DIR/trait_type.rs:12:11"}, {"sha": "3ffa2b55712eb7374699f694c6303639116d2f3b", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,8 +8,8 @@ LL | fn foo(x: impl Debug) -> String {\n LL |     x\n    |     ^ expected struct `std::string::String`, found type parameter `impl Debug`\n    |\n-   = note: expected type `std::string::String`\n-              found type `impl Debug`\n+   = note:      expected struct `std::string::String`\n+           found type parameter `impl Debug`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "7c120235fd17637b085fbe8032cf846f9fa7225b", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL |     let mut a = x;\n LL |     a = y;\n    |         ^ expected type parameter `impl Debug`, found a different type parameter `impl Debug`\n    |\n-   = note: expected type `impl Debug` (type parameter `impl Debug`)\n-              found type `impl Debug` (type parameter `impl Debug`)\n+   = note: expected type parameter `impl Debug` (type parameter `impl Debug`)\n+              found type parameter `impl Debug` (type parameter `impl Debug`)\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "79f12356a6de426caf1defe21ee3b149a9d640d9", "filename": "src/test/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     let b: &[u8] = include_str!(\"file.txt\");\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found str\n    |\n-   = note: expected type `&[u8]`\n-              found type `&'static str`\n+   = note: expected reference `&[u8]`\n+              found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n    |\n LL |     let s: &str = include_bytes!(\"file.txt\");\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found array of 0 elements\n    |\n-   = note: expected type `&str`\n-              found type `&'static [u8; 0]`\n+   = note: expected reference `&str`\n+              found reference `&'static [u8; 0]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9f42214a5051bfb16c472ea7d70026840bfb4e3c", "filename": "src/test/ui/issues/issue-10176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -2,7 +2,7 @@ fn f() -> isize {\n     (return 1, return 2)\n //~^ ERROR mismatched types\n //~| expected type `isize`\n-//~| found type `(!, !)`\n+//~| found tuple `(!, !)`\n //~| expected isize, found tuple\n }\n "}, {"sha": "7cab5a1f7c3a5f5264a1540c5f26b9be4a4947c5", "filename": "src/test/ui/issues/issue-10176.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,7 +7,7 @@ LL |     (return 1, return 2)\n    |     ^^^^^^^^^^^^^^^^^^^^ expected isize, found tuple\n    |\n    = note: expected type `isize`\n-              found type `(!, !)`\n+             found tuple `(!, !)`\n \n error: aborting due to previous error\n "}, {"sha": "b0bafc9942ee96dd73259ac93d5e7f1f251fe021", "filename": "src/test/ui/issues/issue-10764.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | fn main() { f(bar) }\n    |               ^^^ expected \"Rust\" fn, found \"C\" fn\n    |\n-   = note: expected type `fn()`\n-              found type `extern \"C\" fn() {bar}`\n+   = note: expected fn pointer `fn()`\n+                 found fn item `extern \"C\" fn() {bar}`\n \n error: aborting due to previous error\n "}, {"sha": "a5b9de0a0a31619129a359e865cefc27e2f280d3", "filename": "src/test/ui/issues/issue-11374.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     c.read_to(v);\n    |               expected &mut [u8], found struct `std::vec::Vec`\n    |               help: consider mutably borrowing here: `&mut v`\n    |\n-   = note: expected type `&mut [u8]`\n-              found type `std::vec::Vec<_>`\n+   = note: expected mutable reference `&mut [u8]`\n+                         found struct `std::vec::Vec<_>`\n \n error: aborting due to previous error\n "}, {"sha": "b53563d7b653c458704f8592dd33962a7bc33b4d", "filename": "src/test/ui/issues/issue-11515.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let test = box Test { func: closure };\n    |                                 ^^^^^^^ expected trait `std::ops::FnMut`, found trait `std::ops::Fn`\n    |\n-   = note: expected type `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n-              found type `std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n+   = note: expected struct `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n+              found struct `std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "1b22d6f45cf20e8dae25259d3fee7147830e1afb", "filename": "src/test/ui/issues/issue-11844.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     match a {\n LL |         Ok(a) =>\n    |         ^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `std::option::Option<std::boxed::Box<{integer}>>`\n-              found type `std::result::Result<_, _>`\n+   = note: expected enum `std::option::Option<std::boxed::Box<{integer}>>`\n+              found enum `std::result::Result<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "ecafef259d3c9c4c62cb183a1c7ac57bac05e299", "filename": "src/test/ui/issues/issue-12552.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,17 +6,17 @@ LL |   match t {\n LL |     Some(k) => match k {\n    |     ^^^^^^^ expected enum `std::result::Result`, found enum `std::option::Option`\n    |\n-   = note: expected type `std::result::Result<_, {integer}>`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `std::result::Result<_, {integer}>`\n+              found enum `std::option::Option<_>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:9:5\n    |\n LL |     None => ()\n    |     ^^^^ expected enum `std::result::Result`, found enum `std::option::Option`\n    |\n-   = note: expected type `std::result::Result<_, {integer}>`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `std::result::Result<_, {integer}>`\n+              found enum `std::option::Option<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bac69075c83bb356c5c6895770d0e74d9028f669", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | fn bar(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^^^^ expected isize, found mutable reference\n    |\n-   = note: expected type `isize`\n-              found type `&mut test::Bencher`\n+   = note:           expected type `isize`\n+           found mutable reference `&mut test::Bencher`\n \n error: aborting due to previous error\n "}, {"sha": "7631831a81a5b2787be1811730173a858a65e188", "filename": "src/test/ui/issues/issue-13033.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ struct Baz;\n impl Foo for Baz {\n     fn bar(&mut self, other: &dyn Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| expected type `fn(&mut Baz, &mut dyn Foo)`\n-    //~| found type `fn(&mut Baz, &dyn Foo)`\n+    //~| expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n+    //~| found fn pointer `fn(&mut Baz, &dyn Foo)`\n }\n \n fn main() {}"}, {"sha": "a8473c8a5241327d8e05636cec816261c4ce6e6e", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     fn bar(&mut self, other: &mut dyn Foo);\n LL |     fn bar(&mut self, other: &dyn Foo) {}\n    |                              ^^^^^^^^ types differ in mutability\n    |\n-   = note: expected type `fn(&mut Baz, &mut dyn Foo)`\n-              found type `fn(&mut Baz, &dyn Foo)`\n+   = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n+              found fn pointer `fn(&mut Baz, &dyn Foo)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&mut self, other: &mut dyn Foo) {}"}, {"sha": "4c3e481564f23441dbf74f4f233ef5965f35094c", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,8 +10,8 @@ error[E0308]: mismatched types\n LL |     A::C = 1;\n    |            ^ expected struct `A::C`, found integer\n    |\n-   = note: expected type `A::C`\n-              found type `{integer}`\n+   = note: expected struct `A::C`\n+                found type `{integer}`\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/issue-13407.rs:6:5"}, {"sha": "80a32cd276a98171341805e19a05b248dc99502a", "filename": "src/test/ui/issues/issue-13446.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | static VEC: [u32; 256] = vec![];\n    |                          ^^^^^^ expected array of 256 elements, found struct `std::vec::Vec`\n    |\n-   = note: expected type `[u32; 256]`\n-              found type `std::vec::Vec<_>`\n+   = note: expected array `[u32; 256]`\n+             found struct `std::vec::Vec<_>`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "411e7cbeebd76403bb75977dcc08da687488b8f4", "filename": "src/test/ui/issues/issue-13466.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,14 +7,14 @@ pub fn main() {\n     let _x: usize = match Some(1) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<{integer}>`\n-        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option<{integer}>`\n+        //~| found enum `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<{integer}>`\n-        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option<{integer}>`\n+        //~| found enum `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     };\n }"}, {"sha": "fc20615757aa80bf4114da9c5df09fc7759ae542", "filename": "src/test/ui/issues/issue-13466.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     let _x: usize = match Some(1) {\n LL |         Ok(u) => u,\n    |         ^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `std::option::Option<{integer}>`\n-              found type `std::result::Result<_, _>`\n+   = note: expected enum `std::option::Option<{integer}>`\n+              found enum `std::result::Result<_, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:14:9\n@@ -18,8 +18,8 @@ LL |     let _x: usize = match Some(1) {\n LL |         Err(e) => panic!(e)\n    |         ^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `std::option::Option<{integer}>`\n-              found type `std::result::Result<_, _>`\n+   = note: expected enum `std::option::Option<{integer}>`\n+              found enum `std::result::Result<_, _>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cdb261a238e5654a1caf812a44d0dfe5c24a4b07", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     fn nodes<'a, I: Iterator<Item=&'a N>>(&self) -> I\n LL |         self.iter()\n    |         ^^^^^^^^^^^ expected type parameter `I`, found struct `std::slice::Iter`\n    |\n-   = note: expected type `I`\n-              found type `std::slice::Iter<'_, N>`\n+   = note: expected type parameter `I`\n+                      found struct `std::slice::Iter<'_, N>`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -27,8 +27,8 @@ LL |     iterate(graph);\n    |             expected reference, found struct `std::vec::Vec`\n    |             help: consider borrowing here: `&graph`\n    |\n-   = note: expected type `&_`\n-              found type `std::vec::Vec<Stuff>`\n+   = note: expected reference `&_`\n+                 found struct `std::vec::Vec<Stuff>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e8d44a4a9f88d4364035a6e5d06bd9eaf501fc78", "filename": "src/test/ui/issues/issue-14541.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,9 +4,9 @@ struct Vec3 { y: f32, z: f32 }\n fn make(v: Vec2) {\n     let Vec3 { y: _, z: _ } = v;\n     //~^ ERROR mismatched types\n-    //~| expected type `Vec2`\n-    //~| found type `Vec3`\n     //~| expected struct `Vec2`, found struct `Vec3`\n+    //~| expected struct `Vec2`\n+    //~| found struct `Vec3`\n }\n \n fn main() { }"}, {"sha": "e7cae883d6bf204ecf9e7efffc783e58def250ff", "filename": "src/test/ui/issues/issue-14541.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let Vec3 { y: _, z: _ } = v;\n    |         ^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found struct `Vec3`\n    |\n-   = note: expected type `Vec2`\n-              found type `Vec3`\n+   = note: expected struct `Vec2`\n+              found struct `Vec3`\n \n error: aborting due to previous error\n "}, {"sha": "71b75a6e7e00f98e018c937249c8e6a892abdc3b", "filename": "src/test/ui/issues/issue-15094.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,8 +10,8 @@ impl<T: fmt::Debug> ops::FnOnce<(),> for Debuger<T> {\n     type Output = ();\n     fn call_once(self, _args: ()) {\n     //~^ ERROR `call_once` has an incompatible type for trait\n-    //~| expected type `extern \"rust-call\" fn\n-    //~| found type `fn\n+    //~| expected fn pointer `extern \"rust-call\" fn\n+    //~| found fn pointer `fn\n         println!(\"{:?}\", self.x);\n     }\n }"}, {"sha": "7b392fe1ac71b277bc14b846ebc406ebab8289b0", "filename": "src/test/ui/issues/issue-15094.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `call_once` has an incompatible type for trait\n LL |     fn call_once(self, _args: ()) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"rust-call\" fn, found \"Rust\" fn\n    |\n-   = note: expected type `extern \"rust-call\" fn(Debuger<T>, ())`\n-              found type `fn(Debuger<T>, ())`\n+   = note: expected fn pointer `extern \"rust-call\" fn(Debuger<T>, ())`\n+              found fn pointer `fn(Debuger<T>, ())`\n \n error: aborting due to previous error\n "}, {"sha": "61cb0093b1c44344aee7f1f3844202d768c4b350", "filename": "src/test/ui/issues/issue-15783.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ fn main() {\n     let x = Some(&[name]);\n     let msg = foo(x);\n     //~^ ERROR mismatched types\n-    //~| expected type `std::option::Option<&[&str]>`\n-    //~| found type `std::option::Option<&[&str; 1]>`\n+    //~| expected enum `std::option::Option<&[&str]>`\n+    //~| found enum `std::option::Option<&[&str; 1]>`\n     //~| expected slice, found array of 1 element\n     assert_eq!(msg, 3);\n }"}, {"sha": "f60655b7a34d3a68ec5cb51e3f85e2477c54ea01", "filename": "src/test/ui/issues/issue-15783.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let msg = foo(x);\n    |                   ^ expected slice, found array of 1 element\n    |\n-   = note: expected type `std::option::Option<&[&str]>`\n-              found type `std::option::Option<&[&str; 1]>`\n+   = note: expected enum `std::option::Option<&[&str]>`\n+              found enum `std::option::Option<&[&str; 1]>`\n \n error: aborting due to previous error\n "}, {"sha": "1a0a7b4b8e6d934afe243c82b9c97511d54a7be1", "filename": "src/test/ui/issues/issue-15896.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,9 +10,9 @@ fn main() {\n         E::B(\n           Tau{t: x},\n           //~^ ERROR mismatched types\n-          //~| expected type `main::R`\n-          //~| found type `main::Tau`\n           //~| expected enum `main::R`, found struct `main::Tau`\n+          //~| expected enum `main::R`\n+          //~| found struct `main::Tau`\n           _) => x,\n     };\n }"}, {"sha": "a8227bb19c23f994e6d9d85015dfe7cec691a124", "filename": "src/test/ui/issues/issue-15896.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |         E::B(\n LL |           Tau{t: x},\n    |           ^^^^^^^^^ expected enum `main::R`, found struct `main::Tau`\n    |\n-   = note: expected type `main::R`\n-              found type `main::Tau`\n+   = note: expected enum `main::R`\n+            found struct `main::Tau`\n \n error: aborting due to previous error\n "}, {"sha": "321b3576cd61f00eb7ed7e158d6b1551904694ae", "filename": "src/test/ui/issues/issue-16338.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16338.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,5 +6,5 @@ struct Slice<T> {\n fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n     //~^ ERROR mismatched types\n-    //~| found type `Slice<_>`\n+    //~| found struct `Slice<_>`\n }"}, {"sha": "cae09c2151908d334b42b1a38c8de59f11facef1", "filename": "src/test/ui/issues/issue-16338.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     let Slice { data: data, len: len } = \"foo\";\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found struct `Slice`\n    |\n    = note: expected type `str`\n-              found type `Slice<_>`\n+            found struct `Slice<_>`\n \n error: aborting due to previous error\n "}, {"sha": "9ed730ba2113fa11c4f437e1e43452fba65cb184", "filename": "src/test/ui/issues/issue-16401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,7 +8,7 @@ fn main() {\n         Slice { data: data, len: len } => (),\n         //~^ ERROR mismatched types\n         //~| expected type `()`\n-        //~| found type `Slice<_>`\n+        //~| found struct `Slice<_>`\n         //~| expected (), found struct `Slice`\n         _ => unreachable!()\n     }"}, {"sha": "e5bacc36de5e13aa32a0fb458e71f0e0c7b76b45", "filename": "src/test/ui/issues/issue-16401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,7 +7,7 @@ LL |         Slice { data: data, len: len } => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `Slice`\n    |\n    = note: expected type `()`\n-              found type `Slice<_>`\n+            found struct `Slice<_>`\n \n error: aborting due to previous error\n "}, {"sha": "be80dce1371519240a0ec955da48242d14e140f6", "filename": "src/test/ui/issues/issue-17033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -1,6 +1,6 @@\n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n-             //~| expected type `&mut ()`\n+             //~| expected mutable reference `&mut ()`\n              //~| found type `()`\n              //~| expected &mut (), found ()\n }"}, {"sha": "c84b30d721f009acb7c7dcad46e2d8fae2da289d", "filename": "src/test/ui/issues/issue-17033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     (*p)(())\n    |          expected &mut (), found ()\n    |          help: consider mutably borrowing here: `&mut ()`\n    |\n-   = note: expected type `&mut ()`\n-              found type `()`\n+   = note: expected mutable reference `&mut ()`\n+                           found type `()`\n \n error: aborting due to previous error\n "}, {"sha": "527168dbe6cc282b025bbe4a70d3176cc9285e12", "filename": "src/test/ui/issues/issue-17728.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -24,8 +24,8 @@ LL | |         _ => None\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `RoomDirection`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `RoomDirection`\n+              found enum `std::option::Option<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3b868555fc522a566183ffc17fb42fb59a91f92e", "filename": "src/test/ui/issues/issue-17740.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,12 +5,12 @@ struct Foo<'a> {\n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n     //~^ mismatched `self` parameter type\n-    //~| expected type `Foo<'a>`\n-    //~| found type `Foo<'_>`\n+    //~| expected struct `Foo<'a>`\n+    //~| found struct `Foo<'_>`\n     //~| lifetime mismatch\n     //~| mismatched `self` parameter type\n-    //~| expected type `Foo<'a>`\n-    //~| found type `Foo<'_>`\n+    //~| expected struct `Foo<'a>`\n+    //~| found struct `Foo<'_>`\n     //~| lifetime mismatch\n     }\n }"}, {"sha": "cd1d7f821c706df3c50bfa399ae7dd46a1eeffcb", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched `self` parameter type\n LL |     fn bar(self: &mut Foo) {\n    |                  ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Foo<'a>`\n-              found type `Foo<'_>`\n+   = note: expected struct `Foo<'a>`\n+              found struct `Foo<'_>`\n note: the anonymous lifetime #2 defined on the method body at 6:5...\n   --> $DIR/issue-17740.rs:6:5\n    |\n@@ -29,8 +29,8 @@ error[E0308]: mismatched `self` parameter type\n LL |     fn bar(self: &mut Foo) {\n    |                  ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Foo<'a>`\n-              found type `Foo<'_>`\n+   = note: expected struct `Foo<'a>`\n+              found struct `Foo<'_>`\n note: the lifetime `'a` as defined on the impl at 5:7...\n   --> $DIR/issue-17740.rs:5:7\n    |"}, {"sha": "f347c26f066e0fa66715e0b0540534d65df9b7f6", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched `self` parameter type\n LL |     fn say(self: &Pair<&str, isize>) {\n    |                  ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Pair<&str, _>`\n-              found type `Pair<&str, _>`\n+   = note: expected struct `Pair<&str, _>`\n+              found struct `Pair<&str, _>`\n note: the anonymous lifetime #2 defined on the method body at 8:5...\n   --> $DIR/issue-17905-2.rs:8:5\n    |\n@@ -27,8 +27,8 @@ error[E0308]: mismatched `self` parameter type\n LL |     fn say(self: &Pair<&str, isize>) {\n    |                  ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Pair<&str, _>`\n-              found type `Pair<&str, _>`\n+   = note: expected struct `Pair<&str, _>`\n+              found struct `Pair<&str, _>`\n note: the lifetime `'_` as defined on the impl at 5:5...\n   --> $DIR/issue-17905-2.rs:5:5\n    |"}, {"sha": "63b0451e01a185bea0ab39a82db67c9835dcea91", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n-   = note: expected type `extern \"rust-call\" fn(&Foo, (&'a T,))`\n-              found type `extern \"rust-call\" fn(&Foo, (T,))`\n+   = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n+              found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -19,8 +19,8 @@ LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n-   = note: expected type `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n-              found type `extern \"rust-call\" fn(&mut Foo, (T,))`\n+   = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n+              found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -33,8 +33,8 @@ LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n-   = note: expected type `extern \"rust-call\" fn(Foo, (&'a T,))`\n-              found type `extern \"rust-call\" fn(Foo, (T,))`\n+   = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n+              found fn pointer `extern \"rust-call\" fn(Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "ace3e014647c9d9421869ba9a8d89bef589984de", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `next` has an incompatible type for trait\n LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `fn(&mut S) -> std::option::Option<i32>`\n-              found type `fn(&mut S) -> std::result::Result<i32, i32>`\n+   = note: expected fn pointer `fn(&mut S) -> std::option::Option<i32>`\n+              found fn pointer `fn(&mut S) -> std::result::Result<i32, i32>`\n \n error: aborting due to previous error\n "}, {"sha": "8d58095ceff307fd8aeace4a79b6066437241467", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -13,8 +13,8 @@ error[E0308]: mismatched types\n LL |     let v: Vec(&str) = vec!['1', '2'];\n    |                             ^^^ expected &str, found char\n    |\n-   = note: expected type `&str`\n-              found type `char`\n+   = note: expected reference `&str`\n+                   found type `char`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "04817f2596abd3401fb482aadd9af39f51266f51", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     x = |c| c + 1;\n    |         ^^^^^^^^^ expected closure, found a different closure\n    |\n-   = note: expected type `[closure@$DIR/issue-24036.rs:2:17: 2:26]`\n-              found type `[closure@$DIR/issue-24036.rs:3:9: 3:18]`\n+   = note: expected closure `[closure@$DIR/issue-24036.rs:2:17: 2:26]`\n+              found closure `[closure@$DIR/issue-24036.rs:3:9: 3:18]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n@@ -23,7 +23,7 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n    = note: expected type `[closure@$DIR/issue-24036.rs:9:14: 9:23]`\n-              found type `[closure@$DIR/issue-24036.rs:10:14: 10:23]`\n+           found closure `[closure@$DIR/issue-24036.rs:10:14: 10:23]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n "}, {"sha": "3eb1f1b4f6e81897bd13b49f902c9c684a673bb4", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL | trait Trait: Sized {\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n-   = note: expected type `T`\n-              found type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n+   = note: expected type parameter `T`\n+             found associated type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n    = note: you might be missing a type parameter or trait bound\n \n error: aborting due to previous error"}, {"sha": "fb0c7a0d80904989a8c5a9a6847227e0f85e0c77", "filename": "src/test/ui/issues/issue-24322.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let x: &fn(&B) -> u32 = &B::func;\n    |                             ^^^^^^^^ expected fn pointer, found fn item\n    |\n-   = note: expected type `&for<'r> fn(&'r B) -> u32`\n-              found type `&for<'r> fn(&'r B) -> u32 {B::func}`\n+   = note: expected reference `&for<'r> fn(&'r B) -> u32`\n+              found reference `&for<'r> fn(&'r B) -> u32 {B::func}`\n \n error: aborting due to previous error\n "}, {"sha": "1166a887f86963ba670b903c2c98f17b6e7ff151", "filename": "src/test/ui/issues/issue-24819.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(&mut v);\n    |         ^^^^^^ expected struct `std::collections::HashSet`, found struct `std::vec::Vec`\n    |\n-   = note: expected type `&mut std::collections::HashSet<u32>`\n-              found type `&mut std::vec::Vec<_>`\n+   = note: expected mutable reference `&mut std::collections::HashSet<u32>`\n+              found mutable reference `&mut std::vec::Vec<_>`\n \n error: aborting due to previous error\n "}, {"sha": "3b271a2a35bdbea5195d710766af06d885cb0504", "filename": "src/test/ui/issues/issue-27008.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -3,7 +3,7 @@ struct S;\n fn main() {\n     let b = [0; S];\n     //~^ ERROR mismatched types\n-    //~| expected type `usize`\n-    //~| found type `S`\n     //~| expected usize, found struct `S`\n+    //~| expected type `usize`\n+    //~| found struct `S`\n }"}, {"sha": "598ee741a5c8b45c4efaf987710e888bb5f230ed", "filename": "src/test/ui/issues/issue-27008.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     let b = [0; S];\n    |                 ^ expected usize, found struct `S`\n    |\n    = note: expected type `usize`\n-              found type `S`\n+            found struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "4710a594b3102319f9dfb5f1df470eb55e2eaa52", "filename": "src/test/ui/issues/issue-29084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ macro_rules! foo {\n         //~^ ERROR mismatched types\n         //~| expected u8, found &mut u8\n         //~| expected type `u8`\n-        //~| found type `&mut u8`\n+        //~| found mutable reference `&mut u8`\n     }}\n }\n "}, {"sha": "0a238761fc60492fbd25d3869126c19c4fa939f4", "filename": "src/test/ui/issues/issue-29084.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |         bar(&mut $d);\n LL |     foo!(0u8);\n    |     ---------- in this macro invocation\n    |\n-   = note: expected type `u8`\n-              found type `&mut u8`\n+   = note:           expected type `u8`\n+           found mutable reference `&mut u8`\n \n error: aborting due to previous error\n "}, {"sha": "1798e3e751923a57246c7e4c076c45f8853ea424", "filename": "src/test/ui/issues/issue-2951.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -2,9 +2,9 @@ fn foo<T, U>(x: T, y: U) {\n     let mut xx = x;\n     xx = y;\n     //~^  ERROR mismatched types\n-    //~| expected type `T`\n-    //~| found type `U`\n     //~| expected type parameter `T`, found type parameter `U`\n+    //~| expected type parameter `T`\n+    //~| found type parameter `U`\n }\n \n fn main() {"}, {"sha": "b966b339389170e4e942d1b0be057d58fd8a2dbc", "filename": "src/test/ui/issues/issue-2951.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL |     let mut xx = x;\n LL |     xx = y;\n    |          ^ expected type parameter `T`, found type parameter `U`\n    |\n-   = note: expected type `T`\n-              found type `U`\n+   = note: expected type parameter `T`\n+              found type parameter `U`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "27a567548ba29f8f23fdc3c89c72227ed9dd3856", "filename": "src/test/ui/issues/issue-30225.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     u = v; // mark $0 and $1 in a subtype relationship\n    |         ^ expected struct `A`, found struct `B`\n    |\n-   = note: expected type `A`\n-              found type `B`\n+   = note: expected struct `A`\n+              found struct `B`\n \n error: aborting due to previous error\n "}, {"sha": "26195318380d2ad9d7a1f7fa917db41c0a89f4e6", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,7 +10,7 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n         .cloned()\n         //~^ ERROR type mismatch resolving\n         //~| expected type `u8`\n-        //~| found type `&_`\n+        //~| found reference `&_`\n         .collect(); //~ ERROR no method named `collect`\n }\n "}, {"sha": "0cc64d2f9c1a95ac3dc001db18873fe20e043ed1", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::Into\n LL |         .cloned()\n    |          ^^^^^^ expected u8, found reference\n    |\n-   = note: expected type `u8`\n-              found type `&_`\n+   = note:   expected type `u8`\n+           found reference `&_`\n \n error[E0599]: no method named `collect` found for type `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>` in the current scope\n   --> $DIR/issue-31173.rs:14:10"}, {"sha": "e7ad46a4aeff8b7362933e79367dcc290530f83b", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `<T as Tr<'a>>::Out`\n-              found type `()`\n+   = note: expected associated type `<T as Tr<'a>>::Out`\n+                         found type `()`\n    = note: consider constraining the associated type `<T as Tr<'a>>::Out` to `()` or calling a method that returns `<T as Tr<'a>>::Out`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}, {"sha": "758f86d3db850ac3a8b2ee3294ac62841b15c74b", "filename": "src/test/ui/issues/issue-33504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |         let Test = 1;\n    |             ^^^^ expected integer, found struct `Test`\n    |\n    = note: expected type `{integer}`\n-              found type `Test`\n+            found struct `Test`\n \n error: aborting due to previous error\n "}, {"sha": "734ae78f362dbc2dd94c50f542e0c9d90096300d", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n LL |     for _ in HashMap::new().iter().cloned() {}\n    |                                    ^^^^^^ expected tuple, found reference\n    |\n-   = note: expected type `(&_, &_)`\n-              found type `&_`\n+   = note:  expected tuple `(&_, &_)`\n+           found reference `&_`\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n-   = note: expected type `(&_, &_)`\n-              found type `&_`\n+   = note:  expected tuple `(&_, &_)`\n+           found reference `&_`\n    = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n \n error: aborting due to 2 previous errors"}, {"sha": "c68056a8bd71833499dd333873630ad8fd79c41e", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -32,7 +32,7 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    |                               ^^^^^^ expected bool, found struct `std::vec::Vec`\n    |\n    = note: expected type `bool`\n-              found type `std::vec::Vec<_>`\n+            found struct `std::vec::Vec<_>`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0070]: invalid left-hand side expression"}, {"sha": "4a52a292ef30a9f232a121845cd5737c16f5679e", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -11,8 +11,8 @@ LL | fn test() -> Foo { Foo }\n    |              |     help: use parentheses to instantiate this tuple struct: `Foo(_)`\n    |              expected `Foo` because of return type\n    |\n-   = note: expected type `Foo`\n-              found type `fn(u32) -> Foo {Foo}`\n+   = note: expected struct `Foo`\n+             found fn item `fn(u32) -> Foo {Foo}`\n \n error: aborting due to previous error\n "}, {"sha": "f70a9c8818a4eae90ca67064446c2f792b439468", "filename": "src/test/ui/issues/issue-35869.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     fn foo(_: fn(u8) -> ());\n LL |     fn foo(_: fn(u16) -> ()) {}\n    |               ^^^^^^^^^^^^^ expected u8, found u16\n    |\n-   = note: expected type `fn(fn(u8))`\n-              found type `fn(fn(u16))`\n+   = note: expected fn pointer `fn(fn(u8))`\n+              found fn pointer `fn(fn(u16))`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:13:15\n@@ -19,8 +19,8 @@ LL |     fn bar(_: Option<u8>);\n LL |     fn bar(_: Option<u16>) {}\n    |               ^^^^^^^^^^^ expected u8, found u16\n    |\n-   = note: expected type `fn(std::option::Option<u8>)`\n-              found type `fn(std::option::Option<u16>)`\n+   = note: expected fn pointer `fn(std::option::Option<u8>)`\n+              found fn pointer `fn(std::option::Option<u16>)`\n \n error[E0053]: method `baz` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:15:15\n@@ -31,8 +31,8 @@ LL |     fn baz(_: (u8, u16));\n LL |     fn baz(_: (u16, u16)) {}\n    |               ^^^^^^^^^^ expected u8, found u16\n    |\n-   = note: expected type `fn((u8, u16))`\n-              found type `fn((u16, u16))`\n+   = note: expected fn pointer `fn((u8, u16))`\n+              found fn pointer `fn((u16, u16))`\n \n error[E0053]: method `qux` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:17:17\n@@ -43,8 +43,8 @@ LL |     fn qux() -> u8;\n LL |     fn qux() -> u16 { 5u16 }\n    |                 ^^^ expected u8, found u16\n    |\n-   = note: expected type `fn() -> u8`\n-              found type `fn() -> u16`\n+   = note: expected fn pointer `fn() -> u8`\n+              found fn pointer `fn() -> u16`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "64050c72f2ca6b301cc1b855722adbec24873d1b", "filename": "src/test/ui/issues/issue-3680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -2,8 +2,8 @@ fn main() {\n     match None {\n         Err(_) => ()\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<_>`\n-        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option<_>`\n+        //~| found enum `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     }\n }"}, {"sha": "8856f0e3a48443560e934c25ba6ffc04e0121ee9", "filename": "src/test/ui/issues/issue-3680.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     match None {\n LL |         Err(_) => ()\n    |         ^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `std::option::Option<_>`\n-              found type `std::result::Result<_, _>`\n+   = note: expected enum `std::option::Option<_>`\n+              found enum `std::result::Result<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "239f0a181908e9b872d8b9168996fa31d6998d3b", "filename": "src/test/ui/issues/issue-37026.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     let empty_struct::XEmpty2 = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty2`\n    |\n    = note: expected type `()`\n-              found type `empty_struct::XEmpty2`\n+            found struct `empty_struct::XEmpty2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:7:9\n@@ -14,7 +14,7 @@ LL |     let empty_struct::XEmpty6(..) = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty6`\n    |\n    = note: expected type `()`\n-              found type `empty_struct::XEmpty6`\n+            found struct `empty_struct::XEmpty6`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "61cb3d7c58f382be322f3d0a07273b6e1862a36d", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL | |         Some(&mut self.0)\n LL | |     }\n    | |_____^ lifetime mismatch\n    |\n-   = note: expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n-              found type `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+   = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+              found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n note: the anonymous lifetime #1 defined on the method body at 6:5...\n   --> $DIR/issue-37884.rs:6:5\n    |"}, {"sha": "707fcc7e919cd2d911bc4f7e7725cd49220520aa", "filename": "src/test/ui/issues/issue-38940.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL |     let x: &Bottom = &t;\n    |                      ^^ expected struct `Bottom`, found struct `Top`\n    |\n-   = note: expected type `&Bottom`\n-              found type `&Top`\n+   = note: expected reference `&Bottom`\n+              found reference `&Top`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8bc62dd1b84bf4ff3ee56bdb44282ff31f9e6655", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     fn visit() {}\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected &(), found ()\n    |\n-   = note: expected type `&()`\n-              found type `()`\n+   = note: expected reference `&()`\n+                   found type `()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n \n error: aborting due to previous error"}, {"sha": "983fdb13083a1a9eaff415ddabb3a1bcbe32b9ce", "filename": "src/test/ui/issues/issue-40000.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(bar);\n    |         ^^^ expected concrete lifetime, found bound lifetime parameter\n    |\n-   = note: expected type `std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r i32) + 'static)>`\n-              found type `std::boxed::Box<dyn std::ops::Fn(_)>`\n+   = note: expected struct `std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r i32) + 'static)>`\n+              found struct `std::boxed::Box<dyn std::ops::Fn(_)>`\n \n error: aborting due to previous error\n "}, {"sha": "87ff5a650feb50f2f87550bd55f140b5cc1c862b", "filename": "src/test/ui/issues/issue-40749.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-40749.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-40749.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40749.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     [0; ..10];\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n-    //~| found type `std::ops::RangeTo<{integer}>`\n+    //~| found struct `std::ops::RangeTo<{integer}>`\n }"}, {"sha": "67d5d6be640b11d16b474b12880e1ef58b09726e", "filename": "src/test/ui/issues/issue-40749.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     [0; ..10];\n    |         ^^^^ expected usize, found struct `std::ops::RangeTo`\n    |\n    = note: expected type `usize`\n-              found type `std::ops::RangeTo<{integer}>`\n+            found struct `std::ops::RangeTo<{integer}>`\n \n error: aborting due to previous error\n "}, {"sha": "a1dae867ae6fb7e465c87ec4f9213fffac664084", "filename": "src/test/ui/issues/issue-41742.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     H[\"?\"].f();\n    |       ^^^ expected u32, found reference\n    |\n-   = note: expected type `u32`\n-              found type `&'static str`\n+   = note:   expected type `u32`\n+           found reference `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "4d61788c347d5dfa2b9383c9c5d05349c27b9576", "filename": "src/test/ui/issues/issue-43420-no-over-suggest.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(&a);\n    |         ^^ expected slice, found struct `std::vec::Vec`\n    |\n-   = note: expected type `&[u16]`\n-              found type `&std::vec::Vec<u8>`\n+   = note: expected reference `&[u16]`\n+              found reference `&std::vec::Vec<u8>`\n \n error: aborting due to previous error\n "}, {"sha": "569fdc1662a7bc5e648cfafda880b1a1b07cec39", "filename": "src/test/ui/issues/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     bar(foo);\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n-    //~| found type `[u8; 4]`\n+    //~| found array `[u8; 4]`\n     //~| expected usize, found array of 4 elements\n }"}, {"sha": "0f45e91d6f5622ae2a75f4c3619bfa95b8c157fe", "filename": "src/test/ui/issues/issue-4517.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     bar(foo);\n    |         ^^^ expected usize, found array of 4 elements\n    |\n    = note: expected type `usize`\n-              found type `[u8; 4]`\n+             found array `[u8; 4]`\n \n error: aborting due to previous error\n "}, {"sha": "30ec6a966cebf6752f69da64bff48777b1ea7072", "filename": "src/test/ui/issues/issue-46112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,7 +7,7 @@ LL | fn main() { test(Ok(())); }\n    |                     expected enum `std::option::Option`, found ()\n    |                     help: try using a variant of the expected enum: `Some(())`\n    |\n-   = note: expected type `std::option::Option<()>`\n+   = note: expected enum `std::option::Option<()>`\n               found type `()`\n \n error: aborting due to previous error"}, {"sha": "221d4b6d67f71bb523d0c4bb2cbe6b25bf754511", "filename": "src/test/ui/issues/issue-46302.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |   let u: &str = if true { s[..2] } else { s };\n    |                           expected &str, found str\n    |                           help: consider borrowing here: `&s[..2]`\n    |\n-   = note: expected type `&str`\n-              found type `str`\n+   = note: expected reference `&str`\n+                   found type `str`\n \n error: aborting due to previous error\n "}, {"sha": "dd6bef5c102c6045d5a042ca49422e749742277c", "filename": "src/test/ui/issues/issue-46756-consider-borrowing-cast-or-binexpr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     light_flows_our_war_of_mocking_words(behold as usize);\n    |                                          expected &usize, found usize\n    |                                          help: consider borrowing here: `&(behold as usize)`\n    |\n-   = note: expected type `&usize`\n-              found type `usize`\n+   = note: expected reference `&usize`\n+                   found type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:14:42\n@@ -19,8 +19,8 @@ LL |     light_flows_our_war_of_mocking_words(with_tears + 4);\n    |                                          expected &usize, found usize\n    |                                          help: consider borrowing here: `&(with_tears + 4)`\n    |\n-   = note: expected type `&usize`\n-              found type `usize`\n+   = note: expected reference `&usize`\n+                   found type `usize`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4e4e0e7ed94a0fd0d40054f70981b54e2469e9a0", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     b\"\".starts_with(stringify!(foo))\n    |                     ^^^^^^^^^^^^^^^ expected slice, found str\n    |\n-   = note: expected type `&[u8]`\n-              found type `&'static str`\n+   = note: expected reference `&[u8]`\n+              found reference `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "684e518c36f93e11b508351618ab50f5994ba59a", "filename": "src/test/ui/issues/issue-48838.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     Square = |x| x,\n    |              ^^^^^ expected isize, found closure\n    |\n    = note: expected type `isize`\n-              found type `[closure@$DIR/issue-48838.rs:2:14: 2:19]`\n+           found closure `[closure@$DIR/issue-48838.rs:2:14: 2:19]`\n \n error: aborting due to previous error\n "}, {"sha": "634bd698d77056157113be7d86bf768eb4f11185", "filename": "src/test/ui/issues/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4968.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     match 42 { A => () }\n     //~^ ERROR mismatched types\n     //~| expected type `{integer}`\n-    //~| found type `(isize, isize)`\n+    //~| found tuple `(isize, isize)`\n     //~| expected integer, found tuple\n }"}, {"sha": "35435d0e618196a25d255d929d680b404b0ed17a", "filename": "src/test/ui/issues/issue-4968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     match 42 { A => () }\n    |                ^ expected integer, found tuple\n    |\n    = note: expected type `{integer}`\n-              found type `(isize, isize)`\n+             found tuple `(isize, isize)`\n \n error: aborting due to previous error\n "}, {"sha": "8278b0af9f2831c0e0c0276ef8ab05fa13d3fdb1", "filename": "src/test/ui/issues/issue-50600.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     fn([u8; |x: u8| {}]),\n    |             ^^^^^^^^^^ expected usize, found closure\n    |\n    = note: expected type `usize`\n-              found type `[closure@$DIR/issue-50600.rs:2:13: 2:23]`\n+           found closure `[closure@$DIR/issue-50600.rs:2:13: 2:23]`\n \n error: aborting due to previous error\n "}, {"sha": "bb69744803d2feef27df0bdcd280242df4be8bc9", "filename": "src/test/ui/issues/issue-50688.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |     [1; || {}];\n    |         ^^^^^ expected usize, found closure\n    |\n    = note: expected type `usize`\n-              found type `[closure@$DIR/issue-50688.rs:2:9: 2:14]`\n+           found closure `[closure@$DIR/issue-50688.rs:2:9: 2:14]`\n \n error: aborting due to previous error\n "}, {"sha": "8f6928bf3798f0879373a8524f90f7c7c9d3916a", "filename": "src/test/ui/issues/issue-5100.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,41 +7,41 @@ fn main() {\n     match (true, false) {\n         A::B => (),\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `A`\n //~| expected tuple, found enum `A`\n+//~| expected tuple `(bool, bool)`\n+//~| found enum `A`\n         _ => ()\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `(_, _, _)`\n //~| expected a tuple with 2 elements, found one with 3 elements\n+//~| expected tuple `(bool, bool)`\n+//~| found tuple `(_, _, _)`\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `(_, _, _)`\n //~| expected a tuple with 2 elements, found one with 3 elements\n+//~| expected tuple `(bool, bool)`\n+//~| found tuple `(_, _, _)`\n     }\n \n     match (true, false) {\n         box (true, false) => ()\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `std::boxed::Box<_>`\n+//~| expected tuple `(bool, bool)`\n+//~| found struct `std::boxed::Box<_>`\n     }\n \n     match (true, false) {\n         &(true, false) => ()\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `&_`\n //~| expected tuple, found reference\n+//~| expected tuple `(bool, bool)`\n+//~| found reference `&_`\n     }\n \n "}, {"sha": "60d94478b3b8ae4d4fc2922c00c341749683ecaa", "filename": "src/test/ui/issues/issue-5100.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,26 +4,26 @@ error[E0308]: mismatched types\n LL |         A::B => (),\n    |         ^^^^ expected tuple, found enum `A`\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `A`\n+   = note: expected tuple `(bool, bool)`\n+               found enum `A`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:17:9\n    |\n LL |         (true, false, false) => ()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `(_, _, _)`\n+   = note: expected tuple `(bool, bool)`\n+              found tuple `(_, _, _)`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:25:9\n    |\n LL |         (true, false, false) => ()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `(_, _, _)`\n+   = note: expected tuple `(bool, bool)`\n+              found tuple `(_, _, _)`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:33:9\n@@ -33,17 +33,17 @@ LL |     match (true, false) {\n LL |         box (true, false) => ()\n    |         ^^^^^^^^^^^^^^^^^ expected tuple, found struct `std::boxed::Box`\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `std::boxed::Box<_>`\n+   = note: expected tuple `(bool, bool)`\n+             found struct `std::boxed::Box<_>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:40:9\n    |\n LL |         &(true, false) => ()\n    |         ^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `&_`\n+   = note:  expected tuple `(bool, bool)`\n+           found reference `&_`\n \n error[E0618]: expected function, found `(char, char)`\n   --> $DIR/issue-5100.rs:48:14"}, {"sha": "94178d512109b668f60ceafd33964bf7c03167f4", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,7 +7,7 @@ LL |     missing_discourses()?\n    |     |                   help: try removing this `?`\n    |     expected enum `std::result::Result`, found isize\n    |\n-   = note: expected type `std::result::Result<isize, ()>`\n+   = note: expected enum `std::result::Result<isize, ()>`\n               found type `isize`\n \n error: aborting due to previous error"}, {"sha": "21d9333735cc755f62110b35b3e050dd07a23376", "filename": "src/test/ui/issues/issue-5216.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL | pub static C: S = S(f);\n    |                     ^ expected struct `std::boxed::Box`, found fn item\n    |\n-   = note: expected type `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n-              found type `fn() {f}`\n+   = note: expected struct `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n+             found fn item `fn() {f}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5216.rs:8:19\n    |\n LL | pub static D: T = g;\n    |                   ^ expected struct `std::boxed::Box`, found fn item\n    |\n-   = note: expected type `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n-              found type `fn() {g}`\n+   = note: expected struct `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n+             found fn item `fn() {g}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd37d3e5593812533596f1861a6fe1998e49eb34", "filename": "src/test/ui/issues/issue-52533-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     gimme(|x, y| y)\n    |                  ^ lifetime mismatch\n    |\n-   = note: expected type `&Foo<'_, '_, u32>`\n-              found type `&Foo<'_, '_, u32>`\n+   = note: expected reference `&Foo<'_, '_, u32>`\n+              found reference `&Foo<'_, '_, u32>`\n note: the anonymous lifetime #4 defined on the body at 9:11...\n   --> $DIR/issue-52533-1.rs:9:11\n    |"}, {"sha": "83e5ddc48261ac08cafa9797e8aa85362b4230e8", "filename": "src/test/ui/issues/issue-53348.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,7 +10,7 @@ fn main() {\n         a = *i.to_string();\n         //~^ ERROR mismatched types\n         //~| NOTE expected struct `std::string::String`, found str\n-        //~| NOTE expected type\n+        //~| NOTE expected struct\n         v2.push(a);\n     }\n }"}, {"sha": "949d9a2f47d3db58a256b5e0a163685c581f0ae4", "filename": "src/test/ui/issues/issue-53348.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         a = *i.to_string();\n    |             ^^^^^^^^^^^^^^ expected struct `std::string::String`, found str\n    |\n-   = note: expected type `std::string::String`\n-              found type `str`\n+   = note: expected struct `std::string::String`\n+                found type `str`\n \n error: aborting due to previous error\n "}, {"sha": "f5e32e78d8794f38ec9bfffc289f6de8388b0f1a", "filename": "src/test/ui/issues/issue-5358-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,9 +5,9 @@ fn main() {\n     match S(Either::Left(5)) {\n         Either::Right(_) => {}\n         //~^ ERROR mismatched types\n-        //~| expected type `S`\n-        //~| found type `Either<_, _>`\n         //~| expected struct `S`, found enum `Either`\n+        //~| expected struct `S`\n+        //~| found enum `Either<_, _>`\n         _ => {}\n     }\n }"}, {"sha": "ec79d874d0339efc4024f25903bbb3ae2a7b8c1a", "filename": "src/test/ui/issues/issue-5358-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     match S(Either::Left(5)) {\n LL |         Either::Right(_) => {}\n    |         ^^^^^^^^^^^^^^^^ expected struct `S`, found enum `Either`\n    |\n-   = note: expected type `S`\n-              found type `Either<_, _>`\n+   = note: expected struct `S`\n+                found enum `Either<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "e3f2cb8c4101d1d6534915235822cb1b8a31bac7", "filename": "src/test/ui/issues/issue-53692.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |         let items_clone: Vec<i32> = ref_items.clone();\n    |                                     expected struct `std::vec::Vec`, found &[i32]\n    |                                     help: try using a conversion method: `ref_items.to_vec()`\n    |\n-   = note: expected type `std::vec::Vec<i32>`\n-              found type `&[i32]`\n+   = note: expected struct `std::vec::Vec<i32>`\n+           found reference `&[i32]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53692.rs:11:30\n@@ -19,8 +19,8 @@ LL |         let string: String = s.clone();\n    |                              expected struct `std::string::String`, found &str\n    |                              help: try using a conversion method: `s.to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `&str`\n+   = note: expected struct `std::string::String`\n+           found reference `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fc6370b2d31cb43110decd386702cd049a690fe2", "filename": "src/test/ui/issues/issue-56943.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: issue_56943::S = issue_56943::S2;\n    |                             ^^^^^^^^^^^^^^^ expected struct `issue_56943::S`, found struct `issue_56943::S2`\n    |\n-   = note: expected type `issue_56943::S`\n-              found type `issue_56943::S2`\n+   = note: expected struct `issue_56943::S`\n+              found struct `issue_56943::S2`\n \n error: aborting due to previous error\n "}, {"sha": "db6fa9db8ff47dbcee5b5e138a415f9c33570f0f", "filename": "src/test/ui/issues/issue-57741-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     let y = match x {\n LL |         S::A { a } | S::B { b: a } => a,\n    |         ^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n    |\n-   = note: expected type `std::boxed::Box<u32>`\n-              found type `S`\n+   = note: expected struct `std::boxed::Box<u32>`\n+                found enum `S`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57741-1.rs:14:22\n@@ -17,8 +17,8 @@ LL |     let y = match x {\n LL |         S::A { a } | S::B { b: a } => a,\n    |                      ^^^^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n    |\n-   = note: expected type `std::boxed::Box<u32>`\n-              found type `S`\n+   = note: expected struct `std::boxed::Box<u32>`\n+                found enum `S`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c36dea7bf5547e9463d7d8808da3a01be2158610", "filename": "src/test/ui/issues/issue-57741.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL |     let y = match x {\n LL |         T::A(a) | T::B(a) => a,\n    |         ^^^^^^^ expected struct `std::boxed::Box`, found enum `T`\n    |\n-   = note: expected type `std::boxed::Box<T>`\n-              found type `T`\n+   = note: expected struct `std::boxed::Box<T>`\n+                found enum `T`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57741.rs:20:19\n@@ -23,8 +23,8 @@ LL |     let y = match x {\n LL |         T::A(a) | T::B(a) => a,\n    |                   ^^^^^^^ expected struct `std::boxed::Box`, found enum `T`\n    |\n-   = note: expected type `std::boxed::Box<T>`\n-              found type `T`\n+   = note: expected struct `std::boxed::Box<T>`\n+                found enum `T`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57741.rs:27:9\n@@ -37,8 +37,8 @@ LL |     let y = match x {\n LL |         S::A { a } | S::B { b: a } => a,\n    |         ^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n    |\n-   = note: expected type `std::boxed::Box<S>`\n-              found type `S`\n+   = note: expected struct `std::boxed::Box<S>`\n+                found enum `S`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57741.rs:27:22\n@@ -51,8 +51,8 @@ LL |     let y = match x {\n LL |         S::A { a } | S::B { b: a } => a,\n    |                      ^^^^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n    |\n-   = note: expected type `std::boxed::Box<S>`\n-              found type `S`\n+   = note: expected struct `std::boxed::Box<S>`\n+                found enum `S`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "35ada71a1f128601cdacbc6865a1be121dc86f06", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -13,8 +13,8 @@ error[E0308]: mismatched types\n LL |     foo > 12;\n    |           ^^ expected fn item, found integer\n    |\n-   = note: expected type `fn() -> i32 {foo}`\n-              found type `i32`\n+   = note: expected fn item `fn() -> i32 {foo}`\n+                 found type `i32`\n \n error[E0369]: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}`\n   --> $DIR/issue-59488.rs:18:9\n@@ -31,8 +31,8 @@ error[E0308]: mismatched types\n LL |     bar > 13;\n    |           ^^ expected fn item, found integer\n    |\n-   = note: expected type `fn(i64) -> i64 {bar}`\n-              found type `i64`\n+   = note: expected fn item `fn(i64) -> i64 {bar}`\n+                 found type `i64`\n \n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n   --> $DIR/issue-59488.rs:22:9\n@@ -67,8 +67,8 @@ error[E0308]: mismatched types\n LL |     foo > bar;\n    |           ^^^ expected fn item, found a different fn item\n    |\n-   = note: expected type `fn() -> i32 {foo}`\n-              found type `fn(i64) -> i64 {bar}`\n+   = note: expected fn item `fn() -> i32 {foo}`\n+              found fn item `fn(i64) -> i64 {bar}`\n \n error[E0369]: binary operation `==` cannot be applied to type `fn(usize) -> Foo {Foo::Bar}`\n   --> $DIR/issue-59488.rs:30:5"}, {"sha": "150916c03668add7142659857097b1d3911246b6", "filename": "src/test/ui/issues/issue-59756.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     foo()?\n    |     |    help: try removing this `?`\n    |     expected enum `std::result::Result`, found struct `A`\n    |\n-   = note: expected type `std::result::Result<A, B>`\n-              found type `A`\n+   = note: expected enum `std::result::Result<A, B>`\n+            found struct `A`\n \n error: aborting due to previous error\n "}, {"sha": "8690ff4731fed645c070d21862320c4dd6e637b6", "filename": "src/test/ui/issues/issue-61106.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     foo(x.clone());\n    |         expected &str, found struct `std::string::String`\n    |         help: consider borrowing here: `&x`\n    |\n-   = note: expected type `&str`\n-              found type `std::string::String`\n+   = note: expected reference `&str`\n+                 found struct `std::string::String`\n \n error: aborting due to previous error\n "}, {"sha": "dbdb14d7160ec56203abf57c25fea4909d8f0d46", "filename": "src/test/ui/issues/issue-61882.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -13,8 +13,8 @@ error[E0308]: mismatched types\n LL |     const B: A<u8> = Self(0);\n    |                      ^^^^^^^ expected u8, found bool\n    |\n-   = note: expected type `A<u8>`\n-              found type `A<bool>`\n+   = note: expected struct `A<u8>`\n+              found struct `A<bool>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "246b53189c80b2a8b7bb2055b2a72a55822c13f5", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -8,7 +8,7 @@ LL | fn foo(b: bool) -> Result<bool,String> {\n LL |     Err(\"bar\".to_string());\n    |                           - help: consider removing this semicolon\n    |\n-   = note: expected type `std::result::Result<bool, std::string::String>`\n+   = note: expected enum `std::result::Result<bool, std::string::String>`\n               found type `()`\n \n error: aborting due to previous error"}, {"sha": "ef61eac7baa82802644c5e03cc7dacf5eebbea0e", "filename": "src/test/ui/issues/issue-7061.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7061.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -3,8 +3,8 @@ struct BarStruct;\n impl<'a> BarStruct {\n     fn foo(&'a mut self) -> Box<BarStruct> { self }\n     //~^ ERROR mismatched types\n-    //~| expected type `std::boxed::Box<BarStruct>`\n-    //~| found type `&'a mut BarStruct`\n+    //~| expected struct `std::boxed::Box<BarStruct>`\n+    //~| found mutable reference `&'a mut BarStruct`\n }\n \n fn main() {}"}, {"sha": "223cc48c7dd617880297eda8608646089bf22103", "filename": "src/test/ui/issues/issue-7061.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     fn foo(&'a mut self) -> Box<BarStruct> { self }\n    |                             |\n    |                             expected `std::boxed::Box<BarStruct>` because of return type\n    |\n-   = note: expected type `std::boxed::Box<BarStruct>`\n-              found type `&'a mut BarStruct`\n+   = note:         expected struct `std::boxed::Box<BarStruct>`\n+           found mutable reference `&'a mut BarStruct`\n \n error: aborting due to previous error\n "}, {"sha": "09fa6c525082b867bcc33f33b837681066d159e2", "filename": "src/test/ui/issues/issue-7092.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7092.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,9 +5,9 @@ fn foo(x: Whatever) {\n     match x {\n         Some(field) =>\n //~^ ERROR mismatched types\n-//~| expected type `Whatever`\n-//~| found type `std::option::Option<_>`\n //~| expected enum `Whatever`, found enum `std::option::Option`\n+//~| expected enum `Whatever`\n+//~| found enum `std::option::Option<_>`\n             field.access(),\n     }\n }"}, {"sha": "05c00da16b1b1882cdf3797987cf7d3a206dcde7", "filename": "src/test/ui/issues/issue-7092.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7092.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     match x {\n LL |         Some(field) =>\n    |         ^^^^^^^^^^^ expected enum `Whatever`, found enum `std::option::Option`\n    |\n-   = note: expected type `Whatever`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `Whatever`\n+              found enum `std::option::Option<_>`\n \n error: aborting due to previous error\n "}, {"sha": "3074052f14f2047caac4dbffb10bd4c34468d4ff", "filename": "src/test/ui/issues/issue-7867.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7867.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,9 +6,9 @@ fn main() {\n     match (true, false) {\n         A::B => (),\n         //~^ ERROR mismatched types\n-        //~| expected type `(bool, bool)`\n-        //~| found type `A`\n         //~| expected tuple, found enum `A`\n+        //~| expected tuple `(bool, bool)`\n+        //~| found enum `A`\n         _ => ()\n     }\n }"}, {"sha": "58e82facf802e870df8a780df5bfb9121ff1063d", "filename": "src/test/ui/issues/issue-7867.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7867.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-7867.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7867.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         A::B => (),\n    |         ^^^^ expected tuple, found enum `A`\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `A`\n+   = note: expected tuple `(bool, bool)`\n+               found enum `A`\n \n error: aborting due to previous error\n "}, {"sha": "6203c2fa84ef750ee7afb4527561d3a5ee8f8602", "filename": "src/test/ui/issues/issue-9575.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: start function has wrong type\n LL | fn start(argc: isize, argv: *const *const u8, crate_map: *const u8) -> isize {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected type `fn(isize, *const *const u8) -> isize`\n-              found type `fn(isize, *const *const u8, *const u8) -> isize`\n+   = note: expected fn pointer `fn(isize, *const *const u8) -> isize`\n+              found fn pointer `fn(isize, *const *const u8, *const u8) -> isize`\n \n error: aborting due to previous error\n "}, {"sha": "53c9682acfeeb2f8cfa3bb4dbde184d55900727e", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -15,8 +15,8 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected type `std::string::String`\n-   found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n+     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -35,8 +35,8 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected type `std::string::String`\n-   found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n+     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -55,8 +55,8 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected type `std::string::String`\n-   found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n+     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -75,8 +75,8 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected type `std::string::String`\n-   found type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n+     found type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "6f2d1d0f234f75c001f45ad409751fdda882f06b", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -15,8 +15,8 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected type `std::string::String`\n-   found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n+     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -35,8 +35,8 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected type `std::string::String`\n-   found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n+     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -55,8 +55,8 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected type `std::string::String`\n-   found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n+     found type `{integer}`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -75,8 +75,8 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected type `std::string::String`\n-   found type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n+     found type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "93160a1c5e51520624751ad74430bac4c2f10996", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     ref_obj(x)\n    |             ^ lifetime mismatch\n    |\n-   = note: expected type `&std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n-              found type `&std::boxed::Box<(dyn std::ops::Fn() + 'a)>`\n+   = note: expected reference `&std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n+              found reference `&std::boxed::Box<(dyn std::ops::Fn() + 'a)>`\n note: the lifetime `'a` as defined on the function body at 32:10...\n   --> $DIR/lifetime-bound-will-change-warning.rs:32:10\n    |\n@@ -19,8 +19,8 @@ error[E0308]: mismatched types\n LL |     lib::ref_obj(x)\n    |                  ^ lifetime mismatch\n    |\n-   = note: expected type `&std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n-              found type `&std::boxed::Box<(dyn std::ops::Fn() + 'a)>`\n+   = note: expected reference `&std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n+              found reference `&std::boxed::Box<(dyn std::ops::Fn() + 'a)>`\n note: the lifetime `'a` as defined on the function body at 37:12...\n   --> $DIR/lifetime-bound-will-change-warning.rs:37:12\n    |"}, {"sha": "6fbede9778d45075fcdaf91a626f883daff77cd7", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -118,17 +118,17 @@ error[E0308]: mismatched types\n LL |         break \"asdf\";\n    |               ^^^^^^ expected i32, found reference\n    |\n-   = note: expected type `i32`\n-              found type `&'static str`\n+   = note:   expected type `i32`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:21:31\n    |\n LL |             break 'outer_loop \"nope\";\n    |                               ^^^^^^ expected i32, found reference\n    |\n-   = note: expected type `i32`\n-              found type `&'static str`\n+   = note:   expected type `i32`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:73:26\n@@ -146,7 +146,7 @@ LL |         break (break, break);\n    |               ^^^^^^^^^^^^^^ expected (), found tuple\n    |\n    = note: expected type `()`\n-              found type `(!, !)`\n+             found tuple `(!, !)`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:85:15"}, {"sha": "1dce9df96df3ffa521b38cd30c031d286daf4662", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,8 +10,8 @@ LL | |         _ => y,\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `for<'r, 's> fn(&'r u8, &'s u8)`\n-              found type `for<'a> fn(&'a u8, &'a u8)`\n+   = note:    expected type `for<'r, 's> fn(&'r u8, &'s u8)`\n+           found fn pointer `for<'a> fn(&'a u8, &'a u8)`\n \n error: aborting due to previous error\n "}, {"sha": "18de7a40ee17910a6d9409c88230fd89048c2ee3", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,8 +10,8 @@ LL | |         _ => y,\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n-              found type `&dyn for<'a> Foo<&'a u8, &'a u8>`\n+   = note:   expected type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+           found reference `&dyn for<'a> Foo<&'a u8, &'a u8>`\n \n error: aborting due to previous error\n "}, {"sha": "e75d4d7acfd5e5de66e1626954f1a3675b18ae89", "filename": "src/test/ui/main-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmain-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmain-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-type.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0580]: main function has wrong type\n LL | fn main(foo: S) {\n    | ^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected type `fn()`\n-              found type `fn(S)`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn(S)`\n \n error: aborting due to previous error\n "}, {"sha": "f717cf4ea75c4823926644e230b91d95e1cadbfe", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -13,8 +13,8 @@ LL | |         E::F => \"\",\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `{integer}`\n-              found type `&'static str`\n+   = note:   expected type `{integer}`\n+           found reference `&'static str`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "3e9f729dc09f5934d5e374e7dc19acfe4ac6c305", "filename": "src/test/ui/match/match-ref-mut-invariance.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         match self.0 { ref mut x => x }\n    |                                     ^ lifetime mismatch\n    |\n-   = note: expected type `&'a mut &'a i32`\n-              found type `&'a mut &'b i32`\n+   = note: expected mutable reference `&'a mut &'a i32`\n+              found mutable reference `&'a mut &'b i32`\n note: the lifetime `'a` as defined on the method body at 9:12...\n   --> $DIR/match-ref-mut-invariance.rs:9:12\n    |"}, {"sha": "303aba3422cec62ba86949462ba41c60f0e99e72", "filename": "src/test/ui/match/match-ref-mut-let-invariance.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         x\n    |         ^ lifetime mismatch\n    |\n-   = note: expected type `&'a mut &'a i32`\n-              found type `&'a mut &'b i32`\n+   = note: expected mutable reference `&'a mut &'a i32`\n+              found mutable reference `&'a mut &'b i32`\n note: the lifetime `'a` as defined on the method body at 9:12...\n   --> $DIR/match-ref-mut-let-invariance.rs:9:12\n    |"}, {"sha": "e82d9581b2d1e0f7f8b77ae8fcf72dc676bb90de", "filename": "src/test/ui/match/match-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,9 +5,9 @@ fn main() {\n     match (S { a: 1 }) {\n         E::C(_) => (),\n         //~^ ERROR mismatched types\n-        //~| expected type `S`\n-        //~| found type `E`\n         //~| expected struct `S`, found enum `E`\n+        //~| expected struct `S`\n+        //~| found enum `E`\n         _ => ()\n     }\n }"}, {"sha": "3d4a19a93170d2b998b957a3efb5ecb2ec17227e", "filename": "src/test/ui/match/match-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     match (S { a: 1 }) {\n LL |         E::C(_) => (),\n    |         ^^^^^^^ expected struct `S`, found enum `E`\n    |\n-   = note: expected type `S`\n-              found type `E`\n+   = note: expected struct `S`\n+                found enum `E`\n \n error: aborting due to previous error\n "}, {"sha": "5dd7b564d9dc23a20e61db4e548f5f9fe97da265", "filename": "src/test/ui/match/match-tag-nullary.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | fn main() { let x: A = A::A; match x { B::B => { } } }\n    |                                        ^^^^ expected enum `A`, found enum `B`\n    |\n-   = note: expected type `A`\n-              found type `B`\n+   = note: expected enum `A`\n+              found enum `B`\n \n error: aborting due to previous error\n "}, {"sha": "833d8838e57a8fce5042d431b116a16b98fbf50c", "filename": "src/test/ui/match/match-tag-unary.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL | fn main() { let x: A = A::A(0); match x { B::B(y) => { } } }\n    |                                       |\n    |                                       this match expression has type `A`\n    |\n-   = note: expected type `A`\n-              found type `B`\n+   = note: expected enum `A`\n+              found enum `B`\n \n error: aborting due to previous error\n "}, {"sha": "169c14c0f5354b1fac53ae1ee894df3f5ee3174f", "filename": "src/test/ui/methods/method-self-arg-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,11 +9,11 @@ impl Foo {\n fn main() {\n     let x = Foo;\n     Foo::bar(x); //~  ERROR mismatched types\n-                 //~| expected type `&Foo`\n-                 //~| found type `Foo`\n                  //~| expected &Foo, found struct `Foo`\n+                 //~| expected reference `&Foo`\n+                 //~| found struct `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n-                      //~| expected type `&Foo`\n-                      //~| found type `&{integer}`\n                       //~| expected struct `Foo`, found integer\n+                      //~| expected reference `&Foo`\n+                      //~| found reference `&{integer}`\n }"}, {"sha": "e0cb0915fe109a7653e6fe2e51cd0a0f773bd700", "filename": "src/test/ui/methods/method-self-arg-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,17 +7,17 @@ LL |     Foo::bar(x);\n    |              expected &Foo, found struct `Foo`\n    |              help: consider borrowing here: `&x`\n    |\n-   = note: expected type `&Foo`\n-              found type `Foo`\n+   = note: expected reference `&Foo`\n+                 found struct `Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/method-self-arg-1.rs:15:14\n    |\n LL |     Foo::bar(&42);\n    |              ^^^ expected struct `Foo`, found integer\n    |\n-   = note: expected type `&Foo`\n-              found type `&{integer}`\n+   = note: expected reference `&Foo`\n+              found reference `&{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4e6af20db1b9472c9b776c71b2b52abf2687c2fc", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     fn foo(x: u16);\n LL |     fn foo(x: i16) { }\n    |               ^^^ expected u16, found i16\n    |\n-   = note: expected type `fn(u16)`\n-              found type `fn(i16)`\n+   = note: expected fn pointer `fn(u16)`\n+              found fn pointer `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/E0053.rs:11:12\n@@ -19,8 +19,8 @@ LL |     fn bar(&self);\n LL |     fn bar(&mut self) { }\n    |            ^^^^^^^^^ types differ in mutability\n    |\n-   = note: expected type `fn(&Bar)`\n-              found type `fn(&mut Bar)`\n+   = note: expected fn pointer `fn(&Bar)`\n+              found fn pointer `fn(&mut Bar)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&self) { }"}, {"sha": "81cc8e29e49c5ed3149e0933a83cc80d1eeec46f", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL | fn a() -> Foo {\n LL |     Some(Foo { bar: 1 })\n    |     ^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `std::option::Option`\n    |\n-   = note: expected type `Foo`\n-              found type `std::option::Option<Foo>`\n+   = note: expected struct `Foo`\n+                found enum `std::option::Option<Foo>`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:20:5\n@@ -17,8 +17,8 @@ LL | fn a2() -> Foo {\n LL |     Ok(Foo { bar: 1})\n    |     ^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `std::result::Result`\n    |\n-   = note: expected type `Foo`\n-              found type `std::result::Result<Foo, _>`\n+   = note: expected struct `Foo`\n+                found enum `std::result::Result<Foo, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:24:5\n@@ -28,8 +28,8 @@ LL | fn b() -> Option<Foo> {\n LL |     Foo { bar: 1 }\n    |     ^^^^^^^^^^^^^^ expected enum `std::option::Option`, found struct `Foo`\n    |\n-   = note: expected type `std::option::Option<Foo>`\n-              found type `Foo`\n+   = note: expected enum `std::option::Option<Foo>`\n+            found struct `Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:28:5\n@@ -39,8 +39,8 @@ LL | fn c() -> Result<Foo, Bar> {\n LL |     Foo { bar: 1 }\n    |     ^^^^^^^^^^^^^^ expected enum `std::result::Result`, found struct `Foo`\n    |\n-   = note: expected type `std::result::Result<Foo, Bar>`\n-              found type `Foo`\n+   = note: expected enum `std::result::Result<Foo, Bar>`\n+            found struct `Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:39:5\n@@ -51,8 +51,8 @@ LL | fn d() -> X<X<String, String>, String> {\n LL |     x\n    |     ^ expected struct `std::string::String`, found integer\n    |\n-   = note: expected type `X<X<_, std::string::String>, std::string::String>`\n-              found type `X<X<_, {integer}>, {integer}>`\n+   = note: expected struct `X<X<_, std::string::String>, std::string::String>`\n+              found struct `X<X<_, {integer}>, {integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:50:5\n@@ -63,8 +63,8 @@ LL | fn e() -> X<X<String, String>, String> {\n LL |     x\n    |     ^ expected struct `std::string::String`, found integer\n    |\n-   = note: expected type `X<X<_, std::string::String>, _>`\n-              found type `X<X<_, {integer}>, _>`\n+   = note: expected struct `X<X<_, std::string::String>, _>`\n+              found struct `X<X<_, {integer}>, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:54:5\n@@ -77,8 +77,8 @@ LL |     1+2\n    |     expected struct `std::string::String`, found integer\n    |     help: try using a conversion method: `(1+2).to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `{integer}`\n+   = note: expected struct `std::string::String`\n+                found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:59:5\n@@ -91,8 +91,8 @@ LL |     -2\n    |     expected struct `std::string::String`, found integer\n    |     help: try using a conversion method: `(-2).to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `{integer}`\n+   = note: expected struct `std::string::String`\n+                found type `{integer}`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "350dd69a1fd78e2b0b273abdef99144a94fdc83e", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL | fn function(t: &mut dyn Trait) {\n LL |     t as *mut dyn Trait\n    |     ^^^^^^^^^^^^^^^^^^^ expected (), found *-ptr\n    |\n-   = note: expected type `()`\n-              found type `*mut dyn Trait`\n+   = note:     expected type `()`\n+           found raw pointer `*mut dyn Trait`\n \n error: aborting due to previous error\n "}, {"sha": "c01f5d3ca4b94c3510804dd9d43f92c641d124fc", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     fn parse(text: &str) -> Option<bool> {\n LL |         Some(true)\n    |              ^^^^ expected type parameter `bool`, found bool\n    |\n-   = note: expected type `bool` (type parameter `bool`)\n-              found type `bool` (bool)\n+   = note: expected type parameter `bool` (type parameter `bool`)\n+                        found type `bool` (bool)\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "48a123fd28a138809e74cb05344328ffc637e04b", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL | fn foo(&foo: Foo) {\n    |        expected struct `Foo`, found reference\n    |        help: did you mean `foo`: `&Foo`\n    |\n-   = note: expected type `Foo`\n-              found type `&_`\n+   = note: expected struct `Foo`\n+           found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:18:9\n@@ -19,17 +19,17 @@ LL | fn agh(&&bar: &u32) {\n    |         expected u32, found reference\n    |         help: you can probably remove the explicit borrow: `bar`\n    |\n-   = note: expected type `u32`\n-              found type `&_`\n+   = note:   expected type `u32`\n+           found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:21:8\n    |\n LL | fn bgh(&&bar: u32) {\n    |        ^^^^^ expected u32, found reference\n    |\n-   = note: expected type `u32`\n-              found type `&_`\n+   = note:   expected type `u32`\n+           found reference `&_`\n \n error[E0529]: expected an array or slice, found `u32`\n   --> $DIR/issue-38371.rs:24:9"}, {"sha": "b5daf195ef78af4dc7b14178c7383bb3c304a9ef", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let ans = s(\"what\");\n    |                 ^^^^^^ expected isize, found reference\n    |\n-   = note: expected type `isize`\n-              found type `&'static str`\n+   = note:   expected type `isize`\n+           found reference `&'static str`\n \n error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/overloaded-calls-bad.rs:29:15"}, {"sha": "d9dd186624fb055527521b6eb7d484195342ae82", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     a(x);\n    |       ^ expected trait `Foo + std::marker::Send`, found trait `Foo`\n    |\n-   = note: expected type `std::boxed::Box<(dyn Foo + std::marker::Send + 'static)>`\n-              found type `std::boxed::Box<(dyn Foo + 'static)>`\n+   = note: expected struct `std::boxed::Box<(dyn Foo + std::marker::Send + 'static)>`\n+              found struct `std::boxed::Box<(dyn Foo + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "050bb326130d52da4ecbc4ab7d7e0f7d99a959dd", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     fn foo(x: u16);\n LL |     fn foo(x: i16) { }\n    |               ^^^ expected u16, found i16\n    |\n-   = note: expected type `fn(u16)`\n-              found type `fn(i16)`\n+   = note: expected fn pointer `fn(u16)`\n+              found fn pointer `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:12:28\n@@ -19,8 +19,8 @@ LL |     fn bar(&mut self, bar: &mut Bar);\n LL |     fn bar(&mut self, bar: &Bar) { }\n    |                            ^^^^ types differ in mutability\n    |\n-   = note: expected type `fn(&mut Bar, &mut Bar)`\n-              found type `fn(&mut Bar, &Bar)`\n+   = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n+              found fn pointer `fn(&mut Bar, &Bar)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&mut self, bar: &mut Bar) { }"}, {"sha": "d79d230ca960270d498fd6e9d3d97880a2984b9d", "filename": "src/test/ui/mut/mut-cross-borrowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     f(x)\n    |       expected &mut isize, found struct `std::boxed::Box`\n    |       help: consider mutably borrowing here: `&mut x`\n    |\n-   = note: expected type `&mut isize`\n-              found type `std::boxed::Box<{integer}>`\n+   = note: expected mutable reference `&mut isize`\n+                         found struct `std::boxed::Box<{integer}>`\n \n error: aborting due to previous error\n "}, {"sha": "700261fe40b65ad9a473b00eba39c8190a59933a", "filename": "src/test/ui/mut/mut-pattern-mismatched.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ fn main() {\n     // (separate lines to ensure the spans are accurate)\n \n      let &_ //~  ERROR mismatched types\n-            //~| expected type `&mut {integer}`\n-            //~| found type `&_`\n+            //~| expected mutable reference `&mut {integer}`\n+            //~| found reference `&_`\n             //~| types differ in mutability\n         = foo;\n     let &mut _ = foo;\n \n     let bar = &1;\n     let &_ = bar;\n     let &mut _ //~  ERROR mismatched types\n-               //~| expected type `&{integer}`\n-               //~| found type `&mut _`\n+               //~| expected reference `&{integer}`\n+               //~| found mutable reference `&mut _`\n                //~| types differ in mutability\n          = bar;\n }"}, {"sha": "ccc8ac1278c63576c2ed2d253c653f312e9f8338", "filename": "src/test/ui/mut/mut-pattern-mismatched.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |      let &_\n    |          ^^ types differ in mutability\n    |\n-   = note: expected type `&mut {integer}`\n-              found type `&_`\n+   = note: expected mutable reference `&mut {integer}`\n+                      found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/mut-pattern-mismatched.rs:15:9\n    |\n LL |     let &mut _\n    |         ^^^^^^ types differ in mutability\n    |\n-   = note: expected type `&{integer}`\n-              found type `&mut _`\n+   = note:      expected reference `&{integer}`\n+           found mutable reference `&mut _`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cf3952bca11dc4af2864e82d288934f7ee704d3a", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(\"wow\");\n    |         ^^^^^ expected !, found reference\n    |\n-   = note: expected type `!`\n-              found type `&'static str`\n+   = note:   expected type `!`\n+           found reference `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "fcdb9ef6c921167d19f9c6b1300e7caa4b30ba2f", "filename": "src/test/ui/never_type/never-assign-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let x: ! = \"hello\";\n    |                ^^^^^^^ expected !, found reference\n    |\n-   = note: expected type `!`\n-              found type `&'static str`\n+   = note:   expected type `!`\n+           found reference `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "5158420c73782ed6279c255cb9f34317cc254a5f", "filename": "src/test/ui/nll/trait-associated-constant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     const AC: Option<&'c str> = None;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `std::option::Option<&'b str>`\n-              found type `std::option::Option<&'c str>`\n+   = note: expected enum `std::option::Option<&'b str>`\n+              found enum `std::option::Option<&'c str>`\n note: the lifetime `'c` as defined on the impl at 20:18...\n   --> $DIR/trait-associated-constant.rs:20:18\n    |"}, {"sha": "d3c04fc562fd24e942a437f74ad8f4de16805df8", "filename": "src/test/ui/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoexporttypeexe.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,6 +10,6 @@ fn main() {\n   let x: isize = noexporttypelib::foo();\n     //~^ ERROR mismatched types\n     //~| expected type `isize`\n-    //~| found type `std::option::Option<isize>`\n+    //~| found enum `std::option::Option<isize>`\n     //~| expected isize, found enum `std::option::Option`\n }"}, {"sha": "3def891110d9e3bf5e83be5dc7669b7a9d6a2093", "filename": "src/test/ui/noexporttypeexe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,7 +5,7 @@ LL |   let x: isize = noexporttypelib::foo();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^ expected isize, found enum `std::option::Option`\n    |\n    = note: expected type `isize`\n-              found type `std::option::Option<isize>`\n+              found enum `std::option::Option<isize>`\n \n error: aborting due to previous error\n "}, {"sha": "86ec58d3f068a114f22140f20f89784b4466c248", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-box-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     ss.t = t;\n    |            ^ lifetime mismatch\n    |\n-   = note: expected type `&'a std::boxed::Box<(dyn Test + 'static)>`\n-              found type `&'a std::boxed::Box<(dyn Test + 'a)>`\n+   = note: expected reference `&'a std::boxed::Box<(dyn Test + 'static)>`\n+              found reference `&'a std::boxed::Box<(dyn Test + 'a)>`\n note: the lifetime `'a` as defined on the function body at 14:6...\n   --> $DIR/object-lifetime-default-from-rptr-box-error.rs:14:6\n    |"}, {"sha": "65f8a32f06dd2a74ef4d974925d0a65804665e5e", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     ss.t = t;\n    |            ^ lifetime mismatch\n    |\n-   = note: expected type `&'a MyBox<(dyn Test + 'static)>`\n-              found type `&'a MyBox<(dyn Test + 'a)>`\n+   = note: expected reference `&'a MyBox<(dyn Test + 'static)>`\n+              found reference `&'a MyBox<(dyn Test + 'a)>`\n note: the lifetime `'a` as defined on the function body at 20:6...\n   --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:20:6\n    |"}, {"sha": "404717ff55e5ec818dac19ebf0e1d068af45cb46", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -16,8 +16,8 @@ error[E0308]: mismatched types\n LL |     load0(ss)\n    |           ^^ lifetime mismatch\n    |\n-   = note: expected type `&MyBox<(dyn SomeTrait + 'static)>`\n-              found type `&MyBox<(dyn SomeTrait + 'a)>`\n+   = note: expected reference `&MyBox<(dyn SomeTrait + 'static)>`\n+              found reference `&MyBox<(dyn SomeTrait + 'a)>`\n note: the lifetime `'a` as defined on the function body at 30:10...\n   --> $DIR/object-lifetime-default-mybox.rs:30:10\n    |"}, {"sha": "5985b2aecfc203f4784eb2b5e7f3cf40bb4643c0", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -123,8 +123,8 @@ LL |     let recovery_witness: String = 0;\n    |                                    expected struct `std::string::String`, found integer\n    |                                    help: try using a conversion method: `0.to_string()`\n    |\n-   = note: expected type `std::string::String`\n-              found type `{integer}`\n+   = note: expected struct `std::string::String`\n+                found type `{integer}`\n \n error: aborting due to 16 previous errors\n "}, {"sha": "9554cf42ee383c1cb64a30661e6752951dadf303", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -22,26 +22,26 @@ error[E0308]: mismatched types\n LL |     f(\"\", \"\");\n    |       ^^ expected u8, found reference\n    |\n-   = note: expected type `u8`\n-              found type `&'static str`\n+   = note:   expected type `u8`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:18:11\n    |\n LL |     f(\"\", \"\");\n    |           ^^ expected u8, found reference\n    |\n-   = note: expected type `u8`\n-              found type `&'static str`\n+   = note:   expected type `u8`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:25:9\n    |\n LL |     bar(\"\");\n    |         ^^ expected i32, found reference\n    |\n-   = note: expected type `i32`\n-              found type `&'static str`\n+   = note:   expected type `i32`\n+           found reference `&'static str`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fbd1fc28dd6e7f882eb7818000b4514418c7c2bd", "filename": "src/test/ui/parser/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -45,8 +45,8 @@ error[E0308]: mismatched types\n LL |     let a: usize = \"\";\n    |                    ^^ expected usize, found reference\n    |\n-   = note: expected type `usize`\n-              found type `&'static str`\n+   = note:   expected type `usize`\n+           found reference `&'static str`\n \n error[E0277]: can't compare `&str` with `char`\n   --> $DIR/lex-bad-char-literals-6.rs:12:10"}, {"sha": "4a7a28825ffc2f0100096469bced04bec8036656", "filename": "src/test/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -16,8 +16,8 @@ error[E0308]: mismatched types\n LL |     let x: usize = \"\";\n    |                    ^^ expected usize, found reference\n    |\n-   = note: expected type `usize`\n-              found type `&'static str`\n+   = note:   expected type `usize`\n+           found reference `&'static str`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3513b516ea81abd3da1dfb42cd0647e428b0c18a", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -21,8 +21,8 @@ LL |     match (0, 1) {\n LL |         (PAT ..) => {}\n    |          ^^^^^^ expected tuple, found u8\n    |\n-   = note: expected type `({integer}, {integer})`\n-              found type `u8`\n+   = note: expected tuple `({integer}, {integer})`\n+               found type `u8`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "70eefd8a1701e8cd8bf63c37f648dbf4c7fe8046", "filename": "src/test/ui/parser/recover-tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,8 +10,8 @@ error[E0308]: mismatched types\n LL |     let y: usize = \"\";\n    |                    ^^ expected usize, found reference\n    |\n-   = note: expected type `usize`\n-              found type `&'static str`\n+   = note:   expected type `usize`\n+           found reference `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5f70588c0b206869a25307ae41453e408c174f43", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -24,7 +24,7 @@ LL | |     }.hi() {\n    | |__________^ expected bool, found closure\n    |\n    = note: expected type `bool`\n-              found type `[closure@$DIR/struct-literal-restrictions-in-lamda.rs:12:11: 14:11]`\n+           found closure `[closure@$DIR/struct-literal-restrictions-in-lamda.rs:12:11: 14:11]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c4a9251b1b1dbca3e9603485dc28372728e7d56d", "filename": "src/test/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -16,7 +16,7 @@ LL |     let _: usize = unclosed_delim_mod::new();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected usize, found enum `std::result::Result`\n    |\n    = note: expected type `usize`\n-              found type `std::result::Result<unclosed_delim_mod::Value, ()>`\n+              found enum `std::result::Result<unclosed_delim_mod::Value, ()>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "25d02b8627cbcbb4d9ac5ce00716018f388c63ef", "filename": "src/test/ui/pattern/pat-tuple-overfield.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |         (1, 2, 3, 4) => {}\n    |         ^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 4 elements\n    |\n-   = note: expected type `({integer}, {integer}, {integer})`\n-              found type `(_, _, _, _)`\n+   = note: expected tuple `({integer}, {integer}, {integer})`\n+              found tuple `(_, _, _, _)`\n \n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-overfield.rs:6:9\n    |\n LL |         (1, 2, .., 3, 4) => {}\n    |         ^^^^^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 4 elements\n    |\n-   = note: expected type `({integer}, {integer}, {integer})`\n-              found type `(_, _, _, _)`\n+   = note: expected tuple `({integer}, {integer}, {integer})`\n+              found tuple `(_, _, _, _)`\n \n error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-overfield.rs:10:9"}, {"sha": "f21da3b55dc35e05c10a94a820366cbf16dfdf2b", "filename": "src/test/ui/pattern/pattern-error-continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -21,9 +21,9 @@ fn main() {\n     match 'c' {\n         S { .. } => (),\n         //~^ ERROR mismatched types\n-        //~| expected type `char`\n-        //~| found type `S`\n         //~| expected char, found struct `S`\n+        //~| expected type `char`\n+        //~| found struct `S`\n \n         _ => ()\n     }"}, {"sha": "c8d80043fdbef13db33f9b425d6bb8fa2e2481bb", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -33,7 +33,7 @@ LL |         S { .. } => (),\n    |         ^^^^^^^^ expected char, found struct `S`\n    |\n    = note: expected type `char`\n-              found type `S`\n+            found struct `S`\n \n error[E0308]: mismatched types\n   --> $DIR/pattern-error-continue.rs:30:7"}, {"sha": "4805b0f2d57a2a47d962a8044cafae4ae8df3555", "filename": "src/test/ui/pattern/pattern-ident-path-generics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         None::<isize> => {}\n    |         ^^^^^^^^^^^^^ expected &str, found isize\n    |\n-   = note: expected type `std::option::Option<&str>`\n-              found type `std::option::Option<isize>`\n+   = note: expected enum `std::option::Option<&str>`\n+              found enum `std::option::Option<isize>`\n \n error: aborting due to previous error\n "}, {"sha": "54e0e5b53a4389fe4113c2da789816a15b1bf141", "filename": "src/test/ui/pattern/pattern-tyvar.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -6,8 +6,8 @@ LL |     match t {\n LL |       Bar::T1(_, Some::<isize>(x)) => {\n    |                  ^^^^^^^^^^^^^^^^ expected struct `std::vec::Vec`, found isize\n    |\n-   = note: expected type `std::option::Option<std::vec::Vec<isize>>`\n-              found type `std::option::Option<isize>`\n+   = note: expected enum `std::option::Option<std::vec::Vec<isize>>`\n+              found enum `std::option::Option<isize>`\n \n error: aborting due to previous error\n "}, {"sha": "c61f9a7039b2569992b1e3418389443b7ab691b4", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |             let value: &bool = unsafe { &42 };\n    |                                         ^^^ expected bool, found integer\n    |\n-   = note: expected type `&bool`\n-              found type `&{integer}`\n+   = note: expected reference `&bool`\n+              found reference `&{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "e8e3b488209e8025de79226f57dea006b0cab497", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL | #[ foo ( let y: u32 = \"z\"; ) ]\n    |                       ^^^ expected u32, found reference\n    |\n-   = note: expected type `u32`\n-              found type `&'static str`\n+   = note:   expected type `u32`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-spans-preserved.rs:8:23\n    |\n LL | #[ bar { let x: u32 = \"y\"; } ]\n    |                       ^^^ expected u32, found reference\n    |\n-   = note: expected type `u32`\n-              found type `&'static str`\n+   = note:   expected type `u32`\n+           found reference `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "73d0e2ef66e7769ef07b9af98e03bb1877143a7b", "filename": "src/test/ui/proc-macro/attribute-with-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,35 +4,35 @@ error[E0308]: mismatched types\n LL |     let a: i32 = \"foo\";\n    |                  ^^^^^ expected i32, found reference\n    |\n-   = note: expected type `i32`\n-              found type `&'static str`\n+   = note:   expected type `i32`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:12:18\n    |\n LL |     let b: i32 = \"f'oo\";\n    |                  ^^^^^^ expected i32, found reference\n    |\n-   = note: expected type `i32`\n-              found type `&'static str`\n+   = note:   expected type `i32`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:25:22\n    |\n LL |         let a: i32 = \"foo\";\n    |                      ^^^^^ expected i32, found reference\n    |\n-   = note: expected type `i32`\n-              found type `&'static str`\n+   = note:   expected type `i32`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:35:22\n    |\n LL |         let a: i32 = \"foo\";\n    |                      ^^^^^ expected i32, found reference\n    |\n-   = note: expected type `i32`\n-              found type `&'static str`\n+   = note:   expected type `i32`\n+           found reference `&'static str`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6a75f229a0dfd57455099e0c5cb075af2f8c6ed2", "filename": "src/test/ui/proc-macro/issue-37788.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -10,7 +10,7 @@ LL |     std::cell::Cell::new(0)\n    |     expected (), found struct `std::cell::Cell`\n    |\n    = note: expected type `()`\n-              found type `std::cell::Cell<{integer}>`\n+            found struct `std::cell::Cell<{integer}>`\n \n error: aborting due to previous error\n "}, {"sha": "b8776c29057c1db027a27fbb2b46f68190887f4f", "filename": "src/test/ui/proc-macro/nested-item-spans.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |         let x: u32 = \"x\";\n    |                      ^^^ expected u32, found reference\n    |\n-   = note: expected type `u32`\n-              found type `&'static str`\n+   = note:   expected type `u32`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/nested-item-spans.rs:18:22\n    |\n LL |         let x: u32 = \"x\";\n    |                      ^^^ expected u32, found reference\n    |\n-   = note: expected type `u32`\n-              found type `&'static str`\n+   = note:   expected type `u32`\n+           found reference `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6ebc99601c41f9dfb2dd3de9b045fc0d219c55cf", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL | |     loop {}\n LL | | }\n    | |_^ expected normal fn, found unsafe fn\n    |\n-   = note: expected type `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n-              found type `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n+   = note: expected fn pointer `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+                 found fn item `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n \n error: aborting due to previous error\n "}, {"sha": "f3b4f2bcd3d30904bcc7d6fe54e5a0e9b9b02bdf", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let x: usize = \"hello\";\n    |                    ^^^^^^^ expected usize, found reference\n    |\n-   = note: expected type `usize`\n-              found type `&'static str`\n+   = note:   expected type `usize`\n+           found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:17:29"}, {"sha": "193899034c7b4b5e4ff0a6b56f574ab70ee8bfef", "filename": "src/test/ui/ptr-coercion.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fptr-coercion.rs?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -5,19 +5,19 @@ pub fn main() {\n     // *const -> *mut\n     let x: *const isize = &42;\n     let x: *mut isize = x; //~  ERROR mismatched types\n-                           //~| expected type `*mut isize`\n-                           //~| found type `*const isize`\n+                           //~| expected raw pointer `*mut isize`\n+                           //~| found raw pointer `*const isize`\n                            //~| types differ in mutability\n \n     // & -> *mut\n     let x: *mut isize = &42; //~  ERROR mismatched types\n-                             //~| expected type `*mut isize`\n-                             //~| found type `&isize`\n+                             //~| expected raw pointer `*mut isize`\n+                             //~| found reference `&isize`\n                              //~| types differ in mutability\n \n     let x: *const isize = &42;\n     let x: *mut isize = x; //~  ERROR mismatched types\n-                           //~| expected type `*mut isize`\n-                           //~| found type `*const isize`\n+                           //~| expected raw pointer `*mut isize`\n+                           //~| found raw pointer `*const isize`\n                            //~| types differ in mutability\n }"}, {"sha": "49dc4b36268c471727d7d92bfbb8604a8057c822", "filename": "src/test/ui/ptr-coercion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fptr-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fptr-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fptr-coercion.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,26 +4,26 @@ error[E0308]: mismatched types\n LL |     let x: *mut isize = x;\n    |                         ^ types differ in mutability\n    |\n-   = note: expected type `*mut isize`\n-              found type `*const isize`\n+   = note: expected raw pointer `*mut isize`\n+              found raw pointer `*const isize`\n \n error[E0308]: mismatched types\n   --> $DIR/ptr-coercion.rs:13:25\n    |\n LL |     let x: *mut isize = &42;\n    |                         ^^^ types differ in mutability\n    |\n-   = note: expected type `*mut isize`\n-              found type `&isize`\n+   = note: expected raw pointer `*mut isize`\n+                found reference `&isize`\n \n error[E0308]: mismatched types\n   --> $DIR/ptr-coercion.rs:19:25\n    |\n LL |     let x: *mut isize = x;\n    |                         ^ types differ in mutability\n    |\n-   = note: expected type `*mut isize`\n-              found type `*const isize`\n+   = note: expected raw pointer `*mut isize`\n+              found raw pointer `*const isize`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c49093343c0cd461d9641ff27e417ffc2e8760a0", "filename": "src/test/ui/range/issue-54505-no-literals.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     take_range(std::ops::Range { start: 0, end: 1 });\n    |                expected reference, found struct `std::ops::Range`\n    |                help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::Range<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:21:16\n@@ -19,8 +19,8 @@ LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n    |                expected reference, found struct `std::ops::Range`\n    |                help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::Range<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:26:16\n@@ -31,8 +31,8 @@ LL |     take_range(std::ops::RangeFrom { start: 1 });\n    |                expected reference, found struct `std::ops::RangeFrom`\n    |                help: consider borrowing here: `&std::ops::RangeFrom { start: 1 }`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeFrom<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:31:16\n@@ -43,8 +43,8 @@ LL |     take_range(::std::ops::RangeFrom { start: 1 });\n    |                expected reference, found struct `std::ops::RangeFrom`\n    |                help: consider borrowing here: `&::std::ops::RangeFrom { start: 1 }`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeFrom<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:36:16\n@@ -55,8 +55,8 @@ LL |     take_range(std::ops::RangeFull {});\n    |                expected reference, found struct `std::ops::RangeFull`\n    |                help: consider borrowing here: `&std::ops::RangeFull {}`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeFull`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeFull`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:41:16\n@@ -67,8 +67,8 @@ LL |     take_range(::std::ops::RangeFull {});\n    |                expected reference, found struct `std::ops::RangeFull`\n    |                help: consider borrowing here: `&::std::ops::RangeFull {}`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeFull`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeFull`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:46:16\n@@ -79,8 +79,8 @@ LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n    |                expected reference, found struct `std::ops::RangeInclusive`\n    |                help: consider borrowing here: `&std::ops::RangeInclusive::new(0, 1)`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeInclusive<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:51:16\n@@ -91,8 +91,8 @@ LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n    |                expected reference, found struct `std::ops::RangeInclusive`\n    |                help: consider borrowing here: `&::std::ops::RangeInclusive::new(0, 1)`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeInclusive<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:56:16\n@@ -103,8 +103,8 @@ LL |     take_range(std::ops::RangeTo { end: 5 });\n    |                expected reference, found struct `std::ops::RangeTo`\n    |                help: consider borrowing here: `&std::ops::RangeTo { end: 5 }`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeTo<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:61:16\n@@ -115,8 +115,8 @@ LL |     take_range(::std::ops::RangeTo { end: 5 });\n    |                expected reference, found struct `std::ops::RangeTo`\n    |                help: consider borrowing here: `&::std::ops::RangeTo { end: 5 }`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeTo<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:66:16\n@@ -127,8 +127,8 @@ LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n    |                expected reference, found struct `std::ops::RangeToInclusive`\n    |                help: consider borrowing here: `&std::ops::RangeToInclusive { end: 5 }`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeToInclusive<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeToInclusive<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-literals.rs:71:16\n@@ -139,8 +139,8 @@ LL |     take_range(::std::ops::RangeToInclusive { end: 5 });\n    |                expected reference, found struct `std::ops::RangeToInclusive`\n    |                help: consider borrowing here: `&::std::ops::RangeToInclusive { end: 5 }`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeToInclusive<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeToInclusive<{integer}>`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "aead80fa500a9de3fecf79b3c435aadca2b4f73a", "filename": "src/test/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -9,8 +9,8 @@ LL |     take_range(0..1);\n    |                expected reference, found struct `core::ops::Range`\n    |                help: consider borrowing here: `&(0..1)`\n    |\n-   = note: expected type `&_`\n-              found type `core::ops::Range<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `core::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:33:16\n@@ -21,8 +21,8 @@ LL |     take_range(1..);\n    |                expected reference, found struct `core::ops::RangeFrom`\n    |                help: consider borrowing here: `&(1..)`\n    |\n-   = note: expected type `&_`\n-              found type `core::ops::RangeFrom<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `core::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:38:16\n@@ -33,8 +33,8 @@ LL |     take_range(..);\n    |                expected reference, found struct `core::ops::RangeFull`\n    |                help: consider borrowing here: `&(..)`\n    |\n-   = note: expected type `&_`\n-              found type `core::ops::RangeFull`\n+   = note: expected reference `&_`\n+                 found struct `core::ops::RangeFull`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:43:16\n@@ -45,8 +45,8 @@ LL |     take_range(0..=1);\n    |                expected reference, found struct `core::ops::RangeInclusive`\n    |                help: consider borrowing here: `&(0..=1)`\n    |\n-   = note: expected type `&_`\n-              found type `core::ops::RangeInclusive<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `core::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:48:16\n@@ -57,8 +57,8 @@ LL |     take_range(..5);\n    |                expected reference, found struct `core::ops::RangeTo`\n    |                help: consider borrowing here: `&(..5)`\n    |\n-   = note: expected type `&_`\n-              found type `core::ops::RangeTo<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `core::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:53:16\n@@ -69,8 +69,8 @@ LL |     take_range(..=42);\n    |                expected reference, found struct `core::ops::RangeToInclusive`\n    |                help: consider borrowing here: `&(..=42)`\n    |\n-   = note: expected type `&_`\n-              found type `core::ops::RangeToInclusive<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `core::ops::RangeToInclusive<{integer}>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "9949ff85671ca038706b58f3a4717ebb297efa92", "filename": "src/test/ui/range/issue-54505.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -7,8 +7,8 @@ LL |     take_range(0..1);\n    |                expected reference, found struct `std::ops::Range`\n    |                help: consider borrowing here: `&(0..1)`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::Range<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:19:16\n@@ -19,8 +19,8 @@ LL |     take_range(1..);\n    |                expected reference, found struct `std::ops::RangeFrom`\n    |                help: consider borrowing here: `&(1..)`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeFrom<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:24:16\n@@ -31,8 +31,8 @@ LL |     take_range(..);\n    |                expected reference, found struct `std::ops::RangeFull`\n    |                help: consider borrowing here: `&(..)`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeFull`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeFull`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:29:16\n@@ -43,8 +43,8 @@ LL |     take_range(0..=1);\n    |                expected reference, found struct `std::ops::RangeInclusive`\n    |                help: consider borrowing here: `&(0..=1)`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeInclusive<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:34:16\n@@ -55,8 +55,8 @@ LL |     take_range(..5);\n    |                expected reference, found struct `std::ops::RangeTo`\n    |                help: consider borrowing here: `&(..5)`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeTo<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:39:16\n@@ -67,8 +67,8 @@ LL |     take_range(..=42);\n    |                expected reference, found struct `std::ops::RangeToInclusive`\n    |                help: consider borrowing here: `&(..=42)`\n    |\n-   = note: expected type `&_`\n-              found type `std::ops::RangeToInclusive<{integer}>`\n+   = note: expected reference `&_`\n+                 found struct `std::ops::RangeToInclusive<{integer}>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "27704b3e0a8c7421414764b1fb62e28d74f11b33", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     want_F(bar);\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n-   = note: expected type `for<'cx> fn(&'cx S) -> &'cx S`\n-              found type `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n+   = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'cx S`\n+                 found fn item `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12\n    |\n LL |     want_G(baz);\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n-   = note: expected type `for<'cx> fn(&'cx S) -> &'static S`\n-              found type `for<'r> fn(&'r S) -> &'r S {baz}`\n+   = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n+                 found fn item `for<'r> fn(&'r S) -> &'r S {baz}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "381bad4210f896a57087e19db5c60ee35db9624d", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -11,8 +11,8 @@ LL | |         mk_static()\n LL | |     };\n    | |_____- if and else have incompatible types\n    |\n-   = note: expected type `Invariant<'a>`\n-              found type `Invariant<'static>`\n+   = note: expected struct `Invariant<'a>`\n+              found struct `Invariant<'static>`\n note: the lifetime `'a` as defined on the function body at 13:10...\n   --> $DIR/region-invariant-static-error-reporting.rs:13:10\n    |"}, {"sha": "d2608e09ac5518ac3bb12fa6fa0d341a30715dd3", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -22,8 +22,8 @@ error[E0308]: mismatched types\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ expected concrete lifetime, found bound lifetime parameter\n    |\n-   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n+                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fa39d800b0ecdd2ec800623f1c5fc5a73c94ea7f", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -33,8 +33,8 @@ error[E0308]: mismatched types\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |                                                        ^ expected concrete lifetime, found bound lifetime parameter\n    |\n-   = note: expected type `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found type `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n+   = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n+                 found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a4eebab38639e884f342a1759dbfc0c33cff8049", "filename": "src/test/ui/regions/regions-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     return e;\n    |            ^ lifetime mismatch\n    |\n-   = note: expected type `TupleStruct<'b>`\n-              found type `TupleStruct<'a>`\n+   = note: expected struct `TupleStruct<'b>`\n+              found struct `TupleStruct<'a>`\n note: the lifetime `'a` as defined on the function body at 8:10...\n   --> $DIR/regions-bounds.rs:8:10\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     return e;\n    |            ^ lifetime mismatch\n    |\n-   = note: expected type `Struct<'b>`\n-              found type `Struct<'a>`\n+   = note: expected struct `Struct<'b>`\n+              found struct `Struct<'a>`\n note: the lifetime `'a` as defined on the function body at 12:10...\n   --> $DIR/regions-bounds.rs:12:10\n    |"}, {"sha": "a8a7e97e6acf66a11660662851060962ff03557b", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     want_F(bar);\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n-   = note: expected type `for<'cx> fn(&'cx S) -> &'cx S`\n-              found type `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n+   = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'cx S`\n+                 found fn item `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n \n error: aborting due to previous error\n "}, {"sha": "4de380ad03b5b44ccd9ee874afd860960906cb40", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     b_isize\n    |     ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Invariant<'static>`\n-              found type `Invariant<'r>`\n+   = note: expected struct `Invariant<'static>`\n+              found struct `Invariant<'r>`\n note: the lifetime `'r` as defined on the function body at 11:23...\n   --> $DIR/regions-infer-invariance-due-to-decl.rs:11:23\n    |"}, {"sha": "a98d2f0222e65befa65c540f3216f5ea6200ef6a", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     b_isize\n    |     ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Invariant<'static>`\n-              found type `Invariant<'r>`\n+   = note: expected struct `Invariant<'static>`\n+              found struct `Invariant<'r>`\n note: the lifetime `'r` as defined on the function body at 9:23...\n   --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:9:23\n    |"}, {"sha": "deb08ff862cc2e9e8a574a2195ac45b92e8dd579", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ffda5216a9a4248221b980ee08c30ac6e517f8/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr?ref=83ffda5216a9a4248221b980ee08c30ac6e517f8", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     b_isize\n    |     ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Invariant<'static>`\n-              found type `Invariant<'r>`\n+   = note: expected struct `Invariant<'static>`\n+              found struct `Invariant<'r>`\n note: the lifetime `'r` as defined on the function body at 9:23...\n   --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:9:23\n    |"}]}