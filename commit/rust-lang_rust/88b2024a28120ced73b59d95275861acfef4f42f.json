{"sha": "88b2024a28120ced73b59d95275861acfef4f42f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YjIwMjRhMjgxMjBjZWQ3M2I1OWQ5NTI3NTg2MWFjZmVmNGY0MmY=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-17T17:21:15Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:29Z"}, "message": "Cleanup instruction counting", "tree": {"sha": "76d99b8fefd589f45ecc4b90540873693da11984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d99b8fefd589f45ecc4b90540873693da11984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88b2024a28120ced73b59d95275861acfef4f42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88b2024a28120ced73b59d95275861acfef4f42f", "html_url": "https://github.com/rust-lang/rust/commit/88b2024a28120ced73b59d95275861acfef4f42f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88b2024a28120ced73b59d95275861acfef4f42f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "449c6d82a7f5e25cd294fb2e9a49079e91c5284c", "url": "https://api.github.com/repos/rust-lang/rust/commits/449c6d82a7f5e25cd294fb2e9a49079e91c5284c", "html_url": "https://github.com/rust-lang/rust/commit/449c6d82a7f5e25cd294fb2e9a49079e91c5284c"}], "stats": {"total": 100, "additions": 6, "deletions": 94}, "files": [{"sha": "5c53ba290957ccfec3d02ec6579d6998a236a46c", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/88b2024a28120ced73b59d95275861acfef4f42f/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b2024a28120ced73b59d95275861acfef4f42f/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=88b2024a28120ced73b59d95275861acfef4f42f", "patch": "@@ -89,40 +89,6 @@ use rustc::hir;\n use rustc::ty::layout::{self, Layout};\n use syntax::ast;\n \n-thread_local! {\n-    static TASK_LOCAL_INSN_KEY: RefCell<Option<Vec<&'static str>>> = {\n-        RefCell::new(None)\n-    }\n-}\n-\n-pub fn with_insn_ctxt<F>(blk: F)\n-    where F: FnOnce(&[&'static str])\n-{\n-    TASK_LOCAL_INSN_KEY.with(move |slot| {\n-        slot.borrow().as_ref().map(move |s| blk(s));\n-    })\n-}\n-\n-pub fn init_insn_ctxt() {\n-    TASK_LOCAL_INSN_KEY.with(|slot| {\n-        *slot.borrow_mut() = Some(Vec::new());\n-    });\n-}\n-\n-pub struct _InsnCtxt {\n-    _cannot_construct_outside_of_this_module: (),\n-}\n-\n-impl Drop for _InsnCtxt {\n-    fn drop(&mut self) {\n-        TASK_LOCAL_INSN_KEY.with(|slot| {\n-            if let Some(ctx) = slot.borrow_mut().as_mut() {\n-                ctx.pop();\n-            }\n-        })\n-    }\n-}\n-\n pub struct StatRecorder<'a, 'tcx: 'a> {\n     ccx: &'a CrateContext<'a, 'tcx>,\n     name: Option<String>,\n@@ -144,10 +110,7 @@ impl<'a, 'tcx> Drop for StatRecorder<'a, 'tcx> {\n     fn drop(&mut self) {\n         if self.ccx.sess().trans_stats() {\n             let iend = self.ccx.stats().n_llvm_insns.get();\n-            self.ccx\n-                .stats()\n-                .fn_stats\n-                .borrow_mut()\n+            self.ccx.stats().fn_stats.borrow_mut()\n                 .push((self.name.take().unwrap(), iend - self.istart));\n             self.ccx.stats().n_fns.set(self.ccx.stats().n_fns.get() + 1);\n             // Reset LLVM insn count to avoid compound costs."}, {"sha": "575150ca4c29c2fa23ae9c1e7f2126d1933cfd1a", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 5, "deletions": 42, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/88b2024a28120ced73b59d95275861acfef4f42f/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b2024a28120ced73b59d95275861acfef4f42f/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=88b2024a28120ced73b59d95275861acfef4f42f", "patch": "@@ -42,7 +42,7 @@ impl<'blk, 'tcx> Drop for Builder<'blk, 'tcx> {\n \n // This is a really awful way to get a zero-length c-string, but better (and a\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n-pub fn noname() -> *const c_char {\n+fn noname() -> *const c_char {\n     static CNULL: c_char = 0;\n     &CNULL\n }\n@@ -59,50 +59,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn count_insn(&self, category: &str) {\n+    fn count_insn(&self, category: &str) {\n         if self.ccx.sess().trans_stats() {\n-            self.ccx.stats().n_llvm_insns.set(self.ccx\n-                                                .stats()\n-                                                .n_llvm_insns\n-                                                .get() + 1);\n+            self.ccx.stats().n_llvm_insns.set(self.ccx.stats().n_llvm_insns.get() + 1);\n         }\n-        self.ccx.count_llvm_insn();\n         if self.ccx.sess().count_llvm_insns() {\n-            base::with_insn_ctxt(|v| {\n-                let mut h = self.ccx.stats().llvm_insns.borrow_mut();\n-\n-                // Build version of path with cycles removed.\n-\n-                // Pass 1: scan table mapping str -> rightmost pos.\n-                let mut mm = FxHashMap();\n-                let len = v.len();\n-                let mut i = 0;\n-                while i < len {\n-                    mm.insert(v[i], i);\n-                    i += 1;\n-                }\n-\n-                // Pass 2: concat strings for each elt, skipping\n-                // forwards over any cycles by advancing to rightmost\n-                // occurrence of each element in path.\n-                let mut s = String::from(\".\");\n-                i = 0;\n-                while i < len {\n-                    i = mm[v[i]];\n-                    s.push('/');\n-                    s.push_str(v[i]);\n-                    i += 1;\n-                }\n-\n-                s.push('/');\n-                s.push_str(category);\n-\n-                let n = match h.get(&s) {\n-                    Some(&n) => n,\n-                    _ => 0\n-                };\n-                h.insert(s, n+1);\n-            })\n+            let mut h = self.ccx.stats().llvm_insns.borrow_mut();\n+            *h.entry(category.to_string()).or_insert(0) += 1;\n         }\n     }\n "}, {"sha": "2b5d32a9650c05caa0a064d4d2c192cc6c7e1757", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88b2024a28120ced73b59d95275861acfef4f42f/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b2024a28120ced73b59d95275861acfef4f42f/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=88b2024a28120ced73b59d95275861acfef4f42f", "patch": "@@ -149,11 +149,6 @@ pub struct LocalCrateContext<'tcx> {\n \n     intrinsics: RefCell<FxHashMap<&'static str, ValueRef>>,\n \n-    /// Number of LLVM instructions translated into this `LocalCrateContext`.\n-    /// This is used to perform some basic load-balancing to keep all LLVM\n-    /// contexts around the same size.\n-    n_llvm_insns: Cell<usize>,\n-\n     /// Depth of the current type-of computation - used to bail out\n     type_of_depth: Cell<usize>,\n \n@@ -608,7 +603,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 eh_unwind_resume: Cell::new(None),\n                 rust_try_fn: Cell::new(None),\n                 intrinsics: RefCell::new(FxHashMap()),\n-                n_llvm_insns: Cell::new(0),\n                 type_of_depth: Cell::new(0),\n                 symbol_map: symbol_map,\n                 local_gen_sym_counter: Cell::new(0),\n@@ -634,10 +628,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n             local_ccx.opaque_vec_type = opaque_vec_type;\n             local_ccx.str_slice_type = str_slice_ty;\n \n-            if shared.tcx.sess.count_llvm_insns() {\n-                base::init_insn_ctxt()\n-            }\n-\n             local_ccx\n         }\n     }\n@@ -841,10 +831,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local().intrinsics\n     }\n \n-    pub fn count_llvm_insn(&self) {\n-        self.local().n_llvm_insns.set(self.local().n_llvm_insns.get() + 1);\n-    }\n-\n     pub fn obj_size_bound(&self) -> u64 {\n         self.tcx().data_layout.obj_size_bound()\n     }"}]}