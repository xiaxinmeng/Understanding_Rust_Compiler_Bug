{"sha": "05ab16b54eaa002ed98cd6182c850ad549749bf7", "node_id": "C_kwDOAAsO6NoAKDA1YWIxNmI1NGVhYTAwMmVkOThjZDYxODJjODUwYWQ1NDk3NDliZjc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-10-29T12:18:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-29T12:18:04Z"}, "message": "Rollup merge of #103653 - GuillaumeGomez:missing-impl-private-json, r=notriddle\n\nAdd missing impl blocks for item reexported from private mod in JSON output\n\nFixes #102583.\n\nSince we don't inline for the JSON output, the impl blocks from private modules are not present when we generate the output. To go around this limitation, in case the impl block doesn't have `#[doc(hidden)]` and is implementing a public item, we don't strip it.\n\ncc `@fmease` `@aDotInTheVoid`\nr? `@notriddle`", "tree": {"sha": "48aa3783a703d5f0f560b44eb61f5f2e2bfc40c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48aa3783a703d5f0f560b44eb61f5f2e2bfc40c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05ab16b54eaa002ed98cd6182c850ad549749bf7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXRn8CRBK7hj4Ov3rIwAA8fUIAJ7HNHaYQRjjFn+E1VpcieAa\nhWDFC3xpYgiopQaQ5aRpTs6XYkXdr+YI9esyJ02VkeSDLKWGBybrNwFiMEq8cisx\nOT4GpYDG9GNQTQHjBFSael7LkN/+sNF5mFydCSlCXMsb2LjzA8/6/KHNH6GSdHG1\nH6JY6d9q3U/YqQIiyrFGHHUDmPfH72urNh1GFAoBhrWSQNIfUiKulmE57JM4Ea3f\ndpJu6JYJArMhKM4u8VRDeinqtyqOUfelHPc7ieMOhG5RSmAUlsCyv5VKayoAy9pd\nXpwqcWdfRC4BF7tjTo3CkHB6WCgT9mR7Gje3muAhphDFjrwX22vfgbNSWQVn6e4=\n=76OM\n-----END PGP SIGNATURE-----\n", "payload": "tree 48aa3783a703d5f0f560b44eb61f5f2e2bfc40c8\nparent 2414a4c31a56a34ac6944e360b230ffe54a3a31b\nparent 0ef36b89459956af005b4186e4321f7f0376ec7d\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1667045884 +0200\ncommitter GitHub <noreply@github.com> 1667045884 +0200\n\nRollup merge of #103653 - GuillaumeGomez:missing-impl-private-json, r=notriddle\n\nAdd missing impl blocks for item reexported from private mod in JSON output\n\nFixes #102583.\n\nSince we don't inline for the JSON output, the impl blocks from private modules are not present when we generate the output. To go around this limitation, in case the impl block doesn't have `#[doc(hidden)]` and is implementing a public item, we don't strip it.\n\ncc `@fmease` `@aDotInTheVoid`\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05ab16b54eaa002ed98cd6182c850ad549749bf7", "html_url": "https://github.com/rust-lang/rust/commit/05ab16b54eaa002ed98cd6182c850ad549749bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05ab16b54eaa002ed98cd6182c850ad549749bf7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2414a4c31a56a34ac6944e360b230ffe54a3a31b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2414a4c31a56a34ac6944e360b230ffe54a3a31b", "html_url": "https://github.com/rust-lang/rust/commit/2414a4c31a56a34ac6944e360b230ffe54a3a31b"}, {"sha": "0ef36b89459956af005b4186e4321f7f0376ec7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef36b89459956af005b4186e4321f7f0376ec7d", "html_url": "https://github.com/rust-lang/rust/commit/0ef36b89459956af005b4186e4321f7f0376ec7d"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "0089ce63d07ba0c801a401a205cd1a5e6c5665ea", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/05ab16b54eaa002ed98cd6182c850ad549749bf7/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ab16b54eaa002ed98cd6182c850ad549749bf7/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=05ab16b54eaa002ed98cd6182c850ad549749bf7", "patch": "@@ -1,9 +1,11 @@\n //! A collection of utility functions for the `strip_*` passes.\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::privacy::EffectiveVisibilities;\n+use rustc_span::symbol::sym;\n+\n use std::mem;\n \n-use crate::clean::{self, Item, ItemId, ItemIdSet};\n+use crate::clean::{self, Item, ItemId, ItemIdSet, NestedAttributesExt};\n use crate::fold::{strip_item, DocFolder};\n use crate::formats::cache::Cache;\n \n@@ -151,6 +153,22 @@ pub(crate) struct ImplStripper<'a> {\n     pub(crate) document_private: bool,\n }\n \n+impl<'a> ImplStripper<'a> {\n+    #[inline]\n+    fn should_keep_impl(&self, item: &Item, for_def_id: DefId) -> bool {\n+        if !for_def_id.is_local() || self.retained.contains(&for_def_id.into()) {\n+            true\n+        } else if self.is_json_output {\n+            // If the \"for\" item is exported and the impl block isn't `#[doc(hidden)]`, then we\n+            // need to keep it.\n+            self.cache.effective_visibilities.is_exported(for_def_id)\n+                && !item.attrs.lists(sym::doc).has_word(sym::hidden)\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n impl<'a> DocFolder for ImplStripper<'a> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         if let clean::ImplItem(ref imp) = *i.kind {\n@@ -178,23 +196,25 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                     return None;\n                 }\n             }\n+            // Because we don't inline in `maybe_inline_local` if the output format is JSON,\n+            // we need to make a special check for JSON output: we want to keep it unless it has\n+            // a `#[doc(hidden)]` attribute if the `for_` type is exported.\n             if let Some(did) = imp.for_.def_id(self.cache) {\n-                if did.is_local() && !imp.for_.is_assoc_ty() && !self.retained.contains(&did.into())\n-                {\n+                if !imp.for_.is_assoc_ty() && !self.should_keep_impl(&i, did) {\n                     debug!(\"ImplStripper: impl item for stripped type; removing\");\n                     return None;\n                 }\n             }\n             if let Some(did) = imp.trait_.as_ref().map(|t| t.def_id()) {\n-                if did.is_local() && !self.retained.contains(&did.into()) {\n+                if !self.should_keep_impl(&i, did) {\n                     debug!(\"ImplStripper: impl item for stripped trait; removing\");\n                     return None;\n                 }\n             }\n             if let Some(generics) = imp.trait_.as_ref().and_then(|t| t.generics()) {\n                 for typaram in generics {\n                     if let Some(did) = typaram.def_id(self.cache) {\n-                        if did.is_local() && !self.retained.contains(&did.into()) {\n+                        if !self.should_keep_impl(&i, did) {\n                             debug!(\n                                 \"ImplStripper: stripped item in trait's generics; removing impl\"\n                             );"}, {"sha": "239b1a23b43d7e0e8c017cd8b5b2d40246c64861", "filename": "src/test/rustdoc-json/reexport/reexport_method_from_private_module.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/05ab16b54eaa002ed98cd6182c850ad549749bf7/src%2Ftest%2Frustdoc-json%2Freexport%2Freexport_method_from_private_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ab16b54eaa002ed98cd6182c850ad549749bf7/src%2Ftest%2Frustdoc-json%2Freexport%2Freexport_method_from_private_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Freexport_method_from_private_module.rs?ref=05ab16b54eaa002ed98cd6182c850ad549749bf7", "patch": "@@ -0,0 +1,28 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/102583>.\n+\n+// @set impl_S = \"$.index[*][?(@.docs=='impl S')].id\"\n+// @has \"$.index[*][?(@.name=='S')].inner.impls[*]\" $impl_S\n+// @set is_present = \"$.index[*][?(@.name=='is_present')].id\"\n+// @is \"$.index[*][?(@.docs=='impl S')].inner.items[*]\" $is_present\n+// @!has \"$.index[*][?(@.name=='hidden_impl')]\"\n+// @!has \"$.index[*][?(@.name=='hidden_fn')]\"\n+\n+#![no_std]\n+\n+mod private_mod {\n+    pub struct S;\n+\n+    /// impl S\n+    impl S {\n+        pub fn is_present() {}\n+        #[doc(hidden)]\n+        pub fn hidden_fn() {}\n+    }\n+\n+    #[doc(hidden)]\n+    impl S {\n+        pub fn hidden_impl() {}\n+    }\n+}\n+\n+pub use private_mod::*;"}]}