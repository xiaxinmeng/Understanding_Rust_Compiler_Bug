{"sha": "b7ac540f150e74ec7577df08511f977a67cd40e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YWM1NDBmMTUwZTc0ZWM3NTc3ZGYwODUxMWY5NzdhNjdjZDQwZTE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T10:23:49Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T10:23:49Z"}, "message": "Use ast::String for extracting string literal contents", "tree": {"sha": "cb97830531db763e949a6c36315efc003fef3d19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb97830531db763e949a6c36315efc003fef3d19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7ac540f150e74ec7577df08511f977a67cd40e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ac540f150e74ec7577df08511f977a67cd40e1", "html_url": "https://github.com/rust-lang/rust/commit/b7ac540f150e74ec7577df08511f977a67cd40e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7ac540f150e74ec7577df08511f977a67cd40e1/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2557cb8518a70b0d3b8689be6cb3c8d33342cd0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d", "html_url": "https://github.com/rust-lang/rust/commit/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "db5319618e1e7536e040d93427acb1d7458df654", "filename": "crates/ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7ac540f150e74ec7577df08511f977a67cd40e1/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ac540f150e74ec7577df08511f977a67cd40e1/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=b7ac540f150e74ec7577df08511f977a67cd40e1", "patch": "@@ -4,7 +4,7 @@ mod format_like;\n \n use assists::utils::TryEnum;\n use syntax::{\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, AstToken},\n     TextRange, TextSize,\n };\n use text_edit::TextEdit;\n@@ -212,7 +212,11 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     )\n     .add_to(acc);\n \n-    add_format_like_completions(acc, ctx, &dot_receiver, cap, &receiver_text);\n+    if let ast::Expr::Literal(literal) = dot_receiver.clone() {\n+        if let Some(literal_text) = ast::String::cast(literal.token()) {\n+            add_format_like_completions(acc, ctx, &dot_receiver, cap, &literal_text);\n+        }\n+    }\n }\n \n fn get_receiver_text(receiver: &ast::Expr, receiver_is_ambiguous_float_literal: bool) -> String {"}, {"sha": "53cb3af39f87aaa814549440b13d88be5fa11da2", "filename": "crates/ide/src/completion/complete_postfix/format_like.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7ac540f150e74ec7577df08511f977a67cd40e1/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ac540f150e74ec7577df08511f977a67cd40e1/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs?ref=b7ac540f150e74ec7577df08511f977a67cd40e1", "patch": "@@ -18,23 +18,22 @@ use crate::completion::{\n     complete_postfix::postfix_snippet, completion_config::SnippetCap,\n     completion_context::CompletionContext, completion_item::Completions,\n };\n-use syntax::ast;\n+use syntax::ast::{self, AstToken};\n \n pub(super) fn add_format_like_completions(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     dot_receiver: &ast::Expr,\n     cap: SnippetCap,\n-    receiver_text: &str,\n+    receiver_text: &ast::String,\n ) {\n-    if !is_string_literal(receiver_text) {\n+    let input = match string_literal_contents(receiver_text) {\n         // It's not a string literal, do not parse input.\n-        return;\n-    }\n-\n-    let input = &receiver_text[1..receiver_text.len() - 1];\n+        Some(input) => input,\n+        None => return,\n+    };\n \n-    let mut parser = FormatStrParser::new(input.to_owned());\n+    let mut parser = FormatStrParser::new(input);\n \n     if parser.parse().is_ok() {\n         for kind in PostfixKind::all_suggestions() {\n@@ -47,11 +46,13 @@ pub(super) fn add_format_like_completions(\n }\n \n /// Checks whether provided item is a string literal.\n-fn is_string_literal(item: &str) -> bool {\n-    if item.len() < 2 {\n-        return false;\n+fn string_literal_contents(item: &ast::String) -> Option<String> {\n+    let item = item.text();\n+    if item.len() >= 2 && item.starts_with(\"\\\"\") && item.ends_with(\"\\\"\") {\n+        return Some(item[1..item.len() - 1].to_owned());\n     }\n-    item.starts_with(\"\\\"\") && item.ends_with(\"\\\"\")\n+\n+    None\n }\n \n /// Parser for a format-like string. It is more allowing in terms of string contents,"}]}