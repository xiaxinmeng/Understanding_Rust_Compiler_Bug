{"sha": "0a2b6087ec060bbf61330f0eec90cf5ca00c4f90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMmI2MDg3ZWMwNjBiYmY2MTMzMGYwZWVjOTBjZjVjYTAwYzRmOTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T10:06:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T10:30:54Z"}, "message": "Simplify", "tree": {"sha": "ca18b43553f014dce6660c6d4700cc0f07b4e455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca18b43553f014dce6660c6d4700cc0f07b4e455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90", "html_url": "https://github.com/rust-lang/rust/commit/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7a1a12038f822df346c65de613cc01882ce656", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7a1a12038f822df346c65de613cc01882ce656", "html_url": "https://github.com/rust-lang/rust/commit/5e7a1a12038f822df346c65de613cc01882ce656"}], "stats": {"total": 85, "additions": 18, "deletions": 67}, "files": [{"sha": "889b84c590561e838b75c1aa04f80eacec1c76ba", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 17, "deletions": 66, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=0a2b6087ec060bbf61330f0eec90cf5ca00c4f90", "patch": "@@ -1,5 +1,5 @@\n //! FIXME: write short doc here\n-use std::{str::FromStr, sync::Arc};\n+use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n use ra_db::{CrateName, Env, FileSet, SourceRoot, VfsPath};\n@@ -9,61 +9,11 @@ use crate::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n };\n \n-#[derive(Debug)]\n-enum MockFileData {\n-    Fixture(Fixture),\n-}\n-\n-impl MockFileData {\n-    fn path(&self) -> &str {\n-        match self {\n-            MockFileData::Fixture(f) => f.path.as_str(),\n-        }\n-    }\n-\n-    fn content(&self) -> &str {\n-        match self {\n-            MockFileData::Fixture(f) => f.text.as_str(),\n-        }\n-    }\n-\n-    fn cfg_options(&self) -> CfgOptions {\n-        match self {\n-            MockFileData::Fixture(f) => {\n-                let mut cfg = CfgOptions::default();\n-                f.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n-                f.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n-                cfg\n-            }\n-        }\n-    }\n-\n-    fn edition(&self) -> Edition {\n-        match self {\n-            MockFileData::Fixture(f) => {\n-                f.edition.as_ref().map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap())\n-            }\n-        }\n-    }\n-\n-    fn env(&self) -> Env {\n-        match self {\n-            MockFileData::Fixture(f) => Env::from(f.env.iter()),\n-        }\n-    }\n-}\n-\n-impl From<Fixture> for MockFileData {\n-    fn from(fixture: Fixture) -> Self {\n-        Self::Fixture(fixture)\n-    }\n-}\n-\n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n #[derive(Debug, Default)]\n pub struct MockAnalysis {\n-    files: Vec<MockFileData>,\n+    files: Vec<Fixture>,\n }\n \n impl MockAnalysis {\n@@ -113,8 +63,8 @@ impl MockAnalysis {\n     }\n \n     fn add_file_fixture(&mut self, fixture: Fixture) -> FileId {\n-        let file_id = self.next_id();\n-        self.files.push(MockFileData::from(fixture));\n+        let file_id = FileId((self.files.len() + 1) as u32);\n+        self.files.push(fixture);\n         file_id\n     }\n \n@@ -123,7 +73,7 @@ impl MockAnalysis {\n             .files\n             .iter()\n             .enumerate()\n-            .find(|(_, data)| path == data.path())\n+            .find(|(_, data)| path == data.path)\n             .expect(\"no file in this mock\");\n         FileId(idx as u32 + 1)\n     }\n@@ -134,18 +84,23 @@ impl MockAnalysis {\n         let mut crate_graph = CrateGraph::default();\n         let mut root_crate = None;\n         for (i, data) in self.files.into_iter().enumerate() {\n-            let path = data.path();\n+            let path = data.path;\n             assert!(path.starts_with('/'));\n-            let cfg_options = data.cfg_options();\n+\n+            let mut cfg = CfgOptions::default();\n+            data.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n+            data.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n+            let edition: Edition =\n+                data.edition.and_then(|it| it.parse().ok()).unwrap_or(Edition::Edition2018);\n+\n             let file_id = FileId(i as u32 + 1);\n-            let edition = data.edition();\n-            let env = data.env();\n+            let env = Env::from(data.env.iter());\n             if path == \"/lib.rs\" || path == \"/main.rs\" {\n                 root_crate = Some(crate_graph.add_crate_root(\n                     file_id,\n                     edition,\n                     None,\n-                    cfg_options,\n+                    cfg,\n                     env,\n                     Default::default(),\n                 ));\n@@ -156,7 +111,7 @@ impl MockAnalysis {\n                     file_id,\n                     edition,\n                     Some(CrateName::new(crate_name).unwrap()),\n-                    cfg_options,\n+                    cfg,\n                     env,\n                     Default::default(),\n                 );\n@@ -168,7 +123,7 @@ impl MockAnalysis {\n             }\n             let path = VfsPath::new_virtual_path(path.to_string());\n             file_set.insert(file_id, path);\n-            change.change_file(file_id, Some(Arc::new(data.content().to_owned())));\n+            change.change_file(file_id, Some(Arc::new(data.text).to_owned()));\n         }\n         change.set_crate_graph(crate_graph);\n         change.set_roots(vec![SourceRoot::new_local(file_set)]);\n@@ -178,10 +133,6 @@ impl MockAnalysis {\n     pub fn analysis(self) -> Analysis {\n         self.analysis_host().analysis()\n     }\n-\n-    fn next_id(&self) -> FileId {\n-        FileId((self.files.len() + 1) as u32)\n-    }\n }\n \n /// Creates analysis from a multi-file fixture, returns positions marked with <|>."}, {"sha": "f716a3861678f048c5e2fa85413f50d95ff10c74", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=0a2b6087ec060bbf61330f0eec90cf5ca00c4f90", "patch": "@@ -104,7 +104,7 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n mod tests {\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::{single_file, analysis_and_range};\n+    use crate::mock_analysis::{analysis_and_range, single_file};\n \n     #[test]\n     fn test_syntax_tree_without_range() {"}]}