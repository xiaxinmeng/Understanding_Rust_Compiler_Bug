{"sha": "15fc228d0d0a68b5ba565758fab13ed7f863fcea", "node_id": "C_kwDOAAsO6NoAKDE1ZmMyMjhkMGQwYTY4YjViYTU2NTc1OGZhYjEzZWQ3Zjg2M2ZjZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-19T08:20:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-19T08:20:36Z"}, "message": "Auto merge of #97791 - m-ou-se:const-locks, r=m-ou-se\n\nMake {Mutex, Condvar, RwLock}::new() const.\n\nThis makes it possible to have `static M: Mutex<_> = Mutex::new(..);` \ud83c\udf89\n\nOur implementations [on Linux](https://github.com/rust-lang/rust/pull/95035), [on Windows](https://github.com/rust-lang/rust/pull/77380), and various BSDs and some tier 3 platforms have already been using a non-allocating const-constructible implementation. As of https://github.com/rust-lang/rust/pull/97647, the remaining platforms (most notably macOS) now have a const-constructible implementation as well. This means we can finally make these functions publicly const.\n\nTracking issue: https://github.com/rust-lang/rust/issues/93740", "tree": {"sha": "e7b2995928c0484ecc6c82a443a3533226aba222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7b2995928c0484ecc6c82a443a3533226aba222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15fc228d0d0a68b5ba565758fab13ed7f863fcea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15fc228d0d0a68b5ba565758fab13ed7f863fcea", "html_url": "https://github.com/rust-lang/rust/commit/15fc228d0d0a68b5ba565758fab13ed7f863fcea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15fc228d0d0a68b5ba565758fab13ed7f863fcea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb8a3926619a18a2e31627e4cdf05f16530b0eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb8a3926619a18a2e31627e4cdf05f16530b0eb", "html_url": "https://github.com/rust-lang/rust/commit/5fb8a3926619a18a2e31627e4cdf05f16530b0eb"}, {"sha": "edae4958556a6150841b9964b322d1e96e7a4586", "url": "https://api.github.com/repos/rust-lang/rust/commits/edae4958556a6150841b9964b322d1e96e7a4586", "html_url": "https://github.com/rust-lang/rust/commit/edae4958556a6150841b9964b322d1e96e7a4586"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "eb1e7135a6e41dcc04980974fa9c9d77c3e49117", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -122,8 +122,10 @@ impl Condvar {\n     /// let condvar = Condvar::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n     #[must_use]\n-    pub fn new() -> Condvar {\n+    #[inline]\n+    pub const fn new() -> Condvar {\n         Condvar { inner: sys::Condvar::new() }\n     }\n "}, {"sha": "e0d13cd648c64ceeb003da18d1401e02104bccf2", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -213,7 +213,9 @@ impl<T> Mutex<T> {\n     /// let mutex = Mutex::new(0);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new(t: T) -> Mutex<T> {\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n+    #[inline]\n+    pub const fn new(t: T) -> Mutex<T> {\n         Mutex {\n             inner: sys::MovableMutex::new(),\n             poison: poison::Flag::new(),"}, {"sha": "741312d5537e93509b2100a6c3f427d056c17f8a", "filename": "library/std/src/sync/poison.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -19,6 +19,7 @@ pub struct Flag {\n // all cases.\n \n impl Flag {\n+    #[inline]\n     pub const fn new() -> Flag {\n         Flag { failed: AtomicBool::new(false) }\n     }"}, {"sha": "1192c08cb1a88584c49010faae343258b24b34c0", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -146,7 +146,9 @@ impl<T> RwLock<T> {\n     /// let lock = RwLock::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new(t: T) -> RwLock<T> {\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n+    #[inline]\n+    pub const fn new(t: T) -> RwLock<T> {\n         RwLock {\n             inner: sys::MovableRwLock::new(),\n             poison: poison::Flag::new(),"}, {"sha": "715e94c3b3d6a0928ba9497be25629c5d702a9a1", "filename": "library/std/src/sys/itron/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -26,6 +26,7 @@ fn new_mtx() -> Result<abi::ID, ItronError> {\n }\n \n impl Mutex {\n+    #[inline]\n     pub const fn new() -> Mutex {\n         Mutex { mtx: SpinIdOnceCell::new() }\n     }"}, {"sha": "0a770cf03f2f5aa17afa9b12b761e26b45905623", "filename": "library/std/src/sys/solid/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -23,6 +23,7 @@ fn new_rwl() -> Result<abi::ID, ItronError> {\n }\n \n impl RwLock {\n+    #[inline]\n     pub const fn new() -> RwLock {\n         RwLock { rwl: SpinIdOnceCell::new() }\n     }"}, {"sha": "e703fd0d269933fb91dd05db567318858932c71c", "filename": "library/std/src/sys/unsupported/locks/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -6,6 +6,7 @@ pub struct Condvar {}\n pub type MovableCondvar = Condvar;\n \n impl Condvar {\n+    #[inline]\n     pub const fn new() -> Condvar {\n         Condvar {}\n     }"}, {"sha": "d7cb12e0cf9a49ad0240620c32146a1b8ddb217b", "filename": "library/std/src/sys/unsupported/locks/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -11,6 +11,7 @@ unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {} // no threads on this platform\n \n impl Mutex {\n+    #[inline]\n     pub const fn new() -> Mutex {\n         Mutex { locked: Cell::new(false) }\n     }"}, {"sha": "aca5fb7152c990c214e13495d4e958d26de62919", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -11,6 +11,7 @@ unsafe impl Send for RwLock {}\n unsafe impl Sync for RwLock {} // no threads on this platform\n \n impl RwLock {\n+    #[inline]\n     pub const fn new() -> RwLock {\n         RwLock { mode: Cell::new(0) }\n     }"}, {"sha": "be9a2abbe35d9a525a598487cca17f788e2f9062", "filename": "library/std/src/sys/windows/locks/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -14,6 +14,7 @@ unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n \n impl Condvar {\n+    #[inline]\n     pub const fn new() -> Condvar {\n         Condvar { inner: UnsafeCell::new(c::CONDITION_VARIABLE_INIT) }\n     }"}, {"sha": "f91e8f9f59a140dbe58ff8f14581aff6112e04a7", "filename": "library/std/src/sys/windows/locks/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -33,6 +33,7 @@ pub unsafe fn raw(m: &Mutex) -> c::PSRWLOCK {\n }\n \n impl Mutex {\n+    #[inline]\n     pub const fn new() -> Mutex {\n         Mutex { srwlock: UnsafeCell::new(c::SRWLOCK_INIT) }\n     }"}, {"sha": "fa5ffe5749f259e9e6441c1926e53e888c2fbde9", "filename": "library/std/src/sys/windows/locks/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -11,6 +11,7 @@ unsafe impl Send for RwLock {}\n unsafe impl Sync for RwLock {}\n \n impl RwLock {\n+    #[inline]\n     pub const fn new() -> RwLock {\n         RwLock { inner: UnsafeCell::new(c::SRWLOCK_INIT) }\n     }"}, {"sha": "f3ac1061b8935045ab1b01ca920dd324c4e06999", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -14,7 +14,8 @@ pub struct Condvar {\n \n impl Condvar {\n     /// Creates a new condition variable for use.\n-    pub fn new() -> Self {\n+    #[inline]\n+    pub const fn new() -> Self {\n         Self { inner: imp::MovableCondvar::new(), check: CondvarCheck::new() }\n     }\n "}, {"sha": "81eefa1133fa5767e90f2431b89eac72a3e063da", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -15,6 +15,7 @@ unsafe impl Sync for StaticMutex {}\n \n impl StaticMutex {\n     /// Creates a new mutex for use.\n+    #[inline]\n     pub const fn new() -> Self {\n         Self(imp::Mutex::new())\n     }\n@@ -60,7 +61,8 @@ unsafe impl Sync for MovableMutex {}\n \n impl MovableMutex {\n     /// Creates a new mutex.\n-    pub fn new() -> Self {\n+    #[inline]\n+    pub const fn new() -> Self {\n         Self(imp::MovableMutex::new())\n     }\n "}, {"sha": "265cebfdc3e0a22cd96472732ece92426ceef2e8", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15fc228d0d0a68b5ba565758fab13ed7f863fcea/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=15fc228d0d0a68b5ba565758fab13ed7f863fcea", "patch": "@@ -10,6 +10,7 @@ pub struct StaticRwLock(imp::RwLock);\n \n impl StaticRwLock {\n     /// Creates a new rwlock for use.\n+    #[inline]\n     pub const fn new() -> Self {\n         Self(imp::RwLock::new())\n     }\n@@ -73,7 +74,8 @@ pub struct MovableRwLock(imp::MovableRwLock);\n \n impl MovableRwLock {\n     /// Creates a new reader-writer lock for use.\n-    pub fn new() -> Self {\n+    #[inline]\n+    pub const fn new() -> Self {\n         Self(imp::MovableRwLock::new())\n     }\n "}]}