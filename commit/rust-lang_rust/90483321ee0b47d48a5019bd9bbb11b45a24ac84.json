{"sha": "90483321ee0b47d48a5019bd9bbb11b45a24ac84", "node_id": "C_kwDOAAsO6NoAKDkwNDgzMzIxZWUwYjQ3ZDQ4YTUwMTliZDliYmIxMWI0NWEyNGFjODQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T12:47:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T12:47:30Z"}, "message": "Remove some usages of `Completions::add_resolution`", "tree": {"sha": "939197035688cb4bc41d6c808282d938299d16f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939197035688cb4bc41d6c808282d938299d16f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90483321ee0b47d48a5019bd9bbb11b45a24ac84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90483321ee0b47d48a5019bd9bbb11b45a24ac84", "html_url": "https://github.com/rust-lang/rust/commit/90483321ee0b47d48a5019bd9bbb11b45a24ac84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90483321ee0b47d48a5019bd9bbb11b45a24ac84/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76852452825191da01e7d5a4db0c1638c02514be", "url": "https://api.github.com/repos/rust-lang/rust/commits/76852452825191da01e7d5a4db0c1638c02514be", "html_url": "https://github.com/rust-lang/rust/commit/76852452825191da01e7d5a4db0c1638c02514be"}], "stats": {"total": 116, "additions": 62, "deletions": 54}, "files": [{"sha": "c1081dbde32fe2b5d3ff555411c63b89a8bf154b", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=90483321ee0b47d48a5019bd9bbb11b45a24ac84", "patch": "@@ -22,7 +22,7 @@ pub(crate) mod vis;\n \n use std::iter;\n \n-use hir::{db::HirDatabase, known, ScopeDef};\n+use hir::{known, ScopeDef};\n use ide_db::SymbolKind;\n use syntax::ast;\n \n@@ -46,22 +46,6 @@ use crate::{\n     CompletionContext, CompletionItem, CompletionItemKind,\n };\n \n-fn module_or_attr(db: &dyn HirDatabase, def: ScopeDef) -> Option<ScopeDef> {\n-    match def {\n-        ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_attr(db) => Some(def),\n-        ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => Some(def),\n-        _ => None,\n-    }\n-}\n-\n-fn module_or_fn_macro(db: &dyn HirDatabase, def: ScopeDef) -> Option<ScopeDef> {\n-    match def {\n-        ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_fn_like(db) => Some(def),\n-        ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => Some(def),\n-        _ => None,\n-    }\n-}\n-\n /// Represents an in-progress set of completions being built.\n #[derive(Debug, Default)]\n pub struct Completions {\n@@ -184,6 +168,15 @@ impl Completions {\n         self.add(render_resolution_simple(RenderContext::new(ctx), local_name, resolution).build());\n     }\n \n+    pub(crate) fn add_module(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        module: hir::Module,\n+        local_name: hir::Name,\n+    ) {\n+        self.add_resolution(ctx, local_name, hir::ScopeDef::ModuleDef(module.into()));\n+    }\n+\n     pub(crate) fn add_macro(\n         &mut self,\n         ctx: &CompletionContext,\n@@ -486,16 +479,19 @@ pub(super) fn complete_name_ref(\n     match kind {\n         NameRefKind::Path(path_ctx) => {\n             flyimport::import_on_the_fly_path(acc, ctx, path_ctx);\n+\n             match &path_ctx.kind {\n                 PathKind::Expr { expr_ctx } => {\n-                    dot::complete_undotted_self(acc, ctx, path_ctx, expr_ctx);\n                     expr::complete_expr_path(acc, ctx, path_ctx, expr_ctx);\n+\n+                    dot::complete_undotted_self(acc, ctx, path_ctx, expr_ctx);\n                     item_list::complete_item_list_in_expr(acc, ctx, path_ctx, expr_ctx);\n                     record::complete_record_expr_func_update(acc, ctx, path_ctx, expr_ctx);\n                     snippet::complete_expr_snippet(acc, ctx, path_ctx, expr_ctx);\n                 }\n                 PathKind::Type { location } => {\n                     r#type::complete_type_path(acc, ctx, path_ctx, location);\n+\n                     match location {\n                         TypeLocation::TupleField => {\n                             field::complete_field_list_tuple_variant(acc, ctx, path_ctx);\n@@ -511,13 +507,14 @@ pub(super) fn complete_name_ref(\n                     }\n                 }\n                 PathKind::Attr { attr_ctx } => {\n-                    attribute::complete_attribute(acc, ctx, path_ctx, attr_ctx);\n+                    attribute::complete_attribute_path(acc, ctx, path_ctx, attr_ctx);\n                 }\n                 PathKind::Derive { existing_derives } => {\n-                    attribute::complete_derive(acc, ctx, path_ctx, existing_derives);\n+                    attribute::complete_derive_path(acc, ctx, path_ctx, existing_derives);\n                 }\n                 PathKind::Item { kind } => {\n                     item_list::complete_item_list(acc, ctx, path_ctx, kind);\n+\n                     snippet::complete_item_snippet(acc, ctx, path_ctx, kind);\n                     if let ItemListKind::TraitImpl(impl_) = kind {\n                         item_list::trait_impl::complete_trait_impl_item_by_name(\n@@ -532,7 +529,7 @@ pub(super) fn complete_name_ref(\n                     vis::complete_vis_path(acc, ctx, path_ctx, has_in_token);\n                 }\n                 PathKind::Use => {\n-                    use_::complete_use_tree(acc, ctx, path_ctx, nameref);\n+                    use_::complete_use_path(acc, ctx, path_ctx, nameref);\n                 }\n             }\n         }"}, {"sha": "37e042a160937f7f159487943faaca5c26b91873", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=90483321ee0b47d48a5019bd9bbb11b45a24ac84", "patch": "@@ -17,7 +17,6 @@ use syntax::{\n };\n \n use crate::{\n-    completions::module_or_attr,\n     context::{AttrCtx, CompletionContext, PathCompletionCtx, Qualified},\n     item::CompletionItem,\n     Completions,\n@@ -28,7 +27,7 @@ mod derive;\n mod lint;\n mod repr;\n \n-pub(crate) use self::derive::complete_derive;\n+pub(crate) use self::derive::complete_derive_path;\n \n /// Complete inputs to known builtin attributes as well as derive attributes\n pub(crate) fn complete_known_attribute_input(\n@@ -69,7 +68,7 @@ pub(crate) fn complete_known_attribute_input(\n     Some(())\n }\n \n-pub(crate) fn complete_attribute(\n+pub(crate) fn complete_attribute_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n@@ -88,8 +87,14 @@ pub(crate) fn complete_attribute(\n             }\n \n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n-                if let Some(def) = module_or_attr(ctx.db, def) {\n-                    acc.add_resolution(ctx, name, def);\n+                match def {\n+                    hir::ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_attr(ctx.db) => {\n+                        acc.add_macro(ctx, m, name)\n+                    }\n+                    hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n+                        acc.add_module(ctx, m, name)\n+                    }\n+                    _ => (),\n                 }\n             }\n             return;\n@@ -98,10 +103,12 @@ pub(crate) fn complete_attribute(\n         Qualified::Absolute => acc.add_crate_roots(ctx),\n         // only show modules in a fresh UseTree\n         Qualified::No => {\n-            ctx.process_all_names(&mut |name, def| {\n-                if let Some(def) = module_or_attr(ctx.db, def) {\n-                    acc.add_resolution(ctx, name, def);\n+            ctx.process_all_names(&mut |name, def| match def {\n+                hir::ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_attr(ctx.db) => {\n+                    acc.add_macro(ctx, m, name)\n                 }\n+                hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => acc.add_module(ctx, m, name),\n+                _ => (),\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }"}, {"sha": "0e10f381532fa5063a56d6d3de3fa9593fa3eceb", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=90483321ee0b47d48a5019bd9bbb11b45a24ac84", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     Completions,\n };\n \n-pub(crate) fn complete_derive(\n+pub(crate) fn complete_derive_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n@@ -29,15 +29,14 @@ pub(crate) fn complete_derive(\n             }\n \n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n-                let add_def = match def {\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac)) => {\n-                        !existing_derives.contains(&mac) && mac.is_derive(ctx.db)\n+                match def {\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac))\n+                        if !existing_derives.contains(&mac) && mac.is_derive(ctx.db) =>\n+                    {\n+                        acc.add_macro(ctx, mac, name)\n                     }\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => true,\n-                    _ => false,\n-                };\n-                if add_def {\n-                    acc.add_resolution(ctx, name, def);\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => acc.add_module(ctx, m, name),\n+                    _ => (),\n                 }\n             }\n         }\n@@ -51,16 +50,16 @@ pub(crate) fn complete_derive(\n                     {\n                         mac\n                     }\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => {\n-                        return acc.add_resolution(ctx, name, def);\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n+                        return acc.add_module(ctx, m, name);\n                     }\n                     _ => return,\n                 };\n \n                 match (core, mac.module(ctx.db).krate()) {\n                     // show derive dependencies for `core`/`std` derives\n                     (Some(core), mac_krate) if core == mac_krate => {}\n-                    _ => return acc.add_resolution(ctx, name, def),\n+                    _ => return acc.add_macro(ctx, mac, name),\n                 };\n \n                 let name_ = name.to_smol_str();\n@@ -93,7 +92,7 @@ pub(crate) fn complete_derive(\n                         item.lookup_by(lookup);\n                         item.add_to(acc);\n                     }\n-                    None => acc.add_resolution(ctx, name, def),\n+                    None => acc.add_macro(ctx, mac, name),\n                 }\n             });\n             acc.add_nameref_keywords_with_colon(ctx);"}, {"sha": "e697e1971ea50b18367100df552783aa70d65672", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=90483321ee0b47d48a5019bd9bbb11b45a24ac84", "patch": "@@ -1,7 +1,6 @@\n //! Completion of paths and keywords at item list position.\n \n use crate::{\n-    completions::module_or_fn_macro,\n     context::{ExprCtx, ItemListKind, PathCompletionCtx, Qualified},\n     CompletionContext, Completions,\n };\n@@ -41,8 +40,14 @@ pub(crate) fn complete_item_list(\n             ..\n         } => {\n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n-                if let Some(def) = module_or_fn_macro(ctx.db, def) {\n-                    acc.add_resolution(ctx, name, def);\n+                match def {\n+                    hir::ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_fn_like(ctx.db) => {\n+                        acc.add_macro(ctx, m, name)\n+                    }\n+                    hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n+                        acc.add_module(ctx, m, name)\n+                    }\n+                    _ => (),\n                 }\n             }\n \n@@ -52,10 +57,12 @@ pub(crate) fn complete_item_list(\n         }\n         Qualified::Absolute => acc.add_crate_roots(ctx),\n         Qualified::No if ctx.qualifier_ctx.none() => {\n-            ctx.process_all_names(&mut |name, def| {\n-                if let Some(def) = module_or_fn_macro(ctx.db, def) {\n-                    acc.add_resolution(ctx, name, def);\n+            ctx.process_all_names(&mut |name, def| match def {\n+                hir::ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_fn_like(ctx.db) => {\n+                    acc.add_macro(ctx, m, name)\n                 }\n+                hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => acc.add_module(ctx, m, name),\n+                _ => (),\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }"}, {"sha": "f262355fc06ee8d9b4512f2d6b5da4d870efac87", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=90483321ee0b47d48a5019bd9bbb11b45a24ac84", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n-pub(crate) fn complete_use_tree(\n+pub(crate) fn complete_use_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     PathCompletionCtx { qualified, use_tree_parent, .. }: &PathCompletionCtx,\n@@ -96,8 +96,8 @@ pub(crate) fn complete_use_tree(\n             cov_mark::hit!(unqualified_path_selected_only);\n             ctx.process_all_names(&mut |name, res| {\n                 match res {\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => {\n-                        acc.add_resolution(ctx, name, res);\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Module(module)) => {\n+                        acc.add_module(ctx, module, name);\n                     }\n                     ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(e))) => {\n                         // exclude prelude enum"}, {"sha": "30de0e94f7a5fc28e9d2efbbeb65a0301a605ae0", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90483321ee0b47d48a5019bd9bbb11b45a24ac84/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=90483321ee0b47d48a5019bd9bbb11b45a24ac84", "patch": "@@ -1,7 +1,5 @@\n //! Completion for visibility specifiers.\n \n-use hir::ScopeDef;\n-\n use crate::{\n     context::{CompletionContext, PathCompletionCtx, Qualified},\n     Completions,\n@@ -25,7 +23,7 @@ pub(crate) fn complete_vis_path(\n             if let Some(next) = next_towards_current {\n                 if let Some(name) = next.name(ctx.db) {\n                     cov_mark::hit!(visibility_qualified);\n-                    acc.add_resolution(ctx, name, ScopeDef::ModuleDef(next.into()));\n+                    acc.add_module(ctx, next, name);\n                 }\n             }\n "}]}