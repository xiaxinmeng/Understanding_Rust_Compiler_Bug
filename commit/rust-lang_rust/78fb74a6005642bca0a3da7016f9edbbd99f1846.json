{"sha": "78fb74a6005642bca0a3da7016f9edbbd99f1846", "node_id": "C_kwDOAAsO6NoAKDc4ZmI3NGE2MDA1NjQyYmNhMGEzZGE3MDE2ZjllZGJiZDk5ZjE4NDY", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-02-01T15:28:31Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-02-01T20:19:54Z"}, "message": "Fix w/ comments", "tree": {"sha": "2ff2ca55b6f13a1be720ea1752ef134be40f1d1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff2ca55b6f13a1be720ea1752ef134be40f1d1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78fb74a6005642bca0a3da7016f9edbbd99f1846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78fb74a6005642bca0a3da7016f9edbbd99f1846", "html_url": "https://github.com/rust-lang/rust/commit/78fb74a6005642bca0a3da7016f9edbbd99f1846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78fb74a6005642bca0a3da7016f9edbbd99f1846/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c654e4d6f4abd794707c9e4e046b2e7f852e642f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c654e4d6f4abd794707c9e4e046b2e7f852e642f", "html_url": "https://github.com/rust-lang/rust/commit/c654e4d6f4abd794707c9e4e046b2e7f852e642f"}], "stats": {"total": 480, "additions": 281, "deletions": 199}, "files": [{"sha": "68fdbaa6aa025a3fc08c82bc9645ca02ee6bdf2c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -2165,6 +2165,12 @@ impl TypeBinding<'_> {\n             _ => panic!(\"expected equality type binding for parenthesized generic args\"),\n         }\n     }\n+    pub fn opt_const(&self) -> Option<&'_ AnonConst> {\n+        match self.kind {\n+            TypeBindingKind::Equality { term: Term::Const(ref c) } => Some(c),\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "147061dafeb1ed555e543024173fe9ac92f79d8f", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -288,13 +288,21 @@ impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::Term<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Terms(ExpectedFound::new(a_is_expected, a, b)) }\n+        match (a, b) {\n+            (ty::Term::Ty(a), ty::Term::Ty(b)) => {\n+                ToTrace::to_trace(tcx, cause, a_is_expected, a, b)\n+            }\n+            (ty::Term::Const(a), ty::Term::Const(b)) => {\n+                ToTrace::to_trace(tcx, cause, a_is_expected, a, b)\n+            }\n+            (_, _) => todo!(),\n+        }\n     }\n }\n "}, {"sha": "1eb8190bd7d2fb5d5747640174ed1692fb6ba620", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -2127,7 +2127,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::Types(exp_found) => self.expected_found_str_ty(exp_found),\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n             infer::Consts(exp_found) => self.expected_found_str(exp_found),\n-            infer::Terms(exp_found) => self.expected_found_str(exp_found),\n             infer::TraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n                     expected: exp_found.expected.print_only_trait_path(),"}, {"sha": "266eec08cebf57ec7fed15994cbf0998db03b961", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -371,7 +371,6 @@ pub enum ValuePairs<'tcx> {\n     Types(ExpectedFound<Ty<'tcx>>),\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n     Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),\n-    Terms(ExpectedFound<ty::Term<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n }"}, {"sha": "d06e8496f59b78919fea43c94aabe94d3bbdf438", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -1356,11 +1356,26 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     normalized_ty,\n                     data.term,\n                 ) {\n-                    values = Some(infer::ValuePairs::Terms(ExpectedFound::new(\n-                        is_normalized_ty_expected,\n-                        normalized_ty,\n-                        data.term,\n-                    )));\n+                    values = Some(match (normalized_ty, data.term) {\n+                        (ty::Term::Ty(normalized_ty), ty::Term::Ty(ty)) => {\n+                            infer::ValuePairs::Types(ExpectedFound::new(\n+                                is_normalized_ty_expected,\n+                                normalized_ty,\n+                                ty,\n+                            ))\n+                        }\n+                        (ty::Term::Const(normalized_ct), ty::Term::Const(ct)) => {\n+                            infer::ValuePairs::Consts(ExpectedFound::new(\n+                                is_normalized_ty_expected,\n+                                normalized_ct,\n+                                ct,\n+                            ))\n+                        }\n+                        (_, _) => span_bug!(\n+                            obligation.cause.span,\n+                            \"found const or type where other expected\"\n+                        ),\n+                    });\n                     err_buf = error;\n                     err = &err_buf;\n                 }"}, {"sha": "bad4ee3042413a91cd77a04abec6727c4d94c7bf", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 27, "deletions": 54, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -199,61 +199,30 @@ fn project_and_unify_type<'cx, 'tcx>(\n     let mut obligations = vec![];\n \n     let infcx = selcx.infcx();\n-    match obligation.predicate.term {\n-        ty::Term::Ty(obligation_pred_ty) => {\n-            let normalized_ty = match opt_normalize_projection_type(\n-                selcx,\n-                obligation.param_env,\n-                obligation.predicate.projection_ty,\n-                obligation.cause.clone(),\n-                obligation.recursion_depth,\n-                &mut obligations,\n-            ) {\n-                Ok(Some(n)) => n.ty().unwrap(),\n-                Ok(None) => return Ok(Ok(None)),\n-                Err(InProgress) => return Ok(Err(InProgress)),\n-            };\n-            debug!(?normalized_ty, ?obligations, \"project_and_unify_type result\");\n-            match infcx\n-                .at(&obligation.cause, obligation.param_env)\n-                .eq(normalized_ty, obligation_pred_ty)\n-            {\n-                Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n-                    obligations.extend(inferred_obligations);\n-                    Ok(Ok(Some(obligations)))\n-                }\n-                Err(err) => {\n-                    debug!(\"project_and_unify_type: equating types encountered error {:?}\", err);\n-                    Err(MismatchedProjectionTypes { err })\n-                }\n-            }\n+    let normalized = match opt_normalize_projection_type(\n+        selcx,\n+        obligation.param_env,\n+        obligation.predicate.projection_ty,\n+        obligation.cause.clone(),\n+        obligation.recursion_depth,\n+        &mut obligations,\n+    ) {\n+        Ok(Some(n)) => n,\n+        Ok(None) => return Ok(Ok(None)),\n+        Err(InProgress) => return Ok(Err(InProgress)),\n+    };\n+    debug!(?normalized, ?obligations, \"project_and_unify_type result\");\n+    match infcx\n+        .at(&obligation.cause, obligation.param_env)\n+        .eq(normalized, obligation.predicate.term)\n+    {\n+        Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n+            obligations.extend(inferred_obligations);\n+            Ok(Ok(Some(obligations)))\n         }\n-        ty::Term::Const(obligation_pred_const) => {\n-            let normalized_const = match opt_normalize_projection_type(\n-                selcx,\n-                obligation.param_env,\n-                obligation.predicate.projection_ty,\n-                obligation.cause.clone(),\n-                obligation.recursion_depth,\n-                &mut obligations,\n-            ) {\n-                Ok(Some(n)) => n.ct().unwrap(),\n-                Ok(None) => return Ok(Ok(None)),\n-                Err(InProgress) => return Ok(Err(InProgress)),\n-            };\n-            match infcx\n-                .at(&obligation.cause, obligation.param_env)\n-                .eq(normalized_const, obligation_pred_const)\n-            {\n-                Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n-                    obligations.extend(inferred_obligations);\n-                    Ok(Ok(Some(obligations)))\n-                }\n-                Err(err) => {\n-                    debug!(\"project_and_unify_type: equating consts encountered error {:?}\", err);\n-                    Err(MismatchedProjectionTypes { err })\n-                }\n-            }\n+        Err(err) => {\n+            debug!(\"project_and_unify_type: equating types encountered error {:?}\", err);\n+            Err(MismatchedProjectionTypes { err })\n         }\n     }\n }\n@@ -934,6 +903,8 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             // created (and hence the new ones will quickly be\n             // discarded as duplicated). But when doing trait\n             // evaluation this is not the case, and dropping the trait\n+            // evaluations can causes ICEs (e.g., #43132).\n+            debug!(?ty, \"found normalized ty\");\n             obligations.extend(ty.obligations);\n             return Ok(Some(ty.value));\n         }\n@@ -1127,6 +1098,8 @@ fn project<'cx, 'tcx>(\n             Ok(Projected::Progress(confirm_candidate(selcx, obligation, candidate)))\n         }\n         ProjectionCandidateSet::None => Ok(Projected::NoProgress(\n+            // FIXME(associated_const_generics): this may need to change in the future?\n+            // need to investigate whether or not this is fine.\n             selcx\n                 .tcx()\n                 .mk_projection(obligation.predicate.item_def_id, obligation.predicate.substs)"}, {"sha": "5eb9664e1d7134afafe2d2fa65ecc2e00a4bacda", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -1244,17 +1244,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // the \"projection predicate\" for:\n                 //\n                 // `<T as Iterator>::Item = u32`\n-                let def_kind = tcx.def_kind(projection_ty.skip_binder().item_def_id);\n+                let assoc_item_def_id = projection_ty.skip_binder().item_def_id;\n+                let def_kind = tcx.def_kind(assoc_item_def_id);\n                 match (def_kind, term) {\n                     (hir::def::DefKind::AssocTy, ty::Term::Ty(_))\n                     | (hir::def::DefKind::AssocConst, ty::Term::Const(_)) => (),\n                     (_, _) => {\n+                        let got = if let ty::Term::Ty(_) = term { \"type\" } else { \"const\" };\n+                        let expected = def_kind.descr(assoc_item_def_id);\n                         tcx.sess\n                             .struct_span_err(\n                                 binding.span,\n-                                \"type/const mismatch in equality bind of associated field\",\n+                                &format!(\"mismatch in bind of {expected}, got {got}\"),\n+                            )\n+                            .span_note(\n+                                tcx.def_span(assoc_item_def_id),\n+                                &format!(\"{expected} defined here does not match {got}\"),\n                             )\n-                            .span_label(binding.span, \"type/const Mismatch\")\n                             .emit();\n                     }\n                 }"}, {"sha": "7990c14f7737bf72591a2d5ea1af0fcb9d8c3b8d", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 20, "deletions": 44, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -161,40 +161,26 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             // We've encountered an `AnonConst` in some path, so we need to\n             // figure out which generic parameter it corresponds to and return\n             // the relevant type.\n-            let filtered = path\n-                .segments\n-                .iter()\n-                .filter_map(|seg| seg.args.map(|args| (args.args, seg)))\n-                .find_map(|(args, seg)| {\n-                    args.iter()\n-                        .filter(|arg| arg.is_ty_or_const())\n-                        .position(|arg| arg.id() == hir_id)\n-                        .map(|index| (index, seg))\n-                });\n-            // FIXME(associated_const_equality): recursively search through the bindings instead\n-            // of just top level.\n+            let filtered = path.segments.iter().find_map(|seg| {\n+                seg.args?\n+                    .args\n+                    .iter()\n+                    .filter(|arg| arg.is_ty_or_const())\n+                    .position(|arg| arg.id() == hir_id)\n+                    .map(|index| (index, seg))\n+            });\n \n+            // FIXME(associated_const_generics): can we blend this with iteration above?\n             let (arg_index, segment) = match filtered {\n                 None => {\n-                    let binding_filtered = path\n-                        .segments\n-                        .iter()\n-                        .filter_map(|seg| seg.args.map(|args| (args.bindings, seg)))\n-                        .find_map(|(bindings, seg)| {\n-                            bindings\n-                                .iter()\n-                                .filter_map(|binding| {\n-                                    if let hir::TypeBindingKind::Equality { term: Term::Const(c) } =\n-                                        binding.kind\n-                                    {\n-                                        Some(c)\n-                                    } else {\n-                                        None\n-                                    }\n-                                })\n-                                .position(|ct| ct.hir_id == hir_id)\n-                                .map(|idx| (idx, seg))\n-                        });\n+                    let binding_filtered = path.segments.iter().find_map(|seg| {\n+                        seg.args?\n+                            .bindings\n+                            .iter()\n+                            .filter_map(TypeBinding::opt_const)\n+                            .position(|ct| ct.hir_id == hir_id)\n+                            .map(|idx| (idx, seg))\n+                    });\n                     match binding_filtered {\n                         Some(inner) => inner,\n                         None => {\n@@ -518,20 +504,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                   path\n                       .segments\n                       .iter()\n-                      .filter_map(|seg| seg.args.map(|args| (args.bindings, seg)))\n-                      .find_map(|(bindings, seg)| {\n-                          bindings\n+                      .find_map(|seg| {\n+                          seg.args?.bindings\n                               .iter()\n-                              .filter_map(|binding| {\n-                                  if let hir::TypeBindingKind::Equality { term: Term::Const(c) } =\n-                                      binding.kind\n-                                  {\n-                                          Some((binding, c))\n-                                  } else {\n-                                      None\n-                                  }\n-                              })\n-                              .find_map(|(binding, ct)| if ct.hir_id == hir_id {\n+                              .find_map(|binding| if binding.opt_const()?.hir_id == hir_id {\n                                 Some((binding, seg))\n                               } else {\n                                 None"}, {"sha": "5e029a12df26f844006de127056f9a30b39a6995", "filename": "src/test/ui/associated-consts/assoc-const-eq-missing.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-eq-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-eq-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-eq-missing.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -0,0 +1,26 @@\n+#![feature(associated_const_equality)]\n+#![allow(unused)]\n+\n+pub trait Foo {\n+  const N: usize;\n+}\n+\n+pub struct Bar;\n+\n+impl Foo for Bar {\n+  const N: usize = 3;\n+}\n+\n+\n+fn foo1<F: Foo<Z=3>>() {}\n+//~^ ERROR associated type\n+fn foo2<F: Foo<Z=usize>>() {}\n+//~^ ERROR associated type\n+fn foo3<F: Foo<Z=5>>() {}\n+//~^ ERROR associated type\n+\n+fn main() {\n+  foo1::<Bar>();\n+  foo2::<Bar>();\n+  foo3::<Bar>();\n+}"}, {"sha": "b4bd6456c8517b4482eb2098332e86c0b25bd928", "filename": "src/test/ui/associated-consts/assoc-const-eq-missing.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-eq-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-eq-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-eq-missing.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -0,0 +1,21 @@\n+error[E0220]: associated type `Z` not found for `Foo`\n+  --> $DIR/assoc-const-eq-missing.rs:15:16\n+   |\n+LL | fn foo1<F: Foo<Z=3>>() {}\n+   |                ^ associated type `Z` not found\n+\n+error[E0220]: associated type `Z` not found for `Foo`\n+  --> $DIR/assoc-const-eq-missing.rs:17:16\n+   |\n+LL | fn foo2<F: Foo<Z=usize>>() {}\n+   |                ^ associated type `Z` not found\n+\n+error[E0220]: associated type `Z` not found for `Foo`\n+  --> $DIR/assoc-const-eq-missing.rs:19:16\n+   |\n+LL | fn foo3<F: Foo<Z=5>>() {}\n+   |                ^ associated type `Z` not found\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0220`."}, {"sha": "c3293156345a79bcadcb4aeaf150400e9bb89704", "filename": "src/test/ui/associated-consts/assoc-const-ty-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -21,9 +21,9 @@ impl FooTy for Bar {\n \n \n fn foo<F: Foo<N=usize>>() {}\n-//~^ ERROR type/const mismatch\n+//~^ ERROR mismatch in\n fn foo2<F: FooTy<T=3usize>>() {}\n-//~^ ERROR type/const mismatch\n+//~^ ERROR mismatch in\n \n fn main() {\n   foo::<Bar>();"}, {"sha": "703245145ce4e0576bcf7fe213e705b550921571", "filename": "src/test/ui/associated-consts/assoc-const-ty-mismatch.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -1,14 +1,26 @@\n-error: type/const mismatch in equality bind of associated field\n+error: mismatch in bind of associated constant, got type\n   --> $DIR/assoc-const-ty-mismatch.rs:23:15\n    |\n LL | fn foo<F: Foo<N=usize>>() {}\n-   |               ^^^^^^^ type/const Mismatch\n+   |               ^^^^^^^\n+   |\n+note: associated constant defined here does not match type\n+  --> $DIR/assoc-const-ty-mismatch.rs:5:3\n+   |\n+LL |   const N: usize;\n+   |   ^^^^^^^^^^^^^^^\n \n-error: type/const mismatch in equality bind of associated field\n+error: mismatch in bind of associated type, got const\n   --> $DIR/assoc-const-ty-mismatch.rs:25:18\n    |\n LL | fn foo2<F: FooTy<T=3usize>>() {}\n-   |                  ^^^^^^^^ type/const Mismatch\n+   |                  ^^^^^^^^\n+   |\n+note: associated type defined here does not match const\n+  --> $DIR/assoc-const-ty-mismatch.rs:9:3\n+   |\n+LL |   type T;\n+   |   ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0cccc6b38a3a931d14e8603d9dc66ffb67f3efef", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n    |\n-note: expected struct `Blue`, found struct `Black`\n+note: expected this to be `Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:16:40\n    |\n LL | impl Vehicle for ModelT { type Color = Black; }\n@@ -21,7 +21,7 @@ error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n    |\n-note: expected struct `Black`, found struct `Blue`\n+note: expected this to be `Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:21:40\n    |\n LL | impl Vehicle for ModelU { type Color = Blue; }"}, {"sha": "521907a60445c4c1c423935c5f16e9524d7443bf", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -19,7 +19,7 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n LL |     foo1(a);\n    |     ^^^^ type mismatch resolving `<isize as Foo>::A == Bar`\n    |\n-note: expected struct `Bar`, found `usize`\n+note: expected this to be `Bar`\n   --> $DIR/associated-types-eq-3.rs:12:14\n    |\n LL |     type A = usize;\n@@ -36,7 +36,7 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n LL |     baz(&a);\n    |         ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n    |\n-note: expected struct `Bar`, found `usize`\n+note: expected this to be `Bar`\n   --> $DIR/associated-types-eq-3.rs:12:14\n    |\n LL |     type A = usize;"}, {"sha": "1329e1382fd4a51bb65db364549cfa73112770d2", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,11 +4,13 @@ error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n-note: expected `isize`, found `usize`\n+note: expected this to be `&isize`\n   --> $DIR/associated-types-eq-hr.rs:26:14\n    |\n LL |     type A = &'a usize;\n    |              ^^^^^^^^^\n+   = note: expected reference `&isize`\n+              found reference `&usize`\n note: required by a bound in `foo`\n   --> $DIR/associated-types-eq-hr.rs:45:36\n    |\n@@ -24,11 +26,13 @@ error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n    |\n-note: expected `usize`, found `isize`\n+note: expected this to be `&usize`\n   --> $DIR/associated-types-eq-hr.rs:14:14\n    |\n LL |     type A = &'a isize;\n    |              ^^^^^^^^^\n+   = note: expected reference `&usize`\n+              found reference `&isize`\n note: required by a bound in `bar`\n   --> $DIR/associated-types-eq-hr.rs:52:36\n    |"}, {"sha": "516057e53d25efd466daf4da7f03eda9337d4b37", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -7,12 +7,12 @@ LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Adapter<I> as Iterator>::Item == Option<T>`\n    |\n-note: expected enum `Option`, found type parameter `T`\n+note: expected this to be `Option<T>`\n   --> $DIR/associated-types-issue-20346.rs:23:17\n    |\n LL |     type Item = T;\n    |                 ^\n-   = note: expected type `Option<T>`\n+   = note: expected enum `Option<T>`\n               found type `T`\n note: required by a bound in `is_iterator_of`\n   --> $DIR/associated-types-issue-20346.rs:15:34"}, {"sha": "922cf88a04999d5c9cf7b81536bc381c67d55935", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n LL |     want_y(t);\n    |     ^^^^^^ expected `i32`, found associated type\n    |\n-   = note: expected type `i32`\n-              found type `<T as Foo>::Y`\n+   = note:         expected type `i32`\n+           found associated type `<T as Foo>::Y`\n note: required by a bound in `want_y`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:44:17\n    |\n@@ -22,8 +22,8 @@ error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n LL |     want_x(t);\n    |     ^^^^^^ expected `u32`, found associated type\n    |\n-   = note: expected type `u32`\n-              found type `<T as Foo>::X`\n+   = note:         expected type `u32`\n+           found associated type `<T as Foo>::X`\n note: required by a bound in `want_x`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:42:17\n    |"}, {"sha": "9c29e969de8da77a123c453d33b244a80f306090", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n    |      - this type parameter      ^^^^^^^^^^^^^^^^^ expected associated type, found type parameter `T`\n    |\n-   = note: expected type `<T as Deref>::Target`\n-              found type `T`\n+   = note: expected associated type `<T as Deref>::Target`\n+               found type parameter `T`\n help: consider further restricting this bound\n    |\n LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<'_, T> for T {"}, {"sha": "283ecea735d4156209b9f2b22614e9262fc451db", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -1,11 +1,14 @@\n error[E0271]: type mismatch resolving `<impl Bar as Foo>::Item == i32`\n   --> $DIR/impl-trait-return-missing-constraint.rs:25:13\n    |\n+LL | fn bar() -> impl Bar {\n+   |             -------- the found opaque type\n+...\n LL | fn baz() -> impl Bar<Item = i32> {\n    |             ^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n    |\n-   = note: expected type `i32`\n-              found type `<impl Bar as Foo>::Item`\n+   = note:         expected type `i32`\n+           found associated type `<impl Bar as Foo>::Item`\n help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n    |\n LL | fn bar() -> impl Bar<Item = i32> {"}, {"sha": "200efbe02e6616cae534c7d82132b60059835eba", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<() as Array>::Element == &()`\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Array>::Element == &()`\n    |\n-note: expected `&()`, found `()`\n+note: expected this to be `&()`\n   --> $DIR/issue-44153.rs:10:20\n    |\n LL |     type Element = ();"}, {"sha": "e95943f34d5496738b91d457eef2f9e1e539a74d", "filename": "src/test/ui/associated-types/issue-72806.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n LL |     type Sibling = Foo2;\n    |                    ^^^^ type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n    |\n-note: expected `char`, found `u32`\n+note: expected this to be `char`\n   --> $DIR/issue-72806.rs:18:15\n    |\n LL |     type Ok = u32;"}, {"sha": "c00b48abc1c330993d5755fe471e48949a225c4f", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 49, "deletions": 28, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<A as Trait>::Associated == ()`\n LL |     accepts_trait(a);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<A as Trait>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<A as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -22,8 +22,8 @@ error[E0271]: type mismatch resolving `<B as Trait>::Associated == ()`\n LL |     accepts_trait(b);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<B as Trait>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<B as Trait>::Associated`\n    = help: consider constraining the associated type `<B as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n@@ -38,8 +38,8 @@ error[E0271]: type mismatch resolving `<C as Trait>::Associated == ()`\n LL |     accepts_trait(c);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<C as Trait>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<C as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -56,8 +56,8 @@ error[E0271]: type mismatch resolving `<D as Trait>::Associated == ()`\n LL |     accepts_trait(d);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<D as Trait>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<D as Trait>::Associated`\n    = help: consider constraining the associated type `<D as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n@@ -72,8 +72,8 @@ error[E0271]: type mismatch resolving `<E as GenericTrait<()>>::Associated == ()\n LL |     accepts_generic_trait(e);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<E as GenericTrait<()>>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<E as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n@@ -90,8 +90,8 @@ error[E0271]: type mismatch resolving `<F as GenericTrait<()>>::Associated == ()\n LL |     accepts_generic_trait(f);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<F as GenericTrait<()>>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<F as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n@@ -108,8 +108,8 @@ error[E0271]: type mismatch resolving `<G as GenericTrait<()>>::Associated == ()\n LL |     accepts_generic_trait(g);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<G as GenericTrait<()>>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<G as GenericTrait<()>>::Associated`\n    = help: consider constraining the associated type `<G as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_generic_trait`\n@@ -121,11 +121,14 @@ LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:79:5\n    |\n+LL | fn returns_opaque() -> impl Trait + 'static {\n+   |                        -------------------- the found opaque type\n+...\n LL |     accepts_trait(returns_opaque());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<impl Trait as Trait>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<impl Trait as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -139,11 +142,14 @@ LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:82:5\n    |\n+LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n+   |                                --------------------------- the found opaque type\n+...\n LL |     accepts_trait(returns_opaque_derived());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<impl DerivedTrait as Trait>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<impl DerivedTrait as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -157,11 +163,14 @@ LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static\n error[E0271]: type mismatch resolving `<impl Foo + Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:85:5\n    |\n+LL | fn returns_opaque_foo() -> impl Trait + Foo {\n+   |                            ---------------- the found opaque type\n+...\n LL |     accepts_trait(returns_opaque_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<impl Foo + Trait as Trait>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<impl Foo + Trait as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -175,11 +184,14 @@ LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n error[E0271]: type mismatch resolving `<impl Foo + DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:88:5\n    |\n+LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n+   |                                    ----------------------- the found opaque type\n+...\n LL |     accepts_trait(returns_opaque_derived_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<impl Foo + DerivedTrait as Trait>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<impl Foo + DerivedTrait as Trait>::Associated`\n    = help: consider constraining the associated type `<impl Foo + DerivedTrait as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n@@ -191,11 +203,14 @@ LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:91:5\n    |\n+LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {\n+   |                                ------------------------------- the found opaque type\n+...\n LL |     accepts_generic_trait(returns_opaque_generic());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n@@ -209,11 +224,14 @@ LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'st\n error[E0271]: type mismatch resolving `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:94:5\n    |\n+LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n+   |                                    --------------------------- the found opaque type\n+...\n LL |     accepts_generic_trait(returns_opaque_generic_foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n@@ -227,11 +245,14 @@ LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> +\n error[E0271]: type mismatch resolving `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:97:5\n    |\n+LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n+   |                                          ---------------------------------------- the found opaque type\n+...\n LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated`\n+   = note:    expected unit type `()`\n+           found associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated`\n    = help: consider constraining the associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_generic_trait`"}, {"sha": "9afbe82c3219538e5900342ce9e95a6bedbdd66a", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n LL |     type Sibling = Foo2;\n    |                    ^^^^ type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n    |\n-note: expected `()`, found `u32`\n+note: expected this to be `()`\n   --> $DIR/point-at-type-on-obligation-failure.rs:18:15\n    |\n LL |     type Ok = u32;"}, {"sha": "9c9c7237d71459a4ad74b88d71374954c3100ec0", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n LL |     foo(3_i8);\n    |     ^^^ type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n    |\n-note: expected `u32`, found `&str`\n+note: expected this to be `u32`\n   --> $DIR/E0271.rs:7:43\n    |\n LL | impl Trait for i8 { type AssociatedType = &'static str; }"}, {"sha": "3f1f33a3b123f40361e4d54bcbc01667e044a307", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -19,7 +19,7 @@ LL | fn foo() -> impl Generator<Return = i32> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found enum `Result`\n    |\n    = note: expected type `i32`\n-              found type `Result<{integer}, _>`\n+              found enum `Result<{integer}, _>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8e0f23716019688edbaa8177e1a23cf4734d54a2", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -6,8 +6,8 @@ LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n LL |     type Item<'a> = T;\n    |                     ^ expected type parameter `T`, found associated type\n    |\n-   = note: expected type `T`\n-              found type `<T as Deref>::Target`\n+   = note: expected type parameter `T`\n+             found associated type `<T as Deref>::Target`\n note: required by a bound in `UnsafeCopy::Item`\n   --> $DIR/issue-68656-unsized-values.rs:6:36\n    |"}, {"sha": "f0e03e73f0b3ef32766d0b2a320364a3d8c87776", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n LL |     bug(Box::new(x));\n    |     ^^^ type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n    |\n-note: expected slice `[u8]`, found `i32`\n+note: expected this to be `[u8]`\n   --> $DIR/issue-74684-2.rs:10:18\n    |\n LL |     type F<'a> = i32;"}, {"sha": "0ebba37e4ec70c60a876eef6eb360640e3332df5", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,13 +4,13 @@ error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb\n LL |     let v = Unit2.m(\n    |                   ^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n-note: expected associated type, found struct `Unit4`\n+note: expected this to be `<_ as Ty<'_>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14\n    |\n LL |     type O = T::Output;\n    |              ^^^^^^^^^\n-   = note: expected type `<_ as Ty<'_>>::V`\n-              found type `Unit4`\n+   = note: expected associated type `<_ as Ty<'_>>::V`\n+                       found struct `Unit4`\n    = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4` or calling a method that returns `<_ as Ty<'_>>::V`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `T1::m`"}, {"sha": "afa21c1a858a2efe714f0a471403d0171b6834be", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,13 +4,13 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n    |\n-note: expected associated type, found `()`\n+note: expected this to be `<T as impl_trait::Trait>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:14:19\n    |\n LL |     type Output = T;\n    |                   ^\n-   = note: expected type `<T as impl_trait::Trait>::Assoc`\n-              found type `()`\n+   = note: expected associated type `<T as impl_trait::Trait>::Assoc`\n+                    found unit type `()`\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    |\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n@@ -28,13 +28,13 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n    |\n-note: expected associated type, found `()`\n+note: expected this to be `<T as lifetimes::Trait<'static>>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:14:19\n    |\n LL |     type Output = T;\n    |                   ^\n-   = note: expected type `<T as lifetimes::Trait<'static>>::Assoc`\n-              found type `()`\n+   = note: expected associated type `<T as lifetimes::Trait<'static>>::Assoc`\n+                    found unit type `()`\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {"}, {"sha": "fe48e92da5eacc7d44c4a758f24b0413679c0cd3", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -1,16 +1,19 @@\n error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n   --> $DIR/issue-70877.rs:7:12\n    |\n+LL | type FooRet = impl std::fmt::Debug;\n+   |               -------------------- the found opaque type\n+...\n LL | type Foo = impl Iterator<Item = FooItem>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n    |\n-note: expected enum `Option`, found opaque type\n+note: expected this to be `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n   --> $DIR/issue-70877.rs:13:17\n    |\n LL |     type Item = FooItem;\n    |                 ^^^^^^^\n-   = note: expected type `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-              found type `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n+   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "65daabe419d3f3b81862bc8904edf28257ca35ae", "filename": "src/test/ui/impl-trait/projection-mismatch-in-impl-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<() as Super>::Assoc == ()`\n LL | fn test() -> impl Test {\n    |              ^^^^^^^^^ type mismatch resolving `<() as Super>::Assoc == ()`\n    |\n-note: expected `()`, found `u8`\n+note: expected this to be `()`\n   --> $DIR/projection-mismatch-in-impl-where-clause.rs:6:18\n    |\n LL |     type Assoc = u8;"}, {"sha": "982b6118ce659bb2fe80aea8a5d4f0cfd53aa681", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [\n LL |         .cloned()\n    |          ^^^^^^ expected reference, found `u8`\n    |\n-   = note: expected type `&_`\n-              found type `u8`\n+   = note: expected reference `&_`\n+                   found type `u8`\n note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "c6650d60c21e97371bf7d0614276a88c5eb47022", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n LL |     for _ in HashMap::new().iter().cloned() {}\n    |                                    ^^^^^^ expected reference, found tuple\n    |\n-   = note: expected type `&_`\n-              found type `(&_, &_)`\n+   = note: expected reference `&_`\n+                  found tuple `(&_, &_)`\n note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -18,8 +18,8 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n LL |     for _ in HashMap::new().iter().cloned() {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n-   = note: expected type `(&_, &_)`\n-              found type `&_`\n+   = note:  expected tuple `(&_, &_)`\n+           found reference `&_`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n "}, {"sha": "1f64a90bc1cf91547a7af1ece25ed737ff66d025", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n    |\n-note: expected `()`, found `&()`\n+note: expected this to be `()`\n   --> $DIR/issue-39970.rs:10:20\n    |\n LL |     type Element = &'a ();"}, {"sha": "733456a1a8bd1b22751c39944b4bc98d4e617dc2", "filename": "src/test/ui/issues/issue-67039-unsound-pin-partialeq.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<Rc<Apple> as Deref>::Target == Rc<Apple>\n LL |     let _ = Pin::new(Apple) == Rc::pin(Apple);\n    |                             ^^ expected struct `Apple`, found struct `Rc`\n    |\n-   = note: expected type `Apple`\n-              found type `Rc<Apple>`\n+   = note: expected struct `Apple`\n+              found struct `Rc<Apple>`\n    = note: required because of the requirements on the impl of `PartialEq<Pin<Rc<Apple>>>` for `Pin<Apple>`\n \n error: aborting due to previous error"}, {"sha": "78d1a3caf4a30e379e01860e4b3fb3a65535aa4a", "filename": "src/test/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -8,8 +8,8 @@ LL | |         panic!(\"Can't connect to server.\");\n LL | |     }) as Box<dyn FnMut()>);\n    | |______^ expected `()`, found `!`\n    |\n-   = note: expected type `()`\n-              found type `!`\n+   = note: expected unit type `()`\n+                   found type `!`\n    = note: required for the cast to the object type `dyn FnMut()`\n \n error: aborting due to previous error"}, {"sha": "4251c1a1ed6cd9d3572ec30e7b2f99d39c812c18", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n LL |     is_obj(x)\n    |     ^^^^^^ type mismatch resolving `<i32 as Is>::T == i64`\n    |\n-note: expected `i64`, found `i32`\n+note: expected this to be `i64`\n   --> $DIR/check-trait-object-bounds-5.rs:9:14\n    |\n LL |     type T = U;"}, {"sha": "5b23a513eea9b96f77d6012a13f7bd7a4bc9464f", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n LL |     is_obj(x)\n    |     ^^^^^^ type mismatch resolving `<i32 as Is>::T == i64`\n    |\n-note: expected `i64`, found `i32`\n+note: expected this to be `i64`\n   --> $DIR/check-trait-object-bounds-6.rs:9:14\n    |\n LL |     type T = U;"}, {"sha": "6fc6b4bfe1f0048cff2e0fe98fd8c080646e7984", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -1,16 +1,18 @@\n error[E0271]: type mismatch resolving `<() as Bar>::Foo == ()`\n   --> $DIR/issue-63355.rs:34:20\n    |\n+LL | pub type FooImpl = impl Foo;\n+   |                    -------- the found opaque type\n LL | pub type BarImpl = impl Bar<Foo = FooImpl>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Bar>::Foo == ()`\n    |\n-note: expected `()`, found opaque type\n+note: expected this to be `()`\n   --> $DIR/issue-63355.rs:24:16\n    |\n LL |     type Foo = FooImpl;\n    |                ^^^^^^^\n-   = note: expected type `()`\n-              found type `impl Foo`\n+   = note: expected unit type `()`\n+            found opaque type `impl Foo`\n \n error: aborting due to previous error\n "}, {"sha": "19ed9a7476c1b872bded84d1f988665a2067bfca", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fb74a6005642bca0a3da7016f9edbbd99f1846/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=78fb74a6005642bca0a3da7016f9edbbd99f1846", "patch": "@@ -3,9 +3,17 @@ error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as\n    |\n LL | type G<'a, T> = impl Future<Output = ()>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+...\n+LL |         async move { self.f().await }\n+   |                    ------------------ the found `async` block\n    |\n-   = note: expected type `()`\n-              found type `<impl Future<Output = [async output]> as Future>::Output`\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl Future<Output = [async output]> as Future>::Output`\n    = help: consider constraining the associated type `<impl Future<Output = [async output]> as Future>::Output` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}]}