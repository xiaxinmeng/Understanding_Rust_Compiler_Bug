{"sha": "843c12601a63961c185c479e258313e568f3a7d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0M2MxMjYwMWE2Mzk2MWMxODVjNDc5ZTI1ODMxM2U1NjhmM2E3ZDg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-21T00:01:31Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-21T00:08:39Z"}, "message": "Use our own `FileName` struct rather than exporting libsyntax's", "tree": {"sha": "9e9897f424c6d50aa56683568d5ef49136b527f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e9897f424c6d50aa56683568d5ef49136b527f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/843c12601a63961c185c479e258313e568f3a7d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/843c12601a63961c185c479e258313e568f3a7d8", "html_url": "https://github.com/rust-lang/rust/commit/843c12601a63961c185c479e258313e568f3a7d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/843c12601a63961c185c479e258313e568f3a7d8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "539d4d96651b3516a92d2590aa276a121311b3c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/539d4d96651b3516a92d2590aa276a121311b3c5", "html_url": "https://github.com/rust-lang/rust/commit/539d4d96651b3516a92d2590aa276a121311b3c5"}], "stats": {"total": 84, "additions": 53, "deletions": 31}, "files": [{"sha": "3d86404e02988a74f2dfe22315c91955f534ec54", "filename": "src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -215,7 +215,7 @@ fn execute(opts: &Options) -> Result<(WriteMode, Summary), failure::Error> {\n             config.set().file_lines(options.file_lines);\n             for f in config.file_lines().files() {\n                 match *f {\n-                    FileName::Custom(ref f) if f == \"stdin\" => {}\n+                    FileName::Stdin => {}\n                     _ => eprintln!(\"Warning: Extra file listed in file_lines option '{}'\", f),\n                 }\n             }\n@@ -500,7 +500,7 @@ impl GetOptsOptions {\n                 FileName::Real(_) => {\n                     eprintln!(\"Warning: Extra file listed in file_lines option '{}'\", f)\n                 }\n-                _ => eprintln!(\"Warning: Not a file '{}'\", f),\n+                FileName::Stdin => eprintln!(\"Warning: Not a file '{}'\", f),\n             }\n         }\n     }"}, {"sha": "8fbd1e02ca0ec889511b53181f3d71b9d6ac3ccc", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -11,13 +11,14 @@\n //! This module contains types and functions to support formatting specific line ranges.\n \n use std::collections::HashMap;\n+use std::path::PathBuf;\n use std::rc::Rc;\n-use std::{cmp, iter, str};\n+use std::{cmp, fmt, iter, str};\n \n use serde::de::{Deserialize, Deserializer};\n use serde_json as json;\n \n-use syntax::codemap::{FileMap, FileName};\n+use syntax::codemap::{self, FileMap};\n \n /// A range of lines in a file, inclusive of both ends.\n pub struct LineRange {\n@@ -26,9 +27,34 @@ pub struct LineRange {\n     pub hi: usize,\n }\n \n+#[derive(Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd)]\n+pub enum FileName {\n+    Real(PathBuf),\n+    Stdin,\n+}\n+\n+impl From<codemap::FileName> for FileName {\n+    fn from(name: codemap::FileName) -> FileName {\n+        match name {\n+            codemap::FileName::Real(p) => FileName::Real(p),\n+            codemap::FileName::Custom(ref f) if f == \"stdin\" => FileName::Stdin,\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for FileName {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self {\n+            FileName::Real(p) => write!(f, \"{}\", p.to_str().unwrap()),\n+            FileName::Stdin => write!(f, \"stdin\"),\n+        }\n+    }\n+}\n+\n impl LineRange {\n-    pub fn file_name(&self) -> &FileName {\n-        &self.file.name\n+    pub fn file_name(&self) -> FileName {\n+        self.file.name.clone().into()\n     }\n }\n \n@@ -169,12 +195,12 @@ impl FileLines {\n     /// Returns true if `range` is fully contained in `self`.\n     #[allow(dead_code)]\n     pub(crate) fn contains(&self, range: &LineRange) -> bool {\n-        self.file_range_matches(range.file_name(), |r| r.contains(Range::from(range)))\n+        self.file_range_matches(&range.file_name(), |r| r.contains(Range::from(range)))\n     }\n \n     /// Returns true if any lines in `range` are in `self`.\n     pub(crate) fn intersects(&self, range: &LineRange) -> bool {\n-        self.file_range_matches(range.file_name(), |r| r.intersects(Range::from(range)))\n+        self.file_range_matches(&range.file_name(), |r| r.intersects(Range::from(range)))\n     }\n \n     /// Returns true if `line` from `file_name` is in `self`.\n@@ -232,7 +258,7 @@ struct JsonSpan {\n fn deserialize_filename<'de, D: Deserializer<'de>>(d: D) -> Result<FileName, D::Error> {\n     let s = String::deserialize(d)?;\n     if s == \"stdin\" {\n-        Ok(FileName::Custom(s))\n+        Ok(FileName::Stdin)\n     } else {\n         Ok(FileName::Real(s.into()))\n     }"}, {"sha": "3724b120228aaca34bf0959b6f3f84f122862b69", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -17,7 +17,7 @@ use std::path::{Path, PathBuf};\n use std::{env, fs};\n \n use config::config_type::ConfigType;\n-pub use config::file_lines::FileLines;\n+pub use config::file_lines::{FileLines, FileName};\n pub use config::lists::*;\n pub use config::options::*;\n "}, {"sha": "5ba2b23b6cf95b3c4a1e8fdb957d65489824b318", "filename": "src/config/options.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::codemap::FileName;\n-\n use config::config_type::ConfigType;\n use config::lists::*;\n-use config::Config;\n+use config::{Config, FileName};\n \n use std::collections::HashSet;\n use std::path::{Path, PathBuf};"}, {"sha": "8cb992e2b8d490e51481eeeeab57689d6ad27209", "filename": "src/filemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -15,9 +15,8 @@ use std::io::{self, BufWriter, Read, Write};\n use std::path::Path;\n \n use checkstyle::output_checkstyle_file;\n-use config::{Config, NewlineStyle, Verbosity, WriteMode};\n+use config::{Config, FileName, NewlineStyle, Verbosity, WriteMode};\n use rustfmt_diff::{make_diff, output_modified, print_diff, Mismatch};\n-use syntax::codemap::FileName;\n \n #[cfg(test)]\n use FileRecord;"}, {"sha": "066411e4d6746776068c4f14a7d8bd544295c4dd", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -46,7 +46,6 @@ use std::rc::Rc;\n use std::time::Duration;\n \n use syntax::ast;\n-pub use syntax::codemap::FileName;\n use syntax::codemap::{CodeMap, FilePathMapping, Span};\n use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n use syntax::errors::{DiagnosticBuilder, Handler};\n@@ -59,9 +58,10 @@ use shape::Indent;\n use utils::use_colored_tty;\n use visitor::{FmtVisitor, SnippetProvider};\n \n-pub use config::options::CliOptions;\n pub use config::summary::Summary;\n-pub use config::{load_config, Color, Config, FileLines, Verbosity, WriteMode};\n+pub use config::{\n+    load_config, CliOptions, Color, Config, FileLines, FileName, Verbosity, WriteMode,\n+};\n \n #[macro_use]\n mod utils;\n@@ -97,8 +97,6 @@ mod types;\n mod vertical;\n pub(crate) mod visitor;\n \n-const STDIN: &str = \"<stdin>\";\n-\n // A map of the files of a crate, with their new content\n pub(crate) type FileMap = Vec<FileRecord>;\n \n@@ -397,7 +395,7 @@ fn should_emit_verbose<F>(path: &FileName, config: &Config, f: F)\n where\n     F: Fn(),\n {\n-    if config.verbose() == Verbosity::Verbose && path.to_string() != STDIN {\n+    if config.verbose() == Verbosity::Verbose && path != &FileName::Stdin {\n         f();\n     }\n }\n@@ -626,7 +624,7 @@ fn parse_input<'sess>(\n         Input::File(file) => parse::new_parser_from_file(parse_session, &file),\n         Input::Text(text) => parse::new_parser_from_source_str(\n             parse_session,\n-            FileName::Custom(\"stdin\".to_owned()),\n+            syntax::codemap::FileName::Custom(\"stdin\".to_owned()),\n             text,\n         ),\n     };\n@@ -797,7 +795,7 @@ fn format_input_inner<T: Write>(\n \n     let main_file = match input {\n         Input::File(ref file) => FileName::Real(file.clone()),\n-        Input::Text(..) => FileName::Custom(\"stdin\".to_owned()),\n+        Input::Text(..) => FileName::Stdin,\n     };\n \n     let krate = match parse_input(input, &parse_session, config) {"}, {"sha": "fbead850eaaa9c68216d0d62d6a54f86ea306838", "filename": "src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -10,11 +10,11 @@\n \n use std::borrow::Cow;\n \n-use syntax::codemap::{BytePos, FileName, Pos, Span};\n+use syntax::codemap::{BytePos, Pos, Span};\n \n use codemap::LineRangeUtils;\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n-use config::WriteMode;\n+use config::{FileName, WriteMode};\n use shape::{Indent, Shape};\n use utils::{count_newlines, last_line_width, mk_sp};\n use visitor::FmtVisitor;\n@@ -177,7 +177,7 @@ impl<'a> FmtVisitor<'a> {\n         // Annoyingly, the library functions for splitting by lines etc. are not\n         // quite right, so we must do it ourselves.\n         let char_pos = self.codemap.lookup_char_pos(span.lo());\n-        let file_name = &char_pos.file.name;\n+        let file_name = &char_pos.file.name.clone().into();\n         let mut status = SnippetStatus::new(char_pos.line);\n \n         let snippet = &*match self.config.write_mode() {"}, {"sha": "d94b2dd1333204e582b40697302369e9cabcae8a", "filename": "src/modules.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -13,9 +13,10 @@ use std::io;\n use std::path::{Path, PathBuf};\n \n use syntax::ast;\n-use syntax::codemap::{self, FileName};\n+use syntax::codemap;\n use syntax::parse::{parser, DirectoryOwnership};\n \n+use config::FileName;\n use utils::contains_skip;\n \n /// List all the files containing modules of a crate.\n@@ -28,12 +29,12 @@ pub fn list_files<'a>(\n     let root_filename = codemap.span_to_filename(krate.span);\n     {\n         let parent = match root_filename {\n-            FileName::Real(ref path) => path.parent().unwrap(),\n+            codemap::FileName::Real(ref path) => path.parent().unwrap(),\n             _ => Path::new(\"\"),\n         };\n         list_submodules(&krate.module, parent, None, codemap, &mut result)?;\n     }\n-    result.insert(root_filename, &krate.module);\n+    result.insert(root_filename.into(), &krate.module);\n     Ok(result)\n }\n "}, {"sha": "4a0ce4399a4fbc26daa261ec61b25ac1bc3f51a6", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/843c12601a63961c185c479e258313e568f3a7d8/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843c12601a63961c185c479e258313e568f3a7d8/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=843c12601a63961c185c479e258313e568f3a7d8", "patch": "@@ -594,7 +594,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     pub fn visit_attrs(&mut self, attrs: &[ast::Attribute], style: ast::AttrStyle) -> bool {\n         for attr in attrs {\n             if attr.name() == DEPR_SKIP_ANNOTATION {\n-                let file_name = self.codemap.span_to_filename(attr.span);\n+                let file_name = self.codemap.span_to_filename(attr.span).into();\n                 self.report.append(\n                     file_name,\n                     vec![FormattingError::from_span(\n@@ -607,7 +607,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 if attr.path.segments.len() == 1\n                     || attr.path.segments[1].ident.to_string() != \"skip\"\n                 {\n-                    let file_name = self.codemap.span_to_filename(attr.span);\n+                    let file_name = self.codemap.span_to_filename(attr.span).into();\n                     self.report.append(\n                         file_name,\n                         vec![FormattingError::from_span("}]}