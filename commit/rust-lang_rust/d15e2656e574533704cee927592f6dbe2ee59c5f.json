{"sha": "d15e2656e574533704cee927592f6dbe2ee59c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNWUyNjU2ZTU3NDUzMzcwNGNlZTkyNzU5MmY2ZGJlMmVlNTljNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-22T08:36:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-22T08:36:22Z"}, "message": "Auto merge of #34771 - murarth:string-insert-str, r=alexcrichton\n\nAdd method `String::insert_str`", "tree": {"sha": "fc0bcbb592d80ebd631da58fac2def9bd9898e72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc0bcbb592d80ebd631da58fac2def9bd9898e72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15e2656e574533704cee927592f6dbe2ee59c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15e2656e574533704cee927592f6dbe2ee59c5f", "html_url": "https://github.com/rust-lang/rust/commit/d15e2656e574533704cee927592f6dbe2ee59c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15e2656e574533704cee927592f6dbe2ee59c5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7597588d5aa7993dcd26cb0d773ebd27384d91", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7597588d5aa7993dcd26cb0d773ebd27384d91", "html_url": "https://github.com/rust-lang/rust/commit/0d7597588d5aa7993dcd26cb0d773ebd27384d91"}, {"sha": "0bcf64cfc792c39b09d0626649c3d0c18257499a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcf64cfc792c39b09d0626649c3d0c18257499a", "html_url": "https://github.com/rust-lang/rust/commit/0bcf64cfc792c39b09d0626649c3d0c18257499a"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "f91d8a5f4e1e84d506fd4562fa69f27d87b4c72d", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d15e2656e574533704cee927592f6dbe2ee59c5f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15e2656e574533704cee927592f6dbe2ee59c5f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=d15e2656e574533704cee927592f6dbe2ee59c5f", "patch": "@@ -1132,18 +1132,62 @@ impl String {\n         assert!(idx <= len);\n         assert!(self.is_char_boundary(idx));\n         let bits = ch.encode_utf8();\n-        let bits = bits.as_slice();\n-        let amt = bits.len();\n+\n+        unsafe {\n+            self.insert_bytes(idx, bits.as_slice());\n+        }\n+    }\n+\n+    unsafe fn insert_bytes(&mut self, idx: usize, bytes: &[u8]) {\n+        let len = self.len();\n+        let amt = bytes.len();\n         self.vec.reserve(amt);\n \n+        ptr::copy(self.vec.as_ptr().offset(idx as isize),\n+                  self.vec.as_mut_ptr().offset((idx + amt) as isize),\n+                  len - idx);\n+        ptr::copy(bytes.as_ptr(),\n+                  self.vec.as_mut_ptr().offset(idx as isize),\n+                  amt);\n+        self.vec.set_len(len + amt);\n+    }\n+\n+    /// Inserts a string into this `String` at a byte position.\n+    ///\n+    /// This is an `O(n)` operation as it requires copying every element in the\n+    /// buffer.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `idx` is larger than the `String`'s length, or if it does not\n+    /// lie on a [`char`] boundary.\n+    ///\n+    /// [`char`]: ../../std/primitive.char.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(insert_str)]\n+    ///\n+    /// let mut s = String::from(\"bar\");\n+    ///\n+    /// s.insert_str(0, \"foo\");\n+    ///\n+    /// assert_eq!(\"foobar\", s);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"insert_str\",\n+               reason = \"recent addition\",\n+               issue = \"0\")]\n+    pub fn insert_str(&mut self, idx: usize, string: &str) {\n+        let len = self.len();\n+        assert!(idx <= len);\n+        assert!(self.is_char_boundary(idx));\n+\n         unsafe {\n-            ptr::copy(self.vec.as_ptr().offset(idx as isize),\n-                      self.vec.as_mut_ptr().offset((idx + amt) as isize),\n-                      len - idx);\n-            ptr::copy(bits.as_ptr(),\n-                      self.vec.as_mut_ptr().offset(idx as isize),\n-                      amt);\n-            self.vec.set_len(len + amt);\n+            self.insert_bytes(idx, string.as_bytes());\n         }\n     }\n "}]}