{"sha": "e884ab05c216fc4a4a35d6267d08519dc5dda41d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ODRhYjA1YzIxNmZjNGE0YTM1ZDYyNjdkMDg1MTlkYzVkZGE0MWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T07:15:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T07:15:10Z"}, "message": "write path resolution code only once", "tree": {"sha": "b947b2b74afb3950eaef87f85ee0107eb4847f8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b947b2b74afb3950eaef87f85ee0107eb4847f8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e884ab05c216fc4a4a35d6267d08519dc5dda41d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e884ab05c216fc4a4a35d6267d08519dc5dda41d", "html_url": "https://github.com/rust-lang/rust/commit/e884ab05c216fc4a4a35d6267d08519dc5dda41d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e884ab05c216fc4a4a35d6267d08519dc5dda41d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857c35ddb03ee5db97bbb4743dfeedeb3df350ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/857c35ddb03ee5db97bbb4743dfeedeb3df350ec", "html_url": "https://github.com/rust-lang/rust/commit/857c35ddb03ee5db97bbb4743dfeedeb3df350ec"}], "stats": {"total": 80, "additions": 15, "deletions": 65}, "files": [{"sha": "a5b19038438b7d299a0a5b08fee1c9b8d89242db", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 3, "deletions": 60, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e884ab05c216fc4a4a35d6267d08519dc5dda41d/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e884ab05c216fc4a4a35d6267d08519dc5dda41d/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=e884ab05c216fc4a4a35d6267d08519dc5dda41d", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{ast, SyntaxNode, TreeArc};\n \n use crate::{\n     Module, ModuleSource, Problem, ModuleDef,\n-    Crate, Name, Path, PathKind, PerNs,\n+    Crate, Name, Path, PerNs,\n     module_tree::ModuleId,\n     nameres::{ModuleScope, lower::ImportId},\n     db::HirDatabase,\n@@ -97,65 +97,8 @@ impl Module {\n     }\n \n     pub(crate) fn resolve_path_impl(&self, db: &impl HirDatabase, path: &Path) -> PerNs<ModuleDef> {\n-        let mut curr_per_ns: PerNs<ModuleDef> = PerNs::types(match path.kind {\n-            PathKind::Crate => self.crate_root(db).into(),\n-            PathKind::Self_ | PathKind::Plain => self.clone().into(),\n-            PathKind::Super => {\n-                if let Some(p) = self.parent(db) {\n-                    p.into()\n-                } else {\n-                    return PerNs::none();\n-                }\n-            }\n-            PathKind::Abs => {\n-                // TODO: absolute use is not supported\n-                return PerNs::none();\n-            }\n-        });\n-\n-        for segment in path.segments.iter() {\n-            let curr = match curr_per_ns.as_ref().take_types() {\n-                Some(r) => r,\n-                None => {\n-                    // we still have path segments left, but the path so far\n-                    // didn't resolve in the types namespace => no resolution\n-                    // (don't break here because curr_per_ns might contain\n-                    // something in the value namespace, and it would be wrong\n-                    // to return that)\n-                    return PerNs::none();\n-                }\n-            };\n-            // resolve segment in curr\n-\n-            curr_per_ns = match curr {\n-                ModuleDef::Module(m) => {\n-                    let scope = m.scope(db);\n-                    match scope.get(&segment.name) {\n-                        Some(r) => r.def_id.clone(),\n-                        None => PerNs::none(),\n-                    }\n-                }\n-                ModuleDef::Enum(e) => {\n-                    // enum variant\n-                    let matching_variant = e\n-                        .variants(db)\n-                        .into_iter()\n-                        .find(|(n, _variant)| n == &segment.name);\n-\n-                    match matching_variant {\n-                        Some((_n, variant)) => PerNs::both(variant.into(), (*e).into()),\n-                        None => PerNs::none(),\n-                    }\n-                }\n-                _ => {\n-                    // could be an inherent method call in UFCS form\n-                    // (`Struct::method`), or some other kind of associated\n-                    // item... Which we currently don't handle (TODO)\n-                    PerNs::none()\n-                }\n-            };\n-        }\n-        curr_per_ns\n+        let item_map = db.item_map(self.krate);\n+        item_map.resolve_path(db, *self, path)\n     }\n \n     pub(crate) fn problems_impl("}, {"sha": "0046dfebfc30a79593ccdcc039b33090462cc8cf", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e884ab05c216fc4a4a35d6267d08519dc5dda41d/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e884ab05c216fc4a4a35d6267d08519dc5dda41d/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=e884ab05c216fc4a4a35d6267d08519dc5dda41d", "patch": "@@ -297,7 +297,7 @@ where\n         };\n         let (def_id, reached_fixedpoint) =\n             self.result\n-                .resolve_path(self.db, original_module, &import.path);\n+                .resolve_path_fp(self.db, original_module, &import.path);\n \n         if reached_fixedpoint == ReachedFixedPoint::Yes {\n             let last_segment = import.path.segments.last().unwrap();\n@@ -331,10 +331,19 @@ enum ReachedFixedPoint {\n }\n \n impl ItemMap {\n+    pub(crate) fn resolve_path(\n+        &self,\n+        db: &impl HirDatabase,\n+        original_module: Module,\n+        path: &Path,\n+    ) -> PerNs<ModuleDef> {\n+        self.resolve_path_fp(db, original_module, path).0\n+    }\n+\n     // returns true if we are sure that additions to `ItemMap` wouldn't change\n     // the result. That is, if we've reached fixed point at this particular\n     // import.\n-    fn resolve_path(\n+    fn resolve_path_fp(\n         &self,\n         db: &impl HirDatabase,\n         original_module: Module,"}, {"sha": "dc5b2702aee4c1aaee8bc9e7de1495445581cb32", "filename": "crates/ra_ide_api/src/marks.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e884ab05c216fc4a4a35d6267d08519dc5dda41d/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e884ab05c216fc4a4a35d6267d08519dc5dda41d/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs?ref=e884ab05c216fc4a4a35d6267d08519dc5dda41d", "patch": "@@ -1,3 +1 @@\n-use test_utils::mark;\n-\n-mark!(inserts_parens_for_function_calls);\n+test_utils::marks!(inserts_parens_for_function_calls);"}]}