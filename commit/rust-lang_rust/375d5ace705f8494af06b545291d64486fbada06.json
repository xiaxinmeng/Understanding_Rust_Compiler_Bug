{"sha": "375d5ace705f8494af06b545291d64486fbada06", "node_id": "C_kwDOAAsO6NoAKDM3NWQ1YWNlNzA1Zjg0OTRhZjA2YjU0NTI5MWQ2NDQ4NmZiYWRhMDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-21T23:24:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-21T23:24:59Z"}, "message": "Auto merge of #108302 - Kobzol:revert-107834, r=albertlarsan68\n\nRevert #107834\n\nThis reverts commit [41c6c5d4996728b5a635319ef9b077a3d0ccc480](https://github.com/rust-lang/rust/pull/107834). Trying to check if this fixes building `rustc` for perf bot.", "tree": {"sha": "8e6ceef6a8e5e1d8466a2db7c38e622094d5d443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e6ceef6a8e5e1d8466a2db7c38e622094d5d443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375d5ace705f8494af06b545291d64486fbada06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375d5ace705f8494af06b545291d64486fbada06", "html_url": "https://github.com/rust-lang/rust/commit/375d5ace705f8494af06b545291d64486fbada06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375d5ace705f8494af06b545291d64486fbada06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246eae2fab54a5139365c4e1a08c5724fb385fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/246eae2fab54a5139365c4e1a08c5724fb385fbf", "html_url": "https://github.com/rust-lang/rust/commit/246eae2fab54a5139365c4e1a08c5724fb385fbf"}, {"sha": "6ca499bf2b3da83d60062da649805c36c03ce194", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca499bf2b3da83d60062da649805c36c03ce194", "html_url": "https://github.com/rust-lang/rust/commit/6ca499bf2b3da83d60062da649805c36c03ce194"}], "stats": {"total": 98, "additions": 12, "deletions": 86}, "files": [{"sha": "348d22a9ce60e73a130f44b4df98085f11f29736", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/375d5ace705f8494af06b545291d64486fbada06/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375d5ace705f8494af06b545291d64486fbada06/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=375d5ace705f8494af06b545291d64486fbada06", "patch": "@@ -459,72 +459,6 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n-\n-        if compiler.stage == 0 {\n-            // special handling for stage0, to make `rustup toolchain link` and `x dist --stage 0`\n-            // work for stage0-sysroot\n-            let sysroot = builder.out.join(&compiler.host.triple).join(\"stage0-sysroot\");\n-\n-            let host_lib_dir = builder.initial_rustc.ancestors().nth(2).unwrap().join(\"lib\");\n-            let host_bin_dir = builder.out.join(&builder.initial_rustc.parent().unwrap());\n-            let host_codegen_backends =\n-                host_lib_dir.join(\"rustlib\").join(&compiler.host.triple).join(\"codegen-backends\");\n-            let sysroot_bin_dir = sysroot.join(\"bin\");\n-            let sysroot_lib_dir = sysroot.join(\"lib\");\n-            let sysroot_codegen_backends = builder.sysroot_codegen_backends(compiler);\n-\n-            // Create the `bin` directory in stage0-sysroot\n-            t!(fs::create_dir_all(&sysroot_bin_dir));\n-\n-            // copy bin files from `builder.initial_rustc/./` to `stage0-sysroot/bin`\n-            if let Ok(files) = fs::read_dir(&host_bin_dir) {\n-                for file in files {\n-                    let file = t!(file);\n-                    if file.file_name() == \"rustfmt\" {\n-                        // This is when `rustc` and `cargo` are set in `config.toml`\n-                        if !file.path().starts_with(&builder.out) {\n-                            builder.copy(\n-                                &file.path().into_boxed_path(),\n-                                &sysroot_bin_dir.join(file.file_name()),\n-                            );\n-                        } else {\n-                            builder.copy(\n-                                &builder\n-                                    .out\n-                                    .join(&compiler.host.triple)\n-                                    .join(\"rustfmt/bin/rustfmt\"),\n-                                &sysroot_bin_dir.join(file.file_name()),\n-                            );\n-                        }\n-                    } else {\n-                        builder.copy(\n-                            &file.path().into_boxed_path(),\n-                            &sysroot_bin_dir.join(file.file_name()),\n-                        );\n-                    }\n-                }\n-            }\n-\n-            // copy dylib files from `builder.initial_rustc/../lib/*` while excluding the `rustlib` directory to `stage0-sysroot/lib`\n-            if let Ok(files) = fs::read_dir(&host_lib_dir) {\n-                for file in files {\n-                    let file = t!(file);\n-                    let path = file.path();\n-                    if path.is_file()\n-                        && is_dylib(&file.file_name().into_string().unwrap())\n-                        && !path.starts_with(sysroot_lib_dir.join(\"rustlib\").into_boxed_path())\n-                    {\n-                        builder.copy(&path, &sysroot_lib_dir.join(path.file_name().unwrap()));\n-                    }\n-                }\n-            }\n-\n-            t!(fs::create_dir_all(&sysroot_codegen_backends));\n-            // copy `codegen-backends` from `host_lib_dir/rustlib/codegen_backends` to `stage0-sysroot/lib/rustlib/host-triple/codegen-backends` if it exists.\n-            if host_codegen_backends.exists() {\n-                builder.cp_r(&host_codegen_backends, &sysroot_codegen_backends);\n-            }\n-        }\n     }\n }\n "}, {"sha": "d1e2149d3f95f7a9547bdc9b5046d93ae1a9b740", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/375d5ace705f8494af06b545291d64486fbada06/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375d5ace705f8494af06b545291d64486fbada06/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=375d5ace705f8494af06b545291d64486fbada06", "patch": "@@ -2,7 +2,7 @@ use std::{\n     env,\n     ffi::{OsStr, OsString},\n     fs::{self, File},\n-    io::{self, BufRead, BufReader, ErrorKind},\n+    io::{BufRead, BufReader, ErrorKind},\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n@@ -26,14 +26,6 @@ impl Config {\n         self.verbose > 0\n     }\n \n-    pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(&self, src: P, link: Q) -> io::Result<()> {\n-        #[cfg(unix)]\n-        use std::os::unix::fs::symlink as symlink_file;\n-        #[cfg(windows)]\n-        use std::os::windows::fs::symlink_file;\n-        if !self.dry_run() { symlink_file(src.as_ref(), link.as_ref()) } else { Ok(()) }\n-    }\n-\n     pub(crate) fn create(&self, path: &Path, s: &str) {\n         if self.dry_run() {\n             return;\n@@ -338,15 +330,6 @@ impl Config {\n         let bin_root = self.out.join(host.triple).join(\"rustfmt\");\n         let rustfmt_path = bin_root.join(\"bin\").join(exe(\"rustfmt\", host));\n         let rustfmt_stamp = bin_root.join(\".rustfmt-stamp\");\n-\n-        #[cfg(not(windows))]\n-        {\n-            let legacy_rustfmt = self.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n-            if !legacy_rustfmt.exists() {\n-                t!(self.symlink_file(&rustfmt_path, &legacy_rustfmt));\n-            }\n-        }\n-\n         if rustfmt_path.exists() && !program_out_of_date(&rustfmt_stamp, &channel) {\n             return Some(rustfmt_path);\n         }"}, {"sha": "f4abdf1cc57589e51c8c8aec36e07e48dfdecac9", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/375d5ace705f8494af06b545291d64486fbada06/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375d5ace705f8494af06b545291d64486fbada06/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=375d5ace705f8494af06b545291d64486fbada06", "patch": "@@ -20,6 +20,7 @@ use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs::{self, File};\n+use std::io;\n use std::io::ErrorKind;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n@@ -1406,7 +1407,7 @@ impl Build {\n                 src = t!(fs::canonicalize(src));\n             } else {\n                 let link = t!(fs::read_link(src));\n-                t!(self.config.symlink_file(link, dst));\n+                t!(self.symlink_file(link, dst));\n                 return;\n             }\n         }\n@@ -1524,6 +1525,14 @@ impl Build {\n         iter.map(|e| t!(e)).collect::<Vec<_>>().into_iter()\n     }\n \n+    fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(&self, src: P, link: Q) -> io::Result<()> {\n+        #[cfg(unix)]\n+        use std::os::unix::fs::symlink as symlink_file;\n+        #[cfg(windows)]\n+        use std::os::windows::fs::symlink_file;\n+        if !self.config.dry_run() { symlink_file(src.as_ref(), link.as_ref()) } else { Ok(()) }\n+    }\n+\n     /// Returns if config.ninja is enabled, and checks for ninja existence,\n     /// exiting with a nicer error message if not.\n     fn ninja(&self) -> bool {"}, {"sha": "21157b02a78ef55e015af29abd275937dd6e1556", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375d5ace705f8494af06b545291d64486fbada06/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375d5ace705f8494af06b545291d64486fbada06/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=375d5ace705f8494af06b545291d64486fbada06", "patch": "@@ -516,7 +516,7 @@ impl Step for Llvm {\n \n             let lib_llvm = out_dir.join(\"build\").join(\"lib\").join(lib_name);\n             if !lib_llvm.exists() {\n-                t!(builder.build.config.symlink_file(\"libLLVM.dylib\", &lib_llvm));\n+                t!(builder.symlink_file(\"libLLVM.dylib\", &lib_llvm));\n             }\n         }\n "}]}