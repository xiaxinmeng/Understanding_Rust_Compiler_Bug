{"sha": "7fa2c6ca31ae7ad8beb35ed11493339684786a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYTJjNmNhMzFhZTdhZDhiZWIzNWVkMTE0OTMzMzk2ODQ3ODZhMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-25T03:02:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-25T03:02:05Z"}, "message": "Auto merge of #30011 - jonas-schievink:macro-context, r=nrc\n\nFixes #22425\n\nAlso fixes #30007, since it's just a change from `true` to `false`.", "tree": {"sha": "edf749606409c596c5e19e1149d33f726f2dbafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf749606409c596c5e19e1149d33f726f2dbafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fa2c6ca31ae7ad8beb35ed11493339684786a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa2c6ca31ae7ad8beb35ed11493339684786a10", "html_url": "https://github.com/rust-lang/rust/commit/7fa2c6ca31ae7ad8beb35ed11493339684786a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fa2c6ca31ae7ad8beb35ed11493339684786a10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5faed4c451cc7050eba66f92dae8549474f283ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/5faed4c451cc7050eba66f92dae8549474f283ed", "html_url": "https://github.com/rust-lang/rust/commit/5faed4c451cc7050eba66f92dae8549474f283ed"}, {"sha": "5cb5d20bf9f69a393b888564147fa8eb4b524c8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb5d20bf9f69a393b888564147fa8eb4b524c8f", "html_url": "https://github.com/rust-lang/rust/commit/5cb5d20bf9f69a393b888564147fa8eb4b524c8f"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "fae60d28032931feb075aed89b3d0c9b230a5577", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7fa2c6ca31ae7ad8beb35ed11493339684786a10/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa2c6ca31ae7ad8beb35ed11493339684786a10/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=7fa2c6ca31ae7ad8beb35ed11493339684786a10", "patch": "@@ -44,7 +44,7 @@ impl<'a> ParserAnyMacro<'a> {\n     /// about e.g. the semicolon in `macro_rules! kapow { () => {\n     /// panic!(); } }` doesn't get picked up by .parse_expr(), but it's\n     /// allowed to be there.\n-    fn ensure_complete_parse(&self, allow_semi: bool) {\n+    fn ensure_complete_parse(&self, allow_semi: bool, context: &str) {\n         let mut parser = self.parser.borrow_mut();\n         if allow_semi && parser.token == token::Semi {\n             panictry!(parser.bump())\n@@ -58,8 +58,8 @@ impl<'a> ParserAnyMacro<'a> {\n             parser.span_err(span, &msg[..]);\n \n             let msg = format!(\"caused by the macro expansion here; the usage \\\n-                               of `{}` is likely invalid in this context\",\n-                               self.macro_ident);\n+                               of `{}!` is likely invalid in {} context\",\n+                               self.macro_ident, context);\n             parser.span_note(self.site_span, &msg[..]);\n         }\n     }\n@@ -68,20 +68,20 @@ impl<'a> ParserAnyMacro<'a> {\n impl<'a> MacResult for ParserAnyMacro<'a> {\n     fn make_expr(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Expr>> {\n         let ret = panictry!(self.parser.borrow_mut().parse_expr());\n-        self.ensure_complete_parse(true);\n+        self.ensure_complete_parse(true, \"expression\");\n         Some(ret)\n     }\n     fn make_pat(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Pat>> {\n         let ret = panictry!(self.parser.borrow_mut().parse_pat());\n-        self.ensure_complete_parse(false);\n+        self.ensure_complete_parse(false, \"pattern\");\n         Some(ret)\n     }\n     fn make_items(self: Box<ParserAnyMacro<'a>>) -> Option<SmallVector<P<ast::Item>>> {\n         let mut ret = SmallVector::zero();\n         while let Some(item) = panictry!(self.parser.borrow_mut().parse_item()) {\n             ret.push(item);\n         }\n-        self.ensure_complete_parse(false);\n+        self.ensure_complete_parse(false, \"item\");\n         Some(ret)\n     }\n \n@@ -95,7 +95,7 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n                 _ => ret.push(panictry!(parser.parse_impl_item()))\n             }\n         }\n-        self.ensure_complete_parse(false);\n+        self.ensure_complete_parse(false, \"item\");\n         Some(ret)\n     }\n \n@@ -115,13 +115,13 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n                 }\n             }\n         }\n-        self.ensure_complete_parse(false);\n+        self.ensure_complete_parse(false, \"statement\");\n         Some(ret)\n     }\n \n     fn make_ty(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Ty>> {\n         let ret = panictry!(self.parser.borrow_mut().parse_ty());\n-        self.ensure_complete_parse(true);\n+        self.ensure_complete_parse(false, \"type\");\n         Some(ret)\n     }\n }\n@@ -327,7 +327,7 @@ fn check_lhs_nt_follows(cx: &mut ExtCtxt, lhs: &TokenTree, sp: Span) {\n         tt @ &TokenTree::Sequence(..) => {\n             check_matcher(cx, Some(tt).into_iter(), &Eof);\n         },\n-        _ => cx.span_err(sp, \"Invalid macro matcher; matchers must be contained \\\n+        _ => cx.span_err(sp, \"invalid macro matcher; matchers must be contained \\\n                               in balanced delimiters or a repetition indicator\")\n     };\n     // we don't abort on errors on rejection, the driver will do that for us"}, {"sha": "03bcaab4a9db5e5406526aac9e792608ed09491a", "filename": "src/test/compile-fail/invalid-macro-matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fa2c6ca31ae7ad8beb35ed11493339684786a10/src%2Ftest%2Fcompile-fail%2Finvalid-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa2c6ca31ae7ad8beb35ed11493339684786a10/src%2Ftest%2Fcompile-fail%2Finvalid-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-macro-matcher.rs?ref=7fa2c6ca31ae7ad8beb35ed11493339684786a10", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n macro_rules! invalid {\n-    _ => (); //~^ ERROR Invalid macro matcher\n+    _ => (); //~^ ERROR invalid macro matcher\n }\n \n fn main() {"}, {"sha": "95a52cb232a490ddcb95106dd58139c02cb43b7c", "filename": "src/test/compile-fail/issue-30007.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fa2c6ca31ae7ad8beb35ed11493339684786a10/src%2Ftest%2Fcompile-fail%2Fissue-30007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa2c6ca31ae7ad8beb35ed11493339684786a10/src%2Ftest%2Fcompile-fail%2Fissue-30007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30007.rs?ref=7fa2c6ca31ae7ad8beb35ed11493339684786a10", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(type_macros)]\n+\n+macro_rules! t {\n+    () => ( String ; );     //~ ERROR macro expansion ignores token `;`\n+}\n+\n+fn main() {\n+    let i: Vec<t!()>;       //~ NOTE caused by the macro expansion here\n+}"}, {"sha": "af33dbb972ec12cef6e28a62f43f2e1592403a22", "filename": "src/test/compile-fail/macro-context.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7fa2c6ca31ae7ad8beb35ed11493339684786a10/src%2Ftest%2Fcompile-fail%2Fmacro-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa2c6ca31ae7ad8beb35ed11493339684786a10/src%2Ftest%2Fcompile-fail%2Fmacro-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-context.rs?ref=7fa2c6ca31ae7ad8beb35ed11493339684786a10", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(type_macros)]\n+\n+// (typeof used because it's surprisingly hard to find an unparsed token after a stmt)\n+macro_rules! m {\n+    () => ( i ; typeof );   //~ ERROR `typeof` is a reserved keyword\n+                            //~| ERROR macro expansion ignores token `typeof`\n+                            //~| ERROR macro expansion ignores token `typeof`\n+                            //~| ERROR macro expansion ignores token `;`\n+                            //~| ERROR macro expansion ignores token `;`\n+                            //~| ERROR macro expansion ignores token `i`\n+}\n+\n+m!();               //~ NOTE the usage of `m!` is likely invalid in item context\n+\n+fn main() {\n+    let a: m!();    //~ NOTE the usage of `m!` is likely invalid in type context\n+    let i = m!();   //~ NOTE the usage of `m!` is likely invalid in expression context\n+    match 0 {\n+        m!() => {}  //~ NOTE the usage of `m!` is likely invalid in pattern context\n+    }\n+\n+    m!();           //~ NOTE the usage of `m!` is likely invalid in statement context\n+}"}]}