{"sha": "477459795d074b8febf9973686f2b134af3ed818", "node_id": "C_kwDOAAsO6NoAKDQ3NzQ1OTc5NWQwNzRiOGZlYmY5OTczNjg2ZjJiMTM0YWYzZWQ4MTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-11T08:17:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-15T17:17:09Z"}, "message": "make the gat wfcheck algorithm a loop", "tree": {"sha": "e11dd71f69efdbc8f08a8ff8b03c34fca9a1c447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e11dd71f69efdbc8f08a8ff8b03c34fca9a1c447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/477459795d074b8febf9973686f2b134af3ed818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/477459795d074b8febf9973686f2b134af3ed818", "html_url": "https://github.com/rust-lang/rust/commit/477459795d074b8febf9973686f2b134af3ed818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/477459795d074b8febf9973686f2b134af3ed818/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "852a8517122bf9a5c98b987eec910a83cfdaf63d", "url": "https://api.github.com/repos/rust-lang/rust/commits/852a8517122bf9a5c98b987eec910a83cfdaf63d", "html_url": "https://github.com/rust-lang/rust/commit/852a8517122bf9a5c98b987eec910a83cfdaf63d"}], "stats": {"total": 160, "additions": 103, "deletions": 57}, "files": [{"sha": "d6f983d54656fbed42df37f0b1fa47405eaef2d7", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 103, "deletions": 57, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/477459795d074b8febf9973686f2b134af3ed818/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477459795d074b8febf9973686f2b134af3ed818/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=477459795d074b8febf9973686f2b134af3ed818", "patch": "@@ -266,72 +266,96 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n /// ```\n fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRef]) {\n     let mut required_bounds_by_item = FxHashMap::default();\n-\n-    for gat_item in associated_items {\n-        let gat_def_id = gat_item.id.def_id;\n-        let gat_item = tcx.associated_item(gat_def_id);\n-        // If this item is not an assoc ty, or has no substs, then it's not a GAT\n-        if gat_item.kind != ty::AssocKind::Type {\n-            continue;\n-        }\n-        let gat_generics = tcx.generics_of(gat_def_id);\n-        if gat_generics.params.is_empty() {\n-            continue;\n-        }\n-\n-        let mut new_required_bounds: Option<FxHashSet<ty::Predicate<'_>>> = None;\n-        for item in associated_items {\n-            let item_def_id = item.id.def_id;\n-            // Skip our own GAT, since it would blow away the required bounds\n-            if item_def_id == gat_def_id {\n+    loop {\n+        let mut should_continue = false;\n+        for gat_item in associated_items {\n+            let gat_def_id = gat_item.id.def_id;\n+            let gat_item = tcx.associated_item(gat_def_id);\n+            // If this item is not an assoc ty, or has no substs, then it's not a GAT\n+            if gat_item.kind != ty::AssocKind::Type {\n+                continue;\n+            }\n+            let gat_generics = tcx.generics_of(gat_def_id);\n+            if gat_generics.params.is_empty() {\n                 continue;\n             }\n \n-            let item_hir_id = item.id.hir_id();\n-            let param_env = tcx.param_env(item_def_id);\n+            let mut new_required_bounds: Option<FxHashSet<ty::Predicate<'_>>> = None;\n+            for item in associated_items {\n+                let item_def_id = item.id.def_id;\n+                // Skip our own GAT, since it would blow away the required bounds\n+                if item_def_id == gat_def_id {\n+                    continue;\n+                }\n \n-            let item_required_bounds = match item.kind {\n-                hir::AssocItemKind::Fn { .. } => {\n-                    let sig: ty::FnSig<'_> = tcx.liberate_late_bound_regions(\n-                        item_def_id.to_def_id(),\n-                        tcx.fn_sig(item_def_id),\n-                    );\n-                    gather_gat_bounds(\n-                        tcx,\n-                        param_env,\n-                        item_hir_id,\n-                        sig.output(),\n-                        &sig.inputs().iter().copied().collect(),\n-                        gat_def_id,\n-                        gat_generics,\n-                    )\n+                let item_hir_id = item.id.hir_id();\n+                let param_env = tcx.param_env(item_def_id);\n+\n+                let item_required_bounds = match item.kind {\n+                    hir::AssocItemKind::Fn { .. } => {\n+                        let sig: ty::FnSig<'_> = tcx.liberate_late_bound_regions(\n+                            item_def_id.to_def_id(),\n+                            tcx.fn_sig(item_def_id),\n+                        );\n+                        gather_gat_bounds(\n+                            tcx,\n+                            param_env,\n+                            item_hir_id,\n+                            sig.output(),\n+                            &sig.inputs().iter().copied().collect(),\n+                            gat_def_id,\n+                            gat_generics,\n+                        )\n+                    }\n+                    hir::AssocItemKind::Type => {\n+                        // If our associated item is a GAT with missing bounds, add them to\n+                        // the param-env here. This allows this GAT to propagate missing bounds\n+                        // to other GATs.\n+                        let param_env = augment_param_env(\n+                            tcx,\n+                            param_env,\n+                            required_bounds_by_item.get(&item_def_id),\n+                        );\n+                        gather_gat_bounds(\n+                            tcx,\n+                            param_env,\n+                            item_hir_id,\n+                            tcx.explicit_item_bounds(item_def_id)\n+                                .iter()\n+                                .copied()\n+                                .collect::<Vec<_>>(),\n+                            &FxHashSet::default(),\n+                            gat_def_id,\n+                            gat_generics,\n+                        )\n+                    }\n+                    hir::AssocItemKind::Const => None,\n+                };\n+\n+                if let Some(item_required_bounds) = item_required_bounds {\n+                    // Take the intersection of the new_required_bounds and the item_required_bounds\n+                    // for this item. This is why we use an Option<_>, since we need to distinguish\n+                    // the empty set of bounds from the uninitialized set of bounds.\n+                    if let Some(new_required_bounds) = &mut new_required_bounds {\n+                        new_required_bounds.retain(|b| item_required_bounds.contains(b));\n+                    } else {\n+                        new_required_bounds = Some(item_required_bounds);\n+                    }\n                 }\n-                hir::AssocItemKind::Type => gather_gat_bounds(\n-                    tcx,\n-                    param_env,\n-                    item_hir_id,\n-                    tcx.explicit_item_bounds(item_def_id).iter().copied().collect::<Vec<_>>(),\n-                    &FxHashSet::default(),\n-                    gat_def_id,\n-                    gat_generics,\n-                ),\n-                hir::AssocItemKind::Const => None,\n-            };\n+            }\n \n-            if let Some(item_required_bounds) = item_required_bounds {\n-                // Take the intersection of the new_required_bounds and the item_required_bounds\n-                // for this item. This is why we use an Option<_>, since we need to distinguish\n-                // the empty set of bounds from the uninitialized set of bounds.\n-                if let Some(new_required_bounds) = &mut new_required_bounds {\n-                    new_required_bounds.retain(|b| item_required_bounds.contains(b));\n-                } else {\n-                    new_required_bounds = Some(item_required_bounds);\n+            if let Some(new_required_bounds) = new_required_bounds {\n+                let required_bounds = required_bounds_by_item.entry(gat_def_id).or_default();\n+                if new_required_bounds != *required_bounds {\n+                    *required_bounds = new_required_bounds;\n+                    // Iterate until our required_bounds no longer change\n+                    // Since they changed here, we should continue the loop\n+                    should_continue = true;\n                 }\n             }\n         }\n-\n-        if let Some(required_bounds) = new_required_bounds {\n-            required_bounds_by_item.insert(gat_def_id, required_bounds);\n+        if !should_continue {\n+            break;\n         }\n     }\n \n@@ -398,6 +422,28 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n     }\n }\n \n+/// Add a new set of predicates to the caller_bounds of an existing param_env,\n+/// and normalize the param_env afterwards\n+fn augment_param_env<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    new_predicates: Option<&FxHashSet<ty::Predicate<'tcx>>>,\n+) -> ty::ParamEnv<'tcx> {\n+    let Some(new_predicates) = new_predicates else {\n+        return param_env;\n+    };\n+\n+    if new_predicates.is_empty() {\n+        return param_env;\n+    }\n+\n+    let bounds =\n+        tcx.mk_predicates(param_env.caller_bounds().iter().chain(new_predicates.iter().cloned()));\n+    // FIXME(compiler-errors): Perhaps there is a case where we need to normalize this\n+    // i.e. traits::normalize_param_env_or_error\n+    ty::ParamEnv::new(bounds, param_env.reveal(), param_env.constness())\n+}\n+\n fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,"}]}