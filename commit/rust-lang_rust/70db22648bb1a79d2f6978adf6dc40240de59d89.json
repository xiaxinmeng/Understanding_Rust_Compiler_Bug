{"sha": "70db22648bb1a79d2f6978adf6dc40240de59d89", "node_id": "C_kwDOAAsO6NoAKDcwZGIyMjY0OGJiMWE3OWQyZjY5NzhhZGY2ZGM0MDI0MGRlNTlkODk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-27T11:41:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-27T11:41:48Z"}, "message": "Auto merge of #10528 - bluthej:clear-with-drain, r=llogiq\n\nClear with drain\n\nchangelog: [`clear_with_drain`]: Add new lint\n\nFixes #9339", "tree": {"sha": "fb461671482457b200d06b3e4eefe874e07be22a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb461671482457b200d06b3e4eefe874e07be22a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70db22648bb1a79d2f6978adf6dc40240de59d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70db22648bb1a79d2f6978adf6dc40240de59d89", "html_url": "https://github.com/rust-lang/rust/commit/70db22648bb1a79d2f6978adf6dc40240de59d89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70db22648bb1a79d2f6978adf6dc40240de59d89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5698f43f9482809c9a3c8a9356583b83d5acf580", "url": "https://api.github.com/repos/rust-lang/rust/commits/5698f43f9482809c9a3c8a9356583b83d5acf580", "html_url": "https://github.com/rust-lang/rust/commit/5698f43f9482809c9a3c8a9356583b83d5acf580"}, {"sha": "df65d21f4c98a19573f1cd89d9ff01ee8812cf43", "url": "https://api.github.com/repos/rust-lang/rust/commits/df65d21f4c98a19573f1cd89d9ff01ee8812cf43", "html_url": "https://github.com/rust-lang/rust/commit/df65d21f4c98a19573f1cd89d9ff01ee8812cf43"}], "stats": {"total": 371, "additions": 346, "deletions": 25}, "files": [{"sha": "8fde8c6d902fa451197ad86f4270aad0775b9e47", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -4441,6 +4441,7 @@ Released 2018-09-13\n [`chars_last_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_last_cmp\n [`chars_next_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp\n [`checked_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#checked_conversions\n+[`clear_with_drain`]: https://rust-lang.github.io/rust-clippy/master/index.html#clear_with_drain\n [`clone_double_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_double_ref\n [`clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n [`clone_on_ref_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_ref_ptr"}, {"sha": "15b557bded2eda43146116d42818cb6611ded43c", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -307,6 +307,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::methods::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS_INFO,\n     crate::methods::CHARS_LAST_CMP_INFO,\n     crate::methods::CHARS_NEXT_CMP_INFO,\n+    crate::methods::CLEAR_WITH_DRAIN_INFO,\n     crate::methods::CLONED_INSTEAD_OF_COPIED_INFO,\n     crate::methods::CLONE_DOUBLE_REF_INFO,\n     crate::methods::CLONE_ON_COPY_INFO,"}, {"sha": "24496bd4689f59776bfab246471b7141eef8c713", "filename": "clippy_lints/src/methods/clear_with_drain.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_lints%2Fsrc%2Fmethods%2Fclear_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_lints%2Fsrc%2Fmethods%2Fclear_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclear_with_drain.rs?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -0,0 +1,28 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_range_full;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n+\n+use super::CLEAR_WITH_DRAIN;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, arg: &Expr<'_>) {\n+    let ty = cx.typeck_results().expr_ty(recv);\n+    if is_type_diagnostic_item(cx, ty, sym::Vec)\n+        && let ExprKind::Path(QPath::Resolved(None, container_path)) = recv.kind\n+        && is_range_full(cx, arg, Some(container_path))\n+    {\n+        span_lint_and_sugg(\n+            cx,\n+            CLEAR_WITH_DRAIN,\n+            span.with_hi(expr.span.hi()),\n+            \"`drain` used to clear a `Vec`\",\n+            \"try\",\n+            \"clear()\".to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}"}, {"sha": "f6772c5c6b369c03ea12cff1c39647f9577794e6", "filename": "clippy_lints/src/methods/iter_with_drain.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -1,7 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::higher::Range;\n-use clippy_utils::is_integer_const;\n-use rustc_ast::ast::RangeLimits;\n+use clippy_utils::is_range_full;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::LateContext;\n@@ -15,8 +13,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span\n         && let Some(adt) = cx.typeck_results().expr_ty(recv).ty_adt_def()\n         && let Some(ty_name) = cx.tcx.get_diagnostic_name(adt.did())\n         && matches!(ty_name, sym::Vec | sym::VecDeque)\n-        && let Some(range) = Range::hir(arg)\n-        && is_full_range(cx, recv, range)\n+        && let ExprKind::Path(QPath::Resolved(None, container_path)) = recv.kind\n+        && is_range_full(cx, arg, Some(container_path))\n     {\n         span_lint_and_sugg(\n             cx,\n@@ -29,19 +27,3 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span\n         );\n     };\n }\n-\n-fn is_full_range(cx: &LateContext<'_>, container: &Expr<'_>, range: Range<'_>) -> bool {\n-    range.start.map_or(true, |e| is_integer_const(cx, e, 0))\n-        && range.end.map_or(true, |e| {\n-            if range.limits == RangeLimits::HalfOpen\n-                && let ExprKind::Path(QPath::Resolved(None, container_path)) = container.kind\n-                && let ExprKind::MethodCall(name, self_arg, [], _) = e.kind\n-                && name.ident.name == sym::len\n-                && let ExprKind::Path(QPath::Resolved(None, path)) = self_arg.kind\n-            {\n-                container_path.res == path.res\n-            } else {\n-                false\n-            }\n-        })\n-}"}, {"sha": "257bc4eccc302925702ea4faf4c72168ed7386ef", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -9,6 +9,7 @@ mod chars_last_cmp;\n mod chars_last_cmp_with_unwrap;\n mod chars_next_cmp;\n mod chars_next_cmp_with_unwrap;\n+mod clear_with_drain;\n mod clone_on_copy;\n mod clone_on_ref_ptr;\n mod cloned_instead_of_copied;\n@@ -110,7 +111,7 @@ use clippy_utils::ty::{contains_ty_adt_constructor_opaque, implements_trait, is_\n use clippy_utils::{contains_return, is_bool, is_trait_method, iter_input_pats, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_hir::{Expr, ExprKind, TraitItem, TraitItemKind};\n+use rustc_hir::{Expr, ExprKind, Node, Stmt, StmtKind, TraitItem, TraitItemKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -3190,6 +3191,31 @@ declare_clippy_lint! {\n     \"single command line argument that looks like it should be multiple arguments\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usage of `.drain(..)` for the sole purpose of clearing a `Vec`.\n+    ///\n+    /// ### Why is this bad?\n+    /// This creates an unnecessary iterator that is dropped immediately.\n+    ///\n+    /// Calling `.clear()` also makes the intent clearer.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let mut v = vec![1, 2, 3];\n+    /// v.drain(..);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut v = vec![1, 2, 3];\n+    /// v.clear();\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub CLEAR_WITH_DRAIN,\n+    nursery,\n+    \"calling `drain` in order to `clear` a `Vec`\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Msrv,\n@@ -3318,6 +3344,7 @@ impl_lint_pass!(Methods => [\n     SEEK_TO_START_INSTEAD_OF_REWIND,\n     NEEDLESS_COLLECT,\n     SUSPICIOUS_COMMAND_ARG_SPACE,\n+    CLEAR_WITH_DRAIN,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3563,7 +3590,13 @@ impl Methods {\n                     _ => {},\n                 },\n                 (\"drain\", [arg]) => {\n-                    iter_with_drain::check(cx, expr, recv, span, arg);\n+                if let Node::Stmt(Stmt { hir_id: _, kind, .. }) = cx.tcx.hir().get_parent(expr.hir_id)\n+                    && matches!(kind, StmtKind::Semi(_))\n+                    {\n+                        clear_with_drain::check(cx, expr, recv, span, arg);\n+                    } else {\n+                        iter_with_drain::check(cx, expr, recv, span, arg);\n+                    }\n                 },\n                 (\"ends_with\", [arg]) => {\n                     if let ExprKind::MethodCall(.., span) = expr.kind {"}, {"sha": "2e839fdf47288fdaacc3ba89becd0971821aaa24", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -78,7 +78,7 @@ use std::sync::OnceLock;\n use std::sync::{Mutex, MutexGuard};\n \n use if_chain::if_chain;\n-use rustc_ast::ast::{self, LitKind};\n+use rustc_ast::ast::{self, LitKind, RangeLimits};\n use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n@@ -96,6 +96,7 @@ use rustc_hir::{\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n+use rustc_middle::mir::ConstantKind;\n use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n@@ -114,7 +115,8 @@ use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Integer;\n \n-use crate::consts::{constant, Constant};\n+use crate::consts::{constant, miri_to_const, Constant};\n+use crate::higher::Range;\n use crate::ty::{can_partially_move_ty, expr_sig, is_copy, is_recursively_primitive_type, ty_is_fn_once_param};\n use crate::visitors::for_each_expr;\n \n@@ -1491,6 +1493,68 @@ pub fn is_else_clause(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n     }\n }\n \n+/// Checks whether the given `Expr` is a range equivalent to a `RangeFull`.\n+/// For the lower bound, this means that:\n+/// - either there is none\n+/// - or it is the smallest value that can be represented by the range's integer type\n+/// For the upper bound, this means that:\n+/// - either there is none\n+/// - or it is the largest value that can be represented by the range's integer type and is\n+///   inclusive\n+/// - or it is a call to some container's `len` method and is exclusive, and the range is passed to\n+///   a method call on that same container (e.g. `v.drain(..v.len())`)\n+/// If the given `Expr` is not some kind of range, the function returns `false`.\n+pub fn is_range_full(cx: &LateContext<'_>, expr: &Expr<'_>, container_path: Option<&Path<'_>>) -> bool {\n+    let ty = cx.typeck_results().expr_ty(expr);\n+    if let Some(Range { start, end, limits }) = Range::hir(expr) {\n+        let start_is_none_or_min = start.map_or(true, |start| {\n+            if let rustc_ty::Adt(_, subst) = ty.kind()\n+                && let bnd_ty = subst.type_at(0)\n+                && let Some(min_val) = bnd_ty.numeric_min_val(cx.tcx)\n+                && let const_val = cx.tcx.valtree_to_const_val((bnd_ty, min_val.to_valtree()))\n+                && let min_const_kind = ConstantKind::from_value(const_val, bnd_ty)\n+                && let Some(min_const) = miri_to_const(cx.tcx, min_const_kind)\n+                && let Some((start_const, _)) = constant(cx, cx.typeck_results(), start)\n+            {\n+                start_const == min_const\n+            } else {\n+                false\n+            }\n+        });\n+        let end_is_none_or_max = end.map_or(true, |end| {\n+            match limits {\n+                RangeLimits::Closed => {\n+                    if let rustc_ty::Adt(_, subst) = ty.kind()\n+                        && let bnd_ty = subst.type_at(0)\n+                        && let Some(max_val) = bnd_ty.numeric_max_val(cx.tcx)\n+                        && let const_val = cx.tcx.valtree_to_const_val((bnd_ty, max_val.to_valtree()))\n+                        && let max_const_kind = ConstantKind::from_value(const_val, bnd_ty)\n+                        && let Some(max_const) = miri_to_const(cx.tcx, max_const_kind)\n+                        && let Some((end_const, _)) = constant(cx, cx.typeck_results(), end)\n+                    {\n+                        end_const == max_const\n+                    } else {\n+                        false\n+                    }\n+                },\n+                RangeLimits::HalfOpen => {\n+                    if let Some(container_path) = container_path\n+                        && let ExprKind::MethodCall(name, self_arg, [], _) = end.kind\n+                        && name.ident.name == sym::len\n+                        && let ExprKind::Path(QPath::Resolved(None, path)) = self_arg.kind\n+                    {\n+                        container_path.res == path.res\n+                    } else {\n+                        false\n+                    }\n+                },\n+            }\n+        });\n+        return start_is_none_or_min && end_is_none_or_max;\n+    }\n+    false\n+}\n+\n /// Checks whether the given expression is a constant integer of the given value.\n /// unlike `is_integer_literal`, this version does const folding\n pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool {"}, {"sha": "9c4dc010ca7fb87f47fead83809c2962cca4c050", "filename": "tests/ui/clear_with_drain.fixed", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/tests%2Fui%2Fclear_with_drain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/tests%2Fui%2Fclear_with_drain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclear_with_drain.fixed?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -0,0 +1,86 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::clear_with_drain)]\n+\n+fn range() {\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(0..v.len()); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    let n = v.drain(0..v.len()).count(); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(usize::MIN..v.len()); // Yay\n+    let n = iter.count();\n+\n+    let mut v = vec![1, 2, 3];\n+    v.clear(); // Nay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.clear(); // Nay\n+}\n+\n+fn range_from() {\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(0..); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    let mut iter = v.drain(0..); // Yay\n+    let next = iter.next();\n+\n+    let mut v = vec![1, 2, 3];\n+    let next = v.drain(usize::MIN..).next(); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.clear(); // Nay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.clear(); // Nay\n+}\n+\n+fn range_full() {\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(..); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    // Yay\n+    for x in v.drain(..) {\n+        let y = format!(\"x = {x}\");\n+    }\n+\n+    let mut v = vec![1, 2, 3];\n+    v.clear(); // Nay\n+}\n+\n+fn range_to() {\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(..v.len()); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(..v.len()); // Yay\n+    for x in iter {\n+        let y = format!(\"x = {x}\");\n+    }\n+\n+    let mut v = vec![1, 2, 3];\n+    v.clear(); // Nay\n+}\n+\n+fn partial_drains() {\n+    let mut v = vec![1, 2, 3];\n+    v.drain(1..); // Yay\n+    let mut v = vec![1, 2, 3];\n+    v.drain(1..).max(); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(..v.len() - 1); // Yay\n+    let mut v = vec![1, 2, 3];\n+    v.drain(..v.len() - 1).min(); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(1..v.len() - 1); // Yay\n+    let mut v = vec![1, 2, 3];\n+    let w: Vec<i8> = v.drain(1..v.len() - 1).collect(); // Yay\n+}\n+\n+fn main() {}"}, {"sha": "f00dbab234cc80e2baa18c741fc9fc20953fdf37", "filename": "tests/ui/clear_with_drain.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/tests%2Fui%2Fclear_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/tests%2Fui%2Fclear_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclear_with_drain.rs?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -0,0 +1,86 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::clear_with_drain)]\n+\n+fn range() {\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(0..v.len()); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    let n = v.drain(0..v.len()).count(); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(usize::MIN..v.len()); // Yay\n+    let n = iter.count();\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(0..v.len()); // Nay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(usize::MIN..v.len()); // Nay\n+}\n+\n+fn range_from() {\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(0..); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    let mut iter = v.drain(0..); // Yay\n+    let next = iter.next();\n+\n+    let mut v = vec![1, 2, 3];\n+    let next = v.drain(usize::MIN..).next(); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(0..); // Nay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(usize::MIN..); // Nay\n+}\n+\n+fn range_full() {\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(..); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    // Yay\n+    for x in v.drain(..) {\n+        let y = format!(\"x = {x}\");\n+    }\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(..); // Nay\n+}\n+\n+fn range_to() {\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(..v.len()); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    let iter = v.drain(..v.len()); // Yay\n+    for x in iter {\n+        let y = format!(\"x = {x}\");\n+    }\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(..v.len()); // Nay\n+}\n+\n+fn partial_drains() {\n+    let mut v = vec![1, 2, 3];\n+    v.drain(1..); // Yay\n+    let mut v = vec![1, 2, 3];\n+    v.drain(1..).max(); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(..v.len() - 1); // Yay\n+    let mut v = vec![1, 2, 3];\n+    v.drain(..v.len() - 1).min(); // Yay\n+\n+    let mut v = vec![1, 2, 3];\n+    v.drain(1..v.len() - 1); // Yay\n+    let mut v = vec![1, 2, 3];\n+    let w: Vec<i8> = v.drain(1..v.len() - 1).collect(); // Yay\n+}\n+\n+fn main() {}"}, {"sha": "c88aa1a23cb65d60f565772aa800be9091552ea4", "filename": "tests/ui/clear_with_drain.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/70db22648bb1a79d2f6978adf6dc40240de59d89/tests%2Fui%2Fclear_with_drain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70db22648bb1a79d2f6978adf6dc40240de59d89/tests%2Fui%2Fclear_with_drain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclear_with_drain.stderr?ref=70db22648bb1a79d2f6978adf6dc40240de59d89", "patch": "@@ -0,0 +1,40 @@\n+error: `drain` used to clear a `Vec`\n+  --> $DIR/clear_with_drain.rs:17:7\n+   |\n+LL |     v.drain(0..v.len()); // Nay\n+   |       ^^^^^^^^^^^^^^^^^ help: try: `clear()`\n+   |\n+   = note: `-D clippy::clear-with-drain` implied by `-D warnings`\n+\n+error: `drain` used to clear a `Vec`\n+  --> $DIR/clear_with_drain.rs:20:7\n+   |\n+LL |     v.drain(usize::MIN..v.len()); // Nay\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clear()`\n+\n+error: `drain` used to clear a `Vec`\n+  --> $DIR/clear_with_drain.rs:35:7\n+   |\n+LL |     v.drain(0..); // Nay\n+   |       ^^^^^^^^^^ help: try: `clear()`\n+\n+error: `drain` used to clear a `Vec`\n+  --> $DIR/clear_with_drain.rs:38:7\n+   |\n+LL |     v.drain(usize::MIN..); // Nay\n+   |       ^^^^^^^^^^^^^^^^^^^ help: try: `clear()`\n+\n+error: `drain` used to clear a `Vec`\n+  --> $DIR/clear_with_drain.rs:52:7\n+   |\n+LL |     v.drain(..); // Nay\n+   |       ^^^^^^^^^ help: try: `clear()`\n+\n+error: `drain` used to clear a `Vec`\n+  --> $DIR/clear_with_drain.rs:66:7\n+   |\n+LL |     v.drain(..v.len()); // Nay\n+   |       ^^^^^^^^^^^^^^^^ help: try: `clear()`\n+\n+error: aborting due to 6 previous errors\n+"}]}