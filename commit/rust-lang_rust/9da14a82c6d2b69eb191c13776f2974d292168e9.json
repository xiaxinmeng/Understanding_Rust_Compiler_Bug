{"sha": "9da14a82c6d2b69eb191c13776f2974d292168e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYTE0YTgyYzZkMmI2OWViMTkxYzEzNzc2ZjI5NzRkMjkyMTY4ZTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-27T11:44:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T13:55:21Z"}, "message": "rustc: move Instance::fn_sig to ty::layout and privatize it.", "tree": {"sha": "b62e3dd3b6536a37c6fb85c719433c3fd49e1b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62e3dd3b6536a37c6fb85c719433c3fd49e1b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da14a82c6d2b69eb191c13776f2974d292168e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da14a82c6d2b69eb191c13776f2974d292168e9", "html_url": "https://github.com/rust-lang/rust/commit/9da14a82c6d2b69eb191c13776f2974d292168e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da14a82c6d2b69eb191c13776f2974d292168e9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d908b301c4ad8b0778331af4b0c6ad46970ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d908b301c4ad8b0778331af4b0c6ad46970ef1", "html_url": "https://github.com/rust-lang/rust/commit/79d908b301c4ad8b0778331af4b0c6ad46970ef1"}], "stats": {"total": 138, "additions": 72, "deletions": 66}, "files": [{"sha": "f270d3d3a2a5987217df91ad31520c8cdbc2df67", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9da14a82c6d2b69eb191c13776f2974d292168e9/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da14a82c6d2b69eb191c13776f2974d292168e9/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=9da14a82c6d2b69eb191c13776f2974d292168e9", "patch": "@@ -1,16 +1,14 @@\n use crate::hir::CodegenFnAttrFlags;\n-use crate::hir::Unsafety;\n use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n-use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, SubstsRef, TyCtxt};\n+use crate::ty::{self, Ty, TypeFoldable, SubstsRef, TyCtxt};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::traits;\n use crate::middle::lang_items::DropInPlaceFnLangItem;\n use rustc_target::spec::abi::Abi;\n use rustc_macros::HashStable;\n \n use std::fmt;\n-use std::iter;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n #[derive(HashStable, Lift)]\n@@ -66,68 +64,6 @@ impl<'tcx> Instance<'tcx> {\n             &ty,\n         )\n     }\n-\n-    pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {\n-        let ty = self.ty(tcx);\n-        match ty.kind {\n-            ty::FnDef(..) |\n-            // Shims currently have type FnPtr. Not sure this should remain.\n-            ty::FnPtr(_) => {\n-                let mut sig = ty.fn_sig(tcx);\n-                if let InstanceDef::VtableShim(..) = self.def {\n-                    // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.\n-                    sig = sig.map_bound(|mut sig| {\n-                        let mut inputs_and_output = sig.inputs_and_output.to_vec();\n-                        inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);\n-                        sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n-                        sig\n-                    });\n-                }\n-                sig\n-            }\n-            ty::Closure(def_id, substs) => {\n-                let sig = substs.as_closure().sig(def_id, tcx);\n-\n-                let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n-                sig.map_bound(|sig| tcx.mk_fn_sig(\n-                    iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n-                    sig.output(),\n-                    sig.c_variadic,\n-                    sig.unsafety,\n-                    sig.abi\n-                ))\n-            }\n-            ty::Generator(def_id, substs, _) => {\n-                let sig = substs.as_generator().poly_sig(def_id, tcx);\n-\n-                let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n-                let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n-\n-                let pin_did = tcx.lang_items().pin_type().unwrap();\n-                let pin_adt_ref = tcx.adt_def(pin_did);\n-                let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n-                let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n-\n-                sig.map_bound(|sig| {\n-                    let state_did = tcx.lang_items().gen_state().unwrap();\n-                    let state_adt_ref = tcx.adt_def(state_did);\n-                    let state_substs = tcx.intern_substs(&[\n-                        sig.yield_ty.into(),\n-                        sig.return_ty.into(),\n-                    ]);\n-                    let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n-\n-                    tcx.mk_fn_sig(iter::once(env_ty),\n-                        ret_ty,\n-                        false,\n-                        Unsafety::Normal,\n-                        Abi::Rust\n-                    )\n-                })\n-            }\n-            _ => bug!(\"unexpected type {:?} in Instance::fn_sig\", ty)\n-        }\n-    }\n }\n \n impl<'tcx> InstanceDef<'tcx> {"}, {"sha": "4d48c7841451ff23674491d52eea3183fa3bdaee", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9da14a82c6d2b69eb191c13776f2974d292168e9/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da14a82c6d2b69eb191c13776f2974d292168e9/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=9da14a82c6d2b69eb191c13776f2974d292168e9", "patch": "@@ -2339,6 +2339,76 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for LayoutError<'tcx> {\n     }\n }\n \n+\n+impl<'tcx> ty::Instance<'tcx> {\n+    // NOTE(eddyb) this is private to avoid using it from outside of\n+    // `FnAbi::of_instance` - any other uses are either too high-level\n+    // for `Instance` (e.g. typeck would use `Ty::fn_sig` instead),\n+    // or should go through `FnAbi` instead, to avoid losing any\n+    // adjustments `FnAbi::of_instance` might be performing.\n+    fn fn_sig_for_fn_abi(&self, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n+        let ty = self.ty(tcx);\n+        match ty.kind {\n+            ty::FnDef(..) |\n+            // Shims currently have type FnPtr. Not sure this should remain.\n+            ty::FnPtr(_) => {\n+                let mut sig = ty.fn_sig(tcx);\n+                if let ty::InstanceDef::VtableShim(..) = self.def {\n+                    // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.\n+                    sig = sig.map_bound(|mut sig| {\n+                        let mut inputs_and_output = sig.inputs_and_output.to_vec();\n+                        inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);\n+                        sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+                        sig\n+                    });\n+                }\n+                sig\n+            }\n+            ty::Closure(def_id, substs) => {\n+                let sig = substs.as_closure().sig(def_id, tcx);\n+\n+                let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n+                sig.map_bound(|sig| tcx.mk_fn_sig(\n+                    iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n+                    sig.output(),\n+                    sig.c_variadic,\n+                    sig.unsafety,\n+                    sig.abi\n+                ))\n+            }\n+            ty::Generator(def_id, substs, _) => {\n+                let sig = substs.as_generator().poly_sig(def_id, tcx);\n+\n+                let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+                let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n+\n+                let pin_did = tcx.lang_items().pin_type().unwrap();\n+                let pin_adt_ref = tcx.adt_def(pin_did);\n+                let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n+                let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n+\n+                sig.map_bound(|sig| {\n+                    let state_did = tcx.lang_items().gen_state().unwrap();\n+                    let state_adt_ref = tcx.adt_def(state_did);\n+                    let state_substs = tcx.intern_substs(&[\n+                        sig.yield_ty.into(),\n+                        sig.return_ty.into(),\n+                    ]);\n+                    let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n+\n+                    tcx.mk_fn_sig(iter::once(env_ty),\n+                        ret_ty,\n+                        false,\n+                        hir::Unsafety::Normal,\n+                        rustc_target::spec::abi::Abi::Rust\n+                    )\n+                })\n+            }\n+            _ => bug!(\"unexpected type {:?} in Instance::fn_sig\", ty)\n+        }\n+    }\n+}\n+\n pub trait FnAbiExt<'tcx, C>\n where\n     C: LayoutOf<Ty = Ty<'tcx>, TyLayout = TyLayout<'tcx>>\n@@ -2371,7 +2441,7 @@ where\n     }\n \n     fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n-        let sig = instance.fn_sig(cx.tcx());\n+        let sig = instance.fn_sig_for_fn_abi(cx.tcx());\n \n         call::FnAbi::new_internal(cx, sig, extra_args, |ty, arg_idx| {\n             let mut layout = cx.layout_of(ty);"}]}