{"sha": "1e3ed61d8273377544e40bdbbdf8391b51571293", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlM2VkNjFkODI3MzM3NzU0NGU0MGJkYmJkZjgzOTFiNTE1NzEyOTM=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-13T17:30:33Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:25Z"}, "message": "Coherence for default trait implementations\n\n- Don't allow multiple default trait implementations\n- Allow positive trait implementations just for structs and enums when\n  there's a default implementation for such trait.", "tree": {"sha": "c19b68acdc3de16fa997673f950d49b19b7521c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c19b68acdc3de16fa997673f950d49b19b7521c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e3ed61d8273377544e40bdbbdf8391b51571293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3ed61d8273377544e40bdbbdf8391b51571293", "html_url": "https://github.com/rust-lang/rust/commit/1e3ed61d8273377544e40bdbbdf8391b51571293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e3ed61d8273377544e40bdbbdf8391b51571293/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e9bd9099e729eb73b4483795d0057e963c8eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e9bd9099e729eb73b4483795d0057e963c8eac", "html_url": "https://github.com/rust-lang/rust/commit/f0e9bd9099e729eb73b4483795d0057e963c8eac"}], "stats": {"total": 127, "additions": 95, "deletions": 32}, "files": [{"sha": "666c7c910700c584073dc6e985177f5eb67b0869", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=1e3ed61d8273377544e40bdbbdf8391b51571293", "patch": "@@ -1626,6 +1626,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Vec::new()\n             }\n \n+            ty::ty_trait(..) |\n             ty::ty_projection(..) |\n             ty::ty_param(..) |\n             ty::ty_infer(..) => {\n@@ -1639,18 +1640,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 vec![referent_ty]\n             }\n \n-\n-            ty::ty_trait(ref data) => {\n-                // Recursively check all supertraits to find out if any further\n-                // bounds are required and thus we must fulfill.\n-                let principal =\n-                    data.principal_trait_ref_with_self_ty(self.tcx(),\n-                                                          self.tcx().types.err);\n-\n-\n-                util::supertraits(self.tcx(), principal).map(|tr| tr.self_ty()).collect()\n-            }\n-\n             ty::ty_open(element_ty) => {vec![element_ty]},\n \n             ty::ty_ptr(ty::mt { ty: element_ty, ..}) |"}, {"sha": "71d484866a920a10ead97042a7f8f655986080e5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1e3ed61d8273377544e40bdbbdf8391b51571293", "patch": "@@ -758,7 +758,7 @@ pub struct ctxt<'tcx> {\n     pub trait_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n \n     /// Maps a trait onto a list of *default* trait implementations\n-    default_trait_impls: RefCell<DefIdSet>,\n+    default_trait_impls: RefCell<DefIdMap<ast::DefId>>,\n \n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n@@ -2496,7 +2496,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         destructor_for_type: RefCell::new(DefIdMap()),\n         destructors: RefCell::new(DefIdSet()),\n         trait_impls: RefCell::new(DefIdMap()),\n-        default_trait_impls: RefCell::new(DefIdSet()),\n+        default_trait_impls: RefCell::new(DefIdMap()),\n         inherent_impls: RefCell::new(DefIdMap()),\n         impl_items: RefCell::new(DefIdMap()),\n         used_unsafe: RefCell::new(NodeSet()),\n@@ -5999,18 +5999,26 @@ pub fn item_variances(tcx: &ctxt, item_id: ast::DefId) -> Rc<ItemVariances> {\n         || Rc::new(csearch::get_item_variances(&tcx.sess.cstore, item_id)))\n }\n \n+pub fn trait_default_impl(tcx: &ctxt, trait_def_id: DefId) -> Option<ast::DefId> {\n+    match tcx.default_trait_impls.borrow().get(&trait_def_id) {\n+        Some(id) => Some(*id),\n+        None => None\n+    }\n+}\n+\n pub fn trait_has_default_impl(tcx: &ctxt, trait_def_id: DefId) -> bool {\n-    tcx.default_trait_impls.borrow().contains(&trait_def_id)\n+    tcx.default_trait_impls.borrow().contains_key(&trait_def_id)\n }\n \n /// Records a trait-to-implementation mapping.\n-pub fn record_default_trait_implementation(tcx: &ctxt, trait_def_id: DefId) {\n-\n-    if tcx.default_trait_impls.borrow().contains(&trait_def_id) {\n-        return;\n-    }\n+pub fn record_default_trait_implementation(tcx: &ctxt,\n+                                           trait_def_id: DefId,\n+                                           impl_def_id: DefId) {\n \n-    tcx.default_trait_impls.borrow_mut().insert(trait_def_id);\n+    // We're using the latest implementation found as the reference one.\n+    // Duplicated implementations are caught and reported in the coherence\n+    // step.\n+    tcx.default_trait_impls.borrow_mut().insert(trait_def_id, impl_def_id);\n }\n \n \n@@ -6100,7 +6108,8 @@ pub fn populate_implementations_for_trait_if_necessary(\n         let impl_items = csearch::get_impl_items(&tcx.sess.cstore, implementation_def_id);\n \n         if csearch::is_default_trait(&tcx.sess.cstore, implementation_def_id) {\n-            record_default_trait_implementation(tcx, trait_id);\n+            record_default_trait_implementation(tcx, trait_id,\n+                                                implementation_def_id);\n             tcx.populated_external_traits.borrow_mut().insert(trait_id);\n \n             // Nothing else to do for default trait implementations since"}, {"sha": "4a2660fcf469df00c72cfa1651926a6c56769194", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 71, "deletions": 8, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=1e3ed61d8273377544e40bdbbdf8391b51571293", "patch": "@@ -17,16 +17,19 @@ use middle::infer::{self, new_infer_ctxt};\n use syntax::ast::{DefId};\n use syntax::ast::{LOCAL_CRATE};\n use syntax::ast;\n-use syntax::codemap::{Span};\n+use syntax::ast_util;\n+use syntax::visit;\n+use syntax::codemap::Span;\n use util::ppaux::Repr;\n \n pub fn check(tcx: &ty::ctxt) {\n-    let overlap = OverlapChecker { tcx: tcx };\n+    let mut overlap = OverlapChecker { tcx: tcx };\n     overlap.check_for_overlapping_impls();\n+    visit::walk_crate(&mut overlap, tcx.map.krate());\n }\n \n struct OverlapChecker<'cx, 'tcx:'cx> {\n-    tcx: &'cx ty::ctxt<'tcx>\n+    tcx: &'cx ty::ctxt<'tcx>,\n }\n \n impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n@@ -90,17 +93,28 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n             return;\n         }\n \n-        span_err!(self.tcx.sess, self.span_of_impl(impl1_def_id), E0119,\n+        self.report_overlap_error(trait_def_id, impl1_def_id, impl2_def_id);\n+    }\n+\n+    fn report_overlap_error(&self, trait_def_id: ast::DefId,\n+                            impl1: ast::DefId, impl2: ast::DefId) {\n+\n+        span_err!(self.tcx.sess, self.span_of_impl(impl1), E0119,\n                   \"conflicting implementations for trait `{}`\",\n                   ty::item_path_str(self.tcx, trait_def_id));\n \n-        if impl2_def_id.krate == ast::LOCAL_CRATE {\n-            span_note!(self.tcx.sess, self.span_of_impl(impl2_def_id),\n+        self.report_overlap_note(impl1, impl2);\n+    }\n+\n+    fn report_overlap_note(&self, impl1: ast::DefId, impl2: ast::DefId) {\n+\n+        if impl2.krate == ast::LOCAL_CRATE {\n+            span_note!(self.tcx.sess, self.span_of_impl(impl2),\n                        \"note conflicting implementation here\");\n         } else {\n             let crate_store = &self.tcx.sess.cstore;\n-            let cdata = crate_store.get_crate_data(impl2_def_id.krate);\n-            span_note!(self.tcx.sess, self.span_of_impl(impl1_def_id),\n+            let cdata = crate_store.get_crate_data(impl2.krate);\n+            span_note!(self.tcx.sess, self.span_of_impl(impl1),\n                        \"conflicting implementation in crate `{}`\",\n                        cdata.name);\n         }\n@@ -111,3 +125,52 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n         self.tcx.map.span(impl_did.node)\n     }\n }\n+\n+\n+impl<'cx, 'tcx,'v> visit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n+    fn visit_item(&mut self, item: &'v ast::Item) {\n+        match item.node {\n+            ast::ItemImpl(_, ast::ImplPolarity::Positive, _, Some(ref ast_trait_ref), _, _) => {\n+                let trait_ref = ty::node_id_to_trait_ref(self.tcx, ast_trait_ref.ref_id);\n+                match ty::trait_default_impl(self.tcx, trait_ref.def_id) {\n+                    Some(default_impl) => {\n+                        match trait_ref.self_ty().sty {\n+                            ty::ty_struct(..) | ty::ty_enum(..) => {},\n+                            _ => {\n+                                let impl_def_id = ast_util::local_def(item.id);\n+                                span_err!(self.tcx.sess, self.span_of_impl(impl_def_id), E0317,\n+                                          \"implementations for traits providing default \\\n+                                           implementations are only allowed on structs and enums\");\n+\n+                                self.report_overlap_note(impl_def_id, default_impl);\n+                            }\n+                        }\n+                    }\n+                    None => {}\n+                }\n+            }\n+            ast::ItemDefaultImpl(_, _) => {\n+                let impl_def_id = ast_util::local_def(item.id);\n+                match ty::impl_trait_ref(self.tcx, impl_def_id) {\n+                    Some(ref trait_ref) => {\n+                        match ty::trait_default_impl(self.tcx, trait_ref.def_id) {\n+                            Some(other_impl) if other_impl != impl_def_id => {\n+                                self.report_overlap_error(trait_ref.def_id,\n+                                                          other_impl,\n+                                                          impl_def_id);\n+                            }\n+                            Some(_) => {}\n+                            None => {\n+                                self.tcx.sess.bug(\n+                                          &format!(\"no default implementation recorded for `{:?}`\",\n+                                          item)[]);\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+}"}, {"sha": "10fb71f1b483f5b3dd2555691f80abb770fe8053", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1e3ed61d8273377544e40bdbbdf8391b51571293", "patch": "@@ -652,7 +652,7 @@ fn convert_item(ccx: &CollectCtxt, it: &ast::Item) {\n             let trait_ref = astconv::instantiate_trait_ref(ccx, &ExplicitRscope,\n                                                            ast_trait_ref, None, None);\n \n-            ty::record_default_trait_implementation(tcx, trait_ref.def_id)\n+            ty::record_default_trait_implementation(tcx, trait_ref.def_id, local_def(it.id))\n         }\n         ast::ItemImpl(_, _,\n                       ref generics,\n@@ -1190,6 +1190,7 @@ fn convert_typed_item<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n         ast::ItemStruct(_, ref generics) => {\n             ty_generic_bounds_for_type_or_impl(ccx, &scheme.generics, generics)\n         }\n+        ast::ItemDefaultImpl(..) |\n         ast::ItemTrait(..) |\n         ast::ItemExternCrate(..) |\n         ast::ItemUse(..) |"}, {"sha": "39ae233957af4b45c9ddaea34bd625cc7f605a46", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3ed61d8273377544e40bdbbdf8391b51571293/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=1e3ed61d8273377544e40bdbbdf8391b51571293", "patch": "@@ -172,7 +172,8 @@ register_diagnostics! {\n     E0248, // found value name used as a type\n     E0249, // expected constant expr for array length\n     E0250, // expected constant expr for array length\n-    E0316  // can't create default impls for traits outside their crates\n+    E0316,  // can't create default impls for traits outside their crates\n+    E0317\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}]}