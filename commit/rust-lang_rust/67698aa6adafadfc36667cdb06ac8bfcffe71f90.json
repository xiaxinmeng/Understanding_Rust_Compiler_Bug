{"sha": "67698aa6adafadfc36667cdb06ac8bfcffe71f90", "node_id": "C_kwDOAAsO6NoAKDY3Njk4YWE2YWRhZmFkZmMzNjY2N2NkYjA2YWM4YmZjZmZlNzFmOTA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-15T02:08:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-10T23:46:38Z"}, "message": "Move some solver stuff to middle", "tree": {"sha": "85b274565d77583425a30b99b38dfbebb8a2dbec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85b274565d77583425a30b99b38dfbebb8a2dbec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67698aa6adafadfc36667cdb06ac8bfcffe71f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67698aa6adafadfc36667cdb06ac8bfcffe71f90", "html_url": "https://github.com/rust-lang/rust/commit/67698aa6adafadfc36667cdb06ac8bfcffe71f90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67698aa6adafadfc36667cdb06ac8bfcffe71f90/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4b772f805ec1e1c1bd7e189ab8d5a4e3a6ef13", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4b772f805ec1e1c1bd7e189ab8d5a4e3a6ef13", "html_url": "https://github.com/rust-lang/rust/commit/ff4b772f805ec1e1c1bd7e189ab8d5a4e3a6ef13"}], "stats": {"total": 221, "additions": 118, "deletions": 103}, "files": [{"sha": "77c67c14ecc55a88685987b502f98e1eca4aa77d", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -53,6 +53,12 @@ pub struct Obligation<'tcx, T> {\n     pub recursion_depth: usize,\n }\n \n+impl<'tcx, P> From<Obligation<'tcx, P>> for solve::Goal<'tcx, P> {\n+    fn from(value: Obligation<'tcx, P>) -> Self {\n+        solve::Goal { param_env: value.param_env, predicate: value.predicate }\n+    }\n+}\n+\n pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;\n pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n "}, {"sha": "92d3e73e683cd832ec640ab1f3a6ed332795aca0", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 94, "deletions": 2, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -1,12 +1,104 @@\n use std::ops::ControlFlow;\n \n use rustc_data_structures::intern::Interned;\n+use rustc_query_system::cache::Cache;\n \n-use crate::infer::canonical::QueryRegionConstraints;\n+use crate::infer::canonical::{CanonicalVarValues, QueryRegionConstraints};\n+use crate::traits::query::NoSolution;\n+use crate::traits::Canonical;\n use crate::ty::{\n-    FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeVisitable, TypeVisitor,\n+    self, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeVisitable,\n+    TypeVisitor,\n };\n \n+pub type EvaluationCache<'tcx> = Cache<CanonicalGoal<'tcx>, QueryResult<'tcx>>;\n+\n+/// A goal is a statement, i.e. `predicate`, we want to prove\n+/// given some assumptions, i.e. `param_env`.\n+///\n+/// Most of the time the `param_env` contains the `where`-bounds of the function\n+/// we're currently typechecking while the `predicate` is some trait bound.\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n+pub struct Goal<'tcx, P> {\n+    pub param_env: ty::ParamEnv<'tcx>,\n+    pub predicate: P,\n+}\n+\n+impl<'tcx, P> Goal<'tcx, P> {\n+    pub fn new(\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        predicate: impl ToPredicate<'tcx, P>,\n+    ) -> Goal<'tcx, P> {\n+        Goal { param_env, predicate: predicate.to_predicate(tcx) }\n+    }\n+\n+    /// Updates the goal to one with a different `predicate` but the same `param_env`.\n+    pub fn with<Q>(self, tcx: TyCtxt<'tcx>, predicate: impl ToPredicate<'tcx, Q>) -> Goal<'tcx, Q> {\n+        Goal { param_env: self.param_env, predicate: predicate.to_predicate(tcx) }\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n+pub struct Response<'tcx> {\n+    pub var_values: CanonicalVarValues<'tcx>,\n+    /// Additional constraints returned by this query.\n+    pub external_constraints: ExternalConstraints<'tcx>,\n+    pub certainty: Certainty,\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n+pub enum Certainty {\n+    Yes,\n+    Maybe(MaybeCause),\n+}\n+\n+impl Certainty {\n+    pub const AMBIGUOUS: Certainty = Certainty::Maybe(MaybeCause::Ambiguity);\n+\n+    /// When proving multiple goals using **AND**, e.g. nested obligations for an impl,\n+    /// use this function to unify the certainty of these goals\n+    pub fn unify_and(self, other: Certainty) -> Certainty {\n+        match (self, other) {\n+            (Certainty::Yes, Certainty::Yes) => Certainty::Yes,\n+            (Certainty::Yes, Certainty::Maybe(_)) => other,\n+            (Certainty::Maybe(_), Certainty::Yes) => self,\n+            (Certainty::Maybe(MaybeCause::Overflow), Certainty::Maybe(MaybeCause::Overflow)) => {\n+                Certainty::Maybe(MaybeCause::Overflow)\n+            }\n+            // If at least one of the goals is ambiguous, hide the overflow as the ambiguous goal\n+            // may still result in failure.\n+            (Certainty::Maybe(MaybeCause::Ambiguity), Certainty::Maybe(_))\n+            | (Certainty::Maybe(_), Certainty::Maybe(MaybeCause::Ambiguity)) => {\n+                Certainty::Maybe(MaybeCause::Ambiguity)\n+            }\n+        }\n+    }\n+}\n+\n+/// Why we failed to evaluate a goal.\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n+pub enum MaybeCause {\n+    /// We failed due to ambiguity. This ambiguity can either\n+    /// be a true ambiguity, i.e. there are multiple different answers,\n+    /// or we hit a case where we just don't bother, e.g. `?x: Trait` goals.\n+    Ambiguity,\n+    /// We gave up due to an overflow, most often by hitting the recursion limit.\n+    Overflow,\n+}\n+\n+pub type CanonicalGoal<'tcx, T = ty::Predicate<'tcx>> = Canonical<'tcx, Goal<'tcx, T>>;\n+\n+pub type CanonicalResponse<'tcx> = Canonical<'tcx, Response<'tcx>>;\n+\n+/// The result of evaluating a canonical query.\n+///\n+/// FIXME: We use a different type than the existing canonical queries. This is because\n+/// we need to add a `Certainty` for `overflow` and may want to restructure this code without\n+/// having to worry about changes to currently used code. Once we've made progress on this\n+/// solver, merge the two responses again.\n+pub type QueryResult<'tcx> = Result<CanonicalResponse<'tcx>, NoSolution>;\n+\n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub struct ExternalConstraints<'tcx>(pub(crate) Interned<'tcx, ExternalConstraintsData<'tcx>>);\n "}, {"sha": "b092503a007ecffc4783bf52d2c247a486d7ab8b", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -2,11 +2,12 @@\n \n #[cfg(doc)]\n use super::trait_goals::structural_traits::*;\n-use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n+use super::EvalCtxt;\n use itertools::Itertools;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::elaborate_predicates;\n+use rustc_middle::traits::solve::{CanonicalResponse, Certainty, Goal, MaybeCause, QueryResult};\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::fmt::Debug;"}, {"sha": "55d361b120441cc616fa73430fc998166e571db4", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 5, "deletions": 92, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -21,11 +21,13 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::query::NoSolution;\n-use rustc_infer::traits::Obligation;\n-use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n+use rustc_middle::traits::solve::{\n+    CanonicalGoal, CanonicalResponse, Certainty, ExternalConstraints, ExternalConstraintsData,\n+    Goal, MaybeCause, QueryResult, Response,\n+};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{\n-    CoercePredicate, RegionOutlivesPredicate, SubtypePredicate, ToPredicate, TypeOutlivesPredicate,\n+    CoercePredicate, RegionOutlivesPredicate, SubtypePredicate, TypeOutlivesPredicate,\n };\n use rustc_span::DUMMY_SP;\n \n@@ -43,45 +45,6 @@ mod trait_goals;\n pub use eval_ctxt::EvalCtxt;\n pub use fulfill::FulfillmentCtxt;\n \n-/// A goal is a statement, i.e. `predicate`, we want to prove\n-/// given some assumptions, i.e. `param_env`.\n-///\n-/// Most of the time the `param_env` contains the `where`-bounds of the function\n-/// we're currently typechecking while the `predicate` is some trait bound.\n-#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n-pub struct Goal<'tcx, P> {\n-    param_env: ty::ParamEnv<'tcx>,\n-    predicate: P,\n-}\n-\n-impl<'tcx, P> Goal<'tcx, P> {\n-    pub fn new(\n-        tcx: TyCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        predicate: impl ToPredicate<'tcx, P>,\n-    ) -> Goal<'tcx, P> {\n-        Goal { param_env, predicate: predicate.to_predicate(tcx) }\n-    }\n-\n-    /// Updates the goal to one with a different `predicate` but the same `param_env`.\n-    fn with<Q>(self, tcx: TyCtxt<'tcx>, predicate: impl ToPredicate<'tcx, Q>) -> Goal<'tcx, Q> {\n-        Goal { param_env: self.param_env, predicate: predicate.to_predicate(tcx) }\n-    }\n-}\n-\n-impl<'tcx, P> From<Obligation<'tcx, P>> for Goal<'tcx, P> {\n-    fn from(obligation: Obligation<'tcx, P>) -> Goal<'tcx, P> {\n-        Goal { param_env: obligation.param_env, predicate: obligation.predicate }\n-    }\n-}\n-#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n-pub struct Response<'tcx> {\n-    pub var_values: CanonicalVarValues<'tcx>,\n-    /// Additional constraints returned by this query.\n-    pub external_constraints: ExternalConstraints<'tcx>,\n-    pub certainty: Certainty,\n-}\n-\n trait CanonicalResponseExt {\n     fn has_no_inference_or_external_constraints(&self) -> bool;\n }\n@@ -94,56 +57,6 @@ impl<'tcx> CanonicalResponseExt for Canonical<'tcx, Response<'tcx>> {\n     }\n }\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n-pub enum Certainty {\n-    Yes,\n-    Maybe(MaybeCause),\n-}\n-\n-impl Certainty {\n-    pub const AMBIGUOUS: Certainty = Certainty::Maybe(MaybeCause::Ambiguity);\n-\n-    /// When proving multiple goals using **AND**, e.g. nested obligations for an impl,\n-    /// use this function to unify the certainty of these goals\n-    pub fn unify_and(self, other: Certainty) -> Certainty {\n-        match (self, other) {\n-            (Certainty::Yes, Certainty::Yes) => Certainty::Yes,\n-            (Certainty::Yes, Certainty::Maybe(_)) => other,\n-            (Certainty::Maybe(_), Certainty::Yes) => self,\n-            (Certainty::Maybe(MaybeCause::Overflow), Certainty::Maybe(MaybeCause::Overflow)) => {\n-                Certainty::Maybe(MaybeCause::Overflow)\n-            }\n-            // If at least one of the goals is ambiguous, hide the overflow as the ambiguous goal\n-            // may still result in failure.\n-            (Certainty::Maybe(MaybeCause::Ambiguity), Certainty::Maybe(_))\n-            | (Certainty::Maybe(_), Certainty::Maybe(MaybeCause::Ambiguity)) => {\n-                Certainty::Maybe(MaybeCause::Ambiguity)\n-            }\n-        }\n-    }\n-}\n-\n-/// Why we failed to evaluate a goal.\n-#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n-pub enum MaybeCause {\n-    /// We failed due to ambiguity. This ambiguity can either\n-    /// be a true ambiguity, i.e. there are multiple different answers,\n-    /// or we hit a case where we just don't bother, e.g. `?x: Trait` goals.\n-    Ambiguity,\n-    /// We gave up due to an overflow, most often by hitting the recursion limit.\n-    Overflow,\n-}\n-\n-type CanonicalGoal<'tcx, T = ty::Predicate<'tcx>> = Canonical<'tcx, Goal<'tcx, T>>;\n-type CanonicalResponse<'tcx> = Canonical<'tcx, Response<'tcx>>;\n-/// The result of evaluating a canonical query.\n-///\n-/// FIXME: We use a different type than the existing canonical queries. This is because\n-/// we need to add a `Certainty` for `overflow` and may want to restructure this code without\n-/// having to worry about changes to currently used code. Once we've made progress on this\n-/// solver, merge the two responses again.\n-pub type QueryResult<'tcx> = Result<CanonicalResponse<'tcx>, NoSolution>;\n-\n pub trait InferCtxtEvalExt<'tcx> {\n     /// Evaluates a goal from **outside** of the trait solver.\n     ///"}, {"sha": "e206658b4b90d2cc8374c524048c3c028d06574a", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -2,7 +2,7 @@ use crate::traits::{specialization_graph, translate_substs};\n \n use super::assembly;\n use super::trait_goals::structural_traits;\n-use super::{Certainty, EvalCtxt, Goal, QueryResult};\n+use super::EvalCtxt;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n@@ -11,6 +11,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::specialization_graph::LeafDef;\n use rustc_infer::traits::Reveal;\n+use rustc_middle::traits::solve::{CanonicalResponse, Certainty, Goal, QueryResult};\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::ProjectionPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -512,7 +513,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     fn consider_builtin_dyn_upcast_candidates(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n-    ) -> Vec<super::CanonicalResponse<'tcx>> {\n+    ) -> Vec<CanonicalResponse<'tcx>> {\n         bug!(\"`Unsize` does not have an associated type: {:?}\", goal);\n     }\n "}, {"sha": "f0a51f80bd2f456e2c182d10e7690aa72f73266e", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -10,9 +10,9 @@\n //! before then or if I still haven't done that before January 2023.\n use super::overflow::OverflowData;\n use super::StackDepth;\n-use crate::solve::{CanonicalGoal, QueryResult};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::traits::solve::{CanonicalGoal, QueryResult};\n use rustc_middle::ty::TyCtxt;\n \n rustc_index::newtype_index! {"}, {"sha": "1121d034657b9d9dcc9b2ddaddc959dd056d8bf7", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -2,11 +2,11 @@ mod cache;\n mod overflow;\n \n use self::cache::ProvisionalEntry;\n-use super::{CanonicalGoal, Certainty, MaybeCause, QueryResult};\n pub(super) use crate::solve::search_graph::overflow::OverflowHandler;\n use cache::ProvisionalCache;\n use overflow::OverflowData;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::traits::solve::{CanonicalGoal, Certainty, MaybeCause, QueryResult};\n use rustc_middle::ty::TyCtxt;\n use std::{collections::hash_map::Entry, mem};\n "}, {"sha": "7c9e63f529b5503a78a9d606fba3b1eb5fc8f329", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/overflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -1,10 +1,11 @@\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::traits::query::NoSolution;\n+use rustc_middle::traits::solve::{Certainty, MaybeCause, QueryResult};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Limit;\n \n use super::SearchGraph;\n-use crate::solve::{response_no_constraints, Certainty, EvalCtxt, MaybeCause, QueryResult};\n+use crate::solve::{response_no_constraints, EvalCtxt};\n \n /// When detecting a solver overflow, we return ambiguity. Overflow can be\n /// *hidden* by either a fatal error in an **AND** or a trivial success in an **OR**."}, {"sha": "0669975d63819174d57d86c2472b2672d1775810", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -2,12 +2,12 @@\n \n use std::iter;\n \n-use super::assembly;\n-use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, QueryResult};\n+use super::{assembly, EvalCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::supertraits;\n+use rustc_middle::traits::solve::{CanonicalResponse, Certainty, Goal, QueryResult};\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n use rustc_middle::ty::{TraitPredicate, TypeVisitableExt};"}, {"sha": "1420c25c922801e70298c97766a64d61f2621131", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67698aa6adafadfc36667cdb06ac8bfcffe71f90/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=67698aa6adafadfc36667cdb06ac8bfcffe71f90", "patch": "@@ -1,9 +1,10 @@\n+use rustc_middle::traits::solve::{Certainty, Goal, MaybeCause};\n use rustc_middle::ty;\n use rustc_session::config::TraitSolver;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n-use crate::solve::{Certainty, Goal, InferCtxtEvalExt, MaybeCause};\n+use crate::solve::InferCtxtEvalExt;\n use crate::traits::{EvaluationResult, OverflowError, PredicateObligation, SelectionContext};\n \n pub trait InferCtxtExt<'tcx> {"}]}