{"sha": "4ba2df11d870882422d32e45d62cd6198cf4068b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYTJkZjExZDg3MDg4MjQyMmQzMmU0NWQ2MmNkNjE5OGNmNDA2OGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-18T06:56:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-18T17:36:39Z"}, "message": "rustc: Add `Local` to the HIR map of parents\n\nWhen walking parents for lints we want to be sure to hit `let` statements which\ncan have attributes, so hook up these statements in the HIR map.\n\nCloses #43910", "tree": {"sha": "c01c8bbfb0613e31272601b93290403eb5bef1ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c01c8bbfb0613e31272601b93290403eb5bef1ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba2df11d870882422d32e45d62cd6198cf4068b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba2df11d870882422d32e45d62cd6198cf4068b", "html_url": "https://github.com/rust-lang/rust/commit/4ba2df11d870882422d32e45d62cd6198cf4068b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba2df11d870882422d32e45d62cd6198cf4068b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "html_url": "https://github.com/rust-lang/rust/commit/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "0928081decda0aefcb1b6f4d196690bdf9b365ce", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ba2df11d870882422d32e45d62cd6198cf4068b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba2df11d870882422d32e45d62cd6198cf4068b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=4ba2df11d870882422d32e45d62cd6198cf4068b", "patch": "@@ -195,6 +195,13 @@ impl<'hir> Visitor<'hir> for NodeCollector<'hir> {\n         });\n     }\n \n+    fn visit_local(&mut self, l: &'hir Local) {\n+        self.insert(l.id, NodeLocal(l));\n+        self.with_parent(l.id, |this| {\n+            intravisit::walk_local(this, l)\n+        })\n+    }\n+\n     fn visit_lifetime(&mut self, lifetime: &'hir Lifetime) {\n         self.insert(lifetime.id, NodeLifetime(lifetime));\n     }"}, {"sha": "1ff3166110aa0a31a079b224c5797f15c66567e9", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ba2df11d870882422d32e45d62cd6198cf4068b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba2df11d870882422d32e45d62cd6198cf4068b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=4ba2df11d870882422d32e45d62cd6198cf4068b", "patch": "@@ -56,6 +56,7 @@ pub enum Node<'hir> {\n     NodeBinding(&'hir Pat),\n     NodePat(&'hir Pat),\n     NodeBlock(&'hir Block),\n+    NodeLocal(&'hir Local),\n \n     /// NodeStructCtor represents a tuple struct.\n     NodeStructCtor(&'hir VariantData),\n@@ -90,6 +91,7 @@ enum MapEntry<'hir> {\n     EntryLifetime(NodeId, &'hir Lifetime),\n     EntryTyParam(NodeId, &'hir TyParam),\n     EntryVisibility(NodeId, &'hir Visibility),\n+    EntryLocal(NodeId, &'hir Local),\n \n     /// Roots for node trees.\n     RootCrate,\n@@ -121,6 +123,7 @@ impl<'hir> MapEntry<'hir> {\n             NodeLifetime(n) => EntryLifetime(p, n),\n             NodeTyParam(n) => EntryTyParam(p, n),\n             NodeVisibility(n) => EntryVisibility(p, n),\n+            NodeLocal(n) => EntryLocal(p, n),\n         }\n     }\n \n@@ -143,6 +146,7 @@ impl<'hir> MapEntry<'hir> {\n             EntryLifetime(id, _) => id,\n             EntryTyParam(id, _) => id,\n             EntryVisibility(id, _) => id,\n+            EntryLocal(id, _) => id,\n \n             NotPresent |\n             RootCrate => return None,\n@@ -168,6 +172,7 @@ impl<'hir> MapEntry<'hir> {\n             EntryLifetime(_, n) => NodeLifetime(n),\n             EntryTyParam(_, n) => NodeTyParam(n),\n             EntryVisibility(_, n) => NodeVisibility(n),\n+            EntryLocal(_, n) => NodeLocal(n),\n             _ => return None\n         })\n     }\n@@ -325,7 +330,8 @@ impl<'hir> Map<'hir> {\n                 EntryStructCtor(p, _) |\n                 EntryLifetime(p, _) |\n                 EntryTyParam(p, _) |\n-                EntryVisibility(p, _) =>\n+                EntryVisibility(p, _) |\n+                EntryLocal(p, _) =>\n                     id = p,\n \n                 EntryExpr(p, _) => {\n@@ -923,6 +929,7 @@ impl<'hir> Map<'hir> {\n             Some(EntryTyParam(_, ty_param)) => ty_param.span,\n             Some(EntryVisibility(_, &Visibility::Restricted { ref path, .. })) => path.span,\n             Some(EntryVisibility(_, v)) => bug!(\"unexpected Visibility {:?}\", v),\n+            Some(EntryLocal(_, local)) => local.span,\n \n             Some(RootCrate) => self.forest.krate.span,\n             Some(NotPresent) | None => {\n@@ -1131,6 +1138,7 @@ impl<'a> print::State<'a> {\n             // hir_map to reconstruct their full structure for pretty\n             // printing.\n             NodeStructCtor(_)  => bug!(\"cannot print isolated StructCtor\"),\n+            NodeLocal(a)       => self.print_local_decl(&a),\n         }\n     }\n }\n@@ -1232,6 +1240,9 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         Some(NodeBlock(_)) => {\n             format!(\"block {}{}\", map.node_to_pretty_string(id), id_str)\n         }\n+        Some(NodeLocal(_)) => {\n+            format!(\"local {}{}\", map.node_to_pretty_string(id), id_str)\n+        }\n         Some(NodeStructCtor(_)) => {\n             format!(\"struct_ctor {}{}\", path_str(), id_str)\n         }"}, {"sha": "9ccf157ed897465223bfc3b1dbee2a48bf3f9acd", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ba2df11d870882422d32e45d62cd6198cf4068b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba2df11d870882422d32e45d62cd6198cf4068b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=4ba2df11d870882422d32e45d62cd6198cf4068b", "patch": "@@ -68,19 +68,7 @@ fn get_pattern_source<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &Pat) -> Patte\n                     });\n             PatternSource::MatchExpr(e)\n         }\n-        NodeStmt(ref s) => {\n-            // the enclosing statement must be a `let` or something else\n-            match s.node {\n-                StmtDecl(ref decl, _) => {\n-                    match decl.node {\n-                        DeclLocal(ref local) => PatternSource::LetDecl(local),\n-                        _ => return PatternSource::Other,\n-                    }\n-                }\n-                _ => return PatternSource::Other,\n-            }\n-        }\n-\n+        NodeLocal(local) => PatternSource::LetDecl(local),\n         _ => return PatternSource::Other,\n \n     }"}, {"sha": "d61ce7f4689bb16a5a4a20c4cd47c1c59e1b0e22", "filename": "src/test/run-pass/issue-43910.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ba2df11d870882422d32e45d62cd6198cf4068b/src%2Ftest%2Frun-pass%2Fissue-43910.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba2df11d870882422d32e45d62cd6198cf4068b/src%2Ftest%2Frun-pass%2Fissue-43910.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43910.rs?ref=4ba2df11d870882422d32e45d62cd6198cf4068b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unused_variables)]\n+\n+fn main() {\n+    #[allow(unused_variables)]\n+    let x = 12;\n+}"}]}