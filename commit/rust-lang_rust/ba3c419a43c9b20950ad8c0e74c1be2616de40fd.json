{"sha": "ba3c419a43c9b20950ad8c0e74c1be2616de40fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhM2M0MTlhNDNjOWIyMDk1MGFkOGMwZTc0YzFiZTI2MTZkZTQwZmQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-21T22:41:17Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-27T18:22:19Z"}, "message": "Move the definitions of the two `Ctxt`s to the top", "tree": {"sha": "7324bc4a8c7999f74df58a7c88af29ba480416ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7324bc4a8c7999f74df58a7c88af29ba480416ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3c419a43c9b20950ad8c0e74c1be2616de40fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3c419a43c9b20950ad8c0e74c1be2616de40fd", "html_url": "https://github.com/rust-lang/rust/commit/ba3c419a43c9b20950ad8c0e74c1be2616de40fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3c419a43c9b20950ad8c0e74c1be2616de40fd/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2184a1444cb670421bf2836cbdbb662c077bad6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2184a1444cb670421bf2836cbdbb662c077bad6a", "html_url": "https://github.com/rust-lang/rust/commit/2184a1444cb670421bf2836cbdbb662c077bad6a"}], "stats": {"total": 93, "additions": 46, "deletions": 47}, "files": [{"sha": "ce76b65b2ed8ec92b031d9054e987c52800a5063", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 46, "deletions": 47, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ba3c419a43c9b20950ad8c0e74c1be2616de40fd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3c419a43c9b20950ad8c0e74c1be2616de40fd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=ba3c419a43c9b20950ad8c0e74c1be2616de40fd", "patch": "@@ -324,6 +324,52 @@ use smallvec::{smallvec, SmallVec};\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator};\n \n+crate struct MatchCheckCtxt<'a, 'tcx> {\n+    crate tcx: TyCtxt<'tcx>,\n+    /// The module in which the match occurs. This is necessary for\n+    /// checking inhabited-ness of types because whether a type is (visibly)\n+    /// inhabited can depend on whether it was defined in the current module or\n+    /// not. E.g., `struct Foo { _private: ! }` cannot be seen to be empty\n+    /// outside its module and should not be matchable with an empty match statement.\n+    crate module: DefId,\n+    crate param_env: ty::ParamEnv<'tcx>,\n+    crate pattern_arena: &'a TypedArena<Pat<'tcx>>,\n+}\n+\n+impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n+    pub(super) fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {\n+        if self.tcx.features().exhaustive_patterns {\n+            self.tcx.is_ty_uninhabited_from(self.module, ty, self.param_env)\n+        } else {\n+            false\n+        }\n+    }\n+\n+    /// Returns whether the given type is an enum from another crate declared `#[non_exhaustive]`.\n+    pub(super) fn is_foreign_non_exhaustive_enum(&self, ty: Ty<'tcx>) -> bool {\n+        match ty.kind() {\n+            ty::Adt(def, ..) => {\n+                def.is_enum() && def.is_variant_list_non_exhaustive() && !def.did.is_local()\n+            }\n+            _ => false,\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+pub(super) struct PatCtxt<'a, 'p, 'tcx> {\n+    pub(super) cx: &'a MatchCheckCtxt<'p, 'tcx>,\n+    /// Current state of the matrix.\n+    pub(super) matrix: &'a Matrix<'p, 'tcx>,\n+    /// Type of the current column under investigation.\n+    pub(super) ty: Ty<'tcx>,\n+    /// Span of the current pattern under investigation.\n+    pub(super) span: Span,\n+    /// Whether the current pattern is the whole pattern as found in a match arm, or if it's a\n+    /// subpattern.\n+    pub(super) is_top_level: bool,\n+}\n+\n crate fn expand_pattern<'tcx>(pat: Pat<'tcx>) -> Pat<'tcx> {\n     LiteralExpander.fold_pattern(&pat)\n }\n@@ -572,39 +618,6 @@ impl<'p, 'tcx> FromIterator<PatStack<'p, 'tcx>> for Matrix<'p, 'tcx> {\n     }\n }\n \n-crate struct MatchCheckCtxt<'a, 'tcx> {\n-    crate tcx: TyCtxt<'tcx>,\n-    /// The module in which the match occurs. This is necessary for\n-    /// checking inhabited-ness of types because whether a type is (visibly)\n-    /// inhabited can depend on whether it was defined in the current module or\n-    /// not. E.g., `struct Foo { _private: ! }` cannot be seen to be empty\n-    /// outside it's module and should not be matchable with an empty match\n-    /// statement.\n-    crate module: DefId,\n-    crate param_env: ty::ParamEnv<'tcx>,\n-    crate pattern_arena: &'a TypedArena<Pat<'tcx>>,\n-}\n-\n-impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n-    pub(super) fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {\n-        if self.tcx.features().exhaustive_patterns {\n-            self.tcx.is_ty_uninhabited_from(self.module, ty, self.param_env)\n-        } else {\n-            false\n-        }\n-    }\n-\n-    /// Returns whether the given type is an enum from another crate declared `#[non_exhaustive]`.\n-    pub(super) fn is_foreign_non_exhaustive_enum(&self, ty: Ty<'tcx>) -> bool {\n-        match ty.kind() {\n-            ty::Adt(def, ..) => {\n-                def.is_enum() && def.is_variant_list_non_exhaustive() && !def.did.is_local()\n-            }\n-            _ => false,\n-        }\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n crate enum Usefulness<'tcx> {\n     /// Carries, for each column in the matrix, a set of sub-branches that have been found to be\n@@ -684,20 +697,6 @@ enum WitnessPreference {\n     LeaveOutWitness,\n }\n \n-#[derive(Copy, Clone)]\n-pub(super) struct PatCtxt<'a, 'p, 'tcx> {\n-    pub(super) cx: &'a MatchCheckCtxt<'p, 'tcx>,\n-    /// Current state of the matrix.\n-    pub(super) matrix: &'a Matrix<'p, 'tcx>,\n-    /// Type of the current column under investigation.\n-    pub(super) ty: Ty<'tcx>,\n-    /// Span of the current pattern under investigation.\n-    pub(super) span: Span,\n-    /// Whether the current pattern is the whole pattern as found in a match arm, or if it's a\n-    /// subpattern.\n-    pub(super) is_top_level: bool,\n-}\n-\n /// A witness of non-exhaustiveness for error reporting, represented\n /// as a list of patterns (in reverse order of construction) with\n /// wildcards inside to represent elements that can take any inhabitant"}]}