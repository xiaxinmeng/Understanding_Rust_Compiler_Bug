{"sha": "8a2ad75a60b599cab49b57000660b884e8fb27dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMmFkNzVhNjBiNTk5Y2FiNDliNTcwMDA2NjBiODg0ZThmYjI3ZGQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-14T17:29:20Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-19T15:03:19Z"}, "message": "Add a `storage` query modifier to override the query cache", "tree": {"sha": "ec2853048b335377991197b2225d1b0a4f25f58e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec2853048b335377991197b2225d1b0a4f25f58e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2ad75a60b599cab49b57000660b884e8fb27dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2ad75a60b599cab49b57000660b884e8fb27dd", "html_url": "https://github.com/rust-lang/rust/commit/8a2ad75a60b599cab49b57000660b884e8fb27dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2ad75a60b599cab49b57000660b884e8fb27dd/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a8589e018a8a119b628206d0f8990b44a2e4c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a8589e018a8a119b628206d0f8990b44a2e4c5", "html_url": "https://github.com/rust-lang/rust/commit/e2a8589e018a8a119b628206d0f8990b44a2e4c5"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "963f45b3f17e935ea2922f123b5698f457b5f776", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a2ad75a60b599cab49b57000660b884e8fb27dd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2ad75a60b599cab49b57000660b884e8fb27dd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=8a2ad75a60b599cab49b57000660b884e8fb27dd", "patch": "@@ -99,17 +99,17 @@ macro_rules! is_eval_always_attr {\n }\n \n macro_rules! contains_anon_attr {\n-    ($($attr:ident),*) => ({$(is_anon_attr!($attr) | )* false});\n+    ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_anon_attr!($attr) | )* false});\n }\n \n macro_rules! contains_eval_always_attr {\n-    ($($attr:ident),*) => ({$(is_eval_always_attr!($attr) | )* false});\n+    ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_eval_always_attr!($attr) | )* false});\n }\n \n macro_rules! define_dep_nodes {\n     (<$tcx:tt>\n     $(\n-        [$($attr:ident),* ]\n+        [$($attrs:tt)*]\n         $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n                        $({ $($struct_arg_name:ident : $struct_arg_ty:ty),* })*\n       ,)*\n@@ -126,7 +126,7 @@ macro_rules! define_dep_nodes {\n                 match *self {\n                     $(\n                         DepKind :: $variant => {\n-                            if contains_anon_attr!($($attr),*) {\n+                            if contains_anon_attr!($($attrs)*) {\n                                 return false;\n                             }\n \n@@ -152,15 +152,15 @@ macro_rules! define_dep_nodes {\n             pub fn is_anon(&self) -> bool {\n                 match *self {\n                     $(\n-                        DepKind :: $variant => { contains_anon_attr!($($attr),*) }\n+                        DepKind :: $variant => { contains_anon_attr!($($attrs)*) }\n                     )*\n                 }\n             }\n \n             pub fn is_eval_always(&self) -> bool {\n                 match *self {\n                     $(\n-                        DepKind :: $variant => { contains_eval_always_attr!($($attr), *) }\n+                        DepKind :: $variant => { contains_eval_always_attr!($($attrs)*) }\n                     )*\n                 }\n             }"}, {"sha": "13132739f89a3de127ffd113dda459296683af9e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a2ad75a60b599cab49b57000660b884e8fb27dd/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2ad75a60b599cab49b57000660b884e8fb27dd/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=8a2ad75a60b599cab49b57000660b884e8fb27dd", "patch": "@@ -746,53 +746,65 @@ macro_rules! handle_cycle_error {\n         $tcx.report_cycle($error).emit();\n         Value::from_cycle_error($tcx)\n     }};\n-    ([fatal_cycle$(, $modifiers:ident)*][$tcx:expr, $error:expr]) => {{\n+    ([fatal_cycle $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n         $tcx.report_cycle($error).emit();\n         $tcx.sess.abort_if_errors();\n         unreachable!()\n     }};\n-    ([cycle_delay_bug$(, $modifiers:ident)*][$tcx:expr, $error:expr]) => {{\n+    ([cycle_delay_bug $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n         $tcx.report_cycle($error).delay_as_bug();\n         Value::from_cycle_error($tcx)\n     }};\n-    ([$other:ident$(, $modifiers:ident)*][$($args:tt)*]) => {\n-        handle_cycle_error!([$($modifiers),*][$($args)*])\n+    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n+        handle_cycle_error!([$($($modifiers)*)*][$($args)*])\n     };\n }\n \n macro_rules! is_anon {\n     ([]) => {{\n         false\n     }};\n-    ([anon$(, $modifiers:ident)*]) => {{\n+    ([anon $($rest:tt)*]) => {{\n         true\n     }};\n-    ([$other:ident$(, $modifiers:ident)*]) => {\n-        is_anon!([$($modifiers),*])\n+    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*]) => {\n+        is_anon!([$($($modifiers)*)*])\n     };\n }\n \n macro_rules! is_eval_always {\n     ([]) => {{\n         false\n     }};\n-    ([eval_always$(, $modifiers:ident)*]) => {{\n+    ([eval_always $($rest:tt)*]) => {{\n         true\n     }};\n-    ([$other:ident$(, $modifiers:ident)*]) => {\n-        is_eval_always!([$($modifiers),*])\n+    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*]) => {\n+        is_eval_always!([$($($modifiers)*)*])\n+    };\n+}\n+\n+macro_rules! query_storage {\n+    ([][$K:ty, $V:ty]) => {\n+        <<$K as Key>::CacheSelector as CacheSelector<$K, $V>>::Cache\n+    };\n+    ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n+        $ty\n+    };\n+    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n+        query_storage!([$($($modifiers)*)*][$($args)*])\n     };\n }\n \n macro_rules! hash_result {\n     ([][$hcx:expr, $result:expr]) => {{\n         dep_graph::hash_result($hcx, &$result)\n     }};\n-    ([no_hash$(, $modifiers:ident)*][$hcx:expr, $result:expr]) => {{\n+    ([no_hash $($rest:tt)*][$hcx:expr, $result:expr]) => {{\n         None\n     }};\n-    ([$other:ident$(, $modifiers:ident)*][$($args:tt)*]) => {\n-        hash_result!([$($modifiers),*][$($args)*])\n+    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n+        hash_result!([$($($modifiers)*)*][$($args)*])\n     };\n }\n \n@@ -1049,7 +1061,7 @@ macro_rules! define_queries_inner {\n             const ANON: bool = is_anon!([$($modifiers)*]);\n             const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n \n-            type Cache = <<$K as Key>::CacheSelector as CacheSelector<$K, $V>>::Cache;\n+            type Cache = query_storage!([$($modifiers)*][$K, $V]);\n \n             #[inline(always)]\n             fn query(key: Self::Key) -> Query<'tcx> {"}, {"sha": "6362f3c2c49f03929543ff72f9b204768ae75fcf", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a2ad75a60b599cab49b57000660b884e8fb27dd/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2ad75a60b599cab49b57000660b884e8fb27dd/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=8a2ad75a60b599cab49b57000660b884e8fb27dd", "patch": "@@ -33,6 +33,9 @@ enum QueryModifier {\n     /// The description of the query.\n     Desc(Option<Ident>, Punctuated<Expr, Token![,]>),\n \n+    /// Use this type for the in-memory cache.\n+    Storage(Type),\n+\n     /// Cache the query to disk if the `Expr` returns true.\n     Cache(Option<(IdentOrWild, IdentOrWild)>, Block),\n \n@@ -106,6 +109,9 @@ impl Parse for QueryModifier {\n             let id = args.parse()?;\n             let block = input.parse()?;\n             Ok(QueryModifier::LoadCached(tcx, id, block))\n+        } else if modifier == \"storage\" {\n+            let ty = input.parse()?;\n+            Ok(QueryModifier::Storage(ty))\n         } else if modifier == \"fatal_cycle\" {\n             Ok(QueryModifier::FatalCycle)\n         } else if modifier == \"cycle_delay_bug\" {\n@@ -198,6 +204,9 @@ struct QueryModifiers {\n     /// The description of the query.\n     desc: Option<(Option<Ident>, Punctuated<Expr, Token![,]>)>,\n \n+    /// Use this type for the in-memory cache.\n+    storage: Option<Type>,\n+\n     /// Cache the query to disk if the `Block` returns true.\n     cache: Option<(Option<(IdentOrWild, IdentOrWild)>, Block)>,\n \n@@ -226,6 +235,7 @@ struct QueryModifiers {\n /// Process query modifiers into a struct, erroring on duplicates\n fn process_modifiers(query: &mut Query) -> QueryModifiers {\n     let mut load_cached = None;\n+    let mut storage = None;\n     let mut cache = None;\n     let mut desc = None;\n     let mut fatal_cycle = false;\n@@ -242,6 +252,12 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 }\n                 load_cached = Some((tcx, id, block));\n             }\n+            QueryModifier::Storage(ty) => {\n+                if storage.is_some() {\n+                    panic!(\"duplicate modifier `storage` for query `{}`\", query.name);\n+                }\n+                storage = Some(ty);\n+            }\n             QueryModifier::Cache(args, expr) => {\n                 if cache.is_some() {\n                     panic!(\"duplicate modifier `cache` for query `{}`\", query.name);\n@@ -294,6 +310,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n     }\n     QueryModifiers {\n         load_cached,\n+        storage,\n         cache,\n         desc,\n         fatal_cycle,\n@@ -451,6 +468,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             if modifiers.fatal_cycle {\n                 attributes.push(quote! { fatal_cycle });\n             };\n+            // Pass on the storage modifier\n+            if let Some(ref ty) = modifiers.storage {\n+                attributes.push(quote! { storage(#ty) });\n+            };\n             // Pass on the cycle_delay_bug modifier\n             if modifiers.cycle_delay_bug {\n                 attributes.push(quote! { cycle_delay_bug });"}]}