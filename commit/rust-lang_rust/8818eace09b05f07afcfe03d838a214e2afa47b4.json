{"sha": "8818eace09b05f07afcfe03d838a214e2afa47b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MThlYWNlMDliMDVmMDdhZmNmZTAzZDgzOGEyMTRlMmFmYTQ3YjQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-23T00:21:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-24T01:07:26Z"}, "message": "Add a comment to `parse_bool`.\n\nIt's behaviour can be surprising.", "tree": {"sha": "5de9381c7f9e2d009fdc6a9bd2a09df14ecd2b87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de9381c7f9e2d009fdc6a9bd2a09df14ecd2b87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8818eace09b05f07afcfe03d838a214e2afa47b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8818eace09b05f07afcfe03d838a214e2afa47b4", "html_url": "https://github.com/rust-lang/rust/commit/8818eace09b05f07afcfe03d838a214e2afa47b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8818eace09b05f07afcfe03d838a214e2afa47b4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55c682e9ba2be16d5de4264d1b626e70f00de9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55c682e9ba2be16d5de4264d1b626e70f00de9d", "html_url": "https://github.com/rust-lang/rust/commit/c55c682e9ba2be16d5de4264d1b626e70f00de9d"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "9fd7b7e2e9beb797ee38607c2e10ddd84e15c734", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8818eace09b05f07afcfe03d838a214e2afa47b4/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8818eace09b05f07afcfe03d838a214e2afa47b4/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=8818eace09b05f07afcfe03d838a214e2afa47b4", "patch": "@@ -299,6 +299,9 @@ macro_rules! options {\n             }\n         )*\n \n+        /// Set a flag to true. Note that it cannot set the flag to false, so\n+        /// using this parser in combination with a flag that defaults to true\n+        /// is useless; the flag will always be true.\n         fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool {\n             match v {\n                 Some(..) => false,"}]}