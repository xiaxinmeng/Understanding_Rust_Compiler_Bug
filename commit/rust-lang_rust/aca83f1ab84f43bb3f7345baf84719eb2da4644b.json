{"sha": "aca83f1ab84f43bb3f7345baf84719eb2da4644b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYTgzZjFhYjg0ZjQzYmIzZjczNDViYWY4NDcxOWViMmRhNDY0NGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-23T19:31:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-23T19:31:06Z"}, "message": "Rollup merge of #87191 - adamgemmell:dev/llvm-lib-package, r=Mark-Simulacrum\n\nPackage LLVM libs for the target rather than the build host\n\nFixes https://github.com/rust-lang/rust/issues/85250\n\n`dist.rs` uses, in the `rust-dev` stage, `llvm-config --libfiles` to get a list of the LLVM library files built but of course only for the build host. If the target differs we want to package lib files from the target's build tree instead. This is done by splitting/rejoining the paths on their build directories.\n\nAt the moment `tree` on the LLVM build directories seems to give almost identical output, but of course this might not be the case in the future. If a file is missing in the target's build tree then this stage will error in the `builder.install()` call. If the target build tree has an extra file then it silently won't be copied and we'll get a linker error when building using this artifact (via `download-ci-llvm = \"if-available\"`), though we would have received a linker error anyway without this change.\n\nThere was also a typo in the example config around this option.", "tree": {"sha": "ee22e2952c7ddf0925ab053eb6e2208d36486bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee22e2952c7ddf0925ab053eb6e2208d36486bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca83f1ab84f43bb3f7345baf84719eb2da4644b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+xj7CRBK7hj4Ov3rIwAACTsIAHEmg2Y6ytiD/lXrGBQdDEeq\nFkVKA0dINbhzKE2N6p2PHL3MIn6JUrljT8oxPsalqdJ1CNnRUmmBOqk7LU+zMfcI\nDr/R+yz1CwfZseY3yz23RM+knGS+XBB2/MbWRF9UBTW5aLdd5x551pfs4RdSPWp3\nFadpf7XimnzQJj5OohX3kKJTulZ1KeP0IuZwRlSjdKdZnK8/YEVosU9/NENjj2Xf\npVtNq8tAeYJL96eRKyJAGKwyYdmC6igfBG6/NLCVc/NVKU+cfheAF39wP10UwnRa\n1bJgUIz9PkJ7EDV6JdTqA5zfCC+LWPvsvONvYlPAmVfHdFo3iYL312e+ittYMXc=\n=q0xZ\n-----END PGP SIGNATURE-----\n", "payload": "tree ee22e2952c7ddf0925ab053eb6e2208d36486bc5\nparent ba869da8891627c78ef0f328d737e971c36da89e\nparent 24254d693b0f4d55c57c3e9a7df4cb8795d2d9d2\nauthor Yuki Okushi <jtitor@2k36.org> 1627068666 +0900\ncommitter GitHub <noreply@github.com> 1627068666 +0900\n\nRollup merge of #87191 - adamgemmell:dev/llvm-lib-package, r=Mark-Simulacrum\n\nPackage LLVM libs for the target rather than the build host\n\nFixes https://github.com/rust-lang/rust/issues/85250\n\n`dist.rs` uses, in the `rust-dev` stage, `llvm-config --libfiles` to get a list of the LLVM library files built but of course only for the build host. If the target differs we want to package lib files from the target's build tree instead. This is done by splitting/rejoining the paths on their build directories.\n\nAt the moment `tree` on the LLVM build directories seems to give almost identical output, but of course this might not be the case in the future. If a file is missing in the target's build tree then this stage will error in the `builder.install()` call. If the target build tree has an extra file then it silently won't be copied and we'll get a linker error when building using this artifact (via `download-ci-llvm = \"if-available\"`), though we would have received a linker error anyway without this change.\n\nThere was also a typo in the example config around this option.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca83f1ab84f43bb3f7345baf84719eb2da4644b", "html_url": "https://github.com/rust-lang/rust/commit/aca83f1ab84f43bb3f7345baf84719eb2da4644b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca83f1ab84f43bb3f7345baf84719eb2da4644b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba869da8891627c78ef0f328d737e971c36da89e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba869da8891627c78ef0f328d737e971c36da89e", "html_url": "https://github.com/rust-lang/rust/commit/ba869da8891627c78ef0f328d737e971c36da89e"}, {"sha": "24254d693b0f4d55c57c3e9a7df4cb8795d2d9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/24254d693b0f4d55c57c3e9a7df4cb8795d2d9d2", "html_url": "https://github.com/rust-lang/rust/commit/24254d693b0f4d55c57c3e9a7df4cb8795d2d9d2"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "775133f2ab3194f96dce98c507447f8617149542", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca83f1ab84f43bb3f7345baf84719eb2da4644b/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/aca83f1ab84f43bb3f7345baf84719eb2da4644b/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=aca83f1ab84f43bb3f7345baf84719eb2da4644b", "patch": "@@ -38,7 +38,7 @@ changelog-seen = 2\n # This is false by default so that distributions don't unexpectedly download\n # LLVM from the internet.\n #\n-# All tier 1 targets are currently supported; set this to `\"if-supported\"` if\n+# All tier 1 targets are currently supported; set this to `\"if-available\"` if\n # you are not sure whether you're on a tier 1 target.\n #\n # We also currently only support this when building LLVM for the build triple."}, {"sha": "c37763243c0a55ab118318e3f8506f6decbcb568", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aca83f1ab84f43bb3f7345baf84719eb2da4644b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca83f1ab84f43bb3f7345baf84719eb2da4644b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=aca83f1ab84f43bb3f7345baf84719eb2da4644b", "patch": "@@ -1955,8 +1955,16 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n         cmd.arg(\"--libfiles\");\n         builder.verbose(&format!(\"running {:?}\", cmd));\n         let files = output(&mut cmd);\n+        let build_llvm_out = &builder.llvm_out(builder.config.build);\n+        let target_llvm_out = &builder.llvm_out(target);\n         for file in files.trim_end().split(' ') {\n-            builder.install(Path::new(file), dst_libdir, 0o644);\n+            // If we're not using a custom LLVM, make sure we package for the target.\n+            let file = if let Ok(relative_path) = Path::new(file).strip_prefix(build_llvm_out) {\n+                target_llvm_out.join(relative_path)\n+            } else {\n+                PathBuf::from(file)\n+            };\n+            builder.install(&file, dst_libdir, 0o644);\n         }\n         !builder.config.dry_run\n     } else {"}]}