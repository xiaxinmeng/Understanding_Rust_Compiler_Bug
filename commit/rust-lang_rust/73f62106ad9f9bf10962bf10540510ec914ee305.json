{"sha": "73f62106ad9f9bf10962bf10540510ec914ee305", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZjYyMTA2YWQ5ZjliZjEwOTYyYmYxMDU0MDUxMGVjOTE0ZWUzMDU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T10:03:04Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-21T09:13:19Z"}, "message": "rustc: move TypeParamDef's fields into GenericParamDefKind::Type.", "tree": {"sha": "85f3be35955b2352b319242e695f0ea8b1d63699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85f3be35955b2352b319242e695f0ea8b1d63699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73f62106ad9f9bf10962bf10540510ec914ee305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73f62106ad9f9bf10962bf10540510ec914ee305", "html_url": "https://github.com/rust-lang/rust/commit/73f62106ad9f9bf10962bf10540510ec914ee305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73f62106ad9f9bf10962bf10540510ec914ee305/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2c5c52881c1d7f3b679dfe7322105a71be2431", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2c5c52881c1d7f3b679dfe7322105a71be2431", "html_url": "https://github.com/rust-lang/rust/commit/ba2c5c52881c1d7f3b679dfe7322105a71be2431"}], "stats": {"total": 185, "additions": 94, "deletions": 91}, "files": [{"sha": "edd9f0fab519ddd4b201ee61ceeae866372e6695", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -739,8 +739,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n             ref parent_count,\n             ref params,\n \n-            // Reverse map to each `TypeParamDef`'s `index` field, from\n-            // `def_id.index` (`def_id.krate` is the same as the item's).\n+            // Reverse map to each param's `index` field, from its `def_id`.\n             param_def_id_to_index: _, // Don't hash this\n             has_self,\n             has_late_bound_regions,\n@@ -754,11 +753,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n     }\n }\n \n-impl_stable_hash_for!(enum ty::GenericParamDefKind {\n-    Lifetime,\n-    Type(ty)\n-});\n-\n impl_stable_hash_for!(struct ty::GenericParamDef {\n     name,\n     def_id,\n@@ -767,11 +761,25 @@ impl_stable_hash_for!(struct ty::GenericParamDef {\n     kind\n });\n \n-impl_stable_hash_for!(struct ty::TypeParamDef {\n-    has_default,\n-    object_lifetime_default,\n-    synthetic\n-});\n+impl<'a> HashStable<StableHashingContext<'a>> for ty::GenericParamDefKind {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+        match *self {\n+            ty::GenericParamDefKind::Lifetime => {}\n+            ty::GenericParamDefKind::Type {\n+                has_default,\n+                ref object_lifetime_default,\n+                ref synthetic,\n+            } => {\n+                has_default.hash_stable(hcx, hasher);\n+                object_lifetime_default.hash_stable(hcx, hasher);\n+                synthetic.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}\n \n impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>>\n for ::middle::resolve_lifetime::Set1<T>"}, {"sha": "6b31f869ef9b30796ceb1c091d9406326614e73f", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -915,7 +915,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // region parameter definition.\n                 self.next_region_var(EarlyBoundRegion(span, param.name)).into()\n             }\n-            GenericParamDefKind::Type(_) => {\n+            GenericParamDefKind::Type {..} => {\n                 // Create a type inference variable for the given\n                 // type parameter definition. The substitutions are\n                 // for actual parameters that may be referred to by"}, {"sha": "5f150ba1e2d6f805f0a4b703efce9ec1fc875f02", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -1658,18 +1658,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 self.xcrate_object_lifetime_defaults\n                     .entry(def_id)\n                     .or_insert_with(|| {\n-                        tcx.generics_of(def_id)\n-                            .params\n-                            .iter()\n-                            .filter_map(|param| {\n-                                match param.kind {\n-                                    GenericParamDefKind::Type(ty) => {\n-                                        Some(ty.object_lifetime_default)\n-                                    }\n-                                    GenericParamDefKind::Lifetime => None,\n+                        tcx.generics_of(def_id).params.iter().filter_map(|param| {\n+                            match param.kind {\n+                                GenericParamDefKind::Type { object_lifetime_default, .. } => {\n+                                    Some(object_lifetime_default)\n                                 }\n-                            })\n-                            .collect()\n+                                GenericParamDefKind::Lifetime => None,\n+                            }\n+                        }).collect()\n                     })\n             };\n             unsubst"}, {"sha": "49aee8bcd01fe1e916a3bd011e0cb1519ac7e994", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         for param in generics.params.iter() {\n             let value = match param.kind {\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     trait_ref.substs[param.index as usize].to_string()\n                 },\n                 GenericParamDefKind::Lifetime => continue,"}, {"sha": "d846b23d20da772ac6a029b565b26d85825caaee", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -838,7 +838,7 @@ fn vtable_methods<'a, 'tcx>(\n                     Substs::for_item(tcx, def_id, |param, _| {\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                            GenericParamDefKind::Type(_) => {\n+                            GenericParamDefKind::Type {..} => {\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         }"}, {"sha": "0550cf7c6d2c040a561b6580e9e6a7dd2e9eeb80", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let generics = tcx.generics_of(trait_ref.def_id);\n         let generic_map = generics.params.iter().filter_map(|param| {\n             let value = match param.kind {\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     trait_ref.substs[param.index as usize].to_string()\n                 },\n                 GenericParamDefKind::Lifetime => return None"}, {"sha": "a3d380c3e146f90f8029281f112ec848acdaa4af", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -2329,11 +2329,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let substs = Substs::for_item(self, def_id, |param, substs| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => bug!(),\n-                GenericParamDefKind::Type(ty_param) => {\n+                GenericParamDefKind::Type { has_default, .. } => {\n                     if param.index == 0 {\n                         ty.into()\n                     } else {\n-                        assert!(ty_param.has_default);\n+                        assert!(has_default);\n                         self.type_of(param.def_id).subst(self, substs).into()\n                     }\n                 }\n@@ -2477,7 +2477,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             GenericParamDefKind::Lifetime => {\n                 self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n             }\n-            GenericParamDefKind::Type(_) => self.mk_ty_param(param.index, param.name).into(),\n+            GenericParamDefKind::Type {..} => self.mk_ty_param(param.index, param.name).into(),\n         }\n     }\n "}, {"sha": "1726ed27d14d6f49b356816e918cc5a0a0de4aa0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -714,13 +714,6 @@ pub enum IntVarValue {\n #[derive(Clone, Copy, PartialEq, Eq)]\n pub struct FloatVarValue(pub ast::FloatTy);\n \n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct TypeParamDef {\n-    pub has_default: bool,\n-    pub object_lifetime_default: ObjectLifetimeDefault,\n-    pub synthetic: Option<hir::SyntheticTyParamKind>,\n-}\n-\n impl ty::EarlyBoundRegion {\n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n         ty::BoundRegion::BrNamed(self.def_id, self.name)\n@@ -730,7 +723,11 @@ impl ty::EarlyBoundRegion {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum GenericParamDefKind {\n     Lifetime,\n-    Type(TypeParamDef),\n+    Type {\n+        has_default: bool,\n+        object_lifetime_default: ObjectLifetimeDefault,\n+        synthetic: Option<hir::SyntheticTyParamKind>,\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n@@ -811,7 +808,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         for param in &self.params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,\n-                GenericParamDefKind::Type(_) => own_counts.types += 1,\n+                GenericParamDefKind::Type {..} => own_counts.types += 1,\n             };\n         }\n \n@@ -821,7 +818,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         for param in &self.params {\n             match param.kind {\n-                GenericParamDefKind::Type(_) => return true,\n+                GenericParamDefKind::Type {..} => return true,\n                 GenericParamDefKind::Lifetime => {}\n             }\n         }\n@@ -850,15 +847,15 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }\n     }\n \n-    /// Returns the `TypeParamDef` associated with this `ParamTy`.\n+    /// Returns the `GenericParamDef` associated with this `ParamTy`.\n     pub fn type_param(&'tcx self,\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                       -> &'tcx GenericParamDef {\n         if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n             match param.kind {\n-                ty::GenericParamDefKind::Type(_) => param,\n+                ty::GenericParamDefKind::Type {..} => param,\n                 _ => bug!(\"expected type parameter, but found another generic parameter\")\n             }\n         } else {"}, {"sha": "e3db4972edc78ab0f4764b568d05653a54f3d1b3", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         Substs::for_item(self, item_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.types.re_erased.into(),\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     bug!(\"empty_substs_for_def_id: {:?} has type parameters\", item_def_id)\n                 }\n             }"}, {"sha": "82afce415a76124a5a87a7543446da9c5f17c998", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -337,7 +337,9 @@ impl PrintContext {\n                 let mut type_params =\n                     generics.params.iter().rev().filter_map(|param| {\n                         match param.kind {\n-                            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.has_default)),\n+                            GenericParamDefKind::Type { has_default, .. } => {\n+                                Some((param.def_id, has_default))\n+                            }\n                             GenericParamDefKind::Lifetime => None,\n                         }\n                     }).peekable();\n@@ -604,7 +606,7 @@ impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let type_name = match self.kind {\n             ty::GenericParamDefKind::Lifetime => \"Lifetime\",\n-            ty::GenericParamDefKind::Type(_) => \"Type\",\n+            ty::GenericParamDefKind::Type {..} => \"Type\",\n         };\n         write!(f, \"{}({}, {:?}, {})\",\n                type_name,"}, {"sha": "148b12cdc31247ccf821be0f3e75153261bf0651", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -1115,7 +1115,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     let substs = Substs::for_item(tcx, method.def_id, |param, _| {\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                            GenericParamDefKind::Type(_) => {\n+                            GenericParamDefKind::Type {..} => {\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         }"}, {"sha": "8375a5fb334072c0758cadff419ea285b9727319", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let substs = Substs::for_item(tcx, self.def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                GenericParamDefKind::Type(_) => ty.into(),\n+                GenericParamDefKind::Type {..} => ty.into(),\n             }\n         });\n "}, {"sha": "2e887e3d8f097b430bb160a9da6231d2ac376dc1", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -401,8 +401,8 @@ impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.ev.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n-                GenericParamDefKind::Type(ty) => {\n-                    if ty.has_default {\n+                GenericParamDefKind::Type { has_default, .. } => {\n+                    if has_default {\n                         self.ev.tcx.type_of(param.def_id).visit_with(self);\n                     }\n                 }\n@@ -1342,8 +1342,8 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n-                GenericParamDefKind::Type(ty) => {\n-                    if ty.has_default {\n+                GenericParamDefKind::Type { has_default, .. } => {\n+                    if has_default {\n                         self.tcx.type_of(param.def_id).visit_with(self);\n                     }\n                 }"}, {"sha": "f2fe8b1d891d9f6d43188a2b97357d5ec014eb42", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -224,9 +224,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 GenericParamDefKind::Lifetime => {\n                     lt_accepted += 1;\n                 }\n-                GenericParamDefKind::Type(ty) => {\n+                GenericParamDefKind::Type { has_default, .. } => {\n                     ty_params.accepted += 1;\n-                    if !ty.has_default {\n+                    if !has_default {\n                         ty_params.required += 1;\n                     }\n                 }\n@@ -251,8 +251,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n         let default_needs_object_self = |param: &ty::GenericParamDef| {\n-            if let GenericParamDefKind::Type(ty) = param.kind {\n-                if is_object && ty.has_default {\n+            if let GenericParamDefKind::Type { has_default, .. } = param.kind {\n+                if is_object && has_default {\n                     if tcx.at(span).type_of(param.def_id).has_self_ty() {\n                         // There is no suitable inference default for a type parameter\n                         // that references self, in an object type.\n@@ -275,7 +275,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         tcx.types.re_static.into()\n                     }\n                 }\n-                GenericParamDefKind::Type(ty) => {\n+                GenericParamDefKind::Type { has_default, .. } => {\n                     let i = param.index as usize;\n \n                     // Handle Self first, so we can adjust the index to match the AST.\n@@ -294,7 +294,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         } else {\n                             self.ty_infer(span).into()\n                         }\n-                    } else if ty.has_default {\n+                    } else if has_default {\n                         // No type parameter provided, but a default exists.\n \n                         // If we are converting an object type, then the"}, {"sha": "a7cdcae9c0788a63577720163b71590823f6eef6", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 GenericParamDefKind::Lifetime => {\n                     span_bug!(expr.span, \"closure has region param\")\n                 }\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     self.infcx\n                         .next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span)).into()\n                 }"}, {"sha": "f386b7e07c1cd79cdbcca17a7168162b39222b80", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -730,13 +730,13 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n-            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.synthetic)),\n+            GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n             GenericParamDefKind::Lifetime => None,\n         }\n     });\n     let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n-            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.synthetic)),\n+            GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n             GenericParamDefKind::Lifetime => None,\n         }\n     });"}, {"sha": "7d9f2e094e1af6240fad364d0c745e541a643314", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                                 self.fcx, lifetime, Some(param)).into();\n                         }\n                     }\n-                    GenericParamDefKind::Type(_) => {\n+                    GenericParamDefKind::Type {..} => {\n                         if let Some(ast_ty) = provided.as_ref().and_then(|p| {\n                             p.types.get(i - parent_substs.len() - own_counts.lifetimes)\n                         }) {"}, {"sha": "8ffb6e99fc04ef6a6c69531ab0f5d2473b9c5ea5", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let substs = Substs::for_item(self.tcx, trait_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {}\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     if param.index == 0 {\n                         return self_ty.into();\n                     } else if let Some(ref input_types) = opt_input_types {"}, {"sha": "6cdfb0bccc98642c3a7d509d40b74bdf04c42dfb", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -1399,7 +1399,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                             // `impl_self_ty()` for an explanation.\n                             self.tcx.types.re_erased.into()\n                         }\n-                        GenericParamDefKind::Type(_) => self.var_for_def(self.span, param),\n+                        GenericParamDefKind::Type {..} => self.var_for_def(self.span, param),\n                     }\n                 }\n             });\n@@ -1416,7 +1416,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         Substs::for_item(self.tcx, def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.tcx.types.re_erased.into(),\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     self.next_ty_var(TypeVariableOrigin::SubstitutionPlaceholder(\n                         self.tcx.def_span(def_id))).into()\n                 }"}, {"sha": "46dbccaa137eae0c49e37185f8bf19b041552327", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -4751,7 +4751,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let mut i = param.index as usize;\n \n             let segment = if i < fn_start {\n-                if let GenericParamDefKind::Type(_) = param.kind {\n+                if let GenericParamDefKind::Type {..} = param.kind {\n                     // Handle Self first, so we can adjust the index to match the AST.\n                     if has_self && i == 0 {\n                         return opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n@@ -4778,7 +4778,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         self.re_infer(span, Some(param)).unwrap().into()\n                     }\n                 }\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     let (types, infer_types) = segment.map_or((&[][..], true), |(s, _)| {\n                         (s.parameters.as_ref().map_or(&[][..], |p| &p.types[..]), s.infer_types)\n                     });\n@@ -4789,7 +4789,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n \n                     let has_default = match param.kind {\n-                        GenericParamDefKind::Type(ty) => ty.has_default,\n+                        GenericParamDefKind::Type { has_default, .. } => has_default,\n                         _ => unreachable!()\n                     };\n \n@@ -4925,9 +4925,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         GenericParamDefKind::Lifetime => {\n                             lt_accepted += 1;\n                         }\n-                        GenericParamDefKind::Type(ty) => {\n+                        GenericParamDefKind::Type { has_default, .. } => {\n                             ty_params.accepted += 1;\n-                            if !ty.has_default {\n+                            if !has_default {\n                                 ty_params.required += 1;\n                             }\n                         }\n@@ -5024,12 +5024,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let segment = segment.map(|(path_segment, generics)| {\n             let explicit = !path_segment.infer_types;\n             let impl_trait = generics.params.iter().any(|param| {\n-                if let ty::GenericParamDefKind::Type(ty) = param.kind {\n-                    if let Some(hir::SyntheticTyParamKind::ImplTrait) = ty.synthetic {\n-                        return true;\n-                    }\n+                match param.kind {\n+                    ty::GenericParamDefKind::Type {\n+                        synthetic: Some(hir::SyntheticTyParamKind::ImplTrait), ..\n+                    } => true,\n+                    _ => false,\n                 }\n-                false\n             });\n \n             if explicit && impl_trait {"}, {"sha": "4b4b982b1be411dbb5d2fef2bb0b522ae0855439", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -377,8 +377,8 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     let generics = tcx.generics_of(def_id);\n     let is_our_default = |def: &ty::GenericParamDef| {\n         match def.kind {\n-            GenericParamDefKind::Type(ty) => {\n-                ty.has_default && def.index >= generics.parent_count as u32\n+            GenericParamDefKind::Type { has_default, .. } => {\n+                has_default && def.index >= generics.parent_count as u32\n             }\n             _ => unreachable!()\n         }\n@@ -389,7 +389,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     // struct Foo<T = Vec<[u32]>> { .. }\n     // Here the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n     for param in &generics.params {\n-        if let GenericParamDefKind::Type(_) = param.kind {\n+        if let GenericParamDefKind::Type {..} = param.kind {\n             if is_our_default(&param) {\n                 let ty = fcx.tcx.type_of(param.def_id);\n                 // ignore dependent defaults -- that is, where the default of one type\n@@ -417,7 +417,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                 // All regions are identity.\n                 fcx.tcx.mk_param_from_def(param)\n             }\n-            GenericParamDefKind::Type(_) => {\n+            GenericParamDefKind::Type {..} => {\n                 // If the param has a default,\n                 if is_our_default(param) {\n                     let default_ty = fcx.tcx.type_of(param.def_id);\n@@ -668,7 +668,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n                      .flat_map(|param| {\n                          match param.kind {\n                              GenericParamDefKind::Lifetime => None,\n-                             GenericParamDefKind::Type(_) => Some((param.name, param.def_id)),\n+                             GenericParamDefKind::Type {..} => Some((param.name, param.def_id)),\n                          }\n                      })\n                      .collect();"}, {"sha": "d0d147b8e85cd0f4efdfb935865f9b43793aab63", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -845,11 +845,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         name: keywords::SelfType.name().as_interned_str(),\n                         def_id: tcx.hir.local_def_id(param_id),\n                         pure_wrt_drop: false,\n-                        kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                        kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n                             object_lifetime_default: rl::Set1::Empty,\n                             synthetic: None,\n-                        }),\n+                        },\n                     });\n \n                     allow_defaults = true;\n@@ -925,12 +925,12 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             name: p.name.as_interned_str(),\n             def_id: tcx.hir.local_def_id(p.id),\n             pure_wrt_drop: p.pure_wrt_drop,\n-            kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+            kind: ty::GenericParamDefKind::Type {\n                 has_default: p.default.is_some(),\n                 object_lifetime_default:\n                     object_lifetime_defaults.as_ref().map_or(rl::Set1::Empty, |o| o[i]),\n                 synthetic: p.synthetic,\n-            }),\n+            },\n         }\n     }));\n \n@@ -950,11 +950,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 name: Symbol::intern(arg).as_interned_str(),\n                 def_id,\n                 pure_wrt_drop: false,\n-                kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                kind: ty::GenericParamDefKind::Type {\n                     has_default: false,\n                     object_lifetime_default: rl::Set1::Empty,\n                     synthetic: None,\n-                }),\n+                },\n             });\n         }\n \n@@ -965,11 +965,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     name: Symbol::intern(\"<upvar>\").as_interned_str(),\n                     def_id,\n                     pure_wrt_drop: false,\n-                    kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                    kind: ty::GenericParamDefKind::Type {\n                         has_default: false,\n                         object_lifetime_default: rl::Set1::Empty,\n                         synthetic: None,\n-                    }),\n+                    },\n                 }\n             }));\n         });"}, {"sha": "7b7cb2549797878ecc0da1335de9c3814b56fd08", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -116,7 +116,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for param in &impl_generics.params {\n         match param.kind {\n             // Disallow ANY unconstrained type parameters.\n-            ty::GenericParamDefKind::Type(_) => {\n+            ty::GenericParamDefKind::Type {..} => {\n                 let param_ty = ty::ParamTy::for_def(param);\n                 if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n                     report_unused_parameter(tcx,"}, {"sha": "da749fca2a953524f619a2ea94286a97acd2f0c9", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         name,\n                     });\n                 }\n-                ty::GenericParamDefKind::Type(_) => {\n+                ty::GenericParamDefKind::Type {..} => {\n                     types.push(P(self.ty_param_to_ty(param.clone())));\n                 }\n             }"}, {"sha": "d4c1ba63a8c9806c6b9e5c61389f1e935fbb3583", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73f62106ad9f9bf10962bf10540510ec914ee305/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=73f62106ad9f9bf10962bf10540510ec914ee305", "patch": "@@ -1340,7 +1340,7 @@ impl<'tcx> Clean<TyParam> for ty::GenericParamDef {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.renderinfo.borrow_mut().external_typarams.insert(self.def_id, self.name.clean(cx));\n         let has_default = match self.kind {\n-            ty::GenericParamDefKind::Type(ty) => ty.has_default,\n+            ty::GenericParamDefKind::Type { has_default, .. } => has_default,\n             _ => panic!(\"tried to convert a non-type GenericParamDef as a type\")\n         };\n         TyParam {\n@@ -1827,7 +1827,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n         let stripped_typarams = gens.params.iter().filter_map(|param| {\n-            if let ty::GenericParamDefKind::Type(_) = param.kind {\n+            if let ty::GenericParamDefKind::Type {..} = param.kind {\n                 if param.name == keywords::SelfType.name().as_str() {\n                     assert_eq!(param.index, 0);\n                     None"}]}