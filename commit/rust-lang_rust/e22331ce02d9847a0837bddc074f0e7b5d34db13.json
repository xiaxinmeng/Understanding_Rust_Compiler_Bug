{"sha": "e22331ce02d9847a0837bddc074f0e7b5d34db13", "node_id": "C_kwDOAAsO6NoAKGUyMjMzMWNlMDJkOTg0N2EwODM3YmRkYzA3NGYwZTdiNWQzNGRiMTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-08T10:04:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-08T10:04:50Z"}, "message": "Rollup merge of #92385 - clarfonthey:const_option, r=fee1-dead\n\nAdd Result::{ok, err, and, or, unwrap_or} as const\n\nAlready opened tracking issue #92384.\n\nI don't think that this should actually cause any issues as long as the constness is unstable, but we may want to double-check that this doesn't get interpreted as a weird `Drop` bound even for non-const usages.", "tree": {"sha": "6456bd8bcae7cd61ed1dbec6131ebffe4ab4d4d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6456bd8bcae7cd61ed1dbec6131ebffe4ab4d4d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22331ce02d9847a0837bddc074f0e7b5d34db13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJypCCRBK7hj4Ov3rIwAAIJQIAKhovRU3xrGUi9TNHpVuPicZ\n5I4aw/RM3yg/R0U2ejXhY6JjMbkcYRFN7fr593Ze+L/K1/scOwIX76uLqh0QDpMi\niFiTMafJKCmEDB1zkjOxedfllWurVyIpFZEiCuaOrrnXTPQBgBuOky05+JdKfhV6\njHcODAdto8I2bIRL3t11u+2SnLxPflXqHD3olSg53GMdqah275i3J8fIlsk7yXhs\n+1yxiAi+zoJ0xc9sEwxtX6ADRKaN0cdSLEq/TIcjUYxGPd3aMWMUMbf7nwwhEMvN\nnbdr2O4Ze6aqk/IGrIQTFb8D69mCnKdzjT7xi7X8afy2KBM27ebkR1ZhustGbbA=\n=ksLd\n-----END PGP SIGNATURE-----\n", "payload": "tree 6456bd8bcae7cd61ed1dbec6131ebffe4ab4d4d9\nparent e3ea69f0ce8f833858340d2735b6f763a6ee76bf\nparent 19645ac05a3e5cd4e508e9819f4939fc2f959b5b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646733890 +0100\ncommitter GitHub <noreply@github.com> 1646733890 +0100\n\nRollup merge of #92385 - clarfonthey:const_option, r=fee1-dead\n\nAdd Result::{ok, err, and, or, unwrap_or} as const\n\nAlready opened tracking issue #92384.\n\nI don't think that this should actually cause any issues as long as the constness is unstable, but we may want to double-check that this doesn't get interpreted as a weird `Drop` bound even for non-const usages.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22331ce02d9847a0837bddc074f0e7b5d34db13", "html_url": "https://github.com/rust-lang/rust/commit/e22331ce02d9847a0837bddc074f0e7b5d34db13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22331ce02d9847a0837bddc074f0e7b5d34db13/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ea69f0ce8f833858340d2735b6f763a6ee76bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ea69f0ce8f833858340d2735b6f763a6ee76bf", "html_url": "https://github.com/rust-lang/rust/commit/e3ea69f0ce8f833858340d2735b6f763a6ee76bf"}, {"sha": "19645ac05a3e5cd4e508e9819f4939fc2f959b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/19645ac05a3e5cd4e508e9819f4939fc2f959b5b", "html_url": "https://github.com/rust-lang/rust/commit/19645ac05a3e5cd4e508e9819f4939fc2f959b5b"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "1827860a39045cba2b82b2db56fb5a3142bc8db3", "filename": "library/core/src/result.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e22331ce02d9847a0837bddc074f0e7b5d34db13/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22331ce02d9847a0837bddc074f0e7b5d34db13/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=e22331ce02d9847a0837bddc074f0e7b5d34db13", "patch": "@@ -632,10 +632,16 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ok(self) -> Option<T> {\n+    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n+    pub const fn ok(self) -> Option<T>\n+    where\n+        E: ~const Drop,\n+    {\n         match self {\n             Ok(x) => Some(x),\n-            Err(_) => None,\n+            // FIXME: ~const Drop doesn't quite work right yet\n+            #[allow(unused_variables)]\n+            Err(x) => None,\n         }\n     }\n \n@@ -657,9 +663,15 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn err(self) -> Option<E> {\n+    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n+    pub const fn err(self) -> Option<E>\n+    where\n+        T: ~const Drop,\n+    {\n         match self {\n-            Ok(_) => None,\n+            // FIXME: ~const Drop doesn't quite work right yet\n+            #[allow(unused_variables)]\n+            Ok(x) => None,\n             Err(x) => Some(x),\n         }\n     }\n@@ -1266,10 +1278,18 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.and(y), Ok(\"different result type\"));\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn and<U>(self, res: Result<U, E>) -> Result<U, E> {\n+    pub const fn and<U>(self, res: Result<U, E>) -> Result<U, E>\n+    where\n+        T: ~const Drop,\n+        U: ~const Drop,\n+        E: ~const Drop,\n+    {\n         match self {\n-            Ok(_) => res,\n+            // FIXME: ~const Drop doesn't quite work right yet\n+            #[allow(unused_variables)]\n+            Ok(x) => res,\n             Err(e) => Err(e),\n         }\n     }\n@@ -1343,11 +1363,19 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.or(y), Ok(2));\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn or<F>(self, res: Result<T, F>) -> Result<T, F> {\n+    pub const fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n+    where\n+        T: ~const Drop,\n+        E: ~const Drop,\n+        F: ~const Drop,\n+    {\n         match self {\n             Ok(v) => Ok(v),\n-            Err(_) => res,\n+            // FIXME: ~const Drop doesn't quite work right yet\n+            #[allow(unused_variables)]\n+            Err(e) => res,\n         }\n     }\n \n@@ -1399,11 +1427,18 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.unwrap_or(default), default);\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_or(self, default: T) -> T {\n+    pub const fn unwrap_or(self, default: T) -> T\n+    where\n+        T: ~const Drop,\n+        E: ~const Drop,\n+    {\n         match self {\n             Ok(t) => t,\n-            Err(_) => default,\n+            // FIXME: ~const Drop doesn't quite work right yet\n+            #[allow(unused_variables)]\n+            Err(e) => default,\n         }\n     }\n "}]}