{"sha": "a70a0ca73ceac339de4e1df6d561894e485ba5ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MGEwY2E3M2NlYWMzMzlkZTRlMWRmNmQ1NjE4OTRlNDg1YmE1ZWU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-09T16:48:44Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-10T10:38:58Z"}, "message": "ImportsLocator: use ImportMap for non-local crates", "tree": {"sha": "22f5a8f1f126354aacba70bea41599b4a5d6268c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22f5a8f1f126354aacba70bea41599b4a5d6268c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a70a0ca73ceac339de4e1df6d561894e485ba5ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a70a0ca73ceac339de4e1df6d561894e485ba5ee", "html_url": "https://github.com/rust-lang/rust/commit/a70a0ca73ceac339de4e1df6d561894e485ba5ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a70a0ca73ceac339de4e1df6d561894e485ba5ee/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01fb22494eaf64c02c17fc38598a3a2dbd8e980", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01fb22494eaf64c02c17fc38598a3a2dbd8e980", "html_url": "https://github.com/rust-lang/rust/commit/b01fb22494eaf64c02c17fc38598a3a2dbd8e980"}], "stats": {"total": 93, "additions": 70, "deletions": 23}, "files": [{"sha": "1f4142747328738af66230ae65bff7f465224fa1", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a70a0ca73ceac339de4e1df6d561894e485ba5ee/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70a0ca73ceac339de4e1df6d561894e485ba5ee/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=a70a0ca73ceac339de4e1df6d561894e485ba5ee", "patch": "@@ -130,7 +130,7 @@ impl AutoImportAssets {\n     fn search_for_imports(&self, db: &RootDatabase) -> BTreeSet<ModPath> {\n         let _p = profile(\"auto_import::search_for_imports\");\n         let current_crate = self.module_with_name_to_import.krate();\n-        ImportsLocator::new(db)\n+        ImportsLocator::new(db, current_crate)\n             .find_imports(&self.get_search_query())\n             .into_iter()\n             .filter_map(|candidate| match &self.import_candidate {\n@@ -841,4 +841,49 @@ fn main() {\n             \",\n         )\n     }\n+\n+    #[test]\n+    fn dep_import() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+                    //- /lib.rs crate:dep\n+                    pub struct Struct;\n+\n+                    //- /main.rs crate:main deps:dep\n+                    fn main() {\n+                        Struct<|>\n+                    }\",\n+            r\"use dep::Struct;\n+\n+fn main() {\n+    Struct\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn whole_segment() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+                    //- /lib.rs crate:dep\n+                    pub mod fmt {\n+                        pub trait Display {}\n+                    }\n+\n+                    pub fn panic_fmt() {}\n+\n+                    //- /main.rs crate:main deps:dep\n+                    struct S;\n+\n+                    impl f<|>mt::Display for S {}\",\n+            r\"use dep::fmt;\n+\n+struct S;\n+impl fmt::Display for S {}\n+\",\n+        );\n+    }\n }"}, {"sha": "fff112e661034c3ffda72a122639422c899343b6", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a70a0ca73ceac339de4e1df6d561894e485ba5ee/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70a0ca73ceac339de4e1df6d561894e485ba5ee/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=a70a0ca73ceac339de4e1df6d561894e485ba5ee", "patch": "@@ -1,7 +1,7 @@\n //! This module contains an import search funcionality that is provided to the ra_assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n-use hir::{MacroDef, ModuleDef, Semantics};\n+use hir::{Crate, MacroDef, ModuleDef, Semantics};\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n@@ -11,44 +11,46 @@ use crate::{\n     RootDatabase,\n };\n use either::Either;\n+use rustc_hash::FxHashSet;\n \n pub struct ImportsLocator<'a> {\n     sema: Semantics<'a, RootDatabase>,\n+    krate: Crate,\n }\n \n impl<'a> ImportsLocator<'a> {\n-    pub fn new(db: &'a RootDatabase) -> Self {\n-        Self { sema: Semantics::new(db) }\n+    pub fn new(db: &'a RootDatabase, krate: Crate) -> Self {\n+        Self { sema: Semantics::new(db), krate }\n     }\n \n     pub fn find_imports(&mut self, name_to_import: &str) -> Vec<Either<ModuleDef, MacroDef>> {\n         let _p = profile(\"search_for_imports\");\n         let db = self.sema.db;\n \n-        let project_results = {\n-            let mut query = Query::new(name_to_import.to_string());\n-            query.exact();\n-            query.limit(40);\n-            symbol_index::world_symbols(db, query)\n-        };\n-        let lib_results = {\n+        // Query dependencies first.\n+        let mut candidates: FxHashSet<_> =\n+            self.krate.query_external_importables(db, name_to_import).collect();\n+\n+        // Query the local crate using the symbol index.\n+        let local_results = {\n             let mut query = Query::new(name_to_import.to_string());\n-            query.libs();\n             query.exact();\n             query.limit(40);\n-            symbol_index::world_symbols(db, query)\n+            symbol_index::crate_symbols(db, self.krate.into(), query)\n         };\n \n-        project_results\n-            .into_iter()\n-            .chain(lib_results.into_iter())\n-            .filter_map(|import_candidate| self.get_name_definition(&import_candidate))\n-            .filter_map(|name_definition_to_import| match name_definition_to_import {\n-                Definition::ModuleDef(module_def) => Some(Either::Left(module_def)),\n-                Definition::Macro(macro_def) => Some(Either::Right(macro_def)),\n-                _ => None,\n-            })\n-            .collect()\n+        candidates.extend(\n+            local_results\n+                .into_iter()\n+                .filter_map(|import_candidate| self.get_name_definition(&import_candidate))\n+                .filter_map(|name_definition_to_import| match name_definition_to_import {\n+                    Definition::ModuleDef(module_def) => Some(Either::Left(module_def)),\n+                    Definition::Macro(macro_def) => Some(Either::Right(macro_def)),\n+                    _ => None,\n+                }),\n+        );\n+\n+        candidates.into_iter().collect()\n     }\n \n     fn get_name_definition(&mut self, import_candidate: &FileSymbol) -> Option<Definition> {"}]}