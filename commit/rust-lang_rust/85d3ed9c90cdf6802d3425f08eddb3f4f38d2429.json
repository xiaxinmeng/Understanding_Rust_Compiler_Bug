{"sha": "85d3ed9c90cdf6802d3425f08eddb3f4f38d2429", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZDNlZDljOTBjZGY2ODAyZDM0MjVmMDhlZGRiM2Y0ZjM4ZDI0Mjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T07:49:20Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract parse_path_start_ty", "tree": {"sha": "e65753a60abb2e67c097773c46313cbffa6c208f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65753a60abb2e67c097773c46313cbffa6c208f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85d3ed9c90cdf6802d3425f08eddb3f4f38d2429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85d3ed9c90cdf6802d3425f08eddb3f4f38d2429", "html_url": "https://github.com/rust-lang/rust/commit/85d3ed9c90cdf6802d3425f08eddb3f4f38d2429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85d3ed9c90cdf6802d3425f08eddb3f4f38d2429/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7071f2bc04530c055b2198efb08f2478af32c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7071f2bc04530c055b2198efb08f2478af32c19", "html_url": "https://github.com/rust-lang/rust/commit/b7071f2bc04530c055b2198efb08f2478af32c19"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "ddbb9afa02b3282baae21568a242b8d257814260", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/85d3ed9c90cdf6802d3425f08eddb3f4f38d2429/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d3ed9c90cdf6802d3425f08eddb3f4f38d2429/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=85d3ed9c90cdf6802d3425f08eddb3f4f38d2429", "patch": "@@ -121,27 +121,7 @@ impl<'a> Parser<'a> {\n             let (qself, path) = self.parse_qpath(PathStyle::Type)?;\n             TyKind::Path(Some(qself), path)\n         } else if self.token.is_path_start() {\n-            // Simple path\n-            let path = self.parse_path(PathStyle::Type)?;\n-            if self.eat(&token::Not) {\n-                // Macro invocation in type position\n-                let args = self.parse_mac_args()?;\n-                let mac = Mac {\n-                    path,\n-                    args,\n-                    prior_type_ascription: self.last_type_ascription,\n-                };\n-                TyKind::Mac(mac)\n-            } else {\n-                // Just a type path or bound list (trait object type) starting with a trait.\n-                //   `Type`\n-                //   `Trait1 + Trait2 + 'a`\n-                if allow_plus && self.check_plus() {\n-                    self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n-                } else {\n-                    TyKind::Path(None, path)\n-                }\n-            }\n+            self.parse_path_start_ty(lo, allow_plus)?\n         } else if self.eat(&token::DotDotDot) {\n             if allow_c_variadic {\n                 TyKind::CVarArgs\n@@ -330,6 +310,31 @@ impl<'a> Parser<'a> {\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn))\n     }\n \n+    /// Parses a type starting with a path.\n+    ///\n+    /// This can be:\n+    /// 1. a type macro, `mac!(...)`,\n+    /// 2. a bare trait object, `B0 + ... + Bn`,\n+    /// 3. or a path, `path::to::MyType`.\n+    fn parse_path_start_ty(&mut self, lo: Span, allow_plus: bool) -> PResult<'a, TyKind> {\n+        // Simple path\n+        let path = self.parse_path(PathStyle::Type)?;\n+        if self.eat(&token::Not) {\n+            // Macro invocation in type position\n+            Ok(TyKind::Mac(Mac {\n+                path,\n+                args: self.parse_mac_args()?,\n+                prior_type_ascription: self.last_type_ascription,\n+            }))\n+        } else if allow_plus && self.check_plus() {\n+            // `Trait1 + Trait2 + 'a`\n+            self.parse_remaining_bounds(Vec::new(), path, lo, true)\n+        } else {\n+            // Just a type path.\n+            Ok(TyKind::Path(None, path))\n+        }\n+    }\n+\n     pub(super) fn parse_generic_bounds(&mut self,\n                                   colon_span: Option<Span>) -> PResult<'a, GenericBounds> {\n         self.parse_generic_bounds_common(true, colon_span)"}]}