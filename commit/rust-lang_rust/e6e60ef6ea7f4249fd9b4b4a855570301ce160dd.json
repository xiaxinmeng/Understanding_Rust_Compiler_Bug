{"sha": "e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZTYwZWY2ZWE3ZjQyNDlmZDliNGI0YTg1NTU3MDMwMWNlMTYwZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-09T05:00:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-09T05:00:22Z"}, "message": "Auto merge of #60932 - Centril:macro-at-most-once-2015, r=mark-i-m\n\nSupport ? Kleene macro operator in 2015\n\nCloses https://github.com/rust-lang/rust/issues/56668.\n\nSee that issue for rationale and discussion.\n\nCrater will be needed (done in https://github.com/rust-lang/rust/pull/60932#issuecomment-494188577, zero regressions) and then, if all goes well, FCP (in https://github.com/rust-lang/rust/pull/60932#issuecomment-494189802).", "tree": {"sha": "336e5b0951c55cebacd0d5673413a5895ec39654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336e5b0951c55cebacd0d5673413a5895ec39654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "html_url": "https://github.com/rust-lang/rust/commit/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e13e0325c1d41161a31de1f8520538ec2c575c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e13e0325c1d41161a31de1f8520538ec2c575c", "html_url": "https://github.com/rust-lang/rust/commit/57e13e0325c1d41161a31de1f8520538ec2c575c"}, {"sha": "3ba82f7cd8f74d73ebbdcd45aefc761f518f782d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba82f7cd8f74d73ebbdcd45aefc761f518f782d", "html_url": "https://github.com/rust-lang/rust/commit/3ba82f7cd8f74d73ebbdcd45aefc761f518f782d"}], "stats": {"total": 602, "additions": 281, "deletions": 321}, "files": [{"sha": "b52e3b715056741b5e7e1435cd17c43287d06b2a", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 15, "deletions": 189, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -1,5 +1,4 @@\n use crate::ast::NodeId;\n-use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::ext::tt::macro_parser;\n use crate::feature_gate::Features;\n use crate::parse::token::{self, Token, TokenKind};\n@@ -250,19 +249,16 @@ pub fn parse(\n /// - `sess`: the parsing session. Any errors will be emitted to this session.\n /// - `features`, `attrs`: language feature flags and attributes so that we know whether to use\n ///   unstable features or not.\n-fn parse_tree<I>(\n+fn parse_tree(\n     tree: tokenstream::TokenTree,\n-    trees: &mut Peekable<I>,\n+    trees: &mut Peekable<impl Iterator<Item = tokenstream::TokenTree>>,\n     expect_matchers: bool,\n     sess: &ParseSess,\n     features: &Features,\n     attrs: &[ast::Attribute],\n     edition: Edition,\n     macro_node_id: NodeId,\n-) -> TokenTree\n-where\n-    I: Iterator<Item = tokenstream::TokenTree>,\n-{\n+) -> TokenTree {\n     // Depending on what `tree` is, we could be parsing different parts of a macro\n     match tree {\n         // `tree` is a `$` token. Look at the next token in `trees`\n@@ -287,16 +283,7 @@ where\n                     macro_node_id,\n                 );\n                 // Get the Kleene operator and optional separator\n-                let (separator, op) =\n-                    parse_sep_and_kleene_op(\n-                        trees,\n-                        span.entire(),\n-                        sess,\n-                        features,\n-                        attrs,\n-                        edition,\n-                        macro_node_id,\n-                    );\n+                let (separator, op) = parse_sep_and_kleene_op(trees, span.entire(), sess);\n                 // Count the number of captured \"names\" (i.e., named metavars)\n                 let name_captures = macro_parser::count_names(&sequence);\n                 TokenTree::Sequence(\n@@ -375,10 +362,10 @@ fn kleene_op(token: &Token) -> Option<KleeneOp> {\n /// - Ok(Ok((op, span))) if the next token tree is a KleeneOp\n /// - Ok(Err(tok, span)) if the next token tree is a token but not a KleeneOp\n /// - Err(span) if the next token tree is not a token\n-fn parse_kleene_op<I>(input: &mut I, span: Span) -> Result<Result<(KleeneOp, Span), Token>, Span>\n-where\n-    I: Iterator<Item = tokenstream::TokenTree>,\n-{\n+fn parse_kleene_op(\n+    input: &mut impl Iterator<Item = tokenstream::TokenTree>,\n+    span: Span,\n+) -> Result<Result<(KleeneOp, Span), Token>, Span> {\n     match input.next() {\n         Some(tokenstream::TokenTree::Token(token)) => match kleene_op(&token) {\n             Some(op) => Ok(Ok((op, token.span))),\n@@ -403,178 +390,20 @@ where\n /// session `sess`. If the next one (or possibly two) tokens in `input` correspond to a Kleene\n /// operator and separator, then a tuple with `(separator, KleeneOp)` is returned. Otherwise, an\n /// error with the appropriate span is emitted to `sess` and a dummy value is returned.\n-///\n-/// N.B., in the 2015 edition, `*` and `+` are the only Kleene operators, and `?` is a separator.\n-/// In the 2018 edition however, `?` is a Kleene operator, and not a separator.\n-fn parse_sep_and_kleene_op<I>(\n-    input: &mut Peekable<I>,\n-    span: Span,\n-    sess: &ParseSess,\n-    features: &Features,\n-    attrs: &[ast::Attribute],\n-    edition: Edition,\n-    macro_node_id: NodeId,\n-) -> (Option<Token>, KleeneOp)\n-where\n-    I: Iterator<Item = tokenstream::TokenTree>,\n-{\n-    match edition {\n-        Edition::Edition2015 => parse_sep_and_kleene_op_2015(\n-            input,\n-            span,\n-            sess,\n-            features,\n-            attrs,\n-            macro_node_id,\n-        ),\n-        Edition::Edition2018 => parse_sep_and_kleene_op_2018(input, span, sess, features, attrs),\n-    }\n-}\n-\n-// `?` is a separator (with a migration warning) and never a KleeneOp.\n-fn parse_sep_and_kleene_op_2015<I>(\n-    input: &mut Peekable<I>,\n-    span: Span,\n-    sess: &ParseSess,\n-    _features: &Features,\n-    _attrs: &[ast::Attribute],\n-    macro_node_id: NodeId,\n-) -> (Option<Token>, KleeneOp)\n-where\n-    I: Iterator<Item = tokenstream::TokenTree>,\n-{\n-    // We basically look at two token trees here, denoted as #1 and #2 below\n-    let span = match parse_kleene_op(input, span) {\n-        // #1 is a `+` or `*` KleeneOp\n-        //\n-        // `?` is ambiguous: it could be a separator (warning) or a Kleene::ZeroOrOne (error), so\n-        // we need to look ahead one more token to be sure.\n-        Ok(Ok((op, _))) if op != KleeneOp::ZeroOrOne => return (None, op),\n-\n-        // #1 is `?` token, but it could be a Kleene::ZeroOrOne (error in 2015) without a separator\n-        // or it could be a `?` separator followed by any Kleene operator. We need to look ahead 1\n-        // token to find out which.\n-        Ok(Ok((op, op1_span))) => {\n-            assert_eq!(op, KleeneOp::ZeroOrOne);\n-\n-            // Lookahead at #2. If it is a KleenOp, then #1 is a separator.\n-            let is_1_sep = if let Some(tokenstream::TokenTree::Token(tok2)) = input.peek() {\n-                kleene_op(tok2).is_some()\n-            } else {\n-                false\n-            };\n-\n-            if is_1_sep {\n-                // #1 is a separator and #2 should be a KleepeOp.\n-                // (N.B. We need to advance the input iterator.)\n-                match parse_kleene_op(input, span) {\n-                    // #2 is `?`, which is not allowed as a Kleene op in 2015 edition,\n-                    // but is allowed in the 2018 edition.\n-                    Ok(Ok((op, op2_span))) if op == KleeneOp::ZeroOrOne => {\n-                        sess.span_diagnostic\n-                            .struct_span_err(op2_span, \"expected `*` or `+`\")\n-                            .note(\"`?` is not a macro repetition operator in the 2015 edition, \\\n-                                 but is accepted in the 2018 edition\")\n-                            .emit();\n-\n-                        // Return a dummy\n-                        return (None, KleeneOp::ZeroOrMore);\n-                    }\n-\n-                    // #2 is a Kleene op, which is the only valid option\n-                    Ok(Ok((op, _))) => {\n-                        // Warn that `?` as a separator will be deprecated\n-                        sess.buffer_lint(\n-                            BufferedEarlyLintId::QuestionMarkMacroSep,\n-                            op1_span,\n-                            macro_node_id,\n-                            \"using `?` as a separator is deprecated and will be \\\n-                             a hard error in an upcoming edition\",\n-                        );\n-\n-                        return (Some(Token::new(token::Question, op1_span)), op);\n-                    }\n-\n-                    // #2 is a random token (this is an error) :(\n-                    Ok(Err(_)) => op1_span,\n-\n-                    // #2 is not even a token at all :(\n-                    Err(_) => op1_span,\n-                }\n-            } else {\n-                // `?` is not allowed as a Kleene op in 2015,\n-                // but is allowed in the 2018 edition\n-                sess.span_diagnostic\n-                    .struct_span_err(op1_span, \"expected `*` or `+`\")\n-                    .note(\"`?` is not a macro repetition operator in the 2015 edition, \\\n-                         but is accepted in the 2018 edition\")\n-                    .emit();\n-\n-                // Return a dummy\n-                return (None, KleeneOp::ZeroOrMore);\n-            }\n-        }\n-\n-        // #1 is a separator followed by #2, a KleeneOp\n-        Ok(Err(token)) => match parse_kleene_op(input, token.span) {\n-            // #2 is a `?`, which is not allowed as a Kleene op in 2015 edition,\n-            // but is allowed in the 2018 edition\n-            Ok(Ok((op, op2_span))) if op == KleeneOp::ZeroOrOne => {\n-                sess.span_diagnostic\n-                    .struct_span_err(op2_span, \"expected `*` or `+`\")\n-                    .note(\"`?` is not a macro repetition operator in the 2015 edition, \\\n-                        but is accepted in the 2018 edition\")\n-                    .emit();\n-\n-                // Return a dummy\n-                return (None, KleeneOp::ZeroOrMore);\n-            }\n-\n-            // #2 is a KleeneOp :D\n-            Ok(Ok((op, _))) => return (Some(token), op),\n-\n-            // #2 is a random token :(\n-            Ok(Err(token)) => token.span,\n-\n-            // #2 is not a token at all :(\n-            Err(span) => span,\n-        },\n-\n-        // #1 is not a token\n-        Err(span) => span,\n-    };\n-\n-    sess.span_diagnostic.span_err(span, \"expected `*` or `+`\");\n-\n-    // Return a dummy\n-    (None, KleeneOp::ZeroOrMore)\n-}\n-\n-// `?` is a Kleene op, not a separator\n-fn parse_sep_and_kleene_op_2018<I>(\n-    input: &mut Peekable<I>,\n+fn parse_sep_and_kleene_op(\n+    input: &mut Peekable<impl Iterator<Item = tokenstream::TokenTree>>,\n     span: Span,\n     sess: &ParseSess,\n-    _features: &Features,\n-    _attrs: &[ast::Attribute],\n-) -> (Option<Token>, KleeneOp)\n-where\n-    I: Iterator<Item = tokenstream::TokenTree>,\n-{\n+) -> (Option<Token>, KleeneOp) {\n     // We basically look at two token trees here, denoted as #1 and #2 below\n     let span = match parse_kleene_op(input, span) {\n-        // #1 is a `?` (needs feature gate)\n-        Ok(Ok((op, _op1_span))) if op == KleeneOp::ZeroOrOne => {\n-            return (None, op);\n-        }\n-\n-        // #1 is a `+` or `*` KleeneOp\n+        // #1 is a `?`, `+`, or `*` KleeneOp\n         Ok(Ok((op, _))) => return (None, op),\n \n         // #1 is a separator followed by #2, a KleeneOp\n         Ok(Err(token)) => match parse_kleene_op(input, token.span) {\n             // #2 is the `?` Kleene op, which does not take a separator (error)\n-            Ok(Ok((op, _op2_span))) if op == KleeneOp::ZeroOrOne => {\n+            Ok(Ok((KleeneOp::ZeroOrOne, _))) => {\n                 // Error!\n                 sess.span_diagnostic.span_err(\n                     token.span,\n@@ -588,11 +417,8 @@ where\n             // #2 is a KleeneOp :D\n             Ok(Ok((op, _))) => return (Some(token), op),\n \n-            // #2 is a random token :(\n-            Ok(Err(token)) => token.span,\n-\n-            // #2 is not a token at all :(\n-            Err(span) => span,\n+            // #2 is a random token or not a token at all :(\n+            Ok(Err(Token { span, .. })) | Err(span) => span,\n         },\n \n         // #1 is not a token"}, {"sha": "66597c0acf6288c59f537cbb491f6627d6755cd0", "filename": "src/test/run-pass/macros/macro-at-most-once-rep-2015.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep-2015.rs?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -0,0 +1,50 @@\n+// run-pass\n+\n+#![allow(unused_mut)]\n+\n+// Check that when `?` is followed by what looks like a Kleene operator (?, +, and *)\n+// then that `?` is not interpreted as a separator. In other words, `$(pat)?+` matches `pat +`\n+// or `+` but does not match `pat` or `pat ? pat`.\n+\n+// edition:2015\n+\n+macro_rules! foo {\n+    // Check for `?`.\n+    ($($a:ident)? ? $num:expr) => {\n+        foo!($($a)? ; $num);\n+    };\n+    // Check for `+`.\n+    ($($a:ident)? + $num:expr) => {\n+        foo!($($a)? ; $num);\n+    };\n+    // Check for `*`.\n+    ($($a:ident)? * $num:expr) => {\n+        foo!($($a)? ; $num);\n+    };\n+    // Check for `;`, not a kleene operator.\n+    ($($a:ident)? ; $num:expr) => {\n+        let mut x = 0;\n+\n+        $(\n+            x += $a;\n+        )?\n+\n+        assert_eq!(x, $num);\n+    };\n+}\n+\n+pub fn main() {\n+    let a = 1;\n+\n+    // Accept 0 repetitions.\n+    foo!( ; 0);\n+    foo!( + 0);\n+    foo!( * 0);\n+    foo!( ? 0);\n+\n+    // Accept 1 repetition.\n+    foo!(a ; 1);\n+    foo!(a + 1);\n+    foo!(a * 1);\n+    foo!(a ? 1);\n+}"}, {"sha": "b37f3853016a6054c9ec943544133d0041d72580", "filename": "src/test/run-pass/macros/macro-at-most-once-rep-2018.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep-2018.rs?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -0,0 +1,50 @@\n+// run-pass\n+\n+#![allow(unused_mut)]\n+\n+// Check that when `?` is followed by what looks like a Kleene operator (?, +, and *)\n+// then that `?` is not interpreted as a separator. In other words, `$(pat)?+` matches `pat +`\n+// or `+` but does not match `pat` or `pat ? pat`.\n+\n+// edition:2018\n+\n+macro_rules! foo {\n+    // Check for `?`.\n+    ($($a:ident)? ? $num:expr) => {\n+        foo!($($a)? ; $num);\n+    };\n+    // Check for `+`.\n+    ($($a:ident)? + $num:expr) => {\n+        foo!($($a)? ; $num);\n+    };\n+    // Check for `*`.\n+    ($($a:ident)? * $num:expr) => {\n+        foo!($($a)? ; $num);\n+    };\n+    // Check for `;`, not a kleene operator.\n+    ($($a:ident)? ; $num:expr) => {\n+        let mut x = 0;\n+\n+        $(\n+            x += $a;\n+        )?\n+\n+        assert_eq!(x, $num);\n+    };\n+}\n+\n+pub fn main() {\n+    let a = 1;\n+\n+    // Accept 0 repetitions.\n+    foo!( ; 0);\n+    foo!( + 0);\n+    foo!( * 0);\n+    foo!( ? 0);\n+\n+    // Accept 1 repetition.\n+    foo!(a ; 1);\n+    foo!(a + 1);\n+    foo!(a * 1);\n+    foo!(a ? 1);\n+}"}, {"sha": "582ef088a73c9bc24c2ee4a2d63add62408019de", "filename": "src/test/run-pass/macros/macro-at-most-once-rep.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-at-most-once-rep.rs?ref=57e13e0325c1d41161a31de1f8520538ec2c575c", "patch": "@@ -1,33 +0,0 @@\n-// run-pass\n-#![allow(unused_mut)]\n-// The logic for parsing Kleene operators in macros has a special case to disambiguate `?`.\n-// Specifically, `$(pat)?` is the ZeroOrOne operator whereas `$(pat)?+` or `$(pat)?*` are the\n-// ZeroOrMore and OneOrMore operators using `?` as a separator. These tests are intended to\n-// exercise that logic in the macro parser.\n-//\n-// Moreover, we also throw in some tests for using a separator with `?`, which is meaningless but\n-// included for consistency with `+` and `*`.\n-//\n-// This test focuses on non-error cases and making sure the correct number of repetitions happen.\n-\n-// edition:2018\n-\n-macro_rules! foo {\n-    ($($a:ident)? ; $num:expr) => { {\n-        let mut x = 0;\n-\n-        $(\n-            x += $a;\n-         )?\n-\n-        assert_eq!(x, $num);\n-    } }\n-}\n-\n-pub fn main() {\n-    let a = 1;\n-\n-    // accept 0 or 1 repetitions\n-    foo!( ; 0);\n-    foo!(a ; 1);\n-}"}, {"sha": "a8e31a648c9ed4e67a41319d43afeecdc75b17fb", "filename": "src/test/ui/issues/issue-39388.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fissues%2Fissue-39388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fissues%2Fissue-39388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39388.rs?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -1,7 +1,7 @@\n #![allow(unused_macros)]\n \n macro_rules! assign {\n-    (($($a:tt)*) = ($($b:tt))*) => { //~ ERROR expected `*` or `+`\n+    (($($a:tt)*) = ($($b:tt))*) => { //~ ERROR expected one of: `*`, `+`, or `?`\n         $($a)* = $($b)*\n     }\n }"}, {"sha": "62e7dff547692ead4c1aab1a46b6eb54a92d7aff", "filename": "src/test/ui/issues/issue-39388.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fissues%2Fissue-39388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fissues%2Fissue-39388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39388.stderr?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -1,4 +1,4 @@\n-error: expected `*` or `+`\n+error: expected one of: `*`, `+`, or `?`\n   --> $DIR/issue-39388.rs:4:22\n    |\n LL |     (($($a:tt)*) = ($($b:tt))*) => {"}, {"sha": "2d8d2ecf9d7b47c63a805e7404566709c793eb8d", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015-ques-rep.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.rs?ref=57e13e0325c1d41161a31de1f8520538ec2c575c", "patch": "@@ -1,13 +0,0 @@\n-// Test behavior of `?` macro _kleene op_ under the 2015 edition. Namely, it doesn't exist.\n-\n-// edition:2015\n-\n-macro_rules! bar {\n-    ($(a)?) => {} //~ERROR expected `*` or `+`\n-}\n-\n-macro_rules! baz {\n-    ($(a),?) => {} //~ERROR expected `*` or `+`\n-}\n-\n-fn main() {}"}, {"sha": "e78f2833078cc740d74d6ee8c908a810af6de2c6", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015-ques-rep.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.stderr?ref=57e13e0325c1d41161a31de1f8520538ec2c575c", "patch": "@@ -1,18 +0,0 @@\n-error: expected `*` or `+`\n-  --> $DIR/macro-at-most-once-rep-2015-ques-rep.rs:6:10\n-   |\n-LL |     ($(a)?) => {}\n-   |          ^\n-   |\n-   = note: `?` is not a macro repetition operator in the 2015 edition, but is accepted in the 2018 edition\n-\n-error: expected `*` or `+`\n-  --> $DIR/macro-at-most-once-rep-2015-ques-rep.rs:10:11\n-   |\n-LL |     ($(a),?) => {}\n-   |           ^\n-   |\n-   = note: `?` is not a macro repetition operator in the 2015 edition, but is accepted in the 2018 edition\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "c8c920ff3f87aaa005eedffe2e59c5ee0123355a", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015-ques-sep.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.rs?ref=57e13e0325c1d41161a31de1f8520538ec2c575c", "patch": "@@ -1,28 +0,0 @@\n-// Test behavior of `?` macro _separator_ under the 2015 edition. Namely, `?` can be used as a\n-// separator, but you get a migration warning for the edition.\n-\n-// edition:2015\n-// compile-pass\n-\n-#![warn(rust_2018_compatibility)]\n-\n-macro_rules! bar {\n-    ($(a)?*) => {} //~WARN using `?` as a separator\n-    //~^WARN this was previously accepted\n-}\n-\n-macro_rules! baz {\n-    ($(a)?+) => {} //~WARN using `?` as a separator\n-    //~^WARN this was previously accepted\n-}\n-\n-fn main() {\n-    bar!();\n-    bar!(a);\n-    bar!(a?a);\n-    bar!(a?a?a?a?a);\n-\n-    baz!(a);\n-    baz!(a?a);\n-    baz!(a?a?a?a?a);\n-}"}, {"sha": "bf1861ae54052691e92b4aa747c791b10c42d032", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015-ques-sep.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e13e0325c1d41161a31de1f8520538ec2c575c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.stderr?ref=57e13e0325c1d41161a31de1f8520538ec2c575c", "patch": "@@ -1,24 +0,0 @@\n-warning: using `?` as a separator is deprecated and will be a hard error in an upcoming edition\n-  --> $DIR/macro-at-most-once-rep-2015-ques-sep.rs:10:10\n-   |\n-LL |     ($(a)?*) => {}\n-   |          ^\n-   |\n-note: lint level defined here\n-  --> $DIR/macro-at-most-once-rep-2015-ques-sep.rs:7:9\n-   |\n-LL | #![warn(rust_2018_compatibility)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: #[warn(question_mark_macro_sep)] implied by #[warn(rust_2018_compatibility)]\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n-   = note: for more information, see issue #48075 <https://github.com/rust-lang/rust/issues/48075>\n-\n-warning: using `?` as a separator is deprecated and will be a hard error in an upcoming edition\n-  --> $DIR/macro-at-most-once-rep-2015-ques-sep.rs:15:10\n-   |\n-LL |     ($(a)?+) => {}\n-   |          ^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n-   = note: for more information, see issue #48075 <https://github.com/rust-lang/rust/issues/48075>\n-"}, {"sha": "f68100d4557d6044dab0ff1bb2871d63d60fda5d", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.rs?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -0,0 +1,42 @@\n+// Tests that `?` is a Kleene op and not a macro separator in the 2015 edition.\n+\n+// edition:2015\n+\n+macro_rules! foo {\n+    ($(a)?) => {};\n+}\n+\n+// The Kleene op `?` does not admit a separator before it.\n+macro_rules! baz {\n+    ($(a),?) => {}; //~ERROR the `?` macro repetition operator\n+}\n+\n+macro_rules! barplus {\n+    ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+}\n+\n+macro_rules! barstar {\n+    ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+}\n+\n+pub fn main() {\n+    foo!();\n+    foo!(a);\n+    foo!(a?); //~ ERROR no rules expected the token `?`\n+    foo!(a?a); //~ ERROR no rules expected the token `?`\n+    foo!(a?a?a); //~ ERROR no rules expected the token `?`\n+\n+    barplus!(); //~ERROR unexpected end of macro invocation\n+    barplus!(a); //~ERROR unexpected end of macro invocation\n+    barplus!(a?); //~ ERROR no rules expected the token `?`\n+    barplus!(a?a); //~ ERROR no rules expected the token `?`\n+    barplus!(a+);\n+    barplus!(+);\n+\n+    barstar!(); //~ERROR unexpected end of macro invocation\n+    barstar!(a); //~ERROR unexpected end of macro invocation\n+    barstar!(a?); //~ ERROR no rules expected the token `?`\n+    barstar!(a?a); //~ ERROR no rules expected the token `?`\n+    barstar!(a*);\n+    barstar!(*);\n+}"}, {"sha": "f9871ab8ffe0c49c40cdbc3bc72a1ff66dc2e8fa", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -0,0 +1,107 @@\n+error: the `?` macro repetition operator does not take a separator\n+  --> $DIR/macro-at-most-once-rep-2015.rs:11:10\n+   |\n+LL |     ($(a),?) => {};\n+   |          ^\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:25:11\n+   |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n+LL |     foo!(a?);\n+   |           ^ no rules expected this token in macro call\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:26:11\n+   |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n+LL |     foo!(a?a);\n+   |           ^ no rules expected this token in macro call\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:27:11\n+   |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n+LL |     foo!(a?a?a);\n+   |           ^ no rules expected this token in macro call\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-at-most-once-rep-2015.rs:29:5\n+   |\n+LL | macro_rules! barplus {\n+   | -------------------- when calling this macro\n+...\n+LL |     barplus!();\n+   |     ^^^^^^^^^^^ missing tokens in macro arguments\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-at-most-once-rep-2015.rs:30:15\n+   |\n+LL | macro_rules! barplus {\n+   | -------------------- when calling this macro\n+...\n+LL |     barplus!(a);\n+   |               ^ missing tokens in macro arguments\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:31:15\n+   |\n+LL | macro_rules! barplus {\n+   | -------------------- when calling this macro\n+...\n+LL |     barplus!(a?);\n+   |               ^ no rules expected this token in macro call\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:32:15\n+   |\n+LL | macro_rules! barplus {\n+   | -------------------- when calling this macro\n+...\n+LL |     barplus!(a?a);\n+   |               ^ no rules expected this token in macro call\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-at-most-once-rep-2015.rs:36:5\n+   |\n+LL | macro_rules! barstar {\n+   | -------------------- when calling this macro\n+...\n+LL |     barstar!();\n+   |     ^^^^^^^^^^^ missing tokens in macro arguments\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-at-most-once-rep-2015.rs:37:15\n+   |\n+LL | macro_rules! barstar {\n+   | -------------------- when calling this macro\n+...\n+LL |     barstar!(a);\n+   |               ^ missing tokens in macro arguments\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:38:15\n+   |\n+LL | macro_rules! barstar {\n+   | -------------------- when calling this macro\n+...\n+LL |     barstar!(a?);\n+   |               ^ no rules expected this token in macro call\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:39:15\n+   |\n+LL | macro_rules! barstar {\n+   | -------------------- when calling this macro\n+...\n+LL |     barstar!(a?a);\n+   |               ^ no rules expected this token in macro call\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "886a25bbcbcb20cc5143b2e8d4e55e39106e0d75", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.rs?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -6,6 +6,7 @@ macro_rules! foo {\n     ($(a)?) => {};\n }\n \n+// The Kleene op `?` does not admit a separator before it.\n macro_rules! baz {\n     ($(a),?) => {}; //~ERROR the `?` macro repetition operator\n }"}, {"sha": "bfe5883b03fa04e56c0f211b924c3a6fcd3d1531", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -1,11 +1,11 @@\n error: the `?` macro repetition operator does not take a separator\n-  --> $DIR/macro-at-most-once-rep-2018.rs:10:10\n+  --> $DIR/macro-at-most-once-rep-2018.rs:11:10\n    |\n LL |     ($(a),?) => {};\n    |          ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-2018.rs:24:11\n+  --> $DIR/macro-at-most-once-rep-2018.rs:25:11\n    |\n LL | macro_rules! foo {\n    | ---------------- when calling this macro\n@@ -14,7 +14,7 @@ LL |     foo!(a?);\n    |           ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-2018.rs:25:11\n+  --> $DIR/macro-at-most-once-rep-2018.rs:26:11\n    |\n LL | macro_rules! foo {\n    | ---------------- when calling this macro\n@@ -23,7 +23,7 @@ LL |     foo!(a?a);\n    |           ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-2018.rs:26:11\n+  --> $DIR/macro-at-most-once-rep-2018.rs:27:11\n    |\n LL | macro_rules! foo {\n    | ---------------- when calling this macro\n@@ -32,7 +32,7 @@ LL |     foo!(a?a?a);\n    |           ^ no rules expected this token in macro call\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-2018.rs:28:5\n+  --> $DIR/macro-at-most-once-rep-2018.rs:29:5\n    |\n LL | macro_rules! barplus {\n    | -------------------- when calling this macro\n@@ -41,7 +41,7 @@ LL |     barplus!();\n    |     ^^^^^^^^^^^ missing tokens in macro arguments\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-2018.rs:29:15\n+  --> $DIR/macro-at-most-once-rep-2018.rs:30:15\n    |\n LL | macro_rules! barplus {\n    | -------------------- when calling this macro\n@@ -50,7 +50,7 @@ LL |     barplus!(a);\n    |               ^ missing tokens in macro arguments\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-2018.rs:30:15\n+  --> $DIR/macro-at-most-once-rep-2018.rs:31:15\n    |\n LL | macro_rules! barplus {\n    | -------------------- when calling this macro\n@@ -59,7 +59,7 @@ LL |     barplus!(a?);\n    |               ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-2018.rs:31:15\n+  --> $DIR/macro-at-most-once-rep-2018.rs:32:15\n    |\n LL | macro_rules! barplus {\n    | -------------------- when calling this macro\n@@ -68,7 +68,7 @@ LL |     barplus!(a?a);\n    |               ^ no rules expected this token in macro call\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-2018.rs:35:5\n+  --> $DIR/macro-at-most-once-rep-2018.rs:36:5\n    |\n LL | macro_rules! barstar {\n    | -------------------- when calling this macro\n@@ -77,7 +77,7 @@ LL |     barstar!();\n    |     ^^^^^^^^^^^ missing tokens in macro arguments\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-2018.rs:36:15\n+  --> $DIR/macro-at-most-once-rep-2018.rs:37:15\n    |\n LL | macro_rules! barstar {\n    | -------------------- when calling this macro\n@@ -86,7 +86,7 @@ LL |     barstar!(a);\n    |               ^ missing tokens in macro arguments\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-2018.rs:37:15\n+  --> $DIR/macro-at-most-once-rep-2018.rs:38:15\n    |\n LL | macro_rules! barstar {\n    | -------------------- when calling this macro\n@@ -95,7 +95,7 @@ LL |     barstar!(a?);\n    |               ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-2018.rs:38:15\n+  --> $DIR/macro-at-most-once-rep-2018.rs:39:15\n    |\n LL | macro_rules! barstar {\n    | -------------------- when calling this macro"}, {"sha": "9ed53519ceb3156a82eb00d9ddb3454e4f7688e2", "filename": "src/test/ui/parser/macro/issue-33569.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -1,7 +1,7 @@\n macro_rules! foo {\n     { $+ } => { //~ ERROR expected identifier, found `+`\n                 //~^ ERROR missing fragment specifier\n-        $(x)(y) //~ ERROR expected `*` or `+`\n+        $(x)(y) //~ ERROR expected one of: `*`, `+`, or `?`\n     }\n }\n "}, {"sha": "b4d38d3ce4806ca8c5a6d9bf50241a3c01bdb684", "filename": "src/test/ui/parser/macro/issue-33569.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e60ef6ea7f4249fd9b4b4a855570301ce160dd/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr?ref=e6e60ef6ea7f4249fd9b4b4a855570301ce160dd", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found `+`\n LL |     { $+ } => {\n    |        ^\n \n-error: expected `*` or `+`\n+error: expected one of: `*`, `+`, or `?`\n   --> $DIR/issue-33569.rs:4:13\n    |\n LL |         $(x)(y)"}]}