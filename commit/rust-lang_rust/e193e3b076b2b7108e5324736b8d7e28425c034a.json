{"sha": "e193e3b076b2b7108e5324736b8d7e28425c034a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOTNlM2IwNzZiMmI3MTA4ZTUzMjQ3MzZiOGQ3ZTI4NDI1YzAzNGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-13T23:59:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-13T23:59:45Z"}, "message": "feat: Make inlay hints work in attributed items", "tree": {"sha": "4850ba98e42ccc401f812715cdd263994e67d657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4850ba98e42ccc401f812715cdd263994e67d657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e193e3b076b2b7108e5324736b8d7e28425c034a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e193e3b076b2b7108e5324736b8d7e28425c034a", "html_url": "https://github.com/rust-lang/rust/commit/e193e3b076b2b7108e5324736b8d7e28425c034a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e193e3b076b2b7108e5324736b8d7e28425c034a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f76e41e185027e4851b0a0fee1bc1e0ffbe2ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f76e41e185027e4851b0a0fee1bc1e0ffbe2ca0", "html_url": "https://github.com/rust-lang/rust/commit/8f76e41e185027e4851b0a0fee1bc1e0ffbe2ca0"}], "stats": {"total": 114, "additions": 98, "deletions": 16}, "files": [{"sha": "ed27f6122b4f3a251f7d10da385acac44f470d54", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e193e3b076b2b7108e5324736b8d7e28425c034a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e193e3b076b2b7108e5324736b8d7e28425c034a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=e193e3b076b2b7108e5324736b8d7e28425c034a", "patch": "@@ -211,6 +211,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     ) -> impl Iterator<Item = SyntaxNode> + '_ {\n         token.parent().into_iter().flat_map(move |it| self.ancestors_with_macros(it))\n     }\n+\n     pub fn ancestors_with_macros(&self, node: SyntaxNode) -> impl Iterator<Item = SyntaxNode> + '_ {\n         self.imp.ancestors_with_macros(node)\n     }"}, {"sha": "cca3bb3fa8c8801688d9d8902c3d3c4cc29596a8", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 97, "deletions": 16, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/e193e3b076b2b7108e5324736b8d7e28425c034a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e193e3b076b2b7108e5324736b8d7e28425c034a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=e193e3b076b2b7108e5324736b8d7e28425c034a", "patch": "@@ -64,17 +64,35 @@ pub(crate) fn inlay_hints(\n     let file = sema.parse(file_id);\n \n     let mut res = Vec::new();\n-    for node in file.syntax().descendants() {\n-        if let Some(expr) = ast::Expr::cast(node.clone()) {\n-            get_chaining_hints(&mut res, &sema, config, expr);\n-        }\n+    let mut queue = vec![file.syntax().preorder()];\n \n-        match_ast! {\n-            match node {\n-                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it)); },\n-                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it)); },\n-                ast::IdentPat(it) => { get_bind_pat_hints(&mut res, &sema, config, it); },\n-                _ => (),\n+    while let Some(mut preorder) = queue.pop() {\n+        while let Some(event) = preorder.next() {\n+            let node = match event {\n+                syntax::WalkEvent::Enter(node) => node,\n+                syntax::WalkEvent::Leave(_) => continue,\n+            };\n+            if let Some(node) =\n+                ast::Item::cast(node.clone()).and_then(|item| sema.expand_attr_macro(&item))\n+            {\n+                preorder.skip_subtree();\n+                queue.push(node.preorder());\n+                continue;\n+            }\n+\n+            if let Some(expr) = ast::Expr::cast(node.clone()) {\n+                get_chaining_hints(&mut res, &sema, config, &expr);\n+                match expr {\n+                    ast::Expr::CallExpr(it) => {\n+                        get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n+                    }\n+                    ast::Expr::MethodCallExpr(it) => {\n+                        get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n+                    }\n+                    _ => (),\n+                }\n+            } else if let Some(it) = ast::IdentPat::cast(node.clone()) {\n+                get_bind_pat_hints(&mut res, &sema, config, it);\n             }\n         }\n     }\n@@ -85,7 +103,7 @@ fn get_chaining_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n-    expr: ast::Expr,\n+    expr: &ast::Expr,\n ) -> Option<()> {\n     if !config.chaining_hints {\n         return None;\n@@ -117,7 +135,7 @@ fn get_chaining_hints(\n             next_next = tokens.next()?.kind();\n         }\n         if next_next == T![.] {\n-            let ty = sema.type_of_expr(&expr)?.original;\n+            let ty = sema.type_of_expr(expr)?.original;\n             if ty.is_unknown() {\n                 return None;\n             }\n@@ -129,7 +147,7 @@ fn get_chaining_hints(\n                 }\n             }\n             acc.push(InlayHint {\n-                range: expr.syntax().text_range(),\n+                range: sema.original_range(expr.syntax()).range,\n                 kind: InlayKind::ChainingHint,\n                 label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n                     ty.display_truncated(sema.db, config.max_length).to_string().into()\n@@ -167,7 +185,7 @@ fn get_param_name_hints(\n         })\n         .filter(|(param_name, arg)| !should_hide_param_name_hint(sema, &callable, param_name, arg))\n         .map(|(param_name, arg)| InlayHint {\n-            range: arg.syntax().text_range(),\n+            range: sema.original_range(arg.syntax()).range,\n             kind: InlayKind::ParameterHint,\n             label: param_name.into(),\n         });\n@@ -197,8 +215,8 @@ fn get_bind_pat_hints(\n \n     acc.push(InlayHint {\n         range: match pat.name() {\n-            Some(name) => name.syntax().text_range(),\n-            None => pat.syntax().text_range(),\n+            Some(name) => sema.original_range(name.syntax()).range,\n+            None => sema.original_range(pat.syntax()).range,\n         },\n         kind: InlayKind::TypeHint,\n         label: hint_iterator(sema, &famous_defs, config, &ty)\n@@ -1467,4 +1485,67 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hints_in_attr_call() {\n+        // chaining hints do not currently work as macros lose all whitespace information\n+        check_expect(\n+            TEST_CONFIG,\n+            r#\"\n+//- proc_macros: identity, input_replace\n+struct Struct;\n+impl Struct {\n+    fn chain(self) -> Self {\n+        self\n+    }\n+}\n+\n+#[proc_macros::identity]\n+fn main() {\n+    let strukt = Struct;\n+    strukt\n+        .chain()\n+        .chain()\n+        .chain();\n+    Struct::chain(strukt);\n+}\n+\n+#[proc_macros::input_replace(\n+    fn not_main() {\n+        let strukt = Struct;\n+        strukt\n+            .chain()\n+            .chain()\n+            .chain();\n+        Struct::chain(strukt);\n+    }\n+)]\n+fn main() {}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 297..303,\n+                        kind: TypeHint,\n+                        label: \"Struct\",\n+                    },\n+                    InlayHint {\n+                        range: 415..421,\n+                        kind: ParameterHint,\n+                        label: \"self\",\n+                    },\n+                    InlayHint {\n+                        range: 125..131,\n+                        kind: TypeHint,\n+                        label: \"Struct\",\n+                    },\n+                    InlayHint {\n+                        range: 223..229,\n+                        kind: ParameterHint,\n+                        label: \"self\",\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n }"}]}