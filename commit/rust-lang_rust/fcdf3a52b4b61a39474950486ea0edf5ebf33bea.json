{"sha": "fcdf3a52b4b61a39474950486ea0edf5ebf33bea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZGYzYTUyYjRiNjFhMzk0NzQ5NTA0ODZlYTBlZGY1ZWJmMzNiZWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T20:42:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T21:00:05Z"}, "message": "everysalsa", "tree": {"sha": "94e7b42645037db8a1f92c6ba9571c2e6ed33cf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e7b42645037db8a1f92c6ba9571c2e6ed33cf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcdf3a52b4b61a39474950486ea0edf5ebf33bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcdf3a52b4b61a39474950486ea0edf5ebf33bea", "html_url": "https://github.com/rust-lang/rust/commit/fcdf3a52b4b61a39474950486ea0edf5ebf33bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e69ff21207d83864e13f6c8631733f4f0c32ba0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69ff21207d83864e13f6c8631733f4f0c32ba0d", "html_url": "https://github.com/rust-lang/rust/commit/e69ff21207d83864e13f6c8631733f4f0c32ba0d"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "0b60316e6044393d19158c8d29871d411832e9f6", "filename": "crates/libanalysis/src/queries.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/crates%2Flibanalysis%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/crates%2Flibanalysis%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fqueries.rs?ref=fcdf3a52b4b61a39474950486ea0edf5ebf33bea", "patch": "@@ -3,20 +3,21 @@ use libsyntax2::File;\n use libeditor::LineIndex;\n use {\n     FileId,\n-    db::{Query, QueryCtx, QueryRegistry, file_text},\n+    db::{Query, QueryCtx, QueryRegistry},\n+    symbol_index::SymbolIndex,\n };\n \n-pub(crate) fn register_queries(reg: &mut QueryRegistry) {\n-    reg.add(FILE_SYNTAX, \"FILE_SYNTAX\");\n-    reg.add(FILE_LINES, \"FILE_LINES\");\n-}\n+pub(crate) use db::{file_text, file_set};\n \n pub(crate) fn file_syntax(ctx: QueryCtx, file_id: FileId) -> File {\n     (&*ctx.get(FILE_SYNTAX, file_id)).clone()\n }\n pub(crate) fn file_lines(ctx: QueryCtx, file_id: FileId) -> Arc<LineIndex> {\n     ctx.get(FILE_LINES, file_id)\n }\n+pub(crate) fn file_symbols(ctx: QueryCtx, file_id: FileId) -> Arc<SymbolIndex> {\n+    ctx.get(FILE_SYMBOLS, file_id)\n+}\n \n const FILE_SYNTAX: Query<FileId, File> = Query(16, |ctx, file_id: &FileId| {\n     let text = file_text(ctx, *file_id);\n@@ -26,3 +27,13 @@ const FILE_LINES: Query<FileId, LineIndex> = Query(17, |ctx, file_id: &FileId| {\n     let text = file_text(ctx, *file_id);\n     LineIndex::new(&*text)\n });\n+const FILE_SYMBOLS: Query<FileId, SymbolIndex> = Query(18, |ctx, file_id: &FileId| {\n+    let syntax = file_syntax(ctx, *file_id);\n+    SymbolIndex::for_file(*file_id, syntax)\n+});\n+\n+pub(crate) fn register_queries(reg: &mut QueryRegistry) {\n+    reg.add(FILE_SYNTAX, \"FILE_SYNTAX\");\n+    reg.add(FILE_LINES, \"FILE_LINES\");\n+    reg.add(FILE_SYMBOLS, \"FILE_SYMBOLS\");\n+}"}, {"sha": "191d0d821a3400647ead6529e4871e887de48598", "filename": "crates/libanalysis/src/roots.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/crates%2Flibanalysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/crates%2Flibanalysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Froots.rs?ref=fcdf3a52b4b61a39474950486ea0edf5ebf33bea", "patch": "@@ -22,7 +22,7 @@ pub(crate) trait SourceRoot {\n     fn module_tree(&self) -> Arc<ModuleTreeDescriptor>;\n     fn lines(&self, file_id: FileId) -> Arc<LineIndex>;\n     fn syntax(&self, file_id: FileId) -> File;\n-    fn symbols<'a>(&'a self, acc: &mut Vec<&'a SymbolIndex>);\n+    fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>);\n }\n \n #[derive(Default, Debug)]\n@@ -74,20 +74,16 @@ impl SourceRoot for WritableSourceRoot {\n     fn syntax(&self, file_id: FileId) -> File {\n         self.db.make_query(|ctx| ::queries::file_syntax(ctx, file_id))\n     }\n-    fn symbols<'a>(&'a self, acc: &mut Vec<&'a SymbolIndex>) {\n-        // acc.extend(\n-        //     self.file_map\n-        //         .iter()\n-        //         .map(|(&file_id, data)| symbols(file_id, data))\n-        // )\n+    fn symbols<'a>(&'a self, acc: &mut Vec<Arc<SymbolIndex>>) {\n+        self.db.make_query(|ctx| {\n+            let file_set = ::queries::file_set(ctx);\n+            let syms = file_set.0.iter()\n+                .map(|file_id| ::queries::file_symbols(ctx, *file_id));\n+            acc.extend(syms);\n+        });\n     }\n }\n \n-fn symbols(file_id: FileId, (data, symbols): &(FileData, OnceCell<SymbolIndex>)) -> &SymbolIndex {\n-    let syntax = data.syntax_transient();\n-    symbols.get_or_init(|| SymbolIndex::for_file(file_id, syntax))\n-}\n-\n #[derive(Debug)]\n struct FileData {\n     text: String,\n@@ -121,7 +117,7 @@ impl FileData {\n \n #[derive(Debug)]\n pub(crate) struct ReadonlySourceRoot {\n-    symbol_index: SymbolIndex,\n+    symbol_index: Arc<SymbolIndex>,\n     file_map: HashMap<FileId, FileData>,\n     module_tree: Arc<ModuleTreeDescriptor>,\n }\n@@ -149,7 +145,7 @@ impl ReadonlySourceRoot {\n             .collect();\n \n         ReadonlySourceRoot {\n-            symbol_index,\n+            symbol_index: Arc::new(symbol_index),\n             file_map,\n             module_tree: Arc::new(module_tree),\n         }\n@@ -176,7 +172,7 @@ impl SourceRoot for ReadonlySourceRoot {\n     fn syntax(&self, file_id: FileId) -> File {\n         self.data(file_id).syntax().clone()\n     }\n-    fn symbols<'a>(&'a self, acc: &mut Vec<&'a SymbolIndex>) {\n-        acc.push(&self.symbol_index)\n+    fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>) {\n+        acc.push(Arc::clone(&self.symbol_index))\n     }\n }"}, {"sha": "d22187ac0b2294339313d6ef7fb569a69fa416e6", "filename": "crates/libanalysis/src/symbol_index.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs?ref=fcdf3a52b4b61a39474950486ea0edf5ebf33bea", "patch": "@@ -1,3 +1,7 @@\n+use std::{\n+    sync::Arc,\n+    hash::{Hash, Hasher},\n+};\n use libeditor::{FileSymbol, file_symbols};\n use libsyntax2::{\n     File,\n@@ -13,6 +17,12 @@ pub(crate) struct SymbolIndex {\n     map: fst::Map,\n }\n \n+impl Hash for SymbolIndex {\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        self.symbols.hash(hasher)\n+    }\n+}\n+\n impl SymbolIndex {\n     pub(crate) fn for_files(files: impl ParallelIterator<Item=(FileId, File)>) -> SymbolIndex {\n         let mut symbols = files\n@@ -43,7 +53,7 @@ impl SymbolIndex {\n impl Query {\n     pub(crate) fn search(\n         self,\n-        indices: &[&SymbolIndex],\n+        indices: &[Arc<SymbolIndex>],\n         token: &JobToken,\n     ) -> Vec<(FileId, FileSymbol)> {\n "}, {"sha": "2f9cc9233657572e67fb0d08c061e256a2af176c", "filename": "crates/libeditor/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdf3a52b4b61a39474950486ea0edf5ebf33bea/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fsymbols.rs?ref=fcdf3a52b4b61a39474950486ea0edf5ebf33bea", "patch": "@@ -17,7 +17,7 @@ pub struct StructureNode {\n     pub kind: SyntaxKind,\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Hash)]\n pub struct FileSymbol {\n     pub name: SmolStr,\n     pub node_range: TextRange,"}]}