{"sha": "a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YzNmZTQ1YzYxMzhjZDFmNGQxNDNmZGIwZTg0M2VlMmQ0NzU5YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-20T18:31:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-20T18:31:59Z"}, "message": "auto merge of #8328 : alexcrichton/rust/llvm-head, r=brson\n\nThe first commit message is pretty good, but whomever reviews this should probably also at least glance at the changes I made in LLVM. I basically reorganized our pending patch queue to be a bit more organized and clearer in what needs to go where. After this, our queue would be:\r\n\r\n* Add the `no-split-stack` attribute\r\n* Add the `fixedstacksegment` attribute\r\n* Add split-stacks for arm android\r\n* Add split-stacks for arm linux\r\n* Add split stacks for mips\r\n\r\nThen there's a patch which I added to get rust to build at all on LLVM-head, and I'm not quite sure why it's there, but nothing seems to be crashing for now! (famous last words).\r\n\r\nOtherwise, I just updated code to reflect the changes I made in LLVM with the only major change being the advent of the new `no_split_stack` attribute. This is work towards #1226, but someone more familiar with the code should probably actually assign the attribute to the appropriate functions.\r\n\r\nAlso as a bonus, I've verified that this closes #5774", "tree": {"sha": "73c09899e53768afb90d337c870e4f63bb06ff2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c09899e53768afb90d337c870e4f63bb06ff2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "html_url": "https://github.com/rust-lang/rust/commit/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67c954e365970e4c2cd06f0c50724656d7010f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/67c954e365970e4c2cd06f0c50724656d7010f45", "html_url": "https://github.com/rust-lang/rust/commit/67c954e365970e4c2cd06f0c50724656d7010f45"}, {"sha": "7f91e7740dfbf020e2538d95e21851a32a3454a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f91e7740dfbf020e2538d95e21851a32a3454a6", "html_url": "https://github.com/rust-lang/rust/commit/7f91e7740dfbf020e2538d95e21851a32a3454a6"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "bb5ddc1ae7715f9377cf737d31ed2e68895d0c43", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "patch": "@@ -293,7 +293,6 @@ pub static transform_passes : &'static [(&'static str, &'static str)] = &'static\n     (\"scalarrepl\",                      \"Scalar Replacement of Aggregates (DT)\"),\n     (\"scalarrepl-ssa\",                  \"Scalar Replacement of Aggregates (SSAUp)\"),\n     (\"sccp\",                            \"Sparse Conditional Constant Propagation\"),\n-    (\"simplify-libcalls\",               \"Simplify well-known library calls\"),\n     (\"simplifycfg\",                     \"Simplify the CFG\"),\n     (\"sink\",                            \"Code sinking\"),\n     (\"strip\",                           \"Strip all symbols from a module\"),"}, {"sha": "60f8a1773fc84a59b1514bbcfcce11778f73278a", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "patch": "@@ -89,11 +89,6 @@ pub enum Attribute {\n     ReturnsTwiceAttribute = 1 << 29,\n     UWTableAttribute = 1 << 30,\n     NonLazyBindAttribute = 1 << 31,\n-\n-    // Not added to LLVM yet, so may need to stay updated if LLVM changes.\n-    // FIXME(#8199): if this changes, be sure to change the relevant constant\n-    //               down below\n-    // FixedStackSegment = 1 << 41,\n }\n \n // enum for the LLVM IntPredicate type\n@@ -847,7 +842,9 @@ pub mod llvm {\n         #[fast_ffi]\n         pub fn LLVMSetGC(Fn: ValueRef, Name: *c_char);\n         #[fast_ffi]\n-        pub fn LLVMAddFunctionAttr(Fn: ValueRef, PA: c_uint, HighPA: c_uint);\n+        pub fn LLVMAddFunctionAttr(Fn: ValueRef, PA: c_uint);\n+        #[fast_ffi]\n+        pub fn LLVMAddFunctionAttrString(Fn: ValueRef, Name: *c_char);\n         #[fast_ffi]\n         pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_ulonglong;\n         #[fast_ffi]\n@@ -2138,23 +2135,7 @@ pub fn ConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n \n pub fn SetFunctionAttribute(Fn: ValueRef, attr: Attribute) {\n     unsafe {\n-        let attr = attr as u64;\n-        let lower = attr & 0xffffffff;\n-        let upper = (attr >> 32) & 0xffffffff;\n-        llvm::LLVMAddFunctionAttr(Fn, lower as c_uint, upper as c_uint);\n-    }\n-}\n-\n-// FIXME(#8199): this shouldn't require this hackery. On i686\n-//               (FixedStackSegment as u64) will return 0 instead of 1 << 41.\n-//               Furthermore, if we use a match of any sort then an LLVM\n-//               assertion is generated!\n-pub fn SetFixedStackSegmentAttribute(Fn: ValueRef) {\n-    unsafe {\n-        let attr = 1u64 << 41;\n-        let lower = attr & 0xffffffff;\n-        let upper = (attr >> 32) & 0xffffffff;\n-        llvm::LLVMAddFunctionAttr(Fn, lower as c_uint, upper as c_uint);\n+        llvm::LLVMAddFunctionAttr(Fn, attr as c_uint)\n     }\n }\n /* Memory-managed object interface to type handles. */"}, {"sha": "95021d3b6e7866a139d794b16683083c8aa077b2", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "patch": "@@ -442,23 +442,36 @@ pub fn set_inline_hint(f: ValueRef) {\n     lib::llvm::SetFunctionAttribute(f, lib::llvm::InlineHintAttribute)\n }\n \n-pub fn set_inline_hint_if_appr(attrs: &[ast::Attribute],\n-                               llfn: ValueRef) {\n+pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n     use syntax::attr::*;\n+    // Set the inline hint if there is one\n     match find_inline_attr(attrs) {\n         InlineHint   => set_inline_hint(llfn),\n         InlineAlways => set_always_inline(llfn),\n         InlineNever  => set_no_inline(llfn),\n         InlineNone   => { /* fallthrough */ }\n     }\n+\n+    // Add the no-split-stack attribute if requested\n+    if contains_name(attrs, \"no_split_stack\") {\n+        set_no_split_stack(llfn);\n+    }\n }\n \n pub fn set_always_inline(f: ValueRef) {\n     lib::llvm::SetFunctionAttribute(f, lib::llvm::AlwaysInlineAttribute)\n }\n \n pub fn set_fixed_stack_segment(f: ValueRef) {\n-    lib::llvm::SetFixedStackSegmentAttribute(f);\n+    do \"fixed-stack-segment\".to_c_str().with_ref |buf| {\n+        unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n+    }\n+}\n+\n+pub fn set_no_split_stack(f: ValueRef) {\n+    do \"no-split-stack\".to_c_str().with_ref |buf| {\n+        unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n+    }\n }\n \n pub fn set_glue_inlining(f: ValueRef, t: ty::t) {\n@@ -2472,7 +2485,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                                                                            sym,\n                                                                            i.id)\n                             };\n-                            set_inline_hint_if_appr(i.attrs, llfn);\n+                            set_llvm_fn_attrs(i.attrs, llfn);\n                             llfn\n                         }\n \n@@ -2605,7 +2618,7 @@ pub fn register_method(ccx: @mut CrateContext,\n     let sym = exported_name(ccx, path, mty, m.attrs);\n \n     let llfn = register_fn(ccx, m.span, sym, id, mty);\n-    set_inline_hint_if_appr(m.attrs, llfn);\n+    set_llvm_fn_attrs(m.attrs, llfn);\n     llfn\n }\n "}, {"sha": "ab458f2799ddaa2e6c59036a92fc0820adfbea2d", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "patch": "@@ -12,7 +12,7 @@\n use back::link::mangle_exported_name;\n use driver::session;\n use lib::llvm::ValueRef;\n-use middle::trans::base::{set_inline_hint_if_appr, set_inline_hint};\n+use middle::trans::base::{set_llvm_fn_attrs, set_inline_hint};\n use middle::trans::base::{trans_enum_variant,push_ctxt};\n use middle::trans::base::{trans_fn, decl_internal_cdecl_fn};\n use middle::trans::base::{get_item_val, no_self};\n@@ -222,7 +222,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n                 _\n             }, _) => {\n         let d = mk_lldecl();\n-        set_inline_hint_if_appr(i.attrs, d);\n+        set_llvm_fn_attrs(i.attrs, d);\n         trans_fn(ccx,\n                  pt,\n                  decl,\n@@ -266,13 +266,13 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n       ast_map::node_method(mth, _, _) => {\n         // XXX: What should the self type be here?\n         let d = mk_lldecl();\n-        set_inline_hint_if_appr(mth.attrs.clone(), d);\n+        set_llvm_fn_attrs(mth.attrs, d);\n         meth::trans_method(ccx, pt, mth, Some(psubsts), d);\n         d\n       }\n       ast_map::node_trait_method(@ast::provided(mth), _, pt) => {\n         let d = mk_lldecl();\n-        set_inline_hint_if_appr(mth.attrs.clone(), d);\n+        set_llvm_fn_attrs(mth.attrs, d);\n         meth::trans_method(ccx, (*pt).clone(), mth, Some(psubsts), d);\n         d\n       }"}, {"sha": "0964c68ddf2c67ce455e7443a06f4bb3db9e92bb", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "patch": "@@ -1 +1 @@\n-Subproject commit f67442eee27d3d075a65cf7f9a70f7ec6649ffd1\n+Subproject commit 0964c68ddf2c67ce455e7443a06f4bb3db9e92bb"}, {"sha": "1a4b7f3232964a76f89de449f0c4d81f12b7cdce", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "patch": "@@ -43,7 +43,7 @@ extern \"C\" void LLVMRustAddPrintModulePass(LLVMPassManagerRef PMR,\n                                            const char* path) {\n   PassManager *PM = unwrap<PassManager>(PMR);\n   std::string ErrorInfo;\n-  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+  raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_Binary);\n   formatted_raw_ostream FOS(OS);\n   PM->add(createPrintModulePass(&FOS));\n   PM->run(*unwrap(M));\n@@ -413,7 +413,7 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   bool NoVerify = false;\n   std::string ErrorInfo;\n   raw_fd_ostream OS(path, ErrorInfo,\n-                    raw_fd_ostream::F_Binary);\n+                    sys::fs::F_Binary);\n   if (ErrorInfo != \"\") {\n     LLVMRustError = ErrorInfo.c_str();\n     return false;\n@@ -482,6 +482,10 @@ extern \"C\" LLVMTypeRef LLVMMetadataTypeInContext(LLVMContextRef C) {\n   return wrap(Type::getMetadataTy(*unwrap(C)));\n }\n \n+extern \"C\" void LLVMAddFunctionAttrString(LLVMValueRef fn, const char *Name) {\n+  unwrap<Function>(fn)->addFnAttr(Name);\n+}\n+\n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n                                             const char* Name,\n@@ -625,7 +629,7 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateFunction(\n     return wrap(Builder->createFunction(\n         unwrapDI<DIScope>(Scope), Name, LinkageName,\n         unwrapDI<DIFile>(File), LineNo,\n-        unwrapDI<DIType>(Ty), isLocalToUnit, isDefinition, ScopeLine,\n+        unwrapDI<DICompositeType>(Ty), isLocalToUnit, isDefinition, ScopeLine,\n         Flags, isOptimized,\n         unwrap<Function>(Fn),\n         unwrapDI<MDNode*>(TParam),"}, {"sha": "cfc1d20b283fcf21b630435658748c6434990ec5", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2013-07-04\n+2013-08-20"}, {"sha": "75a55fdf88a4197c906f5bb111f9c2b73a0a77fb", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=a8c3fe45c6138cd1f4d143fdb0e843ee2d4759b2", "patch": "@@ -42,6 +42,7 @@ LLVMAddDestination\n LLVMAddEarlyCSEPass\n LLVMAddFunction\n LLVMAddFunctionAttr\n+LLVMAddFunctionAttrString\n LLVMAddFunctionAttrsPass\n LLVMAddFunctionInliningPass\n LLVMAddGVNPass"}]}