{"sha": "1c381ec642556ced608517df5518bbec7f535e14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMzgxZWM2NDI1NTZjZWQ2MDg1MTdkZjU1MThiYmVjN2Y1MzVlMTQ=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-11T14:11:19Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-11T14:11:19Z"}, "message": "Move more into if_let_chain", "tree": {"sha": "80919d0389d6009891d4230f3bec922e1a58bc43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80919d0389d6009891d4230f3bec922e1a58bc43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c381ec642556ced608517df5518bbec7f535e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c381ec642556ced608517df5518bbec7f535e14", "html_url": "https://github.com/rust-lang/rust/commit/1c381ec642556ced608517df5518bbec7f535e14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c381ec642556ced608517df5518bbec7f535e14/comments", "author": null, "committer": null, "parents": [{"sha": "12c53752b80a6bb1c0cab735f5e87a765de1ef26", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c53752b80a6bb1c0cab735f5e87a765de1ef26", "html_url": "https://github.com/rust-lang/rust/commit/12c53752b80a6bb1c0cab735f5e87a765de1ef26"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "02d089e1af4388f935bfd3cab52b815550a34aa4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1c381ec642556ced608517df5518bbec7f535e14/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c381ec642556ced608517df5518bbec7f535e14/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=1c381ec642556ced608517df5518bbec7f535e14", "patch": "@@ -353,21 +353,21 @@ fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n         for arm in arms {\n             if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pats[0].node {\n                 let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n-                if inner.iter().any(|pat| pat.node == PatKind::Wild) && path_str == \"Err\" {\n-                    // `Err(_)` arm found\n-                    if_let_chain! {[\n-                            let ExprBlock(ref block) = arm.body.node,\n-                            is_panic_block(cx, block)\n-                        ], {\n-                            span_note_and_lint(cx,\n-                                               MATCH_WILD_ERR_ARM,\n-                                               arm.pats[0].span,\n-                                               \"Err(_) will match all errors, maybe not a good idea\",\n-                                               arm.pats[0].span,\n-                                               \"to remove this warning, match each error seperately \\\n-                                                or use unreachable macro\");\n-                        }}\n-                }\n+                if_let_chain! {[\n+                    path_str == \"Err\",\n+                    inner.iter().any(|pat| pat.node == PatKind::Wild),\n+                    let ExprBlock(ref block) = arm.body.node,\n+                    is_panic_block(cx, block)\n+                ], {\n+                    // `Err(_)` arm with `panic!` found\n+                    span_note_and_lint(cx,\n+                                       MATCH_WILD_ERR_ARM,\n+                                       arm.pats[0].span,\n+                                       \"Err(_) will match all errors, maybe not a good idea\",\n+                                       arm.pats[0].span,\n+                                       \"to remove this warning, match each error seperately \\\n+                                        or use unreachable macro\");\n+                }}\n             }\n         }\n     }"}]}