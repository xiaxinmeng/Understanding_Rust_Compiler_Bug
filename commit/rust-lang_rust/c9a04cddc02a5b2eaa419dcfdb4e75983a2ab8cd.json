{"sha": "c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "node_id": "C_kwDOAAsO6NoAKGM5YTA0Y2RkYzAyYTViMmVhYTQxOWRjZmRiNGU3NTk4M2EyYWI4Y2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-26T05:59:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T05:59:55Z"}, "message": "Rollup merge of #103430 - cjgillot:receiver-attrs, r=petrochenkov\n\nWorkaround unstable stmt_expr_attributes for method receiver expressions\n\nFixes https://github.com/rust-lang/rust/issues/103244\n\ncc ``@Mark-Simulacrum`` ``@ehuss``", "tree": {"sha": "1b82a491e611a83a0e9de06874542333a11dbe17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b82a491e611a83a0e9de06874542333a11dbe17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWMzbCRBK7hj4Ov3rIwAABY4IAJ3VWiqUrOgY/s8Tk6DPXwia\ndraA3HG2TBp2b3gnXGqnUaABOFImNSd9NtfnHD6Eh35LYAaGfVi2chJ+w+hX1ERl\nInk1iE3iwA0sbBUOWG8bTLBKAydhrUId20DGwQkWtPVXyfYsMbOYuWVp1Wt2o2xA\nkrh/ELRlb3Q88g34e5kc9y9uOJN63FQVPMmDqDbgpGQUxQSudIVREejyc89Eog5+\npCtFj9x/nzM/wTmAAIfmb03PCY1niZDQ4YRG9u8kiFapY8FplVyRAQN7TttLCTY+\n1EitYZStv1n88dpGQ5viQyOFFtHLAOTpLKlgfphwIPacsKEmMeibQu+3I4kMWVo=\n=/NkJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b82a491e611a83a0e9de06874542333a11dbe17\nparent 785828744c04805d6f81b4ecd093d4460f8e513e\nparent 74d4eefc1346a8b9242e072df16de4f664b0873c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666763995 +0530\ncommitter GitHub <noreply@github.com> 1666763995 +0530\n\nRollup merge of #103430 - cjgillot:receiver-attrs, r=petrochenkov\n\nWorkaround unstable stmt_expr_attributes for method receiver expressions\n\nFixes https://github.com/rust-lang/rust/issues/103244\n\ncc ``@Mark-Simulacrum`` ``@ehuss``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "html_url": "https://github.com/rust-lang/rust/commit/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785828744c04805d6f81b4ecd093d4460f8e513e", "url": "https://api.github.com/repos/rust-lang/rust/commits/785828744c04805d6f81b4ecd093d4460f8e513e", "html_url": "https://github.com/rust-lang/rust/commit/785828744c04805d6f81b4ecd093d4460f8e513e"}, {"sha": "74d4eefc1346a8b9242e072df16de4f664b0873c", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d4eefc1346a8b9242e072df16de4f664b0873c", "html_url": "https://github.com/rust-lang/rust/commit/74d4eefc1346a8b9242e072df16de4f664b0873c"}], "stats": {"total": 140, "additions": 121, "deletions": 19}, "files": [{"sha": "b970e57e0173c444a5dddef1862087d6036c35d9", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -152,6 +152,12 @@ pub trait MutVisitor: Sized {\n         noop_visit_expr(e, self);\n     }\n \n+    /// This method is a hack to workaround unstable of `stmt_expr_attributes`.\n+    /// It can be removed once that feature is stabilized.\n+    fn visit_method_receiver_expr(&mut self, ex: &mut P<Expr>) {\n+        self.visit_expr(ex)\n+    }\n+\n     fn filter_map_expr(&mut self, e: P<Expr>) -> Option<P<Expr>> {\n         noop_filter_map_expr(e, self)\n     }\n@@ -1301,7 +1307,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_ident(ident);\n             vis.visit_id(id);\n             visit_opt(args, |args| vis.visit_generic_args(args));\n-            vis.visit_expr(receiver);\n+            vis.visit_method_receiver_expr(receiver);\n             visit_exprs(exprs, vis);\n             vis.visit_span(span);\n         }\n@@ -1589,3 +1595,9 @@ impl DummyAstNode for Crate {\n         }\n     }\n }\n+\n+impl<N: DummyAstNode, T: DummyAstNode> DummyAstNode for crate::ast_traits::AstNodeWrapper<N, T> {\n+    fn dummy() -> Self {\n+        crate::ast_traits::AstNodeWrapper::new(N::dummy(), T::dummy())\n+    }\n+}"}, {"sha": "6f56c1ef0e8daa6ff4e5fad425bd1171a51cc4f6", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -140,6 +140,11 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_expr(&mut self, ex: &'ast Expr) {\n         walk_expr(self, ex)\n     }\n+    /// This method is a hack to workaround unstable of `stmt_expr_attributes`.\n+    /// It can be removed once that feature is stabilized.\n+    fn visit_method_receiver_expr(&mut self, ex: &'ast Expr) {\n+        self.visit_expr(ex)\n+    }\n     fn visit_expr_post(&mut self, _ex: &'ast Expr) {}\n     fn visit_ty(&mut self, t: &'ast Ty) {\n         walk_ty(self, t)"}, {"sha": "750f1fe121f6d90a368ee38a7a4f7b3bc0a1aa66", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -210,8 +210,15 @@ impl CfgEval<'_, '_> {\n }\n \n impl MutVisitor for CfgEval<'_, '_> {\n+    #[instrument(level = \"trace\", skip(self))]\n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {\n-        self.cfg.configure_expr(expr);\n+        self.cfg.configure_expr(expr, false);\n+        mut_visit::noop_visit_expr(expr, self);\n+    }\n+\n+    #[instrument(level = \"trace\", skip(self))]\n+    fn visit_method_receiver_expr(&mut self, expr: &mut P<ast::Expr>) {\n+        self.cfg.configure_expr(expr, true);\n         mut_visit::noop_visit_expr(expr, self);\n     }\n "}, {"sha": "1d2b1298a68f6372dca41d0bf71b0241636eda44", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -469,6 +469,7 @@ impl<'a> StripUnconfigured<'a> {\n     }\n \n     /// If attributes are not allowed on expressions, emit an error for `attr`\n+    #[instrument(level = \"trace\", skip(self))]\n     pub(crate) fn maybe_emit_expr_attr_err(&self, attr: &Attribute) {\n         if !self.features.map_or(true, |features| features.stmt_expr_attributes) {\n             let mut err = feature_err(\n@@ -486,9 +487,12 @@ impl<'a> StripUnconfigured<'a> {\n         }\n     }\n \n-    pub fn configure_expr(&self, expr: &mut P<ast::Expr>) {\n-        for attr in expr.attrs.iter() {\n-            self.maybe_emit_expr_attr_err(attr);\n+    #[instrument(level = \"trace\", skip(self))]\n+    pub fn configure_expr(&self, expr: &mut P<ast::Expr>, method_receiver: bool) {\n+        if !method_receiver {\n+            for attr in expr.attrs.iter() {\n+                self.maybe_emit_expr_attr_err(attr);\n+            }\n         }\n \n         // If an expr is valid to cfg away it will have been removed by the"}, {"sha": "57713fb3cd61d59c7a2f33fdc46d8938b7eafb17", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -50,20 +50,23 @@ macro_rules! ast_fragments {\n         /// Can also serve as an input and intermediate result for macro expansion operations.\n         pub enum AstFragment {\n             OptExpr(Option<P<ast::Expr>>),\n+            MethodReceiverExpr(P<ast::Expr>),\n             $($Kind($AstTy),)*\n         }\n \n         /// \"Discriminant\" of an AST fragment.\n         #[derive(Copy, Clone, PartialEq, Eq)]\n         pub enum AstFragmentKind {\n             OptExpr,\n+            MethodReceiverExpr,\n             $($Kind,)*\n         }\n \n         impl AstFragmentKind {\n             pub fn name(self) -> &'static str {\n                 match self {\n                     AstFragmentKind::OptExpr => \"expression\",\n+                    AstFragmentKind::MethodReceiverExpr => \"expression\",\n                     $(AstFragmentKind::$Kind => $kind_name,)*\n                 }\n             }\n@@ -72,6 +75,8 @@ macro_rules! ast_fragments {\n                 match self {\n                     AstFragmentKind::OptExpr =>\n                         result.make_expr().map(Some).map(AstFragment::OptExpr),\n+                    AstFragmentKind::MethodReceiverExpr =>\n+                        result.make_expr().map(AstFragment::MethodReceiverExpr),\n                     $(AstFragmentKind::$Kind => result.$make_ast().map(AstFragment::$Kind),)*\n                 }\n             }\n@@ -98,6 +103,13 @@ macro_rules! ast_fragments {\n                 }\n             }\n \n+            pub fn make_method_receiver_expr(self) -> P<ast::Expr> {\n+                match self {\n+                    AstFragment::MethodReceiverExpr(expr) => expr,\n+                    _ => panic!(\"AstFragment::make_* called on the wrong kind of fragment\"),\n+                }\n+            }\n+\n             $(pub fn $make_ast(self) -> $AstTy {\n                 match self {\n                     AstFragment::$Kind(ast) => ast,\n@@ -120,6 +132,7 @@ macro_rules! ast_fragments {\n                             }\n                         });\n                     }\n+                    AstFragment::MethodReceiverExpr(expr) => vis.visit_method_receiver_expr(expr),\n                     $($(AstFragment::$Kind(ast) => vis.$mut_visit_ast(ast),)?)*\n                     $($(AstFragment::$Kind(ast) =>\n                         ast.flat_map_in_place(|ast| vis.$flat_map_ast_elt(ast)),)?)*\n@@ -130,6 +143,7 @@ macro_rules! ast_fragments {\n                 match *self {\n                     AstFragment::OptExpr(Some(ref expr)) => visitor.visit_expr(expr),\n                     AstFragment::OptExpr(None) => {}\n+                    AstFragment::MethodReceiverExpr(ref expr) => visitor.visit_method_receiver_expr(expr),\n                     $($(AstFragment::$Kind(ref ast) => visitor.$visit_ast(ast),)?)*\n                     $($(AstFragment::$Kind(ref ast) => for ast_elt in &ast[..] {\n                         visitor.$visit_ast_elt(ast_elt, $($args)*);\n@@ -222,6 +236,7 @@ impl AstFragmentKind {\n         match self {\n             AstFragmentKind::OptExpr\n             | AstFragmentKind::Expr\n+            | AstFragmentKind::MethodReceiverExpr\n             | AstFragmentKind::Stmts\n             | AstFragmentKind::Ty\n             | AstFragmentKind::Pat => SupportsMacroExpansion::Yes { supports_inner_attrs: false },\n@@ -285,6 +300,9 @@ impl AstFragmentKind {\n             AstFragmentKind::Expr => AstFragment::Expr(\n                 items.next().expect(\"expected exactly one expression\").expect_expr(),\n             ),\n+            AstFragmentKind::MethodReceiverExpr => AstFragment::MethodReceiverExpr(\n+                items.next().expect(\"expected exactly one expression\").expect_expr(),\n+            ),\n             AstFragmentKind::OptExpr => {\n                 AstFragment::OptExpr(items.next().map(Annotatable::expect_expr))\n             }\n@@ -893,6 +911,7 @@ pub fn parse_ast_fragment<'a>(\n             AstFragment::Stmts(stmts)\n         }\n         AstFragmentKind::Expr => AstFragment::Expr(this.parse_expr()?),\n+        AstFragmentKind::MethodReceiverExpr => AstFragment::MethodReceiverExpr(this.parse_expr()?),\n         AstFragmentKind::OptExpr => {\n             if this.token != token::Eof {\n                 AstFragment::OptExpr(Some(this.parse_expr()?))\n@@ -1477,6 +1496,42 @@ impl InvocationCollectorNode for AstNodeWrapper<P<ast::Expr>, OptExprTag> {\n     }\n }\n \n+/// This struct is a hack to workaround unstable of `stmt_expr_attributes`.\n+/// It can be removed once that feature is stabilized.\n+struct MethodReceiverTag;\n+impl DummyAstNode for MethodReceiverTag {\n+    fn dummy() -> MethodReceiverTag {\n+        MethodReceiverTag\n+    }\n+}\n+impl InvocationCollectorNode for AstNodeWrapper<P<ast::Expr>, MethodReceiverTag> {\n+    type OutputTy = Self;\n+    type AttrsTy = ast::AttrVec;\n+    const KIND: AstFragmentKind = AstFragmentKind::MethodReceiverExpr;\n+    fn descr() -> &'static str {\n+        \"an expression\"\n+    }\n+    fn to_annotatable(self) -> Annotatable {\n+        Annotatable::Expr(self.wrapped)\n+    }\n+    fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {\n+        AstNodeWrapper::new(fragment.make_method_receiver_expr(), MethodReceiverTag)\n+    }\n+    fn noop_visit<V: MutVisitor>(&mut self, visitor: &mut V) {\n+        noop_visit_expr(&mut self.wrapped, visitor)\n+    }\n+    fn is_mac_call(&self) -> bool {\n+        matches!(self.wrapped.kind, ast::ExprKind::MacCall(..))\n+    }\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n+        let node = self.wrapped.into_inner();\n+        match node.kind {\n+            ExprKind::MacCall(mac) => (mac, node.attrs, AddSemicolon::No),\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n struct InvocationCollector<'a, 'b> {\n     cx: &'a mut ExtCtxt<'b>,\n     invocations: Vec<(Invocation, Option<Lrc<SyntaxExtension>>)>,\n@@ -1840,6 +1895,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         self.visit_node(node)\n     }\n \n+    fn visit_method_receiver_expr(&mut self, node: &mut P<ast::Expr>) {\n+        visit_clobber(node, |node| {\n+            let mut wrapper = AstNodeWrapper::new(node, MethodReceiverTag);\n+            self.visit_node(&mut wrapper);\n+            wrapper.wrapped\n+        })\n+    }\n+\n     fn filter_map_expr(&mut self, node: P<ast::Expr>) -> Option<P<ast::Expr>> {\n         self.flat_map_node(AstNodeWrapper::new(node, OptExprTag))\n     }"}, {"sha": "faaf3b3fea58916ae2740546351fcfbc1cb0301a", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -55,6 +55,7 @@ pub fn placeholder(\n         }),\n         AstFragmentKind::Expr => AstFragment::Expr(expr_placeholder()),\n         AstFragmentKind::OptExpr => AstFragment::OptExpr(Some(expr_placeholder())),\n+        AstFragmentKind::MethodReceiverExpr => AstFragment::MethodReceiverExpr(expr_placeholder()),\n         AstFragmentKind::Items => AstFragment::Items(smallvec![P(ast::Item {\n             id,\n             span,\n@@ -296,6 +297,13 @@ impl MutVisitor for PlaceholderExpander {\n         }\n     }\n \n+    fn visit_method_receiver_expr(&mut self, expr: &mut P<ast::Expr>) {\n+        match expr.kind {\n+            ast::ExprKind::MacCall(_) => *expr = self.remove(expr.id).make_method_receiver_expr(),\n+            _ => noop_visit_expr(expr, self),\n+        }\n+    }\n+\n     fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n         match expr.kind {\n             ast::ExprKind::MacCall(_) => self.remove(expr.id).make_opt_expr(),"}, {"sha": "61ad3b8c17ab2fb1bd0430045fc9b65e7d3e8d3a", "filename": "src/test/ui/cfg/cfg-method-receiver-ok.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver-ok.rs?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+macro_rules! foo {\n+    () => {\n+        #[allow(unreachable_patterns)]\n+        {\n+            123i32\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let _ = foo!().abs();\n+}"}, {"sha": "71134ff17b5278def8fac46312b82f0a176f833f", "filename": "src/test/ui/cfg/cfg-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.rs?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -7,6 +7,5 @@ macro_rules! cbor_map {\n \n fn main() {\n     cbor_map! { #[cfg(test)] 4};\n-    //~^ ERROR attributes on expressions are experimental\n-    //~| ERROR removing an expression is not supported in this position\n+    //~^ ERROR removing an expression is not supported in this position\n }"}, {"sha": "5767a7c1b4b1cb4668c97fb93ed501d49b275f1b", "filename": "src/test/ui/cfg/cfg-method-receiver.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.stderr?ref=c9a04cddc02a5b2eaa419dcfdb4e75983a2ab8cd", "patch": "@@ -1,12 +1,3 @@\n-error[E0658]: attributes on expressions are experimental\n-  --> $DIR/cfg-method-receiver.rs:9:17\n-   |\n-LL |     cbor_map! { #[cfg(test)] 4};\n-   |                 ^^^^^^^^^^^^\n-   |\n-   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n-   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n-\n error: removing an expression is not supported in this position\n   --> $DIR/cfg-method-receiver.rs:9:17\n    |\n@@ -28,7 +19,6 @@ help: you must specify a concrete type for this numeric value, like `i32`\n LL |     cbor_map! { #[cfg(test)] 4_i32};\n    |                              ~~~~~\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0658, E0689.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0689`."}]}