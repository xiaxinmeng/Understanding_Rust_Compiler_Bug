{"sha": "647da97622a4df64b4e67a2b11a73f60035874a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0N2RhOTc2MjJhNGRmNjRiNGU2N2EyYjExYTczZjYwMDM1ODc0YTk=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-01-16T13:01:07Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-01-16T13:01:07Z"}, "message": "Lint for numeric literals that have a better representation in another format", "tree": {"sha": "5fe6ba09836f09d00f0e9daacef98d00567b3496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe6ba09836f09d00f0e9daacef98d00567b3496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/647da97622a4df64b4e67a2b11a73f60035874a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/647da97622a4df64b4e67a2b11a73f60035874a9", "html_url": "https://github.com/rust-lang/rust/commit/647da97622a4df64b4e67a2b11a73f60035874a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/647da97622a4df64b4e67a2b11a73f60035874a9/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e2b7a4d62290c7243946ec53546151247f0a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e2b7a4d62290c7243946ec53546151247f0a58", "html_url": "https://github.com/rust-lang/rust/commit/61e2b7a4d62290c7243946ec53546151247f0a58"}], "stats": {"total": 266, "additions": 252, "deletions": 14}, "files": [{"sha": "f893a3d45e3fe938410815a8b0a4bb5a0096413b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/647da97622a4df64b4e67a2b11a73f60035874a9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647da97622a4df64b4e67a2b11a73f60035874a9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=647da97622a4df64b4e67a2b11a73f60035874a9", "patch": "@@ -116,7 +116,7 @@ pub mod large_enum_variant;\n pub mod len_zero;\n pub mod let_if_seq;\n pub mod lifetimes;\n-pub mod literal_digit_grouping;\n+pub mod literal_representation;\n pub mod loops;\n pub mod map_clone;\n pub mod matches;\n@@ -353,7 +353,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box explicit_write::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n-    reg.register_early_lint_pass(box literal_digit_grouping::LiteralDigitGrouping);\n+    reg.register_early_lint_pass(box literal_representation::LiteralDigitGrouping);\n+    reg.register_early_lint_pass(box literal_representation::LiteralRepresentation);\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);\n@@ -482,9 +483,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         let_if_seq::USELESS_LET_IF_SEQ,\n         lifetimes::NEEDLESS_LIFETIMES,\n         lifetimes::UNUSED_LIFETIMES,\n-        literal_digit_grouping::INCONSISTENT_DIGIT_GROUPING,\n-        literal_digit_grouping::LARGE_DIGIT_GROUPS,\n-        literal_digit_grouping::UNREADABLE_LITERAL,\n+        literal_representation::INCONSISTENT_DIGIT_GROUPING,\n+        literal_representation::LARGE_DIGIT_GROUPS,\n+        literal_representation::UNREADABLE_LITERAL,\n+        literal_representation::BAD_LITERAL_REPRESENTATION,\n         loops::EMPTY_LOOP,\n         loops::EXPLICIT_COUNTER_LOOP,\n         loops::EXPLICIT_INTO_ITER_LOOP,"}, {"sha": "91f01bae257ddf426c47f91e5efbfcdfcb3b813e", "filename": "clippy_lints/src/literal_representation.rs", "status": "renamed", "additions": 121, "deletions": 5, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/647da97622a4df64b4e67a2b11a73f60035874a9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647da97622a4df64b4e67a2b11a73f60035874a9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=647da97622a4df64b4e67a2b11a73f60035874a9", "patch": "@@ -62,7 +62,25 @@ declare_lint! {\n     \"grouping digits into groups that are too large\"\n }\n \n-#[derive(Debug)]\n+/// **What it does:** Warns if there is a better representation for a numeric literal.\n+///\n+/// **Why is this bad?** Especially for big powers of 2 a hexadecimal representation is more\n+/// readable than a decimal representation.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// `255` => `0xFF`\n+/// `65_535` => `0xFFFF`\n+/// `4_042_322_160` => `0xF0F0_F0F0`\n+declare_lint! {\n+    pub BAD_LITERAL_REPRESENTATION,\n+    Warn,\n+    \"using decimal representation when hexadecimal would be better\"\n+}\n+\n+#[derive(Debug, PartialEq)]\n enum Radix {\n     Binary,\n     Octal,\n@@ -168,7 +186,12 @@ impl<'a> DigitInfo<'a> {\n                 .map(|chunk| chunk.into_iter().collect())\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n-            format!(\"{}.{}{}\", int_part_hint, frac_part_hint, self.suffix.unwrap_or(\"\"))\n+            format!(\n+                \"{}.{}{}\",\n+                int_part_hint,\n+                frac_part_hint,\n+                self.suffix.unwrap_or(\"\")\n+            )\n         } else {\n             let hint = self.digits\n                 .chars()\n@@ -180,7 +203,12 @@ impl<'a> DigitInfo<'a> {\n                 .rev()\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n-            format!(\"{}{}{}\", self.prefix.unwrap_or(\"\"), hint, self.suffix.unwrap_or(\"\"))\n+            format!(\n+                \"{}{}{}\",\n+                self.prefix.unwrap_or(\"\"),\n+                hint,\n+                self.suffix.unwrap_or(\"\")\n+            )\n         }\n     }\n }\n@@ -189,9 +217,9 @@ enum WarningType {\n     UnreadableLiteral,\n     InconsistentDigitGrouping,\n     LargeDigitGroups,\n+    BadRepresentation,\n }\n \n-\n impl WarningType {\n     pub fn display(&self, grouping_hint: &str, cx: &EarlyContext, span: &syntax_pos::Span) {\n         match *self {\n@@ -216,6 +244,13 @@ impl WarningType {\n                 \"digits grouped inconsistently by underscores\",\n                 &format!(\"consider: {}\", grouping_hint),\n             ),\n+            WarningType::BadRepresentation => span_help_and_lint(\n+                cx,\n+                BAD_LITERAL_REPRESENTATION,\n+                *span,\n+                \"bad representation of integer literal\",\n+                &format!(\"consider: {}\", grouping_hint),\n+            ),\n         };\n     }\n }\n@@ -225,7 +260,11 @@ pub struct LiteralDigitGrouping;\n \n impl LintPass for LiteralDigitGrouping {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNREADABLE_LITERAL, INCONSISTENT_DIGIT_GROUPING, LARGE_DIGIT_GROUPS)\n+        lint_array!(\n+            UNREADABLE_LITERAL,\n+            INCONSISTENT_DIGIT_GROUPING,\n+            LARGE_DIGIT_GROUPS\n+        )\n     }\n }\n \n@@ -353,3 +392,80 @@ impl LiteralDigitGrouping {\n         }\n     }\n }\n+\n+#[derive(Copy, Clone)]\n+pub struct LiteralRepresentation;\n+\n+impl LintPass for LiteralRepresentation {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(BAD_LITERAL_REPRESENTATION)\n+    }\n+}\n+\n+impl EarlyLintPass for LiteralRepresentation {\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+        if in_external_macro(cx, expr.span) {\n+            return;\n+        }\n+\n+        if let ExprKind::Lit(ref lit) = expr.node {\n+            self.check_lit(cx, lit)\n+        }\n+    }\n+}\n+\n+impl LiteralRepresentation {\n+    fn check_lit(&self, cx: &EarlyContext, lit: &Lit) {\n+        // Lint integral literals.\n+        if_chain! {\n+            if let LitKind::Int(..) = lit.node;\n+            if let Some(src) = snippet_opt(cx, lit.span);\n+            if let Some(firstch) = src.chars().next();\n+            if char::to_digit(firstch, 10).is_some();\n+            then {\n+                let digit_info = DigitInfo::new(&src, false);\n+                if digit_info.radix == Radix::Decimal {\n+                    let hex = format!(\"{:#X}\", digit_info.digits\n+                                                            .chars()\n+                                                            .filter(|&c| c != '_')\n+                                                            .collect::<String>()\n+                                                            .parse::<u128>().unwrap());\n+                    let digit_info = DigitInfo::new(&hex[..], false);\n+                    let _ = Self::do_lint(digit_info.digits).map_err(|warning_type| {\n+                        warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    fn do_lint(digits: &str) -> Result<(), WarningType> {\n+        if digits.len() == 2 && digits == \"FF\" {\n+            return Err(WarningType::BadRepresentation);\n+        } else if digits.len() == 3 {\n+            // Lint for Literals with a hex-representation of 3 digits\n+            let f = &digits[0..1]; // first digit\n+            let s = &digits[1..]; // suffix\n+                                  // Powers of 2 minus 1\n+            if (f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && s.eq(\"FF\") {\n+                return Err(WarningType::BadRepresentation);\n+            }\n+        } else if digits.len() > 3 {\n+            // Lint for Literals with a hex-representation of 4 digits or more\n+            let f = &digits[0..1]; // first digit\n+            let m = &digits[1..digits.len() - 1]; // middle digits, except last\n+            let s = &digits[1..]; // suffix\n+                                  // Powers of 2 with a margin of +15/-16\n+            if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && m.chars().all(|c| c == '0'))\n+                || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && m.chars().all(|c| c == 'F'))\n+                // Lint for representations with only 0s and Fs, while allowing 7 as the first\n+                // digit\n+                || ((f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == '0' || c == 'F'))\n+            {\n+                return Err(WarningType::BadRepresentation);\n+            }\n+        }\n+\n+        Ok(())\n+    }\n+}", "previous_filename": "clippy_lints/src/literal_digit_grouping.rs"}, {"sha": "00126152fe15d41a84fbe1cdfeca0b466243f108", "filename": "tests/ui/bad_literal_representation.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fbad_literal_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fbad_literal_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbad_literal_representation.rs?ref=647da97622a4df64b4e67a2b11a73f60035874a9", "patch": "@@ -0,0 +1,23 @@\n+\n+\n+\n+#[warn(bad_literal_representation)]\n+#[allow(unused_variables)]\n+fn main() {\n+    // Hex:      7F,  80, 100,  800,  FFA,   F0F3,     7F0F_F00D\n+    let good = (127, 128, 256, 2048, 4090, 61_683, 2_131_750_925);\n+    let bad = (        // Hex:\n+        255,           // 0xFF\n+        511,           // 0x1FF\n+        1023,          // 0x3FF\n+        2047,          // 0x7FF\n+        4095,          // 0xFFF\n+        4096,          // 0x1000\n+        16_371,        // 0x3FF3\n+        32_773,        // 0x8005\n+        65_280,        // 0xFF00\n+        2_131_750_927, // 0x7F0F_F00F\n+        2_147_483_647, // 0x7FFF_FFFF\n+        4_042_322_160, // 0xF0F0_F0F0\n+    );\n+}"}, {"sha": "f57956c23d65eff9fc702cb470354d7bdf9e93fa", "filename": "tests/ui/bad_literal_representation.stderr", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fbad_literal_representation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fbad_literal_representation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbad_literal_representation.stderr?ref=647da97622a4df64b4e67a2b11a73f60035874a9", "patch": "@@ -0,0 +1,97 @@\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:10:9\n+   |\n+10 |         255,           // 0xFF\n+   |         ^^^\n+   |\n+   = note: `-D bad-literal-representation` implied by `-D warnings`\n+   = help: consider: 0xFF\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:11:9\n+   |\n+11 |         511,           // 0x1FF\n+   |         ^^^\n+   |\n+   = help: consider: 0x1FF\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:12:9\n+   |\n+12 |         1023,          // 0x3FF\n+   |         ^^^^\n+   |\n+   = help: consider: 0x3FF\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:13:9\n+   |\n+13 |         2047,          // 0x7FF\n+   |         ^^^^\n+   |\n+   = help: consider: 0x7FF\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:14:9\n+   |\n+14 |         4095,          // 0xFFF\n+   |         ^^^^\n+   |\n+   = help: consider: 0xFFF\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:15:9\n+   |\n+15 |         4096,          // 0x1000\n+   |         ^^^^\n+   |\n+   = help: consider: 0x1000\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:16:9\n+   |\n+16 |         16_371,        // 0x3FF3\n+   |         ^^^^^^\n+   |\n+   = help: consider: 0x3FF3\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:17:9\n+   |\n+17 |         32_773,        // 0x8005\n+   |         ^^^^^^\n+   |\n+   = help: consider: 0x8005\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:18:9\n+   |\n+18 |         65_280,        // 0xFF00\n+   |         ^^^^^^\n+   |\n+   = help: consider: 0xFF00\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:19:9\n+   |\n+19 |         2_131_750_927, // 0x7F0F_F00F\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = help: consider: 0x7F0F_F00F\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:20:9\n+   |\n+20 |         2_147_483_647, // 0x7FFF_FFFF\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = help: consider: 0x7FFF_FFFF\n+\n+error: bad representation of integer literal\n+  --> $DIR/bad_literal_representation.rs:21:9\n+   |\n+21 |         4_042_322_160, // 0xF0F0_F0F0\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = help: consider: 0xF0F0_F0F0\n+"}, {"sha": "a4d38d99c95ed22b594b07ef1fadbb0167961671", "filename": "tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=647da97622a4df64b4e67a2b11a73f60035874a9", "patch": "@@ -42,7 +42,7 @@ fn main() {\n     forget(s4);\n     forget(s5);\n \n-    let a1 = AnotherStruct {x: 255, y: 0, z: vec![1, 2, 3]};\n+    let a1 = AnotherStruct {x: 0xFF, y: 0, z: vec![1, 2, 3]};\n     let a2 = &a1;\n     let mut a3 = a1.clone();\n     let ref a4 = a1;"}, {"sha": "d4bc7df44247bcadccd29c444190288e72698bf7", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=647da97622a4df64b4e67a2b11a73f60035874a9", "patch": "@@ -29,5 +29,5 @@ fn main() {\n     -1 & x;\n \n     let u : u8 = 0;\n-    u & 255;\n+    u & 0xFF;\n }"}, {"sha": "b3f7bb713e6959cc1675d8ababfcd2c22d516c2a", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/647da97622a4df64b4e67a2b11a73f60035874a9/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=647da97622a4df64b4e67a2b11a73f60035874a9", "patch": "@@ -45,6 +45,6 @@ error: the operation is ineffective. Consider reducing it to `x`\n error: the operation is ineffective. Consider reducing it to `u`\n   --> $DIR/identity_op.rs:32:5\n    |\n-32 |     u & 255;\n-   |     ^^^^^^^\n+32 |     u & 0xFF;\n+   |     ^^^^^^^^\n "}]}