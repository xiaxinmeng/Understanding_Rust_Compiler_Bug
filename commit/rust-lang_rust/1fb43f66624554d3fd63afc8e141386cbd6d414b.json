{"sha": "1fb43f66624554d3fd63afc8e141386cbd6d414b", "node_id": "C_kwDOAAsO6NoAKDFmYjQzZjY2NjI0NTU0ZDNmZDYzYWZjOGUxNDEzODZjYmQ2ZDQxNGI", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-01-16T00:33:19Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-03-22T18:07:23Z"}, "message": "add perf side effect docs to `Iterator::cloned()`", "tree": {"sha": "c454cca5681cc7d3b5cd189755ea6cf04cf39530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c454cca5681cc7d3b5cd189755ea6cf04cf39530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fb43f66624554d3fd63afc8e141386cbd6d414b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb43f66624554d3fd63afc8e141386cbd6d414b", "html_url": "https://github.com/rust-lang/rust/commit/1fb43f66624554d3fd63afc8e141386cbd6d414b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fb43f66624554d3fd63afc8e141386cbd6d414b/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea44938e21f0de8ae7d4f6399a8a30f97867c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea44938e21f0de8ae7d4f6399a8a30f97867c70", "html_url": "https://github.com/rust-lang/rust/commit/3ea44938e21f0de8ae7d4f6399a8a30f97867c70"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "53fbe4cbc42f53fca6dd42ccfa1c59b53c29522f", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1fb43f66624554d3fd63afc8e141386cbd6d414b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb43f66624554d3fd63afc8e141386cbd6d414b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=1fb43f66624554d3fd63afc8e141386cbd6d414b", "patch": "@@ -3189,6 +3189,10 @@ pub trait Iterator {\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n+    /// There is no guarantee whatsoever about the `clone` method actually\n+    /// being called *or* optimized away. So code should not depend on\n+    /// either.\n+    ///\n     /// [`clone`]: Clone::clone\n     ///\n     /// # Examples\n@@ -3206,6 +3210,18 @@ pub trait Iterator {\n     /// assert_eq!(v_cloned, vec![1, 2, 3]);\n     /// assert_eq!(v_map, vec![1, 2, 3]);\n     /// ```\n+    ///\n+    /// To get the best performance, try to clone late:\n+    ///\n+    /// ```\n+    /// let a = [vec![0_u8, 1, 2], vec![3, 4], vec![23]];\n+    /// // don't do this:\n+    /// let slower: Vec<_> = a.iter().cloned().filter(|s| s.len() == 1).collect();\n+    /// assert_eq!(&[vec![23]], &slower[..]);\n+    /// // instead call `cloned` late\n+    /// let faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();\n+    /// assert_eq!(&[vec![23]], &faster[..]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n     where"}]}