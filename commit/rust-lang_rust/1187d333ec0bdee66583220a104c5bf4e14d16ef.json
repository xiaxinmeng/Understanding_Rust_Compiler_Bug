{"sha": "1187d333ec0bdee66583220a104c5bf4e14d16ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExODdkMzMzZWMwYmRlZTY2NTgzMjIwYTEwNGM1YmY0ZTE0ZDE2ZWY=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-11-01T08:07:51Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-11-01T08:08:47Z"}, "message": "Add tests for `get_unwrap` lint", "tree": {"sha": "be1e7703104bf20ae92de4b06e2cfa30967958a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be1e7703104bf20ae92de4b06e2cfa30967958a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1187d333ec0bdee66583220a104c5bf4e14d16ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1187d333ec0bdee66583220a104c5bf4e14d16ef", "html_url": "https://github.com/rust-lang/rust/commit/1187d333ec0bdee66583220a104c5bf4e14d16ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1187d333ec0bdee66583220a104c5bf4e14d16ef/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7", "html_url": "https://github.com/rust-lang/rust/commit/c5e270a1aa8bf3fdbc26230532b32e46fe1d44a7"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "4ace6909f8ffc267a605c8b002492a5fe0f1151a", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1187d333ec0bdee66583220a104c5bf4e14d16ef/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1187d333ec0bdee66583220a104c5bf4e14d16ef/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=1187d333ec0bdee66583220a104c5bf4e14d16ef", "patch": "@@ -10,6 +10,7 @@ use std::collections::HashMap;\n use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::ops::Mul;\n+use std::iter::FromIterator;\n \n struct T;\n \n@@ -388,6 +389,75 @@ fn iter_skip_next() {\n     let _ = foo.filter().skip(42).next();\n }\n \n+struct GetFalsePositive {\n+    arr: [u32; 3],\n+}\n+\n+impl GetFalsePositive {\n+    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n+}\n+\n+/// Checks implementation of `GET_UNWRAP` lint\n+fn get_unwrap() {\n+    let mut some_slice = &mut [0, 1, 2, 3];\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n+\n+    { // Test `get().unwrap()`\n+        let _ = some_slice.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_slice[0]\n+        let _ = some_vec.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_vec[0]\n+        let _ = some_vecdeque.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_vecdeque[0]\n+        let _ = some_hashmap.get(&1).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_hashmap[&1]\n+        let _ = some_btreemap.get(&1).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_btreemap[&1]\n+\n+        let _ = false_positive.get(0).unwrap();\n+    }\n+\n+    { // Test `get_mut().unwrap()`\n+        *some_slice.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_slice[0]\n+        *some_vec.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_vec[0]\n+        *some_vecdeque.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_vecdeque[0]\n+        *some_hashmap.get_mut(&1).unwrap() = 'b';\n+        //~^ERROR called `.get_mut().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_hashmap[&1]\n+        *some_btreemap.get_mut(&1).unwrap() = 'b';\n+        //~^ERROR called `.get_mut().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_btreemap[&1]\n+\n+        *false_positive.get_mut(0).unwrap() = 1;\n+    }\n+}\n+\n \n #[allow(similar_names)]\n fn main() {"}]}