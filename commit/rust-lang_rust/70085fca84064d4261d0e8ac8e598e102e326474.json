{"sha": "70085fca84064d4261d0e8ac8e598e102e326474", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMDg1ZmNhODQwNjRkNDI2MWQwZThhYzhlNTk4ZTEwMmUzMjY0NzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-09T20:26:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-09T20:26:14Z"}, "message": "Try harder to format function sigs\n\nFixes #1363", "tree": {"sha": "a19d205019a15cc712ec76e0973a01867bd83bdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19d205019a15cc712ec76e0973a01867bd83bdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70085fca84064d4261d0e8ac8e598e102e326474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70085fca84064d4261d0e8ac8e598e102e326474", "html_url": "https://github.com/rust-lang/rust/commit/70085fca84064d4261d0e8ac8e598e102e326474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70085fca84064d4261d0e8ac8e598e102e326474/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3aad6ee83a73be49132b65ea8abc099ae8da027", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3aad6ee83a73be49132b65ea8abc099ae8da027", "html_url": "https://github.com/rust-lang/rust/commit/e3aad6ee83a73be49132b65ea8abc099ae8da027"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "acddabd93fecf382ac1742c778d349de0b842c7e", "filename": "src/items.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/70085fca84064d4261d0e8ac8e598e102e326474/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70085fca84064d4261d0e8ac8e598e102e326474/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=70085fca84064d4261d0e8ac8e598e102e326474", "patch": "@@ -1468,7 +1468,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n                                                  generics_span));\n     result.push_str(&generics_str);\n \n-    // Note that if the width and indent really matter, we'll re-layout the\n+    // Note that the width and indent don't really matter, we'll re-layout the\n     // return type later anyway.\n     let ret_str = try_opt!(fd.output.rewrite(&context,\n                                              Shape::legacy(context.config.max_width -\n@@ -1602,7 +1602,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n             Indent::new(indent.width(), result.len())\n         };\n \n-        if multi_line_ret_str {\n+        if multi_line_ret_str || ret_should_indent {\n             // Now that we know the proper indent and width, we need to\n             // re-layout the return type.\n             let budget = try_opt!(context.config.max_width.checked_sub(ret_indent.width()));\n@@ -1635,29 +1635,40 @@ fn rewrite_fn_base(context: &RewriteContext,\n         _ => false,\n     } || (put_args_in_block && ret_str.is_empty());\n \n-    let where_density = if should_compress_where {\n-        Density::Compressed\n-    } else {\n-        Density::Tall\n-    };\n+    if where_clause.predicates.len() == 1 && should_compress_where {\n+        let budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n+        if let Some(where_clause_str) =\n+            rewrite_where_clause(context,\n+                                 where_clause,\n+                                 context.config.fn_brace_style,\n+                                 Shape::legacy(budget, indent),\n+                                 Density::Compressed,\n+                                 \"{\",\n+                                 !has_body,\n+                                 put_args_in_block && ret_str.is_empty(),\n+                                 Some(span.hi)) {\n+            if last_line_width(&result) + where_clause_str.len() > context.config.max_width &&\n+               !where_clause_str.contains('\\n') {\n+                result.push('\\n');\n+            }\n \n-    // Where clause.\n-    let where_budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n+            result.push_str(&where_clause_str);\n+\n+            return Some((result, force_new_line_for_brace));\n+        }\n+    }\n+\n+    let budget = try_opt!(context.config.max_width.checked_sub(indent.block_indent));\n     let where_clause_str = try_opt!(rewrite_where_clause(context,\n                                                          where_clause,\n                                                          context.config.fn_brace_style,\n-                                                         Shape::legacy(where_budget, indent),\n-                                                         where_density,\n+                                                         Shape::legacy(budget, indent),\n+                                                         Density::Tall,\n                                                          \"{\",\n                                                          !has_body,\n                                                          put_args_in_block && ret_str.is_empty(),\n                                                          Some(span.hi)));\n \n-    if last_line_width(&result) + where_clause_str.len() > context.config.max_width &&\n-       !where_clause_str.contains('\\n') {\n-        result.push('\\n');\n-    }\n-\n     result.push_str(&where_clause_str);\n \n     Some((result, force_new_line_for_brace))"}, {"sha": "7e1787ca409b6cf806a3a75b448f77ddcc0477fd", "filename": "tests/source/pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70085fca84064d4261d0e8ac8e598e102e326474/tests%2Fsource%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70085fca84064d4261d0e8ac8e598e102e326474/tests%2Fsource%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fpattern.rs?ref=70085fca84064d4261d0e8ac8e598e102e326474", "patch": "@@ -42,4 +42,3 @@ impl<'a,'b> ResolveGeneratedContentFragmentMutator<'a,'b> {\n fn issue_1319() {\n     if let (Event { .. }, .. ) = ev_state {}\n }\n-"}, {"sha": "01806ac3cd8ae0980daa98a5f049e2a3b7cc8b4d", "filename": "tests/target/fn.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70085fca84064d4261d0e8ac8e598e102e326474/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70085fca84064d4261d0e8ac8e598e102e326474/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=70085fca84064d4261d0e8ac8e598e102e326474", "patch": "@@ -81,12 +81,10 @@ fn foo(a: i32) -> i32 {\n     if a > 0 { 1 } else { 2 }\n }\n \n-fn ______________________baz(a: i32)\n-    ->\n-        *mut ::std::option::Option<extern \"C\" fn(arg1: i32,\n-                                                _____________________a: i32,\n-                                                arg3: i32)\n--> ()>{\n+fn ______________________baz\n+    (a: i32)\n+     -> *mut ::std::option::Option<extern \"C\" fn(arg1: i32, _____________________a: i32, arg3: i32)\n+                                                 -> ()> {\n }\n \n pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}