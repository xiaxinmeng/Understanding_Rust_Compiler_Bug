{"sha": "1c7738d38a09aecbd88d1e8eb540619ffa733468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNzczOGQzOGEwOWFlY2JkODhkMWU4ZWI1NDA2MTlmZmE3MzM0Njg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-02-19T01:06:22Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-02-19T01:06:22Z"}, "message": "Update for changes in rustc master.", "tree": {"sha": "3c61971bf209002336750416c55bc5f4b8d7f92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c61971bf209002336750416c55bc5f4b8d7f92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7738d38a09aecbd88d1e8eb540619ffa733468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7738d38a09aecbd88d1e8eb540619ffa733468", "html_url": "https://github.com/rust-lang/rust/commit/1c7738d38a09aecbd88d1e8eb540619ffa733468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7738d38a09aecbd88d1e8eb540619ffa733468/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b19b24a2d99dd90d213576a74502a32c5811f90d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b19b24a2d99dd90d213576a74502a32c5811f90d", "html_url": "https://github.com/rust-lang/rust/commit/b19b24a2d99dd90d213576a74502a32c5811f90d"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "9308a6dc80e2e10693aae52d28efcf53a38b5055", "filename": "src/interpreter.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c7738d38a09aecbd88d1e8eb540619ffa733468/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7738d38a09aecbd88d1e8eb540619ffa733468/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=1c7738d38a09aecbd88d1e8eb540619ffa733468", "patch": "@@ -1,7 +1,7 @@\n use rustc::middle::{const_eval, def_id, ty};\n use rustc::middle::cstore::CrateStore;\n use rustc::mir::repr::{self as mir, Mir};\n-use rustc_mir::mir_map::MirMap;\n+use rustc::mir::mir_map::MirMap;\n use syntax::ast::Attribute;\n use syntax::attr::AttrMetaMethods;\n \n@@ -154,10 +154,6 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                         let value = self.eval_rvalue(rvalue);\n                         self.write_pointer(ptr, value);\n                     }\n-\n-                    mir::StatementKind::Drop(_kind, ref _lv) => {\n-                        // TODO\n-                    },\n                 }\n             }\n \n@@ -167,14 +163,14 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 mir::Terminator::Return => break,\n                 mir::Terminator::Goto { target } => block = target,\n \n-                mir::Terminator::Call { ref func, ref args, ref kind } => {\n-                    let ptr = kind.destination().map(|dest| self.eval_lvalue(dest));\n+                mir::Terminator::Call { ref func, ref args, ref destination, .. } => {\n+                    let ptr = destination.as_ref().map(|&(ref lv, _)| self.eval_lvalue(lv));\n                     let func_val = self.eval_operand(func);\n \n                     if let Value::Func(def_id) = func_val {\n                         let mir_data;\n                         let mir = match self.tcx.map.as_local_node_id(def_id) {\n-                            Some(node_id) => self.mir_map.get(&node_id).unwrap(),\n+                            Some(node_id) => self.mir_map.map.get(&node_id).unwrap(),\n                             None => {\n                                 let cstore = &self.tcx.sess.cstore;\n                                 mir_data = cstore.maybe_get_item_mir(self.tcx, def_id).unwrap();\n@@ -187,11 +183,8 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n \n                         self.call(mir, &arg_vals, ptr);\n \n-                        match *kind {\n-                            mir::CallKind::Converging { target: success_target, .. } |\n-                            mir::CallKind::ConvergingCleanup { targets: (success_target, _), .. }\n-                            => { block = success_target; }\n-                            _ => {}\n+                        if let Some((_, target)) = *destination {\n+                            block = target;\n                         }\n                     } else {\n                         panic!(\"tried to call a non-function value: {:?}\", func_val);\n@@ -225,6 +218,11 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                     }\n                 }\n \n+                mir::Terminator::Drop { target, .. } => {\n+                    // TODO: Handle destructors and dynamic drop.\n+                    block = target;\n+                }\n+\n                 mir::Terminator::Resume => unimplemented!(),\n             }\n         }\n@@ -403,7 +401,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n }\n \n pub fn interpret_start_points<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &MirMap<'tcx>) {\n-    for (&id, mir) in mir_map {\n+    for (&id, mir) in &mir_map.map {\n         for attr in tcx.map.attrs(id) {\n             if attr.check_name(\"miri_run\") {\n                 let item = tcx.map.expect_item(id);"}]}