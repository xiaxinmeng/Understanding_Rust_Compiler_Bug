{"sha": "78224a0644249b45fc033b230dd91389a9bbed19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MjI0YTA2NDQyNDliNDVmYzAzM2IyMzBkZDkxMzg5YTliYmVkMTk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-09T17:25:26Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-09T17:25:26Z"}, "message": "Update tests", "tree": {"sha": "78d1b1ca7dac8d3d75978f9312afed759be81871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d1b1ca7dac8d3d75978f9312afed759be81871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78224a0644249b45fc033b230dd91389a9bbed19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78224a0644249b45fc033b230dd91389a9bbed19", "html_url": "https://github.com/rust-lang/rust/commit/78224a0644249b45fc033b230dd91389a9bbed19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78224a0644249b45fc033b230dd91389a9bbed19/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc63d69c3fde04404693aa685339ed9cac2dd0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc63d69c3fde04404693aa685339ed9cac2dd0a4", "html_url": "https://github.com/rust-lang/rust/commit/bc63d69c3fde04404693aa685339ed9cac2dd0a4"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "c291eca34e208b11cde248c54b88c5a8ab33c18d", "filename": "tests/target/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78224a0644249b45fc033b230dd91389a9bbed19/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78224a0644249b45fc033b230dd91389a9bbed19/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=78224a0644249b45fc033b230dd91389a9bbed19", "patch": "@@ -48,8 +48,8 @@ fn foo() -> bool {\n         // Nothing\n     }\n \n-    if let Some(x) = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-                          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)\n+    if let Some(x) =\n+        (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)\n     {}\n \n     if let ("}, {"sha": "bd6376f5153ca250aa591f506a8663c1ce16a423", "filename": "tests/target/match.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/78224a0644249b45fc033b230dd91389a9bbed19/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78224a0644249b45fc033b230dd91389a9bbed19/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=78224a0644249b45fc033b230dd91389a9bbed19", "patch": "@@ -24,14 +24,13 @@ fn foo() {\n         Patternnnnnnnnnnnnnnnnnnn |\n         Patternnnnnnnnnnnnnnnnnnn => meh,\n \n-        Patternnnnnnnnnnnnnnnnnnn |\n-        Patternnnnnnnnnnnnnnnnnnn if looooooooooooooooooong_guard => meh,\n-\n-        Patternnnnnnnnnnnnnnnnnnnnnnnnn |\n-        Patternnnnnnnnnnnnnnnnnnnnnnnnn if looooooooooooooooooooooooooooooooooooooooong_guard => {\n+        Patternnnnnnnnnnnnnnnnnnn | Patternnnnnnnnnnnnnnnnnnn if looooooooooooooooooong_guard => {\n             meh\n         }\n \n+        Patternnnnnnnnnnnnnnnnnnnnnnnnn | Patternnnnnnnnnnnnnnnnnnnnnnnnn\n+            if looooooooooooooooooooooooooooooooooooooooong_guard => meh,\n+\n         // Test that earlier patterns can take the guard space\n         (aaaa, bbbbb, ccccccc, aaaaa, bbbbbbbb, cccccc, aaaa, bbbbbbbb, cccccc, dddddd) |\n         Patternnnnnnnnnnnnnnnnnnnnnnnnn if loooooooooooooooooooooooooooooooooooooooooong_guard => {}\n@@ -230,8 +229,9 @@ fn issue355() {\n fn issue280() {\n     {\n         match x {\n-            CompressionMode::DiscardNewline |\n-            CompressionMode::CompressWhitespaceNewline => ch == '\\n',\n+            CompressionMode::DiscardNewline | CompressionMode::CompressWhitespaceNewline => {\n+                ch == '\\n'\n+            }\n             ast::ItemConst(ref typ, ref expr) => {\n                 self.process_static_or_const_item(item, &typ, &expr)\n             }\n@@ -270,8 +270,7 @@ fn issue496() {\n         {\n             {\n                 match def {\n-                    def::DefConst(def_id) |\n-                    def::DefAssociatedConst(def_id) => {\n+                    def::DefConst(def_id) | def::DefAssociatedConst(def_id) => {\n                         match const_eval::lookup_const_by_id(cx.tcx, def_id, Some(self.pat.id)) {\n                             Some(const_expr) => x,\n                         }\n@@ -285,8 +284,7 @@ fn issue496() {\n fn issue494() {\n     {\n         match stmt.node {\n-            hir::StmtExpr(ref expr, id) |\n-            hir::StmtSemi(ref expr, id) => {\n+            hir::StmtExpr(ref expr, id) | hir::StmtSemi(ref expr, id) => {\n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n                     span: stmt.span,\n                     kind: StmtKind::Expr {\n@@ -302,8 +300,18 @@ fn issue494() {\n fn issue386() {\n     match foo {\n         BiEq | BiLt | BiLe | BiNe | BiGt | BiGe => true,\n-        BiAnd | BiOr | BiAdd | BiSub | BiMul | BiDiv | BiRem | BiBitXor | BiBitAnd | BiBitOr |\n-        BiShl | BiShr => false,\n+        BiAnd |\n+        BiOr |\n+        BiAdd |\n+        BiSub |\n+        BiMul |\n+        BiDiv |\n+        BiRem |\n+        BiBitXor |\n+        BiBitAnd |\n+        BiBitOr |\n+        BiShl |\n+        BiShr => false,\n     }\n }\n "}]}