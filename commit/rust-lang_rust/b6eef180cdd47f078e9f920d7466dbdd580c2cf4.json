{"sha": "b6eef180cdd47f078e9f920d7466dbdd580c2cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZWVmMTgwY2RkNDdmMDc4ZTlmOTIwZDc0NjZkYmRkNTgwYzJjZjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-03T08:53:46Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Supress consecutive errors", "tree": {"sha": "e354e750d77e5d4f75fb626054a55a8cd3a1a00d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e354e750d77e5d4f75fb626054a55a8cd3a1a00d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6eef180cdd47f078e9f920d7466dbdd580c2cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6eef180cdd47f078e9f920d7466dbdd580c2cf4", "html_url": "https://github.com/rust-lang/rust/commit/b6eef180cdd47f078e9f920d7466dbdd580c2cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6eef180cdd47f078e9f920d7466dbdd580c2cf4/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ba103334937aacd3cc821fe75894548c40e666", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ba103334937aacd3cc821fe75894548c40e666", "html_url": "https://github.com/rust-lang/rust/commit/d8ba103334937aacd3cc821fe75894548c40e666"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "87c9511019a57c52164a2fb4186d029f06404d25", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 38, "deletions": 30, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b6eef180cdd47f078e9f920d7466dbdd580c2cf4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6eef180cdd47f078e9f920d7466dbdd580c2cf4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b6eef180cdd47f078e9f920d7466dbdd580c2cf4", "patch": "@@ -4944,11 +4944,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n         let mut infer_lifetimes = FxHashMap();\n+        let mut supress_errors = FxHashMap();\n         for &PathSeg(def_id, index) in &path_segs {\n             let seg = &segments[index];\n             let generics = self.tcx.generics_of(def_id);\n             let supress_mismatch = self.check_impl_trait(span, seg, &generics);\n-            self.check_generic_arg_count(span, seg, &generics, false, supress_mismatch);\n+            supress_errors.insert(index,\n+                self.check_generic_arg_count(span, seg, &generics, false, supress_mismatch));\n             infer_lifetimes.insert(index, if let Some(ref data) = seg.args {\n                 !data.args.iter().any(|arg| match arg {\n                     GenericArg::Lifetime(_) => true,\n@@ -4991,34 +4993,38 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     .iter()\n                     .find(|&PathSeg(did, _)| *did == def_id) {\n \n-                    if let Some(ref data) = segments[index].args {\n-                        let lifetime_offset = if infer_lifetimes[&index] {\n-                            defs.own_counts().lifetimes\n-                        } else {\n-                            0\n-                        };\n-                        let self_offset = (defs.parent_count == 0 && has_self) as usize;\n-                        let param_idx =\n-                            (param.index as usize - defs.parent_count - self_offset as usize)\n-                            .saturating_sub(lifetime_offset);\n-                        if let Some(arg) = data.args.get(param_idx) {\n-                            match param.kind {\n-                                GenericParamDefKind::Lifetime => match arg {\n-                                    GenericArg::Lifetime(lt) => {\n-                                        return AstConv::ast_region_to_region(self,\n-                                            lt, Some(param)).into();\n+                    if supress_errors[&index] {\n+                        true\n+                    } else {\n+                        if let Some(ref data) = segments[index].args {\n+                            let lifetime_offset = if infer_lifetimes[&index] {\n+                                defs.own_counts().lifetimes\n+                            } else {\n+                                0\n+                            };\n+                            let self_offset = (defs.parent_count == 0 && has_self) as usize;\n+                            let param_idx =\n+                                (param.index as usize - defs.parent_count - self_offset as usize)\n+                                .saturating_sub(lifetime_offset);\n+                            if let Some(arg) = data.args.get(param_idx) {\n+                                match param.kind {\n+                                    GenericParamDefKind::Lifetime => match arg {\n+                                        GenericArg::Lifetime(lt) => {\n+                                            return AstConv::ast_region_to_region(self,\n+                                                lt, Some(param)).into();\n+                                        }\n+                                        _ => {}\n+                                    }\n+                                    GenericParamDefKind::Type { .. } => match arg {\n+                                        GenericArg::Type(ty) => return self.to_ty(ty).into(),\n+                                        _ => {}\n                                     }\n-                                    _ => {}\n-                                }\n-                                GenericParamDefKind::Type { .. } => match arg {\n-                                    GenericArg::Type(ty) => return self.to_ty(ty).into(),\n-                                    _ => {}\n                                 }\n                             }\n                         }\n-                    }\n \n-                    segments[index].infer_types\n+                        segments[index].infer_types\n+                    }\n                 } else {\n                     true\n                 };\n@@ -5129,7 +5135,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                segment: &hir::PathSegment,\n                                generics: &ty::Generics,\n                                is_method_call: bool,\n-                               supress_mismatch_error: bool) {\n+                               supress_mismatch_error: bool)\n+                               -> bool {\n+        let mut supress_errors = false;\n         let (mut lifetimes, mut types) = (vec![], vec![]);\n         let infer_types = segment.infer_types;\n         let mut bindings = vec![];\n@@ -5173,8 +5181,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // To prevent derived errors to accumulate due to extra\n             // type parameters, we force instantiate_value_path to\n             // use inference variables instead of the provided types.\n-            // FIXME(varkor)\n-            // *segment = None;\n+            supress_errors = true;\n             let span = types[ty_accepted].span;\n             Some((struct_span_err!(self.tcx.sess, span, E0087,\n                                   \"too many type parameters provided: \\\n@@ -5206,18 +5213,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let note_msg = \"the late bound lifetime parameter is introduced here\";\n             if !is_method_call && (lifetimes.len() > lt_accepted ||\n                                    lifetimes.len() < lt_accepted && !infer_lifetimes) {\n+                supress_errors = true;\n                 let mut err = self.tcx.sess.struct_span_err(lifetimes[0].span, primary_msg);\n                 err.span_note(span_late, note_msg);\n                 err.emit();\n-                // FIXME(varkor)\n-                // *segment = None;\n             } else {\n                 let mut multispan = MultiSpan::from_span(lifetimes[0].span);\n                 multispan.push_span_label(span_late, note_msg.to_string());\n                 self.tcx.lint_node(lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n                                    lifetimes[0].id, multispan, primary_msg);\n             }\n-            return;\n+            return supress_errors;\n         }\n \n         let count_lifetime_params = |n| {\n@@ -5241,6 +5247,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } {\n             err.span_label(span, format!(\"expected {}\", expected_text)).emit();\n         }\n+\n+        supress_errors\n     }\n \n     /// Report error if there is an explicit type parameter when using `impl Trait`."}]}