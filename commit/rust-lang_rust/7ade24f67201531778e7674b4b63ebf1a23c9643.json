{"sha": "7ade24f67201531778e7674b4b63ebf1a23c9643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZGUyNGY2NzIwMTUzMTc3OGU3Njc0YjRiNjNlYmYxYTIzYzk2NDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-07T14:24:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-07T14:24:15Z"}, "message": "Auto merge of #45666 - Amanieu:tls-model, r=alexcrichton\n\nAllow overriding the TLS model\n\nThis PR adds the ability to override the default \"global-dynamic\" TLS model with a more specific one through a target json option or a command-line option. This allows for better code generation in certain situations.\n\nThis is similar to the `-ftls-model=` option in GCC and Clang.", "tree": {"sha": "0f0035aa423331057bcf87ffbad38a34972a5450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0035aa423331057bcf87ffbad38a34972a5450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ade24f67201531778e7674b4b63ebf1a23c9643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ade24f67201531778e7674b4b63ebf1a23c9643", "html_url": "https://github.com/rust-lang/rust/commit/7ade24f67201531778e7674b4b63ebf1a23c9643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ade24f67201531778e7674b4b63ebf1a23c9643/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7f501991df2f7fc87f6c340945112c128735d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7f501991df2f7fc87f6c340945112c128735d2", "html_url": "https://github.com/rust-lang/rust/commit/3e7f501991df2f7fc87f6c340945112c128735d2"}, {"sha": "fdf7ba2ce9e304a21d50adf41643da28268fd6fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf7ba2ce9e304a21d50adf41643da28268fd6fc", "html_url": "https://github.com/rust-lang/rust/commit/fdf7ba2ce9e304a21d50adf41643da28268fd6fc"}], "stats": {"total": 97, "additions": 84, "deletions": 13}, "files": [{"sha": "9f50afde14551787ad675cfd730feba9751761ad", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -368,6 +368,7 @@ pub enum PrintRequest {\n     TargetFeatures,\n     RelocationModels,\n     CodeModels,\n+    TlsModels,\n     TargetSpec,\n     NativeStaticLibs,\n }\n@@ -1104,6 +1105,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether #[inline] functions are in all cgus\"),\n+    tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+         \"choose the TLS model to use (rustc --print tls-models for details)\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1330,7 +1333,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                                print on stdout\",\n                      \"[crate-name|file-names|sysroot|cfg|target-list|\\\n                        target-cpus|target-features|relocation-models|\\\n-                       code-models|target-spec-json|native-static-libs]\"),\n+                       code-models|tls-models|target-spec-json|native-static-libs]\"),\n         opt::flagmulti_s(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n         opt::opt_s(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n@@ -1473,7 +1476,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         })\n     });\n \n-    let debugging_opts = build_debugging_options(matches, error_format);\n+    let mut debugging_opts = build_debugging_options(matches, error_format);\n \n     if !debugging_opts.unstable_options && error_format == ErrorOutputType::Json(true) {\n         early_error(ErrorOutputType::Json(false),\n@@ -1579,6 +1582,10 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         prints.push(PrintRequest::CodeModels);\n         cg.code_model = None;\n     }\n+    if debugging_opts.tls_model.as_ref().map_or(false, |s| s == \"help\") {\n+        prints.push(PrintRequest::TlsModels);\n+        debugging_opts.tls_model = None;\n+    }\n \n     let cg = cg;\n \n@@ -1678,6 +1685,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             \"target-features\" => PrintRequest::TargetFeatures,\n             \"relocation-models\" => PrintRequest::RelocationModels,\n             \"code-models\" => PrintRequest::CodeModels,\n+            \"tls-models\" => PrintRequest::TlsModels,\n             \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n             \"target-spec-json\" => {\n                 if nightly_options::is_unstable_enabled(matches) {\n@@ -2520,6 +2528,10 @@ mod tests {\n         opts.cg.code_model = Some(String::from(\"code model\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.cg.metadata = vec![String::from(\"A\"), String::from(\"B\")];\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "8fd4aad89c643d4cec7a775794a33c00f816a845", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -311,6 +311,9 @@ pub struct TargetOptions {\n     pub relocation_model: String,\n     /// Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".\n     pub code_model: String,\n+    /// TLS model to use. Options are \"global-dynamic\" (default), \"local-dynamic\", \"initial-exec\"\n+    /// and \"local-exec\". This is similar to the -ftls-model option in GCC/Clang.\n+    pub tls_model: String,\n     /// Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.\n     pub disable_redzone: bool,\n     /// Eliminate frame pointers from stack frames if possible. Defaults to true.\n@@ -450,6 +453,7 @@ impl Default for TargetOptions {\n             executables: false,\n             relocation_model: \"pic\".to_string(),\n             code_model: \"default\".to_string(),\n+            tls_model: \"global-dynamic\".to_string(),\n             disable_redzone: false,\n             eliminate_frame_pointer: true,\n             function_sections: true,\n@@ -696,6 +700,7 @@ impl Target {\n         key!(executables, bool);\n         key!(relocation_model);\n         key!(code_model);\n+        key!(tls_model);\n         key!(disable_redzone, bool);\n         key!(eliminate_frame_pointer, bool);\n         key!(function_sections, bool);\n@@ -888,6 +893,7 @@ impl ToJson for Target {\n         target_option_val!(executables);\n         target_option_val!(relocation_model);\n         target_option_val!(code_model);\n+        target_option_val!(tls_model);\n         target_option_val!(disable_redzone);\n         target_option_val!(eliminate_frame_pointer);\n         target_option_val!(function_sections);"}, {"sha": "c5cce70c945663393d38cdd27756c55bce9cda02", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -177,6 +177,7 @@ mod rustc_trans {\n         pub mod write {\n             pub const RELOC_MODEL_ARGS: [(&'static str, ()); 0] = [];\n             pub const CODE_GEN_MODEL_ARGS: [(&'static str, ()); 0] = [];\n+            pub const TLS_MODEL_ARGS: [(&'static str, ()); 0] = [];\n         }\n     }\n }\n@@ -797,6 +798,13 @@ impl RustcDefaultCalls {\n                     }\n                     println!(\"\");\n                 }\n+                PrintRequest::TlsModels => {\n+                    println!(\"Available TLS models:\");\n+                    for &(name, _) in rustc_trans::back::write::TLS_MODEL_ARGS.iter(){\n+                        println!(\"    {}\", name);\n+                    }\n+                    println!(\"\");\n+                }\n                 PrintRequest::TargetCPUs | PrintRequest::TargetFeatures => {\n                     rustc_trans::print(*req, sess);\n                 }"}, {"sha": "ac0e4dde0c1024e95bbc2f3c91ad49e96a1423c3", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -359,6 +359,17 @@ pub struct ThinLTOModule {\n     pub len: usize,\n }\n \n+/// LLVMThreadLocalMode\n+#[derive(Copy, Clone)]\n+#[repr(C)]\n+pub enum ThreadLocalMode {\n+  NotThreadLocal,\n+  GeneralDynamic,\n+  LocalDynamic,\n+  InitialExec,\n+  LocalExec\n+}\n+\n // Opaque pointer types\n #[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n@@ -709,6 +720,7 @@ extern \"C\" {\n     pub fn LLVMGetInitializer(GlobalVar: ValueRef) -> ValueRef;\n     pub fn LLVMSetInitializer(GlobalVar: ValueRef, ConstantVal: ValueRef);\n     pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);\n+    pub fn LLVMSetThreadLocalMode(GlobalVar: ValueRef, Mode: ThreadLocalMode);\n     pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;\n     pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);\n     pub fn LLVMRustGetNamedValue(M: ModuleRef, Name: *const c_char) -> ValueRef;"}, {"sha": "5ccce8de7063995ccb2e9378a83f7a96bae4234c", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -172,6 +172,11 @@ pub fn set_thread_local(global: ValueRef, is_thread_local: bool) {\n         LLVMSetThreadLocal(global, is_thread_local as Bool);\n     }\n }\n+pub fn set_thread_local_mode(global: ValueRef, mode: ThreadLocalMode) {\n+    unsafe {\n+        LLVMSetThreadLocalMode(global, mode);\n+    }\n+}\n \n impl Attribute {\n     pub fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef) {"}, {"sha": "d59d8ca1a7801363c2196f1761c83b4575f161ed", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -76,6 +76,13 @@ pub const CODE_GEN_MODEL_ARGS : [(&'static str, llvm::CodeModel); 5] = [\n     (\"large\", llvm::CodeModel::Large),\n ];\n \n+pub const TLS_MODEL_ARGS : [(&'static str, llvm::ThreadLocalMode); 4] = [\n+    (\"global-dynamic\", llvm::ThreadLocalMode::GeneralDynamic),\n+    (\"local-dynamic\", llvm::ThreadLocalMode::LocalDynamic),\n+    (\"initial-exec\", llvm::ThreadLocalMode::InitialExec),\n+    (\"local-exec\", llvm::ThreadLocalMode::LocalExec),\n+];\n+\n pub fn llvm_err(handler: &errors::Handler, msg: String) -> FatalError {\n     match llvm::last_error() {\n         Some(err) => handler.fatal(&format!(\"{}: {}\", msg, err)),\n@@ -173,9 +180,7 @@ pub fn target_machine_factory(sess: &Session)\n         Some(x) => x.1,\n         _ => {\n             sess.err(&format!(\"{:?} is not a valid code model\",\n-                             sess.opts\n-                                 .cg\n-                                 .code_model));\n+                              code_model_arg));\n             sess.abort_if_errors();\n             bug!();\n         }"}, {"sha": "4ae289cfada00a4b6746c0edb07211d7c5c61b53", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -196,7 +196,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n \n         for attr in attrs {\n             if attr.check_name(\"thread_local\") {\n-                llvm::set_thread_local(g, true);\n+                llvm::set_thread_local_mode(g, ccx.tls_model());\n             }\n         }\n \n@@ -215,7 +215,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n         // symbol and another one doesn't.\n         for attr in ccx.tcx().get_attrs(def_id).iter() {\n             if attr.check_name(\"thread_local\") {\n-                llvm::set_thread_local(g, true);\n+                llvm::set_thread_local_mode(g, ccx.tls_model());\n             }\n         }\n         if ccx.use_dll_storage_attrs() && !ccx.tcx().is_foreign_item(def_id) {\n@@ -305,9 +305,8 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         debuginfo::create_global_var_metadata(ccx, id, g);\n \n-        if attr::contains_name(attrs,\n-                               \"thread_local\") {\n-            llvm::set_thread_local(g, true);\n+        if attr::contains_name(attrs, \"thread_local\") {\n+            llvm::set_thread_local_mode(g, ccx.tls_model());\n         }\n \n         base::set_link_section(ccx, g, attrs);"}, {"sha": "cb71ef104d3d9424fc0310c63c3da083f5636d1b", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -52,6 +52,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     check_overflow: bool,\n     use_dll_storage_attrs: bool,\n+    tls_model: llvm::ThreadLocalMode,\n }\n \n /// The local portion of a `CrateContext`.  There is one `LocalCrateContext`\n@@ -159,9 +160,25 @@ pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n         Some(x) => x.1,\n         _ => {\n             sess.err(&format!(\"{:?} is not a valid relocation mode\",\n-                             sess.opts\n-                                 .cg\n-                                 .code_model));\n+                              reloc_model_arg));\n+            sess.abort_if_errors();\n+            bug!();\n+        }\n+    }\n+}\n+\n+fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n+    let tls_model_arg = match sess.opts.debugging_opts.tls_model {\n+        Some(ref s) => &s[..],\n+        None => &sess.target.target.options.tls_model[..],\n+    };\n+\n+    match ::back::write::TLS_MODEL_ARGS.iter().find(\n+        |&&arg| arg.0 == tls_model_arg) {\n+        Some(x) => x.1,\n+        _ => {\n+            sess.err(&format!(\"{:?} is not a valid TLS model\",\n+                              tls_model_arg));\n             sess.abort_if_errors();\n             bug!();\n         }\n@@ -283,10 +300,13 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n \n         let check_overflow = tcx.sess.overflow_checks();\n \n+        let tls_model = get_tls_model(&tcx.sess);\n+\n         SharedCrateContext {\n             tcx,\n             check_overflow,\n             use_dll_storage_attrs,\n+            tls_model,\n         }\n     }\n \n@@ -528,6 +548,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.shared.use_dll_storage_attrs()\n     }\n \n+    pub fn tls_model(&self) -> llvm::ThreadLocalMode {\n+        self.shared.tls_model\n+    }\n+\n     /// Generate a new symbol name with the given prefix. This symbol name must\n     /// only be used for definitions with `internal` or `private` linkage.\n     pub fn generate_local_symbol_name(&self, prefix: &str) -> String {"}]}