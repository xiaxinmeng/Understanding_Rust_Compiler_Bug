{"sha": "ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNmM3ZWZkODdmMTdhN2Q5MjgyZjRiYzczNDFjYjVjYmRhOGRiNGQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-02T20:25:19Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-16T21:17:51Z"}, "message": "Use enum for status of non-const ops", "tree": {"sha": "b428548f30d5fa07290ede3d24b7e300f16acd14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b428548f30d5fa07290ede3d24b7e300f16acd14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d", "html_url": "https://github.com/rust-lang/rust/commit/ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4154193e8471f36b1a9e781f1ef7d492fc6a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4154193e8471f36b1a9e781f1ef7d492fc6a6c", "html_url": "https://github.com/rust-lang/rust/commit/9b4154193e8471f36b1a9e781f1ef7d492fc6a6c"}], "stats": {"total": 112, "additions": 61, "deletions": 51}, "files": [{"sha": "ff27d0c3a921185caea87d31a86aed319d15656a", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 61, "deletions": 51, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d", "patch": "@@ -14,35 +14,32 @@ use super::ConstCx;\n pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) {\n     debug!(\"illegal_op: op={:?}\", op);\n \n-    if op.is_allowed_in_item(ccx) {\n-        return;\n-    }\n+    let gate = match op.status_in_item(ccx) {\n+        Status::Allowed => return,\n+        Status::Unstable(gate) if ccx.tcx.features().enabled(gate) => return,\n+        Status::Unstable(gate) => Some(gate),\n+        Status::Forbidden => None,\n+    };\n \n     if ccx.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-        ccx.tcx.sess.miri_unleashed_feature(span, O::feature_gate());\n+        ccx.tcx.sess.miri_unleashed_feature(span, gate);\n         return;\n     }\n \n     op.emit_error(ccx, span);\n }\n \n+pub enum Status {\n+    Allowed,\n+    Unstable(Symbol),\n+    Forbidden,\n+}\n+\n /// An operation that is not *always* allowed in a const context.\n pub trait NonConstOp: std::fmt::Debug {\n-    /// Returns the `Symbol` corresponding to the feature gate that would enable this operation,\n-    /// or `None` if such a feature gate does not exist.\n-    fn feature_gate() -> Option<Symbol> {\n-        None\n-    }\n-\n-    /// Returns `true` if this operation is allowed in the given item.\n-    ///\n-    /// This check should assume that we are not in a non-const `fn`, where all operations are\n-    /// legal.\n-    ///\n-    /// By default, it returns `true` if and only if this operation has a corresponding feature\n-    /// gate and that gate is enabled.\n-    fn is_allowed_in_item(&self, ccx: &ConstCx<'_, '_>) -> bool {\n-        Self::feature_gate().map_or(false, |gate| ccx.tcx.features().enabled(gate))\n+    /// Returns an enum indicating whether this operation is allowed within the given item.\n+    fn status_in_item(&self, _ccx: &ConstCx<'_, '_>) -> Status {\n+        Status::Forbidden\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n@@ -53,9 +50,13 @@ pub trait NonConstOp: std::fmt::Debug {\n             \"{} contains unimplemented expression type\",\n             ccx.const_kind()\n         );\n-        if let Some(feat) = Self::feature_gate() {\n-            err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feat));\n+\n+        if let Status::Unstable(gate) = self.status_in_item(ccx) {\n+            if !ccx.tcx.features().enabled(gate) && nightly_options::is_nightly_build() {\n+                err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", gate));\n+            }\n         }\n+\n         if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n                 \"A function call isn't allowed in the const's initialization expression \\\n@@ -182,14 +183,13 @@ impl NonConstOp for CellBorrow {\n #[derive(Debug)]\n pub struct MutBorrow;\n impl NonConstOp for MutBorrow {\n-    fn is_allowed_in_item(&self, ccx: &ConstCx<'_, '_>) -> bool {\n-        // Forbid everywhere except in const fn\n-        ccx.const_kind() == hir::ConstContext::ConstFn\n-            && ccx.tcx.features().enabled(Self::feature_gate().unwrap())\n-    }\n-\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_mut_refs)\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        // Forbid everywhere except in const fn with a feature gate\n+        if ccx.const_kind() == hir::ConstContext::ConstFn {\n+            Status::Unstable(sym::const_mut_refs)\n+        } else {\n+            Status::Forbidden\n+        }\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n@@ -201,15 +201,16 @@ impl NonConstOp for MutBorrow {\n                 &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n             )\n         } else {\n-            struct_span_err!(\n+            let mut err = struct_span_err!(\n                 ccx.tcx.sess,\n                 span,\n                 E0764,\n                 \"mutable references are not allowed in {}s\",\n                 ccx.const_kind(),\n-            )\n+            );\n+            err.span_label(span, format!(\"`&mut` is only allowed in `const fn`\"));\n+            err\n         };\n-        err.span_label(span, \"`&mut` is only allowed in `const fn`\".to_string());\n         if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n                 \"References in statics and constants may only refer \\\n@@ -226,11 +227,17 @@ impl NonConstOp for MutBorrow {\n     }\n }\n \n+// FIXME(ecstaticmorse): Unify this with `MutBorrow`. It has basically the same issues.\n #[derive(Debug)]\n pub struct MutAddressOf;\n impl NonConstOp for MutAddressOf {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_mut_refs)\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        // Forbid everywhere except in const fn with a feature gate\n+        if ccx.const_kind() == hir::ConstContext::ConstFn {\n+            Status::Unstable(sym::const_mut_refs)\n+        } else {\n+            Status::Forbidden\n+        }\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n@@ -247,16 +254,16 @@ impl NonConstOp for MutAddressOf {\n #[derive(Debug)]\n pub struct MutDeref;\n impl NonConstOp for MutDeref {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_mut_refs)\n+    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+        Status::Unstable(sym::const_mut_refs)\n     }\n }\n \n #[derive(Debug)]\n pub struct Panic;\n impl NonConstOp for Panic {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_panic)\n+    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+        Status::Unstable(sym::const_panic)\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n@@ -289,8 +296,8 @@ impl NonConstOp for RawPtrComparison {\n #[derive(Debug)]\n pub struct RawPtrDeref;\n impl NonConstOp for RawPtrDeref {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_raw_ptr_deref)\n+    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+        Status::Unstable(sym::const_raw_ptr_deref)\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n@@ -307,8 +314,8 @@ impl NonConstOp for RawPtrDeref {\n #[derive(Debug)]\n pub struct RawPtrToIntCast;\n impl NonConstOp for RawPtrToIntCast {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_raw_ptr_to_usize_cast)\n+    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+        Status::Unstable(sym::const_raw_ptr_to_usize_cast)\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n@@ -326,8 +333,12 @@ impl NonConstOp for RawPtrToIntCast {\n #[derive(Debug)]\n pub struct StaticAccess;\n impl NonConstOp for StaticAccess {\n-    fn is_allowed_in_item(&self, ccx: &ConstCx<'_, '_>) -> bool {\n-        matches!(ccx.const_kind(), hir::ConstContext::Static(_))\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        if let hir::ConstContext::Static(_) = ccx.const_kind() {\n+            Status::Allowed\n+        } else {\n+            Status::Forbidden\n+        }\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n@@ -371,14 +382,13 @@ impl NonConstOp for ThreadLocalAccess {\n #[derive(Debug)]\n pub struct UnionAccess;\n impl NonConstOp for UnionAccess {\n-    fn is_allowed_in_item(&self, ccx: &ConstCx<'_, '_>) -> bool {\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         // Union accesses are stable in all contexts except `const fn`.\n-        ccx.const_kind() != hir::ConstContext::ConstFn\n-            || ccx.tcx.features().enabled(Self::feature_gate().unwrap())\n-    }\n-\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_fn_union)\n+        if ccx.const_kind() != hir::ConstContext::ConstFn {\n+            Status::Allowed\n+        } else {\n+            Status::Unstable(sym::const_fn_union)\n+        }\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {"}]}