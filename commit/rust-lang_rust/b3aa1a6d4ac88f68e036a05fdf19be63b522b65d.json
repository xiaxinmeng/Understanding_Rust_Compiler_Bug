{"sha": "b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYWExYTZkNGFjODhmNjhlMDM2YTA1ZmRmMTliZTYzYjUyMmI2NWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-08T15:33:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-27T23:38:25Z"}, "message": "std: Deprecate a number of unstable features\n\nMany of these have long since reached their stage of being obsolete, so this\ncommit starts the removal process for all of them. The unstable features that\nwere deprecated are:\n\n* cmp_partial\n* fs_time\n* hash_default\n* int_slice\n* iter_min_max\n* iter_reset_fuse\n* iter_to_vec\n* map_in_place\n* move_from\n* owned_ascii_ext\n* page_size\n* read_and_zero\n* scan_state\n* slice_chars\n* slice_position_elem\n* subslice_offset", "tree": {"sha": "77f61dd9cef4e552d058de8da0b3463ff71f097b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f61dd9cef4e552d058de8da0b3463ff71f097b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "html_url": "https://github.com/rust-lang/rust/commit/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c12f4e39d32af3c951b66bd2839bc0b5a1125b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c12f4e39d32af3c951b66bd2839bc0b5a1125b", "html_url": "https://github.com/rust-lang/rust/commit/a5c12f4e39d32af3c951b66bd2839bc0b5a1125b"}], "stats": {"total": 113, "additions": 80, "deletions": 33}, "files": [{"sha": "05910a3529dc1a2bfb3e76dc13be3b2c4051fbcd", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -86,10 +86,13 @@ use core::raw::{TraitObject};\n #[lang = \"exchange_heap\"]\n #[unstable(feature = \"box_heap\",\n            reason = \"may be renamed; uncertain about custom allocator design\")]\n+#[allow(deprecated)]\n pub const HEAP: ExchangeHeapSingleton =\n     ExchangeHeapSingleton { _force_singleton: () };\n \n /// This the singleton type used solely for `boxed::HEAP`.\n+#[unstable(feature = \"box_heap\",\n+           reason = \"may be renamed; uncertain about custom allocator design\")]\n #[derive(Copy, Clone)]\n pub struct ExchangeHeapSingleton { _force_singleton: () }\n "}, {"sha": "00a0432956b8b51e02a17dd3433cb2929786ed0f", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -762,12 +762,16 @@ impl<T> [T] {\n \n     /// Find the first index containing a matching value.\n     #[unstable(feature = \"slice_position_elem\")]\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"less idiomatic than .iter().position()\")]\n     pub fn position_elem(&self, t: &T) -> Option<usize> where T: PartialEq {\n         core_slice::SliceExt::position_elem(self, t)\n     }\n \n     /// Find the last index containing a matching value.\n     #[unstable(feature = \"slice_position_elem\")]\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"less idiomatic than .iter().rev().position()\")]\n     pub fn rposition_elem(&self, t: &T) -> Option<usize> where T: PartialEq {\n         core_slice::SliceExt::rposition_elem(self, t)\n     }\n@@ -1009,6 +1013,8 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"move_from\",\n                reason = \"uncertain about this API approach\")]\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"unclear that it must belong in the standard library\")]\n     #[inline]\n     pub fn move_from(&mut self, mut src: Vec<T>, start: usize, end: usize) -> usize {\n         for (a, b) in self.iter_mut().zip(&mut src[start .. end]) {"}, {"sha": "5b91475a28b8eb6bc20c519c39a35970a3cb0628", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -552,6 +552,9 @@ impl str {\n     /// ```\n     #[unstable(feature = \"slice_chars\",\n                reason = \"may have yet to prove its worth\")]\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"can be implemented with char_indices and \\\n+                           hasn't seen enough use to justify inclusion\")]\n     pub fn slice_chars(&self, begin: usize, end: usize) -> &str {\n         core_str::StrExt::slice_chars(self, begin, end)\n     }\n@@ -1642,6 +1645,8 @@ impl str {\n     /// ```\n     #[unstable(feature = \"subslice_offset\",\n                reason = \"awaiting convention about comparability of arbitrary slices\")]\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"replaced with other pattern-related methods\")]\n     pub fn subslice_offset(&self, inner: &str) -> usize {\n         core_str::StrExt::subslice_offset(self, inner)\n     }"}, {"sha": "e9f3651d63b89e5db935c58bdfa1b2e95e9a137d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -772,6 +772,9 @@ impl<T> Vec<T> {\n     /// ```\n     #[unstable(feature = \"map_in_place\",\n                reason = \"API may change to provide stronger guarantees\")]\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"unclear that the API is strong enough and did \\\n+                           not proven itself\")]\n     pub fn map_in_place<U, F>(self, mut f: F) -> Vec<U> where F: FnMut(T) -> U {\n         // FIXME: Assert statically that the types `T` and `U` have the same\n         // size.\n@@ -1627,6 +1630,7 @@ impl<T> IntoIter<T> {\n     #[inline]\n     /// Drops all items that have not yet been moved and returns the empty vector.\n     #[unstable(feature = \"iter_to_vec\")]\n+    #[deprecated(since = \"1.3.0\", reason = \"replaced by drain()\")]\n     pub fn into_inner(mut self) -> Vec<T> {\n         unsafe {\n             for _x in self.by_ref() { }"}, {"sha": "93542185eab5bece619ccc25931f59e264814c34", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -401,6 +401,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// ```\n #[inline]\n #[unstable(feature = \"cmp_partial\")]\n+#[deprecated(since = \"1.3.0\", reason = \"has not proven itself worthwhile\")]\n pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n     match v1.partial_cmp(&v2) {\n         Some(Less) | Some(Equal) => Some(v1),\n@@ -434,6 +435,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// ```\n #[inline]\n #[unstable(feature = \"cmp_partial\")]\n+#[deprecated(since = \"1.3.0\", reason = \"has not proven itself worthwhile\")]\n pub fn partial_max<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n     match v1.partial_cmp(&v2) {\n         Some(Equal) | Some(Less) => Some(v2),"}, {"sha": "a660cf0cf2d541c0b5e99235dbd5e61c3f1570aa", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -171,6 +171,8 @@ pub trait Hasher {\n #[unstable(feature = \"hash_default\",\n            reason = \"not the most ergonomic interface unless `H` is defaulted \\\n                      to SipHasher, but perhaps not ready to commit to that\")]\n+#[deprecated(since = \"1.3.0\",\n+             reason = \"has yet to prove itself useful\")]\n pub fn hash<T: Hash, H: Hasher + Default>(value: &T) -> u64 {\n     let mut h: H = Default::default();\n     value.hash(&mut h);"}, {"sha": "4d8de0c85b6e993ff02cd63a5b3a7ec27611e59c", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -56,6 +56,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[allow(deprecated)]\n use self::MinMaxResult::*;\n \n use clone::Clone;\n@@ -445,6 +446,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[allow(deprecated)]\n     fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n         where Self: Sized, F: FnMut(&mut St, Self::Item) -> Option<B>,\n     {\n@@ -840,6 +842,8 @@ pub trait Iterator {\n     #[unstable(feature = \"iter_min_max\",\n                reason = \"return type may change or may wish to have a closure \\\n                          based version as well\")]\n+    #[deprecated(since = \"1.3.0\", reason = \"has not proven itself\")]\n+    #[allow(deprecated)]\n     fn min_max(mut self) -> MinMaxResult<Self::Item> where Self: Sized, Self::Item: Ord\n     {\n         let (mut min, mut max) = match self.next() {\n@@ -1336,6 +1340,8 @@ impl<I> RandomAccessIterator for Rev<I>\n #[derive(Clone, PartialEq, Debug)]\n #[unstable(feature = \"iter_min_max\",\n            reason = \"unclear whether such a fine-grained result is widely useful\")]\n+#[deprecated(since = \"1.3.0\", reason = \"has not proven itself\")]\n+#[allow(deprecated)]\n pub enum MinMaxResult<T> {\n     /// Empty iterator\n     NoElements,\n@@ -1349,6 +1355,8 @@ pub enum MinMaxResult<T> {\n }\n \n #[unstable(feature = \"iter_min_max\", reason = \"type is unstable\")]\n+#[deprecated(since = \"1.3.0\", reason = \"has not proven itself\")]\n+#[allow(deprecated)]\n impl<T: Clone> MinMaxResult<T> {\n     /// `into_option` creates an `Option` of type `(T,T)`. The returned `Option`\n     /// has variant `None` if and only if the `MinMaxResult` has variant\n@@ -2249,13 +2257,15 @@ impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n+#[allow(deprecated)]\n pub struct Scan<I, St, F> {\n     iter: I,\n     f: F,\n \n     /// The current internal state to be passed to the closure next.\n     #[unstable(feature = \"scan_state\",\n                reason = \"public fields are otherwise rare in the stdlib\")]\n+    #[deprecated(since = \"1.3.0\", reason = \"unclear whether this is necessary\")]\n     pub state: St,\n }\n \n@@ -2267,6 +2277,7 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n     type Item = B;\n \n     #[inline]\n+    #[allow(deprecated)]\n     fn next(&mut self) -> Option<B> {\n         self.iter.next().and_then(|a| (self.f)(&mut self.state, a))\n     }\n@@ -2448,6 +2459,8 @@ impl<I> Fuse<I> {\n     /// previously returned `None`.\n     #[inline]\n     #[unstable(feature = \"iter_reset_fuse\", reason = \"seems marginal\")]\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"unusual for adaptors to have one-off methods\")]\n     pub fn reset_fuse(&mut self) {\n         self.done = false\n     }"}, {"sha": "6fed89547d4f5722b0a1929ce37a55ad4eb58c37", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -131,6 +131,9 @@ pub unsafe fn read<T>(src: *const T) -> T {\n #[inline(always)]\n #[unstable(feature = \"read_and_zero\",\n            reason = \"may play a larger role in std::ptr future extensions\")]\n+#[deprecated(since = \"1.3.0\",\n+             reason = \"a \\\"zero value\\\" will soon not actually exist for all \\\n+                       types once dynamic drop has been implemented\")]\n pub unsafe fn read_and_zero<T>(dest: *mut T) -> T {\n     // Copy the data out from `dest`:\n     let tmp = read(&*dest);"}, {"sha": "c38345a79fd706be21fcca138c2fa42c2f5b4bb8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -37,13 +37,11 @@\n #![feature(dynamic_lib)]\n #![feature(enumset)]\n #![feature(fs_canonicalize)]\n-#![feature(hash_default)]\n #![feature(hashmap_hasher)]\n #![feature(into_cow)]\n #![feature(iter_cmp)]\n #![feature(iter_arith)]\n #![feature(libc)]\n-#![feature(map_in_place)]\n #![feature(num_bits_bytes)]\n #![feature(path_ext)]\n #![feature(quote)]\n@@ -55,8 +53,6 @@\n #![feature(slice_bytes)]\n #![feature(slice_splits)]\n #![feature(slice_patterns)]\n-#![feature(slice_position_elem)]\n-#![feature(slice_concat_ext)]\n #![feature(staged_api)]\n #![feature(str_char)]\n #![feature(str_match_indices)]"}, {"sha": "4ca347063096aade7abcf3858376964a0638c902", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -660,14 +660,14 @@ pub fn import_codemap(local_codemap: &codemap::CodeMap,\n                 // `CodeMap::new_imported_filemap()` will then translate those\n                 // coordinates to their new global frame of reference when the\n                 // offset of the FileMap is known.\n-                let lines = lines.into_inner().map_in_place(|pos| pos - start_pos);\n-                let multibyte_chars = multibyte_chars\n-                    .into_inner()\n-                    .map_in_place(|mbc|\n-                        codemap::MultiByteChar {\n-                            pos: mbc.pos - start_pos,\n-                            bytes: mbc.bytes\n-                        });\n+                let mut lines = lines.into_inner();\n+                for pos in &mut lines {\n+                    *pos = *pos - start_pos;\n+                }\n+                let mut multibyte_chars = multibyte_chars.into_inner();\n+                for mbc in &mut multibyte_chars {\n+                    mbc.pos = mbc.pos - start_pos;\n+                }\n \n                 let local_version = local_codemap.new_imported_filemap(name,\n                                                                        source_length,"}, {"sha": "4941c932eadcc6336f2a81e705b132785a63ec57", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -197,7 +197,9 @@ impl CStore {\n             }))\n             .collect::<Vec<_>>();\n         libs.sort_by(|&(a, _), &(b, _)| {\n-            ordering.position_elem(&a).cmp(&ordering.position_elem(&b))\n+            let a = ordering.iter().position(|x| *x == a);\n+            let b = ordering.iter().position(|x| *x == b);\n+            a.cmp(&b)\n         });\n         libs\n     }"}, {"sha": "55f0ef4fd57b67b8483e47b3942d09253bbe8624", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -35,7 +35,7 @@ use util::nodemap::FnvHashMap;\n \n use std::cell::{Cell, RefCell};\n use std::collections::HashMap;\n-use std::hash::{self, Hash, SipHasher};\n+use std::hash::{Hash, SipHasher, Hasher};\n use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n@@ -89,9 +89,9 @@ pub fn maybe_find_item<'a>(item_id: ast::NodeId,\n     fn eq_item(bytes: &[u8], item_id: ast::NodeId) -> bool {\n         u32_from_be_bytes(bytes) == item_id\n     }\n-    lookup_hash(items,\n-                |a| eq_item(a, item_id),\n-                hash::hash::<i64, SipHasher>(&(item_id as i64)))\n+    let mut s = SipHasher::new_with_keys(0, 0);\n+    (item_id as i64).hash(&mut s);\n+    lookup_hash(items, |a| eq_item(a, item_id), s.finish())\n }\n \n fn find_item<'a>(item_id: ast::NodeId, items: rbml::Doc<'a>) -> rbml::Doc<'a> {"}, {"sha": "69a4888777fddc3c5919ab85814863df1a352747", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -79,7 +79,6 @@ use std::ops;\n use std::rc::Rc;\n use std::vec::IntoIter;\n use collections::enum_set::{self, EnumSet, CLike};\n-use collections::slice::SliceConcatExt;\n use std::collections::{HashMap, HashSet};\n use syntax::abi;\n use syntax::ast::{CrateNum, DefId, ItemImpl, ItemTrait, LOCAL_CRATE};"}, {"sha": "03aa4bc2ead76e5f8592161b8974bc683f339829", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -124,6 +124,7 @@ fn get_working_set_size() -> Option<usize> {\n }\n \n #[cfg_attr(windows, allow(dead_code))]\n+#[allow(deprecated)]\n fn get_proc_self_statm_field(field: usize) -> Option<usize> {\n     use std::fs::File;\n     use std::io::Read;"}, {"sha": "d215813b7400df8028c7aeede7f28c844c20f71a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -279,7 +279,7 @@ impl<'tcx> fmt::Display for ty::TraitTy<'tcx> {\n                                .expect(\"could not lift TraitRef for printing\");\n             let projections = tcx.lift(&bounds.projection_bounds[..])\n                                  .expect(\"could not lift projections for printing\");\n-            let projections = projections.map_in_place(|p| p.0);\n+            let projections = projections.into_iter().map(|p| p.0).collect();\n \n             let tap = ty::Binder(TraitAndProjections(principal, projections));\n             in_binder(f, tcx, &ty::Binder(\"\"), Some(tap))"}, {"sha": "83e77a5c038655533628773d4d194f99e9f22cc1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -34,7 +34,7 @@\n //! both occur before the crate is rendered.\n pub use self::ExternalLocation::*;\n \n-use std::ascii::OwnedAsciiExt;\n+use std::ascii::AsciiExt;\n use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::collections::{BTreeMap, HashMap, HashSet};\n@@ -2547,7 +2547,7 @@ fn get_index_search_type(item: &clean::Item,\n \n     // Consider `self` an argument as well.\n     if let Some(name) = parent {\n-        inputs.push(Type { name: Some(name.into_ascii_lowercase()) });\n+        inputs.push(Type { name: Some(name.to_ascii_lowercase()) });\n     }\n \n     inputs.extend(&mut decl.inputs.values.iter().map(|arg| {\n@@ -2563,7 +2563,7 @@ fn get_index_search_type(item: &clean::Item,\n }\n \n fn get_index_type(clean_type: &clean::Type) -> Type {\n-    Type { name: get_index_type_name(clean_type).map(|s| s.into_ascii_lowercase()) }\n+    Type { name: get_index_type_name(clean_type).map(|s| s.to_ascii_lowercase()) }\n }\n \n fn get_index_type_name(clean_type: &clean::Type) -> Option<String> {"}, {"sha": "a19cd73fd6e25ed49d8835e7be153b69edf1e036", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -24,14 +24,12 @@\n #![feature(box_syntax)]\n #![feature(dynamic_lib)]\n #![feature(libc)]\n-#![feature(owned_ascii_ext)]\n #![feature(path_ext)]\n #![feature(path_relative_from)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n-#![feature(subslice_offset)]\n #![feature(test)]\n #![feature(unicode)]\n #![feature(vec_push_all)]"}, {"sha": "bc6c797e5c5da3d55fb809cf38d93b20e93db876", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -34,7 +34,7 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n             // remove %<whitespace>\n             metadata.push(line[1..].trim_left())\n         } else {\n-            let line_start_byte = s.subslice_offset(line);\n+            let line_start_byte = s.find(line).unwrap();\n             return (metadata, &s[line_start_byte..]);\n         }\n     }"}, {"sha": "ac98282ebb86bbc4efd2e23fc78af2ebe6d356f7", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -20,6 +20,9 @@ use mem;\n /// Extension methods for ASCII-subset only operations on owned strings\n #[unstable(feature = \"owned_ascii_ext\",\n            reason = \"would prefer to do this in a more general way\")]\n+#[deprecated(since = \"1.3.0\",\n+             reason = \"hasn't yet proved essential to be in the standard library\")]\n+#[allow(deprecated)]\n pub trait OwnedAsciiExt {\n     /// Converts the string to ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n@@ -164,11 +167,13 @@ impl AsciiExt for str {\n     }\n \n     #[inline]\n+    #[allow(deprecated)]\n     fn to_ascii_uppercase(&self) -> String {\n         self.to_string().into_ascii_uppercase()\n     }\n \n     #[inline]\n+    #[allow(deprecated)]\n     fn to_ascii_lowercase(&self) -> String {\n         self.to_string().into_ascii_lowercase()\n     }\n@@ -189,6 +194,7 @@ impl AsciiExt for str {\n     }\n }\n \n+#[allow(deprecated)]\n impl OwnedAsciiExt for String {\n     #[inline]\n     fn into_ascii_uppercase(self) -> String {\n@@ -212,11 +218,13 @@ impl AsciiExt for [u8] {\n     }\n \n     #[inline]\n+    #[allow(deprecated)]\n     fn to_ascii_uppercase(&self) -> Vec<u8> {\n         self.to_vec().into_ascii_uppercase()\n     }\n \n     #[inline]\n+    #[allow(deprecated)]\n     fn to_ascii_lowercase(&self) -> Vec<u8> {\n         self.to_vec().into_ascii_lowercase()\n     }\n@@ -242,6 +250,7 @@ impl AsciiExt for [u8] {\n     }\n }\n \n+#[allow(deprecated)]\n impl OwnedAsciiExt for Vec<u8> {\n     #[inline]\n     fn into_ascii_uppercase(mut self) -> Vec<u8> {"}, {"sha": "d1a49da461ec99458fabfe06fce7030b9c7cdd97", "filename": "src/libstd/env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -590,6 +590,8 @@ impl ExactSizeIterator for ArgsOs {\n \n /// Returns the page size of the current architecture in bytes.\n #[unstable(feature = \"page_size\", reason = \"naming and/or location may change\")]\n+#[deprecated(since = \"1.3.0\",\n+             reason = \"hasn't seen enough usage to justify inclusion\")]\n pub fn page_size() -> usize {\n     os_imp::page_size()\n }"}, {"sha": "a879c2ebd73724b8c89cc2a60b9cfd20d4b33e23", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -1225,6 +1225,9 @@ impl PathExt for Path {\n            reason = \"the argument type of u64 is not quite appropriate for \\\n                      this function and may change if the standard library \\\n                      gains a type to represent a moment in time\")]\n+#[deprecated(since = \"1.3.0\",\n+             reason = \"will never be stabilized as-is and its replacement will \\\n+                       likely have a totally new API\")]\n pub fn set_file_times<P: AsRef<Path>>(path: P, accessed: u64,\n                                  modified: u64) -> io::Result<()> {\n     fs_imp::utimes(path.as_ref(), accessed, modified)"}, {"sha": "29d1fe19adf61693a534e4f6a1aea2fd67b3cd53", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -747,7 +747,7 @@ impl<W: Write> LineWriter<W> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write> Write for LineWriter<W> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        match buf.rposition_elem(&b'\\n') {\n+        match buf.iter().rposition(|b| *b == b'\\n') {\n             Some(i) => {\n                 let n = try!(self.inner.write(&buf[..i + 1]));\n                 if n != i + 1 { return Ok(n) }"}, {"sha": "ffdd75b0e6e0f853cb22cdac8a96a4456c80b6ba", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -1105,7 +1105,7 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n                 Err(e) => return Err(e)\n             };\n-            match available.position_elem(&delim) {\n+            match available.iter().position(|x| *x == delim) {\n                 Some(i) => {\n                     buf.push_all(&available[..i + 1]);\n                     (true, i + 1)"}, {"sha": "4297bbffbdfb1846c07c29f0c0e38daac60318b4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -232,7 +232,6 @@\n #![feature(linkage, thread_local, asm)]\n #![feature(macro_reexport)]\n #![feature(slice_concat_ext)]\n-#![feature(slice_position_elem)]\n #![feature(no_std)]\n #![feature(oom)]\n #![feature(optin_builtin_traits)]"}, {"sha": "f5f8508e9aa8a57681520c248127553afaf803d5", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -200,7 +200,7 @@ mod platform {\n                         return Some(VerbatimUNC(server, share));\n                     } else {\n                         // \\\\?\\path\n-                        let idx = path.position_elem(&b'\\\\');\n+                        let idx = path.iter().position(|&b| b == b'\\\\');\n                         if idx == Some(2) && path[1] == b':' {\n                             let c = path[0];\n                             if c.is_ascii() && (c as char).is_alphabetic() {\n@@ -214,7 +214,8 @@ mod platform {\n                 } else if path.starts_with(b\".\\\\\") {\n                     // \\\\.\\path\n                     path = &path[2..];\n-                    let slice = &path[.. path.position_elem(&b'\\\\').unwrap_or(path.len())];\n+                    let pos = path.iter().position(|&b| b == b'\\\\');\n+                    let slice = &path[..pos.unwrap_or(path.len())];\n                     return Some(DeviceNS(u8_slice_as_os_str(slice)));\n                 }\n                 match parse_two_comps(path, is_sep_byte) {"}, {"sha": "8601f59138c0d142d8785869c14d9a7e6da8194d", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -56,7 +56,6 @@\n #![deny(missing_docs)]\n \n #![feature(box_syntax)]\n-#![feature(owned_ascii_ext)]\n #![feature(path_ext)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "14a9d2677e2b9bb42f3dde51a6a99a4b185756c3", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3aa1a6d4ac88f68e036a05fdf19be63b522b65d/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=b3aa1a6d4ac88f68e036a05fdf19be63b522b65d", "patch": "@@ -14,7 +14,7 @@ pub use self::Param::*;\n use self::States::*;\n use self::FormatState::*;\n use self::FormatOp::*;\n-use std::ascii::OwnedAsciiExt;\n+use std::ascii::AsciiExt;\n use std::mem::replace;\n use std::iter::repeat;\n \n@@ -532,7 +532,7 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n                     }\n                 }\n                 FormatHEX => {\n-                    s = s.into_ascii_uppercase();\n+                    s = s.to_ascii_uppercase();\n                     if flags.alternate {\n                         let s_ = replace(&mut s, vec!(b'0', b'X'));\n                         s.extend(s_);"}]}