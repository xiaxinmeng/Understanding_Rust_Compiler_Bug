{"sha": "a07cad16ab6271809d30ecf723420b3e41ec42ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwN2NhZDE2YWI2MjcxODA5ZDMwZWNmNzIzNDIwYjNlNDFlYzQyZWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T12:57:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T14:03:24Z"}, "message": "Rename json_project -> project_json", "tree": {"sha": "264e725302ec5475e4bf3b967bd72ca1d5d40dbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/264e725302ec5475e4bf3b967bd72ca1d5d40dbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a07cad16ab6271809d30ecf723420b3e41ec42ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a07cad16ab6271809d30ecf723420b3e41ec42ef", "html_url": "https://github.com/rust-lang/rust/commit/a07cad16ab6271809d30ecf723420b3e41ec42ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a07cad16ab6271809d30ecf723420b3e41ec42ef/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97c4d06258bace7c9caf211d3a307fff05bdb58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/97c4d06258bace7c9caf211d3a307fff05bdb58e", "html_url": "https://github.com/rust-lang/rust/commit/97c4d06258bace7c9caf211d3a307fff05bdb58e"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "7e8e00df8b2c4da841ac5731bc8991ceb524ce60", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a07cad16ab6271809d30ecf723420b3e41ec42ef/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07cad16ab6271809d30ecf723420b3e41ec42ef/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=a07cad16ab6271809d30ecf723420b3e41ec42ef", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n mod cargo_workspace;\n-mod json_project;\n+mod project_json;\n mod sysroot;\n \n use std::{\n@@ -20,7 +20,7 @@ use serde_json::from_reader;\n \n pub use crate::{\n     cargo_workspace::{CargoConfig, CargoWorkspace, Package, Target, TargetKind},\n-    json_project::JsonProject,\n+    project_json::ProjectJson,\n     sysroot::Sysroot,\n };\n pub use ra_proc_macro::ProcMacroClient;\n@@ -30,7 +30,7 @@ pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n     Cargo { cargo: CargoWorkspace, sysroot: Sysroot },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n-    Json { project: JsonProject, project_location: AbsPathBuf },\n+    Json { project: ProjectJson, project_location: AbsPathBuf },\n }\n \n /// `PackageRoot` describes a package root folder.\n@@ -259,8 +259,8 @@ impl ProjectWorkspace {\n                         let file_path = project_location.join(&krate.root_module);\n                         let file_id = load(&file_path)?;\n                         let edition = match krate.edition {\n-                            json_project::Edition::Edition2015 => Edition::Edition2015,\n-                            json_project::Edition::Edition2018 => Edition::Edition2018,\n+                            project_json::Edition::Edition2015 => Edition::Edition2015,\n+                            project_json::Edition::Edition2018 => Edition::Edition2018,\n                         };\n                         let cfg_options = {\n                             let mut opts = CfgOptions::default();\n@@ -290,7 +290,7 @@ impl ProjectWorkspace {\n                             .map(|it| proc_macro_client.by_dylib_path(&it));\n                         // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         Some((\n-                            json_project::CrateId(seq_index),\n+                            project_json::CrateId(seq_index),\n                             crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n@@ -306,7 +306,7 @@ impl ProjectWorkspace {\n \n                 for (id, krate) in project.crates.iter().enumerate() {\n                     for dep in &krate.deps {\n-                        let from_crate_id = json_project::CrateId(id);\n+                        let from_crate_id = project_json::CrateId(id);\n                         let to_crate_id = dep.krate;\n                         if let (Some(&from), Some(&to)) =\n                             (crates.get(&from_crate_id), crates.get(&to_crate_id))\n@@ -528,7 +528,7 @@ impl ProjectWorkspace {\n             ProjectWorkspace::Cargo { cargo, .. } => {\n                 Some(cargo.workspace_root()).filter(|root| path.starts_with(root))\n             }\n-            ProjectWorkspace::Json { project: JsonProject { roots, .. }, .. } => roots\n+            ProjectWorkspace::Json { project: ProjectJson { roots, .. }, .. } => roots\n                 .iter()\n                 .find(|root| path.starts_with(&root.path))\n                 .map(|root| root.path.as_ref()),"}, {"sha": "e663bb4d76becd9838272da137f58b88205892ed", "filename": "crates/ra_project_model/src/project_json.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a07cad16ab6271809d30ecf723420b3e41ec42ef/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07cad16ab6271809d30ecf723420b3e41ec42ef/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=a07cad16ab6271809d30ecf723420b3e41ec42ef", "patch": "@@ -7,7 +7,7 @@ use serde::Deserialize;\n \n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Deserialize)]\n-pub struct JsonProject {\n+pub struct ProjectJson {\n     pub(crate) roots: Vec<Root>,\n     pub(crate) crates: Vec<Crate>,\n }", "previous_filename": "crates/ra_project_model/src/json_project.rs"}, {"sha": "7eded04c5a6e70dea377a5aa95cfa7fce92837a0", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a07cad16ab6271809d30ecf723420b3e41ec42ef/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07cad16ab6271809d30ecf723420b3e41ec42ef/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a07cad16ab6271809d30ecf723420b3e41ec42ef", "patch": "@@ -14,7 +14,7 @@ use lsp_types::ClientCapabilities;\n use ra_db::AbsPathBuf;\n use ra_flycheck::FlycheckConfig;\n use ra_ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n-use ra_project_model::{CargoConfig, JsonProject, ProjectManifest};\n+use ra_project_model::{CargoConfig, ProjectJson, ProjectManifest};\n use serde::Deserialize;\n \n #[derive(Debug, Clone)]\n@@ -47,7 +47,7 @@ pub struct Config {\n #[derive(Debug, Clone)]\n pub enum LinkedProject {\n     ProjectManifest(ProjectManifest),\n-    InlineJsonProject(JsonProject),\n+    InlineJsonProject(ProjectJson),\n }\n \n impl From<ProjectManifest> for LinkedProject {\n@@ -56,8 +56,8 @@ impl From<ProjectManifest> for LinkedProject {\n     }\n }\n \n-impl From<JsonProject> for LinkedProject {\n-    fn from(v: JsonProject) -> Self {\n+impl From<ProjectJson> for LinkedProject {\n+    fn from(v: ProjectJson) -> Self {\n         LinkedProject::InlineJsonProject(v)\n     }\n }\n@@ -373,5 +373,5 @@ impl Config {\n #[serde(untagged)]\n enum ManifestOrJsonProject {\n     Manifest(PathBuf),\n-    JsonProject(JsonProject),\n+    JsonProject(ProjectJson),\n }"}]}