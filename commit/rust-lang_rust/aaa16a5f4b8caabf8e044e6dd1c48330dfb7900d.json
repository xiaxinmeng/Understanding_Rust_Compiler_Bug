{"sha": "aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYTE2YTVmNGI4Y2FhYmY4ZTA0NGU2ZGQxYzQ4MzMwZGZiNzkwMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T09:36:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T09:36:23Z"}, "message": "Auto merge of #1252 - RalfJung:rustup, r=RalfJung\n\nbump Rust; HashMap should now work on macOS even with isolation", "tree": {"sha": "b7fa2f7a6ae96ee427834f4aac0bcfce1ed0f73f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7fa2f7a6ae96ee427834f4aac0bcfce1ed0f73f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d", "html_url": "https://github.com/rust-lang/rust/commit/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe39ba763d39275c0fa60938895ccb0335e39ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe39ba763d39275c0fa60938895ccb0335e39ed", "html_url": "https://github.com/rust-lang/rust/commit/9fe39ba763d39275c0fa60938895ccb0335e39ed"}, {"sha": "b4b8750e447058e06e8bf5ad38645ee05a81ef42", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b8750e447058e06e8bf5ad38645ee05a81ef42", "html_url": "https://github.com/rust-lang/rust/commit/b4b8750e447058e06e8bf5ad38645ee05a81ef42"}], "stats": {"total": 19, "additions": 4, "deletions": 15}, "files": [{"sha": "70ece06e4f0269c00f915eeabec2ca66258eb150", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d", "patch": "@@ -1 +1 @@\n-38114ff16e7856f98b2b4be7ab4cd29b38bed59a\n+8ff785011be6625e32afceee3a08e5cff7470feb"}, {"sha": "ee02effecd2c5e4712bf5094772cd6eaace67ddf", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d", "patch": "@@ -98,13 +98,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(this.machine.argv.expect(\"machine must be initialized\"), dest)?;\n             }\n \n-            \"SecRandomCopyBytes\" => {\n-                let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n-                let ptr = this.read_scalar(args[2])?.not_undef()?;\n-                this.gen_random(ptr, len)?;\n-                this.write_null(dest)?;\n-            }\n-\n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n         };\n "}, {"sha": "488fe6afe65e642f856eea7e198d16a5aa52773c", "filename": "tests/run-pass/hashmap.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d/tests%2Frun-pass%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d/tests%2Frun-pass%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhashmap.rs?ref=aaa16a5f4b8caabf8e044e6dd1c48330dfb7900d", "patch": "@@ -1,10 +1,7 @@\n-// macOS needs FS access for its HashMap:\n-// compile-flags: -Zmiri-disable-isolation\n-\n use std::collections::HashMap;\n use std::hash::BuildHasher;\n \n-fn test_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n+fn smoketest_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n     map.insert(0, 0);\n     assert_eq!(map.values().fold(0, |x, y| x+y), 0);\n \n@@ -19,10 +16,9 @@ fn test_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n         map.insert(i, num-1-i);\n     }\n     assert_eq!(map.values().fold(0, |x, y| x+y), num*(num-1)/2);\n-\n-    // TODO: Test Entry API, Iterators, ...\n }\n \n fn main() {\n-    test_map(HashMap::new());\n+    // hashbrown uses Miri on its own CI; we just do a smoketest here.\n+    smoketest_map(HashMap::new());\n }"}]}