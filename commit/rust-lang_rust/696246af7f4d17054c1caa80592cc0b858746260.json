{"sha": "696246af7f4d17054c1caa80592cc0b858746260", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NjI0NmFmN2Y0ZDE3MDU0YzFjYWE4MDU5MmNjMGI4NTg3NDYyNjA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-22T09:47:54Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-22T09:47:54Z"}, "message": "Merge #321\n\n321: More useful logging r=matklad a=matklad\n\nTry not to log *huge* messages, to make logging more useful.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "57e252955404bba9978f3a3a3c288a0636a87173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57e252955404bba9978f3a3a3c288a0636a87173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/696246af7f4d17054c1caa80592cc0b858746260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/696246af7f4d17054c1caa80592cc0b858746260", "html_url": "https://github.com/rust-lang/rust/commit/696246af7f4d17054c1caa80592cc0b858746260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/696246af7f4d17054c1caa80592cc0b858746260/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "82e3ab02afee7cc0db178e1b10ee65146e4b7a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e3ab02afee7cc0db178e1b10ee65146e4b7a14", "html_url": "https://github.com/rust-lang/rust/commit/82e3ab02afee7cc0db178e1b10ee65146e4b7a14"}, {"sha": "90f20f8c539843f53a7a2b1cfb83b3673ec78534", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f20f8c539843f53a7a2b1cfb83b3673ec78534", "html_url": "https://github.com/rust-lang/rust/commit/90f20f8c539843f53a7a2b1cfb83b3673ec78534"}], "stats": {"total": 73, "additions": 62, "deletions": 11}, "files": [{"sha": "f68cbc541d0f640d6eb7456dcd4ef066334d5af1", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=696246af7f4d17054c1caa80592cc0b858746260", "patch": "@@ -152,12 +152,18 @@ impl RawNotification {\n             params: to_value(params).unwrap(),\n         }\n     }\n+    pub fn is<N>(&self) -> bool\n+    where\n+        N: Notification,\n+    {\n+        self.method == N::METHOD\n+    }\n     pub fn cast<N>(self) -> ::std::result::Result<N::Params, RawNotification>\n     where\n         N: Notification,\n         N::Params: serde::de::DeserializeOwned,\n     {\n-        if self.method != N::METHOD {\n+        if !self.is::<N>() {\n             return Err(self);\n         }\n         Ok(from_value(self.params).unwrap())"}, {"sha": "85df9c089c98efeacd532a11de04b29e116408d7", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=696246af7f4d17054c1caa80592cc0b858746260", "patch": "@@ -368,13 +368,22 @@ impl Analysis {\n     }\n }\n \n-#[derive(Debug)]\n pub struct LibraryData {\n     root_id: SourceRootId,\n     root_change: RootChange,\n     symbol_index: SymbolIndex,\n }\n \n+impl fmt::Debug for LibraryData {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"LibraryData\")\n+            .field(\"root_id\", &self.root_id)\n+            .field(\"root_change\", &self.root_change)\n+            .field(\"n_symbols\", &self.symbol_index.len())\n+            .finish()\n+    }\n+}\n+\n impl LibraryData {\n     pub fn prepare(\n         root_id: SourceRootId,"}, {"sha": "e5bdf0aa1c564b83ec8b552359c2e6bebf7f30c6", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=696246af7f4d17054c1caa80592cc0b858746260", "patch": "@@ -56,6 +56,10 @@ impl Hash for SymbolIndex {\n }\n \n impl SymbolIndex {\n+    pub(crate) fn len(&self) -> usize {\n+        self.symbols.len()\n+    }\n+\n     pub(crate) fn for_files(\n         files: impl ParallelIterator<Item = (FileId, SourceFileNode)>,\n     ) -> SymbolIndex {"}, {"sha": "84f88eefff1d09810abdd3e8c0bcef726a63e575", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=696246af7f4d17054c1caa80592cc0b858746260", "patch": "@@ -2,6 +2,7 @@ mod handlers;\n mod subscriptions;\n \n use std::{\n+    fmt,\n     path::PathBuf,\n     sync::Arc,\n };\n@@ -109,6 +110,43 @@ pub fn main_loop(\n     Ok(())\n }\n \n+enum Event {\n+    Msg(RawMessage),\n+    Task(Task),\n+    Vfs(VfsTask),\n+    Lib(LibraryData),\n+}\n+\n+impl fmt::Debug for Event {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let debug_verbose_not = |not: &RawNotification, f: &mut fmt::Formatter| {\n+            f.debug_struct(\"RawNotification\")\n+                .field(\"method\", &not.method)\n+                .finish()\n+        };\n+\n+        match self {\n+            Event::Msg(RawMessage::Notification(not)) => {\n+                if not.is::<req::DidOpenTextDocument>() || not.is::<req::DidChangeTextDocument>() {\n+                    return debug_verbose_not(not, f);\n+                }\n+            }\n+            Event::Task(Task::Notify(not)) => {\n+                if not.is::<req::PublishDecorations>() || not.is::<req::PublishDiagnostics>() {\n+                    return debug_verbose_not(not, f);\n+                }\n+            }\n+            _ => (),\n+        }\n+        match self {\n+            Event::Msg(it) => fmt::Debug::fmt(it, f),\n+            Event::Task(it) => fmt::Debug::fmt(it, f),\n+            Event::Vfs(it) => fmt::Debug::fmt(it, f),\n+            Event::Lib(it) => fmt::Debug::fmt(it, f),\n+        }\n+    }\n+}\n+\n fn main_loop_inner(\n     internal_mode: bool,\n     publish_decorations: bool,\n@@ -123,13 +161,6 @@ fn main_loop_inner(\n ) -> Result<()> {\n     let (libdata_sender, libdata_receiver) = unbounded();\n     loop {\n-        #[derive(Debug)]\n-        enum Event {\n-            Msg(RawMessage),\n-            Task(Task),\n-            Vfs(VfsTask),\n-            Lib(LibraryData),\n-        }\n         log::trace!(\"selecting\");\n         let event = select! {\n             recv(msg_receiver, msg) => match msg {\n@@ -143,7 +174,8 @@ fn main_loop_inner(\n             }\n             recv(libdata_receiver, data) => Event::Lib(data.unwrap())\n         };\n-        log::info!(\"{:?}\", event);\n+        log::info!(\"loop_turn = {:?}\", event);\n+        let start = std::time::Instant::now();\n         let mut state_changed = false;\n         match event {\n             Event::Task(task) => on_task(task, msg_sender, pending_requests),\n@@ -206,6 +238,7 @@ fn main_loop_inner(\n                 subs.subscriptions(),\n             )\n         }\n+        log::info!(\"loop_turn = {:?}\", start.elapsed());\n     }\n }\n "}, {"sha": "c183c25afdc2807baf083e9b89308baa526ebc12", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696246af7f4d17054c1caa80592cc0b858746260/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=696246af7f4d17054c1caa80592cc0b858746260", "patch": "@@ -107,7 +107,6 @@ impl ServerWorldState {\n         let mut libs = Vec::new();\n         let mut change = AnalysisChange::new();\n         for c in changes {\n-            log::info!(\"vfs change {:?}\", c);\n             match c {\n                 VfsChange::AddRoot { root, files } => {\n                     let root_path = self.vfs.read().root2path(root);"}]}