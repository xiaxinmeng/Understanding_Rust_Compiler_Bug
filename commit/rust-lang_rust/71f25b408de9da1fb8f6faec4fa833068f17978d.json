{"sha": "71f25b408de9da1fb8f6faec4fa833068f17978d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjI1YjQwOGRlOWRhMWZiOGY2ZmFlYzRmYTgzMzA2OGYxNzk3OGQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-06-28T23:45:08Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-07-01T23:46:07Z"}, "message": "Run rustfmt", "tree": {"sha": "b7e0b374c32356baeec2c653fc083b8137dcd8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e0b374c32356baeec2c653fc083b8137dcd8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f25b408de9da1fb8f6faec4fa833068f17978d", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAls5Z78ACgkQiMlBzaHU\nZDLPug/7BuTF6TY2KZgZ1P45yyBN/t+sDfUIxw3s+rlUQvBgKYoRTD1dV9YB5qzs\nDw9fPRzAoxcjd4519meM6S54v813XxucJci1xSZcM6TmxaUUJ9TfcZshIeNdeBXr\nXSAZ2WQB9140nKoHKeExwNq79WFr0h5faLIIJp21kPjSlsq4jKPbtSo7f325U24Y\nAPOjnADaHVNkYqNm48dftFCs7dWVRcd0tS27pnIRuIwAhpFVSxHOVpnXvpAcxH7T\nlNScjQrfqchbvna4snPgOldlarERHsLoSRd7S6wpXLutGPlH9Io6DKy6B1oiqfbe\nkt8P6CKFIkcn2UYT71aRr8/Vdo6ckB0qgKUGNb52aezphu9MIbTHA4y6a408u4kU\nUqReb1sb+80KEVDFmKcstgkvOkzRhCG9qhBIEThYFqwnugRGlXNfDhbiEZsHOxsu\nTUd/nxDk30D5VmT6EshSK74nrxOBGgKUVKnskQReFkYerB+YLCuWBmXv5y/pSTu6\noGXx8nY5InErc3n8oqm6O0g94j3Q1qRS7QPJZPW46GHChhvjl3zsIJfR+WWKUoaf\nu1hKFD8AicCrQuORBJRuUZVrRTu+zSuKliUt6dBJx7xNCZIMNIVKKMloBqrDG6Qt\ngNtRsHD5ncUlEcUms2tjAK+dSn/5mo4iVqJs2spJMOPztGILVrE=\n=tKDm\n-----END PGP SIGNATURE-----", "payload": "tree b7e0b374c32356baeec2c653fc083b8137dcd8b3\nparent 0957ede5027c0bffe208904998675a17bfd4cd59\nauthor Santiago Pastorino <spastorino@gmail.com> 1530229508 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1530488767 -0300\n\nRun rustfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f25b408de9da1fb8f6faec4fa833068f17978d", "html_url": "https://github.com/rust-lang/rust/commit/71f25b408de9da1fb8f6faec4fa833068f17978d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f25b408de9da1fb8f6faec4fa833068f17978d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0957ede5027c0bffe208904998675a17bfd4cd59", "url": "https://api.github.com/repos/rust-lang/rust/commits/0957ede5027c0bffe208904998675a17bfd4cd59", "html_url": "https://github.com/rust-lang/rust/commit/0957ede5027c0bffe208904998675a17bfd4cd59"}], "stats": {"total": 98, "additions": 40, "deletions": 58}, "files": [{"sha": "13cc0c0419eab1673e0064fd9ab637f209161e71", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/71f25b408de9da1fb8f6faec4fa833068f17978d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f25b408de9da1fb8f6faec4fa833068f17978d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=71f25b408de9da1fb8f6faec4fa833068f17978d", "patch": "@@ -19,7 +19,7 @@ use rustc::infer::NLLRegionVariableOrigin;\n use rustc::infer::RegionVariableOrigin;\n use rustc::mir::{\n     ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements, Local, Location,\n-    Mir\n+    Mir,\n };\n use rustc::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common;\n@@ -271,17 +271,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n             // Add all nodes in the CFG to liveness constraints\n             for point_index in self.elements.all_point_indices() {\n-                self.liveness_constraints.add_element(\n-                    variable,\n-                    point_index,\n-                );\n+                self.liveness_constraints.add_element(variable, point_index);\n             }\n \n             // Add `end(X)` into the set for X.\n-            self.liveness_constraints.add_element(\n-                variable,\n-                variable,\n-            );\n+            self.liveness_constraints.add_element(variable, variable);\n         }\n     }\n \n@@ -335,12 +329,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Indicates that the region variable `sup` must outlive `sub` is live at the point `point`.\n-    pub(super) fn add_outlives(\n-        &mut self,\n-        locations: Locations,\n-        sup: RegionVid,\n-        sub: RegionVid,\n-    ) {\n+    pub(super) fn add_outlives(&mut self, locations: Locations, sup: RegionVid, sub: RegionVid) {\n         assert!(self.inferred_values.is_none(), \"values already inferred\");\n         self.constraints.push(OutlivesConstraint {\n             locations,\n@@ -445,11 +434,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 debug!(\"propagate_constraints:   sub={:?}\", constraint.sub);\n                 debug!(\"propagate_constraints:   sup={:?}\", constraint.sup);\n \n-                self.constraints.each_affected_by_dirty(dependency_map[constraint.sup], |dep_idx| {\n-                    if clean_bit_vec.remove(dep_idx.index()) {\n-                        dirty_list.push(dep_idx);\n-                    }\n-                });\n+                self.constraints.each_affected_by_dirty(\n+                    dependency_map[constraint.sup],\n+                    |dep_idx| {\n+                        if clean_bit_vec.remove(dep_idx.index()) {\n+                            dirty_list.push(dep_idx);\n+                        }\n+                    },\n+                );\n             }\n \n             debug!(\"\\n\");\n@@ -487,8 +479,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             if let Some(propagated_outlives_requirements) = &mut propagated_outlives_requirements {\n-                if self.try_promote_type_test(infcx, mir, type_test,\n-                                              propagated_outlives_requirements) {\n+                if self.try_promote_type_test(\n+                    infcx,\n+                    mir,\n+                    type_test,\n+                    propagated_outlives_requirements,\n+                ) {\n                     continue;\n                 }\n             }\n@@ -744,12 +740,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     /// Test if `test` is true when applied to `lower_bound` at\n     /// `point`, and returns true or false.\n-    fn eval_region_test(\n-        &self,\n-        mir: &Mir<'tcx>,\n-        lower_bound: RegionVid,\n-        test: &RegionTest,\n-    ) -> bool {\n+    fn eval_region_test(&self, mir: &Mir<'tcx>, lower_bound: RegionVid, test: &RegionTest) -> bool {\n         debug!(\n             \"eval_region_test(lower_bound={:?}, test={:?})\",\n             lower_bound, test\n@@ -781,10 +772,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         sup_region: RegionVid,\n         sub_region: RegionVid,\n     ) -> bool {\n-        debug!(\n-            \"eval_outlives({:?}: {:?})\",\n-            sup_region, sub_region\n-        );\n+        debug!(\"eval_outlives({:?}: {:?})\", sup_region, sub_region);\n \n         let inferred_values = self\n             .inferred_values"}, {"sha": "1039e6d7b972cbcc1acda41f8303b100775e47c6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71f25b408de9da1fb8f6faec4fa833068f17978d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f25b408de9da1fb8f6faec4fa833068f17978d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=71f25b408de9da1fb8f6faec4fa833068f17978d", "patch": "@@ -28,7 +28,8 @@ pub(super) struct RegionValueElements {\n impl RegionValueElements {\n     pub(super) fn new(mir: &Mir<'_>, num_universal_regions: usize) -> Self {\n         let mut num_points = 0;\n-        let statements_before_block = mir.basic_blocks()\n+        let statements_before_block = mir\n+            .basic_blocks()\n             .iter()\n             .map(|block_data| {\n                 let v = num_points;\n@@ -96,7 +97,8 @@ impl RegionValueElements {\n             // be (BB2, 20).\n             //\n             // Nit: we could do a binary search here but I'm too lazy.\n-            let (block, &first_index) = self.statements_before_block\n+            let (block, &first_index) = self\n+                .statements_before_block\n                 .iter_enumerated()\n                 .filter(|(_, first_index)| **first_index <= point_index)\n                 .last()\n@@ -203,11 +205,7 @@ impl RegionValues {\n \n     /// Adds the given element to the value for the given region. Returns true if\n     /// the element is newly added (i.e., was not already present).\n-    pub(super) fn add_element<E: ToElementIndex>(\n-        &mut self,\n-        r: RegionVid,\n-        elem: E,\n-    ) -> bool {\n+    pub(super) fn add_element<E: ToElementIndex>(&mut self, r: RegionVid, elem: E) -> bool {\n         let i = self.elements.index(elem);\n         debug!(\"add(r={:?}, elem={:?})\", r, elem);\n         self.matrix.add(r, i)"}, {"sha": "91025e3f4afc016e13e7d2048f1fd19baaccc06a", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71f25b408de9da1fb8f6faec4fa833068f17978d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f25b408de9da1fb8f6faec4fa833068f17978d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=71f25b408de9da1fb8f6faec4fa833068f17978d", "patch": "@@ -168,9 +168,7 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n         );\n \n         cx.tcx().for_each_free_region(&value, |live_region| {\n-            cx.constraints\n-                .liveness_set\n-                .push((live_region, location));\n+            cx.constraints.liveness_set.push((live_region, location));\n         });\n     }\n "}, {"sha": "2b47d50b4c2c7a2d29ee5796cbedc5603d6e5435", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71f25b408de9da1fb8f6faec4fa833068f17978d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f25b408de9da1fb8f6faec4fa833068f17978d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=71f25b408de9da1fb8f6faec4fa833068f17978d", "patch": "@@ -311,7 +311,10 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n \n         debug!(\"sanitize_constant: expected_ty={:?}\", expected_ty);\n \n-        if let Err(terr) = self.cx.eq_types(expected_ty, constant.ty, location.boring()) {\n+        if let Err(terr) = self\n+            .cx\n+            .eq_types(expected_ty, constant.ty, location.boring())\n+        {\n             span_mirbug!(\n                 self,\n                 constant,\n@@ -770,12 +773,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn sub_types(\n-        &mut self,\n-        sub: Ty<'tcx>,\n-        sup: Ty<'tcx>,\n-        locations: Locations,\n-    ) -> Fallible<()> {\n+    fn sub_types(&mut self, sub: Ty<'tcx>, sup: Ty<'tcx>, locations: Locations) -> Fallible<()> {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n             locations,\n@@ -807,7 +805,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     false\n                 };\n \n-                let locations = if is_temp { location.boring() } else { location.interesting() };\n+                let locations = if is_temp {\n+                    location.boring()\n+                } else {\n+                    location.interesting()\n+                };\n \n                 let place_ty = place.ty(mir, tcx).to_ty(tcx);\n                 let rv_ty = rv.ty(mir, tcx);\n@@ -982,10 +984,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // output) types in the signature must be live, since\n                 // all the inputs that fed into it were live.\n                 for &late_bound_region in map.values() {\n-                    self.constraints.liveness_set.push((\n-                        late_bound_region,\n-                        term_location,\n-                    ));\n+                    self.constraints\n+                        .liveness_set\n+                        .push((late_bound_region, term_location));\n                 }\n \n                 self.check_call_inputs(mir, term, &sig, args, term_location);\n@@ -1505,10 +1506,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n \n                     // Hmm, are these constraints *really* boring?\n-                    self.push_region_constraints(\n-                        location.boring(),\n-                        &closure_constraints,\n-                    );\n+                    self.push_region_constraints(location.boring(), &closure_constraints);\n                 }\n \n                 tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)"}]}