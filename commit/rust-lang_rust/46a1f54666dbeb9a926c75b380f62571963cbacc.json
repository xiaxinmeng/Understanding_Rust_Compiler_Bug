{"sha": "46a1f54666dbeb9a926c75b380f62571963cbacc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YTFmNTQ2NjZkYmViOWE5MjZjNzViMzgwZjYyNTcxOTYzY2JhY2M=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-07-06T01:38:56Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-07-07T10:51:10Z"}, "message": "De-manage OptVec<TyParamBounds>", "tree": {"sha": "1ef88fa9ef34af53d983b4ef5d4a70792c3ddaba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef88fa9ef34af53d983b4ef5d4a70792c3ddaba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46a1f54666dbeb9a926c75b380f62571963cbacc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46a1f54666dbeb9a926c75b380f62571963cbacc", "html_url": "https://github.com/rust-lang/rust/commit/46a1f54666dbeb9a926c75b380f62571963cbacc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46a1f54666dbeb9a926c75b380f62571963cbacc/comments", "author": null, "committer": null, "parents": [{"sha": "97c5a44d3e805652a54a5693bbf2ab6d44db993b", "url": "https://api.github.com/repos/rust-lang/rust/commits/97c5a44d3e805652a54a5693bbf2ab6d44db993b", "html_url": "https://github.com/rust-lang/rust/commit/97c5a44d3e805652a54a5693bbf2ab6d44db993b"}], "stats": {"total": 114, "additions": 58, "deletions": 56}, "files": [{"sha": "8273b3e663a45ab4b03a3dda632be866c28706cc", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -1014,7 +1014,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_name(ecx, ebml_w, item.ident);\n         encode_attributes(ebml_w, item.attrs);\n         match ty.node {\n-            ast::ty_path(ref path, bounds, _) if path.idents.len() == 1 => {\n+            ast::ty_path(ref path, ref bounds, _) if path.idents.len() == 1 => {\n                 assert!(bounds.is_none());\n                 encode_impl_type_basename(ecx, ebml_w,\n                                           ast_util::path_to_ident(path));"}, {"sha": "0bc7a4a01141397a4a71f9a7493e981553ce3ae9", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -125,7 +125,7 @@ fn check_item(item: @item, (cx, visitor): (Context, visit::vt<Context>)) {\n                         if cx.tcx.lang_items.drop_trait() == trait_def_id {\n                             // Yes, it's a destructor.\n                             match self_type.node {\n-                                ty_path(_, bounds, path_node_id) => {\n+                                ty_path(_, ref bounds, path_node_id) => {\n                                     assert!(bounds.is_none());\n                                     let struct_def = cx.tcx.def_map.get_copy(\n                                         &path_node_id);"}, {"sha": "f76d9541baab15696780cc43d1e1b3c349281db0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -784,7 +784,7 @@ fn determine_rp_in_ty(ty: @ast::Ty,\n     // then check whether it is region-parameterized and consider\n     // that as a direct dependency.\n     match ty.node {\n-      ast::ty_path(ref path, _bounds, id) => {\n+      ast::ty_path(ref path, _, id) => {\n         match cx.def_map.find(&id) {\n           Some(&ast::def_ty(did)) |\n           Some(&ast::def_trait(did)) |\n@@ -820,7 +820,7 @@ fn determine_rp_in_ty(ty: @ast::Ty,\n         visit_mt(mt, (cx, visitor));\n       }\n \n-      ast::ty_path(ref path, _bounds, _) => {\n+      ast::ty_path(ref path, _, _) => {\n         // type parameters are---for now, anyway---always invariant\n         do cx.with_ambient_variance(rv_invariant) {\n             for path.types.iter().advance |tp| {"}, {"sha": "99ec1ccb1f1e52e06e28e09877f627a01f589437", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -4117,7 +4117,7 @@ impl Resolver {\n             // Like path expressions, the interpretation of path types depends\n             // on whether the path has multiple elements in it or not.\n \n-            ty_path(ref path, bounds, path_id) => {\n+            ty_path(ref path, ref bounds, path_id) => {\n                 // This is a path in the type namespace. Walk through scopes\n                 // scopes looking for it.\n                 let mut result_def = None;"}, {"sha": "6aac077bbd9a0eaeda6d3a25156ff74a1e5918f9", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -276,7 +276,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n                 }\n                 return ty::mk_evec(tcx, mt, vst);\n             }\n-            ast::ty_path(ref path, bounds, id) => {\n+            ast::ty_path(ref path, ref bounds, id) => {\n                 // Note that the \"bounds must be empty if path is not a trait\"\n                 // restriction is enforced in the below case for ty_path, which\n                 // will run after this as long as the path isn't a trait.\n@@ -405,7 +405,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n                                       ast_ty.span);\n           ty::mk_closure(tcx, fn_decl)\n       }\n-      ast::ty_path(ref path, bounds, id) => {\n+      ast::ty_path(ref path, ref bounds, id) => {\n         let a_def = match tcx.def_map.find(&id) {\n           None => tcx.sess.span_fatal(\n               ast_ty.span, fmt!(\"unbound path %s\","}, {"sha": "edd90be26474d1f59ef3d83f7c0ed30bb367f722", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -1149,7 +1149,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                     let param_ty = ty::param_ty {idx: base_index + offset,\n                                                  def_id: local_def(param.id)};\n                     let bounds = @compute_bounds(ccx, rp, generics,\n-                                                 param_ty, param.bounds);\n+                                                 param_ty, &param.bounds);\n                     let def = ty::TypeParameterDef {\n                         def_id: local_def(param.id),\n                         bounds: bounds\n@@ -1167,7 +1167,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n         rp: Option<ty::region_variance>,\n         generics: &ast::Generics,\n         param_ty: ty::param_ty,\n-        ast_bounds: @OptVec<ast::TyParamBound>) -> ty::ParamBounds\n+        ast_bounds: &OptVec<ast::TyParamBound>) -> ty::ParamBounds\n     {\n         /*!\n          *"}, {"sha": "d0c8ff03e3884a132edcbd65c865dec0601d913a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -140,7 +140,7 @@ pub enum TyParamBound {\n pub struct TyParam {\n     ident: ident,\n     id: node_id,\n-    bounds: @OptVec<TyParamBound>\n+    bounds: OptVec<TyParamBound>\n }\n \n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n@@ -734,7 +734,7 @@ pub enum ty_ {\n     ty_closure(@TyClosure),\n     ty_bare_fn(@TyBareFn),\n     ty_tup(~[@Ty]),\n-    ty_path(Path, @Option<OptVec<TyParamBound>>, node_id), // for #7264; see above\n+    ty_path(Path, Option<OptVec<TyParamBound>>, node_id), // for #7264; see above\n     ty_mac(mac),\n     // ty_infer means the type should be inferred instead of it having been\n     // specified. This should only appear at the \"top level\" of a type and not"}, {"sha": "0388115d7ef95106d5a15b6e4d3e018412abd966", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -46,7 +46,7 @@ pub trait AstBuilder {\n     fn ty_mt(&self, ty: @ast::Ty, mutbl: ast::mutability) -> ast::mt;\n \n     fn ty(&self, span: span, ty: ast::ty_) -> @ast::Ty;\n-    fn ty_path(&self, ast::Path, @Option<OptVec<ast::TyParamBound>>) -> @ast::Ty;\n+    fn ty_path(&self, ast::Path, Option<OptVec<ast::TyParamBound>>) -> @ast::Ty;\n     fn ty_ident(&self, span: span, idents: ast::ident) -> @ast::Ty;\n \n     fn ty_rptr(&self, span: span,\n@@ -66,7 +66,7 @@ pub trait AstBuilder {\n     fn ty_field_imm(&self, span: span, name: ident, ty: @ast::Ty) -> ast::ty_field;\n     fn strip_bounds(&self, bounds: &Generics) -> Generics;\n \n-    fn typaram(&self, id: ast::ident, bounds: @OptVec<ast::TyParamBound>) -> ast::TyParam;\n+    fn typaram(&self, id: ast::ident, bounds: OptVec<ast::TyParamBound>) -> ast::TyParam;\n \n     fn trait_ref(&self, path: ast::Path) -> ast::trait_ref;\n     fn typarambound(&self, path: ast::Path) -> ast::TyParamBound;\n@@ -265,7 +265,7 @@ impl AstBuilder for @ExtCtxt {\n         }\n     }\n \n-    fn ty_path(&self, path: ast::Path, bounds: @Option<OptVec<ast::TyParamBound>>)\n+    fn ty_path(&self, path: ast::Path, bounds: Option<OptVec<ast::TyParamBound>>)\n               -> @ast::Ty {\n         self.ty(path.span,\n                 ast::ty_path(path, bounds, self.next_id()))\n@@ -275,7 +275,7 @@ impl AstBuilder for @ExtCtxt {\n     // to generate a bounded existential trait type.\n     fn ty_ident(&self, span: span, ident: ast::ident)\n         -> @ast::Ty {\n-        self.ty_path(self.path_ident(span, ident), @None)\n+        self.ty_path(self.path_ident(span, ident), None)\n     }\n \n     fn ty_rptr(&self,\n@@ -305,8 +305,7 @@ impl AstBuilder for @ExtCtxt {\n                               self.ident_of(\"Option\")\n                           ],\n                           None,\n-                          ~[ ty ]),\n-            @None)\n+                          ~[ ty ]), None)\n     }\n \n     fn ty_field_imm(&self, span: span, name: ident, ty: @ast::Ty) -> ast::ty_field {\n@@ -329,7 +328,7 @@ impl AstBuilder for @ExtCtxt {\n         }\n     }\n \n-    fn typaram(&self, id: ast::ident, bounds: @OptVec<ast::TyParamBound>) -> ast::TyParam {\n+    fn typaram(&self, id: ast::ident, bounds: OptVec<ast::TyParamBound>) -> ast::TyParam {\n         ast::TyParam { ident: id, id: self.next_id(), bounds: bounds }\n     }\n \n@@ -344,13 +343,12 @@ impl AstBuilder for @ExtCtxt {\n     fn ty_vars_global(&self, ty_params: &OptVec<ast::TyParam>) -> ~[@ast::Ty] {\n         opt_vec::take_vec(\n             ty_params.map(|p| self.ty_path(\n-                self.path_global(dummy_sp(), ~[p.ident]), @None)))\n+                self.path_global(dummy_sp(), ~[p.ident]), None)))\n     }\n \n     fn strip_bounds(&self, generics: &Generics) -> Generics {\n-        let no_bounds = @opt_vec::Empty;\n         let new_params = do generics.ty_params.map |ty_param| {\n-            ast::TyParam { bounds: no_bounds, ..copy *ty_param }\n+            ast::TyParam { bounds: opt_vec::Empty, ..copy *ty_param }\n         };\n         Generics {\n             ty_params: new_params,"}, {"sha": "10282cb6f0ae9fa12f2b4ca2fc3caa9ca9ec9d61", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -337,7 +337,7 @@ impl<'self> TraitDef<'self> {\n             // require the current trait\n             bounds.push(cx.typarambound(copy trait_path));\n \n-            trait_generics.ty_params.push(cx.typaram(ty_param.ident, @bounds));\n+            trait_generics.ty_params.push(cx.typaram(ty_param.ident, bounds));\n         }\n \n         // Create the reference to the trait.\n@@ -356,8 +356,7 @@ impl<'self> TraitDef<'self> {\n \n         // Create the type of `self`.\n         let self_type = cx.ty_path(cx.path_all(span, false, ~[ type_ident ], self_lifetime,\n-                                               opt_vec::take_vec(self_ty_params)),\n-                                   @None);\n+                                               opt_vec::take_vec(self_ty_params)), None);\n \n         let doc_attr = cx.attribute(\n             span,"}, {"sha": "c820371714bfa971044bd4b50d979277050fafad", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -62,8 +62,7 @@ impl<'self> Path<'self> {\n                  self_ty: ident,\n                  self_generics: &Generics)\n                  -> @ast::Ty {\n-        cx.ty_path(self.to_path(cx, span,\n-                                self_ty, self_generics), @None)\n+        cx.ty_path(self.to_path(cx, span, self_ty, self_generics), None)\n     }\n     pub fn to_path(&self,\n                    cx: @ExtCtxt,\n@@ -142,8 +141,7 @@ impl<'self> Ty<'self> {\n             }\n             Literal(ref p) => { p.to_ty(cx, span, self_ty, self_generics) }\n             Self  => {\n-                cx.ty_path(self.to_path(cx, span, self_ty, self_generics),\n-                           @None)\n+                cx.ty_path(self.to_path(cx, span, self_ty, self_generics), None)\n             }\n             Tuple(ref fields) => {\n                 let ty = if fields.is_empty() {\n@@ -194,7 +192,7 @@ fn mk_ty_param(cx: @ExtCtxt, span: span, name: &str, bounds: &[Path],\n             let path = b.to_path(cx, span, self_ident, self_generics);\n             cx.typarambound(path)\n         });\n-    cx.typaram(cx.ident_of(name), @bounds)\n+    cx.typaram(cx.ident_of(name), bounds)\n }\n \n fn mk_generics(lifetimes: ~[ast::Lifetime],  ty_params: ~[ast::TyParam]) -> Generics {"}, {"sha": "57174f216fe5a1ffa3ce2e842316f751b782d80e", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -60,7 +60,7 @@ impl gen_send for message {\n \n             let pipe_ty = cx.ty_path(\n                 path(~[this.data_name()], span)\n-                .add_tys(cx.ty_vars(&this.generics.ty_params)), @None);\n+                .add_tys(cx.ty_vars(&this.generics.ty_params)), None);\n             let args_ast = vec::append(\n                 ~[cx.arg(span, cx.ident_of(\"pipe\"), pipe_ty)],\n                 args_ast);\n@@ -117,7 +117,7 @@ impl gen_send for message {\n \n             let mut rty = cx.ty_path(path(~[next.data_name()],\n                                           span)\n-                                     .add_tys(copy next_state.tys), @None);\n+                                     .add_tys(copy next_state.tys), None);\n             if try {\n                 rty = cx.ty_option(rty);\n             }\n@@ -145,7 +145,7 @@ impl gen_send for message {\n                              cx.ty_path(\n                                  path(~[this.data_name()], span)\n                                  .add_tys(cx.ty_vars(\n-                                     &this.generics.ty_params)), @None))],\n+                                     &this.generics.ty_params)), None))],\n                     args_ast);\n \n                 let message_args = if arg_names.len() == 0 {\n@@ -191,7 +191,7 @@ impl gen_send for message {\n \n     fn to_ty(&mut self, cx: @ExtCtxt) -> @ast::Ty {\n         cx.ty_path(path(~[cx.ident_of(self.name())], self.span())\n-          .add_tys(cx.ty_vars(&self.get_generics().ty_params)), @None)\n+          .add_tys(cx.ty_vars(&self.get_generics().ty_params)), None)\n     }\n }\n \n@@ -225,7 +225,7 @@ impl to_type_decls for state {\n                                 cx.ty_path(\n                                     path(~[cx.ident_of(dir),\n                                            cx.ident_of(next_name)], span)\n-                                    .add_tys(copy next_state.tys), @None))\n+                                    .add_tys(copy next_state.tys), None))\n               }\n               None => tys\n             };\n@@ -278,8 +278,7 @@ impl to_type_decls for state {\n                                    self.data_name()],\n                                  dummy_sp())\n                             .add_tys(cx.ty_vars(\n-                                &self.generics.ty_params)), @None)),\n-                        @None),\n+                                &self.generics.ty_params)), None)), None),\n                     cx.strip_bounds(&self.generics)));\n         }\n         else {\n@@ -298,8 +297,8 @@ impl to_type_decls for state {\n                                    self.data_name()],\n                                         dummy_sp())\n                             .add_tys(cx.ty_vars_global(\n-                                &self.generics.ty_params)), @None),\n-                                   self.proto.buffer_ty_path(cx)]), @None),\n+                                &self.generics.ty_params)), None),\n+                                   self.proto.buffer_ty_path(cx)]), None),\n                     cx.strip_bounds(&self.generics)));\n         };\n         items\n@@ -372,10 +371,10 @@ impl gen_init for protocol {\n \n     fn buffer_ty_path(&self, cx: @ExtCtxt) -> @ast::Ty {\n         let mut params: OptVec<ast::TyParam> = opt_vec::Empty;\n-        for (copy self.states).iter().advance |s| {\n+        for self.states.iter().advance |s| {\n             for s.generics.ty_params.iter().advance |tp| {\n                 match params.iter().find_(|tpp| tp.ident == tpp.ident) {\n-                  None => params.push(*tp),\n+                  None => params.push(copy *tp),\n                   _ => ()\n                 }\n             }\n@@ -384,16 +383,16 @@ impl gen_init for protocol {\n         cx.ty_path(path(~[cx.ident_of(\"super\"),\n                           cx.ident_of(\"__Buffer\")],\n                         copy self.span)\n-                   .add_tys(cx.ty_vars_global(&params)), @None)\n+                   .add_tys(cx.ty_vars_global(&params)), None)\n     }\n \n     fn gen_buffer_type(&self, cx: @ExtCtxt) -> @ast::item {\n         let ext_cx = cx;\n         let mut params: OptVec<ast::TyParam> = opt_vec::Empty;\n-        let fields = do (copy self.states).iter().transform |s| {\n+        let fields = do self.states.iter().transform |s| {\n             for s.generics.ty_params.iter().advance |tp| {\n                 match params.iter().find_(|tpp| tp.ident == tpp.ident) {\n-                  None => params.push(*tp),\n+                  None => params.push(copy *tp),\n                   _ => ()\n                 }\n             }"}, {"sha": "f3d7158de52692adf7a531bbb59a7bb227ef0e35", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -99,7 +99,7 @@ impl state_ {\n     pub fn to_ty(&self, cx: @ExtCtxt) -> @ast::Ty {\n         cx.ty_path\n             (path(~[cx.ident_of(self.name)],self.span).add_tys(\n-                cx.ty_vars(&self.generics.ty_params)), @None)\n+                cx.ty_vars(&self.generics.ty_params)), None)\n     }\n \n     /// Iterate over the states that can be reached in one message"}, {"sha": "c6592d36e4097fa7f14f86d5297be78733606127", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -171,12 +171,13 @@ pub fn fold_ty_param(tp: TyParam,\n                      fld: @ast_fold) -> TyParam {\n     TyParam {ident: tp.ident,\n              id: fld.new_id(tp.id),\n-             bounds: @tp.bounds.map(|x| fold_ty_param_bound(x, fld))}\n+             bounds: tp.bounds.map(|x| fold_ty_param_bound(x, fld))}\n }\n \n pub fn fold_ty_params(tps: &OptVec<TyParam>,\n                       fld: @ast_fold) -> OptVec<TyParam> {\n-    tps.map(|tp| fold_ty_param(*tp, fld))\n+    let tps = /*bad*/ copy *tps;\n+    tps.map_consume(|tp| fold_ty_param(tp, fld))\n }\n \n pub fn fold_lifetime(l: &Lifetime,\n@@ -682,8 +683,8 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n             })\n         }\n         ty_tup(ref tys) => ty_tup(tys.map(|ty| fld.fold_ty(*ty))),\n-        ty_path(ref path, bounds, id) =>\n-            ty_path(fld.fold_path(path), @fold_opt_bounds(bounds, fld), fld.new_id(id)),\n+        ty_path(ref path, ref bounds, id) =>\n+            ty_path(fld.fold_path(path), fold_opt_bounds(bounds, fld), fld.new_id(id)),\n         ty_fixed_length_vec(ref mt, e) => {\n             ty_fixed_length_vec(\n                 fold_mt(mt, fld),"}, {"sha": "ba3b72ec19443fe3f4d1b9e7ce324ba2bb5af7d4", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -16,7 +16,7 @@\n  * other useful things like `push()` and `len()`.\n  */\n \n-use std::vec::VecIterator;\n+use std::vec::{VecIterator};\n \n #[deriving(Encodable, Decodable,IterBytes)]\n pub enum OptVec<T> {\n@@ -58,6 +58,13 @@ impl<T> OptVec<T> {\n         }\n     }\n \n+    fn map_consume<U>(self, op: &fn(T) -> U) -> OptVec<U> {\n+        match self {\n+            Empty => Empty,\n+            Vec(v) => Vec(v.consume_iter().transform(op).collect())\n+        }\n+    }\n+\n     fn get<'a>(&'a self, i: uint) -> &'a T {\n         match *self {\n             Empty => fail!(\"Invalid index %u\", i),"}, {"sha": "4c662cc46213f8ea143bcb1e48a8d6ea77752f9a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -968,7 +968,7 @@ impl Parser {\n             || is_ident_or_path(self.token) {\n             // NAMED TYPE\n             let (path, bounds) = self.parse_type_path();\n-            ty_path(path, @bounds, self.get_id())\n+            ty_path(path, bounds, self.get_id())\n         } else {\n             self.fatal(fmt!(\"expected type, found token %?\",\n                             *self.token));\n@@ -3213,7 +3213,7 @@ impl Parser {\n         let ident = self.parse_ident();\n         let opt_bounds = self.parse_optional_ty_param_bounds();\n         // For typarams we don't care about the difference b/w \"<T>\" and \"<T:>\".\n-        let bounds = @opt_bounds.get_or_default(opt_vec::Empty);\n+        let bounds = opt_bounds.get_or_default(opt_vec::Empty);\n         ast::TyParam { ident: ident, id: self.get_id(), bounds: bounds }\n     }\n \n@@ -3565,7 +3565,7 @@ impl Parser {\n         let opt_trait = if could_be_trait && self.eat_keyword(keywords::For) {\n             // New-style trait. Reinterpret the type as a trait.\n             let opt_trait_ref = match ty.node {\n-                ty_path(ref path, @None, node_id) => {\n+                ty_path(ref path, None, node_id) => {\n                     Some(trait_ref {\n                         path: /* bad */ copy *path,\n                         ref_id: node_id"}, {"sha": "d054f9278945adca93c62fece08a5013b6637509", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -418,7 +418,7 @@ pub fn print_type(s: @ps, ty: &ast::Ty) {\n                       f.purity, f.onceness, &f.decl, None, &f.bounds,\n                       Some(&generics), None);\n       }\n-      ast::ty_path(ref path, bounds, _) => print_bounded_path(s, path, bounds),\n+      ast::ty_path(ref path, ref bounds, _) => print_bounded_path(s, path, bounds),\n       ast::ty_fixed_length_vec(ref mt, v) => {\n         word(s.s, \"[\");\n         match mt.mutbl {\n@@ -1773,7 +1773,7 @@ pub fn print_generics(s: @ps, generics: &ast::Generics) {\n                 let idx = idx - generics.lifetimes.len();\n                 let param = generics.ty_params.get(idx);\n                 print_ident(s, param.ident);\n-                print_bounds(s, param.bounds, false);\n+                print_bounds(s, &param.bounds, false);\n             }\n         }\n "}, {"sha": "b513b68b74f8b7569c12a368d4e2e4ec183406f6", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a1f54666dbeb9a926c75b380f62571963cbacc/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=46a1f54666dbeb9a926c75b380f62571963cbacc", "patch": "@@ -252,7 +252,7 @@ pub fn visit_ty<E: Copy>(t: &Ty, (e, v): (E, vt<E>)) {\n             for f.decl.inputs.iter().advance |a| { (v.visit_ty)(a.ty, (copy e, v)); }\n             (v.visit_ty)(f.decl.output, (e, v));\n         },\n-        ty_path(ref p, bounds, _) => {\n+        ty_path(ref p, ref bounds, _) => {\n             visit_path(p, (copy e, v));\n             do bounds.map |bounds| {\n                 visit_ty_param_bounds(bounds, (copy e, v));\n@@ -344,7 +344,7 @@ pub fn visit_ty_param_bounds<E: Copy>(bounds: &OptVec<TyParamBound>,\n \n pub fn visit_generics<E: Copy>(generics: &Generics, (e, v): (E, vt<E>)) {\n     for generics.ty_params.iter().advance |tp| {\n-        visit_ty_param_bounds(tp.bounds, (copy e, v));\n+        visit_ty_param_bounds(&tp.bounds, (copy e, v));\n     }\n }\n "}]}