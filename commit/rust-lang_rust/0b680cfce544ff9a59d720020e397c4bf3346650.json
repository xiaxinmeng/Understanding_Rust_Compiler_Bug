{"sha": "0b680cfce544ff9a59d720020e397c4bf3346650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNjgwY2ZjZTU0NGZmOWE1OWQ3MjAwMjBlMzk3YzRiZjMzNDY2NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-09T18:35:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-09T18:35:12Z"}, "message": "Auto merge of #62221 - jonas-schievink:normalize-impl-trait, r=nikomatsakis\n\nNormalize projections appearing in `impl Trait`\n\nFixes #60414\n\nThis does not try to do the same for `existential type`s (which have the same bug), since that always seems to lead to cycle errors.", "tree": {"sha": "3f15529cef2a8082d6f2a278753b2d4b3a209165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f15529cef2a8082d6f2a278753b2d4b3a209165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b680cfce544ff9a59d720020e397c4bf3346650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b680cfce544ff9a59d720020e397c4bf3346650", "html_url": "https://github.com/rust-lang/rust/commit/0b680cfce544ff9a59d720020e397c4bf3346650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b680cfce544ff9a59d720020e397c4bf3346650/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "html_url": "https://github.com/rust-lang/rust/commit/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1"}, {"sha": "66e026666d82365db51c891816d58abd6f01b746", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e026666d82365db51c891816d58abd6f01b746", "html_url": "https://github.com/rust-lang/rust/commit/66e026666d82365db51c891816d58abd6f01b746"}], "stats": {"total": 220, "additions": 220, "deletions": 0}, "files": [{"sha": "5acc3fd2fbcfd0d6db87ad37db97765322291eef", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=0b680cfce544ff9a59d720020e397c4bf3346650", "patch": "@@ -1111,6 +1111,12 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         let predicates_of = tcx.predicates_of(def_id);\n         debug!(\"instantiate_opaque_types: predicates={:#?}\", predicates_of,);\n         let bounds = predicates_of.instantiate(tcx, substs);\n+\n+        let param_env = tcx.param_env(def_id);\n+        let InferOk { value: bounds, obligations } =\n+            infcx.partially_normalize_associated_types_in(span, self.body_id, param_env, &bounds);\n+        self.obligations.extend(obligations);\n+\n         debug!(\"instantiate_opaque_types: bounds={:?}\", bounds);\n \n         let required_region_bounds = tcx.required_region_bounds(ty, bounds.predicates.clone());"}, {"sha": "e192465588ee8072085c2bd8d2f34ac85f28b821", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0b680cfce544ff9a59d720020e397c4bf3346650", "patch": "@@ -1065,6 +1065,7 @@ fn check_fn<'a, 'tcx>(\n         &declared_ret_ty,\n         decl.output.span(),\n     );\n+    debug!(\"check_fn: declared_ret_ty: {}, revealed_ret_ty: {}\", declared_ret_ty, revealed_ret_ty);\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(revealed_ret_ty)));\n     fn_sig = fcx.tcx.mk_fn_sig(\n         fn_sig.inputs().iter().cloned(),"}, {"sha": "8026350aaf2fb00fed31e405bf19786c7e983425", "filename": "src/test/ui/async-await/bound-normalization.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs?ref=0b680cfce544ff9a59d720020e397c4bf3346650", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+// See issue 60414\n+\n+trait Trait {\n+    type Assoc;\n+}\n+\n+async fn foo<T: Trait<Assoc=()>>() -> T::Assoc {\n+    ()\n+}\n+\n+fn main() {}"}, {"sha": "476ae62fa0fa47d783a79ddf9a3d4d91c3e81f66", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=0b680cfce544ff9a59d720020e397c4bf3346650", "patch": "@@ -0,0 +1,53 @@\n+// compile-fail\n+// edition:2018\n+\n+#![feature(async_await)]\n+#![feature(existential_type)]\n+#![feature(impl_trait_in_bindings)]\n+//~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n+\n+// See issue 60414\n+\n+/////////////////////////////////////////////\n+// Reduction to `impl Trait`\n+\n+struct Foo<T>(T);\n+\n+trait FooLike { type Output; }\n+\n+impl<T> FooLike for Foo<T> {\n+    type Output = T;\n+}\n+\n+mod impl_trait {\n+    use super::*;\n+\n+    trait Trait {\n+        type Assoc;\n+    }\n+\n+    /// `T::Assoc` can't be normalized any further here.\n+    fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n+        //~^ ERROR: type mismatch\n+        Foo(())\n+    }\n+}\n+\n+/////////////////////////////////////////////\n+// Same with lifetimes in the trait\n+\n+mod lifetimes {\n+    use super::*;\n+\n+    trait Trait<'a> {\n+        type Assoc;\n+    }\n+\n+    /// Missing bound constraining `Assoc`, `T::Assoc` can't be normalized further.\n+    fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n+        //~^ ERROR: type mismatch\n+        Foo(())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "fa2dd20a6eed76b0f77651c550cdad2794096e8c", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=0b680cfce544ff9a59d720020e397c4bf3346650", "patch": "@@ -0,0 +1,29 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/bound-normalization-fail.rs:6:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+  --> $DIR/bound-normalization-fail.rs:30:32\n+   |\n+LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n+   |\n+   = note: expected type `()`\n+              found type `<T as impl_trait::Trait>::Assoc`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+  --> $DIR/bound-normalization-fail.rs:47:41\n+   |\n+LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n+   |\n+   = note: expected type `()`\n+              found type `<T as lifetimes::Trait<'static>>::Assoc`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "3fdd7c0ecb6665bdffbbb9f5525a1dd30ac4a8ce", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=0b680cfce544ff9a59d720020e397c4bf3346650", "patch": "@@ -0,0 +1,109 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+#![feature(existential_type)]\n+#![feature(impl_trait_in_bindings)]\n+//~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n+\n+// See issue 60414\n+\n+/////////////////////////////////////////////\n+// Reduction to `impl Trait`\n+\n+struct Foo<T>(T);\n+\n+trait FooLike { type Output; }\n+\n+impl<T> FooLike for Foo<T> {\n+    type Output = T;\n+}\n+\n+mod impl_trait {\n+    use super::*;\n+\n+    trait Trait {\n+        type Assoc;\n+    }\n+\n+    /// `T::Assoc` should be normalized to `()` here.\n+    fn foo_pass<T: Trait<Assoc=()>>() -> impl FooLike<Output=T::Assoc> {\n+        Foo(())\n+    }\n+}\n+\n+/////////////////////////////////////////////\n+// Same with lifetimes in the trait\n+\n+mod lifetimes {\n+    use super::*;\n+\n+    trait Trait<'a> {\n+        type Assoc;\n+    }\n+\n+    /// Like above.\n+    ///\n+    /// FIXME(#51525) -- the shorter notation `T::Assoc` winds up referencing `'static` here\n+    fn foo2_pass<'a, T: Trait<'a, Assoc=()> + 'a>(\n+    ) -> impl FooLike<Output=<T as Trait<'a>>::Assoc> + 'a {\n+        Foo(())\n+    }\n+\n+    /// Normalization to type containing bound region.\n+    ///\n+    /// FIXME(#51525) -- the shorter notation `T::Assoc` winds up referencing `'static` here\n+    fn foo2_pass2<'a, T: Trait<'a, Assoc=&'a ()> + 'a>(\n+    ) -> impl FooLike<Output=<T as Trait<'a>>::Assoc> + 'a {\n+        Foo(&())\n+    }\n+}\n+\n+/////////////////////////////////////////////\n+// Reduction using `impl Trait` in bindings\n+\n+mod impl_trait_in_bindings {\n+    struct Foo;\n+\n+    trait FooLike { type Output; }\n+\n+    impl FooLike for Foo {\n+        type Output = u32;\n+    }\n+\n+    trait Trait {\n+        type Assoc;\n+    }\n+\n+    fn foo<T: Trait<Assoc=u32>>() {\n+        let _: impl FooLike<Output=T::Assoc> = Foo;\n+    }\n+}\n+\n+/////////////////////////////////////////////\n+// The same applied to `existential type`s\n+\n+mod existential_types {\n+    trait Implemented {\n+        type Assoc;\n+    }\n+    impl<T> Implemented for T {\n+        type Assoc = u8;\n+    }\n+\n+    trait Trait {\n+        type Out;\n+    }\n+\n+    impl Trait for () {\n+        type Out = u8;\n+    }\n+\n+    existential type Ex: Trait<Out = <() as Implemented>::Assoc>;\n+\n+    fn define() -> Ex {\n+        ()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c1b7fb2c253a4e5c61cf2ea480c8e4415d371480", "filename": "src/test/ui/impl-trait/bound-normalization-pass.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b680cfce544ff9a59d720020e397c4bf3346650/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr?ref=0b680cfce544ff9a59d720020e397c4bf3346650", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/bound-normalization-pass.rs:6:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+"}]}