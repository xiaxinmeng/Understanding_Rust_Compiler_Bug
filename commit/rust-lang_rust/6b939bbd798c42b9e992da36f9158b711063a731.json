{"sha": "6b939bbd798c42b9e992da36f9158b711063a731", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOTM5YmJkNzk4YzQyYjllOTkyZGEzNmY5MTU4YjcxMTA2M2E3MzE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T09:11:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T09:11:08Z"}, "message": "rebase leftovers", "tree": {"sha": "2c9ee15d2cac6b888e04dcc6a09cbb9de120eab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c9ee15d2cac6b888e04dcc6a09cbb9de120eab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b939bbd798c42b9e992da36f9158b711063a731", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXV+EsAAoJEFbW7qD8Z6xGrugQAIxV7bURtgsXCstff+CMng/5\nCtMcpYsCFSvhya3fPegG0F71uaznlxu2+dLV5m5ei3BbApaI240t9IgvwLXHDAlD\n6+w4aM8NgPwrAXsi7W8AHkWHdzWnh6boFH+mH9jvg75BAttTGpdhfJlMvgVdWNG8\nOa/o9u47Qkm407rdwPBsJrmFXqeCoLTlUNegN7I0slamcsS2t7x1xIOUA2INOmP9\nm0XmOLEs5jh/CbQcSbkpTwDzgjO8/AHN9SJhbdl0byuU/nClxvUKqFt/iX1AdQGP\nV3geIqvns7pESU0FIDj47FwyBdIdB3pqcRhzHB5rIfmEjRAUS9LoyGc7/csngFSs\nXB+KvtG8yJ9jFeAAhFte4YDGPEQ7BRGZhja8e9u80z27LQYAYs4DVO95BZmY8dKl\nzBOZqWhN1kf5HWz+uteNUJXjeKn6R3y9LgptRkYpAu/4k32R5jpto16zAmcpyx9j\nilXH6+ED9t3rEzyjEQEUfVI82xdoXfPqdpx7QAb5rPlZOJ2AKJnO0D6Ze0P9pp+b\ny15B1gdnQLBI2zKM89vFpH5j5+mXmBhKhmAQe8M1RSGBPmVzFLWb7Lgrug+lU3J0\ntaoU8/0XyXjZOLBL3GuKt7ojeAElrT1XlVyLBpfZ8wRrIrA8pnUWXdu+yY0IqjKy\ncbHm7AbKVDu3lLn93OVw\n=ZKje\n-----END PGP SIGNATURE-----", "payload": "tree 2c9ee15d2cac6b888e04dcc6a09cbb9de120eab3\nparent 1f27d3f7b3816fde346c5140801c7dd5ced3f823\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465377068 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465377068 +0200\n\nrebase leftovers"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b939bbd798c42b9e992da36f9158b711063a731", "html_url": "https://github.com/rust-lang/rust/commit/6b939bbd798c42b9e992da36f9158b711063a731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b939bbd798c42b9e992da36f9158b711063a731/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f27d3f7b3816fde346c5140801c7dd5ced3f823", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f27d3f7b3816fde346c5140801c7dd5ced3f823", "html_url": "https://github.com/rust-lang/rust/commit/1f27d3f7b3816fde346c5140801c7dd5ced3f823"}], "stats": {"total": 95, "additions": 31, "deletions": 64}, "files": [{"sha": "c1a91fee79761feaf9012de01691e6684f337955", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 27, "deletions": 61, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6b939bbd798c42b9e992da36f9158b711063a731/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b939bbd798c42b9e992da36f9158b711063a731/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=6b939bbd798c42b9e992da36f9158b711063a731", "patch": "@@ -194,6 +194,7 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n             ty::FnDiverging => None,\n         }\n     }\n+\n     // TODO(solson): Try making const_to_primval instead.\n     fn const_to_ptr(&mut self, const_val: &const_val::ConstVal) -> EvalResult<Pointer> {\n         use rustc::middle::const_val::ConstVal::*;\n@@ -337,6 +338,25 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn monomorphize(&self, ty: Ty<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n+        let substituted = ty.subst(self.tcx, substs);\n+        self.tcx.normalize_associated_type(&substituted)\n+    }\n+\n+    fn type_size(&self, ty: Ty<'tcx>, substs: &'tcx Substs<'tcx>) -> usize {\n+        self.type_layout(ty, substs).size(&self.tcx.data_layout).bytes() as usize\n+    }\n+\n+    fn type_layout(&self, ty: Ty<'tcx>, substs: &'tcx Substs<'tcx>) -> &'tcx Layout {\n+        // TODO(solson): Is this inefficient? Needs investigation.\n+        let ty = self.monomorphize(ty, substs);\n+\n+        self.tcx.normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n+            // TODO(solson): Report this error properly.\n+            ty.layout(&infcx).unwrap()\n+        })\n+    }\n }\n \n impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n@@ -1308,49 +1328,6 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         Ok(Lvalue { ptr: ptr, extra: LvalueExtra::None })\n     }\n \n-    // TODO(solson): Try making const_to_primval instead.\n-    fn const_to_ptr(&mut self, const_val: &const_val::ConstVal) -> EvalResult<Pointer> {\n-        use rustc::middle::const_val::ConstVal::*;\n-        match *const_val {\n-            Float(_f) => unimplemented!(),\n-            Integral(int) => {\n-                // TODO(solson): Check int constant type.\n-                let ptr = self.memory.allocate(8);\n-                self.memory.write_uint(ptr, int.to_u64_unchecked(), 8)?;\n-                Ok(ptr)\n-            }\n-            Str(ref s) => {\n-                let psize = self.memory.pointer_size;\n-                let static_ptr = self.memory.allocate(s.len());\n-                let ptr = self.memory.allocate(psize * 2);\n-                self.memory.write_bytes(static_ptr, s.as_bytes())?;\n-                self.memory.write_ptr(ptr, static_ptr)?;\n-                self.memory.write_usize(ptr.offset(psize as isize), s.len() as u64)?;\n-                Ok(ptr)\n-            }\n-            ByteStr(ref bs) => {\n-                let psize = self.memory.pointer_size;\n-                let static_ptr = self.memory.allocate(bs.len());\n-                let ptr = self.memory.allocate(psize);\n-                self.memory.write_bytes(static_ptr, bs)?;\n-                self.memory.write_ptr(ptr, static_ptr)?;\n-                Ok(ptr)\n-            }\n-            Bool(b) => {\n-                let ptr = self.memory.allocate(1);\n-                self.memory.write_bool(ptr, b)?;\n-                Ok(ptr)\n-            }\n-            Char(_c)          => unimplemented!(),\n-            Struct(_node_id)  => unimplemented!(),\n-            Tuple(_node_id)   => unimplemented!(),\n-            Function(_def_id) => unimplemented!(),\n-            Array(_, _)       => unimplemented!(),\n-            Repeat(_, _)      => unimplemented!(),\n-            Dummy             => unimplemented!(),\n-        }\n-    }\n-\n     fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n         self.monomorphize(self.mir().lvalue_ty(self.tcx, lvalue).to_ty(self.tcx))\n     }\n@@ -1360,12 +1337,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n     }\n \n     fn monomorphize(&self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let substituted = ty.subst(self.tcx, self.substs());\n-        self.tcx.normalize_associated_type(&substituted)\n-    }\n-\n-    fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n-        self.tcx.type_needs_drop_given_env(ty, &self.tcx.empty_parameter_environment())\n+        self.gecx.monomorphize(ty, self.substs())\n     }\n \n     fn move_(&mut self, src: Pointer, dest: Pointer, ty: Ty<'tcx>) -> EvalResult<()> {\n@@ -1377,22 +1349,12 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         Ok(())\n     }\n \n-    fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_sized(self.tcx, &self.tcx.empty_parameter_environment(), DUMMY_SP)\n-    }\n-\n     fn type_size(&self, ty: Ty<'tcx>) -> usize {\n-        self.type_layout(ty).size(&self.tcx.data_layout).bytes() as usize\n+        self.gecx.type_size(ty, self.substs())\n     }\n \n     fn type_layout(&self, ty: Ty<'tcx>) -> &'tcx Layout {\n-        // TODO(solson): Is this inefficient? Needs investigation.\n-        let ty = self.monomorphize(ty);\n-\n-        self.tcx.normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n-            // TODO(solson): Report this error properly.\n-            ty.layout(&infcx).unwrap()\n-        })\n+        self.gecx.type_layout(ty, self.substs())\n     }\n \n     pub fn read_primval(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<PrimVal> {\n@@ -1450,6 +1412,10 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n     fn mir(&self) -> CachedMir<'mir, 'tcx> {\n         self.frame().mir.clone()\n     }\n+\n+    fn substs(&self) -> &'tcx Substs<'tcx> {\n+        self.frame().substs\n+    }\n }\n \n fn pointee_type(ptr_ty: ty::Ty) -> Option<ty::Ty> {"}, {"sha": "fffac08fc6f4949304781fd3f35f5a4b6f9cffd5", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b939bbd798c42b9e992da36f9158b711063a731/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b939bbd798c42b9e992da36f9158b711063a731/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=6b939bbd798c42b9e992da36f9158b711063a731", "patch": "@@ -3,7 +3,8 @@ use super::{\n     CachedMir,\n     TerminatorTarget,\n     ConstantId,\n-    GlobalEvalContext\n+    GlobalEvalContext,\n+    Frame,\n };\n use error::EvalResult;\n use rustc::mir::repr as mir;\n@@ -41,7 +42,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         let stmt = &block_data.statements[self.fncx.frame().stmt];\n         let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n         let result = self.fncx.eval_assignment(lvalue, rvalue);\n-        self.fncx.maybe_report(stmt.span, result)?;\n+        self.fncx.maybe_report(result)?;\n         self.fncx.frame_mut().stmt += 1;\n         Ok(())\n     }\n@@ -54,7 +55,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             let block_data = mir.basic_block_data(self.fncx.frame().next_block);\n             let terminator = block_data.terminator();\n             let result = self.fncx.eval_terminator(terminator);\n-            self.fncx.maybe_report(terminator.span, result)?\n+            self.fncx.maybe_report(result)?\n         };\n         match term {\n             TerminatorTarget::Block => {},"}]}