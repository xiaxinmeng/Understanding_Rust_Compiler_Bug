{"sha": "473b1ec0a09db8aee9fde61a55cbe5074422c91f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3M2IxZWMwYTA5ZGI4YWVlOWZkZTYxYTU1Y2JlNTA3NDQyMmM5MWY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-21T17:45:56Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-15T19:41:41Z"}, "message": "Make token trees parseable.", "tree": {"sha": "168884b1cb6e5718aac4110ecc42f090ce28407c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168884b1cb6e5718aac4110ecc42f090ce28407c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473b1ec0a09db8aee9fde61a55cbe5074422c91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473b1ec0a09db8aee9fde61a55cbe5074422c91f", "html_url": "https://github.com/rust-lang/rust/commit/473b1ec0a09db8aee9fde61a55cbe5074422c91f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473b1ec0a09db8aee9fde61a55cbe5074422c91f/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ed1de29e3092a061ed5f64ba560f6814b6d25a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ed1de29e3092a061ed5f64ba560f6814b6d25a", "html_url": "https://github.com/rust-lang/rust/commit/b6ed1de29e3092a061ed5f64ba560f6814b6d25a"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "6664bad2859d60b1970cea998a55eeb6be73e587", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=473b1ec0a09db8aee9fde61a55cbe5074422c91f", "patch": "@@ -17,6 +17,8 @@ import std::serialization::{serializer,\n                             deserialize_str,\n                             serialize_bool,\n                             deserialize_bool};\n+import parse::token;\n+\n \n /* Note #1972 -- spans are serialized but not deserialized */\n fn serialize_span<S>(_s: S, _v: span) {\n@@ -371,6 +373,16 @@ enum blk_sort {\n }\n */\n \n+#[auto_serialize]\n+type token_tree = spanned<token_tree_>;\n+\n+#[auto_serialize]\n+enum token_tree_ {\n+    /* for macro invocations; parsing is the macro's job */\n+    tt_delim(token::token, [token_tree]),\n+    tt_flat(token::token)\n+}\n+\n #[auto_serialize]\n type mac = spanned<mac_>;\n \n@@ -386,6 +398,7 @@ type mac_body = option<mac_body_>;\n #[auto_serialize]\n enum mac_ {\n     mac_invoc(@path, mac_arg, mac_body),\n+    mac_invoc_tt(@path, token_tree), //will kill mac_invoc and steal its name\n     mac_embed_type(@ty),\n     mac_embed_block(blk),\n     mac_ellipsis,"}, {"sha": "e6b1c84965e6e285358cf12ca9e6db314b473575", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=473b1ec0a09db8aee9fde61a55cbe5074422c91f", "patch": "@@ -549,6 +549,7 @@ fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, s: selector, b: binders) {\n     alt mac.node {\n       ast::mac_ellipsis { cx.span_fatal(mac.span, \"misused `...`\"); }\n       ast::mac_invoc(_, _, _) { no_des(cx, mac.span, \"macro calls\"); }\n+      ast::mac_invoc_tt(_, _) { no_des(cx, mac.span, \"macro calls\"); }\n       ast::mac_embed_type(ty) {\n         alt ty.node {\n           ast::ty_path(pth, _) {"}, {"sha": "0d5966db4f57b8edfee8f9e5ffcfcb6d8b529651", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=473b1ec0a09db8aee9fde61a55cbe5074422c91f", "patch": "@@ -119,6 +119,7 @@ fn fold_mac_(m: mac, fld: ast_fold) -> mac {\n                  mac_invoc(fld.fold_path(pth),\n                            option::map(arg, fld.fold_expr), body)\n                }\n+               mac_invoc_tt(pth, tt) { m.node }\n                mac_embed_type(ty) { mac_embed_type(fld.fold_ty(ty)) }\n                mac_embed_block(blk) { mac_embed_block(fld.fold_block(blk)) }\n                mac_ellipsis { mac_ellipsis }"}, {"sha": "dad180847ee6410de22af1c36cb7a94b67a24d94", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=473b1ec0a09db8aee9fde61a55cbe5074422c91f", "patch": "@@ -24,6 +24,7 @@ impl parser_attr for parser {\n                 ret some(left([first_attr] + self.parse_outer_attributes()));\n             } else if !(self.look_ahead(1u) == token::LT\n                         || self.look_ahead(1u) == token::LBRACKET\n+                        || self.look_ahead(1u) == token::POUND\n                         || expect_item_next) {\n                 self.bump();\n                 ret some(right(self.parse_syntax_ext_naked(lo)));"}, {"sha": "c85cbb9385597216f62bf08ed356599ea0a7cab0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=473b1ec0a09db8aee9fde61a55cbe5074422c91f", "patch": "@@ -4,7 +4,7 @@ import std::map::{hashmap, str_hash};\n import token::{can_begin_expr, is_ident, is_plain_ident};\n import codemap::{span,fss_none};\n import util::interner;\n-import ast_util::{spanned, mk_sp, ident_to_path, operator_prec};\n+import ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n import ast::*;\n import lexer::reader;\n import prec::{as_prec, token_to_binop};\n@@ -801,10 +801,16 @@ class parser {\n                 {|p| p.parse_expr()});\n             hi = self.span.hi;\n             ex = expr_vec(es, mutbl);\n+        } else if self.token == token::POUND\n+            && self.look_ahead(1u) == token::POUND {\n+            self.bump(); self.bump();\n+            let macname = self.parse_path_without_tps();\n+            let macbody = self.parse_token_tree();\n+            ret pexpr(self.mk_mac_expr(lo, self.span.hi,\n+                                       mac_invoc_tt(macname, macbody)));\n         } else if self.token == token::POUND\n             && self.look_ahead(1u) == token::LT {\n-            self.bump();\n-            self.bump();\n+            self.bump(); self.bump();\n             let ty = self.parse_ty(false);\n             self.expect(token::GT);\n \n@@ -813,8 +819,7 @@ class parser {\n                                        mac_embed_type(ty)));\n         } else if self.token == token::POUND\n             && self.look_ahead(1u) == token::LBRACE {\n-            self.bump();\n-            self.bump();\n+            self.bump(); self.bump();\n             let blk = mac_embed_block(\n                 self.parse_block_tail(lo, default_blk));\n             ret pexpr(self.mk_mac_expr(lo, self.span.hi, blk));\n@@ -1053,6 +1058,47 @@ class parser {\n     ret e;\n }\n \n+    fn parse_token_tree() -> token_tree {\n+        #[doc=\"what's the opposite delimiter?\"]\n+        fn flip(t: token::token) -> token::token {\n+            alt t {\n+              token::LPAREN { token::RPAREN }\n+              token::LBRACE { token::RBRACE }\n+              token::LBRACKET { token::RBRACKET }\n+              _ { fail }\n+            }\n+        }\n+\n+        fn parse_tt_flat(p: parser, delim_ok: bool) -> token_tree {\n+            alt p.token {\n+              token::RPAREN | token::RBRACE | token::RBRACKET\n+              if !delim_ok {\n+                p.fatal(\"incorrect close delimiter: `\"\n+                           + token_to_str(p.reader, p.token) + \"`\");\n+              }\n+              token::EOF {\n+                p.fatal(\"file ended in the middle of a macro invocation\");\n+              }\n+              _ { /* ok */ }\n+            }\n+            let res = tt_flat(p.span.lo, p.token);\n+            p.bump();\n+            ret res;\n+        }\n+\n+        ret alt self.token {\n+          token::LPAREN | token::LBRACE | token::LBRACKET {\n+            let ket = flip(self.token);\n+            tt_delim([parse_tt_flat(self, true)] +\n+                     self.parse_seq_to_before_end(ket, seq_sep_none(),\n+                                                  {|p| p.parse_token_tree()})\n+                     + [parse_tt_flat(self, true)])\n+          }\n+          _ { parse_tt_flat(self, false) }\n+        };\n+    }\n+\n+\n     fn parse_prefix_expr() -> pexpr {\n         let lo = self.span.lo;\n         let mut hi;"}, {"sha": "981d7f9742ebc77825ac92a7f701eafa8fc98a47", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=473b1ec0a09db8aee9fde61a55cbe5074422c91f", "patch": "@@ -1,9 +1,21 @@\n import util::interner;\n import util::interner::interner;\n import std::map::{hashmap, str_hash};\n+import std::serialization::{serializer,\n+                            deserializer,\n+                            serialize_uint,\n+                            deserialize_uint,\n+                            serialize_i64,\n+                            deserialize_i64,\n+                            serialize_u64,\n+                            deserialize_u64,\n+                            serialize_bool,\n+                            deserialize_bool};\n \n+#[auto_serialize]\n type str_num = uint;\n \n+#[auto_serialize]\n enum binop {\n     PLUS,\n     MINUS,\n@@ -17,6 +29,7 @@ enum binop {\n     SHR,\n }\n \n+#[auto_serialize]\n enum token {\n     /* Expression-operator symbols. */\n     EQ,"}, {"sha": "9eaa8af921da666ed0540ee3c6771e4941d2ae6c", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=473b1ec0a09db8aee9fde61a55cbe5074422c91f", "patch": "@@ -30,6 +30,7 @@ mod util {\n mod parse {\n     export parser;\n     export lexer;\n+    export token;\n     export comments;\n     export prec;\n     export classify;"}, {"sha": "a7db0fe085130d1c75f84225b75a4f91119092ed", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b1ec0a09db8aee9fde61a55cbe5074422c91f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=473b1ec0a09db8aee9fde61a55cbe5074422c91f", "patch": "@@ -351,6 +351,7 @@ fn visit_mac<E>(m: mac, e: E, v: vt<E>) {\n     alt m.node {\n       ast::mac_invoc(pth, arg, body) {\n         option::map(arg) {|arg| v.visit_expr(arg, e, v)}; }\n+      ast::mac_invoc_tt(pth, tt) { /* no user-serviceable parts inside */ }\n       ast::mac_embed_type(ty) { v.visit_ty(ty, e, v); }\n       ast::mac_embed_block(blk) { v.visit_block(blk, e, v); }\n       ast::mac_ellipsis { }"}]}