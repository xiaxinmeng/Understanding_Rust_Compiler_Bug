{"sha": "8462a378f313f7f279fb8f98a7dad703ef9ef897", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NjJhMzc4ZjMxM2Y3ZjI3OWZiOGY5OGE3ZGFkNzAzZWY5ZWY4OTc=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-07-16T23:20:10Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-07-16T23:20:10Z"}, "message": "avoid temporary vectors\n\nAvoid collecting an interator just to re-iterate immediately.\nRather reuse the previous iterator. (clippy::needless_collect)", "tree": {"sha": "fd12a53afd42274a459dbe90831bc77c8018c7f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd12a53afd42274a459dbe90831bc77c8018c7f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8462a378f313f7f279fb8f98a7dad703ef9ef897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8462a378f313f7f279fb8f98a7dad703ef9ef897", "html_url": "https://github.com/rust-lang/rust/commit/8462a378f313f7f279fb8f98a7dad703ef9ef897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8462a378f313f7f279fb8f98a7dad703ef9ef897/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ef0c3e404cc72c08b2d1e14506f90d9e877269", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ef0c3e404cc72c08b2d1e14506f90d9e877269", "html_url": "https://github.com/rust-lang/rust/commit/74ef0c3e404cc72c08b2d1e14506f90d9e877269"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "00d75be4399649987e9b491aa19fb81cf36e7838", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8462a378f313f7f279fb8f98a7dad703ef9ef897/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8462a378f313f7f279fb8f98a7dad703ef9ef897/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=8462a378f313f7f279fb8f98a7dad703ef9ef897", "patch": "@@ -72,13 +72,9 @@ impl Path {\n     ) -> ast::Path {\n         let mut idents = self.path.iter().map(|s| Ident::new(*s, span)).collect();\n         let lt = mk_lifetimes(cx, span, &self.lifetime);\n-        let tys: Vec<P<ast::Ty>> =\n-            self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n-        let params = lt\n-            .into_iter()\n-            .map(GenericArg::Lifetime)\n-            .chain(tys.into_iter().map(GenericArg::Type))\n-            .collect();\n+        let tys = self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics));\n+        let params =\n+            lt.into_iter().map(GenericArg::Lifetime).chain(tys.map(GenericArg::Type)).collect();\n \n         match self.kind {\n             PathKind::Global => cx.path_all(span, true, idents, params),"}, {"sha": "a5a804a29164320ed2f08ee2f26b6126525e8e88", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8462a378f313f7f279fb8f98a7dad703ef9ef897/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8462a378f313f7f279fb8f98a7dad703ef9ef897/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8462a378f313f7f279fb8f98a7dad703ef9ef897", "patch": "@@ -2134,7 +2134,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let new_lt = generics\n             .as_ref()\n             .and_then(|(parent_g, g)| {\n-                let possible: Vec<_> = (b'a'..=b'z').map(|c| format!(\"'{}\", c as char)).collect();\n+                let mut possible = (b'a'..=b'z').map(|c| format!(\"'{}\", c as char));\n                 let mut lts_names = g\n                     .params\n                     .iter()\n@@ -2150,7 +2150,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     );\n                 }\n                 let lts = lts_names.iter().map(|s| -> &str { &*s }).collect::<Vec<_>>();\n-                possible.into_iter().find(|candidate| !lts.contains(&candidate.as_str()))\n+                possible.find(|candidate| !lts.contains(&candidate.as_str()))\n             })\n             .unwrap_or(\"'lt\".to_string());\n         let add_lt_sugg = generics"}]}