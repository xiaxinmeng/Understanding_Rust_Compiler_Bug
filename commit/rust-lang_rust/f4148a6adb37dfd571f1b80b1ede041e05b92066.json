{"sha": "f4148a6adb37dfd571f1b80b1ede041e05b92066", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MTQ4YTZhZGIzN2RmZDU3MWYxYjgwYjFlZGUwNDFlMDViOTIwNjY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-09T13:55:59Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-09T13:55:59Z"}, "message": "remove #[used] from the unstable book\n\nit'll be documented in the reference", "tree": {"sha": "7f9a41d5423f9cb8098c5ac0209967e675f220fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f9a41d5423f9cb8098c5ac0209967e675f220fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4148a6adb37dfd571f1b80b1ede041e05b92066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4148a6adb37dfd571f1b80b1ede041e05b92066", "html_url": "https://github.com/rust-lang/rust/commit/f4148a6adb37dfd571f1b80b1ede041e05b92066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4148a6adb37dfd571f1b80b1ede041e05b92066/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb5d5df89897115cb4c7fba6b8da41ed665f75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb5d5df89897115cb4c7fba6b8da41ed665f75d", "html_url": "https://github.com/rust-lang/rust/commit/2fb5d5df89897115cb4c7fba6b8da41ed665f75d"}], "stats": {"total": 157, "additions": 0, "deletions": 157}, "files": [{"sha": "d49271382b60496d7e1b69d065f5408119e4f4d8", "filename": "src/doc/unstable-book/src/language-features/used.md", "status": "removed", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/2fb5d5df89897115cb4c7fba6b8da41ed665f75d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fb5d5df89897115cb4c7fba6b8da41ed665f75d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md?ref=2fb5d5df89897115cb4c7fba6b8da41ed665f75d", "patch": "@@ -1,157 +0,0 @@\n-# `used`\n-\n-The tracking issue for this feature\n-is: [40289](https://github.com/rust-lang/rust/issues/40289).\n-\n-------------------------\n-\n-The `#[used]` attribute can be applied to `static` variables to prevent the Rust\n-compiler from optimizing them away even if they appear to be unused by the crate\n-(appear to be \"dead code\").\n-\n-``` rust\n-#![feature(used)]\n-\n-#[used]\n-static FOO: i32 = 1;\n-\n-static BAR: i32 = 2;\n-\n-fn main() {}\n-```\n-\n-If you compile this program into an object file, you'll see that `FOO` makes it\n-to the object file but `BAR` doesn't. Neither static variable is used by the\n-program.\n-\n-``` text\n-$ rustc -C opt-level=3 --emit=obj used.rs\n-\n-$ nm -C used.o\n-0000000000000000 T main\n-                 U std::rt::lang_start\n-0000000000000000 r used::FOO\n-0000000000000000 t used::main\n-```\n-\n-Note that the *linker* knows nothing about the `#[used]` attribute and will\n-remove `#[used]` symbols if they are not referenced by other parts of the\n-program:\n-\n-``` text\n-$ rustc -C opt-level=3 used.rs\n-\n-$ nm -C used | grep FOO\n-```\n-\n-\"This doesn't sound too useful then!\" you may think but keep reading.\n-\n-To preserve the symbols all the way to the final binary, you'll need the\n-cooperation of the linker. Here's one example:\n-\n-The ELF standard defines two special sections, `.init_array` and\n-`.pre_init_array`, that may contain function pointers which will be executed\n-*before* the `main` function is invoked. The linker will preserve symbols placed\n-in these sections (at least when linking programs that target the `*-*-linux-*`\n-targets).\n-\n-``` rust,ignore\n-#![feature(used)]\n-\n-extern \"C\" fn before_main() {\n-    println!(\"Hello, world!\");\n-}\n-\n-#[link_section = \".init_array\"]\n-#[used]\n-static INIT_ARRAY: [extern \"C\" fn(); 1] = [before_main];\n-\n-fn main() {}\n-```\n-\n-So, `#[used]` and `#[link_section]` can be combined to obtain \"life before\n-main\".\n-\n-``` text\n-$ rustc -C opt-level=3 before-main.rs\n-\n-$ ./before-main\n-Hello, world!\n-```\n-\n-Another example: ARM Cortex-M microcontrollers need their reset handler, a\n-pointer to the function that will executed right after the microcontroller is\n-turned on, to be placed near the start of their FLASH memory to boot properly.\n-\n-This condition can be met using `#[used]` and `#[link_section]` plus a linker\n-script.\n-\n-``` rust,ignore\n-#![feature(panic_handler)]\n-#![feature(used)]\n-#![no_main]\n-#![no_std]\n-\n-use core::panic::PanicInfo;\n-\n-extern \"C\" fn reset_handler() -> ! {\n-    loop {}\n-}\n-\n-#[link_section = \".reset_handler\"]\n-#[used]\n-static RESET_HANDLER: extern \"C\" fn() -> ! = reset_handler;\n-\n-#[panic_handler]\n-fn panic(info: &PanicInfo) -> ! {\n-    loop {}\n-}\n-```\n-\n-``` text\n-MEMORY\n-{\n-  FLASH : ORIGIN = 0x08000000, LENGTH = 128K\n-  RAM : ORIGIN = 0x20000000, LENGTH = 20K\n-}\n-\n-SECTIONS\n-{\n-  .text ORIGIN(FLASH) :\n-  {\n-    /* Vector table */\n-    LONG(ORIGIN(RAM) + LENGTH(RAM)); /* initial SP value */\n-    KEEP(*(.reset_handler));\n-\n-    /* Omitted: The rest of the vector table */\n-\n-    *(.text.*);\n-  } > FLASH\n-\n-  /DISCARD/ :\n-  {\n-    /* Unused unwinding stuff */\n-    *(.ARM.exidx.*)\n-  }\n-}\n-```\n-\n-``` text\n-$ xargo rustc --target thumbv7m-none-eabi --release -- \\\n-    -C link-arg=-Tlink.x -C link-arg=-nostartfiles\n-\n-$ arm-none-eabi-objdump -Cd target/thumbv7m-none-eabi/release/app\n-./target/thumbv7m-none-eabi/release/app:     file format elf32-littlearm\n-\n-\n-Disassembly of section .text:\n-\n-08000000 <app::RESET_HANDLER-0x4>:\n- 8000000:       20005000        .word   0x20005000\n-\n-08000004 <app::RESET_HANDLER>:\n- 8000004:       08000009                                ....\n-\n-08000008 <app::reset_handler>:\n- 8000008:       e7fe            b.n     8000008 <app::reset_handler>\n-```"}]}