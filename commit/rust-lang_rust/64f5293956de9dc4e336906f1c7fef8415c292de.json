{"sha": "64f5293956de9dc4e336906f1c7fef8415c292de", "node_id": "C_kwDOAAsO6NoAKDY0ZjUyOTM5NTZkZTlkYzRlMzM2OTA2ZjFjN2ZlZjg0MTVjMjkyZGU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-02T05:49:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-02T05:49:07Z"}, "message": "Don't cause a cycle when formatting query description that references a FnDef", "tree": {"sha": "651da7a9c3486c1bc2c0df170d26604bbcd9dd27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/651da7a9c3486c1bc2c0df170d26604bbcd9dd27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f5293956de9dc4e336906f1c7fef8415c292de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f5293956de9dc4e336906f1c7fef8415c292de", "html_url": "https://github.com/rust-lang/rust/commit/64f5293956de9dc4e336906f1c7fef8415c292de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f5293956de9dc4e336906f1c7fef8415c292de/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63ec2e1402eaff949e5c53b8f6062b152010fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63ec2e1402eaff949e5c53b8f6062b152010fcc", "html_url": "https://github.com/rust-lang/rust/commit/e63ec2e1402eaff949e5c53b8f6062b152010fcc"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "cb47522877c2996db4449929401632c6bee3280a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/64f5293956de9dc4e336906f1c7fef8415c292de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f5293956de9dc4e336906f1c7fef8415c292de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=64f5293956de9dc4e336906f1c7fef8415c292de", "patch": "@@ -675,8 +675,12 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(\")\")\n             }\n             ty::FnDef(def_id, substs) => {\n-                let sig = self.tcx().fn_sig(def_id).subst(self.tcx(), substs);\n-                p!(print(sig), \" {{\", print_value_path(def_id, substs), \"}}\");\n+                if NO_QUERIES.with(|q| q.get()) {\n+                    p!(print_def_path(def_id, substs));\n+                } else {\n+                    let sig = self.tcx().fn_sig(def_id).subst(self.tcx(), substs);\n+                    p!(print(sig), \" {{\", print_value_path(def_id, substs), \"}}\");\n+                }\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),\n             ty::Infer(infer_ty) => {\n@@ -732,20 +736,22 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-                // FIXME(eddyb) print this with `print_def_path`.\n                 // We use verbose printing in 'NO_QUERIES' mode, to\n                 // avoid needing to call `predicates_of`. This should\n                 // only affect certain debug messages (e.g. messages printed\n                 // from `rustc_middle::ty` during the computation of `tcx.predicates_of`),\n                 // and should have no effect on any compiler output.\n-                if self.should_print_verbose() || NO_QUERIES.with(|q| q.get()) {\n+                if self.should_print_verbose() {\n+                    // FIXME(eddyb) print this with `print_def_path`.\n                     p!(write(\"Opaque({:?}, {:?})\", def_id, substs));\n                     return Ok(self);\n                 }\n \n                 let parent = self.tcx().parent(def_id);\n                 match self.tcx().def_kind(parent) {\n                     DefKind::TyAlias | DefKind::AssocTy => {\n+                        // NOTE: I know we should check for NO_QUERIES here, but it's alright.\n+                        // `type_of` on a TAIT should never cause a cycle.\n                         if let ty::Alias(ty::Opaque, ty::AliasTy { def_id: d, .. }) =\n                             *self.tcx().type_of(parent).kind()\n                         {\n@@ -760,7 +766,14 @@ pub trait PrettyPrinter<'tcx>:\n                         p!(print_def_path(def_id, substs));\n                         return Ok(self);\n                     }\n-                    _ => return self.pretty_print_opaque_impl_type(def_id, substs),\n+                    _ => {\n+                        if NO_QUERIES.with(|q| q.get()) {\n+                            p!(print_def_path(def_id, &[]));\n+                            return Ok(self);\n+                        } else {\n+                            return self.pretty_print_opaque_impl_type(def_id, substs);\n+                        }\n+                    }\n                 }\n             }\n             ty::Str => p!(\"str\"),"}, {"sha": "4dea03c1ef6a260882b3d1ed46a5285c3b7cedb0", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64f5293956de9dc4e336906f1c7fef8415c292de/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f5293956de9dc4e336906f1c7fef8415c292de/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=64f5293956de9dc4e336906f1c7fef8415c292de", "patch": "@@ -314,11 +314,14 @@ pub(crate) fn create_query_frame<\n     kind: DepKind,\n     name: &'static str,\n ) -> QueryStackFrame<DepKind> {\n-    // Disable visible paths printing for performance reasons.\n-    // Showing visible path instead of any path is not that important in production.\n-    let description = ty::print::with_no_visible_paths!(\n-        // Force filename-line mode to avoid invoking `type_of` query.\n-        ty::print::with_forced_impl_filename_line!(do_describe(tcx.tcx, key))\n+    // Avoid calling queries while formatting the description\n+    let description = ty::print::with_no_queries!(\n+        // Disable visible paths printing for performance reasons.\n+        // Showing visible path instead of any path is not that important in production.\n+        ty::print::with_no_visible_paths!(\n+            // Force filename-line mode to avoid invoking `type_of` query.\n+            ty::print::with_forced_impl_filename_line!(do_describe(tcx.tcx, key))\n+        )\n     );\n     let description =\n         if tcx.sess.verbose() { format!(\"{description} [{name:?}]\") } else { description };"}, {"sha": "71c228958f6fd8933a4d68375d1d474bebae12cf", "filename": "tests/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=64f5293956de9dc4e336906f1c7fef8415c292de", "patch": "@@ -28,8 +28,8 @@ note: ...which requires const checking `x`...\n    |\n LL | pub const async fn x() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n-   = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n+   = note: ...which requires computing whether `x::{opaque#0}` is freeze...\n+   = note: ...which requires evaluating trait selection obligation `x::{opaque#0}: core::marker::Freeze`...\n    = note: ...which again requires computing type of `x::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/no-const-async.rs:4:1"}, {"sha": "fd0358421ebf9599c9e6a13c685f1e77d4e36a7e", "filename": "tests/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=64f5293956de9dc4e336906f1c7fef8415c292de", "patch": "@@ -39,7 +39,7 @@ note: ...which requires type-checking `cycle1`...\n    |\n LL |     send(cycle2().clone());\n    |     ^^^^\n-   = note: ...which requires evaluating trait selection obligation `impl core::clone::Clone: core::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `cycle2::{opaque#0}: core::marker::Send`...\n note: ...which requires computing type of `cycle2::{opaque#0}`...\n   --> $DIR/auto-trait-leak.rs:19:16\n    |\n@@ -80,7 +80,7 @@ note: ...which requires type-checking `cycle2`...\n    |\n LL |     send(cycle1().clone());\n    |     ^^^^\n-   = note: ...which requires evaluating trait selection obligation `impl core::clone::Clone: core::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `cycle1::{opaque#0}: core::marker::Send`...\n    = note: ...which again requires computing type of `cycle1::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/auto-trait-leak.rs:1:1"}, {"sha": "2d8bd19a73108e5bf704b6d1561ab0268d9100e6", "filename": "tests/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=64f5293956de9dc4e336906f1c7fef8415c292de", "patch": "@@ -209,8 +209,8 @@ note: ...which requires const checking `main::ff5`...\n    |\n LL |     const async unsafe extern \"C\" fn ff5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n-   = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n+   = note: ...which requires computing whether `main::ff5::{opaque#0}` is freeze...\n+   = note: ...which requires evaluating trait selection obligation `main::ff5::{opaque#0}: core::marker::Freeze`...\n    = note: ...which again requires computing type of `main::ff5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1\n@@ -245,8 +245,8 @@ note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-f\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n-   = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n+   = note: ...which requires computing whether `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}` is freeze...\n+   = note: ...which requires evaluating trait selection obligation `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}: core::marker::Freeze`...\n    = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1\n@@ -281,8 +281,8 @@ note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-f\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n-   = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n+   = note: ...which requires computing whether `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}` is freeze...\n+   = note: ...which requires evaluating trait selection obligation `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}: core::marker::Freeze`...\n    = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1"}, {"sha": "45b7043e2f6fdbd40d73eb61ed61d26a1347efa4", "filename": "tests/ui/query-system/no-query-in-printing-during-query-descr.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fquery-system%2Fno-query-in-printing-during-query-descr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fquery-system%2Fno-query-in-printing-during-query-descr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquery-system%2Fno-query-in-printing-during-query-descr.rs?ref=64f5293956de9dc4e336906f1c7fef8415c292de", "patch": "@@ -0,0 +1,6 @@\n+fn a() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    &a\n+}\n+\n+fn main() {}"}, {"sha": "35e608b6b232b6fe4d67d419aecefb07b2c8e39f", "filename": "tests/ui/query-system/no-query-in-printing-during-query-descr.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fquery-system%2Fno-query-in-printing-during-query-descr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64f5293956de9dc4e336906f1c7fef8415c292de/tests%2Fui%2Fquery-system%2Fno-query-in-printing-during-query-descr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquery-system%2Fno-query-in-printing-during-query-descr.stderr?ref=64f5293956de9dc4e336906f1c7fef8415c292de", "patch": "@@ -0,0 +1,9 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/no-query-in-printing-during-query-descr.rs:1:11\n+   |\n+LL | fn a() -> _ {\n+   |           ^ not allowed in type signatures\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}]}