{"sha": "622371153c66f9e371f587205d14040534060c18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMjM3MTE1M2M2NmY5ZTM3MWY1ODcyMDVkMTQwNDA1MzQwNjBjMTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-23T22:17:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-28T21:28:15Z"}, "message": "Add `-C target-feature` to all functions\n\nPreviously the features specified to LLVM via `-C target-feature` were only\nreflected in the `TargetMachine` but this change *also* reflects these and the\nbase features inside each function itself. This change matches clang and...\n\nCloses rust-lang-nursery/stdsimd#427", "tree": {"sha": "7b590b27d18f8dbb945a12f2f89b871a807bf088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b590b27d18f8dbb945a12f2f89b871a807bf088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622371153c66f9e371f587205d14040534060c18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622371153c66f9e371f587205d14040534060c18", "html_url": "https://github.com/rust-lang/rust/commit/622371153c66f9e371f587205d14040534060c18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622371153c66f9e371f587205d14040534060c18/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a09fc5398a54538559bd46c38a5372d0ed6091", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a09fc5398a54538559bd46c38a5372d0ed6091", "html_url": "https://github.com/rust-lang/rust/commit/68a09fc5398a54538559bd46c38a5372d0ed6091"}], "stats": {"total": 80, "additions": 47, "deletions": 33}, "files": [{"sha": "f455c19cc0bbef36b947226ff48e4cbd8e9c272f", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/622371153c66f9e371f587205d14040534060c18/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622371153c66f9e371f587205d14040534060c18/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=622371153c66f9e371f587205d14040534060c18", "patch": "@@ -14,6 +14,7 @@ use std::ffi::{CStr, CString};\n use rustc::hir::{self, TransFnAttrFlags};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::session::Session;\n use rustc::session::config::Sanitizer;\n use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n@@ -104,6 +105,18 @@ pub fn set_probestack(cx: &CodegenCx, llfn: ValueRef) {\n         cstr(\"probe-stack\\0\"), cstr(\"__rust_probestack\\0\"));\n }\n \n+pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n+    const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\n+        \"crt-static\",\n+    ];\n+\n+    let cmdline = sess.opts.cg.target_feature.split(',')\n+        .filter(|f| !RUSTC_SPECIFIC_FEATURES.iter().any(|s| f.contains(s)));\n+    sess.target.target.options.features.split(',')\n+        .chain(cmdline)\n+        .filter(|l| !l.is_empty())\n+}\n+\n /// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n /// attributes.\n pub fn from_fn_attrs(cx: &CodegenCx, llfn: ValueRef, id: DefId) {\n@@ -131,13 +144,16 @@ pub fn from_fn_attrs(cx: &CodegenCx, llfn: ValueRef, id: DefId) {\n         unwind(llfn, false);\n     }\n \n-    let features =\n-        trans_fn_attrs.target_features\n-        .iter()\n-        .map(|f| {\n-            let feature = &*f.as_str();\n-            format!(\"+{}\", llvm_util::to_llvm_feature(cx.tcx.sess, feature))\n-        })\n+    let features = llvm_target_features(cx.tcx.sess)\n+        .map(|s| s.to_string())\n+        .chain(\n+            trans_fn_attrs.target_features\n+                .iter()\n+                .map(|f| {\n+                    let feature = &*f.as_str();\n+                    format!(\"+{}\", llvm_util::to_llvm_feature(cx.tcx.sess, feature))\n+                })\n+        )\n         .collect::<Vec<String>>()\n         .join(\",\");\n "}, {"sha": "148e3d0025c83e3cc443bf901d73fdb39553eaed", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/622371153c66f9e371f587205d14040534060c18/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622371153c66f9e371f587205d14040534060c18/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=622371153c66f9e371f587205d14040534060c18", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use attributes;\n use back::bytecode::{self, RLIB_BYTECODE_EXTENSION};\n use back::lto::{self, ModuleBuffer, ThinBuffer};\n use back::link::{self, get_linker, remove};\n@@ -111,31 +112,6 @@ pub fn write_output_file(\n     }\n }\n \n-// On android, we by default compile for armv7 processors. This enables\n-// things like double word CAS instructions (rather than emulating them)\n-// which are *far* more efficient. This is obviously undesirable in some\n-// cases, so if any sort of target feature is specified we don't append v7\n-// to the feature list.\n-//\n-// On iOS only armv7 and newer are supported. So it is useful to\n-// get all hardware potential via VFP3 (hardware floating point)\n-// and NEON (SIMD) instructions supported by LLVM.\n-// Note that without those flags various linking errors might\n-// arise as some of intrinsics are converted into function calls\n-// and nobody provides implementations those functions\n-fn target_feature(sess: &Session) -> String {\n-    let rustc_features = [\n-        \"crt-static\",\n-    ];\n-    let requested_features = sess.opts.cg.target_feature.split(',');\n-    let llvm_features = requested_features.filter(|f| {\n-        !rustc_features.iter().any(|s| f.contains(s))\n-    });\n-    format!(\"{},{}\",\n-            sess.target.target.options.features,\n-            llvm_features.collect::<Vec<_>>().join(\",\"))\n-}\n-\n fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel {\n     match optimize {\n       config::OptLevel::No => llvm::CodeGenOptLevel::None,\n@@ -203,7 +179,10 @@ pub fn target_machine_factory(sess: &Session, find_features: bool)\n         None => &*sess.target.target.options.cpu\n     };\n     let cpu = CString::new(cpu.as_bytes()).unwrap();\n-    let features = CString::new(target_feature(sess).as_bytes()).unwrap();\n+    let features = attributes::llvm_target_features(sess)\n+        .collect::<Vec<_>>()\n+        .join(\",\");\n+    let features = CString::new(features).unwrap();\n     let is_pie_binary = !find_features && is_pie_binary(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n "}, {"sha": "e3cc2c753e55e75e808961d3f38f3eaed37cb34c", "filename": "src/test/codegen/target-feature-on-functions.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/622371153c66f9e371f587205d14040534060c18/src%2Ftest%2Fcodegen%2Ftarget-feature-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622371153c66f9e371f587205d14040534060c18/src%2Ftest%2Fcodegen%2Ftarget-feature-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-feature-on-functions.rs?ref=622371153c66f9e371f587205d14040534060c18", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+// compile-flags: -C target-feature=+avx\n+\n+#![crate_type = \"lib\"]\n+\n+#[no_mangle]\n+pub fn foo() {\n+    // CHECK: attributes #0 = { {{.*}}\"target-features\"=\"+avx\"{{.*}} }\n+}"}]}