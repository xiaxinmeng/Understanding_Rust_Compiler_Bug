{"sha": "c66812193e7cb83939367227393e0eab047e12ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NjgxMjE5M2U3Y2I4MzkzOTM2NzIyNzM5M2UwZWFiMDQ3ZTEyY2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T08:30:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T08:31:12Z"}, "message": "Prettier rendering", "tree": {"sha": "1564544509bebee4ccaaf11138d565ecae5f36a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1564544509bebee4ccaaf11138d565ecae5f36a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66812193e7cb83939367227393e0eab047e12ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66812193e7cb83939367227393e0eab047e12ce", "html_url": "https://github.com/rust-lang/rust/commit/c66812193e7cb83939367227393e0eab047e12ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66812193e7cb83939367227393e0eab047e12ce/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa", "html_url": "https://github.com/rust-lang/rust/commit/e7c47eb7f599da93f64c5a8d4f8e83ddd3fa1baa"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "a4c97e7f98630db6dfdd05a542e1a7a0e6f37672", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c66812193e7cb83939367227393e0eab047e12ce/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66812193e7cb83939367227393e0eab047e12ce/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=c66812193e7cb83939367227393e0eab047e12ce", "patch": "@@ -368,7 +368,7 @@ mod tests {\n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n \n-        let actual = format!(\"{}:\\n{}\\n\", hovered_element, hover.info.markup);\n+        let actual = format!(\"*{}*\\n{}\\n\", hovered_element, hover.info.markup);\n         expect.assert_eq(&actual)\n     }\n \n@@ -389,7 +389,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                foo():\n+                *foo()*\n                 ```rust\n                 u32\n                 ```\n@@ -421,7 +421,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                iter:\n+                *iter*\n                 ```rust\n                 Iter<Scan<OtherStruct<OtherStruct<i32>>, |&mut u32, &u32, &mut u32| -> Option<u32>, u32>>\n                 ```\n@@ -439,7 +439,7 @@ pub fn foo() -> u32 { 1 }\n fn main() { let foo_test = fo<|>o(); }\n \"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 pub fn foo() -> u32\n                 ```\n@@ -466,7 +466,7 @@ mod c;\n fn main() { let foo_test = fo<|>o(); }\n         \"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 {unknown}\n                 ```\n@@ -483,7 +483,7 @@ pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str { }\n fn main() { let foo_test = fo<|>o(); }\n         \"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str\n                 ```\n@@ -500,7 +500,7 @@ pub fn foo<|>(a: u32, b: u32) -> u32 {}\n fn main() { }\n \"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 pub fn foo(a: u32, b: u32) -> u32\n                 ```\n@@ -520,7 +520,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                field_a:\n+                *field_a*\n                 ```rust\n                 Foo\n                 ```\n@@ -541,7 +541,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                field_a:\n+                *field_a*\n                 ```rust\n                 Foo\n                 ```\n@@ -558,7 +558,7 @@ fn main() {\n         check(\n             r#\"const foo<|>: u32 = 0;\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 const foo: u32\n                 ```\n@@ -567,7 +567,7 @@ fn main() {\n         check(\n             r#\"static foo<|>: u32 = 0;\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 static foo: u32\n                 ```\n@@ -585,7 +585,7 @@ fn main() {\n     let zz<|> = Test { t: 23u8, k: 33 };\n }\"#,\n             expect![[r#\"\n-                zz:\n+                *zz*\n                 ```rust\n                 Test<i32, u8>\n                 ```\n@@ -603,7 +603,7 @@ use Option::Some;\n fn main() { So<|>me(12); }\n \"#,\n             expect![[r#\"\n-                Some:\n+                *Some*\n                 ```rust\n                 Option\n                 ```\n@@ -622,7 +622,7 @@ use Option::Some;\n fn main() { let b<|>ar = Some(12); }\n \"#,\n             expect![[r#\"\n-                bar:\n+                *bar*\n                 ```rust\n                 Option<i32>\n                 ```\n@@ -640,7 +640,7 @@ enum Option<T> {\n }\n \"#,\n             expect![[r#\"\n-                None:\n+                *None*\n                 ```rust\n                 Option\n                 ```\n@@ -665,7 +665,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Some:\n+                *Some*\n                 ```rust\n                 Option\n                 ```\n@@ -685,7 +685,7 @@ fn main() {\n         check(\n             r#\"fn func(foo: i32) { fo<|>o; }\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 i32\n                 ```\n@@ -698,7 +698,7 @@ fn main() {\n         check(\n             r#\"fn func(fo<|>o: i32) {}\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 i32\n                 ```\n@@ -711,7 +711,7 @@ fn main() {\n         check(\n             r#\"fn func(foo: i32) { if true { <|>foo; }; }\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 i32\n                 ```\n@@ -724,7 +724,7 @@ fn main() {\n         check(\n             r#\"fn func(<|>foo: i32) {}\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 i32\n                 ```\n@@ -745,7 +745,7 @@ impl Thing {\n fn main() { let foo_<|>test = Thing::new(); }\n             \"#,\n             expect![[r#\"\n-                foo_test:\n+                *foo_test*\n                 ```rust\n                 Thing\n                 ```\n@@ -768,7 +768,7 @@ mod wrapper {\n fn main() { let foo_test = wrapper::Thing::new<|>(); }\n \"#,\n             expect![[r#\"\n-                new:\n+                *new*\n                 ```rust\n                 wrapper::Thing\n                 ```\n@@ -798,7 +798,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                C:\n+                *C*\n                 ```rust\n                 const C: u32\n                 ```\n@@ -816,7 +816,7 @@ impl Thing {\n }\n \"#,\n             expect![[r#\"\n-                Self { x: 0 }:\n+                *Self { x: 0 }*\n                 ```rust\n                 Thing\n                 ```\n@@ -875,7 +875,7 @@ fn y() {\n }\n \"#,\n             expect![[r#\"\n-                x:\n+                *x*\n                 ```rust\n                 i32\n                 ```\n@@ -892,7 +892,7 @@ macro_rules! foo { () => {} }\n fn f() { fo<|>o!(); }\n \"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 macro_rules! foo\n                 ```\n@@ -905,7 +905,7 @@ fn f() { fo<|>o!(); }\n         check(\n             r#\"struct TS(String, i32<|>);\"#,\n             expect![[r#\"\n-                i32:\n+                *i32*\n                 i32\n             \"#]],\n         )\n@@ -922,7 +922,7 @@ id! {\n }\n \"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 fn foo()\n                 ```\n@@ -938,7 +938,7 @@ macro_rules! id { ($($tt:tt)*) => { $($tt)* } }\n fn foo(bar:u32) { let a = id!(ba<|>r); }\n \"#,\n             expect![[r#\"\n-                bar:\n+                *bar*\n                 ```rust\n                 u32\n                 ```\n@@ -955,7 +955,7 @@ macro_rules! id { ($($tt:tt)*) => { id_deep!($($tt)*) } }\n fn foo(bar:u32) { let a = id!(ba<|>r); }\n \"#,\n             expect![[r#\"\n-                bar:\n+                *bar*\n                 ```rust\n                 u32\n                 ```\n@@ -973,7 +973,7 @@ fn bar() -> u32 { 0 }\n fn foo() { let a = id!([0u32, bar(<|>)] ); }\n \"#,\n             expect![[r#\"\n-                bar():\n+                *bar()*\n                 ```rust\n                 u32\n                 ```\n@@ -992,7 +992,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                \"Tracks\":\n+                *\"Tracks\"*\n                 ```rust\n                 &str\n                 ```\n@@ -1013,7 +1013,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                bar:\n+                *bar*\n                 ```rust\n                 fn bar() -> bool\n                 ```\n@@ -1045,7 +1045,7 @@ fn foo() { }\n fn bar() { fo<|>o(); }\n \",\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 fn foo()\n                 ```\n@@ -1061,7 +1061,7 @@ fn bar() { fo<|>o(); }\n         check(\n             r#\"async fn foo<|>() {}\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 async fn foo()\n                 ```\n@@ -1070,7 +1070,7 @@ fn bar() { fo<|>o(); }\n         check(\n             r#\"pub const unsafe fn foo<|>() {}\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 pub const unsafe fn foo()\n                 ```\n@@ -1079,7 +1079,7 @@ fn bar() { fo<|>o(); }\n         check(\n             r#\"pub(crate) async unsafe extern \"C\" fn foo<|>() {}\"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 pub(crate) async unsafe extern \"C\" fn foo()\n                 ```\n@@ -1116,7 +1116,7 @@ mod my { pub struct Bar; }\n fn my() {}\n \"#,\n             expect![[r#\"\n-                my:\n+                *my*\n                 ```rust\n                 mod my\n                 ```\n@@ -1134,7 +1134,7 @@ struct Bar;\n fn foo() { let bar = Ba<|>r; }\n \"#,\n             expect![[r#\"\n-                Bar:\n+                *Bar*\n                 ```rust\n                 struct Bar\n                 ```\n@@ -1155,7 +1155,7 @@ struct Bar;\n fn foo() { let bar = Ba<|>r; }\n \"#,\n             expect![[r#\"\n-                Bar:\n+                *Bar*\n                 ```rust\n                 struct Bar\n                 ```\n@@ -1178,7 +1178,7 @@ struct Bar;\n fn foo() { let bar = Ba<|>r; }\n \"#,\n             expect![[r#\"\n-                Bar:\n+                *Bar*\n                 ```rust\n                 struct Bar\n                 ```\n@@ -1214,7 +1214,7 @@ bar!();\n fn foo() { let bar = Bar; bar.fo<|>o(); }\n \"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 Bar\n                 ```\n@@ -1250,7 +1250,7 @@ bar!();\n fn foo() { let bar = Bar; bar.fo<|>o(); }\n \"#,\n             expect![[r#\"\n-                foo:\n+                *foo*\n                 ```rust\n                 Bar\n                 ```"}]}