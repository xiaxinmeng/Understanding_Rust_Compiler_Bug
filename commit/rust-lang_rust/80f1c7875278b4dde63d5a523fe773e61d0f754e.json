{"sha": "80f1c7875278b4dde63d5a523fe773e61d0f754e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZjFjNzg3NTI3OGI0ZGRlNjNkNWE1MjNmZTc3M2U2MWQwZjc1NGU=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-06-23T19:19:40Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-06-23T19:19:40Z"}, "message": "make old school mode a bit more configurable", "tree": {"sha": "27e086b40da848f4cb6371ead7b14b48d115338d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e086b40da848f4cb6371ead7b14b48d115338d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80f1c7875278b4dde63d5a523fe773e61d0f754e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80f1c7875278b4dde63d5a523fe773e61d0f754e", "html_url": "https://github.com/rust-lang/rust/commit/80f1c7875278b4dde63d5a523fe773e61d0f754e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80f1c7875278b4dde63d5a523fe773e61d0f754e/comments", "author": null, "committer": null, "parents": [{"sha": "d4e79dec92e2f478add8423decf728cdae147860", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e79dec92e2f478add8423decf728cdae147860", "html_url": "https://github.com/rust-lang/rust/commit/d4e79dec92e2f478add8423decf728cdae147860"}], "stats": {"total": 147, "additions": 104, "deletions": 43}, "files": [{"sha": "77259cea24d28265ddac5472e72fb52bb35afe33", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=80f1c7875278b4dde63d5a523fe773e61d0f754e", "patch": "@@ -454,7 +454,10 @@ pub fn build_session_with_codemap(sopts: config::Options,\n \n     let emitter: Box<Emitter> = match sopts.error_format {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, Some(registry), codemap.clone()))\n+            Box::new(EmitterWriter::stderr(color_config,\n+                                           Some(registry),\n+                                           codemap.clone(),\n+                                           errors::snippet::FormatMode::EnvironmentSelected))\n         }\n         config::ErrorOutputType::Json => {\n             Box::new(JsonEmitter::stderr(Some(registry), codemap.clone()))"}, {"sha": "a7c68e3a87b318f418f41ff688894afb493ea3a9", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=80f1c7875278b4dde63d5a523fe773e61d0f754e", "patch": "@@ -17,7 +17,7 @@ use check_old_skool;\n use {Level, RenderSpan, CodeSuggestion, DiagnosticBuilder, CodeMapper};\n use RenderSpan::*;\n use Level::*;\n-use snippet::{RenderedLineKind, SnippetData, Style};\n+use snippet::{RenderedLineKind, SnippetData, Style, FormatMode};\n \n use std::{cmp, fmt};\n use std::io::prelude::*;\n@@ -159,7 +159,7 @@ pub struct EmitterWriter {\n     first: bool,\n \n     // For now, allow an old-school mode while we transition\n-    old_school: bool,\n+    format_mode: FormatMode\n }\n \n impl CoreEmitter for EmitterWriter {\n@@ -194,35 +194,35 @@ macro_rules! println_maybe_styled {\n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig,\n                   registry: Option<registry::Registry>,\n-                  code_map: Rc<CodeMapper>)\n+                  code_map: Rc<CodeMapper>,\n+                  format_mode: FormatMode)\n                   -> EmitterWriter {\n-        let old_school = check_old_skool();\n         if color_config.use_color() {\n             let dst = Destination::from_stderr();\n             EmitterWriter { dst: dst,\n                             registry: registry,\n                             cm: code_map,\n                             first: true,\n-                            old_school: old_school }\n+                            format_mode: format_mode.clone() }\n         } else {\n             EmitterWriter { dst: Raw(Box::new(io::stderr())),\n                             registry: registry,\n                             cm: code_map,\n                             first: true,\n-                            old_school: old_school }\n+                            format_mode: format_mode.clone() }\n         }\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n                registry: Option<registry::Registry>,\n-               code_map: Rc<CodeMapper>)\n+               code_map: Rc<CodeMapper>,\n+               format_mode: FormatMode)\n                -> EmitterWriter {\n-        let old_school = check_old_skool();\n         EmitterWriter { dst: Raw(dst),\n                         registry: registry,\n                         cm: code_map,\n                         first: true,\n-                        old_school: old_school }\n+                        format_mode: format_mode.clone() }\n     }\n \n     fn emit_message_(&mut self,\n@@ -233,11 +233,17 @@ impl EmitterWriter {\n                      is_header: bool,\n                      show_snippet: bool)\n                      -> io::Result<()> {\n+        let old_school = match self.format_mode {\n+            FormatMode::NewErrorFormat => false,\n+            FormatMode::OriginalErrorFormat => true,\n+            FormatMode::EnvironmentSelected => check_old_skool()\n+        };\n+\n         if is_header {\n             if self.first {\n                 self.first = false;\n             } else {\n-                if !self.old_school {\n+                if !old_school {\n                     write!(self.dst, \"\\n\")?;\n                 }\n             }\n@@ -248,7 +254,7 @@ impl EmitterWriter {\n                                        .and_then(|registry| registry.find_description(code))\n                                        .is_some() => {\n                 let code_with_explain = String::from(\"--explain \") + code;\n-                if self.old_school {\n+                if old_school {\n                     let loc = match rsp.span().primary_span() {\n                         Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => \"\".to_string(),\n                         Some(ps) => self.cm.span_to_string(ps),\n@@ -261,7 +267,7 @@ impl EmitterWriter {\n                 }\n             }\n             _ => {\n-                if self.old_school {\n+                if old_school {\n                     let loc = match rsp.span().primary_span() {\n                         Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => \"\".to_string(),\n                         Some(ps) => self.cm.span_to_string(ps),\n@@ -303,7 +309,7 @@ impl EmitterWriter {\n                 }\n             }\n         }\n-        if self.old_school {\n+        if old_school {\n             match code {\n                 Some(code) if self.registry.as_ref()\n                                         .and_then(|registry| registry.find_description(code))\n@@ -363,14 +369,22 @@ impl EmitterWriter {\n                        lvl: Level)\n                        -> io::Result<()>\n     {\n+        let old_school = match self.format_mode {\n+            FormatMode::NewErrorFormat => false,\n+            FormatMode::OriginalErrorFormat => true,\n+            FormatMode::EnvironmentSelected => check_old_skool()\n+        };\n+\n         let mut snippet_data = SnippetData::new(self.cm.clone(),\n-                                                msp.primary_span());\n-        if self.old_school {\n+                                                msp.primary_span(),\n+                                                self.format_mode.clone());\n+        if old_school {\n             let mut output_vec = vec![];\n \n             for span_label in msp.span_labels() {\n                 let mut snippet_data = SnippetData::new(self.cm.clone(),\n-                                                        Some(span_label.span));\n+                                                        Some(span_label.span),\n+                                                        self.format_mode.clone());\n \n                 snippet_data.push(span_label.span,\n                                   span_label.is_primary,"}, {"sha": "18fc826f9aa4bc5840fb8e7b05c10732c07ab33b", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=80f1c7875278b4dde63d5a523fe773e61d0f754e", "patch": "@@ -425,7 +425,8 @@ impl Handler {\n                             treat_err_as_bug: bool,\n                             cm: Rc<CodeMapper>)\n                             -> Handler {\n-        let emitter = Box::new(EmitterWriter::stderr(color_config, registry, cm));\n+        let emitter = Box::new(EmitterWriter::stderr(color_config, registry, cm,\n+                               snippet::FormatMode::EnvironmentSelected));\n         Handler::with_emitter(can_emit_warnings, treat_err_as_bug, emitter)\n     }\n "}, {"sha": "33f40ffc71a9f69b78b965db5c2f7cb066503e4c", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=80f1c7875278b4dde63d5a523fe773e61d0f754e", "patch": "@@ -17,10 +17,18 @@ use std::cmp;\n use std::rc::Rc;\n use std::mem;\n \n+#[derive(Clone)]\n+pub enum FormatMode {\n+    NewErrorFormat,\n+    OriginalErrorFormat,\n+    EnvironmentSelected\n+}\n+\n #[derive(Clone)]\n pub struct SnippetData {\n     codemap: Rc<CodeMapper>,\n     files: Vec<FileInfo>,\n+    format_mode: FormatMode,\n }\n \n #[derive(Clone)]\n@@ -35,6 +43,10 @@ pub struct FileInfo {\n     primary_span: Option<Span>,\n \n     lines: Vec<Line>,\n+\n+    /// The type of error format to render.  We keep it here so that\n+    /// it's easy to configure for both tests and regular usage\n+    format_mode: FormatMode,\n }\n \n #[derive(Clone, Debug)]\n@@ -111,7 +123,8 @@ pub enum RenderedLineKind {\n \n impl SnippetData {\n     pub fn new(codemap: Rc<CodeMapper>,\n-               primary_span: Option<Span>) // (*)\n+               primary_span: Option<Span>,\n+               format_mode: FormatMode) // (*)\n                -> Self {\n         // (*) The primary span indicates the file that must appear\n         // first, and which will have a line number etc in its\n@@ -125,7 +138,8 @@ impl SnippetData {\n \n         let mut data = SnippetData {\n             codemap: codemap.clone(),\n-            files: vec![]\n+            files: vec![],\n+            format_mode: format_mode.clone()\n         };\n         if let Some(primary_span) = primary_span {\n             let lo = codemap.lookup_char_pos(primary_span.lo);\n@@ -134,6 +148,7 @@ impl SnippetData {\n                     file: lo.file,\n                     primary_span: Some(primary_span),\n                     lines: vec![],\n+                    format_mode: format_mode.clone(),\n                 });\n         }\n         data\n@@ -166,6 +181,7 @@ impl SnippetData {\n                 file: file_map.clone(),\n                 lines: vec![],\n                 primary_span: None,\n+                format_mode: self.format_mode.clone()\n             });\n         self.files.last_mut().unwrap()\n     }\n@@ -177,7 +193,7 @@ impl SnippetData {\n             self.files.iter()\n                       .flat_map(|f| f.render_file_lines(&self.codemap))\n                       .collect();\n-        prepend_prefixes(&mut rendered_lines);\n+        prepend_prefixes(&mut rendered_lines, &self.format_mode);\n         trim_lines(&mut rendered_lines);\n         rendered_lines\n     }\n@@ -454,7 +470,11 @@ impl FileInfo {\n     }\n \n     fn render_file_lines(&self, codemap: &Rc<CodeMapper>) -> Vec<RenderedLine> {\n-        let old_school = check_old_skool();\n+        let old_school = match self.format_mode {\n+            FormatMode::OriginalErrorFormat => true,\n+            FormatMode::NewErrorFormat => false,\n+            FormatMode::EnvironmentSelected => check_old_skool()\n+        };\n \n         // As a first step, we elide any instance of more than one\n         // continuous unannotated line.\n@@ -590,7 +610,12 @@ impl FileInfo {\n     }\n \n     fn render_line(&self, line: &Line) -> Vec<RenderedLine> {\n-        let old_school = check_old_skool();\n+        let old_school = match self.format_mode {\n+            FormatMode::OriginalErrorFormat => true,\n+            FormatMode::NewErrorFormat => false,\n+            FormatMode::EnvironmentSelected => check_old_skool()\n+        };\n+\n         let source_string = self.file.get_line(line.line_index)\n                                      .unwrap_or(\"\");\n         let source_kind = RenderedLineKind::SourceText {\n@@ -775,8 +800,12 @@ impl FileInfo {\n     }\n }\n \n-fn prepend_prefixes(rendered_lines: &mut [RenderedLine]) {\n-    let old_school = check_old_skool();\n+fn prepend_prefixes(rendered_lines: &mut [RenderedLine], format_mode: &FormatMode) {\n+    let old_school = match *format_mode {\n+        FormatMode::OriginalErrorFormat => true,\n+        FormatMode::NewErrorFormat => false,\n+        FormatMode::EnvironmentSelected => check_old_skool()\n+    };\n     if old_school {\n         return;\n     }"}, {"sha": "766f27dc0a99f88b382c140963cd93449c59f74b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=80f1c7875278b4dde63d5a523fe773e61d0f754e", "patch": "@@ -830,7 +830,7 @@ mod tests {\n     use syntax_pos::*;\n     use errors::{Level, CodeSuggestion};\n     use errors::emitter::EmitterWriter;\n-    use errors::snippet::{SnippetData, RenderedLine};\n+    use errors::snippet::{SnippetData, RenderedLine, FormatMode};\n     use std::sync::{Arc, Mutex};\n     use std::io::{self, Write};\n     use std::str::from_utf8;\n@@ -1234,7 +1234,10 @@ r\"blork2.rs:2:1: 2:12\n     fn test_hilight_suggestion_issue_11715() {\n         let data = Arc::new(Mutex::new(Vec::new()));\n         let cm = Rc::new(CodeMap::new());\n-        let mut ew = EmitterWriter::new(Box::new(Sink(data.clone())), None, cm.clone());\n+        let mut ew = EmitterWriter::new(Box::new(Sink(data.clone())),\n+                                        None,\n+                                        cm.clone(),\n+                                        FormatMode::NewErrorFormat);\n         let content = \"abcdefg\n         koksi\n         line3\n@@ -1317,7 +1320,10 @@ r\"blork2.rs:2:1: 2:12\n     fn test_multispan_highlight() {\n         let data = Arc::new(Mutex::new(Vec::new()));\n         let cm = Rc::new(CodeMap::new());\n-        let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())), None, cm.clone());\n+        let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())),\n+                                          None,\n+                                          cm.clone(),\n+                                          FormatMode::NewErrorFormat);\n \n         let inp =       \"_____aaaaaa____bbbbbb__cccccdd_\";\n         let sp1 =       \"     ~~~~~~                    \";\n@@ -1370,7 +1376,10 @@ r\"blork2.rs:2:1: 2:12\n     fn test_huge_multispan_highlight() {\n         let data = Arc::new(Mutex::new(Vec::new()));\n         let cm = Rc::new(CodeMap::new());\n-        let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())), None, cm.clone());\n+        let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())),\n+                                          None,\n+                                          cm.clone(),\n+                                          FormatMode::NewErrorFormat);\n \n         let inp = \"aaaaa\\n\\\n                    aaaaa\\n\\\n@@ -1462,7 +1471,7 @@ fn foo() {\n         let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n         let span_bar = cm.span_substr(&foo, file_text, \"bar\", 0);\n \n-        let mut snippet = SnippetData::new(cm, Some(span_bar));\n+        let mut snippet = SnippetData::new(cm, Some(span_bar), FormatMode::NewErrorFormat);\n         snippet.push(span_bar, true, None);\n \n         let lines = snippet.render_lines();\n@@ -1489,7 +1498,7 @@ fn foo() {\n         let span_vec1 = cm.span_substr(&foo, file_text, \"vec\", 1);\n         let span_semi = cm.span_substr(&foo, file_text, \";\", 0);\n \n-        let mut snippet = SnippetData::new(cm, None);\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n         snippet.push(span_vec0, false, Some(format!(\"previous borrow of `vec` occurs here\")));\n         snippet.push(span_vec1, false, Some(format!(\"error occurs here\")));\n         snippet.push(span_semi, false, Some(format!(\"previous borrow ends here\")));\n@@ -1554,7 +1563,7 @@ fn bar() {\n         let span_bar_vec1 = cm.span_substr(&bar_map, file_text_bar, \"vec\", 1);\n         let span_bar_semi = cm.span_substr(&bar_map, file_text_bar, \";\", 0);\n \n-        let mut snippet = SnippetData::new(cm, Some(span_foo_vec1));\n+        let mut snippet = SnippetData::new(cm, Some(span_foo_vec1), FormatMode::NewErrorFormat);\n         snippet.push(span_foo_vec0, false, Some(format!(\"a\")));\n         snippet.push(span_foo_vec1, true, Some(format!(\"b\")));\n         snippet.push(span_foo_semi, false, Some(format!(\"c\")));\n@@ -1611,7 +1620,7 @@ fn foo() {\n         let span_data1 = cm.span_substr(&foo, file_text, \"data\", 1);\n         let span_rbrace = cm.span_substr(&foo, file_text, \"}\", 3);\n \n-        let mut snippet = SnippetData::new(cm, None);\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n         snippet.push(span_data0, false, Some(format!(\"immutable borrow begins here\")));\n         snippet.push(span_data1, false, Some(format!(\"mutable borrow occurs here\")));\n         snippet.push(span_rbrace, false, Some(format!(\"immutable borrow ends here\")));\n@@ -1651,7 +1660,7 @@ fn foo() {\n         let span2 = cm.span_substr(&foo, file_text, \"ec.push\", 0);\n         let span3 = cm.span_substr(&foo, file_text, \"unwrap\", 0);\n \n-        let mut snippet = SnippetData::new(cm, None);\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n         snippet.push(span0, false, Some(format!(\"A\")));\n         snippet.push(span1, false, Some(format!(\"B\")));\n         snippet.push(span2, false, Some(format!(\"C\")));\n@@ -1689,7 +1698,7 @@ fn foo() {\n         let span_semi = cm.span_substr(&foo, file_text, \";\", 0);\n \n         // intentionally don't push the snippets left to right\n-        let mut snippet = SnippetData::new(cm, None);\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n         snippet.push(span_vec1, false, Some(format!(\"error occurs here\")));\n         snippet.push(span_vec0, false, Some(format!(\"previous borrow of `vec` occurs here\")));\n         snippet.push(span_semi, false, Some(format!(\"previous borrow ends here\")));\n@@ -1729,7 +1738,7 @@ fn foo() {\n         let span_vec0 = cm.span_substr(&foo, file_text, \"vec\", 3);\n         let span_vec1 = cm.span_substr(&foo, file_text, \"vec\", 8);\n \n-        let mut snippet = SnippetData::new(cm, None);\n+        let mut snippet = SnippetData::new(cm, None, FormatMode::NewErrorFormat);\n         snippet.push(span_vec0, false, Some(format!(\"`vec` moved here because it \\\n             has type `collections::vec::Vec<i32>`\")));\n         snippet.push(span_vec1, false, Some(format!(\"use of moved value: `vec`\")));\n@@ -1766,7 +1775,7 @@ fn foo() {\n         let cm = Rc::new(CodeMap::new());\n         let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n \n-        let mut snippet = SnippetData::new(cm.clone(), None);\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n         for i in 0..4 {\n             let span_veci = cm.span_substr(&foo, file_text, \"vec\", i);\n             snippet.push(span_veci, false, None);\n@@ -1800,7 +1809,7 @@ impl SomeTrait for () {\n         let cm = Rc::new(CodeMap::new());\n         let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n \n-        let mut snippet = SnippetData::new(cm.clone(), None);\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n         let fn_span = cm.span_substr(&foo, file_text, \"fn\", 0);\n         let rbrace_span = cm.span_substr(&foo, file_text, \"}\", 0);\n         snippet.push(splice(fn_span, rbrace_span), false, None);\n@@ -1829,7 +1838,7 @@ impl SomeTrait for () {\n         let cm = Rc::new(CodeMap::new());\n         let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n \n-        let mut snippet = SnippetData::new(cm.clone(), None);\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n         let fn_span = cm.span_substr(&foo, file_text, \"fn foo(x: u32)\", 0);\n         let x_span = cm.span_substr(&foo, file_text, \"x\", 0);\n         snippet.push(fn_span, false, Some(format!(\"fn_span\")));\n@@ -1864,7 +1873,7 @@ impl SomeTrait for () {\n         let cm = Rc::new(CodeMap::new());\n         let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n \n-        let mut snippet = SnippetData::new(cm.clone(), None);\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n         let fn_span = cm.span_substr(&foo, file_text, \"fn foo(x\", 0);\n         let x_span = cm.span_substr(&foo, file_text, \"x: u32)\", 0);\n         snippet.push(fn_span, false, Some(format!(\"fn_span\")));\n@@ -1902,7 +1911,7 @@ impl SomeTrait for () {\n         let cm = Rc::new(CodeMap::new());\n         let foo = cm.new_filemap_and_lines(\"foo.rs\", None, file_text);\n \n-        let mut snippet = SnippetData::new(cm.clone(), None);\n+        let mut snippet = SnippetData::new(cm.clone(), None, FormatMode::NewErrorFormat);\n \n         let closure_span = {\n             let closure_start_span = cm.span_substr(&foo, file_text, \"||\", 0);\n@@ -1954,7 +1963,9 @@ fn main() {\n         let mut rbrace_span = cm.span_substr(&foo, file_text, \"}\", 1);\n         rbrace_span.lo = rbrace_span.hi;\n \n-        let mut snippet = SnippetData::new(cm.clone(), Some(rbrace_span));\n+        let mut snippet = SnippetData::new(cm.clone(),\n+                                           Some(rbrace_span),\n+                                           FormatMode::NewErrorFormat);\n         snippet.push(rbrace_span, false, None);\n         let lines = snippet.render_lines();\n         let text: String = make_string(&lines);"}, {"sha": "809f4daa3616d7a481dace362d62e59499668db0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1c7875278b4dde63d5a523fe773e61d0f754e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=80f1c7875278b4dde63d5a523fe773e61d0f754e", "patch": "@@ -1687,7 +1687,10 @@ mod tests {\n \n     fn mk_sh(cm: Rc<CodeMap>) -> errors::Handler {\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-        let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()), None, cm);\n+        let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n+                                                None,\n+                                                cm,\n+                                                errors::snippet::FormatMode::EnvironmentSelected);\n         errors::Handler::with_emitter(true, false, Box::new(emitter))\n     }\n "}]}