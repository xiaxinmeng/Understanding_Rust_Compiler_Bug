{"sha": "fb0b1237b12e949320ccd31a6741f03425fc9a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMGIxMjM3YjEyZTk0OTMyMGNjZDMxYTY3NDFmMDM0MjVmYzlhNjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-30T00:17:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-30T00:17:51Z"}, "message": "Auto merge of #74929 - Manishearth:rollup-z2vflrp, r=Manishearth\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #74742 (Remove links to rejected errata 4406 for RFC 4291)\n - #74819 (Point towards `format_spec`; it is in other direction)\n - #74852 (Explain why inlining default ToString impl)\n - #74869 (Make closures and generators a must use types)\n - #74873 (symbol mangling: use ty::print::Print for consts)\n - #74902 (Remove deprecated unstable `{Box,Rc,Arc}::into_raw_non_null`\u00a0functions)\n - #74904 (Fix some typos in src/librustdoc/clean/auto_trait.rs)\n - #74910 (fence docs: fix example Mutex)\n - #74912 (Fix broken link in unstable book `plugin`)\n - #74927 (Change the target data layout to specify more values)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3f49c7e7bb5e814d2a23ab73a105f4fc4a9f49fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f49c7e7bb5e814d2a23ab73a105f4fc4a9f49fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb0b1237b12e949320ccd31a6741f03425fc9a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0b1237b12e949320ccd31a6741f03425fc9a66", "html_url": "https://github.com/rust-lang/rust/commit/fb0b1237b12e949320ccd31a6741f03425fc9a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb0b1237b12e949320ccd31a6741f03425fc9a66/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b269e44322cfca727fd0e793d3a60bd371cbcae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b269e44322cfca727fd0e793d3a60bd371cbcae", "html_url": "https://github.com/rust-lang/rust/commit/6b269e44322cfca727fd0e793d3a60bd371cbcae"}, {"sha": "f4f77d756dd29872829b9b59f44a64c0a5e11c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f77d756dd29872829b9b59f44a64c0a5e11c61", "html_url": "https://github.com/rust-lang/rust/commit/f4f77d756dd29872829b9b59f44a64c0a5e11c61"}], "stats": {"total": 510, "additions": 373, "deletions": 137}, "files": [{"sha": "65e0c984fe893d0eaba2faf63adb74de20447e24", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -143,7 +143,7 @@ use core::ops::{\n     CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Generator, GeneratorState, Receiver,\n };\n use core::pin::Pin;\n-use core::ptr::{self, NonNull, Unique};\n+use core::ptr::{self, Unique};\n use core::task::{Context, Poll};\n \n use crate::alloc::{self, AllocInit, AllocRef, Global};\n@@ -451,50 +451,6 @@ impl<T: ?Sized> Box<T> {\n         Box::leak(b) as *mut T\n     }\n \n-    /// Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.\n-    ///\n-    /// After calling this function, the caller is responsible for the\n-    /// memory previously managed by the `Box`. In particular, the\n-    /// caller should properly destroy `T` and release the memory. The\n-    /// easiest way to do so is to convert the `NonNull<T>` pointer\n-    /// into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n-    /// function.\n-    ///\n-    /// Note: this is an associated function, which means that you have\n-    /// to call it as `Box::into_raw_non_null(b)`\n-    /// instead of `b.into_raw_non_null()`. This\n-    /// is so that there is no conflict with a method on the inner type.\n-    ///\n-    /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(box_into_raw_non_null)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// let x = Box::new(5);\n-    /// let ptr = Box::into_raw_non_null(x);\n-    ///\n-    /// // Clean up the memory by converting the NonNull pointer back\n-    /// // into a Box and letting the Box be dropped.\n-    /// let x = unsafe { Box::from_raw(ptr.as_ptr()) };\n-    /// ```\n-    #[unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")]\n-    #[rustc_deprecated(\n-        since = \"1.44.0\",\n-        reason = \"use `Box::leak(b).into()` or `NonNull::from(Box::leak(b))` instead\"\n-    )]\n-    #[inline]\n-    pub fn into_raw_non_null(b: Box<T>) -> NonNull<T> {\n-        // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n-        // raw pointer for the type system. Turning it directly into a raw pointer would not be\n-        // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n-        // so all raw pointer methods go through `leak` which creates a (unique)\n-        // mutable reference. Turning *that* to a raw pointer behaves correctly.\n-        Box::leak(b).into()\n-    }\n-\n     #[unstable(\n         feature = \"ptr_internals\",\n         issue = \"none\","}, {"sha": "b83b3024295b46178764eebf01c29f017ede49df", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -83,7 +83,7 @@\n //! # Formatting Parameters\n //!\n //! Each argument being formatted can be transformed by a number of formatting\n-//! parameters (corresponding to `format_spec` in the syntax above). These\n+//! parameters (corresponding to `format_spec` in [the syntax](#syntax)). These\n //! parameters affect the string representation of what's being formatted.\n //!\n //! ## Width"}, {"sha": "d3450cfbc814eee0309fd4b7da1b03c3b772df5a", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -645,29 +645,6 @@ impl<T: ?Sized> Rc<T> {\n         unsafe { Self::from_ptr(rc_ptr) }\n     }\n \n-    /// Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(rc_into_raw_non_null)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// use std::rc::Rc;\n-    ///\n-    /// let x = Rc::new(\"hello\".to_owned());\n-    /// let ptr = Rc::into_raw_non_null(x);\n-    /// let deref = unsafe { ptr.as_ref() };\n-    /// assert_eq!(deref, \"hello\");\n-    /// ```\n-    #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n-    #[rustc_deprecated(since = \"1.44.0\", reason = \"use `Rc::into_raw` instead\")]\n-    #[inline]\n-    pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n-        // safe because Rc guarantees its pointer is non-null\n-        unsafe { NonNull::new_unchecked(Rc::into_raw(this) as *mut _) }\n-    }\n-\n     /// Creates a new [`Weak`][weak] pointer to this allocation.\n     ///\n     /// [weak]: struct.Weak.html"}, {"sha": "d7d7b6bd157bc2efc3b9e44bdb8db49c54d1b584", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -2196,6 +2196,9 @@ pub trait ToString {\n /// since `fmt::Write for String` never returns an error itself.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Display + ?Sized> ToString for T {\n+    // A common guideline is to not inline generic functions. However,\n+    // remove `#[inline]` from this method causes non-negligible regression.\n+    // See <https://github.com/rust-lang/rust/pull/74852> as last attempt try to remove it.\n     #[inline]\n     default fn to_string(&self) -> String {\n         use fmt::Write;"}, {"sha": "906beba2a6296199159044b904d0db19675fda3f", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -646,29 +646,6 @@ impl<T: ?Sized> Arc<T> {\n         }\n     }\n \n-    /// Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(rc_into_raw_non_null)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// use std::sync::Arc;\n-    ///\n-    /// let x = Arc::new(\"hello\".to_owned());\n-    /// let ptr = Arc::into_raw_non_null(x);\n-    /// let deref = unsafe { ptr.as_ref() };\n-    /// assert_eq!(deref, \"hello\");\n-    /// ```\n-    #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n-    #[rustc_deprecated(since = \"1.44.0\", reason = \"use `Arc::into_raw` instead\")]\n-    #[inline]\n-    pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n-        // safe because Arc guarantees its pointer is non-null\n-        unsafe { NonNull::new_unchecked(Arc::into_raw(this) as *mut _) }\n-    }\n-\n     /// Creates a new [`Weak`][weak] pointer to this allocation.\n     ///\n     /// [weak]: struct.Weak.html"}, {"sha": "f31a4a0b7518de4b9af61de602f90b894d52595a", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -2649,7 +2649,8 @@ unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n ///     }\n ///\n ///     pub fn lock(&self) {\n-///         while !self.flag.compare_and_swap(false, true, Ordering::Relaxed) {}\n+///         // Wait until the old value is `false`.\n+///         while self.flag.compare_and_swap(false, true, Ordering::Relaxed) != false {}\n ///         // This fence synchronizes-with store in `unlock`.\n ///         fence(Ordering::Acquire);\n ///     }"}, {"sha": "a64b43ca3ad45f92a8991659f310f2f538734699", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -1265,15 +1265,15 @@ impl Ipv6Addr {\n     /// # See also\n     ///\n     /// - [IETF RFC 4291 section 2.5.6]\n-    /// - [RFC 4291 errata 4406]\n+    /// - [RFC 4291 errata 4406] (which has been rejected but provides useful\n+    ///   insight)\n     /// - [`is_unicast_link_local()`]\n     ///\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n     /// [`true`]: ../../std/primitive.bool.html\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     /// [`is_unicast_link_local()`]: ../../std/net/struct.Ipv6Addr.html#method.is_unicast_link_local\n-    ///\n     pub fn is_unicast_link_local_strict(&self) -> bool {\n         (self.segments()[0] & 0xffff) == 0xfe80\n             && (self.segments()[1] & 0xffff) == 0\n@@ -1324,13 +1324,13 @@ impl Ipv6Addr {\n     /// # See also\n     ///\n     /// - [IETF RFC 4291 section 2.4]\n-    /// - [RFC 4291 errata 4406]\n+    /// - [RFC 4291 errata 4406] (which has been rejected but provides useful\n+    ///   insight)\n     ///\n     /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n     /// [`true`]: ../../std/primitive.bool.html\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     /// [`is_unicast_link_local_strict()`]: ../../std/net/struct.Ipv6Addr.html#method.is_unicast_link_local_strict\n-    ///\n     pub fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }"}, {"sha": "1f010656bb854b9351894e72d7f6e4496becf9a2", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -35,7 +35,7 @@ of a library.\n Plugins can extend [Rust's lint\n infrastructure](../../reference/attributes/diagnostics.md#lint-check-attributes) with\n additional checks for code style, safety, etc. Now let's write a plugin\n-[`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/lint_plugin_test.rs)\n+[`lint-plugin-test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs)\n that warns about any item named `lintme`.\n \n ```rust,ignore"}, {"sha": "8d8fb8c3c6098927aa0e141e5c80c373c130f5e1", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -203,6 +203,28 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     // Otherwise, we don't lint, to avoid false positives.\n                     _ => false,\n                 },\n+                ty::Closure(..) => {\n+                    cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n+                        let mut err = lint.build(&format!(\n+                            \"unused {}closure{}{} that must be used\",\n+                            descr_pre, plural_suffix, descr_post,\n+                        ));\n+                        err.note(\"closures are lazy and do nothing unless called\");\n+                        err.emit();\n+                    });\n+                    true\n+                }\n+                ty::Generator(..) => {\n+                    cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n+                        let mut err = lint.build(&format!(\n+                            \"unused {}generator{}{} that must be used\",\n+                            descr_pre, plural_suffix, descr_post,\n+                        ));\n+                        err.note(\"generators are lazy and do nothing unless resumed\");\n+                        err.emit();\n+                    });\n+                    true\n+                }\n                 _ => false,\n             }\n         }"}, {"sha": "676fee590b3c5ba605a9dad86ed3ee78921a078d", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -636,9 +636,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                 }\n                 GenericArgKind::Const(c) => {\n                     self.push(\"K\");\n-                    // FIXME(const_generics) implement `ty::print::Print` on `ty::Const`.\n-                    // self = c.print(self)?;\n-                    self = self.print_const(c)?;\n+                    self = c.print(self)?;\n                 }\n             }\n         }"}, {"sha": "a8c78f057fc8a1333ad9f8aa08c5a9b8a425a529", "filename": "src/librustc_target/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -29,7 +29,7 @@ pub fn target() -> TargetResult {\n          * native integers are 32-bit\n          * All other elements are default\n          */\n-        data_layout: \"e-S64-p:32:32-i64:64-m:e-n32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         linker_flavor: LinkerFlavor::Ld,\n         options: TargetOptions {\n             linker: Some(\"arm-none-eabi-ld\".to_string()),"}, {"sha": "b170b4131464af2947f850c7ffd99ee989ad5109", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -430,14 +430,14 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     }\n \n     // Converts the calculated ParamEnv and lifetime information to a clean::Generics, suitable for\n-    // display on the docs page. Cleaning the Predicates produces sub-optimal WherePredicate's,\n+    // display on the docs page. Cleaning the Predicates produces sub-optimal `WherePredicate`s,\n     // so we fix them up:\n     //\n     // * Multiple bounds for the same type are coalesced into one: e.g., 'T: Copy', 'T: Debug'\n     // becomes 'T: Copy + Debug'\n     // * Fn bounds are handled specially - instead of leaving it as 'T: Fn(), <T as Fn::Output> =\n     // K', we use the dedicated syntax 'T: Fn() -> K'\n-    // * We explcitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n+    // * We explicitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n     fn param_env_to_generics(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -588,7 +588,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         .args;\n \n                                     match args {\n-                                        // Convert somethiung like '<T as Iterator::Item> = u8'\n+                                        // Convert something like '<T as Iterator::Item> = u8'\n                                         // to 'T: Iterator<Item=u8>'\n                                         GenericArgs::AngleBracketed {\n                                             ref mut bindings, ..\n@@ -712,7 +712,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n     //\n     // Obviously, it's extremely undesirable for documentation rendering\n-    // to be depndent on the platform it's run on. Apart from being confusing\n+    // to be dependent on the platform it's run on. Apart from being confusing\n     // to end users, it makes writing tests much more difficult, as predicates\n     // can appear in any order in the final result.\n     //"}, {"sha": "ada380d116cab365bf51b78e1b843bd408273613", "filename": "src/test/ui/generator/issue-52398.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -14,14 +14,14 @@ impl A {\n fn main() {\n     // Test that the MIR local with type &A created for the auto-borrow adjustment\n     // is caught by typeck\n-    move || {\n+    move || { //~ WARN unused generator that must be used\n         A.test(yield);\n     };\n \n     // Test that the std::cell::Ref temporary returned from the `borrow` call\n     // is caught by typeck\n     let y = RefCell::new(true);\n-    static move || {\n+    static move || { //~ WARN unused generator that must be used\n         yield *y.borrow();\n         return \"Done\";\n     };"}, {"sha": "3f8ebb5a7389cdb5d2dacb29ca2d1a6808b89374", "filename": "src/test/ui/generator/issue-52398.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,24 @@\n+warning: unused generator that must be used\n+  --> $DIR/issue-52398.rs:17:5\n+   |\n+LL | /     move || {\n+LL | |         A.test(yield);\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: unused generator that must be used\n+  --> $DIR/issue-52398.rs:24:5\n+   |\n+LL | /     static move || {\n+LL | |         yield *y.borrow();\n+LL | |         return \"Done\";\n+LL | |     };\n+   | |______^\n+   |\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "2a5c3dd0570f9e2a48fb6dfea9e1e9e3330198f5", "filename": "src/test/ui/generator/issue-57084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -19,7 +19,7 @@ where F: Fn() -> ()\n \n fn main() {\n     let data = &vec![1];\n-    || {\n+    || { //~ WARN unused generator that must be used\n         let _to_pin = with(move || println!(\"{:p}\", data));\n         loop {\n             yield"}, {"sha": "32a04f94dcbe8027debbfbe76b2f26d452df25de", "filename": "src/test/ui/generator/issue-57084.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,16 @@\n+warning: unused generator that must be used\n+  --> $DIR/issue-57084.rs:22:5\n+   |\n+LL | /     || {\n+LL | |         let _to_pin = with(move || println!(\"{:p}\", data));\n+LL | |         loop {\n+LL | |             yield\n+LL | |         }\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "865904a57d41c0a32abfd15fc093e68a194a7cc4", "filename": "src/test/ui/generator/match-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -9,7 +9,7 @@ enum Enum {\n }\n \n fn main() {\n-    || {\n+    || { //~ WARN unused generator that must be used\n         loop {\n             if let true = true {\n                 match Enum::A(String::new()) {"}, {"sha": "4fd1e26f0c8dfef972154dc8b970a45b15468d95", "filename": "src/test/ui/generator/match-bindings.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,17 @@\n+warning: unused generator that must be used\n+  --> $DIR/match-bindings.rs:12:5\n+   |\n+LL | /     || {\n+LL | |         loop {\n+LL | |             if let true = true {\n+LL | |                 match Enum::A(String::new()) {\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "dbd9e24e205c8e31c3ff2004100fd081085d0359", "filename": "src/test/ui/generator/reborrow-mut-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -3,7 +3,7 @@\n #![feature(generators)]\n \n fn _run(bar: &mut i32) {\n-    || {\n+    || { //~ WARN unused generator that must be used\n         {\n             let _baz = &*bar;\n             yield;"}, {"sha": "ff511b76672e6381f1cddae7250d2ac3a5b71dce", "filename": "src/test/ui/generator/reborrow-mut-upvar.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,17 @@\n+warning: unused generator that must be used\n+  --> $DIR/reborrow-mut-upvar.rs:6:5\n+   |\n+LL | /     || {\n+LL | |         {\n+LL | |             let _baz = &*bar;\n+LL | |             yield;\n+...  |\n+LL | |         *bar = 2;\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7f118c88e5e6e5a8197c0e118734a837b51b2f0f", "filename": "src/test/ui/generator/too-live-local-in-immovable-gen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -5,7 +5,7 @@\n \n fn main() {\n     unsafe {\n-        static move || {\n+        static move || { //~ WARN unused generator that must be used\n             // Tests that the generator transformation finds out that `a` is not live\n             // during the yield expression. Type checking will also compute liveness\n             // and it should also find out that `a` is not live."}, {"sha": "88dacff7b559be1706de68efb5933b48b2b02c35", "filename": "src/test/ui/generator/too-live-local-in-immovable-gen.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,17 @@\n+warning: unused generator that must be used\n+  --> $DIR/too-live-local-in-immovable-gen.rs:8:9\n+   |\n+LL | /         static move || {\n+LL | |             // Tests that the generator transformation finds out that `a` is not live\n+LL | |             // during the yield expression. Type checking will also compute liveness\n+LL | |             // and it should also find out that `a` is not live.\n+...  |\n+LL | |             &a;\n+LL | |         };\n+   | |__________^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4c99bb3ef5ee130219af51de7f03d84d48961928", "filename": "src/test/ui/generator/yield-in-args-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -10,7 +10,7 @@\n fn foo(_a: (), _b: &bool) {}\n \n fn bar() {\n-    || {\n+    || { //~ WARN unused generator that must be used\n         let b = true;\n         foo(yield, &b);\n     };"}, {"sha": "a575bf886780a55997a221b0f01f1d862401430f", "filename": "src/test/ui/generator/yield-in-args-rev.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,14 @@\n+warning: unused generator that must be used\n+  --> $DIR/yield-in-args-rev.rs:13:5\n+   |\n+LL | /     || {\n+LL | |         let b = true;\n+LL | |         foo(yield, &b);\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "65f368df9cb33f17e7b3ddd22a6251ee3a1fef30", "filename": "src/test/ui/generator/yield-in-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -6,7 +6,7 @@\n \n fn main() {\n     let x = 0i32;\n-    || {\n+    || { //~ WARN unused generator that must be used\n         let y = 2u32;\n         {\n             let _t = box (&x, yield 0, &y);"}, {"sha": "24de18edb0f8cade5ba05f7d6633169dc169056a", "filename": "src/test/ui/generator/yield-in-box.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,17 @@\n+warning: unused generator that must be used\n+  --> $DIR/yield-in-box.rs:9:5\n+   |\n+LL | /     || {\n+LL | |         let y = 2u32;\n+LL | |         {\n+LL | |             let _t = box (&x, yield 0, &y);\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "2f8754c95715f15ab6d04b835d14e7acfdd4ff4c", "filename": "src/test/ui/generator/yield-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -3,7 +3,7 @@\n #![feature(generators)]\n \n fn main() {\n-    static || {\n+    static || { //~ WARN unused generator that must be used\n         loop {\n             // Test that `opt` is not live across the yield, even when borrowed in a loop\n             // See https://github.com/rust-lang/rust/issues/52792"}, {"sha": "e79047ae7013c696f0a34237bc76f0bd12c79289", "filename": "src/test/ui/generator/yield-in-initializer.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,17 @@\n+warning: unused generator that must be used\n+  --> $DIR/yield-in-initializer.rs:6:5\n+   |\n+LL | /     static || {\n+LL | |         loop {\n+LL | |             // Test that `opt` is not live across the yield, even when borrowed in a loop\n+LL | |             // See https://github.com/rust-lang/rust/issues/52792\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cb3fc909145c2f88aa09b561695c7b2be107351c", "filename": "src/test/ui/generator/yield-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -8,7 +8,7 @@ fn bar<'a>() {\n     let a: &'static str = \"hi\";\n     let b: &'a str = a;\n \n-    || {\n+    || { //~ WARN unused generator that must be used\n         yield a;\n         yield b;\n     };"}, {"sha": "bded36a4cdaf7d3e3c28849ba8aad4f6ac5ac085", "filename": "src/test/ui/generator/yield-subtype.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,14 @@\n+warning: unused generator that must be used\n+  --> $DIR/yield-subtype.rs:11:5\n+   |\n+LL | /     || {\n+LL | |         yield a;\n+LL | |         yield b;\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e663f7fd4c9bfed8a5b6f7d47993f681695622ca", "filename": "src/test/ui/issues/issue-1460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fissues%2Fissue-1460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fissues%2Fissue-1460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1460.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -3,5 +3,5 @@\n // pretty-expanded FIXME #23616\n \n pub fn main() {\n-    {|i: u32| if 1 == i { }};\n+    {|i: u32| if 1 == i { }}; //~ WARN unused closure that must be used\n }"}, {"sha": "26f95f5af3dc5fbd2d5a0ee8fad411032a3f55dc", "filename": "src/test/ui/issues/issue-1460.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,11 @@\n+warning: unused closure that must be used\n+  --> $DIR/issue-1460.rs:6:5\n+   |\n+LL |     {|i: u32| if 1 == i { }};\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: closures are lazy and do nothing unless called\n+\n+warning: 1 warning emitted\n+"}, {"sha": "eec23437bcb06e76eb1c5f015dbfa369e8705fc9", "filename": "src/test/ui/issues/issue-16256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fissues%2Fissue-16256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fissues%2Fissue-16256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16256.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     let mut buf = Vec::new();\n-    |c: u8| buf.push(c);\n+    |c: u8| buf.push(c); //~ WARN unused closure that must be used\n }"}, {"sha": "9c7312461c4a17a2c83ff59c9c4838a4694d92e2", "filename": "src/test/ui/issues/issue-16256.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,11 @@\n+warning: unused closure that must be used\n+  --> $DIR/issue-16256.rs:6:5\n+   |\n+LL |     |c: u8| buf.push(c);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: closures are lazy and do nothing unless called\n+\n+warning: 1 warning emitted\n+"}, {"sha": "98ea4d71ccf4f0189903ca5ad85b6a579255ae88", "filename": "src/test/ui/liveness/liveness-upvars.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -27,7 +27,7 @@ pub fn f() {\n     let mut c = 0;\n \n     // Captured by value, but variable is dead on entry.\n-    move || {\n+    let _ = move || {\n         c = 1; //~ WARN value captured by `c` is never read\n         println!(\"{}\", c);\n     };\n@@ -37,21 +37,21 @@ pub fn f() {\n     };\n \n     // Read and written to, but never actually used.\n-    move || {\n+    let _ = move || {\n         c += 1; //~ WARN unused variable: `c`\n     };\n     let _ = async move {\n         c += 1; //~  WARN value assigned to `c` is never read\n                 //~| WARN unused variable: `c`\n     };\n \n-    move || {\n+    let _ = move || {\n         println!(\"{}\", c);\n         // Value is read by closure itself on later invocations.\n         c += 1;\n     };\n     let b = Box::new(42);\n-    move || {\n+    let _ = move || {\n         println!(\"{}\", c);\n         // Never read because this is FnOnce closure.\n         c += 1; //~  WARN value assigned to `c` is never read\n@@ -67,12 +67,12 @@ pub fn f() {\n pub fn nested() {\n     let mut d = None;\n     let mut e = None;\n-    || {\n-        || {\n+    let _ = || {\n+        let _ = || {\n             d = Some(\"d1\"); //~ WARN value assigned to `d` is never read\n             d = Some(\"d2\");\n         };\n-        move || {\n+        let _ = move || {\n             e = Some(\"e1\"); //~  WARN value assigned to `e` is never read\n                             //~| WARN unused variable: `e`\n             e = Some(\"e2\"); //~  WARN value assigned to `e` is never read\n@@ -81,7 +81,7 @@ pub fn nested() {\n }\n \n pub fn g<T: Default>(mut v: T) {\n-    |r| {\n+    let _ = |r| {\n         if r {\n             v = T::default(); //~ WARN value assigned to `v` is never read\n         } else {\n@@ -92,7 +92,7 @@ pub fn g<T: Default>(mut v: T) {\n \n pub fn h<T: Copy + Default + std::fmt::Debug>() {\n     let mut z = T::default();\n-    move |b| {\n+    let _ = move |b| {\n         loop {\n             if b {\n                 z = T::default(); //~  WARN value assigned to `z` is never read"}, {"sha": "2dacb26b6eba5a7572a4a0442de62539b88e4dd3", "filename": "src/test/ui/nll/capture-mut-ref.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -8,7 +8,7 @@\n pub fn mutable_upvar() {\n     let x = &mut 0;\n     //~^ ERROR\n-    move || {\n+    let _ = move || {\n         *x = 1;\n     };\n }"}, {"sha": "56e01f7b7764bc793d783d2a6b7ec67176e9b4fa", "filename": "src/test/ui/nll/capture-mut-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -8,7 +8,7 @@\n pub fn mutable_upvar() {\n     let mut x = &mut 0;\n     //~^ ERROR\n-    move || {\n+    let _ = move || {\n         *x = 1;\n     };\n }"}, {"sha": "08d2584ee5efd1a0efe029a493f49741c5a22236", "filename": "src/test/ui/nll/issue-48623-generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -12,7 +12,7 @@ impl Drop for WithDrop {\n \n fn reborrow_from_generator(r: &mut ()) {\n     let d = WithDrop;\n-    move || { d; yield; &mut *r };\n+    move || { d; yield; &mut *r }; //~ WARN unused generator that must be used\n }\n \n fn main() {}"}, {"sha": "70a83e46ff08e5e0e0c63659e911a6bc87d38b3e", "filename": "src/test/ui/nll/issue-48623-generator.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,11 @@\n+warning: unused generator that must be used\n+  --> $DIR/issue-48623-generator.rs:15:5\n+   |\n+LL |     move || { d; yield; &mut *r };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: generators are lazy and do nothing unless resumed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "bf5482056d4b414378fd4aba1a029bdc127e5f79", "filename": "src/test/ui/test-attrs/test-runner-hides-buried-main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-runner-hides-buried-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-runner-hides-buried-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-runner-hides-buried-main.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -7,9 +7,9 @@\n \n mod a {\n     fn b() {\n-        || {\n+        (|| {\n             #[main]\n             fn c() { panic!(); }\n-        };\n+        })();\n     }\n }"}, {"sha": "470904fd3911b2a25d79f94ce3d654e33b1d2fcb", "filename": "src/test/ui/unboxed-closures/unboxed-closures-move-mutable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-move-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-move-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-move-mutable.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -2,6 +2,7 @@\n // pretty-expanded FIXME #23616\n \n #![deny(unused_mut)]\n+#![allow(unused_must_use)]\n \n // Test that mutating a mutable upvar in a capture-by-value unboxed\n // closure does not ice (issue #18238) and marks the upvar as used"}, {"sha": "1254f8dbc5e2cdea9a8270c71222374a9613635e", "filename": "src/test/ui/unboxed-closures/unboxed-closures-move-mutable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-move-mutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-move-mutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-move-mutable.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -1,5 +1,5 @@\n warning: unused variable: `x`\n-  --> $DIR/unboxed-closures-move-mutable.rs:16:17\n+  --> $DIR/unboxed-closures-move-mutable.rs:17:17\n    |\n LL |         move || x += 1;\n    |                 ^\n@@ -8,7 +8,7 @@ LL |         move || x += 1;\n    = help: did you mean to capture by reference instead?\n \n warning: unused variable: `x`\n-  --> $DIR/unboxed-closures-move-mutable.rs:20:17\n+  --> $DIR/unboxed-closures-move-mutable.rs:21:17\n    |\n LL |         move || x += 1;\n    |                 ^"}, {"sha": "637d8bb43a77b18a6186f57d03566b3366a1ecec", "filename": "src/test/ui/unused/unused-closure.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funused%2Funused-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funused%2Funused-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-closure.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,40 @@\n+// Test that closures and generators are \"must use\" types.\n+// edition:2018\n+\n+#![feature(async_closure)]\n+#![feature(const_in_array_repeat_expressions)]\n+#![feature(generators)]\n+#![deny(unused_must_use)]\n+\n+fn unused() {\n+    || { //~ ERROR unused closure that must be used\n+        println!(\"Hello!\");\n+    };\n+\n+    async {};    //~ ERROR unused implementer of `std::future::Future` that must be used\n+    || async {}; //~ ERROR unused closure that must be used\n+    async || {}; //~ ERROR unused closure that must be used\n+\n+\n+    [Box::new([|| {}; 10]); 1]; //~ ERROR unused array of boxed arrays of closures that must be used\n+\n+    [|| { //~ ERROR unused array of generators that must be used\n+        yield 42u32;\n+    }; 42];\n+\n+    vec![|| \"a\"].pop().unwrap(); //~ ERROR unused closure that must be used\n+\n+    let b = false;\n+        || true; //~ ERROR unused closure that must be used\n+    println!(\"{}\", b);\n+}\n+\n+fn ignored() {\n+    let _ = || {};\n+    let _ = || yield 42;\n+}\n+\n+fn main() {\n+    unused();\n+    ignored();\n+}"}, {"sha": "9dc73fb7abeab6b2eb5ece69a799221cab356249", "filename": "src/test/ui/unused/unused-closure.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funused%2Funused-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funused%2Funused-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-closure.stderr?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -0,0 +1,75 @@\n+error: unused closure that must be used\n+  --> $DIR/unused-closure.rs:10:5\n+   |\n+LL | /     || {\n+LL | |         println!(\"Hello!\");\n+LL | |     };\n+   | |______^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-closure.rs:7:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: closures are lazy and do nothing unless called\n+\n+error: unused implementer of `std::future::Future` that must be used\n+  --> $DIR/unused-closure.rs:14:5\n+   |\n+LL |     async {};\n+   |     ^^^^^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: unused closure that must be used\n+  --> $DIR/unused-closure.rs:15:5\n+   |\n+LL |     || async {};\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+error: unused closure that must be used\n+  --> $DIR/unused-closure.rs:16:5\n+   |\n+LL |     async || {};\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+error: unused array of boxed arrays of closures that must be used\n+  --> $DIR/unused-closure.rs:19:5\n+   |\n+LL |     [Box::new([|| {}; 10]); 1];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+error: unused array of generators that must be used\n+  --> $DIR/unused-closure.rs:21:5\n+   |\n+LL | /     [|| {\n+LL | |         yield 42u32;\n+LL | |     }; 42];\n+   | |___________^\n+   |\n+   = note: generators are lazy and do nothing unless resumed\n+\n+error: unused closure that must be used\n+  --> $DIR/unused-closure.rs:25:5\n+   |\n+LL |     vec![|| \"a\"].pop().unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+error: unused closure that must be used\n+  --> $DIR/unused-closure.rs:28:9\n+   |\n+LL |         || true;\n+   |         ^^^^^^^^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "c21f18015c11a80d6ce87fc37aa760277d144496", "filename": "src/test/ui/unused/unused-mut-warning-captured-var.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -5,5 +5,5 @@\n fn main() {\n     let x = 1;\n     //~^ ERROR: variable does not need to be mutable\n-    move|| { println!(\"{}\", x); };\n+    (move|| { println!(\"{}\", x); })();\n }"}, {"sha": "3119d83a0ebf80af35fb18a8154fec70b3c9058a", "filename": "src/test/ui/unused/unused-mut-warning-captured-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -5,5 +5,5 @@\n fn main() {\n     let mut x = 1;\n     //~^ ERROR: variable does not need to be mutable\n-    move|| { println!(\"{}\", x); };\n+    (move|| { println!(\"{}\", x); })();\n }"}, {"sha": "916cabbfb8c9474437ab05e88f2b154d959f1f04", "filename": "src/test/ui/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0b1237b12e949320ccd31a6741f03425fc9a66/src%2Ftest%2Fui%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fweird-exprs.rs?ref=fb0b1237b12e949320ccd31a6741f03425fc9a66", "patch": "@@ -5,7 +5,7 @@\n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n #![allow(unreachable_code)]\n-#![allow(unused_braces, unused_parens)]\n+#![allow(unused_braces, unused_must_use, unused_parens)]\n \n #![recursion_limit = \"256\"]\n "}]}