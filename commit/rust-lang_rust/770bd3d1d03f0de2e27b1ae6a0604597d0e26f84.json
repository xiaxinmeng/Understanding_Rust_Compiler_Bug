{"sha": "770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MGJkM2QxZDAzZjBkZTJlMjdiMWFlNmEwNjA0NTk3ZDBlMjZmODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T21:47:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T21:47:29Z"}, "message": "Auto merge of #75349 - nnethercote:tweak-confusable-idents-checking, r=petrochenkov\n\nTweak confusable idents checking\n\nThe confusable idents checking does some sub-optimal things with symbols.\n\nr? @petrochenkov\ncc @crlf0710", "tree": {"sha": "b26149b407362a8f5e38c9912347d0652b1a40d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26149b407362a8f5e38c9912347d0652b1a40d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "html_url": "https://github.com/rust-lang/rust/commit/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d495ef527c6ab41c837ff13ed74f648bacee921f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d495ef527c6ab41c837ff13ed74f648bacee921f", "html_url": "https://github.com/rust-lang/rust/commit/d495ef527c6ab41c837ff13ed74f648bacee921f"}, {"sha": "0a597bd98f91b7f0e87985b8dcac0fd9820c6d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a597bd98f91b7f0e87985b8dcac0fd9820c6d47", "html_url": "https://github.com/rust-lang/rust/commit/0a597bd98f91b7f0e87985b8dcac0fd9820c6d47"}], "stats": {"total": 108, "additions": 43, "deletions": 65}, "files": [{"sha": "ab1658b2229829e263195a5dc5706e2056e5ced9", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 29, "deletions": 61, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "patch": "@@ -1,7 +1,7 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::Symbol;\n \n declare_lint! {\n     pub NON_ASCII_IDENTS,\n@@ -39,7 +39,6 @@ impl EarlyLintPass for NonAsciiIdents {\n         use rustc_span::Span;\n         use std::collections::BTreeMap;\n         use unicode_security::GeneralSecurityProfile;\n-        use utils::CowBoxSymStr;\n \n         let check_non_ascii_idents = cx.builder.lint_level(NON_ASCII_IDENTS).0 != Level::Allow;\n         let check_uncommon_codepoints =\n@@ -58,6 +57,12 @@ impl EarlyLintPass for NonAsciiIdents {\n \n         let mut has_non_ascii_idents = false;\n         let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n+\n+        // Sort by `Span` so that error messages make sense with respect to the\n+        // order of identifier locations in the code.\n+        let mut symbols: Vec<_> = symbols.iter().collect();\n+        symbols.sort_by_key(|k| k.1);\n+\n         for (symbol, &sp) in symbols.iter() {\n             let symbol_str = symbol.as_str();\n             if symbol_str.is_ascii() {\n@@ -77,33 +82,34 @@ impl EarlyLintPass for NonAsciiIdents {\n         }\n \n         if has_non_ascii_idents && check_confusable_idents {\n-            let mut skeleton_map: FxHashMap<CowBoxSymStr, (SymbolStr, Span, bool)> =\n+            let mut skeleton_map: FxHashMap<Symbol, (Symbol, Span, bool)> =\n                 FxHashMap::with_capacity_and_hasher(symbols.len(), Default::default());\n-            let mut str_buf = String::new();\n-            for (symbol, &sp) in symbols.iter() {\n-                fn calc_skeleton(symbol_str: &SymbolStr, buffer: &mut String) -> CowBoxSymStr {\n-                    use std::mem::replace;\n-                    use unicode_security::confusable_detection::skeleton;\n-                    buffer.clear();\n-                    buffer.extend(skeleton(symbol_str));\n-                    if *symbol_str == *buffer {\n-                        CowBoxSymStr::Interned(symbol_str.clone())\n-                    } else {\n-                        let owned = replace(buffer, String::new());\n-                        CowBoxSymStr::Owned(owned.into_boxed_str())\n-                    }\n-                }\n+            let mut skeleton_buf = String::new();\n+\n+            for (&symbol, &sp) in symbols.iter() {\n+                use unicode_security::confusable_detection::skeleton;\n+\n                 let symbol_str = symbol.as_str();\n                 let is_ascii = symbol_str.is_ascii();\n-                let skeleton = calc_skeleton(&symbol_str, &mut str_buf);\n+\n+                // Get the skeleton as a `Symbol`.\n+                skeleton_buf.clear();\n+                skeleton_buf.extend(skeleton(&symbol_str));\n+                let skeleton_sym = if *symbol_str == *skeleton_buf {\n+                    symbol\n+                } else {\n+                    Symbol::intern(&skeleton_buf)\n+                };\n+\n                 skeleton_map\n-                    .entry(skeleton)\n-                    .and_modify(|(existing_symbolstr, existing_span, existing_is_ascii)| {\n+                    .entry(skeleton_sym)\n+                    .and_modify(|(existing_symbol, existing_span, existing_is_ascii)| {\n                         if !*existing_is_ascii || !is_ascii {\n                             cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n                                 lint.build(&format!(\n                                     \"identifier pair considered confusable between `{}` and `{}`\",\n-                                    existing_symbolstr, symbol_str\n+                                    existing_symbol.as_str(),\n+                                    symbol.as_str()\n                                 ))\n                                 .span_label(\n                                     *existing_span,\n@@ -113,12 +119,12 @@ impl EarlyLintPass for NonAsciiIdents {\n                             });\n                         }\n                         if *existing_is_ascii && !is_ascii {\n-                            *existing_symbolstr = symbol_str.clone();\n+                            *existing_symbol = symbol;\n                             *existing_span = sp;\n                             *existing_is_ascii = is_ascii;\n                         }\n                     })\n-                    .or_insert((symbol_str, sp, is_ascii));\n+                    .or_insert((symbol, sp, is_ascii));\n             }\n         }\n \n@@ -232,41 +238,3 @@ impl EarlyLintPass for NonAsciiIdents {\n         }\n     }\n }\n-\n-mod utils {\n-    use rustc_span::symbol::SymbolStr;\n-    use std::hash::{Hash, Hasher};\n-    use std::ops::Deref;\n-\n-    pub(super) enum CowBoxSymStr {\n-        Interned(SymbolStr),\n-        Owned(Box<str>),\n-    }\n-\n-    impl Deref for CowBoxSymStr {\n-        type Target = str;\n-\n-        fn deref(&self) -> &str {\n-            match self {\n-                CowBoxSymStr::Interned(interned) => interned,\n-                CowBoxSymStr::Owned(ref owned) => owned,\n-            }\n-        }\n-    }\n-\n-    impl Hash for CowBoxSymStr {\n-        #[inline]\n-        fn hash<H: Hasher>(&self, state: &mut H) {\n-            Hash::hash(&**self, state)\n-        }\n-    }\n-\n-    impl PartialEq<CowBoxSymStr> for CowBoxSymStr {\n-        #[inline]\n-        fn eq(&self, other: &CowBoxSymStr) -> bool {\n-            PartialEq::eq(&**self, &**other)\n-        }\n-    }\n-\n-    impl Eq for CowBoxSymStr {}\n-}"}, {"sha": "a2bb8c4f91ff4d3ccf76dfa1f14567ee95580654", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "patch": "@@ -13,7 +13,6 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{MultiSpan, Span, Symbol};\n \n-use std::collections::BTreeMap;\n use std::path::PathBuf;\n use std::str;\n \n@@ -64,7 +63,7 @@ impl GatedSpans {\n #[derive(Default)]\n pub struct SymbolGallery {\n     /// All symbols occurred and their first occurrence span.\n-    pub symbols: Lock<BTreeMap<Symbol, Span>>,\n+    pub symbols: Lock<FxHashMap<Symbol, Span>>,\n }\n \n impl SymbolGallery {"}, {"sha": "2c711f994043f6f0b6a7e5814cdd6ce46d770b20", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs?ref=770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "patch": "@@ -3,9 +3,11 @@\n #![allow(uncommon_codepoints, non_upper_case_globals)]\n \n const \uff53: usize = 42;\n+const s_s: usize = 42;\n \n fn main() {\n     let s = \"rust\"; //~ ERROR identifier pair considered confusable\n+    let \uff53_\uff53 = \"rust2\"; //~ ERROR identifier pair considered confusable\n     not_affected();\n }\n "}, {"sha": "b9af60963adf6893c65f558a11dfc6b69a117fc6", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr?ref=770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "patch": "@@ -1,5 +1,5 @@\n error: identifier pair considered confusable between `\uff53` and `s`\n-  --> $DIR/lint-confusable-idents.rs:8:9\n+  --> $DIR/lint-confusable-idents.rs:9:9\n    |\n LL | const \uff53: usize = 42;\n    |       -- this is where the previous identifier occurred\n@@ -13,5 +13,14 @@ note: the lint level is defined here\n LL | #![deny(confusable_idents)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: identifier pair considered confusable between `s_s` and `\uff53_\uff53`\n+  --> $DIR/lint-confusable-idents.rs:10:9\n+   |\n+LL | const s_s: usize = 42;\n+   |       --- this is where the previous identifier occurred\n+...\n+LL |     let \uff53_\uff53 = \"rust2\";\n+   |         ^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}