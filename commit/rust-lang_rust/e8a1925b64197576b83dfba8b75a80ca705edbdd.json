{"sha": "e8a1925b64197576b83dfba8b75a80ca705edbdd", "node_id": "C_kwDOAAsO6NoAKGU4YTE5MjViNjQxOTc1NzZiODNkZmJhOGI3NWE4MGNhNzA1ZWRiZGQ", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-28T13:47:11Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-28T13:47:11Z"}, "message": "safe transmute: use `AtomicU32` `State` ids to appease mips\n\n...instead of `AtomicU64`, which is unavailable.\n\nref: https://github.com/rust-lang/rust/pull/92268#issuecomment-1197797990", "tree": {"sha": "a0ccc770c06db872efc722a4b02fc36878ab6175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ccc770c06db872efc722a4b02fc36878ab6175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a1925b64197576b83dfba8b75a80ca705edbdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a1925b64197576b83dfba8b75a80ca705edbdd", "html_url": "https://github.com/rust-lang/rust/commit/e8a1925b64197576b83dfba8b75a80ca705edbdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a1925b64197576b83dfba8b75a80ca705edbdd/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "html_url": "https://github.com/rust-lang/rust/commit/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b60ea6e7a24f222e842c49bdda98d348c1ec83e3", "filename": "compiler/rustc_transmute/src/layout/dfa.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a1925b64197576b83dfba8b75a80ca705edbdd/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a1925b64197576b83dfba8b75a80ca705edbdd/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs?ref=e8a1925b64197576b83dfba8b75a80ca705edbdd", "patch": "@@ -1,7 +1,7 @@\n use super::{nfa, Byte, Nfa, Ref};\n use crate::Map;\n use std::fmt;\n-use std::sync::atomic::{AtomicU64, Ordering};\n+use std::sync::atomic::{AtomicU32, Ordering};\n \n #[derive(PartialEq, Clone, Debug)]\n pub(crate) struct Dfa<R>\n@@ -49,7 +49,7 @@ where\n \n /// The states in a `Nfa` represent byte offsets.\n #[derive(Hash, Eq, PartialEq, PartialOrd, Ord, Copy, Clone)]\n-pub(crate) struct State(u64);\n+pub(crate) struct State(u32);\n \n #[derive(Hash, Eq, PartialEq, Clone, Copy)]\n pub(crate) enum Transition<R>\n@@ -166,7 +166,7 @@ where\n \n impl State {\n     pub(crate) fn new() -> Self {\n-        static COUNTER: AtomicU64 = AtomicU64::new(0);\n+        static COUNTER: AtomicU32 = AtomicU32::new(0);\n         Self(COUNTER.fetch_add(1, Ordering::SeqCst))\n     }\n }"}, {"sha": "f25e3c1fd8a3014c36d27f38b251d2d8ab510e9e", "filename": "compiler/rustc_transmute/src/layout/nfa.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a1925b64197576b83dfba8b75a80ca705edbdd/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a1925b64197576b83dfba8b75a80ca705edbdd/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs?ref=e8a1925b64197576b83dfba8b75a80ca705edbdd", "patch": "@@ -1,7 +1,7 @@\n use super::{Byte, Ref, Tree, Uninhabited};\n use crate::{Map, Set};\n use std::fmt;\n-use std::sync::atomic::{AtomicU64, Ordering};\n+use std::sync::atomic::{AtomicU32, Ordering};\n \n /// A non-deterministic finite automaton (NFA) that represents the layout of a type.\n /// The transmutability of two given types is computed by comparing their `Nfa`s.\n@@ -17,7 +17,7 @@ where\n \n /// The states in a `Nfa` represent byte offsets.\n #[derive(Hash, Eq, PartialEq, PartialOrd, Ord, Copy, Clone)]\n-pub(crate) struct State(u64);\n+pub(crate) struct State(u32);\n \n /// The transitions between states in a `Nfa` reflect bit validity.\n #[derive(Hash, Eq, PartialEq, Clone, Copy)]\n@@ -173,7 +173,7 @@ where\n \n impl State {\n     pub(crate) fn new() -> Self {\n-        static COUNTER: AtomicU64 = AtomicU64::new(0);\n+        static COUNTER: AtomicU32 = AtomicU32::new(0);\n         Self(COUNTER.fetch_add(1, Ordering::SeqCst))\n     }\n }"}]}