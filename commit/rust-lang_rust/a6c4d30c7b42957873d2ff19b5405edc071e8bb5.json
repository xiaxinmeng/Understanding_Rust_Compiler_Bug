{"sha": "a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzRkMzBjN2I0Mjk1Nzg3M2QyZmYxOWI1NDA1ZWRjMDcxZThiYjU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-16T19:24:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-16T19:24:17Z"}, "message": "Rollup merge of #76756 - matthiaskrgr:cl123ppy, r=Dylan-DPC\n\nfix a couple of stylistic clippy warnings\n\nnamely:\n\nclippy::redundant_pattern_matching\nclippy::redundant_pattern\nclippy::search_is_some\nclippy::filter_next\nclippy::into_iter_on_ref\nclippy::clone_on_copy\nclippy::needless_return", "tree": {"sha": "e48fe6f160865eebc75a61a4dfa9abf05c238936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e48fe6f160865eebc75a61a4dfa9abf05c238936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYmZiCRBK7hj4Ov3rIwAAdHIIAH3/YhJr1pkECe/DZA48aKih\nywnd5azVd1RXAMpRsGQJvHlk1pXmyXCF7fmkvbXZ1BDxB9+MuV0ob0j2dFkpFgeS\nGCsII9rh4snhTh3hAjdXS8Opvb0cPteWFCJ1En6n9Tf+1mylHTpmtpUCTKm52RHp\naeB/r85CWfG+vRDzQmZJ74ZqNBjbIJG5cw4SZAUcQO7vknYqgmrQ4FFJyqO+Te6C\nNJmsk6nAye0MERggLkp8TnqGj2pY8kcsEL0kz/BTFzSFrAciI0JyUmJyYGBQZV3a\n5tdeEqO41Ia6ITcY8mCmcK47m1RWzlsrHsedPnJxl9AfR+ItIwAyYEgaKJx8Ua0=\n=sOnp\n-----END PGP SIGNATURE-----\n", "payload": "tree e48fe6f160865eebc75a61a4dfa9abf05c238936\nparent ab78ca92f3d7fa27e489c5cee15f60714702abb9\nparent 73d4171ea6cb07b9426b386041b19376606db079\nauthor Tyler Mandry <tmandry@gmail.com> 1600284257 -0700\ncommitter GitHub <noreply@github.com> 1600284257 -0700\n\nRollup merge of #76756 - matthiaskrgr:cl123ppy, r=Dylan-DPC\n\nfix a couple of stylistic clippy warnings\n\nnamely:\n\nclippy::redundant_pattern_matching\nclippy::redundant_pattern\nclippy::search_is_some\nclippy::filter_next\nclippy::into_iter_on_ref\nclippy::clone_on_copy\nclippy::needless_return\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "html_url": "https://github.com/rust-lang/rust/commit/a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab78ca92f3d7fa27e489c5cee15f60714702abb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab78ca92f3d7fa27e489c5cee15f60714702abb9", "html_url": "https://github.com/rust-lang/rust/commit/ab78ca92f3d7fa27e489c5cee15f60714702abb9"}, {"sha": "73d4171ea6cb07b9426b386041b19376606db079", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d4171ea6cb07b9426b386041b19376606db079", "html_url": "https://github.com/rust-lang/rust/commit/73d4171ea6cb07b9426b386041b19376606db079"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "e3c613b1d6a12876cf5066a97d9ec09a7e8d90de", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n                 debug!(\"try_report_named_anon_conflict: ret ty {:?}\", ty);\n                 if sub == &ty::ReStatic\n-                    && v.0.into_iter().find(|t| t.span.desugaring_kind().is_none()).is_some()\n+                    && v.0.into_iter().any(|t| t.span.desugaring_kind().is_none())\n                 {\n                     // If the failure is due to a `'static` requirement coming from a `dyn` or\n                     // `impl` Trait that *isn't* caused by `async fn` desugaring, handle this case"}, {"sha": "4b2e9a16d4a07ec6398ea08f705dc49e53c7a4ab", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -273,10 +273,10 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match self.tcx().trimmed_def_paths(LOCAL_CRATE).get(&def_id) {\n-            None => return Ok((self, false)),\n+            None => Ok((self, false)),\n             Some(symbol) => {\n                 self.write_str(&symbol.as_str())?;\n-                return Ok((self, true));\n+                Ok((self, true))\n             }\n         }\n     }"}, {"sha": "eb1f70099fc89059ecf603f1da07cc0258e2565f", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         if let ReturnConstraint::ClosureUpvar(upvar) = kind {\n             let def_id = match self.regioncx.universal_regions().defining_ty {\n                 DefiningTy::Closure(def_id, _) => def_id,\n-                ty @ _ => bug!(\"unexpected DefiningTy {:?}\", ty),\n+                ty => bug!(\"unexpected DefiningTy {:?}\", ty),\n             };\n \n             let upvar_def_span = self.infcx.tcx.hir().span(upvar);"}, {"sha": "b224df92e9da0245381866a22a51439066b2d6a2", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -126,7 +126,7 @@ impl OptimizationFinder<'b, 'tcx> {\n             }\n         }\n \n-        return None;\n+        None\n     }\n }\n "}, {"sha": "2cc87dc637566fafa9cec8a914790039f02b2b3e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -1534,7 +1534,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             }\n         };\n \n-        let lifetime_names: Vec<_> = lifetime_names.into_iter().collect();\n+        let lifetime_names: Vec<_> = lifetime_names.iter().collect();\n         match (&lifetime_names[..], snippet.as_deref()) {\n             ([name], Some(\"&\")) => {\n                 suggest_existing(err, &name.as_str()[..], &|name| format!(\"&{} \", name));"}, {"sha": "c53c65c00b769919864947f9c0a84f3f5e56de7f", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -182,7 +182,7 @@ fn overlap_within_probe(\n     }\n \n     if !skip_leak_check.is_yes() {\n-        if let Err(_) = infcx.leak_check(true, snapshot) {\n+        if infcx.leak_check(true, snapshot).is_err() {\n             debug!(\"overlap: leak check failed\");\n             return None;\n         }"}, {"sha": "7cb23dc05379503399de89b96a2b516f5ac61961", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     // If all the obligations hold (or there are no obligations) the tail expression\n                     // we can suggest to return a boxed trait object instead of an opaque type.\n-                    if suggest_box { self.ret_type_span.clone() } else { None }\n+                    if suggest_box { self.ret_type_span } else { None }\n                 }\n                 _ => None,\n             };"}, {"sha": "d5563cdac02de090cdb78efc989e0dfc404e55c5", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -1243,10 +1243,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if check_completeness && !error_happened && !remaining_fields.is_empty() {\n             let no_accessible_remaining_fields = remaining_fields\n                 .iter()\n-                .filter(|(_, (_, field))| {\n+                .find(|(_, (_, field))| {\n                     field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n                 })\n-                .next()\n                 .is_none();\n \n             if no_accessible_remaining_fields {"}, {"sha": "54b0671fab5a7f1f9b927ce3b441dbb283a527b2", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4d30c7b42957873d2ff19b5405edc071e8bb5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=a6c4d30c7b42957873d2ff19b5405edc071e8bb5", "patch": "@@ -1141,10 +1141,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if !etc && !unmentioned_fields.is_empty() {\n             let no_accessible_unmentioned_fields = unmentioned_fields\n                 .iter()\n-                .filter(|(field, _)| {\n+                .find(|(field, _)| {\n                     field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n                 })\n-                .next()\n                 .is_none();\n \n             if no_accessible_unmentioned_fields {"}]}