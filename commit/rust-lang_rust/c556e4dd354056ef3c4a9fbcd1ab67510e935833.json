{"sha": "c556e4dd354056ef3c4a9fbcd1ab67510e935833", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTZlNGRkMzU0MDU2ZWYzYzRhOWZiY2QxYWI2NzUxMGU5MzU4MzM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-17T18:31:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-25T09:55:11Z"}, "message": "Use PIC in JIT mode too", "tree": {"sha": "604ba6374d6c5a02a306f543fac8bdefa615ac75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/604ba6374d6c5a02a306f543fac8bdefa615ac75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c556e4dd354056ef3c4a9fbcd1ab67510e935833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c556e4dd354056ef3c4a9fbcd1ab67510e935833", "html_url": "https://github.com/rust-lang/rust/commit/c556e4dd354056ef3c4a9fbcd1ab67510e935833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c556e4dd354056ef3c4a9fbcd1ab67510e935833/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "510616fc0705c94c389710ad5fd47bc97eb2bfa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/510616fc0705c94c389710ad5fd47bc97eb2bfa1", "html_url": "https://github.com/rust-lang/rust/commit/510616fc0705c94c389710ad5fd47bc97eb2bfa1"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "0ce34c904bdcc43d274263f46035c5302d5b5a78", "filename": "src/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=c556e4dd354056ef3c4a9fbcd1ab67510e935833", "patch": "@@ -162,7 +162,7 @@ impl AddConstructor for ObjectProduct {\n }\n \n pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n-    let triple = crate::build_isa(sess, true).triple().clone();\n+    let triple = crate::build_isa(sess).triple().clone();\n \n     let binary_format = match triple.binary_format {\n         target_lexicon::BinaryFormat::Elf => object::BinaryFormat::Elf,\n@@ -193,7 +193,7 @@ pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object\n \n pub(crate) fn make_module(sess: &Session, name: String) -> ObjectModule {\n     let mut builder = ObjectBuilder::new(\n-        crate::build_isa(sess, true),\n+        crate::build_isa(sess),\n         name + \".o\",\n         cranelift_module::default_libcall_names(),\n     )"}, {"sha": "49de927cdba059d0fd4c154bccae6737d46c916e", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=c556e4dd354056ef3c4a9fbcd1ab67510e935833", "patch": "@@ -15,11 +15,11 @@ pub(crate) struct UnwindContext<'tcx> {\n }\n \n impl<'tcx> UnwindContext<'tcx> {\n-    pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa) -> Self {\n+    pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa, pic_eh_frame: bool) -> Self {\n         let mut frame_table = FrameTable::default();\n \n         let cie_id = if let Some(mut cie) = isa.create_systemv_cie() {\n-            if isa.flags().is_pic() {\n+            if pic_eh_frame {\n                 cie.fde_address_encoding =\n                     gimli::DwEhPe(gimli::DW_EH_PE_pcrel.0 | gimli::DW_EH_PE_sdata4.0);\n             }"}, {"sha": "16f9bfc99189f5cbe1e7f3d59b24f7cca8364b8c", "filename": "src/driver/aot.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=c556e4dd354056ef3c4a9fbcd1ab67510e935833", "patch": "@@ -146,7 +146,12 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n         }\n     }\n \n-    let mut cx = crate::CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n+    let mut cx = crate::CodegenCx::new(\n+        tcx,\n+        module,\n+        tcx.sess.opts.debuginfo != DebugInfo::None,\n+        true,\n+    );\n     super::predefine_mono_items(&mut cx, &mono_items);\n     for (mono_item, (linkage, visibility)) in mono_items {\n         let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n@@ -254,7 +259,7 @@ pub(super) fn run_aot(\n     tcx.sess.abort_if_errors();\n \n     let mut allocator_module = new_module(tcx, \"allocator_shim\".to_string());\n-    let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa());\n+    let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa(), true);\n     let created_alloc_shim =\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n "}, {"sha": "4be317f83917e06146db61395e42b5209562c408", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=c556e4dd354056ef3c4a9fbcd1ab67510e935833", "patch": "@@ -37,7 +37,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     let imported_symbols = load_imported_symbols_for_jit(tcx);\n \n     let mut jit_builder = JITBuilder::with_isa(\n-        crate::build_isa(tcx.sess, false),\n+        crate::build_isa(tcx.sess),\n         cranelift_module::default_libcall_names(),\n     );\n     jit_builder.symbols(imported_symbols);\n@@ -67,7 +67,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    let mut cx = crate::CodegenCx::new(tcx, jit_module, false);\n+    let mut cx = crate::CodegenCx::new(tcx, jit_module, false, false);\n \n     let (mut jit_module, global_asm, _debug, mut unwind_context) =\n         super::time(tcx, \"codegen mono items\", || {"}, {"sha": "ee20e449bb9c6d13c73ef657d98bd7adf60b4aee", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c556e4dd354056ef3c4a9fbcd1ab67510e935833", "patch": "@@ -141,8 +141,8 @@ struct CodegenCx<'tcx, M: Module> {\n }\n \n impl<'tcx, M: Module> CodegenCx<'tcx, M> {\n-    fn new(tcx: TyCtxt<'tcx>, module: M, debug_info: bool) -> Self {\n-        let unwind_context = UnwindContext::new(tcx, module.isa());\n+    fn new(tcx: TyCtxt<'tcx>, module: M, debug_info: bool, pic_eh_frame: bool) -> Self {\n+        let unwind_context = UnwindContext::new(tcx, module.isa(), pic_eh_frame);\n         let debug_context = if debug_info {\n             Some(DebugContext::new(tcx, module.isa()))\n         } else {\n@@ -250,17 +250,13 @@ fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     sess.target.llvm_target.parse().unwrap()\n }\n \n-fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'static> {\n+fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n     use target_lexicon::BinaryFormat;\n \n     let target_triple = crate::target_triple(sess);\n \n     let mut flags_builder = settings::builder();\n-    if enable_pic {\n-        flags_builder.enable(\"is_pic\").unwrap();\n-    } else {\n-        flags_builder.set(\"is_pic\", \"false\").unwrap();\n-    }\n+    flags_builder.enable(\"is_pic\").unwrap();\n     flags_builder.set(\"enable_probestack\", \"false\").unwrap(); // __cranelift_probestack is not provided\n     flags_builder\n         .set("}, {"sha": "1326bac74b1da86a60161d7476c9b51ac2ee0db5", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c556e4dd354056ef3c4a9fbcd1ab67510e935833/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=c556e4dd354056ef3c4a9fbcd1ab67510e935833", "patch": "@@ -263,9 +263,7 @@ pub(crate) fn write_clif_file<'tcx>(\n             &mut clif,\n             &context.func,\n             &DisplayFunctionAnnotations {\n-                isa: Some(&*crate::build_isa(\n-                    tcx.sess, true, /* PIC doesn't matter here */\n-                )),\n+                isa: Some(&*crate::build_isa(tcx.sess)),\n                 value_ranges: value_ranges.as_ref(),\n             },\n         )"}]}