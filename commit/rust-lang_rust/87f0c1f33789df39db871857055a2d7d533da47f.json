{"sha": "87f0c1f33789df39db871857055a2d7d533da47f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZjBjMWYzMzc4OWRmMzlkYjg3MTg1NzA1NWEyZDdkNTMzZGE0N2Y=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-23T14:16:53Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-23T14:35:51Z"}, "message": "Suggest to take and ignore args while closure args count mismatching", "tree": {"sha": "68faa25e6997ccd79a735b03c2e88b56a00eae4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68faa25e6997ccd79a735b03c2e88b56a00eae4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f0c1f33789df39db871857055a2d7d533da47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f0c1f33789df39db871857055a2d7d533da47f", "html_url": "https://github.com/rust-lang/rust/commit/87f0c1f33789df39db871857055a2d7d533da47f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f0c1f33789df39db871857055a2d7d533da47f/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7cba3d33f564be140275c4fb9e33c6dc2c97b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cba3d33f564be140275c4fb9e33c6dc2c97b21", "html_url": "https://github.com/rust-lang/rust/commit/c7cba3d33f564be140275c4fb9e33c6dc2c97b21"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "1c502b66103026e8f62f701b7d85167c6f16ca17", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/87f0c1f33789df39db871857055a2d7d533da47f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f0c1f33789df39db871857055a2d7d533da47f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=87f0c1f33789df39db871857055a2d7d533da47f", "patch": "@@ -1048,7 +1048,24 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         err.span_label(span, format!( \"expected {} that takes {}\", kind, expected_str));\n \n         if let Some(found_span) = found_span {\n-            err.span_label(found_span, format!(\"takes {}\", found_str));\n+            // Suggest to take and ignore the arguments with expected_args_length `_`s if\n+            // found arguments is empty(Suppose the user just wants to ignore args in this case).\n+            // like `|_, _|` for closure with 2 expected args.\n+            if found_args.is_empty() && is_closure {\n+                let mut underscores = \"_\".repeat(expected_args.len())\n+                                     .split(\"\")\n+                                     .filter(|s| !s.is_empty())\n+                                     .collect::<Vec<_>>()\n+                                     .join(\", \");\n+                err.span_suggestion(\n+                    found_span,\n+                    \"consider changing this to\",\n+                    format!(\"|{}|\", underscores),\n+                );\n+            } else {\n+                err.span_label(found_span, format!(\"takes {}\", found_str));\n+            }\n+\n \n             if let &[ArgKind::Tuple(_, ref fields)] = &found_args[..] {\n                 if fields.len() == expected_args.len() {"}]}