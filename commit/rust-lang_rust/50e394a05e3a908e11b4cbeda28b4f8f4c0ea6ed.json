{"sha": "50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZTM5NGEwNWUzYTkwOGUxMWI0Y2JlZGEyOGI0ZjhmNGMwZWE2ZWQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2021-01-05T15:33:10Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2021-02-03T23:00:28Z"}, "message": "relax adt unsizing requirements", "tree": {"sha": "40ba652e3cc45a15bbd114aeab48d65ec6da3cde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40ba652e3cc45a15bbd114aeab48d65ec6da3cde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "html_url": "https://github.com/rust-lang/rust/commit/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "120b2a704a60d4341286bd82f6e638c65ca169b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/120b2a704a60d4341286bd82f6e638c65ca169b6", "html_url": "https://github.com/rust-lang/rust/commit/120b2a704a60d4341286bd82f6e638c65ca169b6"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "100824f4b94480b8875a733b7a116b2fdfc029f5", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "patch": "@@ -707,6 +707,18 @@ impl<T: Idx> GrowableBitSet<T> {\n         self.bit_set.insert(elem)\n     }\n \n+    /// Returns `true` if the set has changed.\n+    #[inline]\n+    pub fn remove(&mut self, elem: T) -> bool {\n+        self.ensure(elem.index() + 1);\n+        self.bit_set.remove(elem)\n+    }\n+\n+    #[inline]\n+    pub fn is_empty(&self) -> bool {\n+        self.bit_set.is_empty()\n+    }\n+\n     #[inline]\n     pub fn contains(&self, elem: T) -> bool {\n         let (word_index, mask) = word_index_and_mask(elem);"}, {"sha": "3e3e945f654b7a495934932ed74d80b1b2594010", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "patch": "@@ -829,16 +829,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let tail_field_ty = tcx.type_of(tail_field.did);\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n-                let mut found = false;\n                 for arg in tail_field_ty.walk() {\n                     if let Some(i) = maybe_unsizing_param_idx(arg) {\n                         unsizing_params.insert(i);\n-                        found = true;\n                     }\n                 }\n-                if !found {\n-                    return Err(Unimplemented);\n-                }\n \n                 // Ensure none of the other fields mention the parameters used\n                 // in unsizing.\n@@ -848,13 +843,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 for field in prefix_fields {\n                     for arg in tcx.type_of(field.did).walk() {\n                         if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                            if unsizing_params.contains(i) {\n-                                return Err(Unimplemented);\n-                            }\n+                            unsizing_params.remove(i);\n                         }\n                     }\n                 }\n \n+                if unsizing_params.is_empty() {\n+                    return Err(Unimplemented);\n+                }\n+\n                 // Extract `TailField<T>` and `TailField<U>` from `Struct<T>` and `Struct<U>`.\n                 let source_tail = tail_field_ty.subst(tcx, substs_a);\n                 let target_tail = tail_field_ty.subst(tcx, substs_b);"}, {"sha": "93c7af68ac388e145714fe11c473d29eb0b5b16b", "filename": "src/test/ui/unsized/unchanged-param.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs?ref=50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+// Test that we allow unsizing even if there is an unchanged param in the\n+// field getting unsized.\n+struct A<T, U: ?Sized + 'static>(T, B<T, U>);\n+struct B<T, U: ?Sized>(T, U);\n+\n+fn main() {\n+    let x: A<[u32; 1], [u32; 1]> = A([0; 1], B([0; 1], [0; 1]));\n+    let y: &A<[u32; 1], [u32]> = &x;\n+    assert_eq!(y.1.1.len(), 1);\n+}"}]}