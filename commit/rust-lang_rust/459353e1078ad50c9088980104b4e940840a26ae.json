{"sha": "459353e1078ad50c9088980104b4e940840a26ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OTM1M2UxMDc4YWQ1MGM5MDg4OTgwMTA0YjRlOTQwODQwYTI2YWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-28T01:45:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-28T04:50:07Z"}, "message": "Prevent copies of resources into various things", "tree": {"sha": "be3af38a9f2bb8f54d2b390ee2a603d1c41be6c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3af38a9f2bb8f54d2b390ee2a603d1c41be6c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459353e1078ad50c9088980104b4e940840a26ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459353e1078ad50c9088980104b4e940840a26ae", "html_url": "https://github.com/rust-lang/rust/commit/459353e1078ad50c9088980104b4e940840a26ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459353e1078ad50c9088980104b4e940840a26ae/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba86178efc8c5b733202995427c6345ee80ba1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba86178efc8c5b733202995427c6345ee80ba1c", "html_url": "https://github.com/rust-lang/rust/commit/9ba86178efc8c5b733202995427c6345ee80ba1c"}], "stats": {"total": 175, "additions": 162, "deletions": 13}, "files": [{"sha": "c5e8991f804d37ab8a5fadef9532fc21ce587cbf", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -142,6 +142,52 @@ fn need_shared_lhs_rhs(tcx: ty::ctxt, a: @ast::expr, b: @ast::expr, op: str) {\n     need_expr_kind(tcx, b, ast::kind_shared, op + \" rhs\");\n }\n \n+/*\n+This ... is a hack (I find myself writing that too often *sadface*).\n+\n+We need to be able to put pinned kinds into other types but such operations\n+are conceptually copies, and pinned kinds can't do that, e.g.\n+\n+let a = my_resource(x);\n+let b = @a; // no-go\n+\n+So this function attempts to make a loophole where resources can be put into\n+other types as long as it's done in a safe way, specifically like\n+\n+let b = @my_resource(x);\n+*/\n+fn need_shared_or_pinned_ctor(tcx: ty::ctxt, a: @ast::expr, descr: str) {\n+    let tk = type_and_kind(tcx, a);\n+    if tk.kind == ast::kind_pinned && !pinned_ctor(a) {\n+        let err =\n+            #fmt[\"mismatched kinds for %s: cannot copy pinned type %s\",\n+                 descr, util::ppaux::ty_to_str(tcx, tk.ty)];\n+        tcx.sess.span_err(a.span, err);\n+        let note =\n+            #fmt[\"try constructing %s directly into %s\",\n+                 util::ppaux::ty_to_str(tcx, tk.ty), descr];\n+        tcx.sess.span_note(a.span, note);\n+    } else if tk.kind != ast::kind_pinned {\n+        need_expr_kind(tcx, a, ast::kind_shared, descr);\n+    }\n+\n+    fn pinned_ctor(a: @ast::expr) -> bool {\n+        // FIXME: Technically a lambda block is also a pinned ctor\n+        alt a.node {\n+          ast::expr_call(cexpr, _) {\n+            // Assuming that if it's a call that it's safe to move in, mostly\n+            // because I don't know offhand how to ensure that it's a call\n+            // specifically to a resource constructor\n+            true\n+          }\n+          ast::expr_rec(_, _) {\n+            true\n+          }\n+          _ { false }\n+        }\n+    }\n+}\n+\n fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n     alt e.node {\n \n@@ -189,6 +235,27 @@ fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n             }\n         }\n       }\n+      ast::expr_unary(op, a) {\n+        alt op {\n+          ast::box(_) {\n+            need_shared_or_pinned_ctor(tcx, a, \"'@' operand\");\n+          }\n+          ast::uniq(_) {\n+            need_shared_or_pinned_ctor(tcx, a, \"'~' operand\");\n+          }\n+          _ { /* fall through */ }\n+        }\n+      }\n+      ast::expr_rec(fields, _) {\n+        for field in fields {\n+            need_shared_or_pinned_ctor(tcx, field.node.expr, \"record field\");\n+        }\n+      }\n+      ast::expr_tup(exprs) {\n+        for expr in exprs {\n+            need_shared_or_pinned_ctor(tcx, expr, \"tuple parameter\");\n+        }\n+      }\n       _ { }\n     }\n }"}, {"sha": "acd77e647538f7db16ae4f17ed820a0c37f2bca3", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -230,7 +230,7 @@ fn check_variants_of_ast(crate: ast::crate, codemap: codemap::codemap,\n     check_variants_T(crate, codemap, filename, \"ty\", stolen.tys, pprust::ty_to_str, replace_ty_in_crate, cx);\n }\n \n-fn check_variants_T<T>(\n+fn check_variants_T<@T>(\n   crate: ast::crate,\n   codemap: codemap::codemap,\n   filename: str,"}, {"sha": "15f22b5eb6e33379eb31974320eb1d88af2ac175", "filename": "src/test/compile-fail/copy-res-into-box.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-box.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -1,5 +1,4 @@\n-// xfail-test\n-// error-pattern:mismatched kinds\n+// error-pattern:mismatched kinds for '@' operand\n resource r(i: @mutable int) {\n     *i = *i + 1;\n }\n@@ -9,7 +8,7 @@ fn main() {\n     {\n         let j <- r(i);\n         // No no no no no\n-        let k = @j;\n+        let k <- @j;\n     }\n     log_err *i;\n     assert *i == 2;"}, {"sha": "f22c4fd25ab90ab523911dc8fc185f01735e2e47", "filename": "src/test/compile-fail/copy-res-into-rec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-rec.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -1,5 +1,4 @@\n-// xfail-test\n-// error-pattern:mismatched kinds\n+// error-pattern:mismatched kinds for record field\n resource r(i: @mutable int) {\n     *i = *i + 1;\n }"}, {"sha": "358277c4785ef9e419db96b4aef6c70982c3bfa8", "filename": "src/test/compile-fail/copy-res-into-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tag.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -1,5 +1,5 @@\n // xfail-test\n-// error-pattern:mismatched kinds\n+// error-pattern:mismatched kinds for tag parameter\n resource r(i: @mutable int) {\n     *i = *i + 1;\n }"}, {"sha": "4808b947045e87197152de00be414de0de4fba7f", "filename": "src/test/compile-fail/copy-res-into-tup.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tup.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -1,5 +1,4 @@\n-// xfail-test\n-// error-pattern:mismatched kinds\n+// error-pattern:mismatched kinds for tuple parameter\n resource r(i: @mutable int) {\n     *i = *i + 1;\n }"}, {"sha": "380f1e44a006f88805daf574999c2f03a56e0117", "filename": "src/test/compile-fail/copy-res-into-unique.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-unique.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -0,0 +1,15 @@\n+// error-pattern:mismatched kinds for '~' operand\n+resource r(i: @mutable int) {\n+    *i = *i + 1;\n+}\n+\n+fn main() {\n+    let i = @mutable 0;\n+    {\n+        let j <- r(i);\n+        // No no no no no\n+        let k <- ~j;\n+    }\n+    log_err *i;\n+    assert *i == 2;\n+}\n\\ No newline at end of file"}, {"sha": "1e892cf6711ce2f10818c2abb3047543437b742f", "filename": "src/test/run-pass/foreach-box-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj ob<K>(k: K) {\n+obj ob<@K>(k: K) {\n     iter foo() -> @{a: K} { put @{a: k}; }\n }\n "}, {"sha": "3b3bfe937c7577f37fa979338d374575fd73e7f8", "filename": "src/test/run-pass/foreach-unique-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -1,5 +1,5 @@\n \n-obj ob<K>(k: K) {\n+obj ob<@K>(k: K) {\n     iter foo() -> ~{a: K} { put ~{a: k}; }\n }\n "}, {"sha": "4f132a79a812535a6e392f32e7aaa0081ca1a27c", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn box<T>(x: {x: T, y: T, z: T}) -> @{x: T, y: T, z: T} { ret @x; }\n+fn box<@T>(x: {x: T, y: T, z: T}) -> @{x: T, y: T, z: T} { ret @x; }\n \n fn main() {\n     let x: @{x: int, y: int, z: int} = box::<int>({x: 1, y: 2, z: 3});"}, {"sha": "c1ce4257b14cf55470ed02aeeeee55edb151e374", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -2,7 +2,7 @@\n \n type recbox<T> = {x: @T};\n \n-fn reclift<T>(t: T) -> recbox<T> { ret {x: @t}; }\n+fn reclift<@T>(t: T) -> recbox<T> { ret {x: @t}; }\n \n fn main() {\n     let foo: int = 17;"}, {"sha": "fc1868ec07e165c38332782a974a1dcc5238cf3d", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459353e1078ad50c9088980104b4e940840a26ae/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=459353e1078ad50c9088980104b4e940840a26ae", "patch": "@@ -0,0 +1,70 @@\n+// Resources can't be copied into other types but still need to be able\n+// to find their way into things.\n+\n+resource r(i: @mutable int) {\n+    *i = *i + 1;\n+}\n+\n+fn test_box() {\n+    let i = @mutable 0;\n+    {\n+        let a <- @r(i);\n+    }\n+    assert *i == 1;\n+}\n+\n+fn test_rec() {\n+    let i = @mutable 0;\n+    {\n+        let a <- {x: r(i)};\n+    }\n+    assert *i == 1;\n+}\n+\n+fn test_tag() {\n+    tag t {\n+        t0(r);\n+    }\n+\n+    let i = @mutable 0;\n+    {\n+        let a <- t0(r(i));\n+    }\n+    assert *i == 1;\n+}\n+\n+fn test_tup() {\n+    let i = @mutable 0;\n+    {\n+        let a <- (r(i), 0);\n+    }\n+    assert *i == 1;\n+}\n+\n+fn test_unique() {\n+    let i = @mutable 0;\n+    {\n+        let a <- ~r(i);\n+    }\n+    assert *i == 1;\n+}\n+\n+fn test_box_rec() {\n+    let i = @mutable 0;\n+    {\n+        let a <- @{\n+            x: r(i)\n+        };\n+    }\n+    assert *i == 1;\n+}\n+\n+fn main() {\n+    test_box();\n+    test_rec();\n+    // FIXME: tag constructors don't optimize their arguments into moves\n+    // test_tag();\n+    test_tup();\n+    test_unique();\n+    test_box_rec();\n+}"}]}