{"sha": "06f6b36025bd2b3f322cf1ba39a45fd9702ad260", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjZiMzYwMjViZDJiM2YzMjJjZjFiYTM5YTQ1ZmQ5NzAyYWQyNjA=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-09-29T12:18:50Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-09-29T12:18:50Z"}, "message": "rustfmt", "tree": {"sha": "11078addcc9b651387f6e7bb9734858fa14e75a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11078addcc9b651387f6e7bb9734858fa14e75a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f6b36025bd2b3f322cf1ba39a45fd9702ad260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f6b36025bd2b3f322cf1ba39a45fd9702ad260", "html_url": "https://github.com/rust-lang/rust/commit/06f6b36025bd2b3f322cf1ba39a45fd9702ad260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f6b36025bd2b3f322cf1ba39a45fd9702ad260/comments", "author": null, "committer": null, "parents": [{"sha": "efdc739dfc1babd93540bd2d36c91bf2f7d53502", "url": "https://api.github.com/repos/rust-lang/rust/commits/efdc739dfc1babd93540bd2d36c91bf2f7d53502", "html_url": "https://github.com/rust-lang/rust/commit/efdc739dfc1babd93540bd2d36c91bf2f7d53502"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "0a3486df8bdb2d3f24ffe861bab2b3a4263ca001", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06f6b36025bd2b3f322cf1ba39a45fd9702ad260/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f6b36025bd2b3f322cf1ba39a45fd9702ad260/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=06f6b36025bd2b3f322cf1ba39a45fd9702ad260", "patch": "@@ -1,29 +1,27 @@\n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::lint::LateContext;\n use crate::rustc::hir;\n use crate::rustc::hir::def::Def;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::lint::LateContext;\n use crate::syntax::ast;\n-use crate::utils::{match_qpath, match_trait_method, span_lint};\n use crate::utils::paths;\n use crate::utils::usage::mutated_variables;\n+use crate::utils::{match_qpath, match_trait_method, span_lint};\n \n use if_chain::if_chain;\n \n use super::UNNECESSARY_FILTER_MAP;\n \n pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr]) {\n-\n     if !match_trait_method(cx, expr, &paths::ITERATOR) {\n         return;\n     }\n \n     if let hir::ExprKind::Closure(_, _, body_id, ..) = args[1].node {\n-\n         let body = cx.tcx.hir.body(body_id);\n         let arg_id = body.arguments[0].pat.id;\n         let mutates_arg = match mutated_variables(&body.value, cx) {\n-                Some(used_mutably) => used_mutably.contains(&arg_id),\n-                None => true,\n+            Some(used_mutably) => used_mutably.contains(&arg_id),\n+            None => true,\n         };\n \n         let (mut found_mapping, mut found_filtering) = check_expression(&cx, arg_id, &body.value);\n@@ -56,7 +54,11 @@ pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr\n }\n \n // returns (found_mapping, found_filtering)\n-fn check_expression<'a, 'tcx: 'a>(cx: &'a LateContext<'a, 'tcx>, arg_id: ast::NodeId, expr: &'tcx hir::Expr) -> (bool, bool) {\n+fn check_expression<'a, 'tcx: 'a>(\n+    cx: &'a LateContext<'a, 'tcx>,\n+    arg_id: ast::NodeId,\n+    expr: &'tcx hir::Expr,\n+) -> (bool, bool) {\n     match &expr.node {\n         hir::ExprKind::Call(ref func, ref args) => {\n             if_chain! {\n@@ -105,7 +107,7 @@ fn check_expression<'a, 'tcx: 'a>(cx: &'a LateContext<'a, 'tcx>, arg_id: ast::No\n             (found_mapping, found_filtering)\n         },\n         hir::ExprKind::Path(path) if match_qpath(path, &paths::OPTION_NONE) => (false, true),\n-        _ => (true, true)\n+        _ => (true, true),\n     }\n }\n "}]}