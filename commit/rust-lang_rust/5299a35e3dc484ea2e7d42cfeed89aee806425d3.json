{"sha": "5299a35e3dc484ea2e7d42cfeed89aee806425d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOTlhMzVlM2RjNDg0ZWEyZTdkNDJjZmVlZDg5YWVlODA2NDI1ZDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T17:33:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T17:33:39Z"}, "message": "extend selection works with macros", "tree": {"sha": "87a7ef3976e50ef120246a777da0593823f15d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a7ef3976e50ef120246a777da0593823f15d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5299a35e3dc484ea2e7d42cfeed89aee806425d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5299a35e3dc484ea2e7d42cfeed89aee806425d3", "html_url": "https://github.com/rust-lang/rust/commit/5299a35e3dc484ea2e7d42cfeed89aee806425d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5299a35e3dc484ea2e7d42cfeed89aee806425d3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e687f281e4850ae258d5dae84dee871e24e8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/10e687f281e4850ae258d5dae84dee871e24e8ed", "html_url": "https://github.com/rust-lang/rust/commit/10e687f281e4850ae258d5dae84dee871e24e8ed"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "cde6ee1018d73a8ff335a6dcdcc110f18db81698", "filename": "crates/ra_analysis/src/extend_selection.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5299a35e3dc484ea2e7d42cfeed89aee806425d3/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5299a35e3dc484ea2e7d42cfeed89aee806425d3/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs?ref=5299a35e3dc484ea2e7d42cfeed89aee806425d3", "patch": "@@ -1,11 +1,51 @@\n use ra_db::SyntaxDatabase;\n+use ra_syntax::{\n+    SyntaxNodeRef, AstNode,\n+    ast, algo::find_covering_node,\n+};\n \n use crate::{\n     TextRange, FileRange,\n     db::RootDatabase,\n };\n \n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n-    let file = db.source_file(frange.file_id);\n-    ra_editor::extend_selection(&file, frange.range).unwrap_or(frange.range)\n+    let source_file = db.source_file(frange.file_id);\n+    if let Some(macro_call) = find_macro_call(source_file.syntax(), frange.range) {\n+        if let Some(exp) = crate::macros::expand(db, frange.file_id, macro_call) {\n+            if let Some(dst_range) = exp.map_range_forward(frange.range) {\n+                if let Some(dst_range) = ra_editor::extend_selection(exp.source_file(), dst_range) {\n+                    if let Some(src_range) = exp.map_range_back(dst_range) {\n+                        return src_range;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    ra_editor::extend_selection(&source_file, frange.range).unwrap_or(frange.range)\n+}\n+\n+fn find_macro_call(node: SyntaxNodeRef, range: TextRange) -> Option<ast::MacroCall> {\n+    find_covering_node(node, range)\n+        .ancestors()\n+        .find_map(ast::MacroCall::cast)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::single_file_with_range;\n+    use test_utils::assert_eq_dbg;\n+\n+    #[test]\n+    fn extend_selection_inside_macros() {\n+        let (analysis, frange) = single_file_with_range(\n+            \"\n+            fn main() {\n+                ctry!(foo(|x| <|>x<|>));\n+            }\n+        \",\n+        );\n+        let r = analysis.extend_selection(frange);\n+        assert_eq_dbg(\"[51; 56)\", &r);\n+    }\n }"}, {"sha": "b9feb7fad4d02f0c931aa78344be892b04a93e07", "filename": "crates/ra_analysis/src/macros.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5299a35e3dc484ea2e7d42cfeed89aee806425d3/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5299a35e3dc484ea2e7d42cfeed89aee806425d3/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmacros.rs?ref=5299a35e3dc484ea2e7d42cfeed89aee806425d3", "patch": "@@ -61,4 +61,15 @@ impl MacroExpansion {\n         }\n         None\n     }\n+    pub(crate) fn map_range_forward(&self, src_range: TextRange) -> Option<TextRange> {\n+        for (s_range, t_range) in self.ranges_map.iter() {\n+            if src_range.is_subrange(&s_range) {\n+                let src_at_zero_range = src_range - src_range.start();\n+                let src_range_offset = src_range.start() - s_range.start();\n+                let src_range = src_at_zero_range + src_range_offset + t_range.start();\n+                return Some(src_range);\n+            }\n+        }\n+        None\n+    }\n }"}, {"sha": "9605294046de9e98b0706f0f152461718b336f74", "filename": "crates/ra_analysis/src/mock_analysis.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5299a35e3dc484ea2e7d42cfeed89aee806425d3/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5299a35e3dc484ea2e7d42cfeed89aee806425d3/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs?ref=5299a35e3dc484ea2e7d42cfeed89aee806425d3", "patch": "@@ -1,10 +1,10 @@\n use std::sync::Arc;\n \n use relative_path::RelativePathBuf;\n-use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n+use test_utils::{extract_offset, extract_range, parse_fixture, CURSOR_MARKER};\n use ra_db::mock::FileMap;\n \n-use crate::{Analysis, AnalysisChange, AnalysisHost, FileId, FilePosition, SourceRootId};\n+use crate::{Analysis, AnalysisChange, AnalysisHost, FileId, FilePosition, FileRange, SourceRootId};\n \n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n@@ -66,6 +66,12 @@ impl MockAnalysis {\n         self.files.push((path.to_string(), text.to_string()));\n         FilePosition { file_id, offset }\n     }\n+    pub fn add_file_with_range(&mut self, path: &str, text: &str) -> FileRange {\n+        let (range, text) = extract_range(text);\n+        let file_id = FileId((self.files.len() + 1) as u32);\n+        self.files.push((path.to_string(), text.to_string()));\n+        FileRange { file_id, range }\n+    }\n     pub fn id_of(&self, path: &str) -> FileId {\n         let (idx, _) = self\n             .files\n@@ -115,3 +121,10 @@ pub fn single_file_with_position(code: &str) -> (Analysis, FilePosition) {\n     let pos = mock.add_file_with_position(\"/main.rs\", code);\n     (mock.analysis(), pos)\n }\n+\n+/// Creates analysis for a single file, returns range marked with a pair of <|>.\n+pub fn single_file_with_range(code: &str) -> (Analysis, FileRange) {\n+    let mut mock = MockAnalysis::new();\n+    let pos = mock.add_file_with_range(\"/main.rs\", code);\n+    (mock.analysis(), pos)\n+}"}]}