{"sha": "10a69de5fdc6572e5b4339189c637e5c42f33346", "node_id": "C_kwDOAAsO6NoAKDEwYTY5ZGU1ZmRjNjU3MmU1YjQzMzkxODljNjM3ZTVjNDJmMzMzNDY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-02T18:33:48Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-02T18:33:48Z"}, "message": "Allow checking whether a type allows being uninitialized\n\nThis is useful for clippy and for the future `MaybeUninit::assume_init`\npanics.", "tree": {"sha": "3dd73fc31a8d4a4703a4c96f04a25756e35f26bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dd73fc31a8d4a4703a4c96f04a25756e35f26bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a69de5fdc6572e5b4339189c637e5c42f33346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a69de5fdc6572e5b4339189c637e5c42f33346", "html_url": "https://github.com/rust-lang/rust/commit/10a69de5fdc6572e5b4339189c637e5c42f33346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a69de5fdc6572e5b4339189c637e5c42f33346/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "html_url": "https://github.com/rust-lang/rust/commit/7e966bcd03f6d0fae41f58cf80bcb10566ab971a"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "63a041b25a9878f5a1c15f08707a3abca8bb304c", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10a69de5fdc6572e5b4339189c637e5c42f33346/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a69de5fdc6572e5b4339189c637e5c42f33346/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=10a69de5fdc6572e5b4339189c637e5c42f33346", "patch": "@@ -444,6 +444,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n                             ty\n                         ),\n+                        ValidityRequirement::Uninit => bug!(\"assert_uninit_valid doesn't exist\"),\n                     };\n \n                     M::abort(self, msg)?;"}, {"sha": "23fcd22c52b8e02b0868a0a33d9b8a4bfa0f5efe", "filename": "compiler/rustc_const_eval/src/util/check_validity_requirement.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10a69de5fdc6572e5b4339189c637e5c42f33346/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a69de5fdc6572e5b4339189c637e5c42f33346/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs?ref=10a69de5fdc6572e5b4339189c637e5c42f33346", "patch": "@@ -30,7 +30,7 @@ pub fn check_validity_requirement<'tcx>(\n         return Ok(!layout.abi.is_uninhabited());\n     }\n \n-    if tcx.sess.opts.unstable_opts.strict_init_checks {\n+    if kind == ValidityRequirement::Uninit || tcx.sess.opts.unstable_opts.strict_init_checks {\n         might_permit_raw_init_strict(layout, tcx, kind)\n     } else {\n         let layout_cx = LayoutCx { tcx, param_env: param_env_and_ty.param_env };\n@@ -99,6 +99,9 @@ fn might_permit_raw_init_lax<'tcx>(\n                 }\n                 s.valid_range(cx).contains(val)\n             }\n+            ValidityRequirement::Uninit => {\n+                bug!(\"ValidityRequirement::Uninit should have been handled above\")\n+            }\n         }\n     };\n "}, {"sha": "d9fe01237a733ed58dec339963ccf1c0837c3902", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10a69de5fdc6572e5b4339189c637e5c42f33346/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a69de5fdc6572e5b4339189c637e5c42f33346/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=10a69de5fdc6572e5b4339189c637e5c42f33346", "patch": "@@ -170,13 +170,17 @@ pub const FAT_PTR_EXTRA: usize = 1;\n /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.\n pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n \n-/// Used in `might_permit_raw_init` to indicate the kind of initialisation\n+/// Used in `check_validity_requirement` to indicate the kind of initialization\n /// that is checked to be valid\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n pub enum ValidityRequirement {\n     Inhabited,\n     Zero,\n+    /// The return value of mem::uninitialized, 0x01\n+    /// (unless -Zstrict-init-checks is on, in which case it's the same as Uninit).\n     UninitMitigated0x01Fill,\n+    /// True uninitialized memory.\n+    Uninit,\n }\n \n impl ValidityRequirement {\n@@ -196,6 +200,7 @@ impl fmt::Display for ValidityRequirement {\n             Self::Inhabited => f.write_str(\"is inhabited\"),\n             Self::Zero => f.write_str(\"allows being left zeroed\"),\n             Self::UninitMitigated0x01Fill => f.write_str(\"allows being filled with 0x01\"),\n+            Self::Uninit => f.write_str(\"allows being left uninitialized\"),\n         }\n     }\n }"}]}