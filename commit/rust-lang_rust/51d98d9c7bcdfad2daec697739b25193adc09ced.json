{"sha": "51d98d9c7bcdfad2daec697739b25193adc09ced", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDk4ZDljN2JjZGZhZDJkYWVjNjk3NzM5YjI1MTkzYWRjMDljZWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-15T18:55:17Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-15T19:38:32Z"}, "message": "Expunge match checks", "tree": {"sha": "c4ae164ad57499113d0cc2e4b82f6406acb82e1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ae164ad57499113d0cc2e4b82f6406acb82e1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d98d9c7bcdfad2daec697739b25193adc09ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d98d9c7bcdfad2daec697739b25193adc09ced", "html_url": "https://github.com/rust-lang/rust/commit/51d98d9c7bcdfad2daec697739b25193adc09ced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d98d9c7bcdfad2daec697739b25193adc09ced/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0f289397ce47ed8c4d4f97d94408e83a59abd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f289397ce47ed8c4d4f97d94408e83a59abd5a", "html_url": "https://github.com/rust-lang/rust/commit/b0f289397ce47ed8c4d4f97d94408e83a59abd5a"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "b4cf0ef1002315cbbda6c28a9ee03051e4471bd5", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -412,9 +412,10 @@ fn test_select2_stress() {\n     let mut as = 0;\n     let mut bs = 0;\n     for iter::repeat(msgs * times * 2u) {\n-        match check select2(po_a, po_b) {\n+        match select2(po_a, po_b) {\n           either::left(~\"a\") => as += 1,\n-          either::right(~\"b\") => bs += 1\n+          either::right(~\"b\") => bs += 1,\n+          _ => fail ~\"test_select_2_stress failed\"\n         }\n     }\n "}, {"sha": "7b08bb8f96b5d5274f18d17cc37d88567fd47fe2", "filename": "src/libcore/run.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -312,13 +312,17 @@ fn program_output(prog: &str, args: &[~str]) ->\n     let mut count = 2;\n     while count > 0 {\n         let stream = comm::recv(p);\n-        match check stream {\n+        match stream {\n             (1, s) => {\n                 outs = s;\n             }\n             (2, s) => {\n                 errs = s;\n             }\n+            (n, _) => {\n+                fail(#fmt(\"program_output received an unexpected file \\\n+                  number: %u\", n));\n+            }\n         };\n         count -= 1;\n     };"}, {"sha": "9a1e32a67111a5197d2995915c436dc979111487", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -2771,10 +2771,11 @@ mod tests {\n     fn test_chars_iter() {\n         let mut i = 0;\n         do chars_iter(~\"x\\u03c0y\") |ch| {\n-            match check i {\n+            match i {\n               0 => assert ch == 'x',\n               1 => assert ch == '\\u03c0',\n-              2 => assert ch == 'y'\n+              2 => assert ch == 'y',\n+              _ => fail ~\"test_chars_iter failed\"\n             }\n             i += 1;\n         }\n@@ -2787,10 +2788,11 @@ mod tests {\n         let mut i = 0;\n \n         do bytes_iter(~\"xyz\") |bb| {\n-            match check i {\n+            match i {\n               0 => assert bb == 'x' as u8,\n               1 => assert bb == 'y' as u8,\n-              2 => assert bb == 'z' as u8\n+              2 => assert bb == 'z' as u8,\n+              _ => fail ~\"test_bytes_iter failed\"\n             }\n             i += 1;\n         }"}, {"sha": "99e83d11e524ea8260695e576c56467054c749a2", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -30,22 +30,25 @@ impl ~[u8]: to_base64 {\n             i += 3u;\n         }\n \n-        match check len % 3u {\n-          0u => (),\n-          1u => {\n+        // Heh, would be cool if we knew this was exhaustive\n+        // (the dream of bounded integer types)\n+        match len % 3 {\n+          0 => (),\n+          1 => {\n             let n = (self[i] as uint) << 16u;\n             str::push_char(s, chars[(n >> 18u) & 63u]);\n             str::push_char(s, chars[(n >> 12u) & 63u]);\n             str::push_char(s, '=');\n             str::push_char(s, '=');\n           }\n-          2u => {\n+          2 => {\n             let n = (self[i] as uint) << 16u | (self[i + 1u] as uint) << 8u;\n             str::push_char(s, chars[(n >> 18u) & 63u]);\n             str::push_char(s, chars[(n >> 12u) & 63u]);\n             str::push_char(s, chars[(n >> 6u) & 63u]);\n             str::push_char(s, '=');\n           }\n+          _ => fail ~\"Algebra is broken, please alert the math police\"\n         }\n \n         s"}, {"sha": "b3222f7ab24ca10a3adee234e40c41fcaee94644", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -602,14 +602,17 @@ fn test_option_int() {\n     fn deserialize_0<S: serialization::deserializer>(s: S) -> option<int> {\n         do s.read_enum(~\"core::option::t\") {\n             do s.read_enum_variant |i| {\n-                match check i {\n-                  0u => none,\n-                  1u => {\n+                match i {\n+                  0 => none,\n+                  1 => {\n                     let v0 = do s.read_enum_variant_arg(0u) {\n                         deserialize_1(s)\n                     };\n                     some(v0)\n                   }\n+                  _ => {\n+                    fail #fmt(\"deserialize_0: unexpected variant %u\", i);\n+                  }\n                 }\n             }\n         }"}, {"sha": "1c92fd4ce0d68c25ccc9a1a8e4b57b86ff68dc49", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -431,11 +431,12 @@ mod tests {\n         let args = ~[~\"--test=20\"];\n         let opts = ~[reqopt(~\"test\")];\n         let rs = getopts(args, opts);\n-        match check rs {\n+        match rs {\n           ok(m) => {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n+          _ => { fail ~\"test_reqopt_long failed\"; }\n         }\n     }\n "}, {"sha": "0eb01aa5b66fb5249850eb0c5328a5f60de43ae6", "filename": "src/libstd/list.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -91,7 +91,11 @@ pure fn tail<T: copy>(ls: @list<T>) -> @list<T> {\n \n /// Returns the first element of a list\n pure fn head<T: copy>(ls: @list<T>) -> T {\n-    match check *ls { cons(hd, _) => hd }\n+    match *ls {\n+      cons(hd, _) => hd,\n+      // makes me sad\n+      _ => fail ~\"head invoked on empty list\"\n+    }\n }\n \n /// Appends one list to another"}, {"sha": "15eb565dc84d8c2e1345247e95b0251f00ec9093", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -260,9 +260,10 @@ fn deserialize_option<D: deserializer,T: copy>(d: D, st: fn() -> T)\n     -> option<T> {\n     do d.read_enum(~\"option\") {\n         do d.read_enum_variant |i| {\n-            match check i {\n-              0u => none,\n-              1u => some(d.read_enum_variant_arg(0u, || st() ))\n+            match i {\n+              0 => none,\n+              1 => some(d.read_enum_variant_arg(0u, || st() )),\n+              _ => fail(#fmt(\"Bad variant for option: %u\", i))\n             }\n         }\n     }"}, {"sha": "1aa6c4d74dab71c0b34e95536bcbd6f2ec86c621", "filename": "src/libstd/time.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d98d9c7bcdfad2daec697739b25193adc09ced/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=51d98d9c7bcdfad2daec697739b25193adc09ced", "patch": "@@ -572,26 +572,30 @@ fn strptime(s: ~str, format: ~str) -> result<tm, ~str> {\n fn strftime(format: ~str, tm: tm) -> ~str {\n     fn parse_type(ch: char, tm: tm) -> ~str {\n         //FIXME (#2350): Implement missing types.\n-        match check ch {\n-          'A' => match check tm.tm_wday as int {\n+      let die = || #fmt(\"strftime: can't understand this format %c \",\n+                             ch);\n+        match ch {\n+          'A' => match tm.tm_wday as int {\n             0 => ~\"Sunday\",\n             1 => ~\"Monday\",\n             2 => ~\"Tuesday\",\n             3 => ~\"Wednesday\",\n             4 => ~\"Thursday\",\n             5 => ~\"Friday\",\n-            6 => ~\"Saturday\"\n+            6 => ~\"Saturday\",\n+            _ => die()\n           },\n-          'a' => match check tm.tm_wday as int {\n+         'a' => match tm.tm_wday as int {\n             0 => ~\"Sun\",\n             1 => ~\"Mon\",\n             2 => ~\"Tue\",\n             3 => ~\"Wed\",\n             4 => ~\"Thu\",\n             5 => ~\"Fri\",\n-            6 => ~\"Sat\"\n+            6 => ~\"Sat\",\n+            _ => die()\n           },\n-          'B' => match check tm.tm_mon as int {\n+          'B' => match tm.tm_mon as int {\n             0 => ~\"January\",\n             1 => ~\"February\",\n             2 => ~\"March\",\n@@ -603,9 +607,10 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n             8 => ~\"September\",\n             9 => ~\"October\",\n             10 => ~\"November\",\n-            11 => ~\"December\"\n+            11 => ~\"December\",\n+            _ => die()\n           },\n-          'b' | 'h' => match check tm.tm_mon as int {\n+          'b' | 'h' => match tm.tm_mon as int {\n             0 => ~\"Jan\",\n             1 => ~\"Feb\",\n             2 => ~\"Mar\",\n@@ -618,6 +623,7 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n             9 => ~\"Oct\",\n             10 => ~\"Nov\",\n             11 => ~\"Dec\",\n+            _  => die()\n           },\n           'C' => fmt!{\"%02d\", (tm.tm_year as int + 1900) / 100},\n           'c' => {\n@@ -712,7 +718,8 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n             fmt!{\"%c%02d%02d\", sign, h as int, m as int}\n           }\n           //'+' {}\n-          '%' => ~\"%\"\n+          '%' => ~\"%\",\n+          _   => die()\n         }\n     }\n "}]}