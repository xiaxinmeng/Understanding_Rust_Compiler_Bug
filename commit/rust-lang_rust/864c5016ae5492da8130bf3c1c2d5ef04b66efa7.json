{"sha": "864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGM1MDE2YWU1NDkyZGE4MTMwYmYzYzFjMmQ1ZWYwNGI2NmVmYTc=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-23T05:29:13Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-24T23:49:46Z"}, "message": "Get \"make check\" to work with unused-attribute\n\nThere's a fair number of attributes that have to be whitelisted since\nthey're either looked for by rustdoc, in trans, or as needed. These can\nbe cleaned up in the future.", "tree": {"sha": "478437afc5d6c8ae77f1ed9ef9db48a0703bd919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/478437afc5d6c8ae77f1ed9ef9db48a0703bd919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "html_url": "https://github.com/rust-lang/rust/commit/864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f98c6d7a1dcf878e13f506d9b164fa54657503", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f98c6d7a1dcf878e13f506d9b164fa54657503", "html_url": "https://github.com/rust-lang/rust/commit/24f98c6d7a1dcf878e13f506d9b164fa54657503"}], "stats": {"total": 166, "additions": 102, "deletions": 64}, "files": [{"sha": "b8fa4075e7a758656e6e1b5c3fd609c714193bb6", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -661,6 +661,7 @@ Attributes on the anonymous crate module define important metadata that influenc\n the behavior of the compiler.\n \n ~~~~ {.rust}\n+# #![allow(unused_attribute)]\n // Crate ID\n #![crate_id = \"projx#2.5\"]\n "}, {"sha": "af9cff7be67b0b432f39bd891c177f6473433e82", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -11,6 +11,7 @@ Documenting Rust APIs is quite simple. To document a given item, we have \"doc\n comments\":\n \n ~~~\n+# #![allow(unused_attribute)]\n // the \"link\" crate attribute is currently required for rustdoc, but normally\n // isn't needed.\n #![crate_id = \"universe\"]"}, {"sha": "d85734508bc137f87d5c2aa1d4fc083aa881fb80", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -3166,6 +3166,7 @@ without conflict.\n Therefore, if you plan to compile your crate as a library, you should annotate it with that information:\n \n ~~~~\n+# #![allow(unused_attribute)]\n // `lib.rs`\n \n # #![crate_type = \"lib\"]\n@@ -3189,6 +3190,7 @@ Other crate settings and metadata include things like enabling/disabling certain\n or setting the crate type (library or executable) explicitly:\n \n ~~~~\n+# #![allow(unused_attribute)]\n // `lib.rs`\n // ...\n \n@@ -3208,6 +3210,7 @@ Now for something that you can actually compile yourself.\n We define two crates, and use one of them as a library in the other.\n \n ~~~~\n+# #![allow(unused_attribute)]\n // `world.rs`\n #![crate_id = \"world#0.42\"]\n \n@@ -3282,11 +3285,13 @@ fn main() {\n Both auto-insertions can be disabled with an attribute if necessary:\n \n ~~~\n+# #![allow(unused_attribute)]\n // In the crate root:\n #![no_std]\n ~~~\n \n ~~~\n+# #![allow(unused_attribute)]\n // In any module:\n #![no_implicit_prelude]\n ~~~"}, {"sha": "ee9b10a805901d2eddd0707aa99cd7236e3111b5", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -716,6 +716,45 @@ fn print_flowgraph<W:io::Writer>(analysis: CrateAnalysis,\n \n pub fn collect_crate_types(session: &Session,\n                            attrs: &[ast::Attribute]) -> Vec<config::CrateType> {\n+    // Unconditionally collect crate types from attributes to make them used\n+    let attr_types: Vec<config::CrateType> = attrs.iter().filter_map(|a| {\n+        if a.check_name(\"crate_type\") {\n+            match a.value_str() {\n+                Some(ref n) if n.equiv(&(\"rlib\")) => {\n+                    Some(config::CrateTypeRlib)\n+                }\n+                Some(ref n) if n.equiv(&(\"dylib\")) => {\n+                    Some(config::CrateTypeDylib)\n+                }\n+                Some(ref n) if n.equiv(&(\"lib\")) => {\n+                    Some(config::default_lib_output())\n+                }\n+                Some(ref n) if n.equiv(&(\"staticlib\")) => {\n+                    Some(config::CrateTypeStaticlib)\n+                }\n+                Some(ref n) if n.equiv(&(\"bin\")) => Some(config::CrateTypeExecutable),\n+                Some(_) => {\n+                    session.add_lint(lint::UnknownCrateType,\n+                                     ast::CRATE_NODE_ID,\n+                                     a.span,\n+                                     \"invalid `crate_type` \\\n+                                      value\".to_strbuf());\n+                    None\n+                }\n+                _ => {\n+                    session.add_lint(lint::UnknownCrateType,\n+                                     ast::CRATE_NODE_ID,\n+                                     a.span,\n+                                     \"`crate_type` requires a \\\n+                                      value\".to_strbuf());\n+                    None\n+                }\n+            }\n+        } else {\n+            None\n+        }\n+    }).collect();\n+\n     // If we're generating a test executable, then ignore all other output\n     // styles at all other locations\n     if session.opts.test {\n@@ -729,44 +768,7 @@ pub fn collect_crate_types(session: &Session,\n     if base.len() > 0 {\n         return base\n     } else {\n-        let iter = attrs.iter().filter_map(|a| {\n-            if a.name().equiv(&(\"crate_type\")) {\n-                match a.value_str() {\n-                    Some(ref n) if n.equiv(&(\"rlib\")) => {\n-                        Some(config::CrateTypeRlib)\n-                    }\n-                    Some(ref n) if n.equiv(&(\"dylib\")) => {\n-                        Some(config::CrateTypeDylib)\n-                    }\n-                    Some(ref n) if n.equiv(&(\"lib\")) => {\n-                        Some(config::default_lib_output())\n-                    }\n-                    Some(ref n) if n.equiv(&(\"staticlib\")) => {\n-                        Some(config::CrateTypeStaticlib)\n-                    }\n-                    Some(ref n) if n.equiv(&(\"bin\")) => Some(config::CrateTypeExecutable),\n-                    Some(_) => {\n-                        session.add_lint(lint::UnknownCrateType,\n-                                         ast::CRATE_NODE_ID,\n-                                         a.span,\n-                                         \"invalid `crate_type` \\\n-                                          value\".to_strbuf());\n-                        None\n-                    }\n-                    _ => {\n-                        session.add_lint(lint::UnknownCrateType,\n-                                         ast::CRATE_NODE_ID,\n-                                         a.span,\n-                                         \"`crate_type` requires a \\\n-                                          value\".to_strbuf());\n-                        None\n-                    }\n-                }\n-            } else {\n-                None\n-            }\n-        });\n-        base.extend(iter);\n+        base.extend(attr_types.move_iter());\n         if base.len() == 0 {\n             base.push(config::CrateTypeExecutable);\n         }"}, {"sha": "679444238085542c49e2e450da2120bb938d6cc9", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -253,7 +253,7 @@ fn is_bench_fn(cx: &TestCtxt, i: @ast::Item) -> bool {\n fn is_ignored(cx: &TestCtxt, i: @ast::Item) -> bool {\n     i.attrs.iter().any(|attr| {\n         // check ignore(cfg(foo, bar))\n-        attr.name().equiv(&(\"ignore\")) && match attr.meta_item_list() {\n+        attr.check_name(\"ignore\") && match attr.meta_item_list() {\n             Some(ref cfgs) => {\n                 attr::test_cfg(cx.config.as_slice(), cfgs.iter().map(|x| *x))\n             }"}, {"sha": "2e3dc360ac29185b142cd07a817cf8c247531a0f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -1447,7 +1447,7 @@ fn synthesize_crate_attrs(ecx: &EncodeContext,\n \n     let mut attrs = Vec::new();\n     for attr in krate.attrs.iter() {\n-        if !attr.name().equiv(&(\"crate_id\")) {\n+        if !attr.check_name(\"crate_id\") {\n             attrs.push(*attr);\n         }\n     }"}, {"sha": "25a0f1510904d811a40bbe16cb455bab18cfbed1", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -293,7 +293,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n      LintSpec {\n          lint: UnusedAttribute,\n          desc: \"detects attributes that were not used by the compiler\",\n-         default: Allow\n+         default: Warn\n     }),\n \n     (\"unused_variable\",\n@@ -1148,8 +1148,38 @@ fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n fn check_unused_attribute(cx: &Context, attrs: &[ast::Attribute]) {\n     for attr in attrs.iter() {\n         // whitelist docs since rustdoc looks at them\n+        attr.check_name(\"automatically_derived\");\n         attr.check_name(\"doc\");\n \n+        // these are processed in trans, which happens after the lint pass\n+        attr.check_name(\"address_insignificant\");\n+        attr.check_name(\"cold\");\n+        attr.check_name(\"inline\");\n+        attr.check_name(\"link\");\n+        attr.check_name(\"link_name\");\n+        attr.check_name(\"link_section\");\n+        attr.check_name(\"no_builtins\");\n+        attr.check_name(\"no_mangle\");\n+        attr.check_name(\"no_split_stack\");\n+        attr.check_name(\"packed\");\n+        attr.check_name(\"static_assert\");\n+        attr.check_name(\"thread_local\");\n+\n+        // not used anywhere (!?) but apparently we want to keep them around\n+        attr.check_name(\"comment\");\n+        attr.check_name(\"desc\");\n+        attr.check_name(\"license\");\n+\n+        // these are only looked at on-demand so we can't guarantee they'll have\n+        // already been checked\n+        attr.check_name(\"deprecated\");\n+        attr.check_name(\"experimental\");\n+        attr.check_name(\"frozen\");\n+        attr.check_name(\"locked\");\n+        attr.check_name(\"must_use\");\n+        attr.check_name(\"stable\");\n+        attr.check_name(\"unstable\");\n+\n         if !attr::is_used(attr) {\n             cx.span_lint(UnusedAttribute, attr.span, \"unused attribute\");\n         }"}, {"sha": "6f3c6e4cd6f397cec5d6723f93cf004fcff8a92c", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -314,17 +314,17 @@ impl Clean<Attribute> for ast::Attribute {\n }\n \n // This is a rough approximation that gets us what we want.\n-impl<'a> attr::AttrMetaMethods for &'a Attribute {\n+impl attr::AttrMetaMethods for Attribute {\n     fn name(&self) -> InternedString {\n-        match **self {\n+        match *self {\n             Word(ref n) | List(ref n, _) | NameValue(ref n, _) => {\n                 token::intern_and_get_ident(n.as_slice())\n             }\n         }\n     }\n \n     fn value_str(&self) -> Option<InternedString> {\n-        match **self {\n+        match *self {\n             NameValue(_, ref v) => {\n                 Some(token::intern_and_get_ident(v.as_slice()))\n             }"}, {"sha": "1d43ac898f1fa63041edadbbec2f7955e4c23487", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -350,9 +350,9 @@ pub fn test_cfg<AM: AttrMetaMethods, It: Iterator<AM>>\n \n     // this would be much nicer as a chain of iterator adaptors, but\n     // this doesn't work.\n-    let some_cfg_matches = metas.any(|mi| {\n+    let some_cfg_matches = metas.fold(false, |matches, mi| {\n         debug!(\"testing name: {}\", mi.name());\n-        if mi.check_name(\"cfg\") { // it is a #[cfg()] attribute\n+        let this_matches = if mi.check_name(\"cfg\") { // it is a #[cfg()] attribute\n             debug!(\"is cfg\");\n             no_cfgs = false;\n              // only #[cfg(...)] ones are understood.\n@@ -380,7 +380,8 @@ pub fn test_cfg<AM: AttrMetaMethods, It: Iterator<AM>>\n             }\n         } else {\n             false\n-        }\n+        };\n+        matches || this_matches\n     });\n     debug!(\"test_cfg (no_cfgs={}, some_cfg_matches={})\", no_cfgs, some_cfg_matches);\n     no_cfgs || some_cfg_matches"}, {"sha": "f7db5c97aab111fec139dbabff50502ad6eeb653", "filename": "src/test/compile-fail/lint-misplaced-attr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -12,9 +12,12 @@\n // injected intrinsics by the compiler.\n \n #![deny(attribute_usage)]\n+#![deny(unused_attribute)]\n \n mod a {\n     #![crate_type = \"bin\"] //~ ERROR: crate-level attribute\n+                           //~^ ERROR: unused attribute\n }\n \n #[crate_type = \"bin\"] fn main() {} //~ ERROR: crate-level attribute\n+                                   //~^ ERROR: unused attribute"}, {"sha": "32058737ed3023e755d9128a759197474420fb1e", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -12,10 +12,13 @@\n // injected intrinsics by the compiler.\n \n #![deny(attribute_usage)]\n+#![deny(unused_attribute)]\n #![allow(dead_code)]\n \n #[abi=\"stdcall\"] extern {} //~ ERROR: obsolete attribute\n+                           //~^ ERROR: unused attribute\n \n #[fixed_stack_segment] fn f() {} //~ ERROR: obsolete attribute\n+                                 //~^ ERROR: unused attribute\n \n fn main() {}"}, {"sha": "32c0722d1ac2609df16a4859f7c349f66c46d1a4", "filename": "src/test/compile-fail/lint-unknown-attr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -12,9 +12,13 @@\n // injected intrinsics by the compiler.\n \n #![deny(attribute_usage)]\n+#![deny(unused_attribute)]\n \n #![mutable_doc] //~ ERROR: unknown crate attribute\n+                //~^ ERROR: unused attribute\n \n #[dance] mod a {} //~ ERROR: unknown attribute\n+                //~^ ERROR: unused attribute\n \n #[dance] fn main() {} //~ ERROR: unknown attribute\n+                //~^ ERROR: unused attribute"}, {"sha": "55ca75b4b7131256a7252a5d57b805a014d1dafa", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![allow(unused_attribute)]\n \n #[foo(bar)]\n mod foo {"}, {"sha": "cf6126a37fa851a188c4cdf41e5302b626fa98c1", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n // ignore-win32 FIXME #13259\n-#![no_uv]\n-\n extern crate native;\n \n use std::os;"}, {"sha": "186fec45c4bb3ab969dee4957a196337454e9ffd", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // pp-exact - Make sure we actually print the attributes\n+#![allow(unused_attribute)]\n \n struct cat {\n     name: StrBuf,"}, {"sha": "6da8123c8c49cc7b58f97adb87be2c0bb629cab9", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![allow(unused_attribute)]\n \n struct cat {\n   name: StrBuf,"}, {"sha": "255f6b1635c1fca81508e3256fd21c2a70ee8ed3", "filename": "src/test/run-pass/issue-3250.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24f98c6d7a1dcf878e13f506d9b164fa54657503/src%2Ftest%2Frun-pass%2Fissue-3250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f98c6d7a1dcf878e13f506d9b164fa54657503/src%2Ftest%2Frun-pass%2Fissue-3250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3250.rs?ref=24f98c6d7a1dcf878e13f506d9b164fa54657503", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[auto_serialize]\n-\n-type t = (uint, uint);\n-\n-pub fn main() { }"}, {"sha": "bf94af601fea0624c7738d1429f546c2ac729df2", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -11,6 +11,7 @@\n // These are attributes of the implicit crate. Really this just needs to parse\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n+#![allow(unused_attribute)]\n #![attr1 = \"val\"]\n #![attr2 = \"val\"]\n #![attr3]"}, {"sha": "c015244d520cee80fc484c3ffc7c75825a028d3c", "filename": "src/test/run-pass/method-attributes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864c5016ae5492da8130bf3c1c2d5ef04b66efa7/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs?ref=864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // pp-exact - Make sure we print all the attributes\n+#![allow(unused_attribute)]\n \n #[frobable]\n trait frobable {"}]}