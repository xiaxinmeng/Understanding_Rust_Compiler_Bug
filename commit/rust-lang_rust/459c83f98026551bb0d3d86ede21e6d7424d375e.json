{"sha": "459c83f98026551bb0d3d86ede21e6d7424d375e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWM4M2Y5ODAyNjU1MWJiMGQzZDg2ZWRlMjFlNmQ3NDI0ZDM3NWU=", "commit": {"author": {"name": "Ngo Iok Ui", "email": "wusyong9104@gmail.com", "date": "2020-11-20T13:49:49Z"}, "committer": {"name": "Ngo Iok Ui", "email": "wusyong9104@gmail.com", "date": "2020-11-20T13:49:49Z"}, "message": "Exhaustively match in variant count instrinsic", "tree": {"sha": "bf8951048b7b7f302b0f36d47868a8b117f9b2fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf8951048b7b7f302b0f36d47868a8b117f9b2fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459c83f98026551bb0d3d86ede21e6d7424d375e", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4q3t44r++8ITffjc7N7wAbpdL1QFAl+3yYQACgkQ7N7wAbpd\nL1QSKhAAhwdZC/neQtheHrHAT4xAPg9XC4l7vVALCwKzRXkd3/Nj1bRzSb4N+x/5\n4UiS2aW2t71ex4KdKK1yvr5UQ9X2+B2xDkRVtJJF8vibFHuqHBwxMKe9qgSdBbqo\nP1QeKAadCxaUA5i0RtrtaxXYNPug08Y9k2UWgNxdln1wfu8pbVYwy6S9wJZ+RUem\noEmad8QZsNFXyodQxzrHD44GiSRIlaRWUAEv/6ncYpAjtXoeEAJuiQxKjL6+MkUn\nq+dLFpuZeV2p8lp7p9076IRXyjWMcGEJixaUYIHmSC/y3garYi4TOQ3s71TUUAY5\nBfcd31dRVFh6pa2a0YqD9kSwanPR/1gXP9XUhNZCqeN67M9hRoDP7jLnRs6RQpkx\nV1izWHpX1QgmfNP/OD8jZ0s17X7nWDkQSdiwmmlMSHVqN3LB2Ffgw4mIlfVAxm1O\n3znZMQ//ANj08j8Ijb+m+00cn/zpK/u4Khd8IN1ZMZ6egLpJpwRKPHZOevN0bgKq\nlfUQwBbhUW4TgQvVSZn0pMh0cDYa6h/laGhVd4+mcS5Y4N30GVzZhtHEUp237Gl4\nKppYf2O7GItr1xDfxcHVoPYqdg6eVzyp5orlDl+OwlrSJbJM/HjvvVwC52X3Z4Nz\noys0GFMbQLo4Of/Y6YPigrqwwCT5J3GLHISm+xZ1Lmc5+hh7dMc=\n=Xtxj\n-----END PGP SIGNATURE-----", "payload": "tree bf8951048b7b7f302b0f36d47868a8b117f9b2fe\nparent 172acf8f61018df3719e42e633ffd62ebecaa1e7\nauthor Ngo Iok Ui <wusyong9104@gmail.com> 1605880189 +0800\ncommitter Ngo Iok Ui <wusyong9104@gmail.com> 1605880189 +0800\n\nExhaustively match in variant count instrinsic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459c83f98026551bb0d3d86ede21e6d7424d375e", "html_url": "https://github.com/rust-lang/rust/commit/459c83f98026551bb0d3d86ede21e6d7424d375e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459c83f98026551bb0d3d86ede21e6d7424d375e/comments", "author": null, "committer": null, "parents": [{"sha": "172acf8f61018df3719e42e633ffd62ebecaa1e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/172acf8f61018df3719e42e633ffd62ebecaa1e7", "html_url": "https://github.com/rust-lang/rust/commit/172acf8f61018df3719e42e633ffd62ebecaa1e7"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "d4857e00d3aa5409c87de02327923539f1fdea9a", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/459c83f98026551bb0d3d86ede21e6d7424d375e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459c83f98026551bb0d3d86ede21e6d7424d375e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=459c83f98026551bb0d3d86ede21e6d7424d375e", "patch": "@@ -75,13 +75,16 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             ensure_monomorphic_enough(tcx, tp_ty)?;\n             ConstValue::from_u64(tcx.type_id_hash(tp_ty))\n         }\n-        sym::variant_count => {\n-            if let ty::Adt(ref adt, _) = tp_ty.kind() {\n-                ConstValue::from_machine_usize(adt.variants.len() as u64, &tcx)\n-            } else {\n-                ConstValue::from_machine_usize(0u64, &tcx)\n-            }\n-        }\n+        sym::variant_count => match tp_ty.kind() {\n+            ty::Adt(ref adt, _) => ConstValue::from_machine_usize(adt.variants.len() as u64, &tcx),\n+            ty::Projection(_)\n+            | ty::Opaque(_, _)\n+            | ty::Param(_)\n+            | ty::Bound(_, _)\n+            | ty::Placeholder(_)\n+            | ty::Infer(_) => throw_inval!(TooGeneric),\n+            _ => ConstValue::from_machine_usize(0u64, &tcx),\n+        },\n         other => bug!(\"`{}` is not a zero arg intrinsic\", other),\n     })\n }"}, {"sha": "58e0c387ffb9c19cd245747a1e31062f715cb835", "filename": "src/test/ui/consts/issue-79137-monomorphic.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/459c83f98026551bb0d3d86ede21e6d7424d375e/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459c83f98026551bb0d3d86ede21e6d7424d375e/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-monomorphic.rs?ref=459c83f98026551bb0d3d86ede21e6d7424d375e", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+// Verify that variant count intrinsic can still evaluate for types like `Option<T>`.\n+\n+#![feature(variant_count)]\n+\n+pub struct GetVariantCount<T>(T);\n+\n+impl<T> GetVariantCount<T> {\n+    pub const VALUE: usize = std::mem::variant_count::<T>();\n+}\n+\n+const fn check_variant_count<T>() -> bool {\n+    matches!(GetVariantCount::<Option<T>>::VALUE, GetVariantCount::<Option<()>>::VALUE)\n+}\n+\n+fn main() {\n+    assert!(check_variant_count::<()>());\n+}"}, {"sha": "b2c62099de5623a0dbf71ce5f5cf6636a0ac3a1f", "filename": "src/test/ui/consts/issue-79137-toogeneric.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/459c83f98026551bb0d3d86ede21e6d7424d375e/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459c83f98026551bb0d3d86ede21e6d7424d375e/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.rs?ref=459c83f98026551bb0d3d86ede21e6d7424d375e", "patch": "@@ -0,0 +1,21 @@\n+// The instrinsic call for variant count should exhaustively match on `tp_ty` and forbid\n+// `ty::Projection`, `ty::Opaque`, `ty::Param`, `ty::Bound`, `ty::Placeholder` and `ty::Infer`\n+// variant. This test checks that it will fail if it's too generic.\n+\n+#![feature(variant_count)]\n+\n+pub struct GetVariantCount<T>(T);\n+\n+impl<T> GetVariantCount<T> {\n+    pub const VALUE: usize = std::mem::variant_count::<T>();\n+}\n+\n+const fn check_variant_count<T>() -> bool {\n+    matches!(GetVariantCount::<T>::VALUE, GetVariantCount::<T>::VALUE)\n+    //~^ ERROR constant pattern depends on a generic parameter\n+    //~| ERROR constant pattern depends on a generic parameter\n+}\n+\n+fn main() {\n+    assert!(check_variant_count::<Option<()>>());\n+}"}, {"sha": "945bfa452c70c14d3148fd3765fe364c4e11bc2b", "filename": "src/test/ui/consts/issue-79137-toogeneric.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/459c83f98026551bb0d3d86ede21e6d7424d375e/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/459c83f98026551bb0d3d86ede21e6d7424d375e/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.stderr?ref=459c83f98026551bb0d3d86ede21e6d7424d375e", "patch": "@@ -0,0 +1,14 @@\n+error: constant pattern depends on a generic parameter\n+  --> $DIR/issue-79137-toogeneric.rs:14:43\n+   |\n+LL |     matches!(GetVariantCount::<T>::VALUE, GetVariantCount::<T>::VALUE)\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: constant pattern depends on a generic parameter\n+  --> $DIR/issue-79137-toogeneric.rs:14:43\n+   |\n+LL |     matches!(GetVariantCount::<T>::VALUE, GetVariantCount::<T>::VALUE)\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}