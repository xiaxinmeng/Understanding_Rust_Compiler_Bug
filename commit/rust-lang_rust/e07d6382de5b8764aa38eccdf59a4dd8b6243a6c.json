{"sha": "e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "node_id": "C_kwDOAAsO6NoAKGUwN2Q2MzgyZGU1Yjg3NjRhYTM4ZWNjZGY1OWE0ZGQ4YjYyNDNhNmM", "commit": {"author": {"name": "ponyii", "email": "ponyii@protonmail.com", "date": "2023-05-08T18:26:50Z"}, "committer": {"name": "ponyii", "email": "ponyii@protonmail.com", "date": "2023-05-10T12:35:48Z"}, "message": "`add_missing_impl_members` no longer breaks indentation", "tree": {"sha": "9f1149b34d67506b7d452fa723b08577e585b751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f1149b34d67506b7d452fa723b08577e585b751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "html_url": "https://github.com/rust-lang/rust/commit/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c/comments", "author": {"login": "ponyii", "id": 25033620, "node_id": "MDQ6VXNlcjI1MDMzNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/25033620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ponyii", "html_url": "https://github.com/ponyii", "followers_url": "https://api.github.com/users/ponyii/followers", "following_url": "https://api.github.com/users/ponyii/following{/other_user}", "gists_url": "https://api.github.com/users/ponyii/gists{/gist_id}", "starred_url": "https://api.github.com/users/ponyii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ponyii/subscriptions", "organizations_url": "https://api.github.com/users/ponyii/orgs", "repos_url": "https://api.github.com/users/ponyii/repos", "events_url": "https://api.github.com/users/ponyii/events{/privacy}", "received_events_url": "https://api.github.com/users/ponyii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ponyii", "id": 25033620, "node_id": "MDQ6VXNlcjI1MDMzNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/25033620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ponyii", "html_url": "https://github.com/ponyii", "followers_url": "https://api.github.com/users/ponyii/followers", "following_url": "https://api.github.com/users/ponyii/following{/other_user}", "gists_url": "https://api.github.com/users/ponyii/gists{/gist_id}", "starred_url": "https://api.github.com/users/ponyii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ponyii/subscriptions", "organizations_url": "https://api.github.com/users/ponyii/orgs", "repos_url": "https://api.github.com/users/ponyii/repos", "events_url": "https://api.github.com/users/ponyii/events{/privacy}", "received_events_url": "https://api.github.com/users/ponyii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0db4781dca403a33fcc9209f71fa1a26387d05c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0db4781dca403a33fcc9209f71fa1a26387d05c", "html_url": "https://github.com/rust-lang/rust/commit/a0db4781dca403a33fcc9209f71fa1a26387d05c"}], "stats": {"total": 110, "additions": 106, "deletions": 4}, "files": [{"sha": "4cc04fff6339bdaa47942cd32788745db917ef1e", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 102, "deletions": 2, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "patch": "@@ -1511,11 +1511,111 @@ fn main() {\n     struct S;\n     impl Tr for S {\n         fn method() {\n-        ${0:todo!()}\n-    }\n+            ${0:todo!()}\n+        }\n     }\n }\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_add_missing_impl_members_indentation() {\n+        // few trait members, no braces\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+mod m {\n+    trait Foo { fn foo(&self); }\n+    struct S;\n+    impl Foo for S$0\n+}\"#,\n+            r#\"\n+mod m {\n+    trait Foo { fn foo(&self); }\n+    struct S;\n+    impl Foo for S {\n+        fn foo(&self) {\n+            ${0:todo!()}\n+        }\n+    }\n+}\"#,\n+        );\n+        // few trait members, empty impl def.\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+mod m {\n+    trait Foo { fn foo(&self); }\n+    struct S;\n+    impl Foo for S { $0 }\n+}\"#,\n+            r#\"\n+mod m {\n+    trait Foo { fn foo(&self); }\n+    struct S;\n+    impl Foo for S {\n+        fn foo(&self) {\n+            ${0:todo!()}\n+        }\n+    }\n+}\"#,\n+        );\n+        // todo - in mod and outside\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+mod m {\n+    trait Foo {\n+        type Output;\n+\n+        const CONST: usize = 42;\n+        const CONST_2: i32;\n+\n+        fn foo(&self);\n+        fn bar(&self);\n+        fn baz(&self);\n+    }\n+\n+    struct S;\n+\n+    impl Foo for S {\n+        fn bar(&self) {}\n+$0\n+    }\n+}\"#,\n+            r#\"\n+mod m {\n+    trait Foo {\n+        type Output;\n+\n+        const CONST: usize = 42;\n+        const CONST_2: i32;\n+\n+        fn foo(&self);\n+        fn bar(&self);\n+        fn baz(&self);\n+    }\n+\n+    struct S;\n+\n+    impl Foo for S {\n+        fn bar(&self) {}\n+\n+        $0type Output;\n+\n+        const CONST_2: i32;\n+\n+        fn foo(&self) {\n+            todo!()\n+        }\n+\n+        fn baz(&self) {\n+            todo!()\n+        }\n+\n+    }\n+}\"#,\n+        );\n+    }\n }"}, {"sha": "1c9d4157cd6679852463b3fb0fd9702ebd5dbdea", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "patch": "@@ -9,7 +9,7 @@ use stdx::format_to;\n use syntax::{\n     ast::{\n         self,\n-        edit::{self, AstNodeEdit},\n+        edit::{AstNodeEdit, IndentLevel},\n         edit_in_place::{AttrsOwnerEdit, Removable},\n         make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n@@ -154,7 +154,7 @@ pub fn add_trait_assoc_items_to_impl(\n         match &item {\n             ast::AssocItem::Fn(fn_) if fn_.body().is_none() => {\n                 let body = make::block_expr(None, Some(make::ext::expr_todo()))\n-                    .indent(edit::IndentLevel(1));\n+                    .indent(IndentLevel::from_node(impl_.syntax()) + 1);\n                 ted::replace(fn_.get_or_create_body().syntax(), body.clone_for_update().syntax())\n             }\n             ast::AssocItem::TypeAlias(type_alias) => {"}, {"sha": "995e8d8d1529009a21968d765652513062243be4", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07d6382de5b8764aa38eccdf59a4dd8b6243a6c/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=e07d6382de5b8764aa38eccdf59a4dd8b6243a6c", "patch": "@@ -465,6 +465,8 @@ impl ast::Impl {\n }\n \n impl ast::AssocItemList {\n+    /// Attention! This function does align the first line of `item` with respect to `self`,\n+    /// but it does _not_ change indentation of other lines (if any).\n     pub fn add_item(&self, item: ast::AssocItem) {\n         let (indent, position, whitespace) = match self.assoc_items().last() {\n             Some(last_item) => ("}]}