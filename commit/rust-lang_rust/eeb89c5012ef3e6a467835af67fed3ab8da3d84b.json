{"sha": "eeb89c5012ef3e6a467835af67fed3ab8da3d84b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYjg5YzUwMTJlZjNlNmE0Njc4MzVhZjY3ZmVkM2FiOGRhM2Q4NGI=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-03T16:27:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-03T23:37:25Z"}, "message": "Solved float, f32 and f64 `to_str_radix()` special value ambiguity.\n\nCalling it on a special value now causes a failure, however `to_str_radix_special()` is provided which can be\nused if those values are expected, and which returns a tupel to allow differentating them.", "tree": {"sha": "3dd73d5a8db05dc8b11e307873f5c75801128d00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dd73d5a8db05dc8b11e307873f5c75801128d00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb89c5012ef3e6a467835af67fed3ab8da3d84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb89c5012ef3e6a467835af67fed3ab8da3d84b", "html_url": "https://github.com/rust-lang/rust/commit/eeb89c5012ef3e6a467835af67fed3ab8da3d84b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb89c5012ef3e6a467835af67fed3ab8da3d84b/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "url": "https://api.github.com/repos/rust-lang/rust/commits/974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "html_url": "https://github.com/rust-lang/rust/commit/974d5ac1e095379d63f546da7b8e9d61f7fdcc76"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "68e7c3c9df26e87a31e25c0462af48ebb6a94f36", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eeb89c5012ef3e6a467835af67fed3ab8da3d84b/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb89c5012ef3e6a467835af67fed3ab8da3d84b/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=eeb89c5012ef3e6a467835af67fed3ab8da3d84b", "patch": "@@ -375,14 +375,36 @@ pub pure fn to_str_hex(num: f32) -> ~str {\n  *\n  * * num - The float value\n  * * radix - The base to use\n+ *\n+ * # Failure\n+ *\n+ * Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n+ * possible misinterpretation of the result at higher bases. If those values\n+ * are expected, use `to_str_radix_special()` instead.\n  */\n #[inline(always)]\n pub pure fn to_str_radix(num: f32, rdx: uint) -> ~str {\n-    let (r, _) = num::to_str_common(\n+    let (r, special) = num::to_str_common(\n         &num, rdx, true, true, num::SignNeg, num::DigAll);\n+    if special { die!(~\"number has a special value, \\\n+                      try to_str_radix_special() if those are expected\") }\n     r\n }\n \n+/**\n+ * Converts a float to a string in a given radix, and a flag indicating\n+ * whether it's a special value\n+ *\n+ * # Arguments\n+ *\n+ * * num - The float value\n+ * * radix - The base to use\n+ */\n+#[inline(always)]\n+pub pure fn to_str_radix_special(num: f32, rdx: uint) -> (~str, bool) {\n+    num::to_str_common(&num, rdx, true, true, num::SignNeg, num::DigAll)\n+}\n+\n /**\n  * Converts a float to a string with exactly the number of\n  * provided significant digits"}, {"sha": "85f44d1b94f8d1b313d30d223b27a650b6d8c398", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eeb89c5012ef3e6a467835af67fed3ab8da3d84b/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb89c5012ef3e6a467835af67fed3ab8da3d84b/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=eeb89c5012ef3e6a467835af67fed3ab8da3d84b", "patch": "@@ -399,14 +399,36 @@ pub pure fn to_str_hex(num: f64) -> ~str {\n  *\n  * * num - The float value\n  * * radix - The base to use\n+ *\n+ * # Failure\n+ *\n+ * Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n+ * possible misinterpretation of the result at higher bases. If those values\n+ * are expected, use `to_str_radix_special()` instead.\n  */\n #[inline(always)]\n pub pure fn to_str_radix(num: f64, rdx: uint) -> ~str {\n-    let (r, _) = num::to_str_common(\n+    let (r, special) = num::to_str_common(\n         &num, rdx, true, true, num::SignNeg, num::DigAll);\n+    if special { die!(~\"number has a special value, \\\n+                      try to_str_radix_special() if those are expected\") }\n     r\n }\n \n+/**\n+ * Converts a float to a string in a given radix, and a flag indicating\n+ * whether it's a special value\n+ *\n+ * # Arguments\n+ *\n+ * * num - The float value\n+ * * radix - The base to use\n+ */\n+#[inline(always)]\n+pub pure fn to_str_radix_special(num: f64, rdx: uint) -> (~str, bool) {\n+    num::to_str_common(&num, rdx, true, true, num::SignNeg, num::DigAll)\n+}\n+\n /**\n  * Converts a float to a string with exactly the number of\n  * provided significant digits"}, {"sha": "32c77174221356aad91041ce8476bb914a88bf51", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eeb89c5012ef3e6a467835af67fed3ab8da3d84b/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb89c5012ef3e6a467835af67fed3ab8da3d84b/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=eeb89c5012ef3e6a467835af67fed3ab8da3d84b", "patch": "@@ -136,14 +136,36 @@ pub pure fn to_str_hex(num: float) -> ~str {\n  *\n  * * num - The float value\n  * * radix - The base to use\n+ *\n+ * # Failure\n+ *\n+ * Fails if called on a special value like `inf`, `-inf` or `NaN` due to\n+ * possible misinterpretation of the result at higher bases. If those values\n+ * are expected, use `to_str_radix_special()` instead.\n  */\n #[inline(always)]\n pub pure fn to_str_radix(num: float, radix: uint) -> ~str {\n-    let (r, _) = num::to_str_common(\n+    let (r, special) = num::to_str_common(\n         &num, radix, true, true, num::SignNeg, num::DigAll);\n+    if special { die!(~\"number has a special value, \\\n+                      try to_str_radix_special() if those are expected\") }\n     r\n }\n \n+/**\n+ * Converts a float to a string in a given radix, and a flag indicating\n+ * whether it's a special value\n+ *\n+ * # Arguments\n+ *\n+ * * num - The float value\n+ * * radix - The base to use\n+ */\n+#[inline(always)]\n+pub pure fn to_str_radix_special(num: float, radix: uint) -> (~str, bool) {\n+    num::to_str_common(&num, radix, true, true, num::SignNeg, num::DigAll)\n+}\n+\n /**\n  * Converts a float to a string with exactly the number of\n  * provided significant digits"}]}