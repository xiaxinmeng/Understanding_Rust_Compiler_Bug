{"sha": "844996b42e27a2dea559ca4a5f78328bb2b22508", "node_id": "C_kwDOAAsO6NoAKDg0NDk5NmI0MmUyN2EyZGVhNTU5Y2E0YTVmNzgzMjhiYjJiMjI1MDg", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-12-04T00:11:40Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-12-04T00:11:40Z"}, "message": "Consider NonNull as a pointer type", "tree": {"sha": "26a4ea93e4f91ed77aa45116670fe4a134458e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a4ea93e4f91ed77aa45116670fe4a134458e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/844996b42e27a2dea559ca4a5f78328bb2b22508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/844996b42e27a2dea559ca4a5f78328bb2b22508", "html_url": "https://github.com/rust-lang/rust/commit/844996b42e27a2dea559ca4a5f78328bb2b22508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/844996b42e27a2dea559ca4a5f78328bb2b22508/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd151def9bd0f58ca6984f4c27144732f6865e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd151def9bd0f58ca6984f4c27144732f6865e0", "html_url": "https://github.com/rust-lang/rust/commit/3cd151def9bd0f58ca6984f4c27144732f6865e0"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "bba542ce8ca7b408a5050963d634052eca559546", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/844996b42e27a2dea559ca4a5f78328bb2b22508/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844996b42e27a2dea559ca4a5f78328bb2b22508/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=844996b42e27a2dea559ca4a5f78328bb2b22508", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::is_lint_allowed;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::{implements_trait, is_copy};\n+use clippy_utils::{is_lint_allowed, match_def_path, paths};\n use rustc_ast::ImplPolarity;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{FieldDef, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n@@ -77,6 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n         // single `AdtDef` may have multiple `Send` impls due to generic\n         // parameters, and the lint is much easier to implement in this way.\n         if_chain! {\n+            if !in_external_macro(cx.tcx.sess, item.span);\n             if let Some(send_trait) = cx.tcx.get_diagnostic_item(sym::Send);\n             if let ItemKind::Impl(hir_impl) = &item.kind;\n             if let Some(trait_ref) = &hir_impl.of_trait;\n@@ -181,7 +183,7 @@ fn ty_allowed_without_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty\n         return true;\n     }\n \n-    if is_copy(cx, ty) && !contains_raw_pointer(cx, ty) {\n+    if is_copy(cx, ty) && !contains_pointer_like(cx, ty) {\n         return true;\n     }\n \n@@ -201,7 +203,7 @@ fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'t\n             .all(|ty| ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)),\n         ty::Array(ty, _) | ty::Slice(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n         ty::Adt(_, substs) => {\n-            if contains_raw_pointer(cx, ty) {\n+            if contains_pointer_like(cx, ty) {\n                 // descends only if ADT contains any raw pointers\n                 substs.iter().all(|generic_arg| match generic_arg.unpack() {\n                     GenericArgKind::Type(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n@@ -218,14 +220,20 @@ fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'t\n     }\n }\n \n-/// Checks if the type contains any raw pointers in substs (including nested ones).\n-fn contains_raw_pointer<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n+/// Checks if the type contains any pointer-like types in substs (including nested ones)\n+fn contains_pointer_like<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n     for ty_node in target_ty.walk(cx.tcx) {\n-        if_chain! {\n-            if let GenericArgKind::Type(inner_ty) = ty_node.unpack();\n-            if let ty::RawPtr(_) = inner_ty.kind();\n-            then {\n-                return true;\n+        if let GenericArgKind::Type(inner_ty) = ty_node.unpack() {\n+            match inner_ty.kind() {\n+                ty::RawPtr(_) => {\n+                    return true;\n+                },\n+                ty::Adt(adt_def, _) => {\n+                    if match_def_path(cx, adt_def.did, &paths::PTR_NON_NULL) {\n+                        return true;\n+                    }\n+                },\n+                _ => (),\n             }\n         }\n     }"}, {"sha": "6171823abbbd04fa7142aecaad1231c654150ff2", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844996b42e27a2dea559ca4a5f78328bb2b22508/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844996b42e27a2dea559ca4a5f78328bb2b22508/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=844996b42e27a2dea559ca4a5f78328bb2b22508", "patch": "@@ -206,3 +206,4 @@ pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n pub const WRITE_MACRO: [&str; 3] = [\"core\", \"macros\", \"write\"];\n #[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n pub const WRITELN_MACRO: [&str; 3] = [\"core\", \"macros\", \"writeln\"];\n+pub const PTR_NON_NULL: [&str; 4] = [\"core\", \"ptr\", \"non_null\", \"NonNull\"];"}, {"sha": "828248d922f890837bd239447d494039eecaff3a", "filename": "tests/ui/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/844996b42e27a2dea559ca4a5f78328bb2b22508/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844996b42e27a2dea559ca4a5f78328bb2b22508/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.rs?ref=844996b42e27a2dea559ca4a5f78328bb2b22508", "patch": "@@ -69,6 +69,11 @@ pub enum MyOption<T> {\n \n unsafe impl<T> Send for MyOption<T> {}\n \n+// Test types that contain `NonNull` instead of raw pointers (#8045)\n+pub struct WrappedNonNull(UnsafeCell<NonNull<()>>);\n+\n+unsafe impl Send for WrappedNonNull {}\n+\n // Multiple type parameters\n pub struct MultiParam<A, B> {\n     vec: Vec<(A, B)>,"}, {"sha": "3c4da36b3e054d04152c285542c622b45013254f", "filename": "tests/ui/non_send_fields_in_send_ty.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/844996b42e27a2dea559ca4a5f78328bb2b22508/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/844996b42e27a2dea559ca4a5f78328bb2b22508/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr?ref=844996b42e27a2dea559ca4a5f78328bb2b22508", "patch": "@@ -103,65 +103,65 @@ LL |     MySome(T),\n    = help: add `T: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `MultiParam<A, B>` are `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:77:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:82:1\n    |\n LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `vec` is `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:74:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:79:5\n    |\n LL |     vec: Vec<(A, B)>,\n    |     ^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameters `A, B` that satisfy `Vec<(A, B)>: Send`\n \n error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:95:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:100:1\n    |\n LL | unsafe impl Send for HeuristicTest {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `field4` is `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:90:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:95:5\n    |\n LL |     field4: (*const NonSend, Rc<u8>),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:114:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:119:1\n    |\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `0` is `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:109:11\n+  --> $DIR/non_send_fields_in_send_ty.rs:114:11\n    |\n LL |     Enum2(T),\n    |           ^\n    = help: add `T: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `Complex<P, u32>` are `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:122:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:127:1\n    |\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `field1` is `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:118:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:123:5\n    |\n LL |     field1: A,\n    |     ^^^^^^^^^\n    = help: add `P: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `Complex<Q, MutexGuard<'static, bool>>` are `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:125:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:130:1\n    |\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `field2` is `!Send`\n-  --> $DIR/non_send_fields_in_send_ty.rs:119:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:124:5\n    |\n LL |     field2: B,\n    |     ^^^^^^^^^"}]}