{"sha": "d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "node_id": "C_kwDOAAsO6NoAKGQ0MTgwNTcwNGQ0YTA3YWM3N2UwYmM1OWVhNWM5MWNkYjY5ZGVhMjY", "commit": {"author": {"name": "Yacin Tmimi", "email": "ytmimi@horizonmedia.com", "date": "2021-10-11T22:30:35Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-10-13T00:37:48Z"}, "message": "Prevent structs with \"..\" from being rewritten with alignment\n\n rustfmt should only support rewriting a struct in an expression\n position with alignment (non-default behavior) when there is no rest\n (with or without a base) and all of the fields are non-shorthand.", "tree": {"sha": "00945d8a92acedc367eb33ee52187fa8bd3087bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00945d8a92acedc367eb33ee52187fa8bd3087bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "html_url": "https://github.com/rust-lang/rust/commit/d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/comments", "author": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b58cce673d6ae4fbc1f3a8d28859bc100a72ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b58cce673d6ae4fbc1f3a8d28859bc100a72ed8", "html_url": "https://github.com/rust-lang/rust/commit/8b58cce673d6ae4fbc1f3a8d28859bc100a72ed8"}], "stats": {"total": 465, "additions": 458, "deletions": 7}, "files": [{"sha": "3a54426b0ddbe137a500b5987e32512e8c32304c", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -1528,12 +1528,12 @@ fn rewrite_struct_lit<'a>(\n     let path_shape = shape.sub_width(2)?;\n     let path_str = rewrite_path(context, PathContext::Expr, None, path, path_shape)?;\n \n-    let has_base = match struct_rest {\n+    let has_base_or_rest = match struct_rest {\n         ast::StructRest::None if fields.is_empty() => return Some(format!(\"{} {{}}\", path_str)),\n         ast::StructRest::Rest(_) if fields.is_empty() => {\n             return Some(format!(\"{} {{ .. }}\", path_str));\n         }\n-        ast::StructRest::Base(_) => true,\n+        ast::StructRest::Rest(_) | ast::StructRest::Base(_) => true,\n         _ => false,\n     };\n \n@@ -1542,7 +1542,7 @@ fn rewrite_struct_lit<'a>(\n \n     let one_line_width = h_shape.map_or(0, |shape| shape.width);\n     let body_lo = context.snippet_provider.span_after(span, \"{\");\n-    let fields_str = if struct_lit_can_be_aligned(fields, has_base)\n+    let fields_str = if struct_lit_can_be_aligned(fields, has_base_or_rest)\n         && context.config.struct_field_align_threshold() > 0\n     {\n         rewrite_with_alignment(\n@@ -1614,10 +1614,7 @@ fn rewrite_struct_lit<'a>(\n             nested_shape,\n             tactic,\n             context,\n-            force_no_trailing_comma\n-                || has_base\n-                || !context.use_block_indent()\n-                || matches!(struct_rest, ast::StructRest::Rest(_)),\n+            force_no_trailing_comma || has_base_or_rest || !context.use_block_indent(),\n         );\n \n         write_list(&item_vec, &fmt)?"}, {"sha": "e55e41bd1a58a377141b9b68e317e5885d96d40d", "filename": "tests/source/issue-4926/deeply_nested_struct.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,35 @@\n+\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X { a: 1_000, b: 1_000, .. }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "516699fa2b8bc0193ef42e3da20201e9959040f7", "filename": "tests/source/issue-4926/deeply_nested_struct_with_long_field_names.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,43 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    really_really_long_field_a: i32,\n+    really_really_really_long_field_b: i32,\n+    really_really_really_really_long_field_c: i32,\n+    really_really_really_really_really_long_field_d: i32,\n+    really_really_really_really_really_really_long_field_e: i32,\n+    f: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        really_really_long_field_a: 10,\n+                                        really_really_really_long_field_b: 10,\n+                                        really_really_really_really_long_field_c: 10,\n+                                        really_really_really_really_really_long_field_d: 10,\n+                                        really_really_really_really_really_really_long_field_e: 10, ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "38fd6f02cf0691e4ca7dd209381fa8a411504aa1", "filename": "tests/source/issue-4926/deeply_nested_struct_with_many_fields.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        a: 1_000, b: 1_000, c: 1_000, d: 1_000, e: 1_000, f: 1_000, g: 1_000, h: 1_000, i: 1_000, j: 1_000, ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "336378537df38a619eb9daa5150929f278fc68d5", "filename": "tests/source/issue-4926/enum_struct_field.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fenum_struct_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fenum_struct_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fenum_struct_field.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-struct_field_align_threshold: 30\n+// rustfmt-enum_discrim_align_threshold: 30\n+// rustfmt-imports_layout: HorizontalVertical\n+\n+#[derive(Default)]\n+struct InnerStructA { bbbbbbbbb: i32, cccccccc: i32 }\n+\n+enum SomeEnumNamedD {\n+    E(InnerStructA),\n+    F {\n+        ggggggggggggggggggggggggg: bool,\n+        h: bool,\n+    }\n+}\n+\n+impl SomeEnumNamedD {\n+    fn f_variant() -> Self {\n+        Self::F { ggggggggggggggggggggggggg: true, h: true }\n+    }\n+}\n+\n+fn main() {\n+    let kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk = SomeEnumNamedD::f_variant();\n+    let something_we_care_about = matches!(\n+        kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,\n+        SomeEnumNamedD::F {\n+            ggggggggggggggggggggggggg: true,\n+            ..\n+        }\n+    );\n+\n+    if something_we_care_about {\n+        println!(\"Yup it happened\");\n+    }\n+}"}, {"sha": "2c3045dea489e0f11698451f9f4bfa0b797cfdfa", "filename": "tests/source/issue-4926/minimum_example.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fminimum_example.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X { a: i32, b: i32 }\n+\n+fn test(x: X) {\n+    let y = matches!(x, X {\n+        a: 1,\n+        ..\n+    });\n+}"}, {"sha": "b8a37f0714ee6030eed7a460f502942087881ca8", "filename": "tests/source/issue-4926/struct_with_long_field_names.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fstruct_with_long_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fstruct_with_long_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fstruct_with_long_field_names.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    really_really_long_field_a: i32,\n+    really_really_really_long_field_b: i32,\n+    really_really_really_really_long_field_c: i32,\n+    really_really_really_really_really_long_field_d: i32,\n+    really_really_really_really_really_really_long_field_e: i32,\n+    f: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(x, X {\n+        really_really_long_field_a: 10,\n+        really_really_really_long_field_b: 10,\n+        really_really_really_really_long_field_c: 10,\n+        really_really_really_really_really_long_field_d: 10,\n+        really_really_really_really_really_really_long_field_e: 10,\n+        ..\n+    });\n+}"}, {"sha": "4adfd3b306296bc176d688373d081af0b82e9f5b", "filename": "tests/source/issue-4926/struct_with_many_fields.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fstruct_with_many_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Fsource%2Fissue-4926%2Fstruct_with_many_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fstruct_with_many_fields.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(x, X {\n+        a: 1_000, b: 1_000, c: 1_000, d: 1_000, e: 1_000, f: 1_000, g: 1_000, h: 1_000, i: 1_000, j: 1_000, ..\n+    });\n+}\n\\ No newline at end of file"}, {"sha": "072cf2f6674a1c81ec8b49a971dfda070eb5ec21", "filename": "tests/target/issue-4926/deeply_nested_struct.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,38 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        a: 1_000,\n+                                        b: 1_000,\n+                                        ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "c7bc7f7296d6b542ac59a9123e196afedb8f5bb6", "filename": "tests/target/issue-4926/deeply_nested_struct_with_long_field_names.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    really_really_long_field_a: i32,\n+    really_really_really_long_field_b: i32,\n+    really_really_really_really_long_field_c: i32,\n+    really_really_really_really_really_long_field_d: i32,\n+    really_really_really_really_really_really_long_field_e: i32,\n+    f: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        really_really_long_field_a: 10,\n+                                        really_really_really_long_field_b: 10,\n+                                        really_really_really_really_long_field_c: 10,\n+                                        really_really_really_really_really_long_field_d: 10,\n+                                        really_really_really_really_really_really_long_field_e: 10,\n+                                        ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "69793162519a7b10a25c3b4a03b0222cb952b8ae", "filename": "tests/target/issue-4926/deeply_nested_struct_with_many_fields.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        a: 1_000,\n+                                        b: 1_000,\n+                                        c: 1_000,\n+                                        d: 1_000,\n+                                        e: 1_000,\n+                                        f: 1_000,\n+                                        g: 1_000,\n+                                        h: 1_000,\n+                                        i: 1_000,\n+                                        j: 1_000,\n+                                        ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "2471df84653c94060ede65396e38935d910363cb", "filename": "tests/target/issue-4926/enum_struct_field.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fenum_struct_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fenum_struct_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fenum_struct_field.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,41 @@\n+// rustfmt-struct_field_align_threshold: 30\n+// rustfmt-enum_discrim_align_threshold: 30\n+// rustfmt-imports_layout: HorizontalVertical\n+\n+#[derive(Default)]\n+struct InnerStructA {\n+    bbbbbbbbb: i32,\n+    cccccccc:  i32,\n+}\n+\n+enum SomeEnumNamedD {\n+    E(InnerStructA),\n+    F {\n+        ggggggggggggggggggggggggg: bool,\n+        h:                         bool,\n+    },\n+}\n+\n+impl SomeEnumNamedD {\n+    fn f_variant() -> Self {\n+        Self::F {\n+            ggggggggggggggggggggggggg: true,\n+            h:                         true,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk = SomeEnumNamedD::f_variant();\n+    let something_we_care_about = matches!(\n+        kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,\n+        SomeEnumNamedD::F {\n+            ggggggggggggggggggggggggg: true,\n+            ..\n+        }\n+    );\n+\n+    if something_we_care_about {\n+        println!(\"Yup it happened\");\n+    }\n+}"}, {"sha": "06e18427465c9070c9eb200dfb0cfb621cac6dfb", "filename": "tests/target/issue-4926/minimum_example.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fminimum_example.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(x, X { a: 1, .. });\n+}"}, {"sha": "ac4674ab5d5207bf74edc56e42f7e0dd17c4c18a", "filename": "tests/target/issue-4926/struct_with_long_field_names.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fstruct_with_long_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fstruct_with_long_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fstruct_with_long_field_names.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,24 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    really_really_long_field_a: i32,\n+    really_really_really_long_field_b: i32,\n+    really_really_really_really_long_field_c: i32,\n+    really_really_really_really_really_long_field_d: i32,\n+    really_really_really_really_really_really_long_field_e: i32,\n+    f: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(\n+        x,\n+        X {\n+            really_really_long_field_a: 10,\n+            really_really_really_long_field_b: 10,\n+            really_really_really_really_long_field_c: 10,\n+            really_really_really_really_really_long_field_d: 10,\n+            really_really_really_really_really_really_long_field_e: 10,\n+            ..\n+        }\n+    );\n+}"}, {"sha": "96dfe14bf7dd1c92c1d35c60cbe0f2af3f293f62", "filename": "tests/target/issue-4926/struct_with_many_fields.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fstruct_with_many_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41805704d4a07ac77e0bc59ea5c91cdb69dea26/tests%2Ftarget%2Fissue-4926%2Fstruct_with_many_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fstruct_with_many_fields.rs?ref=d41805704d4a07ac77e0bc59ea5c91cdb69dea26", "patch": "@@ -0,0 +1,34 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(\n+        x,\n+        X {\n+            a: 1_000,\n+            b: 1_000,\n+            c: 1_000,\n+            d: 1_000,\n+            e: 1_000,\n+            f: 1_000,\n+            g: 1_000,\n+            h: 1_000,\n+            i: 1_000,\n+            j: 1_000,\n+            ..\n+        }\n+    );\n+}"}]}