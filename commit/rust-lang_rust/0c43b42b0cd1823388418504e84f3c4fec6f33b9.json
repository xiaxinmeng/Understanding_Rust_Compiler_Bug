{"sha": "0c43b42b0cd1823388418504e84f3c4fec6f33b9", "node_id": "C_kwDOAAsO6NoAKDBjNDNiNDJiMGNkMTgyMzM4ODQxODUwNGU4NGYzYzRmZWM2ZjMzYjk", "commit": {"author": {"name": "Gijs Burghoorn", "email": "g.burghoorn@gmail.com", "date": "2023-01-04T15:07:33Z"}, "committer": {"name": "Gijs Burghoorn", "email": "g.burghoorn@gmail.com", "date": "2023-01-04T15:07:33Z"}, "message": "Improve include macro documentation", "tree": {"sha": "712d5d8697914d1eeec4c407f7cf2374fba2e2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712d5d8697914d1eeec4c407f7cf2374fba2e2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c43b42b0cd1823388418504e84f3c4fec6f33b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c43b42b0cd1823388418504e84f3c4fec6f33b9", "html_url": "https://github.com/rust-lang/rust/commit/0c43b42b0cd1823388418504e84f3c4fec6f33b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c43b42b0cd1823388418504e84f3c4fec6f33b9/comments", "author": {"login": "coastalwhite", "id": 6944009, "node_id": "MDQ6VXNlcjY5NDQwMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/6944009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coastalwhite", "html_url": "https://github.com/coastalwhite", "followers_url": "https://api.github.com/users/coastalwhite/followers", "following_url": "https://api.github.com/users/coastalwhite/following{/other_user}", "gists_url": "https://api.github.com/users/coastalwhite/gists{/gist_id}", "starred_url": "https://api.github.com/users/coastalwhite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coastalwhite/subscriptions", "organizations_url": "https://api.github.com/users/coastalwhite/orgs", "repos_url": "https://api.github.com/users/coastalwhite/repos", "events_url": "https://api.github.com/users/coastalwhite/events{/privacy}", "received_events_url": "https://api.github.com/users/coastalwhite/received_events", "type": "User", "site_admin": false}, "committer": {"login": "coastalwhite", "id": 6944009, "node_id": "MDQ6VXNlcjY5NDQwMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/6944009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coastalwhite", "html_url": "https://github.com/coastalwhite", "followers_url": "https://api.github.com/users/coastalwhite/followers", "following_url": "https://api.github.com/users/coastalwhite/following{/other_user}", "gists_url": "https://api.github.com/users/coastalwhite/gists{/gist_id}", "starred_url": "https://api.github.com/users/coastalwhite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coastalwhite/subscriptions", "organizations_url": "https://api.github.com/users/coastalwhite/orgs", "repos_url": "https://api.github.com/users/coastalwhite/repos", "events_url": "https://api.github.com/users/coastalwhite/events{/privacy}", "received_events_url": "https://api.github.com/users/coastalwhite/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c18bc6137256693e604a701b7d1bf10e93aaa2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c18bc6137256693e604a701b7d1bf10e93aaa2d", "html_url": "https://github.com/rust-lang/rust/commit/5c18bc6137256693e604a701b7d1bf10e93aaa2d"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "b20e60ad96d17c4886f090aeb990646119c5b647", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0c43b42b0cd1823388418504e84f3c4fec6f33b9/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c43b42b0cd1823388418504e84f3c4fec6f33b9/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=0c43b42b0cd1823388418504e84f3c4fec6f33b9", "patch": "@@ -1312,46 +1312,70 @@ pub(crate) mod builtin {\n             /* compiler built-in */\n         };\n     }\n-\n+    \n     /// Parses a file as an expression or an item according to the context.\n     ///\n-    /// The file is located relative to the current file (similarly to how\n-    /// modules are found). The provided path is interpreted in a platform-specific\n-    /// way at compile time. So, for instance, an invocation with a Windows path\n-    /// containing backslashes `\\` would not compile correctly on Unix.\n-    ///\n-    /// Using this macro is often a bad idea, because if the file is\n-    /// parsed as an expression, it is going to be placed in the\n-    /// surrounding code unhygienically. This could result in variables\n-    /// or functions being different from what the file expected if\n-    /// there are variables or functions that have the same name in\n-    /// the current file.\n+    /// <div class=\"example-wrap\" style=\"display:inline-block\">\n+    /// <pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n+    ///\n+    /// **Warning**: For multi-file Rust projects, the `include!` macro is probably not what you\n+    /// are looking for. Usually, multi-file Rust projects use\n+    /// [modules](https://doc.rust-lang.org/reference/items/modules.html). Multi-file projects and\n+    /// modules are explained in the Rust-by-Example book\n+    /// [here](https://doc.rust-lang.org/rust-by-example/mod/split.html) and the module system is\n+    /// explained in the Rust Book\n+    /// [here](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html).\n+    ///\n+    /// </pre>\n+    /// </div>\n+    /// \n+    /// If the included file is parsed as an expression, it is placed in the surrounding code\n+    /// [unhygienically](https://doc.rust-lang.org/reference/macros-by-example.html#hygiene). This\n+    /// could result in variables or functions being different from what the file expected if there\n+    /// are variables or functions that have the same name in the current file.\n+    /// \n+    /// The included file is located relative to the current file (similarly to how modules are\n+    /// found). The provided path is interpreted in a platform-specific way at compile time. So,\n+    /// for instance, an invocation with a Windows path containing backslashes `\\` would not\n+    /// compile correctly on Unix.\n     ///\n+    /// # Uses\n+    /// \n+    /// The `include!` macro is primarily used for two purposes. It is used to include\n+    /// documentation that is written in a separate file and it is used to include [build artifacts\n+    /// usually as a result from the `build.rs`\n+    /// script](https://doc.rust-lang.org/cargo/reference/build-scripts.html#outputs-of-the-build-script).\n+    ///\n+    /// When using the `include` macro to include stretches of documentation, remember that the\n+    /// included file still needs to be a valid rust syntax. It is also possible to\n+    /// use the [`include_str`] macro as `#![doc = include_str!(\"...\")]` (at the module level) or\n+    /// `#[doc = include_str!(\"...\")]` (at the item level) to include documentation from a plain\n+    /// text or markdown file.\n+    /// \n     /// # Examples\n-    ///\n-    /// Assume there are two files in the same directory with the following\n-    /// contents:\n-    ///\n+    /// \n+    /// Assume there are two files in the same directory with the following contents:\n+    /// \n     /// File 'monkeys.in':\n-    ///\n+    /// \n     /// ```ignore (only-for-syntax-highlight)\n     /// ['\ud83d\ude48', '\ud83d\ude4a', '\ud83d\ude49']\n     ///     .iter()\n     ///     .cycle()\n     ///     .take(6)\n     ///     .collect::<String>()\n     /// ```\n-    ///\n+    /// \n     /// File 'main.rs':\n-    ///\n+    /// \n     /// ```ignore (cannot-doctest-external-file-dependency)\n     /// fn main() {\n     ///     let my_string = include!(\"monkeys.in\");\n     ///     assert_eq!(\"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\", my_string);\n     ///     println!(\"{my_string}\");\n     /// }\n     /// ```\n-    ///\n+    /// \n     /// Compiling 'main.rs' and running the resulting binary will print\n     /// \"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}