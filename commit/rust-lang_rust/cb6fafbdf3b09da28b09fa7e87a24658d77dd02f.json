{"sha": "cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNmZhZmJkZjNiMDlkYTI4YjA5ZmE3ZTg3YTI0NjU4ZDc3ZGQwMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-09T01:04:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-09T01:04:13Z"}, "message": "Auto merge of #58316 - Centril:rollup, r=Centril\n\nRollup of 18 pull requests\n\nSuccessful merges:\n\n - #58091 (Transition compiletest to Rust 2018)\n - #58115 (Transition rustdoc to 2018 edition)\n - #58120 (Transition build_helper to 2018 edition)\n - #58222 (librustc_allocator => 2018)\n - #58233 (librustc_save_analysis => 2018)\n - #58245 (librustc_lint => 2018)\n - #58247 (librustc_passes => 2018)\n - #58251 (Transition librustc_traits to 2018 edition)\n - #58255 (librustc_metadata => 2018)\n - #58256 (librustc_cratesio_shim => 2018)\n - #58257 (librustc_target => 2018)\n - #58259 (librustc_codegen_utils => 2018)\n - #58260 (librustc_borrowck => 2018)\n - #58261 (librustc_incremental => 2018)\n - #58265 (librustc_mir => 2018)\n - #58275 (libcore, liballoc: disable tests in Miri)\n - #58285 (error_index_generator => 2018)\n - #58312 (librustc_data_structures => 2018)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "34623c614c288fc44a9d0b0b6299e8c5652c83e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34623c614c288fc44a9d0b0b6299e8c5652c83e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "html_url": "https://github.com/rust-lang/rust/commit/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc", "html_url": "https://github.com/rust-lang/rust/commit/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc"}, {"sha": "068a9266222ff695e48e4ebeaf7add7ee0367f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/068a9266222ff695e48e4ebeaf7add7ee0367f1d", "html_url": "https://github.com/rust-lang/rust/commit/068a9266222ff695e48e4ebeaf7add7ee0367f1d"}], "stats": {"total": 2709, "additions": 1381, "deletions": 1328}, "files": [{"sha": "04c7820b45665feb9fe465f3936d086dc5b907f7", "filename": "src/build_helper/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fbuild_helper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fbuild_helper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n name = \"build_helper\"\n version = \"0.1.0\"\n authors = [\"The Rust Project Developers\"]\n+edition = \"2018\"\n \n [lib]\n name = \"build_helper\""}, {"sha": "93aa91768121c1f6935d4bb46f40e1073cfd6ead", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rust_2018_idioms)]\n+\n use std::fs::File;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};"}, {"sha": "7c5a8926126e36dd3f63904aa6f9fabdc06a6170", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::any::Any;\n use std::sync::{Arc, Weak};\n use std::cell::RefCell;"}, {"sha": "c1a1c5d88781ffaa0ba7702c4307d66ab97be574", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -282,6 +282,7 @@ fn assert_covariance() {\n //\n // Destructors must be called exactly once per element.\n #[test]\n+#[cfg(not(miri))]\n fn panic_safe() {\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n "}, {"sha": "653b3f5bcb49d7b62d7b57135f9c346a6da80aa6", "filename": "src/liballoc/tests/btree/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n mod map;\n mod set;\n "}, {"sha": "809d2bc094aee7637581454f00cd79f9c35fa6c2", "filename": "src/liballoc/tests/heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fheap.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::alloc::{Global, Alloc, Layout, System};\n \n /// https://github.com/rust-lang/rust/issues/45955"}, {"sha": "1be01d1a7ce1a1bbd279007e260df0651f85b7bf", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::any::Any;\n use std::rc::{Rc, Weak};\n use std::cell::RefCell;"}, {"sha": "2a9fdfa9324d5218f70bdb59102dcd17db627b49", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::cell::Cell;\n use std::cmp::Ordering::{self, Equal, Greater, Less};\n use std::mem;"}, {"sha": "f4e6bc9ea31d5da69d44e8a46861a54d764cc889", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -31,6 +31,7 @@ fn test_rfind() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_collect() {\n     let empty = \"\";\n     let s: String = empty.chars().collect();\n@@ -118,6 +119,7 @@ fn test_concat_for_different_types() {\n #[test]\n fn test_concat_for_different_lengths() {\n     let empty: &[&str] = &[];\n+    #[cfg(not(miri))]\n     test_concat!(\"\", empty);\n     test_concat!(\"a\", [\"a\"]);\n     test_concat!(\"ab\", [\"a\", \"b\"]);\n@@ -146,6 +148,7 @@ fn test_join_for_different_types() {\n #[test]\n fn test_join_for_different_lengths() {\n     let empty: &[&str] = &[];\n+    #[cfg(not(miri))]\n     test_join!(\"\", empty, \"-\");\n     test_join!(\"a\", [\"a\"], \"-\");\n     test_join!(\"a-b\", [\"a\", \"b\"], \"-\");\n@@ -159,13 +162,15 @@ fn test_join_for_different_lengths_with_long_separator() {\n     assert_eq!(\"\uff5e\uff5e\uff5e\uff5e\uff5e\".len(), 15);\n \n     let empty: &[&str] = &[];\n+    #[cfg(not(miri))]\n     test_join!(\"\", empty, \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"a\", [\"a\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"a\uff5e\uff5e\uff5e\uff5e\uff5eb\", [\"a\", \"b\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"\uff5e\uff5e\uff5e\uff5e\uff5ea\uff5e\uff5e\uff5e\uff5e\uff5ebc\", [\"\", \"a\", \"bc\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_unsafe_slice() {\n     assert_eq!(\"ab\", unsafe {\"abc\".get_unchecked(0..2)});\n     assert_eq!(\"bc\", unsafe {\"abc\".get_unchecked(1..3)});\n@@ -238,6 +243,7 @@ fn test_replacen() {\n #[test]\n fn test_replace() {\n     let a = \"a\";\n+    #[cfg(not(miri))]\n     assert_eq!(\"\".replace(a, \"b\"), \"\");\n     assert_eq!(\"a\".replace(a, \"b\"), \"b\");\n     assert_eq!(\"ab\".replace(a, \"b\"), \"bb\");\n@@ -297,6 +303,7 @@ fn test_replace_pattern() {\n // The current implementation of SliceIndex fails to handle methods\n // orthogonally from range types; therefore, it is worth testing\n // all of the indexing operations on each input.\n+#[cfg(not(miri))]\n mod slice_index {\n     // Test a slicing operation **that should succeed,**\n     // testing it on all of the indexing methods.\n@@ -679,6 +686,7 @@ fn test_str_slice_rangetoinclusive_ok() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_str_slice_rangetoinclusive_notok() {\n     let s = \"abc\u03b1\u03b2\u03b3\";\n     &s[..=3];\n@@ -694,6 +702,7 @@ fn test_str_slicemut_rangetoinclusive_ok() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_str_slicemut_rangetoinclusive_notok() {\n     let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n     let s: &mut str = &mut s;\n@@ -883,6 +892,7 @@ fn test_as_bytes() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_as_bytes_fail() {\n     // Don't double free. (I'm not sure if this exercises the\n     // original problem code path anymore.)\n@@ -972,6 +982,7 @@ fn test_split_at_mut() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_split_at_boundscheck() {\n     let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n     s.split_at(1);\n@@ -1066,6 +1077,7 @@ fn test_rev_iterator() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_chars_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(std::char::from_u32) {\n@@ -1077,6 +1089,7 @@ fn test_chars_decoding() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_chars_rev_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(std::char::from_u32) {\n@@ -1306,6 +1319,7 @@ fn test_splitator() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_str_default() {\n     use std::default::Default;\n \n@@ -1365,6 +1379,7 @@ fn test_bool_from_str() {\n     assert_eq!(\"not even a boolean\".parse::<bool>().ok(), None);\n }\n \n+#[cfg(not(miri))]\n fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n     for i in 0..s.len() {\n@@ -1375,6 +1390,7 @@ fn check_contains_all_substrings(s: &str) {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn strslice_issue_16589() {\n     assert!(\"bananas\".contains(\"nana\"));\n \n@@ -1384,13 +1400,15 @@ fn strslice_issue_16589() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn strslice_issue_16878() {\n     assert!(!\"1234567ah012345678901ah\".contains(\"hah\"));\n     assert!(!\"00abc01234567890123456789abc\".contains(\"bcabc\"));\n }\n \n \n #[test]\n+#[cfg(not(miri))]\n fn test_strslice_contains() {\n     let x = \"There are moments, Jeeves, when one asks oneself, 'Do trousers matter?'\";\n     check_contains_all_substrings(x);\n@@ -1528,6 +1546,7 @@ fn trim_ws() {\n \n #[test]\n fn to_lowercase() {\n+    #[cfg(not(miri))]\n     assert_eq!(\"\".to_lowercase(), \"\");\n     assert_eq!(\"A\u00c9\u01c5a\u00e9 \".to_lowercase(), \"a\u00e9\u01c6a\u00e9 \");\n \n@@ -1561,6 +1580,7 @@ fn to_lowercase() {\n \n #[test]\n fn to_uppercase() {\n+    #[cfg(not(miri))]\n     assert_eq!(\"\".to_uppercase(), \"\");\n     assert_eq!(\"a\u00e9\u01c5\u00df\ufb01\u1f80\".to_uppercase(), \"A\u00c9\u01c4SSFI\u1f08\u0399\");\n }\n@@ -1592,6 +1612,7 @@ fn test_cow_from() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_repeat() {\n     assert_eq!(\"\".repeat(3), \"\");\n     assert_eq!(\"abc\".repeat(0), \"\");"}, {"sha": "e6ca54c4088653b9420fe7e055f2c0c05d4003b2", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::borrow::Cow;\n use std::collections::CollectionAllocErr::*;\n use std::mem::size_of;"}, {"sha": "545332bcd6a2f3985c5243bcb08b7f3417e7ce7f", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::borrow::Cow;\n use std::mem::size_of;\n use std::{usize, isize};"}, {"sha": "b47e7c867e675441de41e2bccb9a567e8be8b149", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -108,6 +108,7 @@ fn test_index() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_index_out_of_bounds() {\n     let mut deq = VecDeque::new();\n     for i in 1..4 {\n@@ -906,20 +907,24 @@ fn test_append() {\n     // normal append\n     a.append(&mut b);\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n+    #[cfg(not(miri))]\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), []);\n \n     // append nothing to something\n     a.append(&mut b);\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n+    #[cfg(not(miri))]\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), []);\n \n     // append something to nothing\n     b.append(&mut a);\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n+    #[cfg(not(miri))]\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), []);\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_append_permutations() {\n     fn construct_vec_deque(\n         push_back: usize,\n@@ -1120,6 +1125,7 @@ fn test_reserve_exact_2() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -1221,6 +1227,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "73bdaab5861e6bb3f62a7309f0f9360c0bf696b8", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use core::cell::*;\n use core::default::Default;\n use std::mem::drop;"}, {"sha": "b10b63fc484cb820985485f35cb9201c64503d0b", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n mod builders;\n mod float;\n mod num;"}, {"sha": "bf3039a7e51e8c33c9c503ae48ebfc495fd3d2a0", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n mod sip;\n \n use std::hash::{Hash, Hasher};"}, {"sha": "9b4c78f8d3b024c5c2d78fff3e7e818e909f029a", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -190,6 +190,7 @@ fn test_iterator_step_by() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_iterator_step_by_nth() {\n     let mut it = (0..16).step_by(5);\n     assert_eq!(it.nth(0), Some(0));\n@@ -208,6 +209,7 @@ fn test_iterator_step_by_nth() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_iterator_step_by_nth_overflow() {\n     #[cfg(target_pointer_width = \"8\")]\n     type Bigger = u16;\n@@ -253,12 +255,14 @@ fn test_iterator_step_by_nth_overflow() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_iterator_step_by_zero() {\n     let mut it = (0..).step_by(0);\n     it.next();\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_iterator_step_by_size_hint() {\n     struct StubSizeHint(usize, Option<usize>);\n     impl Iterator for StubSizeHint {\n@@ -1413,6 +1417,7 @@ fn test_rposition() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_rposition_panic() {\n     let v: [(Box<_>, Box<_>); 4] =\n         [(box 0, box 0), (box 0, box 0),\n@@ -1652,6 +1657,7 @@ fn test_range_inclusive_nth() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_range_step() {\n     #![allow(deprecated)]\n \n@@ -1675,13 +1681,15 @@ fn test_range_step() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_step_by_skip() {\n     assert_eq!((0..640).step_by(128).skip(1).collect::<Vec<_>>(), [128, 256, 384, 512]);\n     assert_eq!((0..=50).step_by(10).nth(3), Some(30));\n     assert_eq!((200..=255u8).step_by(10).nth(3), Some(230));\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_range_inclusive_step() {\n     assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);\n     assert_eq!((0..=5).step_by(1).collect::<Vec<_>>(), [0, 1, 2, 3, 4, 5]);"}, {"sha": "ab638e06cc10dbcfc31d65d5c3ed9b4426234763", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use core::convert::{TryFrom, TryInto};\n use core::cmp::PartialEq;\n use core::fmt::Debug;"}, {"sha": "1ba886ce037ee0eaf426c42e6b2b2241abade460", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -69,6 +69,7 @@ fn test_option_dance() {\n }\n \n #[test] #[should_panic]\n+#[cfg(not(miri))]\n fn test_option_too_much_dance() {\n     struct A;\n     let mut y = Some(A);\n@@ -129,13 +130,15 @@ fn test_unwrap() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_unwrap_panic1() {\n     let x: Option<isize> = None;\n     x.unwrap();\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_unwrap_panic2() {\n     let x: Option<String> = None;\n     x.unwrap();"}, {"sha": "5784559082266336e030a0050ac452cd0881ffe0", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use core::ptr::*;\n use core::cell::RefCell;\n "}, {"sha": "7bfd396f68d1700212979c8f6d2c9a217527d99b", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -117,6 +117,7 @@ fn test_unwrap_or_else() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n pub fn test_unwrap_or_else_panic() {\n     fn handler(msg: &'static str) -> isize {\n         if msg == \"I got this.\" {\n@@ -138,6 +139,7 @@ pub fn test_expect_ok() {\n }\n #[test]\n #[should_panic(expected=\"Got expected error: \\\"All good\\\"\")]\n+#[cfg(not(miri))]\n pub fn test_expect_err() {\n     let err: Result<isize, &'static str> = Err(\"All good\");\n     err.expect(\"Got expected error\");\n@@ -151,6 +153,7 @@ pub fn test_expect_err_err() {\n }\n #[test]\n #[should_panic(expected=\"Got expected ok: \\\"All good\\\"\")]\n+#[cfg(not(miri))]\n pub fn test_expect_err_ok() {\n     let err: Result<&'static str, isize> = Ok(\"All good\");\n     err.expect_err(\"Got expected ok\");"}, {"sha": "04d646ea01d038842c2709ce328d633a17fd1f9f", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -782,6 +782,7 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"out of range\")]\n+    #[cfg(not(miri))]\n     fn assert_range_eq_can_fail_by_panic() {\n         assert_range_eq!([0, 1, 2], 0..5, [0, 1, 2]);\n     }\n@@ -791,6 +792,7 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"==\")]\n+    #[cfg(not(miri))]\n     fn assert_range_eq_can_fail_by_inequality() {\n         assert_range_eq!([0, 1, 2], 0..2, [0, 1, 2]);\n     }\n@@ -840,6 +842,7 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n+                #[cfg(not(miri))]\n                 fn index_fail() {\n                     let v = $data;\n                     let v: &[_] = &v;\n@@ -848,6 +851,7 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n+                #[cfg(not(miri))]\n                 fn index_mut_fail() {\n                     let mut v = $data;\n                     let v: &mut [_] = &mut v;\n@@ -1011,6 +1015,7 @@ fn test_rotate_right() {\n \n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n+#[cfg(not(miri))]\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n@@ -1166,6 +1171,7 @@ pub mod memchr {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1181,6 +1187,7 @@ fn test_align_to_simple() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_align_to_zst() {\n     let bytes = [1, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<()>() };\n@@ -1189,6 +1196,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_align_to_non_trivial() {\n     #[repr(align(8))] struct U64(u64, u64);\n     #[repr(align(8))] struct U64U64U32(u64, u64, u32);\n@@ -1200,6 +1208,7 @@ fn test_align_to_non_trivial() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_align_to_empty_mid() {\n     use core::mem;\n \n@@ -1297,6 +1306,7 @@ fn test_copy_within() {\n \n #[test]\n #[should_panic(expected = \"src is out of bounds\")]\n+#[cfg(not(miri))]\n fn test_copy_within_panics_src_too_long() {\n     let mut bytes = *b\"Hello, World!\";\n     // The length is only 13, so 14 is out of bounds.\n@@ -1305,13 +1315,15 @@ fn test_copy_within_panics_src_too_long() {\n \n #[test]\n #[should_panic(expected = \"dest is out of bounds\")]\n+#[cfg(not(miri))]\n fn test_copy_within_panics_dest_too_long() {\n     let mut bytes = *b\"Hello, World!\";\n     // The length is only 13, so a slice of length 4 starting at index 10 is out of bounds.\n     bytes.copy_within(0..4, 10);\n }\n #[test]\n #[should_panic(expected = \"src end is before src start\")]\n+#[cfg(not(miri))]\n fn test_copy_within_panics_src_inverted() {\n     let mut bytes = *b\"Hello, World!\";\n     // 2 is greater than 1, so this range is invalid."}, {"sha": "d39bd06930a36a83eb715a47733384ee5a993d82", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use core::time::Duration;\n \n #[test]"}, {"sha": "cf6c598bfb17b756b89f1119cfffe8a818e68a7f", "filename": "src/librustc_allocator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_allocator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_allocator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_allocator\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "d302e7646d16852ca354d3a62781387ba56681a6", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n+use log::debug;\n use rustc::middle::allocator::AllocatorKind;\n-use rustc_errors;\n-use smallvec::SmallVec;\n+use smallvec::{smallvec, SmallVec};\n use syntax::{\n     ast::{\n         self, Arg, Attribute, Crate, Expr, FnHeader, Generics, Ident, Item, ItemKind,\n@@ -23,7 +23,7 @@ use syntax::{\n };\n use syntax_pos::Span;\n \n-use {AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n+use crate::{AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n \n pub fn modify(\n     sess: &ParseSess,\n@@ -54,7 +54,7 @@ struct ExpandAllocatorDirectives<'a> {\n     in_submod: isize,\n }\n \n-impl<'a> MutVisitor for ExpandAllocatorDirectives<'a> {\n+impl MutVisitor for ExpandAllocatorDirectives<'_> {\n     fn flat_map_item(&mut self, item: P<Item>) -> SmallVec<[P<Item>; 1]> {\n         debug!(\"in submodule {}\", self.in_submod);\n \n@@ -168,7 +168,7 @@ struct AllocFnFactory<'a> {\n     cx: ExtCtxt<'a>,\n }\n \n-impl<'a> AllocFnFactory<'a> {\n+impl AllocFnFactory<'_> {\n     fn allocator_fn(&self, method: &AllocatorMethod) -> P<Item> {\n         let mut abi_args = Vec::new();\n         let mut i = 0;"}, {"sha": "16b9ccfda80107aa09af0258c86dcfdb73ca47a7", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,15 +1,6 @@\n-#![feature(nll)]\n #![feature(rustc_private)]\n \n-#[macro_use] extern crate log;\n-extern crate rustc;\n-extern crate rustc_data_structures;\n-extern crate rustc_errors;\n-extern crate rustc_target;\n-extern crate syntax;\n-extern crate syntax_pos;\n-#[macro_use]\n-extern crate smallvec;\n+#![deny(rust_2018_idioms)]\n \n pub mod expand;\n "}, {"sha": "f293739dec727970f98cce2e10aede9345f4e356", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_borrowck\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_borrowck\"\n@@ -13,8 +14,10 @@ test = false\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-graphviz = { path = \"../libgraphviz\" }\n+# for \"clarity\", rename the graphviz crate to dot; graphviz within `borrowck`\n+# refers to the borrowck-specific graphviz adapter traits.\n+dot = { path = \"../libgraphviz\", package = \"graphviz\" }\n rustc = { path = \"../librustc\" }\n rustc_mir = { path = \"../librustc_mir\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n\\ No newline at end of file\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "f675c8d38a6768d89d312a8d0c3eb56945067625", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -7,10 +7,10 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n \n-use self::UseError::*;\n+use UseError::*;\n \n-use borrowck::*;\n-use borrowck::InteriorKind::{InteriorElement, InteriorField};\n+use crate::borrowck::*;\n+use crate::borrowck::InteriorKind::{InteriorElement, InteriorField};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::expr_use_visitor::MutateMode;\n use rustc::middle::mem_categorization as mc;\n@@ -22,6 +22,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n+use log::debug;\n \n use std::rc::Rc;\n \n@@ -101,7 +102,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {\n \n     fn matched_pat(&mut self,\n                    _matched_pat: &hir::Pat,\n-                   _cmt: &mc::cmt_,\n+                   _cmt: &mc::cmt_<'_>,\n                    _mode: euv::MatchMode) { }\n \n     fn consume_pat(&mut self,\n@@ -910,7 +911,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n     pub fn report_illegal_mutation(&self,\n                                    span: Span,\n                                    loan_path: &LoanPath<'tcx>,\n-                                   loan: &Loan) {\n+                                   loan: &Loan<'_>) {\n         self.bccx.cannot_assign_to_borrowed(\n             span, loan.span, &self.bccx.loan_path_to_string(loan_path), Origin::Ast)\n             .emit();"}, {"sha": "6b050fd9ba2303236c566c9e21f6bff5ab376ea0", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,9 +1,9 @@\n //! Computes moves.\n \n-use borrowck::*;\n-use borrowck::gather_loans::move_error::MovePlace;\n-use borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n-use borrowck::move_data::*;\n+use crate::borrowck::*;\n+use crate::borrowck::gather_loans::move_error::MovePlace;\n+use crate::borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n+use crate::borrowck::move_data::*;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -15,6 +15,7 @@ use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir::*;\n use rustc::hir::Node;\n+use log::debug;\n \n struct GatherMoveInfo<'c, 'tcx: 'c> {\n     id: hir::ItemLocalId,"}, {"sha": "11597455bca8faf1c79908d4bef3fb7f59840e53", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n //! This module implements the check that the lifetime of a borrow\n //! does not exceed the lifetime of the value being borrowed.\n \n-use borrowck::*;\n+use crate::borrowck::*;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -10,6 +10,7 @@ use rustc::ty;\n \n use syntax::ast;\n use syntax_pos::Span;\n+use log::debug;\n \n type R = Result<(),()>;\n "}, {"sha": "c21a43bc68333637fe6368b75ace205aa2455a11", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -6,8 +6,8 @@\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-use borrowck::*;\n-use borrowck::move_data::MoveData;\n+use crate::borrowck::*;\n+use crate::borrowck::move_data::MoveData;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -17,8 +17,9 @@ use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n+use log::debug;\n \n-use self::restrictions::RestrictionResult;\n+use restrictions::RestrictionResult;\n \n mod lifetime;\n mod restrictions;\n@@ -427,7 +428,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         // }\n     }\n \n-    pub fn mark_loan_path_as_mutated(&self, loan_path: &LoanPath) {\n+    pub fn mark_loan_path_as_mutated(&self, loan_path: &LoanPath<'_>) {\n         //! For mutable loans of content whose mutability derives\n         //! from a local variable, mark the mutability decl as necessary.\n "}, {"sha": "622dd8e891ac71b8cb6e77ea5f9ad607fbc9a11b", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use borrowck::BorrowckCtxt;\n+use crate::borrowck::BorrowckCtxt;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::NoteClosureEnv;\n@@ -8,7 +8,8 @@ use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n use syntax::ast;\n use syntax_pos;\n use errors::{DiagnosticBuilder, Applicability};\n-use borrowck::gather_loans::gather_moves::PatternSource;\n+use crate::borrowck::gather_loans::gather_moves::PatternSource;\n+use log::debug;\n \n pub struct MoveErrorCollector<'tcx> {\n     errors: Vec<MoveError<'tcx>>\n@@ -167,10 +168,10 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n     }\n }\n \n-fn note_move_destination(mut err: DiagnosticBuilder,\n+fn note_move_destination(mut err: DiagnosticBuilder<'_>,\n                          move_to_span: syntax_pos::Span,\n                          pat_name: ast::Name,\n-                         is_first_note: bool) -> DiagnosticBuilder {\n+                         is_first_note: bool) -> DiagnosticBuilder<'_> {\n     if is_first_note {\n         err.span_label(\n             move_to_span,"}, {"sha": "9f4c05a6b255f2a5c474d556b788943ac55e6751", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,13 +1,14 @@\n //! Computes the restrictions that result from a borrow.\n \n-use borrowck::*;\n+use crate::borrowck::*;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty;\n use syntax_pos::Span;\n+use log::debug;\n \n-use borrowck::ToInteriorKind;\n+use crate::borrowck::ToInteriorKind;\n \n use std::rc::Rc;\n "}, {"sha": "4ced72cd279b249a8279c33ddea51944038c4c27", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,13 +2,13 @@\n \n #![allow(non_camel_case_types)]\n \n-pub use self::LoanPathKind::*;\n-pub use self::LoanPathElem::*;\n-pub use self::bckerr_code::*;\n-pub use self::AliasableViolationKind::*;\n-pub use self::MovedValueUseKind::*;\n+pub use LoanPathKind::*;\n+pub use LoanPathElem::*;\n+pub use bckerr_code::*;\n+pub use AliasableViolationKind::*;\n+pub use MovedValueUseKind::*;\n \n-use self::InteriorKind::*;\n+use InteriorKind::*;\n \n use rustc::hir::HirId;\n use rustc::hir::Node;\n@@ -37,10 +37,11 @@ use std::hash::{Hash, Hasher};\n use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use log::debug;\n \n use rustc::hir;\n \n-use dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n+use crate::dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n \n pub mod check_loans;\n \n@@ -61,7 +62,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     });\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         borrowck,\n         ..*providers\n@@ -398,7 +399,7 @@ pub enum LoanPathElem<'tcx> {\n }\n \n fn closure_to_block(closure_id: LocalDefId,\n-                    tcx: TyCtxt) -> ast::NodeId {\n+                    tcx: TyCtxt<'_, '_, '_>) -> ast::NodeId {\n     let closure_id = tcx.hir().local_def_id_to_node_id(closure_id);\n     match tcx.hir().get(closure_id) {\n         Node::Expr(expr) => match expr.node {\n@@ -1214,8 +1215,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     }\n \n     fn note_immutability_blame(&self,\n-                               db: &mut DiagnosticBuilder,\n-                               blame: Option<ImmutabilityBlame>,\n+                               db: &mut DiagnosticBuilder<'_>,\n+                               blame: Option<ImmutabilityBlame<'_>>,\n                                error_node_id: ast::NodeId) {\n         match blame {\n             None => {}\n@@ -1271,7 +1272,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n      // binding: either to make the binding mutable (if its type is\n      // not a mutable reference) or to avoid borrowing altogether\n     fn note_immutable_local(&self,\n-                            db: &mut DiagnosticBuilder,\n+                            db: &mut DiagnosticBuilder<'_>,\n                             borrowed_node_id: ast::NodeId,\n                             binding_node_id: ast::NodeId) {\n         let let_span = self.tcx.hir().span(binding_node_id);\n@@ -1349,7 +1350,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn note_and_explain_mutbl_error(&self, db: &mut DiagnosticBuilder, err: &BckError<'a, 'tcx>,\n+    fn note_and_explain_mutbl_error(&self, db: &mut DiagnosticBuilder<'_>, err: &BckError<'a, 'tcx>,\n                                     error_span: &Span) {\n         match err.cmt.note {\n             mc::NoteClosureEnv(upvar_id) | mc::NoteUpvarRef(upvar_id) => {\n@@ -1487,7 +1488,7 @@ impl DataFlowOperator for LoanDataFlowOperator {\n }\n \n impl<'tcx> fmt::Debug for InteriorKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             InteriorField(mc::FieldIndex(_, info)) => write!(f, \"{}\", info),\n             InteriorElement => write!(f, \"[]\"),\n@@ -1496,7 +1497,7 @@ impl<'tcx> fmt::Debug for InteriorKind {\n }\n \n impl<'tcx> fmt::Debug for Loan<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"Loan_{}({:?}, {:?}, {:?}-{:?}, {:?})\",\n                self.index,\n                self.loan_path,\n@@ -1508,7 +1509,7 @@ impl<'tcx> fmt::Debug for Loan<'tcx> {\n }\n \n impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.kind {\n             LpVar(id) => {\n                 write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir().node_to_string(id)))\n@@ -1543,7 +1544,7 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n }\n \n impl<'tcx> fmt::Display for LoanPath<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.kind {\n             LpVar(id) => {\n                 write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir().node_to_user_string(id)))"}, {"sha": "a206c37e97b091687420410ee26c24514ae1105a", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,11 +1,11 @@\n //! Data structures used for tracking moves. Please see the extensive\n //! comments in the section \"Moves and initialization\" in `README.md`.\n \n-pub use self::MoveKind::*;\n+pub use MoveKind::*;\n \n-use dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n+use crate::dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n \n-use borrowck::*;\n+use crate::borrowck::*;\n use rustc::cfg;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n@@ -15,6 +15,7 @@ use std::rc::Rc;\n use std::usize;\n use syntax_pos::Span;\n use rustc::hir;\n+use log::debug;\n \n #[derive(Default)]\n pub struct MoveData<'tcx> {\n@@ -145,7 +146,7 @@ pub struct AssignDataFlowOperator;\n \n pub type AssignDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, AssignDataFlowOperator>;\n \n-fn loan_path_is_precise(loan_path: &LoanPath) -> bool {\n+fn loan_path_is_precise(loan_path: &LoanPath<'_>) -> bool {\n     match loan_path.kind {\n         LpVar(_) | LpUpvar(_) => {\n             true\n@@ -428,8 +429,8 @@ impl<'a, 'tcx> MoveData<'tcx> {\n     /// killed by scoping. See `README.md` for more details.\n     fn add_gen_kills(&self,\n                      bccx: &BorrowckCtxt<'a, 'tcx>,\n-                     dfcx_moves: &mut MoveDataFlow,\n-                     dfcx_assign: &mut AssignDataFlow) {\n+                     dfcx_moves: &mut MoveDataFlow<'_, '_>,\n+                     dfcx_assign: &mut AssignDataFlow<'_, '_>) {\n         for (i, the_move) in self.moves.borrow().iter().enumerate() {\n             dfcx_moves.add_gen(the_move.id, i);\n         }\n@@ -537,7 +538,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                   path: MovePathIndex,\n                   kill_id: hir::ItemLocalId,\n                   kill_kind: KillFrom,\n-                  dfcx_moves: &mut MoveDataFlow) {\n+                  dfcx_moves: &mut MoveDataFlow<'_, '_>) {\n         // We can only perform kills for paths that refer to a unique location,\n         // since otherwise we may kill a move from one location with an\n         // assignment referring to another location."}, {"sha": "60a9c18e95ee9bac025839de33c8a1a3e6e50618", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -7,7 +7,7 @@ use errors::Applicability;\n use std::slice;\n use syntax::ptr::P;\n \n-use borrowck::BorrowckCtxt;\n+use crate::borrowck::BorrowckCtxt;\n \n pub fn check<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, body: &'tcx hir::Body) {\n     let mut used_mut = bccx.used_mut_nodes.borrow().clone();"}, {"sha": "90f33ede62c21714c20b28fd74e8546fe3b9abae", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -10,6 +10,7 @@ use std::io;\n use std::mem;\n use std::usize;\n use syntax::print::pprust::PrintState;\n+use log::debug;\n \n use rustc_data_structures::graph::implementation::OUTGOING;\n \n@@ -80,7 +81,7 @@ pub trait DataFlowOperator : BitwiseOperator {\n     fn initial_value(&self) -> bool;\n }\n \n-struct PropagationContext<'a, 'b: 'a, 'tcx: 'b, O: 'a> {\n+struct PropagationContext<'a, 'b: 'a, 'tcx: 'b, O> {\n     dfcx: &'a mut DataFlowContext<'b, 'tcx, O>,\n     changed: bool\n }\n@@ -99,12 +100,12 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n }\n \n impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O> {\n-    fn nested(&self, state: &mut pprust::State, nested: pprust::Nested) -> io::Result<()> {\n+    fn nested(&self, state: &mut pprust::State<'_>, nested: pprust::Nested) -> io::Result<()> {\n         pprust::PpAnn::nested(self.tcx.hir(), state, nested)\n     }\n     fn pre(&self,\n-           ps: &mut pprust::State,\n-           node: pprust::AnnNode) -> io::Result<()> {\n+           ps: &mut pprust::State<'_>,\n+           node: pprust::AnnNode<'_>) -> io::Result<()> {\n         let id = match node {\n             pprust::AnnNode::Name(_) => return Ok(()),\n             pprust::AnnNode::Expr(expr) => expr.hir_id.local_id,"}, {"sha": "77056d4d3eb1516df86cf751ff23b998618f5ec9", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,16 +2,15 @@\n //! libgraphviz traits, specialized to attaching borrowck analysis\n //! data to rendered labels.\n \n-pub use self::Variant::*;\n+pub use Variant::*;\n \n pub use rustc::cfg::graphviz::{Node, Edge};\n use rustc::cfg::graphviz as cfg_dot;\n \n-use borrowck;\n-use borrowck::{BorrowckCtxt, LoanPath};\n-use dot;\n+use crate::borrowck::{self, BorrowckCtxt, LoanPath};\n+use crate::dataflow::{DataFlowOperator, DataFlowContext, EntryOrExit};\n+use log::debug;\n use rustc::cfg::CFGIndex;\n-use dataflow::{DataFlowOperator, DataFlowContext, EntryOrExit};\n use std::rc::Rc;\n \n #[derive(Debug, Copy, Clone)]\n@@ -53,7 +52,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n         sets\n     }\n \n-    fn dataflow_for_variant(&self, e: EntryOrExit, n: &Node, v: Variant) -> String {\n+    fn dataflow_for_variant(&self, e: EntryOrExit, n: &Node<'_>, v: Variant) -> String {\n         let cfgidx = n.0;\n         match v {\n             Loans   => self.dataflow_loans_for(e, cfgidx),\n@@ -89,7 +88,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n         let dfcx = &self.analysis_data.loans;\n         let loan_index_to_path = |loan_index| {\n             let all_loans = &self.analysis_data.all_loans;\n-            let l: &borrowck::Loan = &all_loans[loan_index];\n+            let l: &borrowck::Loan<'_> = &all_loans[loan_index];\n             l.loan_path()\n         };\n         self.build_set(e, cfgidx, dfcx, loan_index_to_path)"}, {"sha": "cf4669db87e5e9e4450793494a02ad5ef8c7bd5e", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,23 +1,14 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n+#![deny(rust_2018_idioms)]\n \n #![feature(nll)]\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use] extern crate log;\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc_errors as errors;\n-extern crate rustc_data_structures;\n-\n-// for \"clarity\", rename the graphviz crate to dot; graphviz within `borrowck`\n-// refers to the borrowck-specific graphviz adapter traits.\n-extern crate graphviz as dot;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_mir;\n \n pub use borrowck::check_crate;\n pub use borrowck::build_borrowck_dataflow_data_for_fn;"}, {"sha": "5f241eb20fb55a9373554b4bd6e3c12b6ac50fd7", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_codegen_utils\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_codegen_utils\""}, {"sha": "28d7d184228415d7186107417ecc37f68fb92a61", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -29,7 +29,7 @@ use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc_target::spec::Target;\n-use link::out_filename;\n+use crate::link::out_filename;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n@@ -42,8 +42,8 @@ pub trait CodegenBackend {\n     fn diagnostics(&self) -> &[(&'static str, &'static str)] { &[] }\n \n     fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync>;\n-    fn provide(&self, _providers: &mut Providers);\n-    fn provide_extern(&self, _providers: &mut Providers);\n+    fn provide(&self, _providers: &mut Providers<'_>);\n+    fn provide_extern(&self, _providers: &mut Providers<'_>);\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -109,16 +109,16 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         box NoLlvmMetadataLoader\n     }\n \n-    fn provide(&self, providers: &mut Providers) {\n-        ::symbol_names::provide(providers);\n+    fn provide(&self, providers: &mut Providers<'_>) {\n+        crate::symbol_names::provide(providers);\n \n         providers.target_features_whitelist = |_tcx, _cnum| {\n             Default::default() // Just a dummy\n         };\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n         providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());\n     }\n-    fn provide_extern(&self, providers: &mut Providers) {\n+    fn provide_extern(&self, providers: &mut Providers<'_>) {\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n     }\n \n@@ -129,12 +129,12 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n     ) -> Box<dyn Any> {\n         use rustc_mir::monomorphize::item::MonoItem;\n \n-        ::check_for_rustc_errors_attr(tcx);\n-        ::symbol_names_test::report_symbol_names(tcx);\n-        ::rustc_incremental::assert_dep_graph(tcx);\n-        ::rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n+        crate::check_for_rustc_errors_attr(tcx);\n+        crate::symbol_names_test::report_symbol_names(tcx);\n+        rustc_incremental::assert_dep_graph(tcx);\n+        rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n         // FIXME: Fix this\n-        // ::rustc::middle::dependency_format::calculate(tcx);\n+        // rustc::middle::dependency_format::calculate(tcx);\n         let _ = tcx.link_args(LOCAL_CRATE);\n         let _ = tcx.native_libraries(LOCAL_CRATE);\n         let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);"}, {"sha": "2b70141894be98fabd4f743f0cb649f813ec44af", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -14,18 +14,10 @@\n \n #![recursion_limit=\"256\"]\n \n-extern crate flate2;\n-#[macro_use]\n-extern crate log;\n+#![deny(rust_2018_idioms)]\n \n #[macro_use]\n extern crate rustc;\n-extern crate rustc_target;\n-extern crate rustc_metadata;\n-extern crate rustc_mir;\n-extern crate rustc_incremental;\n-extern crate syntax;\n-extern crate syntax_pos;\n #[macro_use] extern crate rustc_data_structures;\n \n use rustc::ty::TyCtxt;\n@@ -40,7 +32,7 @@ pub mod symbol_names_test;\n /// error in codegen. This is used to write compile-fail tests\n /// that actually test that compilation succeeds without\n /// reporting an error.\n-pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n+pub fn check_for_rustc_errors_attr(tcx: TyCtxt<'_, '_, '_>) {\n     if let Some((def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n         if tcx.has_attr(def_id, \"rustc_error\") {\n             tcx.sess.span_fatal(tcx.def_span(def_id), \"compilation successful\");"}, {"sha": "f3a1b219f8a84d1929119f01019d0d253b4f46be", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -41,7 +41,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {\n     let validate = |s: String, span: Option<Span>| {\n-        ::rustc_metadata::validate_crate_name(sess, &s, span);\n+        rustc_metadata::validate_crate_name(sess, &s, span);\n         s\n     };\n "}, {"sha": "8d105853d92f11e12f39da4273894d8738a9fb0c", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -103,10 +103,12 @@ use rustc_mir::monomorphize::Instance;\n \n use syntax_pos::symbol::Symbol;\n \n+use log::debug;\n+\n use std::fmt::Write;\n use std::mem::discriminant;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         def_symbol_name,\n         symbol_name,"}, {"sha": "6bdfbe09354b40530cb730696380e65cfc7fb664", "filename": "src/librustc_cratesio_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_cratesio_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_cratesio_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -15,6 +15,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_cratesio_shim\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n crate-type = [\"dylib\"]"}, {"sha": "4c170f4f5f6f98bec42cd3d87e0d55905e4ad2a2", "filename": "src/librustc_cratesio_shim/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rust_2018_idioms)]\n+\n // See Cargo.toml for a comment explaining this crate.\n #![allow(unused_extern_crates)]\n "}, {"sha": "f781952d4172cc874ac2320663921f8295b1109b", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_data_structures\"\n@@ -16,8 +17,8 @@ serialize = { path = \"../libserialize\" }\n graphviz = { path = \"../libgraphviz\" }\n cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n-rustc-rayon = \"0.1.1\"\n-rustc-rayon-core = \"0.1.1\"\n+rayon = { version = \"0.1.1\", package = \"rustc-rayon\" }\n+rayon-core = { version = \"0.1.1\", package = \"rustc-rayon-core\" }\n rustc-hash = \"1.0.1\"\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n "}, {"sha": "05d2185ae69b406d2a25b2573ace6e44ce9f9660", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use indexed_vec::{Idx, IndexVec};\n+use crate::indexed_vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::fmt;\n use std::iter;\n@@ -208,7 +208,7 @@ impl<T: Idx> SubtractFromBitSet<T> for BitSet<T> {\n }\n \n impl<T: Idx> fmt::Debug for BitSet<T> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         w.debug_list()\n          .entries(self.iter())\n          .finish()\n@@ -366,7 +366,7 @@ impl<T: Idx> SparseBitSet<T> {\n         dense\n     }\n \n-    fn iter(&self) -> slice::Iter<T> {\n+    fn iter(&self) -> slice::Iter<'_, T> {\n         self.elems.iter()\n     }\n }\n@@ -536,7 +536,7 @@ impl<T: Idx> HybridBitSet<T> {\n         }\n     }\n \n-    pub fn iter(&self) -> HybridIter<T> {\n+    pub fn iter(&self) -> HybridIter<'_, T> {\n         match self {\n             HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),\n             HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),"}, {"sha": "c4c0db58012092783c4df0f477847814c9562656", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n+use crate::stable_hasher;\n use std::mem;\n-use stable_hasher;\n use serialize;\n use serialize::opaque::{EncodeResult, Encoder, Decoder};\n \n@@ -70,7 +70,7 @@ impl Fingerprint {\n }\n \n impl ::std::fmt::Display for Fingerprint {\n-    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+    fn fmt(&self, formatter: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }"}, {"sha": "255c5fd7fe7ec8938e266e60c9c51b503d587c51", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -14,12 +14,9 @@ cfg_if! {\n     if #[cfg(unix)] {\n         use std::ffi::{CString, OsStr};\n         use std::os::unix::prelude::*;\n-        use libc;\n \n         #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_type: libc::c_short,\n@@ -35,8 +32,6 @@ cfg_if! {\n \n         #[cfg(target_os = \"freebsd\")]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_start: libc::off_t,\n@@ -53,8 +48,6 @@ cfg_if! {\n                   target_os = \"netbsd\",\n                   target_os = \"openbsd\"))]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_start: libc::off_t,\n@@ -70,8 +63,6 @@ cfg_if! {\n \n         #[cfg(target_os = \"haiku\")]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_type: libc::c_short,\n@@ -87,8 +78,6 @@ cfg_if! {\n \n         #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_start: libc::off_t,\n@@ -104,8 +93,6 @@ cfg_if! {\n \n         #[cfg(target_os = \"solaris\")]\n         mod os {\n-            use libc;\n-\n             #[repr(C)]\n             pub struct flock {\n                 pub l_type: libc::c_short,"}, {"sha": "aaed41d9fa3620e15fb2ebe14ee1462cdbb188e6", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -117,7 +117,7 @@ impl<Node: Idx> Dominators<Node> {\n         self.immediate_dominators[node].unwrap()\n     }\n \n-    pub fn dominators(&self, node: Node) -> Iter<Node> {\n+    pub fn dominators(&self, node: Node) -> Iter<'_, Node> {\n         assert!(self.is_reachable(node), \"node {:?} is not reachable\", node);\n         Iter {\n             dominators: self,\n@@ -136,7 +136,7 @@ impl<Node: Idx> Dominators<Node> {\n     }\n }\n \n-pub struct Iter<'dom, Node: Idx + 'dom> {\n+pub struct Iter<'dom, Node: Idx> {\n     dominators: &'dom Dominators<Node>,\n     node: Option<Node>,\n }\n@@ -171,7 +171,7 @@ impl<Node: Idx> DominatorTree<Node> {\n }\n \n impl<Node: Idx> fmt::Debug for DominatorTree<Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(\n             &DominatorTreeNode {\n                 tree: self,\n@@ -188,7 +188,7 @@ struct DominatorTreeNode<'tree, Node: Idx> {\n }\n \n impl<'tree, Node: Idx> fmt::Debug for DominatorTreeNode<'tree, Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let subtrees: Vec<_> = self.tree\n             .children(self.node)\n             .iter()"}, {"sha": "a8b734094064aa28218985bcdae770194a8a2b15", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -20,10 +20,10 @@\n //! the field `next_edge`). Each of those fields is an array that should\n //! be indexed by the direction (see the type `Direction`).\n \n-use bit_set::BitSet;\n+use crate::bit_set::BitSet;\n+use crate::snapshot_vec::{SnapshotVec, SnapshotVecDelegate};\n use std::fmt::Debug;\n use std::usize;\n-use snapshot_vec::{SnapshotVec, SnapshotVecDelegate};\n \n #[cfg(test)]\n mod tests;\n@@ -212,15 +212,19 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n             .all(|(edge_idx, edge)| f(edge_idx, edge))\n     }\n \n-    pub fn outgoing_edges(&self, source: NodeIndex) -> AdjacentEdges<N, E> {\n+    pub fn outgoing_edges(&self, source: NodeIndex) -> AdjacentEdges<'_, N, E> {\n         self.adjacent_edges(source, OUTGOING)\n     }\n \n-    pub fn incoming_edges(&self, source: NodeIndex) -> AdjacentEdges<N, E> {\n+    pub fn incoming_edges(&self, source: NodeIndex) -> AdjacentEdges<'_, N, E> {\n         self.adjacent_edges(source, INCOMING)\n     }\n \n-    pub fn adjacent_edges(&self, source: NodeIndex, direction: Direction) -> AdjacentEdges<N, E> {\n+    pub fn adjacent_edges(\n+        &self,\n+        source: NodeIndex,\n+        direction: Direction\n+    ) -> AdjacentEdges<'_, N, E> {\n         let first_edge = self.node(source).first_edge[direction.repr];\n         AdjacentEdges {\n             graph: self,\n@@ -291,11 +295,7 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n // # Iterators\n \n-pub struct AdjacentEdges<'g, N, E>\n-where\n-    N: 'g,\n-    E: 'g,\n-{\n+pub struct AdjacentEdges<'g, N, E> {\n     graph: &'g Graph<N, E>,\n     direction: Direction,\n     next: EdgeIndex,\n@@ -331,11 +331,7 @@ impl<'g, N: Debug, E: Debug> Iterator for AdjacentEdges<'g, N, E> {\n     }\n }\n \n-pub struct DepthFirstTraversal<'g, N, E>\n-where\n-    N: 'g,\n-    E: 'g,\n-{\n+pub struct DepthFirstTraversal<'g, N, E> {\n     graph: &'g Graph<N, E>,\n     stack: Vec<NodeIndex>,\n     visited: BitSet<usize>,"}, {"sha": "82c6da3f42711e368232a6ec367422c93a57db6d", "filename": "src/librustc_data_structures/graph/implementation/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Ftests.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use graph::implementation::*;\n+use crate::graph::implementation::*;\n use std::fmt::Debug;\n \n type TestGraph = Graph<&'static str, &'static str>;"}, {"sha": "e3264fda2629c5695ecb0402d10d419978dcf10f", "filename": "src/librustc_data_structures/graph/scc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -3,9 +3,9 @@\n //! node in the graph. This uses Tarjan's algorithm that completes in\n //! O(n) time.\n \n-use fx::FxHashSet;\n-use graph::{DirectedGraph, WithNumNodes, WithSuccessors};\n-use indexed_vec::{Idx, IndexVec};\n+use crate::fx::FxHashSet;\n+use crate::graph::{DirectedGraph, WithNumNodes, WithSuccessors};\n+use crate::indexed_vec::{Idx, IndexVec};\n use std::ops::Range;\n \n mod test;\n@@ -93,7 +93,7 @@ impl<S: Idx> SccData<S> {\n     }\n }\n \n-struct SccsConstruction<'c, G: DirectedGraph + WithNumNodes + WithSuccessors + 'c, S: Idx> {\n+struct SccsConstruction<'c, G: DirectedGraph + WithNumNodes + WithSuccessors, S: Idx> {\n     graph: &'c G,\n \n     /// The state of each node; used during walk to record the stack"}, {"sha": "da3a1ceefe94bc6fbb144253ad7e29f750007f2c", "filename": "src/librustc_data_structures/graph/scc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Ftest.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n #![cfg(test)]\n \n-use graph::test::TestGraph;\n+use crate::graph::test::TestGraph;\n use super::*;\n \n #[test]"}, {"sha": "b390c4195729429b5903c8e933ef0056e77b5703", "filename": "src/librustc_data_structures/graph/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use fx::FxHashMap;\n+use crate::fx::FxHashMap;\n use std::cmp::max;\n use std::slice;\n use std::iter;"}, {"sha": "516ea7fb7d946d405eaf6a519db1a94c8d4b730a", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -257,7 +257,7 @@ macro_rules! newtype_index {\n      @type         [$type:ident]\n      @debug_format [$debug_format:tt]) => (\n         impl ::std::fmt::Debug for $type {\n-            fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n                 write!(fmt, $debug_format, self.as_u32())\n             }\n         }\n@@ -495,7 +495,7 @@ impl<I: Idx, T: serialize::Decodable> serialize::Decodable for IndexVec<I, T> {\n }\n \n impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.raw, fmt)\n     }\n }\n@@ -573,7 +573,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter(&self) -> slice::Iter<T> {\n+    pub fn iter(&self) -> slice::Iter<'_, T> {\n         self.raw.iter()\n     }\n \n@@ -589,7 +589,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter_mut(&mut self) -> slice::IterMut<T> {\n+    pub fn iter_mut(&mut self) -> slice::IterMut<'_, T> {\n         self.raw.iter_mut()\n     }\n "}, {"sha": "08b453cf493f835dd847412d57450c78ee41d380", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -24,23 +24,16 @@\n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]\n \n-extern crate core;\n-extern crate ena;\n+#![deny(rust_2018_idioms)]\n+\n #[macro_use]\n extern crate log;\n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n #[cfg(unix)]\n extern crate libc;\n-extern crate parking_lot;\n #[macro_use]\n extern crate cfg_if;\n-extern crate stable_deref_trait;\n-extern crate rustc_rayon as rayon;\n-extern crate rustc_rayon_core as rayon_core;\n-extern crate rustc_hash;\n-extern crate serialize;\n-extern crate graphviz;\n-extern crate smallvec;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "72551b42324d087dcf7e333904fe12fb6a9e36b0", "filename": "src/librustc_data_structures/obligation_forest/graphviz.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n+use crate::obligation_forest::{ForestObligation, ObligationForest};\n use graphviz as dot;\n-use obligation_forest::{ForestObligation, ObligationForest};\n use std::env::var_os;\n use std::fs::File;\n use std::path::Path;\n@@ -41,22 +41,22 @@ impl<'a, O: ForestObligation + 'a> dot::Labeller<'a> for &'a ObligationForest<O>\n     type Node = usize;\n     type Edge = (usize, usize);\n \n-    fn graph_id(&self) -> dot::Id {\n+    fn graph_id(&self) -> dot::Id<'_> {\n         dot::Id::new(\"trait_obligation_forest\").unwrap()\n     }\n \n-    fn node_id(&self, index: &Self::Node) -> dot::Id {\n+    fn node_id(&self, index: &Self::Node) -> dot::Id<'_> {\n         dot::Id::new(format!(\"obligation_{}\", index)).unwrap()\n     }\n \n-    fn node_label(&self, index: &Self::Node) -> dot::LabelText {\n+    fn node_label(&self, index: &Self::Node) -> dot::LabelText<'_> {\n         let node = &self.nodes[*index];\n         let label = format!(\"{:?} ({:?})\", node.obligation.as_predicate(), node.state.get());\n \n         dot::LabelText::LabelStr(label.into())\n     }\n \n-    fn edge_label(&self, (_index_source, _index_target): &Self::Edge) -> dot::LabelText {\n+    fn edge_label(&self, (_index_source, _index_target): &Self::Edge) -> dot::LabelText<'_> {\n         dot::LabelText::LabelStr(\"\".into())\n     }\n }\n@@ -65,11 +65,11 @@ impl<'a, O: ForestObligation + 'a> dot::GraphWalk<'a> for &'a ObligationForest<O\n     type Node = usize;\n     type Edge = (usize, usize);\n \n-    fn nodes(&self) -> dot::Nodes<Self::Node> {\n+    fn nodes(&self) -> dot::Nodes<'_, Self::Node> {\n         (0..self.nodes.len()).collect()\n     }\n \n-    fn edges(&self) -> dot::Edges<Self::Edge> {\n+    fn edges(&self) -> dot::Edges<'_, Self::Edge> {\n         (0..self.nodes.len())\n             .flat_map(|i| {\n                 let node = &self.nodes[i];"}, {"sha": "546bb64168e1481f3e1bfa67e98277e259871368", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -80,7 +80,7 @@\n //! processing step, we compress the vector to remove completed and error\n //! nodes, which aren't needed anymore.\n \n-use fx::{FxHashMap, FxHashSet};\n+use crate::fx::{FxHashMap, FxHashSet};\n \n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n@@ -733,7 +733,7 @@ impl<O> Node<O> {\n \n // I need a Clone closure\n #[derive(Clone)]\n-struct GetObligation<'a, O: 'a>(&'a [Node<O>]);\n+struct GetObligation<'a, O>(&'a [Node<O>]);\n \n impl<'a, 'b, O> FnOnce<(&'b usize,)> for GetObligation<'a, O> {\n     type Output = &'a O;"}, {"sha": "30e510cc5b055909d8f7ee019fc6aaa59efdad77", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1002,7 +1002,7 @@ impl<O, T: ?Sized> Debug for OwningRef<O, T>\n     where O: Debug,\n           T: Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f,\n                \"OwningRef {{ owner: {:?}, reference: {:?} }}\",\n                self.owner(),\n@@ -1014,7 +1014,7 @@ impl<O, T: ?Sized> Debug for OwningRefMut<O, T>\n     where O: Debug,\n           T: Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f,\n                \"OwningRefMut {{ owner: {:?}, reference: {:?} }}\",\n                self.owner(),\n@@ -1047,7 +1047,7 @@ unsafe impl<O, T: ?Sized> Sync for OwningRefMut<O, T>\n     where O: Sync, for<'a> (&'a mut T): Sync {}\n \n impl Debug for dyn Erased {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"<Erased>\",)\n     }\n }"}, {"sha": "bf3ae2d7af58f77fae0d27e4ad8789856e727429", "filename": "src/librustc_data_structures/ptr_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fptr_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fptr_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fptr_key.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -4,7 +4,7 @@ use std::ops::Deref;\n /// A wrapper around reference that compares and hashes like a pointer.\n /// Can be used as a key in sets/maps indexed by pointers to avoid `unsafe`.\n #[derive(Debug)]\n-pub struct PtrKey<'a, T: 'a>(pub &'a T);\n+pub struct PtrKey<'a, T>(pub &'a T);\n \n impl<'a, T> Clone for PtrKey<'a, T> {\n     fn clone(&self) -> Self { *self }"}, {"sha": "91d6e29237002c28154673ad5e5c79324529c562", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use fx::FxHashMap;\n+use crate::fx::FxHashMap;\n use std::hash::Hash;\n use std::ops;\n use std::mem;"}, {"sha": "1f674c1c664e4cba7927acaf2561e5990f36bf41", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -111,7 +111,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     /// Iterate over elements, sorted by key\n     #[inline]\n-    pub fn iter(&self) -> ::std::slice::Iter<(K, V)> {\n+    pub fn iter(&self) -> ::std::slice::Iter<'_, (K, V)> {\n         self.data.iter()\n     }\n "}, {"sha": "19343a9250df3737530124d4f9c4ba6cc90aebf6", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,9 @@\n use std::hash::{Hash, Hasher, BuildHasher};\n use std::marker::PhantomData;\n use std::mem;\n-use sip128::SipHasher128;\n+use crate::sip128::SipHasher128;\n+use crate::indexed_vec;\n+use crate::bit_set;\n \n /// When hashing something that ends up affecting properties like symbol names,\n /// we want these symbol names to be calculated independently of other factors\n@@ -17,7 +19,7 @@ pub struct StableHasher<W> {\n }\n \n impl<W: StableHasherResult> ::std::fmt::Debug for StableHasher<W> {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         write!(f, \"{:?}\", self.state)\n     }\n }\n@@ -433,7 +435,7 @@ impl<T, CTX> HashStable<CTX> for ::std::mem::Discriminant<T> {\n     }\n }\n \n-impl<I: ::indexed_vec::Idx, T, CTX> HashStable<CTX> for ::indexed_vec::IndexVec<I, T>\n+impl<I: indexed_vec::Idx, T, CTX> HashStable<CTX> for indexed_vec::IndexVec<I, T>\n     where T: HashStable<CTX>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -447,7 +449,7 @@ impl<I: ::indexed_vec::Idx, T, CTX> HashStable<CTX> for ::indexed_vec::IndexVec<\n }\n \n \n-impl<I: ::indexed_vec::Idx, CTX> HashStable<CTX> for ::bit_set::BitSet<I>\n+impl<I: indexed_vec::Idx, CTX> HashStable<CTX> for bit_set::BitSet<I>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,"}, {"sha": "3757f921098f2d5ea13bff1d4968436b7add7ec1", "filename": "src/librustc_data_structures/svh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsvh.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -9,7 +9,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n-use stable_hasher;\n+use crate::stable_hasher;\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct Svh {\n@@ -40,7 +40,7 @@ impl Hash for Svh {\n }\n \n impl fmt::Display for Svh {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(&self.to_string())\n     }\n }"}, {"sha": "ba1f6eb56fe886eec434fcc1c251c0f577f55a3d", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -21,7 +21,7 @@ use std::collections::HashMap;\n use std::hash::{Hash, BuildHasher};\n use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n-use owning_ref::{Erased, OwningRef};\n+use crate::owning_ref::{Erased, OwningRef};\n \n pub fn serial_join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n     where A: FnOnce() -> RA,\n@@ -261,12 +261,12 @@ cfg_if! {\n             }\n \n             #[inline(always)]\n-            pub fn lock(&self) -> LockGuard<T> {\n+            pub fn lock(&self) -> LockGuard<'_, T> {\n                 self.0.lock()\n             }\n \n             #[inline(always)]\n-            pub fn lock_mut(&self) -> LockGuard<T> {\n+            pub fn lock_mut(&self) -> LockGuard<'_, T> {\n                 self.lock()\n             }\n         }\n@@ -490,19 +490,19 @@ impl<T> Lock<T> {\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn try_lock(&self) -> Option<LockGuard<T>> {\n+    pub fn try_lock(&self) -> Option<LockGuard<'_, T>> {\n         self.0.try_lock()\n     }\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn try_lock(&self) -> Option<LockGuard<T>> {\n+    pub fn try_lock(&self) -> Option<LockGuard<'_, T>> {\n         self.0.try_borrow_mut().ok()\n     }\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn lock(&self) -> LockGuard<T> {\n+    pub fn lock(&self) -> LockGuard<'_, T> {\n         if ERROR_CHECKING {\n             self.0.try_lock().expect(\"lock was already held\")\n         } else {\n@@ -512,7 +512,7 @@ impl<T> Lock<T> {\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn lock(&self) -> LockGuard<T> {\n+    pub fn lock(&self) -> LockGuard<'_, T> {\n         self.0.borrow_mut()\n     }\n \n@@ -522,12 +522,12 @@ impl<T> Lock<T> {\n     }\n \n     #[inline(always)]\n-    pub fn borrow(&self) -> LockGuard<T> {\n+    pub fn borrow(&self) -> LockGuard<'_, T> {\n         self.lock()\n     }\n \n     #[inline(always)]\n-    pub fn borrow_mut(&self) -> LockGuard<T> {\n+    pub fn borrow_mut(&self) -> LockGuard<'_, T> {\n         self.lock()\n     }\n }\n@@ -568,13 +568,13 @@ impl<T> RwLock<T> {\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn read(&self) -> ReadGuard<T> {\n+    pub fn read(&self) -> ReadGuard<'_, T> {\n         self.0.borrow()\n     }\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn read(&self) -> ReadGuard<T> {\n+    pub fn read(&self) -> ReadGuard<'_, T> {\n         if ERROR_CHECKING {\n             self.0.try_read().expect(\"lock was already held\")\n         } else {\n@@ -589,25 +589,25 @@ impl<T> RwLock<T> {\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn try_write(&self) -> Result<WriteGuard<T>, ()> {\n+    pub fn try_write(&self) -> Result<WriteGuard<'_, T>, ()> {\n         self.0.try_borrow_mut().map_err(|_| ())\n     }\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn try_write(&self) -> Result<WriteGuard<T>, ()> {\n+    pub fn try_write(&self) -> Result<WriteGuard<'_, T>, ()> {\n         self.0.try_write().ok_or(())\n     }\n \n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n-    pub fn write(&self) -> WriteGuard<T> {\n+    pub fn write(&self) -> WriteGuard<'_, T> {\n         self.0.borrow_mut()\n     }\n \n     #[cfg(parallel_compiler)]\n     #[inline(always)]\n-    pub fn write(&self) -> WriteGuard<T> {\n+    pub fn write(&self) -> WriteGuard<'_, T> {\n         if ERROR_CHECKING {\n             self.0.try_write().expect(\"lock was already held\")\n         } else {\n@@ -621,12 +621,12 @@ impl<T> RwLock<T> {\n     }\n \n     #[inline(always)]\n-    pub fn borrow(&self) -> ReadGuard<T> {\n+    pub fn borrow(&self) -> ReadGuard<'_, T> {\n         self.read()\n     }\n \n     #[inline(always)]\n-    pub fn borrow_mut(&self) -> WriteGuard<T> {\n+    pub fn borrow_mut(&self) -> WriteGuard<'_, T> {\n         self.write()\n     }\n }"}, {"sha": "3d74516d9c326292af58172ff3748d4791d37018", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -123,7 +123,7 @@ impl<T: PartialEq> Element<T> {\n mod test {\n     use super::*;\n     extern crate test;\n-    use self::test::Bencher;\n+    use test::Bencher;\n \n     #[test]\n     fn test_contains_and_insert() {"}, {"sha": "39aed9833607fc6b02a71a6a38af4e3add506e74", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n-use bit_set::BitMatrix;\n-use fx::FxHashMap;\n-use sync::Lock;\n+use crate::bit_set::BitMatrix;\n+use crate::fx::FxHashMap;\n+use crate::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n+use crate::sync::Lock;\n use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n-use stable_hasher::{HashStable, StableHasher, StableHasherResult};\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;"}, {"sha": "c00c707a435427b985b878f6dc53dae387667c51", "filename": "src/librustc_data_structures/vec_linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fvec_linked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fvec_linked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fvec_linked_list.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use indexed_vec::{Idx, IndexVec};\n+use crate::indexed_vec::{Idx, IndexVec};\n \n pub fn iter<Ls>(\n     first: Option<Ls::LinkIndex>,"}, {"sha": "06418b1051ac3ded53ac0c0016a5a4cced31c566", "filename": "src/librustc_data_structures/work_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_data_structures%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fwork_queue.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use bit_set::BitSet;\n-use indexed_vec::Idx;\n+use crate::bit_set::BitSet;\n+use crate::indexed_vec::Idx;\n use std::collections::VecDeque;\n \n /// A work queue is a handy data structure for tracking work left to"}, {"sha": "10b448b7fec3f90f752ee8f26c76d7b158aa1977", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_incremental\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_incremental\""}, {"sha": "b715a32cb0573144b7c88affad90427cf951cf22", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -217,7 +217,7 @@ fn check_paths<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn dump_graph(tcx: TyCtxt) {\n+fn dump_graph(tcx: TyCtxt<'_, '_, '_>) {\n     let path: String = env::var(\"RUST_DEP_GRAPH\").unwrap_or_else(|_| \"dep_graph\".to_string());\n     let query = tcx.dep_graph.query();\n \n@@ -261,11 +261,11 @@ pub struct GraphvizDepGraph<'q>(FxHashSet<&'q DepNode>,\n impl<'a, 'tcx, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> {\n     type Node = &'q DepNode;\n     type Edge = (&'q DepNode, &'q DepNode);\n-    fn nodes(&self) -> dot::Nodes<&'q DepNode> {\n+    fn nodes(&self) -> dot::Nodes<'_, &'q DepNode> {\n         let nodes: Vec<_> = self.0.iter().cloned().collect();\n         nodes.into()\n     }\n-    fn edges(&self) -> dot::Edges<(&'q DepNode, &'q DepNode)> {\n+    fn edges(&self) -> dot::Edges<'_, (&'q DepNode, &'q DepNode)> {\n         self.1[..].into()\n     }\n     fn source(&self, edge: &(&'q DepNode, &'q DepNode)) -> &'q DepNode {\n@@ -279,18 +279,18 @@ impl<'a, 'tcx, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> {\n impl<'a, 'tcx, 'q> dot::Labeller<'a> for GraphvizDepGraph<'q> {\n     type Node = &'q DepNode;\n     type Edge = (&'q DepNode, &'q DepNode);\n-    fn graph_id(&self) -> dot::Id {\n+    fn graph_id(&self) -> dot::Id<'_> {\n         dot::Id::new(\"DependencyGraph\").unwrap()\n     }\n-    fn node_id(&self, n: &&'q DepNode) -> dot::Id {\n+    fn node_id(&self, n: &&'q DepNode) -> dot::Id<'_> {\n         let s: String =\n             format!(\"{:?}\", n).chars()\n                               .map(|c| if c == '_' || c.is_alphanumeric() { c } else { '_' })\n                               .collect();\n         debug!(\"n={:?} s={:?}\", n, s);\n         dot::Id::new(s).unwrap()\n     }\n-    fn node_label(&self, n: &&'q DepNode) -> dot::LabelText {\n+    fn node_label(&self, n: &&'q DepNode) -> dot::LabelText<'_> {\n         dot::LabelText::label(format!(\"{:?}\", n))\n     }\n }"}, {"sha": "346ddaa485804c9914f8cc6fe5c930bf76a36d42", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -7,16 +7,13 @@\n \n #![recursion_limit=\"256\"]\n \n-extern crate graphviz;\n+#![deny(rust_2018_idioms)]\n+\n #[macro_use] extern crate rustc;\n-extern crate rustc_data_structures;\n-extern crate serialize as rustc_serialize;\n-extern crate rand;\n-extern crate rustc_fs_util;\n+#[allow(unused_extern_crates)]\n+extern crate serialize as rustc_serialize; // used by deriving\n \n #[macro_use] extern crate log;\n-extern crate syntax;\n-extern crate syntax_pos;\n \n mod assert_dep_graph;\n pub mod assert_module_sources;"}, {"sha": "9b52199465b5c11c1a22559aaa066e096d0dbced", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -538,7 +538,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'a, 'tcx> {\n ///\n /// Also make sure that the `label` and `except` fields do not\n /// both exist.\n-fn check_config(tcx: TyCtxt, attr: &Attribute) -> bool {\n+fn check_config(tcx: TyCtxt<'_, '_, '_>, attr: &Attribute) -> bool {\n     debug!(\"check_config(attr={:?})\", attr);\n     let config = &tcx.sess.parse_sess.config;\n     debug!(\"check_config: config={:?}\", config);\n@@ -573,7 +573,7 @@ fn check_config(tcx: TyCtxt, attr: &Attribute) -> bool {\n     }\n }\n \n-fn expect_associated_value(tcx: TyCtxt, item: &NestedMetaItem) -> ast::Name {\n+fn expect_associated_value(tcx: TyCtxt<'_, '_, '_>, item: &NestedMetaItem) -> ast::Name {\n     if let Some(value) = item.value_str() {\n         value\n     } else {"}, {"sha": "ecf8bc4a88084680ef977697605c7eab0b0196cf", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -9,7 +9,6 @@ use rustc::util::common::time_ext;\n use rustc_serialize::Decodable as RustcDecodable;\n use rustc_serialize::opaque::Decoder;\n use std::path::Path;\n-use std;\n \n use super::data::*;\n use super::fs::*;"}, {"sha": "3aad4f5abb884330459bda4644db04e0642b7865", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -10,16 +10,16 @@ mod save;\n mod work_product;\n mod file_format;\n \n-pub use self::fs::finalize_session_directory;\n-pub use self::fs::garbage_collect_session_directories;\n-pub use self::fs::in_incr_comp_dir;\n-pub use self::fs::in_incr_comp_dir_sess;\n-pub use self::fs::prepare_session_directory;\n-pub use self::load::dep_graph_tcx_init;\n-pub use self::load::load_dep_graph;\n-pub use self::load::load_query_result_cache;\n-pub use self::load::LoadResult;\n-pub use self::save::save_dep_graph;\n-pub use self::save::save_work_product_index;\n-pub use self::work_product::copy_cgu_workproducts_to_incr_comp_cache_dir;\n-pub use self::work_product::delete_workproduct_files;\n+pub use fs::finalize_session_directory;\n+pub use fs::garbage_collect_session_directories;\n+pub use fs::in_incr_comp_dir;\n+pub use fs::in_incr_comp_dir_sess;\n+pub use fs::prepare_session_directory;\n+pub use load::dep_graph_tcx_init;\n+pub use load::load_dep_graph;\n+pub use load::load_query_result_cache;\n+pub use load::LoadResult;\n+pub use save::save_dep_graph;\n+pub use save::save_work_product_index;\n+pub use work_product::copy_cgu_workproducts_to_incr_comp_cache_dir;\n+pub use work_product::delete_workproduct_files;"}, {"sha": "34fe2f1c25d0445399e81ac60a6e65990c2c854e", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -129,7 +129,7 @@ fn save_in<F>(sess: &Session, path_buf: PathBuf, encode: F)\n     }\n }\n \n-fn encode_dep_graph(tcx: TyCtxt,\n+fn encode_dep_graph(tcx: TyCtxt<'_, '_, '_>,\n                     encoder: &mut Encoder) {\n     // First encode the commandline arguments hash\n     tcx.sess.opts.dep_tracking_hash().encode(encoder).unwrap();\n@@ -234,7 +234,7 @@ fn encode_work_product_index(work_products: &FxHashMap<WorkProductId, WorkProduc\n     serialized_products.encode(encoder).unwrap();\n }\n \n-fn encode_query_cache(tcx: TyCtxt,\n+fn encode_query_cache(tcx: TyCtxt<'_, '_, '_>,\n                       encoder: &mut Encoder) {\n     time(tcx.sess, \"serialize query result cache\", || {\n         tcx.serialize_query_result_cache(encoder).unwrap();"}, {"sha": "3495b27c5ebca6df5fa02c84c8fb660ad523d1de", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n //! This module contains files for saving intermediate work-products.\n \n-use persist::fs::*;\n+use crate::persist::fs::*;\n use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::session::Session;\n use rustc_fs_util::link_or_copy;"}, {"sha": "82f7118df2d0b8369252d3778e133a864b498cba", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_lint\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_lint\""}, {"sha": "cbcc7f3574d03e31ce85de59a60d4617aa3d42ee", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 56, "deletions": 52, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -21,6 +21,7 @@\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::{self, Ty};\n+use rustc::{lint, util};\n use hir::Node;\n use util::nodemap::NodeSet;\n use lint::{LateContext, LintContext, LintArray};\n@@ -42,10 +43,13 @@ use syntax::symbol::keywords;\n use syntax::errors::{Applicability, DiagnosticBuilder};\n use syntax::print::pprust::expr_to_string;\n use syntax::visit::FnKind;\n+use syntax::struct_span_err;\n \n use rustc::hir::{self, GenericParamKind, PatKind};\n \n-use nonstandard_style::{MethodLateContext, method_context};\n+use crate::nonstandard_style::{MethodLateContext, method_context};\n+\n+use log::debug;\n \n // hardwired lints from librustc\n pub use lint::builtin::*;\n@@ -70,7 +74,7 @@ impl LintPass for WhileTrue {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for WhileTrue {\n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n         if let hir::ExprKind::While(ref cond, ..) = e.node {\n             if let hir::ExprKind::Lit(ref lit) = cond.node {\n                 if let ast::LitKind::Bool(true) = lit.node {\n@@ -102,7 +106,7 @@ declare_lint! {\n pub struct BoxPointers;\n \n impl BoxPointers {\n-    fn check_heap_type<'a, 'tcx>(&self, cx: &LateContext, span: Span, ty: Ty) {\n+    fn check_heap_type<'a, 'tcx>(&self, cx: &LateContext<'_, '_>, span: Span, ty: Ty<'_>) {\n         for leaf_ty in ty.walk() {\n             if leaf_ty.is_box() {\n                 let m = format!(\"type uses owned (Box type) pointers: {}\", ty);\n@@ -123,7 +127,7 @@ impl LintPass for BoxPointers {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         match it.node {\n             hir::ItemKind::Fn(..) |\n             hir::ItemKind::Ty(..) |\n@@ -150,7 +154,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n         }\n     }\n \n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n         let ty = cx.tables.node_id_to_type(e.hir_id);\n         self.check_heap_type(cx, e.span, ty);\n     }\n@@ -176,7 +180,7 @@ impl LintPass for NonShorthandFieldPatterns {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n-    fn check_pat(&mut self, cx: &LateContext, pat: &hir::Pat) {\n+    fn check_pat(&mut self, cx: &LateContext<'_, '_>, pat: &hir::Pat) {\n         if let PatKind::Struct(ref qpath, ref field_pats, _) = pat.node {\n             let variant = cx.tables.pat_ty(pat).ty_adt_def()\n                                    .expect(\"struct pattern type is not an ADT\")\n@@ -233,7 +237,7 @@ impl LintPass for UnsafeCode {\n }\n \n impl UnsafeCode {\n-    fn report_unsafe(&self, cx: &EarlyContext, span: Span, desc: &'static str) {\n+    fn report_unsafe(&self, cx: &EarlyContext<'_>, span: Span, desc: &'static str) {\n         // This comes from a macro that has #[allow_internal_unsafe].\n         if span.allows_unsafe() {\n             return;\n@@ -244,15 +248,15 @@ impl UnsafeCode {\n }\n \n impl EarlyLintPass for UnsafeCode {\n-    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n+    fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         if attr.check_name(\"allow_internal_unsafe\") {\n             self.report_unsafe(cx, attr.span, \"`allow_internal_unsafe` allows defining \\\n                                                macros using unsafe without triggering \\\n                                                the `unsafe_code` lint at their call site\");\n         }\n     }\n \n-    fn check_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         if let ast::ExprKind::Block(ref blk, _) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n             if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n@@ -261,7 +265,7 @@ impl EarlyLintPass for UnsafeCode {\n         }\n     }\n \n-    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         match it.node {\n             ast::ItemKind::Trait(_, ast::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"declaration of an `unsafe` trait\")\n@@ -276,8 +280,8 @@ impl EarlyLintPass for UnsafeCode {\n     }\n \n     fn check_fn(&mut self,\n-                cx: &EarlyContext,\n-                fk: FnKind,\n+                cx: &EarlyContext<'_>,\n+                fk: FnKind<'_>,\n                 _: &ast::FnDecl,\n                 span: Span,\n                 _: ast::NodeId) {\n@@ -296,7 +300,7 @@ impl EarlyLintPass for UnsafeCode {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &EarlyContext, item: &ast::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &EarlyContext<'_>, item: &ast::TraitItem) {\n         if let ast::TraitItemKind::Method(ref sig, None) = item.node {\n             if sig.header.unsafety == ast::Unsafety::Unsafe {\n                 self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n@@ -354,7 +358,7 @@ impl MissingDoc {\n     }\n \n     fn check_missing_docs_attrs(&self,\n-                                cx: &LateContext,\n+                                cx: &LateContext<'_, '_>,\n                                 id: Option<ast::NodeId>,\n                                 attrs: &[ast::Attribute],\n                                 sp: Span,\n@@ -399,7 +403,7 @@ impl LintPass for MissingDoc {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n-    fn enter_lint_attrs(&mut self, _: &LateContext, attrs: &[ast::Attribute]) {\n+    fn enter_lint_attrs(&mut self, _: &LateContext<'_, '_>, attrs: &[ast::Attribute]) {\n         let doc_hidden = self.doc_hidden() ||\n                          attrs.iter().any(|attr| {\n             attr.check_name(\"doc\") &&\n@@ -411,11 +415,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.doc_hidden_stack.push(doc_hidden);\n     }\n \n-    fn exit_lint_attrs(&mut self, _: &LateContext, _attrs: &[ast::Attribute]) {\n+    fn exit_lint_attrs(&mut self, _: &LateContext<'_, '_>, _attrs: &[ast::Attribute]) {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, krate: &hir::Crate) {\n         self.check_missing_docs_attrs(cx, None, &krate.attrs, krate.span, \"crate\");\n \n         for macro_def in &krate.exported_macros {\n@@ -428,7 +432,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         let desc = match it.node {\n             hir::ItemKind::Fn(..) => \"a function\",\n             hir::ItemKind::Mod(..) => \"a module\",\n@@ -473,7 +477,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, Some(it.id), &it.attrs, it.span, desc);\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext, trait_item: &hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, trait_item: &hir::TraitItem) {\n         if self.private_traits.contains(&trait_item.id) {\n             return;\n         }\n@@ -491,7 +495,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                                       desc);\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext, impl_item: &hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, impl_item: &hir::ImplItem) {\n         // If the method is an impl for a trait, don't doc.\n         if method_context(cx, impl_item.id) == MethodLateContext::TraitImpl {\n             return;\n@@ -510,7 +514,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                                       desc);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext, sf: &hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, sf: &hir::StructField) {\n         if !sf.is_positional() {\n             self.check_missing_docs_attrs(cx,\n                                           Some(sf.id),\n@@ -520,7 +524,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         }\n     }\n \n-    fn check_variant(&mut self, cx: &LateContext, v: &hir::Variant, _: &hir::Generics) {\n+    fn check_variant(&mut self, cx: &LateContext<'_, '_>, v: &hir::Variant, _: &hir::Generics) {\n         self.check_missing_docs_attrs(cx,\n                                       Some(v.node.data.id()),\n                                       &v.node.attrs,\n@@ -549,7 +553,7 @@ impl LintPass for MissingCopyImplementations {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n-    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n         if !cx.access_levels.is_reachable(item.id) {\n             return;\n         }\n@@ -620,7 +624,7 @@ impl LintPass for MissingDebugImplementations {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n-    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n         if !cx.access_levels.is_reachable(item.id) {\n             return;\n         }\n@@ -681,7 +685,7 @@ impl LintPass for AnonymousParameters {\n }\n \n impl EarlyLintPass for AnonymousParameters {\n-    fn check_trait_item(&mut self, cx: &EarlyContext, it: &ast::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::TraitItem) {\n         match it.node {\n             ast::TraitItemKind::Method(ref sig, _) => {\n                 for arg in sig.decl.inputs.iter() {\n@@ -749,7 +753,7 @@ impl LintPass for DeprecatedAttr {\n }\n \n impl EarlyLintPass for DeprecatedAttr {\n-    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n+    fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         for &&(n, _, _, ref g) in &self.depr_attrs {\n             if attr.name() == n {\n                 if let &AttributeGate::Gated(Stability::Deprecated(link, suggestion),\n@@ -804,15 +808,15 @@ impl UnusedDocComment {\n }\n \n impl EarlyLintPass for UnusedDocComment {\n-    fn check_local(&mut self, cx: &EarlyContext, decl: &ast::Local) {\n+    fn check_local(&mut self, cx: &EarlyContext<'_>, decl: &ast::Local) {\n         self.warn_if_doc(decl.attrs.iter(), cx);\n     }\n \n-    fn check_arm(&mut self, cx: &EarlyContext, arm: &ast::Arm) {\n+    fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n         self.warn_if_doc(arm.attrs.iter(), cx);\n     }\n \n-    fn check_expr(&mut self, cx: &EarlyContext, expr: &ast::Expr) {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         self.warn_if_doc(expr.attrs.iter(), cx);\n     }\n }\n@@ -837,7 +841,7 @@ impl LintPass for PluginAsLibrary {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         if cx.tcx.plugin_registrar_fn(LOCAL_CRATE).is_some() {\n             // We're compiling a plugin; it's fine to link other plugins.\n             return;\n@@ -894,7 +898,7 @@ impl LintPass for InvalidNoMangleItems {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         match it.node {\n             hir::ItemKind::Fn(.., ref generics, _) => {\n                 if let Some(no_mangle_attr) = attr::find_by_name(&it.attrs, \"no_mangle\") {\n@@ -968,7 +972,7 @@ impl LintPass for MutableTransmutes {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n-    fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &hir::Expr) {\n         use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n         let msg = \"mutating transmuted &mut T from &T may cause undefined behavior, \\\n@@ -1004,7 +1008,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n             None\n         }\n \n-        fn def_id_is_transmute(cx: &LateContext, def_id: DefId) -> bool {\n+        fn def_id_is_transmute(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n             cx.tcx.fn_sig(def_id).abi() == RustIntrinsic &&\n             cx.tcx.item_name(def_id) == \"transmute\"\n         }\n@@ -1032,7 +1036,7 @@ impl LintPass for UnstableFeatures {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnstableFeatures {\n-    fn check_attribute(&mut self, ctx: &LateContext, attr: &ast::Attribute) {\n+    fn check_attribute(&mut self, ctx: &LateContext<'_, '_>, attr: &ast::Attribute) {\n         if attr.check_name(\"feature\") {\n             if let Some(items) = attr.meta_item_list() {\n                 for item in items {\n@@ -1063,7 +1067,7 @@ impl LintPass for UnionsWithDropFields {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n-    fn check_item(&mut self, ctx: &LateContext, item: &hir::Item) {\n+    fn check_item(&mut self, ctx: &LateContext<'_, '_>, item: &hir::Item) {\n         if let hir::ItemKind::Union(ref vdata, _) = item.node {\n             for field in vdata.fields() {\n                 let field_ty = ctx.tcx.type_of(ctx.tcx.hir().local_def_id(field.id));\n@@ -1099,7 +1103,7 @@ impl LintPass for UnreachablePub {\n }\n \n impl UnreachablePub {\n-    fn perform_lint(&self, cx: &LateContext, what: &str, id: ast::NodeId,\n+    fn perform_lint(&self, cx: &LateContext<'_, '_>, what: &str, id: ast::NodeId,\n                     vis: &hir::Visibility, span: Span, exportable: bool) {\n         let mut applicability = Applicability::MachineApplicable;\n         match vis.node {\n@@ -1134,20 +1138,20 @@ impl UnreachablePub {\n \n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n-    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n         self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true);\n     }\n \n-    fn check_foreign_item(&mut self, cx: &LateContext, foreign_item: &hir::ForeignItem) {\n+    fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, foreign_item: &hir::ForeignItem) {\n         self.perform_lint(cx, \"item\", foreign_item.id, &foreign_item.vis,\n                           foreign_item.span, true);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext, field: &hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &hir::StructField) {\n         self.perform_lint(cx, \"field\", field.id, &field.vis, field.span, false);\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext, impl_item: &hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, impl_item: &hir::ImplItem) {\n         self.perform_lint(cx, \"item\", impl_item.id, &impl_item.vis, impl_item.span, false);\n     }\n }\n@@ -1193,7 +1197,7 @@ impl TypeAliasBounds {\n         }\n     }\n \n-    fn suggest_changing_assoc_types(ty: &hir::Ty, err: &mut DiagnosticBuilder) {\n+    fn suggest_changing_assoc_types(ty: &hir::Ty, err: &mut DiagnosticBuilder<'_>) {\n         // Access to associates types should use `<T as Bound>::Assoc`, which does not need a\n         // bound.  Let's see if this type does that.\n \n@@ -1225,7 +1229,7 @@ impl TypeAliasBounds {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n-    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n         let (ty, type_alias_generics) = match item.node {\n             hir::ItemKind::Ty(ref ty, ref generics) => (&*ty, generics),\n             _ => return,\n@@ -1281,7 +1285,7 @@ impl LintPass for UnusedBrokenConst {\n         lint_array!()\n     }\n }\n-fn check_const(cx: &LateContext, body_id: hir::BodyId) {\n+fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n     let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n     let is_static = cx.tcx.is_static(def_id).is_some();\n     let param_env = if is_static {\n@@ -1299,7 +1303,7 @@ fn check_const(cx: &LateContext, body_id: hir::BodyId) {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         match it.node {\n             hir::ItemKind::Const(_, body_id) => {\n                 check_const(cx, body_id);\n@@ -1429,7 +1433,7 @@ impl LintPass for EllipsisInclusiveRangePatterns {\n }\n \n impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n-    fn check_pat(&mut self, cx: &EarlyContext, pat: &ast::Pat, visit_subpats: &mut bool) {\n+    fn check_pat(&mut self, cx: &EarlyContext<'_>, pat: &ast::Pat, visit_subpats: &mut bool) {\n         use self::ast::{PatKind, RangeEnd, RangeSyntax::DotDotDot};\n \n         /// If `pat` is a `...` pattern, return the start and end of the range, as well as the span\n@@ -1507,7 +1511,7 @@ impl LintPass for UnnameableTestItems {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         if self.items_nameable {\n             if let hir::ItemKind::Mod(..) = it.node {}\n             else {\n@@ -1526,7 +1530,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n         }\n     }\n \n-    fn check_item_post(&mut self, _cx: &LateContext, it: &hir::Item) {\n+    fn check_item_post(&mut self, _cx: &LateContext<'_, '_>, it: &hir::Item) {\n         if !self.items_nameable && self.boundary == it.id {\n             self.items_nameable = true;\n         }\n@@ -1554,7 +1558,7 @@ impl LintPass for KeywordIdents {\n }\n \n impl KeywordIdents {\n-    fn check_tokens(&mut self, cx: &EarlyContext, tokens: TokenStream) {\n+    fn check_tokens(&mut self, cx: &EarlyContext<'_>, tokens: TokenStream) {\n         for tt in tokens.into_trees() {\n             match tt {\n                 TokenTree::Token(span, tok) => match tok.ident() {\n@@ -1576,13 +1580,13 @@ impl KeywordIdents {\n }\n \n impl EarlyLintPass for KeywordIdents {\n-    fn check_mac_def(&mut self, cx: &EarlyContext, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n+    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n         self.check_tokens(cx, mac_def.stream());\n     }\n-    fn check_mac(&mut self, cx: &EarlyContext, mac: &ast::Mac) {\n+    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n         self.check_tokens(cx, mac.node.tts.clone().into());\n     }\n-    fn check_ident(&mut self, cx: &EarlyContext, ident: ast::Ident) {\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n         let ident_str = &ident.as_str()[..];\n         let cur_edition = cx.sess.edition();\n         let is_raw_ident = |ident: ast::Ident| {\n@@ -1665,7 +1669,7 @@ impl LintPass for ExplicitOutlivesRequirements {\n impl ExplicitOutlivesRequirements {\n     fn collect_outlives_bound_spans(\n         &self,\n-        cx: &LateContext,\n+        cx: &LateContext<'_, '_>,\n         item_def_id: DefId,\n         param_name: &str,\n         bounds: &hir::GenericBounds,"}, {"sha": "3165673111cca008363c69ef5425f4ffeec33c60", "filename": "src/librustc_lint/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fdiagnostics.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,3 +1,5 @@\n+use syntax::{register_diagnostic, register_diagnostics};\n+\n register_diagnostics! {\n     E0721, // `await` keyword\n }"}, {"sha": "6e5988f24382206cb36256e29439385adb1773fe", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -19,15 +19,10 @@\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use]\n-extern crate syntax;\n+#![deny(rust_2018_idioms)]\n+\n #[macro_use]\n extern crate rustc;\n-#[macro_use]\n-extern crate log;\n-extern crate rustc_target;\n-extern crate syntax_pos;\n-extern crate rustc_data_structures;\n \n mod diagnostics;\n mod nonstandard_style;\n@@ -49,7 +44,6 @@ use rustc::lint::builtin::{\n     parser::ILL_FORMED_ATTRIBUTE_INPUT,\n };\n use rustc::session;\n-use rustc::util;\n use rustc::hir;\n \n use syntax::ast;"}, {"sha": "2dbafc7ede2a22a33688729aad6d5cbe462abb36", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::{self, GenericParamKind, PatKind};\n use rustc::hir::def::Def;\n use rustc::hir::intravisit::FnKind;\n+use rustc::lint;\n use rustc::ty;\n use rustc_target::spec::abi::Abi;\n use lint::{EarlyContext, LateContext, LintContext, LintArray};\n@@ -17,7 +18,7 @@ pub enum MethodLateContext {\n     PlainImpl,\n }\n \n-pub fn method_context(cx: &LateContext, id: ast::NodeId) -> MethodLateContext {\n+pub fn method_context(cx: &LateContext<'_, '_>, id: ast::NodeId) -> MethodLateContext {\n     let def_id = cx.tcx.hir().local_def_id(id);\n     let item = cx.tcx.associated_item(def_id);\n     match item.container {\n@@ -41,7 +42,7 @@ declare_lint! {\n pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n-    fn check_case(&self, cx: &EarlyContext, sort: &str, ident: &Ident) {\n+    fn check_case(&self, cx: &EarlyContext<'_>, sort: &str, ident: &Ident) {\n         fn char_has_case(c: char) -> bool {\n             c.is_lowercase() || c.is_uppercase()\n         }\n@@ -115,7 +116,7 @@ impl LintPass for NonCamelCaseTypes {\n }\n \n impl EarlyLintPass for NonCamelCaseTypes {\n-    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         let has_repr_c = it.attrs\n             .iter()\n             .any(|attr| {\n@@ -138,11 +139,11 @@ impl EarlyLintPass for NonCamelCaseTypes {\n         }\n     }\n \n-    fn check_variant(&mut self, cx: &EarlyContext, v: &ast::Variant, _: &ast::Generics) {\n+    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &ast::Variant, _: &ast::Generics) {\n         self.check_case(cx, \"variant\", &v.node.ident);\n     }\n \n-    fn check_generic_param(&mut self, cx: &EarlyContext, param: &ast::GenericParam) {\n+    fn check_generic_param(&mut self, cx: &EarlyContext<'_>, param: &ast::GenericParam) {\n         if let ast::GenericParamKind::Type { .. } = param.kind {\n             self.check_case(cx, \"type parameter\", &param.ident);\n         }\n@@ -190,7 +191,7 @@ impl NonSnakeCase {\n     }\n \n     /// Checks if a given identifier is snake case, and reports a diagnostic if not.\n-    fn check_snake_case(&self, cx: &LateContext, sort: &str, ident: &Ident) {\n+    fn check_snake_case(&self, cx: &LateContext<'_, '_>, sort: &str, ident: &Ident) {\n         fn is_snake_case(ident: &str) -> bool {\n             if ident.is_empty() {\n                 return true;\n@@ -249,7 +250,7 @@ impl LintPass for NonSnakeCase {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n-    fn check_crate(&mut self, cx: &LateContext, cr: &hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, cr: &hir::Crate) {\n         let crate_ident = if let Some(name) = &cx.tcx.sess.opts.crate_name {\n             Some(Ident::from_str(name))\n         } else {\n@@ -286,16 +287,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n         }\n     }\n \n-    fn check_generic_param(&mut self, cx: &LateContext, param: &hir::GenericParam) {\n+    fn check_generic_param(&mut self, cx: &LateContext<'_, '_>, param: &hir::GenericParam) {\n         if let GenericParamKind::Lifetime { .. } = param.kind {\n             self.check_snake_case(cx, \"lifetime\", &param.name.ident());\n         }\n     }\n \n     fn check_fn(\n         &mut self,\n-        cx: &LateContext,\n-        fk: FnKind,\n+        cx: &LateContext<'_, '_>,\n+        fk: FnKind<'_>,\n         _: &hir::FnDecl,\n         _: &hir::Body,\n         _: Span,\n@@ -324,13 +325,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n         }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         if let hir::ItemKind::Mod(_) = it.node {\n             self.check_snake_case(cx, \"module\", &it.ident);\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem) {\n         if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = &item.node {\n             self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n@@ -339,15 +340,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n         }\n     }\n \n-    fn check_pat(&mut self, cx: &LateContext, p: &hir::Pat) {\n+    fn check_pat(&mut self, cx: &LateContext<'_, '_>, p: &hir::Pat) {\n         if let &PatKind::Binding(_, _, _, ident, _) = &p.node {\n             self.check_snake_case(cx, \"variable\", &ident);\n         }\n     }\n \n     fn check_struct_def(\n         &mut self,\n-        cx: &LateContext,\n+        cx: &LateContext<'_, '_>,\n         s: &hir::VariantData,\n         _: ast::Name,\n         _: &hir::Generics,\n@@ -369,7 +370,7 @@ declare_lint! {\n pub struct NonUpperCaseGlobals;\n \n impl NonUpperCaseGlobals {\n-    fn check_upper_case(cx: &LateContext, sort: &str, ident: &Ident) {\n+    fn check_upper_case(cx: &LateContext<'_, '_>, sort: &str, ident: &Ident) {\n         let name = &ident.name.as_str();\n \n         if name.chars().any(|c| c.is_lowercase()) {\n@@ -399,7 +400,7 @@ impl LintPass for NonUpperCaseGlobals {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         match it.node {\n             hir::ItemKind::Static(..) if !attr::contains_name(&it.attrs, \"no_mangle\") => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", &it.ident);\n@@ -411,19 +412,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext, ti: &hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, ti: &hir::TraitItem) {\n         if let hir::TraitItemKind::Const(..) = ti.node {\n             NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ti.ident);\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext, ii: &hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, ii: &hir::ImplItem) {\n         if let hir::ImplItemKind::Const(..) = ii.node {\n             NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ii.ident);\n         }\n     }\n \n-    fn check_pat(&mut self, cx: &LateContext, p: &hir::Pat) {\n+    fn check_pat(&mut self, cx: &LateContext<'_, '_>, p: &hir::Pat) {\n         // Lint for constants that look like binding identifiers (#7526)\n         if let PatKind::Path(hir::QPath::Resolved(None, ref path)) = p.node {\n             if let Def::Const(..) = path.def {"}, {"sha": "f6b7ccfe2ecd8de9d0cc23e7bfcb9f1fae2eda4b", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -4,6 +4,7 @@ use rustc::hir::Node;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, VariantIdx};\n+use rustc::{lint, util};\n use rustc_data_structures::indexed_vec::Idx;\n use util::nodemap::FxHashSet;\n use lint::{LateContext, LintContext, LintArray};\n@@ -23,6 +24,8 @@ use rustc::hir;\n \n use rustc::mir::interpret::{sign_extend, truncate};\n \n+use log::debug;\n+\n declare_lint! {\n     UNUSED_COMPARISONS,\n     Warn,\n@@ -241,7 +244,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             }\n         }\n \n-        fn check_limits(cx: &LateContext,\n+        fn check_limits(cx: &LateContext<'_, '_>,\n                         binop: hir::BinOp,\n                         l: &hir::Expr,\n                         r: &hir::Expr)\n@@ -298,7 +301,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             }\n         }\n \n-        fn get_bin_hex_repr(cx: &LateContext, lit: &ast::Lit) -> Option<String> {\n+        fn get_bin_hex_repr(cx: &LateContext<'_, '_>, lit: &ast::Lit) -> Option<String> {\n             let src = cx.sess().source_map().span_to_snippet(lit.span).ok()?;\n             let firstch = src.chars().next()?;\n \n@@ -320,7 +323,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         //\n         // No suggestion for: `isize`, `usize`.\n         fn get_type_suggestion<'a>(\n-            t: &ty::TyKind,\n+            t: &ty::TyKind<'_>,\n             val: u128,\n             negative: bool,\n         ) -> Option<String> {\n@@ -364,9 +367,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         }\n \n         fn report_bin_hex_error(\n-            cx: &LateContext,\n+            cx: &LateContext<'_, '_>,\n             expr: &hir::Expr,\n-            ty: ty::TyKind,\n+            ty: ty::TyKind<'_>,\n             repr_str: String,\n             val: u128,\n             negative: bool,\n@@ -481,7 +484,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_type_for_ffi(&self,\n                           cache: &mut FxHashSet<Ty<'tcx>>,\n                           ty: Ty<'tcx>) -> FfiResult<'tcx> {\n-        use self::FfiResult::*;\n+        use FfiResult::*;\n \n         let cx = self.cx.tcx;\n \n@@ -799,7 +802,7 @@ impl LintPass for ImproperCTypes {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n-    fn check_foreign_item(&mut self, cx: &LateContext, it: &hir::ForeignItem) {\n+    fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n         let mut vis = ImproperCTypesVisitor { cx };\n         let abi = cx.tcx.hir().get_foreign_abi(it.id);\n         if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n@@ -829,7 +832,7 @@ impl LintPass for VariantSizeDifferences {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         if let hir::ItemKind::Enum(ref enum_definition, _) = it.node {\n             let item_def_id = cx.tcx.hir().local_def_id(it.id);\n             let t = cx.tcx.type_of(item_def_id);"}, {"sha": "407e6842935151b355441a8dc335da4a467c7d54", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,6 @@\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n+use rustc::lint;\n use rustc::ty;\n use rustc::ty::adjustment;\n use lint::{LateContext, EarlyContext, LintContext, LintArray};\n@@ -16,6 +17,8 @@ use syntax_pos::Span;\n \n use rustc::hir;\n \n+use log::debug;\n+\n declare_lint! {\n     pub UNUSED_MUST_USE,\n     Warn,\n@@ -43,7 +46,7 @@ impl LintPass for UnusedResults {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n-    fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n+    fn check_stmt(&mut self, cx: &LateContext<'_, '_>, s: &hir::Stmt) {\n         let expr = match s.node {\n             hir::StmtKind::Semi(ref expr) => &**expr,\n             _ => return,\n@@ -168,7 +171,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         fn check_must_use(\n-            cx: &LateContext,\n+            cx: &LateContext<'_, '_>,\n             def_id: DefId,\n             sp: Span,\n             descr_pre_path: &str,\n@@ -212,7 +215,7 @@ impl LintPass for PathStatements {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n-    fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n+    fn check_stmt(&mut self, cx: &LateContext<'_, '_>, s: &hir::Stmt) {\n         if let hir::StmtKind::Semi(ref expr) = s.node {\n             if let hir::ExprKind::Path(_) = expr.node {\n                 cx.span_lint(PATH_STATEMENTS, s.span, \"path statement with no effect\");\n@@ -241,7 +244,7 @@ impl LintPass for UnusedAttributes {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n-    fn check_attribute(&mut self, cx: &LateContext, attr: &ast::Attribute) {\n+    fn check_attribute(&mut self, cx: &LateContext<'_, '_>, attr: &ast::Attribute) {\n         debug!(\"checking attribute: {:?}\", attr);\n         // Note that check_name() marks the attribute as used if it matches.\n         for &(name, ty, ..) in BUILTIN_ATTRIBUTES {\n@@ -303,7 +306,7 @@ pub struct UnusedParens;\n \n impl UnusedParens {\n     fn check_unused_parens_expr(&self,\n-                                cx: &EarlyContext,\n+                                cx: &EarlyContext<'_>,\n                                 value: &ast::Expr,\n                                 msg: &str,\n                                 followed_by_block: bool) {\n@@ -325,7 +328,7 @@ impl UnusedParens {\n     }\n \n     fn check_unused_parens_pat(&self,\n-                                cx: &EarlyContext,\n+                                cx: &EarlyContext<'_>,\n                                 value: &ast::Pat,\n                                 msg: &str) {\n         if let ast::PatKind::Paren(_) = value.node {\n@@ -339,7 +342,7 @@ impl UnusedParens {\n         }\n     }\n \n-    fn remove_outer_parens(cx: &EarlyContext, span: Span, pattern: &str, msg: &str) {\n+    fn remove_outer_parens(cx: &EarlyContext<'_>, span: Span, pattern: &str, msg: &str) {\n         let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n         let mut err = cx.struct_span_lint(UNUSED_PARENS, span, &span_msg);\n         let mut ate_left_paren = false;\n@@ -387,7 +390,7 @@ impl LintPass for UnusedParens {\n }\n \n impl EarlyLintPass for UnusedParens {\n-    fn check_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n         let (value, msg, followed_by_block) = match e.node {\n             If(ref cond, ..) => (cond, \"`if` condition\", true),\n@@ -429,7 +432,7 @@ impl EarlyLintPass for UnusedParens {\n         self.check_unused_parens_expr(cx, &value, msg, followed_by_block);\n     }\n \n-    fn check_pat(&mut self, cx: &EarlyContext, p: &ast::Pat, _: &mut bool) {\n+    fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat, _: &mut bool) {\n         use ast::PatKind::{Paren, Range};\n         // The lint visitor will visit each subpattern of `p`. We do not want to lint any range\n         // pattern no matter where it occurs in the pattern. For something like `&(a..=b)`, there\n@@ -443,7 +446,7 @@ impl EarlyLintPass for UnusedParens {\n         }\n     }\n \n-    fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n             if let Some(ref value) = local.init {\n                 self.check_unused_parens_expr(cx, &value, \"assigned value\", false);\n@@ -462,7 +465,7 @@ declare_lint! {\n pub struct UnusedImportBraces;\n \n impl UnusedImportBraces {\n-    fn check_use_tree(&self, cx: &EarlyContext, use_tree: &ast::UseTree, item: &ast::Item) {\n+    fn check_use_tree(&self, cx: &EarlyContext<'_>, use_tree: &ast::UseTree, item: &ast::Item) {\n         if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n             // Recursively check nested UseTrees\n             for &(ref tree, _) in items {\n@@ -509,7 +512,7 @@ impl LintPass for UnusedImportBraces {\n }\n \n impl EarlyLintPass for UnusedImportBraces {\n-    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         if let ast::ItemKind::Use(ref use_tree) = item.node {\n             self.check_use_tree(cx, use_tree, item);\n         }\n@@ -536,7 +539,7 @@ impl LintPass for UnusedAllocation {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAllocation {\n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n         match e.node {\n             hir::ExprKind::Box(_) => {}\n             _ => return,"}, {"sha": "e234f4f88070382f99d9c9a85dcb9d8f2018f8bd", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_metadata\"\n@@ -14,7 +15,7 @@ log = \"0.4\"\n memmap = \"0.6\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n serialize = { path = \"../libserialize\" }\n stable_deref_trait = \"1.0.0\""}, {"sha": "0b4c8a5367c15b7fe8bc4c4273ccbda231ae7d66", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,9 +1,9 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n-use cstore::{self, CStore, CrateSource, MetadataBlob};\n-use locator::{self, CratePaths};\n-use decoder::proc_macro_def_path_table;\n-use schema::CrateRoot;\n+use crate::cstore::{self, CStore, CrateSource, MetadataBlob};\n+use crate::locator::{self, CratePaths};\n+use crate::decoder::proc_macro_def_path_table;\n+use crate::schema::CrateRoot;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n \n use rustc::hir::def_id::CrateNum;\n@@ -29,8 +29,9 @@ use syntax::attr;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax::visit;\n+use syntax::{span_err, span_fatal};\n use syntax_pos::{Span, DUMMY_SP};\n-use log;\n+use log::{debug, info, log_enabled};\n \n pub struct Library {\n     pub dylib: Option<(PathBuf, PathKind)>,\n@@ -342,7 +343,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn load(&mut self, locate_ctxt: &mut locator::Context) -> Option<LoadResult> {\n+    fn load(&mut self, locate_ctxt: &mut locator::Context<'_>) -> Option<LoadResult> {\n         let library = locate_ctxt.maybe_load_library_crate()?;\n \n         // In the case that we're loading a crate, but not matching\n@@ -427,7 +428,7 @@ impl<'a> CrateLoader<'a> {\n         // The map from crate numbers in the crate we're resolving to local crate numbers.\n         // We map 0 and all other holes in the map to our parent crate. The \"additional\"\n         // self-dependencies should be harmless.\n-        ::std::iter::once(krate).chain(crate_root.crate_deps\n+        std::iter::once(krate).chain(crate_root.crate_deps\n                                                  .decode(metadata)\n                                                  .map(|dep| {\n             info!(\"resolving dep crate {} hash: `{}` extra filename: `{}`\", dep.name, dep.hash,\n@@ -522,7 +523,7 @@ impl<'a> CrateLoader<'a> {\n     fn load_derive_macros(&mut self, root: &CrateRoot, dylib: Option<PathBuf>, span: Span)\n                           -> Vec<(ast::Name, Lrc<SyntaxExtension>)> {\n         use std::{env, mem};\n-        use dynamic_lib::DynamicLibrary;\n+        use crate::dynamic_lib::DynamicLibrary;\n         use proc_macro::bridge::client::ProcMacro;\n         use syntax_ext::deriving::custom::ProcMacroDerive;\n         use syntax_ext::proc_macro_impl::{AttrProcMacro, BangProcMacro};\n@@ -996,7 +997,7 @@ impl<'a> CrateLoader<'a> {\n                        item.ident, orig_name);\n                 let orig_name = match orig_name {\n                     Some(orig_name) => {\n-                        ::validate_crate_name(Some(self.sess), &orig_name.as_str(),\n+                        crate::validate_crate_name(Some(self.sess), &orig_name.as_str(),\n                                             Some(item.span));\n                         orig_name\n                     }"}, {"sha": "a2f69bc45634dfe56689a0af428cd5413f2a02a1", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use schema;\n+use crate::schema;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n@@ -19,7 +19,7 @@ pub use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind, LinkagePrefere\n pub use rustc::middle::cstore::NativeLibraryKind::*;\n pub use rustc::middle::cstore::{CrateSource, LibSource, ForeignModule};\n \n-pub use cstore_impl::{provide, provide_extern};\n+pub use crate::cstore_impl::{provide, provide_extern};\n \n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external"}, {"sha": "49a3e335e34179eec2798c85af5d8b78ec1e12f3", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,9 +1,9 @@\n-use cstore::{self, LoadedMacro};\n-use encoder;\n-use link_args;\n-use native_libs;\n-use foreign_modules;\n-use schema;\n+use crate::cstore::{self, LoadedMacro};\n+use crate::encoder;\n+use crate::link_args;\n+use crate::native_libs;\n+use crate::foreign_modules;\n+use crate::schema;\n \n use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateStore, DepKind,\n@@ -51,7 +51,7 @@ macro_rules! provide {\n                     index: CRATE_DEF_INDEX\n                 });\n                 let dep_node = def_path_hash\n-                    .to_dep_node(::rustc::dep_graph::DepKind::CrateMetadata);\n+                    .to_dep_node(rustc::dep_graph::DepKind::CrateMetadata);\n                 // The DepNodeIndex of the DepNode::CrateMetadata should be\n                 // cached somewhere, so that we can use read_index().\n                 $tcx.dep_graph.read(dep_node);\n@@ -421,7 +421,7 @@ impl cstore::CStore {\n             use syntax::ext::base::SyntaxExtension;\n             use syntax_ext::proc_macro_impl::BangProcMacro;\n \n-            let client = ::proc_macro::bridge::client::Client::expand1(::proc_macro::quote);\n+            let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n             let ext = SyntaxExtension::ProcMacro {\n                 expander: Box::new(BangProcMacro { client }),\n                 allow_internal_unstable: true,"}, {"sha": "6d7907b096ac67dceafcf2c3e9a1f0ba4337afd4", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n // Decoding metadata from a single crate's metadata\n \n-use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule};\n-use schema::*;\n+use crate::cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule};\n+use crate::schema::*;\n \n use rustc_data_structures::sync::{Lrc, ReadGuard};\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash, Definitions};\n@@ -34,6 +34,7 @@ use syntax::symbol::InternedString;\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::hygiene::Mark;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n+use log::debug;\n \n pub struct DecodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Decoder<'a>,\n@@ -545,7 +546,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     fn get_variant(&self,\n                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                   item: &Entry,\n+                   item: &Entry<'_>,\n                    index: DefIndex,\n                    adt_kind: ty::AdtKind)\n                    -> ty::VariantDef"}, {"sha": "c27d13be4935839357e58ec2020ad8e0049ea9c3", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,7 @@\n #![allow(non_snake_case)]\n \n+use syntax::{register_diagnostic, register_diagnostics, register_long_diagnostics};\n+\n register_long_diagnostics! {\n E0454: r##\"\n A link name was given with an empty name. Erroneous code example:"}, {"sha": "b9dc4195cb228dbbba9a28bc4dc952405ae16b98", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -76,7 +76,6 @@ impl DynamicLibrary {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use libc;\n     use std::mem;\n \n     #[test]\n@@ -127,7 +126,6 @@ mod tests {\n \n #[cfg(unix)]\n mod dl {\n-    use libc;\n     use std::ffi::{CStr, OsStr, CString};\n     use std::os::unix::prelude::*;\n     use std::ptr;"}, {"sha": "d68ab9750b9701c207c481f07b8f97d1b5799c87", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use index::Index;\n-use index_builder::{FromId, IndexBuilder, Untracked};\n-use isolated_encoder::IsolatedEncoder;\n-use schema::*;\n+use crate::index::Index;\n+use crate::index_builder::{FromId, IndexBuilder, Untracked};\n+use crate::isolated_encoder::IsolatedEncoder;\n+use crate::schema::*;\n \n use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n@@ -34,6 +34,7 @@ use syntax::attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n use syntax_pos::{self, hygiene, FileName, SourceFile, Span};\n+use log::{debug, trace};\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -1521,7 +1522,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     // symbol associated with them (they weren't translated) or if they're an FFI\n     // definition (as that's not defined in this crate).\n     fn encode_exported_symbols(&mut self,\n-                               exported_symbols: &[(ExportedSymbol, SymbolExportLevel)])\n+                               exported_symbols: &[(ExportedSymbol<'_>, SymbolExportLevel)])\n                                -> EncodedExportedSymbols {\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates."}, {"sha": "18f30383090cd7d11ac64525a59cda720ff1e1ed", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,9 +1,10 @@\n-use schema::*;\n+use crate::schema::*;\n \n use rustc::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace};\n use rustc_serialize::opaque::Encoder;\n use std::slice;\n use std::u32;\n+use log::debug;\n \n /// While we are generating the metadata, we also track the position\n /// of each DefIndex. It is not required that all definitions appear\n@@ -24,12 +25,12 @@ impl Index {\n         }\n     }\n \n-    pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry>) {\n+    pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry<'_>>) {\n         assert!(def_id.is_local());\n         self.record_index(def_id.index, entry);\n     }\n \n-    pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry>) {\n+    pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'_>>) {\n         assert!(entry.position < (u32::MAX as usize));\n         let position = entry.position as u32;\n         let space_index = item.address_space().index();"}, {"sha": "4175f7acd06889a8694d853166b4d463a4a9b2c5", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -45,10 +45,10 @@\n //! give a callback fn, rather than taking a closure: it allows us to\n //! easily control precisely what data is given to that fn.\n \n-use encoder::EncodeContext;\n-use index::Index;\n-use schema::*;\n-use isolated_encoder::IsolatedEncoder;\n+use crate::encoder::EncodeContext;\n+use crate::index::Index;\n+use crate::schema::*;\n+use crate::isolated_encoder::IsolatedEncoder;\n \n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -133,21 +133,21 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n /// `DefId` index, or implement the `read` method so that it can add\n /// a read of whatever dep-graph nodes are appropriate.\n pub trait DepGraphRead {\n-    fn read(&self, tcx: TyCtxt);\n+    fn read(&self, tcx: TyCtxt<'_, '_, '_>);\n }\n \n impl DepGraphRead for DefId {\n-    fn read(&self, _tcx: TyCtxt) {}\n+    fn read(&self, _tcx: TyCtxt<'_, '_, '_>) {}\n }\n \n impl DepGraphRead for ast::NodeId {\n-    fn read(&self, _tcx: TyCtxt) {}\n+    fn read(&self, _tcx: TyCtxt<'_, '_, '_>) {}\n }\n \n impl<T> DepGraphRead for Option<T>\n     where T: DepGraphRead\n {\n-    fn read(&self, tcx: TyCtxt) {\n+    fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n         match *self {\n             Some(ref v) => v.read(tcx),\n             None => (),\n@@ -158,7 +158,7 @@ impl<T> DepGraphRead for Option<T>\n impl<T> DepGraphRead for [T]\n     where T: DepGraphRead\n {\n-    fn read(&self, tcx: TyCtxt) {\n+    fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n         for i in self {\n             i.read(tcx);\n         }\n@@ -171,7 +171,7 @@ macro_rules! read_tuple {\n             where $($name: DepGraphRead),*\n         {\n             #[allow(non_snake_case)]\n-            fn read(&self, tcx: TyCtxt) {\n+            fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n                 let &($(ref $name),*) = self;\n                 $($name.read(tcx);)*\n             }\n@@ -184,7 +184,7 @@ read_tuple!(A, B, C);\n macro_rules! read_hir {\n     ($t:ty) => {\n         impl<'tcx> DepGraphRead for &'tcx $t {\n-            fn read(&self, tcx: TyCtxt) {\n+            fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n                 tcx.hir().read(self.id);\n             }\n         }\n@@ -208,7 +208,7 @@ read_hir!(hir::MacroDef);\n pub struct Untracked<T>(pub T);\n \n impl<T> DepGraphRead for Untracked<T> {\n-    fn read(&self, _tcx: TyCtxt) {}\n+    fn read(&self, _tcx: TyCtxt<'_, '_, '_>) {}\n }\n \n /// Newtype that can be used to package up misc data extracted from a\n@@ -218,7 +218,7 @@ impl<T> DepGraphRead for Untracked<T> {\n pub struct FromId<T>(pub ast::NodeId, pub T);\n \n impl<T> DepGraphRead for FromId<T> {\n-    fn read(&self, tcx: TyCtxt) {\n+    fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n         tcx.hir().read(self.0);\n     }\n }"}, {"sha": "e879a73e650bb026b0e9c902a703c4185a6f9544", "filename": "src/librustc_metadata/isolated_encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fisolated_encoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fisolated_encoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fisolated_encoder.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use encoder::EncodeContext;\n-use schema::{Lazy, LazySeq};\n+use crate::encoder::EncodeContext;\n+use crate::schema::{Lazy, LazySeq};\n use rustc::ty::TyCtxt;\n use rustc_serialize::Encodable;\n "}, {"sha": "a3490b7fea5b592b84219065158aac07c86959eb", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -13,23 +13,15 @@\n \n #![recursion_limit=\"256\"]\n \n+#![deny(rust_2018_idioms)]\n+\n extern crate libc;\n-#[macro_use]\n-extern crate log;\n-extern crate memmap;\n-extern crate stable_deref_trait;\n-#[macro_use]\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate flate2;\n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n-extern crate rustc_errors as errors;\n-extern crate syntax_ext;\n extern crate proc_macro;\n \n #[macro_use]\n extern crate rustc;\n-extern crate rustc_target;\n #[macro_use]\n extern crate rustc_data_structures;\n "}, {"sha": "f120072b37c05cd1e0462a73fec98898b4bf6e2a", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -212,9 +212,9 @@\n //! no means all of the necessary details. Take a look at the rest of\n //! metadata::locator or metadata::creader for all the juicy details!\n \n-use cstore::{MetadataRef, MetadataBlob};\n-use creader::Library;\n-use schema::{METADATA_HEADER, rustc_version};\n+use crate::cstore::{MetadataRef, MetadataBlob};\n+use crate::creader::Library;\n+use crate::schema::{METADATA_HEADER, rustc_version};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n@@ -226,6 +226,7 @@ use rustc::util::nodemap::FxHashMap;\n \n use errors::DiagnosticBuilder;\n use syntax::symbol::Symbol;\n+use syntax::struct_span_err;\n use syntax_pos::Span;\n use rustc_target::spec::{Target, TargetTriple};\n \n@@ -241,6 +242,8 @@ use flate2::read::DeflateDecoder;\n \n use rustc_data_structures::owning_ref::OwningRef;\n \n+use log::{debug, info, warn};\n+\n pub struct CrateMismatch {\n     path: PathBuf,\n     got: String,\n@@ -283,7 +286,7 @@ enum CrateFlavor {\n }\n \n impl fmt::Display for CrateFlavor {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match *self {\n             CrateFlavor::Rlib => \"rlib\",\n             CrateFlavor::Rmeta => \"rmeta\",\n@@ -600,7 +603,7 @@ impl<'a> Context<'a> {\n             }\n         }\n \n-        let mut err: Option<DiagnosticBuilder> = None;\n+        let mut err: Option<DiagnosticBuilder<'_>> = None;\n         for (lib, kind) in m {\n             info!(\"{} reading metadata from: {}\", flavor, lib.display());\n             let (hash, metadata) ="}, {"sha": "118fb203c69a1ad3f6e50ce35503a5fdfc580a36", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -9,6 +9,7 @@ use syntax::attr;\n use syntax::source_map::Span;\n use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::Symbol;\n+use syntax::{span_err, struct_span_err};\n \n pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Vec<NativeLibrary> {\n     let mut collector = Collector {"}, {"sha": "af79ea37dff55eb9010ce826109923ab024685b4", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use index;\n+use crate::index;\n \n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n@@ -518,7 +518,7 @@ pub enum AssociatedContainer {\n     ImplFinal,\n }\n \n-impl_stable_hash_for!(enum ::schema::AssociatedContainer {\n+impl_stable_hash_for!(enum crate::schema::AssociatedContainer {\n     TraitRequired,\n     TraitWithDefault,\n     ImplDefault,"}, {"sha": "44a6b41cdfe45233e26c6df4d2b1a71fdfd2b444", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_mir\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_mir\"\n@@ -12,7 +13,7 @@ crate-type = [\"dylib\"]\n arena = { path = \"../libarena\" }\n bitflags = \"1.0\"\n either = \"1.5.0\"\n-graphviz = { path = \"../libgraphviz\" }\n+dot = { path = \"../libgraphviz\", package = \"graphviz\" }\n log = \"0.4\"\n log_settings = \"0.1.1\"\n polonius-engine = \"0.6.2\""}, {"sha": "2788f5d4325a962e6af1560703c9fa9cb2123c8f", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use borrow_check::place_ext::PlaceExt;\n-use borrow_check::nll::ToRegionVid;\n-use dataflow::indexes::BorrowIndex;\n-use dataflow::move_paths::MoveData;\n+use crate::borrow_check::place_ext::PlaceExt;\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::dataflow::indexes::BorrowIndex;\n+use crate::dataflow::move_paths::MoveData;\n use rustc::mir::traversal;\n use rustc::mir::visit::{\n     PlaceContext, Visitor, NonUseContext, MutatingUseContext, NonMutatingUseContext\n@@ -72,7 +72,7 @@ crate struct BorrowData<'tcx> {\n }\n \n impl<'tcx> fmt::Display for BorrowData<'tcx> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let kind = match self.kind {\n             mir::BorrowKind::Shared => \"\",\n             mir::BorrowKind::Shallow => \"shallow \","}, {"sha": "afb26963217ff949da84e62237a432cbce6e38f9", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use borrow_check::nll::explain_borrow::BorrowExplanation;\n-use borrow_check::nll::region_infer::{RegionName, RegionNameSource};\n-use borrow_check::prefixes::IsPrefixOf;\n-use borrow_check::WriteKind;\n+use crate::borrow_check::nll::explain_borrow::BorrowExplanation;\n+use crate::borrow_check::nll::region_infer::{RegionName, RegionNameSource};\n+use crate::borrow_check::prefixes::IsPrefixOf;\n+use crate::borrow_check::WriteKind;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::ScopeTree;\n@@ -22,10 +22,10 @@ use syntax_pos::Span;\n use super::borrow_set::BorrowData;\n use super::{Context, MirBorrowckCtxt};\n use super::{InitializationRequiringAction, PrefixSet};\n-use dataflow::drop_flag_effects;\n-use dataflow::move_paths::indexes::MoveOutIndex;\n-use dataflow::move_paths::MovePathIndex;\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::dataflow::drop_flag_effects;\n+use crate::dataflow::move_paths::indexes::MoveOutIndex;\n+use crate::dataflow::move_paths::MovePathIndex;\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n \n #[derive(Debug)]\n struct MoveSite {\n@@ -1726,7 +1726,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// End-user visible description of the `field`nth field of `base`\n-    fn describe_field(&self, base: &Place, field: Field) -> String {\n+    fn describe_field(&self, base: &Place<'_>, field: Field) -> String {\n         match *base {\n             Place::Local(local) => {\n                 let local = &self.mir.local_decls[local];\n@@ -1751,7 +1751,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// End-user visible description of the `field_index`nth field of `ty`\n-    fn describe_field_from_ty(&self, ty: &ty::Ty, field: Field) -> String {\n+    fn describe_field_from_ty(&self, ty: &ty::Ty<'_>, field: Field) -> String {\n         if ty.is_box() {\n             // If the type is a box, the field is described from the boxed type\n             self.describe_field_from_ty(&ty.boxed_ty(), field)\n@@ -1860,7 +1860,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn annotate_argument_and_return_for_borrow(\n         &self,\n         borrow: &BorrowData<'tcx>,\n-    ) -> Option<AnnotatedBorrowFnSignature> {\n+    ) -> Option<AnnotatedBorrowFnSignature<'_>> {\n         // Define a fallback for when we can't match a closure.\n         let fallback = || {\n             let is_closure = self.infcx.tcx.is_closure(self.mir_def_id);\n@@ -2081,7 +2081,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         did: DefId,\n         sig: ty::PolyFnSig<'tcx>,\n-    ) -> Option<AnnotatedBorrowFnSignature> {\n+    ) -> Option<AnnotatedBorrowFnSignature<'_>> {\n         debug!(\"annotate_fn_sig: did={:?} sig={:?}\", did, sig);\n         let is_closure = self.infcx.tcx.is_closure(did);\n         let fn_node_id = self.infcx.tcx.hir().as_local_node_id(did)?;\n@@ -2368,14 +2368,22 @@ impl UseSpans {\n     }\n \n     // Add a span label to the arguments of the closure, if it exists.\n-    pub(super) fn args_span_label(self, err: &mut DiagnosticBuilder, message: impl Into<String>) {\n+    pub(super) fn args_span_label(\n+        self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        message: impl Into<String>,\n+    ) {\n         if let UseSpans::ClosureUse { args_span, .. } = self {\n             err.span_label(args_span, message);\n         }\n     }\n \n     // Add a span label to the use of the captured variable, if it exists.\n-    pub(super) fn var_span_label(self, err: &mut DiagnosticBuilder, message: impl Into<String>) {\n+    pub(super) fn var_span_label(\n+        self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        message: impl Into<String>,\n+    ) {\n         if let UseSpans::ClosureUse { var_span, .. } = self {\n             err.span_label(var_span, message);\n         }\n@@ -2563,7 +2571,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     /// Helper to retrieve span(s) of given borrow from the current MIR\n     /// representation\n-    pub(super) fn retrieve_borrow_spans(&self, borrow: &BorrowData) -> UseSpans {\n+    pub(super) fn retrieve_borrow_spans(&self, borrow: &BorrowData<'_>) -> UseSpans {\n         let span = self.mir.source_info(borrow.reserve_location).span;\n         self.borrow_spans(span, borrow.reserve_location)\n     }"}, {"sha": "8de39f0efc1a5309a39eca22b3242f239c58d341", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -7,16 +7,16 @@ use rustc::mir::{BasicBlock, Location};\n use rustc::ty::RegionVid;\n use rustc_data_structures::bit_set::BitIter;\n \n-use borrow_check::location::LocationIndex;\n+use crate::borrow_check::location::LocationIndex;\n \n use polonius_engine::Output;\n \n-use dataflow::move_paths::indexes::BorrowIndex;\n-use dataflow::move_paths::HasMoveData;\n-use dataflow::Borrows;\n-use dataflow::EverInitializedPlaces;\n-use dataflow::{FlowAtLocation, FlowsAtLocation};\n-use dataflow::MaybeUninitializedPlaces;\n+use crate::dataflow::move_paths::indexes::BorrowIndex;\n+use crate::dataflow::move_paths::HasMoveData;\n+use crate::dataflow::Borrows;\n+use crate::dataflow::EverInitializedPlaces;\n+use crate::dataflow::{FlowAtLocation, FlowsAtLocation};\n+use crate::dataflow::MaybeUninitializedPlaces;\n use either::Either;\n use std::fmt;\n use std::rc::Rc;\n@@ -57,7 +57,7 @@ impl<'b, 'gcx, 'tcx> Flows<'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    crate fn with_outgoing_borrows(&self, op: impl FnOnce(BitIter<BorrowIndex>)) {\n+    crate fn with_outgoing_borrows(&self, op: impl FnOnce(BitIter<'_, BorrowIndex>)) {\n         self.borrows.with_iter_outgoing(op)\n     }\n }\n@@ -93,7 +93,7 @@ impl<'b, 'gcx, 'tcx> FlowsAtLocation for Flows<'b, 'gcx, 'tcx> {\n }\n \n impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut s = String::new();\n \n         s.push_str(\"borrows in effect: [\");"}, {"sha": "45a8c9e8e6909483c2bc8876fffbee6047565714", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n-use borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n@@ -25,16 +25,16 @@ use std::collections::BTreeMap;\n \n use syntax_pos::Span;\n \n-use dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n-use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError};\n-use dataflow::Borrows;\n-use dataflow::DataflowResultsConsumer;\n-use dataflow::FlowAtLocation;\n-use dataflow::MoveDataParamEnv;\n-use dataflow::{do_dataflow, DebugFormatted};\n-use dataflow::EverInitializedPlaces;\n-use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n+use crate::dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError};\n+use crate::dataflow::Borrows;\n+use crate::dataflow::DataflowResultsConsumer;\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MoveDataParamEnv;\n+use crate::dataflow::{do_dataflow, DebugFormatted};\n+use crate::dataflow::EverInitializedPlaces;\n+use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n \n use self::borrow_set::{BorrowData, BorrowSet};\n use self::flows::Flows;\n@@ -59,7 +59,7 @@ mod used_muts;\n \n pub(crate) mod nll;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         mir_borrowck,\n         ..*providers\n@@ -108,7 +108,7 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> BorrowC\n     }\n \n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n-        let input_mir: &Mir = &input_mir.borrow();\n+        let input_mir: &Mir<'_> = &input_mir.borrow();\n         do_mir_borrowck(&infcx, input_mir, def_id)\n     });\n     debug!(\"mir_borrowck done\");"}, {"sha": "f7d46925e17dfe14992b83c8559bfd4dcbb5188d", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -6,13 +6,13 @@ use rustc::ty;\n use rustc_errors::{DiagnosticBuilder,Applicability};\n use syntax_pos::Span;\n \n-use borrow_check::MirBorrowckCtxt;\n-use borrow_check::prefixes::PrefixSet;\n-use dataflow::move_paths::{\n+use crate::borrow_check::MirBorrowckCtxt;\n+use crate::borrow_check::prefixes::PrefixSet;\n+use crate::dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, InitLocation,\n     LookupResult, MoveError, MovePathIndex,\n };\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n \n // Often when desugaring a pattern match we may have many individual moves in\n // MIR that are all part of one operation from the user's point-of-view. For\n@@ -63,7 +63,7 @@ enum BorrowedContentSource {\n }\n \n impl Display for BorrowedContentSource {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             BorrowedContentSource::Arc => write!(f, \"an `Arc`\"),\n             BorrowedContentSource::Rc => write!(f, \"an `Rc`\"),\n@@ -240,7 +240,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n     fn report(&mut self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n-            let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind) =\n+            let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind<'_>) =\n                 match error {\n                     GroupedMoveError::MovesFromPlace {\n                         span,"}, {"sha": "dad8d903cf9feec11960f74869d1c100b86da616", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -8,11 +8,11 @@ use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n use syntax_pos::symbol::keywords;\n \n-use dataflow::move_paths::InitLocation;\n-use borrow_check::MirBorrowckCtxt;\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n-use util::collect_writes::FindAssignments;\n-use util::suggest_ref_mut;\n+use crate::dataflow::move_paths::InitLocation;\n+use crate::borrow_check::MirBorrowckCtxt;\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::collect_writes::FindAssignments;\n+use crate::util::suggest_ref_mut;\n use rustc_errors::Applicability;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -611,7 +611,7 @@ fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n      })\n }\n \n-fn is_closure_or_generator(ty: ty::Ty) -> bool {\n+fn is_closure_or_generator(ty: ty::Ty<'_>) -> bool {\n     ty.is_closure() || ty.is_generator()\n }\n "}, {"sha": "c02c2b4934cf492261393cabfea022b48910a9e4", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n-use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::ToRegionVid;\n-use borrow_check::nll::facts::AllFacts;\n-use borrow_check::nll::region_infer::values::LivenessValues;\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::facts::AllFacts;\n+use crate::borrow_check::nll::region_infer::values::LivenessValues;\n use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;"}, {"sha": "2479dfd1c709318c7627a625c4634eed9ce10ac3", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n-use borrow_check::nll::type_check::Locations;\n-use borrow_check::nll::constraints::ConstraintIndex;\n-use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::type_check::Locations;\n+use crate::borrow_check::nll::constraints::ConstraintIndex;\n+use crate::borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph;"}, {"sha": "d3f9743dfed7720453ac38719cfe60054f82deed", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,7 +2,7 @@ use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use borrow_check::nll::type_check::Locations;\n+use crate::borrow_check::nll::type_check::Locations;\n \n use std::fmt;\n use std::ops::Deref;\n@@ -84,7 +84,7 @@ pub struct OutlivesConstraint {\n }\n \n impl fmt::Debug for OutlivesConstraint {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             formatter,\n             \"({:?}: {:?}) due to {:?}\","}, {"sha": "c5aaf5b811ed7e6c956b0c6d56998544dfd32903", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,13 +1,13 @@\n use std::collections::VecDeque;\n use std::rc::Rc;\n \n-use borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::util::liveness::{self, DefUse};\n use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n-use util::liveness::{self, DefUse};\n \n crate fn find<'tcx>(\n     mir: &Mir<'tcx>,"}, {"sha": "8e57d107aa61effea1334593db3f9ff44023d45d", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n-use borrow_check::borrow_set::BorrowData;\n-use borrow_check::error_reporting::UseSpans;\n-use borrow_check::nll::ConstraintDescription;\n-use borrow_check::nll::region_infer::{Cause, RegionName};\n-use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n+use crate::borrow_check::borrow_set::BorrowData;\n+use crate::borrow_check::error_reporting::UseSpans;\n+use crate::borrow_check::nll::ConstraintDescription;\n+use crate::borrow_check::nll::region_infer::{Cause, RegionName};\n+use crate::borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{\n     CastKind, ConstraintCategory, FakeReadCause, Local, Location, Mir, Operand,\n@@ -14,7 +14,7 @@ use syntax_pos::Span;\n \n mod find_use;\n \n-pub(in borrow_check) enum BorrowExplanation {\n+pub(in crate::borrow_check) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span),\n     UsedLaterInLoop(LaterUseKind, Span),\n     UsedLaterWhenDropped {\n@@ -33,7 +33,7 @@ pub(in borrow_check) enum BorrowExplanation {\n }\n \n #[derive(Clone, Copy)]\n-pub(in borrow_check) enum LaterUseKind {\n+pub(in crate::borrow_check) enum LaterUseKind {\n     TraitCapture,\n     ClosureCapture,\n     Call,\n@@ -42,13 +42,13 @@ pub(in borrow_check) enum LaterUseKind {\n }\n \n impl BorrowExplanation {\n-    pub(in borrow_check) fn is_explained(&self) -> bool {\n+    pub(in crate::borrow_check) fn is_explained(&self) -> bool {\n         match self {\n             BorrowExplanation::Unexplained => false,\n             _ => true,\n         }\n     }\n-    pub(in borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx, 'tcx>(\n+    pub(in crate::borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx, 'tcx>(\n         &self,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         mir: &Mir<'tcx>,\n@@ -187,7 +187,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ///   - second half is the place being accessed\n     ///\n     /// [d]: https://rust-lang.github.io/rfcs/2094-nll.html#leveraging-intuition-framing-errors-in-terms-of-points\n-    pub(in borrow_check) fn explain_why_borrow_contains_point(\n+    pub(in crate::borrow_check) fn explain_why_borrow_contains_point(\n         &self,\n         context: Context,\n         borrow: &BorrowData<'tcx>,"}, {"sha": "9672d3e78cd50a76c62ebca1c3ffaab41bb85e71", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::location::{LocationIndex, LocationTable};\n-use dataflow::indexes::BorrowIndex;\n+use crate::borrow_check::location::{LocationIndex, LocationTable};\n+use crate::dataflow::indexes::BorrowIndex;\n use polonius_engine::AllFacts as PoloniusAllFacts;\n use polonius_engine::Atom;\n use rustc::ty::{RegionVid, TyCtxt};"}, {"sha": "3df6b797a44fb2b4f9b0b449248a5fe66a3b6112", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,15 +1,15 @@\n-use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::LocationTable;\n-use borrow_check::{JustWrite, WriteAndRead};\n-use borrow_check::{AccessDepth, Deep, Shallow};\n-use borrow_check::{ReadOrWrite, Activation, Read, Reservation, Write};\n-use borrow_check::{Context, ContextKind};\n-use borrow_check::{LocalMutationIsAllowed, MutateMode};\n-use borrow_check::ArtificialField;\n-use borrow_check::{ReadKind, WriteKind};\n-use borrow_check::nll::facts::AllFacts;\n-use borrow_check::path_utils::*;\n-use dataflow::move_paths::indexes::BorrowIndex;\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::{JustWrite, WriteAndRead};\n+use crate::borrow_check::{AccessDepth, Deep, Shallow};\n+use crate::borrow_check::{ReadOrWrite, Activation, Read, Reservation, Write};\n+use crate::borrow_check::{Context, ContextKind};\n+use crate::borrow_check::{LocalMutationIsAllowed, MutateMode};\n+use crate::borrow_check::ArtificialField;\n+use crate::borrow_check::{ReadKind, WriteKind};\n+use crate::borrow_check::nll::facts::AllFacts;\n+use crate::borrow_check::path_utils::*;\n+use crate::dataflow::move_paths::indexes::BorrowIndex;\n use rustc::ty::TyCtxt;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, Location, Mir, Place, Rvalue};"}, {"sha": "1fca104cd3825b4f6301708348968e103da3f1c0", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,13 +1,14 @@\n-use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::{LocationIndex, LocationTable};\n-use borrow_check::nll::facts::AllFactsExt;\n-use borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n-use borrow_check::nll::type_check::liveness::liveness_map::NllLivenessMap;\n-use borrow_check::nll::region_infer::values::RegionValueElements;\n-use dataflow::indexes::BorrowIndex;\n-use dataflow::move_paths::MoveData;\n-use dataflow::FlowAtLocation;\n-use dataflow::MaybeInitializedPlaces;\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::{LocationIndex, LocationTable};\n+use crate::borrow_check::nll::facts::AllFactsExt;\n+use crate::borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n+use crate::borrow_check::nll::type_check::liveness::liveness_map::NllLivenessMap;\n+use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n+use crate::dataflow::indexes::BorrowIndex;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MaybeInitializedPlaces;\n+use crate::transform::MirSource;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir};\n@@ -19,12 +20,11 @@ use std::io;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::str::FromStr;\n-use transform::MirSource;\n \n use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n-use util as mir_util;\n-use util::pretty;\n+use crate::util as mir_util;\n+use crate::util::pretty;\n \n mod constraint_generation;\n pub mod explain_borrow;\n@@ -45,7 +45,7 @@ use self::universal_regions::UniversalRegions;\n /// scraping out the set of universal regions (e.g., region parameters)\n /// declared on the function. That set will need to be given to\n /// `compute_regions`.\n-pub(in borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n+pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n     def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -68,7 +68,7 @@ pub(in borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n /// Computes the (non-lexical) regions from the input MIR.\n ///\n /// This may result in errors being reported.\n-pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n+pub(in crate::borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n     def_id: DefId,\n     universal_regions: UniversalRegions<'tcx>,\n@@ -211,8 +211,8 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n-    regioncx: &RegionInferenceContext,\n-    closure_region_requirements: &Option<ClosureRegionRequirements>,\n+    regioncx: &RegionInferenceContext<'_>,\n+    closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n ) {\n     if !mir_util::dump_enabled(infcx.tcx, \"nll\", source) {\n         return;\n@@ -254,14 +254,14 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     );\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = try_block! {\n+    let _: io::Result<()> = try {\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = try_block! {\n+    let _: io::Result<()> = try {\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_scc_constraints(&mut file)?;\n@@ -273,7 +273,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n     mir: &Mir<'tcx>,\n     mir_def_id: DefId,\n     regioncx: &RegionInferenceContext<'tcx>,\n-    closure_region_requirements: &Option<ClosureRegionRequirements>,\n+    closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n     errors_buffer: &mut Vec<Diagnostic>,\n ) {\n     let tcx = infcx.tcx;\n@@ -322,7 +322,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n }\n \n fn for_each_region_constraint(\n-    closure_region_requirements: &ClosureRegionRequirements,\n+    closure_region_requirements: &ClosureRegionRequirements<'_>,\n     with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n ) -> io::Result<()> {\n     for req in &closure_region_requirements.outlives_requirements {"}, {"sha": "3498e3437676c628061f65d67b26614528120cc1", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,9 @@\n-use borrow_check::nll::constraints::OutlivesConstraint;\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::type_check::Locations;\n-use borrow_check::nll::universal_regions::DefiningTy;\n-use borrow_check::nll::ConstraintDescription;\n+use crate::borrow_check::nll::constraints::OutlivesConstraint;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::type_check::Locations;\n+use crate::borrow_check::nll::universal_regions::DefiningTy;\n+use crate::borrow_check::nll::ConstraintDescription;\n+use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n@@ -15,7 +16,6 @@ use std::collections::VecDeque;\n use syntax::errors::Applicability;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n-use util::borrowck_errors::{BorrowckErrors, Origin};\n \n mod region_name;\n mod var_name;"}, {"sha": "2c4f359f65fa5cbb7395e567120bc92452a8c324", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n use std::fmt::{self, Display};\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::universal_regions::DefiningTy;\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::universal_regions::DefiningTy;\n+use crate::borrow_check::nll::ToRegionVid;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n@@ -109,7 +109,7 @@ impl RegionName {\n }\n \n impl Display for RegionName {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.name)\n     }\n }"}, {"sha": "bd7b8829c7b4fc4f2636d196e5fe344065012c9d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::ToRegionVid;\n use rustc::mir::{Local, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "cffc66ac7ddfd5bee81b828270a209755fdac771", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -3,8 +3,7 @@\n //! data to rendered labels.\n \n use super::*;\n-use borrow_check::nll::constraints::OutlivesConstraint;\n-use dot;\n+use crate::borrow_check::nll::constraints::OutlivesConstraint;\n use std::borrow::Cow;\n use std::io::{self, Write};\n "}, {"sha": "7fe657702d756375d89bb2583eaefbad7e5c3e5c", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,9 +1,11 @@\n use super::universal_regions::UniversalRegions;\n-use borrow_check::nll::constraints::graph::NormalConstraintGraph;\n-use borrow_check::nll::constraints::{ConstraintSccIndex, ConstraintSet, OutlivesConstraint};\n-use borrow_check::nll::region_infer::values::{PlaceholderIndices, RegionElement, ToElementIndex};\n-use borrow_check::nll::type_check::free_region_relations::UniversalRegionRelations;\n-use borrow_check::nll::type_check::Locations;\n+use crate::borrow_check::nll::constraints::graph::NormalConstraintGraph;\n+use crate::borrow_check::nll::constraints::{ConstraintSccIndex, ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::region_infer::values::{\n+    PlaceholderIndices, RegionElement, ToElementIndex\n+};\n+use crate::borrow_check::nll::type_check::free_region_relations::UniversalRegionRelations;\n+use crate::borrow_check::nll::type_check::Locations;\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::region_constraints::{GenericKind, VarInfos, VerifyBound};"}, {"sha": "1a72205ad7ae1ba0e3e4c7a7fb3e767b9a2c7d12", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n-use borrow_check::nll::constraints::OutlivesConstraint;\n-use borrow_check::nll::region_infer::TypeTest;\n-use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n-use borrow_check::nll::universal_regions::UniversalRegions;\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::constraints::OutlivesConstraint;\n+use crate::borrow_check::nll::region_infer::TypeTest;\n+use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n+use crate::borrow_check::nll::universal_regions::UniversalRegions;\n+use crate::borrow_check::nll::ToRegionVid;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::outlives::obligations::{TypeOutlives, TypeOutlivesDelegate};"}, {"sha": "f549aea81f69f0742372de6a7d9507914aefc755", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use borrow_check::nll::type_check::constraint_conversion;\n-use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n-use borrow_check::nll::universal_regions::UniversalRegions;\n-use borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::type_check::constraint_conversion;\n+use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n+use crate::borrow_check::nll::universal_regions::UniversalRegions;\n+use crate::borrow_check::nll::ToRegionVid;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;"}, {"sha": "50828c294fa1b8d83f9d2bb00caa38ed0fd919ac", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -7,7 +7,7 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n-use borrow_check::nll::universal_regions::UniversalRegions;\n+use crate::borrow_check::nll::universal_regions::UniversalRegions;\n use rustc::infer::LateBoundRegionConversionTime;\n use rustc::mir::*;\n use rustc::ty::Ty;"}, {"sha": "5e2e4407cbecddaf706b46ac23f97bb15654d27b", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/liveness_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -6,13 +6,13 @@\n //! liveness code so that it only operates over variables with regions in their\n //! types, instead of all variables.\n \n-use borrow_check::nll::ToRegionVid;\n-use borrow_check::nll::facts::{AllFacts, AllFactsExt};\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::facts::{AllFacts, AllFactsExt};\n+use crate::util::liveness::LiveVariableMap;\n use rustc::mir::{Local, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use util::liveness::LiveVariableMap;\n \n /// Map between Local and LiveVar indices: the purpose of this\n /// map is to define the subset of local variables for which we need"}, {"sha": "e9765d2798cd73aa0ac3a5f8dae93f9519b0d963", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,10 +1,10 @@\n-use borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n-use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n+use crate::borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n+use crate::borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n+use crate::util::liveness::{categorize, DefUse, LiveVariableMap};\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Mir};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::vec_linked_list as vll;\n-use util::liveness::{categorize, DefUse, LiveVariableMap};\n \n /// A map that cross references each local with the locations where it\n /// is defined (assigned), used, or dropped. Used during liveness"}, {"sha": "a5510ba6936cc31f724c3f282139414dfe97c4a3", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,11 +1,11 @@\n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::region_infer::values::RegionValueElements;\n-use borrow_check::nll::constraints::ConstraintSet;\n-use borrow_check::nll::NllLivenessMap;\n-use borrow_check::nll::universal_regions::UniversalRegions;\n-use dataflow::move_paths::MoveData;\n-use dataflow::MaybeInitializedPlaces;\n-use dataflow::FlowAtLocation;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n+use crate::borrow_check::nll::constraints::ConstraintSet;\n+use crate::borrow_check::nll::NllLivenessMap;\n+use crate::borrow_check::nll::universal_regions::UniversalRegions;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::MaybeInitializedPlaces;\n+use crate::dataflow::FlowAtLocation;\n use rustc::mir::Mir;\n use rustc::ty::RegionVid;\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "d058be03f55e66d9820823c074d51eb646d4f848", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,12 +1,13 @@\n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n-use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n-use borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n-use borrow_check::nll::type_check::NormalizeLocation;\n-use borrow_check::nll::type_check::TypeChecker;\n-use dataflow::move_paths::indexes::MovePathIndex;\n-use dataflow::move_paths::MoveData;\n-use dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n+use crate::borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n+use crate::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n+use crate::borrow_check::nll::type_check::NormalizeLocation;\n+use crate::borrow_check::nll::type_check::TypeChecker;\n+use crate::dataflow::move_paths::indexes::MovePathIndex;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n+use crate::util::liveness::LiveVariableMap;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Mir};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n@@ -16,7 +17,6 @@ use rustc::ty::{Ty, TypeFoldable};\n use rustc_data_structures::bit_set::HybridBitSet;\n use rustc_data_structures::fx::FxHashMap;\n use std::rc::Rc;\n-use util::liveness::LiveVariableMap;\n \n /// This is the heart of the liveness computation. For each variable X\n /// that requires a liveness computation, it walks over all the uses"}, {"sha": "19ff47f9c390d73d1c16b838989080f297a124dd", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,24 +2,25 @@\n \n #![allow(unreachable_code)]\n \n-use borrow_check::borrow_set::BorrowSet;\n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n-use borrow_check::nll::facts::AllFacts;\n-use borrow_check::nll::region_infer::values::LivenessValues;\n-use borrow_check::nll::region_infer::values::PlaceholderIndex;\n-use borrow_check::nll::region_infer::values::PlaceholderIndices;\n-use borrow_check::nll::region_infer::values::RegionValueElements;\n-use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n-use borrow_check::nll::renumber;\n-use borrow_check::nll::type_check::free_region_relations::{\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::facts::AllFacts;\n+use crate::borrow_check::nll::region_infer::values::LivenessValues;\n+use crate::borrow_check::nll::region_infer::values::PlaceholderIndex;\n+use crate::borrow_check::nll::region_infer::values::PlaceholderIndices;\n+use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n+use crate::borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n+use crate::borrow_check::nll::renumber;\n+use crate::borrow_check::nll::type_check::free_region_relations::{\n     CreateResult, UniversalRegionRelations,\n };\n-use borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n-use borrow_check::nll::ToRegionVid;\n-use dataflow::move_paths::MoveData;\n-use dataflow::FlowAtLocation;\n-use dataflow::MaybeInitializedPlaces;\n+use crate::borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MaybeInitializedPlaces;\n+use crate::transform::{MirPass, MirSource};\n use either::Either;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -46,7 +47,6 @@ use rustc::ty::layout::VariantIdx;\n use std::rc::Rc;\n use std::{fmt, iter};\n use syntax_pos::{Span, DUMMY_SP};\n-use transform::{MirPass, MirSource};\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n@@ -210,7 +210,7 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n     extra(&mut checker)\n }\n \n-fn translate_outlives_facts(cx: &mut BorrowCheckContext) {\n+fn translate_outlives_facts(cx: &mut BorrowCheckContext<'_, '_>) {\n     if let Some(facts) = cx.all_facts {\n         let location_table = cx.location_table;\n         facts\n@@ -235,7 +235,7 @@ fn translate_outlives_facts(cx: &mut BorrowCheckContext) {\n     }\n }\n \n-fn mirbug(tcx: TyCtxt, span: Span, msg: &str) {\n+fn mirbug(tcx: TyCtxt<'_, '_, '_>, span: Span, msg: &str) {\n     // We sometimes see MIR failures (notably predicate failures) due to\n     // the fact that we check rvalue sized predicates here. So use `delay_span_bug`\n     // to avoid reporting bugs in those cases.\n@@ -266,7 +266,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext<'_>, location: Location) {\n         self.sanitize_place(place, location, context);\n     }\n \n@@ -447,7 +447,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         &mut self,\n         place: &Place<'tcx>,\n         location: Location,\n-        context: PlaceContext,\n+        context: PlaceContext<'_>,\n     ) -> PlaceTy<'tcx> {\n         debug!(\"sanitize_place: {:?}\", place);\n         let place_ty = match *place {"}, {"sha": "1748e3008902128960fa9b72acde767ec86d916b", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::nll::constraints::OutlivesConstraint;\n-use borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n+use crate::borrow_check::nll::constraints::OutlivesConstraint;\n+use crate::borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n use rustc::infer::nll_relate::{TypeRelating, TypeRelatingDelegate, NormalizationStrategy};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::mir::ConstraintCategory;"}, {"sha": "1cea9f662d3517118e5f85b82055670f3b46f9af", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n-use borrow_check::borrow_set::{BorrowSet, BorrowData, TwoPhaseActivation};\n-use borrow_check::places_conflict;\n-use borrow_check::Context;\n-use borrow_check::AccessDepth;\n-use dataflow::indexes::BorrowIndex;\n+use crate::borrow_check::borrow_set::{BorrowSet, BorrowData, TwoPhaseActivation};\n+use crate::borrow_check::places_conflict;\n+use crate::borrow_check::Context;\n+use crate::borrow_check::AccessDepth;\n+use crate::dataflow::indexes::BorrowIndex;\n use rustc::mir::{BasicBlock, Location, Mir, Place};\n use rustc::mir::{ProjectionElem, BorrowKind};\n use rustc::ty::TyCtxt;"}, {"sha": "bad236a6f5256ace28e16cbad9e4aa1c874ffb10", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,7 +2,7 @@ use rustc::hir;\n use rustc::mir::ProjectionElem;\n use rustc::mir::{Local, Mir, Place, Mutability};\n use rustc::ty::{self, TyCtxt};\n-use borrow_check::borrow_set::LocalsStateAtExit;\n+use crate::borrow_check::borrow_set::LocalsStateAtExit;\n \n /// Extension methods for the `Place` type.\n crate trait PlaceExt<'tcx> {"}, {"sha": "cd33f22bf3cb7d73e15130383c255885e6ca156a", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n-use borrow_check::ArtificialField;\n-use borrow_check::Overlap;\n-use borrow_check::{Deep, Shallow, AccessDepth};\n+use crate::borrow_check::ArtificialField;\n+use crate::borrow_check::Overlap;\n+use crate::borrow_check::{Deep, Shallow, AccessDepth};\n use rustc::hir;\n use rustc::mir::{BorrowKind, Mir, Place};\n use rustc::mir::{Projection, ProjectionElem};"}, {"sha": "8c7359bdee768f0f9f3611430fa561c0f8cfd811", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -3,7 +3,7 @@ use rustc::mir::{BasicBlock, Local, Location, Place, Statement, StatementKind, T\n \n use rustc_data_structures::fx::FxHashSet;\n \n-use borrow_check::MirBorrowckCtxt;\n+use crate::borrow_check::MirBorrowckCtxt;\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// Walks the MIR adding to the set of `used_mut` locals that will be ignored for the purposes"}, {"sha": "7d93e131a6ca9678cc9794fee7043d76f996c300", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use build::ForGuard::OutsideGuard;\n-use build::matches::ArmHasGuard;\n-use hair::*;\n+use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use crate::build::ForGuard::OutsideGuard;\n+use crate::build::matches::ArmHasGuard;\n+use crate::hair::*;\n use rustc::mir::*;\n use rustc::hir;\n use syntax_pos::Span;"}, {"sha": "778d1e71cedfc3d8bd2414270ec06ec29bc63866", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n //! Routines for manipulating the control-flow graph.\n \n-use build::CFG;\n+use crate::build::CFG;\n use rustc::mir::*;\n \n impl<'tcx> CFG<'tcx> {"}, {"sha": "614668170d5be73c2b8648b6478b7e4a0b160932", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n-use build::Builder;\n-use hair::*;\n+use crate::build::Builder;\n+use crate::hair::*;\n use rustc::mir::*;\n use rustc::ty::CanonicalUserTypeAnnotation;\n "}, {"sha": "38fae8539c8d71bef80656516b0ab1c6860b3cc1", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n //! See docs in build/expr/mod.rs\n \n-use build::expr::category::Category;\n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use hair::*;\n+use crate::build::expr::category::Category;\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n "}, {"sha": "ed444191226a1ddef18c7fb89a6457498d921d3d", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,9 +1,9 @@\n //! See docs in build/expr/mod.rs\n \n-use build::expr::category::Category;\n-use build::ForGuard::{OutsideGuard, RefWithinGuard};\n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use hair::*;\n+use crate::build::expr::category::Category;\n+use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::hair::*;\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::*;\n use rustc::ty::{CanonicalUserTypeAnnotation, Variance};"}, {"sha": "06658675f70f441469c248d2dc7374ddf44c3da3", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -3,9 +3,9 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use build::expr::category::{Category, RvalueFunc};\n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use hair::*;\n+use crate::build::expr::category::{Category, RvalueFunc};\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::interpret::EvalErrorKind;\n use rustc::mir::*;"}, {"sha": "efa1a4895e0c064dc8128579e06efe93c23ea485", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use hair::*;\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n "}, {"sha": "ca7d435e62229aeb2b785d2692953558da8e6015", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use hair::*;\n+use crate::hair::*;\n \n #[derive(Debug, PartialEq)]\n pub enum Category {"}, {"sha": "05231bc7b3f16003d6046578666a3e7f281dc2fe", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n //! See docs in build/expr/mod.rs\n \n-use build::expr::category::{Category, RvalueFunc};\n-use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use hair::*;\n+use crate::build::expr::category::{Category, RvalueFunc};\n+use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use crate::hair::*;\n use rustc::mir::*;\n use rustc::ty;\n "}, {"sha": "aadc2368f5aec7adddbc1ef85efcbcd6434d51e8", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n-use build::scope::BreakableScope;\n-use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use hair::*;\n+use crate::build::scope::BreakableScope;\n+use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use crate::hair::*;\n use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {"}, {"sha": "67b6540febea84ded5651362590feb7c17ce77cc", "filename": "src/librustc_mir/build/into.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Finto.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -4,11 +4,11 @@\n //! wrapped up as expressions (e.g., blocks). To make this ergonomic, we use this\n //! latter `EvalInto` trait.\n \n-use build::{BlockAnd, Builder};\n-use hair::*;\n+use crate::build::{BlockAnd, Builder};\n+use crate::hair::*;\n use rustc::mir::*;\n \n-pub(in build) trait EvalInto<'tcx> {\n+pub(in crate::build) trait EvalInto<'tcx> {\n     fn eval_into<'a, 'gcx>(self,\n                            builder: &mut Builder<'a, 'gcx, 'tcx>,\n                            destination: &Place<'tcx>,"}, {"sha": "cf051ba2e0fa6ab9dafb12578348293b64f10673", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -3,11 +3,11 @@\n //! includes the high-level algorithm, the submodules contain the\n //! details.\n \n-use build::scope::{CachedBlock, DropKind};\n-use build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n-use hair::*;\n+use crate::build::scope::{CachedBlock, DropKind};\n+use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n+use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n+use crate::hair::*;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc::ty::layout::VariantIdx;"}, {"sha": "6be9ccb27036e28b7176fcdc48ca4718f05cd29c", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -12,9 +12,9 @@\n //! sort of test: for example, testing which variant an enum is, or\n //! testing a value against a constant.\n \n-use build::Builder;\n-use build::matches::{Ascription, Binding, MatchPair, Candidate};\n-use hair::*;\n+use crate::build::Builder;\n+use crate::build::matches::{Ascription, Binding, MatchPair, Candidate};\n+use crate::hair::*;\n use rustc::ty;\n use rustc::ty::layout::{Integer, IntegerExt, Size};\n use syntax::attr::{SignedInt, UnsignedInt};"}, {"sha": "395858c07b606b8106f2524bf4315a96ca071c52", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -5,10 +5,10 @@\n // identify what tests are needed, perform the tests, and then filter\n // the candidates based on the result.\n \n-use build::Builder;\n-use build::matches::{Candidate, MatchPair, Test, TestKind};\n-use hair::*;\n-use hair::pattern::compare_const_vals;\n+use crate::build::Builder;\n+use crate::build::matches::{Candidate, MatchPair, Test, TestKind};\n+use crate::hair::*;\n+use crate::hair::pattern::compare_const_vals;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::FxHashMap;\n use rustc::ty::{self, Ty};"}, {"sha": "ed12c1b3bc9c1de1461b3c657a97eef8eebfc24d", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n-use build::Builder;\n-use build::matches::MatchPair;\n-use hair::*;\n+use crate::build::Builder;\n+use crate::build::matches::MatchPair;\n+use crate::hair::*;\n use rustc::mir::*;\n use std::u32;\n use std::convert::TryInto;"}, {"sha": "1634c36d34acf733e8f4fbe86ff93cf6c1a5936a", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n //! Miscellaneous builder routines that are not specific to building any particular\n //! kind of thing.\n \n-use build::Builder;\n+use crate::build::Builder;\n \n use rustc::ty::{self, Ty};\n "}, {"sha": "a52b032aeb508c5e8a825cd8208f6029da94bfeb", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,10 @@\n-use build;\n-use build::scope::{CachedBlock, DropKind};\n-use hair::cx::Cx;\n-use hair::{LintLevel, BindingMode, PatternKind};\n+use crate::build;\n+use crate::build::scope::{CachedBlock, DropKind};\n+use crate::hair::cx::Cx;\n+use crate::hair::{LintLevel, BindingMode, PatternKind};\n+use crate::shim;\n+use crate::transform::MirSource;\n+use crate::util as mir_util;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n@@ -13,16 +16,13 @@ use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use shim;\n use std::mem;\n use std::u32;\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr::{self, UnwindAttr};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n-use transform::MirSource;\n-use util as mir_util;\n \n use super::lints;\n \n@@ -161,7 +161,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n         };\n         globalizer.visit_mir(&mut mir);\n         let mir = unsafe {\n-            mem::transmute::<Mir, Mir<'tcx>>(mir)\n+            mem::transmute::<Mir<'_>, Mir<'tcx>>(mir)\n         };\n \n         mir_util::dump_mir(tcx, None, \"mir_map\", &0,\n@@ -241,7 +241,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n             globalizer.visit_mir(&mut mir);\n             let mir = unsafe {\n-                mem::transmute::<Mir, Mir<'tcx>>(mir)\n+                mem::transmute::<Mir<'_>, Mir<'tcx>>(mir)\n             };\n \n             mir_util::dump_mir(tcx, None, \"mir_map\", &0,"}, {"sha": "3872f5db26278d79b53c0d8421692927e583fc70", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -77,8 +77,8 @@ should go to.\n \n */\n \n-use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n-use hair::LintLevel;\n+use crate::build::{BlockAnd, BlockAndExtension, Builder, CFG};\n+use crate::hair::LintLevel;\n use rustc::middle::region;\n use rustc::ty::Ty;\n use rustc::hir;"}, {"sha": "d1b4486dd9345d76d7e4d533685a9cd17e2ed7c4", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -190,7 +190,7 @@ enum ConstEvalError {\n }\n \n impl fmt::Display for ConstEvalError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::ConstEvalError::*;\n         match *self {\n             NeedsRfc(ref msg) => {"}, {"sha": "d0b9fbc99f03f754d24776721cc4533dabccf57e", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -4,8 +4,8 @@\n use rustc::mir::{BasicBlock, Location};\n use rustc_data_structures::bit_set::{BitIter, BitSet, HybridBitSet};\n \n-use dataflow::{BitDenotation, BlockSets, DataflowResults};\n-use dataflow::move_paths::{HasMoveData, MovePathIndex};\n+use crate::dataflow::{BitDenotation, BlockSets, DataflowResults};\n+use crate::dataflow::move_paths::{HasMoveData, MovePathIndex};\n \n use std::iter;\n \n@@ -115,7 +115,7 @@ where\n     }\n \n     /// Returns an iterator over the elements present in the current state.\n-    pub fn iter_incoming(&self) -> iter::Peekable<BitIter<BD::Idx>> {\n+    pub fn iter_incoming(&self) -> iter::Peekable<BitIter<'_, BD::Idx>> {\n         self.curr_state.iter().peekable()\n     }\n \n@@ -124,7 +124,7 @@ where\n     /// Invokes `f` with an iterator over the resulting state.\n     pub fn with_iter_outgoing<F>(&self, f: F)\n     where\n-        F: FnOnce(BitIter<BD::Idx>),\n+        F: FnOnce(BitIter<'_, BD::Idx>),\n     {\n         let mut curr_state = self.curr_state.clone();\n         curr_state.union(&self.stmt_gen);"}, {"sha": "49499cf928d743a96b7bdd2e71b1d78b1c0675ca", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n use rustc::mir::{self, Mir, Location};\n use rustc::ty::{self, TyCtxt};\n-use util::elaborate_drops::DropFlagState;\n+use crate::util::elaborate_drops::DropFlagState;\n \n use super::{MoveDataParamEnv};\n use super::indexes::MovePathIndex;"}, {"sha": "9d9f18d4b0dcf926ae47784872f4d1fdf25d0603", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -3,8 +3,6 @@\n use syntax::ast::NodeId;\n use rustc::mir::{BasicBlock, Mir};\n \n-use dot;\n-\n use std::fs;\n use std::io;\n use std::marker::PhantomData;\n@@ -59,7 +57,7 @@ pub type Node = BasicBlock;\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct Edge { source: BasicBlock, index: usize }\n \n-fn outgoing(mir: &Mir, bb: BasicBlock) -> Vec<Edge> {\n+fn outgoing(mir: &Mir<'_>, bb: BasicBlock) -> Vec<Edge> {\n     (0..mir[bb].terminator().successors().count())\n         .map(|index| Edge { source: bb, index: index}).collect()\n }\n@@ -70,18 +68,18 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n {\n     type Node = Node;\n     type Edge = Edge;\n-    fn graph_id(&self) -> dot::Id {\n+    fn graph_id(&self) -> dot::Id<'_> {\n         dot::Id::new(format!(\"graph_for_node_{}\",\n                              self.mbcx.node_id()))\n             .unwrap()\n     }\n \n-    fn node_id(&self, n: &Node) -> dot::Id {\n+    fn node_id(&self, n: &Node) -> dot::Id<'_> {\n         dot::Id::new(format!(\"bb_{}\", n.index()))\n             .unwrap()\n     }\n \n-    fn node_label(&self, n: &Node) -> dot::LabelText {\n+    fn node_label(&self, n: &Node) -> dot::LabelText<'_> {\n         // Node label is something like this:\n         // +---------+----------------------------------+------------------+------------------+\n         // | ENTRY   | MIR                              | GEN              | KILL             |\n@@ -105,7 +103,7 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n     }\n \n \n-    fn node_shape(&self, _n: &Node) -> Option<dot::LabelText> {\n+    fn node_shape(&self, _n: &Node) -> Option<dot::LabelText<'_>> {\n         Some(dot::LabelText::label(\"none\"))\n     }\n \n@@ -125,7 +123,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                          n: &Node,\n                                          w: &mut W,\n                                          block: BasicBlock,\n-                                         mir: &Mir) -> io::Result<()> {\n+                                         mir: &Mir<'_>) -> io::Result<()> {\n         // Header rows\n         const HDRS: [&str; 4] = [\"ENTRY\", \"MIR\", \"BLOCK GENS\", \"BLOCK KILLS\"];\n         const HDR_FMT: &str = \"bgcolor=\\\"grey\\\"\";\n@@ -150,7 +148,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                             n: &Node,\n                                             w: &mut W,\n                                             block: BasicBlock,\n-                                            mir: &Mir)\n+                                            mir: &Mir<'_>)\n                                             -> io::Result<()> {\n         let i = n.index();\n \n@@ -200,7 +198,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                           n: &Node,\n                                           w: &mut W,\n                                           block: BasicBlock,\n-                                          mir: &Mir)\n+                                          mir: &Mir<'_>)\n                                           -> io::Result<()> {\n         let i = n.index();\n \n@@ -241,15 +239,15 @@ impl<'a, 'tcx, MWF, P> dot::GraphWalk<'a> for Graph<'a, 'tcx, MWF, P>\n {\n     type Node = Node;\n     type Edge = Edge;\n-    fn nodes(&self) -> dot::Nodes<Node> {\n+    fn nodes(&self) -> dot::Nodes<'_, Node> {\n         self.mbcx.mir()\n             .basic_blocks()\n             .indices()\n             .collect::<Vec<_>>()\n             .into()\n     }\n \n-    fn edges(&self) -> dot::Edges<Edge> {\n+    fn edges(&self) -> dot::Edges<'_, Edge> {\n         let mir = self.mbcx.mir();\n \n         mir.basic_blocks()"}, {"sha": "51d628ce6c5c28b5ee59b92d9b7849e3c15052e4", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,7 +2,7 @@ pub use super::*;\n \n use rustc::mir::*;\n use rustc::mir::visit::Visitor;\n-use dataflow::BitDenotation;\n+use crate::dataflow::BitDenotation;\n \n /// This calculates if any part of a MIR local could have previously been borrowed.\n /// This means that once a local has been borrowed, its bit will be set\n@@ -38,7 +38,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<Local>,\n+                        sets: &mut BlockSets<'_, Local>,\n                         loc: Location) {\n         let stmt = &self.mir[loc.block].statements[loc.statement_index];\n \n@@ -54,7 +54,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<Local>,\n+                         sets: &mut BlockSets<'_, Local>,\n                          loc: Location) {\n         BorrowedLocalsVisitor {\n             sets,"}, {"sha": "beb0b3187082b410f1f0b71bbf4dacf19f27b916", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::borrow_set::{BorrowSet, BorrowData};\n-use borrow_check::place_ext::PlaceExt;\n+use crate::borrow_check::borrow_set::{BorrowSet, BorrowData};\n+use crate::borrow_check::place_ext::PlaceExt;\n \n use rustc::mir::{self, Location, Place, Mir};\n use rustc::ty::TyCtxt;\n@@ -9,11 +9,11 @@ use rustc_data_structures::bit_set::{BitSet, BitSetOperator};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n-use dataflow::{BitDenotation, BlockSets, InitialFlow};\n-pub use dataflow::indexes::BorrowIndex;\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::ToRegionVid;\n-use borrow_check::places_conflict;\n+use crate::dataflow::{BitDenotation, BlockSets, InitialFlow};\n+pub use crate::dataflow::indexes::BorrowIndex;\n+use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::places_conflict;\n \n use std::rc::Rc;\n \n@@ -163,7 +163,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     /// Add all borrows to the kill set, if those borrows are out of scope at `location`.\n     /// That means they went out of a nonlexical scope\n     fn kill_loans_out_of_scope_at_location(&self,\n-                                           sets: &mut BlockSets<BorrowIndex>,\n+                                           sets: &mut BlockSets<'_, BorrowIndex>,\n                                            location: Location) {\n         // NOTE: The state associated with a given `location`\n         // reflects the dataflow on entry to the statement.\n@@ -184,7 +184,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     /// Kill any borrows that conflict with `place`.\n     fn kill_borrows_on_place(\n         &self,\n-        sets: &mut BlockSets<BorrowIndex>,\n+        sets: &mut BlockSets<'_, BorrowIndex>,\n         place: &Place<'tcx>\n     ) {\n         debug!(\"kill_borrows_on_place: place={:?}\", place);\n@@ -243,13 +243,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n     }\n \n     fn before_statement_effect(&self,\n-                               sets: &mut BlockSets<BorrowIndex>,\n+                               sets: &mut BlockSets<'_, BorrowIndex>,\n                                location: Location) {\n         debug!(\"Borrows::before_statement_effect sets: {:?} location: {:?}\", sets, location);\n         self.kill_loans_out_of_scope_at_location(sets, location);\n     }\n \n-    fn statement_effect(&self, sets: &mut BlockSets<BorrowIndex>, location: Location) {\n+    fn statement_effect(&self, sets: &mut BlockSets<'_, BorrowIndex>, location: Location) {\n         debug!(\"Borrows::statement_effect: sets={:?} location={:?}\", sets, location);\n \n         let block = &self.mir.basic_blocks().get(location.block).unwrap_or_else(|| {\n@@ -307,13 +307,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n     }\n \n     fn before_terminator_effect(&self,\n-                                sets: &mut BlockSets<BorrowIndex>,\n+                                sets: &mut BlockSets<'_, BorrowIndex>,\n                                 location: Location) {\n         debug!(\"Borrows::before_terminator_effect sets: {:?} location: {:?}\", sets, location);\n         self.kill_loans_out_of_scope_at_location(sets, location);\n     }\n \n-    fn terminator_effect(&self, _: &mut BlockSets<BorrowIndex>, _: Location) {}\n+    fn terminator_effect(&self, _: &mut BlockSets<'_, BorrowIndex>, _: Location) {}\n \n     fn propagate_call_return(\n         &self,"}, {"sha": "c8965b9f7f4c79d94fad08b09b1b581a74713530", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::indexed_vec::Idx;\n \n use super::MoveDataParamEnv;\n \n-use util::elaborate_drops::DropFlagState;\n+use crate::util::elaborate_drops::DropFlagState;\n \n use super::move_paths::{HasMoveData, MoveData, MovePathIndex, InitIndex};\n use super::move_paths::{LookupResult, InitKind};\n@@ -251,7 +251,7 @@ impl<'a, 'gcx, 'tcx> HasMoveData<'tcx> for EverInitializedPlaces<'a, 'gcx, 'tcx>\n \n \n impl<'a, 'gcx, 'tcx> MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n-    fn update_bits(sets: &mut BlockSets<MovePathIndex>, path: MovePathIndex,\n+    fn update_bits(sets: &mut BlockSets<'_, MovePathIndex>, path: MovePathIndex,\n                    state: DropFlagState)\n     {\n         match state {\n@@ -262,7 +262,7 @@ impl<'a, 'gcx, 'tcx> MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n-    fn update_bits(sets: &mut BlockSets<MovePathIndex>, path: MovePathIndex,\n+    fn update_bits(sets: &mut BlockSets<'_, MovePathIndex>, path: MovePathIndex,\n                    state: DropFlagState)\n     {\n         match state {\n@@ -273,7 +273,7 @@ impl<'a, 'gcx, 'tcx> MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n-    fn update_bits(sets: &mut BlockSets<MovePathIndex>, path: MovePathIndex,\n+    fn update_bits(sets: &mut BlockSets<'_, MovePathIndex>, path: MovePathIndex,\n                    state: DropFlagState)\n     {\n         match state {\n@@ -300,7 +300,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeInitializedPlaces<'a, 'gcx, 't\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<MovePathIndex>,\n+                        sets: &mut BlockSets<'_, MovePathIndex>,\n                         location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -311,7 +311,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeInitializedPlaces<'a, 'gcx, 't\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<MovePathIndex>,\n+                         sets: &mut BlockSets<'_, MovePathIndex>,\n                          location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -358,7 +358,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeUninitializedPlaces<'a, 'gcx,\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<MovePathIndex>,\n+                        sets: &mut BlockSets<'_, MovePathIndex>,\n                         location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -369,7 +369,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeUninitializedPlaces<'a, 'gcx,\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<MovePathIndex>,\n+                         sets: &mut BlockSets<'_, MovePathIndex>,\n                          location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -414,7 +414,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for DefinitelyInitializedPlaces<'a, 'gc\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<MovePathIndex>,\n+                        sets: &mut BlockSets<'_, MovePathIndex>,\n                         location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -425,7 +425,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for DefinitelyInitializedPlaces<'a, 'gc\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<MovePathIndex>,\n+                         sets: &mut BlockSets<'_, MovePathIndex>,\n                          location: Location)\n     {\n         drop_flag_effects_for_location(\n@@ -464,7 +464,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for EverInitializedPlaces<'a, 'gcx, 'tc\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<InitIndex>,\n+                        sets: &mut BlockSets<'_, InitIndex>,\n                         location: Location) {\n         let (_, mir, move_data) = (self.tcx, self.mir, self.move_data());\n         let stmt = &mir[location.block].statements[location.statement_index];\n@@ -511,7 +511,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for EverInitializedPlaces<'a, 'gcx, 'tc\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<InitIndex>,\n+                         sets: &mut BlockSets<'_, InitIndex>,\n                          location: Location)\n     {\n         let (mir, move_data) = (self.mir, self.move_data());"}, {"sha": "6b8eb6f17f6c13aa03fbcd28a000ceb38e4f91b1", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n pub use super::*;\n \n use rustc::mir::*;\n-use dataflow::BitDenotation;\n+use crate::dataflow::BitDenotation;\n \n #[derive(Copy, Clone)]\n pub struct MaybeStorageLive<'a, 'tcx: 'a> {\n@@ -31,7 +31,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<Local>,\n+                        sets: &mut BlockSets<'_, Local>,\n                         loc: Location) {\n         let stmt = &self.mir[loc.block].statements[loc.statement_index];\n \n@@ -43,7 +43,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n     }\n \n     fn terminator_effect(&self,\n-                         _sets: &mut BlockSets<Local>,\n+                         _sets: &mut BlockSets<'_, Local>,\n                          _loc: Location) {\n         // Terminators have no effect\n     }"}, {"sha": "1853b60efd7e693f4dc8b03fe6bd070b7ad2a4f7", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -58,7 +58,7 @@ impl DebugFormatted {\n }\n \n impl fmt::Debug for DebugFormatted {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(w, \"{}\", self.0)\n     }\n }\n@@ -525,7 +525,7 @@ impl<'a, E:Idx> BlockSets<'a, E> {\n \n impl<E:Idx> AllSets<E> {\n     pub fn bits_per_block(&self) -> usize { self.bits_per_block }\n-    pub fn for_block(&mut self, block_idx: usize) -> BlockSets<E> {\n+    pub fn for_block(&mut self, block_idx: usize) -> BlockSets<'_, E> {\n         BlockSets {\n             on_entry: &mut self.on_entry_sets[block_idx],\n             gen_set: &mut self.gen_sets[block_idx],\n@@ -616,7 +616,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// applied, in that order, before moving for the next\n     /// statement.\n     fn before_statement_effect(&self,\n-                               _sets: &mut BlockSets<Self::Idx>,\n+                               _sets: &mut BlockSets<'_, Self::Idx>,\n                                _location: Location) {}\n \n     /// Mutates the block-sets (the flow sets for the given\n@@ -630,7 +630,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// `bb_data` is the sequence of statements identified by `bb` in\n     /// the MIR.\n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<Self::Idx>,\n+                        sets: &mut BlockSets<'_, Self::Idx>,\n                         location: Location);\n \n     /// Similar to `terminator_effect`, except it applies\n@@ -645,7 +645,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// applied, in that order, before moving for the next\n     /// terminator.\n     fn before_terminator_effect(&self,\n-                                _sets: &mut BlockSets<Self::Idx>,\n+                                _sets: &mut BlockSets<'_, Self::Idx>,\n                                 _location: Location) {}\n \n     /// Mutates the block-sets (the flow sets for the given\n@@ -659,7 +659,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// The effects applied here cannot depend on which branch the\n     /// terminator took.\n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<Self::Idx>,\n+                         sets: &mut BlockSets<'_, Self::Idx>,\n                          location: Location);\n \n     /// Mutates the block-sets according to the (flow-dependent)"}, {"sha": "efd979a7da4fb469b174c41acce5afd3e0bb4ef7", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -37,7 +37,7 @@ pub(crate) mod indexes {\n             }\n \n             impl fmt::Debug for $Index {\n-                fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     write!(fmt, \"{}{}\", $debug_name, self.index())\n                 }\n             }\n@@ -62,7 +62,7 @@ pub use self::indexes::MoveOutIndex;\n pub use self::indexes::InitIndex;\n \n impl MoveOutIndex {\n-    pub fn move_path_index(&self, move_data: &MoveData) -> MovePathIndex {\n+    pub fn move_path_index(&self, move_data: &MoveData<'_>) -> MovePathIndex {\n         move_data.moves[*self].path\n     }\n }\n@@ -88,7 +88,10 @@ pub struct MovePath<'tcx> {\n }\n \n impl<'tcx> MovePath<'tcx> {\n-    pub fn parents(&self, move_paths: &IndexVec<MovePathIndex, MovePath>) -> Vec<MovePathIndex> {\n+    pub fn parents(\n+        &self,\n+        move_paths: &IndexVec<MovePathIndex, MovePath<'_>>,\n+    ) -> Vec<MovePathIndex> {\n         let mut parents = Vec::new();\n \n         let mut curr_parent = self.parent;\n@@ -102,7 +105,7 @@ impl<'tcx> MovePath<'tcx> {\n }\n \n impl<'tcx> fmt::Debug for MovePath<'tcx> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(w, \"MovePath {{\")?;\n         if let Some(parent) = self.parent {\n             write!(w, \" parent: {:?},\", parent)?;\n@@ -118,7 +121,7 @@ impl<'tcx> fmt::Debug for MovePath<'tcx> {\n }\n \n impl<'tcx> fmt::Display for MovePath<'tcx> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(w, \"{:?}\", self.place)\n     }\n }\n@@ -166,7 +169,7 @@ impl<T> IndexMut<Location> for LocationMap<T> {\n }\n \n impl<T> LocationMap<T> where T: Default + Clone {\n-    fn new(mir: &Mir) -> Self {\n+    fn new(mir: &Mir<'_>) -> Self {\n         LocationMap {\n             map: mir.basic_blocks().iter().map(|block| {\n                 vec![T::default(); block.statements.len()+1]\n@@ -190,7 +193,7 @@ pub struct MoveOut {\n }\n \n impl fmt::Debug for MoveOut {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{:?}@{:?}\", self.path, self.source)\n     }\n }\n@@ -227,7 +230,7 @@ pub enum InitKind {\n }\n \n impl fmt::Debug for Init {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{:?}@{:?} ({:?})\", self.path, self.location, self.kind)\n     }\n }"}, {"sha": "c24cf956504daec0e2d139c2aeebbd1238d49dfb", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n-use hair::*;\n-use hair::cx::Cx;\n-use hair::cx::to_ref::ToRef;\n+use crate::hair::*;\n+use crate::hair::cx::Cx;\n+use crate::hair::cx::to_ref::ToRef;\n use rustc::middle::region;\n use rustc::hir;\n use rustc::ty;"}, {"sha": "0759b95a78ff4b8a3940fce61372160145b7594e", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,9 +1,9 @@\n-use hair::*;\n+use crate::hair::*;\n+use crate::hair::cx::Cx;\n+use crate::hair::cx::block;\n+use crate::hair::cx::to_ref::ToRef;\n+use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_data_structures::indexed_vec::Idx;\n-use hair::cx::Cx;\n-use hair::cx::block;\n-use hair::cx::to_ref::ToRef;\n-use hair::util::UserAnnotatedTyHelpers;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::mir::interpret::{GlobalId, ErrorHandled};\n use rustc::ty::{self, AdtKind, Ty};"}, {"sha": "6d61801fc7162f1c6b1cd75923454bf7b8dc6040", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -4,8 +4,8 @@\n //! work.\n //!\n \n-use hair::*;\n-use hair::util::UserAnnotatedTyHelpers;\n+use crate::hair::*;\n+use crate::hair::util::UserAnnotatedTyHelpers;\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n@@ -21,7 +21,7 @@ use syntax::attr;\n use syntax::symbol::Symbol;\n use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n-use hair::constant::{lit_to_const, LitToConstError};\n+use crate::hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n@@ -239,7 +239,7 @@ impl UserAnnotatedTyHelpers<'gcx, 'tcx> for Cx<'_, 'gcx, 'tcx> {\n     }\n }\n \n-fn lint_level_for_hir_id(tcx: TyCtxt, mut id: ast::NodeId) -> ast::NodeId {\n+fn lint_level_for_hir_id(tcx: TyCtxt<'_, '_, '_>, mut id: ast::NodeId) -> ast::NodeId {\n     // Right now we insert a `with_ignore` node in the dep graph here to\n     // ignore the fact that `lint_levels` below depends on the entire crate.\n     // For now this'll prevent false positives of recompiling too much when"}, {"sha": "a462c61c2acba1184bf8aa3c7270adf2e6b0c5a1", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use hair::*;\n+use crate::hair::*;\n \n use rustc::hir;\n use syntax::ptr::P;"}, {"sha": "5779a032acc4d2d3308c87ff4c3f5ce9eec03eb5", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -307,7 +307,7 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n /// + _     + [_, _, ..tail] +\n /// ++++++++++++++++++++++++++\n impl<'p, 'tcx> fmt::Debug for Matrix<'p, 'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"\\n\")?;\n \n         let &Matrix(ref m) = self;\n@@ -442,7 +442,7 @@ impl<'tcx> Constructor<'tcx> {\n                 VariantIdx::new(0)\n             }\n             &ConstantValue(c) => {\n-                ::const_eval::const_variant_index(\n+                crate::const_eval::const_variant_index(\n                     cx.tcx,\n                     cx.param_env,\n                     c,\n@@ -1115,7 +1115,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     } else {\n         debug!(\"is_useful - expanding wildcard\");\n \n-        let used_ctors: Vec<Constructor> = rows.iter().flat_map(|row| {\n+        let used_ctors: Vec<Constructor<'_>> = rows.iter().flat_map(|row| {\n             pat_constructors(cx, row[0], pcx).unwrap_or(vec![])\n         }).collect();\n         debug!(\"used_ctors = {:#?}\", used_ctors);\n@@ -1302,7 +1302,7 @@ fn is_useful_specialized<'p, 'a: 'p, 'tcx: 'a>(\n /// Returns None in case of a catch-all, which can't be specialized.\n fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n                           pat: &Pattern<'tcx>,\n-                          pcx: PatternContext)\n+                          pcx: PatternContext<'_>)\n                           -> Option<Vec<Constructor<'tcx>>>\n {\n     match *pat.kind {"}, {"sha": "978051aab591b9cc0cf2e6d74cf264a4efce71f0", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 return;\n             }\n \n-            let matrix: Matrix = inlined_arms\n+            let matrix: Matrix<'_, '_> = inlined_arms\n                 .iter()\n                 .filter(|&&(_, guard)| guard.is_none())\n                 .flat_map(|arm| &arm.0)\n@@ -248,7 +248,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                                                 self.tables);\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n-            let pats: Matrix = vec![smallvec![\n+            let pats: Matrix<'_, '_> = vec![smallvec![\n                 expand_pattern(cx, pattern)\n             ]].into_iter().collect();\n \n@@ -283,7 +283,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n     }\n }\n \n-fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n+fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n     pat.walk(|p| {\n         if let PatKind::Binding(_, _, _, ident, None) = p.node {\n             if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n@@ -462,7 +462,7 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n }\n \n // Legality of move bindings checking\n-fn check_legality_of_move_bindings(cx: &MatchVisitor,\n+fn check_legality_of_move_bindings(cx: &MatchVisitor<'_, '_>,\n                                    has_guard: bool,\n                                    pats: &[P<Pat>]) {\n     let mut by_ref_span = None;\n@@ -541,7 +541,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n /// assign.\n ///\n /// FIXME: this should be done by borrowck.\n-fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Guard) {\n+fn check_for_mutation_in_guard(cx: &MatchVisitor<'_, '_>, guard: &hir::Guard) {\n     let mut checker = MutationChecker {\n         cx,\n     };\n@@ -561,13 +561,13 @@ struct MutationChecker<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n-    fn matched_pat(&mut self, _: &Pat, _: &cmt_, _: euv::MatchMode) {}\n-    fn consume(&mut self, _: ast::NodeId, _: Span, _: &cmt_, _: ConsumeMode) {}\n-    fn consume_pat(&mut self, _: &Pat, _: &cmt_, _: ConsumeMode) {}\n+    fn matched_pat(&mut self, _: &Pat, _: &cmt_<'_>, _: euv::MatchMode) {}\n+    fn consume(&mut self, _: ast::NodeId, _: Span, _: &cmt_<'_>, _: ConsumeMode) {}\n+    fn consume_pat(&mut self, _: &Pat, _: &cmt_<'_>, _: ConsumeMode) {}\n     fn borrow(&mut self,\n               _: ast::NodeId,\n               span: Span,\n-              _: &cmt_,\n+              _: &cmt_<'_>,\n               _: ty::Region<'tcx>,\n               kind:ty:: BorrowKind,\n               _: LoanCause) {\n@@ -588,7 +588,7 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n         }\n     }\n     fn decl_without_init(&mut self, _: ast::NodeId, _: Span) {}\n-    fn mutate(&mut self, _: ast::NodeId, span: Span, _: &cmt_, mode: MutateMode) {\n+    fn mutate(&mut self, _: ast::NodeId, span: Span, _: &cmt_<'_>, mode: MutateMode) {\n         match mode {\n             MutateMode::JustWrite | MutateMode::WriteAndRead => {\n                 struct_span_err!(self.cx.tcx.sess, span, E0302, \"cannot assign in a pattern guard\")\n@@ -603,7 +603,7 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n /// Forbids bindings in `@` patterns. This is necessary for memory safety,\n /// because of the way rvalues are handled in the borrow check. (See issue\n /// #14587.)\n-fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor, pat: &Pat) {\n+fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n     AtBindingPatternVisitor { cx: cx, bindings_allowed: true }.visit_pat(pat);\n }\n "}, {"sha": "84d8f32954c81ba080454273adbb846ee47a7d23", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -6,10 +6,10 @@ mod check_match;\n pub use self::check_match::check_crate;\n pub(crate) use self::check_match::check_match;\n \n-use const_eval::{const_field, const_variant_index};\n+use crate::const_eval::{const_field, const_variant_index};\n \n-use hair::util::UserAnnotatedTyHelpers;\n-use hair::constant::*;\n+use crate::hair::util::UserAnnotatedTyHelpers;\n+use crate::hair::constant::*;\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n@@ -187,7 +187,7 @@ pub struct PatternRange<'tcx> {\n }\n \n impl<'tcx> fmt::Display for Pattern<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self.kind {\n             PatternKind::Wild => write!(f, \"_\"),\n             PatternKind::AscribeUserType { ref subpattern, .. } =>"}, {"sha": "c87338fb0ce947262b7638c88a1275b2fca746ad", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -322,7 +322,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     ) -> EvalResult<'tcx, TyLayout<'tcx>> {\n         match frame.locals[local].layout.get() {\n             None => {\n-                let layout = ::interpret::operand::from_known_layout(layout, || {\n+                let layout = crate::interpret::operand::from_known_layout(layout, || {\n                     let local_ty = frame.mir.local_decls[local].ty;\n                     let local_ty = self.monomorphize_with_substs(local_ty, frame.instance.substs);\n                     self.layout_of(local_ty)"}, {"sha": "ee295116ba9625f3169e92b9cca8c2d7e8953029", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -25,7 +25,7 @@ use syntax::source_map::Span;\n \n use super::eval_context::{LocalState, StackPopCleanup};\n use super::{Frame, Memory, Operand, MemPlace, Place, Immediate, ScalarMaybeUndef, LocalValue};\n-use const_eval::CompileTimeInterpreter;\n+use crate::const_eval::CompileTimeInterpreter;\n \n #[derive(Default)]\n pub(crate) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir> {\n@@ -200,7 +200,7 @@ impl_snapshot_for!(enum ScalarMaybeUndef {\n     Undef,\n });\n \n-impl_stable_hash_for!(struct ::interpret::MemPlace {\n+impl_stable_hash_for!(struct crate::interpret::MemPlace {\n     ptr,\n     align,\n     meta,\n@@ -211,7 +211,7 @@ impl_snapshot_for!(struct MemPlace {\n     align -> *align, // just copy alignment verbatim\n });\n \n-impl_stable_hash_for!(enum ::interpret::Place {\n+impl_stable_hash_for!(enum crate::interpret::Place {\n     Ptr(mem_place),\n     Local { frame, local },\n });\n@@ -232,7 +232,7 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Place\n     }\n }\n \n-impl_stable_hash_for!(enum ::interpret::Immediate {\n+impl_stable_hash_for!(enum crate::interpret::Immediate {\n     Scalar(x),\n     ScalarPair(x, y),\n });\n@@ -241,7 +241,7 @@ impl_snapshot_for!(enum Immediate {\n     ScalarPair(s, t),\n });\n \n-impl_stable_hash_for!(enum ::interpret::Operand {\n+impl_stable_hash_for!(enum crate::interpret::Operand {\n     Immediate(x),\n     Indirect(x),\n });\n@@ -250,7 +250,7 @@ impl_snapshot_for!(enum Operand {\n     Indirect(m),\n });\n \n-impl_stable_hash_for!(enum ::interpret::LocalValue {\n+impl_stable_hash_for!(enum crate::interpret::LocalValue {\n     Dead,\n     Live(x),\n });\n@@ -298,7 +298,7 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n     }\n }\n \n-impl_stable_hash_for!(enum ::interpret::eval_context::StackPopCleanup {\n+impl_stable_hash_for!(enum crate::interpret::eval_context::StackPopCleanup {\n     Goto(block),\n     None { cleanup },\n });"}, {"sha": "be50daa17092f1698eb180cb5814a98334878b1c", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 let ty = place.layout.ty;\n                 trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n-                let instance = ::monomorphize::resolve_drop_in_place(*self.tcx, ty);\n+                let instance = crate::monomorphize::resolve_drop_in_place(*self.tcx, ty);\n                 self.drop_in_place(\n                     place,\n                     instance,\n@@ -326,7 +326,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     // last incoming argument.  These two iterators do not have the same type,\n                     // so to keep the code paths uniform we accept an allocation\n                     // (for RustCall ABI only).\n-                    let caller_args : Cow<[OpTy<'tcx, M::PointerTag>]> =\n+                    let caller_args : Cow<'_, [OpTy<'tcx, M::PointerTag>]> =\n                         if caller_abi == Abi::RustCall && !args.is_empty() {\n                             // Untuple\n                             let (&untuple_arg, args) = args.split_last().unwrap();\n@@ -335,7 +335,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                                 .chain((0..untuple_arg.layout.fields.count()).into_iter()\n                                     .map(|i| self.operand_field(untuple_arg, i as u64))\n                                 )\n-                                .collect::<EvalResult<Vec<OpTy<'tcx, M::PointerTag>>>>()?)\n+                                .collect::<EvalResult<'_, Vec<OpTy<'tcx, M::PointerTag>>>>()?)\n                         } else {\n                             // Plain arg passing\n                             Cow::from(args)"}, {"sha": "63253bae9078bdfd758c99c86b87c56939e11324", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         ).with_default_tag();\n         let tcx = &*self.tcx;\n \n-        let drop = ::monomorphize::resolve_drop_in_place(*tcx, ty);\n+        let drop = crate::monomorphize::resolve_drop_in_place(*tcx, ty);\n         let drop = self.memory.create_fn_alloc(drop).with_default_tag();\n         // no need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by"}, {"sha": "930bcb44374aa21fc5b52c97e179cd5568aaa3de", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -26,7 +26,7 @@ pub trait Value<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: Copy\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n \n     /// Create this from an `MPlaceTy`.\n-    fn from_mem_place(MPlaceTy<'tcx, M::PointerTag>) -> Self;\n+    fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self;\n \n     /// Project to the given enum variant.\n     fn project_downcast("}, {"sha": "909f96956695dabd9c73d22cd09115d203c64b2d", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -26,39 +26,21 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(slice_concat_ext)]\n #![feature(try_from)]\n #![feature(reverse_bits)]\n+#![feature(try_blocks)]\n \n #![recursion_limit=\"256\"]\n \n-extern crate arena;\n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n \n-#[macro_use]\n-extern crate bitflags;\n #[macro_use] extern crate log;\n-extern crate either;\n-extern crate graphviz as dot;\n-extern crate polonius_engine;\n #[macro_use]\n extern crate rustc;\n #[macro_use] extern crate rustc_data_structures;\n-extern crate serialize as rustc_serialize;\n-extern crate rustc_errors;\n+#[allow(unused_extern_crates)]\n+extern crate serialize as rustc_serialize; // used by deriving\n #[macro_use]\n extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc_target;\n-extern crate log_settings;\n-extern crate rustc_apfloat;\n-extern crate byteorder;\n-extern crate core;\n-extern crate smallvec;\n-\n-// Once we can use edition 2018 in the compiler,\n-// replace this with real try blocks.\n-macro_rules! try_block {\n-    ($($inside:tt)*) => (\n-        (||{ ::std::ops::Try::from_ok({ $($inside)* }) })()\n-    )\n-}\n \n mod diagnostics;\n \n@@ -77,7 +59,7 @@ pub mod const_eval;\n pub use hair::pattern::check_crate as matchck_crate;\n use rustc::ty::query::Providers;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     borrow_check::provide(providers);\n     shim::provide(providers);\n     transform::provide(providers);"}, {"sha": "6b6e8fcdc82cf57bcdf46a94bad09ff87d03d450", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -18,7 +18,7 @@ pub fn check(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                        fn_kind: FnKind,\n+                                        fn_kind: FnKind<'_>,\n                                         mir: &Mir<'tcx>,\n                                         def_id: DefId) {\n     if let FnKind::Closure(_) = fn_kind {"}, {"sha": "7f3c24daf606d4203e2e456bada43639b8090a3c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -189,11 +189,11 @@ use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::MonoItem;\n use rustc::mir::interpret::{Scalar, GlobalId, AllocKind, ErrorHandled};\n \n-use monomorphize::{self, Instance};\n+use crate::monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n use rustc::util::common::time;\n \n-use monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n+use crate::monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bit_set::GrowableBitSet;\n use rustc_data_structures::sync::{MTRef, MTLock, ParallelIterator, par_iter};"}, {"sha": "d3381f463f49ed1aa06278dbb34c87af3dc06b0f", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use monomorphize::Instance;\n+use crate::monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::OptLevel;"}, {"sha": "d4c7ebefe1753027ce6078fc7a9cebe26a738813", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -111,9 +111,9 @@ use rustc::util::common::time;\n use rustc::util::nodemap::{DefIdSet, FxHashMap, FxHashSet};\n use rustc::mir::mono::MonoItem;\n \n-use monomorphize::collector::InliningMap;\n-use monomorphize::collector::{self, MonoItemCollectionMode};\n-use monomorphize::item::{MonoItemExt, InstantiationMode};\n+use crate::monomorphize::collector::InliningMap;\n+use crate::monomorphize::collector::{self, MonoItemCollectionMode};\n+use crate::monomorphize::item::{MonoItemExt, InstantiationMode};\n \n pub use rustc::mir::mono::CodegenUnit;\n \n@@ -146,7 +146,7 @@ pub trait CodegenUnitExt<'tcx> {\n         WorkProductId::from_cgu_name(&self.name().as_str())\n     }\n \n-    fn work_product(&self, tcx: TyCtxt) -> WorkProduct {\n+    fn work_product(&self, tcx: TyCtxt<'_, '_, '_>) -> WorkProduct {\n         let work_product_id = self.work_product_id();\n         tcx.dep_graph\n            .previous_work_product(&work_product_id)\n@@ -213,7 +213,7 @@ impl<'tcx> CodegenUnitExt<'tcx> for CodegenUnit<'tcx> {\n }\n \n // Anything we can't find a proper codegen unit for goes into this.\n-fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder) -> InternedString {\n+fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_, '_>) -> InternedString {\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n }\n \n@@ -536,7 +536,7 @@ fn mono_item_visibility(\n     }\n }\n \n-fn default_visibility(tcx: TyCtxt, id: DefId, is_generic: bool) -> Visibility {\n+fn default_visibility(tcx: TyCtxt<'_, '_, '_>, id: DefId, is_generic: bool) -> Visibility {\n     if !tcx.sess.target.target.options.default_hidden_visibility {\n         return Visibility::Default\n     }\n@@ -795,8 +795,8 @@ fn characteristic_def_id_of_mono_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n type CguNameCache = FxHashMap<(DefId, bool), InternedString>;\n \n-fn compute_codegen_unit_name(tcx: TyCtxt,\n-                             name_builder: &mut CodegenUnitNameBuilder,\n+fn compute_codegen_unit_name(tcx: TyCtxt<'_, '_, '_>,\n+                             name_builder: &mut CodegenUnitNameBuilder<'_, '_, '_>,\n                              def_id: DefId,\n                              volatile: bool,\n                              cache: &mut CguNameCache)\n@@ -855,7 +855,7 @@ fn compute_codegen_unit_name(tcx: TyCtxt,\n     }).clone()\n }\n \n-fn numbered_codegen_unit_name(name_builder: &mut CodegenUnitNameBuilder,\n+fn numbered_codegen_unit_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_, '_>,\n                               index: usize)\n                               -> InternedString {\n     name_builder.build_cgu_name_no_mangle(LOCAL_CRATE, &[\"cgu\"], Some(index))\n@@ -929,7 +929,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n \n     tcx.sess.abort_if_errors();\n \n-    ::monomorphize::assert_symbols_are_distinct(tcx, items.iter());\n+    crate::monomorphize::assert_symbols_are_distinct(tcx, items.iter());\n \n     let strategy = if tcx.sess.opts.incremental.is_some() {\n         PartitioningStrategy::PerModule\n@@ -1013,7 +1013,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n     (Arc::new(mono_items), Arc::new(codegen_units))\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     providers.collect_and_partition_mono_items =\n         collect_and_partition_mono_items;\n "}, {"sha": "942e7a1f1bbbdef1a6466088ebb1a6ecbdaa64e1", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -16,12 +16,12 @@ use syntax_pos::Span;\n use std::fmt;\n use std::iter;\n \n-use transform::{add_moves_for_packed_drops, add_call_guards};\n-use transform::{remove_noop_landing_pads, no_landing_pads, simplify};\n-use util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n-use util::patch::MirPatch;\n+use crate::transform::{add_moves_for_packed_drops, add_call_guards};\n+use crate::transform::{remove_noop_landing_pads, no_landing_pads, simplify};\n+use crate::util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n+use crate::util::patch::MirPatch;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     providers.mir_shims = make_shim;\n }\n \n@@ -138,7 +138,7 @@ enum CallKind {\n     Direct(DefId),\n }\n \n-fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n+fn temp_decl(mutability: Mutability, ty: Ty<'_>, span: Span) -> LocalDecl<'_> {\n     let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n         mutability,\n@@ -259,7 +259,7 @@ pub struct DropShimElaborator<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> fmt::Debug for DropShimElaborator<'a, 'tcx> {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         Ok(())\n     }\n }"}, {"sha": "dab96faaa2a5ecfe6e1039bbd2b0945b93319397", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n #[derive(PartialEq)]\n pub enum AddCallGuards {\n@@ -40,7 +40,7 @@ impl MirPass for AddCallGuards {\n }\n \n impl AddCallGuards {\n-    pub fn add_call_guards(&self, mir: &mut Mir) {\n+    pub fn add_call_guards(&self, mir: &mut Mir<'_>) {\n         let pred_count: IndexVec<_, _> =\n             mir.predecessors().iter().map(|ps| ps.len()).collect();\n "}, {"sha": "1492f0c50a31a67703d7cdc65f6dc4d2832fda3a", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,9 +2,9 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::TyCtxt;\n \n-use transform::{MirPass, MirSource};\n-use util::patch::MirPatch;\n-use util;\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::patch::MirPatch;\n+use crate::util;\n \n // This pass moves values being dropped that are within a packed\n // struct to a separate local before dropping them, to ensure that"}, {"sha": "7bfcd318afe2d8adb94ebd1ab21f2a2532c76621", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -6,7 +6,7 @@\n \n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct AddRetag;\n "}, {"sha": "b2e1afc519ec596b56d07e4921fcc48c4209688e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -17,7 +17,7 @@ use syntax::symbol::Symbol;\n \n use std::ops::Bound;\n \n-use util;\n+use crate::util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n@@ -458,7 +458,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     }\n }\n \n-pub(crate) fn provide(providers: &mut Providers) {\n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         unsafety_check_result,\n         unsafe_derive_on_repr_packed,\n@@ -575,7 +575,7 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n }\n \n /// Return the NodeId for an enclosing scope that is also `unsafe`\n-fn is_enclosed(tcx: TyCtxt,\n+fn is_enclosed(tcx: TyCtxt<'_, '_, '_>,\n                used_unsafe: &FxHashSet<ast::NodeId>,\n                id: ast::NodeId) -> Option<(String, ast::NodeId)> {\n     let parent_id = tcx.hir().get_parent_node(id);\n@@ -598,7 +598,9 @@ fn is_enclosed(tcx: TyCtxt,\n     }\n }\n \n-fn report_unused_unsafe(tcx: TyCtxt, used_unsafe: &FxHashSet<ast::NodeId>, id: ast::NodeId) {\n+fn report_unused_unsafe(tcx: TyCtxt<'_, '_, '_>,\n+                        used_unsafe: &FxHashSet<ast::NodeId>,\n+                        id: ast::NodeId) {\n     let span = tcx.sess.source_map().def_span(tcx.hir().span(id));\n     let msg = \"unnecessary `unsafe` block\";\n     let mut db = tcx.struct_span_lint_node(UNUSED_UNSAFE, id, span, msg);"}, {"sha": "240ef7c8ba42a8e8d65e64abab3ecd8625a2c543", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -26,7 +26,7 @@ use rustc::mir::{BasicBlock, FakeReadCause, Local, Location, Mir, Place};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct CleanAscribeUserType;\n "}, {"sha": "dd1f37a591888351564218e7d112e4166ff45d08", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -18,12 +18,12 @@ use rustc::ty::layout::{\n     HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n-use interpret::{self, EvalContext, ScalarMaybeUndef, Immediate, OpTy, MemoryKind};\n-use const_eval::{\n+use crate::interpret::{self, EvalContext, ScalarMaybeUndef, Immediate, OpTy, MemoryKind};\n+use crate::const_eval::{\n     CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n     lazy_const_to_op,\n };\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct ConstProp;\n \n@@ -486,7 +486,7 @@ struct CanConstProp {\n \n impl CanConstProp {\n     /// returns true if `local` can be propagated\n-    fn check(mir: &Mir) -> IndexVec<Local, bool> {\n+    fn check(mir: &Mir<'_>) -> IndexVec<Local, bool> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(true, &mir.local_decls),\n             found_assignment: IndexVec::from_elem(false, &mir.local_decls),"}, {"sha": "4789c35740eb3ce5df82e9326366042fc44f4f1c", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -22,8 +22,8 @@\n use rustc::mir::{Constant, Local, LocalKind, Location, Place, Mir, Operand, Rvalue, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n-use transform::{MirPass, MirSource};\n-use util::def_use::DefUseAnalysis;\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::def_use::DefUseAnalysis;\n \n pub struct CopyPropagation;\n \n@@ -173,7 +173,7 @@ enum Action<'tcx> {\n }\n \n impl<'tcx> Action<'tcx> {\n-    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis, src_place: &Place<'tcx>)\n+    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis<'_>, src_place: &Place<'tcx>)\n                   -> Option<Action<'tcx>> {\n         // The source must be a local.\n         let src_local = if let Place::Local(local) = *src_place {"}, {"sha": "669384e31dac354dfbf601e9c61e7ecc2b6152c8", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc_data_structures::indexed_vec::Idx;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct Deaggregator;\n "}, {"sha": "d7f697a320049325992ed5bfdc5cadd79cb89f9a", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -8,8 +8,8 @@ use std::io;\n use rustc::mir::Mir;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n-use transform::{MirPass, MirSource};\n-use util as mir_util;\n+use crate::transform::{MirPass, MirSource};\n+use crate::util as mir_util;\n \n pub struct Marker(pub &'static str);\n \n@@ -31,7 +31,7 @@ pub struct Disambiguator {\n }\n \n impl fmt::Display for Disambiguator {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let title = if self.is_after { \"after\" } else { \"before\" };\n         write!(formatter, \"{}\", title)\n     }"}, {"sha": "4aaa0be7964a4f7a3c5a4ff6ba7f90cf97977ae4", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,10 +1,14 @@\n-use dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n-use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use dataflow::{DataflowResults};\n-use dataflow::{on_all_children_bits, on_all_drop_children_bits};\n-use dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n-use dataflow::MoveDataParamEnv;\n-use dataflow::{self, do_dataflow, DebugFormatted};\n+use crate::dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n+use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use crate::dataflow::{DataflowResults};\n+use crate::dataflow::{on_all_children_bits, on_all_drop_children_bits};\n+use crate::dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n+use crate::dataflow::MoveDataParamEnv;\n+use crate::dataflow::{self, do_dataflow, DebugFormatted};\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::patch::MirPatch;\n+use crate::util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};\n+use crate::util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::VariantIdx;\n use rustc::mir::*;\n@@ -13,10 +17,6 @@ use rustc_data_structures::bit_set::BitSet;\n use std::fmt;\n use syntax::ast;\n use syntax_pos::Span;\n-use transform::{MirPass, MirSource};\n-use util::patch::MirPatch;\n-use util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};\n-use util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};\n \n pub struct ElaborateDrops;\n \n@@ -174,7 +174,7 @@ struct Elaborator<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> fmt::Debug for Elaborator<'a, 'b, 'tcx> {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }"}, {"sha": "b555a2aa83ee3dd87534bb37e74e2641bbac07b2", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, TyContext};\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "9897f9833ca621817d93eb8b66883ada609daa8d", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -56,19 +56,19 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutVisitor};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::Substs;\n-use util::dump_mir;\n-use util::liveness::{self, IdentityMap};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::bit_set::BitSet;\n use std::borrow::Cow;\n use std::iter::once;\n use std::mem;\n-use transform::{MirPass, MirSource};\n-use transform::simplify;\n-use transform::no_landing_pads::no_landing_pads;\n-use dataflow::{do_dataflow, DebugFormatted, state_for_location};\n-use dataflow::{MaybeStorageLive, HaveBeenBorrowedLocals};\n+use crate::transform::{MirPass, MirSource};\n+use crate::transform::simplify;\n+use crate::transform::no_landing_pads::no_landing_pads;\n+use crate::dataflow::{do_dataflow, DebugFormatted, state_for_location};\n+use crate::dataflow::{MaybeStorageLive, HaveBeenBorrowedLocals};\n+use crate::util::dump_mir;\n+use crate::util::liveness::{self, IdentityMap};\n \n pub struct StateTransform;\n \n@@ -581,9 +581,9 @@ fn insert_switch<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        def_id: DefId,\n                                        mir: &mut Mir<'tcx>) {\n-    use util::elaborate_drops::{elaborate_drop, Unwind};\n-    use util::patch::MirPatch;\n-    use shim::DropShimElaborator;\n+    use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n+    use crate::util::patch::MirPatch;\n+    use crate::shim::DropShimElaborator;\n \n     // Note that `elaborate_drops` only drops the upvars of a generator, and\n     // this is ok because `open_drop` can only be reached within that own"}, {"sha": "4fddf6f8e09c20ab0feaa135181e74de1e7942a9", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -13,10 +13,10 @@ use rustc::ty::subst::{Subst,Substs};\n \n use std::collections::VecDeque;\n use std::iter;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n \n-use syntax::{attr};\n+use syntax::attr;\n use rustc_target::spec::abi::Abi;\n \n const DEFAULT_THRESHOLD: usize = 50;\n@@ -426,7 +426,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 // Place could result in two different locations if `f`\n                 // writes to `i`. To prevent this we need to create a temporary\n                 // borrow of the place and pass the destination as `*temp` instead.\n-                fn dest_needs_borrow(place: &Place) -> bool {\n+                fn dest_needs_borrow(place: &Place<'_>) -> bool {\n                     match *place {\n                         Place::Projection(ref p) => {\n                             match p.elem {"}, {"sha": "21772e1f1cd5b08e56e4b05607576c831a011876", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{TyCtxt, TyKind};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct InstCombine;\n "}, {"sha": "aa248ba7c53dfd6ca2105f55c038d327a71e0d70", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -5,8 +5,7 @@ use rustc::middle::lang_items::LangItem;\n use rustc::mir::*;\n use rustc::ty::{List, Ty, TyCtxt, TyKind};\n use rustc_data_structures::indexed_vec::{Idx};\n-use transform::{MirPass, MirSource};\n-use syntax;\n+use crate::transform::{MirPass, MirSource};\n \n pub struct Lower128Bit;\n \n@@ -182,7 +181,7 @@ impl RhsKind {\n     }\n }\n \n-fn sign_of_128bit(ty: Ty) -> Option<bool> {\n+fn sign_of_128bit(ty: Ty<'_>) -> Option<bool> {\n     match ty.sty {\n         TyKind::Int(syntax::ast::IntTy::I128) => Some(true),\n         TyKind::Uint(syntax::ast::UintTy::U128) => Some(false),"}, {"sha": "cc37a8381f234da9b21ad6117dd44e6a337c5355", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use borrow_check::nll::type_check;\n-use build;\n+use crate::borrow_check::nll::type_check;\n+use crate::build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::mir::{Mir, MirPhase, Promoted};\n use rustc::ty::TyCtxt;\n@@ -38,7 +38,7 @@ pub mod inline;\n pub mod lower_128bit;\n pub mod uniform_array_move_out;\n \n-pub(crate) fn provide(providers: &mut Providers) {\n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n     self::qualify_consts::provide(providers);\n     self::check_unsafety::provide(providers);\n     *providers = Providers {"}, {"sha": "15b59d36d363c75f52f9dad8c5f8858a0d22158f", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -4,7 +4,7 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct NoLandingPads;\n "}, {"sha": "d1dc5cfec994de503a14674f0cb4995d92fbb73e", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -130,7 +130,8 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n     }\n }\n \n-pub fn collect_temps(mir: &Mir, rpo: &mut ReversePostorder) -> IndexVec<Local, TempState> {\n+pub fn collect_temps(mir: &Mir<'_>,\n+                     rpo: &mut ReversePostorder<'_, '_>) -> IndexVec<Local, TempState> {\n     let mut collector = TempCollector {\n         temps: IndexVec::from_elem(TempState::Undefined, &mir.local_decls),\n         span: mir.span,"}, {"sha": "ab4e3ad23f69aa3c156e2d08eea6eee5c0ea3d80", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -27,10 +27,10 @@ use syntax_pos::{Span, DUMMY_SP};\n use std::fmt;\n use std::usize;\n \n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n use super::promote_consts::{self, Candidate, TempState};\n \n-bitflags! {\n+bitflags::bitflags! {\n     // Borrows of temporaries can be promoted only if\n     // they have none of these qualifications, with\n     // the exception of `STATIC_REF` (in statics only).\n@@ -84,7 +84,7 @@ enum Mode {\n }\n \n impl fmt::Display for Mode {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             Mode::Const => write!(f, \"constant\"),\n             Mode::Static | Mode::StaticMut => write!(f, \"static\"),\n@@ -1128,7 +1128,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         mir_const_qualif,\n         ..*providers\n@@ -1317,7 +1317,7 @@ impl MirPass for QualifyAndPromoteConstants {\n     }\n }\n \n-fn args_required_const(tcx: TyCtxt, def_id: DefId) -> Option<FxHashSet<usize>> {\n+fn args_required_const(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<FxHashSet<usize>> {\n     let attrs = tcx.get_attrs(def_id);\n     let attr = attrs.iter().find(|a| a.check_name(\"rustc_args_required_const\"))?;\n     let mut ret = FxHashSet::default();"}, {"sha": "4fcb4c10f9e6d2604a86cf39a9f5d520c9767211", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc_data_structures::bit_set::BitSet;\n-use transform::{MirPass, MirSource};\n-use util::patch::MirPatch;\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::patch::MirPatch;\n \n /// A pass that removes no-op landing pads and replaces jumps to them with\n /// `None`. This is important because otherwise LLVM generates terrible\n@@ -34,7 +34,7 @@ impl RemoveNoopLandingPads {\n     fn is_nop_landing_pad(\n         &self,\n         bb: BasicBlock,\n-        mir: &Mir,\n+        mir: &Mir<'_>,\n         nop_landing_pads: &BitSet<BasicBlock>,\n     ) -> bool {\n         for stmt in &mir[bb].statements {\n@@ -86,7 +86,7 @@ impl RemoveNoopLandingPads {\n         }\n     }\n \n-    fn remove_nop_landing_pads(&self, mir: &mut Mir) {\n+    fn remove_nop_landing_pads(&self, mir: &mut Mir<'_>) {\n         // make sure there's a single resume block\n         let resume_block = {\n             let patch = MirPatch::new(mir);"}, {"sha": "806c1c1cca457daaf7cd9558251d5a0bb27b4d7f", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -5,18 +5,20 @@ use syntax_pos::Span;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir, Location};\n use rustc_data_structures::bit_set::BitSet;\n-use transform::{MirPass, MirSource};\n-\n-use dataflow::{do_dataflow, DebugFormatted};\n-use dataflow::MoveDataParamEnv;\n-use dataflow::BitDenotation;\n-use dataflow::DataflowResults;\n-use dataflow::{DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use dataflow::move_paths::{MovePathIndex, LookupResult};\n-use dataflow::move_paths::{HasMoveData, MoveData};\n-use dataflow;\n-\n-use dataflow::has_rustc_mir_with;\n+use crate::transform::{MirPass, MirSource};\n+\n+use crate::dataflow::{do_dataflow, DebugFormatted};\n+use crate::dataflow::MoveDataParamEnv;\n+use crate::dataflow::BitDenotation;\n+use crate::dataflow::DataflowResults;\n+use crate::dataflow::{\n+    DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces\n+};\n+use crate::dataflow::move_paths::{MovePathIndex, LookupResult};\n+use crate::dataflow::move_paths::{HasMoveData, MoveData};\n+use crate::dataflow;\n+\n+use crate::dataflow::has_rustc_mir_with;\n \n pub struct SanityCheck;\n "}, {"sha": "90486d1566413ca07c8fb744846ccff6f4e8b1e4", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -34,7 +34,7 @@ use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext};\n use rustc::session::config::DebugInfo;\n use std::borrow::Cow;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n pub struct SimplifyCfg { label: String }\n \n@@ -44,7 +44,7 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(mir: &mut Mir) {\n+pub fn simplify_cfg(mir: &mut Mir<'_>) {\n     CfgSimplifier::new(mir).simplify();\n     remove_dead_blocks(mir);\n \n@@ -263,7 +263,7 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(mir: &mut Mir) {\n+pub fn remove_dead_blocks(mir: &mut Mir<'_>) {\n     let mut seen = BitSet::new_empty(mir.basic_blocks().len());\n     for (bb, _) in traversal::preorder(mir) {\n         seen.insert(bb.index());"}, {"sha": "0dc89bfe14709c053b409d2b2466a9eced923281", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::ty::{TyCtxt, ParamEnv};\n use rustc::mir::*;\n-use transform::{MirPass, MirSource};\n+use crate::transform::{MirPass, MirSource};\n \n use std::borrow::Cow;\n "}, {"sha": "09918436817f39ca0594b8a089f4078d8465c436", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -30,9 +30,9 @@ use rustc::ty;\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::{Visitor, PlaceContext, NonUseContext};\n-use transform::{MirPass, MirSource};\n-use util::patch::MirPatch;\n use rustc_data_structures::indexed_vec::{IndexVec};\n+use crate::transform::{MirPass, MirSource};\n+use crate::util::patch::MirPatch;\n \n pub struct UniformArrayMoveOut;\n "}, {"sha": "fd694ddbbd19f994da5ccbe7f895b6cf0c52f5b9", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -12,7 +12,7 @@ pub enum Origin {\n }\n \n impl fmt::Display for Origin {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // If the user passed `-Z borrowck=compare`, then include\n         // origin info as part of the error report,\n         // otherwise\n@@ -437,7 +437,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_move_out_of_interior_noncopy(\n         self,\n         move_from_span: Span,\n-        ty: ty::Ty,\n+        ty: ty::Ty<'_>,\n         is_index: Option<bool>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -464,7 +464,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_move_out_of_interior_of_drop(\n         self,\n         move_from_span: Span,\n-        container_ty: ty::Ty,\n+        container_ty: ty::Ty<'_>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!("}, {"sha": "3b9d7c3612a5739f7a7c891932eb290d9146a029", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -107,7 +107,7 @@ impl<'tcx> Info<'tcx> {\n \n     pub fn defs_not_including_drop(\n         &self,\n-    ) -> iter::Filter<slice::Iter<Use<'tcx>>, fn(&&Use<'tcx>) -> bool> {\n+    ) -> iter::Filter<slice::Iter<'_, Use<'tcx>>, fn(&&Use<'tcx>) -> bool> {\n         self.defs_and_uses.iter().filter(|place_use| {\n             place_use.context.is_mutating_use() && !place_use.context.is_drop()\n         })"}, {"sha": "23e92b3e933d384f9a1e2a13fc9852f87917f19f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::Substs;\n use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n-use util::patch::MirPatch;\n+use crate::util::patch::MirPatch;\n \n use std::u32;\n "}, {"sha": "e93b96c12161cd86aaba5b3dd5a09b8b77aff9ec", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,3 @@\n-use dot;\n use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::TyCtxt;\n@@ -24,7 +23,7 @@ pub fn write_mir_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n /// Write a graphviz DOT graph of the MIR.\n pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n                                       def_id: DefId,\n-                                      mir: &Mir,\n+                                      mir: &Mir<'_>,\n                                       w: &mut W) -> io::Result<()>\n     where W: Write\n {\n@@ -58,7 +57,7 @@ pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n /// `init` and `fini` are callbacks for emitting additional rows of\n /// data (using HTML enclosed with `<tr>` in the emitted text).\n pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,\n-                                              mir: &Mir,\n+                                              mir: &Mir<'_>,\n                                               w: &mut W,\n                                               num_cols: u32,\n                                               init: INIT,\n@@ -100,7 +99,7 @@ pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,\n }\n \n /// Write a graphviz DOT node for the given basic block.\n-fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n+fn write_node<W: Write>(block: BasicBlock, mir: &Mir<'_>, w: &mut W) -> io::Result<()> {\n     // Start a new node with the label to follow, in one of DOT's pseudo-HTML tables.\n     write!(w, r#\"    {} [shape=\"none\", label=<\"#, node(block))?;\n     write_node_label(block, mir, w, 1, |_| Ok(()), |_| Ok(()))?;\n@@ -109,7 +108,7 @@ fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<(\n }\n \n /// Write graphviz DOT edges with labels between the given basic block and all of its successors.\n-fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n+fn write_edges<W: Write>(source: BasicBlock, mir: &Mir<'_>, w: &mut W) -> io::Result<()> {\n     let terminator = mir[source].terminator();\n     let labels = terminator.kind.fmt_successor_labels();\n \n@@ -125,7 +124,7 @@ fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result\n /// all the variables and temporaries.\n fn write_graph_label<'a, 'gcx, 'tcx, W: Write>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                def_id: DefId,\n-                                               mir: &Mir,\n+                                               mir: &Mir<'_>,\n                                                w: &mut W)\n                                                -> io::Result<()> {\n     write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.item_path_str(def_id)))?;"}, {"sha": "08ef58a232170f2a794913d7282b72ace8baf248", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -35,8 +35,8 @@ use rustc_data_structures::work_queue::WorkQueue;\n use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n-use transform::MirSource;\n-use util::pretty::{dump_enabled, write_basic_block, write_mir_intro};\n+use crate::transform::MirSource;\n+use crate::util::pretty::{dump_enabled, write_basic_block, write_mir_intro};\n \n pub type LiveVarSet<V> = BitSet<V>;\n "}, {"sha": "366cd71f6d4e9551646247aefd6414f3ee4878c1", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -170,14 +170,14 @@ impl<'tcx> MirPatch<'tcx> {\n         }\n     }\n \n-    pub fn source_info_for_index(data: &BasicBlockData, loc: Location) -> SourceInfo {\n+    pub fn source_info_for_index(data: &BasicBlockData<'_>, loc: Location) -> SourceInfo {\n         match data.statements.get(loc.statement_index) {\n             Some(stmt) => stmt.source_info,\n             None => data.terminator().source_info\n         }\n     }\n \n-    pub fn source_info_for_location(&self, mir: &Mir, loc: Location) -> SourceInfo {\n+    pub fn source_info_for_location(&self, mir: &Mir<'_>, loc: Location) -> SourceInfo {\n         let data = match loc.block.index().checked_sub(mir.basic_blocks().len()) {\n             Some(new) => &self.new_blocks[new],\n             None => &mir[loc.block]"}, {"sha": "2e1fc756833b8dceda85a4345e411e015f87f4ed", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -12,7 +12,7 @@ use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n use super::graphviz::write_mir_fn_graphviz;\n-use transform::MirSource;\n+use crate::transform::MirSource;\n \n const INDENT: &str = \"    \";\n /// Alignment for lining up comments following MIR statements\n@@ -131,7 +131,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n ) where\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n-    let _: io::Result<()> = try_block! {\n+    let _: io::Result<()> = try {\n         let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, source)?;\n         writeln!(file, \"// MIR for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n@@ -148,7 +148,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     };\n \n     if tcx.sess.opts.debugging_opts.dump_mir_graphviz {\n-        let _: io::Result<()> = try_block! {\n+        let _: io::Result<()> = try {\n             let mut file =\n                 create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, source)?;\n             write_mir_fn_graphviz(tcx, source.def_id, mir, &mut file)?;\n@@ -446,7 +446,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n     }\n }\n \n-fn comment(tcx: TyCtxt, SourceInfo { span, scope }: SourceInfo) -> String {\n+fn comment(tcx: TyCtxt<'_, '_, '_>, SourceInfo { span, scope }: SourceInfo) -> String {\n     format!(\n         \"scope {} at {}\",\n         scope.index(),\n@@ -458,8 +458,8 @@ fn comment(tcx: TyCtxt, SourceInfo { span, scope }: SourceInfo) -> String {\n ///\n /// Returns the total number of variables printed.\n fn write_scope_tree(\n-    tcx: TyCtxt,\n-    mir: &Mir,\n+    tcx: TyCtxt<'_, '_, '_>,\n+    mir: &Mir<'_>,\n     scope_tree: &FxHashMap<SourceScope, Vec<SourceScope>>,\n     w: &mut dyn Write,\n     parent: SourceScope,\n@@ -529,7 +529,7 @@ fn write_scope_tree(\n pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     src: MirSource,\n-    mir: &Mir,\n+    mir: &Mir<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n     write_mir_sig(tcx, src, mir, w)?;\n@@ -568,7 +568,12 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     Ok(())\n }\n \n-fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n+fn write_mir_sig(\n+    tcx: TyCtxt<'_, '_, '_>,\n+    src: MirSource,\n+    mir: &Mir<'_>,\n+    w: &mut dyn Write,\n+) -> io::Result<()> {\n     let id = tcx.hir().as_local_node_id(src.def_id).unwrap();\n     let body_owner_kind = tcx.hir().body_owner_kind(id);\n     match (body_owner_kind, src.promoted) {\n@@ -614,7 +619,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> i\n     Ok(())\n }\n \n-fn write_temp_decls(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n+fn write_temp_decls(mir: &Mir<'_>, w: &mut dyn Write) -> io::Result<()> {\n     // Compiler-introduced temporary types.\n     for temp in mir.temps_iter() {\n         writeln!(\n@@ -630,7 +635,7 @@ fn write_temp_decls(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     Ok(())\n }\n \n-fn write_user_type_annotations(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n+fn write_user_type_annotations(mir: &Mir<'_>, w: &mut dyn Write) -> io::Result<()> {\n     if !mir.user_type_annotations.is_empty() {\n         writeln!(w, \"| User Type Annotations\")?;\n     }\n@@ -643,7 +648,7 @@ fn write_user_type_annotations(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     Ok(())\n }\n \n-pub fn dump_mir_def_ids(tcx: TyCtxt, single: Option<DefId>) -> Vec<DefId> {\n+pub fn dump_mir_def_ids(tcx: TyCtxt<'_, '_, '_>, single: Option<DefId>) -> Vec<DefId> {\n     if let Some(i) = single {\n         vec![i]\n     } else {"}, {"sha": "00bdcdc0cc021151de881115c9b99b3fbd97d551", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_passes\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_passes\"\n@@ -16,4 +17,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }"}, {"sha": "a391a316312692393a3a9d351f1844d8f80140fe", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -17,10 +17,11 @@ use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n use syntax::ptr::P;\n use syntax::visit::{self, Visitor};\n+use syntax::{span_err, struct_span_err, walk_list};\n use syntax_ext::proc_macro_decls::is_proc_macro_attr;\n use syntax_pos::Span;\n-use errors;\n use errors::Applicability;\n+use log::debug;\n \n struct AstValidator<'a> {\n     session: &'a Session,"}, {"sha": "19d4d3aeb0f6530e06a0a724bb89c2cb0e52b4b6", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,7 @@\n #![allow(non_snake_case)]\n \n+use syntax::{register_diagnostic, register_diagnostics, register_long_diagnostics};\n+\n register_long_diagnostics! {\n /*\n E0014: r##\""}, {"sha": "2427abad07c958853f3451c0bab378f231755cb1", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -61,7 +61,7 @@ impl<'k> StatCollector<'k> {\n         });\n \n         entry.count += 1;\n-        entry.size = ::std::mem::size_of_val(node);\n+        entry.size = std::mem::size_of_val(node);\n     }\n \n     fn print(&self, title: &str) {"}, {"sha": "ff2e345d08401a5132059b8c45c5401d7d2d2b6c", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -11,18 +11,10 @@\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use]\n-extern crate rustc;\n-extern crate rustc_mir;\n-extern crate rustc_data_structures;\n+#![deny(rust_2018_idioms)]\n \n #[macro_use]\n-extern crate log;\n-#[macro_use]\n-extern crate syntax;\n-extern crate syntax_ext;\n-extern crate syntax_pos;\n-extern crate rustc_errors as errors;\n+extern crate rustc;\n \n use rustc::ty::query::Providers;\n \n@@ -36,7 +28,7 @@ pub mod loops;\n \n __build_diagnostic_array! { librustc_passes, DIAGNOSTICS }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     rvalue_promotion::provide(providers);\n     loops::provide(providers);\n }"}, {"sha": "533e043efa9d223f4f3f1addc239f21a25d58b46", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use self::Context::*;\n+use Context::*;\n \n use rustc::session::Session;\n \n@@ -9,6 +9,7 @@ use rustc::hir::map::Map;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Node, Destination};\n use syntax::ast;\n+use syntax::struct_span_err;\n use syntax_pos::Span;\n use errors::Applicability;\n \n@@ -59,7 +60,7 @@ fn check_mod_loops<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     }.as_deep_visitor());\n }\n \n-pub(crate) fn provide(providers: &mut Providers) {\n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         check_mod_loops,\n         ..*providers"}, {"sha": "8d33fef5303ed11e3d8fa830ee5f3dc366646352", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -28,10 +28,11 @@ use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n-use self::Promotability::*;\n+use log::debug;\n+use Promotability::*;\n use std::ops::{BitAnd, BitAndAssign, BitOr};\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         rvalue_promotable_map,\n         const_is_rvalue_promotable_to_static,\n@@ -621,7 +622,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n     fn consume(&mut self,\n                _consume_id: ast::NodeId,\n                _consume_span: Span,\n-               _cmt: &mc::cmt_,\n+               _cmt: &mc::cmt_<'_>,\n                _mode: euv::ConsumeMode) {}\n \n     fn borrow(&mut self,\n@@ -680,11 +681,14 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n     fn mutate(&mut self,\n               _assignment_id: ast::NodeId,\n               _assignment_span: Span,\n-              _assignee_cmt: &mc::cmt_,\n+              _assignee_cmt: &mc::cmt_<'_>,\n               _mode: euv::MutateMode) {\n     }\n \n-    fn matched_pat(&mut self, _: &hir::Pat, _: &mc::cmt_, _: euv::MatchMode) {}\n+    fn matched_pat(&mut self, _: &hir::Pat, _: &mc::cmt_<'_>, _: euv::MatchMode) {}\n \n-    fn consume_pat(&mut self, _consume_pat: &hir::Pat, _cmt: &mc::cmt_, _mode: euv::ConsumeMode) {}\n+    fn consume_pat(&mut self,\n+                   _consume_pat: &hir::Pat,\n+                   _cmt: &mc::cmt_<'_>,\n+                   _mode: euv::ConsumeMode) {}\n }"}, {"sha": "8bb2e722b57941d6e8cc5a4a28987c2654e58315", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_save_analysis\""}, {"sha": "1a49056bc7f2695207d83f96a69caf57824b7b7c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -16,6 +16,7 @@\n use rustc::hir::def::Def as HirDef;\n use rustc::hir::def_id::DefId;\n use rustc::session::config::Input;\n+use rustc::span_bug;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n \n@@ -32,16 +33,20 @@ use syntax::print::pprust::{\n };\n use syntax::ptr::P;\n use syntax::source_map::{Spanned, DUMMY_SP, respan};\n+use syntax::walk_list;\n use syntax_pos::*;\n \n-use {escape, generated_code, lower_attributes, PathCollector, SaveContext};\n-use json_dumper::{Access, DumpOutput, JsonDumper};\n-use span_utils::SpanUtils;\n-use sig;\n+use crate::{escape, generated_code, id_from_def_id, id_from_node_id, lower_attributes,\n+            PathCollector, SaveContext};\n+use crate::json_dumper::{Access, DumpOutput, JsonDumper};\n+use crate::span_utils::SpanUtils;\n+use crate::sig;\n \n use rls_data::{CompilationOptions, CratePreludeData, Def, DefKind, GlobalCrateId, Import,\n                ImportKind, Ref, RefKind, Relation, RelationKind, SpanData};\n \n+use log::{debug, error};\n+\n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $sp:expr) => {\n         let $id = if let super::Data::$kind(data) = $id {\n@@ -68,7 +73,7 @@ macro_rules! access_from {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n+pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     dumper: &'ll mut JsonDumper<O>,\n@@ -245,7 +250,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     None => continue,\n                 };\n                 if !self.span.filter_generated(ident.span) {\n-                    let id = ::id_from_node_id(id, &self.save_ctxt);\n+                    let id = id_from_node_id(id, &self.save_ctxt);\n                     let span = self.span_from_span(ident.span);\n \n                     self.dumper.dump_def(\n@@ -286,7 +291,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         debug!(\"process_method: {}:{}\", id, ident);\n \n         if let Some(mut method_data) = self.save_ctxt.get_method_data(id, ident, span) {\n-            let sig_str = ::make_signature(&sig.decl, &generics);\n+            let sig_str = crate::make_signature(&sig.decl, &generics);\n             if body.is_some() {\n                 self.nest_tables(\n                     id,\n@@ -339,7 +344,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     // Append $id to name to make sure each one is unique.\n                     let qualname = format!(\"{}::{}${}\", prefix, name, id);\n                     if !self.span.filter_generated(param_ss) {\n-                        let id = ::id_from_node_id(param.id, &self.save_ctxt);\n+                        let id = id_from_node_id(param.id, &self.save_ctxt);\n                         let span = self.span_from_span(param_ss);\n \n                         self.dumper.dump_def(\n@@ -434,12 +439,12 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 &access_from!(self.save_ctxt, vis, id),\n                 Def {\n                     kind: DefKind::Const,\n-                    id: ::id_from_node_id(id, &self.save_ctxt),\n+                    id: id_from_node_id(id, &self.save_ctxt),\n                     span,\n                     name: ident.name.to_string(),\n                     qualname,\n                     value: ty_to_string(&typ),\n-                    parent: Some(::id_from_def_id(parent_id)),\n+                    parent: Some(id_from_def_id(parent_id)),\n                     children: vec![],\n                     decl_id: None,\n                     docs: self.save_ctxt.docs_for_attrs(attrs),\n@@ -496,7 +501,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     value,\n                     fields\n                         .iter()\n-                        .map(|f| ::id_from_node_id(f.id, &self.save_ctxt))\n+                        .map(|f| id_from_node_id(f.id, &self.save_ctxt))\n                         .collect(),\n                 )\n             }\n@@ -509,7 +514,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 &access_from!(self.save_ctxt, item),\n                 Def {\n                     kind,\n-                    id: ::id_from_node_id(item.id, &self.save_ctxt),\n+                    id: id_from_node_id(item.id, &self.save_ctxt),\n                     span,\n                     name,\n                     qualname: qualname.clone(),\n@@ -565,8 +570,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     let value = format!(\"{}::{} {{ {} }}\", enum_data.name, name, fields_str);\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = ::id_from_node_id(variant.node.data.id(), &self.save_ctxt);\n-                        let parent = Some(::id_from_node_id(item.id, &self.save_ctxt));\n+                        let id = id_from_node_id(variant.node.data.id(), &self.save_ctxt);\n+                        let parent = Some(id_from_node_id(item.id, &self.save_ctxt));\n \n                         self.dumper.dump_def(\n                             &access,\n@@ -603,8 +608,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     }\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = ::id_from_node_id(variant.node.data.id(), &self.save_ctxt);\n-                        let parent = Some(::id_from_node_id(item.id, &self.save_ctxt));\n+                        let id = id_from_node_id(variant.node.data.id(), &self.save_ctxt);\n+                        let parent = Some(id_from_node_id(item.id, &self.save_ctxt));\n \n                         self.dumper.dump_def(\n                             &access,\n@@ -687,11 +692,11 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             val.push_str(&bounds_to_string(trait_refs));\n         }\n         if !self.span.filter_generated(item.ident.span) {\n-            let id = ::id_from_node_id(item.id, &self.save_ctxt);\n+            let id = id_from_node_id(item.id, &self.save_ctxt);\n             let span = self.span_from_span(item.ident.span);\n             let children = methods\n                 .iter()\n-                .map(|i| ::id_from_node_id(i.id, &self.save_ctxt))\n+                .map(|i| id_from_node_id(i.id, &self.save_ctxt))\n                 .collect();\n             self.dumper.dump_def(\n                 &access_from!(self.save_ctxt, item),\n@@ -727,14 +732,14 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     self.dumper.dump_ref(Ref {\n                         kind: RefKind::Type,\n                         span: span.clone(),\n-                        ref_id: ::id_from_def_id(id),\n+                        ref_id: id_from_def_id(id),\n                     });\n \n                     self.dumper.dump_relation(Relation {\n                         kind: RelationKind::SuperTrait,\n                         span,\n-                        from: ::id_from_def_id(id),\n-                        to: ::id_from_node_id(item.id, &self.save_ctxt),\n+                        from: id_from_def_id(id),\n+                        to: id_from_node_id(item.id, &self.save_ctxt),\n                     });\n                 }\n             }\n@@ -874,7 +879,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                             self.dumper.dump_ref(Ref {\n                                 kind: RefKind::Variable,\n                                 span,\n-                                ref_id: ::id_from_def_id(variant.fields[index].did),\n+                                ref_id: id_from_def_id(variant.fields[index].did),\n                             });\n                         }\n                     }\n@@ -913,7 +918,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n                     if !self.span.filter_generated(ident.span) {\n                         let qualname = format!(\"{}${}\", ident.to_string(), id);\n-                        let id = ::id_from_node_id(id, &self.save_ctxt);\n+                        let id = id_from_node_id(id, &self.save_ctxt);\n                         let span = self.span_from_span(ident.span);\n \n                         self.dumper.dump_def(\n@@ -989,7 +994,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             // Rust uses the id of the pattern for var lookups, so we'll use it too.\n             if !self.span.filter_generated(ident.span) {\n                 let qualname = format!(\"{}${}\", ident.to_string(), id);\n-                let id = ::id_from_node_id(id, &self.save_ctxt);\n+                let id = id_from_node_id(id, &self.save_ctxt);\n                 let span = self.span_from_span(ident.span);\n \n                 self.dumper.dump_def(\n@@ -1092,7 +1097,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n                 if !self.span.filter_generated(trait_item.ident.span) {\n                     let span = self.span_from_span(trait_item.ident.span);\n-                    let id = ::id_from_node_id(trait_item.id, &self.save_ctxt);\n+                    let id = id_from_node_id(trait_item.id, &self.save_ctxt);\n \n                     self.dumper.dump_def(\n                         &Access {\n@@ -1106,7 +1111,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                             name,\n                             qualname,\n                             value: self.span.snippet(trait_item.span),\n-                            parent: Some(::id_from_def_id(trait_id)),\n+                            parent: Some(id_from_def_id(trait_id)),\n                             children: vec![],\n                             decl_id: None,\n                             docs: self.save_ctxt.docs_for_attrs(&trait_item.attrs),\n@@ -1197,7 +1202,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // The parent def id of a given use tree is always the enclosing item.\n         let parent = self.save_ctxt.tcx.hir().opt_local_def_id(id)\n             .and_then(|id| self.save_ctxt.tcx.parent_def_id(id))\n-            .map(::id_from_def_id);\n+            .map(id_from_def_id);\n \n         match use_tree.kind {\n             ast::UseTreeKind::Simple(alias, ..) => {\n@@ -1213,7 +1218,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n                 let sub_span = path.segments.last().unwrap().ident.span;\n                 if !self.span.filter_generated(sub_span) {\n-                    let ref_id = self.lookup_def_id(id).map(|id| ::id_from_def_id(id));\n+                    let ref_id = self.lookup_def_id(id).map(|id| id_from_def_id(id));\n                     let alias_span = alias.map(|i| self.span_from_span(i.span));\n                     let span = self.span_from_span(sub_span);\n                     self.dumper.import(&access, Import {\n@@ -1299,10 +1304,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n \n         let cm = self.tcx.sess.source_map();\n         let filename = cm.span_to_filename(span);\n-        let data_id = ::id_from_node_id(id, &self.save_ctxt);\n+        let data_id = id_from_node_id(id, &self.save_ctxt);\n         let children = m.items\n             .iter()\n-            .map(|i| ::id_from_node_id(i.id, &self.save_ctxt))\n+            .map(|i| id_from_node_id(i.id, &self.save_ctxt))\n             .collect();\n         let span = self.span_from_span(span);\n \n@@ -1346,7 +1351,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                     let span = self.span_from_span(name_span);\n                     let parent = self.save_ctxt.tcx.hir().opt_local_def_id(item.id)\n                         .and_then(|id| self.save_ctxt.tcx.parent_def_id(id))\n-                        .map(::id_from_def_id);\n+                        .map(id_from_def_id);\n                     self.dumper.import(\n                         &Access {\n                             public: false,\n@@ -1388,7 +1393,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 let value = ty_to_string(&ty);\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n-                    let id = ::id_from_node_id(item.id, &self.save_ctxt);\n+                    let id = id_from_node_id(item.id, &self.save_ctxt);\n \n                     self.dumper.dump_def(\n                         &access_from!(self.save_ctxt, item),\n@@ -1418,7 +1423,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 let value = String::new();\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n-                    let id = ::id_from_node_id(item.id, &self.save_ctxt);\n+                    let id = id_from_node_id(item.id, &self.save_ctxt);\n \n                     self.dumper.dump_def(\n                         &access_from!(self.save_ctxt, item),\n@@ -1484,7 +1489,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                     self.dumper.dump_ref(Ref {\n                         kind: RefKind::Type,\n                         span,\n-                        ref_id: ::id_from_def_id(id),\n+                        ref_id: id_from_def_id(id),\n                     });\n                 }\n "}, {"sha": "1840cf652e1d5bbc4060c1eea0e8052b63e5e019", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -7,6 +7,8 @@ use rls_data::{self, Analysis, CompilationOptions, CratePreludeData, Def, DefKin\n                MacroRef, Ref, RefKind, Relation};\n use rls_span::{Column, Row};\n \n+use log::error;\n+\n #[derive(Debug)]\n pub struct Access {\n     pub reachable: bool,\n@@ -23,7 +25,7 @@ pub trait DumpOutput {\n     fn dump(&mut self, result: &Analysis);\n }\n \n-pub struct WriteOutput<'b, W: Write + 'b> {\n+pub struct WriteOutput<'b, W: Write> {\n     output: &'b mut W,\n }\n "}, {"sha": "c4a2ebeba652952371106595442ecb0ef219869b", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,27 +1,10 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(custom_attribute)]\n-#![feature(nll)]\n+#![deny(rust_2018_idioms)]\n #![allow(unused_attributes)]\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use]\n-extern crate rustc;\n-\n-#[macro_use]\n-extern crate log;\n-extern crate rustc_data_structures;\n-extern crate rustc_codegen_utils;\n-extern crate rustc_serialize;\n-extern crate rustc_target;\n-extern crate rustc_typeck;\n-#[macro_use]\n-extern crate syntax;\n-extern crate syntax_pos;\n-\n-extern crate rls_data;\n-extern crate rls_span;\n-\n \n mod json_dumper;\n mod dump_visitor;\n@@ -37,6 +20,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, TyCtxt};\n+use rustc::{bug, span_bug};\n use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n use rustc_data_structures::sync::Lrc;\n@@ -64,6 +48,8 @@ use rls_data::{Def, DefKind, ExternalCrateData, GlobalCrateId, MacroRef, Ref, Re\n                RelationKind, SpanData, Impl, ImplKind};\n use rls_data::config::Config;\n \n+use log::{debug, error, info};\n+\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n@@ -170,7 +156,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             ast::ForeignItemKind::Static(ref ty, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n-                let id = ::id_from_node_id(item.id, self);\n+                let id = id_from_node_id(item.id, self);\n                 let span = self.span_from_span(item.ident.span);\n \n                 Some(Data::DefData(Def {\n@@ -1034,7 +1020,7 @@ impl<'a> DumpHandler<'a> {\n         }\n     }\n \n-    fn output_file(&self, ctx: &SaveContext) -> File {\n+    fn output_file(&self, ctx: &SaveContext<'_, '_>) -> File {\n         let sess = &ctx.tcx.sess;\n         let file_name = match ctx.config.output_file {\n             Some(ref s) => PathBuf::from(s),\n@@ -1185,7 +1171,7 @@ fn id_from_def_id(id: DefId) -> rls_data::Id {\n     }\n }\n \n-fn id_from_node_id(id: NodeId, scx: &SaveContext) -> rls_data::Id {\n+fn id_from_node_id(id: NodeId, scx: &SaveContext<'_, '_>) -> rls_data::Id {\n     let def_id = scx.tcx.hir().opt_local_def_id(id);\n     def_id.map(|id| id_from_def_id(id)).unwrap_or_else(|| {\n         // Create a *fake* `DefId` out of a `NodeId` by subtracting the `NodeId`\n@@ -1205,7 +1191,7 @@ fn null_id() -> rls_data::Id {\n     }\n }\n \n-fn lower_attributes(attrs: Vec<Attribute>, scx: &SaveContext) -> Vec<rls_data::Attribute> {\n+fn lower_attributes(attrs: Vec<Attribute>, scx: &SaveContext<'_, '_>) -> Vec<rls_data::Attribute> {\n     attrs.into_iter()\n     // Only retain real attributes. Doc comments are lowered separately.\n     .filter(|attr| attr.path != \"doc\")"}, {"sha": "50a335bf908776cf26eee6351e7f6e61af868e7d", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -25,7 +25,7 @@\n //\n // FIXME where clauses need implementing, defs/refs in generics are mostly missing.\n \n-use {id_from_def_id, id_from_node_id, SaveContext};\n+use crate::{id_from_def_id, id_from_node_id, SaveContext};\n \n use rls_data::{SigElement, Signature};\n \n@@ -34,14 +34,17 @@ use syntax::ast::{self, NodeId};\n use syntax::print::pprust;\n \n \n-pub fn item_signature(item: &ast::Item, scx: &SaveContext) -> Option<Signature> {\n+pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n     item.make(0, None, scx).ok()\n }\n \n-pub fn foreign_item_signature(item: &ast::ForeignItem, scx: &SaveContext) -> Option<Signature> {\n+pub fn foreign_item_signature(\n+    item: &ast::ForeignItem,\n+    scx: &SaveContext<'_, '_>\n+) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n@@ -50,15 +53,15 @@ pub fn foreign_item_signature(item: &ast::ForeignItem, scx: &SaveContext) -> Opt\n \n /// Signature for a struct or tuple field declaration.\n /// Does not include a trailing comma.\n-pub fn field_signature(field: &ast::StructField, scx: &SaveContext) -> Option<Signature> {\n+pub fn field_signature(field: &ast::StructField, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n     field.make(0, None, scx).ok()\n }\n \n /// Does not include a trailing comma.\n-pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext) -> Option<Signature> {\n+pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n@@ -70,7 +73,7 @@ pub fn method_signature(\n     ident: ast::Ident,\n     generics: &ast::Generics,\n     m: &ast::MethodSig,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n@@ -83,7 +86,7 @@ pub fn assoc_const_signature(\n     ident: ast::Name,\n     ty: &ast::Ty,\n     default: Option<&ast::Expr>,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n@@ -96,18 +99,18 @@ pub fn assoc_type_signature(\n     ident: ast::Ident,\n     bounds: Option<&ast::GenericBounds>,\n     default: Option<&ast::Ty>,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n     make_assoc_type_signature(id, ident, bounds, default, scx).ok()\n }\n \n-type Result = ::std::result::Result<Signature, &'static str>;\n+type Result = std::result::Result<Signature, &'static str>;\n \n trait Sig {\n-    fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext) -> Result;\n+    fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result;\n }\n \n fn extend_sig(\n@@ -155,7 +158,7 @@ fn text_sig(text: String) -> Signature {\n }\n \n impl Sig for ast::Ty {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n         match self.node {\n             ast::TyKind::Slice(ref ty) => {\n@@ -227,7 +230,7 @@ impl Sig for ast::Ty {\n                 if f.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if f.abi != ::rustc_target::spec::abi::Abi::Rust {\n+                if f.abi != rustc_target::spec::abi::Abi::Rust {\n                     text.push_str(\"extern\");\n                     text.push_str(&f.abi.to_string());\n                     text.push(' ');\n@@ -317,7 +320,7 @@ impl Sig for ast::Ty {\n }\n \n impl Sig for ast::Item {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n \n         match self.node {\n@@ -381,7 +384,7 @@ impl Sig for ast::Item {\n                 if header.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if header.abi != ::rustc_target::spec::abi::Abi::Rust {\n+                if header.abi != rustc_target::spec::abi::Abi::Rust {\n                     text.push_str(\"extern\");\n                     text.push_str(&header.abi.to_string());\n                     text.push(' ');\n@@ -571,7 +574,7 @@ impl Sig for ast::Item {\n }\n \n impl Sig for ast::Path {\n-    fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let def = scx.get_path_def(id.ok_or(\"Missing id for Path\")?);\n \n         let (name, start, end) = match def {\n@@ -613,7 +616,7 @@ impl Sig for ast::Path {\n \n // This does not cover the where clause, which must be processed separately.\n impl Sig for ast::Generics {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         if self.params.is_empty() {\n             return Ok(text_sig(String::new()));\n         }\n@@ -673,7 +676,7 @@ impl Sig for ast::Generics {\n }\n \n impl Sig for ast::StructField {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let mut text = String::new();\n         let mut defs = None;\n         if let Some(ident) = self.ident {\n@@ -696,7 +699,7 @@ impl Sig for ast::StructField {\n \n \n impl Sig for ast::Variant_ {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let mut text = self.ident.to_string();\n         match self.data {\n             ast::VariantData::Struct(ref fields, id) => {\n@@ -754,7 +757,7 @@ impl Sig for ast::Variant_ {\n }\n \n impl Sig for ast::ForeignItem {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n         match self.node {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n@@ -838,7 +841,7 @@ fn name_and_generics(\n     generics: &ast::Generics,\n     id: NodeId,\n     name: ast::Ident,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Result {\n     let name = name.to_string();\n     let def = SigElement {\n@@ -859,7 +862,7 @@ fn make_assoc_type_signature(\n     ident: ast::Ident,\n     bounds: Option<&ast::GenericBounds>,\n     default: Option<&ast::Ty>,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Result {\n     let mut text = \"type \".to_owned();\n     let name = ident.to_string();\n@@ -893,7 +896,7 @@ fn make_assoc_const_signature(\n     ident: ast::Name,\n     ty: &ast::Ty,\n     default: Option<&ast::Expr>,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Result {\n     let mut text = \"const \".to_owned();\n     let name = ident.to_string();\n@@ -926,7 +929,7 @@ fn make_method_signature(\n     ident: ast::Ident,\n     generics: &ast::Generics,\n     m: &ast::MethodSig,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Result {\n     // FIXME code dup with function signature\n     let mut text = String::new();\n@@ -939,7 +942,7 @@ fn make_method_signature(\n     if m.header.unsafety == ast::Unsafety::Unsafe {\n         text.push_str(\"unsafe \");\n     }\n-    if m.header.abi != ::rustc_target::spec::abi::Abi::Rust {\n+    if m.header.abi != rustc_target::spec::abi::Abi::Rust {\n         text.push_str(\"extern\");\n         text.push_str(&m.header.abi.to_string());\n         text.push(' ');"}, {"sha": "e2c93b6d331586bbd7e5f33daab25af7c46c6b51", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n use rustc::session::Session;\n \n-use generated_code;\n+use crate::generated_code;\n \n use std::cell::Cell;\n "}, {"sha": "ecea15a992250427a3bc6e8d7e161b8153e2e1bf", "filename": "src/librustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FCargo.toml?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_target\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_target\""}, {"sha": "f50ec6c2e7e3aa2d270374bcae9e41a01c0bd848", "filename": "src/librustc_target/abi/call/aarch64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n-use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>)\n                                      -> Option<Uniform>"}, {"sha": "6bfd1f4387385252428aede04aaf43de8dc6fda5", "filename": "src/librustc_target/abi/call/amdgpu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use abi::call::{ArgType, FnType, };\n-use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{ArgType, FnType, };\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n fn classify_ret_ty<'a, Ty, C>(_cx: &C, ret: &mut ArgType<'a, Ty>)\n   where Ty: TyLayoutMethods<'a, C> + Copy,"}, {"sha": "52d7f3ac3dcbf5363b2e9c09de79ad2284150dd0", "filename": "src/librustc_target/abi/call/arm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n-use abi::call::{Conv, FnType, ArgType, Reg, RegKind, Uniform};\n-use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n-use spec::HasTargetSpec;\n+use crate::abi::call::{Conv, FnType, ArgType, Reg, RegKind, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::spec::HasTargetSpec;\n \n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>)\n                                      -> Option<Uniform>"}, {"sha": "92c86372a86f331c5b7a0ab137958e1996fe9b1f", "filename": "src/librustc_target/abi/call/asmjs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,5 +1,5 @@\n-use abi::call::{FnType, ArgType, Uniform};\n-use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{FnType, ArgType, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n // Data layout: e-p:32:32-i64:64-v128:32:128-n32-S128\n \n@@ -26,7 +26,7 @@ fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n     }\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n     if arg.layout.is_aggregate() {\n         arg.make_indirect_byval();\n     }"}, {"sha": "db8c915cdb4bdb4c490b87ed30f0c1884163e611", "filename": "src/librustc_target/abi/call/hexagon.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fhexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fhexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fhexagon.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,24 +1,24 @@\n #![allow(non_upper_case_globals)]\n \n-use abi::call::{FnType, ArgType};\n+use crate::abi::call::{FnType, ArgType};\n \n-fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 64 {\n         ret.make_indirect();\n     } else {\n         ret.extend_integer_width_to(32);\n     }\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 64 {\n         arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(32);\n     }\n }\n \n-pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_,Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }"}, {"sha": "d496abf8e8b286c1c7d1d278fac38d73bcb7bb73", "filename": "src/librustc_target/abi/call/mips.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use abi::call::{ArgType, FnType, Reg, Uniform};\n-use abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n+use crate::abi::call::{ArgType, FnType, Reg, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n \n-fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<Ty>, offset: &mut Size)\n+fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'_, Ty>, offset: &mut Size)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     if !ret.layout.is_aggregate() {\n@@ -12,7 +12,7 @@ fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<Ty>, offset: &mut Size)\n     }\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n+fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'_, Ty>, offset: &mut Size)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     let dl = cx.data_layout();\n@@ -34,7 +34,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n     *offset = offset.align_to(align) + size.align_to(align);\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<Ty>)\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'_, Ty>)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     let mut offset = Size::ZERO;"}, {"sha": "5ba05c6bcde377c915f75815dc8a05ef3552f5c2", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use abi::call::{ArgAttribute, ArgType, CastTarget, FnType, PassMode, Reg, RegKind, Uniform};\n-use abi::{self, HasDataLayout, LayoutOf, Size, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{ArgAttribute, ArgType, CastTarget, FnType, PassMode, Reg, RegKind, Uniform};\n+use crate::abi::{self, HasDataLayout, LayoutOf, Size, TyLayout, TyLayoutMethods};\n \n-fn extend_integer_width_mips<Ty>(arg: &mut ArgType<Ty>, bits: u64) {\n+fn extend_integer_width_mips<Ty>(arg: &mut ArgType<'_, Ty>, bits: u64) {\n     // Always sign extend u32 values on 64-bit mips\n     if let abi::Abi::Scalar(ref scalar) = arg.layout.abi {\n         if let abi::Int(i, signed) = scalar.value {"}, {"sha": "839c9a857e64aaa1a8cfce5dd8e130b55fc8bc2c", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n-use abi::{self, Abi, Align, FieldPlacement, Size};\n-use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n-use spec::HasTargetSpec;\n+use crate::abi::{self, Abi, Align, FieldPlacement, Size};\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::spec::{self, HasTargetSpec};\n \n mod aarch64;\n mod amdgpu;\n@@ -42,13 +42,13 @@ pub enum PassMode {\n \n // Hack to disable non_upper_case_globals only for the bitflags! and not for the rest\n // of this module\n-pub use self::attr_impl::ArgAttribute;\n+pub use attr_impl::ArgAttribute;\n \n #[allow(non_upper_case_globals)]\n #[allow(unused)]\n mod attr_impl {\n     // The subset of llvm::Attribute needed for arguments, packed into a bitfield.\n-    bitflags! {\n+    bitflags::bitflags! {\n         #[derive(Default)]\n         pub struct ArgAttribute: u16 {\n             const ByVal     = 1 << 0;\n@@ -526,22 +526,22 @@ pub struct FnType<'a, Ty> {\n }\n \n impl<'a, Ty> FnType<'a, Ty> {\n-    pub fn adjust_for_cabi<C>(&mut self, cx: &C, abi: ::spec::abi::Abi) -> Result<(), String>\n+    pub fn adjust_for_cabi<C>(&mut self, cx: &C, abi: spec::abi::Abi) -> Result<(), String>\n         where Ty: TyLayoutMethods<'a, C> + Copy,\n               C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout + HasTargetSpec\n     {\n         match &cx.target_spec().arch[..] {\n             \"x86\" => {\n-                let flavor = if abi == ::spec::abi::Abi::Fastcall {\n+                let flavor = if abi == spec::abi::Abi::Fastcall {\n                     x86::Flavor::Fastcall\n                 } else {\n                     x86::Flavor::General\n                 };\n                 x86::compute_abi_info(cx, self, flavor);\n             },\n-            \"x86_64\" => if abi == ::spec::abi::Abi::SysV64 {\n+            \"x86_64\" => if abi == spec::abi::Abi::SysV64 {\n                 x86_64::compute_abi_info(cx, self);\n-            } else if abi == ::spec::abi::Abi::Win64 || cx.target_spec().options.is_like_windows {\n+            } else if abi == spec::abi::Abi::Win64 || cx.target_spec().options.is_like_windows {\n                 x86_win64::compute_abi_info(self);\n             } else {\n                 x86_64::compute_abi_info(cx, self);"}, {"sha": "7ae1116cba847fcfb58929bb47cf0b4d2532fa74", "filename": "src/librustc_target/abi/call/msp430.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmsp430.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmsp430.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmsp430.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,31 +1,31 @@\n // Reference: MSP430 Embedded Application Binary Interface\n // http://www.ti.com/lit/an/slaa534/slaa534.pdf\n \n-use abi::call::{ArgType, FnType};\n+use crate::abi::call::{ArgType, FnType};\n \n // 3.5 Structures or Unions Passed and Returned by Reference\n //\n // \"Structures (including classes) and unions larger than 32 bits are passed and\n // returned by reference. To pass a structure or union by reference, the caller\n // places its address in the appropriate location: either in a register or on\n // the stack, according to its position in the argument list. (..)\"\n-fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 32 {\n         ret.make_indirect();\n     } else {\n         ret.extend_integer_width_to(16);\n     }\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 32 {\n         arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(16);\n     }\n }\n \n-pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }"}, {"sha": "4722249f73007148c2b54d262ec33500b0289af5", "filename": "src/librustc_target/abi/call/nvptx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,25 +1,25 @@\n // Reference: PTX Writer's Guide to Interoperability\n // http://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n \n-use abi::call::{ArgType, FnType};\n+use crate::abi::call::{ArgType, FnType};\n \n-fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 32 {\n         ret.make_indirect();\n     } else {\n         ret.extend_integer_width_to(32);\n     }\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 32 {\n         arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(32);\n     }\n }\n \n-pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }"}, {"sha": "51c00ae007c3c8244d68fa213cc0fcf4a2266177", "filename": "src/librustc_target/abi/call/nvptx64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx64.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,25 +1,25 @@\n // Reference: PTX Writer's Guide to Interoperability\n // http://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n \n-use abi::call::{ArgType, FnType};\n+use crate::abi::call::{ArgType, FnType};\n \n-fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 64 {\n         ret.make_indirect();\n     } else {\n         ret.extend_integer_width_to(64);\n     }\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 64 {\n         arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(64);\n     }\n }\n \n-pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }"}, {"sha": "d496abf8e8b286c1c7d1d278fac38d73bcb7bb73", "filename": "src/librustc_target/abi/call/powerpc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use abi::call::{ArgType, FnType, Reg, Uniform};\n-use abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n+use crate::abi::call::{ArgType, FnType, Reg, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n \n-fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<Ty>, offset: &mut Size)\n+fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'_, Ty>, offset: &mut Size)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     if !ret.layout.is_aggregate() {\n@@ -12,7 +12,7 @@ fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<Ty>, offset: &mut Size)\n     }\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n+fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'_, Ty>, offset: &mut Size)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     let dl = cx.data_layout();\n@@ -34,7 +34,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n     *offset = offset.align_to(align) + size.align_to(align);\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<Ty>)\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'_, Ty>)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     let mut offset = Size::ZERO;"}, {"sha": "a9683104d164e5b7e5d410ce7287127fb8db8193", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -2,16 +2,16 @@\n // Alignment of 128 bit types is not currently handled, this will\n // need to be fixed when PowerPC vector support is added.\n \n-use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n-use abi::{Endian, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n-use spec::HasTargetSpec;\n+use crate::abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n+use crate::abi::{Endian, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::spec::HasTargetSpec;\n \n #[derive(Debug, Clone, Copy, PartialEq)]\n enum ABI {\n     ELFv1, // original ABI used for powerpc64 (big-endian)\n     ELFv2, // newer ABI used for powerpc64le and musl (both endians)\n }\n-use self::ABI::*;\n+use ABI::*;\n \n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n                                        -> Option<Uniform>"}, {"sha": "ba82e49ddb03ef75576dc301bd90d39f921de484", "filename": "src/librustc_target/abi/call/riscv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,9 +1,9 @@\n // Reference: RISC-V ELF psABI specification\n // https://github.com/riscv/riscv-elf-psabi-doc\n \n-use abi::call::{ArgType, FnType};\n+use crate::abi::call::{ArgType, FnType};\n \n-fn classify_ret_ty<Ty>(arg: &mut ArgType<Ty>, xlen: u64) {\n+fn classify_ret_ty<Ty>(arg: &mut ArgType<'_, Ty>, xlen: u64) {\n     // \"Scalars wider than 2\u2715XLEN are passed by reference and are replaced in\n     // the argument list with the address.\"\n     // \"Aggregates larger than 2\u2715XLEN bits are passed by reference and are\n@@ -19,7 +19,7 @@ fn classify_ret_ty<Ty>(arg: &mut ArgType<Ty>, xlen: u64) {\n     arg.extend_integer_width_to(xlen); // this method only affects integer scalars\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>, xlen: u64) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>, xlen: u64) {\n     // \"Scalars wider than 2\u2715XLEN are passed by reference and are replaced in\n     // the argument list with the address.\"\n     // \"Aggregates larger than 2\u2715XLEN bits are passed by reference and are\n@@ -35,7 +35,7 @@ fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>, xlen: u64) {\n     arg.extend_integer_width_to(xlen); // this method only affects integer scalars\n }\n \n-pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>, xlen: u64) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>, xlen: u64) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret, xlen);\n     }"}, {"sha": "c2717b1bcb815c91025e2620965d6805b4ad7330", "filename": "src/librustc_target/abi/call/s390x.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,10 +1,10 @@\n // FIXME: The assumes we're using the non-vector ABI, i.e., compiling\n // for a pre-z13 machine or using -mno-vx.\n \n-use abi::call::{FnType, ArgType, Reg};\n-use abi::{self, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{FnType, ArgType, Reg};\n+use crate::abi::{self, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n-fn classify_ret_ty<'a, Ty, C>(ret: &mut ArgType<Ty>)\n+fn classify_ret_ty<'a, Ty, C>(ret: &mut ArgType<'_, Ty>)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     if !ret.layout.is_aggregate() && ret.layout.size.bits() <= 64 {"}, {"sha": "d496abf8e8b286c1c7d1d278fac38d73bcb7bb73", "filename": "src/librustc_target/abi/call/sparc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-use abi::call::{ArgType, FnType, Reg, Uniform};\n-use abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n+use crate::abi::call::{ArgType, FnType, Reg, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n \n-fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<Ty>, offset: &mut Size)\n+fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'_, Ty>, offset: &mut Size)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     if !ret.layout.is_aggregate() {\n@@ -12,7 +12,7 @@ fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<Ty>, offset: &mut Size)\n     }\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n+fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'_, Ty>, offset: &mut Size)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     let dl = cx.data_layout();\n@@ -34,7 +34,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<Ty>, offset: &mut Size)\n     *offset = offset.align_to(align) + size.align_to(align);\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<Ty>)\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'_, Ty>)\n     where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n {\n     let mut offset = Size::ZERO;"}, {"sha": "d8930a875efbce9048e7ed79221f0d46839c20eb", "filename": "src/librustc_target/abi/call/sparc64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n // FIXME: This needs an audit for correctness and completeness.\n \n-use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n-use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>)\n                                      -> Option<Uniform>"}, {"sha": "1fdcbb8e39bdff0397f0aaa6a3599d6dcc301f3c", "filename": "src/librustc_target/abi/call/wasm32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,14 +1,14 @@\n-use abi::call::{FnType, ArgType};\n+use crate::abi::call::{FnType, ArgType};\n \n-fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n     ret.extend_integer_width_to(32);\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n     arg.extend_integer_width_to(32);\n }\n \n-pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }"}, {"sha": "2e809571ab18b60fc87e40dc08961133f9133366", "filename": "src/librustc_target/abi/call/x86.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n-use abi::call::{ArgAttribute, FnType, PassMode, Reg, RegKind};\n-use abi::{self, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n-use spec::HasTargetSpec;\n+use crate::abi::call::{ArgAttribute, FnType, PassMode, Reg, RegKind};\n+use crate::abi::{self, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::spec::HasTargetSpec;\n \n #[derive(PartialEq)]\n pub enum Flavor {"}, {"sha": "680e529b108e0fed1ba62c1ab345692811b22eb1", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n-use abi::call::{ArgType, CastTarget, FnType, Reg, RegKind};\n-use abi::{self, Abi, HasDataLayout, LayoutOf, Size, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{ArgType, CastTarget, FnType, Reg, RegKind};\n+use crate::abi::{self, Abi, HasDataLayout, LayoutOf, Size, TyLayout, TyLayoutMethods};\n \n /// Classification of \"eightbyte\" components.\n // N.B., the order of the variants is from general to specific,"}, {"sha": "ebdeb63150a46960c39621211197189958a7eac4", "filename": "src/librustc_target/abi/call/x86_win64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_win64.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,10 +1,10 @@\n-use abi::call::{ArgType, FnType, Reg};\n-use abi::Abi;\n+use crate::abi::call::{ArgType, FnType, Reg};\n+use crate::abi::Abi;\n \n // Win64 ABI: http://msdn.microsoft.com/en-us/library/zthk2dkh.aspx\n \n-pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n-    let fixup = |a: &mut ArgType<Ty>| {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n+    let fixup = |a: &mut ArgType<'_, Ty>| {\n         match a.layout.abi {\n             Abi::Uninhabited => {}\n             Abi::ScalarPair(..) |"}, {"sha": "bb194d5bb1285095de6fb88332daea6aee6f9077", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n-pub use self::Integer::*;\n-pub use self::Primitive::*;\n+pub use Integer::*;\n+pub use Primitive::*;\n \n-use spec::Target;\n+use crate::spec::Target;\n \n use std::fmt;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n@@ -533,13 +533,13 @@ pub enum FloatTy {\n }\n \n impl fmt::Debug for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, f)\n     }\n }\n \n impl fmt::Display for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.ty_to_string())\n     }\n }"}, {"sha": "e831eb41410bbaa114363c9e3335683710b8b4f6", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -15,11 +15,11 @@\n #![feature(slice_patterns)]\n #![feature(step_trait)]\n \n-#[macro_use]\n-extern crate bitflags;\n-extern crate serialize;\n+#![deny(rust_2018_idioms)]\n+\n #[macro_use] extern crate log;\n \n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this."}, {"sha": "8bdc08c788d01a1e0c04aa8f00b6296e09428a1f", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {"}, {"sha": "308954d56f8bf4b9c67f00b5bd5a74f5511e32ee", "filename": "src/librustc_target/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LldFlavor, LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LldFlavor, LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::fuchsia_base::opts();"}, {"sha": "65160f6231e8c1216a72fa369b05149be4908dac", "filename": "src/librustc_target/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n // See https://developer.android.com/ndk/guides/abis.html#arm64-v8a\n // for target ABI requirements."}, {"sha": "1aee381d604c3d186792fe536f0bef6360551b32", "filename": "src/librustc_target/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult, PanicStrategy};\n+use crate::spec::{LinkerFlavor, Target, TargetResult, PanicStrategy};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();"}, {"sha": "7141954306769a6fcb6155ccf37241c7d70ac5a7", "filename": "src/librustc_target/spec/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();"}, {"sha": "36860649c53ad63ff5ea08ea54b409659232a49c", "filename": "src/librustc_target/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();"}, {"sha": "7b020605102b1f8d7e55a048e9a38369d769668e", "filename": "src/librustc_target/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::hermit_base::opts();"}, {"sha": "e772d8b532cb077229ec5298dc37f5b13374a78e", "filename": "src/librustc_target/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();"}, {"sha": "8123ee82ed524ff133144a77f4b591210fd82cbb", "filename": "src/librustc_target/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();"}, {"sha": "47ae08ade9a6be4689b2717708d2adb5ffe79cee", "filename": "src/librustc_target/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();"}, {"sha": "c9cd64c3a84af3a88011f83f413238f2b0e27f33", "filename": "src/librustc_target/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();"}, {"sha": "c9c41f10922401785ac0f1f8f2aac30dc004abba", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -96,7 +96,7 @@ impl Abi {\n }\n \n impl fmt::Display for Abi {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"\\\"{}\\\"\", self.name())\n     }\n }"}, {"sha": "684c059b414827f4b75ba7b186c3f0465ba2048a", "filename": "src/librustc_target/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fandroid_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, TargetOptions};\n+use crate::spec::{LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();"}, {"sha": "c21f7f38ca5a3767572b87961a4d8b64b9d2abad", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,6 +1,6 @@\n use std::env;\n \n-use spec::{LinkArgs, TargetOptions};\n+use crate::spec::{LinkArgs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6"}, {"sha": "3068ed8d206cdc236bf01fef36b27d43308f8d70", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,8 +1,8 @@\n use std::io;\n use std::process::Command;\n-use spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n \n-use self::Arch::*;\n+use Arch::*;\n \n #[allow(non_camel_case_types)]\n #[derive(Copy, Clone)]"}, {"sha": "77e7bfac62d58596fb7046727f8c80e4d7b8828b", "filename": "src/librustc_target/spec/arm_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::abi::Abi;\n+use crate::spec::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n pub fn abi_blacklist() -> Vec<Abi> {"}, {"sha": "bb066dc9ad833fb0d1026f9ad267fe67d170e1ce", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();"}, {"sha": "f291818ba80f502fb98e3aa93030df7e8da9b415", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();"}, {"sha": "32b509d9721efa6e503021d01acca0080ed87b60", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();"}, {"sha": "7637577e7e848c1c3dae5478e41db035c76a0db0", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();"}, {"sha": "9def151b3ef2910ddf406253fe94be641b0b85c5", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();"}, {"sha": "86c62daa6180a018e97064b6dd058a32de9124ba", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n // Targets the Big endian Cortex-R4/R5 processor (ARMv7-R)\n \n use std::default::Default;\n-use spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "50ee76414ef9a4e122ab28f1b350285ff605fe91", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n // Targets the Cortex-R4F/R5F processor (ARMv7-R)\n \n use std::default::Default;\n-use spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "7cd4b14cdebc8b31d309cb764474c18eb7b9ee8d", "filename": "src/librustc_target/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let base = super::linux_base::opts();"}, {"sha": "15f614827718b29b4b8375db5334d86180c5e6ea", "filename": "src/librustc_target/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let base = super::linux_base::opts();"}, {"sha": "74915b942ea4f5e8f0a093f802a5f4ace67f4dfe", "filename": "src/librustc_target/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let base = super::linux_musl_base::opts();"}, {"sha": "e460b6c574a26463fed30c436972ae945727a903", "filename": "src/librustc_target/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();"}, {"sha": "2052d17403dfde9a6104338d8f2bbe142a9be539", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {"}, {"sha": "92f1a55e024d7f57509d0135c1d9eec0b1d30709", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n // This target if is for the baseline of the Android v7a ABI\n // in thumb mode. It's named armv7-* instead of thumbv7-*"}, {"sha": "a6c7fb537c7854b7accb11788b0673a4adfd8fc0", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();"}, {"sha": "f16215433c766211adfd4bc3f45ca016ceeb4067", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n // This target is for glibc Linux on ARMv7 without NEON or\n // thumb-mode. See the thumbv7neon variant for enabling both."}, {"sha": "45a26966b716b905161df3d43fb8a4c1d60034ad", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n // This target is for musl Linux on ARMv7 without thumb-mode or NEON.\n "}, {"sha": "44e2636e9188ed6aa47e92b64206c7d2c90fc60c", "filename": "src/librustc_target/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let base = super::netbsd_base::opts();"}, {"sha": "19d332467dec50d73f8dad81fc894e087d4d29a5", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n // Targets the Little-endian Cortex-R4/R5 processor (ARMv7-R)\n \n use std::default::Default;\n-use spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "06ef9f3ec4e37892480acaeb4ad3fd6a5f80ac19", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,7 +1,7 @@\n // Targets the Little-endian Cortex-R4F/R5F processor (ARMv7-R)\n \n use std::default::Default;\n-use spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "29e290285e4a9ecc4472fa29b8af466c6b3ae680", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {"}, {"sha": "9b34119fc00c9f9484f7aed38989d6b20003d410", "filename": "src/librustc_target/spec/bitrig_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{TargetOptions, RelroLevel};\n+use crate::spec::{TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {"}, {"sha": "a34122d3e0fe29a1811371a608b507c522782749", "filename": "src/librustc_target/spec/cloudabi_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "766030e8015d09942a647467accd358fd92dc0c2", "filename": "src/librustc_target/spec/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {"}, {"sha": "51f030f59084dc8863d308900a58ce02a667df9f", "filename": "src/librustc_target/spec/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {"}, {"sha": "4e4f2fa0cf34c9178c3dc97794f8471b3af19086", "filename": "src/librustc_target/spec/fuchsia_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LldFlavor, LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{LldFlavor, LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {"}, {"sha": "d07106270530666271341964fae157fc183aa7a9", "filename": "src/librustc_target/spec/haiku_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{TargetOptions, RelroLevel};\n+use crate::spec::{TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {"}, {"sha": "ee753393ddb3d59bd84287015b2a95b4a9c347f7", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {"}, {"sha": "78e9cbb61ef58c10a1368a1270dc5028ccfa3c5f", "filename": "src/librustc_target/spec/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {"}, {"sha": "ba712aced8474b2bd28a9722e6d2b32e79a6fad4", "filename": "src/librustc_target/spec/i586_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi586_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi586_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi586_pc_windows_msvc.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::TargetResult;\n+use crate::spec::TargetResult;\n \n pub fn target() -> TargetResult {\n     let mut base = super::i686_pc_windows_msvc::target()?;"}, {"sha": "49f4f2cb6b999c3e595ffc54dc50836d85548cd6", "filename": "src/librustc_target/spec/i586_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_gnu.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::TargetResult;\n+use crate::spec::TargetResult;\n \n pub fn target() -> TargetResult {\n     let mut base = super::i686_unknown_linux_gnu::target()?;"}, {"sha": "0f2ccebd6dacefe265c8d7ff1dba1dc5ff2253ec", "filename": "src/librustc_target/spec/i586_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_musl.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::TargetResult;\n+use crate::spec::TargetResult;\n \n pub fn target() -> TargetResult {\n     let mut base = super::i686_unknown_linux_musl::target()?;"}, {"sha": "c8a61296d33d2b22857969a4df6eed9f489d9f46", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();"}, {"sha": "3f73d24ee848b90d00505b071eb909fc55816bbd", "filename": "src/librustc_target/spec/i686_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n // See https://developer.android.com/ndk/guides/abis.html#x86\n // for target ABI requirements."}, {"sha": "12214a7d53119b6108d4c3cde10792c71a6594d3", "filename": "src/librustc_target/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_base::opts();"}, {"sha": "1967834819ab251f7522576ee521b3b93fbeb0ed", "filename": "src/librustc_target/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();"}, {"sha": "f3b40633b40073b31bf31667e319ffc1df19660a", "filename": "src/librustc_target/spec/i686_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();"}, {"sha": "20315e7145c732874e916fda0256780a6721f53b", "filename": "src/librustc_target/spec/i686_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6fafbdf3b09da28b09fa7e87a24658d77dd02f/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs?ref=cb6fafbdf3b09da28b09fa7e87a24658d77dd02f", "patch": "@@ -1,4 +1,4 @@\n-use spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();"}]}