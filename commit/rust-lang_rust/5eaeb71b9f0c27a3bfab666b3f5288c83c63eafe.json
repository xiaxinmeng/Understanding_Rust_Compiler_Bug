{"sha": "5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "node_id": "C_kwDOAAsO6NoAKDVlYWViNzFiOWYwYzI3YTNiZmFiNjY2YjNmNTI4OGM4M2M2M2VhZmU", "commit": {"author": {"name": "Celina G. Val", "email": "celinval@amazon.com", "date": "2023-03-07T20:47:25Z"}, "committer": {"name": "Celina G. Val", "email": "celinval@amazon.com", "date": "2023-03-07T20:47:25Z"}, "message": "Change item collection to be on demand", "tree": {"sha": "c64721dc823ed99e4b3415dda28e57504b03781c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c64721dc823ed99e4b3415dda28e57504b03781c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "html_url": "https://github.com/rust-lang/rust/commit/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/comments", "author": {"login": "celinval", "id": 35149715, "node_id": "MDQ6VXNlcjM1MTQ5NzE1", "avatar_url": "https://avatars.githubusercontent.com/u/35149715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/celinval", "html_url": "https://github.com/celinval", "followers_url": "https://api.github.com/users/celinval/followers", "following_url": "https://api.github.com/users/celinval/following{/other_user}", "gists_url": "https://api.github.com/users/celinval/gists{/gist_id}", "starred_url": "https://api.github.com/users/celinval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/celinval/subscriptions", "organizations_url": "https://api.github.com/users/celinval/orgs", "repos_url": "https://api.github.com/users/celinval/repos", "events_url": "https://api.github.com/users/celinval/events{/privacy}", "received_events_url": "https://api.github.com/users/celinval/received_events", "type": "User", "site_admin": false}, "committer": {"login": "celinval", "id": 35149715, "node_id": "MDQ6VXNlcjM1MTQ5NzE1", "avatar_url": "https://avatars.githubusercontent.com/u/35149715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/celinval", "html_url": "https://github.com/celinval", "followers_url": "https://api.github.com/users/celinval/followers", "following_url": "https://api.github.com/users/celinval/following{/other_user}", "gists_url": "https://api.github.com/users/celinval/gists{/gist_id}", "starred_url": "https://api.github.com/users/celinval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/celinval/subscriptions", "organizations_url": "https://api.github.com/users/celinval/orgs", "repos_url": "https://api.github.com/users/celinval/repos", "events_url": "https://api.github.com/users/celinval/events{/privacy}", "received_events_url": "https://api.github.com/users/celinval/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b66db7e4e04ba039967b659473595a13409e0b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b66db7e4e04ba039967b659473595a13409e0b18", "html_url": "https://github.com/rust-lang/rust/commit/b66db7e4e04ba039967b659473595a13409e0b18"}], "stats": {"total": 71, "additions": 38, "deletions": 33}, "files": [{"sha": "3eaff9c051f1c8f098f8939427a664990f67431c", "filename": "compiler/rustc_smir/src/rustc_internal/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs?ref=5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "patch": "@@ -3,10 +3,13 @@\n //! For that, we define APIs that will temporarily be public to 3P that exposes rustc internal APIs\n //! until stable MIR is complete.\n \n-use crate::stable_mir::CrateItem;\n+use crate::stable_mir;\n+pub use rustc_span::def_id::{CrateNum, DefId};\n \n-pub type DefId = rustc_span::def_id::DefId;\n-\n-pub fn item_def_id(item: &CrateItem) -> DefId {\n+pub fn item_def_id(item: &stable_mir::CrateItem) -> DefId {\n     item.0\n }\n+\n+pub fn crate_num(item: &stable_mir::Crate) -> CrateNum {\n+    item.id.into()\n+}"}, {"sha": "d956f0ac802134baf8b79250ab3a5bc71396ab69", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "patch": "@@ -9,14 +9,19 @@\n \n use crate::stable_mir::{self};\n use rustc_middle::ty::{tls::with, TyCtxt};\n-use rustc_span::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_span::def_id::{CrateNum, LOCAL_CRATE};\n use tracing::debug;\n \n /// Get information about the local crate.\n pub fn local_crate() -> stable_mir::Crate {\n     with(|tcx| smir_crate(tcx, LOCAL_CRATE))\n }\n \n+/// Retrieve a list of all external crates.\n+pub fn external_crates() -> Vec<stable_mir::Crate> {\n+    with(|tcx| tcx.crates(()).iter().map(|crate_num| smir_crate(tcx, *crate_num)).collect())\n+}\n+\n /// Find a crate with the given name.\n pub fn find_crate(name: &str) -> Option<stable_mir::Crate> {\n     with(|tcx| {\n@@ -27,26 +32,17 @@ pub fn find_crate(name: &str) -> Option<stable_mir::Crate> {\n     })\n }\n \n+/// Retrieve all items of the local crate that have a MIR associated with them.\n+pub fn all_local_items() -> stable_mir::CrateItems {\n+    with(|tcx| {\n+        tcx.mir_keys(()).iter().map(|item| stable_mir::CrateItem(item.to_def_id())).collect()\n+    })\n+}\n+\n /// Build a stable mir crate from a given crate number.\n fn smir_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> stable_mir::Crate {\n     let crate_name = tcx.crate_name(crate_num).to_string();\n     let is_local = crate_num == LOCAL_CRATE;\n-    let mod_id = DefId { index: CRATE_DEF_INDEX, krate: crate_num };\n-    let items = if is_local {\n-        tcx.hir_module_items(mod_id.expect_local())\n-            .items()\n-            .map(|item| {\n-                let def_id = item.owner_id.def_id.to_def_id();\n-                stable_mir::CrateItem(def_id)\n-            })\n-            .collect()\n-    } else {\n-        tcx.module_children(mod_id)\n-            .iter()\n-            .filter_map(|item| item.res.opt_def_id())\n-            .map(stable_mir::CrateItem)\n-            .collect::<Vec<_>>()\n-    };\n     debug!(?crate_name, ?crate_num, \"smir_crate\");\n-    stable_mir::Crate { id: crate_num.into(), name: crate_name, is_local, root_items: items }\n+    stable_mir::Crate { id: crate_num.into(), name: crate_name, is_local }\n }"}, {"sha": "cbf52e691fb475f00dd39696dd4ad447ac5b296f", "filename": "compiler/rustc_smir/src/stable_mir/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs?ref=5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "patch": "@@ -31,8 +31,6 @@ pub struct Crate {\n     pub(crate) id: CrateNum,\n     pub name: Symbol,\n     pub is_local: bool,\n-    /// The items defined in the root of this crate.\n-    pub root_items: CrateItems,\n }\n \n /// Holds information about an item in the crate.\n@@ -50,3 +48,13 @@ pub fn local_crate() -> Crate {\n pub fn find_crate(name: &str) -> Option<Crate> {\n     crate::rustc_smir::find_crate(name)\n }\n+\n+/// Try to find a crate with the given name.\n+pub fn external_crates() -> Vec<Crate> {\n+    crate::rustc_smir::external_crates()\n+}\n+\n+/// Retrieve all items in the local crate that have a MIR associated with them.\n+pub fn all_local_items() -> CrateItems {\n+    crate::rustc_smir::all_local_items()\n+}"}, {"sha": "4458ab0162e953084e3e147a772d5d9307993524", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "patch": "@@ -29,19 +29,17 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n     assert_eq!(&local.name, CRATE_NAME);\n \n     // Find items in the local crate.\n-    assert!(has_root_item(tcx, &local, (DefKind::Fn, \"foo_bar\")));\n-    assert!(has_root_item(tcx, &local, (DefKind::Mod, \"foo\")));\n-    assert!(!has_root_item(tcx, &local, (DefKind::Fn, \"foo::bar\")));\n+    let items = stable_mir::all_local_items();\n+    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo_bar\")));\n+    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo::bar\")));\n \n-    // Check that we can find items in the `std` crate.\n-    let std_crate = stable_mir::find_crate(\"std\").unwrap();\n-    assert!(has_root_item(tcx, &std_crate, (DefKind::Mod, \"std::any\")));\n-    assert!(!has_root_item(tcx, &std_crate, (DefKind::Fn, \"std::any::type_name\")));\n+    // Find the `std` crate.\n+    assert!(stable_mir::find_crate(\"std\").is_some());\n }\n \n // Use internal API to find a function in a crate.\n-fn has_root_item(tcx: TyCtxt, krate: &stable_mir::Crate, item: (DefKind, &str)) -> bool {\n-    krate.root_items.iter().any(|crate_item| {\n+fn has_item(tcx: TyCtxt, items: &stable_mir::CrateItems, item: (DefKind, &str)) -> bool {\n+    items.iter().any(|crate_item| {\n         let def_id = rustc_internal::item_def_id(crate_item);\n         tcx.def_kind(def_id) == item.0 && tcx.def_path_str(def_id) == item.1\n     })"}]}