{"sha": "8ea95988df4d493ec3f556ab0de6b0b812ed27be", "node_id": "C_kwDOAAsO6NoAKDhlYTk1OTg4ZGY0ZDQ5M2VjM2Y1NTZhYjBkZTZiMGI4MTJlZDI3YmU", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-04T17:38:51Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-04T17:38:51Z"}, "message": "update tests", "tree": {"sha": "2cdf87b820017217f1470aafd82aca3d40492fe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cdf87b820017217f1470aafd82aca3d40492fe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea95988df4d493ec3f556ab0de6b0b812ed27be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmKbmK4ACgkQzXazX3c0\ndp5gYBAAiNP3C6tJjh38wqrotEfbCnJqXr2Vj2WrMEucyoAHyMZesCVP1uxrAZG6\nsUBStJRxW/oce+yOpTyhSHnfyaBUI+m7VKebzBvyMN7bSAXeXVwIQqmMn6EurK7W\nm1RQJUxWfE+VeCRqwGwxwin1rOxuiBG3GtIQXlvpVnZXhpfTJ+fIzYUVbny4KWtE\nOxdYKNRCSeS3T1+Ce5qQl+dGCD4uWXQEyWZ+jZVj1VEvxmIMAbNqcz23lGyTgPsr\nnfen0Rfs9NzLyX1YkCG9pex+Tm1b+5vFKzK9H62Zoyn4TMLWi/rwYEHVExVSR0MU\n0Hl28FsKAumJeljxcZFVZ8hcgp31cmyWQ7sX64YenIWsRsKwzmYqkQl0HmAxR5fR\n97fUmFy1Gq6QD2JbBtluFIs7sGdc0PjpFjLsRUdDef/yC7dg0k/STPNH5X83jLmi\n8MO2jIf8Ya1EH2ui0EvJx8QJRx6n/JYqAKkclv0+zbJGNmtsvpI96QDEse7quvDz\nvVv28tT+u35M0OxDvwe4E96wTL7WmpafIoht3U3z6qO3F6kUeiVj+3zm4lvr6J8q\nxWJmXaYnxoApPSd93CbnDlxTln3dLGz0zvaz0VVCHl6HoT5IkRcozjCZp8baVV+f\n2eiQK5Y8ZfN1iR36jvWUZ8LJC51hzGE1/Z/MHRX8moX7uKqKSjQ=\n=mW2/\n-----END PGP SIGNATURE-----", "payload": "tree 2cdf87b820017217f1470aafd82aca3d40492fe4\nparent e257f38160b361f738e9c42c3b76665fbbf13aa4\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1654364331 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1654364331 +0200\n\nupdate tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea95988df4d493ec3f556ab0de6b0b812ed27be", "html_url": "https://github.com/rust-lang/rust/commit/8ea95988df4d493ec3f556ab0de6b0b812ed27be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea95988df4d493ec3f556ab0de6b0b812ed27be/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e257f38160b361f738e9c42c3b76665fbbf13aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e257f38160b361f738e9c42c3b76665fbbf13aa4", "html_url": "https://github.com/rust-lang/rust/commit/e257f38160b361f738e9c42c3b76665fbbf13aa4"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "1ca682a46aaafe2a22c4165a24fe194222ca65e6", "filename": "src/tools/compiletest/src/read2/tests.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8ea95988df4d493ec3f556ab0de6b0b812ed27be/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea95988df4d493ec3f556ab0de6b0b812ed27be/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2%2Ftests.rs?ref=8ea95988df4d493ec3f556ab0de6b0b812ed27be", "patch": "@@ -1,4 +1,4 @@\n-use crate::read2::{ProcOutput, EXCLUDED_PLACEHOLDER_LEN, HEAD_LEN, TAIL_LEN};\n+use crate::read2::{ProcOutput, FILTERED_PATHS_PLACEHOLDER_LEN, HEAD_LEN, TAIL_LEN};\n \n #[test]\n fn test_abbreviate_short_string() {\n@@ -59,21 +59,21 @@ fn test_abbreviate_long_string_multiple_steps() {\n }\n \n #[test]\n-fn test_abbreviate_exclusions_are_detected() {\n+fn test_abbreviate_filterss_are_detected() {\n     let mut out = ProcOutput::new();\n-    let exclusions = &[\"foo\".to_string(), \"quux\".to_string()];\n+    let filters = &[\"foo\".to_string(), \"quux\".to_string()];\n \n-    out.extend(b\"Hello foo\", exclusions);\n+    out.extend(b\"Hello foo\", filters);\n     // Check items from a previous extension are not double-counted.\n-    out.extend(b\"! This is a qu\", exclusions);\n+    out.extend(b\"! This is a qu\", filters);\n     // Check items are detected across extensions.\n-    out.extend(b\"ux.\", exclusions);\n+    out.extend(b\"ux.\", filters);\n \n-    match out {\n-        ProcOutput::Full { excluded_len, .. } => assert_eq!(\n-            excluded_len,\n-            EXCLUDED_PLACEHOLDER_LEN * exclusions.len() as isize\n-                - exclusions.iter().map(|i| i.len() as isize).sum::<isize>()\n+    match &out {\n+        ProcOutput::Full { bytes, filtered_len } => assert_eq!(\n+            *filtered_len,\n+            bytes.len() + FILTERED_PATHS_PLACEHOLDER_LEN * filters.len()\n+                - filters.iter().map(|i| i.len()).sum::<usize>()\n         ),\n         ProcOutput::Abbreviated { .. } => panic!(\"out should not be abbreviated\"),\n     }\n@@ -82,15 +82,15 @@ fn test_abbreviate_exclusions_are_detected() {\n }\n \n #[test]\n-fn test_abbreviate_exclusions_avoid_abbreviations() {\n+fn test_abbreviate_filters_avoid_abbreviations() {\n     let mut out = ProcOutput::new();\n-    let exclusions = &[std::iter::repeat('a').take(64).collect::<String>()];\n+    let filters = &[std::iter::repeat('a').take(64).collect::<String>()];\n \n-    let mut expected = vec![b'.'; HEAD_LEN - EXCLUDED_PLACEHOLDER_LEN as usize];\n-    expected.extend_from_slice(exclusions[0].as_bytes());\n+    let mut expected = vec![b'.'; HEAD_LEN - FILTERED_PATHS_PLACEHOLDER_LEN as usize];\n+    expected.extend_from_slice(filters[0].as_bytes());\n     expected.extend_from_slice(&vec![b'.'; TAIL_LEN]);\n \n-    out.extend(&expected, exclusions);\n+    out.extend(&expected, filters);\n \n     // We first check the length to avoid endless terminal output if the length differs, since\n     // `out` is hundreds of KBs in size.\n@@ -100,20 +100,20 @@ fn test_abbreviate_exclusions_avoid_abbreviations() {\n }\n \n #[test]\n-fn test_abbreviate_exclusions_can_still_cause_abbreviations() {\n+fn test_abbreviate_filters_can_still_cause_abbreviations() {\n     let mut out = ProcOutput::new();\n-    let exclusions = &[std::iter::repeat('a').take(64).collect::<String>()];\n+    let filters = &[std::iter::repeat('a').take(64).collect::<String>()];\n \n     let mut input = vec![b'.'; HEAD_LEN];\n     input.extend_from_slice(&vec![b'.'; TAIL_LEN]);\n-    input.extend_from_slice(exclusions[0].as_bytes());\n+    input.extend_from_slice(filters[0].as_bytes());\n \n     let mut expected = vec![b'.'; HEAD_LEN];\n     expected.extend_from_slice(b\"\\n\\n<<<<<< SKIPPED 64 BYTES >>>>>>\\n\\n\");\n     expected.extend_from_slice(&vec![b'.'; TAIL_LEN - 64]);\n     expected.extend_from_slice(&vec![b'a'; 64]);\n \n-    out.extend(&input, exclusions);\n+    out.extend(&input, filters);\n \n     // We first check the length to avoid endless terminal output if the length differs, since\n     // `out` is hundreds of KBs in size."}]}