{"sha": "4ec2831ebcf96775fe6de97ab4c73eb1368b667a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYzI4MzFlYmNmOTY3NzVmZTZkZTk3YWI0YzczZWIxMzY4YjY2N2E=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-13T17:45:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-13T17:45:46Z"}, "message": "No silent truncating of SwitchInt values", "tree": {"sha": "91e8868ec847094bbed4a68af56c5d9576649ce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e8868ec847094bbed4a68af56c5d9576649ce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec2831ebcf96775fe6de97ab4c73eb1368b667a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec2831ebcf96775fe6de97ab4c73eb1368b667a", "html_url": "https://github.com/rust-lang/rust/commit/4ec2831ebcf96775fe6de97ab4c73eb1368b667a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec2831ebcf96775fe6de97ab4c73eb1368b667a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfb1daea7a79ad983058098a091a2f4a7525cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfb1daea7a79ad983058098a091a2f4a7525cc9", "html_url": "https://github.com/rust-lang/rust/commit/8dfb1daea7a79ad983058098a091a2f4a7525cc9"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "a1e7a33d607f232cd29d86362da9a7c9804da7d1", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec2831ebcf96775fe6de97ab4c73eb1368b667a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec2831ebcf96775fe6de97ab4c73eb1368b667a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4ec2831ebcf96775fe6de97ab4c73eb1368b667a", "patch": "@@ -283,7 +283,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 let mut switch = ::cranelift_frontend::Switch::new();\n                 for (i, value) in values.iter().enumerate() {\n                     let block = fx.get_block(targets[i]);\n-                    switch.set_entry(*value as u64, block);\n+                    switch.set_entry((*value).try_into().unwrap(), block);\n                 }\n                 let otherwise_block = fx.get_block(targets[targets.len() - 1]);\n                 switch.emit(&mut fx.bcx, discr, otherwise_block);"}]}