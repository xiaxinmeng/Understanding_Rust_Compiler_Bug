{"sha": "96137798556e662e9bb744fb58055e06147b9330", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MTM3Nzk4NTU2ZTY2MmU5YmI3NDRmYjU4MDU1ZTA2MTQ3YjkzMzA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-23T19:43:21Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-24T16:42:04Z"}, "message": "Make borrow_of_local_data iterate instead of recurse", "tree": {"sha": "563434cfc8650e6b21615d911ad6d9c3325fff5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563434cfc8650e6b21615d911ad6d9c3325fff5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96137798556e662e9bb744fb58055e06147b9330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96137798556e662e9bb744fb58055e06147b9330", "html_url": "https://github.com/rust-lang/rust/commit/96137798556e662e9bb744fb58055e06147b9330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96137798556e662e9bb744fb58055e06147b9330/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27cc0db7a248308fc2634ac68d7608a20b4a1c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/27cc0db7a248308fc2634ac68d7608a20b4a1c09", "html_url": "https://github.com/rust-lang/rust/commit/27cc0db7a248308fc2634ac68d7608a20b4a1c09"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "caef8d8bc5a925820b1f7b1ec86581757113d220", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/96137798556e662e9bb744fb58055e06147b9330/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96137798556e662e9bb744fb58055e06147b9330/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=96137798556e662e9bb744fb58055e06147b9330", "patch": "@@ -131,22 +131,20 @@ pub(super) fn is_active<'tcx>(\n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n pub(super) fn borrow_of_local_data<'tcx>(place: &Place<'tcx>) -> bool {\n-    match place {\n-        Place::Base(PlaceBase::Static(..)) => false,\n-        Place::Base(PlaceBase::Local(..)) => true,\n-        Place::Projection(box proj) => {\n-            match proj.elem {\n-                // Reborrow of already borrowed data is ignored\n-                // Any errors will be caught on the initial borrow\n-                ProjectionElem::Deref => false,\n+    place.iterate(|place_base, place_projection| {\n+        match place_base {\n+            PlaceBase::Static(..) => return false,\n+            PlaceBase::Local(..) => {},\n+        }\n \n-                // For interior references and downcasts, find out if the base is local\n-                ProjectionElem::Field(..)\n-                    | ProjectionElem::Index(..)\n-                    | ProjectionElem::ConstantIndex { .. }\n-                | ProjectionElem::Subslice { .. }\n-                | ProjectionElem::Downcast(..) => borrow_of_local_data(&proj.base),\n+        for proj in place_projection {\n+            // Reborrow of already borrowed data is ignored\n+            // Any errors will be caught on the initial borrow\n+            if proj.elem == ProjectionElem::Deref {\n+                return false;\n             }\n         }\n-    }\n+\n+        true\n+    })\n }"}]}