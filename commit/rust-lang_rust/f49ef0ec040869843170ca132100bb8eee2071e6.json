{"sha": "f49ef0ec040869843170ca132100bb8eee2071e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OWVmMGVjMDQwODY5ODQzMTcwY2ExMzIxMDBiYjhlZWUyMDcxZTY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-17T23:34:52Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-17T23:42:15Z"}, "message": "Dogfood", "tree": {"sha": "b7cf9cb2b4125606c8fc11633cd362b8d3549066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7cf9cb2b4125606c8fc11633cd362b8d3549066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f49ef0ec040869843170ca132100bb8eee2071e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f49ef0ec040869843170ca132100bb8eee2071e6", "html_url": "https://github.com/rust-lang/rust/commit/f49ef0ec040869843170ca132100bb8eee2071e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f49ef0ec040869843170ca132100bb8eee2071e6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "462df721008210c45993c440c501ccd9576c2fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/462df721008210c45993c440c501ccd9576c2fb2", "html_url": "https://github.com/rust-lang/rust/commit/462df721008210c45993c440c501ccd9576c2fb2"}], "stats": {"total": 148, "additions": 73, "deletions": 75}, "files": [{"sha": "15de782114496b1b166d775da5a199002fa1d247", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=f49ef0ec040869843170ca132100bb8eee2071e6", "patch": "@@ -72,7 +72,7 @@ fn check_lit(cx: &LateContext<'_, '_>, lit: &LitKind, e: &Expr) {\n fn check_known_consts(cx: &LateContext<'_, '_>, e: &Expr, s: symbol::Symbol, module: &str) {\n     let s = s.as_str();\n     if s.parse::<f64>().is_ok() {\n-        for &(constant, name, min_digits) in KNOWN_CONSTS.iter() {\n+        for &(constant, name, min_digits) in &KNOWN_CONSTS {\n             if is_approx_const(constant, &s, min_digits) {\n                 span_lint(\n                     cx,"}, {"sha": "92768d14fd451d44bcc2ae00a868adcdc0110088", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=f49ef0ec040869843170ca132100bb8eee2071e6", "patch": "@@ -139,7 +139,7 @@ const HEURISTICS: [(&str, usize, Heuristic, Finiteness); 19] = [\n fn is_infinite(cx: &LateContext<'_, '_>, expr: &Expr) -> Finiteness {\n     match expr.node {\n         ExprKind::MethodCall(ref method, _, ref args) => {\n-            for &(name, len, heuristic, cap) in HEURISTICS.iter() {\n+            for &(name, len, heuristic, cap) in &HEURISTICS {\n                 if method.ident.name.as_str() == name && args.len() == len {\n                     return (match heuristic {\n                         Always => Infinite,\n@@ -215,12 +215,12 @@ const INFINITE_COLLECTORS: [&[&str]; 8] = [\n fn complete_infinite_iter(cx: &LateContext<'_, '_>, expr: &Expr) -> Finiteness {\n     match expr.node {\n         ExprKind::MethodCall(ref method, _, ref args) => {\n-            for &(name, len) in COMPLETING_METHODS.iter() {\n+            for &(name, len) in &COMPLETING_METHODS {\n                 if method.ident.name.as_str() == name && args.len() == len {\n                     return is_infinite(cx, &args[0]);\n                 }\n             }\n-            for &(name, len) in POSSIBLY_COMPLETING_METHODS.iter() {\n+            for &(name, len) in &POSSIBLY_COMPLETING_METHODS {\n                 if method.ident.name.as_str() == name && args.len() == len {\n                     return MaybeInfinite.and(is_infinite(cx, &args[0]));\n                 }"}, {"sha": "de7d5a46453adfb2e527eeeb2c5a2c8855767b28", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 56, "deletions": 61, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f49ef0ec040869843170ca132100bb8eee2071e6", "patch": "@@ -6,7 +6,6 @@ use std::fmt;\n use std::iter;\n \n use if_chain::if_chain;\n-use lazy_static::lazy_static;\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::{DefKind, Res};\n@@ -17,7 +16,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n-use syntax::symbol::{LocalInternedString, Symbol};\n+use syntax::symbol::LocalInternedString;\n \n use crate::utils::paths;\n use crate::utils::sugg;\n@@ -914,8 +913,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n \n                 match self_ty.sty {\n                     ty::Ref(_, ty, _) if ty.sty == ty::Str => {\n-                        for &(method, pos) in PATTERN_METHODS.iter() {\n-                            if method_call.ident.name == method && args.len() > pos {\n+                        for &(method, pos) in &PATTERN_METHODS {\n+                            if method_call.ident.name.as_str() == method && args.len() > pos {\n                                 lint_single_char_pattern(cx, expr, &args[pos]);\n                             }\n                         }\n@@ -945,7 +944,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         if in_external_macro(cx.sess(), implitem.span) {\n             return;\n         }\n-        let name = implitem.ident.name;\n+        let name = implitem.ident.name.as_str();\n         let parent = cx.tcx.hir().get_parent_item(implitem.hir_id);\n         let item = cx.tcx.hir().expect_item_by_hir_id(parent);\n         let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n@@ -958,7 +957,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             then {\n                 if cx.access_levels.is_exported(implitem.hir_id) {\n                 // check missing trait implementations\n-                    for &(method_name, n_args, self_kind, out_type, trait_name) in TRAIT_METHODS.iter() {\n+                    for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         if name == method_name &&\n                         sig.decl.inputs.len() == n_args &&\n                         out_type.matches(cx, &sig.decl.output) &&\n@@ -973,7 +972,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                 // check conventions w.r.t. conversion method names and predicates\n                 let is_copy = is_copy(cx, ty);\n                 for &(ref conv, self_kinds) in &CONVENTIONS {\n-                    if conv.check(&name.as_str()) {\n+                    if conv.check(&name) {\n                         if !self_kinds\n                                 .iter()\n                                 .any(|k| k.matches(cx, first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics)) {\n@@ -1032,7 +1031,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                 }\n             }\n \n-            if name == sym!(new) && !same_tys(cx, ret_ty, ty) {\n+            if name == \"new\" && !same_tys(cx, ret_ty, ty) {\n                 span_lint(\n                     cx,\n                     NEW_RET_NO_SELF,\n@@ -2407,63 +2406,59 @@ const CONVENTIONS: [(Convention, &[SelfKind]); 7] = [\n ];\n \n #[rustfmt::skip]\n-lazy_static! {\n-static ref TRAIT_METHODS: [(Symbol, usize, SelfKind, OutType, &'static str); 30] = [\n-    (sym!(add), 2, SelfKind::Value, OutType::Any, \"std::ops::Add\"),\n-    (sym!(as_mut), 1, SelfKind::RefMut, OutType::Ref, \"std::convert::AsMut\"),\n-    (sym!(as_ref), 1, SelfKind::Ref, OutType::Ref, \"std::convert::AsRef\"),\n-    (sym!(bitand), 2, SelfKind::Value, OutType::Any, \"std::ops::BitAnd\"),\n-    (sym!(bitor), 2, SelfKind::Value, OutType::Any, \"std::ops::BitOr\"),\n-    (sym!(bitxor), 2, SelfKind::Value, OutType::Any, \"std::ops::BitXor\"),\n-    (sym!(borrow), 1, SelfKind::Ref, OutType::Ref, \"std::borrow::Borrow\"),\n-    (sym!(borrow_mut), 1, SelfKind::RefMut, OutType::Ref, \"std::borrow::BorrowMut\"),\n-    (sym!(clone), 1, SelfKind::Ref, OutType::Any, \"std::clone::Clone\"),\n-    (sym!(cmp), 2, SelfKind::Ref, OutType::Any, \"std::cmp::Ord\"),\n-    (sym!(default), 0, SelfKind::No, OutType::Any, \"std::default::Default\"),\n-    (sym!(deref), 1, SelfKind::Ref, OutType::Ref, \"std::ops::Deref\"),\n-    (sym!(deref_mut), 1, SelfKind::RefMut, OutType::Ref, \"std::ops::DerefMut\"),\n-    (sym!(div), 2, SelfKind::Value, OutType::Any, \"std::ops::Div\"),\n-    (sym!(drop), 1, SelfKind::RefMut, OutType::Unit, \"std::ops::Drop\"),\n-    (sym!(eq), 2, SelfKind::Ref, OutType::Bool, \"std::cmp::PartialEq\"),\n-    (sym!(from_iter), 1, SelfKind::No, OutType::Any, \"std::iter::FromIterator\"),\n-    (sym!(from_str), 1, SelfKind::No, OutType::Any, \"std::str::FromStr\"),\n-    (sym!(hash), 2, SelfKind::Ref, OutType::Unit, \"std::hash::Hash\"),\n-    (sym!(index), 2, SelfKind::Ref, OutType::Ref, \"std::ops::Index\"),\n-    (sym!(index_mut), 2, SelfKind::RefMut, OutType::Ref, \"std::ops::IndexMut\"),\n-    (sym!(into_iter), 1, SelfKind::Value, OutType::Any, \"std::iter::IntoIterator\"),\n-    (sym!(mul), 2, SelfKind::Value, OutType::Any, \"std::ops::Mul\"),\n-    (sym!(neg), 1, SelfKind::Value, OutType::Any, \"std::ops::Neg\"),\n-    (sym!(next), 1, SelfKind::RefMut, OutType::Any, \"std::iter::Iterator\"),\n-    (sym!(not), 1, SelfKind::Value, OutType::Any, \"std::ops::Not\"),\n-    (sym!(rem), 2, SelfKind::Value, OutType::Any, \"std::ops::Rem\"),\n-    (sym!(shl), 2, SelfKind::Value, OutType::Any, \"std::ops::Shl\"),\n-    (sym!(shr), 2, SelfKind::Value, OutType::Any, \"std::ops::Shr\"),\n-    (sym!(sub), 2, SelfKind::Value, OutType::Any, \"std::ops::Sub\"),\n+const TRAIT_METHODS: [(&str, usize, SelfKind, OutType, &str); 30] = [\n+    (\"add\", 2, SelfKind::Value, OutType::Any, \"std::ops::Add\"),\n+    (\"as_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::convert::AsMut\"),\n+    (\"as_ref\", 1, SelfKind::Ref, OutType::Ref, \"std::convert::AsRef\"),\n+    (\"bitand\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitAnd\"),\n+    (\"bitor\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitOr\"),\n+    (\"bitxor\", 2, SelfKind::Value, OutType::Any, \"std::ops::BitXor\"),\n+    (\"borrow\", 1, SelfKind::Ref, OutType::Ref, \"std::borrow::Borrow\"),\n+    (\"borrow_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::borrow::BorrowMut\"),\n+    (\"clone\", 1, SelfKind::Ref, OutType::Any, \"std::clone::Clone\"),\n+    (\"cmp\", 2, SelfKind::Ref, OutType::Any, \"std::cmp::Ord\"),\n+    (\"default\", 0, SelfKind::No, OutType::Any, \"std::default::Default\"),\n+    (\"deref\", 1, SelfKind::Ref, OutType::Ref, \"std::ops::Deref\"),\n+    (\"deref_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::ops::DerefMut\"),\n+    (\"div\", 2, SelfKind::Value, OutType::Any, \"std::ops::Div\"),\n+    (\"drop\", 1, SelfKind::RefMut, OutType::Unit, \"std::ops::Drop\"),\n+    (\"eq\", 2, SelfKind::Ref, OutType::Bool, \"std::cmp::PartialEq\"),\n+    (\"from_iter\", 1, SelfKind::No, OutType::Any, \"std::iter::FromIterator\"),\n+    (\"from_str\", 1, SelfKind::No, OutType::Any, \"std::str::FromStr\"),\n+    (\"hash\", 2, SelfKind::Ref, OutType::Unit, \"std::hash::Hash\"),\n+    (\"index\", 2, SelfKind::Ref, OutType::Ref, \"std::ops::Index\"),\n+    (\"index_mut\", 2, SelfKind::RefMut, OutType::Ref, \"std::ops::IndexMut\"),\n+    (\"into_iter\", 1, SelfKind::Value, OutType::Any, \"std::iter::IntoIterator\"),\n+    (\"mul\", 2, SelfKind::Value, OutType::Any, \"std::ops::Mul\"),\n+    (\"neg\", 1, SelfKind::Value, OutType::Any, \"std::ops::Neg\"),\n+    (\"next\", 1, SelfKind::RefMut, OutType::Any, \"std::iter::Iterator\"),\n+    (\"not\", 1, SelfKind::Value, OutType::Any, \"std::ops::Not\"),\n+    (\"rem\", 2, SelfKind::Value, OutType::Any, \"std::ops::Rem\"),\n+    (\"shl\", 2, SelfKind::Value, OutType::Any, \"std::ops::Shl\"),\n+    (\"shr\", 2, SelfKind::Value, OutType::Any, \"std::ops::Shr\"),\n+    (\"sub\", 2, SelfKind::Value, OutType::Any, \"std::ops::Sub\"),\n ];\n-}\n \n #[rustfmt::skip]\n-lazy_static! {\n-static ref PATTERN_METHODS: [(Symbol, usize); 17] = [\n-    (sym!(contains), 1),\n-    (sym!(starts_with), 1),\n-    (sym!(ends_with), 1),\n-    (sym!(find), 1),\n-    (sym!(rfind), 1),\n-    (sym!(split), 1),\n-    (sym!(rsplit), 1),\n-    (sym!(split_terminator), 1),\n-    (sym!(rsplit_terminator), 1),\n-    (sym!(splitn), 2),\n-    (sym!(rsplitn), 2),\n-    (sym!(matches), 1),\n-    (sym!(rmatches), 1),\n-    (sym!(match_indices), 1),\n-    (sym!(rmatch_indices), 1),\n-    (sym!(trim_start_matches), 1),\n-    (sym!(trim_end_matches), 1),\n+const PATTERN_METHODS: [(&str, usize); 17] = [\n+    (\"contains\", 1),\n+    (\"starts_with\", 1),\n+    (\"ends_with\", 1),\n+    (\"find\", 1),\n+    (\"rfind\", 1),\n+    (\"split\", 1),\n+    (\"rsplit\", 1),\n+    (\"split_terminator\", 1),\n+    (\"rsplit_terminator\", 1),\n+    (\"splitn\", 2),\n+    (\"rsplitn\", 2),\n+    (\"matches\", 1),\n+    (\"rmatches\", 1),\n+    (\"match_indices\", 1),\n+    (\"rmatch_indices\", 1),\n+    (\"trim_start_matches\", 1),\n+    (\"trim_end_matches\", 1),\n ];\n-}\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n enum SelfKind {"}, {"sha": "c15eca15c1bb317f321dc3337c1d72f40c0b841e", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=f49ef0ec040869843170ca132100bb8eee2071e6", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n             if let hir::ExprKind::Path(ref qp) = expr.node;\n             if let Res::Def(DefKind::Const, def_id) = cx.tables.qpath_res(qp, expr.hir_id);\n             then {\n-                for (const_path, repl_snip) in REPLACEMENTS.iter() {\n+                for (const_path, repl_snip) in &REPLACEMENTS {\n                     if match_def_path(cx, def_id, const_path) {\n                         span_lint_and_sugg(\n                             cx,"}, {"sha": "5e79c231e413c409d02113c1353aa1ec57f54a38", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=f49ef0ec040869843170ca132100bb8eee2071e6", "patch": "@@ -7,8 +7,9 @@ use rustc::hir::*;\n use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use syntax::ast::{Crate as AstCrate, Name};\n+use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n use syntax::source_map::Span;\n+use syntax_pos::symbol::LocalInternedString;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for various things we like to keep tidy in clippy.\n@@ -74,12 +75,15 @@ declare_clippy_lint! {\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n-    fn check_crate(&mut self, _cx: &EarlyContext<'_>, _krate: &AstCrate) {\n-        /*\n-        FIXME: turn back on when we get rid of all the lazy_statics\n-        if let Some(utils) = krate.module.items.iter().find(|item| item.ident.name == sym!(utils)) {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &AstCrate) {\n+        if let Some(utils) = krate\n+            .module\n+            .items\n+            .iter()\n+            .find(|item| item.ident.name.as_str() == \"utils\")\n+        {\n             if let ItemKind::Mod(ref utils_mod) = utils.node {\n-                if let Some(paths) = utils_mod.items.iter().find(|item| item.ident.name == sym!(paths)) {\n+                if let Some(paths) = utils_mod.items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n                     if let ItemKind::Mod(ref paths_mod) = paths.node {\n                         let mut last_name: Option<LocalInternedString> = None;\n                         for item in &*paths_mod.items {\n@@ -101,7 +105,6 @@ impl EarlyLintPass for ClippyLintsInternal {\n                 }\n             }\n         }\n-        */\n     }\n }\n "}, {"sha": "e0f4d4080084788f7854c8598de92c35b1c183a4", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ef0ec040869843170ca132100bb8eee2071e6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=f49ef0ec040869843170ca132100bb8eee2071e6", "patch": "@@ -96,10 +96,10 @@ pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 3] = [\"core\", \"slice\", \"Iter\"];\n-pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n-pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];\n pub const STDOUT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stdout\"];\n+pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n+pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];"}]}