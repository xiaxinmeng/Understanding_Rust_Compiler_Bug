{"sha": "5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNWM3ZGVkMGQ0OGRmMDEwZDBhNGY1ZmVmOGE4NWRmZWFlNjhjMTY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-06-13T13:44:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-06-14T15:05:12Z"}, "message": "rustc: rename ty::maps to ty::query.", "tree": {"sha": "80fdee536d045a59bc4d0a5bb599fc1cd60eb074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80fdee536d045a59bc4d0a5bb599fc1cd60eb074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "html_url": "https://github.com/rust-lang/rust/commit/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f20af002e33a3f38b51a7e3f9c63bcae4214613", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f20af002e33a3f38b51a7e3f9c63bcae4214613", "html_url": "https://github.com/rust-lang/rust/commit/7f20af002e33a3f38b51a7e3f9c63bcae4214613"}], "stats": {"total": 456, "additions": 247, "deletions": 209}, "files": [{"sha": "6da4944c392db58bde3aec9f189323da38cfac24", "filename": "src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -6,7 +6,7 @@ This directory contains the source code of the rust project, including:\n For more information on how various parts of the compiler work, see the [rustc guide].\n \n Their is also useful content in the following READMEs, which are gradually being moved over to the guide:\n-- https://github.com/rust-lang/rust/tree/master/src/librustc/ty/maps\n+- https://github.com/rust-lang/rust/tree/master/src/librustc/ty/query\n - https://github.com/rust-lang/rust/tree/master/src/librustc/dep_graph\n - https://github.com/rust-lang/rust/blob/master/src/librustc/infer/region_constraints\n - https://github.com/rust-lang/rust/tree/master/src/librustc/infer/higher_ranked"}, {"sha": "2390d7eccce765ad275d5dbc64d31ee5bfead42c", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -656,7 +656,7 @@ impl DepGraph {\n                     // We failed to mark it green, so we try to force the query.\n                     debug!(\"try_mark_green({:?}) --- trying to force \\\n                             dependency {:?}\", dep_node, dep_dep_node);\n-                    if ::ty::maps::force_from_dep_node(tcx, dep_dep_node) {\n+                    if ::ty::query::force_from_dep_node(tcx, dep_dep_node) {\n                         let dep_dep_node_color = data.colors.borrow().get(dep_dep_node_index);\n \n                         match dep_dep_node_color {\n@@ -742,14 +742,14 @@ impl DepGraph {\n             // and emit other diagnostics before these diagnostics are emitted.\n             // Such diagnostics should be emitted after these.\n             // See https://github.com/rust-lang/rust/issues/48685\n-            let diagnostics = tcx.on_disk_query_result_cache\n+            let diagnostics = tcx.queries.on_disk_cache\n                                  .load_diagnostics(tcx, prev_dep_node_index);\n \n             if diagnostics.len() > 0 {\n                 let handle = tcx.sess.diagnostic();\n \n                 // Promote the previous diagnostics to the current session.\n-                tcx.on_disk_query_result_cache\n+                tcx.queries.on_disk_cache\n                    .store_diagnostics(dep_node_index, diagnostics.clone());\n \n                 for diagnostic in diagnostics {"}, {"sha": "a0952720945e870ae2cffcf4b95c61ba3ca92ffb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -45,7 +45,7 @@ use syntax::tokenstream::TokenStream;\n use syntax::util::ThinVec;\n use syntax::util::parser::ExprPrecedence;\n use ty::AdtKind;\n-use ty::maps::Providers;\n+use ty::query::Providers;\n \n use rustc_data_structures::indexed_vec;\n use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope};"}, {"sha": "9338e235c534df2f9fd7afd9a9a5d72e47023606", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -47,7 +47,7 @@ use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n use syntax_pos::Span;\n use ty::TyCtxt;\n-use ty::maps::Providers;\n+use ty::query::Providers;\n use util::nodemap::NodeMap;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,"}, {"sha": "2fa77be644e312bf898427dd7435e239d81946be", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -11,7 +11,7 @@\n use hir::def_id::DefId;\n use ty;\n use ty::subst::Substs;\n-use ty::maps::TyCtxtAt;\n+use ty::query::TyCtxtAt;\n use mir::interpret::ConstValue;\n use errors::DiagnosticBuilder;\n "}, {"sha": "6b47a90079a6e711518ae378bb97174d8ac67156", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -21,7 +21,7 @@ use hir::def::Def;\n use hir::def_id::{DefId, CrateNum};\n use rustc_data_structures::sync::Lrc;\n use ty::{self, TyCtxt};\n-use ty::maps::Providers;\n+use ty::query::Providers;\n use middle::privacy;\n use session::config;\n use util::nodemap::{NodeSet, FxHashSet};"}, {"sha": "e478f493647728e9cb50886c7bbba443d54fcc6f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -27,7 +27,7 @@ use syntax::codemap;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n use ty::TyCtxt;\n-use ty::maps::Providers;\n+use ty::query::Providers;\n \n use hir;\n use hir::def_id::DefId;"}, {"sha": "781d48e2123938d2e57608242cf2f94c8d523135", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -349,8 +349,8 @@ type ScopeRef<'a> = &'a Scope<'a>;\n \n const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n \n-pub fn provide(providers: &mut ty::maps::Providers) {\n-    *providers = ty::maps::Providers {\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers {\n         resolve_lifetimes,\n \n         named_region_map: |tcx, id| {"}, {"sha": "761de0014384265933c40d77a94430659c83d95b", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -991,8 +991,8 @@ impl<'tcx> TraitObligation<'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::maps::Providers) {\n-    *providers = ty::maps::Providers {\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers {\n         is_object_safe: object_safety::is_object_safe_provider,\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,"}, {"sha": "4433394d2719f89cd99d9a5fb11c304a70463c9d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -46,7 +46,7 @@ use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n use ty::TypeVariants::*;\n use ty::GenericParamDefKind;\n use ty::layout::{LayoutDetails, TargetDataLayout};\n-use ty::maps;\n+use ty::query;\n use ty::steal::Steal;\n use ty::BindingMode;\n use ty::CanonicalTy;\n@@ -863,11 +863,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub dep_graph: DepGraph,\n \n-    /// This provides access to the incr. comp. on-disk cache for query results.\n-    /// Do not access this directly. It is only meant to be used by\n-    /// `DepGraph::try_mark_green()` and the query infrastructure in `ty::maps`.\n-    pub(crate) on_disk_query_result_cache: maps::OnDiskCache<'tcx>,\n-\n     /// Common types, pre-interned for your convenience.\n     pub types: CommonTypes<'tcx>,\n \n@@ -886,7 +881,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// as well as all upstream crates. Only populated in incremental mode.\n     pub def_path_hash_to_def_id: Option<FxHashMap<DefPathHash, DefId>>,\n \n-    pub maps: maps::Maps<'tcx>,\n+    pub(crate) queries: query::Queries<'tcx>,\n \n     // Records the free variables refrenced by every closure\n     // expression. Do not track deps for this, just recompute it from\n@@ -1074,12 +1069,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n                                   cstore: &'tcx CrateStoreDyn,\n-                                  local_providers: ty::maps::Providers<'tcx>,\n-                                  extern_providers: ty::maps::Providers<'tcx>,\n+                                  local_providers: ty::query::Providers<'tcx>,\n+                                  extern_providers: ty::query::Providers<'tcx>,\n                                   arenas: &'tcx AllArenas<'tcx>,\n                                   resolutions: ty::Resolutions,\n                                   hir: hir_map::Map<'tcx>,\n-                                  on_disk_query_result_cache: maps::OnDiskCache<'tcx>,\n+                                  on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n                                   crate_name: &str,\n                                   tx: mpsc::Sender<Box<dyn Any + Send>>,\n                                   output_filenames: &OutputFilenames,\n@@ -1144,7 +1139,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             global_arenas: &arenas.global,\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n-            on_disk_query_result_cache,\n             types: common_types,\n             trait_map,\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n@@ -1165,7 +1159,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     .collect(),\n             hir,\n             def_path_hash_to_def_id,\n-            maps: maps::Maps::new(providers),\n+            queries: query::Queries::new(providers, on_disk_query_result_cache),\n             rcache: Lock::new(FxHashMap()),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n@@ -1343,7 +1337,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                            -> Result<(), E::Error>\n         where E: ty::codec::TyEncoder\n     {\n-        self.on_disk_query_result_cache.serialize(self.global_tcx(), encoder)\n+        self.queries.on_disk_cache.serialize(self.global_tcx(), encoder)\n     }\n \n     /// If true, we should use a naive AST walk to determine if match\n@@ -1702,7 +1696,7 @@ pub mod tls {\n     use std::fmt;\n     use std::mem;\n     use syntax_pos;\n-    use ty::maps;\n+    use ty::query;\n     use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n     use rustc_data_structures::OnDrop;\n     use rustc_data_structures::sync::{self, Lrc, Lock};\n@@ -1726,8 +1720,8 @@ pub mod tls {\n         pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n         /// The current query job, if any. This is updated by start_job in\n-        /// ty::maps::plumbing when executing a query\n-        pub query: Option<Lrc<maps::QueryJob<'gcx>>>,\n+        /// ty::query::plumbing when executing a query\n+        pub query: Option<Lrc<query::QueryJob<'gcx>>>,\n \n         /// Used to prevent layout from recursing too deeply.\n         pub layout_depth: usize,\n@@ -2792,7 +2786,7 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::maps::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about"}, {"sha": "2fb2154ce6ba0f5a3ca0ce277db399af4941cf04", "filename": "src/librustc/ty/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferase_regions.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -11,8 +11,8 @@\n use ty::{self, Ty, TyCtxt};\n use ty::fold::{TypeFolder, TypeFoldable};\n \n-pub(super) fn provide(providers: &mut ty::maps::Providers) {\n-    *providers = ty::maps::Providers {\n+pub(super) fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers {\n         erase_regions_ty,\n         ..*providers\n     };"}, {"sha": "f5c2a0c3f9f05f504c09026d9ec714749b7e8fff", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -194,8 +194,8 @@ fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     })\n }\n \n-pub fn provide(providers: &mut ty::maps::Providers) {\n-    *providers = ty::maps::Providers {\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers {\n         layout_raw,\n         ..*providers\n     };\n@@ -1481,7 +1481,7 @@ impl<'a, 'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n     }\n }\n \n-impl<'a, 'tcx> LayoutOf for LayoutCx<'tcx, ty::maps::TyCtxtAt<'a, 'tcx, 'tcx>> {\n+impl<'a, 'tcx> LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'a, 'tcx, 'tcx>> {\n     type Ty = Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n@@ -1527,7 +1527,7 @@ impl TyCtxt<'a, 'tcx, '_> {\n     }\n }\n \n-impl ty::maps::TyCtxtAt<'a, 'tcx, '_> {\n+impl ty::query::TyCtxtAt<'a, 'tcx, '_> {\n     /// Computes the layout of a type. Note that this implicitly\n     /// executes in \"reveal all\" mode.\n     #[inline]"}, {"sha": "2758503c60c9a3b98324521a146a7fe941da8594", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -85,7 +85,7 @@ pub use self::instance::{Instance, InstanceDef};\n \n pub use self::trait_def::TraitDef;\n \n-pub use self::maps::queries;\n+pub use self::query::queries;\n \n pub mod adjustment;\n pub mod binding;\n@@ -100,8 +100,8 @@ pub mod inhabitedness;\n pub mod item_path;\n pub mod layout;\n pub mod _match;\n-pub mod maps;\n pub mod outlives;\n+pub mod query;\n pub mod relate;\n pub mod steal;\n pub mod subst;\n@@ -2175,7 +2175,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     /// Due to normalization being eager, this applies even if\n     /// the associated type is behind a pointer, e.g. issue #31299.\n     pub fn sized_constraint(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> &'tcx [Ty<'tcx>] {\n-        match tcx.try_get_query::<queries::adt_sized_constraint>(DUMMY_SP, self.did) {\n+        match tcx.try_adt_sized_constraint(DUMMY_SP, self.did) {\n             Ok(tys) => tys,\n             Err(mut bug) => {\n                 debug!(\"adt_sized_constraint: {:?} is recursive\", self);\n@@ -2917,12 +2917,12 @@ fn instance_def_size_estimate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn provide(providers: &mut ty::maps::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n     util::provide(providers);\n-    *providers = ty::maps::Providers {\n+    *providers = ty::query::Providers {\n         associated_item,\n         associated_item_def_ids,\n         adt_sized_constraint,"}, {"sha": "ca6f0b77b6640b5c5c371792fe0f9e680e4e8b18", "filename": "src/librustc/ty/query/README.md", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2FREADME.md?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -55,7 +55,7 @@ get to use the nice method-call-style syntax. Instead, you invoke\n using the `try_get` method, which looks roughly like this:\n \n ```rust\n-use ty::maps::queries;\n+use ty::query::queries;\n ...\n match queries::type_of::try_get(tcx, DUMMY_SP, self.did) {\n   Ok(result) => {\n@@ -207,7 +207,7 @@ by the time you read this README, but at present it looks something\n like:\n \n ```\n-define_maps! { <'tcx>\n+define_queries! { <'tcx>\n     /// Records the type of every item.\n     [] fn type_of: TypeOfItem(DefId) -> Ty<'tcx>,\n \n@@ -235,7 +235,7 @@ Let's go over them one by one:\n   processed.\n - **Name of query:** the name of the query method\n   (`tcx.type_of(..)`). Also used as the name of a struct\n-  (`ty::maps::queries::type_of`) that will be generated to represent\n+  (`ty::query::queries::type_of`) that will be generated to represent\n   this query.\n - **Dep-node constructor:** indicates the constructor function that\n   connects this query to incremental compilation. Typically, this is a\n@@ -247,7 +247,7 @@ Let's go over them one by one:\n     bottom of the file. This is typically used when the query key is\n     not a def-id, or just not the type that the dep-node expects.\n - **Query key type:** the type of the argument to this query.\n-  This type must implement the `ty::maps::keys::Key` trait, which\n+  This type must implement the `ty::query::keys::Key` trait, which\n   defines (for example) how to map it to a crate, and so forth.\n - **Result type of query:** the type produced by this query. This type\n   should (a) not use `RefCell` or other interior mutability and (b) be\n@@ -260,14 +260,14 @@ Let's go over them one by one:\n \n So, to add a query:\n \n-- Add an entry to `define_maps!` using the format above.\n+- Add an entry to `define_queries!` using the format above.\n - Possibly add a corresponding entry to the dep-node macro.\n - Link the provider by modifying the appropriate `provide` method;\n   or add a new one if needed and ensure that `rustc_driver` is invoking it.\n \n #### Query structs and descriptions\n \n-For each kind, the `define_maps` macro will generate a \"query struct\"\n+For each kind, the `define_queries` macro will generate a \"query struct\"\n named after the query. This struct is a kind of a place-holder\n describing the query. Each such struct implements the\n `self::config::QueryConfig` trait, which has associated types for the", "previous_filename": "src/librustc/ty/maps/README.md"}, {"sha": "cc00e9a00abb32d2d6382c5a71336cd5bfb17274", "filename": "src/librustc/ty/query/config.rs", "status": "renamed", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -15,9 +15,9 @@ use mir::interpret::{GlobalId, ConstValue};\n use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal};\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::Substs;\n-use ty::maps::queries;\n-use ty::maps::Query;\n-use ty::maps::QueryMap;\n+use ty::query::queries;\n+use ty::query::Query;\n+use ty::query::QueryCache;\n \n use std::hash::Hash;\n use std::fmt::Debug;\n@@ -26,18 +26,20 @@ use rustc_data_structures::sync::Lock;\n use rustc_data_structures::stable_hasher::HashStable;\n use ich::StableHashingContext;\n \n-/// Query configuration and description traits.\n+// Query configuration and description traits.\n \n pub trait QueryConfig<'tcx> {\n     const NAME: &'static str;\n \n     type Key: Eq + Hash + Clone + Debug;\n     type Value: Clone + for<'a> HashStable<StableHashingContext<'a>>;\n+}\n \n+pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     fn query(key: Self::Key) -> Query<'tcx>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n-    fn query_map<'a>(tcx: TyCtxt<'a, 'tcx, '_>) -> &'a Lock<QueryMap<'tcx, Self>>;\n+    fn query_cache<'a>(tcx: TyCtxt<'a, 'tcx, '_>) -> &'a Lock<QueryCache<'tcx, Self>>;\n \n     fn to_dep_node(tcx: TyCtxt<'_, 'tcx, '_>, key: &Self::Key) -> DepNode;\n \n@@ -47,7 +49,7 @@ pub trait QueryConfig<'tcx> {\n     fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>) -> Self::Value;\n }\n \n-pub trait QueryDescription<'tcx>: QueryConfig<'tcx> {\n+pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n     fn describe(tcx: TyCtxt, key: Self::Key) -> String;\n \n     #[inline]\n@@ -62,7 +64,7 @@ pub trait QueryDescription<'tcx>: QueryConfig<'tcx> {\n     }\n }\n \n-impl<'tcx, M: QueryConfig<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n+impl<'tcx, M: QueryAccessors<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n     default fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         if !tcx.sess.verbose() {\n             format!(\"processing `{}`\", tcx.item_path_str(def_id))\n@@ -233,7 +235,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: SerializedDepNodeIndex)\n                               -> Option<Self::Value> {\n-        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id).map(Ok)\n+        tcx.queries.on_disk_cache.try_load_query_result(tcx, id).map(Ok)\n     }\n }\n \n@@ -257,7 +259,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: SerializedDepNodeIndex)\n                               -> Option<Self::Value> {\n-        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+        tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n     }\n }\n \n@@ -331,7 +333,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_sta\n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           id: SerializedDepNodeIndex)\n                           -> Option<Self::Value> {\n-        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+        tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n     }\n }\n \n@@ -363,7 +365,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx>\n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: SerializedDepNodeIndex)\n                               -> Option<Self::Value> {\n-        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+        tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n     }\n }\n \n@@ -683,7 +685,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n                           id: SerializedDepNodeIndex)\n                           -> Option<Self::Value> {\n         let typeck_tables: Option<ty::TypeckTables<'tcx>> = tcx\n-            .on_disk_query_result_cache\n+            .queries.on_disk_cache\n             .try_load_query_result(tcx, id);\n \n         typeck_tables.map(|tables| tcx.alloc_tables(tables))\n@@ -699,7 +701,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: SerializedDepNodeIndex)\n                               -> Option<Self::Value> {\n-        let mir: Option<::mir::Mir<'tcx>> = tcx.on_disk_query_result_cache\n+        let mir: Option<::mir::Mir<'tcx>> = tcx.queries.on_disk_cache\n                                                .try_load_query_result(tcx, id);\n         mir.map(|x| tcx.alloc_mir(x))\n     }\n@@ -738,7 +740,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: SerializedDepNodeIndex)\n                               -> Option<Self::Value> {\n-        let generics: Option<ty::Generics> = tcx.on_disk_query_result_cache\n+        let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n                                                 .try_load_query_result(tcx, id);\n         generics.map(|x| tcx.alloc_generics(x))\n     }\n@@ -780,7 +782,7 @@ macro_rules! impl_disk_cacheable_query(\n             fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       id: SerializedDepNodeIndex)\n                                       -> Option<Self::Value> {\n-                tcx.on_disk_query_result_cache.try_load_query_result(tcx, id)\n+                tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n             }\n         }\n     }", "previous_filename": "src/librustc/ty/maps/config.rs"}, {"sha": "a54deeca293d8611e3c4c8be2add1a1af5781382", "filename": "src/librustc/ty/query/job.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -15,8 +15,8 @@ use rustc_data_structures::sync::{Lock, LockGuard, Lrc, Weak};\n use rustc_data_structures::OnDrop;\n use syntax_pos::Span;\n use ty::tls;\n-use ty::maps::Query;\n-use ty::maps::plumbing::CycleError;\n+use ty::query::Query;\n+use ty::query::plumbing::CycleError;\n use ty::context::TyCtxt;\n use errors::Diagnostic;\n use std::process;\n@@ -497,7 +497,7 @@ fn deadlock(tcx: TyCtxt<'_, '_, '_>, registry: &rayon_core::Registry) {\n     });\n \n     let mut wakelist = Vec::new();\n-    let mut jobs: Vec<_> = tcx.maps.collect_active_jobs();\n+    let mut jobs: Vec<_> = tcx.queries.collect_active_jobs();\n \n     let mut found_cycle = false;\n ", "previous_filename": "src/librustc/ty/maps/job.rs"}, {"sha": "279d5ebb9901e11fbc1e6b849e4bd99d342f87ce", "filename": "src/librustc/ty/query/keys.rs", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -24,18 +24,18 @@ use syntax_pos::symbol::InternedString;\n \n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n-pub trait Key: Clone + Hash + Eq + Debug {\n+pub(super) trait Key: Clone + Hash + Eq + Debug {\n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n-    fn map_crate(&self) -> CrateNum;\n+    fn query_crate(&self) -> CrateNum;\n \n     /// In the event that a cycle occurs, if no explicit span has been\n     /// given for a query with key `self`, what span should we use?\n     fn default_span(&self, tcx: TyCtxt) -> Span;\n }\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n \n@@ -45,7 +45,7 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n }\n \n impl<'tcx> Key for ty::Instance<'tcx> {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n \n@@ -55,8 +55,8 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n }\n \n impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n-    fn map_crate(&self) -> CrateNum {\n-        self.instance.map_crate()\n+    fn query_crate(&self) -> CrateNum {\n+        self.instance.query_crate()\n     }\n \n     fn default_span(&self, tcx: TyCtxt) -> Span {\n@@ -65,7 +65,7 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n }\n \n impl Key for CrateNum {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         *self\n     }\n     fn default_span(&self, _: TyCtxt) -> Span {\n@@ -74,7 +74,7 @@ impl Key for CrateNum {\n }\n \n impl Key for DefIndex {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n     fn default_span(&self, _tcx: TyCtxt) -> Span {\n@@ -83,7 +83,7 @@ impl Key for DefIndex {\n }\n \n impl Key for DefId {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         self.krate\n     }\n     fn default_span(&self, tcx: TyCtxt) -> Span {\n@@ -92,7 +92,7 @@ impl Key for DefId {\n }\n \n impl Key for (DefId, DefId) {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n     fn default_span(&self, tcx: TyCtxt) -> Span {\n@@ -101,7 +101,7 @@ impl Key for (DefId, DefId) {\n }\n \n impl Key for (CrateNum, DefId) {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         self.0\n     }\n     fn default_span(&self, tcx: TyCtxt) -> Span {\n@@ -110,7 +110,7 @@ impl Key for (CrateNum, DefId) {\n }\n \n impl Key for (DefId, SimplifiedType) {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n     fn default_span(&self, tcx: TyCtxt) -> Span {\n@@ -119,7 +119,7 @@ impl Key for (DefId, SimplifiedType) {\n }\n \n impl<'tcx> Key for (DefId, &'tcx Substs<'tcx>) {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n     fn default_span(&self, tcx: TyCtxt) -> Span {\n@@ -128,7 +128,7 @@ impl<'tcx> Key for (DefId, &'tcx Substs<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         self.1.def_id().krate\n     }\n     fn default_span(&self, tcx: TyCtxt) -> Span {\n@@ -137,7 +137,7 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n }\n \n impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         self.def_id().krate\n     }\n     fn default_span(&self, tcx: TyCtxt) -> Span {\n@@ -146,7 +146,7 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n }\n \n impl<'tcx> Key for (mir::interpret::ConstValue<'tcx>, Ty<'tcx>) {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n     fn default_span(&self, _: TyCtxt) -> Span {\n@@ -155,7 +155,7 @@ impl<'tcx> Key for (mir::interpret::ConstValue<'tcx>, Ty<'tcx>) {\n }\n \n impl<'tcx> Key for Ty<'tcx> {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n     fn default_span(&self, _: TyCtxt) -> Span {\n@@ -164,7 +164,7 @@ impl<'tcx> Key for Ty<'tcx> {\n }\n \n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n     fn default_span(&self, _: TyCtxt) -> Span {\n@@ -173,16 +173,16 @@ impl<'tcx> Key for ty::ParamEnv<'tcx> {\n }\n \n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n-    fn map_crate(&self) -> CrateNum {\n-        self.value.map_crate()\n+    fn query_crate(&self) -> CrateNum {\n+        self.value.query_crate()\n     }\n     fn default_span(&self, tcx: TyCtxt) -> Span {\n         self.value.default_span(tcx)\n     }\n }\n \n impl Key for InternedString {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n     fn default_span(&self, _tcx: TyCtxt) -> Span {\n@@ -191,7 +191,7 @@ impl Key for InternedString {\n }\n \n impl<'tcx> Key for CanonicalProjectionGoal<'tcx> {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n \n@@ -201,7 +201,7 @@ impl<'tcx> Key for CanonicalProjectionGoal<'tcx> {\n }\n \n impl<'tcx> Key for CanonicalTyGoal<'tcx> {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n \n@@ -211,7 +211,7 @@ impl<'tcx> Key for CanonicalTyGoal<'tcx> {\n }\n \n impl<'tcx> Key for CanonicalPredicateGoal<'tcx> {\n-    fn map_crate(&self) -> CrateNum {\n+    fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n ", "previous_filename": "src/librustc/ty/maps/keys.rs"}, {"sha": "f19bc01e198577272611abe88ce8f9f7f3fb8222", "filename": "src/librustc/ty/query/mod.rs", "status": "renamed", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use dep_graph::{DepConstructor, DepNode};\n+use errors::DiagnosticBuilder;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n@@ -71,30 +72,30 @@ pub use self::job::{QueryJob, QueryInfo};\n pub use self::job::handle_deadlock;\n \n mod keys;\n-pub use self::keys::Key;\n+use self::keys::Key;\n \n mod values;\n use self::values::Value;\n \n mod config;\n pub use self::config::QueryConfig;\n-use self::config::QueryDescription;\n+use self::config::{QueryAccessors, QueryDescription};\n \n mod on_disk_cache;\n pub use self::on_disk_cache::OnDiskCache;\n \n-// Each of these maps also corresponds to a method on a\n-// `Provider` trait for requesting a value of that type,\n-// and a method on `Maps` itself for doing that in a\n-// a way that memoizes and does dep-graph tracking,\n-// wrapping around the actual chain of providers that\n-// the driver creates (using several `rustc_*` crates).\n+// Each of these quries corresponds to a function pointer field in the\n+// `Providers` struct for requesting a value of that type, and a method\n+// on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n+// which memoizes and does dep-graph tracking, wrapping around the actual\n+// `Providers` that the driver creates (using several `rustc_*` crates).\n //\n-// The result of query must implement Clone. They must also implement ty::maps::values::Value\n-// which produces an appropriate error value if the query resulted in a query cycle.\n-// Queries marked with `fatal_cycle` do not need that implementation\n+// The result type of each query must implement `Clone`, and additionally\n+// `ty::query::values::Value`, which produces an appropriate placeholder\n+// (error) value if the query resulted in a query cycle.\n+// Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n-define_maps! { <'tcx>\n+define_queries! { <'tcx>\n     /// Records the type of every item.\n     [] fn type_of: TypeOfItem(DefId) -> Ty<'tcx>,\n \n@@ -468,6 +469,32 @@ define_maps! { <'tcx>\n         -> Lrc<FxHashMap<DefId, String>>,\n }\n \n+// `try_get_query` can't be public because it uses the private query\n+// implementation traits, so we provide access to it selectively.\n+impl<'a, 'tcx, 'lcx> TyCtxt<'a, 'tcx, 'lcx> {\n+    pub fn try_adt_sized_constraint(\n+        self,\n+        span: Span,\n+        key: DefId,\n+    ) -> Result<&'tcx [Ty<'tcx>], DiagnosticBuilder<'a>> {\n+        self.try_get_query::<queries::adt_sized_constraint>(span, key)\n+    }\n+    pub fn try_needs_drop_raw(\n+        self,\n+        span: Span,\n+        key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    ) -> Result<bool, DiagnosticBuilder<'a>> {\n+        self.try_get_query::<queries::needs_drop_raw>(span, key)\n+    }\n+    pub fn try_optimized_mir(\n+        self,\n+        span: Span,\n+        key: DefId,\n+    ) -> Result<&'tcx mir::Mir<'tcx>, DiagnosticBuilder<'a>> {\n+        self.try_get_query::<queries::optimized_mir>(span, key)\n+    }\n+}\n+\n //////////////////////////////////////////////////////////////////////\n // These functions are little shims used to find the dep-node for a\n // given query when there is not a *direct* mapping:", "previous_filename": "src/librustc/ty/maps/mod.rs"}, {"sha": "3285380c823922b2cf74ccc8b602c0f7be21644c", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -209,7 +209,7 @@ impl<'sess> OnDiskCache<'sess> {\n             let mut query_result_index = EncodedQueryResultIndex::new();\n \n             time(tcx.sess, \"encode query results\", || {\n-                use ty::maps::queries::*;\n+                use ty::query::queries::*;\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n \n@@ -232,11 +232,11 @@ impl<'sess> OnDiskCache<'sess> {\n                 encode_query_results::<specialization_graph_of, _>(tcx, enc, qri)?;\n \n                 // const eval is special, it only encodes successfully evaluated constants\n-                use ty::maps::QueryConfig;\n-                let map = const_eval::query_map(tcx).borrow();\n-                assert!(map.active.is_empty());\n-                for (key, entry) in map.results.iter() {\n-                    use ty::maps::config::QueryDescription;\n+                use ty::query::QueryAccessors;\n+                let cache = const_eval::query_cache(tcx).borrow();\n+                assert!(cache.active.is_empty());\n+                for (key, entry) in cache.results.iter() {\n+                    use ty::query::config::QueryDescription;\n                     if const_eval::cache_on_disk(key.clone()) {\n                         if let Ok(ref value) = entry.value {\n                             let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n@@ -1099,7 +1099,7 @@ fn encode_query_results<'enc, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     time(tcx.sess, desc, || {\n \n-    let map = Q::query_map(tcx).borrow();\n+    let map = Q::query_cache(tcx).borrow();\n     assert!(map.active.is_empty());\n     for (key, entry) in map.results.iter() {\n         if Q::cache_on_disk(key.clone()) {", "previous_filename": "src/librustc/ty/maps/on_disk_cache.rs"}, {"sha": "4679c265d5805611572b86db8fa9627e4ec03c22", "filename": "src/librustc/ty/query/plumbing.rs", "status": "renamed", "additions": 59, "deletions": 43, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -19,10 +19,9 @@ use errors::Diagnostic;\n use errors::FatalError;\n use ty::tls;\n use ty::{TyCtxt};\n-use ty::maps::Query;\n-use ty::maps::config::QueryConfig;\n-use ty::maps::config::QueryDescription;\n-use ty::maps::job::{QueryJob, QueryResult, QueryInfo};\n+use ty::query::Query;\n+use ty::query::config::{QueryConfig, QueryDescription};\n+use ty::query::job::{QueryJob, QueryResult, QueryInfo};\n use ty::item_path;\n \n use util::common::{profq_msg, ProfileQueriesMsg, QueryMsg};\n@@ -35,7 +34,7 @@ use std::collections::hash_map::Entry;\n use syntax_pos::Span;\n use syntax::codemap::DUMMY_SP;\n \n-pub struct QueryMap<'tcx, D: QueryConfig<'tcx> + ?Sized> {\n+pub struct QueryCache<'tcx, D: QueryConfig<'tcx> + ?Sized> {\n     pub(super) results: FxHashMap<D::Key, QueryValue<D::Value>>,\n     pub(super) active: FxHashMap<D::Key, QueryResult<'tcx>>,\n }\n@@ -56,9 +55,9 @@ impl<T> QueryValue<T> {\n     }\n }\n \n-impl<'tcx, M: QueryConfig<'tcx>> QueryMap<'tcx, M> {\n-    pub(super) fn new() -> QueryMap<'tcx, M> {\n-        QueryMap {\n+impl<'tcx, M: QueryConfig<'tcx>> QueryCache<'tcx, M> {\n+    pub(super) fn new() -> QueryCache<'tcx, M> {\n+        QueryCache {\n             results: FxHashMap(),\n             active: FxHashMap(),\n         }\n@@ -95,7 +94,7 @@ macro_rules! profq_query_msg {\n /// A type representing the responsibility to execute the job in the `job` field.\n /// This will poison the relevant query if dropped.\n pub(super) struct JobOwner<'a, 'tcx: 'a, Q: QueryDescription<'tcx> + 'a> {\n-    map: &'a Lock<QueryMap<'tcx, Q>>,\n+    cache: &'a Lock<QueryCache<'tcx, Q>>,\n     key: Q::Key,\n     job: Lrc<QueryJob<'tcx>>,\n }\n@@ -114,9 +113,9 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n         span: Span,\n         key: &Q::Key,\n     ) -> TryGetJob<'a, 'tcx, Q> {\n-        let map = Q::query_map(tcx);\n+        let cache = Q::query_cache(tcx);\n         loop {\n-            let mut lock = map.borrow_mut();\n+            let mut lock = cache.borrow_mut();\n             if let Some(value) = lock.results.get(key) {\n                 profq_msg!(tcx, ProfileQueriesMsg::CacheHit);\n                 let result = Ok((value.value.clone(), value.index));\n@@ -138,7 +137,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                         };\n                         let job = Lrc::new(QueryJob::new(info, icx.query.clone()));\n                         let owner = JobOwner {\n-                            map,\n+                            cache,\n                             job: job.clone(),\n                             key: (*key).clone(),\n                         };\n@@ -155,20 +154,20 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n         }\n     }\n \n-    /// Completes the query by updating the query map with the `result`,\n+    /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n     pub(super) fn complete(self, result: &Q::Value, dep_node_index: DepNodeIndex) {\n         // We can move out of `self` here because we `mem::forget` it below\n         let key = unsafe { ptr::read(&self.key) };\n         let job = unsafe { ptr::read(&self.job) };\n-        let map = self.map;\n+        let cache = self.cache;\n \n         // Forget ourself so our destructor won't poison the query\n         mem::forget(self);\n \n         let value = QueryValue::new(result.clone(), dep_node_index);\n         {\n-            let mut lock = map.borrow_mut();\n+            let mut lock = cache.borrow_mut();\n             lock.active.remove(&key);\n             lock.results.insert(key, value);\n         }\n@@ -215,7 +214,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n impl<'a, 'tcx, Q: QueryDescription<'tcx>> Drop for JobOwner<'a, 'tcx, Q> {\n     fn drop(&mut self) {\n         // Poison the query so jobs waiting on it panic\n-        self.map.borrow_mut().active.insert(self.key.clone(), QueryResult::Poisoned);\n+        self.cache.borrow_mut().active.insert(self.key.clone(), QueryResult::Poisoned);\n         // Also signal the completion of the job, so waiters\n         // will continue execution\n         self.job.signal_complete();\n@@ -231,7 +230,7 @@ pub struct CycleError<'tcx> {\n \n /// The result of `try_get_lock`\n pub(super) enum TryGetJob<'a, 'tcx: 'a, D: QueryDescription<'tcx> + 'a> {\n-    /// The query is not yet started. Contains a guard to the map eventually used to start it.\n+    /// The query is not yet started. Contains a guard to the cache eventually used to start it.\n     NotYetStarted(JobOwner<'a, 'tcx, D>),\n \n     /// The query was already completed.\n@@ -392,7 +391,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             self.dep_graph.read_index(dep_node_index);\n \n-            self.on_disk_query_result_cache\n+            self.queries.on_disk_cache\n                 .store_diagnostics_for_anon_node(dep_node_index, diagnostics);\n \n             job.complete(&result, dep_node_index);\n@@ -546,7 +545,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         if dep_node.kind != ::dep_graph::DepKind::Null {\n-            self.on_disk_query_result_cache\n+            self.queries.on_disk_cache\n                 .store_diagnostics(dep_node_index, diagnostics);\n         }\n \n@@ -562,7 +561,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// side-effects -- e.g., in order to report errors for erroneous programs.\n     ///\n     /// Note: The optimization is only available during incr. comp.\n-    pub fn ensure_query<Q: QueryDescription<'gcx>>(self, key: Q::Key) -> () {\n+    pub(super) fn ensure_query<Q: QueryDescription<'gcx>>(self, key: Q::Key) -> () {\n         let dep_node = Q::to_dep_node(self, &key);\n \n         // Ensuring an \"input\" or anonymous query makes no sense\n@@ -595,18 +594,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.force_query_with_job::<Q>(key, job, dep_node)\n     }\n \n-    pub fn try_get_query<Q: QueryDescription<'gcx>>(\n+    pub(super) fn try_get_query<Q: QueryDescription<'gcx>>(\n         self,\n         span: Span,\n-        key: Q::Key\n+        key: Q::Key,\n     ) -> Result<Q::Value, DiagnosticBuilder<'a>> {\n         match self.try_get_with::<Q>(span, key) {\n             Ok(e) => Ok(e),\n             Err(e) => Err(self.report_cycle(e)),\n         }\n     }\n \n-    pub fn get_query<Q: QueryDescription<'gcx>>(self, span: Span, key: Q::Key) -> Q::Value {\n+    pub(super) fn get_query<Q: QueryDescription<'gcx>>(\n+        self,\n+        span: Span,\n+        key: Q::Key,\n+    ) -> Q::Value {\n         self.try_get_query::<Q>(span, key).unwrap_or_else(|mut e| {\n             e.emit();\n             Q::handle_cycle_error(self)\n@@ -627,13 +630,14 @@ macro_rules! handle_cycle_error {\n     };\n }\n \n-macro_rules! define_maps {\n+macro_rules! define_queries {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n        [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*) => {\n \n         use std::mem;\n-        use ty::maps::job::QueryResult;\n+        #[cfg(parallel_queries)]\n+        use ty::query::job::QueryResult;\n         use rustc_data_structures::sync::Lock;\n         use {\n             rustc_data_structures::stable_hasher::HashStable,\n@@ -642,20 +646,24 @@ macro_rules! define_maps {\n             ich::StableHashingContext\n         };\n \n-        define_map_struct! {\n+        define_queries_struct! {\n             tcx: $tcx,\n             input: ($(([$($modifiers)*] [$($attr)*] [$name]))*)\n         }\n \n-        impl<$tcx> Maps<$tcx> {\n-            pub fn new(providers: IndexVec<CrateNum, Providers<$tcx>>)\n-                       -> Self {\n-                Maps {\n+        impl<$tcx> Queries<$tcx> {\n+            pub fn new(\n+                providers: IndexVec<CrateNum, Providers<$tcx>>,\n+                on_disk_cache: OnDiskCache<'tcx>,\n+            ) -> Self {\n+                Queries {\n                     providers,\n-                    $($name: Lock::new(QueryMap::new())),*\n+                    on_disk_cache,\n+                    $($name: Lock::new(QueryCache::new())),*\n                 }\n             }\n \n+            #[cfg(parallel_queries)]\n             pub fn collect_active_jobs(&self) -> Vec<Lrc<QueryJob<$tcx>>> {\n                 let mut jobs = Vec::new();\n \n@@ -750,13 +758,15 @@ macro_rules! define_maps {\n             type Value = $V;\n \n             const NAME: &'static str = stringify!($name);\n+        }\n \n+        impl<$tcx> QueryAccessors<$tcx> for queries::$name<$tcx> {\n             fn query(key: Self::Key) -> Query<'tcx> {\n                 Query::$name(key)\n             }\n \n-            fn query_map<'a>(tcx: TyCtxt<'a, $tcx, '_>) -> &'a Lock<QueryMap<$tcx, Self>> {\n-                &tcx.maps.$name\n+            fn query_cache<'a>(tcx: TyCtxt<'a, $tcx, '_>) -> &'a Lock<QueryCache<$tcx, Self>> {\n+                &tcx.queries.$name\n             }\n \n             #[allow(unused)]\n@@ -769,7 +779,7 @@ macro_rules! define_maps {\n             #[inline]\n             fn compute(tcx: TyCtxt<'_, 'tcx, '_>, key: Self::Key) -> Self::Value {\n                 __query_compute::$name(move || {\n-                    let provider = tcx.maps.providers[key.map_crate()].$name;\n+                    let provider = tcx.queries.providers[key.query_crate()].$name;\n                     provider(tcx.global_tcx(), key)\n                 })\n             }\n@@ -840,12 +850,18 @@ macro_rules! define_maps {\n     }\n }\n \n-macro_rules! define_map_struct {\n+macro_rules! define_queries_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n-        pub struct Maps<$tcx> {\n+        pub(crate) struct Queries<$tcx> {\n+            /// This provides access to the incr. comp. on-disk cache for query results.\n+            /// Do not access this directly. It is only meant to be used by\n+            /// `DepGraph::try_mark_green()` and the query infrastructure.\n+            pub(crate) on_disk_cache: OnDiskCache<'tcx>,\n+\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n-            $($(#[$attr])*  $name: Lock<QueryMap<$tcx, queries::$name<$tcx>>>,)*\n+\n+            $($(#[$attr])*  $name: Lock<QueryCache<$tcx, queries::$name<$tcx>>>,)*\n         }\n     };\n }\n@@ -860,7 +876,7 @@ macro_rules! define_provider_struct {\n         impl<$tcx> Default for Providers<$tcx> {\n             fn default() -> Self {\n                 $(fn $name<'a, $tcx>(_: TyCtxt<'a, $tcx, $tcx>, key: $K) -> $R {\n-                    bug!(\"tcx.maps.{}({:?}) unsupported by its crate\",\n+                    bug!(\"tcx.{}({:?}) unsupported by its crate\",\n                          stringify!($name), key);\n                 })*\n                 Providers { $($name),* }\n@@ -960,11 +976,11 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n                 profq_msg!(tcx,\n                     ProfileQueriesMsg::QueryBegin(\n                         DUMMY_SP.data(),\n-                        profq_query_msg!(::ty::maps::queries::$query::NAME, tcx, $key),\n+                        profq_query_msg!(::ty::query::queries::$query::NAME, tcx, $key),\n                     )\n                 );\n \n-                match tcx.force_query::<::ty::maps::queries::$query>($key, DUMMY_SP, *dep_node) {\n+                match tcx.force_query::<::ty::query::queries::$query>($key, DUMMY_SP, *dep_node) {\n                     Ok(_) => {},\n                     Err(e) => {\n                         tcx.report_cycle(e).emit();\n@@ -1201,15 +1217,15 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n \n \n // FIXME(#45015): Another piece of boilerplate code that could be generated in\n-//                a combined define_dep_nodes!()/define_maps!() macro.\n+//                a combined define_dep_nodes!()/define_queries!() macro.\n macro_rules! impl_load_from_cache {\n     ($($dep_kind:ident => $query_name:ident,)*) => {\n         impl DepNode {\n             // Check whether the query invocation corresponding to the given\n             // DepNode is eligible for on-disk-caching.\n             pub fn cache_on_disk(&self, tcx: TyCtxt) -> bool {\n-                use ty::maps::queries;\n-                use ty::maps::QueryDescription;\n+                use ty::query::queries;\n+                use ty::query::QueryDescription;\n \n                 match self.kind {\n                     $(DepKind::$dep_kind => {", "previous_filename": "src/librustc/ty/maps/plumbing.rs"}, {"sha": "d3d06248792400678bd2112a6fc32e1e0c06c7ce", "filename": "src/librustc/ty/query/values.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "previous_filename": "src/librustc/ty/maps/values.rs"}, {"sha": "20ebd6206259660c2fa3d90ebb3212ed369240fc", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -18,7 +18,7 @@ use ich::NodeIdHashingMode;\n use traits::{self, ObligationCause};\n use ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n use ty::subst::{Substs, UnpackedKind};\n-use ty::maps::TyCtxtAt;\n+use ty::query::TyCtxtAt;\n use ty::TypeVariants::*;\n use ty::layout::{Integer, IntegerExt};\n use util::common::ErrorReported;\n@@ -415,7 +415,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         };\n \n-        ty::maps::queries::coherent_trait::ensure(self, drop_trait);\n+        ty::query::queries::coherent_trait::ensure(self, drop_trait);\n \n         let mut dtor_did = None;\n         let ty = self.type_of(adt_did);\n@@ -883,7 +883,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let (param_env, ty) = query.into_parts();\n \n     let needs_drop = |ty: Ty<'tcx>| -> bool {\n-        match tcx.try_get_query::<ty::queries::needs_drop_raw>(DUMMY_SP, param_env.and(ty)) {\n+        match tcx.try_needs_drop_raw(DUMMY_SP, param_env.and(ty)) {\n             Ok(v) => v,\n             Err(mut bug) => {\n                 // Cycles should be reported as an error by `check_representable`.\n@@ -1014,8 +1014,8 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::maps::Providers) {\n-    *providers = ty::maps::Providers {\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers {\n         is_copy_raw,\n         is_sized_raw,\n         is_freeze_raw,"}, {"sha": "11d35def007747f5493adfcab2b22b0f006f79d0", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -37,7 +37,7 @@ use rustc::middle::mem_categorization::ImmutabilityBlame;\n use rustc::middle::region;\n use rustc::middle::free_region::RegionRelations;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n use rustc::util::nodemap::FxHashSet;\n \n@@ -128,7 +128,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n     // Note that `mir_validated` is a \"stealable\" result; the\n     // thief, `optimized_mir()`, forces borrowck, so we know that\n     // is not yet stolen.\n-    ty::maps::queries::mir_validated::ensure(tcx, owner_def_id);\n+    ty::query::queries::mir_validated::ensure(tcx, owner_def_id);\n \n     // option dance because you can't capture an uninitialized variable\n     // by mut-ref."}, {"sha": "a5d04c5c576b22e3c2d89e0c611ec58da7f88372", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::session::Session;\n use rustc::session::config::Sanitizer;\n use rustc::ty::TyCtxt;\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::PanicStrategy;"}, {"sha": "28e76a80513f034cac14e80dc73c03859ff4c572", "filename": "src/librustc_codegen_llvm/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -19,7 +19,7 @@ use rustc::ich::Fingerprint;\n use rustc::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol, metadata_symbol_name};\n use rustc::session::config;\n use rustc::ty::{TyCtxt, SymbolName};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::{FxHashMap, DefIdMap};\n use rustc_allocator::ALLOCATOR_METHODS;"}, {"sha": "322924535d1f72baeb5588eecad1f606043e09e3", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -41,7 +41,7 @@ use rustc::mir::mono::{Linkage, Visibility, Stats};\n use rustc::middle::cstore::{EncodedMetadata};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::dep_graph::{DepNode, DepConstructor};\n use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n use rustc::middle::exported_symbols;"}, {"sha": "8732e115fd2fd967cc51ffc52a681de11f6db060", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -183,14 +183,14 @@ impl CodegenBackend for LlvmCodegenBackend {\n         box metadata::LlvmMetadataLoader\n     }\n \n-    fn provide(&self, providers: &mut ty::maps::Providers) {\n+    fn provide(&self, providers: &mut ty::query::Providers) {\n         back::symbol_names::provide(providers);\n         back::symbol_export::provide(providers);\n         base::provide(providers);\n         attributes::provide(providers);\n     }\n \n-    fn provide_extern(&self, providers: &mut ty::maps::Providers) {\n+    fn provide_extern(&self, providers: &mut ty::query::Providers) {\n         back::symbol_export::provide_extern(providers);\n         base::provide_extern(providers);\n         attributes::provide_extern(providers);"}, {"sha": "8ba6f30cf16e587b7cb8441f0af808cde34c9699", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -39,7 +39,7 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::{Session, CompileIncomplete};\n use rustc::session::config::{CrateType, OutputFilenames, PrintRequest};\n use rustc::ty::TyCtxt;\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;"}, {"sha": "dcb82e5c424e5305770d3faee1eaebe7916e5a8a", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -103,7 +103,7 @@ use rustc::hir::map::definitions::DefPathData;\n use rustc::ich::NodeIdHashingMode;\n use rustc::middle::weak_lang_items;\n use rustc::ty::item_path::{self, ItemPathBuffer, RootMode};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::record_time;"}, {"sha": "5d5baf765497ef8b883af96482fbf97e07059eab", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -87,7 +87,7 @@ pub fn spawn_thread_pool<F: FnOnce(config::Options) -> R + sync::Send, R: sync::\n \n     let config = ThreadPoolBuilder::new()\n         .num_threads(Session::query_threads_from_opts(&opts))\n-        .deadlock_handler(|| unsafe { ty::maps::handle_deadlock() })\n+        .deadlock_handler(|| unsafe { ty::query::handle_deadlock() })\n         .stack_size(16 * 1024 * 1024);\n \n     let with_pool = move |pool: &ThreadPool| {\n@@ -399,10 +399,10 @@ pub struct CompileController<'a> {\n \n     /// Allows overriding default rustc query providers,\n     /// after `default_provide` has installed them.\n-    pub provide: Box<Fn(&mut ty::maps::Providers) + 'a>,\n+    pub provide: Box<Fn(&mut ty::query::Providers) + 'a>,\n     /// Same as `provide`, but only for non-local crates,\n     /// applied after `default_provide_extern`.\n-    pub provide_extern: Box<Fn(&mut ty::maps::Providers) + 'a>,\n+    pub provide_extern: Box<Fn(&mut ty::query::Providers) + 'a>,\n }\n \n impl<'a> CompileController<'a> {\n@@ -1140,7 +1140,7 @@ where\n     })\n }\n \n-pub fn default_provide(providers: &mut ty::maps::Providers) {\n+pub fn default_provide(providers: &mut ty::query::Providers) {\n     hir::provide(providers);\n     borrowck::provide(providers);\n     mir::provide(providers);\n@@ -1158,7 +1158,7 @@ pub fn default_provide(providers: &mut ty::maps::Providers) {\n     lint::provide(providers);\n }\n \n-pub fn default_provide_extern(providers: &mut ty::maps::Providers) {\n+pub fn default_provide_extern(providers: &mut ty::query::Providers) {\n     cstore::provide_extern(providers);\n }\n \n@@ -1203,7 +1203,7 @@ where\n \n     time(sess, \"loop checking\", || loops::check_crate(sess, &hir_map));\n \n-    let mut local_providers = ty::maps::Providers::default();\n+    let mut local_providers = ty::query::Providers::default();\n     default_provide(&mut local_providers);\n     codegen_backend.provide(&mut local_providers);\n     (control.provide)(&mut local_providers);"}, {"sha": "17e0472bda93fbdee39a201266349dba837e3304", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -20,7 +20,7 @@ use rustc::middle::region;\n use rustc::ty::subst::Subst;\n use rustc::traits::ObligationCause;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::ty::maps::OnDiskCache;\n+use rustc::ty::query::OnDiskCache;\n use rustc::infer::{self, InferOk, InferResult};\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::type_variable::TypeVariableOrigin;\n@@ -157,8 +157,8 @@ fn test_env_with_pool<F>(\n     };\n     TyCtxt::create_and_enter(&sess,\n                              &cstore,\n-                             ty::maps::Providers::default(),\n-                             ty::maps::Providers::default(),\n+                             ty::query::Providers::default(),\n+                             ty::query::Providers::default(),\n                              &arenas,\n                              resolutions,\n                              hir_map,"}, {"sha": "eeb87e4175704904b07a2c6c309106633246e596", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -385,7 +385,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n                     // michaelwoerister and vitiral came up with a possible solution,\n                     // to just do this before every query\n                     // ```\n-                    // ::rustc::ty::maps::plumbing::force_from_dep_node(tcx, dep_node)\n+                    // ::rustc::ty::query::plumbing::force_from_dep_node(tcx, dep_node)\n                     // ```\n                     //\n                     // However, this did not seem to work effectively and more bugs were hit."}, {"sha": "9ee3b216dcf404ca364b07306c6632ad454ddedc", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc::dep_graph::{PreviousDepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n-use rustc::ty::maps::OnDiskCache;\n+use rustc::ty::query::OnDiskCache;\n use rustc::util::common::time_ext;\n use rustc_serialize::Decodable as RustcDecodable;\n use rustc_serialize::opaque::Decoder;"}, {"sha": "b33d97cb1ee9f7988d17e99bd8bf72f71ba75e64", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -15,7 +15,7 @@ use native_libs;\n use foreign_modules;\n use schema;\n \n-use rustc::ty::maps::QueryConfig;\n+use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateStore, DepKind,\n                             MetadataLoader, LinkMeta,\n                             LoadedMacro, EncodedMetadata, NativeLibraryKind};\n@@ -24,7 +24,7 @@ use rustc::middle::stability::DeprecationEntry;\n use rustc::hir::def;\n use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::{self, TyCtxt};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::hir::map::blocks::FnLikeNode;"}, {"sha": "c43ea0360ee1394101d923fbe5d9aab4b42eba44", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::infer::InferCtxt;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::lint::builtin::UNUSED_MUT;\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{ClearCrossCrate, Local, Location, Place, Mir, Mutability, Operand};"}, {"sha": "ea667273ecead0b3fc066d528d8fa9502055a244", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -8,7 +8,7 @@ use rustc::mir;\n use rustc::ty::layout::{self, Size, Align, HasDataLayout, IntegerExt, LayoutOf, TyLayout};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, TypeAndMut};\n-use rustc::ty::maps::TyCtxtAt;\n+use rustc::ty::query::TyCtxtAt;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::middle::const_val::FrameInfo;\n use syntax::codemap::{self, Span};"}, {"sha": "ad571fbe90d5d0918a585da04bd817a35fa2dfa9", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -4,7 +4,7 @@ use std::ptr;\n use rustc::hir::def_id::DefId;\n use rustc::ty::Instance;\n use rustc::ty::ParamEnv;\n-use rustc::ty::maps::TyCtxtAt;\n+use rustc::ty::query::TyCtxtAt;\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size};\n use syntax::ast::Mutability;\n use rustc::middle::const_val::ConstVal;"}, {"sha": "d815d4a7dba917ef1477acfe307616acc3852f06", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -67,7 +67,7 @@ pub mod interpret;\n pub mod monomorphize;\n \n pub use hair::pattern::check_crate as matchck_crate;\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers) {\n     borrow_check::provide(providers);"}, {"sha": "f11d80201c28b4653351704eb6ee4216c4668e10", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -14,7 +14,7 @@ use rustc::infer;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n use rustc::ty::subst::{Subst, Substs};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n "}, {"sha": "5f8f9acae838515a45f81ffdef12ef3579a130aa", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n \n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;"}, {"sha": "cb57dc572fa240e7f7c73ba7b0f7504050fb7bb5", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -126,9 +126,8 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     continue;\n                 }\n \n-                let callee_mir = match self.tcx.try_get_query::<ty::queries::optimized_mir>(\n-                                                                           callsite.location.span,\n-                                                                           callsite.callee) {\n+                let callee_mir = match self.tcx.try_optimized_mir(callsite.location.span,\n+                                                                  callsite.callee) {\n                     Ok(callee_mir) if self.should_inline(callsite, callee_mir) => {\n                         self.tcx.subst_and_normalize_erasing_regions(\n                             &callsite.substs,"}, {"sha": "06be2bb3734f438e8defeb49c3148e2db83f2c7a", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -13,7 +13,7 @@ use build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::mir::{Mir, Promoted};\n use rustc::ty::TyCtxt;\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};"}, {"sha": "6448ba17e3464480eb8d2c478dead103c1a5e1d0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -24,7 +24,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::mir::*;\n use rustc::mir::traversal::ReversePostorder;\n use rustc::mir::visit::{PlaceContext, Visitor};"}, {"sha": "41f1e7829658ab097353ca1a3fa7b26061d9226b", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -32,7 +32,7 @@ extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n \n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n \n mod diagnostics;\n "}, {"sha": "51b2988023b4a08b0dfecbd932ee69ff291ede52", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -32,7 +32,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::{ItemLocalSet, NodeSet};\n use rustc::hir;"}, {"sha": "308c5b9f201562b397d1a1ceff4e77db18c39f61", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -31,7 +31,7 @@ use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable, GenericParamDefKind};\n use rustc::ty::fold::TypeVisitor;\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::UnpackedKind;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast::{self, CRATE_NODE_ID, Ident};"}, {"sha": "c3135439204e7c69456fe2243d9d207cbfb4875e", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -36,7 +36,7 @@ mod normalize_erasing_regions;\n mod util;\n pub mod lowering;\n \n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n \n pub fn provide(p: &mut Providers) {\n     *p = Providers {"}, {"sha": "a51876d7960b0bd46ba575d7ab0980007779452b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -40,7 +40,7 @@ mod suggest;\n \n use self::probe::{IsSuggestion, ProbeScope};\n \n-pub fn provide(providers: &mut ty::maps::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     suggest::provide(providers);\n }\n "}, {"sha": "90680b4156e7a825693bc6399eb9ebd360e2de21", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -741,7 +741,7 @@ fn compute_all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Vec<DefId>\n     traits\n }\n \n-pub fn provide(providers: &mut ty::maps::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     providers.all_traits = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Lrc::new(compute_all_traits(tcx))"}, {"sha": "7dcd6d1a3b350061713bda5ca6743578c475ba2c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -99,7 +99,7 @@ use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::util::{Representability, IntTypeExt, Discr};\n use errors::{DiagnosticBuilder, DiagnosticId};\n \n@@ -703,7 +703,7 @@ fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum\n     debug_assert!(crate_num == LOCAL_CRATE);\n     Ok(tcx.sess.track_errors(|| {\n         for body_owner_def_id in tcx.body_owners() {\n-            ty::maps::queries::typeck_tables_of::ensure(tcx, body_owner_def_id);\n+            ty::query::queries::typeck_tables_of::ensure(tcx, body_owner_def_id);\n         }\n     })?)\n }"}, {"sha": "7a2c38468e0448735811240adf0cbe4dc2ee2fe1", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -749,21 +749,21 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n         let def_id = self.tcx.hir.local_def_id(i.id);\n-        ty::maps::queries::check_item_well_formed::ensure(self.tcx, def_id);\n+        ty::query::queries::check_item_well_formed::ensure(self.tcx, def_id);\n         intravisit::walk_item(self, i);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'v hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n         let def_id = self.tcx.hir.local_def_id(trait_item.id);\n-        ty::maps::queries::check_trait_item_well_formed::ensure(self.tcx, def_id);\n+        ty::query::queries::check_trait_item_well_formed::ensure(self.tcx, def_id);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'v hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n         let def_id = self.tcx.hir.local_def_id(impl_item.id);\n-        ty::maps::queries::check_impl_item_well_formed::ensure(self.tcx, def_id);\n+        ty::query::queries::check_impl_item_well_formed::ensure(self.tcx, def_id);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n }"}, {"sha": "e92349040e89efdb5acf68c4029b1be5a3b1fa2c", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -18,7 +18,7 @@\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::traits;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n \n use syntax::ast;\n \n@@ -127,15 +127,15 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &trait_def_id in tcx.hir.krate().trait_impls.keys() {\n-        ty::maps::queries::coherent_trait::ensure(tcx, trait_def_id);\n+        ty::query::queries::coherent_trait::ensure(tcx, trait_def_id);\n     }\n \n     unsafety::check(tcx);\n     orphan::check(tcx);\n \n     // these queries are executed for side-effects (error reporting):\n-    ty::maps::queries::crate_inherent_impls::ensure(tcx, LOCAL_CRATE);\n-    ty::maps::queries::crate_inherent_impls_overlap_check::ensure(tcx, LOCAL_CRATE);\n+    ty::query::queries::crate_inherent_impls::ensure(tcx, LOCAL_CRATE);\n+    ty::query::queries::crate_inherent_impls_overlap_check::ensure(tcx, LOCAL_CRATE);\n }\n \n /// Overlap: No two impls for the same trait are implemented for the"}, {"sha": "05256be6ec91008461179625d457e6b28ae059f2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -33,7 +33,7 @@ use rustc::mir::mono::Linkage;\n use rustc::ty::subst::Substs;\n use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::util::Discr;\n use rustc::util::captures::Captures;"}, {"sha": "ce7249bd7b5b719d32ae985d828953168d7bc5f1", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -104,7 +104,7 @@ use hir::map as hir_map;\n use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine};\n use session::{CompileIncomplete, config};\n use util::common::time;"}, {"sha": "c6c7e8f931f8b0bbf14270beccab1164d5d79208", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -11,7 +11,7 @@\n use hir::map as hir_map;\n use rustc::hir;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, CratePredicatesMap, TyCtxt};\n use rustc_data_structures::sync::Lrc;"}, {"sha": "adea9788b3c5408257a754516d4f3d849922da2f", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -17,7 +17,7 @@ use arena;\n use rustc::hir;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::ty::{self, CrateVariancesMap, TyCtxt};\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc_data_structures::sync::Lrc;\n \n /// Defines the `TermsContext` basically houses an arena where we can"}, {"sha": "439bc017fee618ce357141a56618f8f07f2c47b3", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=5a5c7ded0d48df010d0a4f5fef8a85dfeae68c16", "patch": "@@ -20,7 +20,7 @@ use syntax::symbol::Symbol;\n use rustc::session::{Session, CompileIncomplete};\n use rustc::session::config::OutputFilenames;\n use rustc::ty::TyCtxt;\n-use rustc::ty::maps::Providers;\n+use rustc::ty::query::Providers;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc_codegen_utils::codegen_backend::{CodegenBackend, MetadataOnlyCodegenBackend};"}]}