{"sha": "39b1657b2cb17960f72467c4cb31d8ac7969661d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YjE2NTdiMmNiMTc5NjBmNzI0NjdjNGNiMzFkOGFjNzk2OTY2MWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-06T22:02:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-06T22:02:32Z"}, "message": "Merge branch 'master' of github.com:graydon/rust", "tree": {"sha": "a7f6997068282f7fa72b95e7165abcb3df18ca0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f6997068282f7fa72b95e7165abcb3df18ca0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b1657b2cb17960f72467c4cb31d8ac7969661d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b1657b2cb17960f72467c4cb31d8ac7969661d", "html_url": "https://github.com/rust-lang/rust/commit/39b1657b2cb17960f72467c4cb31d8ac7969661d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b1657b2cb17960f72467c4cb31d8ac7969661d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf41392b62f8e118ac21842804808c516b953b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf41392b62f8e118ac21842804808c516b953b0", "html_url": "https://github.com/rust-lang/rust/commit/7bf41392b62f8e118ac21842804808c516b953b0"}, {"sha": "89efb7d9810643eb1b25c04e63203b591915448f", "url": "https://api.github.com/repos/rust-lang/rust/commits/89efb7d9810643eb1b25c04e63203b591915448f", "html_url": "https://github.com/rust-lang/rust/commit/89efb7d9810643eb1b25c04e63203b591915448f"}], "stats": {"total": 794, "additions": 677, "deletions": 117}, "files": [{"sha": "ec08f124b7285a0cc5541ccbceb7bea25833e88c", "filename": "Makefile.in", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -104,6 +104,7 @@ endif\n \n CFG_RUNTIME :=$(call CFG_LIB_NAME,rustrt)\n CFG_RUSTLLVM :=$(call CFG_LIB_NAME,rustllvm)\n+CFG_CORELIB :=$(call CFG_LIB_NAME,core)\n CFG_STDLIB :=$(call CFG_LIB_NAME,ruststd)\n CFG_LIBRUSTC :=$(call CFG_LIB_NAME,rustc)\n \n@@ -144,9 +145,9 @@ else\n endif\n \n ifeq ($(CFG_NATURALDOCS),)\n-  $(info cfg: no naturaldocs found, omitting doc/std/index.html)\n+  $(info cfg: no naturaldocs found, omitting library doc build)\n else\n-  DOCS += doc/std/index.html\n+  DOCS += doc/core/index.html doc/std/index.html\n endif\n \n ifdef CFG_DISABLE_DOCS\n@@ -183,12 +184,21 @@ GENERATED :=\n %:: s.%\n %:: SCCS/s.%\n \n+######################################################################\n+# Core library variables\n+######################################################################\n+\n+CORELIB_CRATE := $(S)src/libcore/core.rc\n+CORELIB_INPUTS := $(wildcard $(addprefix $(S)src/libcore/,        \\\n+                                           core.rc *.rs */*.rs))\n+\n ######################################################################\n # Standard library variables\n ######################################################################\n \n-STDLIB_CRATE := $(S)src/lib/std.rc\n-STDLIB_INPUTS := $(wildcard $(addprefix $(S)src/lib/,*.rc *.rs */*.rs))\n+STDLIB_CRATE := $(S)src/libstd/std.rc\n+STDLIB_INPUTS := $(wildcard $(addprefix $(S)src/libstd/,          \\\n+                                          std.rc *.rs */*.rs))\n \n ######################################################################\n # rustc crate variables\n@@ -268,13 +278,21 @@ TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/rustc/$(2)\n TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n \n-# The name of the standard library used by rustc\n+# The name of the core and standard libraries used by rustc\n ifdef CFG_DISABLE_SHAREDSTD\n+  HCORELIB_DEFAULT$(1)_H_$(3) = \\\n+    $$(HLIB$(1)_H_$(3))/libcore.rlib\n+  TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/libcore.rlib\n   HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n     $$(HLIB$(1)_H_$(3))/libstd.rlib\n   TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n     $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n else\n+  HCORELIB_DEFAULT$(1)_H_$(3) = \\\n+    $$(HLIB$(1)_H_$(3))/$(CFG_CORELIB)\n+  TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB)\n   HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n     $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB)\n   TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n@@ -286,6 +304,7 @@ HSREQ$(1)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustc$$(X) \\\n \t$$(HLIB$(1)_H_$(3))/$$(CFG_RUNTIME) \\\n \t$$(HLIB$(1)_H_$(3))/$$(CFG_RUSTLLVM) \\\n+\t$$(HCORELIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(HSTDLIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(MKFILE_DEPS)\n \n@@ -299,6 +318,7 @@ TSREQ$(1)_T_$(2)_H_$(3) = \\\n # Prerequisites for complete stageN targets\n SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n \n ifeq ($(1),0)"}, {"sha": "009e24059cf104f9a0e0c498b89259cbcfaf9f19", "filename": "configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -355,8 +355,8 @@ fi\n step_msg \"making directories\"\n \n for i in \\\n-    doc doc/std \\\n-    nd nd/std \\\n+    doc doc/core doc/std \\\n+    nd nd/core nd/std \\\n     dl tmp\n do\n     make_dir $i"}, {"sha": "565e4c27109f0056dc22ab6fbecc737d079991b6", "filename": "doc/Languages.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/doc%2FLanguages.txt", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/doc%2FLanguages.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2FLanguages.txt?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -120,6 +120,7 @@ Language: Rust\n    Block Comment: /* */\n    Package Separator: ::\n    Function Prototype Enders: ; {\n+   Predicate Prototype Enders: ; {\n    Type Prototype Enders: ; }\n    Class Prototype Enders: {\n    Variant Prototype Enders: ;"}, {"sha": "443f1180584056410f3dec3245edaa373c6125d5", "filename": "doc/lib.css", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/doc%2Flib.css", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/doc%2Flib.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Flib.css?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -0,0 +1,8 @@\n+/*\n+Custom styles for the library docs generated by naturaldocs\n+*/\n+\n+p {\n+   text-indent: 0;\n+   margin-bottom: 1em;\n+   }"}, {"sha": "9593f25e8f6639ceb507ee8aac75edfa5733235b", "filename": "doc/std.css", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bf41392b62f8e118ac21842804808c516b953b0/doc%2Fstd.css", "raw_url": "https://github.com/rust-lang/rust/raw/7bf41392b62f8e118ac21842804808c516b953b0/doc%2Fstd.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fstd.css?ref=7bf41392b62f8e118ac21842804808c516b953b0", "patch": "@@ -1,8 +0,0 @@\n-/*\n-Custom styles for the standard library docs generated by naturaldocs\n-*/\n-\n-p {\n-   text-indent: 0;\n-   margin-bottom: 1em;\n-   }\n\\ No newline at end of file"}, {"sha": "a8df2c28fbefbf1498e1407ef22302362583a269", "filename": "mk/dist.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -46,6 +46,7 @@ PKG_FILES = \\\n       $(PKG_3RDPARTY))                         \\\n     $(PKG_UV)                                  \\\n     $(COMPILER_INPUTS)                         \\\n+    $(CORELIB_INPUTS)                          \\\n     $(STDLIB_INPUTS)                           \\\n     $(ALL_TEST_INPUTS)                         \\\n     $(FUZZER_CRATE)                            \\"}, {"sha": "4a5821ec2df5e4bba7800281a8980c809f5be015", "filename": "mk/docs.mk", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -29,19 +29,25 @@ docsnap: doc/rust.pdf\n \t@$(call E, snap: doc/rust-$(shell date +\"%Y-%m-%d\")-snap.pdf)\n \t$(Q)mv $< doc/rust-$(shell date +\"%Y-%m-%d\")-snap.pdf\n \n-doc/std/index.html: nd/std/Languages.txt nd/std/Topics.txt nd/std/std.css \\\n-                    $(STDLIB_CRATE) $(STDLIB_INPUTS)\n-\t@$(call E, naturaldocs: $@)\n-\tnaturaldocs -i $(S)src/lib -o HTML doc/std -p nd/std -r -s Default std\n-\n-nd/std/Languages.txt: $(S)doc/Languages.txt\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-nd/std/Topics.txt: $(S)doc/Topics.txt\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-nd/std/std.css: $(S)doc/std.css\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n+define libdoc\n+doc/$(1)/index.html: nd/$(1)/Languages.txt nd/$(1)/Topics.txt \\\n+                     nd/$(1)/lib.css $(2)\n+\t@$$(call E, naturaldocs: $$@)\n+\tnaturaldocs -i $(S)src/lib$(1) -o HTML doc/$(1) -p nd/$(1) -r -s Default lib\n+\n+nd/$(1)/Languages.txt: $(S)doc/Languages.txt\n+\t@$$(call E, cp: $$@)\n+\t$(Q)cp $$< $$@\n+\n+nd/$(1)/Topics.txt: $(S)doc/Topics.txt\n+\t@$$(call E, cp: $$@)\n+\t$(Q)cp $$< $$@\n+\n+nd/$(1)/lib.css: $(S)doc/lib.css\n+\t@$$(call E, cp: $$@)\n+\t$(Q)cp $$< $$@\n+\n+endef\n+\n+$(eval $(call libdoc,core,$(CORELIB_CRATE) $(CORELIB_INPUTS)))\n+$(eval $(call libdoc,std,$(STDLIB_CRATE) $(STDLIB_INPUTS)))"}, {"sha": "add7278dee297b5d00ef28c746d62f832d41a838", "filename": "mk/host.mk", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -15,6 +15,7 @@ $$(HBIN$(2)_H_$(4))/rustc$$(X): \\\n \t$$(TBIN$(1)_T_$(4)_H_$(3))/rustc$$(X) \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n+\t$$(HCORELIB_DEFAULT$(2)_H_$(4)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n@@ -25,6 +26,7 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC): \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC) \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n+\t$$(HCORELIB_DEFAULT$(2)_H_$(3)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n@@ -34,14 +36,28 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME): \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n+$$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB) \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n $$(HLIB$(2)_H_$(4))/$$(CFG_STDLIB): \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB) \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB) \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+$$(HLIB$(2)_H_$(4))/libcore.rlib: \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/libcore.rlib \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n $$(HLIB$(2)_H_$(4))/libstd.rlib: \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/libstd.rlib \\\n+\t$$(HLIB$(2)_H_$(4))/libcore.rlib \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@"}, {"sha": "c22a4a3701080c70c6744ecba1b7313171d515d2", "filename": "mk/install.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -33,6 +33,7 @@ PTL$(1)$(2) = $$(PTR$(1)$(2))/lib\n install-target-$(1)-host-$(2): $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)mkdir -p $$(PTL$(1)$(2))\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_RUNTIME))\n+\t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_CORELIB))\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_STDLIB))\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),intrinsics.bc)\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),libmorestack.a)\n@@ -61,6 +62,7 @@ install-host: $(SREQ$(ISTAGE)_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE))\n \t$(Q)mkdir -p $(PREFIX_ROOT)/share/man/man1\n \t$(Q)$(call INSTALL,$(HB),$(PHB),rustc$(X))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_CORELIB))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_STDLIB))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM))\n \t$(Q)$(call INSTALL,$(S)/man, \\"}, {"sha": "430a835ba86aa71ae5e4ea70ab8bd29c8fac4062", "filename": "mk/platform.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -17,8 +17,8 @@ CFG_GCCISH_LINK_FLAGS :=\n # embedded into the executable, so use a no-op command.\n CFG_DSYMUTIL := true\n \n-ifneq ($(CFG_VALGRIND),)\n-  CFG_GCCISH_CFLAGS += -DHAVE_VALGRIND\n+ifeq ($(CFG_VALGRIND),)\n+  CFG_GCCISH_CFLAGS += -DNVALGRIND\n endif\n \n ifneq ($(findstring freebsd,$(CFG_OSTYPE)),)"}, {"sha": "df414901f7f5ef4c0992eac4e3c45273cc3827f5", "filename": "mk/pp.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -2,7 +2,8 @@\n ifdef PPFILES\n   PP_INPUTS_FILTERED := $(wildcard $(PPFILES))\n else\n-  PP_INPUTS = $(wildcard $(addprefix $(S)src/lib/,*.rs */*.rs)) \\\n+  PP_INPUTS = $(wildcard $(addprefix $(S)src/libcore/,*.rs */*.rs)) \\\n+              $(wildcard $(addprefix $(S)src/libstd/,*.rs */*.rs)) \\\n               $(wildcard $(addprefix $(S)src/comp/,*.rs */*.rs */*/*.rs)) \\\n               $(wildcard $(S)src/test/*/*.rs    \\\n                          $(S)src/test/*/*/*.rs) \\"}, {"sha": "0d9bb5c34086b0edcf9fd8b54ae94fe9b55c2cd4", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -125,7 +125,7 @@ else\n endif\n \n RUNTIME_DEF_$(1) := rt/rustrt$$(CFG_DEF_SUFFIX)\n-RUNTIME_INCS_$(1) := -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n+RUNTIME_INCS_$(1) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n                 -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n \t\t\t\t-I $$(S)src/libuv/include\n RUNTIME_OBJS_$(1) := $$(RUNTIME_CS_$(1):rt/%.cpp=rt/$(1)/%.o) \\"}, {"sha": "7614c230406854c1c8105e4e21311df14d123255", "filename": "mk/stage0.mk", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -13,6 +13,10 @@ $(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_RUNTIME): \\\n \t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n+$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_CORELIB): \\\n+\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+\t$(Q)touch $@\n+\n $(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_STDLIB): \\\n \t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n@@ -38,6 +42,11 @@ $$(HLIB0_H_$(1))/$$(CFG_RUNTIME): \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n+$$(HLIB0_H_$(1))/$(CFG_CORELIB): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_CORELIB)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n $$(HLIB0_H_$(1))/$(CFG_STDLIB): \\\n \t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_STDLIB)\n \t@$$(call E, cp: $$@)"}, {"sha": "ecedff1c5d1fa909b6cc834cda78e1be6c880a59", "filename": "mk/target.mk", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -22,8 +22,15 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB): \\\n+\t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --lib -o $$@ $$<\n+\n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n \t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+        $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) --lib -o $$@ $$<"}, {"sha": "e429c8ef98af51054ded7c413f772ada225f4309", "filename": "mk/tests.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -87,6 +87,8 @@ tidy:\n               $(wildcard $(S)src/etc/*.py)  \\\n               $(COMPILER_CRATE) \\\n               $(COMPILER_INPUTS) \\\n+              $(CORELIB_CRATE) \\\n+              $(CORELIB_INPUTS) \\\n               $(STDLIB_CRATE) \\\n               $(STDLIB_INPUTS) \\\n               $(COMPILETEST_CRATE) \\\n@@ -475,4 +477,4 @@ endef\n $(foreach stage,$(STAGES),\t\t\t\t\t\t\\\n  $(eval $(call DEF_CHECK_FOR_STAGE,$(stage))))\n \n-check-fast: check-fast-H-$(CFG_HOST_TRIPLE)\n\\ No newline at end of file\n+check-fast: check-fast-H-$(CFG_HOST_TRIPLE)"}, {"sha": "84d7c55ac35e897607f3ad432c3350b45e35eb3d", "filename": "mk/tools.mk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -19,6 +19,7 @@ define TOOLS_STAGE_N\n $$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X):\t\t\t\t\\\n \t\t$$(FUZZER_CRATE) $$(FUZZER_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n \t@$$(call E, compile_and_link: $$@)\n@@ -37,6 +38,7 @@ $$(HBIN$(2)_H_$(4))/fuzzer$$(X):\t\t\t\t\\\n $$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X):\t\t\t\\\n \t\t$$(COMPILETEST_CRATE) $$(COMPILETEST_INPUTS)\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)      \\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n@@ -50,6 +52,7 @@ $$(HBIN$(2)_H_$(4))/compiletest$$(X):\t\t\t\t\\\n $$(TBIN$(1)_T_$(4)_H_$(3))/cargo$$(X):\t\t\t\t\\\n \t\t$$(CARGO_CRATE) $$(CARGO_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)  \\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)   \\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n \t@$$(call E, compile_and_link: $$@)"}, {"sha": "95f9f06a9948c6efdc4794a16f1978cc74794a40", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -260,7 +260,7 @@ options:\n     --pretty [type]    pretty-print the input instead of compiling\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n-    --noverify         suppress LLVM verification step (slight speedup)\n+    --no-verify        suppress LLVM verification step (slight speedup)\n     --parse-only       parse only; do not compile, assemble, or link\n     --no-trans         run all passes except translation; no output\n     -g                 produce debug info\n@@ -362,7 +362,7 @@ fn build_session_options(match: getopts::match)\n         } else if opt_present(match, \"emit-llvm\") {\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n-    let verify = !opt_present(match, \"noverify\");\n+    let verify = !opt_present(match, \"no-verify\");\n     let save_temps = opt_present(match, \"save-temps\");\n     let debuginfo = opt_present(match, \"g\");\n     let stats = opt_present(match, \"stats\");\n@@ -463,7 +463,7 @@ fn opts() -> [getopts::opt] {\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optopt(\"target\"), optflag(\"stats\"),\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n-         optflag(\"noverify\"),\n+         optflag(\"no-verify\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"static\"), optflag(\"gc\"),\n          optflag(\"stack-growth\"),"}, {"sha": "82e414a864ce54003b16fbb2a25884b19da86388", "filename": "src/lib/ctypes.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7bf41392b62f8e118ac21842804808c516b953b0/src%2Flib%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf41392b62f8e118ac21842804808c516b953b0/src%2Flib%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fctypes.rs?ref=7bf41392b62f8e118ac21842804808c516b953b0", "patch": "@@ -1,42 +0,0 @@\n-/*\n-Module: ctypes\n-\n-Definitions useful for C interop\n-*/\n-\n-type c_int = i32;\n-type c_uint = u32;\n-\n-type void = int; // Not really the same as C\n-type long = int;\n-type unsigned = u32;\n-type ulong = uint;\n-\n-type intptr_t = uint;\n-type uintptr_t = uint;\n-type uint32_t = u32;\n-\n-// machine type equivalents of rust int, uint, float\n-\n-#[cfg(target_arch=\"x86\")]\n-type m_int = i32;\n-#[cfg(target_arch=\"x86_64\")]\n-type m_int = i64;\n-\n-#[cfg(target_arch=\"x86\")]\n-type m_uint = u32;\n-#[cfg(target_arch=\"x86_64\")]\n-type m_uint = u64;\n-\n-// This *must* match with \"import m_float = fXX\" in std::math per arch\n-type m_float = f64;\n-\n-type size_t = uint;\n-type ssize_t = int;\n-type off_t = uint;\n-\n-type fd_t = i32;      // not actually a C type, but should be.\n-type pid_t = i32;\n-\n-// enum is implementation-defined, but is 32-bits in practice\n-type enum = u32;"}, {"sha": "6feaf8fbfabf40c2e761321d92bd2659c29a460d", "filename": "src/libcore/core.rc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -0,0 +1,17 @@\n+#[link(name = \"core\",\n+       vers = \"0.1\",\n+       uuid = \"c70c24a7-5551-4f73-8e37-380b11d80be8\",\n+       url = \"http://rust-lang.org/src/core\")];\n+\n+#[comment = \"The Rust core library\"];\n+#[license = \"BSD\"];\n+\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "4b7267030856b46779eaf7ebe5eaa2553feea747", "filename": "src/libstd/bitv.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/bitv.rs"}, {"sha": "0fc869d1b41a93b0b8077bcc30ce0a12a375cf93", "filename": "src/libstd/bool.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/bool.rs"}, {"sha": "6682fe17284ac429a2000635d04d02b418d8327f", "filename": "src/libstd/box.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbox.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/box.rs"}, {"sha": "7c2f1be70840847f2684f5e1dc9c88c126391ae8", "filename": "src/libstd/c_vec.rs", "status": "renamed", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -57,13 +57,36 @@ resource dtor_res(dtor: option::t<fn@()>) {\n  Section: Introduction forms\n  */\n \n+/*\n+Function: create\n+\n+Create a c_vec::t from a native buffer with a given size.\n+\n+Parameters:\n+\n+base - A native pointer to a buffer\n+size - The number of elements in the buffer\n+*/\n unsafe fn create<T>(base: *mutable T, size: uint) -> t<T> {\n     ret t({base: base,\n            size: size,\n            rsrc: @dtor_res(option::none)\n           });\n }\n \n+/*\n+Function: create_with_dtor\n+\n+Create a c_vec::t from a native buffer, with a given size,\n+and a function to run upon destruction.\n+\n+Parameters:\n+\n+base - A native pointer to a buffer\n+size - The number of elements in the buffer\n+dtor - A function to run when the value is destructed, useful\n+       for freeing the buffer, etc.\n+*/\n unsafe fn create_with_dtor<T>(base: *mutable T, size: uint, dtor: fn@())\n   -> t<T> {\n     ret t({base: base,\n@@ -76,11 +99,29 @@ unsafe fn create_with_dtor<T>(base: *mutable T, size: uint, dtor: fn@())\n  Section: Operations\n  */\n \n+/*\n+Function: get\n+\n+Retrieves an element at a given index\n+\n+Failure:\n+\n+If `ofs` is greater or equal to the length of the vector\n+*/\n fn get<copy T>(t: t<T>, ofs: uint) -> T {\n     assert ofs < (*t).size;\n     ret unsafe { *ptr::mut_offset((*t).base, ofs) };\n }\n \n+/*\n+Function: set\n+\n+Sets the value of an element at a given index\n+\n+Failure:\n+\n+If `ofs` is greater or equal to the length of the vector\n+*/\n fn set<copy T>(t: t<T>, ofs: uint, v: T) {\n     assert ofs < (*t).size;\n     unsafe { *ptr::mut_offset((*t).base, ofs) = v };\n@@ -90,10 +131,21 @@ fn set<copy T>(t: t<T>, ofs: uint, v: T) {\n  Section: Elimination forms\n  */\n \n+// FIXME: Rename to len\n+/*\n+Function: size\n+\n+Returns the length of the vector\n+*/\n fn size<T>(t: t<T>) -> uint {\n     ret (*t).size;\n }\n \n+/*\n+Function: ptr\n+\n+Returns a pointer to the first element of the vector\n+*/\n unsafe fn ptr<T>(t: t<T>) -> *mutable T {\n     ret (*t).base;\n }", "previous_filename": "src/lib/c_vec.rs"}, {"sha": "bc8e74355c63e73efe84845895ae18363682e255", "filename": "src/libstd/char.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/char.rs"}, {"sha": "69ecbac3e9125f54a622b049836ca721f7994cd7", "filename": "src/libstd/cmath.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmath.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/cmath.rs"}, {"sha": "e00205a522b43fda5f30a042e5ed50dc2bc66bac", "filename": "src/libstd/comm.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/comm.rs"}, {"sha": "509eb3ef05762a61d6609216672713d9dc7656d2", "filename": "src/libstd/ctypes.rs", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fctypes.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -0,0 +1,146 @@\n+/*\n+Module: ctypes\n+\n+Definitions useful for C interop\n+*/\n+\n+/*\n+FIXME: Add a test that uses some native code to verify these sizes,\n+which are not obviously correct for all potential platforms.\n+*/\n+\n+/*\n+Type: c_int\n+\n+A signed integer with the same size as a C `int`\n+*/\n+type c_int = i32;\n+\n+/*\n+Type: c_uint\n+\n+An unsigned integer with the same size as a C `unsigned int`\n+*/\n+type c_uint = u32;\n+\n+/*\n+Type: long\n+\n+A signed integer with the same size as a C `long`\n+*/\n+type long = int;\n+\n+/*\n+Type: unsigned\n+\n+An unsigned integer with the same size as a C `unsigned int`\n+*/\n+type unsigned = u32;\n+\n+/*\n+Type: ulong\n+\n+An unsigned integer with the same size as a C `unsigned long`\n+*/\n+type ulong = uint;\n+\n+/*\n+Type: intptr_t\n+\n+A signed integer with the same size as a pointer. This is\n+guaranteed to always be the same type as a Rust `int`\n+*/\n+type intptr_t = uint; // FIXME: int\n+\n+/*\n+Type: uintptr_t\n+\n+An unsigned integer with the same size as a pointer. This is\n+guaranteed to always be the same type as a Rust `uint`.\n+*/\n+type uintptr_t = uint;\n+type uint32_t = u32;\n+\n+/*\n+Type: void\n+\n+A type, a pointer to which can be used as C `void *`\n+\n+Note that this does not directly correspond to the C `void` type,\n+which is an incomplete type. Using pointers to this type\n+when interoperating with C void pointers can help in documentation.\n+*/\n+type void = int;\n+\n+// machine type equivalents of rust int, uint, float\n+\n+/*\n+Type: m_int\n+\n+FIXME: What C type does this represent?\n+*/\n+#[cfg(target_arch=\"x86\")]\n+type m_int = i32;\n+#[cfg(target_arch=\"x86_64\")]\n+type m_int = i64;\n+\n+/*\n+Type: m_uint\n+\n+FIXME: What C type does this represent?\n+*/\n+#[cfg(target_arch=\"x86\")]\n+type m_uint = u32;\n+#[cfg(target_arch=\"x86_64\")]\n+type m_uint = u64;\n+\n+// This *must* match with \"import m_float = fXX\" in std::math per arch\n+/*\n+Type: m_float\n+\n+FIXME: What C type does this represent?\n+*/\n+type m_float = f64;\n+\n+/*\n+Type: size_t\n+\n+An unsigned integer corresponding to the C `size_t`\n+*/\n+type size_t = uint;\n+\n+/*\n+Type: ssize_t\n+\n+A signed integer correpsonding to the C `ssize_t`\n+*/\n+type ssize_t = int;\n+\n+/*\n+Type: off_t\n+\n+An unsigned integer corresponding to the C `off_t`\n+*/\n+type off_t = uint;\n+\n+/*\n+Type: fd_t\n+\n+A type that can be used for C file descriptors\n+*/\n+type fd_t = i32;      // not actually a C type, but should be.\n+\n+/*\n+Type: pid_t\n+\n+A type for representing process ID's, corresponding to C `pid_t`\n+*/\n+type pid_t = i32;\n+\n+// enum is implementation-defined, but is 32-bits in practice\n+/*\n+Type: enum\n+\n+An unsigned integer with the same size as a C enum\n+*/\n+type enum = u32;"}, {"sha": "ea98150d76a6512f5b80fe62dda51d8b2f2bd9f9", "filename": "src/libstd/dbg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/dbg.rs"}, {"sha": "7c0a13bb5f8ab2ed3bf8102c6c23d2a80a7f6465", "filename": "src/libstd/deque.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/deque.rs"}, {"sha": "4a49dd473f402882d60363abf2c18a2e8a9efd14", "filename": "src/libstd/ebml.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/ebml.rs"}, {"sha": "89d47b20746a0c9d6f2a58a5595e5f273f73d893", "filename": "src/libstd/either.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/either.rs"}, {"sha": "14a014e891a0b9535fb52339c6f2a3f3d79f6f8a", "filename": "src/libstd/extfmt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fextfmt.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/extfmt.rs"}, {"sha": "015dceb1dc1c0caf3c30229c40228447ddf60837", "filename": "src/libstd/float.rs", "status": "renamed", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffloat.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -253,25 +253,18 @@ fn pow_uint_to_uint_as_float(x: uint, pow: uint) -> float {\n }\n \n \n-/**\n- * Section: Constants\n- */\n-\n-//TODO: Once this is possible, replace the body of these functions\n-//by an actual constant.\n-\n /* Const: NaN */\n const NaN: float = 0./0.;\n \n-/* Predicate: isNaN */\n-pure fn isNaN(f: float) -> bool { f != f }\n-\n /* Const: infinity */\n const infinity: float = 1./0.;\n \n /* Const: neg_infinity */\n const neg_infinity: float = -1./0.;\n \n+/* Predicate: isNaN */\n+pure fn isNaN(f: float) -> bool { f != f }\n+\n /* Function: add */\n pure fn add(x: float, y: float) -> float { ret x + y; }\n ", "previous_filename": "src/lib/float.rs"}, {"sha": "11c42fb7018eb291a99e826389d9f3d2164ce1c8", "filename": "src/libstd/four.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ffour.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ffour.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffour.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/four.rs"}, {"sha": "fcd95040ab05ae6e6b0da562e119c974c008a06f", "filename": "src/libstd/fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/fs.rs"}, {"sha": "1f4e6b9491ad0bd8193d00ba1bc64841ca6b182c", "filename": "src/libstd/fun_treemap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/fun_treemap.rs"}, {"sha": "bbbd76f82178b4331c7aad616ffa4b07518e48e6", "filename": "src/libstd/generic_os.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgeneric_os.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/generic_os.rs"}, {"sha": "438bec0a90b3e2a74b4971c84b56c54412699b73", "filename": "src/libstd/getopts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/getopts.rs"}, {"sha": "2ab299800adf52589ff11e1d65c277ff4e75f369", "filename": "src/libstd/int.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fint.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/int.rs"}, {"sha": "06e1be2fc4b4ab674803160e8f217ad40949e427", "filename": "src/libstd/io.rs", "status": "renamed", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -1,3 +1,9 @@\n+/*\n+Module: io\n+\n+Basic input/output\n+*/\n+\n import ctypes::fd_t;\n import ctypes::c_int;\n ", "previous_filename": "src/lib/io.rs"}, {"sha": "3f74c55507b166538aa58ca05ca6ca7c687fa5ff", "filename": "src/libstd/json.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/json.rs"}, {"sha": "7e30088ee3c378f10765bc405e5dee7e1769c21c", "filename": "src/libstd/linux_os.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flinux_os.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/linux_os.rs"}, {"sha": "ab71209181917ab92915c62bdfc122e9494beb5c", "filename": "src/libstd/list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/list.rs"}, {"sha": "f23e82eaa630d23ec0c3da2f8eedfb9cb6555b1c", "filename": "src/libstd/macos_os.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacos_os.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/macos_os.rs"}, {"sha": "c802b5b889ffa9c2eb77ead7e53338b8840b55ab", "filename": "src/libstd/map.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/map.rs"}, {"sha": "31bfe2ba3a64a4ea25f768be359890780c86fc87", "filename": "src/libstd/math.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmath.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -23,6 +23,9 @@ import ctypes::c_int;\n import m_float = math_f64;\n \n // FIXME replace with redirect to m_float::consts::FOO as soon as it works\n+/*\n+Module: consts\n+*/\n mod consts {\n     /*\n     Const: pi", "previous_filename": "src/lib/math.rs"}, {"sha": "6c36db51a67c1ef255802bde17f655d9aa4a1244", "filename": "src/libstd/math_f32.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmath_f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmath_f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmath_f32.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -17,6 +17,7 @@ export\n \n export consts;\n \n+/* Module: consts */\n mod consts {\n \n     /*", "previous_filename": "src/lib/math_f32.rs"}, {"sha": "cc8fad9f665268f707ad6db4d0cabadc367c8c7f", "filename": "src/libstd/math_f64.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmath_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fmath_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmath_f64.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -17,6 +17,7 @@ export\n \n export consts;\n \n+/* Module: consts */\n mod consts {\n \n     /*", "previous_filename": "src/lib/math_f64.rs"}, {"sha": "5ee7cfa602c49d7cbcb0a05eaa99dc70e5f9648b", "filename": "src/libstd/net.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/net.rs"}, {"sha": "403cb47f47e645d608a2fe04f1ea27f89fbd888f", "filename": "src/libstd/option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/option.rs"}, {"sha": "befa4c9829c6163d4dfd9bd91cae52ce75223bf0", "filename": "src/libstd/posix_fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fposix_fs.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/posix_fs.rs"}, {"sha": "0372b17cdf1d27dbda952c10b75e2b3e6ec43de1", "filename": "src/libstd/ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/ptr.rs"}, {"sha": "be350baadbe1ab17c5be9812eaa0d75dd88ee2d6", "filename": "src/libstd/rand.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/rand.rs"}, {"sha": "550f53470bbe8d0e9db5cc7924859abbf808a739", "filename": "src/libstd/result.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/result.rs"}, {"sha": "19819a968bfb8853865974b686ec8644701b2d1c", "filename": "src/libstd/rope.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/rope.rs"}, {"sha": "6f4ad2da3d6e9bb2be08919b084f66cc30710d36", "filename": "src/libstd/run_program.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun_program.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/run_program.rs"}, {"sha": "a51cbdc65d136fa2cc9992658908361c8364d1f4", "filename": "src/libstd/sha1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/sha1.rs"}, {"sha": "4702a2adab49bc01986319a4b41b6f734837a038", "filename": "src/libstd/smallintmap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/smallintmap.rs"}, {"sha": "38ab4f3cfb1897d98e2ff0929aa0600268fd8c4f", "filename": "src/libstd/sort.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/sort.rs"}, {"sha": "1f0d1b060938810b0d71be351c249556c456f9e1", "filename": "src/libstd/std.rc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/std.rc"}, {"sha": "2bae8d699a5ca7bb57cde5695cd87a61555d97aa", "filename": "src/libstd/str.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -174,7 +174,8 @@ fn byte_len_range(s: str, byte_offset: uint, char_len: uint) -> uint {\n /*\n Function: bytes\n \n-Converts a string to a vector of bytes\n+Converts a string to a vector of bytes. The result vector is not\n+null-terminated.\n */\n fn bytes(s: str) -> [u8] unsafe {\n     let v = unsafe::reinterpret_cast(s);", "previous_filename": "src/lib/str.rs"}, {"sha": "3b4a3b8c64378eeae0c037f9c453d26018ffd0bf", "filename": "src/libstd/sys.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/sys.rs"}, {"sha": "a8765407f3afe09f855da64e67b1d208c48a7292", "filename": "src/libstd/task.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/task.rs"}, {"sha": "ee7d5e3b2d92053f13f8365766ee487567aefc5e", "filename": "src/libstd/tempfile.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -9,6 +9,9 @@ import option;\n import option::{none, some};\n import rand;\n \n+/*\n+Function: mkdtemp\n+*/\n fn mkdtemp(prefix: str, suffix: str) -> option::t<str> {\n     let r = rand::mk_rng();\n     let i = 0u;", "previous_filename": "src/lib/tempfile.rs"}, {"sha": "75c35aabd54f4a25ed19edabf6d297e9a76eafe8", "filename": "src/libstd/term.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/term.rs"}, {"sha": "d827d77583176fed5f5c4612499b2d1d99956d51", "filename": "src/libstd/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/test.rs"}, {"sha": "2865666fdc8390c73ef19c074617a84c4d0885c7", "filename": "src/libstd/time.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/time.rs"}, {"sha": "35d87cd518f391e9aa5fa670527393afa3246427", "filename": "src/libstd/treemap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/treemap.rs"}, {"sha": "fd4456cfde3ac0c893ceae38aacfd2fe45c5e154", "filename": "src/libstd/tri.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Ftri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftri.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/tri.rs"}, {"sha": "be6f649a9792bf7fc4a02764cd66dcee9f908283", "filename": "src/libstd/u32.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fu32.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/u32.rs"}, {"sha": "aacc35a827d974add99f8dfd3d05bb958d191897", "filename": "src/libstd/u64.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fu64.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/u64.rs"}, {"sha": "eadfcadda4a12cd15f547cd91bae50cc944d7b2c", "filename": "src/libstd/u8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fu8.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/u8.rs"}, {"sha": "7de70526a7f41806e64c0c2629737914f663d41f", "filename": "src/libstd/ufind.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fufind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fufind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fufind.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/ufind.rs"}, {"sha": "ae1ba628aa644596af9c903e3cf8ca460be9f8d8", "filename": "src/libstd/uint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuint.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/uint.rs"}, {"sha": "5038721d26e5464a3a877368081663ed31a3b0be", "filename": "src/libstd/unicode.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/unicode.rs"}, {"sha": "22cce4956498260f83a5fd5771d0266c071c3c0c", "filename": "src/libstd/unsafe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funsafe.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/unsafe.rs"}, {"sha": "a15b5291546fef4c23e69f7783bbd07a7fa7f388", "filename": "src/libstd/util.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/util.rs"}, {"sha": "17916b844e32805ec252831537b67830780ea855", "filename": "src/libstd/uv.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/uv.rs"}, {"sha": "d8f89b3b27bc943407e23048c94832c913faa933", "filename": "src/libstd/vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/vec.rs"}, {"sha": "87c97fe35c96c80d0ce53afdcd195e319f651fd6", "filename": "src/libstd/win32_fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fwin32_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fwin32_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fwin32_fs.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/win32_fs.rs"}, {"sha": "9f648ac9721b61ec578e4342133d078ce7de8620", "filename": "src/libstd/win32_os.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Flibstd%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fwin32_os.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/lib/win32_os.rs"}, {"sha": "03b97fa7b517774d61d3c268fc2f7a6ff5a989c5", "filename": "src/rt/arch/i386/context.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Farch%2Fi386%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Farch%2Fi386%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fcontext.h?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -7,7 +7,7 @@\n #include <inttypes.h>\n #include <stdint.h>\n \n-#include \"../../memcheck.h\"\n+#include \"vg/memcheck.h\"\n \n template<typename T>\n T align_down(T sp)\n@@ -51,9 +51,7 @@ class context {\n     uint32_t bot = regs.esp;\n     uint32_t top = align_down(bot - nbytes);\n \n-#ifdef HAVE_VALGRIND\n     (void)VALGRIND_MAKE_MEM_UNDEFINED(top - 4, bot - top + 4);\n-#endif\n \n     return reinterpret_cast<void *>(top);\n   }"}, {"sha": "30084ec2de0c147c86d48eb66f601659cbac4417", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -75,11 +75,12 @@ MORESTACK:\n \n \t// The arguments to rust_new_stack2\n \tmovl 40(%esp),%eax  // Size of stack arguments\n-\tmovl %eax,16(%esp)\n+\tmovl %eax,20(%esp)\n \tleal 48(%esp),%eax // Address of stack arguments\n-\tmovl %eax,12(%esp)\n+\tmovl %eax,16(%esp)\n \tmovl 36(%esp),%eax // The amount of stack needed\n-\tmovl %eax,8(%esp)\n+\tmovl %eax,12(%esp)\n+\tmovl $0, 8(%esp)   // Out pointer\n \n #ifdef __APPLE__\n \tcall 1f\n@@ -97,7 +98,7 @@ MORESTACK:\n \tmovl 32(%esp),%edx          // Grab the return pointer.\n \tinc  %edx    // Skip past the ret instruction in the parent fn\n \n-\tmovl %eax,%esp          // Switch stacks.\n+\tmovl 8(%esp),%esp          // Switch stacks.\n \tcall *%edx             // Re-enter the function that called us.\n \n \t// Now the function that called us has returned, so we need to delete the"}, {"sha": "59d7bfa51f33740ffe49f23014b8d31e69655621", "filename": "src/rt/arch/x86_64/context.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.h?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -8,9 +8,7 @@\n #include <stdint.h>\n #include <xmmintrin.h>\n \n-#ifdef HAVE_VALGRIND\n-#include <valgrind/memcheck.h>\n-#endif\n+#include \"vg/memcheck.h\"\n \n template<typename T>\n T align_down(T sp)\n@@ -51,9 +49,7 @@ class context {\n         uint64_t bot = regs.data[RUSTRT_RSP];\n         uint64_t top = align_down(bot - nbytes);\n \n-#ifdef HAVE_VALGRIND\n         (void)VALGRIND_MAKE_MEM_UNDEFINED(top - 4, bot - top + 4);\n-#endif\n \n         return reinterpret_cast<void *>(top);\n     }"}, {"sha": "ef0edcee7209a2c0029b9f9e8aba7897430e376a", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -81,9 +81,12 @@ MORESTACK:\n \tmovq %rbp, %rcx\n \taddq $24, %rcx  // Base pointer, return address x2\n \n+\tpushq $0 // Alignment\n+\n \tpushq %r11 // Size of stack arguments\n \tpushq %rcx // Address of stack arguments\n \tpushq %r10 // The amount of stack needed\n+\tpushq $0   // Out pointer\n \n \tmovq UPCALL_NEW_STACK@GOTPCREL(%rip), %rsi\n \tmovq %rsp, %rdi\n@@ -95,7 +98,8 @@ MORESTACK:\n #endif\n \n \t// Pop the new_stack_args struct\n-\taddq $24, %rsp\n+\tpopq %rax\n+\taddq $32, %rsp\n \n \t// Pop the saved arguments\n \tpopq %r9"}, {"sha": "dd5831c2917391a7e3eac73d906e6bac1310c04f", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -273,6 +273,12 @@ debug_ptrcast(type_desc *from_ty,\n     return ptr;\n }\n \n+extern \"C\" CDECL void *\n+debug_get_stk_seg() {\n+    rust_task *task = rust_scheduler::get_task();\n+    return task->stk;\n+}\n+\n extern \"C\" CDECL rust_vec*\n rust_list_files(rust_str *path) {\n     rust_task *task = rust_scheduler::get_task();"}, {"sha": "b540225243f93efd2b3f5793d9f80afdead34a0f", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -2,8 +2,8 @@\n #include \"rust_internal.h\"\n #include \"rust_cc.h\"\n \n-#include \"valgrind.h\"\n-#include \"memcheck.h\"\n+#include \"vg/valgrind.h\"\n+#include \"vg/memcheck.h\"\n \n #ifndef __WIN32__\n #include <execinfo.h>\n@@ -131,6 +131,9 @@ rust_task::~rust_task()\n     //   (ref_count == 1 && this == sched->root_task));\n \n     // Delete all the stacks. There may be more than one if the task failed\n+    // FIXME: This is not correct. During unwinding we need to delete\n+    // the stacks and record the stack limit, otherwise the stack\n+    // stack is corrupted when destructors are running.\n     while (stk != NULL) {\n         del_stk(this, stk);\n     }"}, {"sha": "ffa9876676375fd882631bfbe4c2376fe7e0e7ee", "filename": "src/rt/rust_timer.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frust_timer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frust_timer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_timer.cpp?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -1,5 +1,5 @@\n #include \"rust_internal.h\"\n-#include \"valgrind.h\"\n+#include \"vg/valgrind.h\"\n \n // The mechanism in this file is very crude; every domain (thread) spawns its\n // own secondary timer thread, and that timer thread *never idles*. It"}, {"sha": "653db471fc0154f2d824a1d07b9e839ebc0fccee", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -209,28 +209,48 @@ upcall_dynastack_free(void *ptr) {\n     return rust_scheduler::get_task()->dynastack.free(ptr);\n }\n \n+extern \"C\" void record_sp(void *limit);\n+\n /**\n- * Allocates |nbytes| bytes in the C stack and returns a pointer to the start\n- * of the allocated space.\n+ * Switch to the C stack and call the given function, passing a single pointer\n+ * argument.\n  */\n extern \"C\" CDECL void\n upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n-    rust_scheduler *sched = rust_scheduler::get_task()->sched;\n-    sched->c_context.call_shim_on_c_stack(args, fn_ptr);\n+    rust_task *task = rust_scheduler::get_task();\n+\n+    // FIXME (1226) - The shim functions generated by rustc contain the\n+    // morestack prologue, so we need to let them know they have enough\n+    // stack.\n+    record_sp(0);\n+\n+    rust_scheduler *sched = task->sched;\n+    try {\n+        sched->c_context.call_shim_on_c_stack(args, fn_ptr);\n+    } catch (...) {\n+        task = rust_scheduler::get_task();\n+        task->record_stack_limit();\n+        throw;\n+    }\n+    task = rust_scheduler::get_task();\n+    task->record_stack_limit();\n }\n \n struct rust_new_stack2_args {\n-  size_t stk_sz;\n-  void *args_addr;\n-  size_t args_sz;\n+    void *new_stack;\n+    size_t stk_sz;\n+    void *args_addr;\n+    size_t args_sz;\n };\n \n // A new stack function suitable for calling through\n // upcall_call_shim_on_c_stack\n-extern \"C\" CDECL void *\n+extern \"C\" CDECL void\n upcall_new_stack(struct rust_new_stack2_args *args) {\n     rust_task *task = rust_scheduler::get_task();\n-    return task->new_stack(args->stk_sz, args->args_addr, args->args_sz);\n+    args->new_stack = task->new_stack(args->stk_sz,\n+                                      args->args_addr,\n+                                      args->args_sz);\n }\n \n extern \"C\" CDECL void"}, {"sha": "ba1a9c1403da482c06e05066a9fb875607fabbb2", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -8,6 +8,7 @@ del_port\n debug_ptrcast\n debug_tag\n debug_tydesc\n+debug_get_stk_seg\n do_gc\n drop_task\n get_port_id"}, {"sha": "58480256e19dcf080829ebb2a274d9639c6c92bf", "filename": "src/rt/vg/memcheck.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Fvg%2Fmemcheck.h", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Fvg%2Fmemcheck.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvg%2Fmemcheck.h?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/rt/memcheck.h"}, {"sha": "737cc2a8b42241d4dfed5242adf20420a369efd0", "filename": "src/rt/vg/valgrind.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Fvg%2Fvalgrind.h", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Frt%2Fvg%2Fvalgrind.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvg%2Fvalgrind.h?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "previous_filename": "src/rt/valgrind.h"}, {"sha": "02b1adae481669c1b2cb8e9be32aab1175df8560", "filename": "src/test/run-fail/morestack2.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -0,0 +1,41 @@\n+// xfail-test\n+// error-pattern:explicit failure\n+// compile-flags:--stack-growth\n+\n+// This time we're testing that the stack limits are restored\n+// correctly after calling into the C stack and unwinding.\n+// See the hack in upcall_call_shim_on_c_stack where it messes\n+// with the stack limit.\n+\n+use std;\n+\n+native mod rustrt {\n+    fn set_min_stack(size: uint);\n+    fn pin_task();\n+}\n+\n+fn getbig_call_c_and_fail(i: int) {\n+    if i != 0 {\n+        getbig_call_c_and_fail(i - 1);\n+    } else {\n+        rustrt::pin_task();\n+        fail;\n+    }\n+}\n+\n+resource and_then_get_big_again(_i: ()) {\n+    fn getbig(i: int) {\n+        if i != 0 {\n+            getbig(i - 1);\n+        }\n+    }\n+    getbig(10000);\n+}\n+\n+fn main() {\n+    rustrt::set_min_stack(256u);\n+    std::task::spawn((), fn (&&_i: ()) {\n+        let r = and_then_get_big_again(());\n+        getbig_call_c_and_fail(10000);\n+    });\n+}\n\\ No newline at end of file"}, {"sha": "9fdd0326b6618e967aa3d1ae3896aee0b88be1ed", "filename": "src/test/run-fail/morestack3.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -0,0 +1,34 @@\n+// xfail-test\n+// error-pattern:explicit failure\n+// compile-flags:--stack-growth\n+\n+// Just testing unwinding\n+\n+use std;\n+\n+native mod rustrt {\n+    fn set_min_stack(size: uint);\n+}\n+\n+fn getbig_and_fail(&&i: int) {\n+    let r = and_then_get_big_again(@0);\n+    if i != 0 {\n+        getbig_and_fail(i - 1);\n+    } else {\n+        fail;\n+    }\n+}\n+\n+resource and_then_get_big_again(_i: @int) {\n+    fn getbig(i: int) {\n+        if i != 0 {\n+            getbig(i - 1);\n+        }\n+    }\n+    getbig(1000);\n+}\n+\n+fn main() {\n+    rustrt::set_min_stack(256u);\n+    std::task::spawn(1000, getbig_and_fail);\n+}\n\\ No newline at end of file"}, {"sha": "cdba6dd766ea42c47acce497c2b6221d9ed3d6d9", "filename": "src/test/run-pass/morestack4.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack4.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -0,0 +1,100 @@\n+// xfail-test\n+// compile-flags:--stack-growth\n+\n+// This is testing for stack frames greater than 256 bytes,\n+// for which function prologues are generated differently\n+\n+type biggy = {\n+    a00: u64,\n+    a01: u64,\n+    a02: u64,\n+    a03: u64,\n+    a04: u64,\n+    a05: u64,\n+    a06: u64,\n+    a07: u64,\n+    a08: u64,\n+    a09: u64,\n+    a10: u64,\n+    a11: u64,\n+    a12: u64,\n+    a13: u64,\n+    a14: u64,\n+    a15: u64,\n+    a16: u64,\n+    a17: u64,\n+    a18: u64,\n+    a19: u64,\n+    a20: u64,\n+    a21: u64,\n+    a22: u64,\n+    a23: u64,\n+    a24: u64,\n+    a25: u64,\n+    a26: u64,\n+    a27: u64,\n+    a28: u64,\n+    a29: u64,\n+    a30: u64,\n+    a31: u64,\n+    a32: u64,\n+    a33: u64,\n+    a34: u64,\n+    a35: u64,\n+    a36: u64,\n+    a37: u64,\n+    a38: u64,\n+    a39: u64,\n+};\n+\n+\n+fn getbig(i: biggy) {\n+    if i.a00 != 0u64 {\n+        getbig({a00: i.a00 - 1u64 with i});\n+    }\n+}\n+\n+fn main() {\n+    getbig({\n+        a00: 100000u64,\n+        a01: 100000u64,\n+        a02: 100000u64,\n+        a03: 100000u64,\n+        a04: 100000u64,\n+        a05: 100000u64,\n+        a06: 100000u64,\n+        a07: 100000u64,\n+        a08: 100000u64,\n+        a09: 100000u64,\n+        a10: 100000u64,\n+        a11: 100000u64,\n+        a12: 100000u64,\n+        a13: 100000u64,\n+        a14: 100000u64,\n+        a15: 100000u64,\n+        a16: 100000u64,\n+        a17: 100000u64,\n+        a18: 100000u64,\n+        a19: 100000u64,\n+        a20: 100000u64,\n+        a21: 100000u64,\n+        a22: 100000u64,\n+        a23: 100000u64,\n+        a24: 100000u64,\n+        a25: 100000u64,\n+        a26: 100000u64,\n+        a27: 100000u64,\n+        a28: 100000u64,\n+        a29: 100000u64,\n+        a30: 100000u64,\n+        a31: 100000u64,\n+        a32: 100000u64,\n+        a33: 100000u64,\n+        a34: 100000u64,\n+        a35: 100000u64,\n+        a36: 100000u64,\n+        a37: 100000u64,\n+        a38: 100000u64,\n+        a39: 100000u64,\n+    });\n+}\n\\ No newline at end of file"}, {"sha": "bedf3f47ee96910fcdc69e24d14468007c53f45f", "filename": "src/test/run-pass/morestack5.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack5.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -0,0 +1,26 @@\n+// xfail-test\n+// compile-flags:--stack-growth\n+\n+// This test will call __morestack with various minimum stack sizes\n+\n+use std;\n+import std::task;\n+\n+native mod rustrt {\n+    fn set_min_stack(size: uint);\n+}\n+\n+fn getbig(&&i: int) {\n+    if i != 0 {\n+        getbig(i - 1);\n+    }\n+}\n+\n+fn main() {\n+    let sz = 400u;\n+    while sz < 500u {\n+        rustrt::set_min_stack(sz);\n+        task::join(task::spawn_joinable(200, getbig));\n+        sz += 1u;\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "ef1a87aeea6e837dbe17c74f32f418137f9b999b", "filename": "src/test/run-pass/morestack6.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b1657b2cb17960f72467c4cb31d8ac7969661d/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=39b1657b2cb17960f72467c4cb31d8ac7969661d", "patch": "@@ -0,0 +1,81 @@\n+// xfail-test\n+// compile-flags:--stack-growth\n+\n+// This test attempts to force the dynamic linker to resolve\n+// external symbols as close to the red zone as possible.\n+\n+use std;\n+import std::task;\n+import std::rand;\n+\n+native mod rustrt {\n+    fn set_min_stack(size: uint);\n+    fn debug_get_stk_seg() -> *u8;\n+\n+    fn unsupervise();\n+    fn last_os_error() -> str;\n+    fn rust_getcwd() -> str;\n+    fn refcount(box: @int);\n+    fn do_gc();\n+    fn pin_task();\n+    fn unpin_task();\n+    fn get_task_id();\n+    fn sched_threads();\n+    fn rust_get_task();\n+}\n+\n+fn calllink01() { rustrt::unsupervise(); }\n+fn calllink02() { rustrt::last_os_error(); }\n+fn calllink03() { rustrt::rust_getcwd(); }\n+fn calllink04() { rustrt::refcount(@0); }\n+fn calllink05() { rustrt::do_gc(); }\n+fn calllink06() { rustrt::pin_task(); }\n+fn calllink07() { rustrt::unpin_task(); }\n+fn calllink08() { rustrt::get_task_id(); }\n+fn calllink09() { rustrt::sched_threads(); }\n+fn calllink10() { rustrt::rust_get_task(); }\n+\n+fn runtest(&&args:(fn(), u32)) {\n+    let (f, frame_backoff) = args;\n+    runtest2(f, frame_backoff, 0 as *u8);\n+}\n+\n+fn runtest2(f: fn(), frame_backoff: u32, last_stk: *u8) -> u32 {\n+    let curr_stk = rustrt::debug_get_stk_seg();\n+    if (last_stk != curr_stk && last_stk != 0 as *u8) {\n+        // We switched stacks, go back and try to hit the dynamic linker\n+        frame_backoff\n+    } else {\n+        let frame_backoff = runtest2(f, frame_backoff, curr_stk);\n+        if frame_backoff > 1u32 {\n+            frame_backoff - 1u32\n+        } else if frame_backoff == 1u32 {\n+            f();\n+            0u32\n+        } else {\n+            0u32\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let fns = [\n+        calllink01,\n+        calllink02,\n+        calllink03,\n+        calllink04,\n+        calllink05,\n+        calllink06,\n+        calllink07,\n+        calllink08,\n+        calllink09,\n+        calllink10\n+    ];\n+    let rng = rand::mk_rng();\n+    for f in fns {\n+        let sz = rng.next() % 256u32 + 256u32;\n+        let frame_backoff = rng.next() % 10u32 + 1u32;\n+        rustrt::set_min_stack(sz as uint);\n+        task::join(task::spawn_joinable((f, frame_backoff), runtest));\n+    }\n+}\n\\ No newline at end of file"}]}