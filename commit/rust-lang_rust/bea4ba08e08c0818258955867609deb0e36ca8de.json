{"sha": "bea4ba08e08c0818258955867609deb0e36ca8de", "node_id": "C_kwDOAAsO6NoAKGJlYTRiYTA4ZTA4YzA4MTgyNTg5NTU4Njc2MDlkZWIwZTM2Y2E4ZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-17T14:38:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-17T14:38:44Z"}, "message": "Auto merge of #12564 - Veykril:completion, r=Veykril\n\ninternal: Collapse completion ctx path `qualifier` and `is_absolute_path` into enum", "tree": {"sha": "e59efa5f6e72b86670e0a4bd5f7bceebe62fae9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59efa5f6e72b86670e0a4bd5f7bceebe62fae9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea4ba08e08c0818258955867609deb0e36ca8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea4ba08e08c0818258955867609deb0e36ca8de", "html_url": "https://github.com/rust-lang/rust/commit/bea4ba08e08c0818258955867609deb0e36ca8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea4ba08e08c0818258955867609deb0e36ca8de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0b7277a604f5affde02e10122c5715faad468d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0b7277a604f5affde02e10122c5715faad468d", "html_url": "https://github.com/rust-lang/rust/commit/9c0b7277a604f5affde02e10122c5715faad468d"}, {"sha": "531060f10384cdcaba1ac7711f492a664fc3299a", "url": "https://api.github.com/repos/rust-lang/rust/commits/531060f10384cdcaba1ac7711f492a664fc3299a", "html_url": "https://github.com/rust-lang/rust/commit/531060f10384cdcaba1ac7711f492a664fc3299a"}], "stats": {"total": 292, "additions": 141, "deletions": 151}, "files": [{"sha": "56e51d32e20d7d6bd401d6cbe700610f8ac39222", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -18,7 +18,9 @@ use syntax::{\n \n use crate::{\n     completions::module_or_attr,\n-    context::{CompletionContext, IdentContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{\n+        CompletionContext, IdentContext, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified,\n+    },\n     item::CompletionItem,\n     Completions,\n };\n@@ -72,18 +74,17 @@ pub(crate) fn complete_known_attribute_input(\n }\n \n pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (is_absolute_path, qualifier, is_inner, annotated_item_kind) = match ctx.path_context() {\n+    let (qualified, is_inner, annotated_item_kind) = match ctx.path_context() {\n         Some(&PathCompletionCtx {\n             kind: PathKind::Attr { kind, annotated_item_kind },\n-            is_absolute_path,\n-            ref qualifier,\n+            ref qualified,\n             ..\n-        }) => (is_absolute_path, qualifier, kind == AttrKind::Inner, annotated_item_kind),\n+        }) => (qualified, kind == AttrKind::Inner, annotated_item_kind),\n         _ => return,\n     };\n \n-    match qualifier {\n-        Some(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+    match qualified {\n+        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n@@ -101,9 +102,9 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             return;\n         }\n         // fresh use tree with leading colon2, only show crate roots\n-        None if is_absolute_path => acc.add_crate_roots(ctx),\n+        Qualified::Absolute => acc.add_crate_roots(ctx),\n         // only show modules in a fresh UseTree\n-        None => {\n+        Qualified::No => {\n             ctx.process_all_names(&mut |name, def| {\n                 if let Some(def) = module_or_attr(ctx.db, def) {\n                     acc.add_resolution(ctx, name, def);"}, {"sha": "0d4a292e0f725cffebd866b7e99540f59aec1ee4", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -5,26 +5,21 @@ use itertools::Itertools;\n use syntax::SmolStr;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified},\n     item::CompletionItem,\n     Completions,\n };\n \n pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (qualifier, is_absolute_path) = match ctx.path_context() {\n-        Some(&PathCompletionCtx {\n-            kind: PathKind::Derive,\n-            ref qualifier,\n-            is_absolute_path,\n-            ..\n-        }) => (qualifier, is_absolute_path),\n+    let qualified = match ctx.path_context() {\n+        Some(&PathCompletionCtx { kind: PathKind::Derive, ref qualified, .. }) => qualified,\n         _ => return,\n     };\n \n     let core = ctx.famous_defs().core();\n \n-    match qualifier {\n-        Some(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+    match qualified {\n+        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n@@ -47,9 +42,9 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n                 }\n             }\n         }\n-        None if is_absolute_path => acc.add_crate_roots(ctx),\n+        Qualified::Absolute => acc.add_crate_roots(ctx),\n         // only show modules in a fresh UseTree\n-        None => {\n+        Qualified::No => {\n             ctx.process_all_names(&mut |name, def| {\n                 let mac = match def {\n                     ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac))\n@@ -65,7 +60,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n \n                 match (core, mac.module(ctx.db).krate()) {\n                     // show derive dependencies for `core`/`std` derives\n-                    (Some(core), mac_krate) if core == mac_krate && qualifier.is_none() => {}\n+                    (Some(core), mac_krate) if core == mac_krate => {}\n                     _ => return acc.add_resolution(ctx, name, def),\n                 };\n "}, {"sha": "bdafdf4152e968efd4c32fe55d2fceedc479281c", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -5,7 +5,7 @@ use ide_db::FxHashSet;\n use crate::{\n     context::{\n         CompletionContext, DotAccess, DotAccessKind, NameRefContext, NameRefKind,\n-        PathCompletionCtx, PathKind,\n+        PathCompletionCtx, PathKind, Qualified,\n     },\n     CompletionItem, CompletionItemKind, Completions,\n };\n@@ -50,8 +50,7 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     match ctx.path_context() {\n         Some(\n             path_ctx @ PathCompletionCtx {\n-                is_absolute_path: false,\n-                qualifier: None,\n+                qualified: Qualified::No,\n                 kind: PathKind::Expr { .. },\n                 ..\n             },"}, {"sha": "f0a8529c78eb98ddf4b170923586db2ed3ba6dd4", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -4,16 +4,17 @@ use hir::ScopeDef;\n use ide_db::FxHashSet;\n \n use crate::{\n-    context::{NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{\n+        NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified,\n+    },\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let _p = profile::span(\"complete_expr_path\");\n \n     let (\n-        is_absolute_path,\n-        qualifier,\n+        qualified,\n         in_block_expr,\n         in_loop_body,\n         is_func_update,\n@@ -33,14 +34,12 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n                             ref ref_expr_parent,\n                             ref is_func_update,\n                         },\n-                    is_absolute_path,\n-                    ref qualifier,\n+                    ref qualified,\n                     ..\n                 })),\n             ..\n         }) if ctx.qualifier_ctx.none() => (\n-            is_absolute_path,\n-            qualifier,\n+            qualified,\n             in_block_expr,\n             in_loop_body,\n             is_func_update.is_some(),\n@@ -61,8 +60,8 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n         }\n     };\n \n-    match qualifier {\n-        Some(PathQualifierCtx { is_infer_qualifier, resolution, .. }) => {\n+    match qualified {\n+        Qualified::With(PathQualifierCtx { is_infer_qualifier, resolution, .. }) => {\n             if *is_infer_qualifier {\n                 ctx.traits_in_scope()\n                     .0\n@@ -174,8 +173,8 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n                 _ => (),\n             }\n         }\n-        None if is_absolute_path => acc.add_crate_roots(ctx),\n-        None => {\n+        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::No => {\n             acc.add_nameref_keywords_with_colon(ctx);\n             if let Some(adt) =\n                 ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n@@ -237,7 +236,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n                 add_keyword(\"true\", \"true\");\n                 add_keyword(\"false\", \"false\");\n \n-                if (in_condition && !is_absolute_path) || in_block_expr {\n+                if in_condition || in_block_expr {\n                     add_keyword(\"let\", \"let\");\n                 }\n "}, {"sha": "a9f598fffd3dbefee3f5a10f08ba7e02a50d217b", "filename": "crates/ide-completion/src/completions/field.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -3,7 +3,7 @@\n use crate::{\n     context::{\n         IdentContext, NameContext, NameKind, NameRefContext, NameRefKind, PathCompletionCtx,\n-        PathKind, TypeLocation,\n+        PathKind, Qualified, TypeLocation,\n     },\n     CompletionContext, Completions,\n };\n@@ -15,8 +15,7 @@ pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext\n             kind:\n                 Some(NameRefKind::Path(PathCompletionCtx {\n                     has_macro_bang: false,\n-                    is_absolute_path: false,\n-                    qualifier: None,\n+                    qualified: Qualified::No,\n                     parent: None,\n                     kind: PathKind::Type { location: TypeLocation::TupleField },\n                     has_type_args: false,"}, {"sha": "e3f3b7f5282774d5f94edb0a385e3e44fa71a639", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     completions::module_or_fn_macro,\n-    context::{ItemListKind, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{ItemListKind, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -16,23 +16,17 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n \n-    let (&is_absolute_path, path_qualifier, kind, is_trivial_path) = match ctx.path_context() {\n-        Some(\n-            ctx @ PathCompletionCtx {\n-                kind: PathKind::Item { kind },\n-                is_absolute_path,\n-                qualifier,\n-                ..\n-            },\n-        ) => (is_absolute_path, qualifier, Some(kind), ctx.is_trivial_path()),\n+    let (qualified, kind, is_trivial_path) = match ctx.path_context() {\n+        Some(ctx @ PathCompletionCtx { kind: PathKind::Item { kind }, qualified, .. }) => {\n+            (qualified, Some(kind), ctx.is_trivial_path())\n+        }\n         Some(\n             ctx @ PathCompletionCtx {\n                 kind: PathKind::Expr { in_block_expr: true, .. },\n-                is_absolute_path,\n-                qualifier,\n+                qualified,\n                 ..\n             },\n-        ) => (is_absolute_path, qualifier, None, ctx.is_trivial_path()),\n+        ) => (qualified, None, ctx.is_trivial_path()),\n         _ => return,\n     };\n \n@@ -49,8 +43,8 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n \n-    match path_qualifier {\n-        Some(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+    match qualified {\n+        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n             if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) = resolution {\n                 for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n                     if let Some(def) = module_or_fn_macro(ctx.db, def) {\n@@ -63,16 +57,16 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n                 acc.add_keyword(ctx, \"super::\");\n             }\n         }\n-        None if is_absolute_path => acc.add_crate_roots(ctx),\n-        None if ctx.qualifier_ctx.none() => {\n+        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::No if ctx.qualifier_ctx.none() => {\n             ctx.process_all_names(&mut |name, def| {\n                 if let Some(def) = module_or_fn_macro(ctx.db, def) {\n                     acc.add_resolution(ctx, name, def);\n                 }\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n-        None => {}\n+        Qualified::No => {}\n     }\n }\n "}, {"sha": "b7710ae70dae2fd0fbd542f731c6be15dbb56d84", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -5,7 +5,7 @@ use ide_db::FxHashSet;\n use syntax::ast::Pat;\n \n use crate::{\n-    context::{PathCompletionCtx, PathQualifierCtx, PatternRefutability},\n+    context::{PathCompletionCtx, PathQualifierCtx, PatternRefutability, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -111,10 +111,10 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n fn pattern_path_completion(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    PathCompletionCtx { qualifier, is_absolute_path, .. }: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n ) {\n-    match qualifier {\n-        Some(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+    match qualified {\n+        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n@@ -197,8 +197,8 @@ fn pattern_path_completion(\n             }\n         }\n         // qualifier can only be none here if we are in a TuplePat or RecordPat in which case special characters have to follow the path\n-        None if *is_absolute_path => acc.add_crate_roots(ctx),\n-        None => {\n+        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::No => {\n             ctx.process_all_names(&mut |name, res| {\n                 // FIXME: properly filter here\n                 if let ScopeDef::ModuleDef(_) = res {"}, {"sha": "5ba355f6ae8ef9b4e211a3a56f081e21f88506bd", "filename": "crates/ide-completion/src/completions/record.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -3,7 +3,9 @@ use ide_db::SymbolKind;\n use syntax::{ast::Expr, T};\n \n use crate::{\n-    context::{NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PatternContext},\n+    context::{\n+        NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PatternContext, Qualified,\n+    },\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n     CompletionRelevancePostfixMatch, Completions,\n };\n@@ -19,7 +21,7 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n                 NameRefKind::RecordExpr(record_expr)\n                 | NameRefKind::Path(PathCompletionCtx {\n                     kind: PathKind::Expr { is_func_update: Some(record_expr), .. },\n-                    qualifier: None,\n+                    qualified: Qualified::No,\n                     ..\n                 }),\n             ),"}, {"sha": "293311fe910483936ec63bd7cfbde49c5a7dab26", "filename": "crates/ide-completion/src/completions/snippet.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -4,7 +4,7 @@ use hir::Documentation;\n use ide_db::{imports::insert_use::ImportScope, SnippetCap};\n \n use crate::{\n-    context::{ItemListKind, PathCompletionCtx, PathKind},\n+    context::{ItemListKind, PathCompletionCtx, PathKind, Qualified},\n     item::Builder,\n     CompletionContext, CompletionItem, CompletionItemKind, Completions, SnippetScope,\n };\n@@ -18,8 +18,7 @@ fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str)\n pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     let &can_be_stmt = match ctx.path_context() {\n         Some(PathCompletionCtx {\n-            is_absolute_path: false,\n-            qualifier: None,\n+            qualified: Qualified::No,\n             kind: PathKind::Expr { in_block_expr, .. },\n             ..\n         }) => in_block_expr,\n@@ -44,8 +43,7 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     let path_kind = match ctx.path_context() {\n         Some(PathCompletionCtx {\n-            is_absolute_path: false,\n-            qualifier: None,\n+            qualified: Qualified::No,\n             kind: kind @ (PathKind::Item { .. } | PathKind::Expr { in_block_expr: true, .. }),\n             ..\n         }) => kind,"}, {"sha": "f2418d76ccc5de1d67ba70e0c302ca4ec7d77eae", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -5,21 +5,21 @@ use ide_db::FxHashSet;\n use syntax::{ast, AstNode};\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind, PathQualifierCtx, TypeAscriptionTarget, TypeLocation},\n+    context::{\n+        PathCompletionCtx, PathKind, PathQualifierCtx, Qualified, TypeAscriptionTarget,\n+        TypeLocation,\n+    },\n     render::render_type_inference,\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let _p = profile::span(\"complete_type_path\");\n \n-    let (&is_absolute_path, location, qualifier) = match ctx.path_context() {\n-        Some(PathCompletionCtx {\n-            kind: PathKind::Type { location },\n-            is_absolute_path,\n-            qualifier,\n-            ..\n-        }) => (is_absolute_path, location, qualifier),\n+    let (location, qualified) = match ctx.path_context() {\n+        Some(PathCompletionCtx { kind: PathKind::Type { location }, qualified, .. }) => {\n+            (location, qualified)\n+        }\n         _ => return,\n     };\n \n@@ -54,8 +54,8 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n         hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n     };\n \n-    match qualifier {\n-        Some(PathQualifierCtx { is_infer_qualifier, resolution, .. }) => {\n+    match qualified {\n+        Qualified::With(PathQualifierCtx { is_infer_qualifier, resolution, .. }) => {\n             if *is_infer_qualifier {\n                 ctx.traits_in_scope()\n                     .0\n@@ -151,8 +151,8 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n                 _ => (),\n             }\n         }\n-        None if is_absolute_path => acc.add_crate_roots(ctx),\n-        None => {\n+        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::No => {\n             acc.add_nameref_keywords_with_colon(ctx);\n             if let TypeLocation::TypeBound = location {\n                 ctx.process_all_names(&mut |name, res| {"}, {"sha": "3b6ce8fc1ad982a9da212ff1d367c8d72276d27c", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -7,30 +7,30 @@ use syntax::{ast, AstNode};\n use crate::{\n     context::{\n         CompletionContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind,\n-        PathQualifierCtx,\n+        PathQualifierCtx, Qualified,\n     },\n     item::Builder,\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (&is_absolute_path, qualifier, name_ref) = match ctx.nameref_ctx() {\n+    let (qualified, name_ref) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n-            kind:\n-                Some(NameRefKind::Path(PathCompletionCtx {\n-                    kind: PathKind::Use,\n-                    is_absolute_path,\n-                    qualifier,\n-                    ..\n-                })),\n+            kind: Some(NameRefKind::Path(PathCompletionCtx { kind: PathKind::Use, qualified, .. })),\n             nameref,\n             ..\n-        }) => (is_absolute_path, qualifier, nameref),\n+        }) => (qualified, nameref),\n         _ => return,\n     };\n \n-    match qualifier {\n-        Some(PathQualifierCtx { path, resolution, is_super_chain, use_tree_parent, .. }) => {\n+    match qualified {\n+        Qualified::With(PathQualifierCtx {\n+            path,\n+            resolution,\n+            is_super_chain,\n+            use_tree_parent,\n+            ..\n+        }) => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n@@ -105,12 +105,12 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n             }\n         }\n         // fresh use tree with leading colon2, only show crate roots\n-        None if is_absolute_path => {\n+        Qualified::Absolute => {\n             cov_mark::hit!(use_tree_crate_roots_only);\n             acc.add_crate_roots(ctx);\n         }\n         // only show modules and non-std enum in a fresh UseTree\n-        None => {\n+        Qualified::No => {\n             cov_mark::hit!(unqualified_path_selected_only);\n             ctx.process_all_names(&mut |name, res| {\n                 match res {"}, {"sha": "b971808626681c0ee78d9c8d54033ce6ac8ea0ca", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -3,23 +3,20 @@\n use hir::ScopeDef;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified},\n     Completions,\n };\n \n pub(crate) fn complete_vis_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (&is_absolute_path, qualifier, &has_in_token) = match ctx.path_context() {\n-        Some(PathCompletionCtx {\n-            kind: PathKind::Vis { has_in_token },\n-            is_absolute_path,\n-            qualifier,\n-            ..\n-        }) => (is_absolute_path, qualifier, has_in_token),\n+    let (qualified, &has_in_token) = match ctx.path_context() {\n+        Some(PathCompletionCtx { kind: PathKind::Vis { has_in_token }, qualified, .. }) => {\n+            (qualified, has_in_token)\n+        }\n         _ => return,\n     };\n \n-    match qualifier {\n-        Some(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+    match qualified {\n+        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n             // Try completing next child module of the path that is still a parent of the current module\n             if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) = resolution {\n                 let next_towards_current = ctx\n@@ -40,13 +37,13 @@ pub(crate) fn complete_vis_path(acc: &mut Completions, ctx: &CompletionContext)\n                 acc.add_keyword(ctx, \"super::\");\n             }\n         }\n-        None if !is_absolute_path => {\n+        Qualified::Absolute => {}\n+        Qualified::No => {\n             if !has_in_token {\n                 cov_mark::hit!(kw_completion_in);\n                 acc.add_keyword(ctx, \"in\");\n             }\n             acc.add_nameref_keywords(ctx);\n         }\n-        _ => {}\n     }\n }"}, {"sha": "4ed083a52454697b15237077029b36e107dd3c53", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -57,10 +57,8 @@ pub(crate) struct PathCompletionCtx {\n     pub(super) has_call_parens: bool,\n     /// If this has a macro call bang !\n     pub(super) has_macro_bang: bool,\n-    /// Whether this path stars with a `::`.\n-    pub(super) is_absolute_path: bool,\n-    /// The qualifier of the current path if it exists.\n-    pub(super) qualifier: Option<PathQualifierCtx>,\n+    /// The qualifier of the current path.\n+    pub(super) qualified: Qualified,\n     /// The parent of the path we are completing.\n     pub(super) parent: Option<ast::Path>,\n     pub(super) kind: PathKind,\n@@ -75,8 +73,7 @@ impl PathCompletionCtx {\n             PathCompletionCtx {\n                 has_call_parens: false,\n                 has_macro_bang: false,\n-                is_absolute_path: false,\n-                qualifier: None,\n+                qualified: Qualified::No,\n                 parent: None,\n                 has_type_args: false,\n                 ..\n@@ -147,6 +144,14 @@ pub(super) enum ItemListKind {\n     ExternBlock,\n }\n \n+#[derive(Debug)]\n+pub(super) enum Qualified {\n+    No,\n+    With(PathQualifierCtx),\n+    /// Whether the path is an absolute path\n+    Absolute,\n+}\n+\n /// The path qualifier state of the path we are completing.\n #[derive(Debug)]\n pub(crate) struct PathQualifierCtx {\n@@ -400,7 +405,10 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n-        self.path_context().and_then(|it| it.qualifier.as_ref().map(|it| &it.path))\n+        self.path_context().and_then(|it| match &it.qualified {\n+            Qualified::With(it) => Some(&it.path),\n+            _ => None,\n+        })\n     }\n \n     /// Checks if an item is visible and not `doc(hidden)` at the completion site."}, {"sha": "8d38677df6933520d3ba1ff0e8ef949827066a1a", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea4ba08e08c0818258955867609deb0e36ca8de/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=bea4ba08e08c0818258955867609deb0e36ca8de", "patch": "@@ -13,7 +13,7 @@ use syntax::{\n use crate::context::{\n     CompletionContext, DotAccess, DotAccessKind, IdentContext, ItemListKind, LifetimeContext,\n     LifetimeKind, NameContext, NameKind, NameRefContext, NameRefKind, ParamKind, PathCompletionCtx,\n-    PathKind, PathQualifierCtx, PatternContext, PatternRefutability, QualifierCtx,\n+    PathKind, PathQualifierCtx, PatternContext, PatternRefutability, Qualified, QualifierCtx,\n     TypeAscriptionTarget, TypeLocation, COMPLETION_MARKER,\n };\n \n@@ -585,8 +585,7 @@ impl<'a> CompletionContext<'a> {\n         let mut path_ctx = PathCompletionCtx {\n             has_call_parens: false,\n             has_macro_bang: false,\n-            is_absolute_path: false,\n-            qualifier: None,\n+            qualified: Qualified::No,\n             parent: path.parent_path(),\n             kind: PathKind::Item { kind: ItemListKind::SourceFile },\n             has_type_args: false,\n@@ -854,41 +853,40 @@ impl<'a> CompletionContext<'a> {\n \n         // calculate the qualifier context\n         if let Some((path, use_tree_parent)) = path_or_use_tree_qualifier(&path) {\n-            if !use_tree_parent {\n-                path_ctx.is_absolute_path =\n-                    path.top_path().segment().map_or(false, |it| it.coloncolon_token().is_some());\n+            if !use_tree_parent && segment.coloncolon_token().is_some() {\n+                path_ctx.qualified = Qualified::Absolute;\n+            } else {\n+                let path = path\n+                    .segment()\n+                    .and_then(|it| find_node_in_file(original_file, &it))\n+                    .map(|it| it.parent_path());\n+                if let Some(path) = path {\n+                    let res = sema.resolve_path(&path);\n+                    let is_super_chain = iter::successors(Some(path.clone()), |p| p.qualifier())\n+                        .all(|p| p.segment().and_then(|s| s.super_token()).is_some());\n+\n+                    // `<_>::$0`\n+                    let is_infer_qualifier = path.qualifier().is_none()\n+                        && matches!(\n+                            path.segment().and_then(|it| it.kind()),\n+                            Some(ast::PathSegmentKind::Type {\n+                                type_ref: Some(ast::Type::InferType(_)),\n+                                trait_ref: None,\n+                            })\n+                        );\n+\n+                    path_ctx.qualified = Qualified::With(PathQualifierCtx {\n+                        path,\n+                        resolution: res,\n+                        is_super_chain,\n+                        use_tree_parent,\n+                        is_infer_qualifier,\n+                    })\n+                };\n             }\n-\n-            let path = path\n-                .segment()\n-                .and_then(|it| find_node_in_file(original_file, &it))\n-                .map(|it| it.parent_path());\n-            path_ctx.qualifier = path.map(|path| {\n-                let res = sema.resolve_path(&path);\n-                let is_super_chain = iter::successors(Some(path.clone()), |p| p.qualifier())\n-                    .all(|p| p.segment().and_then(|s| s.super_token()).is_some());\n-\n-                // `<_>::$0`\n-                let is_infer_qualifier = path.qualifier().is_none()\n-                    && matches!(\n-                        path.segment().and_then(|it| it.kind()),\n-                        Some(ast::PathSegmentKind::Type {\n-                            type_ref: Some(ast::Type::InferType(_)),\n-                            trait_ref: None,\n-                        })\n-                    );\n-\n-                PathQualifierCtx {\n-                    path,\n-                    resolution: res,\n-                    is_super_chain,\n-                    use_tree_parent,\n-                    is_infer_qualifier,\n-                }\n-            });\n         } else if let Some(segment) = path.segment() {\n             if segment.coloncolon_token().is_some() {\n-                path_ctx.is_absolute_path = true;\n+                path_ctx.qualified = Qualified::Absolute;\n             }\n         }\n "}]}