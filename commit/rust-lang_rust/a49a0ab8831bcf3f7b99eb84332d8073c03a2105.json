{"sha": "a49a0ab8831bcf3f7b99eb84332d8073c03a2105", "node_id": "C_kwDOAAsO6NoAKGE0OWEwYWI4ODMxYmNmM2Y3Yjk5ZWI4NDMzMmQ4MDczYzAzYTIxMDU", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-20T23:04:15Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-21T15:46:01Z"}, "message": "Add 'remove this semicolon'", "tree": {"sha": "57d9b88c96bbe60aeb1cc92a4f76a95035b4a356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57d9b88c96bbe60aeb1cc92a4f76a95035b4a356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a49a0ab8831bcf3f7b99eb84332d8073c03a2105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a49a0ab8831bcf3f7b99eb84332d8073c03a2105", "html_url": "https://github.com/rust-lang/rust/commit/a49a0ab8831bcf3f7b99eb84332d8073c03a2105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a49a0ab8831bcf3f7b99eb84332d8073c03a2105/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0689fdb650b43c7a5dc3bb27655b2df6879d8387", "url": "https://api.github.com/repos/rust-lang/rust/commits/0689fdb650b43c7a5dc3bb27655b2df6879d8387", "html_url": "https://github.com/rust-lang/rust/commit/0689fdb650b43c7a5dc3bb27655b2df6879d8387"}], "stats": {"total": 118, "additions": 40, "deletions": 78}, "files": [{"sha": "141fbc42fa56b5a78cf069dfbb2b86816287f37d", "filename": "crates/ide_diagnostics/src/handlers/remove_this_semicolon.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0689fdb650b43c7a5dc3bb27655b2df6879d8387/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0689fdb650b43c7a5dc3bb27655b2df6879d8387/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs?ref=0689fdb650b43c7a5dc3bb27655b2df6879d8387", "patch": "@@ -1,76 +0,0 @@\n-use ide_db::{\n-    base_db::{FileLoader, FileRange},\n-    source_change::SourceChange,\n-};\n-use syntax::{TextRange, TextSize};\n-use text_edit::TextEdit;\n-\n-use crate::{fix, Assist, Diagnostic, DiagnosticsContext};\n-\n-// Diagnostic: remove-this-semicolon\n-//\n-// This diagnostic is triggered when there's an erroneous `;` at the end of the block.\n-pub(crate) fn remove_this_semicolon(\n-    ctx: &DiagnosticsContext<'_>,\n-    d: &hir::RemoveThisSemicolon,\n-) -> Diagnostic {\n-    Diagnostic::new(\n-        \"remove-this-semicolon\",\n-        \"remove this semicolon\",\n-        semicolon_range(ctx, d).unwrap_or_else(|it| it).range,\n-    )\n-    .with_fixes(fixes(ctx, d))\n-}\n-\n-fn semicolon_range(\n-    ctx: &DiagnosticsContext<'_>,\n-    d: &hir::RemoveThisSemicolon,\n-) -> Result<FileRange, FileRange> {\n-    let expr_range = ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into()));\n-    let file_text = ctx.sema.db.file_text(expr_range.file_id);\n-    let range_end: usize = expr_range.range.end().into();\n-    // FIXME: This doesn't handle whitespace and comments, but handling those in\n-    // the presence of macros might prove tricky...\n-    if file_text[range_end..].starts_with(';') {\n-        Ok(FileRange {\n-            file_id: expr_range.file_id,\n-            range: TextRange::at(expr_range.range.end(), TextSize::of(';')),\n-        })\n-    } else {\n-        Err(expr_range)\n-    }\n-}\n-\n-fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::RemoveThisSemicolon) -> Option<Vec<Assist>> {\n-    let semicolon_range = semicolon_range(ctx, d).ok()?;\n-\n-    let edit = TextEdit::delete(semicolon_range.range);\n-    let source_change = SourceChange::from_text_edit(semicolon_range.file_id, edit);\n-\n-    Some(vec![fix(\n-        \"remove_semicolon\",\n-        \"Remove this semicolon\",\n-        source_change,\n-        semicolon_range.range,\n-    )])\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_diagnostics, check_fix};\n-\n-    #[test]\n-    fn missing_semicolon() {\n-        check_diagnostics(\n-            r#\"\n-fn test() -> i32 { 123; }\n-                    //^ \ud83d\udca1 error: remove this semicolon\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn remove_semicolon() {\n-        check_fix(r#\"fn f() -> i32 { 92$0; }\"#, r#\"fn f() -> i32 { 92 }\"#);\n-    }\n-}"}, {"sha": "2c9f7839cee9e0e28f95cf31853c246d4c619071", "filename": "crates/ide_diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a49a0ab8831bcf3f7b99eb84332d8073c03a2105/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49a0ab8831bcf3f7b99eb84332d8073c03a2105/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=a49a0ab8831bcf3f7b99eb84332d8073c03a2105", "patch": "@@ -1,9 +1,14 @@\n use hir::{db::AstDatabase, HirDisplay, Type, TypeInfo};\n use ide_db::{\n-    famous_defs::FamousDefs, source_change::SourceChange,\n+    base_db::{FileLoader, FileRange},\n+    famous_defs::FamousDefs,\n+    source_change::SourceChange,\n     syntax_helpers::node_ext::for_each_tail_expr,\n };\n-use syntax::{AstNode, TextRange};\n+use syntax::{\n+    ast::{BlockExpr, ExprStmt},\n+    AstNode, TextRange, TextSize,\n+};\n use text_edit::TextEdit;\n \n use crate::{fix, Assist, Diagnostic, DiagnosticsContext};\n@@ -34,6 +39,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Option<Vec<Assi\n \n     add_reference(ctx, d, &mut fixes);\n     add_missing_ok_or_some(ctx, d, &mut fixes);\n+    remove_semicolon(ctx, d, &mut fixes);\n \n     if fixes.is_empty() {\n         None\n@@ -110,6 +116,33 @@ fn add_missing_ok_or_some(\n     Some(())\n }\n \n+fn remove_semicolon(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::TypeMismatch,\n+    acc: &mut Vec<Assist>,\n+) -> Option<()> {\n+    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n+    let expr = d.expr.value.to_node(&root);\n+    if !d.actual.is_unit() {\n+        return None;\n+    }\n+    let block = BlockExpr::cast(expr.syntax().clone())?;\n+    let expr_before_semi =\n+        block.statements().last().and_then(|s| ExprStmt::cast(s.syntax().clone()))?;\n+    let type_before_semi = ctx.sema.type_of_expr(&expr_before_semi.expr()?)?.original();\n+    if !type_before_semi.could_coerce_to(ctx.sema.db, &d.expected) {\n+        return None;\n+    }\n+    let semicolon_range = expr_before_semi.semicolon_token()?.text_range();\n+\n+    let edit = TextEdit::delete(semicolon_range);\n+    let source_change =\n+        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n+\n+    acc.push(fix(\"remove_semicolon\", \"Remove this semicolon\", source_change, semicolon_range));\n+    Some(())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_diagnostics, check_fix, check_no_fix};\n@@ -437,4 +470,9 @@ fn foo() -> SomeOtherEnum { 0$0 }\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn remove_semicolon() {\n+        check_fix(r#\"fn f() -> i32 { 92$0; }\"#, r#\"fn f() -> i32 { 92 }\"#);\n+    }\n }"}]}