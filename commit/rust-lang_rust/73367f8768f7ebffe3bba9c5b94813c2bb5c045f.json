{"sha": "73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "node_id": "C_kwDOAAsO6NoAKDczMzY3Zjg3NjhmN2ViZmZlM2JiYTljNWI5NDgxM2MyYmI1YzA0NWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-18T19:31:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-18T19:31:10Z"}, "message": "Auto merge of #8381 - Jarcho:cast_possible_truncation_542, r=Manishearth\n\nLint enum-to-int casts with `cast_possible_truncation`\n\nfixes: #542\n\n~~This will not lint casting a specific variant to an integer. That really should be a new lint as it's definitely a truncation (other than `isize`/`usize` values).~~\n\nchangelog: Lint enum-to-int casts with `cast_possible_truncation`\nchangelog: New lint `cast_enum_truncation`", "tree": {"sha": "ed76f88e3cd682124bac8fba6897f1173256c7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed76f88e3cd682124bac8fba6897f1173256c7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "html_url": "https://github.com/rust-lang/rust/commit/73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f3c17593e653e30e8835500319ef412855fa34", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f3c17593e653e30e8835500319ef412855fa34", "html_url": "https://github.com/rust-lang/rust/commit/02f3c17593e653e30e8835500319ef412855fa34"}, {"sha": "88ecdd0804be7c5643eafa4e1960f5e0176903b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ecdd0804be7c5643eafa4e1960f5e0176903b3", "html_url": "https://github.com/rust-lang/rust/commit/88ecdd0804be7c5643eafa4e1960f5e0176903b3"}], "stats": {"total": 437, "additions": 396, "deletions": 41}, "files": [{"sha": "1b52a6fcd05e979540ef2b559058779a8df04fef", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -3068,6 +3068,7 @@ Released 2018-09-13\n [`bytes_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth\n [`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\n [`case_sensitive_file_extension_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons\n+[`cast_enum_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_truncation\n [`cast_lossless`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n [`cast_possible_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\n [`cast_possible_wrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap"}, {"sha": "9b189ea1ef8fb102396b7cefa76829bcff426ee5", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -1,12 +1,15 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::expr_or_init;\n-use clippy_utils::ty::is_isize_or_usize;\n+use clippy_utils::ty::{get_discriminant_value, is_isize_or_usize};\n+use rustc_ast::ast;\n+use rustc_attr::IntType;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n-use super::{utils, CAST_POSSIBLE_TRUNCATION};\n+use super::{utils, CAST_ENUM_TRUNCATION, CAST_POSSIBLE_TRUNCATION};\n \n fn constant_int(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<u128> {\n     if let Some((Constant::Int(c), _)) = constant(cx, cx.typeck_results(), expr) {\n@@ -75,8 +78,8 @@ fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: b\n }\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n-    let msg = match (cast_from.is_integral(), cast_to.is_integral()) {\n-        (true, true) => {\n+    let msg = match (cast_from.kind(), cast_to.is_integral()) {\n+        (ty::Int(_) | ty::Uint(_), true) => {\n             let from_nbits = apply_reductions(\n                 cx,\n                 utils::int_ty_to_nbits(cast_from, cx.tcx),\n@@ -108,19 +111,60 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n             )\n         },\n \n-        (false, true) => {\n-            format!(\"casting `{}` to `{}` may truncate the value\", cast_from, cast_to)\n-        },\n-\n-        (_, _) => {\n-            if matches!(cast_from.kind(), &ty::Float(FloatTy::F64))\n-                && matches!(cast_to.kind(), &ty::Float(FloatTy::F32))\n+        (ty::Adt(def, _), true) if def.is_enum() => {\n+            let (from_nbits, variant) = if let ExprKind::Path(p) = &cast_expr.kind\n+                && let Res::Def(DefKind::Ctor(..), id) = cx.qpath_res(p, cast_expr.hir_id)\n             {\n-                \"casting `f64` to `f32` may truncate the value\".to_string()\n+                let i = def.variant_index_with_ctor_id(id);\n+                let variant = &def.variants[i];\n+                let nbits = utils::enum_value_nbits(get_discriminant_value(cx.tcx, def, i));\n+                (nbits, Some(variant))\n             } else {\n+                (utils::enum_ty_to_nbits(def, cx.tcx), None)\n+            };\n+            let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n+\n+            let cast_from_ptr_size = def.repr.int.map_or(true, |ty| {\n+                matches!(\n+                    ty,\n+                    IntType::SignedInt(ast::IntTy::Isize) | IntType::UnsignedInt(ast::UintTy::Usize)\n+                )\n+            });\n+            let suffix = match (cast_from_ptr_size, is_isize_or_usize(cast_to)) {\n+                (false, false) if from_nbits > to_nbits => \"\",\n+                (true, false) if from_nbits > to_nbits => \"\",\n+                (false, true) if from_nbits > 64 => \"\",\n+                (false, true) if from_nbits > 32 => \" on targets with 32-bit wide pointers\",\n+                _ => return,\n+            };\n+\n+            if let Some(variant) = variant {\n+                span_lint(\n+                    cx,\n+                    CAST_ENUM_TRUNCATION,\n+                    expr.span,\n+                    &format!(\n+                        \"casting `{}::{}` to `{}` will truncate the value{}\",\n+                        cast_from, variant.name, cast_to, suffix,\n+                    ),\n+                );\n                 return;\n             }\n+            format!(\n+                \"casting `{}` to `{}` may truncate the value{}\",\n+                cast_from, cast_to, suffix,\n+            )\n         },\n+\n+        (ty::Float(_), true) => {\n+            format!(\"casting `{}` to `{}` may truncate the value\", cast_from, cast_to)\n+        },\n+\n+        (ty::Float(FloatTy::F64), false) if matches!(cast_to.kind(), &ty::Float(FloatTy::F32)) => {\n+            \"casting `f64` to `f32` may truncate the value\".to_string()\n+        },\n+\n+        _ => return,\n     };\n \n     span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg);"}, {"sha": "f2077c569c04121a1232d7d3b483dc927f2069e2", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -390,6 +390,25 @@ declare_clippy_lint! {\n     \"casting using `as` from and to raw pointers that doesn't change its mutability, where `pointer::cast` could take the place of `as`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for casts from an enum type to an integral type which will definitely truncate the\n+    /// value.\n+    ///\n+    /// ### Why is this bad?\n+    /// The resulting integral value will not match the value of the variant it came from.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// enum E { X = 256 };\n+    /// let _ = E::X as u8;\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub CAST_ENUM_TRUNCATION,\n+    suspicious,\n+    \"casts from an enum type to an integral type which will truncate the value\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -415,6 +434,7 @@ impl_lint_pass!(Casts => [\n     FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n     CHAR_LIT_AS_U8,\n     PTR_AS_PTR,\n+    CAST_ENUM_TRUNCATION,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -445,13 +465,12 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n \n             if cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n+                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n                 if cast_from.is_numeric() {\n-                    cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                     cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n                 }\n-\n                 cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n             }\n         }"}, {"sha": "bbed766c47a8526f45c9ec90fd34b3b6b57b18e9", "filename": "clippy_lints/src/casts/utils.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Futils.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -1,4 +1,5 @@\n-use rustc_middle::ty::{self, IntTy, Ty, TyCtxt, UintTy};\n+use clippy_utils::ty::{read_explicit_enum_value, EnumValue};\n+use rustc_middle::ty::{self, AdtDef, IntTy, Ty, TyCtxt, UintTy, VariantDiscr};\n \n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n@@ -23,3 +24,52 @@ pub(super) fn int_ty_to_nbits(typ: Ty<'_>, tcx: TyCtxt<'_>) -> u64 {\n         _ => 0,\n     }\n }\n+\n+pub(super) fn enum_value_nbits(value: EnumValue) -> u64 {\n+    match value {\n+        EnumValue::Unsigned(x) => 128 - x.leading_zeros(),\n+        EnumValue::Signed(x) if x < 0 => 128 - (-(x + 1)).leading_zeros() + 1,\n+        EnumValue::Signed(x) => 128 - x.leading_zeros(),\n+    }\n+    .into()\n+}\n+\n+pub(super) fn enum_ty_to_nbits(adt: &AdtDef, tcx: TyCtxt<'_>) -> u64 {\n+    let mut explicit = 0i128;\n+    let (start, end) = adt\n+        .variants\n+        .iter()\n+        .fold((0, i128::MIN), |(start, end), variant| match variant.discr {\n+            VariantDiscr::Relative(x) => match explicit.checked_add(i128::from(x)) {\n+                Some(x) => (start, end.max(x)),\n+                None => (i128::MIN, end),\n+            },\n+            VariantDiscr::Explicit(id) => match read_explicit_enum_value(tcx, id) {\n+                Some(EnumValue::Signed(x)) => {\n+                    explicit = x;\n+                    (start.min(x), end.max(x))\n+                },\n+                Some(EnumValue::Unsigned(x)) => match i128::try_from(x) {\n+                    Ok(x) => {\n+                        explicit = x;\n+                        (start, end.max(x))\n+                    },\n+                    Err(_) => (i128::MIN, end),\n+                },\n+                None => (start, end),\n+            },\n+        });\n+\n+    if start > end {\n+        // No variants.\n+        0\n+    } else {\n+        let neg_bits = if start < 0 {\n+            128 - (-(start + 1)).leading_zeros() + 1\n+        } else {\n+            0\n+        };\n+        let pos_bits = if end > 0 { 128 - end.leading_zeros() } else { 0 };\n+        neg_bits.max(pos_bits).into()\n+    }\n+}"}, {"sha": "c6f8470cd7db72cd6531ec12d80552ddf7f1cfd8", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -23,6 +23,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(casts::CAST_REF_TO_MUT),\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::FN_TO_NUMERIC_CAST),"}, {"sha": "75ef1b0a9d511125944d69610376da6e0ac5dad1", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -67,6 +67,7 @@ store.register_lints(&[\n     cargo::REDUNDANT_FEATURE_NAMES,\n     cargo::WILDCARD_DEPENDENCIES,\n     case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    casts::CAST_ENUM_TRUNCATION,\n     casts::CAST_LOSSLESS,\n     casts::CAST_POSSIBLE_TRUNCATION,\n     casts::CAST_POSSIBLE_WRAP,"}, {"sha": "6a8859e19d71d1c15adbe0a77f2522f3ff035cef", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -7,6 +7,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n+    LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),"}, {"sha": "a21a87899aa168689289b78588d7479c9153943a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -25,6 +25,7 @@\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n+extern crate rustc_attr;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;"}, {"sha": "7d74b69906d9dcf78bee4ddc95ab3e3fab0798b7", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -10,12 +10,14 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, TyKind, Unsafety};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, AdtDef, Binder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy,\n+    self, AdtDef, Binder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy, VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n+use rustc_target::abi::{Size, VariantIdx};\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use std::iter;\n@@ -515,3 +517,58 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n         }\n     }\n }\n+\n+#[derive(Clone, Copy)]\n+pub enum EnumValue {\n+    Unsigned(u128),\n+    Signed(i128),\n+}\n+impl core::ops::Add<u32> for EnumValue {\n+    type Output = Self;\n+    fn add(self, n: u32) -> Self::Output {\n+        match self {\n+            Self::Unsigned(x) => Self::Unsigned(x + u128::from(n)),\n+            Self::Signed(x) => Self::Signed(x + i128::from(n)),\n+        }\n+    }\n+}\n+\n+/// Attempts to read the given constant as though it were an an enum value.\n+#[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n+pub fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n+    if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n+        match tcx.type_of(id).kind() {\n+            ty::Int(_) => Some(EnumValue::Signed(match value.size().bytes() {\n+                1 => i128::from(value.assert_bits(Size::from_bytes(1)) as u8 as i8),\n+                2 => i128::from(value.assert_bits(Size::from_bytes(2)) as u16 as i16),\n+                4 => i128::from(value.assert_bits(Size::from_bytes(4)) as u32 as i32),\n+                8 => i128::from(value.assert_bits(Size::from_bytes(8)) as u64 as i64),\n+                16 => value.assert_bits(Size::from_bytes(16)) as i128,\n+                _ => return None,\n+            })),\n+            ty::Uint(_) => Some(EnumValue::Unsigned(match value.size().bytes() {\n+                1 => value.assert_bits(Size::from_bytes(1)),\n+                2 => value.assert_bits(Size::from_bytes(2)),\n+                4 => value.assert_bits(Size::from_bytes(4)),\n+                8 => value.assert_bits(Size::from_bytes(8)),\n+                16 => value.assert_bits(Size::from_bytes(16)),\n+                _ => return None,\n+            })),\n+            _ => None,\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n+/// Gets the value of the given variant.\n+pub fn get_discriminant_value(tcx: TyCtxt<'_>, adt: &'_ AdtDef, i: VariantIdx) -> EnumValue {\n+    let variant = &adt.variants[i];\n+    match variant.discr {\n+        VariantDiscr::Explicit(id) => read_explicit_enum_value(tcx, id).unwrap(),\n+        VariantDiscr::Relative(x) => match adt.variants[(i.as_usize() - x as usize).into()].discr {\n+            VariantDiscr::Explicit(id) => read_explicit_enum_value(tcx, id).unwrap() + x,\n+            VariantDiscr::Relative(_) => EnumValue::Unsigned(x.into()),\n+        },\n+    }\n+}"}, {"sha": "2e31ad3172ee8cef1a5271c27c2fd8367b7d417c", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -1,3 +1,6 @@\n+#![feature(repr128)]\n+#![allow(incomplete_features)]\n+\n #[warn(\n     clippy::cast_precision_loss,\n     clippy::cast_possible_truncation,\n@@ -115,4 +118,137 @@ fn main() {\n     }) as u8;\n     999999u64.clamp(0, 255) as u8;\n     999999u64.clamp(0, 256) as u8; // should still be linted\n+\n+    #[derive(Clone, Copy)]\n+    enum E1 {\n+        A,\n+        B,\n+        C,\n+    }\n+    impl E1 {\n+        fn test(self) {\n+            let _ = self as u8; // Don't lint. `0..=2` fits in u8\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    enum E2 {\n+        A = 255,\n+        B,\n+    }\n+    impl E2 {\n+        fn test(self) {\n+            let _ = self as u8;\n+            let _ = Self::B as u8;\n+            let _ = self as i16; // Don't lint. `255..=256` fits in i16\n+            let _ = Self::A as u8; // Don't lint.\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    enum E3 {\n+        A = -1,\n+        B,\n+        C = 50,\n+    }\n+    impl E3 {\n+        fn test(self) {\n+            let _ = self as i8; // Don't lint. `-1..=50` fits in i8\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    enum E4 {\n+        A = -128,\n+        B,\n+    }\n+    impl E4 {\n+        fn test(self) {\n+            let _ = self as i8; // Don't lint. `-128..=-127` fits in i8\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    enum E5 {\n+        A = -129,\n+        B = 127,\n+    }\n+    impl E5 {\n+        fn test(self) {\n+            let _ = self as i8;\n+            let _ = Self::A as i8;\n+            let _ = self as i16; // Don't lint. `-129..=127` fits in i16\n+            let _ = Self::B as u8; // Don't lint.\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    #[repr(u32)]\n+    enum E6 {\n+        A = u16::MAX as u32,\n+        B,\n+    }\n+    impl E6 {\n+        fn test(self) {\n+            let _ = self as i16;\n+            let _ = Self::A as u16; // Don't lint. `2^16-1` fits in u16\n+            let _ = self as u32; // Don't lint. `2^16-1..=2^16` fits in u32\n+            let _ = Self::A as u16; // Don't lint.\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    #[repr(u64)]\n+    enum E7 {\n+        A = u32::MAX as u64,\n+        B,\n+    }\n+    impl E7 {\n+        fn test(self) {\n+            let _ = self as usize;\n+            let _ = Self::A as usize; // Don't lint.\n+            let _ = self as u64; // Don't lint. `2^32-1..=2^32` fits in u64\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    #[repr(i128)]\n+    enum E8 {\n+        A = i128::MIN,\n+        B,\n+        C = 0,\n+        D = i128::MAX,\n+    }\n+    impl E8 {\n+        fn test(self) {\n+            let _ = self as i128; // Don't lint. `-(2^127)..=2^127-1` fits it i128\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    #[repr(u128)]\n+    enum E9 {\n+        A,\n+        B = u128::MAX,\n+    }\n+    impl E9 {\n+        fn test(self) {\n+            let _ = Self::A as u8; // Don't lint.\n+            let _ = self as u128; // Don't lint. `0..=2^128-1` fits in u128\n+        }\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    #[repr(usize)]\n+    enum E10 {\n+        A,\n+        B = u32::MAX as usize,\n+    }\n+    impl E10 {\n+        fn test(self) {\n+            let _ = self as u16;\n+            let _ = Self::B as u32; // Don't lint.\n+            let _ = self as u64; // Don't lint.\n+        }\n+    }\n }"}, {"sha": "7a68c0984f140dda78c8c6d5b927b6867b76beac", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 69, "deletions": 25, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73367f8768f7ebffe3bba9c5b94813c2bb5c045f/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=73367f8768f7ebffe3bba9c5b94813c2bb5c045f", "patch": "@@ -1,154 +1,198 @@\n error: casting `i32` to `f32` causes a loss of precision (`i32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:11:5\n+  --> $DIR/cast.rs:14:5\n    |\n LL |     x0 as f32;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n error: casting `i64` to `f32` causes a loss of precision (`i64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:13:5\n+  --> $DIR/cast.rs:16:5\n    |\n LL |     x1 as f32;\n    |     ^^^^^^^^^\n \n error: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:14:5\n+  --> $DIR/cast.rs:17:5\n    |\n LL |     x1 as f64;\n    |     ^^^^^^^^^\n \n error: casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:16:5\n+  --> $DIR/cast.rs:19:5\n    |\n LL |     x2 as f32;\n    |     ^^^^^^^^^\n \n error: casting `u64` to `f32` causes a loss of precision (`u64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:18:5\n+  --> $DIR/cast.rs:21:5\n    |\n LL |     x3 as f32;\n    |     ^^^^^^^^^\n \n error: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:19:5\n+  --> $DIR/cast.rs:22:5\n    |\n LL |     x3 as f64;\n    |     ^^^^^^^^^\n \n error: casting `f32` to `i32` may truncate the value\n-  --> $DIR/cast.rs:21:5\n+  --> $DIR/cast.rs:24:5\n    |\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n error: casting `f32` to `u32` may truncate the value\n-  --> $DIR/cast.rs:22:5\n+  --> $DIR/cast.rs:25:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting `f32` to `u32` may lose the sign of the value\n-  --> $DIR/cast.rs:22:5\n+  --> $DIR/cast.rs:25:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-sign-loss` implied by `-D warnings`\n \n error: casting `f64` to `f32` may truncate the value\n-  --> $DIR/cast.rs:23:5\n+  --> $DIR/cast.rs:26:5\n    |\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting `i32` to `i8` may truncate the value\n-  --> $DIR/cast.rs:24:5\n+  --> $DIR/cast.rs:27:5\n    |\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n \n error: casting `i32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:25:5\n+  --> $DIR/cast.rs:28:5\n    |\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n \n error: casting `f64` to `isize` may truncate the value\n-  --> $DIR/cast.rs:26:5\n+  --> $DIR/cast.rs:29:5\n    |\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting `f64` to `usize` may truncate the value\n-  --> $DIR/cast.rs:27:5\n+  --> $DIR/cast.rs:30:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting `f64` to `usize` may lose the sign of the value\n-  --> $DIR/cast.rs:27:5\n+  --> $DIR/cast.rs:30:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting `u8` to `i8` may wrap around the value\n-  --> $DIR/cast.rs:29:5\n+  --> $DIR/cast.rs:32:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting `u16` to `i16` may wrap around the value\n-  --> $DIR/cast.rs:30:5\n+  --> $DIR/cast.rs:33:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting `u32` to `i32` may wrap around the value\n-  --> $DIR/cast.rs:31:5\n+  --> $DIR/cast.rs:34:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting `u64` to `i64` may wrap around the value\n-  --> $DIR/cast.rs:32:5\n+  --> $DIR/cast.rs:35:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting `usize` to `isize` may wrap around the value\n-  --> $DIR/cast.rs:33:5\n+  --> $DIR/cast.rs:36:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting `i32` to `u32` may lose the sign of the value\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:39:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n error: casting `isize` to `usize` may lose the sign of the value\n-  --> $DIR/cast.rs:38:5\n+  --> $DIR/cast.rs:41:5\n    |\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n error: casting `i64` to `i8` may truncate the value\n-  --> $DIR/cast.rs:105:5\n+  --> $DIR/cast.rs:108:5\n    |\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: casting `u64` to `u8` may truncate the value\n-  --> $DIR/cast.rs:117:5\n+  --> $DIR/cast.rs:120:5\n    |\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 24 previous errors\n+error: casting `main::E2` to `u8` may truncate the value\n+  --> $DIR/cast.rs:141:21\n+   |\n+LL |             let _ = self as u8;\n+   |                     ^^^^^^^^^^\n+\n+error: casting `main::E2::B` to `u8` will truncate the value\n+  --> $DIR/cast.rs:142:21\n+   |\n+LL |             let _ = Self::B as u8;\n+   |                     ^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`\n+\n+error: casting `main::E5` to `i8` may truncate the value\n+  --> $DIR/cast.rs:178:21\n+   |\n+LL |             let _ = self as i8;\n+   |                     ^^^^^^^^^^\n+\n+error: casting `main::E5::A` to `i8` will truncate the value\n+  --> $DIR/cast.rs:179:21\n+   |\n+LL |             let _ = Self::A as i8;\n+   |                     ^^^^^^^^^^^^^\n+\n+error: casting `main::E6` to `i16` may truncate the value\n+  --> $DIR/cast.rs:193:21\n+   |\n+LL |             let _ = self as i16;\n+   |                     ^^^^^^^^^^^\n+\n+error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:208:21\n+   |\n+LL |             let _ = self as usize;\n+   |                     ^^^^^^^^^^^^^\n+\n+error: casting `main::E10` to `u16` may truncate the value\n+  --> $DIR/cast.rs:249:21\n+   |\n+LL |             let _ = self as u16;\n+   |                     ^^^^^^^^^^^\n+\n+error: aborting due to 31 previous errors\n "}]}