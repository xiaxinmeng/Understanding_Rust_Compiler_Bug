{"sha": "2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTVlY2Q3ZTc5ZDNkYmNhYWEyZDVjYjY0MWQ5MjlhYjdhZmQ3NWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T21:50:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T21:50:27Z"}, "message": "internal: cleanup adt parsing", "tree": {"sha": "42ef2f3b70c3d6ffcba00416821e8500f247e129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ef2f3b70c3d6ffcba00416821e8500f247e129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "html_url": "https://github.com/rust-lang/rust/commit/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d890c767c4618b2ca4e8b42dae87b8ca5ebbba23", "url": "https://api.github.com/repos/rust-lang/rust/commits/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23", "html_url": "https://github.com/rust-lang/rust/commit/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23"}], "stats": {"total": 228, "additions": 69, "deletions": 159}, "files": [{"sha": "e870de9de041c45f0770a6030635f2ebfa54e3d0", "filename": "crates/parser/src/grammar/items/adt.rs", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "patch": "@@ -22,9 +22,7 @@ fn struct_or_union(p: &mut Parser, m: Marker, is_struct: bool) {\n         T![where] => {\n             type_params::opt_where_clause(p);\n             match p.current() {\n-                T![;] => {\n-                    p.bump(T![;]);\n-                }\n+                T![;] => p.bump(T![;]),\n                 T!['{'] => record_field_list(p),\n                 _ => {\n                     //FIXME: special case `(` error message\n@@ -53,7 +51,6 @@ fn struct_or_union(p: &mut Parser, m: Marker, is_struct: bool) {\n }\n \n pub(super) fn enum_(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![enum]));\n     p.bump(T![enum]);\n     name_r(p, ITEM_RECOVERY_SET);\n     type_params::opt_generic_param_list(p);\n@@ -75,7 +72,16 @@ pub(crate) fn variant_list(p: &mut Parser) {\n             error_block(p, \"expected enum variant\");\n             continue;\n         }\n-        let var = p.start();\n+        variant(p);\n+        if !p.at(T!['}']) {\n+            p.expect(T![,]);\n+        }\n+    }\n+    p.expect(T!['}']);\n+    m.complete(p, VARIANT_LIST);\n+\n+    fn variant(p: &mut Parser) {\n+        let m = p.start();\n         attributes::outer_attrs(p);\n         if p.at(IDENT) {\n             name(p);\n@@ -90,17 +96,12 @@ pub(crate) fn variant_list(p: &mut Parser) {\n             if p.eat(T![=]) {\n                 expressions::expr(p);\n             }\n-            var.complete(p, VARIANT);\n+            m.complete(p, VARIANT);\n         } else {\n-            var.abandon(p);\n+            m.abandon(p);\n             p.err_and_bump(\"expected enum variant\");\n         }\n-        if !p.at(T!['}']) {\n-            p.expect(T![,]);\n-        }\n     }\n-    p.expect(T!['}']);\n-    m.complete(p, VARIANT_LIST);\n }\n \n // test record_field_list\n@@ -114,21 +115,18 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n             error_block(p, \"expected field\");\n             continue;\n         }\n-        record_field_def(p);\n+        record_field(p);\n         if !p.at(T!['}']) {\n             p.expect(T![,]);\n         }\n     }\n     p.expect(T!['}']);\n     m.complete(p, RECORD_FIELD_LIST);\n \n-    fn record_field_def(p: &mut Parser) {\n+    fn record_field(p: &mut Parser) {\n         let m = p.start();\n         // test record_field_attrs\n-        // struct S {\n-        //     #[serde(with = \"url_serde\")]\n-        //     pub uri: Uri,\n-        // }\n+        // struct S { #[attr] f: f32 }\n         attributes::outer_attrs(p);\n         opt_visibility(p);\n         if p.at(IDENT) {\n@@ -146,20 +144,11 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n fn tuple_field_list(p: &mut Parser) {\n     assert!(p.at(T!['(']));\n     let m = p.start();\n-    if !p.expect(T!['(']) {\n-        return;\n-    }\n+    p.bump(T!['(']);\n     while !p.at(T![')']) && !p.at(EOF) {\n         let m = p.start();\n         // test tuple_field_attrs\n-        // struct S (\n-        //     #[serde(with = \"url_serde\")]\n-        //     pub Uri,\n-        // );\n-        //\n-        // enum S {\n-        //     Uri(#[serde(with = \"url_serde\")] Uri),\n-        // }\n+        // struct S (#[attr] f32);\n         attributes::outer_attrs(p);\n         opt_visibility(p);\n         if !p.at_ts(types::TYPE_FIRST) {"}, {"sha": "453bef315849dcda25619f20b20879c207fe20f6", "filename": "crates/syntax/test_data/parser/inline/ok/0054_record_field_attrs.rast", "status": "modified", "additions": 27, "deletions": 39, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast?ref=2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "patch": "@@ -1,45 +1,33 @@\n-SOURCE_FILE@0..64\n-  STRUCT@0..63\n+SOURCE_FILE@0..28\n+  STRUCT@0..27\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_LIST@9..63\n+    RECORD_FIELD_LIST@9..27\n       L_CURLY@9..10 \"{\"\n-      WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD@15..60\n-        ATTR@15..43\n-          POUND@15..16 \"#\"\n-          L_BRACK@16..17 \"[\"\n-          META@17..42\n-            PATH@17..22\n-              PATH_SEGMENT@17..22\n-                NAME_REF@17..22\n-                  IDENT@17..22 \"serde\"\n-            TOKEN_TREE@22..42\n-              L_PAREN@22..23 \"(\"\n-              IDENT@23..27 \"with\"\n-              WHITESPACE@27..28 \" \"\n-              EQ@28..29 \"=\"\n-              WHITESPACE@29..30 \" \"\n-              STRING@30..41 \"\\\"url_serde\\\"\"\n-              R_PAREN@41..42 \")\"\n-          R_BRACK@42..43 \"]\"\n-        WHITESPACE@43..48 \"\\n    \"\n-        VISIBILITY@48..51\n-          PUB_KW@48..51 \"pub\"\n-        WHITESPACE@51..52 \" \"\n-        NAME@52..55\n-          IDENT@52..55 \"uri\"\n-        COLON@55..56 \":\"\n-        WHITESPACE@56..57 \" \"\n-        PATH_TYPE@57..60\n-          PATH@57..60\n-            PATH_SEGMENT@57..60\n-              NAME_REF@57..60\n-                IDENT@57..60 \"Uri\"\n-      COMMA@60..61 \",\"\n-      WHITESPACE@61..62 \"\\n\"\n-      R_CURLY@62..63 \"}\"\n-  WHITESPACE@63..64 \"\\n\"\n+      WHITESPACE@10..11 \" \"\n+      RECORD_FIELD@11..25\n+        ATTR@11..18\n+          POUND@11..12 \"#\"\n+          L_BRACK@12..13 \"[\"\n+          META@13..17\n+            PATH@13..17\n+              PATH_SEGMENT@13..17\n+                NAME_REF@13..17\n+                  IDENT@13..17 \"attr\"\n+          R_BRACK@17..18 \"]\"\n+        WHITESPACE@18..19 \" \"\n+        NAME@19..20\n+          IDENT@19..20 \"f\"\n+        COLON@20..21 \":\"\n+        WHITESPACE@21..22 \" \"\n+        PATH_TYPE@22..25\n+          PATH@22..25\n+            PATH_SEGMENT@22..25\n+              NAME_REF@22..25\n+                IDENT@22..25 \"f32\"\n+      WHITESPACE@25..26 \" \"\n+      R_CURLY@26..27 \"}\"\n+  WHITESPACE@27..28 \"\\n\""}, {"sha": "d7f0b4382dac61f6019d3a614788a7d8703f40fa", "filename": "crates/syntax/test_data/parser/inline/ok/0054_record_field_attrs.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rs?ref=2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "patch": "@@ -1,4 +1 @@\n-struct S {\n-    #[serde(with = \"url_serde\")]\n-    pub uri: Uri,\n-}\n+struct S { #[attr] f: f32 }"}, {"sha": "9a0bcdc18e3d404533db01111ed95eec1af8d889", "filename": "crates/syntax/test_data/parser/inline/ok/0115_tuple_field_attrs.rast", "status": "modified", "additions": 22, "deletions": 79, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast?ref=2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "patch": "@@ -1,85 +1,28 @@\n-SOURCE_FILE@0..115\n-  STRUCT@0..59\n+SOURCE_FILE@0..24\n+  STRUCT@0..23\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    TUPLE_FIELD_LIST@9..58\n+    TUPLE_FIELD_LIST@9..22\n       L_PAREN@9..10 \"(\"\n-      WHITESPACE@10..15 \"\\n    \"\n-      TUPLE_FIELD@15..55\n-        ATTR@15..43\n-          POUND@15..16 \"#\"\n-          L_BRACK@16..17 \"[\"\n-          META@17..42\n-            PATH@17..22\n-              PATH_SEGMENT@17..22\n-                NAME_REF@17..22\n-                  IDENT@17..22 \"serde\"\n-            TOKEN_TREE@22..42\n-              L_PAREN@22..23 \"(\"\n-              IDENT@23..27 \"with\"\n-              WHITESPACE@27..28 \" \"\n-              EQ@28..29 \"=\"\n-              WHITESPACE@29..30 \" \"\n-              STRING@30..41 \"\\\"url_serde\\\"\"\n-              R_PAREN@41..42 \")\"\n-          R_BRACK@42..43 \"]\"\n-        WHITESPACE@43..48 \"\\n    \"\n-        VISIBILITY@48..51\n-          PUB_KW@48..51 \"pub\"\n-        WHITESPACE@51..52 \" \"\n-        PATH_TYPE@52..55\n-          PATH@52..55\n-            PATH_SEGMENT@52..55\n-              NAME_REF@52..55\n-                IDENT@52..55 \"Uri\"\n-      COMMA@55..56 \",\"\n-      WHITESPACE@56..57 \"\\n\"\n-      R_PAREN@57..58 \")\"\n-    SEMICOLON@58..59 \";\"\n-  WHITESPACE@59..61 \"\\n\\n\"\n-  ENUM@61..114\n-    ENUM_KW@61..65 \"enum\"\n-    WHITESPACE@65..66 \" \"\n-    NAME@66..67\n-      IDENT@66..67 \"S\"\n-    WHITESPACE@67..68 \" \"\n-    VARIANT_LIST@68..114\n-      L_CURLY@68..69 \"{\"\n-      WHITESPACE@69..74 \"\\n    \"\n-      VARIANT@74..111\n-        NAME@74..77\n-          IDENT@74..77 \"Uri\"\n-        TUPLE_FIELD_LIST@77..111\n-          L_PAREN@77..78 \"(\"\n-          TUPLE_FIELD@78..110\n-            ATTR@78..106\n-              POUND@78..79 \"#\"\n-              L_BRACK@79..80 \"[\"\n-              META@80..105\n-                PATH@80..85\n-                  PATH_SEGMENT@80..85\n-                    NAME_REF@80..85\n-                      IDENT@80..85 \"serde\"\n-                TOKEN_TREE@85..105\n-                  L_PAREN@85..86 \"(\"\n-                  IDENT@86..90 \"with\"\n-                  WHITESPACE@90..91 \" \"\n-                  EQ@91..92 \"=\"\n-                  WHITESPACE@92..93 \" \"\n-                  STRING@93..104 \"\\\"url_serde\\\"\"\n-                  R_PAREN@104..105 \")\"\n-              R_BRACK@105..106 \"]\"\n-            WHITESPACE@106..107 \" \"\n-            PATH_TYPE@107..110\n-              PATH@107..110\n-                PATH_SEGMENT@107..110\n-                  NAME_REF@107..110\n-                    IDENT@107..110 \"Uri\"\n-          R_PAREN@110..111 \")\"\n-      COMMA@111..112 \",\"\n-      WHITESPACE@112..113 \"\\n\"\n-      R_CURLY@113..114 \"}\"\n-  WHITESPACE@114..115 \"\\n\"\n+      TUPLE_FIELD@10..21\n+        ATTR@10..17\n+          POUND@10..11 \"#\"\n+          L_BRACK@11..12 \"[\"\n+          META@12..16\n+            PATH@12..16\n+              PATH_SEGMENT@12..16\n+                NAME_REF@12..16\n+                  IDENT@12..16 \"attr\"\n+          R_BRACK@16..17 \"]\"\n+        WHITESPACE@17..18 \" \"\n+        PATH_TYPE@18..21\n+          PATH@18..21\n+            PATH_SEGMENT@18..21\n+              NAME_REF@18..21\n+                IDENT@18..21 \"f32\"\n+      R_PAREN@21..22 \")\"\n+    SEMICOLON@22..23 \";\"\n+  WHITESPACE@23..24 \"\\n\""}, {"sha": "648ffe5654810ae5e0b1f59240a677759a319f3c", "filename": "crates/syntax/test_data/parser/inline/ok/0115_tuple_field_attrs.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rs?ref=2195ecd7e79d3dbcaaa2d5cb641d929ab7afd75c", "patch": "@@ -1,8 +1 @@\n-struct S (\n-    #[serde(with = \"url_serde\")]\n-    pub Uri,\n-);\n-\n-enum S {\n-    Uri(#[serde(with = \"url_serde\")] Uri),\n-}\n+struct S (#[attr] f32);"}]}