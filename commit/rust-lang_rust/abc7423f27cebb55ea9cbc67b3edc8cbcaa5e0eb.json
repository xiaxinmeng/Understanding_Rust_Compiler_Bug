{"sha": "abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYzc0MjNmMjdjZWJiNTVlYTljYmM2N2IzZWRjOGNiY2FhNWUwZWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-25T15:15:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-25T15:15:36Z"}, "message": "Rollup merge of #62091 - ljedrz:hiridification_almost_there, r=Zoxc\n\nHirIdification: almost there\n\nI'm beginning to run out of stuff to HirIdify :wink:.\n\nThis time I targeted mainly `hir::map::{find, get_parent_node}`, but a few other bits got changed too.\n\nr? @Zoxc", "tree": {"sha": "a9456be8ebd20d834fb93d7f8d67c394f331b1ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9456be8ebd20d834fb93d7f8d67c394f331b1ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdEjqYCRBK7hj4Ov3rIwAAdHIIACLCpcNdWyt8m+lN5EhV4K+R\nl9/TQ16KRLkKLmCPCVl8b+0QC/f7nPi5yTP709kfmflRplvGRkn0axmzeFCQNnmJ\n80V3OYiVag4ZTq1xTcfloApZB37AxqHsGwH7aUSyGKzar7vavpalWCcXQ0VGfDKU\n5PQsmeKtVySsk5e5FwDavT/3rADuoMJDRbHDcOdWfhLmOGmdsfXujon73Fg1t350\nyi5hM8UPBpQE+Ab3+KLMLhqsQ1W85vgb3CPmuZoYsmrDUtAkTyTXtXLyjJeZZiX7\noc+9k3BVgQ10fKkXtYl1749+gUAu/fi/EucNFhvD4LAsNkDCnK4BllbRSon5tYc=\n=k66t\n-----END PGP SIGNATURE-----\n", "payload": "tree a9456be8ebd20d834fb93d7f8d67c394f331b1ca\nparent 6070e2e87616d8b2ae9ea58c800a79be936b9aab\nparent 87438a163ec153e2322b70e8c5c987c7c89be0b4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561475736 +0200\ncommitter GitHub <noreply@github.com> 1561475736 +0200\n\nRollup merge of #62091 - ljedrz:hiridification_almost_there, r=Zoxc\n\nHirIdification: almost there\n\nI'm beginning to run out of stuff to HirIdify :wink:.\n\nThis time I targeted mainly `hir::map::{find, get_parent_node}`, but a few other bits got changed too.\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "html_url": "https://github.com/rust-lang/rust/commit/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6070e2e87616d8b2ae9ea58c800a79be936b9aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6070e2e87616d8b2ae9ea58c800a79be936b9aab", "html_url": "https://github.com/rust-lang/rust/commit/6070e2e87616d8b2ae9ea58c800a79be936b9aab"}, {"sha": "87438a163ec153e2322b70e8c5c987c7c89be0b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/87438a163ec153e2322b70e8c5c987c7c89be0b4", "html_url": "https://github.com/rust-lang/rust/commit/87438a163ec153e2322b70e8c5c987c7c89be0b4"}], "stats": {"total": 247, "additions": 119, "deletions": 128}, "files": [{"sha": "351f5818f7e67d6397648b008c9b33ca3109b53a", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -87,7 +87,7 @@ impl<'a> Code<'a> {\n         match map.get(id) {\n             map::Node::Block(_) => {\n                 //  Use the parent, hopefully an expression node.\n-                Code::from_node(map, map.get_parent_node_by_hir_id(id))\n+                Code::from_node(map, map.get_parent_node(id))\n             }\n             map::Node::Expr(expr) => Some(Code::Expr(expr)),\n             node => FnLikeNode::from_node(node).map(Code::FnLike)"}, {"sha": "3d591c9a1c6bdafb28167b0c04587c4abdc44226", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -292,7 +292,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n-        let node = if let Some(node) = self.find_by_hir_id(hir_id) {\n+        let node = if let Some(node) = self.find(hir_id) {\n             node\n         } else {\n             return None\n@@ -347,7 +347,7 @@ impl<'hir> Map<'hir> {\n                 if variant_data.ctor_hir_id().is_none() {\n                     return None;\n                 }\n-                let ctor_of = match self.find_by_hir_id(self.get_parent_node_by_hir_id(hir_id)) {\n+                let ctor_of = match self.find(self.get_parent_node(hir_id)) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n@@ -424,7 +424,7 @@ impl<'hir> Map<'hir> {\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n     pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {\n-        let parent = self.get_parent_node_by_hir_id(hir_id);\n+        let parent = self.get_parent_node(hir_id);\n         assert!(self.lookup(parent).map_or(false, |e| e.is_body_owner(hir_id)));\n         parent\n     }\n@@ -485,7 +485,7 @@ impl<'hir> Map<'hir> {\n         match self.get(id) {\n             Node::Item(&Item { node: ItemKind::Trait(..), .. }) |\n             Node::Item(&Item { node: ItemKind::TraitAlias(..), .. }) => id,\n-            Node::GenericParam(_) => self.get_parent_node_by_hir_id(id),\n+            Node::GenericParam(_) => self.get_parent_node(id),\n             _ => bug!(\"ty_param_owner: {} not a type parameter\", self.node_to_string(id))\n         }\n     }\n@@ -563,7 +563,7 @@ impl<'hir> Map<'hir> {\n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n     pub fn get(&self, id: HirId) -> Node<'hir> {\n         // read recorded by `find`\n-        self.find_by_hir_id(id).unwrap_or_else(||\n+        self.find(id).unwrap_or_else(||\n             bug!(\"couldn't find hir id {} in the HIR map\", id))\n     }\n \n@@ -595,13 +595,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n-    pub fn find(&self, id: NodeId) -> Option<Node<'hir>> {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.find_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n-    pub fn find_by_hir_id(&self, hir_id: HirId) -> Option<Node<'hir>> {\n+    pub fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {\n         let result = self.find_entry(hir_id).and_then(|entry| {\n             if let Node::Crate = entry.node {\n                 None\n@@ -615,24 +609,17 @@ impl<'hir> Map<'hir> {\n         result\n     }\n \n-    /// Similar to `get_parent`; returns the parent node-ID, or just `hir_id` if there\n-    /// is no parent. Note that the parent may be `CRATE_NODE_ID`, which is not itself\n+    /// Similar to `get_parent`; returns the parent HIR Id, or just `hir_id` if there\n+    /// is no parent. Note that the parent may be `CRATE_HIR_ID`, which is not itself\n     /// present in the map, so passing the return value of `get_parent_node` to\n     /// `get` may in fact panic.\n-    /// This function returns the immediate parent in the AST, whereas `get_parent`\n+    /// This function returns the immediate parent in the HIR, whereas `get_parent`\n     /// returns the enclosing item. Note that this might not be the actual parent\n-    /// node in the AST -- some kinds of nodes are not in the map and these will\n+    /// node in the HIR -- some kinds of nodes are not in the map and these will\n     /// never appear as the parent node. Thus, you can always walk the parent nodes\n-    /// from a node to the root of the AST (unless you get back the same ID here,\n+    /// from a node to the root of the HIR (unless you get back the same ID here,\n     /// which can happen if the ID is not in the map itself or is just weird).\n-    pub fn get_parent_node(&self, id: NodeId) -> NodeId {\n-        let hir_id = self.node_to_hir_id(id);\n-        let parent_hir_id = self.get_parent_node_by_hir_id(hir_id);\n-        self.hir_to_node_id(parent_hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n-    pub fn get_parent_node_by_hir_id(&self, hir_id: HirId) -> HirId {\n+    pub fn get_parent_node(&self, hir_id: HirId) -> HirId {\n         if self.dep_graph.is_fully_enabled() {\n             let hir_id_owner = hir_id.owner;\n             let def_path_hash = self.definitions.def_path_hash(hir_id_owner);\n@@ -646,7 +633,7 @@ impl<'hir> Map<'hir> {\n \n     /// Check if the node is an argument. An argument is a local variable whose\n     /// immediate parent is an item or a closure.\n-    pub fn is_argument(&self, id: NodeId) -> bool {\n+    pub fn is_argument(&self, id: HirId) -> bool {\n         match self.find(id) {\n             Some(Node::Binding(_)) => (),\n             _ => return false,\n@@ -687,7 +674,7 @@ impl<'hir> Map<'hir> {\n     {\n         let mut id = start_id;\n         loop {\n-            let parent_id = self.get_parent_node_by_hir_id(id);\n+            let parent_id = self.get_parent_node(id);\n             if parent_id == CRATE_HIR_ID {\n                 return Ok(CRATE_HIR_ID);\n             }\n@@ -872,28 +859,28 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn expect_item(&self, id: HirId) -> &'hir Item {\n-        match self.find_by_hir_id(id) { // read recorded by `find`\n+        match self.find(id) { // read recorded by `find`\n             Some(Node::Item(item)) => item,\n             _ => bug!(\"expected item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_impl_item(&self, id: HirId) -> &'hir ImplItem {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::ImplItem(item)) => item,\n             _ => bug!(\"expected impl item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_trait_item(&self, id: HirId) -> &'hir TraitItem {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::TraitItem(item)) => item,\n             _ => bug!(\"expected trait item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_variant_data(&self, id: HirId) -> &'hir VariantData {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::Item(i)) => {\n                 match i.node {\n                     ItemKind::Struct(ref struct_def, _) |\n@@ -908,21 +895,21 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn expect_variant(&self, id: HirId) -> &'hir Variant {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::Variant(variant)) => variant,\n             _ => bug!(\"expected variant, found {}\", self.node_to_string(id)),\n         }\n     }\n \n     pub fn expect_foreign_item(&self, id: HirId) -> &'hir ForeignItem {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::ForeignItem(item)) => item,\n             _ => bug!(\"expected foreign item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_expr(&self, id: HirId) -> &'hir Expr {\n-        match self.find_by_hir_id(id) { // read recorded by find\n+        match self.find(id) { // read recorded by find\n             Some(Node::Expr(expr)) => expr,\n             _ => bug!(\"expected expr, found {}\", self.node_to_string(id))\n         }\n@@ -1028,8 +1015,8 @@ impl<'hir> Map<'hir> {\n             Some(Node::Pat(pat)) => pat.span,\n             Some(Node::Arm(arm)) => arm.span,\n             Some(Node::Block(block)) => block.span,\n-            Some(Node::Ctor(..)) => match self.find_by_hir_id(\n-                self.get_parent_node_by_hir_id(hir_id))\n+            Some(Node::Ctor(..)) => match self.find(\n+                self.get_parent_node(hir_id))\n             {\n                 Some(Node::Item(item)) => item.span,\n                 Some(Node::Variant(variant)) => variant.span,\n@@ -1100,7 +1087,7 @@ impl<'a> NodesMatchingSuffix<'a> {\n         // chain, then returns `None`.\n         fn find_first_mod_parent<'a>(map: &'a Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n             loop {\n-                if let Node::Item(item) = map.find_by_hir_id(id)? {\n+                if let Node::Item(item) = map.find(id)? {\n                     if item_is_mod(&item) {\n                         return Some((id, item.ident.name))\n                     }\n@@ -1273,7 +1260,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         })\n     };\n \n-    match map.find_by_hir_id(id) {\n+    match map.find(id) {\n         Some(Node::Item(item)) => {\n             let item_str = match item.node {\n                 ItemKind::ExternCrate(..) => \"extern crate\","}, {"sha": "65225163a25a47111160a511f6c8374e2686d92b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     )\n                 };\n                 let span = scope.span(self, region_scope_tree);\n-                let tag = match self.hir().find_by_hir_id(scope.hir_id(region_scope_tree)) {\n+                let tag = match self.hir().find(scope.hir_id(region_scope_tree)) {\n                     Some(Node::Block(_)) => \"block\",\n                     Some(Node::Expr(expr)) => match expr.node {\n                         hir::ExprKind::Call(..) => \"call\",\n@@ -182,7 +182,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let scope = region.free_region_binding_scope(self);\n         let node = self.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n-        let tag = match self.hir().find_by_hir_id(node) {\n+        let tag = match self.hir().find(node) {\n             Some(Node::Block(_)) | Some(Node::Expr(_)) => \"body\",\n             Some(Node::Item(it)) => Self::item_scope_tag(&it),\n             Some(Node::TraitItem(it)) => Self::trait_item_scope_tag(&it),"}, {"sha": "6b6dbd43167fa3fadad4d89583a6a48a770295f6", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -777,7 +777,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                                 .local_def_id_from_hir_id(opaque_parent_hir_id)\n                         };\n                         let (in_definition_scope, origin) =\n-                            match tcx.hir().find_by_hir_id(opaque_hir_id)\n+                            match tcx.hir().find(opaque_hir_id)\n                         {\n                             Some(Node::Item(item)) => match item.node {\n                                 // Anonymous `impl Trait`"}, {"sha": "e02ee8943603a6372cc113f9687c0d0b5d75cb1e", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -27,7 +27,7 @@ use syntax_pos;\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n fn should_explore<'tcx>(tcx: TyCtxt<'tcx>, hir_id: hir::HirId) -> bool {\n-    match tcx.hir().find_by_hir_id(hir_id) {\n+    match tcx.hir().find(hir_id) {\n         Some(Node::Item(..)) |\n         Some(Node::ImplItem(..)) |\n         Some(Node::ForeignItem(..)) |\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             // tuple struct constructor function\n             let id = self.struct_constructors.get(&id).cloned().unwrap_or(id);\n \n-            if let Some(node) = self.tcx.hir().find_by_hir_id(id) {\n+            if let Some(node) = self.tcx.hir().find(id) {\n                 self.live_symbols.insert(id);\n                 self.visit_node(node);\n             }"}, {"sha": "7b69fe394fb2c552bc702ecbd588595ccdc7418d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -110,7 +110,7 @@ use std::{fmt, u32};\n use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n-use syntax::ast::{self, NodeId};\n+use syntax::ast;\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n@@ -369,7 +369,7 @@ fn visit_fn<'tcx>(\n     // Don't run unused pass for #[derive()]\n     if let FnKind::Method(..) = fk {\n         let parent = ir.tcx.hir().get_parent_item(id);\n-        if let Some(Node::Item(i)) = ir.tcx.hir().find_by_hir_id(parent) {\n+        if let Some(Node::Item(i)) = ir.tcx.hir().find(parent) {\n             if i.attrs.iter().any(|a| a.check_name(sym::automatically_derived)) {\n                 return;\n             }\n@@ -1327,12 +1327,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         }\n     }\n \n-    fn access_var(&mut self, hir_id: HirId, nid: NodeId, succ: LiveNode, acc: u32, span: Span)\n+    fn access_var(&mut self, hir_id: HirId, var_hid: HirId, succ: LiveNode, acc: u32, span: Span)\n                   -> LiveNode {\n         let ln = self.live_node(hir_id, span);\n         if acc != 0 {\n             self.init_from_succ(ln, succ);\n-            let var_hid = self.ir.tcx.hir().node_to_hir_id(nid);\n             let var = self.variable(var_hid, span);\n             self.acc(ln, var, acc);\n         }\n@@ -1345,8 +1344,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             Res::Local(hid) => {\n                 let upvars = self.ir.tcx.upvars(self.ir.body_owner);\n                 if !upvars.map_or(false, |upvars| upvars.contains_key(&hid)) {\n-                    let nid = self.ir.tcx.hir().hir_to_node_id(hid);\n-                    self.access_var(hir_id, nid, succ, acc, path.span)\n+                    self.access_var(hir_id, hid, succ, acc, path.span)\n                 } else {\n                     succ\n                 }"}, {"sha": "e7253a73bd4180a4469c85d203be2a1c85fc2309", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -1526,7 +1526,7 @@ impl<'tcx> cmt_<'tcx> {\n                 \"non-place\".into()\n             }\n             Categorization::Local(vid) => {\n-                if tcx.hir().is_argument(tcx.hir().hir_to_node_id(vid)) {\n+                if tcx.hir().is_argument(vid) {\n                     \"argument\"\n                 } else {\n                     \"local variable\""}, {"sha": "d607c35f8762bb746f1f07f00f83835279a15600", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -53,7 +53,7 @@ fn method_might_be_inlined<'tcx>(\n         return true\n     }\n     if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_src) {\n-        match tcx.hir().find_by_hir_id(impl_hir_id) {\n+        match tcx.hir().find(impl_hir_id) {\n             Some(Node::Item(item)) =>\n                 item_might_be_inlined(tcx, &item, codegen_fn_attrs),\n             Some(..) | None =>\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             None => { return false; }\n         };\n \n-        match self.tcx.hir().find_by_hir_id(hir_id) {\n+        match self.tcx.hir().find(hir_id) {\n             Some(Node::Item(item)) => {\n                 match item.node {\n                     hir::ItemKind::Fn(..) =>\n@@ -205,7 +205,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 continue\n             }\n \n-            if let Some(ref item) = self.tcx.hir().find_by_hir_id(search_item) {\n+            if let Some(ref item) = self.tcx.hir().find(search_item) {\n                 self.propagate_node(item, search_item);\n             }\n         }"}, {"sha": "412346bab257e6b4b7c25906291ed58fe0d649cc", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -662,7 +662,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         if let Some(Region::LateBound(_, def_id, _)) = def {\n                             if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n                                 // Ensure that the parent of the def is an item, not HRTB\n-                                let parent_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                                let parent_id = self.tcx.hir().get_parent_node(hir_id);\n                                 let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n                                 let parent_trait_id = hir::TraitItemId { hir_id: parent_id };\n                                 let krate = self.tcx.hir().forest.krate();\n@@ -1489,7 +1489,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n         if let Node::Lifetime(hir_lifetime) = self.tcx.hir().get(lifetime.hir_id) {\n-            if let Some(parent) = self.tcx.hir().find_by_hir_id(\n+            if let Some(parent) = self.tcx.hir().find(\n                 self.tcx.hir().get_parent_item(hir_lifetime.hir_id))\n             {\n                 match parent {\n@@ -2051,7 +2051,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // and whether there's a `self` argument (treated specially).\n         let mut assoc_item_kind = None;\n         let mut impl_self = None;\n-        let parent = self.tcx.hir().get_parent_node_by_hir_id(output.hir_id);\n+        let parent = self.tcx.hir().get_parent_node(output.hir_id);\n         let body = match self.tcx.hir().get(parent) {\n             // `fn` definitions and methods.\n             Node::Item(&hir::Item {"}, {"sha": "f54575ff8fc1dcb87047c2bf8482a55537afec47", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -938,8 +938,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'tcx>,\n     ) {\n         if let &ObligationCauseCode::VariableType(hir_id) = code {\n-            let parent_node = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n-            if let Some(Node::Local(ref local)) = self.tcx.hir().find_by_hir_id(parent_node) {\n+            let parent_node = self.tcx.hir().get_parent_node(hir_id);\n+            if let Some(Node::Local(ref local)) = self.tcx.hir().find(parent_node) {\n                 if let Some(ref expr) = local.init {\n                     if let hir::ExprKind::Index(_, _) = expr.node {\n                         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n@@ -1013,8 +1013,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     ) {\n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node_by_hir_id(obligation.cause.body_id);\n-        let node = hir.find_by_hir_id(parent_node);\n+        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n             node: hir::ItemKind::Fn(decl, _, _, body_id),\n             .."}, {"sha": "4710d611d99df0a3b2bc63cfa274aeddc443ff59", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -1589,7 +1589,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let hir_id = self.hir()\n             .as_local_hir_id(suitable_region_binding_scope)\n             .unwrap();\n-        let is_impl_item = match self.hir().find_by_hir_id(hir_id) {\n+        let is_impl_item = match self.hir().find(hir_id) {\n             Some(Node::Item(..)) | Some(Node::TraitItem(..)) => false,\n             Some(Node::ImplItem(..)) => {\n                 self.is_bound_region_in_impl_item(suitable_region_binding_scope)\n@@ -2880,7 +2880,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             if lint::maybe_lint_level_root(self, id) {\n                 return id;\n             }\n-            let next = self.hir().get_parent_node_by_hir_id(id);\n+            let next = self.hir().get_parent_node(id);\n             if next == id {\n                 bug!(\"lint traversal reached the root of the crate\");\n             }\n@@ -2898,7 +2898,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             if let Some(pair) = sets.level_and_source(lint, id, self.sess) {\n                 return pair\n             }\n-            let next = self.hir().get_parent_node_by_hir_id(id);\n+            let next = self.hir().get_parent_node(id);\n             if next == id {\n                 bug!(\"lint traversal reached the root of the crate\");\n             }"}, {"sha": "af8dedfc8812e389874fb9bed343766c38520f45", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n use smallvec::SmallVec;\n-use syntax::ast::CRATE_NODE_ID;\n+use rustc::hir::CRATE_HIR_ID;\n use crate::ty::context::TyCtxt;\n use crate::ty::{DefId, DefIdTree};\n \n@@ -33,7 +33,7 @@ impl<'tcx> DefIdForest {\n     /// crate.\n     #[inline]\n     pub fn full(tcx: TyCtxt<'tcx>) -> DefIdForest {\n-        let crate_id = tcx.hir().local_def_id(CRATE_NODE_ID);\n+        let crate_id = tcx.hir().local_def_id_from_hir_id(CRATE_HIR_ID);\n         DefIdForest::from_id(crate_id)\n     }\n "}, {"sha": "658e4307348db02fd4530156c6ae2530aed3127f", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -47,7 +47,7 @@ pub enum PatternSource<'tcx> {\n /// with a reference to the let\n fn get_pattern_source<'tcx>(tcx: TyCtxt<'tcx>, pat: &Pat) -> PatternSource<'tcx> {\n \n-    let parent = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n+    let parent = tcx.hir().get_parent_node(pat.hir_id);\n \n     match tcx.hir().get(parent) {\n         Node::Expr(ref e) => {"}, {"sha": "3c7f19f7fbf4fb0d772e3462cacde24be6841a5d", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -1022,7 +1022,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n \n                 if let ty::ReScope(scope) = *super_scope {\n                     let hir_id = scope.hir_id(&self.region_scope_tree);\n-                    match self.tcx.hir().find_by_hir_id(hir_id) {\n+                    match self.tcx.hir().find(hir_id) {\n                         Some(Node::Stmt(_)) => {\n                             if *sub_scope != ty::ReStatic {\n                                 db.note(\"consider using a `let` binding to increase its lifetime\");\n@@ -1189,7 +1189,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n     }\n \n     fn local_ty(&self, hir_id: hir::HirId) -> (Option<&hir::Ty>, bool) {\n-        let parent = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+        let parent = self.tcx.hir().get_parent_node(hir_id);\n         let parent_node = self.tcx.hir().get(parent);\n \n         // The parent node is like a fn\n@@ -1287,7 +1287,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                     },\n                 )) = ty.map(|t| &t.node)\n                 {\n-                    let borrow_expr_id = self.tcx.hir().get_parent_node_by_hir_id(borrowed_hir_id);\n+                    let borrow_expr_id = self.tcx.hir().get_parent_node(borrowed_hir_id);\n                     db.span_suggestion(\n                         self.tcx.hir().span(borrow_expr_id),\n                         \"consider removing the `&mut`, as it is an \\"}, {"sha": "d92f3aafa1c7e3dbfdc8f059861843729676f4dd", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -253,10 +253,9 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n     fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn;\n \n     /// Computes an user-readable representation of a path, if possible.\n-    fn node_path(&self, id: ast::NodeId) -> Option<String> {\n+    fn node_path(&self, id: hir::HirId) -> Option<String> {\n         self.hir_map().and_then(|map| {\n-            let hir_id = map.node_to_hir_id(id);\n-            map.def_path_from_hir_id(hir_id)\n+            map.def_path_from_hir_id(id)\n         }).map(|path| {\n             path.data\n                 .into_iter()\n@@ -471,8 +470,8 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n         self\n     }\n \n-    fn node_path(&self, id: ast::NodeId) -> Option<String> {\n-        Some(self.tcx.def_path_str(self.tcx.hir().local_def_id(id)))\n+    fn node_path(&self, id: hir::HirId) -> Option<String> {\n+        Some(self.tcx.def_path_str(self.tcx.hir().local_def_id_from_hir_id(id)))\n     }\n }\n \n@@ -631,7 +630,7 @@ fn print_flowgraph<'tcx, W: Write>(\n                 if let Some(n) = hir::map::blocks::FnLikeNode::from_node(node) {\n                     break n.body();\n                 }\n-                let parent = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                let parent = tcx.hir().get_parent_node(hir_id);\n                 assert_ne!(hir_id, parent);\n                 hir_id = parent;\n             }\n@@ -834,7 +833,7 @@ pub fn print_after_hir_lowering<'tcx>(\n                         let node = hir_map.get(hir_id);\n                         pp_state.print_node(node)?;\n                         pp_state.s.space()?;\n-                        let path = annotation.node_path(node_id)\n+                        let path = annotation.node_path(hir_id)\n                             .expect(\"-Z unpretty missing node paths\");\n                         pp_state.synth_comment(path)?;\n                         pp_state.s.hardbreak()?;\n@@ -907,11 +906,11 @@ fn print_with_analysis<'tcx>(\n             let nodeid =\n                 nodeid.expect(\"`pretty flowgraph=..` needs NodeId (int) or unique path \\\n                                 suffix (b::c::d)\");\n-            let node = tcx.hir().find(nodeid).unwrap_or_else(|| {\n+            let hir_id = tcx.hir().node_to_hir_id(nodeid);\n+            let node = tcx.hir().find(hir_id).unwrap_or_else(|| {\n                 tcx.sess.fatal(&format!(\"--pretty flowgraph couldn't find id: {}\", nodeid))\n             });\n \n-            let hir_id = tcx.hir().node_to_hir_id(nodeid);\n             match blocks::Code::from_node(&tcx.hir(), hir_id) {\n                 Some(code) => {\n                     let variants = gather_flowgraph_variants(tcx.sess);"}, {"sha": "12719c3b9d303bc627101f861ce8c53a79b34e4a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();\n                 if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(real_trait) {\n-                    match cx.tcx.hir().find_by_hir_id(hir_id) {\n+                    match cx.tcx.hir().find(hir_id) {\n                         Some(Node::Item(item)) => {\n                             if let hir::VisibilityKind::Inherited = item.vis.node {\n                                 for impl_item_ref in impl_item_refs {"}, {"sha": "d0258ca30c507d8b589b59b2e82d1ae346f2248a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -275,7 +275,7 @@ fn lint_int_literal<'a, 'tcx>(\n             return;\n         }\n \n-        let par_id = cx.tcx.hir().get_parent_node_by_hir_id(e.hir_id);\n+        let par_id = cx.tcx.hir().get_parent_node(e.hir_id);\n         if let Node::Expr(par_e) = cx.tcx.hir().get(par_id) {\n             if let hir::ExprKind::Struct(..) = par_e.node {\n                 if is_range_literal(cx.sess(), par_e)\n@@ -314,7 +314,7 @@ fn lint_uint_literal<'a, 'tcx>(\n         _ => bug!(),\n     };\n     if lit_val < min || lit_val > max {\n-        let parent_id = cx.tcx.hir().get_parent_node_by_hir_id(e.hir_id);\n+        let parent_id = cx.tcx.hir().get_parent_node(e.hir_id);\n         if let Node::Expr(par_e) = cx.tcx.hir().get(parent_id) {\n             match par_e.node {\n                 hir::ExprKind::Cast(..) => {"}, {"sha": "92c2e4e01f7608226b84248aad3b57cce985fb43", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -304,7 +304,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n                 let upvar_hir_id = self.upvars[upvar_index.index()].var_hir_id;\n-                if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find_by_hir_id(upvar_hir_id)\n+                if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find(upvar_hir_id)\n                 {\n                     if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated,\n@@ -633,7 +633,7 @@ fn annotate_struct_field(\n             let field = def.all_fields().nth(field.index())?;\n             // Use the HIR types to construct the diagnostic message.\n             let hir_id = tcx.hir().as_local_hir_id(field.did)?;\n-            let node = tcx.hir().find_by_hir_id(hir_id)?;\n+            let node = tcx.hir().find(hir_id)?;\n             // Now we're dealing with the actual struct that we're going to suggest a change to,\n             // we can expect a field that is an immutable reference to a type.\n             if let hir::Node::Field(field) = node {"}, {"sha": "311b6aa0c14de263d213649707a13957d5008a39", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -552,7 +552,6 @@ where\n         .into_iter()\n         .flatten()\n         .map(|(&var_hir_id, &upvar_id)| {\n-            let var_node_id = tcx_hir.hir_to_node_id(var_hir_id);\n             let capture = hir_tables.upvar_capture(upvar_id);\n             let by_ref = match capture {\n                 ty::UpvarCapture::ByValue => false,\n@@ -563,7 +562,7 @@ where\n                 by_ref,\n             };\n             let mut mutability = Mutability::Not;\n-            if let Some(Node::Binding(pat)) = tcx_hir.find(var_node_id) {\n+            if let Some(Node::Binding(pat)) = tcx_hir.find(var_hir_id) {\n                 if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n                     debuginfo.debug_name = ident.name;\n                     if let Some(&bm) = hir.tables.pat_binding_modes().get(pat.hir_id) {"}, {"sha": "94b4f6e8dd1c5cf26fcb2b8fe2542dd657336aa9", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -909,7 +909,7 @@ fn convert_path_expr<'a, 'tcx>(\n \n         Res::Def(DefKind::ConstParam, def_id) => {\n             let hir_id = cx.tcx.hir().as_local_hir_id(def_id).unwrap();\n-            let item_id = cx.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+            let item_id = cx.tcx.hir().get_parent_node(hir_id);\n             let item_def_id = cx.tcx.hir().local_def_id_from_hir_id(item_id);\n             let generics = cx.tcx.generics_of(item_def_id);\n             let local_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);"}, {"sha": "24df3549be48136c9d8a4e481b0c0364765a75c9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -570,14 +570,14 @@ fn is_enclosed(\n     used_unsafe: &FxHashSet<hir::HirId>,\n     id: hir::HirId,\n ) -> Option<(String, hir::HirId)> {\n-    let parent_id = tcx.hir().get_parent_node_by_hir_id(id);\n+    let parent_id = tcx.hir().get_parent_node(id);\n     if parent_id != id {\n         if used_unsafe.contains(&parent_id) {\n             Some((\"block\".to_string(), parent_id))\n         } else if let Some(Node::Item(&hir::Item {\n             node: hir::ItemKind::Fn(_, header, _, _),\n             ..\n-        })) = tcx.hir().find_by_hir_id(parent_id) {\n+        })) = tcx.hir().find(parent_id) {\n             match header.unsafety {\n                 hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n                 hir::Unsafety::Normal => None,"}, {"sha": "ed0a78b46527659bd7aea3eff19f639f50f74681", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 };\n \n                 if loop_id != hir::DUMMY_HIR_ID {\n-                    if let Node::Block(_) = self.hir_map.find_by_hir_id(loop_id).unwrap() {\n+                    if let Node::Block(_) = self.hir_map.find(loop_id).unwrap() {\n                         return\n                     }\n                 }\n@@ -155,7 +155,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n \n                 match destination.target_id {\n                     Ok(loop_id) => {\n-                        if let Node::Block(block) = self.hir_map.find_by_hir_id(loop_id).unwrap() {\n+                        if let Node::Block(block) = self.hir_map.find(loop_id).unwrap() {\n                             struct_span_err!(self.sess, e.span, E0696,\n                                             \"`continue` pointing to a labeled block\")\n                                 .span_label(e.span,"}, {"sha": "3e98200e5327466e5d7cdf8ea5988cf4c8785f94", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -247,7 +247,7 @@ fn def_id_visibility<'tcx>(\n                     }\n                 }\n                 Node::Ctor(vdata) => {\n-                    let parent_hir_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                    let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n                     match tcx.hir().get(parent_hir_id) {\n                         Node::Variant(..) => {\n                             let parent_did = tcx.hir().local_def_id_from_hir_id(parent_hir_id);\n@@ -784,7 +784,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             if module_id == hir::CRATE_HIR_ID {\n                 break\n             }\n-            module_id = self.tcx.hir().get_parent_node_by_hir_id(module_id);\n+            module_id = self.tcx.hir().get_parent_node(module_id);\n         }\n     }\n }\n@@ -1233,7 +1233,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         if let Some(hir_id) = self.tcx.hir().as_local_hir_id(did) {\n             // .. and it corresponds to a private type in the AST (this returns\n             // `None` for type parameters).\n-            match self.tcx.hir().find_by_hir_id(hir_id) {\n+            match self.tcx.hir().find(hir_id) {\n                 Some(Node::Item(ref item)) => !item.vis.node.is_pub(),\n                 Some(_) | None => false,\n             }\n@@ -1674,7 +1674,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n                     has_old_errors = true;\n                     break;\n                 }\n-                let parent = self.tcx.hir().get_parent_node_by_hir_id(id);\n+                let parent = self.tcx.hir().get_parent_node(id);\n                 if parent == id {\n                     break;\n                 }"}, {"sha": "19ed9e214073c1618e76294ec9e0ffa424586b95", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -410,7 +410,10 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                             let mut decl_id = None;\n                             let mut docs = String::new();\n                             let mut attrs = vec![];\n-                            if let Some(Node::ImplItem(item)) = self.tcx.hir().find(id) {\n+                            let hir_id = self.tcx.hir().node_to_hir_id(id);\n+                            if let Some(Node::ImplItem(item)) =\n+                                self.tcx.hir().find(hir_id)\n+                            {\n                                 docs = self.docs_for_attrs(&item.attrs);\n                                 attrs = item.attrs.to_vec();\n                             }\n@@ -451,8 +454,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     Some(def_id) => {\n                         let mut docs = String::new();\n                         let mut attrs = vec![];\n+                        let hir_id = self.tcx.hir().node_to_hir_id(id);\n \n-                        if let Some(Node::TraitItem(item)) = self.tcx.hir().find(id) {\n+                        if let Some(Node::TraitItem(item)) = self.tcx.hir().find(hir_id) {\n                             docs = self.docs_for_attrs(&item.attrs);\n                             attrs = item.attrs.to_vec();\n                         }\n@@ -521,7 +525,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         }\n         match expr.node {\n             ast::ExprKind::Field(ref sub_ex, ident) => {\n-                let hir_node = match self.tcx.hir().find(sub_ex.id) {\n+                let sub_ex_hir_id = self.tcx.hir().node_to_hir_id(sub_ex.id);\n+                let hir_node = match self.tcx.hir().find(sub_ex_hir_id) {\n                     Some(Node::Expr(expr)) => expr,\n                     _ => {\n                         debug!(\n@@ -621,7 +626,10 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Node::PathSegment(seg) => {\n                 match seg.res {\n                     Some(res) if res != Res::Err => res,\n-                    _ => self.get_path_res(self.tcx.hir().get_parent_node(id)),\n+                    _ => {\n+                        let parent_node = self.tcx.hir().get_parent_node(hir_id);\n+                        self.get_path_res(self.tcx.hir().hir_to_node_id(parent_node))\n+                    },\n                 }\n             }\n "}, {"sha": "0375ad4a08f26c8e95eba2fbca11a55323d62380", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -2000,7 +2000,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.prohibit_generics(&path.segments);\n \n                 let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-                let item_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                let item_id = tcx.hir().get_parent_node(hir_id);\n                 let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n@@ -2190,7 +2190,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // Find the name and index of the const parameter by indexing the generics of the\n             // parent item and construct a `ParamConst`.\n             let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-            let item_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+            let item_id = tcx.hir().get_parent_node(hir_id);\n             let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n             let generics = tcx.generics_of(item_def_id);\n             let index = generics.param_def_id_to_index[&tcx.hir().local_def_id_from_hir_id(hir_id)];"}, {"sha": "b435c99ad01f5f3e097484bb0647c2994cf3deb7", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -546,7 +546,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n         if let PatKind::Binding(..) = inner.node {\n-            let parent_id = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n+            let parent_id = tcx.hir().get_parent_node(pat.hir_id);\n             let parent = tcx.hir().get(parent_id);\n             debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, parent);\n             match parent {\n@@ -808,16 +808,16 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         use hir::Node::{Block, Item, Local};\n \n         let hir = self.tcx.hir();\n-        let arm_id = hir.get_parent_node_by_hir_id(hir_id);\n-        let match_id = hir.get_parent_node_by_hir_id(arm_id);\n-        let containing_id = hir.get_parent_node_by_hir_id(match_id);\n+        let arm_id = hir.get_parent_node(hir_id);\n+        let match_id = hir.get_parent_node(arm_id);\n+        let containing_id = hir.get_parent_node(match_id);\n \n         let node = hir.get(containing_id);\n         if let Block(block) = node {\n             // check that the body's parent is an fn\n             let parent = hir.get(\n-                hir.get_parent_node_by_hir_id(\n-                    hir.get_parent_node_by_hir_id(block.hir_id),\n+                hir.get_parent_node(\n+                    hir.get_parent_node(block.hir_id),\n                 ),\n             );\n             if let (Some(expr), Item(hir::Item {"}, {"sha": "e6999f9e3ac8a0aa963e615ac4517c1b3d3e4bdf", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         callee_node: &hir::ExprKind,\n         callee_span: Span,\n     ) {\n-        let hir_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+        let hir_id = self.tcx.hir().get_parent_node(hir_id);\n         let parent_node = self.tcx.hir().get(hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr { node: hir::ExprKind::Closure(_, _, _, sp, ..), .. }),"}, {"sha": "4bd2f216224a5f62fb41472974a9c8e01b336fee", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -1231,7 +1231,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         db.span_label(cause.span, \"return type is not `()`\");\n                     }\n                     ObligationCauseCode::BlockTailExpression(blk_id) => {\n-                        let parent_id = fcx.tcx.hir().get_parent_node_by_hir_id(blk_id);\n+                        let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n                         db = self.report_return_mismatched_types(\n                             cause,\n                             expected,\n@@ -1281,7 +1281,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         // Verify that this is a tail expression of a function, otherwise the\n         // label pointing out the cause for the type coercion will be wrong\n         // as prior return coercions would not be relevant (#57664).\n-        let parent_id = fcx.tcx.hir().get_parent_node_by_hir_id(id);\n+        let parent_id = fcx.tcx.hir().get_parent_node(id);\n         let fn_decl = if let Some((expr, blk_id)) = expression {\n             pointing_at_return_type = fcx.suggest_mismatched_types_on_tail(\n                 &mut db,"}, {"sha": "c469d3516e2d48a64b361d15c6249dec908cf177", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -236,17 +236,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Option<(Span, &'static str, String)> {\n         if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = expr.node {\n             if let hir::def::Res::Local(id) = path.res {\n-                let parent = self.tcx.hir().get_parent_node_by_hir_id(id);\n+                let parent = self.tcx.hir().get_parent_node(id);\n                 if let Some(Node::Expr(hir::Expr {\n                     hir_id,\n                     node: hir::ExprKind::Closure(_, decl, ..),\n                     ..\n-                })) = self.tcx.hir().find_by_hir_id(parent) {\n-                    let parent = self.tcx.hir().get_parent_node_by_hir_id(*hir_id);\n+                })) = self.tcx.hir().find(parent) {\n+                    let parent = self.tcx.hir().get_parent_node(*hir_id);\n                     if let (Some(Node::Expr(hir::Expr {\n                         node: hir::ExprKind::MethodCall(path, span, expr),\n                         ..\n-                    })), 1) = (self.tcx.hir().find_by_hir_id(parent), decl.inputs.len()) {\n+                    })), 1) = (self.tcx.hir().find(parent), decl.inputs.len()) {\n                         let self_ty = self.tables.borrow().node_type(expr[0].hir_id);\n                         let self_ty = format!(\"{:?}\", self_ty);\n                         let name = path.ident.as_str();\n@@ -276,8 +276,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sp: Span,\n     ) -> bool {\n         let cm = self.sess().source_map();\n-        let parent_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n-        if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {\n+        let parent_id = self.tcx.hir().get_parent_node(hir_id);\n+        if let Some(parent) = self.tcx.hir().find(parent_id) {\n             // Account for fields\n             if let Node::Expr(hir::Expr {\n                 node: hir::ExprKind::Struct(_, fields, ..), ..\n@@ -421,8 +421,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(hir::Node::Expr(hir::Expr {\n                             node: hir::ExprKind::Assign(left_expr, _),\n                             ..\n-                        })) = self.tcx.hir().find_by_hir_id(\n-                            self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n+                        })) = self.tcx.hir().find(\n+                            self.tcx.hir().get_parent_node(expr.hir_id),\n                         ) {\n                             if mutability == hir::Mutability::MutMutable {\n                                 // Found the following case:\n@@ -551,7 +551,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Some(hir::Node::Expr(hir::Expr {\n             node: hir::ExprKind::Struct(_, fields, _),\n             ..\n-        })) = self.tcx.hir().find_by_hir_id(self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id)) {\n+        })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id)) {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n             for field in fields {\n                 if field.expr.hir_id == expr.hir_id && field.is_shorthand {"}, {"sha": "fa1b07d2dcfcdfdfe4189d1013d44ccc15c2c807", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n                                         let parent_node = self.tcx.hir().get(\n-                                            self.tcx.hir().get_parent_node_by_hir_id(hir_id),\n+                                            self.tcx.hir().get_parent_node(hir_id),\n                                         );\n                                         let msg = format!(\n                                             \"you must specify a type for this binding, like `{}`\",\n@@ -390,7 +390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 );\n                             } else {\n                                 let call_expr = self.tcx.hir().expect_expr(\n-                                    self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n+                                    self.tcx.hir().get_parent_node(expr.hir_id),\n                                 );\n \n                                 if let Some(span) = call_expr.span.trim_start(item_name.span) {"}, {"sha": "cfefd6c38679e10966c582b4e21043d2de69a171", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -4259,7 +4259,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // If our calling expression is indeed the function itself, we're good!\n         // If not, generate an error that this can only be called directly.\n         if let Node::Expr(expr) = self.tcx.hir().get(\n-            self.tcx.hir().get_parent_node_by_hir_id(hir_id))\n+            self.tcx.hir().get_parent_node(hir_id))\n         {\n             if let ExprKind::Call(ref callee, ..) = expr.node {\n                 if callee.hir_id == hir_id {\n@@ -4334,7 +4334,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut contained_in_place = false;\n \n         while let hir::Node::Expr(parent_expr) =\n-            self.tcx.hir().get(self.tcx.hir().get_parent_node_by_hir_id(expr_id))\n+            self.tcx.hir().get(self.tcx.hir().get_parent_node(expr_id))\n         {\n             match &parent_expr.node {\n                 hir::ExprKind::Assign(lhs, ..) | hir::ExprKind::AssignOp(_, lhs, ..) => {"}, {"sha": "7e781eeec56a98b3a8a0d887fc632e0948f12755", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -95,7 +95,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx>) {\n             // below it'll cause a panic because `def_id` is actually bogus at this\n             // point in time otherwise.\n             if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n-                if tcx.hir().find_by_hir_id(id).is_none() {\n+                if tcx.hir().find(id).is_none() {\n                     return false;\n                 }\n             }"}, {"sha": "42deeaf31f4279d71ee1e85f9abb866876b63961", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -52,7 +52,7 @@ fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     } else {\n         // Destructors only work on nominal types.\n         if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_did) {\n-            if let Some(Node::Item(item)) = tcx.hir().find_by_hir_id(impl_hir_id) {\n+            if let Some(Node::Item(item)) = tcx.hir().find(impl_hir_id) {\n                 let span = match item.node {\n                     ItemKind::Impl(.., ref ty, _) => ty.span,\n                     _ => item.span,"}, {"sha": "87e1166b7c041101ae8419b43d475251c8510ec9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -1298,7 +1298,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n         }\n \n         Node::AnonConst(_) => {\n-            let parent_node = tcx.hir().get(tcx.hir().get_parent_node_by_hir_id(hir_id));\n+            let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n             match parent_node {\n                 Node::Ty(&hir::Ty {\n                     node: hir::TyKind::Array(_, ref constant),"}, {"sha": "182594e768468fa8db0e7987456caed71ea0825e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=abc7423f27cebb55ea9cbc67b3edc8cbcaa5e0eb", "patch": "@@ -182,7 +182,7 @@ fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, main_def_id: DefId) {\n     let main_t = tcx.type_of(main_def_id);\n     match main_t.sty {\n         ty::FnDef(..) => {\n-            if let Some(Node::Item(it)) = tcx.hir().find_by_hir_id(main_id) {\n+            if let Some(Node::Item(it)) = tcx.hir().find(main_id) {\n                 if let hir::ItemKind::Fn(.., ref generics, _) = it.node {\n                     let mut error = false;\n                     if !generics.params.is_empty() {\n@@ -247,7 +247,7 @@ fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, start_def_id: DefId) {\n     let start_t = tcx.type_of(start_def_id);\n     match start_t.sty {\n         ty::FnDef(..) => {\n-            if let Some(Node::Item(it)) = tcx.hir().find_by_hir_id(start_id) {\n+            if let Some(Node::Item(it)) = tcx.hir().find(start_id) {\n                 if let hir::ItemKind::Fn(.., ref generics, _) = it.node {\n                     let mut error = false;\n                     if !generics.params.is_empty() {"}]}