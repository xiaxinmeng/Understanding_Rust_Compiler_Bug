{"sha": "65ff4ca2948301f59b6a6eab14234d005378859a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZmY0Y2EyOTQ4MzAxZjU5YjZhNmVhYjE0MjM0ZDAwNTM3ODg1OWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-19T20:33:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-20T17:28:10Z"}, "message": "Refactor parser lookahead buffer and increase its size", "tree": {"sha": "dec389c4b15fef80128024302f868d4176ff9d84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec389c4b15fef80128024302f868d4176ff9d84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ff4ca2948301f59b6a6eab14234d005378859a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ff4ca2948301f59b6a6eab14234d005378859a", "html_url": "https://github.com/rust-lang/rust/commit/65ff4ca2948301f59b6a6eab14234d005378859a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ff4ca2948301f59b6a6eab14234d005378859a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bccb829d0fe9a733bd6efcf6f7313186ae237ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bccb829d0fe9a733bd6efcf6f7313186ae237ab", "html_url": "https://github.com/rust-lang/rust/commit/7bccb829d0fe9a733bd6efcf6f7313186ae237ab"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "5e20f6e419276a96c0237b5af74227022a76d08f", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65ff4ca2948301f59b6a6eab14234d005378859a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ff4ca2948301f59b6a6eab14234d005378859a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=65ff4ca2948301f59b6a6eab14234d005378859a", "patch": "@@ -74,6 +74,12 @@ pub struct TokenAndSpan {\n     pub sp: Span,\n }\n \n+impl Default for TokenAndSpan {\n+    fn default() -> Self {\n+        TokenAndSpan { tok: token::Underscore, sp: syntax_pos::DUMMY_SP }\n+    }\n+}\n+\n pub struct StringReader<'a> {\n     pub span_diagnostic: &'a Handler,\n     /// The absolute offset within the codemap of the next character to read"}, {"sha": "2509fd12d03fe08890d251d64e2c4c2869615c60", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/65ff4ca2948301f59b6a6eab14234d005378859a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ff4ca2948301f59b6a6eab14234d005378859a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=65ff4ca2948301f59b6a6eab14234d005378859a", "patch": "@@ -245,6 +245,22 @@ enum PrevTokenKind {\n     Other,\n }\n \n+// Simple circular buffer used for keeping few next tokens.\n+#[derive(Default)]\n+struct LookaheadBuffer {\n+    buffer: [TokenAndSpan; LOOKAHEAD_BUFFER_CAPACITY],\n+    start: usize,\n+    end: usize,\n+}\n+\n+const LOOKAHEAD_BUFFER_CAPACITY: usize = 8;\n+\n+impl LookaheadBuffer {\n+    fn len(&self) -> usize {\n+        (LOOKAHEAD_BUFFER_CAPACITY + self.end - self.start) % LOOKAHEAD_BUFFER_CAPACITY\n+    }\n+}\n+\n /* ident is handled by common.rs */\n \n pub struct Parser<'a> {\n@@ -258,9 +274,7 @@ pub struct Parser<'a> {\n     pub cfg: CrateConfig,\n     /// the previous token kind\n     prev_token_kind: PrevTokenKind,\n-    pub buffer: [TokenAndSpan; 4],\n-    pub buffer_start: isize,\n-    pub buffer_end: isize,\n+    lookahead_buffer: LookaheadBuffer,\n     pub tokens_consumed: usize,\n     pub restrictions: Restrictions,\n     pub quote_depth: usize, // not (yet) related to the quasiquoter\n@@ -356,10 +370,6 @@ impl<'a> Parser<'a> {\n             _ => PathBuf::from(sess.codemap().span_to_filename(span)),\n         };\n         directory.pop();\n-        let placeholder = TokenAndSpan {\n-            tok: token::Underscore,\n-            sp: span,\n-        };\n \n         Parser {\n             reader: rdr,\n@@ -369,14 +379,7 @@ impl<'a> Parser<'a> {\n             span: span,\n             prev_span: span,\n             prev_token_kind: PrevTokenKind::Other,\n-            buffer: [\n-                placeholder.clone(),\n-                placeholder.clone(),\n-                placeholder.clone(),\n-                placeholder.clone(),\n-            ],\n-            buffer_start: 0,\n-            buffer_end: 0,\n+            lookahead_buffer: Default::default(),\n             tokens_consumed: 0,\n             restrictions: Restrictions::empty(),\n             quote_depth: 0,\n@@ -937,19 +940,13 @@ impl<'a> Parser<'a> {\n             _ => PrevTokenKind::Other,\n         };\n \n-        let next = if self.buffer_start == self.buffer_end {\n+        let next = if self.lookahead_buffer.start == self.lookahead_buffer.end {\n             self.reader.real_token()\n         } else {\n             // Avoid token copies with `replace`.\n-            let buffer_start = self.buffer_start as usize;\n-            let next_index = (buffer_start + 1) & 3;\n-            self.buffer_start = next_index as isize;\n-\n-            let placeholder = TokenAndSpan {\n-                tok: token::Underscore,\n-                sp: self.span,\n-            };\n-            mem::replace(&mut self.buffer[buffer_start], placeholder)\n+            let old_start = self.lookahead_buffer.start;\n+            self.lookahead_buffer.start = (old_start + 1) % LOOKAHEAD_BUFFER_CAPACITY;\n+            mem::replace(&mut self.lookahead_buffer.buffer[old_start], Default::default())\n         };\n         self.span = next.sp;\n         self.token = next.tok;\n@@ -982,21 +979,22 @@ impl<'a> Parser<'a> {\n         self.expected_tokens.clear();\n     }\n \n-    pub fn buffer_length(&mut self) -> isize {\n-        if self.buffer_start <= self.buffer_end {\n-            return self.buffer_end - self.buffer_start;\n-        }\n-        return (4 - self.buffer_start) + self.buffer_end;\n-    }\n-    pub fn look_ahead<R, F>(&mut self, distance: usize, f: F) -> R where\n+    pub fn look_ahead<R, F>(&mut self, dist: usize, f: F) -> R where\n         F: FnOnce(&token::Token) -> R,\n     {\n-        let dist = distance as isize;\n-        while self.buffer_length() < dist {\n-            self.buffer[self.buffer_end as usize] = self.reader.real_token();\n-            self.buffer_end = (self.buffer_end + 1) & 3;\n+        if dist == 0 {\n+            f(&self.token)\n+        } else if dist < LOOKAHEAD_BUFFER_CAPACITY {\n+            while self.lookahead_buffer.len() < dist {\n+                self.lookahead_buffer.buffer[self.lookahead_buffer.end] = self.reader.real_token();\n+                self.lookahead_buffer.end =\n+                    (self.lookahead_buffer.end + 1) % LOOKAHEAD_BUFFER_CAPACITY;\n+            }\n+            let index = (self.lookahead_buffer.start + dist - 1) % LOOKAHEAD_BUFFER_CAPACITY;\n+            f(&self.lookahead_buffer.buffer[index].tok)\n+        } else {\n+            self.bug(\"lookahead distance is too large\");\n         }\n-        f(&self.buffer[((self.buffer_start + dist - 1) & 3) as usize].tok)\n     }\n     pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_fatal(self.span, m)\n@@ -1118,7 +1116,6 @@ impl<'a> Parser<'a> {\n         Ok(ast::TyKind::ImplTrait(bounds))\n     }\n \n-\n     pub fn parse_ty_path(&mut self) -> PResult<'a, TyKind> {\n         Ok(TyKind::Path(None, self.parse_path(PathStyle::Type)?))\n     }"}]}