{"sha": "235a6b7d065a2fc55ceee323e85b9309b16e84bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNWE2YjdkMDY1YTJmYzU1Y2VlZTMyM2U4NWI5MzA5YjE2ZTg0YmY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-16T11:32:22Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-16T11:32:22Z"}, "message": "Expose const -> op functions that don't allow violiting const eval invariants", "tree": {"sha": "3627810a60b73d216781627c8dba8a603aa1dc47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3627810a60b73d216781627c8dba8a603aa1dc47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/235a6b7d065a2fc55ceee323e85b9309b16e84bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/235a6b7d065a2fc55ceee323e85b9309b16e84bf", "html_url": "https://github.com/rust-lang/rust/commit/235a6b7d065a2fc55ceee323e85b9309b16e84bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/235a6b7d065a2fc55ceee323e85b9309b16e84bf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac09088e1a8fc8a293028764e4e84da29469205", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac09088e1a8fc8a293028764e4e84da29469205", "html_url": "https://github.com/rust-lang/rust/commit/eac09088e1a8fc8a293028764e4e84da29469205"}], "stats": {"total": 83, "additions": 37, "deletions": 46}, "files": [{"sha": "a4b2d6d36878d701c2452aff33e1fd9b9a30521b", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/235a6b7d065a2fc55ceee323e85b9309b16e84bf/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235a6b7d065a2fc55ceee323e85b9309b16e84bf/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=235a6b7d065a2fc55ceee323e85b9309b16e84bf", "patch": "@@ -476,7 +476,7 @@ pub fn const_field<'a, 'tcx>(\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n     let result = (|| {\n         // get the operand again\n-        let op = ecx.lazy_const_to_op(ty::LazyConst::Evaluated(value), value.ty)?;\n+        let op = ecx.const_to_op(value, None)?;\n         // downcast\n         let down = match variant {\n             None => op,\n@@ -502,7 +502,7 @@ pub fn const_variant_index<'a, 'tcx>(\n ) -> EvalResult<'tcx, VariantIdx> {\n     trace!(\"const_variant_index: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n-    let op = ecx.lazy_const_to_op(ty::LazyConst::Evaluated(val), val.ty)?;\n+    let op = ecx.const_to_op(val, None)?;\n     Ok(ecx.read_discriminant(op)?.1)\n }\n "}, {"sha": "4f34ffc128e6937abbdbe08dfc3760f6ac0ec5a7", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 34, "deletions": 43, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/235a6b7d065a2fc55ceee323e85b9309b16e84bf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235a6b7d065a2fc55ceee323e85b9309b16e84bf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=235a6b7d065a2fc55ceee323e85b9309b16e84bf", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::interpret::{\n     EvalResult, EvalErrorKind,\n };\n use super::{\n-    EvalContext, Machine, AllocMap, Allocation, AllocationExtra,\n+    EvalContext, Machine,\n     MemPlace, MPlaceTy, PlaceTy, Place, MemoryKind,\n };\n pub use rustc::mir::interpret::ScalarMaybeUndef;\n@@ -545,14 +545,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             Move(ref place) =>\n                 self.eval_place_to_op(place, layout)?,\n \n-            Constant(ref constant) => {\n-                let layout = from_known_layout(layout, || {\n-                    let ty = self.monomorphize(mir_op.ty(self.mir(), *self.tcx))?;\n-                    self.layout_of(ty)\n-                })?;\n-                let op = self.const_value_to_op(*constant.literal)?;\n-                OpTy { op, layout }\n-            }\n+            Constant(ref constant) => self.lazy_const_to_op(*constant.literal, layout)?,\n         };\n         trace!(\"{:?}: {:?}\", mir_op, *op);\n         Ok(op)\n@@ -568,38 +561,55 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             .collect()\n     }\n \n-    // Used when Miri runs into a constant, and (indirectly through lazy_const_to_op) by CTFE.\n-    fn const_value_to_op(\n+    // Used when Miri runs into a constant, and by CTFE.\n+    pub fn lazy_const_to_op(\n         &self,\n         val: ty::LazyConst<'tcx>,\n-    ) -> EvalResult<'tcx, Operand<M::PointerTag>> {\n-        trace!(\"const_value_to_op: {:?}\", val);\n-        let val = match val {\n+        layout: Option<TyLayout<'tcx>>,\n+    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        trace!(\"const_to_op: {:?}\", val);\n+        match val {\n             ty::LazyConst::Unevaluated(def_id, substs) => {\n                 let instance = self.resolve(def_id, substs)?;\n-                return Ok(*OpTy::from(self.const_eval_raw(GlobalId {\n+                return Ok(OpTy::from(self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: None,\n                 })?));\n             },\n-            ty::LazyConst::Evaluated(c) => c,\n-        };\n-        match val.val {\n+            ty::LazyConst::Evaluated(c) => self.const_to_op(c, layout),\n+        }\n+    }\n+\n+    // Used when Miri runs into a constant, and (indirectly through lazy_const_to_op) by CTFE.\n+    pub fn const_to_op(\n+        &self,\n+        val: ty::Const<'tcx>,\n+        layout: Option<TyLayout<'tcx>>,\n+    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        let layout = from_known_layout(layout, || {\n+            let ty = self.monomorphize(val.ty)?;\n+            self.layout_of(ty)\n+        })?;\n+        let op = match val.val {\n             ConstValue::ByRef(id, alloc, offset) => {\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n                 // where none should happen -- and for `static mut`, we copy on demand anyway.\n-                Ok(Operand::Indirect(\n+                Operand::Indirect(\n                     MemPlace::from_ptr(Pointer::new(id, offset), alloc.align)\n-                ).with_default_tag())\n+                ).with_default_tag()\n             },\n             ConstValue::Slice(a, b) =>\n-                Ok(Operand::Immediate(Immediate::ScalarPair(\n+                Operand::Immediate(Immediate::ScalarPair(\n                     a.into(),\n                     Scalar::from_uint(b, self.tcx.data_layout.pointer_size).into(),\n-                )).with_default_tag()),\n+                )).with_default_tag(),\n             ConstValue::Scalar(x) =>\n-                Ok(Operand::Immediate(Immediate::Scalar(x.into())).with_default_tag()),\n-        }\n+                Operand::Immediate(Immediate::Scalar(x.into())).with_default_tag(),\n+        };\n+        Ok(OpTy {\n+            op,\n+            layout,\n+        })\n     }\n \n     /// Read discriminant, return the runtime value as well as the variant index.\n@@ -699,23 +709,4 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             }\n         })\n     }\n-\n-}\n-\n-impl<'a, 'mir, 'tcx, M> EvalContext<'a, 'mir, 'tcx, M>\n-where\n-    M: Machine<'a, 'mir, 'tcx, PointerTag=()>,\n-    // FIXME: Working around https://github.com/rust-lang/rust/issues/24159\n-    M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation<(), M::AllocExtra>)>,\n-    M::AllocExtra: AllocationExtra<(), M::MemoryExtra>,\n-{\n-    // FIXME: CTFE should use allocations, then we can remove this.\n-    pub(crate) fn lazy_const_to_op(\n-        &self,\n-        cnst: ty::LazyConst<'tcx>,\n-        ty: ty::Ty<'tcx>,\n-    ) -> EvalResult<'tcx, OpTy<'tcx>> {\n-        let op = self.const_value_to_op(cnst)?;\n-        Ok(OpTy { op, layout: self.layout_of(ty)? })\n-    }\n }"}, {"sha": "d69a5130b24d0c60dc8b757d12054a9e2fec77e7", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/235a6b7d065a2fc55ceee323e85b9309b16e84bf/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235a6b7d065a2fc55ceee323e85b9309b16e84bf/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=235a6b7d065a2fc55ceee323e85b9309b16e84bf", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         source_info: SourceInfo,\n     ) -> Option<Const<'tcx>> {\n         self.ecx.tcx.span = source_info.span;\n-        match self.ecx.lazy_const_to_op(*c.literal, c.ty) {\n+        match self.ecx.lazy_const_to_op(*c.literal, None) {\n             Ok(op) => {\n                 Some((op, c.span))\n             },"}]}