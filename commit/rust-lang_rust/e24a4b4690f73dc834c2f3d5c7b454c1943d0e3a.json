{"sha": "e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNGE0YjQ2OTBmNzNkYzgzNGMyZjNkNWM3YjQ1NGMxOTQzZDBlM2E=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-28T01:11:03Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-11-12T15:39:55Z"}, "message": "Add type to `ConstKind::Placeholder`", "tree": {"sha": "aee17e1c4c960c6fd6c0ec7a7c7ac3759291569d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aee17e1c4c960c6fd6c0ec7a7c7ac3759291569d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "html_url": "https://github.com/rust-lang/rust/commit/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e968b640e8ff76fa8be4b48b70ab80ea577800", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e968b640e8ff76fa8be4b48b70ab80ea577800", "html_url": "https://github.com/rust-lang/rust/commit/07e968b640e8ff76fa8be4b48b70ab80ea577800"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "f554b51800a72bc14e8c5e2d756e3f084a791e21", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "patch": "@@ -277,7 +277,7 @@ impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n struct Canonicalizer<'cx, 'tcx> {\n     infcx: Option<&'cx InferCtxt<'cx, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n-    variables: SmallVec<[CanonicalVarInfo; 8]>,\n+    variables: SmallVec<[CanonicalVarInfo<'tcx>; 8]>,\n     query_state: &'cx mut OriginalQueryValues<'tcx>,\n     // Note that indices is only used once `var_values` is big enough to be\n     // heap-allocated.\n@@ -542,7 +542,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// or returns an existing variable if `kind` has already been\n     /// seen. `kind` is expected to be an unbound variable (or\n     /// potentially a free region).\n-    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: GenericArg<'tcx>) -> BoundVar {\n+    fn canonical_var(&mut self, info: CanonicalVarInfo<'tcx>, kind: GenericArg<'tcx>) -> BoundVar {\n         let Canonicalizer { variables, query_state, indices, .. } = self;\n \n         let var_values = &mut query_state.var_values;\n@@ -621,7 +621,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// representing the region `r`; return a region referencing it.\n     fn canonical_var_for_region(\n         &mut self,\n-        info: CanonicalVarInfo,\n+        info: CanonicalVarInfo<'tcx>,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n@@ -633,7 +633,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// if `ty_var` is bound to anything; if so, canonicalize\n     /// *that*. Otherwise, create a new canonical variable for\n     /// `ty_var`.\n-    fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n+    fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n         let infcx = self.infcx.expect(\"encountered ty-var without infcx\");\n         let bound_to = infcx.shallow_resolve(ty_var);\n         if bound_to != ty_var {\n@@ -650,7 +650,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// `const_var`.\n     fn canonicalize_const_var(\n         &mut self,\n-        info: CanonicalVarInfo,\n+        info: CanonicalVarInfo<'tcx>,\n         const_var: &'tcx ty::Const<'tcx>,\n     ) -> &'tcx ty::Const<'tcx> {\n         let infcx = self.infcx.expect(\"encountered const-var without infcx\");"}, {"sha": "0c26639e9b0fec31a947e491217ac87dac5c5c61", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "patch": "@@ -82,7 +82,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     fn instantiate_canonical_vars(\n         &self,\n         span: Span,\n-        variables: &List<CanonicalVarInfo>,\n+        variables: &List<CanonicalVarInfo<'tcx>>,\n         universe_map: impl Fn(ty::UniverseIndex) -> ty::UniverseIndex,\n     ) -> CanonicalVarValues<'tcx> {\n         let var_values: IndexVec<BoundVar, GenericArg<'tcx>> = variables\n@@ -100,7 +100,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     fn instantiate_canonical_var(\n         &self,\n         span: Span,\n-        cv_info: CanonicalVarInfo,\n+        cv_info: CanonicalVarInfo<'tcx>,\n         universe_map: impl Fn(ty::UniverseIndex) -> ty::UniverseIndex,\n     ) -> GenericArg<'tcx> {\n         match cv_info.kind {\n@@ -154,7 +154,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 self.tcx\n                     .mk_const(ty::Const {\n                         val: ty::ConstKind::Placeholder(placeholder_mapped),\n-                        ty: self.tcx.ty_error(), // FIXME(const_generics)\n+                        ty: name.ty,\n                     })\n                     .into()\n             }"}, {"sha": "4a5fd4b2aa5c83ef18e900a59c7b2c1ed544395a", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             self.tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                     universe: next_universe,\n-                    name: bound_var,\n+                    name: ty::BoundConst { var: bound_var, ty },\n                 }),\n                 ty,\n             })"}, {"sha": "947b016a1fc93df413067a1a36d5730f98612424", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "patch": "@@ -40,7 +40,7 @@ pub struct Canonical<'tcx, V> {\n     pub value: V,\n }\n \n-pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo>;\n+pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n \n /// A set of values corresponding to the canonical variables from some\n /// `Canonical`. You can give these values to\n@@ -88,11 +88,11 @@ impl Default for OriginalQueryValues<'tcx> {\n /// a copy of the canonical value in some other inference context,\n /// with fresh inference variables replacing the canonical values.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable, HashStable)]\n-pub struct CanonicalVarInfo {\n-    pub kind: CanonicalVarKind,\n+pub struct CanonicalVarInfo<'tcx> {\n+    pub kind: CanonicalVarKind<'tcx>,\n }\n \n-impl CanonicalVarInfo {\n+impl<'tcx> CanonicalVarInfo<'tcx> {\n     pub fn universe(&self) -> ty::UniverseIndex {\n         self.kind.universe()\n     }\n@@ -113,7 +113,7 @@ impl CanonicalVarInfo {\n /// in the type-theory sense of the term -- i.e., a \"meta\" type system\n /// that analyzes type-like values.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable, HashStable)]\n-pub enum CanonicalVarKind {\n+pub enum CanonicalVarKind<'tcx> {\n     /// Some kind of type inference variable.\n     Ty(CanonicalTyVarKind),\n \n@@ -132,10 +132,10 @@ pub enum CanonicalVarKind {\n     Const(ty::UniverseIndex),\n \n     /// A \"placeholder\" that represents \"any const\".\n-    PlaceholderConst(ty::PlaceholderConst),\n+    PlaceholderConst(ty::PlaceholderConst<'tcx>),\n }\n \n-impl CanonicalVarKind {\n+impl<'tcx> CanonicalVarKind<'tcx> {\n     pub fn universe(self) -> ty::UniverseIndex {\n         match self {\n             CanonicalVarKind::Ty(kind) => match kind {\n@@ -287,9 +287,11 @@ pub type QueryOutlivesConstraint<'tcx> =\n     ty::Binder<ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>;\n \n CloneTypeFoldableAndLiftImpls! {\n-    crate::infer::canonical::Certainty,\n-    crate::infer::canonical::CanonicalVarInfo,\n-    crate::infer::canonical::CanonicalVarKind,\n+    for <'tcx> {\n+        crate::infer::canonical::Certainty,\n+        crate::infer::canonical::CanonicalVarInfo<'tcx>,\n+        crate::infer::canonical::CanonicalVarKind<'tcx>,\n+    }\n }\n \n CloneTypeFoldableImpls! {"}, {"sha": "1def4936860f17f1b8b486a19548e2f89e3685ed", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "patch": "@@ -278,7 +278,7 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Region<'tcx> {\n impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for CanonicalVarInfos<'tcx> {\n     fn decode(decoder: &mut D) -> Result<Self, D::Error> {\n         let len = decoder.read_usize()?;\n-        let interned: Result<Vec<CanonicalVarInfo>, _> =\n+        let interned: Result<Vec<CanonicalVarInfo<'tcx>>, _> =\n             (0..len).map(|_| Decodable::decode(decoder)).collect();\n         Ok(decoder.tcx().intern_canonical_var_infos(interned?.as_slice()))\n     }"}, {"sha": "ca51f2a941174001d221c44284855dc29874a8c0", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "patch": "@@ -23,7 +23,7 @@ pub enum ConstKind<'tcx> {\n     Bound(ty::DebruijnIndex, ty::BoundVar),\n \n     /// A placeholder const - universally quantified higher-ranked const.\n-    Placeholder(ty::PlaceholderConst),\n+    Placeholder(ty::PlaceholderConst<'tcx>),\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that."}, {"sha": "4b7d6148fd39a6b3f16ce803613f7e766d2b4844", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "patch": "@@ -83,7 +83,7 @@ pub struct CtxtInterners<'tcx> {\n     type_: InternedSet<'tcx, TyS<'tcx>>,\n     type_list: InternedSet<'tcx, List<Ty<'tcx>>>,\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n-    canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo>>,\n+    canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind>,\n     existential_predicates: InternedSet<'tcx, List<ExistentialPredicate<'tcx>>>,\n     predicate: InternedSet<'tcx, PredicateInner<'tcx>>,\n@@ -1613,7 +1613,7 @@ nop_lift! {predicate; &'a PredicateInner<'a> => &'tcx PredicateInner<'tcx>}\n nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n nop_list_lift! {existential_predicates; ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n nop_list_lift! {predicates; Predicate<'a> => Predicate<'tcx>}\n-nop_list_lift! {canonical_var_infos; CanonicalVarInfo => CanonicalVarInfo}\n+nop_list_lift! {canonical_var_infos; CanonicalVarInfo<'a> => CanonicalVarInfo<'tcx>}\n nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n \n // This is the impl for `&'a InternalSubsts<'a>`.\n@@ -2049,7 +2049,7 @@ macro_rules! slice_interners {\n slice_interners!(\n     type_list: _intern_type_list(Ty<'tcx>),\n     substs: _intern_substs(GenericArg<'tcx>),\n-    canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo),\n+    canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),\n     existential_predicates: _intern_existential_predicates(ExistentialPredicate<'tcx>),\n     predicates: _intern_predicates(Predicate<'tcx>),\n     projs: _intern_projs(ProjectionKind),\n@@ -2448,7 +2448,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }\n     }\n \n-    pub fn intern_canonical_var_infos(self, ts: &[CanonicalVarInfo]) -> CanonicalVarInfos<'tcx> {\n+    pub fn intern_canonical_var_infos(\n+        self,\n+        ts: &[CanonicalVarInfo<'tcx>],\n+    ) -> CanonicalVarInfos<'tcx> {\n         if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }\n     }\n "}, {"sha": "1f0164562ec84a459f10a706fdcc6aa8a71f91d2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e24a4b4690f73dc834c2f3d5c7b454c1943d0e3a", "patch": "@@ -1576,11 +1576,9 @@ impl UniverseIndex {\n     }\n }\n \n-/// The \"placeholder index\" fully defines a placeholder region.\n-/// Placeholder regions are identified by both a **universe** as well\n-/// as a \"bound-region\" within that universe. The `bound_region` is\n-/// basically a name -- distinct bound regions within the same\n-/// universe are just two regions with an unknown relationship to one\n+/// The \"placeholder index\" fully defines a placeholder region, type, or const. Placeholders are\n+/// identified by both a universe, as well as a name residing within that universe. Distinct bound\n+/// regions/types/consts within the same universe simply have an unknown relationship to one\n /// another.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]\n pub struct Placeholder<T> {\n@@ -1602,7 +1600,14 @@ pub type PlaceholderRegion = Placeholder<BoundRegion>;\n \n pub type PlaceholderType = Placeholder<BoundVar>;\n \n-pub type PlaceholderConst = Placeholder<BoundVar>;\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(TyEncodable, TyDecodable, PartialOrd, Ord)]\n+pub struct BoundConst<'tcx> {\n+    pub var: BoundVar,\n+    pub ty: Ty<'tcx>,\n+}\n+\n+pub type PlaceholderConst<'tcx> = Placeholder<BoundConst<'tcx>>;\n \n /// A `DefId` which is potentially bundled with its corresponding generic parameter\n /// in case `did` is a const argument."}]}