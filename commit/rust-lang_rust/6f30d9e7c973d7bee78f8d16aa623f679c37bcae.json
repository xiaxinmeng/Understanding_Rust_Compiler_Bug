{"sha": "6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMzBkOWU3Yzk3M2Q3YmVlNzhmOGQxNmFhNjIzZjY3OWMzN2JjYWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-06-12T04:01:41Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-06-13T02:42:54Z"}, "message": "Reformat tests", "tree": {"sha": "3a8ecca75b37ca838bfd896558c7b8d130d2324d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a8ecca75b37ca838bfd896558c7b8d130d2324d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "html_url": "https://github.com/rust-lang/rust/commit/6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f512948a03cd24c2f8a056be0a2f53675802fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f512948a03cd24c2f8a056be0a2f53675802fd2", "html_url": "https://github.com/rust-lang/rust/commit/1f512948a03cd24c2f8a056be0a2f53675802fd2"}], "stats": {"total": 2794, "additions": 1651, "deletions": 1143}, "files": [{"sha": "3b7c47f0fca65307f62682fbd3d1620edc231ab1", "filename": "src/imports.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -177,13 +177,11 @@ impl Rewrite for ast::ViewPath {\n                 let prefix_shape = try_opt!(shape.sub_width(ident_str.len() + 4));\n                 let path_str = try_opt!(rewrite_view_path_prefix(path, context, prefix_shape));\n \n-                Some(\n-                    if path.segments.last().unwrap().identifier == ident {\n-                        path_str\n-                    } else {\n-                        format!(\"{} as {}\", path_str, ident_str)\n-                    },\n-                )\n+                Some(if path.segments.last().unwrap().identifier == ident {\n+                    path_str\n+                } else {\n+                    format!(\"{} as {}\", path_str, ident_str)\n+                })\n             }\n         }\n     }\n@@ -392,13 +390,11 @@ pub fn rewrite_use_list(\n     };\n     let list_str = try_opt!(write_list(&items[first_index..], &fmt));\n \n-    Some(\n-        if path_str.is_empty() {\n-            format!(\"{{{}}}\", list_str)\n-        } else {\n-            format!(\"{}::{{{}}}\", path_str, list_str)\n-        },\n-    )\n+    Some(if path_str.is_empty() {\n+        format!(\"{{{}}}\", list_str)\n+    } else {\n+        format!(\"{}::{{{}}}\", path_str, list_str)\n+    })\n }\n \n // Returns true when self item was found."}, {"sha": "01aa7b389d5c1f57783796f2b4a46eb8a098fdb3", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1990,13 +1990,11 @@ fn rewrite_fn_base(\n             });\n             let snippet = snippet.trim();\n             if !snippet.is_empty() {\n-                result.push(\n-                    if original_starts_with_newline {\n-                        '\\n'\n-                    } else {\n-                        ' '\n-                    },\n-                );\n+                result.push(if original_starts_with_newline {\n+                    '\\n'\n+                } else {\n+                    ' '\n+                });\n                 result.push_str(snippet);\n                 if original_ends_with_newline {\n                     force_new_line_for_brace = true;"}, {"sha": "a52f42157b87e0368a6e23bd60a7a05ae46a2b2d", "filename": "src/patterns.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -336,23 +336,19 @@ fn rewrite_tuple_pat(\n \n     match path_str {\n         Some(path_str) => {\n-            Some(\n-                if context.config.spaces_within_parens() {\n-                    format!(\"{}( {} )\", path_str, list)\n-                } else {\n-                    format!(\"{}({})\", path_str, list)\n-                },\n-            )\n+            Some(if context.config.spaces_within_parens() {\n+                format!(\"{}( {} )\", path_str, list)\n+            } else {\n+                format!(\"{}({})\", path_str, list)\n+            })\n         }\n         None => {\n             let comma = if add_comma { \",\" } else { \"\" };\n-            Some(\n-                if context.config.spaces_within_parens() {\n-                    format!(\"( {}{} )\", list, comma)\n-                } else {\n-                    format!(\"({}{})\", list, comma)\n-                },\n-            )\n+            Some(if context.config.spaces_within_parens() {\n+                format!(\"( {}{} )\", list, comma)\n+            } else {\n+                format!(\"({}{})\", list, comma)\n+            })\n         }\n     }\n }"}, {"sha": "b1cea7df864245aa514cf49bdfc4fdef9f1dceaf", "filename": "src/types.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -348,13 +348,11 @@ where\n         String::new()\n     };\n \n-    Some(\n-        if context.config.spaces_within_parens() {\n-            format!(\"( {} ){}{}\", list_str, infix, output)\n-        } else {\n-            format!(\"({}){}{}\", list_str, infix, output)\n-        },\n-    )\n+    Some(if context.config.spaces_within_parens() {\n+        format!(\"( {} ){}{}\", list_str, infix, output)\n+    } else {\n+        format!(\"({}){}{}\", list_str, infix, output)\n+    })\n }\n \n fn type_bound_colon(context: &RewriteContext) -> &'static str {\n@@ -588,13 +586,13 @@ impl Rewrite for ast::PolyTraitRef {\n                 ),\n             ));\n \n-            Some(\n-                if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n-                    format!(\"for< {} > {}\", lifetime_str, path_str)\n-                } else {\n-                    format!(\"for<{}> {}\", lifetime_str, path_str)\n-                },\n-            )\n+            Some(if context.config.spaces_within_angle_brackets() &&\n+                lifetime_str.len() > 0\n+            {\n+                format!(\"for< {} > {}\", lifetime_str, path_str)\n+            } else {\n+                format!(\"for<{}> {}\", lifetime_str, path_str)\n+            })\n         } else {\n             self.trait_ref.rewrite(context, shape)\n         }"}, {"sha": "970d9f0e2eb55542f1a3b01e1e8e4638f3d42c70", "filename": "tests/system.rs", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -84,9 +84,9 @@ fn assert_output(source: &str, expected_filename: &str) {\n \n     let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n     let mut expected_text = String::new();\n-    expected_file\n-        .read_to_string(&mut expected_text)\n-        .expect(\"Failed reading target\");\n+    expected_file.read_to_string(&mut expected_text).expect(\n+        \"Failed reading target\",\n+    );\n \n     let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n     if compare.len() > 0 {\n@@ -136,9 +136,11 @@ fn self_tests() {\n         warnings += format_report.warning_count();\n     }\n \n-    assert!(warnings == 0,\n-            \"Rustfmt's code generated {} warnings\",\n-            warnings);\n+    assert!(\n+        warnings == 0,\n+        \"Rustfmt's code generated {} warnings\",\n+        warnings\n+    );\n }\n \n #[test]\n@@ -170,7 +172,8 @@ fn format_lines_errors_are_reported() {\n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n fn check_files<I>(files: I) -> (Vec<FormatReport>, u32, u32)\n-    where I: Iterator<Item = String>\n+where\n+    I: Iterator<Item = String>,\n {\n     let mut count = 0;\n     let mut fails = 0;\n@@ -217,10 +220,12 @@ fn read_config(filename: &str) -> Config {\n     let mut config = if !sig_comments.is_empty() {\n         get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]))\n     } else {\n-        get_config(Path::new(filename)\n-                       .with_extension(\"toml\")\n-                       .file_name()\n-                       .and_then(std::ffi::OsStr::to_str))\n+        get_config(\n+            Path::new(filename)\n+                .with_extension(\"toml\")\n+                .file_name()\n+                .and_then(std::ffi::OsStr::to_str),\n+        )\n     };\n \n     for (key, val) in &sig_comments {\n@@ -280,9 +285,9 @@ fn get_config(config_file: Option<&str>) -> Config {\n \n     let mut def_config_file = fs::File::open(config_file_name).expect(\"Couldn't open config\");\n     let mut def_config = String::new();\n-    def_config_file\n-        .read_to_string(&mut def_config)\n-        .expect(\"Couldn't read config\");\n+    def_config_file.read_to_string(&mut def_config).expect(\n+        \"Couldn't read config\",\n+    );\n \n     Config::from_toml(&def_config).expect(\"Invalid toml\")\n }\n@@ -305,26 +310,29 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n         .take_while(|line| line_regex.is_match(&line))\n         .filter_map(|line| {\n             regex.captures_iter(&line).next().map(|capture| {\n-                (capture\n-                     .get(1)\n-                     .expect(\"Couldn't unwrap capture\")\n-                     .as_str()\n-                     .to_owned(),\n-                 capture\n-                     .get(2)\n-                     .expect(\"Couldn't unwrap capture\")\n-                     .as_str()\n-                     .to_owned())\n+                (\n+                    capture\n+                        .get(1)\n+                        .expect(\"Couldn't unwrap capture\")\n+                        .as_str()\n+                        .to_owned(),\n+                    capture\n+                        .get(2)\n+                        .expect(\"Couldn't unwrap capture\")\n+                        .as_str()\n+                        .to_owned(),\n+                )\n             })\n         })\n         .collect()\n }\n \n // Compare output to input.\n // TODO: needs a better name, more explanation.\n-fn handle_result(result: HashMap<String, String>,\n-                 target: Option<&str>)\n-                 -> Result<(), HashMap<String, Vec<Mismatch>>> {\n+fn handle_result(\n+    result: HashMap<String, String>,\n+    target: Option<&str>,\n+) -> Result<(), HashMap<String, Vec<Mismatch>>> {\n     let mut failures = HashMap::new();\n \n     for (file_name, fmt_text) in result {\n@@ -339,8 +347,10 @@ fn handle_result(result: HashMap<String, String>,\n \n         if fmt_text != text {\n             let diff = make_diff(&text, &fmt_text, DIFF_CONTEXT_SIZE);\n-            assert!(!diff.is_empty(),\n-                    \"Empty diff? Maybe due to a missing a newline at the end of a file?\");\n+            assert!(\n+                !diff.is_empty(),\n+                \"Empty diff? Maybe due to a missing a newline at the end of a file?\"\n+            );\n             failures.insert(file_name, diff);\n         }\n     }\n@@ -374,15 +384,21 @@ fn get_target(file_name: &str, target: Option<&str>) -> String {\n #[test]\n fn rustfmt_diff_make_diff_tests() {\n     let diff = make_diff(\"a\\nb\\nc\\nd\", \"a\\ne\\nc\\nd\", 3);\n-    assert_eq!(diff,\n-               vec![Mismatch {\n-                        line_number: 1,\n-                        lines: vec![DiffLine::Context(\"a\".into()),\n-                                    DiffLine::Resulting(\"b\".into()),\n-                                    DiffLine::Expected(\"e\".into()),\n-                                    DiffLine::Context(\"c\".into()),\n-                                    DiffLine::Context(\"d\".into())],\n-                    }]);\n+    assert_eq!(\n+        diff,\n+        vec![\n+            Mismatch {\n+                line_number: 1,\n+                lines: vec![\n+                    DiffLine::Context(\"a\".into()),\n+                    DiffLine::Resulting(\"b\".into()),\n+                    DiffLine::Expected(\"e\".into()),\n+                    DiffLine::Context(\"c\".into()),\n+                    DiffLine::Context(\"d\".into()),\n+                ],\n+            },\n+        ]\n+    );\n }\n \n #[test]"}, {"sha": "1bd7dbc1d91fdad9b6e7770d96e899cdc7448d01", "filename": "tests/target/assignment.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fassignment.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -19,10 +19,14 @@ fn main() {\n \n fn break_meee() {\n     {\n-        (block_start, block_size, margin_block_start, margin_block_end) =\n-            match (block_start, block_end, block_size) {\n-                x => 1,\n-                _ => 2,\n-            };\n+        (\n+            block_start,\n+            block_size,\n+            margin_block_start,\n+            margin_block_end,\n+        ) = match (block_start, block_end, block_size) {\n+            x => 1,\n+            _ => 2,\n+        };\n     }\n }"}, {"sha": "48222b14e6ec3347c5407683444d902ffd60adaf", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -17,15 +17,15 @@ fn main() {\n     // Test case where first chain element isn't a path, but is shorter than\n     // the size of a tab.\n     x().y(|| match cond() {\n-              true => (),\n-              false => (),\n-          });\n+        true => (),\n+        false => (),\n+    });\n \n     loong_func().quux(move || if true {\n-                          1\n-                      } else {\n-                          2\n-                      });\n+        1\n+    } else {\n+        2\n+    });\n \n     some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n         let x = c;\n@@ -47,14 +47,15 @@ fn main() {\n     });\n \n     let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum =\n-        xxxxxxx.map(|x| x + 5)\n-               .map(|x| x / 2)\n-               .fold(0, |acc, x| acc + x);\n+        xxxxxxx.map(|x| x + 5).map(|x| x / 2).fold(\n+            0,\n+            |acc, x| acc + x,\n+        );\n \n     aaaaaaaaaaaaaaaa.map(|x| {\n-                             x += 1;\n-                             x\n-                         })\n+        x += 1;\n+        x\n+    })\n                     .filter(some_mod::some_filter)\n }\n \n@@ -82,11 +83,13 @@ fn floaters() {\n         match x {\n             PushParam => {\n                 // params are 1-indexed\n-                stack.push(mparams[match cur.to_digit(10) {\n-                                       Some(d) => d as usize - 1,\n-                                       None => return Err(\"bad param number\".to_owned()),\n-                                   }]\n-                           .clone());\n+                stack.push(\n+                    mparams[match cur.to_digit(10) {\n+                                Some(d) => d as usize - 1,\n+                                None => return Err(\"bad param number\".to_owned()),\n+                            }]\n+                    .clone(),\n+                );\n             }\n         }\n     }\n@@ -101,27 +104,27 @@ fn floaters() {\n \n     Foo { x: val }\n         .baz(|| {\n-                 force();\n-                 multiline();\n-             })\n+            force();\n+            multiline();\n+        })\n         .quux();\n \n     Foo {\n         y: i_am_multi_line,\n         z: ok,\n     }\n     .baz(|| {\n-             force();\n-             multiline();\n-         })\n+        force();\n+        multiline();\n+    })\n     .quux();\n \n     a +\n-    match x {\n-        true => \"yay!\",\n-        false => \"boo!\",\n-    }\n-    .bar()\n+        match x {\n+            true => \"yay!\",\n+            false => \"boo!\",\n+        }\n+        .bar()\n }\n \n fn is_replaced_content() -> bool {\n@@ -163,8 +166,10 @@ fn issue1434() {\n     for _ in 0..100 {\n         let prototype_id = PrototypeIdData::from_reader::<_, B>(&mut self.file_cursor)\n             .chain_err(|| {\n-                           format!(\"could not read prototype ID at offset {:#010x}\",\n-                                   current_offset)\n-                       })?;\n+                format!(\n+                    \"could not read prototype ID at offset {:#010x}\",\n+                    current_offset\n+                )\n+            })?;\n     }\n }"}, {"sha": "52e65b420e718af5f0dbb9797876763f1b20dc1b", "filename": "tests/target/chains.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -19,15 +19,15 @@ fn main() {\n     // Test case where first chain element isn't a path, but is shorter than\n     // the size of a tab.\n     x().y(|| match cond() {\n-              true => (),\n-              false => (),\n-          });\n+        true => (),\n+        false => (),\n+    });\n \n     loong_func().quux(move || if true {\n-                          1\n-                      } else {\n-                          2\n-                      });\n+        1\n+    } else {\n+        2\n+    });\n \n     some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n         let x = c;\n@@ -53,9 +53,9 @@ fn main() {\n \n     aaaaaaaaaaaaaaaa\n         .map(|x| {\n-                 x += 1;\n-                 x\n-             })\n+            x += 1;\n+            x\n+        })\n         .filter(some_mod::some_filter)\n }\n \n@@ -81,10 +81,12 @@ fn floaters() {\n         match x {\n             PushParam => {\n                 // params are 1-indexed\n-                stack.push(mparams[match cur.to_digit(10) {\n-                                       Some(d) => d as usize - 1,\n-                                       None => return Err(\"bad param number\".to_owned()),\n-                                   }].clone());\n+                stack.push(\n+                    mparams[match cur.to_digit(10) {\n+                                Some(d) => d as usize - 1,\n+                                None => return Err(\"bad param number\".to_owned()),\n+                            }].clone(),\n+                );\n             }\n         }\n     }\n@@ -98,25 +100,25 @@ fn floaters() {\n \n     Foo { x: val }\n         .baz(|| {\n-                 force();\n-                 multiline();\n-             })\n+            force();\n+            multiline();\n+        })\n         .quux();\n \n     Foo {\n         y: i_am_multi_line,\n         z: ok,\n     }.baz(|| {\n-              force();\n-              multiline();\n-          })\n+        force();\n+        multiline();\n+    })\n         .quux();\n \n     a +\n-    match x {\n-        true => \"yay!\",\n-        false => \"boo!\",\n-    }.bar()\n+        match x {\n+            true => \"yay!\",\n+            false => \"boo!\",\n+        }.bar()\n }\n \n fn is_replaced_content() -> bool {\n@@ -163,7 +165,7 @@ fn issue_1004() {\n     }?;\n \n     ty::tls::with(|tcx| {\n-                      let tap = ty::Binder(TraitAndProjections(principal, projections));\n-                      in_binder(f, tcx, &ty::Binder(\"\"), Some(tap))\n-                  })?;\n+        let tap = ty::Binder(TraitAndProjections(principal, projections));\n+        in_binder(f, tcx, &ty::Binder(\"\"), Some(tap))\n+    })?;\n }"}, {"sha": "4f35a7b413ad0f6ba66ad9a1b6df291dcca5731e", "filename": "tests/target/closure.rs", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -4,13 +4,17 @@\n fn main() {\n     let square = (|i: i32| i * i);\n \n-    let commented =\n-        |// first\n-         a, // argument\n-         // second\n-         b: WithType, // argument\n-         // ignored\n-         _| (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+    let commented = |// first\n+                     a, // argument\n+                     // second\n+                     b: WithType, // argument\n+                     // ignored\n+                     _| {\n+        (\n+            aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        )\n+    };\n \n     let block_body = move |xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n                            ref yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy| {\n@@ -91,20 +95,20 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         match (&left.node, &right.node) {\n             (&ExprBinary(l_op, ref ll, ref lr), &ExprBinary(r_op, ref rl, ref rr)) => {\n                 l_op.node == r_op.node && self.eq_expr(ll, rl) && self.eq_expr(lr, rr) ||\n-                swap_binop(l_op.node, ll, lr).map_or(false, |(l_op, ll, lr)| {\n-                    l_op == r_op.node && self.eq_expr(ll, rl) && self.eq_expr(lr, rr)\n-                })\n+                    swap_binop(l_op.node, ll, lr).map_or(false, |(l_op, ll, lr)| {\n+                        l_op == r_op.node && self.eq_expr(ll, rl) && self.eq_expr(lr, rr)\n+                    })\n             }\n         }\n     }\n }\n \n fn foo() {\n     lifetimes_iter___map(|lasdfasfd| {\n-                             let hi = if l.bounds.is_empty() {\n-                                 l.lifetime.span.hi\n-                             };\n-                         });\n+        let hi = if l.bounds.is_empty() {\n+            l.lifetime.span.hi\n+        };\n+    });\n }\n \n fn issue1405() {\n@@ -124,17 +128,18 @@ fn issue470() {\n     {\n         {\n             {\n-                let explicit_arg_decls = explicit_arguments\n-                    .into_iter()\n-                    .enumerate()\n-                    .map(|(index, (ty, pattern))| {\n-                             let lvalue = Lvalue::Arg(index as u32);\n-                             block = this.pattern(block,\n-                                                  argument_extent,\n-                                                  hair::PatternRef::Hair(pattern),\n-                                                  &lvalue);\n-                             ArgDecl { ty: ty }\n-                         });\n+                let explicit_arg_decls = explicit_arguments.into_iter().enumerate().map(|(index,\n+                  (ty,\n+                   pattern))| {\n+                    let lvalue = Lvalue::Arg(index as u32);\n+                    block = this.pattern(\n+                        block,\n+                        argument_extent,\n+                        hair::PatternRef::Hair(pattern),\n+                        &lvalue,\n+                    );\n+                    ArgDecl { ty: ty }\n+                });\n             }\n         }\n     }\n@@ -144,19 +149,17 @@ fn issue470() {\n impl Foo {\n     pub fn bar(&self) {\n         Some(SomeType {\n-                 push_closure_out_to_100_chars: iter(otherwise_it_works_ok\n-                                                         .into_iter()\n-                                                         .map(|f| Ok(f))),\n-             })\n+            push_closure_out_to_100_chars: iter(otherwise_it_works_ok.into_iter().map(|f| Ok(f))),\n+        })\n     }\n }\n \n fn issue1329() {\n     aaaaaaaaaaaaaaaa\n         .map(|x| {\n-                 x += 1;\n-                 x\n-             })\n+            x += 1;\n+            x\n+        })\n         .filter\n }\n "}, {"sha": "a50c147de30d4801ec78572c21fe3347c566cad1", "filename": "tests/target/comment.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -37,20 +37,22 @@ fn test() {\n \n     // #1388\n     const EXCEPTION_PATHS: &'static [&'static str] =\n-        &[// std crates\n-          \"src/libstd/sys/\", // Platform-specific code for std lives here.\n-          \"src/bootstrap\"];\n+        &[\n+            // std crates\n+            \"src/libstd/sys/\", // Platform-specific code for std lives here.\n+            \"src/bootstrap\",\n+        ];\n }\n \n /// test123\n fn doc_comment() {}\n \n fn chains() {\n     foo.bar(|| {\n-                let x = 10;\n-                // comment\n-                x\n-            })\n+        let x = 10;\n+        // comment\n+        x\n+    })\n }\n \n fn issue_1086() {"}, {"sha": "9a28c81a39ed8e6aa29dca7c847de76d015f9d83", "filename": "tests/target/comments-fn.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fcomments-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fcomments-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-fn.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,17 +1,19 @@\n // Test comments on functions are preserved.\n \n // Comment on foo.\n-fn foo<F, G>(a: aaaaaaaaaaaaa, // A comment\n-             b: bbbbbbbbbbbbb, // a second comment\n-             c: ccccccccccccc,\n-             // Newline comment\n-             d: ddddddddddddd,\n-             //  A multi line comment\n-             // between args.\n-             e: eeeeeeeeeeeee /* comment before paren */)\n-             -> bar\n-    where F: Foo, // COmment after where clause\n-          G: Goo // final comment\n+fn foo<F, G>(\n+    a: aaaaaaaaaaaaa, // A comment\n+    b: bbbbbbbbbbbbb, // a second comment\n+    c: ccccccccccccc,\n+    // Newline comment\n+    d: ddddddddddddd,\n+    //  A multi line comment\n+    // between args.\n+    e: eeeeeeeeeeeee, /* comment before paren */\n+) -> bar\n+where\n+    F: Foo, // COmment after where clause\n+    G: Goo, // final comment\n {\n \n }\n@@ -20,6 +22,8 @@ fn bar<F /* comment on F */, G /* comment on G */>() {}\n \n fn baz() -> Baz /* Comment after return type */ {}\n \n-fn some_fn<T>() where T: Eq // some comment\n+fn some_fn<T>()\n+where\n+    T: Eq, // some comment\n {\n }"}, {"sha": "1265ebe0d8b1a796b607e819b3e335c8160a5659", "filename": "tests/target/configs-array_width-above.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-array_width-above.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-array_width-above.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-array_width-above.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,11 +2,13 @@\n // Array width\n \n fn main() {\n-    let lorem = vec![\"ipsum\",\n-                     \"dolor\",\n-                     \"sit\",\n-                     \"amet\",\n-                     \"consectetur\",\n-                     \"adipiscing\",\n-                     \"elit\"];\n+    let lorem = vec![\n+        \"ipsum\",\n+        \"dolor\",\n+        \"sit\",\n+        \"amet\",\n+        \"consectetur\",\n+        \"adipiscing\",\n+        \"elit\",\n+    ];\n }"}, {"sha": "c417e28d99c715e0f44f8f140a9c896aca1ff730", "filename": "tests/target/configs-chain_split_single_child-true.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,6 +1,7 @@\n // rustfmt-chain_split_single_child: true\n \n fn main() {\n-    let files = fs::read_dir(\"tests/source\")\n-        .expect(\"Couldn't read source dir\");\n+    let files = fs::read_dir(\"tests/source\").expect(\n+        \"Couldn't read source dir\",\n+    );\n }"}, {"sha": "21b47a8d7ca65720f6f490c1c5a9c53782a1cdfc", "filename": "tests/target/configs-closure_block_indent_threshold-10.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-closure_block_indent_threshold-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-closure_block_indent_threshold-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-closure_block_indent_threshold-10.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -3,10 +3,10 @@\n \n fn main() {\n     lorem_ipsum(|| {\n-                    println!(\"lorem\");\n-                    println!(\"ipsum\");\n-                    println!(\"dolor\");\n-                    println!(\"sit\");\n-                    println!(\"amet\");\n-                });\n+        println!(\"lorem\");\n+        println!(\"ipsum\");\n+        println!(\"dolor\");\n+        println!(\"sit\");\n+        println!(\"amet\");\n+    });\n }"}, {"sha": "7bc949e55180b72a7088a212bdbee7dd1a77aacf", "filename": "tests/target/configs-fn_args_density-compressed.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_density-compressed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_density-compressed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_density-compressed.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -8,11 +8,15 @@ trait Lorem {\n         // body\n     }\n \n-    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n-             adipiscing: Adipiscing, elit: Elit);\n+    fn lorem(\n+        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n+        adipiscing: Adipiscing, elit: Elit\n+    );\n \n-    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n-             adipiscing: Adipiscing, elit: Elit) {\n+    fn lorem(\n+        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n+        adipiscing: Adipiscing, elit: Elit\n+    ) {\n         // body\n     }\n }"}, {"sha": "1a0f127f59cb5f48542c111e4ba5de31b0c16561", "filename": "tests/target/configs-fn_args_density-compressed_if_empty.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_density-compressed_if_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_density-compressed_if_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_density-compressed_if_empty.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -8,25 +8,29 @@ trait Lorem {\n         // body\n     }\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: onsectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit);\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: onsectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    );\n \n     // FIXME: Previous line should be formatted like this:\n     // fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n     //          adipiscing: Adipiscing, elit: Elit);\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: onsectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit) {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: onsectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    ) {\n         // body\n     }\n }"}, {"sha": "6ee43b41a195bc55b45f9c5eeac91ef225ddf7ed", "filename": "tests/target/configs-fn_args_density-tall.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_density-tall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_density-tall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_density-tall.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -8,21 +8,25 @@ trait Lorem {\n         // body\n     }\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: onsectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit);\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: onsectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    );\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: onsectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit) {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: onsectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    ) {\n         // body\n     }\n }"}, {"sha": "d48b3492452ef786d752d470c4e15e3aeb66ccf3", "filename": "tests/target/configs-fn_args_density-vertical.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_density-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_density-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_density-vertical.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,33 +2,41 @@\n // Function arguments density\n \n trait Lorem {\n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet);\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+    );\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet) {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+    ) {\n         // body\n     }\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: onsectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit);\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: onsectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    );\n \n-    fn lorem(ipsum: Ipsum,\n-             dolor: Dolor,\n-             sit: Sit,\n-             amet: Amet,\n-             consectetur: onsectetur,\n-             adipiscing: Adipiscing,\n-             elit: Elit) {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: onsectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    ) {\n         // body\n     }\n }"}, {"sha": "031d39014b374061c0c254b02af13e132884bd58", "filename": "tests/target/configs-fn_args_paren_newline-false.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_paren_newline-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_paren_newline-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_paren_newline-false.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -5,7 +5,7 @@ fn lorem(\n     ipsum: Ipsum,\n     dolor: Dolor,\n     sit: Sit,\n-    amet: Amet)\n-    -> DolorSitAmetConsecteturAdipiscingElitLoremIpsumDolorSitAmetConsecteturAdipiscingElit {\n+    amet: Amet,\n+) -> DolorSitAmetConsecteturAdipiscingElitLoremIpsumDolorSitAmetConsecteturAdipiscingElit {\n     // body\n }"}, {"sha": "50e9e6484d8d1faf985fc34006b4b9a64bf820e0", "filename": "tests/target/configs-fn_args_paren_newline-true.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_paren_newline-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_args_paren_newline-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_paren_newline-true.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,10 +2,11 @@\n // Function arguments parenthesis on a newline\n \n fn lorem\n-    (ipsum: Ipsum,\n-     dolor: Dolor,\n-     sit: Sit,\n-     amet: Amet)\n-     -> DolorSitAmetConsecteturAdipiscingElitLoremIpsumDolorSitAmetConsecteturAdipiscingElit {\n+    (\n+    ipsum: Ipsum,\n+    dolor: Dolor,\n+    sit: Sit,\n+    amet: Amet,\n+) -> DolorSitAmetConsecteturAdipiscingElitLoremIpsumDolorSitAmetConsecteturAdipiscingElit {\n     // body\n }"}, {"sha": "543fc015cba3aaec253085282755334b831d3109", "filename": "tests/target/configs-fn_brace_style-always_next_line.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_brace_style-always_next_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_brace_style-always_next_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_brace_style-always_next_line.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -12,7 +12,8 @@ fn lorem(ipsum: usize)\n }\n \n fn lorem<T>(ipsum: T)\n-    where T: Add + Sub + Mul + Div\n+where\n+    T: Add + Sub + Mul + Div,\n {\n     // body\n }"}, {"sha": "498ed9f2a99556740ef9bb003e9dec0cdce10b67", "filename": "tests/target/configs-fn_brace_style-prefer_same_line.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_brace_style-prefer_same_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_brace_style-prefer_same_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_brace_style-prefer_same_line.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -10,6 +10,7 @@ fn lorem(ipsum: usize) {\n }\n \n fn lorem<T>(ipsum: T)\n-    where T: Add + Sub + Mul + Div {\n+where\n+    T: Add + Sub + Mul + Div, {\n     // body\n }"}, {"sha": "4da07441eaa943b248125f13f96518ca53fdad19", "filename": "tests/target/configs-fn_brace_style-same_line_where.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_brace_style-same_line_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_brace_style-same_line_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_brace_style-same_line_where.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -10,7 +10,8 @@ fn lorem(ipsum: usize) {\n }\n \n fn lorem<T>(ipsum: T)\n-    where T: Add + Sub + Mul + Div\n+where\n+    T: Add + Sub + Mul + Div,\n {\n     // body\n }"}, {"sha": "3f84928ed59fe646364c382746c92aaa1faa25ef", "filename": "tests/target/configs-fn_call_width-above.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_call_width-above.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_call_width-above.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_width-above.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,12 +2,14 @@\n // Function call width\n \n fn main() {\n-    lorem(\"lorem\",\n-          \"ipsum\",\n-          \"dolor\",\n-          \"sit\",\n-          \"amet\",\n-          \"consectetur\",\n-          \"adipiscing\",\n-          \"elit\");\n+    lorem(\n+        \"lorem\",\n+        \"ipsum\",\n+        \"dolor\",\n+        \"sit\",\n+        \"amet\",\n+        \"consectetur\",\n+        \"adipiscing\",\n+        \"elit\",\n+    );\n }"}, {"sha": "e1d49a65c25282cb8fa5921bf6e2187609e0c041", "filename": "tests/target/configs-fn_return_indent-with_args.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_return_indent-with_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_return_indent-with_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_return_indent-with_args.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,14 +1,16 @@\n // rustfmt-fn_return_indent: WithArgs\n // Function return type indent\n \n-fn lorem(ipsum: Ipsum,\n-         dolor: Dolor,\n-         sit: Sit,\n-         amet: Amet,\n-         consectetur: Consectetur,\n-         adipiscing: Adipiscing)\n-         -> Elit\n-    where Ipsum: Eq\n+fn lorem(\n+    ipsum: Ipsum,\n+    dolor: Dolor,\n+    sit: Sit,\n+    amet: Amet,\n+    consectetur: Consectetur,\n+    adipiscing: Adipiscing,\n+) -> Elit\n+where\n+    Ipsum: Eq,\n {\n     // body\n }"}, {"sha": "62a35af516b315a16c8184b9a08817c3f8d21ba7", "filename": "tests/target/configs-fn_return_indent-with_where_clause.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_return_indent-with_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-fn_return_indent-with_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_return_indent-with_where_clause.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,14 +1,16 @@\n // rustfmt-fn_return_indent: WithWhereClause\n // Function return type indent\n \n-fn lorem(ipsum: Ipsum,\n-         dolor: Dolor,\n-         sit: Sit,\n-         amet: Amet,\n-         consectetur: Consectetur,\n-         adipiscing: Adipiscing)\n-    -> Elit\n-    where Ipsum: Eq\n+fn lorem(\n+    ipsum: Ipsum,\n+    dolor: Dolor,\n+    sit: Sit,\n+    amet: Amet,\n+    consectetur: Consectetur,\n+    adipiscing: Adipiscing,\n+) -> Elit\n+where\n+    Ipsum: Eq,\n {\n     // body\n }"}, {"sha": "53175fa362fb3281e8e94e85fbae8aa3ef6db810", "filename": "tests/target/configs-generics_indent-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-generics_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-generics_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-generics_indent-block.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -15,7 +15,7 @@ fn lorem<\n     amet: Amet,\n     adipiscing: Adipiscing,\n     consectetur: Consectetur,\n-    elit: Elit)\n-    -> T {\n+    elit: Elit,\n+) -> T {\n     // body\n }"}, {"sha": "1160772f29f52d36648343a0020db124ec7f407b", "filename": "tests/target/configs-generics_indent-visual.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-generics_indent-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-generics_indent-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-generics_indent-visual.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -7,14 +7,14 @@ fn lorem<Ipsum: Eq = usize,\n          Amet: Eq = usize,\n          Adipiscing: Eq = usize,\n          Consectetur: Eq = usize,\n-         Elit: Eq = usize>\n-    (ipsum: Ipsum,\n-     dolor: Dolor,\n-     sit: Sit,\n-     amet: Amet,\n-     adipiscing: Adipiscing,\n-     consectetur: Consectetur,\n-     elit: Elit)\n-     -> T {\n+         Elit: Eq = usize>(\n+    ipsum: Ipsum,\n+    dolor: Dolor,\n+    sit: Sit,\n+    amet: Amet,\n+    adipiscing: Adipiscing,\n+    consectetur: Consectetur,\n+    elit: Elit,\n+) -> T {\n     // body\n }"}, {"sha": "b9334677e1ff9c4f07e16949eefe361f8fedc42b", "filename": "tests/target/configs-item_brace_style-always_next_line.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-item_brace_style-always_next_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-item_brace_style-always_next_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-item_brace_style-always_next_line.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -7,7 +7,8 @@ struct Lorem\n }\n \n struct Dolor<T>\n-    where T: Eq\n+where\n+    T: Eq,\n {\n     sit: T,\n }"}, {"sha": "3d2e4fd537e79033ad2cecd89733e8b2bfc00951", "filename": "tests/target/configs-item_brace_style-prefer_same_line.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-item_brace_style-prefer_same_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-item_brace_style-prefer_same_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-item_brace_style-prefer_same_line.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -6,6 +6,7 @@ struct Lorem {\n }\n \n struct Dolor<T>\n-    where T: Eq {\n+where\n+    T: Eq, {\n     sit: T,\n }"}, {"sha": "21a10cb28a17708103fbe70f652f159234e59dfd", "filename": "tests/target/configs-item_brace_style-same_line_where.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-item_brace_style-same_line_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-item_brace_style-same_line_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-item_brace_style-same_line_where.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -6,7 +6,8 @@ struct Lorem {\n }\n \n struct Dolor<T>\n-    where T: Eq\n+where\n+    T: Eq,\n {\n     sit: T,\n }"}, {"sha": "f38d26d64dbfc89eb233d79515d597727a3e1bbc", "filename": "tests/target/configs-trailing_comma-never.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-trailing_comma-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-trailing_comma-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-trailing_comma-never.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -14,10 +14,11 @@ fn main() {\n \n     // #1544\n     if let VrMsg::ClientReply {\n-               request_num: reply_req_num,\n-               value,\n-               ..\n-           } = msg {\n+            request_num: reply_req_num,\n+            value,\n+            ..\n+        } = msg\n+    {\n         let _ = safe_assert_eq!(reply_req_num, request_num, op);\n         return Ok((request_num, op, value));\n     }"}, {"sha": "215c10c2d7a63754e59187ac55e878b46fd4f4f3", "filename": "tests/target/configs-where_density-compressed.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_density-compressed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_density-compressed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_density-compressed.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,9 +2,14 @@\n // Where density\n \n trait Lorem {\n-    fn ipsum<Dolor>(dolor: Dolor) -> Sit where Dolor: Eq;\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit\n+    where\n+        Dolor: Eq;\n \n-    fn ipsum<Dolor>(dolor: Dolor) -> Sit where Dolor: Eq {\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit\n+    where\n+        Dolor: Eq,\n+    {\n         // body\n     }\n }"}, {"sha": "2a5da551f37cca7d1c2ea9227b06a895be24248c", "filename": "tests/target/configs-where_density-compressed_if_empty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_density-compressed_if_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_density-compressed_if_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_density-compressed_if_empty.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,10 +2,13 @@\n // Where density\n \n trait Lorem {\n-    fn ipsum<Dolor>(dolor: Dolor) -> Sit where Dolor: Eq;\n+    fn ipsum<Dolor>(dolor: Dolor) -> Sit\n+    where\n+        Dolor: Eq;\n \n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n-        where Dolor: Eq\n+    where\n+        Dolor: Eq,\n     {\n         // body\n     }"}, {"sha": "e256f1c221c3a3c01a40881c219758aeb318020c", "filename": "tests/target/configs-where_density-tall.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_density-tall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_density-tall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_density-tall.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -3,10 +3,12 @@\n \n trait Lorem {\n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n-        where Dolor: Eq;\n+    where\n+        Dolor: Eq;\n \n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n-        where Dolor: Eq\n+    where\n+        Dolor: Eq,\n     {\n         // body\n     }"}, {"sha": "96ac111ba749a75d94e9b7ea71c3c3f46d866497", "filename": "tests/target/configs-where_density-vertical.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_density-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_density-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_density-vertical.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -3,10 +3,12 @@\n \n trait Lorem {\n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n-        where Dolor: Eq;\n+    where\n+        Dolor: Eq;\n \n     fn ipsum<Dolor>(dolor: Dolor) -> Sit\n-        where Dolor: Eq\n+    where\n+        Dolor: Eq,\n     {\n         // body\n     }"}, {"sha": "062f62ff4e71ba7c4a6d6d0dc9388fcd09305240", "filename": "tests/target/configs-where_layout-horizontal.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_layout-horizontal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_layout-horizontal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_layout-horizontal.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -3,13 +3,19 @@\n // Where layout\n \n fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n-    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur\n+where\n+    Ipsum: IpsumDolorSitAmet,\n+    Dolor: DolorSitAmetConsectetur,\n {\n     // body\n }\n \n fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n-    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur, Sit: SitAmetConsecteturAdipiscing, Amet: AmetConsecteturAdipiscingElit\n+where\n+    Ipsum: IpsumDolorSitAmet,\n+    Dolor: DolorSitAmetConsectetur,\n+    Sit: SitAmetConsecteturAdipiscing,\n+    Amet: AmetConsecteturAdipiscingElit,\n {\n     // body\n }"}, {"sha": "56d125e1cf77dd04205ad268c94590c1ba879b7b", "filename": "tests/target/configs-where_layout-horizontal_vertical.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_layout-horizontal_vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_layout-horizontal_vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_layout-horizontal_vertical.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,16 +2,19 @@\n // Where layout\n \n fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n-    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur\n+where\n+    Ipsum: IpsumDolorSitAmet,\n+    Dolor: DolorSitAmetConsectetur,\n {\n     // body\n }\n \n fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n-    where Ipsum: IpsumDolorSitAmet,\n-          Dolor: DolorSitAmetConsectetur,\n-          Sit: SitAmetConsecteturAdipiscing,\n-          Amet: AmetConsecteturAdipiscingElit\n+where\n+    Ipsum: IpsumDolorSitAmet,\n+    Dolor: DolorSitAmetConsectetur,\n+    Sit: SitAmetConsecteturAdipiscing,\n+    Amet: AmetConsecteturAdipiscingElit,\n {\n     // body\n }"}, {"sha": "fa896b7726713ec0210810c5ac55293bb1d2f908", "filename": "tests/target/configs-where_layout-mixed.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_layout-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_layout-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_layout-mixed.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,14 +2,19 @@\n // Where layout\n \n fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n-    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur\n+where\n+    Ipsum: IpsumDolorSitAmet,\n+    Dolor: DolorSitAmetConsectetur,\n {\n     // body\n }\n \n fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n-    where Ipsum: IpsumDolorSitAmet, Dolor: DolorSitAmetConsectetur,\n-          Sit: SitAmetConsecteturAdipiscing, Amet: AmetConsecteturAdipiscingElit\n+where\n+    Ipsum: IpsumDolorSitAmet,\n+    Dolor: DolorSitAmetConsectetur,\n+    Sit: SitAmetConsecteturAdipiscing,\n+    Amet: AmetConsecteturAdipiscingElit,\n {\n     // body\n }"}, {"sha": "024a74dd9ace71fbfe3cf767c9e26fd7a7003652", "filename": "tests/target/configs-where_layout-vertical.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_layout-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_layout-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_layout-vertical.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,17 +2,19 @@\n // Where layout\n \n fn lorem<Ipsum, Dolor>(ipsum: Ipsum, dolor: Dolor)\n-    where Ipsum: IpsumDolorSitAmet,\n-          Dolor: DolorSitAmetConsectetur\n+where\n+    Ipsum: IpsumDolorSitAmet,\n+    Dolor: DolorSitAmetConsectetur,\n {\n     // body\n }\n \n fn lorem<Ipsum, Dolor, Sit, Amet>(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet)\n-    where Ipsum: IpsumDolorSitAmet,\n-          Dolor: DolorSitAmetConsectetur,\n-          Sit: SitAmetConsecteturAdipiscing,\n-          Amet: AmetConsecteturAdipiscingElit\n+where\n+    Ipsum: IpsumDolorSitAmet,\n+    Dolor: DolorSitAmetConsectetur,\n+    Sit: SitAmetConsecteturAdipiscing,\n+    Amet: AmetConsecteturAdipiscingElit,\n {\n     // body\n }"}, {"sha": "b880995ccceca260c17f7e3d7fc2f9778fe0898a", "filename": "tests/target/configs-where_pred_indent-block.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_pred_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_pred_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_pred_indent-block.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,10 +2,11 @@\n // Where predicate indent\n \n fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n-    where Ipsum: Eq,\n-        Dolor: Eq,\n-        Sit: Eq,\n-        Amet: Eq\n+where\n+    Ipsum: Eq,\n+    Dolor: Eq,\n+    Sit: Eq,\n+    Amet: Eq,\n {\n     // body\n }"}, {"sha": "11da3a3ba85956c69e4e36d362e77d569eb7256e", "filename": "tests/target/configs-where_pred_indent-visual.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_pred_indent-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fconfigs-where_pred_indent-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-where_pred_indent-visual.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,10 +2,11 @@\n // Where predicate indent\n \n fn lorem<Ipsum, Dolor, Sit, Amet>() -> T\n-    where Ipsum: Eq,\n-          Dolor: Eq,\n-          Sit: Eq,\n-          Amet: Eq\n+where\n+    Ipsum: Eq,\n+    Dolor: Eq,\n+    Sit: Eq,\n+    Amet: Eq,\n {\n     // body\n }"}, {"sha": "6ff1750ae015ae8fa606486f4311c7653ea7f69a", "filename": "tests/target/enum.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -11,7 +11,8 @@ pub enum Test {\n }\n \n pub enum Foo<'a, Y: Baz>\n-    where X: Whatever\n+where\n+    X: Whatever,\n {\n     A,\n }\n@@ -29,8 +30,10 @@ enum Bar {\n }\n \n enum LongVariants {\n-    First(LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG, // comment\n-          VARIANT),\n+    First(\n+        LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG, // comment\n+        VARIANT\n+    ),\n     // This is the second variant\n     Second,\n }\n@@ -47,9 +50,11 @@ enum StructLikeVariants {\n }\n \n enum X {\n-    CreateWebGLPaintTask(Size2D<i32>,\n-                         GLContextAttributes,\n-                         IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>), /* This is a post comment */\n+    CreateWebGLPaintTask(\n+        Size2D<i32>,\n+        GLContextAttributes,\n+        IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>\n+    ), // This is a post comment\n }\n \n pub enum EnumWithAttributes {\n@@ -79,7 +84,8 @@ pub enum SingleStruct {\n }\n \n pub enum GenericEnum<I, T>\n-    where I: Iterator<Item = T>\n+where\n+    I: Iterator<Item = T>,\n {\n     // Pre Comment\n     Left { list: I, root: T }, // Post-comment\n@@ -98,7 +104,7 @@ enum TestFormatFails {\n fn nested_enum_test() {\n     if true {\n         enum TestEnum {\n-            One(usize,\n+            One(\n                 usize,\n                 usize,\n                 usize,\n@@ -113,8 +119,10 @@ fn nested_enum_test() {\n                 usize,\n                 usize,\n                 usize,\n-                usize), /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA\n-                         * AAAAAAAAAAAAAAAAAAAAAA */\n+                usize,\n+                usize\n+            ), /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA\n+                * AAAAAAAAAAAAAAAAAAAAAA */\n             Two, /* AAAAAAAAAAAAAAAAAA  AAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n                   * AAAAAAAAAAAAAAAAAA */\n         }\n@@ -142,9 +150,11 @@ pub enum Bencoding<'i> {\n \n // #1261\n pub enum CoreResourceMsg {\n-    SetCookieForUrl(ServoUrl,\n-                    #[serde(deserialize_with = \"::hyper_serde::deserialize\",\n-                            serialize_with = \"::hyper_serde::serialize\")]\n-                    Cookie,\n-                    CookieSource),\n+    SetCookieForUrl(\n+        ServoUrl,\n+        #[serde(deserialize_with = \"::hyper_serde::deserialize\",\n+                serialize_with = \"::hyper_serde::serialize\")]\n+        Cookie,\n+        CookieSource\n+    ),\n }"}, {"sha": "3932992af62c755124555817afae9399330c88a7", "filename": "tests/target/expr.rs", "status": "modified", "additions": 132, "deletions": 77, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -7,23 +7,21 @@ fn foo() -> bool {\n     let referenced = &5;\n \n     let very_long_variable_name = (a + first + simple + test);\n-    let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA +\n-                                   BBBBBBBBBBBBBBBBB + b + c);\n+    let very_long_variable_name =\n+        (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB + b + c);\n \n     let is_internalxxxx = self.codemap.span_to_filename(s) ==\n-                          self.codemap.span_to_filename(m.inner);\n+        self.codemap.span_to_filename(m.inner);\n \n     let some_val = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa * bbbb /\n-                   (bbbbbb - function_call(x, *very_long_pointer, y)) + 1000;\n+        (bbbbbb - function_call(x, *very_long_pointer, y)) + 1000;\n \n-    some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 +\n-                                                         40000 / 1002200000000 -\n-                                                         50000 * sqrt(-1),\n-                                                         trivial_value);\n-    (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-             a +\n-             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-             aaaaa)))))))));\n+    some_ridiculously_loooooooooooooooooooooong_function(\n+        10000 * 30000000000 + 40000 / 1002200000000 - 50000 * sqrt(-1),\n+        trivial_value,\n+    );\n+    (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + a +\n+             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaa)))))))))   ;\n \n     {\n         for _ in 0..10 {}\n@@ -49,18 +47,22 @@ fn foo() -> bool {\n     }\n \n     if let Some(x) = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-                      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) {}\n+                       aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)\n+    {}\n \n     if let (some_very_large,\n-            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {\n+         tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n+    {\n     }\n \n     if let (some_very_large,\n-            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n-        1111 + 2222 {}\n+         tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n+        1111 + 2222\n+    {}\n \n     if let (some_very_large,\n-            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {}\n+         tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n+    {}\n \n     let test = if true { 5 } else { 3 };\n \n@@ -71,24 +73,26 @@ fn foo() -> bool {\n     } else {\n         // Check subformatting\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+            aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n     }\n }\n \n fn bar() {\n     let range = (111111111 + 333333333333333333 + 1111 + 400000000000000000)..\n-                (2222 + 2333333333333333);\n+        (2222 + 2333333333333333);\n \n     let another_range = 5..some_func(a, b /* comment */);\n \n     for _ in 1.. {\n         call_forever();\n     }\n \n-    syntactically_correct(loop {\n-                              sup('?');\n-                          },\n-                          if cond { 0 } else { 1 });\n+    syntactically_correct(\n+        loop {\n+            sup('?');\n+        },\n+        if cond { 0 } else { 1 },\n+    );\n \n     let third = ..10;\n     let infi_range = ..;\n@@ -102,8 +106,10 @@ fn bar() {\n         }\n     }\n \n-    let x = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa && aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-             a);\n+    let x = (\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa && aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        a,\n+    );\n }\n \n fn baz() {\n@@ -144,8 +150,8 @@ fn qux() {\n \n fn issue227() {\n     {\n-        let handler = box DocumentProgressHandler::new(addr,\n-                                                       DocumentProgressTask::DOMContentLoaded);\n+        let handler =\n+            box DocumentProgressHandler::new(addr, DocumentProgressTask::DOMContentLoaded);\n     }\n }\n \n@@ -158,59 +164,104 @@ fn issue184(source: &str) {\n }\n \n fn arrays() {\n-    let x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 7, 8, 9, 0, 1, 2, 3,\n-             4, 5, 6, 7, 8, 9, 0];\n-\n-    let y = [// comment\n-             1,\n-             2, // post comment\n-             3];\n-\n-    let xy = [strukt {\n-                  test123: value_one_two_three_four,\n-                  turbo: coolio(),\n-              },\n-              // comment\n-              1];\n-\n-    let a = WeightedChoice::new(&mut [Weighted {\n-                                          weightweight: x,\n-                                          item: 0,\n-                                      },\n-                                      Weighted {\n-                                          weightweight: 1,\n-                                          item: 1,\n-                                      },\n-                                      Weighted {\n-                                          weightweight: x,\n-                                          item: 2,\n-                                      },\n-                                      Weighted {\n-                                          weightweight: 1,\n-                                          item: 3,\n-                                      }]);\n-\n-    let z = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n-             yyyyyyyyyyyyyyyyyyyyyyyyyyy,\n-             zzzzzzzzzzzzzzzzzz,\n-             q];\n+    let x = [\n+        0,\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        0,\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        0,\n+        7,\n+        8,\n+        9,\n+        0,\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        0,\n+    ];\n+\n+    let y = [\n+        // comment\n+        1,\n+        2, // post comment\n+        3,\n+    ];\n+\n+    let xy = [\n+        strukt {\n+            test123: value_one_two_three_four,\n+            turbo: coolio(),\n+        },\n+        // comment\n+        1,\n+    ];\n+\n+    let a = WeightedChoice::new(\n+        &mut [\n+            Weighted {\n+                weightweight: x,\n+                item: 0,\n+            },\n+            Weighted {\n+                weightweight: 1,\n+                item: 1,\n+            },\n+            Weighted {\n+                weightweight: x,\n+                item: 2,\n+            },\n+            Weighted {\n+                weightweight: 1,\n+                item: 3,\n+            },\n+        ],\n+    );\n+\n+    let z = [\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+        zzzzzzzzzzzzzzzzzz,\n+        q,\n+    ];\n \n     [1 + 3, 4, 5, 6, 7, 7, fncall::<Vec<_>>(3 - 1)]\n }\n \n fn returns() {\n     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &&\n-    return;\n+        return;\n \n     return aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;\n }\n \n fn addrof() {\n     &mut (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-          bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n     &(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-      bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+          bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n }\n \n fn casts() {\n@@ -220,7 +271,7 @@ fn casts() {\n \n     let some_trait_xxx = xxxxxxxxxxx + xxxxxxxxxxxxx as SomeTraitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n     let slightly_longer_trait = yyyyyyyyy +\n-                                yyyyyyyyyyy as SomeTraitYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY;\n+        yyyyyyyyyyy as SomeTraitYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY;\n }\n \n fn indices() {\n@@ -232,9 +283,9 @@ fn indices() {\n \n fn repeats() {\n     let x = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc;\n-             x + y + z];\n+        x + y + z];\n     let y = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc;\n-             xxxxx + yyyyy + zzzzz];\n+        xxxxx + yyyyy + zzzzz];\n }\n \n fn blocks() {\n@@ -257,7 +308,7 @@ fn issue767() {\n fn ranges() {\n     let x = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n     let y = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...\n-            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n     let z = ...x;\n \n     a...b\n@@ -279,21 +330,25 @@ fn complex_if_else() {\n     } else if xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + xxxxxxxx {\n         yo();\n     } else if let Some(x) =\n-        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n+    {\n         ha();\n     } else if xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +\n-              xxxxxxxxx {\n+               xxxxxxxxx\n+    {\n         yo();\n     }\n }\n \n fn issue1106() {\n     {\n         if let hir::ItemEnum(ref enum_def, ref generics) =\n-            self.ast_map.expect_item(enum_node_id).node {}\n+            self.ast_map.expect_item(enum_node_id).node\n+        {}\n     }\n \n-    for entry in WalkDir::new(path)\n-            .into_iter()\n-            .filter_entry(|entry| exclusions.filter_entry(entry)) {}\n+    for entry in WalkDir::new(path).into_iter().filter_entry(|entry| {\n+        exclusions.filter_entry(entry)\n+    })\n+    {}\n }"}, {"sha": "efee6ab26bf771c9c8a36e9c180f36b1d4d02080", "filename": "tests/target/extern.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fextern.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -3,8 +3,10 @@\n extern \"C\" {\n     fn c_func(x: *mut *mut libc::c_void);\n \n-    fn c_func(x: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,\n-              y: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY);\n+    fn c_func(\n+        x: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,\n+        y: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY,\n+    );\n \n     #[test123]\n     fn foo() -> uint64_t;\n@@ -13,12 +15,13 @@ extern \"C\" {\n }\n \n extern \"C\" {\n-    fn DMR_GetDevice(pHDev: *mut HDEV,\n-                     searchMode: DeviceSearchMode,\n-                     pSearchString: *const c_char,\n-                     devNr: c_uint,\n-                     wildcard: c_char)\n-                     -> TDMR_ERROR;\n+    fn DMR_GetDevice(\n+        pHDev: *mut HDEV,\n+        searchMode: DeviceSearchMode,\n+        pSearchString: *const c_char,\n+        devNr: c_uint,\n+        wildcard: c_char,\n+    ) -> TDMR_ERROR;\n \n     fn quux() -> (); // Post comment\n }\n@@ -30,21 +33,23 @@ extern \"Rust\" {\n }\n \n extern \"C\" {\n-    fn syscall(number: libc::c_long, // comment 1\n-               // comm 2\n-               ... /* sup? */)\n-               -> libc::c_long;\n+    fn syscall(\n+        number: libc::c_long, // comment 1\n+        // comm 2\n+        ... // sup?\n+    ) -> libc::c_long;\n \n     fn foo(x: *const c_char, ...) -> libc::c_long;\n }\n \n extern \"C\" {\n-    pub fn freopen(filename: *const c_char,\n-                   mode: *const c_char,\n-                   mode2: *const c_char,\n-                   mode3: *const c_char,\n-                   file: *mut FILE)\n-                   -> *mut FILE;\n+    pub fn freopen(\n+        filename: *const c_char,\n+        mode: *const c_char,\n+        mode2: *const c_char,\n+        mode3: *const c_char,\n+        file: *mut FILE,\n+    ) -> *mut FILE;\n }\n \n extern \"C\" {}"}, {"sha": "2ffb3909b742114b653a4b67a71e9402fe43d25f", "filename": "tests/target/fn-args-with-last-line-comment.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,22 +1,24 @@\n // #1587\n pub trait X {\n     fn a(&self) -> &'static str;\n-    fn bcd(&self,\n-           c: &str, // comment on this arg\n-           d: u16, // comment on this arg\n-           e: &Vec<String>, // comment on this arg\n-           ) -> Box<Q>;\n+    fn bcd(\n+        &self,\n+        c: &str, // comment on this arg\n+        d: u16, // comment on this arg\n+        e: &Vec<String>, // comment on this arg\n+    ) -> Box<Q>;\n }\n \n // #1595\n-fn foo(arg1: LongTypeName,\n-       arg2: LongTypeName,\n-       arg3: LongTypeName,\n-       arg4: LongTypeName,\n-       arg5: LongTypeName,\n-       arg6: LongTypeName,\n-       arg7: LongTypeName,\n+fn foo(\n+    arg1: LongTypeName,\n+    arg2: LongTypeName,\n+    arg3: LongTypeName,\n+    arg4: LongTypeName,\n+    arg5: LongTypeName,\n+    arg6: LongTypeName,\n+    arg7: LongTypeName,\n        //arg8: LongTypeName,\n-       ) {\n+) {\n     // do stuff\n }"}, {"sha": "430ffeb9fb7ed0b0018c6f6aa684e4364d1bc610", "filename": "tests/target/fn-custom-2.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-2.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -24,14 +24,18 @@ fn bar<\n }\n \n fn baz()\n-    where X: TTTTTTTT\n+where\n+    X: TTTTTTTT,\n {\n     baz();\n }\n \n fn qux()\n-    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n-          X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+where\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n {\n     baz();\n }\n@@ -59,7 +63,8 @@ impl Foo {\n     }\n \n     fn baz()\n-        where X: TTTTTTTT\n+    where\n+        X: TTTTTTTT,\n     {\n         baz();\n     }"}, {"sha": "655f1f1dc5bcb6696a407865d6639596b6ea6c91", "filename": "tests/target/fn-custom-3.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-3.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -24,16 +24,19 @@ fn bar<\n }\n \n fn qux()\n-    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+where\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n {\n     baz();\n }\n \n fn qux()\n-    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n-          X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n-          X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n-          X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+where\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n {\n     baz();\n }"}, {"sha": "c044becc7821d9a154fa8613a823e1ca2ff8aabe", "filename": "tests/target/fn-custom-4.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-4.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -3,21 +3,26 @@\n // Test different indents.\n \n fn qux()\n-    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n-        X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n-        X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n-        X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+where\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n {\n     baz();\n }\n \n-fn qux() where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+fn qux()\n+where\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+{\n     baz();\n }\n \n fn qux(a: Aaaaaaaaaaaaaaaaa)\n-    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n-        X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+where\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n {\n     baz();\n }"}, {"sha": "9a2d8d8981aaa193183176048f514e23d8aec2df", "filename": "tests/target/fn-custom-6.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-6.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -31,7 +31,8 @@ fn bar(\n }\n \n fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb)\n-    where T: UUUUUUUUUUU {\n+where\n+    T: UUUUUUUUUUU, {\n     foo();\n }\n \n@@ -41,12 +42,14 @@ fn bar(\n     c: Cccccccccccccccccc,\n     d: Dddddddddddddddd,\n     e: Eeeeeeeeeeeeeee,\n-) where T: UUUUUUUUUUU {\n+) where\n+    T: UUUUUUUUUUU, {\n     bar();\n }\n \n fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String\n-    where T: UUUUUUUUUUU {\n+where\n+    T: UUUUUUUUUUU, {\n     foo();\n }\n \n@@ -57,7 +60,8 @@ fn bar(\n     d: Dddddddddddddddd,\n     e: Eeeeeeeeeeeeeee,\n ) -> String\n-    where T: UUUUUUUUUUU {\n+where\n+    T: UUUUUUUUUUU, {\n     bar();\n }\n "}, {"sha": "854f42314806deb193cea7888b77aa3c7e8b001e", "filename": "tests/target/fn-custom-8.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-8.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -31,7 +31,8 @@ fn bar(\n }\n \n fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb)\n-    where T: UUUUUUUUUUU {\n+where\n+    T: UUUUUUUUUUU, {\n     foo();\n }\n \n@@ -41,12 +42,14 @@ fn bar(\n     c: Cccccccccccccccccc,\n     d: Dddddddddddddddd,\n     e: Eeeeeeeeeeeeeee,\n-) where T: UUUUUUUUUUU {\n+) where\n+    T: UUUUUUUUUUU, {\n     bar();\n }\n \n fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String\n-    where T: UUUUUUUUUUU {\n+where\n+    T: UUUUUUUUUUU, {\n     foo();\n }\n \n@@ -57,7 +60,8 @@ fn bar(\n     d: Dddddddddddddddd,\n     e: Eeeeeeeeeeeeeee,\n ) -> String\n-    where T: UUUUUUUUUUU {\n+where\n+    T: UUUUUUUUUUU, {\n     bar();\n }\n \n@@ -67,7 +71,8 @@ trait Test {\n     fn bar(a: u8) -> String {}\n \n     fn bar(a: u8) -> String\n-        where Foo: foooo,\n-              Bar: barrr {\n+    where\n+        Foo: foooo,\n+        Bar: barrr, {\n     }\n }"}, {"sha": "7a2ea722bfd599ae02d3dd1b1facd71a7025e68d", "filename": "tests/target/fn-custom.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,14 +2,18 @@\n // Test some of the ways function signatures can be customised.\n \n // Test compressed layout of args.\n-fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc,\n-       d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+fn foo(\n+    a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd,\n+    e: Eeeeeeeeeeeeeeeeeee\n+) {\n     foo();\n }\n \n impl Foo {\n-    fn foo(self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc,\n-           d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+    fn foo(\n+        self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc,\n+        d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee\n+    ) {\n         foo();\n     }\n }"}, {"sha": "d0c15c643f5d6fff5a3036a5c043c16a9b38c02b", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 59, "deletions": 48, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,77 +1,88 @@\n // rustfmt-normalize_comments: true\n \n-fn simple(// pre-comment on a function!?\n-          i: i32, // yes, it's possible!\n-          response: NoWay /* hose */) {\n-    fn op(x: Typ,\n-          key: &[u8],\n-          upd: Box<Fn(Option<&memcache::Item>)\n-                      -> (memcache::Status, Result<memcache::Item, Option<String>>)>)\n-          -> MapResult {\n+fn simple(\n+    // pre-comment on a function!?\n+    i: i32, // yes, it's possible!\n+    response: NoWay, // hose\n+) {\n+    fn op(\n+        x: Typ,\n+        key: &[u8],\n+        upd: Box<Fn(Option<&memcache::Item>)\n+                    -> (memcache::Status, Result<memcache::Item, Option<String>>)>,\n+    ) -> MapResult {\n     }\n \n     \"cool\"\n }\n \n \n-fn weird_comment(// /*/ double level */ comment\n-                 x: Hello, // /*/* tripple, even */*/\n-                 // Does this work?\n-                 y: World) {\n-    simple(// does this preserve comments now?\n-           42,\n-           NoWay)\n+fn weird_comment(\n+    // /*/ double level */ comment\n+    x: Hello, // /*/* tripple, even */*/\n+    // Does this work?\n+    y: World,\n+) {\n+    simple(\n+        // does this preserve comments now?\n+        42,\n+        NoWay,\n+    )\n }\n \n fn generic<T>(arg: T) -> &SomeType\n-    where T: Fn(// First arg\n-                A,\n-                // Second argument\n-                B,\n-                C,\n-                D,\n-                // pre comment\n-                E /* last comment */)\n-                -> &SomeType\n+where\n+    T: Fn(// First arg\n+          A,\n+          // Second argument\n+          B,\n+          C,\n+          D,\n+          // pre comment\n+          E /* last comment */)\n+          -> &SomeType,\n {\n     arg(a, b, c, d, e)\n }\n \n fn foo() -> ! {}\n \n-pub fn http_fetch_async(listener: Box<AsyncCORSResponseListener + Send>,\n-                        script_chan: Box<ScriptChan + Send>) {\n+pub fn http_fetch_async(\n+    listener: Box<AsyncCORSResponseListener + Send>,\n+    script_chan: Box<ScriptChan + Send>,\n+) {\n }\n \n fn some_func<T: Box<Trait + Bound>>(val: T) {}\n \n-fn zzzzzzzzzzzzzzzzzzzz<Type, NodeType>(selff: Type,\n-                                        mut handle: node::Handle<IdRef<'id, Node<K, V>>,\n-                                                                 Type,\n-                                                                 NodeType>)\n-                                        -> SearchStack<'a, K, V, Type, NodeType> {\n+fn zzzzzzzzzzzzzzzzzzzz<Type, NodeType>(\n+    selff: Type,\n+    mut handle: node::Handle<IdRef<'id, Node<K, V>>, Type, NodeType>,\n+) -> SearchStack<'a, K, V, Type, NodeType> {\n }\n \n-unsafe fn generic_call(cx: *mut JSContext,\n-                       argc: libc::c_uint,\n-                       vp: *mut JSVal,\n-                       is_lenient: bool,\n-                       call: unsafe extern \"C\" fn(*const JSJitInfo,\n-                                                  *mut JSContext,\n-                                                  HandleObject,\n-                                                  *mut libc::c_void,\n-                                                  u32,\n-                                                  *mut JSVal)\n-                                                  -> u8) {\n+unsafe fn generic_call(\n+    cx: *mut JSContext,\n+    argc: libc::c_uint,\n+    vp: *mut JSVal,\n+    is_lenient: bool,\n+    call: unsafe extern \"C\" fn(*const JSJitInfo,\n+                               *mut JSContext,\n+                               HandleObject,\n+                               *mut libc::c_void,\n+                               u32,\n+                               *mut JSVal)\n+                               -> u8,\n+) {\n     let f: fn(_, _) -> _ = panic!();\n }\n \n-pub fn start_export_thread<C: CryptoSchemee + 'static>\n-    (database: &Database,\n-     crypto_scheme: &C,\n-     block_size: usize,\n-     source_path: &Path)\n-     -> BonzoResult<mpsc::Consumer<'static, FileInstruction>> {\n+pub fn start_export_thread<C: CryptoSchemee + 'static>(\n+    database: &Database,\n+    crypto_scheme: &C,\n+    block_size: usize,\n+    source_path: &Path,\n+) -> BonzoResult<mpsc::Consumer<'static, FileInstruction>> {\n }\n \n pub fn waltz(cwd: &Path) -> CliAssert {"}, {"sha": "3617506d89a18d6b0801bf141be0a0c6abd6b985", "filename": "tests/target/fn-single-line.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-single-line.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -14,7 +14,8 @@ fn empty() {}\n fn foo_return() -> String { \"yay\" }\n \n fn foo_where() -> T\n-    where T: Sync\n+where\n+    T: Sync,\n {\n     let x = 2;\n }\n@@ -62,4 +63,8 @@ trait CoolerTypes {\n     fn dummy(&self) {}\n }\n \n-fn Foo<T>() where T: Bar {}\n+fn Foo<T>()\n+where\n+    T: Bar,\n+{\n+}"}, {"sha": "7d48f3b32dbc14680332c4fc57919ade07ecacda", "filename": "tests/target/fn-ty.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-ty.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,12 +1,14 @@\n-fn f(xxxxxxxxxxxxxxxxxx: fn(a, b, b) -> a,\n-     xxxxxxxxxxxxxxxxxx: fn() -> a,\n-     xxxxxxxxxxxxxxxxxx: fn(a, b, b),\n-     xxxxxxxxxxxxxxxxxx: fn(),\n-     xxxxxxxxxxxxxxxxxx: fn(a, b, b) -> !,\n-     xxxxxxxxxxxxxxxxxx: fn() -> !)\n-    where F1: Fn(a, b, b) -> a,\n-          F2: Fn(a, b, b),\n-          F3: Fn(),\n-          F4: Fn() -> u32\n+fn f(\n+    xxxxxxxxxxxxxxxxxx: fn(a, b, b) -> a,\n+    xxxxxxxxxxxxxxxxxx: fn() -> a,\n+    xxxxxxxxxxxxxxxxxx: fn(a, b, b),\n+    xxxxxxxxxxxxxxxxxx: fn(),\n+    xxxxxxxxxxxxxxxxxx: fn(a, b, b) -> !,\n+    xxxxxxxxxxxxxxxxxx: fn() -> !,\n+) where\n+    F1: Fn(a, b, b) -> a,\n+    F2: Fn(a, b, b),\n+    F3: Fn(),\n+    F4: Fn() -> u32,\n {\n }"}, {"sha": "7a09ec6e83c753f897dab7e2ad4e32a96832b1d5", "filename": "tests/target/fn.rs", "status": "modified", "additions": 53, "deletions": 35, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,46 +2,64 @@\n \n fn foo(a: AAAA, b: BBB, c: CCC) -> RetType {}\n \n-fn foo(a: AAAA, b: BBB /* some, weird, inline comment */, c: CCC) -> RetType where T: Blah {}\n+fn foo(a: AAAA, b: BBB /* some, weird, inline comment */, c: CCC) -> RetType\n+where\n+    T: Blah,\n+{\n+}\n \n-fn foo(a: AAA /* (comment) */) where T: Blah {}\n+fn foo(a: AAA /* (comment) */)\n+where\n+    T: Blah,\n+{\n+}\n \n-fn foo(a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n-       b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)\n-       -> RetType\n-    where T: Blah\n+fn foo(\n+    a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+    b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n+) -> RetType\n+where\n+    T: Blah,\n {\n \n }\n \n \n-fn foo<U, T>(a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n-             b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)\n-             -> RetType\n-    where T: Blah,\n-          U: dsfasdfasdfasd\n+fn foo<U, T>(\n+    a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+    b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n+) -> RetType\n+where\n+    T: Blah,\n+    U: dsfasdfasdfasd,\n {\n \n }\n \n fn foo<U: Fn(A) -> B /* paren inside generics */>() {}\n \n impl Foo {\n-    fn with_no_errors<T, F>(&mut self, f: F) -> T where F: FnOnce(&mut Resolver) -> T {}\n+    fn with_no_errors<T, F>(&mut self, f: F) -> T\n+    where\n+        F: FnOnce(&mut Resolver) -> T,\n+    {\n+    }\n \n     fn foo(mut self, mut bar: u32) {}\n \n     fn bar(self, mut bazz: u32) {}\n }\n \n-pub fn render<'a,\n-              N: Clone + 'a,\n-              E: Clone + 'a,\n-              G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n-              W: Write>\n-    (g: &'a G,\n-     w: &mut W)\n-     -> io::Result<()> {\n+pub fn render<\n+    'a,\n+    N: Clone + 'a,\n+    E: Clone + 'a,\n+    G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n+    W: Write\n+>(\n+    g: &'a G,\n+    w: &mut W,\n+) -> io::Result<()> {\n     render_opts(g, w, &[])\n }\n \n@@ -81,23 +99,23 @@ fn foo(a: i32) -> i32 {\n     if a > 0 { 1 } else { 2 }\n }\n \n-fn ______________________baz\n-    (a: i32)\n-     -> *mut ::std::option::Option<extern \"C\" fn(arg1: i32, _____________________a: i32, arg3: i32)\n-                                                 -> ()> {\n+fn ______________________baz(\n+    a: i32,\n+) -> *mut ::std::option::Option<extern \"C\" fn(arg1: i32, _____________________a: i32, arg3: i32) -> ()> {\n }\n \n-pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            path: &hir::Path,\n-                            id: ast::NodeId,\n-                            cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Depecation>)) {\n+pub fn check_path<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    path: &hir::Path,\n+    id: ast::NodeId,\n+    cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Depecation>),\n+) {\n }\n \n-pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            path: &hir::Path,\n-                            id: ast::NodeId,\n-                            cb: &mut FnMut(DefId,\n-                                           Span,\n-                                           &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+pub fn check_path<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    path: &hir::Path,\n+    id: ast::NodeId,\n+    cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Deprecation>),\n+) {\n }"}, {"sha": "dcc8478a1384245ddfe6397f770491f2aeae8c99", "filename": "tests/target/fn_args_density-vertical.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn_args_density-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn_args_density-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_density-vertical.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -11,12 +11,13 @@ fn do_bar(a: u8) -> u8 {\n }\n \n // Multiple arguments should each get their own line.\n-fn do_bar(a: u8,\n-          mut b: u8,\n-          c: &u8,\n-          d: &mut u8,\n-          closure: &Fn(i32) -> i32)\n-          -> i32 {\n+fn do_bar(\n+    a: u8,\n+    mut b: u8,\n+    c: &u8,\n+    d: &mut u8,\n+    closure: &Fn(i32) -> i32,\n+) -> i32 {\n     // This feature should not affect closures.\n     let bar = |x: i32, y: i32| -> i32 { x + y };\n     bar(a, b)\n@@ -26,10 +27,12 @@ fn do_bar(a: u8,\n // the whole list should probably be pushed to the next line with hanging\n // indent. That's not what happens though, so check current behaviour instead.\n // In any case, it should maintain single argument per line.\n-fn do_this_that_and_the_other_thing(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: u8,\n-                                    b: u8,\n-                                    c: u8,\n-                                    d: u8) {\n+fn do_this_that_and_the_other_thing(\n+    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: u8,\n+    b: u8,\n+    c: u8,\n+    d: u8,\n+) {\n     this();\n     that();\n     the_other_thing();"}, {"sha": "93f14c526bda4202cbe4245c66b63cd12872f858", "filename": "tests/target/fn_args_layout-block.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ffn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_layout-block.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -54,8 +54,9 @@ fn bar(\n     d: Dddddddddddddddd,\n     e: Eeeeeeeeeeeeeee,\n ) -> String\n-    where X: Fooooo,\n-          Y: Baaar\n+where\n+    X: Fooooo,\n+    Y: Baaar,\n {\n     bar();\n }\n@@ -65,22 +66,27 @@ fn foo() -> T {\n }\n \n fn foo() -> T\n-    where X: Foooo,\n-          Y: Baaar\n+where\n+    X: Foooo,\n+    Y: Baaar,\n {\n     foo();\n }\n \n-fn foo() where X: Foooo {}\n+fn foo()\n+where\n+    X: Foooo,\n+{\n+}\n \n fn foo()\n-    where X: Foooo,\n-          Y: Baaar\n+where\n+    X: Foooo,\n+    Y: Baaar,\n {\n }\n \n-fn foo\n-    ()\n+fn foo()\n     -> (Loooooooooooooooooooooong, Reeeeeeeeeeeeeeeeeeeeeeeeturn, iiiiiiiiis, Looooooooooooooooong)\n {\n     foo();\n@@ -90,8 +96,7 @@ fn foo<g: G>() {\n     foo();\n }\n \n-fn foo<L: Loooooooooooooooooooooong, G: Geeeeeeeeeeeneric, I: iiiiiiiiis, L: Looooooooooooooooong>\n-    () {\n+fn foo<L: Loooooooooooooooooooooong, G: Geeeeeeeeeeeneric, I: iiiiiiiiis, L: Looooooooooooooooong>() {\n     foo();\n }\n "}, {"sha": "2781d54af883067b31b08f37434b16ee198533cd", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -22,15 +22,16 @@ fn main() {\n \tlet str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n \n \tif let (some_very_large,\n-\t        tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {}\n+\t     tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n+\t{}\n \n \tif cond() {\n \t\tsomething();\n \t} else if different_cond() {\n \t\tsomething_else();\n \t} else {\n \t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+\t\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n \t}\n \n \tunsafe /* very looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n@@ -47,21 +48,24 @@ fn main() {\n \t\t.go_to_next_line_with_tab()\n \t\t.go_to_next_line_with_tab();\n \n-\tlet z = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n-\t         yyyyyyyyyyyyyyyyyyyyyyyyyyy,\n-\t         zzzzzzzzzzzzzzzzzz,\n-\t         q];\n+\tlet z = [\n+\t\txxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+\t\tyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+\t\tzzzzzzzzzzzzzzzzzz,\n+\t\tq,\n+\t];\n \n \tfn generic<T>(arg: T) -> &SomeType\n-\t\twhere T: Fn(// First arg\n-\t\t            A,\n-\t\t            // Second argument\n-\t\t            B,\n-\t\t            C,\n-\t\t            D,\n-\t\t            // pre comment\n-\t\t            E /* last comment */)\n-\t\t            -> &SomeType\n+\twhere\n+\t\tT: Fn(// First arg\n+\t\t      A,\n+\t\t      // Second argument\n+\t\t      B,\n+\t\t      C,\n+\t\t      D,\n+\t\t      // pre comment\n+\t\t      E /* last comment */)\n+\t\t      -> &SomeType,\n \t{\n \t\targ(a, b, c, d, e)\n \t}"}, {"sha": "528d80fd5a534136a9e682c45dac6460be612863", "filename": "tests/target/impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpl.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -7,7 +7,8 @@ impl<K, V, NodeRef: Deref<Target = Node<K, V>>> Handle<NodeRef, handle::Edge, ha\n }\n \n impl<V> Test<V>\n-    where V: Clone // This comment is NOT removed by formating!\n+where\n+    V: Clone, // This comment is NOT removed by formating!\n {\n     pub fn new(value: V) -> Self {\n         Test {"}, {"sha": "216c9d5193dc59183833a61bb29ff3f66705747d", "filename": "tests/target/impls.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -22,33 +22,41 @@ pub impl Foo for Bar {\n }\n \n pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y>\n-    where X: Foo<'a, Z>\n+where\n+    X: Foo<'a, Z>,\n {\n     fn foo() {\n         \"hi\"\n     }\n }\n \n impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y>\n-    where X: Fooooooooooooooooooooooooooooo<'a, Z>\n+where\n+    X: Fooooooooooooooooooooooooooooo<'a, Z>,\n {\n     fn foo() {\n         \"hi\"\n     }\n }\n \n impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y>\n-    where X: Foooooooooooooooooooooooooooo<'a, Z>\n+where\n+    X: Foooooooooooooooooooooooooooo<'a, Z>,\n {\n     fn foo() {\n         \"hi\"\n     }\n }\n \n-impl<T> Foo for Bar<T> where T: Baz {}\n+impl<T> Foo for Bar<T>\n+where\n+    T: Baz,\n+{\n+}\n \n impl<T> Foo for Bar<T>\n-    where T: Baz\n+where\n+    T: Baz,\n {\n     // Comment\n }\n@@ -101,29 +109,36 @@ impl Y5000 {\n }\n \n pub impl<T> Foo for Bar<T>\n-    where T: Foo\n+where\n+    T: Foo,\n {\n     fn foo() {\n         \"hi\"\n     }\n }\n \n pub impl<T, Z> Foo for Bar<T, Z>\n-    where T: Foo,\n-          Z: Baz\n+where\n+    T: Foo,\n+    Z: Baz,\n {\n }\n \n mod m {\n     impl<T> PartialEq for S<T>\n-        where T: PartialEq\n+    where\n+        T: PartialEq,\n     {\n         fn eq(&self, other: &Self) {\n             true\n         }\n     }\n \n-    impl<T> PartialEq for S<T> where T: PartialEq {}\n+    impl<T> PartialEq for S<T>\n+    where\n+        T: PartialEq,\n+    {\n+    }\n }\n \n impl<BorrowType, K, V, NodeType, HandleType>\n@@ -136,10 +151,11 @@ impl<BorrowType, K, V, NodeType, HandleType> PartialEq\n \n mod x {\n     impl<A, B, C, D> Foo\n-        where A: 'static,\n-              B: 'static,\n-              C: 'static,\n-              D: 'static\n+    where\n+        A: 'static,\n+        B: 'static,\n+        C: 'static,\n+        D: 'static,\n     {\n     }\n }"}, {"sha": "416db998065a879ea5385c8716f69142fc28188c", "filename": "tests/target/issue-1049.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1049.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,15 +1,18 @@\n // Test overlong function signature\n-pub unsafe fn reborrow_mut(&mut X: Abcde)\n-                           -> Handle<NodeRef<marker::Mut, K, V, NodeType>, HandleType> {\n+pub unsafe fn reborrow_mut(\n+    &mut X: Abcde,\n+) -> Handle<NodeRef<marker::Mut, K, V, NodeType>, HandleType> {\n }\n \n-pub fn merge(mut X: Abcdef)\n-             -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n+pub fn merge(\n+    mut X: Abcdef,\n+) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n }\n \n impl Handle {\n-    pub fn merge(a: Abcd)\n-                 -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n+    pub fn merge(\n+        a: Abcd,\n+    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n     }\n }\n \n@@ -19,6 +22,8 @@ fn veeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeee\n fn veeeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {\n }\n \n-fn veeeeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee,\n-                                        b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {\n+fn veeeeeeeeeeeeeeeeeeeeeeery_long_name(\n+    a: FirstTypeeeeeeeeee,\n+    b: SecondTypeeeeeeeeeeeeeeeeeeeeeee,\n+) {\n }"}, {"sha": "8db0d195ae6a8f2441eac2cc725be42552a89232", "filename": "tests/target/issue-1239.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1239.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1239.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1239.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,9 +1,11 @@\n fn foo() {\n     let with_alignment = if condition__uses_alignment_for_first_if__0 ||\n-                            condition__uses_alignment_for_first_if__1 ||\n-                            condition__uses_alignment_for_first_if__2 {\n+        condition__uses_alignment_for_first_if__1 ||\n+        condition__uses_alignment_for_first_if__2\n+    {\n     } else if condition__no_alignment_for_later_else__0 ||\n-              condition__no_alignment_for_later_else__1 ||\n-              condition__no_alignment_for_later_else__2 {\n+               condition__no_alignment_for_later_else__1 ||\n+               condition__no_alignment_for_later_else__2\n+    {\n     };\n }"}, {"sha": "16c63e0f53d3efcf32076add2ba37ad22c5b1f91", "filename": "tests/target/issue-1247.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1247.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1247.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1247.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,7 +1,8 @@\n // rustfmt-max_width: 80\n \n fn foo() {\n-    polyfill::slice::fill(&mut self.pending[padding_pos..\n-                                            (self.algorithm.block_len - 8)],\n-                          0);\n+    polyfill::slice::fill(\n+        &mut self.pending[padding_pos..(self.algorithm.block_len - 8)],\n+        0,\n+    );\n }"}, {"sha": "eee147baab95ac2909fcc3b7d96117072fbad503", "filename": "tests/target/issue-1366.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1366.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -4,10 +4,10 @@ fn main() {\n             .map(|s| s)\n             .map(|s| s.to_string())\n             .map(|res| match Some(res) {\n-                     Some(ref s) if s == \"\" => 41,\n-                     Some(_) => 42,\n-                     _ => 43,\n-                 })\n+                Some(ref s) if s == \"\" => 41,\n+                Some(_) => 42,\n+                _ => 43,\n+            })\n     }\n     println!(\"{:?}\", f())\n }"}, {"sha": "f267a91d3e17f872660d890af1fcc17484984e5c", "filename": "tests/target/issue-1397.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1397.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1397.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1397.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -12,8 +12,9 @@ fn baz(p: Packet) {\n             loop {\n                 loop {\n                     if let Packet::Transaction {\n-                               state: TransactionState::Committed(ts, ..), ..\n-                           } = p {\n+                            state: TransactionState::Committed(ts, ..), ..\n+                        } = p\n+                    {\n                         unreachable!()\n                     }\n                 }"}, {"sha": "e10c83d45acad139701b9c7aeee48f3d4419bf02", "filename": "tests/target/issue-1468.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-1468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1468.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,27 +1,29 @@\n fn issue1468() {\n     euc_jp_decoder_functions!({\n-                                  let trail_minus_offset = byte.wrapping_sub(0xA1);\n-                                  // Fast-track Hiragana (60% according to Lunde)\n-                                  // and Katakana (10% acconding to Lunde).\n-                                  if jis0208_lead_minus_offset == 0x03 &&\n-                                     trail_minus_offset < 0x53 {\n-                                      // Hiragana\n-                                      handle.write_upper_bmp(0x3041 + trail_minus_offset as u16)\n-                                  } else if jis0208_lead_minus_offset == 0x04 &&\n-                                            trail_minus_offset < 0x56 {\n-                                      // Katakana\n-                                      handle.write_upper_bmp(0x30A1 + trail_minus_offset as u16)\n-                                  } else if trail_minus_offset > (0xFE - 0xA1) {\n-                                      if byte < 0x80 {\n-                                          return (DecoderResult::Malformed(1, 0),\n-                                                  unread_handle_trail.unread(),\n-                                                  handle.written());\n-                                      }\n-                                      return (DecoderResult::Malformed(2, 0),\n-                                              unread_handle_trail.consumed(),\n-                                              handle.written());\n-                                  } else {\n-                                      unreachable!();\n-                                  }\n-                              });\n+        let trail_minus_offset = byte.wrapping_sub(0xA1);\n+        // Fast-track Hiragana (60% according to Lunde)\n+        // and Katakana (10% acconding to Lunde).\n+        if jis0208_lead_minus_offset == 0x03 && trail_minus_offset < 0x53 {\n+            // Hiragana\n+            handle.write_upper_bmp(0x3041 + trail_minus_offset as u16)\n+        } else if jis0208_lead_minus_offset == 0x04 && trail_minus_offset < 0x56 {\n+            // Katakana\n+            handle.write_upper_bmp(0x30A1 + trail_minus_offset as u16)\n+        } else if trail_minus_offset > (0xFE - 0xA1) {\n+            if byte < 0x80 {\n+                return (\n+                    DecoderResult::Malformed(1, 0),\n+                    unread_handle_trail.unread(),\n+                    handle.written(),\n+                );\n+            }\n+            return (\n+                DecoderResult::Malformed(2, 0),\n+                unread_handle_trail.consumed(),\n+                handle.written(),\n+            );\n+        } else {\n+            unreachable!();\n+        }\n+    });\n }"}, {"sha": "27eeacaa08aa8c73114d34df8d31098064c2cd78", "filename": "tests/target/issue-510.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-510.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,22 +1,25 @@\n impl ISizeAndMarginsComputer for AbsoluteNonReplaced {\n-    fn solve_inline_size_constraints(&self,\n-                                     block: &mut BlockFlow,\n-                                     input: &ISizeConstraintInput)\n-                                     -> ISizeConstraintSolution {\n+    fn solve_inline_size_constraints(\n+        &self,\n+        block: &mut BlockFlow,\n+        input: &ISizeConstraintInput,\n+    ) -> ISizeConstraintSolution {\n \n         let (inline_start, inline_size, margin_inline_start, margin_inline_end) =\n-            match (inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,\n-                   inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx) {\n+            match (\n+                inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,\n+                inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,\n+            ) {\n                 (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n                     let margin_start = inline_start_margin.specified_or_zero();\n                     let margin_end = inline_end_margin.specified_or_zero();\n                     // Now it is the same situation as inline-start Specified and inline-end\n                     // and inline-size Auto.\n                     //\n                     // Set inline-end to zero to calculate inline-size.\n-                    let inline_size =\n-                        block.get_shrink_to_fit_inline_size(available_inline_size -\n-                                                            (margin_start + margin_end));\n+                    let inline_size = block.get_shrink_to_fit_inline_size(\n+                        available_inline_size - (margin_start + margin_end),\n+                    );\n                     (Au(0), inline_size, margin_start, margin_end)\n                 }\n             };\n@@ -30,9 +33,9 @@ impl ISizeAndMarginsComputer for AbsoluteNonReplaced {\n                     // and inline-size Auto.\n                     //\n                     // Set inline-end to zero to calculate inline-size.\n-                    let inline_size =\n-                        block.get_shrink_to_fit_inline_size(available_inline_size -\n-                                                            (margin_start + margin_end));\n+                    let inline_size = block.get_shrink_to_fit_inline_size(\n+                        available_inline_size - (margin_start + margin_end),\n+                    );\n                     (Au(0), inline_size, margin_start, margin_end)\n                 }\n             };"}, {"sha": "0c0f216310269cef3874c4aba27d843eb88ce944", "filename": "tests/target/item-brace-style-always-next-line.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -17,21 +17,25 @@ mod M {\n     struct D {}\n \n     enum A<T>\n-        where T: Copy\n+    where\n+        T: Copy,\n     {\n         A,\n     }\n \n     struct B<T>\n-        where T: Copy\n+    where\n+        T: Copy,\n     {\n         b: i32,\n     }\n \n     // For empty enums and structs, the brace remains on the same line.\n     enum C<T>\n-        where T: Copy {}\n+    where\n+        T: Copy, {}\n \n     struct D<T>\n-        where T: Copy {}\n+    where\n+        T: Copy, {}\n }"}, {"sha": "bb090479cabf45de856e2b094bc084c0bb80f5db", "filename": "tests/target/item-brace-style-prefer-same-line.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -14,18 +14,22 @@ mod M {\n     struct D {}\n \n     enum A<T>\n-        where T: Copy {\n+    where\n+        T: Copy, {\n         A,\n     }\n \n     struct B<T>\n-        where T: Copy {\n+    where\n+        T: Copy, {\n         b: i32,\n     }\n \n     enum C<T>\n-        where T: Copy {}\n+    where\n+        T: Copy, {}\n \n     struct D<T>\n-        where T: Copy {}\n+    where\n+        T: Copy, {}\n }"}, {"sha": "54ad69de42aeeeb832247bbea74c5bc866347767", "filename": "tests/target/item-brace-style-same-line-where.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -15,21 +15,25 @@ mod M {\n     struct D {}\n \n     enum A<T>\n-        where T: Copy\n+    where\n+        T: Copy,\n     {\n         A,\n     }\n \n     struct B<T>\n-        where T: Copy\n+    where\n+        T: Copy,\n     {\n         b: i32,\n     }\n \n     // For empty enums and structs, the brace remains on the same line.\n     enum C<T>\n-        where T: Copy {}\n+    where\n+        T: Copy, {}\n \n     struct D<T>\n-        where T: Copy {}\n+    where\n+        T: Copy, {}\n }"}, {"sha": "95d1fc43c03e5be67bc1700859ea630ededf8247", "filename": "tests/target/large_vec.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Flarge_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Flarge_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flarge_vec.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -3,27 +3,40 @@\n impl Environment {\n     pub fn new_root() -> Rc<RefCell<Environment>> {\n         let mut env = Environment::new();\n-        let builtin_functions =\n-            &[(\"println\",\n-               Function::NativeVoid(CallSign {\n-                                        num_params: 0,\n-                                        variadic: true,\n-                                        param_types: vec![],\n-                                    },\n-                                    native_println)),\n-              (\"run_http_server\",\n-               Function::NativeVoid(CallSign {\n-                                        num_params: 1,\n-                                        variadic: false,\n-                                        param_types: vec![Some(ConstraintType::Function)],\n-                                    },\n-                                    native_run_http_server)),\n-              (\"len\",\n-               Function::NativeReturning(CallSign {\n-                                             num_params: 1,\n-                                             variadic: false,\n-                                             param_types: vec![None],\n-                                         },\n-                                         native_len))];\n+        let builtin_functions = &[\n+            (\n+                \"println\",\n+                Function::NativeVoid(\n+                    CallSign {\n+                        num_params: 0,\n+                        variadic: true,\n+                        param_types: vec![],\n+                    },\n+                    native_println,\n+                ),\n+            ),\n+            (\n+                \"run_http_server\",\n+                Function::NativeVoid(\n+                    CallSign {\n+                        num_params: 1,\n+                        variadic: false,\n+                        param_types: vec![Some(ConstraintType::Function)],\n+                    },\n+                    native_run_http_server,\n+                ),\n+            ),\n+            (\n+                \"len\",\n+                Function::NativeReturning(\n+                    CallSign {\n+                        num_params: 1,\n+                        variadic: false,\n+                        param_types: vec![None],\n+                    },\n+                    native_len,\n+                ),\n+            ),\n+        ];\n     }\n }"}, {"sha": "f94431965c2b5555f48762350ddc679c177764fd", "filename": "tests/target/long-fn-1.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Flong-fn-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Flong-fn-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-fn-1.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,10 +2,11 @@\n // formatted correctly.\n \n impl Foo {\n-    fn some_input(&mut self,\n-                  input: Input,\n-                  input_path: Option<PathBuf>)\n-                  -> (Input, Option<PathBuf>) {\n+    fn some_input(\n+        &mut self,\n+        input: Input,\n+        input_path: Option<PathBuf>,\n+    ) -> (Input, Option<PathBuf>) {\n     }\n \n     fn some_inpu(&mut self, input: Input, input_path: Option<PathBuf>) -> (Input, Option<PathBuf>) {"}, {"sha": "95e6d3be3ed4d1988286eef9f847fccbd454f943", "filename": "tests/target/long-match-arms-brace-newline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-match-arms-brace-newline.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -6,8 +6,8 @@ fn main() {\n     match x\n     {\n         aaaaaaaa::Bbbbb::Ccccccccccccc(_, Some(ref x)) if x ==\n-                                                          \"aaaaaaaaaaa \\\n-                                                           aaaaaaa aaaaaa\" =>\n+                                                              \"aaaaaaaaaaa \\\n+                                                               aaaaaaa aaaaaa\" =>\n         {\n             Ok(())\n         }"}, {"sha": "2dfbff93a65d1c238d3b878b9aab7e3533b58972", "filename": "tests/target/loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Floop.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -13,7 +13,8 @@ fn main() {\n     }\n \n     'a: while loooooooooooooooooooooooooooooooooong_variable_name + another_value >\n-              some_other_value {}\n+        some_other_value\n+    {}\n \n     while aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa > bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb {\n     }\n@@ -22,7 +23,8 @@ fn main() {\n     }\n \n     'b: for xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx in\n-        some_iter(arg1, arg2) {\n+        some_iter(arg1, arg2)\n+    {\n         // do smth\n     }\n "}, {"sha": "6185e21a835cc86cb9391548497e7d64abb9643c", "filename": "tests/target/macros.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,10 +1,12 @@\n // rustfmt-normalize_comments: true\n itemmacro!(this, is.now().formatted(yay));\n \n-itemmacro!(really,\n-           long.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb()\n-               .is\n-               .formatted());\n+itemmacro!(\n+    really,\n+    long.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb()\n+        .is\n+        .formatted()\n+);\n \n itemmacro!{this, is.bracket().formatted()}\n \n@@ -17,21 +19,41 @@ fn main() {\n \n     baz!(1 + 2 + 3, quux.kaas());\n \n-    quux!(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n-          BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB);\n+    quux!(\n+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+        BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n+    );\n \n-    kaas!(// comments\n-          a, // post macro\n-          b /* another */);\n+    kaas!(\n+        // comments\n+        a, // post macro\n+        b /* another */\n+    );\n \n     trailingcomma!( a , b , c , );\n \n     noexpr!( i am not an expression, OK? );\n \n     vec![a, b, c];\n \n-    vec![AAAAAA, AAAAAA, AAAAAA, AAAAAA, AAAAAA, AAAAAA, AAAAAA, AAAAAA, AAAAAA, BBBBB, 5,\n-         100 - 30, 1.33, b, b, b];\n+    vec![\n+        AAAAAA,\n+        AAAAAA,\n+        AAAAAA,\n+        AAAAAA,\n+        AAAAAA,\n+        AAAAAA,\n+        AAAAAA,\n+        AAAAAA,\n+        AAAAAA,\n+        BBBBB,\n+        5,\n+        100 - 30,\n+        1.33,\n+        b,\n+        b,\n+        b,\n+    ];\n \n     vec![a /* comment */];\n \n@@ -46,13 +68,12 @@ fn main() {\n     vec![a; b, c];\n \n     vec![a;\n-         (|x| {\n-              let y = x + 1;\n-              let z = y + 1;\n-              z\n-          })(2)];\n-    vec![a;\n-         xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx];\n+            (|x| {\n+                 let y = x + 1;\n+                 let z = y + 1;\n+                 z\n+             })(2)];\n+    vec![a; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx];\n     vec![a; unsafe { x + 1 }];\n \n     unknown_bracket_macro__comma_should_not_be_stripped!["}, {"sha": "44d1f289f8e0f9b541fab7394493e4c4be2c274e", "filename": "tests/target/match-block-trailing-comma.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmatch-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmatch-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-block-trailing-comma.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -8,9 +8,9 @@ fn foo() {\n             \"line1\";\n             \"line2\"\n         },\n-        b => {\n-            (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-             bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)\n-        },\n+        b => (\n+            aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        ),\n     }\n }"}, {"sha": "0abc358a3405d541d3eb9c11d5ab7ac7bdaba0e4", "filename": "tests/target/match-nowrap-trailing-comma.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -9,7 +9,9 @@ fn foo() {\n             \"line1\";\n             \"line2\"\n         },\n-        b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n+        b => (\n+            aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        ),\n     }\n }"}, {"sha": "3849a8fb0e01712e2d5342ae55570ed208914d2a", "filename": "tests/target/match-nowrap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmatch-nowrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmatch-nowrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-nowrap.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -7,7 +7,9 @@ fn foo() {\n         a => {\n             foo()\n         }\n-        b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n+        b => (\n+            aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        ),\n     }\n }"}, {"sha": "f21fdb37dc5a8960a9eddb5677ef59004db4af20", "filename": "tests/target/match.rs", "status": "modified", "additions": 112, "deletions": 91, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -37,9 +37,10 @@ fn foo() {\n         Patternnnnnnnnnnnnnnnnnnnnnnnnn if loooooooooooooooooooooooooooooooooooooooooong_guard => {}\n \n         _ => {}\n-        ast::PathParameters::AngleBracketedParameters(ref data) if data.lifetimes.len() > 0 ||\n-                                                                   data.types.len() > 0 ||\n-                                                                   data.bindings.len() > 0 => {}\n+        ast::PathParameters::AngleBracketedParameters(ref data) if data.lifetimes.len() >\n+                                                                       0 ||\n+                                                                       data.types.len() > 0 ||\n+                                                                       data.bindings.len() > 0 => {}\n     }\n \n     let whatever = match something {\n@@ -66,15 +67,31 @@ fn main() {\n // Test that one-line bodies align.\n fn main() {\n     match r {\n-        Variableeeeeeeeeeeeeeeeee => {\n-            (\"variable\", vec![\"id\", \"name\", \"qualname\", \"value\", \"type\", \"scopeid\"], true, true)\n-        }\n-        Enummmmmmmmmmmmmmmmmmmmm => {\n-            (\"enum\", vec![\"id\", \"qualname\", \"scopeid\", \"value\"], true, true)\n-        }\n-        Variantttttttttttttttttttttttt => {\n-            (\"variant\", vec![\"id\", \"name\", \"qualname\", \"type\", \"value\", \"scopeid\"], true, true)\n-        }\n+        Variableeeeeeeeeeeeeeeeee => (\n+            \"variable\",\n+            vec![\"id\", \"name\", \"qualname\", \"value\", \"type\", \"scopeid\"],\n+            true,\n+            true,\n+        ),\n+        Enummmmmmmmmmmmmmmmmmmmm => (\n+            \"enum\",\n+            vec![\"id\", \"qualname\", \"scopeid\", \"value\"],\n+            true,\n+            true,\n+        ),\n+        Variantttttttttttttttttttttttt => (\n+            \"variant\",\n+            vec![\n+                \"id\",\n+                \"name\",\n+                \"qualname\",\n+                \"type\",\n+                \"value\",\n+                \"scopeid\",\n+            ],\n+            true,\n+            true,\n+        ),\n     };\n \n     match x {\n@@ -209,10 +226,12 @@ fn issue355() {\n         xc => vec![1, 2], // comment\n         yc => vec![3; 4], // comment\n         yd => {\n-            looooooooooooooooooooooooooooooooooooooooooooooooooooooooong_func(aaaaaaaaaa,\n-                                                                              bbbbbbbbbb,\n-                                                                              cccccccccc,\n-                                                                              dddddddddd)\n+            looooooooooooooooooooooooooooooooooooooooooooooooooooooooong_func(\n+                aaaaaaaaaa,\n+                bbbbbbbbbb,\n+                cccccccccc,\n+                dddddddddd,\n+            )\n         }\n     }\n }\n@@ -276,14 +295,12 @@ fn issue494() {\n             hir::StmtExpr(ref expr, id) |\n             hir::StmtSemi(ref expr, id) => {\n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n-                                                         span: stmt.span,\n-                                                         kind: StmtKind::Expr {\n-                                                             scope: cx.tcx\n-                                                                 .region_maps\n-                                                                 .node_extent(id),\n-                                                             expr: expr.to_ref(),\n-                                                         },\n-                                                     })))\n+                    span: stmt.span,\n+                    kind: StmtKind::Expr {\n+                        scope: cx.tcx.region_maps.node_extent(id),\n+                        expr: expr.to_ref(),\n+                    },\n+                })))\n             }\n         }\n     }\n@@ -300,10 +317,10 @@ fn issue386() {\n fn guards() {\n     match foo {\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa if foooooooooooooo &&\n-                                                                      barrrrrrrrrrrr => {}\n+                                                                          barrrrrrrrrrrr => {}\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa if foooooooooooooo &&\n-                                                                      barrrrrrrrrrrr => {}\n+                                                                          barrrrrrrrrrrr => {}\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n             if fooooooooooooooooooooo &&\n                (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb || cccccccccccccccccccccccccccccccccccccccc) => {\n@@ -313,80 +330,80 @@ fn guards() {\n \n fn issue1371() {\n     Some(match type_ {\n-             sfEvtClosed => Closed,\n-             sfEvtResized => {\n-                 let e = unsafe { *event.size.as_ref() };\n+        sfEvtClosed => Closed,\n+        sfEvtResized => {\n+            let e = unsafe { *event.size.as_ref() };\n \n-                 Resized {\n-                     width: e.width,\n-                     height: e.height,\n-                 }\n-             }\n-             sfEvtLostFocus => LostFocus,\n-             sfEvtGainedFocus => GainedFocus,\n-             sfEvtTextEntered => {\n-                 TextEntered {\n-                     unicode: unsafe {\n-                         ::std::char::from_u32((*event.text.as_ref()).unicode)\n-                             .expect(\"Invalid unicode encountered on TextEntered event\")\n-                     },\n-                 }\n-             }\n-             sfEvtKeyPressed => {\n-                 let e = unsafe { event.key.as_ref() };\n+            Resized {\n+                width: e.width,\n+                height: e.height,\n+            }\n+        }\n+        sfEvtLostFocus => LostFocus,\n+        sfEvtGainedFocus => GainedFocus,\n+        sfEvtTextEntered => {\n+            TextEntered {\n+                unicode: unsafe {\n+                    ::std::char::from_u32((*event.text.as_ref()).unicode)\n+                        .expect(\"Invalid unicode encountered on TextEntered event\")\n+                },\n+            }\n+        }\n+        sfEvtKeyPressed => {\n+            let e = unsafe { event.key.as_ref() };\n \n-                 KeyPressed {\n-                     code: unsafe { ::std::mem::transmute(e.code) },\n-                     alt: e.alt.to_bool(),\n-                     ctrl: e.control.to_bool(),\n-                     shift: e.shift.to_bool(),\n-                     system: e.system.to_bool(),\n-                 }\n-             }\n-             sfEvtKeyReleased => {\n-                 let e = unsafe { event.key.as_ref() };\n+            KeyPressed {\n+                code: unsafe { ::std::mem::transmute(e.code) },\n+                alt: e.alt.to_bool(),\n+                ctrl: e.control.to_bool(),\n+                shift: e.shift.to_bool(),\n+                system: e.system.to_bool(),\n+            }\n+        }\n+        sfEvtKeyReleased => {\n+            let e = unsafe { event.key.as_ref() };\n \n-                 KeyReleased {\n-                     code: unsafe { ::std::mem::transmute(e.code) },\n-                     alt: e.alt.to_bool(),\n-                     ctrl: e.control.to_bool(),\n-                     shift: e.shift.to_bool(),\n-                     system: e.system.to_bool(),\n-                 }\n-             }\n-         })\n+            KeyReleased {\n+                code: unsafe { ::std::mem::transmute(e.code) },\n+                alt: e.alt.to_bool(),\n+                ctrl: e.control.to_bool(),\n+                shift: e.shift.to_bool(),\n+                system: e.system.to_bool(),\n+            }\n+        }\n+    })\n }\n \n fn issue1395() {\n     let bar = Some(true);\n     let foo = Some(true);\n     let mut x = false;\n     bar.and_then(|_| match foo {\n-                     None => None,\n-                     Some(b) => {\n-                         x = true;\n-                         Some(b)\n-                     }\n-                 });\n+        None => None,\n+        Some(b) => {\n+            x = true;\n+            Some(b)\n+        }\n+    });\n }\n \n fn issue1456() {\n     Ok(Recording {\n-           artists: match reader\n-                     .evaluate(\".//mb:recording/mb:artist-credit/mb:name-credit\")? {\n-               Nodeset(nodeset) => {\n-                   let res: Result<Vec<ArtistRef>, ReadError> = nodeset\n-                       .iter()\n-                       .map(|node| {\n-                                XPathNodeReader::new(node, &context)\n-                                    .and_then(|r| ArtistRef::from_xml(&r))\n-                            })\n-                       .collect();\n-                   res?\n-               }\n-               _ => Vec::new(),\n-           },\n-       })\n+        artists: match reader.evaluate(\n+            \".//mb:recording/mb:artist-credit/mb:name-credit\",\n+        )? {\n+            Nodeset(nodeset) => {\n+                let res: Result<Vec<ArtistRef>, ReadError> = nodeset\n+                    .iter()\n+                    .map(|node| {\n+                        XPathNodeReader::new(node, &context).and_then(|r| ArtistRef::from_xml(&r))\n+                    })\n+                    .collect();\n+                res?\n+            }\n+            _ => Vec::new(),\n+        },\n+    })\n }\n \n fn issue1460() {\n@@ -399,9 +416,13 @@ fn issue1460() {\n }\n \n fn issue525() {\n-    foobar(f, \"{}\", match *self {\n-        TaskState::Started => \"started\",\n-        TaskState::Success => \"success\",\n-        TaskState::Failed => \"failed\",\n-    });\n+    foobar(\n+        f,\n+        \"{}\",\n+        match *self {\n+            TaskState::Started => \"started\",\n+            TaskState::Success => \"success\",\n+            TaskState::Failed => \"failed\",\n+        },\n+    );\n }"}, {"sha": "a5d186c5df7f56ccaa90778984cc8fffe0f9b3e6", "filename": "tests/target/mod-1.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmod-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmod-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmod-1.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -23,12 +23,13 @@ mod boxed {\n }\n \n pub mod x {\n-    pub fn freopen(filename: *const c_char,\n-                   mode: *const c_char,\n-                   mode2: *const c_char,\n-                   mode3: *const c_char,\n-                   file: *mut FILE)\n-                   -> *mut FILE {\n+    pub fn freopen(\n+        filename: *const c_char,\n+        mode: *const c_char,\n+        mode2: *const c_char,\n+        mode3: *const c_char,\n+        file: *mut FILE,\n+    ) -> *mut FILE {\n     }\n }\n "}, {"sha": "8c1e2d9695dc5098b61113d0974d06daa6480abc", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -31,18 +31,21 @@ mod other;\n fn foo(a: isize, b: u32 /* blah blah */, c: f64) {}\n \n fn foo() -> Box<Write + 'static>\n-    where 'a: 'b,\n-          for<'a> D<'b>: 'a\n+where\n+    'a: 'b,\n+    for<'a> D<'b>: 'a,\n {\n     hello!()\n }\n \n-fn baz<'a: 'b, // comment on 'a\n-       T: SomsssssssssssssssssssssssssssssssssssssssssssssssssssssseType /* comment on T */>\n-    (a: A,\n-     b: B, // comment on b\n-     c: C)\n-     -> Bob {\n+fn baz<\n+    'a: 'b, // comment on 'a\n+    T: SomsssssssssssssssssssssssssssssssssssssssssssssssssssssseType /* comment on T */\n+>(\n+    a: A,\n+    b: B, // comment on b\n+    c: C,\n+) -> Bob {\n     #[attr1]\n     extern crate foo;\n     #[attr2]\n@@ -65,10 +68,11 @@ fn qux(a: dadsfa,   // Comment 1\n \n /// Blah blah blah.\n impl Bar {\n-    fn foo(&mut self,\n-           a: sdfsdfcccccccccccccccccccccccccccccccccccccccccccccccccc, // comment on a\n-           b: sdfasdfsdfasfs /* closing comment */)\n-           -> isize {\n+    fn foo(\n+        &mut self,\n+        a: sdfsdfcccccccccccccccccccccccccccccccccccccccccccccccccc, // comment on a\n+        b: sdfasdfsdfasfs, // closing comment\n+    ) -> isize {\n     }\n \n     /// Blah blah blah.\n@@ -112,7 +116,8 @@ struct Bar;\n \n // With a where clause and generics.\n pub struct Foo<'a, Y: Baz>\n-    where X: Whatever\n+where\n+    X: Whatever,\n {\n     f: SomeType, // Comment beside a field\n }\n@@ -129,11 +134,15 @@ fn main() {\n         hello();\n     }\n \n-    let rc = Cell::new(42usize,\n-                       42usize,\n-                       Cell::new(42usize,\n-                                 remaining_widthremaining_widthremaining_widthremaining_width),\n-                       42usize);\n+    let rc = Cell::new(\n+        42usize,\n+        42usize,\n+        Cell::new(\n+            42usize,\n+            remaining_widthremaining_widthremaining_widthremaining_width,\n+        ),\n+        42usize,\n+    );\n     let rc = RefCell::new(42usize, remaining_width, remaining_width); // a comment\n     let x = \"Hello!!!!!!!!! abcd  abcd abcd abcd abcd abcd\\n abcd abcd abcd abcd abcd abcd abcd \\\n              abcd abcd abcd  abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd \\\n@@ -152,13 +161,14 @@ fn deconstruct()\n {\n }\n \n-fn deconstruct(foo: Bar)\n-               -> (SocketAddr,\n-                   Method,\n-                   Headers,\n-                   RequestUri,\n-                   HttpVersion,\n-                   AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) {\n+fn deconstruct(\n+    foo: Bar,\n+) -> (SocketAddr,\n+                                    Method,\n+                                    Headers,\n+                                    RequestUri,\n+                                    HttpVersion,\n+                                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) {\n }\n \n #[rustfmt_skip]"}, {"sha": "9a54789ddcd6884c21aa6ead773598b1f0d67043", "filename": "tests/target/nested-if-else.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fnested-if-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fnested-if-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnested-if-else.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,11 +1,11 @@\n fn issue1518() {\n     Some(Object {\n-             field: if a {\n-                 a_thing\n-             } else if b {\n-                 b_thing\n-             } else {\n-                 c_thing\n-             },\n-         })\n+        field: if a {\n+            a_thing\n+        } else if b {\n+            b_thing\n+        } else {\n+            c_thing\n+        },\n+    })\n }"}, {"sha": "0312d6ff1017fefc0a3915cb17e1b6ae929e82e0", "filename": "tests/target/nested-visual-block.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fnested-visual-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fnested-visual-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnested-visual-block.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -20,15 +20,18 @@ fn main() {\n         |item| {\n             match *item {\n                 StructLitField::Regular(ref field) => {\n-                    rewrite_field(inner_context,\n-                                  &field,\n-                                  &Constraints::new(v_budget.checked_sub(1).unwrap_or(0), indent))\n+                    rewrite_field(\n+                        inner_context,\n+                        &field,\n+                        &Constraints::new(v_budget.checked_sub(1).unwrap_or(0), indent),\n+                    )\n                 }\n                 StructLitField::Base(ref expr) => {\n                     // 2 = ..\n-                    expr.rewrite(inner_context,\n-                                 &Constraints::new(try_opt!(v_budget.checked_sub(2)), indent + 2))\n-                        .map(|s| format!(\"..{}\", s))\n+                    expr.rewrite(\n+                        inner_context,\n+                        &Constraints::new(try_opt!(v_budget.checked_sub(2)), indent + 2),\n+                    ).map(|s| format!(\"..{}\", s))\n                 }\n             }\n         },\n@@ -45,16 +48,14 @@ fn main() {\n     });\n \n     // #1581\n-    bootstrap\n-        .checks\n-        .register(\"PERSISTED_LOCATIONS\", move || if locations2\n-               .0\n-               .inner_mut\n-               .lock()\n-               .poisoned {\n-            Check::new(State::Error,\n-                       \"Persisted location storage is poisoned due to a write failure\")\n+    bootstrap.checks.register(\"PERSISTED_LOCATIONS\", move || {\n+        if locations2.0.inner_mut.lock().poisoned {\n+            Check::new(\n+                State::Error,\n+                \"Persisted location storage is poisoned due to a write failure\",\n+            )\n         } else {\n             Check::new(State::Healthy, \"Persisted location storage is healthy\")\n-        });\n+        }\n+    });\n }"}, {"sha": "0ab6f081e4498b9cf31a1fcd22a9e4b88c1d0f1d", "filename": "tests/target/nested_skipped/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fnested_skipped%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fnested_skipped%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnested_skipped%2Fmod.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,3 +1,3 @@\n fn ugly() {\n-92;\n+    92;\n }"}, {"sha": "da266389b6bc5fe60538f61eaf0105cf090f9a6b", "filename": "tests/target/paths.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpaths.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,17 +1,18 @@\n // rustfmt-normalize_comments: true\n \n fn main() {\n-    let constellation_chan =\n-        Constellation::<layout::layout_task::LayoutTask,\n-                        script::script_task::ScriptTask>::start(compositor_proxy,\n-                                                                resource_task,\n-                                                                image_cache_task,\n-                                                                font_cache_task,\n-                                                                time_profiler_chan,\n-                                                                mem_profiler_chan,\n-                                                                devtools_chan,\n-                                                                storage_task,\n-                                                                supports_clipboard);\n+    let constellation_chan = Constellation::<layout::layout_task::LayoutTask,\n+                                             script::script_task::ScriptTask>::start(\n+        compositor_proxy,\n+        resource_task,\n+        image_cache_task,\n+        font_cache_task,\n+        time_profiler_chan,\n+        mem_profiler_chan,\n+        devtools_chan,\n+        storage_task,\n+        supports_clipboard,\n+    );\n \n     Quux::<ParamOne /* Comment 1 */, ParamTwo /* Comment 2 */>::some_func();\n "}, {"sha": "538d0d41a5e79211d42b2678223b5a0a716de0e4", "filename": "tests/target/space-before-bound.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fspace-before-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fspace-before-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-before-bound.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,10 +2,21 @@\n \n trait Trait {}\n trait Trait2 {}\n-fn f<'a, 'b : 'a, T : Trait, U>() where U : Trait2 {}\n+fn f<'a, 'b : 'a, T : Trait, U>()\n+where\n+    U : Trait2,\n+{\n+}\n \n // should fit on the line\n-fn f2<'a, 'b : 'a, Ttttttttttttttttttttttttttttttttttttttttttttttt : Trait, U>() where U : Trait2 {}\n+fn f2<'a, 'b : 'a, Ttttttttttttttttttttttttttttttttttttttttttttttt : Trait, U>()\n+where\n+    U : Trait2,\n+{\n+}\n // should be wrapped\n-fn f2<'a, 'b : 'a, Tttttttttttttttttttttttttttttttttttttttttttttttt : Trait, U>() where U : Trait2 {\n+fn f2<'a, 'b : 'a, Tttttttttttttttttttttttttttttttttttttttttttttttt : Trait, U>()\n+where\n+    U : Trait2,\n+{\n }"}, {"sha": "3969327b8ec0d86c8a9f2d3b1d96b79cfba59b2a", "filename": "tests/target/spaces-within-angle-brackets.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-angle-brackets.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -55,4 +55,8 @@ impl Foo {\n trait MyTrait< A, D > {}\n impl< A: Send, D: Send > MyTrait< A, D > for Foo {}\n \n-fn foo() where for< 'a > u32: 'a {}\n+fn foo()\n+where\n+    for< 'a > u32: 'a,\n+{\n+}"}, {"sha": "3a1b24d4defca15beb271e8e97890e03a0cf1ccb", "filename": "tests/target/spaces-within-square-brackets.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-square-brackets.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -13,22 +13,22 @@ fn main() {\n     let slice = &arr[ 1..2 ];\n \n     let line100_________________________________________________________________________ = [ 1, 2 ];\n-    let line101__________________________________________________________________________ = [ 1,\n-                                                                                              2 ];\n-    let line102___________________________________________________________________________ = [ 1,\n-                                                                                               2 ];\n-    let line103____________________________________________________________________________ = [ 1,\n-                                                                                                2 ];\n+    let line101__________________________________________________________________________ =\n+        [ 1, 2 ];\n+    let line102___________________________________________________________________________ =\n+        [ 1, 2 ];\n+    let line103____________________________________________________________________________ =\n+        [ 1, 2 ];\n     let line104_____________________________________________________________________________ =\n         [ 1, 2 ];\n \n     let line100_____________________________________________________________________ = vec![ 1, 2 ];\n-    let line101______________________________________________________________________ = vec![ 1,\n-                                                                                              2 ];\n-    let line102_______________________________________________________________________ = vec![ 1,\n-                                                                                               2 ];\n-    let line103________________________________________________________________________ = vec![ 1,\n-                                                                                                2 ];\n+    let line101______________________________________________________________________ =\n+        vec![ 1, 2 ];\n+    let line102_______________________________________________________________________ =\n+        vec![ 1, 2 ];\n+    let line103________________________________________________________________________ =\n+        vec![ 1, 2 ];\n     let line104_________________________________________________________________________ =\n         vec![ 1, 2 ];\n }"}, {"sha": "12a8eba111b6ece04ea84e35002db9c8ebbe778c", "filename": "tests/target/static.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstatic.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,11 +1,52 @@\n const FILE_GENERIC_READ: DWORD = STANDARD_RIGHTS_READ | FILE_READ_DATA | FILE_READ_ATTRIBUTES |\n-                                 FILE_READ_EA | SYNCHRONIZE;\n+    FILE_READ_EA | SYNCHRONIZE;\n \n-static boolnames: &'static [&'static str] =\n-    &[\"bw\", \"am\", \"xsb\", \"xhp\", \"xenl\", \"eo\", \"gn\", \"hc\", \"km\", \"hs\", \"in\", \"db\", \"da\", \"mir\",\n-      \"msgr\", \"os\", \"eslok\", \"xt\", \"hz\", \"ul\", \"xon\", \"nxon\", \"mc5i\", \"chts\", \"nrrmc\", \"npc\",\n-      \"ndscr\", \"ccc\", \"bce\", \"hls\", \"xhpa\", \"crxm\", \"daisy\", \"xvpa\", \"sam\", \"cpix\", \"lpix\",\n-      \"OTbs\", \"OTns\", \"OTnc\", \"OTMT\", \"OTNL\", \"OTpt\", \"OTxr\"];\n+static boolnames: &'static [&'static str] = &[\n+    \"bw\",\n+    \"am\",\n+    \"xsb\",\n+    \"xhp\",\n+    \"xenl\",\n+    \"eo\",\n+    \"gn\",\n+    \"hc\",\n+    \"km\",\n+    \"hs\",\n+    \"in\",\n+    \"db\",\n+    \"da\",\n+    \"mir\",\n+    \"msgr\",\n+    \"os\",\n+    \"eslok\",\n+    \"xt\",\n+    \"hz\",\n+    \"ul\",\n+    \"xon\",\n+    \"nxon\",\n+    \"mc5i\",\n+    \"chts\",\n+    \"nrrmc\",\n+    \"npc\",\n+    \"ndscr\",\n+    \"ccc\",\n+    \"bce\",\n+    \"hls\",\n+    \"xhpa\",\n+    \"crxm\",\n+    \"daisy\",\n+    \"xvpa\",\n+    \"sam\",\n+    \"cpix\",\n+    \"lpix\",\n+    \"OTbs\",\n+    \"OTns\",\n+    \"OTnc\",\n+    \"OTMT\",\n+    \"OTNL\",\n+    \"OTpt\",\n+    \"OTxr\",\n+];\n \n static mut name: SomeType =\n     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;"}, {"sha": "7ac75290f2e1069cf33c75ce14b312d7526bc0a9", "filename": "tests/target/string-lit.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring-lit.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -26,7 +26,9 @@ formatting\"#;\n     filename.replace(\" \", \"\\\\\");\n \n     let xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =\n-        funktion(\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\");\n+        funktion(\n+            \"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\",\n+        );\n \n     let unicode = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n     let unicode2 = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n@@ -42,8 +44,10 @@ fn issue682() {\n }\n \n fn issue716() {\n-    println!(\"forall x. mult(e(), x) = x /\\\\\n-              forall x. mult(x, x) = e()\");\n+    println!(\n+        \"forall x. mult(e(), x) = x /\\\\\n+              forall x. mult(x, x) = e()\"\n+    );\n }\n \n fn issue_1282() {"}, {"sha": "1cc73d14060a5ccb059e2221298a39f55033da33", "filename": "tests/target/string_punctuation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstring_punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstring_punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring_punctuation.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,10 +2,14 @@\n // rustfmt-error_on_line_overflow: false\n \n fn main() {\n-    println!(\"ThisIsAReallyLongStringWithNoSpaces.It_should_prefer_to_break_onpunctuation:\\\n-              Likethisssssssssssss\");\n+    println!(\n+        \"ThisIsAReallyLongStringWithNoSpaces.It_should_prefer_to_break_onpunctuation:\\\n+         Likethisssssssssssss\"\n+    );\n     format!(\"{}__{}__{}ItShouldOnlyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyNoticeSemicolonsPeriodsColonsAndCommasAndResortToMid-CharBreaksAfterPunctuation{}{}\",x,y,z,a,b);\n-    println!(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaalhijalfhiigjapdighjapdigjapdighdapighapdighpaidhg;\\\n-              adopgihadoguaadbadgad,qeoihapethae8t0aet8haetadbjtaeg;\\\n-              ooeouthaoeutgadlgajduabgoiuadogabudogubaodugbadgadgadga;adoughaoeugbaouea\");\n+    println!(\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaalhijalfhiigjapdighjapdigjapdighdapighapdighpaidhg;\\\n+         adopgihadoguaadbadgad,qeoihapethae8t0aet8haetadbjtaeg;\\\n+         ooeouthaoeutgadlgajduabgoiuadogabudogubaodugbadgadgadga;adoughaoeugbaouea\"\n+    );\n }"}, {"sha": "a42d8e7aada559aac4f0d1e67e9c424703bfd378", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -50,11 +50,11 @@ fn main() {\n     };\n \n     Some(Data::MethodCallData(MethodCallData {\n-                                  span: sub_span.unwrap(),\n-                                  scope: self.enclosing_scope(id),\n-                                  ref_id: def_id,\n-                                  decl_id: Some(decl_id),\n-                              }));\n+        span: sub_span.unwrap(),\n+        scope: self.enclosing_scope(id),\n+        ref_id: def_id,\n+        decl_id: Some(decl_id),\n+    }));\n \n     Diagram {\n         //                 o        This graph demonstrates how"}, {"sha": "0eb7b8b759f72822c651423731d46b2ed4739c73", "filename": "tests/target/struct_lits_multiline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstruct_lits_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstruct_lits_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_multiline.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -59,11 +59,11 @@ fn main() {\n     };\n \n     Some(Data::MethodCallData(MethodCallData {\n-                                  span: sub_span.unwrap(),\n-                                  scope: self.enclosing_scope(id),\n-                                  ref_id: def_id,\n-                                  decl_id: Some(decl_id),\n-                              }));\n+        span: sub_span.unwrap(),\n+        scope: self.enclosing_scope(id),\n+        ref_id: def_id,\n+        decl_id: Some(decl_id),\n+    }));\n \n     Diagram {\n         //                 o        This graph demonstrates how"}, {"sha": "fa49c4f61a4099794060a6ad0e340d5256c30a8b", "filename": "tests/target/struct_tuple_visual.rs", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstruct_tuple_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstruct_tuple_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_tuple_visual.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -6,34 +6,44 @@ fn foo() {\n \n     Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(f(), b());\n \n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(// Comment\n-                                                                                      foo(), /* Comment */\n-                                                                                      // Comment\n-                                                                                      bar() /* Comment */);\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(\n+        // Comment\n+        foo(), // Comment\n+        // Comment\n+        bar(), /* Comment */\n+    );\n \n     Foo(Bar, f());\n \n-    Quux(if cond {\n-             bar();\n-         },\n-         baz());\n-\n-    Baz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n-        zzzzz /* test */);\n-\n-    A(// Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n-      // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n-      // hendrerit. Donec et mollis dolor.\n-      item(),\n-      // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n-      // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n-      Item);\n-\n-    Diagram(//                 o        This graph demonstrates how\n-            //                / \\       significant whitespace is\n-            //               o   o      preserved.\n-            //              /|\\   \\\n-            //             o o o   o\n-            G)\n+    Quux(\n+        if cond {\n+            bar();\n+        },\n+        baz(),\n+    );\n+\n+    Baz(\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        zzzzz, /* test */\n+    );\n+\n+    A(\n+        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // hendrerit. Donec et mollis dolor.\n+        item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        Item,\n+    );\n+\n+    Diagram(\n+        //                 o        This graph demonstrates how\n+        //                / \\       significant whitespace is\n+        //               o   o      preserved.\n+        //              /|\\   \\\n+        //             o o o   o\n+        G,\n+    )\n \n }"}, {"sha": "f6387fc2bf3acf2bf18125c019dbcbea6c0b5368", "filename": "tests/target/structs.rs", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -59,14 +59,17 @@ struct Qux<'a,\n     pub W,\n );\n \n-struct Tuple(// Comment 1\n-             AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n-             // Comment 2\n-             BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB);\n+struct Tuple(\n+    // Comment 1\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+    // Comment 2\n+    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n+);\n \n // With a where clause and generics.\n pub struct Foo<'a, Y: Baz>\n-    where X: Whatever\n+where\n+    X: Whatever,\n {\n     f: SomeType, // Comment beside a field\n }\n@@ -145,38 +148,52 @@ struct Deep {\n \n struct Foo<T>(T);\n struct Foo<T>(T)\n-    where T: Copy,\n-          T: Eq;\n-struct Foo<T>(TTTTTTTTTTTTTTTTT,\n-              UUUUUUUUUUUUUUUUUUUUUUUU,\n-              TTTTTTTTTTTTTTTTTTT,\n-              UUUUUUUUUUUUUUUUUUU);\n-struct Foo<T>(TTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT) where T: PartialEq;\n+where\n+    T: Copy,\n+    T: Eq;\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUUUU,\n+    TTTTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUU\n+);\n+struct Foo<T>(TTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT)\n+where\n+    T: PartialEq;\n struct Foo<T>(TTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTTTT)\n-    where T: PartialEq;\n-struct Foo<T>(TTTTTTTTTTTTTTTTT,\n-              UUUUUUUUUUUUUUUUUUUUUUUU,\n-              TTTTTTTTTTTTTTTTTTT,\n-              UUUUUUUUUUUUUUUUUUU)\n-    where T: PartialEq;\n-struct Foo<T>(TTTTTTTTTTTTTTTTT, // Foo\n-              UUUUUUUUUUUUUUUUUUUUUUUU, // Bar\n-              // Baz\n-              TTTTTTTTTTTTTTTTTTT,\n-              // Qux (FIXME #572 - doc comment)\n-              UUUUUUUUUUUUUUUUUUU);\n+where\n+    T: PartialEq;\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUUUU,\n+    TTTTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUU\n+)\n+where\n+    T: PartialEq;\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTT, // Foo\n+    UUUUUUUUUUUUUUUUUUUUUUUU, // Bar\n+    // Baz\n+    TTTTTTTTTTTTTTTTTTT,\n+    // Qux (FIXME #572 - doc comment)\n+    UUUUUUUUUUUUUUUUUUU\n+);\n \n mod m {\n     struct X<T>\n-        where T: Sized\n+    where\n+        T: Sized,\n     {\n         a: T,\n     }\n }\n \n-struct Foo<T>(TTTTTTTTTTTTTTTTTTT,\n-              /// Qux\n-              UUUUUUUUUUUUUUUUUUU);\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTTTT,\n+    /// Qux\n+    UUUUUUUUUUUUUUUUUUU\n+);\n \n struct Issue677 {\n     pub ptr: *const libc::c_void,"}, {"sha": "9ef4eecbcc56bc503c768ac9fcdf21a23d68badd", "filename": "tests/target/trailing_commas.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftrailing_commas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftrailing_commas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrailing_commas.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -12,56 +12,65 @@ fn main() {\n }\n \n fn f<S, T>(x: T, y: S) -> T\n-    where T: P,\n-          S: Q,\n+where\n+    T: P,\n+    S: Q,\n {\n     x\n }\n \n impl Trait for T\n-    where T: P,\n+where\n+    T: P,\n {\n     fn f(x: T) -> T\n-        where T: Q + R,\n+    where\n+        T: Q + R,\n     {\n         x\n     }\n }\n \n struct Pair<S, T>\n-    where T: P,\n-          S: P + Q,\n+where\n+    T: P,\n+    S: P + Q,\n {\n     a: T,\n     b: S,\n }\n \n struct TupPair<S, T>(S, T)\n-    where T: P,\n-          S: P + Q;\n+where\n+    T: P,\n+    S: P + Q;\n \n enum E<S, T>\n-    where S: P,\n-          T: P,\n+where\n+    S: P,\n+    T: P,\n {\n     A { a: T, },\n }\n \n-type Double<T>\n-    where T: P,\n-          T: Q = Pair<T, T>;\n+type Double<T> where\n+    T: P,\n+    T: Q = Pair<T, T>;\n \n extern \"C\" {\n     fn f<S, T>(x: T, y: S) -> T\n-        where T: P,\n-              S: Q;\n+    where\n+        T: P,\n+        S: Q;\n }\n \n trait Q<S, T>\n-    where T: P,\n-          S: R,\n+where\n+    T: P,\n+    S: R,\n {\n     fn f<U, V>(self, x: T, y: S, z: U) -> Self\n-        where U: P,\n-              V: P;\n+    where\n+        U: P,\n+        V: P;\n }"}, {"sha": "e4758e98b5e9876cad48769816be8dd32090d1a5", "filename": "tests/target/trait.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -7,15 +7,18 @@ trait Foo {\n \n     fn baz(a: AAAAAAAAAAAAAAAAAAAAAA, b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB) -> RetType;\n \n-    fn foo(a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, // Another comment\n-           b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)\n-           -> RetType; // Some comment\n+    fn foo(\n+        a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, // Another comment\n+        b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n+    ) -> RetType; // Some comment\n \n     fn baz(&mut self) -> i32;\n \n     fn increment(&mut self, x: i32);\n \n-    fn read(&mut self, x: BufReader<R> /* Used to be MemReader */) where R: Read;\n+    fn read(&mut self, x: BufReader<R> /* Used to be MemReader */)\n+    where\n+        R: Read;\n }\n \n pub trait WriteMessage {\n@@ -32,7 +35,8 @@ trait TraitWithExpr {\n \n trait Test {\n     fn read_struct<T, F>(&mut self, s_name: &str, len: usize, f: F) -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error>;\n+    where\n+        F: FnOnce(&mut Self) -> Result<T, Self::Error>;\n }\n \n trait T {}\n@@ -42,27 +46,35 @@ trait Foo {\n }\n \n trait ConstCheck<T>: Foo\n-    where T: Baz\n+where\n+    T: Baz,\n {\n     const J: i32;\n }\n \n-trait Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt<T> where T: Foo {}\n+trait Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt<T>\n+where\n+    T: Foo\n+{\n+}\n \n trait Ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt<T>\n-    where T: Foo\n+where\n+    T: Foo\n {\n }\n \n trait FooBar<T>\n     : Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\n-    where J: Bar\n+where\n+    J: Bar,\n {\n     fn test();\n }\n \n trait WhereList<T, J>\n-    where T: Foo,\n-          J: Bar\n+where\n+    T: Foo,\n+    J: Bar\n {\n }"}, {"sha": "e16fba278d2c359e46993b1d3bb89515fddbb77f", "filename": "tests/target/try-conversion.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftry-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftry-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftry-conversion.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -18,9 +18,10 @@ fn test() {\n }\n \n fn issue1291() {\n-    fs::create_dir_all(&gitfiledir)\n-        .chain_err(|| {\n-                       format!(\"failed to create the {} submodule directory for the workarea\",\n-                               name)\n-                   })?;\n+    fs::create_dir_all(&gitfiledir).chain_err(|| {\n+        format!(\n+            \"failed to create the {} submodule directory for the workarea\",\n+            name\n+        )\n+    })?;\n }"}, {"sha": "f398b7dffb789e84f1ea96020d2dc8cc0fca5308", "filename": "tests/target/tuple.rs", "status": "modified", "additions": 51, "deletions": 29, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftuple.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -2,52 +2,74 @@\n \n fn foo() {\n     let a = (a, a, a, a, a);\n-    let aaaaaaaaaaaaaaaa = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaa, aaaaaaaaaaaaaa);\n-    let aaaaaaaaaaaaaaaaaaaaaa = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-                                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-                                  aaaaaaaaaaaaaaaaaaaaaaaaa,\n-                                  aaaa);\n+    let aaaaaaaaaaaaaaaa = (\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        aaaaaaaaaaaaaa,\n+        aaaaaaaaaaaaaa,\n+    );\n+    let aaaaaaaaaaaaaaaaaaaaaa = (\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        aaaaaaaaaaaaaaaaaaaaaaaaa,\n+        aaaa,\n+    );\n     let a = (a,);\n \n-    let b = (// This is a comment\n-             b, // Comment\n-             b /* Trailing comment */);\n+    let b = (\n+        // This is a comment\n+        b, // Comment\n+        b, /* Trailing comment */\n+    );\n \n     // #1063\n     foo(x.0 .0);\n }\n \n fn a() {\n-    ((aaaaaaaa,\n-      aaaaaaaaaaaaa,\n-      aaaaaaaaaaaaaaaaa,\n-      aaaaaaaaaaaaaa,\n-      aaaaaaaaaaaaaaaa,\n-      aaaaaaaaaaaaaa),)\n+    ((\n+        aaaaaaaa,\n+        aaaaaaaaaaaaa,\n+        aaaaaaaaaaaaaaaaa,\n+        aaaaaaaaaaaaaa,\n+        aaaaaaaaaaaaaaaa,\n+        aaaaaaaaaaaaaa,\n+    ),)\n }\n \n fn b() {\n-    ((bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n-     bbbbbbbbbbbbbbbbbb)\n+    (\n+        (\n+            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        ),\n+        bbbbbbbbbbbbbbbbbb,\n+    )\n }\n \n fn issue550() {\n-    self.visitor.visit_volume(self.level.sector_id(sector),\n-                              (floor_y,\n-                               if is_sky_flat(ceil_tex) {\n-                                   from_wad_height(self.height_range.1)\n-                               } else {\n-                                   ceil_y\n-                               }));\n+    self.visitor.visit_volume(self.level.sector_id(sector), (\n+        floor_y,\n+        if is_sky_flat(ceil_tex) {\n+            from_wad_height(self.height_range.1)\n+        } else {\n+            ceil_y\n+        },\n+    ));\n }\n \n fn issue775() {\n     if indent {\n-        let a = mk_object(&[(\"a\".to_string(), Boolean(true)),\n-                            (\"b\".to_string(),\n-                             Array(vec![mk_object(&[(\"c\".to_string(),\n-                                                     String(\"\\x0c\\r\".to_string()))]),\n-                                        mk_object(&[(\"d\".to_string(),\n-                                                     String(\"\".to_string()))])]))]);\n+        let a = mk_object(\n+            &[\n+                (\"a\".to_string(), Boolean(true)),\n+                (\n+                    \"b\".to_string(),\n+                    Array(vec![\n+                        mk_object(&[(\"c\".to_string(), String(\"\\x0c\\r\".to_string()))]),\n+                        mk_object(&[(\"d\".to_string(), String(\"\".to_string()))]),\n+                    ]),\n+                ),\n+            ],\n+        );\n     }\n }"}, {"sha": "f99d524eb2ed514696dc7de707cf9ad0b4573c2d", "filename": "tests/target/type-ascription.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype-ascription.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,12 +1,12 @@\n fn main() {\n     let xxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy:\n-                      SomeTrait<AA, BB, CC>;\n+        SomeTrait<AA, BB, CC>;\n \n     let xxxxxxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy:\n-                          AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n     let z = funk(yyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzz, wwwwww):\n-            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n     x: u32 - 1u32 / 10f32: u32\n }"}, {"sha": "f35293de6266cd1d210c0b9ec1d4ec609ba2948c", "filename": "tests/target/type-punctuation.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftype-punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftype-punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype-punctuation.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,12 +1,14 @@\n // rustfmt-type_punctuation_density: Compressed\n \n struct Foo<T: Eq+Clone, U>\n-    where U: Eq+Clone {\n+where\n+    U: Eq+Clone, {\n     // body\n }\n \n trait Foo<'a, T=usize>\n-    where T: 'a+Eq+Clone\n+where\n+    T: 'a+Eq+Clone,\n {\n     type Bar: Eq+Clone;\n }\n@@ -16,13 +18,15 @@ trait Foo: Eq+Clone {\n }\n \n impl<T> Foo<'a> for Bar\n-    where for<'a> T: 'a+Eq+Clone\n+where\n+    for<'a> T: 'a+Eq+Clone,\n {\n     // body\n }\n \n fn foo<'a, 'b, 'c>()\n-    where 'a: 'b+'c\n+where\n+    'a: 'b+'c,\n {\n     // body\n }"}, {"sha": "86180149aac69b2901c1fdc81c4fa96ac16d35e2", "filename": "tests/target/type_alias.rs", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -7,16 +7,18 @@ pub type PublicTest<'a, I, O> = Result<Vec<MyLongType>,\n                                        Box<Parser<Input = I, Output = char> + 'a>,\n                                        Box<Parser<Input = I, Output = char> + 'a>>;\n \n-pub type LongGenericListTest<'a,\n-                             'b,\n-                             'c,\n-                             'd,\n-                             LONGPARAMETERNAME,\n-                             LONGPARAMETERNAME,\n-                             LONGPARAMETERNAME,\n-                             A,\n-                             B,\n-                             C> = Option<Vec<MyType>>;\n+pub type LongGenericListTest<\n+    'a,\n+    'b,\n+    'c,\n+    'd,\n+    LONGPARAMETERNAME,\n+    LONGPARAMETERNAME,\n+    LONGPARAMETERNAME,\n+    A,\n+    B,\n+    C\n+> = Option<Vec<MyType>>;\n \n pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<i32>;\n \n@@ -26,30 +28,34 @@ pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAM\n pub type Exactly100CharsToEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> =\n     Vec<i32>;\n \n-pub type GenericsFitButNotEqualTest<'a,\n-                                    'b,\n-                                    'c,\n-                                    'd,\n-                                    LONGPARAMETERNAME,\n-                                    LONGPARAMETERNAME,\n-                                    A1,\n-                                    B,\n-                                    C> = Vec<i32>;\n-\n-pub type CommentTest<// Lifetime\n-                     'a, // Type\n-                     T> = ();\n-\n-\n-pub type WithWhereClause<LONGPARAMETERNAME, T>\n-    where T: Clone,\n-          LONGPARAMETERNAME: Clone + Eq + OtherTrait = Option<T>;\n-\n-pub type Exactly100CharstoEqualWhereTest<T, U, PARAMET> where T: Clone + Ord + Eq + SomeOtherTrait =\n-    Option<T>;\n-\n-pub type Exactly101CharstoEqualWhereTest<T, U, PARAMETE>\n-    where T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;\n+pub type GenericsFitButNotEqualTest<\n+    'a,\n+    'b,\n+    'c,\n+    'd,\n+    LONGPARAMETERNAME,\n+    LONGPARAMETERNAME,\n+    A1,\n+    B,\n+    C\n+> = Vec<i32>;\n+\n+pub type CommentTest<\n+    // Lifetime\n+    'a, // Type\n+    T\n+> = ();\n+\n+\n+pub type WithWhereClause<LONGPARAMETERNAME, T> where\n+    T: Clone,\n+    LONGPARAMETERNAME: Clone + Eq + OtherTrait = Option<T>;\n+\n+pub type Exactly100CharstoEqualWhereTest<T, U, PARAMET> where\n+    T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;\n+\n+pub type Exactly101CharstoEqualWhereTest<T, U, PARAMETE> where\n+    T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;\n \n type RegisterPlugin = unsafe fn(pt: *const c_char,\n                                 plugin: *mut c_void,"}, {"sha": "724f3b34bf0b623668fc9992980a865c72c85ff3", "filename": "tests/target/where-clause.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Ftarget%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwhere-clause.rs?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,21 +1,29 @@\n pub trait Test {\n     fn very_long_method_name<F>(self, f: F) -> MyVeryLongReturnType\n-        where F: FnMut(Self::Item) -> bool;\n-    fn exactly_100_chars1<F>(self, f: F) -> MyVeryLongReturnType where F: FnMut(Self::Item) -> bool;\n+    where\n+        F: FnMut(Self::Item) -> bool;\n+    fn exactly_100_chars1<F>(self, f: F) -> MyVeryLongReturnType\n+    where\n+        F: FnMut(Self::Item) -> bool;\n }\n \n fn very_long_function_name<F>(very_long_argument: F) -> MyVeryLongReturnType\n-    where F: FnMut(Self::Item) -> bool\n+where\n+    F: FnMut(Self::Item) -> bool,\n {\n }\n \n struct VeryLongTupleStructName<A, B, C, D, E>(LongLongTypename, LongLongTypename, i32, i32)\n-    where A: LongTrait;\n+where\n+    A: LongTrait;\n \n-struct Exactly100CharsToSemicolon<A, B, C, D, E>(LongLongTypename, i32, i32) where A: LongTrait1234;\n+struct Exactly100CharsToSemicolon<A, B, C, D, E>(LongLongTypename, i32, i32)\n+where\n+    A: LongTrait1234;\n \n struct AlwaysOnNextLine<LongLongTypename, LongTypename, A, B, C, D, E, F>\n-    where A: LongTrait\n+where\n+    A: LongTrait,\n {\n     x: i32,\n }"}, {"sha": "30ab5ad757971250fe4f0d18cd1c4a1d8f922abd", "filename": "tests/writemode/target/checkstyle.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/6f30d9e7c973d7bee78f8d16aa623f679c37bcae/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml?ref=6f30d9e7c973d7bee78f8d16aa623f679c37bcae", "patch": "@@ -1,2 +1,2 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<checkstyle version=\"4.3\"><file name=\"tests/writemode/source/fn-single-line.rs\"><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"51\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"58\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"58\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"58\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"58\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /></file></checkstyle>\n+<checkstyle version=\"4.3\"><file name=\"tests/writemode/source/fn-single-line.rs\"><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `where`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `    T: Sync,`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"52\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;()`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `where`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `    T: Bar,`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `{`\" /></file></checkstyle>"}]}