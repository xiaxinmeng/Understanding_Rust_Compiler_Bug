{"sha": "f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMmQ2MmU1YWUyOGM4Mzk4NjMwMTE3YTJhZWE0YTVjZjVmYjEzZjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-09T16:18:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-09T16:18:20Z"}, "message": "Rollup merge of #58679 - Zoxc:passes-refactor, r=michaelwoerister\n\nRefactor passes and pass execution to be more parallel\n\nFor `syntex_syntax` (with 16 threads and 8 cores):\n- Cuts `misc checking 1` from `0.096s` to `0.08325s`.\n- Cuts `misc checking 2` from `0.3575s` to `0.2545s`.\n- Cuts `misc checking 3` from `0.34625s` to `0.21375s`.\n- Cuts `wf checking` from `0.3085s` to `0.05025s`.\n\nReduces overall execution time for `syntex_syntax` (with 8 threads and cores) from `4.92s` to `4.34s`.\n\nSubsumes https://github.com/rust-lang/rust/pull/58494\nBlocked on https://github.com/rust-lang/rust/pull/58250\n\nr? @michaelwoerister", "tree": {"sha": "111900ad79035e738bce4a1d56296677ad778fc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/111900ad79035e738bce4a1d56296677ad778fc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcg+dMCRBK7hj4Ov3rIwAAdHIIAKeJnibl2AoBtYe7cn4FwgVK\nPlXgZGPWuGVBjYPu6mbDKW3ztzOXHgP1ATmnfAQKadHhtJDKNjaz2qHnX8cevS/v\nJW1/u3ZWTVLHB5zpTwEDQ8I6pjYereKI+d7Srth/lwBk7lFM24cmtulpRwsVW+wm\ndno11p4uCe87q4is1rpiVgE8176Sqf8c39oglGrYJD/m4c7eVj0U/imlsaY7Q7il\nhkg95gSXazk/HY92N2MDgzPicJ5i83egkQjuf/dSuS4dvsXGlZbXOpcuKja0jO4T\nhE69l4QKJ9BtUdufOYE9igUnk2r8BjHcE55xl8pT4xJWTGoRTNx2n0sBom+fvLk=\n=oV0J\n-----END PGP SIGNATURE-----\n", "payload": "tree 111900ad79035e738bce4a1d56296677ad778fc8\nparent 3f872b209ba573e28053885e9fc4a86581fb82ea\nparent 7985c6f8ecf680dcc960bb2ccc0c787274a449de\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552148300 +0100\ncommitter GitHub <noreply@github.com> 1552148300 +0100\n\nRollup merge of #58679 - Zoxc:passes-refactor, r=michaelwoerister\n\nRefactor passes and pass execution to be more parallel\n\nFor `syntex_syntax` (with 16 threads and 8 cores):\n- Cuts `misc checking 1` from `0.096s` to `0.08325s`.\n- Cuts `misc checking 2` from `0.3575s` to `0.2545s`.\n- Cuts `misc checking 3` from `0.34625s` to `0.21375s`.\n- Cuts `wf checking` from `0.3085s` to `0.05025s`.\n\nReduces overall execution time for `syntex_syntax` (with 8 threads and cores) from `4.92s` to `4.34s`.\n\nSubsumes https://github.com/rust-lang/rust/pull/58494\nBlocked on https://github.com/rust-lang/rust/pull/58250\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "html_url": "https://github.com/rust-lang/rust/commit/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f872b209ba573e28053885e9fc4a86581fb82ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f872b209ba573e28053885e9fc4a86581fb82ea", "html_url": "https://github.com/rust-lang/rust/commit/3f872b209ba573e28053885e9fc4a86581fb82ea"}, {"sha": "7985c6f8ecf680dcc960bb2ccc0c787274a449de", "url": "https://api.github.com/repos/rust-lang/rust/commits/7985c6f8ecf680dcc960bb2ccc0c787274a449de", "html_url": "https://github.com/rust-lang/rust/commit/7985c6f8ecf680dcc960bb2ccc0c787274a449de"}], "stats": {"total": 502, "additions": 305, "deletions": 197}, "files": [{"sha": "41a4a8031006f9d6ee354e6611a0ac7f92cbed0b", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -456,6 +456,7 @@ define_dep_nodes!( <'tcx>\n     [eval_always] CoherenceInherentImplOverlapCheck,\n     [] CoherenceCheckTrait(DefId),\n     [eval_always] PrivacyAccessLevels(CrateNum),\n+    [eval_always] CheckPrivateInPublic(CrateNum),\n     [eval_always] Analysis(CrateNum),\n \n     // Represents the MIR for a fn; also used as the task node for"}, {"sha": "86f7e149964883d0b410dd039dcd1b1058759dc7", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -344,12 +344,6 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckAttrVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_attrs(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n fn is_c_like_enum(item: &hir::Item) -> bool {\n     if let hir::ItemKind::Enum(ref def, _) = item.node {\n         for variant in &def.variants {"}, {"sha": "e47bc3d1c253306819e5a2aae3972e872991b6a5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -30,7 +30,7 @@ use syntax::util::parser::ExprPrecedence;\n use crate::ty::AdtKind;\n use crate::ty::query::Providers;\n \n-use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync};\n+use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_macros::HashStable;\n \n@@ -779,15 +779,15 @@ impl Crate {\n         where V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send\n     {\n         parallel!({\n-            par_iter(&self.items).for_each(|(_, item)| {\n+            par_for_each_in(&self.items, |(_, item)| {\n                 visitor.visit_item(item);\n             });\n         }, {\n-            par_iter(&self.trait_items).for_each(|(_, trait_item)| {\n+            par_for_each_in(&self.trait_items, |(_, trait_item)| {\n                 visitor.visit_trait_item(trait_item);\n             });\n         }, {\n-            par_iter(&self.impl_items).for_each(|(_, impl_item)| {\n+            par_for_each_in(&self.impl_items, |(_, impl_item)| {\n                 visitor.visit_impl_item(impl_item);\n             });\n         });"}, {"sha": "c4071e9f354b18e632c03e0aee8a0c039c4283a0", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -10,12 +10,6 @@ use syntax_pos::Span;\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::hir;\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_intrinsics(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n fn check_mod_intrinsics<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,"}, {"sha": "f5a95d7004bffdbdc2ad3097d65c5f489eda7573", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -185,12 +185,6 @@ fn check_mod_liveness<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx).as_deep_visitor());\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_liveness(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         check_mod_liveness,"}, {"sha": "1677384059e09e276c351a8734c688a3f3ee83e1", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -456,12 +456,6 @@ impl<'a, 'tcx> Index<'tcx> {\n     }\n }\n \n-pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_unstable_api_usage(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {"}, {"sha": "6488c0db42bc571884599493cedb2fc3153c3dc2", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -369,6 +369,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::privacy_access_levels<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::check_private_in_public<'tcx> {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"checking for private elements in public interfaces\".into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::typeck_item_bodies<'tcx> {\n     fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"type-checking all item bodies\".into()"}, {"sha": "8804ed22264ce061e405563eb69314afba67b06b", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -350,8 +350,9 @@ define_queries! { <'tcx>\n         [] fn check_match: CheckMatch(DefId)\n             -> Result<(), ErrorReported>,\n \n-        /// Performs the privacy check and computes \"access levels\".\n+        /// Performs part of the privacy check and computes \"access levels\".\n         [] fn privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Lrc<AccessLevels>,\n+        [] fn check_private_in_public: CheckPrivateInPublic(CrateNum) -> (),\n     },\n \n     Other {"}, {"sha": "e3276ba0bea7bc17822dff9393eb40205f8bd5eb", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -1251,6 +1251,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n             force!(crate_inherent_impls_overlap_check, LOCAL_CRATE)\n         },\n         DepKind::PrivacyAccessLevels => { force!(privacy_access_levels, LOCAL_CRATE); }\n+        DepKind::CheckPrivateInPublic => { force!(check_private_in_public, LOCAL_CRATE); }\n         DepKind::MirBuilt => { force!(mir_built, def_id!()); }\n         DepKind::MirConstQualif => { force!(mir_const_qualif, def_id!()); }\n         DepKind::MirConst => { force!(mir_const, def_id!()); }"}, {"sha": "73247c1469efd78c0554a9e3c8ce8da82578a8af", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -65,6 +65,7 @@ cfg_if! {\n         }\n \n         use std::ops::Add;\n+        use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n \n         #[derive(Debug)]\n         pub struct Atomic<T: Copy>(Cell<T>);\n@@ -130,7 +131,21 @@ cfg_if! {\n         #[macro_export]\n         macro_rules! parallel {\n             ($($blocks:tt),*) => {\n-                $($blocks)*;\n+                // We catch panics here ensuring that all the blocks execute.\n+                // This makes behavior consistent with the parallel compiler.\n+                let mut panic = None;\n+                $(\n+                    if let Err(p) = ::std::panic::catch_unwind(\n+                        ::std::panic::AssertUnwindSafe(|| $blocks)\n+                    ) {\n+                        if panic.is_none() {\n+                            panic = Some(p);\n+                        }\n+                    }\n+                )*\n+                if let Some(panic) = panic {\n+                    ::std::panic::resume_unwind(panic);\n+                }\n             }\n         }\n \n@@ -140,6 +155,26 @@ cfg_if! {\n             t.into_iter()\n         }\n \n+        pub fn par_for_each_in<T: IntoIterator>(\n+            t: T,\n+            for_each:\n+                impl Fn(<<T as IntoIterator>::IntoIter as Iterator>::Item) + Sync + Send\n+        ) {\n+            // We catch panics here ensuring that all the loop iterations execute.\n+            // This makes behavior consistent with the parallel compiler.\n+            let mut panic = None;\n+            t.into_iter().for_each(|i| {\n+                if let Err(p) = catch_unwind(AssertUnwindSafe(|| for_each(i))) {\n+                    if panic.is_none() {\n+                        panic = Some(p);\n+                    }\n+                }\n+            });\n+            if let Some(panic) = panic {\n+                resume_unwind(panic);\n+            }\n+        }\n+\n         pub type MetadataRef = OwningRef<Box<dyn Erased>, [u8]>;\n \n         pub use std::rc::Rc as Lrc;\n@@ -278,23 +313,26 @@ cfg_if! {\n         use std::thread;\n         pub use rayon::{join, scope};\n \n+        /// Runs a list of blocks in parallel. The first block is executed immediately on\n+        /// the current thread. Use that for the longest running block.\n         #[macro_export]\n         macro_rules! parallel {\n-            (impl [$($c:tt,)*] [$block:tt $(, $rest:tt)*]) => {\n-                parallel!(impl [$block, $($c,)*] [$($rest),*])\n+            (impl $fblock:tt [$($c:tt,)*] [$block:tt $(, $rest:tt)*]) => {\n+                parallel!(impl $fblock [$block, $($c,)*] [$($rest),*])\n             };\n-            (impl [$($blocks:tt,)*] []) => {\n+            (impl $fblock:tt [$($blocks:tt,)*] []) => {\n                 ::rustc_data_structures::sync::scope(|s| {\n                     $(\n                         s.spawn(|_| $blocks);\n                     )*\n+                    $fblock;\n                 })\n             };\n-            ($($blocks:tt),*) => {\n-                // Reverse the order of the blocks since Rayon executes them in reverse order\n+            ($fblock:tt, $($blocks:tt),*) => {\n+                // Reverse the order of the later blocks since Rayon executes them in reverse order\n                 // when using a single thread. This ensures the execution order matches that\n                 // of a single threaded rustc\n-                parallel!(impl [] [$($blocks),*]);\n+                parallel!(impl $fblock [] [$($blocks),*]);\n             };\n         }\n \n@@ -307,6 +345,15 @@ cfg_if! {\n             t.into_par_iter()\n         }\n \n+        pub fn par_for_each_in<T: IntoParallelIterator>(\n+            t: T,\n+            for_each: impl Fn(\n+                <<T as IntoParallelIterator>::Iter as ParallelIterator>::Item\n+            ) + Sync + Send\n+        ) {\n+            t.into_par_iter().for_each(for_each)\n+        }\n+\n         pub type MetadataRef = OwningRef<Box<dyn Erased + Send + Sync>, [u8]>;\n \n         /// This makes locks panic if they are already held."}, {"sha": "8277615b46502352e8bb1657273e015df053f921", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 54, "deletions": 44, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -21,7 +21,7 @@ use rustc_borrowck as borrowck;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, ParallelIterator, par_iter};\n use rustc_incremental;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n@@ -191,51 +191,50 @@ fn analysis<'tcx>(\n \n     let sess = tcx.sess;\n \n-    parallel!({\n-        time(sess, \"looking for entry point\", || {\n-            middle::entry::find_entry_point(tcx)\n-        });\n+    time(sess, \"misc checking 1\", || {\n+        parallel!({\n+            time(sess, \"looking for entry point\", || {\n+                middle::entry::find_entry_point(tcx)\n+            });\n \n-        time(sess, \"looking for plugin registrar\", || {\n-            plugin::build::find_plugin_registrar(tcx)\n-        });\n+            time(sess, \"looking for plugin registrar\", || {\n+                plugin::build::find_plugin_registrar(tcx)\n+            });\n \n-        time(sess, \"looking for derive registrar\", || {\n-            proc_macro_decls::find(tcx)\n-        });\n-    }, {\n-        time(sess, \"loop checking\", || loops::check_crate(tcx));\n-    }, {\n-        time(sess, \"attribute checking\", || {\n-            hir::check_attr::check_crate(tcx)\n-        });\n-    }, {\n-        time(sess, \"stability checking\", || {\n-            stability::check_unstable_api_usage(tcx)\n+            time(sess, \"looking for derive registrar\", || {\n+                proc_macro_decls::find(tcx)\n+            });\n+        }, {\n+            par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                tcx.ensure().check_mod_loops(tcx.hir().local_def_id(module));\n+                tcx.ensure().check_mod_attrs(tcx.hir().local_def_id(module));\n+                tcx.ensure().check_mod_unstable_api_usage(tcx.hir().local_def_id(module));\n+            });\n         });\n     });\n \n     // passes are timed inside typeck\n     typeck::check_crate(tcx)?;\n \n-    time(sess, \"misc checking\", || {\n+    time(sess, \"misc checking 2\", || {\n         parallel!({\n-            time(sess, \"rvalue promotion\", || {\n-                rvalue_promotion::check_crate(tcx)\n-            });\n-        }, {\n-            time(sess, \"intrinsic checking\", || {\n-                middle::intrinsicck::check_crate(tcx)\n+            time(sess, \"rvalue promotion + match checking\", || {\n+                tcx.par_body_owners(|def_id| {\n+                    tcx.ensure().const_is_rvalue_promotable_to_static(def_id);\n+                    tcx.ensure().check_match(def_id);\n+                });\n             });\n         }, {\n-            time(sess, \"match checking\", || mir::matchck_crate(tcx));\n-        }, {\n-            // this must run before MIR dump, because\n-            // \"not all control paths return a value\" is reported here.\n-            //\n-            // maybe move the check to a MIR pass?\n-            time(sess, \"liveness checking\", || {\n-                middle::liveness::check_crate(tcx)\n+            time(sess, \"liveness checking + intrinsic checking\", || {\n+                par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                    // this must run before MIR dump, because\n+                    // \"not all control paths return a value\" is reported here.\n+                    //\n+                    // maybe move the check to a MIR pass?\n+                    tcx.ensure().check_mod_liveness(tcx.hir().local_def_id(module));\n+\n+                    tcx.ensure().check_mod_intrinsics(tcx.hir().local_def_id(module));\n+                });\n             });\n         });\n     });\n@@ -276,19 +275,30 @@ fn analysis<'tcx>(\n         return Err(ErrorReported);\n     }\n \n-    time(sess, \"misc checking\", || {\n+    time(sess, \"misc checking 3\", || {\n         parallel!({\n-            time(sess, \"privacy checking\", || {\n-                rustc_privacy::check_crate(tcx)\n+            time(sess, \"privacy access levels\", || {\n+                tcx.ensure().privacy_access_levels(LOCAL_CRATE);\n             });\n-        }, {\n-            time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n-        },  {\n-            time(sess, \"unused lib feature checking\", || {\n-                stability::check_unused_or_stable_features(tcx)\n+            parallel!({\n+                time(sess, \"private in public\", || {\n+                    tcx.ensure().check_private_in_public(LOCAL_CRATE);\n+                });\n+            }, {\n+                time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n+            },  {\n+                time(sess, \"unused lib feature checking\", || {\n+                    stability::check_unused_or_stable_features(tcx)\n+                });\n+            }, {\n+                time(sess, \"lint checking\", || lint::check_crate(tcx));\n             });\n         }, {\n-            time(sess, \"lint checking\", || lint::check_crate(tcx));\n+            time(sess, \"privacy checking modules\", || {\n+                par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                    tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n+                });\n+            });\n         });\n     });\n "}, {"sha": "41babc1ad12ef84af80e5a78a7a87f941f96793c", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -27,13 +27,6 @@ use std::slice;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for def_id in tcx.body_owners() {\n-        tcx.ensure().check_match(def_id);\n-    }\n-    tcx.sess.abort_if_errors();\n-}\n-\n pub(crate) fn check_match<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,"}, {"sha": "67d40197290f17bb600725413b2b63c494c5f05a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -3,7 +3,6 @@\n mod _match;\n mod check_match;\n \n-pub use self::check_match::check_crate;\n pub(crate) use self::check_match::check_match;\n \n use crate::const_eval::{const_field, const_variant_index};"}, {"sha": "0b735b4b39cf5057302fd4e104372643b353b6fe", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -54,7 +54,6 @@ pub mod interpret;\n pub mod monomorphize;\n pub mod const_eval;\n \n-pub use hair::pattern::check_crate as matchck_crate;\n use rustc::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "97bbb0adb2d79ed803e73a0f1619c364b48b04c5", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -45,12 +45,6 @@ struct CheckLoopVisitor<'a, 'hir: 'a> {\n     cx: Context,\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_loops(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n fn check_mod_loops<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckLoopVisitor {\n         sess: &tcx.sess,"}, {"sha": "6de98675a3dc8cfa3815b47340a312c13b0999a1", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -39,13 +39,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &body_id in &tcx.hir().krate().body_ids {\n-        let def_id = tcx.hir().body_owner_def_id(body_id);\n-        tcx.const_is_rvalue_promotable_to_static(def_id);\n-    }\n-}\n-\n fn const_is_rvalue_promotable_to_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                   def_id: DefId)\n                                                   -> bool"}, {"sha": "52514a3ca97d67ab6a8eba9f555c2ff0a46ebcee", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 36, "deletions": 42, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -1766,19 +1766,15 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         privacy_access_levels,\n+        check_private_in_public,\n         check_mod_privacy,\n         ..*providers\n     };\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Lrc<AccessLevels> {\n-    tcx.privacy_access_levels(LOCAL_CRATE)\n-}\n-\n fn check_mod_privacy<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n-\n     // Check privacy of names not checked in previous compilation stages.\n     let mut visitor = NamePrivacyVisitor {\n         tcx,\n@@ -1809,18 +1805,6 @@ fn privacy_access_levels<'tcx>(\n ) -> Lrc<AccessLevels> {\n     assert_eq!(krate, LOCAL_CRATE);\n \n-    let krate = tcx.hir().krate();\n-\n-    for &module in krate.modules.keys() {\n-        tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n-    }\n-\n-    let private_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_private.iter()\n-        .flat_map(|c| {\n-            tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n-        }).collect();\n-\n-\n     // Build up a set of all exported items in the AST. This is a set of all\n     // items which are reachable from external crates based on visibility.\n     let mut visitor = EmbargoVisitor {\n@@ -1830,7 +1814,7 @@ fn privacy_access_levels<'tcx>(\n         changed: false,\n     };\n     loop {\n-        intravisit::walk_crate(&mut visitor, krate);\n+        intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n         if visitor.changed {\n             visitor.changed = false;\n         } else {\n@@ -1839,36 +1823,46 @@ fn privacy_access_levels<'tcx>(\n     }\n     visitor.update(hir::CRATE_HIR_ID, Some(AccessLevel::Public));\n \n-    {\n-        let mut visitor = ObsoleteVisiblePrivateTypesVisitor {\n-            tcx,\n-            access_levels: &visitor.access_levels,\n-            in_variant: false,\n-            old_error_set: Default::default(),\n-        };\n-        intravisit::walk_crate(&mut visitor, krate);\n+    Lrc::new(visitor.access_levels)\n+}\n \n+fn check_private_in_public<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, krate: CrateNum) {\n+    assert_eq!(krate, LOCAL_CRATE);\n \n-        let has_pub_restricted = {\n-            let mut pub_restricted_visitor = PubRestrictedVisitor {\n-                tcx,\n-                has_pub_restricted: false\n-            };\n-            intravisit::walk_crate(&mut pub_restricted_visitor, krate);\n-            pub_restricted_visitor.has_pub_restricted\n-        };\n+    let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n \n-        // Check for private types and traits in public interfaces.\n-        let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n+    let krate = tcx.hir().krate();\n+\n+    let mut visitor = ObsoleteVisiblePrivateTypesVisitor {\n+        tcx,\n+        access_levels: &access_levels,\n+        in_variant: false,\n+        old_error_set: Default::default(),\n+    };\n+    intravisit::walk_crate(&mut visitor, krate);\n+\n+    let has_pub_restricted = {\n+        let mut pub_restricted_visitor = PubRestrictedVisitor {\n             tcx,\n-            has_pub_restricted,\n-            old_error_set: &visitor.old_error_set,\n-            private_crates\n+            has_pub_restricted: false\n         };\n-        krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n-    }\n+        intravisit::walk_crate(&mut pub_restricted_visitor, krate);\n+        pub_restricted_visitor.has_pub_restricted\n+    };\n \n-    Lrc::new(visitor.access_levels)\n+    let private_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_private.iter()\n+        .flat_map(|c| {\n+            tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n+        }).collect();\n+\n+    // Check for private types and traits in public interfaces.\n+    let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n+        tcx,\n+        has_pub_restricted,\n+        old_error_set: &visitor.old_error_set,\n+        private_crates\n+    };\n+    krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n }\n \n __build_diagnostic_array! { librustc_privacy, DIAGNOSTICS }"}, {"sha": "28c79ce0c74e86c77ad9634838a21a9a9f8b061f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -694,26 +694,14 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.hir().krate().visit_all_item_likes(&mut visit);\n-    })\n-}\n-\n-pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n-    tcx.sess.track_errors(|| {\n-        for &module in tcx.hir().krate().modules.keys() {\n-            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n-        }\n+        tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n     })\n }\n \n fn check_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n-    tcx.typeck_item_bodies(LOCAL_CRATE)\n-}\n-\n fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n                                 -> Result<(), ErrorReported>\n {"}, {"sha": "fde940eb2c111fe1f92384ae86d17a8da2117dc4", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -15,7 +15,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax_pos::Span;\n use errors::{DiagnosticBuilder, DiagnosticId};\n \n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir::itemlikevisit::ParItemLikeVisitor;\n use rustc::hir;\n \n /// Helper type of a temporary returned by `.for_item(...)`.\n@@ -1061,20 +1061,20 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     }\n }\n \n-impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &'tcx hir::Item) {\n+impl<'a, 'tcx> ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n+    fn visit_item(&self, i: &'tcx hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n         let def_id = self.tcx.hir().local_def_id_from_hir_id(i.hir_id);\n         self.tcx.ensure().check_item_well_formed(def_id);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&self, trait_item: &'tcx hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n         let def_id = self.tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n         self.tcx.ensure().check_trait_item_well_formed(def_id);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&self, impl_item: &'tcx hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n         let def_id = self.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n         self.tcx.ensure().check_impl_item_well_formed(def_id);"}, {"sha": "39a2f5d37bd7ab32b596562c0e057b5c0362d9a5", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -141,9 +141,7 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     for &impl_id in impls {\n         check_impl_overlap(tcx, impl_id);\n     }\n-    use rustc::util::common::time;\n-    time(tcx.sess, \"builtin::check_trait checking\", ||\n-          builtin::check_trait(tcx, def_id));\n+    builtin::check_trait(tcx, def_id);\n }\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}, {"sha": "afe658767f327baca033a8e8e72eaa45c5f2b0a7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -56,12 +56,6 @@ struct OnlySelfBounds(bool);\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,"}, {"sha": "ebb617c23c6ca72ee85d3f84a411d3b8b2928b16", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -322,8 +322,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     // this ensures that later parts of type checking can assume that items\n     // have valid types and not error\n     tcx.sess.track_errors(|| {\n-        time(tcx.sess, \"type collecting\", ||\n-             collect::collect_item_types(tcx));\n+        time(tcx.sess, \"type collecting\", || {\n+            for &module in tcx.hir().krate().modules.keys() {\n+                tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id(module));\n+            }\n+        });\n     })?;\n \n     if tcx.features().rustc_attrs {\n@@ -352,9 +355,15 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n \n     time(tcx.sess, \"wf checking\", || check::check_wf_new(tcx))?;\n \n-    time(tcx.sess, \"item-types checking\", || check::check_item_types(tcx))?;\n+    time(tcx.sess, \"item-types checking\", || {\n+        tcx.sess.track_errors(|| {\n+            for &module in tcx.hir().krate().modules.keys() {\n+                tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n+            }\n+        })\n+    })?;\n \n-    time(tcx.sess, \"item-bodies checking\", || check::check_item_bodies(tcx))?;\n+    time(tcx.sess, \"item-bodies checking\", || tcx.typeck_item_bodies(LOCAL_CRATE))?;\n \n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);"}, {"sha": "7eb6d5c0ecbaa30519b25a2535aef4c8027949ef", "filename": "src/test/ui/issues/issue-20413.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -8,6 +8,7 @@ struct NoData<T>;\n impl<T> Foo for T where NoData<T>: Foo {\n //~^ ERROR: overflow evaluating the requirement\n   fn answer(self) {\n+  //~^ ERROR: overflow evaluating the requirement\n     let val: NoData<T> = NoData;\n   }\n }"}, {"sha": "db746bebbe273553a0455583840c7da562fa88bd", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -12,6 +12,7 @@ error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<N\n LL | / impl<T> Foo for T where NoData<T>: Foo {\n LL | | //~^ ERROR: overflow evaluating the requirement\n LL | |   fn answer(self) {\n+LL | |   //~^ ERROR: overflow evaluating the requirement\n LL | |     let val: NoData<T> = NoData;\n LL | |   }\n LL | | }\n@@ -87,7 +88,86 @@ note: required by `Foo`\n LL | trait Foo {\n    | ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n+  --> $DIR/issue-20413.rs:10:3\n+   |\n+LL | /   fn answer(self) {\n+LL | |   //~^ ERROR: overflow evaluating the requirement\n+LL | |     let val: NoData<T> = NoData;\n+LL | |   }\n+   | |___^\n+   |\n+   = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<T>>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<T>>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<T>>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<T>>`\n+   = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n+note: required by `Foo`\n+  --> $DIR/issue-20413.rs:1:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n Some errors occurred: E0275, E0392.\n For more information about an error, try `rustc --explain E0275`."}, {"sha": "2d99769cfa31c56e9acc692e09def2fde2b20e5d", "filename": "src/test/ui/issues/issue-21946.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -7,6 +7,7 @@ struct FooStruct;\n impl Foo for FooStruct {\n //~^ ERROR overflow evaluating the requirement `<FooStruct as Foo>::A`\n     type A = <FooStruct as Foo>::A;\n+    //~^ ERROR overflow evaluating the requirement `<FooStruct as Foo>::A`\n }\n \n fn main() {}"}, {"sha": "5ac49f61543e45c61b601c12836d5b21419722d4", "filename": "src/test/ui/issues/issue-21946.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -4,6 +4,12 @@ error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A`\n LL | impl Foo for FooStruct {\n    |      ^^^\n \n-error: aborting due to previous error\n+error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A`\n+  --> $DIR/issue-21946.rs:9:5\n+   |\n+LL |     type A = <FooStruct as Foo>::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "d6f64650f36bb6332ce22692af622c369a93afd3", "filename": "src/test/ui/issues/issue-23122-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -7,6 +7,7 @@ struct GetNext<T: Next> { t: T }\n impl<T: Next> Next for GetNext<T> {\n     //~^ ERROR overflow evaluating the requirement\n     type Next = <GetNext<T> as Next>::Next;\n+    //~^ ERROR overflow evaluating the requirement\n }\n \n fn main() {}"}, {"sha": "1b752b7afe2e62b4b68f8d1f8c8949bff32c2b05", "filename": "src/test/ui/issues/issue-23122-1.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -4,6 +4,12 @@ error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next`\n LL | impl<T: Next> Next for GetNext<T> {\n    |               ^^^^\n \n-error: aborting due to previous error\n+error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next`\n+  --> $DIR/issue-23122-1.rs:9:5\n+   |\n+LL |     type Next = <GetNext<T> as Next>::Next;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "695712d2cc929aea4a9466660cf9708ccf8f0be4", "filename": "src/test/ui/issues/issue-23122-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -7,6 +7,7 @@ struct GetNext<T: Next> { t: T }\n impl<T: Next> Next for GetNext<T> {\n     //~^ ERROR overflow evaluating the requirement\n     type Next = <GetNext<T::Next> as Next>::Next;\n+    //~^ ERROR overflow evaluating the requirement\n }\n \n fn main() {}"}, {"sha": "b122dd42373c8cd7708739444cdb185f27f808ea", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -7,6 +7,15 @@ LL | impl<T: Next> Next for GetNext<T> {\n    = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n    = note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n \n-error: aborting due to previous error\n+error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: std::marker::Sized`\n+  --> $DIR/issue-23122-2.rs:9:5\n+   |\n+LL |     type Next = <GetNext<T::Next> as Next>::Next;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n+   = note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "568d4dadc8cc47e0c983ae66ccc1c08bb82b6029", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "patch": "@@ -1,3 +1,21 @@\n+error[E0446]: private type `m::Priv` in public interface\n+  --> $DIR/private-inferred-type.rs:61:36\n+   |\n+LL |     struct Priv;\n+   |     - `m::Priv` declared as private\n+...\n+LL |     impl TraitWithAssocTy for u8 { type AssocTy = Priv; }\n+   |                                    ^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n+error[E0446]: private type `adjust::S2` in public interface\n+  --> $DIR/private-inferred-type.rs:83:9\n+   |\n+LL |     struct S2;\n+   |     - `adjust::S2` declared as private\n+...\n+LL |         type Target = S2Alias; //~ ERROR private type `adjust::S2` in public interface\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:97:9\n    |\n@@ -202,24 +220,6 @@ error: type `m::Priv` is private\n LL |     match a { //~ ERROR type `m::Priv` is private\n    |           ^\n \n-error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-inferred-type.rs:61:36\n-   |\n-LL |     struct Priv;\n-   |     - `m::Priv` declared as private\n-...\n-LL |     impl TraitWithAssocTy for u8 { type AssocTy = Priv; }\n-   |                                    ^^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n-error[E0446]: private type `adjust::S2` in public interface\n-  --> $DIR/private-inferred-type.rs:83:9\n-   |\n-LL |     struct S2;\n-   |     - `adjust::S2` declared as private\n-...\n-LL |         type Target = S2Alias; //~ ERROR private type `adjust::S2` in public interface\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n error: aborting due to 33 previous errors\n \n For more information about this error, try `rustc --explain E0446`."}]}