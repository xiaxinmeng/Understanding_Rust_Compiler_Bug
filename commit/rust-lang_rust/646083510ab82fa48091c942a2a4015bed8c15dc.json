{"sha": "646083510ab82fa48091c942a2a4015bed8c15dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NjA4MzUxMGFiODJmYTQ4MDkxYzk0MmEyYTQwMTViZWQ4YzE1ZGM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T00:03:07Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libcollections: fix fallout in unit tests", "tree": {"sha": "2f4357178cb7fbea4988c0c1283f44ddc9705596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f4357178cb7fbea4988c0c1283f44ddc9705596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/646083510ab82fa48091c942a2a4015bed8c15dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/646083510ab82fa48091c942a2a4015bed8c15dc", "html_url": "https://github.com/rust-lang/rust/commit/646083510ab82fa48091c942a2a4015bed8c15dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/646083510ab82fa48091c942a2a4015bed8c15dc/comments", "author": null, "committer": null, "parents": [{"sha": "4d4915aa286ca12527ca849a076bf4e7b5d90de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4915aa286ca12527ca849a076bf4e7b5d90de1", "html_url": "https://github.com/rust-lang/rust/commit/4d4915aa286ca12527ca849a076bf4e7b5d90de1"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "bf568fd92d5653d50cf3b0fc572564d9da1a7508", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/646083510ab82fa48091c942a2a4015bed8c15dc/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646083510ab82fa48091c942a2a4015bed8c15dc/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=646083510ab82fa48091c942a2a4015bed8c15dc", "patch": "@@ -903,21 +903,21 @@ mod tests {\n     #[test]\n     fn test_find() {\n         assert_eq!(\"hello\".find('l'), Some(2u));\n-        assert_eq!(\"hello\".find(|c:char| c == 'o'), Some(4u));\n+        assert_eq!(\"hello\".find(|&: c:char| c == 'o'), Some(4u));\n         assert!(\"hello\".find('x').is_none());\n-        assert!(\"hello\".find(|c:char| c == 'x').is_none());\n+        assert!(\"hello\".find(|&: c:char| c == 'x').is_none());\n         assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".find('\u534e'), Some(30u));\n-        assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".find(|c: char| c == '\u534e'), Some(30u));\n+        assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".find(|&: c: char| c == '\u534e'), Some(30u));\n     }\n \n     #[test]\n     fn test_rfind() {\n         assert_eq!(\"hello\".rfind('l'), Some(3u));\n-        assert_eq!(\"hello\".rfind(|c:char| c == 'o'), Some(4u));\n+        assert_eq!(\"hello\".rfind(|&: c:char| c == 'o'), Some(4u));\n         assert!(\"hello\".rfind('x').is_none());\n-        assert!(\"hello\".rfind(|c:char| c == 'x').is_none());\n+        assert!(\"hello\".rfind(|&: c:char| c == 'x').is_none());\n         assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".rfind('\u534e'), Some(30u));\n-        assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".rfind(|c: char| c == '\u534e'), Some(30u));\n+        assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".rfind(|&: c: char| c == '\u534e'), Some(30u));\n     }\n \n     #[test]\n@@ -1281,7 +1281,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_left_chars('1'), \"foo1bar11\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_left_chars(chars), \"foo1bar12\");\n-        assert_eq!(\"123foo1bar123\".trim_left_chars(|c: char| c.is_numeric()), \"foo1bar123\");\n+        assert_eq!(\"123foo1bar123\".trim_left_chars(|&: c: char| c.is_numeric()), \"foo1bar123\");\n     }\n \n     #[test]\n@@ -1296,7 +1296,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_right_chars('1'), \"11foo1bar\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_right_chars(chars), \"12foo1bar\");\n-        assert_eq!(\"123foo1bar123\".trim_right_chars(|c: char| c.is_numeric()), \"123foo1bar\");\n+        assert_eq!(\"123foo1bar123\".trim_right_chars(|&: c: char| c.is_numeric()), \"123foo1bar\");\n     }\n \n     #[test]\n@@ -1311,7 +1311,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_chars('1'), \"foo1bar\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_chars(chars), \"foo1bar\");\n-        assert_eq!(\"123foo1bar123\".trim_chars(|c: char| c.is_numeric()), \"foo1bar\");\n+        assert_eq!(\"123foo1bar123\".trim_chars(|&: c: char| c.is_numeric()), \"foo1bar\");\n     }\n \n     #[test]\n@@ -1787,14 +1787,14 @@ mod tests {\n         let split: Vec<&str> = data.splitn(3, ' ').collect();\n         assert_eq!(split, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n-        let split: Vec<&str> = data.splitn(3, |c: char| c == ' ').collect();\n+        let split: Vec<&str> = data.splitn(3, |&: c: char| c == ' ').collect();\n         assert_eq!(split, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n         // Unicode\n         let split: Vec<&str> = data.splitn(3, '\u00e4').collect();\n         assert_eq!(split, vec![\"\\nM\", \"ry h\", \"d \", \" little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n-        let split: Vec<&str> = data.splitn(3, |c: char| c == '\u00e4').collect();\n+        let split: Vec<&str> = data.splitn(3, |&: c: char| c == '\u00e4').collect();\n         assert_eq!(split, vec![\"\\nM\", \"ry h\", \"d \", \" little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n     }\n \n@@ -2588,7 +2588,7 @@ mod bench {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n         let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(|c: char| c == ' ').count(), len));\n+        b.iter(|| assert_eq!(s.split(|&: c: char| c == ' ').count(), len));\n     }\n \n     #[bench]"}]}