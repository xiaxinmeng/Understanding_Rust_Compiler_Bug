{"sha": "dd9693f211f65d4c69a2e65c3e33ccc337d7f695", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOTY5M2YyMTFmNjVkNGM2OWEyZTY1YzNlMzNjY2MzMzdkN2Y2OTU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-16T15:55:22Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-16T21:17:47Z"}, "message": "Reserve node_id 0 for the crate top-level module\n\nAnd define a const to refer to it.", "tree": {"sha": "d3f744255966cdc6e20d69633c159278161fe3bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f744255966cdc6e20d69633c159278161fe3bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd9693f211f65d4c69a2e65c3e33ccc337d7f695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9693f211f65d4c69a2e65c3e33ccc337d7f695", "html_url": "https://github.com/rust-lang/rust/commit/dd9693f211f65d4c69a2e65c3e33ccc337d7f695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd9693f211f65d4c69a2e65c3e33ccc337d7f695/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbfa1b56894c06dd1556cb00d16d8208447db3b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfa1b56894c06dd1556cb00d16d8208447db3b8", "html_url": "https://github.com/rust-lang/rust/commit/dbfa1b56894c06dd1556cb00d16d8208447db3b8"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "75bd5de7c6802bff65f77a3c0a76b6df80b59a81", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd9693f211f65d4c69a2e65c3e33ccc337d7f695/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9693f211f65d4c69a2e65c3e33ccc337d7f695/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=dd9693f211f65d4c69a2e65c3e33ccc337d7f695", "patch": "@@ -27,8 +27,6 @@ export def_map, ext_map, exp_map, impl_map, iscopes;\n // locates all names (in expressions, types, and alt patterns) and resolves\n // them, storing the resulting def in the AST nodes.\n \n-const crate_mod: int = -1;\n-\n tag scope {\n     scope_crate;\n     scope_item(@ast::item);\n@@ -176,7 +174,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n     visit::visit_crate(*c, cons(scope_crate, @nil), visit::mk_vt(v_map_mod));\n \n     // Register the top-level mod\n-    e.mod_map.insert(crate_mod,\n+    e.mod_map.insert(ast::crate_node_id,\n                      @{m: some(c.node.module),\n                        index: index_mod(c.node.module),\n                        mutable glob_imports: [],\n@@ -260,7 +258,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                     e.block_map.insert(b.node.id, globs);\n                   }\n                   scope_crate. {\n-                    e.mod_map.get(crate_mod).glob_imports += [glob];\n+                    e.mod_map.get(ast::crate_node_id).glob_imports += [glob];\n                   }\n                 }\n             }\n@@ -534,7 +532,8 @@ fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n             lst(id, b.node.view_items)\n           }\n           cons(scope_crate., _) {\n-            lst(id, option::get(e.mod_map.get(crate_mod).m).view_items)\n+            lst(id,\n+                option::get(e.mod_map.get(ast::crate_node_id).m).view_items)\n           }\n         }\n     }\n@@ -639,7 +638,7 @@ fn unresolved_err(e: env, cx: ctxt, sp: span, name: ident, kind: str) {\n         let did = def_id_of_def(def);\n         if did.crate == ast::local_crate {\n             path = e.mod_map.get(did.node).path + path;\n-        } else if did.node != -1 {\n+        } else if did.node != ast::crate_node_id {\n             let paths = e.ext_map.get(did);\n             if vec::len(paths) > 0u {\n                 path = str::connect(paths, \"::\") + \"::\" + path;\n@@ -744,7 +743,8 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n        option::t<def> {\n         alt s {\n           scope_crate. {\n-            ret lookup_in_local_mod(e, crate_mod, sp, name, ns, inside);\n+            ret lookup_in_local_mod(e, ast::crate_node_id, sp,\n+                                    name, ns, inside);\n           }\n           scope_item(it) {\n             alt it.node {\n@@ -1057,7 +1057,9 @@ fn lookup_in_mod(e: env, m: def, sp: span, name: ident, ns: namespace,\n         let cached = e.ext_cache.find({did: defid, ident: name, ns: ns});\n         if !is_none(cached) { ret cached; }\n         let path = [name];\n-        if defid.node != crate_mod { path = e.ext_map.get(defid) + path; }\n+        if defid.node != ast::crate_node_id {\n+            path = e.ext_map.get(defid) + path; \n+        }\n         let fnd = lookup_external(e, defid.crate, path, ns);\n         if !is_none(fnd) {\n             e.ext_cache.insert({did: defid, ident: name, ns: ns},\n@@ -1079,7 +1081,7 @@ fn found_view_item(e: env, vi: @ast::view_item) -> option::t<def> {\n     alt vi.node {\n       ast::view_item_use(_, _, id) {\n         let cnum = cstore::get_use_stmt_cnum(e.cstore, id);\n-        ret some(ast::def_mod({crate: cnum, node: crate_mod}));\n+        ret some(ast::def_mod({crate: cnum, node: ast::crate_node_id}));\n       }\n     }\n }"}, {"sha": "b7af23e9dd5c1de1e23f24022ffe9a9f8ab8d3e7", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd9693f211f65d4c69a2e65c3e33ccc337d7f695/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9693f211f65d4c69a2e65c3e33ccc337d7f695/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=dd9693f211f65d4c69a2e65c3e33ccc337d7f695", "patch": "@@ -22,6 +22,7 @@ type node_id = int;\n type def_id = {crate: crate_num, node: node_id};\n \n const local_crate: crate_num = 0;\n+const crate_node_id: node_id = 0;\n \n type ty_param = {ident: ident, kind: kind};\n "}]}