{"sha": "ce13ff15c33da1e31931ba4bc692709be3a2cf30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMTNmZjE1YzMzZGExZTMxOTMxYmE0YmM2OTI3MDliZTNhMmNmMzA=", "commit": {"author": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-08-15T20:34:06Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-14T17:50:28Z"}, "message": "Correctly create artificial span for formatting closure body\n\nThis commit partially reverts #3934, opting to create a span that covers\nthe entire body of a closure when formatting a closure body with a\nblock-formatting strategy, rather than having the block-formatting code\ndetermine if the visitor pointer should be rewound. The problem with\nrewinding the visitor pointer is it may be incorrect for other (i.e.\nnon-artificial) AST nodes, as in the case of #4382.\n\nCloses #4382", "tree": {"sha": "cf4f70b41a601ecf95906a44b7dd61212ecbd828", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf4f70b41a601ecf95906a44b7dd61212ecbd828"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce13ff15c33da1e31931ba4bc692709be3a2cf30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce13ff15c33da1e31931ba4bc692709be3a2cf30", "html_url": "https://github.com/rust-lang/rust/commit/ce13ff15c33da1e31931ba4bc692709be3a2cf30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce13ff15c33da1e31931ba4bc692709be3a2cf30/comments", "author": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd32de74ce4911bdf46621d53ed72cfc6071d8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd32de74ce4911bdf46621d53ed72cfc6071d8ed", "html_url": "https://github.com/rust-lang/rust/commit/dd32de74ce4911bdf46621d53ed72cfc6071d8ed"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "3cfaa4513eb43d02fe4e2bcbde1eaf51cf1b0195", "filename": "src/closures.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce13ff15c33da1e31931ba4bc692709be3a2cf30/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce13ff15c33da1e31931ba4bc692709be3a2cf30/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=ce13ff15c33da1e31931ba4bc692709be3a2cf30", "patch": "@@ -133,6 +133,7 @@ fn veto_block(e: &ast::Expr) -> bool {\n }\n \n // Rewrite closure with a single expression wrapping its body with block.\n+// || { #[attr] foo() } -> Block { #[attr] foo() }\n fn rewrite_closure_with_block(\n     body: &ast::Expr,\n     prefix: &str,\n@@ -154,8 +155,12 @@ fn rewrite_closure_with_block(\n         }],\n         id: ast::NodeId::root(),\n         rules: ast::BlockCheckMode::Default,\n-        span: body.span,\n         tokens: None,\n+        span: body\n+            .attrs\n+            .first()\n+            .map(|attr| attr.span.to(body.span))\n+            .unwrap_or(body.span),\n     };\n     let block = crate::expr::rewrite_block_with_visitor(\n         context,"}, {"sha": "1ba879ccc1d315d1180bb1e8af612bf05574f36c", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce13ff15c33da1e31931ba4bc692709be3a2cf30/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce13ff15c33da1e31931ba4bc692709be3a2cf30/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ce13ff15c33da1e31931ba4bc692709be3a2cf30", "patch": "@@ -528,17 +528,7 @@ pub(crate) fn rewrite_block_with_visitor(\n             let open_pos = snippet.find_uncommented(\"{\")?;\n             visitor.last_pos = block.span.lo() + BytePos(open_pos as u32)\n         }\n-        (ast::BlockCheckMode::Default, None) => {\n-            visitor.last_pos = block.span.lo();\n-            if let Some(attrs) = attrs {\n-                if let Some(first) = attrs.first() {\n-                    let first_lo_span = first.span.lo();\n-                    if first_lo_span < visitor.last_pos {\n-                        visitor.last_pos = first_lo_span;\n-                    }\n-                }\n-            }\n-        }\n+        (ast::BlockCheckMode::Default, None) => visitor.last_pos = block.span.lo(),\n     }\n \n     let inner_attrs = attrs.map(inner_attributes);"}]}