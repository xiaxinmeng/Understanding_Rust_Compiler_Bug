{"sha": "089e75ec420912d0381c885a6fbe8137a910e617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OWU3NWVjNDIwOTEyZDAzODFjODg1YTZmYmU4MTM3YTkxMGU2MTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-11T14:30:47Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-11T14:30:47Z"}, "message": "Encapsulate CPlace constructors", "tree": {"sha": "872b17a9c1315c77d48140be74fd220372329dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/872b17a9c1315c77d48140be74fd220372329dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/089e75ec420912d0381c885a6fbe8137a910e617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/089e75ec420912d0381c885a6fbe8137a910e617", "html_url": "https://github.com/rust-lang/rust/commit/089e75ec420912d0381c885a6fbe8137a910e617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/089e75ec420912d0381c885a6fbe8137a910e617/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f04e73b40ba14560edddf21e0a4021d975dc96d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f04e73b40ba14560edddf21e0a4021d975dc96d", "html_url": "https://github.com/rust-lang/rust/commit/3f04e73b40ba14560edddf21e0a4021d975dc96d"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "7bb3b1b56b910ffb5ac47acd141ce737518b8faf", "filename": "src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=089e75ec420912d0381c885a6fbe8137a910e617", "patch": "@@ -330,7 +330,7 @@ fn local_place<'a, 'tcx: 'a>(\n         }\n \n         // Take stack_addr in advance to avoid many duplicate instructions\n-        CPlace::Addr(place.to_addr(fx), None, layout)\n+        CPlace::for_addr(place.to_addr(fx), layout)\n     };\n \n     let prev_place = fx.local_map.insert(local, place);\n@@ -471,7 +471,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n         PassMode::ByRef => {\n             fx.local_map.insert(\n                 RETURN_PLACE,\n-                CPlace::Addr(ret_param.unwrap(), None, ret_layout),\n+                CPlace::for_addr(ret_param.unwrap(), ret_layout),\n             );\n         }\n     }"}, {"sha": "a96110e7bd5d5dc5ff79ffac27e527060a701404", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=089e75ec420912d0381c885a6fbe8137a910e617", "patch": "@@ -538,7 +538,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n \n                         // FIXME avoid forcing to stack\n                         let place =\n-                            CPlace::Addr(operand.force_stack(fx), None, operand.layout());\n+                            CPlace::for_addr(operand.force_stack(fx), operand.layout());\n                         let discr = trans_get_discriminant(fx, place, fx.layout_of(to_ty));\n                         lval.write_cvalue(fx, discr);\n                     } else {\n@@ -1162,19 +1162,18 @@ pub fn trans_place<'a, 'tcx: 'a>(\n                             let elem_layout = fx.layout_of(elem_ty);\n                             let ptr = base.to_addr(fx);\n                             let len = crate::constant::force_eval_const(fx, len).unwrap_usize(fx.tcx);\n-                            CPlace::Addr(\n+                            CPlace::for_addr(\n                                 fx.bcx.ins().iadd_imm(ptr, elem_layout.size.bytes() as i64 * from as i64),\n-                                None,\n                                 fx.layout_of(fx.tcx.mk_array(elem_ty, len - from as u64 - to as u64)),\n                             )\n                         }\n                         ty::Slice(elem_ty) => {\n                             let elem_layout = fx.layout_of(elem_ty);\n                             let (ptr, len) = base.to_addr_maybe_unsized(fx);\n                             let len = len.unwrap();\n-                            CPlace::Addr(\n+                            CPlace::for_addr_with_extra(\n                                 fx.bcx.ins().iadd_imm(ptr, elem_layout.size.bytes() as i64 * from as i64),\n-                                Some(fx.bcx.ins().iadd_imm(len, -(from as i64 + to as i64))),\n+                                fx.bcx.ins().iadd_imm(len, -(from as i64 + to as i64)),\n                                 base.layout(),\n                             )\n                         }"}, {"sha": "0403f8d0d1bac4ececd7f888197a065745dc2ed8", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=089e75ec420912d0381c885a6fbe8137a910e617", "patch": "@@ -234,7 +234,7 @@ fn cplace_for_dataid<'a, 'tcx: 'a>(\n     let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n     let layout = fx.layout_of(fx.monomorphize(&ty));\n     assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n-    CPlace::Addr(global_ptr, None, layout)\n+    CPlace::for_addr(global_ptr, layout)\n }\n \n fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>("}, {"sha": "00d7cad85bbc9c6980dfa07c9ed12f2ac51d28e0", "filename": "src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=089e75ec420912d0381c885a6fbe8137a910e617", "patch": "@@ -144,7 +144,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         discriminant_value, (c val) {\n             let pointee_layout = fx.layout_of(val.layout().ty.builtin_deref(true).unwrap().ty);\n-            let place = CPlace::Addr(val.load_scalar(fx), None, pointee_layout);\n+            let place = CPlace::for_addr(val.load_scalar(fx), pointee_layout);\n             let discr = crate::base::trans_get_discriminant(fx, place, ret.layout());\n             ret.write_cvalue(fx, discr);\n         };\n@@ -426,7 +426,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             ret.write_cvalue(fx, val);\n         };\n         _ if intrinsic.starts_with(\"atomic_store\"), (v ptr, c val) {\n-            let dest = CPlace::Addr(ptr, None, val.layout());\n+            let dest = CPlace::for_addr(ptr, val.layout());\n             dest.write_cvalue(fx, val);\n         };\n         _ if intrinsic.starts_with(\"atomic_xchg\"), <T> (v ptr, c src) {\n@@ -436,7 +436,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             ret.write_cvalue(fx, CValue::by_val(old, fx.layout_of(T)));\n \n             // Write new\n-            let dest = CPlace::Addr(ptr, None, src.layout());\n+            let dest = CPlace::for_addr(ptr, src.layout());\n             dest.write_cvalue(fx, src);\n         };\n         _ if intrinsic.starts_with(\"atomic_cxchg\"), <T> (v ptr, v test_old, v new) { // both atomic_cxchg_* and atomic_cxchgweak_*"}, {"sha": "c0464e18e4e4e76bad2ce786ad6ae4ea2c4d8cbb", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089e75ec420912d0381c885a6fbe8137a910e617/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089e75ec420912d0381c885a6fbe8137a910e617/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=089e75ec420912d0381c885a6fbe8137a910e617", "patch": "@@ -49,5 +49,5 @@ pub fn trap_unreachable_ret_place<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl crane\n     let true_ = fx.bcx.ins().iconst(types::I32, 1);\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n     let zero = fx.bcx.ins().iconst(fx.pointer_type, 0);\n-    CPlace::Addr(zero, None, dest_layout)\n+    CPlace::for_addr(zero, dest_layout)\n }"}, {"sha": "01975660072c3d65594a1aea1b95445a6a9aeac4", "filename": "src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089e75ec420912d0381c885a6fbe8137a910e617/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=089e75ec420912d0381c885a6fbe8137a910e617", "patch": "@@ -219,6 +219,14 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         CPlace::Var(local, layout)\n     }\n \n+    pub fn for_addr(addr: Value, layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+        CPlace::Addr(addr, None, layout)\n+    }\n+\n+    pub fn for_addr_with_extra(addr: Value, extra: Value, layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+        CPlace::Addr(addr, Some(extra), layout)\n+    }\n+\n     pub fn to_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CValue<'tcx> {\n         match self {\n             CPlace::Var(var, layout) => CValue::ByVal(fx.bcx.use_var(mir_var(var)), layout),"}]}