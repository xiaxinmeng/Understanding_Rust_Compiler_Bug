{"sha": "6a7a6528f69ddb32574e486471c400fee6de8fd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhN2E2NTI4ZjY5ZGRiMzI1NzRlNDg2NDcxYzQwMGZlZTZkZThmZDc=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-06-30T18:14:54Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-06-30T19:03:34Z"}, "message": "Bless failing tests", "tree": {"sha": "49191e3fc5c4d1868f8373909bec708636871246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49191e3fc5c4d1868f8373909bec708636871246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a7a6528f69ddb32574e486471c400fee6de8fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7a6528f69ddb32574e486471c400fee6de8fd7", "html_url": "https://github.com/rust-lang/rust/commit/6a7a6528f69ddb32574e486471c400fee6de8fd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a7a6528f69ddb32574e486471c400fee6de8fd7/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1623ff3b6a48e7ac29e1c25900989851278743b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1623ff3b6a48e7ac29e1c25900989851278743b", "html_url": "https://github.com/rust-lang/rust/commit/a1623ff3b6a48e7ac29e1c25900989851278743b"}], "stats": {"total": 204, "additions": 105, "deletions": 99}, "files": [{"sha": "1fa3992cc5afdb13c89365180d43112595758ac9", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a7a6528f69ddb32574e486471c400fee6de8fd7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a7a6528f69ddb32574e486471c400fee6de8fd7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=6a7a6528f69ddb32574e486471c400fee6de8fd7", "patch": "@@ -4,7 +4,9 @@ error[E0080]: could not evaluate static initializer\n LL | / pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n LL | |     // Code here does not matter - this is replaced by the\n LL | |     // real drop glue by the compiler.\n-LL | |     drop_in_place(to_drop)\n+LL | |\n+LL | |     // SAFETY: see comment above\n+LL | |     unsafe { drop_in_place(to_drop) }\n LL | | }\n    | | ^\n    | | |"}, {"sha": "aa65f4de3e17ee7a1269bb3c33f5ac4f0e1b8029", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6a7a6528f69ddb32574e486471c400fee6de8fd7/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a7a6528f69ddb32574e486471c400fee6de8fd7/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=6a7a6528f69ddb32574e486471c400fee6de8fd7", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |           intrinsics::ptr_offset_from(self, origin)\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |           |\n-   |           ptr_offset_from cannot compute offset of pointers into different allocations.\n-   |           inside `std::ptr::const_ptr::<impl *const Struct>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `DIFFERENT_ALLOC` at $DIR/offset_from_ub.rs:17:27\n+LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    ptr_offset_from cannot compute offset of pointers into different allocations.\n+   |                    inside `std::ptr::const_ptr::<impl *const Struct>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                    inside `DIFFERENT_ALLOC` at $DIR/offset_from_ub.rs:17:27\n    | \n   ::: $DIR/offset_from_ub.rs:11:1\n    |\n@@ -24,12 +24,12 @@ LL | | };\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |           intrinsics::ptr_offset_from(self, origin)\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |           |\n-   |           unable to turn bytes into a pointer\n-   |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `NOT_PTR` at $DIR/offset_from_ub.rs:23:14\n+LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    unable to turn bytes into a pointer\n+   |                    inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                    inside `NOT_PTR` at $DIR/offset_from_ub.rs:23:14\n    | \n   ::: $DIR/offset_from_ub.rs:21:1\n    |\n@@ -42,12 +42,12 @@ LL | | };\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |           intrinsics::ptr_offset_from(self, origin)\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |           |\n-   |           exact_div: 1_isize cannot be divided by 2_isize without remainder\n-   |           inside `std::ptr::const_ptr::<impl *const u16>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:31:14\n+LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    exact_div: 1_isize cannot be divided by 2_isize without remainder\n+   |                    inside `std::ptr::const_ptr::<impl *const u16>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                    inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:31:14\n    | \n   ::: $DIR/offset_from_ub.rs:26:1\n    |\n@@ -63,12 +63,12 @@ LL | | };\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |           intrinsics::ptr_offset_from(self, origin)\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |           |\n-   |           inbounds test failed: 0x0 is not a valid pointer\n-   |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:37:14\n+LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    inbounds test failed: 0x0 is not a valid pointer\n+   |                    inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                    inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:37:14\n    | \n   ::: $DIR/offset_from_ub.rs:34:1\n    |\n@@ -82,12 +82,12 @@ LL | | };\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |           intrinsics::ptr_offset_from(self, origin)\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |           |\n-   |           unable to turn bytes into a pointer\n-   |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `DIFFERENT_INT` at $DIR/offset_from_ub.rs:44:14\n+LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    unable to turn bytes into a pointer\n+   |                    inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                    inside `DIFFERENT_INT` at $DIR/offset_from_ub.rs:44:14\n    | \n   ::: $DIR/offset_from_ub.rs:40:1\n    |"}, {"sha": "0a144a6bac2f18ae0124aee27d10cf0dcd3dfac0", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/6a7a6528f69ddb32574e486471c400fee6de8fd7/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a7a6528f69ddb32574e486471c400fee6de8fd7/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=6a7a6528f69ddb32574e486471c400fee6de8fd7", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         overflowing in-bounds pointer arithmetic\n-   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `BEFORE_START` at $DIR/offset_ub.rs:7:46\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  overflowing in-bounds pointer arithmetic\n+   |                  inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `BEFORE_START` at $DIR/offset_ub.rs:7:46\n    | \n   ::: $DIR/offset_ub.rs:7:1\n    |\n@@ -18,12 +18,12 @@ LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1)\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         inbounds test failed: pointer must be in-bounds at offset 2, but is outside bounds of allocN which has size 1\n-   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `AFTER_END` at $DIR/offset_ub.rs:8:43\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  inbounds test failed: pointer must be in-bounds at offset 2, but is outside bounds of allocN which has size 1\n+   |                  inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `AFTER_END` at $DIR/offset_ub.rs:8:43\n    | \n   ::: $DIR/offset_ub.rs:8:1\n    |\n@@ -33,12 +33,12 @@ LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         inbounds test failed: pointer must be in-bounds at offset 101, but is outside bounds of allocN which has size 100\n-   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `AFTER_ARRAY` at $DIR/offset_ub.rs:9:45\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  inbounds test failed: pointer must be in-bounds at offset 101, but is outside bounds of allocN which has size 100\n+   |                  inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `AFTER_ARRAY` at $DIR/offset_ub.rs:9:45\n    | \n   ::: $DIR/offset_ub.rs:9:1\n    |\n@@ -48,12 +48,12 @@ LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101)\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         overflowing in-bounds pointer arithmetic\n-   |         inside `std::ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `OVERFLOW` at $DIR/offset_ub.rs:11:43\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  overflowing in-bounds pointer arithmetic\n+   |                  inside `std::ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `OVERFLOW` at $DIR/offset_ub.rs:11:43\n    | \n   ::: $DIR/offset_ub.rs:11:1\n    |\n@@ -63,12 +63,12 @@ LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         overflowing in-bounds pointer arithmetic\n-   |         inside `std::ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `UNDERFLOW` at $DIR/offset_ub.rs:12:44\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  overflowing in-bounds pointer arithmetic\n+   |                  inside `std::ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `UNDERFLOW` at $DIR/offset_ub.rs:12:44\n    | \n   ::: $DIR/offset_ub.rs:12:1\n    |\n@@ -78,12 +78,12 @@ LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize:\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         overflowing in-bounds pointer arithmetic\n-   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:13:56\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  overflowing in-bounds pointer arithmetic\n+   |                  inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:13:56\n    | \n   ::: $DIR/offset_ub.rs:13:1\n    |\n@@ -93,12 +93,12 @@ LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *cons\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         overflowing in-bounds pointer arithmetic\n-   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:14:57\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  overflowing in-bounds pointer arithmetic\n+   |                  inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:14:57\n    | \n   ::: $DIR/offset_ub.rs:14:1\n    |\n@@ -108,12 +108,12 @@ LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).of\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         inbounds test failed: pointer must be in-bounds at offset 1, but is outside bounds of allocN which has size 0\n-   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:16:50\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  inbounds test failed: pointer must be in-bounds at offset 1, but is outside bounds of allocN which has size 0\n+   |                  inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:16:50\n    | \n   ::: $DIR/offset_ub.rs:16:1\n    |\n@@ -123,12 +123,12 @@ LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/mut_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count) as *mut T\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         unable to turn bytes into a pointer\n-   |         inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/libcore/ptr/mut_ptr.rs:LL:COL\n-   |         inside `DANGLING` at $DIR/offset_ub.rs:17:42\n+LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  unable to turn bytes into a pointer\n+   |                  inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/libcore/ptr/mut_ptr.rs:LL:COL\n+   |                  inside `DANGLING` at $DIR/offset_ub.rs:17:42\n    | \n   ::: $DIR/offset_ub.rs:17:1\n    |\n@@ -138,12 +138,12 @@ LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         inbounds test failed: 0x0 is not a valid pointer\n-   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:20:50\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  inbounds test failed: 0x0 is not a valid pointer\n+   |                  inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:20:50\n    | \n   ::: $DIR/offset_ub.rs:20:1\n    |\n@@ -153,12 +153,12 @@ LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0\n error: any use of this value will cause an error\n   --> $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |\n-LL |         intrinsics::offset(self, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         unable to turn bytes into a pointer\n-   |         inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |         inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:23:47\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  unable to turn bytes into a pointer\n+   |                  inside `std::ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |                  inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:23:47\n    | \n   ::: $DIR/offset_ub.rs:23:1\n    |"}, {"sha": "3296a2cb094a15f67d3d02677b3a2c69ba46ea05", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a7a6528f69ddb32574e486471c400fee6de8fd7/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a7a6528f69ddb32574e486471c400fee6de8fd7/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr?ref=6a7a6528f69ddb32574e486471c400fee6de8fd7", "patch": "@@ -4,7 +4,9 @@ error: reached the recursion limit while instantiating `std::intrinsics::drop_in\n LL | / pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n LL | |     // Code here does not matter - this is replaced by the\n LL | |     // real drop glue by the compiler.\n-LL | |     drop_in_place(to_drop)\n+LL | |\n+LL | |     // SAFETY: see comment above\n+LL | |     unsafe { drop_in_place(to_drop) }\n LL | | }\n    | |_^\n    |\n@@ -14,7 +16,9 @@ note: `std::intrinsics::drop_in_place` defined here\n LL | / pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n LL | |     // Code here does not matter - this is replaced by the\n LL | |     // real drop glue by the compiler.\n-LL | |     drop_in_place(to_drop)\n+LL | |\n+LL | |     // SAFETY: see comment above\n+LL | |     unsafe { drop_in_place(to_drop) }\n LL | | }\n    | |_^\n "}]}