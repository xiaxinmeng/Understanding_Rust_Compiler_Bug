{"sha": "a624e2ea8d6fc97df03f663581e082541fd0348f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MjRlMmVhOGQ2ZmM5N2RmMDNmNjYzNTgxZTA4MjU0MWZkMDM0OGY=", "commit": {"author": {"name": "jake", "email": "jh@discordapp.com", "date": "2021-04-11T07:31:20Z"}, "committer": {"name": "jake", "email": "jh@discordapp.com", "date": "2021-04-11T07:42:05Z"}, "message": "Adds impl Deref assist", "tree": {"sha": "452586c51fda1939f6af09fa5b2bd71889333511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452586c51fda1939f6af09fa5b2bd71889333511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a624e2ea8d6fc97df03f663581e082541fd0348f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a624e2ea8d6fc97df03f663581e082541fd0348f", "html_url": "https://github.com/rust-lang/rust/commit/a624e2ea8d6fc97df03f663581e082541fd0348f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a624e2ea8d6fc97df03f663581e082541fd0348f/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b40342d2d5bc19445e6abccef6931bdd3a03c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b40342d2d5bc19445e6abccef6931bdd3a03c3b", "html_url": "https://github.com/rust-lang/rust/commit/5b40342d2d5bc19445e6abccef6931bdd3a03c3b"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "a8126e414332ee27c9ecf317a00a3b855f4af372", "filename": "crates/ide_assists/src/handlers/generate_deref.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=a624e2ea8d6fc97df03f663581e082541fd0348f", "patch": "@@ -0,0 +1,143 @@\n+use ide_db::{helpers::FamousDefs, RootDatabase};\n+use syntax::{\n+    ast::{self, NameOwner},\n+    AstNode,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    utils::generate_trait_impl_text,\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: generate_deref\n+//\n+// Generate `Deref` impl using the given struct field.\n+//\n+// ```\n+// struct A;\n+// struct B {\n+//    $0a: A\n+// }\n+// ```\n+// ->\n+// ```\n+// struct A;\n+// struct B {\n+//    a: A\n+// }\n+//\n+// impl std::ops::Deref for B {\n+//     type Target = A;\n+//\n+//     fn deref(&self) -> &Self::Target {\n+//         &self.a\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n+    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n+\n+    if existing_deref_impl(&ctx.sema, &strukt).is_some() {\n+        cov_mark::hit!(test_add_deref_impl_already_exists);\n+        return None;\n+    }\n+\n+    let field_type = field.ty()?;\n+    let field_name = field.name()?;\n+    let target = field.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_deref\", AssistKind::Generate),\n+        format!(\"Generate `Deref` impl using `{}`\", field_name),\n+        target,\n+        |edit| {\n+            let start_offset = strukt.syntax().text_range().end();\n+            let impl_code = format!(\n+                r#\"    type Target = {0};\n+\n+    fn deref(&self) -> &Self::Target {{\n+        &self.{1}\n+    }}\"#,\n+                field_type.syntax(),\n+                field_name.syntax()\n+            );\n+            let strukt_adt = ast::Adt::Struct(strukt);\n+            // Q for reviewer: Is there a better way to specify the trait_text, e.g.\n+            // - can I have it auto `use std::ops::Deref`, and then just use `Deref` as the trait text?\n+            //   Or is there a helper that might detect if `std::ops::Deref` has been used, and pick `Deref`,\n+            //   otherwise, pick `std::ops::Deref` for the trait_text.\n+            let deref_impl = generate_trait_impl_text(&strukt_adt, \"std::ops::Deref\", &impl_code);\n+            edit.insert(start_offset, deref_impl);\n+        },\n+    )\n+}\n+\n+fn existing_deref_impl(\n+    sema: &'_ hir::Semantics<'_, RootDatabase>,\n+    strukt: &ast::Struct,\n+) -> Option<()> {\n+    let strukt = sema.to_def(strukt)?;\n+    let krate = strukt.module(sema.db).krate();\n+\n+    let deref_trait = FamousDefs(sema, Some(krate)).core_ops_Deref()?;\n+    let strukt_type = strukt.ty(sema.db);\n+\n+    if strukt_type.impls_trait(sema.db, deref_trait, &[]) {\n+        Some(())\n+    } else {\n+        None\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_generate_deref() {\n+        check_assist(\n+            generate_deref,\n+            r#\"struct A { }\n+struct B { $0a: A }\"#,\n+            r#\"struct A { }\n+struct B { a: A }\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.a\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    fn check_not_applicable(ra_fixture: &str) {\n+        let fixture = format!(\n+            \"//- /main.rs crate:main deps:core,std\\n{}\\n{}\",\n+            ra_fixture,\n+            FamousDefs::FIXTURE\n+        );\n+        check_assist_not_applicable(generate_deref, &fixture)\n+    }\n+\n+    #[test]\n+    fn test_generate_deref_not_applicable_if_already_impl() {\n+        cov_mark::check!(test_add_deref_impl_already_exists);\n+        check_not_applicable(\n+            r#\"struct A { }\n+struct B { $0a: A }\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.a\n+    }\n+}\"#,\n+        )\n+    }\n+}"}, {"sha": "d6a083e1ad94a2395c1748b48d5f7acc50fa31a0", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=a624e2ea8d6fc97df03f663581e082541fd0348f", "patch": "@@ -132,6 +132,7 @@ mod handlers {\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n     mod generate_is_empty_from_len;\n+    mod generate_deref;\n     mod generate_derive;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n@@ -199,6 +200,7 @@ mod handlers {\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n             generate_is_empty_from_len::generate_is_empty_from_len,\n+            generate_deref::generate_deref,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,"}, {"sha": "6f25d3227c06a5f1e2f79088a1634aeae1407c71", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=a624e2ea8d6fc97df03f663581e082541fd0348f", "patch": "@@ -191,6 +191,7 @@ fn assist_order_field_struct() {\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate `Deref` impl using `bar`\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");"}, {"sha": "41559b43ad7c5be2812943186adb0558c3205945", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=a624e2ea8d6fc97df03f663581e082541fd0348f", "patch": "@@ -551,6 +551,33 @@ impl Default for Example {\n     )\n }\n \n+#[test]\n+fn doctest_generate_deref() {\n+    check_doc_test(\n+        \"generate_deref\",\n+        r#####\"\n+struct A;\n+struct B {\n+   $0a: A\n+}\n+\"#####,\n+        r#####\"\n+struct A;\n+struct B {\n+   a: A\n+}\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.a\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_derive() {\n     check_doc_test("}, {"sha": "83a665b376069417714727a7f64c76dfc3559537", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=a624e2ea8d6fc97df03f663581e082541fd0348f", "patch": "@@ -113,6 +113,10 @@ impl FamousDefs<'_, '_> {\n         self.find_module(\"core:iter\")\n     }\n \n+    pub fn core_ops_Deref(&self) -> Option<Trait> {\n+        self.find_trait(\"core:ops:Deref\")\n+    }\n+\n     fn find_trait(&self, path: &str) -> Option<Trait> {\n         match self.find_def(path)? {\n             hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),"}, {"sha": "29ae12dcf400f3c278344eeeb2003ef65471adbc", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a624e2ea8d6fc97df03f663581e082541fd0348f/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=a624e2ea8d6fc97df03f663581e082541fd0348f", "patch": "@@ -112,6 +112,12 @@ pub mod ops {\n         type Output;\n         extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n     }\n+\n+    #[lang = \"deref\"]\n+    pub trait Deref {\n+        type Target: ?Sized;\n+        fn deref(&self) -> &Self::Target;\n+    }\n }\n \n pub mod option {\n@@ -141,3 +147,5 @@ mod return_keyword {}\n \n /// Docs for prim_str\n mod prim_str {}\n+\n+pub use core::ops;\n\\ No newline at end of file"}]}