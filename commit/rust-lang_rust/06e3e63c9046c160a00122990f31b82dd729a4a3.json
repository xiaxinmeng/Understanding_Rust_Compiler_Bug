{"sha": "06e3e63c9046c160a00122990f31b82dd729a4a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZTNlNjNjOTA0NmMxNjBhMDAxMjI5OTBmMzFiODJkZDcyOWE0YTM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-21T08:28:44Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-23T14:15:39Z"}, "message": "flate: return CVec<u8> rather than copying into a new vector.\n\nThis trades an O(n) allocation + memcpy for a O(1) proc allocation (for\nthe destructor). Most users only need &[u8] anyway (all of the users in\nthe main repo), and so this offers large gains.", "tree": {"sha": "f71e807008cb54924f4918a05fe4080e0b8bf2da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71e807008cb54924f4918a05fe4080e0b8bf2da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06e3e63c9046c160a00122990f31b82dd729a4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06e3e63c9046c160a00122990f31b82dd729a4a3", "html_url": "https://github.com/rust-lang/rust/commit/06e3e63c9046c160a00122990f31b82dd729a4a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06e3e63c9046c160a00122990f31b82dd729a4a3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "768b96e8b14b58f9450cdf02199149a8a7b255b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/768b96e8b14b58f9450cdf02199149a8a7b255b4", "html_url": "https://github.com/rust-lang/rust/commit/768b96e8b14b58f9450cdf02199149a8a7b255b4"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "9489b907b4ded4bee1786da522036c4ffd463210", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06e3e63c9046c160a00122990f31b82dd729a4a3/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/06e3e63c9046c160a00122990f31b82dd729a4a3/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=06e3e63c9046c160a00122990f31b82dd729a4a3", "patch": "@@ -65,7 +65,7 @@ DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n               collections time extra\n DEPS_rustdoc := rustc native:sundown serialize sync getopts collections \\\n                 test time\n-DEPS_flate := std native:miniz\n+DEPS_flate := std extra native:miniz\n DEPS_arena := std collections\n DEPS_glob := std\n DEPS_serialize := std"}, {"sha": "b93ffce636b2c6b11d25e68c1271176b1643f600", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=06e3e63c9046c160a00122990f31b82dd729a4a3", "patch": "@@ -35,7 +35,9 @@\n  * if necessary.\n  */\n \n+use std::cast;\n use std::ptr;\n+use std::raw;\n \n /**\n  * The type representing a foreign chunk of memory\n@@ -111,6 +113,20 @@ impl <T> CVec<T> {\n         }\n     }\n \n+    /// View the stored data as a slice.\n+    pub fn as_slice<'a>(&'a self) -> &'a [T] {\n+        unsafe {\n+            cast::transmute(raw::Slice { data: self.base as *T, len: self.len })\n+        }\n+    }\n+\n+    /// View the stored data as a mutable slice.\n+    pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n+        unsafe {\n+            cast::transmute(raw::Slice { data: self.base as *T, len: self.len })\n+        }\n+    }\n+\n     /**\n      * Retrieves an element at a given index\n      *"}, {"sha": "1a14432be6a3af11fd88752d56b15c42ba452e94", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=06e3e63c9046c160a00122990f31b82dd729a4a3", "patch": "@@ -20,9 +20,10 @@ Simple compression\n #[license = \"MIT/ASL2\"];\n #[allow(missing_doc)];\n \n+extern crate extra;\n use std::libc::{c_void, size_t, c_int};\n use std::libc;\n-use std::vec;\n+use extra::c_vec::CVec;\n \n pub mod rustrt {\n     use std::libc::{c_int, c_void, size_t};\n@@ -33,63 +34,57 @@ pub mod rustrt {\n                                           src_buf_len: size_t,\n                                           pout_len: *mut size_t,\n                                           flags: c_int)\n-                                          -> *c_void;\n+                                          -> *mut c_void;\n \n         pub fn tinfl_decompress_mem_to_heap(psrc_buf: *c_void,\n                                             src_buf_len: size_t,\n                                             pout_len: *mut size_t,\n                                             flags: c_int)\n-                                            -> *c_void;\n+                                            -> *mut c_void;\n     }\n }\n \n static LZ_NORM : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n static TINFL_FLAG_PARSE_ZLIB_HEADER : c_int = 0x1; // parse zlib header and adler32 checksum\n static TDEFL_WRITE_ZLIB_HEADER : c_int = 0x01000; // write zlib header and adler32 checksum\n \n-fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> ~[u8] {\n+fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> CVec<u8> {\n     unsafe {\n         let mut outsz : size_t = 0;\n         let res = rustrt::tdefl_compress_mem_to_heap(bytes.as_ptr() as *c_void,\n                                                      bytes.len() as size_t,\n                                                      &mut outsz,\n                                                      flags);\n-        assert!(res as int != 0);\n-            let out = vec::raw::from_buf_raw(res as *u8,\n-                                             outsz as uint);\n-        libc::free(res as *mut c_void);\n-        out\n+        assert!(!res.is_null());\n+        CVec::new_with_dtor(res as *mut u8, outsz as uint, proc() libc::free(res))\n     }\n }\n \n-pub fn deflate_bytes(bytes: &[u8]) -> ~[u8] {\n+pub fn deflate_bytes(bytes: &[u8]) -> CVec<u8> {\n     deflate_bytes_internal(bytes, LZ_NORM)\n }\n \n-pub fn deflate_bytes_zlib(bytes: &[u8]) -> ~[u8] {\n+pub fn deflate_bytes_zlib(bytes: &[u8]) -> CVec<u8> {\n     deflate_bytes_internal(bytes, LZ_NORM | TDEFL_WRITE_ZLIB_HEADER)\n }\n \n-fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> ~[u8] {\n+fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> CVec<u8> {\n     unsafe {\n         let mut outsz : size_t = 0;\n         let res = rustrt::tinfl_decompress_mem_to_heap(bytes.as_ptr() as *c_void,\n                                                        bytes.len() as size_t,\n                                                        &mut outsz,\n                                                        flags);\n-        assert!(res as int != 0);\n-        let out = vec::raw::from_buf_raw(res as *u8,\n-                                         outsz as uint);\n-        libc::free(res as *mut c_void);\n-        out\n+        assert!(!res.is_null());\n+        CVec::new_with_dtor(res as *mut u8, outsz as uint, proc() libc::free(res))\n     }\n }\n \n-pub fn inflate_bytes(bytes: &[u8]) -> ~[u8] {\n+pub fn inflate_bytes(bytes: &[u8]) -> CVec<u8> {\n     inflate_bytes_internal(bytes, 0)\n }\n \n-pub fn inflate_bytes_zlib(bytes: &[u8]) -> ~[u8] {\n+pub fn inflate_bytes_zlib(bytes: &[u8]) -> CVec<u8> {\n     inflate_bytes_internal(bytes, TINFL_FLAG_PARSE_ZLIB_HEADER)\n }\n \n@@ -115,19 +110,19 @@ mod tests {\n             debug!(\"de/inflate of {} bytes of random word-sequences\",\n                    input.len());\n             let cmp = deflate_bytes(input);\n-            let out = inflate_bytes(cmp);\n+            let out = inflate_bytes(cmp.as_slice());\n             debug!(\"{} bytes deflated to {} ({:.1f}% size)\",\n                    input.len(), cmp.len(),\n                    100.0 * ((cmp.len() as f64) / (input.len() as f64)));\n-            assert_eq!(input, out);\n+            assert_eq!(input.as_slice(), out.as_slice());\n         }\n     }\n \n     #[test]\n     fn test_zlib_flate() {\n         let bytes = ~[1, 2, 3, 4, 5];\n         let deflated = deflate_bytes(bytes);\n-        let inflated = inflate_bytes(deflated);\n-        assert_eq!(inflated, bytes);\n+        let inflated = inflate_bytes(deflated.as_slice());\n+        assert_eq!(inflated.as_slice(), bytes.as_slice());\n     }\n }"}, {"sha": "a8758814c542a107ff73f6d933706431d586574c", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=06e3e63c9046c160a00122990f31b82dd729a4a3", "patch": "@@ -944,7 +944,7 @@ fn link_rlib(sess: Session,\n             // into the archive.\n             let bc = obj_filename.with_extension(\"bc\");\n             match fs::File::open(&bc).read_to_end().and_then(|data| {\n-                fs::File::create(&bc).write(flate::deflate_bytes(data))\n+                fs::File::create(&bc).write(flate::deflate_bytes(data).as_slice())\n             }) {\n                 Ok(()) => {}\n                 Err(e) => {"}, {"sha": "c0d18672a9bf161faf3832923c06abf1ca27b8fd", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=06e3e63c9046c160a00122990f31b82dd729a4a3", "patch": "@@ -58,7 +58,7 @@ pub fn run(sess: session::Session, llmod: ModuleRef,\n         let bc = bc.expect(\"missing bytecode in archive!\");\n         let bc = time(sess.time_passes(), format!(\"inflate {}.bc\", name), (), |_|\n                       flate::inflate_bytes(bc));\n-        let ptr = bc.as_ptr();\n+        let ptr = bc.as_slice().as_ptr();\n         debug!(\"linking {}\", name);\n         time(sess.time_passes(), format!(\"ll link {}\", name), (), |()| unsafe {\n             if !llvm::LLVMRustLinkInExternalBitcode(llmod,"}, {"sha": "ce6b5af8d0e07593957df87f5ff0a7103bab5ee8", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=06e3e63c9046c160a00122990f31b82dd729a4a3", "patch": "@@ -18,6 +18,7 @@ use metadata::loader;\n \n use std::cell::RefCell;\n use collections::HashMap;\n+use extra::c_vec::CVec;\n use syntax::ast;\n use syntax::parse::token::IdentInterner;\n \n@@ -28,7 +29,7 @@ use syntax::parse::token::IdentInterner;\n pub type cnum_map = @RefCell<HashMap<ast::CrateNum, ast::CrateNum>>;\n \n pub enum MetadataBlob {\n-    MetadataVec(~[u8]),\n+    MetadataVec(CVec<u8>),\n     MetadataArchive(loader::ArchiveMetadata),\n }\n "}, {"sha": "5b3c18a5a9309c26ad2ca03a498545546fcd0646", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e3e63c9046c160a00122990f31b82dd729a4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=06e3e63c9046c160a00122990f31b82dd729a4a3", "patch": "@@ -2569,7 +2569,7 @@ pub fn write_metadata(cx: &CrateContext, krate: &ast::Crate) -> ~[u8] {\n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let metadata = encoder::encode_metadata(encode_parms, krate);\n     let compressed = encoder::metadata_encoding_version +\n-                        flate::deflate_bytes(metadata);\n+                        flate::deflate_bytes(metadata).as_slice();\n     let llmeta = C_bytes(compressed);\n     let llconst = C_struct([llmeta], false);\n     let name = format!(\"rust_metadata_{}_{}_{}\", cx.link_meta.crateid.name,"}]}