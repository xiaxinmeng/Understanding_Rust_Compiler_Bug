{"sha": "1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOWI4MDM2YmYyNWI2OGFmNzc1MWExZGI0YTA3Zjk4ODA4YzBlZTc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-08T15:29:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T15:29:15Z"}, "message": "Rollup merge of #67887 - anp:tracked-std-panics, r=nagisa\n\n`Option::{expect,unwrap}` and `Result::{expect, expect_err, unwrap, unwrap_err}` have `#[track_caller]`\n\nThe annotated functions now produce panic messages pointing to the location where they were called, rather than `core`'s internals.", "tree": {"sha": "f071a06342742ca2f340cf44cc185b5af7d95f28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f071a06342742ca2f340cf44cc185b5af7d95f28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFfVLCRBK7hj4Ov3rIwAAdHIIAHmpoDnecR7sGx14tvhR8kx2\nUugqyCFzzGKjYFkfrZJvCGonkuU366MlomQw+34SWfVnvD56lIwcszQoOhinKkxb\n8mm706ib07ceHP/9LehDBQnOkH8qwgGBPSErWxrw2W0wLvQ63mqRQBFoupXMYfWU\nzKtLX74EDLJbMAHMYGj39nH7I141HXIZ9GQCK1FSAhs/IFw4myGH9O2+j6GzCJVa\nJ0GqkO6mZcM04rfE1kBkZ6nQxg04cUvcYnXznAMTMvudshuNHBtXpRCxTPSjPGIw\n37Vv770Hh4wFYmwepIBSKN9lLYSiJfzFuLbnSVsL9EBsKdJHHnPA39tu8EYrhug=\n=ntag\n-----END PGP SIGNATURE-----\n", "payload": "tree f071a06342742ca2f340cf44cc185b5af7d95f28\nparent 03fe834a23eb12679352eadd89c20ba251992cd4\nparent 3acd34659453a92fe28308105a7b95230215e380\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578497355 +0900\ncommitter GitHub <noreply@github.com> 1578497355 +0900\n\nRollup merge of #67887 - anp:tracked-std-panics, r=nagisa\n\n`Option::{expect,unwrap}` and `Result::{expect, expect_err, unwrap, unwrap_err}` have `#[track_caller]`\n\nThe annotated functions now produce panic messages pointing to the location where they were called, rather than `core`'s internals.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "html_url": "https://github.com/rust-lang/rust/commit/1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b8036bf25b68af7751a1db4a07f98808c0ee7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03fe834a23eb12679352eadd89c20ba251992cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/03fe834a23eb12679352eadd89c20ba251992cd4", "html_url": "https://github.com/rust-lang/rust/commit/03fe834a23eb12679352eadd89c20ba251992cd4"}, {"sha": "3acd34659453a92fe28308105a7b95230215e380", "url": "https://api.github.com/repos/rust-lang/rust/commits/3acd34659453a92fe28308105a7b95230215e380", "html_url": "https://github.com/rust-lang/rust/commit/3acd34659453a92fe28308105a7b95230215e380"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "fb534586fc615e2c52e5fcee5197bb641e48b55b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b8036bf25b68af7751a1db4a07f98808c0ee7/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b8036bf25b68af7751a1db4a07f98808c0ee7/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "patch": "@@ -341,6 +341,7 @@ impl<T> Option<T> {\n     /// x.expect(\"the world is ending\"); // panics with `the world is ending`\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n@@ -374,6 +375,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.unwrap(), \"air\"); // fails\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap(self) -> T {\n         match self {\n@@ -1015,6 +1017,7 @@ impl<T: fmt::Debug> Option<T> {\n     /// }\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[unstable(feature = \"option_expect_none\", reason = \"newly added\", issue = \"62633\")]\n     pub fn expect_none(self, msg: &str) {\n         if let Some(val) = self {\n@@ -1057,6 +1060,7 @@ impl<T: fmt::Debug> Option<T> {\n     /// }\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[unstable(feature = \"option_unwrap_none\", reason = \"newly added\", issue = \"62633\")]\n     pub fn unwrap_none(self) {\n         if let Some(val) = self {\n@@ -1184,13 +1188,15 @@ impl<T, E> Option<Result<T, E>> {\n // This is a separate function to reduce the code size of .expect() itself.\n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn expect_failed(msg: &str) -> ! {\n     panic!(\"{}\", msg)\n }\n \n // This is a separate function to reduce the code size of .expect_none() itself.\n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn expect_none_failed(msg: &str, value: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, value)\n }"}, {"sha": "b39abf917850ddc62a88477b56f7b13e53501343", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b8036bf25b68af7751a1db4a07f98808c0ee7/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b8036bf25b68af7751a1db4a07f98808c0ee7/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "patch": "@@ -957,6 +957,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// x.unwrap(); // panics with `emergency failure`\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap(self) -> T {\n         match self {\n@@ -984,6 +985,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n@@ -1017,6 +1019,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_err(self) -> E {\n         match self {\n@@ -1044,6 +1047,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n     pub fn expect_err(self, msg: &str) -> E {\n         match self {\n@@ -1188,6 +1192,7 @@ impl<T, E> Result<Option<T>, E> {\n // This is a separate function to reduce the code size of the methods\n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, error)\n }"}, {"sha": "be13076b8af52cf952d0b186f3081b38e6c36819", "filename": "src/test/ui/rfc-2091-track-caller/std-panic-locations.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b8036bf25b68af7751a1db4a07f98808c0ee7/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b8036bf25b68af7751a1db4a07f98808c0ee7/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs?ref=1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "patch": "@@ -0,0 +1,38 @@\n+// run-pass\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+#![feature(option_expect_none, option_unwrap_none)]\n+\n+//! Test that panic locations for `#[track_caller]` functions in std have the correct\n+//! location reported.\n+\n+fn main() {\n+    // inspect the `PanicInfo` we receive to ensure the right file is the source\n+    std::panic::set_hook(Box::new(|info| {\n+        let actual = info.location().unwrap();\n+        if actual.file() != file!() {\n+            eprintln!(\"expected a location in the test file, found {:?}\", actual);\n+            panic!();\n+        }\n+    }));\n+\n+    fn assert_panicked(f: impl FnOnce() + std::panic::UnwindSafe) {\n+        std::panic::catch_unwind(f).unwrap_err();\n+    }\n+\n+    let nope: Option<()> = None;\n+    assert_panicked(|| nope.unwrap());\n+    assert_panicked(|| nope.expect(\"\"));\n+\n+    let yep: Option<()> = Some(());\n+    assert_panicked(|| yep.unwrap_none());\n+    assert_panicked(|| yep.expect_none(\"\"));\n+\n+    let oops: Result<(), ()> = Err(());\n+    assert_panicked(|| oops.unwrap());\n+    assert_panicked(|| oops.expect(\"\"));\n+\n+    let fine: Result<(), ()> = Ok(());\n+    assert_panicked(|| fine.unwrap_err());\n+    assert_panicked(|| fine.expect_err(\"\"));\n+}"}]}