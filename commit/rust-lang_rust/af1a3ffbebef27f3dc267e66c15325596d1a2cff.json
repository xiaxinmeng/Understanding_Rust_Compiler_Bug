{"sha": "af1a3ffbebef27f3dc267e66c15325596d1a2cff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMWEzZmZiZWJlZjI3ZjNkYzI2N2U2NmMxNTMyNTU5NmQxYTJjZmY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-09-15T07:59:55Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-09-15T11:00:15Z"}, "message": "Remove data structure specialization for .zip() iterator\n\nGo back on half the specialization, the part that changed the Zip\nstruct's fields themselves depending on the types of the iterators.\n\nThis means that the Zip iterator will always carry two usize fields,\nwhich are unused. If a whole for loop using a .zip() iterator is\ninlined, these are simply removed and have no effect.\n\nThe same improvement for Zip of for example slice iterators remain, and\nthey still optimize well. However, like when the specialization of zip\nwas merged, the compiler is still very sensistive to the exact context.\n\nFor example this code only autovectorizes if the function is used, not\nif the code in zip_sum_i32 is inserted inline it was called:\n\n```\nfn zip_sum_i32(xs: &[i32], ys: &[i32]) -> i32 {\n    let mut s = 0;\n    for (&x, &y) in xs.iter().zip(ys) {\n        s += x * y;\n    }\n    s\n}\n\nfn zipdot_i32_default_zip(b: &mut test::Bencher)\n{\n    let xs = vec![1; 1024];\n    let ys = vec![1; 1024];\n\n    b.iter(|| {\n        zip_sum_i32(&xs, &ys)\n    })\n}\n```\n\nInclude a test that checks that Zip<T, U> is covariant w.r.t. T and U.", "tree": {"sha": "e428e9166844b63755739f1996df694637b3f044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e428e9166844b63755739f1996df694637b3f044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af1a3ffbebef27f3dc267e66c15325596d1a2cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af1a3ffbebef27f3dc267e66c15325596d1a2cff", "html_url": "https://github.com/rust-lang/rust/commit/af1a3ffbebef27f3dc267e66c15325596d1a2cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af1a3ffbebef27f3dc267e66c15325596d1a2cff/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "html_url": "https://github.com/rust-lang/rust/commit/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "dd57fd1b5190fdfb74d7adfa0ca95335671d5403", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/af1a3ffbebef27f3dc267e66c15325596d1a2cff/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1a3ffbebef27f3dc267e66c15325596d1a2cff/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=af1a3ffbebef27f3dc267e66c15325596d1a2cff", "patch": "@@ -643,7 +643,9 @@ impl<A, B> FusedIterator for Chain<A, B>\n pub struct Zip<A, B> {\n     a: A,\n     b: B,\n-    spec: <(A, B) as ZipImplData>::Data,\n+    // index and len are only used by the specialized version of zip\n+    index: usize,\n+    len: usize,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -685,17 +687,6 @@ trait ZipImpl<A, B> {\n               B: DoubleEndedIterator + ExactSizeIterator;\n }\n \n-// Zip specialization data members\n-#[doc(hidden)]\n-trait ZipImplData {\n-    type Data: 'static + Clone + Default + fmt::Debug;\n-}\n-\n-#[doc(hidden)]\n-impl<T> ZipImplData for T {\n-    default type Data = ();\n-}\n-\n // General Zip impl\n #[doc(hidden)]\n impl<A, B> ZipImpl<A, B> for Zip<A, B>\n@@ -706,7 +697,8 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         Zip {\n             a: a,\n             b: b,\n-            spec: Default::default(), // unused\n+            index: 0, // unused\n+            len: 0, // unused\n         }\n     }\n \n@@ -759,20 +751,6 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n     }\n }\n \n-#[doc(hidden)]\n-#[derive(Default, Debug, Clone)]\n-struct ZipImplFields {\n-    index: usize,\n-    len: usize,\n-}\n-\n-#[doc(hidden)]\n-impl<A, B> ZipImplData for (A, B)\n-    where A: TrustedRandomAccess, B: TrustedRandomAccess\n-{\n-    type Data = ZipImplFields;\n-}\n-\n #[doc(hidden)]\n impl<A, B> ZipImpl<A, B> for Zip<A, B>\n     where A: TrustedRandomAccess, B: TrustedRandomAccess\n@@ -782,18 +760,16 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         Zip {\n             a: a,\n             b: b,\n-            spec: ZipImplFields {\n-                index: 0,\n-                len: len,\n-            }\n+            index: 0,\n+            len: len,\n         }\n     }\n \n     #[inline]\n     fn next(&mut self) -> Option<(A::Item, B::Item)> {\n-        if self.spec.index < self.spec.len {\n-            let i = self.spec.index;\n-            self.spec.index += 1;\n+        if self.index < self.len {\n+            let i = self.index;\n+            self.index += 1;\n             unsafe {\n                 Some((self.a.get_unchecked(i), self.b.get_unchecked(i)))\n             }\n@@ -804,7 +780,7 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let len = self.spec.len - self.spec.index;\n+        let len = self.len - self.index;\n         (len, Some(len))\n     }\n \n@@ -813,9 +789,9 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         where A: DoubleEndedIterator + ExactSizeIterator,\n               B: DoubleEndedIterator + ExactSizeIterator\n     {\n-        if self.spec.index < self.spec.len {\n-            self.spec.len -= 1;\n-            let i = self.spec.len;\n+        if self.index < self.len {\n+            self.len -= 1;\n+            let i = self.len;\n             unsafe {\n                 Some((self.a.get_unchecked(i), self.b.get_unchecked(i)))\n             }"}, {"sha": "b9677d5ba85982247ab7b7efd8d5b3ad35fb8407", "filename": "src/test/run-pass/variance-iterators-in-libcore.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af1a3ffbebef27f3dc267e66c15325596d1a2cff/src%2Ftest%2Frun-pass%2Fvariance-iterators-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1a3ffbebef27f3dc267e66c15325596d1a2cff/src%2Ftest%2Frun-pass%2Fvariance-iterators-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariance-iterators-in-libcore.rs?ref=af1a3ffbebef27f3dc267e66c15325596d1a2cff", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+\n+use std::iter::Zip;\n+\n+fn zip_covariant<'a, A, B>(iter: Zip<&'static A, &'static B>) -> Zip<&'a A, &'a B> { iter }\n+\n+fn main() { }"}]}