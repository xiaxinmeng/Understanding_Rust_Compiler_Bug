{"sha": "f4a3df1f76509b9dd7380db7ce60bd67bc5d5e7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTNkZjFmNzY1MDliOWRkNzM4MGRiN2NlNjBiZDY3YmM1ZDVlN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-20T01:41:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-20T01:41:34Z"}, "message": "Auto merge of #50051 - nnethercote:no-env-var, r=Mark-Simulacrum\n\nLazily evaluate EvalErrorKind::*.into() calls.\n\neval_context.rs calls `ok_or` in multiple places with an eagerly\nevaluated `EvalErrorKind::*.into()` argument, which calls\nEvalError::from(), which calls env::var(\"MIRI_BACKTRACE\"), which\nallocates a String. This code is hot enough for this to have a\nmeasurable effect on some benchmarks.\n\nThis patch changes the `ok_or` calls into `ok_or_else`, thus avoiding\nthe evaluations when they're not needed. As a result, most of the\nrustc-perf benchmarks get a measurable speedup, particularly the\nshorter-running ones, where the improvement is as high as 6%.\n\nOutput from rustc-perf, comparing stage 2 builds with jemalloc disabled:\n\n<details>\n\n```\ncoercions\n\tavg: -1.8%\tmin: -6.0%\tmax: -0.0%\nhelloworld-opt\n\tavg: -3.7%\tmin: -4.0%\tmax: -3.4%\nhelloworld\n\tavg: -3.7%\tmin: -3.9%\tmax: -3.5%\nparser\n\tavg: -3.5%\tmin: -3.9%\tmax: -3.1%\nunify-linearly-opt\n\tavg: -3.2%\tmin: -3.8%\tmax: -2.8%\nunify-linearly\n\tavg: -3.2%\tmin: -3.7%\tmax: -2.8%\nparser-opt\n\tavg: -3.2%\tmin: -3.6%\tmax: -2.8%\nclap-rs\n\tavg: -0.9%\tmin: -3.6%\tmax: 0.1%\nencoding\n\tavg: -1.9%\tmin: -3.0%\tmax: -1.2%\nclap-rs-opt\n\tavg: -0.8%\tmin: -2.7%\tmax: -0.1%\nhelloworld-check\n\tavg: -1.9%\tmin: -2.2%\tmax: -1.7%\ndeeply-nested-check\n\tavg: -1.4%\tmin: -2.1%\tmax: -0.9%\nissue-46449-opt\n\tavg: -0.7%\tmin: -2.0%\tmax: -0.3%\nunify-linearly-check\n\tavg: -1.5%\tmin: -1.9%\tmax: -1.2%\nissue-46449\n\tavg: -1.0%\tmin: -1.8%\tmax: -0.8%\ndeeply-nested-opt\n\tavg: -0.7%\tmin: -1.7%\tmax: -0.2%\ndeeply-nested\n\tavg: -1.0%\tmin: -1.6%\tmax: -0.6%\nparser-check\n\tavg: -1.3%\tmin: -1.6%\tmax: -0.8%\nencoding-check\n\tavg: -1.5%\tmin: -1.6%\tmax: -1.2%\ntuple-stress\n\tavg: -0.9%\tmin: -1.5%\tmax: 0.0%\ntuple-stress-opt\n\tavg: -1.0%\tmin: -1.5%\tmax: -0.3%\nissue-46449-check\n\tavg: -1.3%\tmin: -1.4%\tmax: -1.0%\nencoding-opt\n\tavg: -1.1%\tmin: -1.2%\tmax: -0.9%\nregression-31157\n\tavg: -0.7%\tmin: -1.2%\tmax: -0.2%\nregression-31157-check\n\tavg: -0.8%\tmin: -1.2%\tmax: -0.5%\nfutures-check\n\tavg: -0.8%\tmin: -1.2%\tmax: -0.4%\nunused-warnings-opt\n\tavg: -1.0%\tmin: -1.2%\tmax: -0.9%\nunused-warnings\n\tavg: -1.0%\tmin: -1.1%\tmax: -0.9%\ncoercions-opt\n\tavg: -0.6%\tmin: -1.0%\tmax: -0.2%\ninflate-check\n\tavg: -0.4%\tmin: -0.9%\tmax: -0.1%\nregex-check\n\tavg: -0.8%\tmin: -0.9%\tmax: -0.5%\npiston-image-check\n\tavg: -0.8%\tmin: -0.9%\tmax: -0.8%\ndeep-vector\n\tavg: -0.3%\tmin: -0.9%\tmax: 0.1%\nfutures\n\tavg: -0.5%\tmin: -0.8%\tmax: -0.2%\nfutures-opt\n\tavg: -0.5%\tmin: -0.7%\tmax: -0.1%\nhtml5ever\n\tavg: -0.6%\tmin: -0.7%\tmax: -0.4%\ntokio-webpush-simple-check\n\tavg: -0.2%\tmin: -0.7%\tmax: 0.1%\npiston-image-opt\n\tavg: -0.3%\tmin: -0.7%\tmax: -0.1%\nregex\n\tavg: -0.4%\tmin: -0.7%\tmax: -0.1%\npiston-image\n\tavg: -0.4%\tmin: -0.7%\tmax: -0.2%\nregex-opt\n\tavg: -0.3%\tmin: -0.7%\tmax: 0.1%\ntokio-webpush-simple-opt\n\tavg: -0.2%\tmin: -0.6%\tmax: 0.0%\ncoercions-check\n\tavg: -0.3%\tmin: -0.6%\tmax: -0.1%\nhyper\n\tavg: -0.4%\tmin: -0.6%\tmax: -0.2%\nsyn-opt\n\tavg: -0.3%\tmin: -0.6%\tmax: -0.0%\nhyper-check\n\tavg: -0.5%\tmin: -0.6%\tmax: -0.3%\nsyn-check\n\tavg: -0.4%\tmin: -0.5%\tmax: -0.2%\nhyper-opt\n\tavg: -0.3%\tmin: -0.5%\tmax: -0.1%\nhtml5ever-opt\n\tavg: -0.3%\tmin: -0.5%\tmax: -0.2%\nsyn\n\tavg: -0.2%\tmin: -0.4%\tmax: -0.1%\ndeep-vector-opt\n\tavg: -0.2%\tmin: -0.4%\tmax: 0.1%\ntokio-webpush-simple\n\tavg: -0.2%\tmin: -0.4%\tmax: -0.1%\ninflate\n\tavg: -0.2%\tmin: -0.4%\tmax: -0.1%\ninflate-opt\n\tavg: -0.2%\tmin: -0.4%\tmax: -0.0%\nregression-31157-opt\n\tavg: -0.1%\tmin: -0.4%\tmax: 0.0%\nhtml5ever-check\n\tavg: -0.3%\tmin: -0.4%\tmax: -0.2%\nunused-warnings-check\n\tavg: -0.2%\tmin: -0.3%\tmax: -0.2%\nscript-servo-check\n\tavg: -0.1%\tmin: -0.3%\tmax: 0.0%\ncrates.io-check\n\tavg: -0.2%\tmin: -0.3%\tmax: -0.0%\nscript-servo\n\tavg: -0.1%\tmin: -0.2%\tmax: 0.0%\nclap-rs-check\n\tavg: 0.0%\tmin: -0.1%\tmax: 0.2%\ndeep-vector-check\n\tavg: -0.0%\tmin: -0.2%\tmax: 0.2%\ntuple-stress-check\n\tavg: -0.1%\tmin: -0.2%\tmax: 0.0%\ncrates.io-opt\n\tavg: -0.1%\tmin: -0.2%\tmax: 0.0%\ncrates.io\n\tavg: -0.1%\tmin: -0.2%\tmax: -0.0%\nscript-servo-opt\n\tavg: -0.0%\tmin: -0.1%\tmax: 0.0%\n```\n\n</details>", "tree": {"sha": "6b8a6c85f949a07a6f8edce8c39f6fa02c4ea056", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b8a6c85f949a07a6f8edce8c39f6fa02c4ea056"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a3df1f76509b9dd7380db7ce60bd67bc5d5e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a3df1f76509b9dd7380db7ce60bd67bc5d5e7e", "html_url": "https://github.com/rust-lang/rust/commit/f4a3df1f76509b9dd7380db7ce60bd67bc5d5e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a3df1f76509b9dd7380db7ce60bd67bc5d5e7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230b97af1cfda750148e7f0e168b6dcc9d692957", "url": "https://api.github.com/repos/rust-lang/rust/commits/230b97af1cfda750148e7f0e168b6dcc9d692957", "html_url": "https://github.com/rust-lang/rust/commit/230b97af1cfda750148e7f0e168b6dcc9d692957"}, {"sha": "5070dea2366104fb0b5c344ce7f2a5cf8af176b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5070dea2366104fb0b5c344ce7f2a5cf8af176b0", "html_url": "https://github.com/rust-lang/rust/commit/5070dea2366104fb0b5c344ce7f2a5cf8af176b0"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a5ddd50ae10c50f969224c294159aff76e412ba0", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4a3df1f76509b9dd7380db7ce60bd67bc5d5e7e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a3df1f76509b9dd7380db7ce60bd67bc5d5e7e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f4a3df1f76509b9dd7380db7ce60bd67bc5d5e7e", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             self.param_env,\n             def_id,\n             substs,\n-        ).ok_or(EvalErrorKind::TypeckError.into()) // turn error prop into a panic to expose associated type in const issue\n+        ).ok_or_else(|| EvalErrorKind::TypeckError.into()) // turn error prop into a panic to expose associated type in const issue\n     }\n \n     pub(super) fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n@@ -279,9 +279,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         trace!(\"load mir {:?}\", instance);\n         match instance {\n             ty::InstanceDef::Item(def_id) => {\n-                self.tcx.maybe_optimized_mir(def_id).ok_or_else(|| {\n+                self.tcx.maybe_optimized_mir(def_id).ok_or_else(||\n                     EvalErrorKind::NoMirFor(self.tcx.item_path_str(def_id)).into()\n-                })\n+                )\n             }\n             _ => Ok(self.tcx.instance_mir(instance)),\n         }\n@@ -691,7 +691,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                     self.param_env,\n                                     def_id,\n                                     substs,\n-                                ).ok_or(EvalErrorKind::TypeckError.into());\n+                                ).ok_or_else(|| EvalErrorKind::TypeckError.into());\n                                 let fn_ptr = self.memory.create_fn_alloc(instance?);\n                                 let valty = ValTy {\n                                     value: Value::ByVal(PrimVal::Ptr(fn_ptr)),\n@@ -1689,7 +1689,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n impl<'mir, 'tcx> Frame<'mir, 'tcx> {\n     pub fn get_local(&self, local: mir::Local) -> EvalResult<'tcx, Value> {\n-        self.locals[local].ok_or(EvalErrorKind::DeadLocal.into())\n+        self.locals[local].ok_or_else(|| EvalErrorKind::DeadLocal.into())\n     }\n \n     fn set_local(&mut self, local: mir::Local, value: Value) -> EvalResult<'tcx> {"}]}