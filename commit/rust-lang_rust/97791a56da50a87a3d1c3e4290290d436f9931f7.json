{"sha": "97791a56da50a87a3d1c3e4290290d436f9931f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzkxYTU2ZGE1MGE4N2EzZDFjM2U0MjkwMjkwZDQzNmY5OTMxZjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T08:08:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T08:08:12Z"}, "message": "avoid ref in matches", "tree": {"sha": "8fb30d37b64b5f824ab6e0f7c5ff8c96cb7be805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fb30d37b64b5f824ab6e0f7c5ff8c96cb7be805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97791a56da50a87a3d1c3e4290290d436f9931f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97791a56da50a87a3d1c3e4290290d436f9931f7", "html_url": "https://github.com/rust-lang/rust/commit/97791a56da50a87a3d1c3e4290290d436f9931f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97791a56da50a87a3d1c3e4290290d436f9931f7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad2c5af066362a69c3e1ee67f44266d3c9a79ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad2c5af066362a69c3e1ee67f44266d3c9a79ed", "html_url": "https://github.com/rust-lang/rust/commit/aad2c5af066362a69c3e1ee67f44266d3c9a79ed"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "dfb5a5a9891250889c0e1b493fe345b28cb3e15f", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=97791a56da50a87a3d1c3e4290290d436f9931f7", "patch": "@@ -115,7 +115,7 @@ fn list_targets() -> impl Iterator<Item = cargo_metadata::Target> {\n         get_arg_flag_value(\"--manifest-path\").map(|m| Path::new(&m).canonicalize().unwrap());\n \n     let mut cmd = cargo_metadata::MetadataCommand::new();\n-    if let Some(ref manifest_path) = manifest_path {\n+    if let Some(manifest_path) = manifest_path.as_ref() {\n         cmd.manifest_path(manifest_path);\n     }\n     let mut metadata = if let Ok(metadata) = cmd.exec() {\n@@ -131,7 +131,7 @@ fn list_targets() -> impl Iterator<Item = cargo_metadata::Target> {\n         .iter()\n         .position(|package| {\n             let package_manifest_path = Path::new(&package.manifest_path);\n-            if let Some(ref manifest_path) = manifest_path {\n+            if let Some(manifest_path) = manifest_path.as_ref() {\n                 package_manifest_path == manifest_path\n             } else {\n                 let current_dir = current_dir.as_ref().expect(\"could not read current directory\");\n@@ -368,7 +368,7 @@ path = \"lib.rs\"\n     command.env(\"XARGO_HOME\", &dir);\n     command.env(\"XARGO_RUST_SRC\", &rust_src);\n     // Handle target flag.\n-    if let Some(ref target) = target {\n+    if let Some(target) = target.as_ref() {\n         command.arg(\"--target\").arg(&target);\n     }\n     // Finally run it!\n@@ -379,9 +379,9 @@ path = \"lib.rs\"\n     // That should be it! But we need to figure out where xargo built stuff.\n     // Unfortunately, it puts things into a different directory when the\n     // architecture matches the host.\n-    let is_host = match target {\n+    let is_host = match target.as_ref() {\n         None => true,\n-        Some(target) => target == rustc_version::version_meta().unwrap().host,\n+        Some(target) => target == &rustc_version::version_meta().unwrap().host,\n     };\n     let sysroot = if is_host { dir.join(\"HOST\") } else { PathBuf::from(dir) };\n     std::env::set_var(\"MIRI_SYSROOT\", &sysroot); // pass the env var to the processes we spawn, which will turn it into \"--sysroot\" flags\n@@ -583,6 +583,6 @@ fn inside_cargo_rustc() {\n             if !exit.success() {\n                 std::process::exit(exit.code().unwrap_or(42));\n             },\n-        Err(ref e) => panic!(\"error running {:?}:\\n{:?}\", command, e),\n+        Err(e) => panic!(\"error running {:?}:\\n{:?}\", command, e),\n     }\n }"}, {"sha": "90e532321e4049254a8baca5150a649b3838b858", "filename": "src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=97791a56da50a87a3d1c3e4290290d436f9931f7", "patch": "@@ -51,8 +51,8 @@ pub fn report_error<'tcx, 'mir>(\n ) -> Option<i64> {\n     use InterpError::*;\n \n-    let (title, helps) = match e.kind {\n-        MachineStop(ref info) => {\n+    let (title, helps) = match &e.kind {\n+        MachineStop(info) => {\n             let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n             use TerminationInfo::*;\n             let title = match info {"}, {"sha": "612f1bb328cc49c8760eebd1dc382c07453b71cf", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=97791a56da50a87a3d1c3e4290290d436f9931f7", "patch": "@@ -518,7 +518,7 @@ impl AllocationExtra<Tag> for AllocExtra {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if let Some(ref stacked_borrows) = alloc.extra.stacked_borrows {\n+        if let Some(stacked_borrows) = alloc.extra.stacked_borrows.as_ref() {\n             stacked_borrows.memory_read(ptr, size)\n         } else {\n             Ok(())\n@@ -531,7 +531,7 @@ impl AllocationExtra<Tag> for AllocExtra {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if let Some(ref mut stacked_borrows) = alloc.extra.stacked_borrows {\n+        if let Some(stacked_borrows) = alloc.extra.stacked_borrows.as_mut() {\n             stacked_borrows.memory_written(ptr, size)\n         } else {\n             Ok(())\n@@ -544,7 +544,7 @@ impl AllocationExtra<Tag> for AllocExtra {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if let Some(ref mut stacked_borrows) = alloc.extra.stacked_borrows {\n+        if let Some(stacked_borrows) = alloc.extra.stacked_borrows.as_mut() {\n             stacked_borrows.memory_deallocated(ptr, size)\n         } else {\n             Ok(())"}, {"sha": "fb0169920ee28fedc71d6b8882935c8429797cd1", "filename": "src/mono_hash_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fmono_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fmono_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmono_hash_map.rs?ref=97791a56da50a87a3d1c3e4290290d436f9931f7", "patch": "@@ -64,7 +64,7 @@ impl<K: Hash + Eq, V> AllocMap<K, V> for MonoHashMap<K, V> {\n         self.0.borrow().iter().filter_map(move |(k, v)| f(k, &*v)).collect()\n     }\n \n-    /// The most interesting method: Providing a shared ref without\n+    /// The most interesting method: Providing a shared reference without\n     /// holding the `RefCell` open, and inserting new data if the key\n     /// is not used yet.\n     /// `vacant` is called if the key is not found in the map;"}, {"sha": "281fe1e671bb440fa748bc81d7233f01b779c245", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=97791a56da50a87a3d1c3e4290290d436f9931f7", "patch": "@@ -191,7 +191,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         match msg {\n-            BoundsCheck { ref index, ref len } => {\n+            BoundsCheck { index, len } => {\n                 // Forward to `panic_bounds_check` lang item.\n \n                 // First arg: index."}, {"sha": "cba7dde53d81c470a3cab79fd9d25898f8efbc3c", "filename": "src/shims/tls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97791a56da50a87a3d1c3e4290290d436f9931f7/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=97791a56da50a87a3d1c3e4290290d436f9931f7", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> TlsData<'tcx> {\n \n     pub fn store_tls(&mut self, key: TlsKey, new_data: Option<Scalar<Tag>>) -> InterpResult<'tcx> {\n         match self.keys.get_mut(&key) {\n-            Some(&mut TlsEntry { ref mut data, .. }) => {\n+            Some(TlsEntry { data, .. }) => {\n                 trace!(\"TLS key {} stored: {:?}\", key, new_data);\n                 *data = new_data;\n                 Ok(())\n@@ -139,12 +139,12 @@ impl<'tcx> TlsData<'tcx> {\n             Some(key) => Excluded(key),\n             None => Unbounded,\n         };\n-        for (&key, &mut TlsEntry { ref mut data, dtor }) in\n+        for (&key, TlsEntry { data, dtor }) in\n             thread_local.range_mut((start, Unbounded))\n         {\n             if let Some(data_scalar) = *data {\n                 if let Some(dtor) = dtor {\n-                    let ret = Some((dtor, data_scalar, key));\n+                    let ret = Some((*dtor, data_scalar, key));\n                     *data = None;\n                     return ret;\n                 }"}]}