{"sha": "1154023118c81237fad4498d9ddbaf277fe41ab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNTQwMjMxMThjODEyMzdmYWQ0NDk4ZDlkZGJhZjI3N2ZlNDFhYjU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-25T18:28:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-25T18:28:09Z"}, "message": "Rollup merge of #70319 - lcnr:issue63695, r=eddyb\n\ncorrectly normalize constants\n\ncloses #70317\n\nimplements https://github.com/rust-lang/rust/issues/70125#issuecomment-602133708\n\nr? eddyb cc @varkor", "tree": {"sha": "d22a9408ecd1deb8bbf59815f97b8c1cd8a7fa80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22a9408ecd1deb8bbf59815f97b8c1cd8a7fa80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1154023118c81237fad4498d9ddbaf277fe41ab5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJee6K6CRBK7hj4Ov3rIwAAdHIIAGCFcwE16dD5aKgMwXkU+dPm\ncJc3JCc3euxO0YWaiJGPcLPQ7JzEn9pjHmUVst/E79XIN4tunaLWhw2SG2KpMid3\nG9PgcnnKzwy9rsm2xlfvAStL4uNOgH4mQfQM7jNqWHkHPqIDX9EU4GJWcpXUavrs\nyFfFm8+fzwFPjLidmSpKeTEnl7CyblyVt+sGqXICjeYUzjQLFHQ1K4zeaZTz15iH\nWS590GffWhIF8Od2lAnNgT71bD+PKY3TJNTCnly0rxl3SfhdhfqFrI6bDqRjRSLC\n3ItBWkBjuiCT4ioIhAdMSiRyZL9p3IEwUEvcG4TnBrQANrj7evtRSA8UGblSeiA=\n=vQao\n-----END PGP SIGNATURE-----\n", "payload": "tree d22a9408ecd1deb8bbf59815f97b8c1cd8a7fa80\nparent 97f0a9ef8d3a563eeae1966ff5549400783d8e1f\nparent f8e3da5ea22268dd9f7ff61c133aca3e8c64206f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585160889 +0100\ncommitter GitHub <noreply@github.com> 1585160889 +0100\n\nRollup merge of #70319 - lcnr:issue63695, r=eddyb\n\ncorrectly normalize constants\n\ncloses #70317\n\nimplements https://github.com/rust-lang/rust/issues/70125#issuecomment-602133708\n\nr? eddyb cc @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1154023118c81237fad4498d9ddbaf277fe41ab5", "html_url": "https://github.com/rust-lang/rust/commit/1154023118c81237fad4498d9ddbaf277fe41ab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1154023118c81237fad4498d9ddbaf277fe41ab5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97f0a9ef8d3a563eeae1966ff5549400783d8e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/97f0a9ef8d3a563eeae1966ff5549400783d8e1f", "html_url": "https://github.com/rust-lang/rust/commit/97f0a9ef8d3a563eeae1966ff5549400783d8e1f"}, {"sha": "f8e3da5ea22268dd9f7ff61c133aca3e8c64206f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e3da5ea22268dd9f7ff61c133aca3e8c64206f", "html_url": "https://github.com/rust-lang/rust/commit/f8e3da5ea22268dd9f7ff61c133aca3e8c64206f"}], "stats": {"total": 145, "additions": 105, "deletions": 40}, "files": [{"sha": "f4a4aab844c1475cc9d30cdbf2d48e0fe493a722", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -57,7 +57,7 @@ use crate::traits::query::{\n     CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n-use crate::ty::subst::SubstsRef;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n use rustc_data_structures::fingerprint::Fingerprint;"}, {"sha": "1cc5c6e6f4ae7c48c62e75eda5b0be000d6068c6", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -9,7 +9,7 @@ use crate::traits::query::{\n };\n use crate::ty::query::queries;\n use crate::ty::query::QueryDescription;\n-use crate::ty::subst::SubstsRef;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n \n@@ -1114,10 +1114,10 @@ rustc_queries! {\n         }\n \n         /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n-        query normalize_ty_after_erasing_regions(\n-            goal: ParamEnvAnd<'tcx, Ty<'tcx>>\n-        ) -> Ty<'tcx> {\n-            desc { \"normalizing `{:?}`\", goal }\n+        query normalize_generic_arg_after_erasing_regions(\n+            goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n+        ) -> GenericArg<'tcx> {\n+            desc { \"normalizing `{}`\", goal.value }\n         }\n \n         query implied_outlives_bounds("}, {"sha": "b1fb02a67b3ff3a8447747960d2c2224990524e7", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -273,6 +273,20 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n         t.super_visit_with(self)\n     }\n \n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+        match c.val {\n+            ty::ConstKind::Bound(debruijn, bound_var) if debruijn == self.binder_index => {\n+                self.types.insert(\n+                    bound_var.as_u32(),\n+                    Symbol::intern(&format!(\"^{}\", bound_var.as_u32())),\n+                );\n+            }\n+            _ => (),\n+        }\n+\n+        c.super_visit_with(self)\n+    }\n+\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => match br {"}, {"sha": "3f4f2407f1e6e2fc9e9b9ebd160f2d04b78035a3", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -978,17 +978,27 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n-            match t.kind {\n-                ty::Projection(..) | ty::Opaque(..) => {\n-                    return false;\n-                }\n-                _ => {}\n+            if let ty::Projection(..) | ty::Opaque(..) = t.kind {\n+                return false;\n             }\n         }\n \n         t.super_visit_with(self)\n     }\n \n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+        // if we are only looking for \"constrained\" region, we have to\n+        // ignore the inputs of an unevaluated const, as they may not appear\n+        // in the normalized form\n+        if self.just_constrained {\n+            if let ty::ConstKind::Unevaluated(..) = c.val {\n+                return false;\n+            }\n+        }\n+\n+        c.super_visit_with(self)\n+    }\n+\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         if let ty::ReLateBound(debruijn, br) = *r {\n             if debruijn == self.current_index {"}, {"sha": "2f0a57c59eb14abc0d8672ca7b9ee5f19be510ce", "filename": "src/librustc/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -4,8 +4,8 @@\n //!\n //! The methods in this file use a `TypeFolder` to recursively process\n //! contents, invoking the underlying\n-//! `normalize_ty_after_erasing_regions` query for each type found\n-//! within. (This underlying query is what is cached.)\n+//! `normalize_generic_arg_after_erasing_regions` query for each type\n+//! or constant found within. (This underlying query is what is cached.)\n \n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::{Subst, SubstsRef};\n@@ -94,6 +94,12 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.tcx.normalize_ty_after_erasing_regions(self.param_env.and(ty))\n+        let arg = self.param_env.and(ty.into());\n+        self.tcx.normalize_generic_arg_after_erasing_regions(arg).expect_ty()\n+    }\n+\n+    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        let arg = self.param_env.and(c.into());\n+        self.tcx.normalize_generic_arg_after_erasing_regions(arg).expect_const()\n     }\n }"}, {"sha": "6be1f04efca2b5366a58cfc3de30e51447cebae0", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -5,7 +5,7 @@ use crate::mir;\n use crate::traits;\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::query::caches::DefaultCacheSelector;\n-use crate::ty::subst::SubstsRef;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::Symbol;\n@@ -194,6 +194,17 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for GenericArg<'tcx> {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "c75e0d95e8fdfa01b6b484e5b4efc3ae880376d2", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -31,7 +31,7 @@ use crate::traits::specialization_graph;\n use crate::traits::Clauses;\n use crate::traits::{self, Vtable};\n use crate::ty::steal::Steal;\n-use crate::ty::subst::SubstsRef;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use crate::util::common::ErrorReported;"}, {"sha": "0f4485a705046dff5d33017a6fd09b8edb99d338", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -128,6 +128,14 @@ impl<'tcx> GenericArg<'tcx> {\n             _ => bug!(\"expected a type, but found another kind\"),\n         }\n     }\n+\n+    /// Unpack the `GenericArg` as a const when it is known certainly to be a const.\n+    pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {\n+        match self.unpack() {\n+            GenericArgKind::Const(c) => c,\n+            _ => bug!(\"expected a const, but found another kind\"),\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {"}, {"sha": "b3d75143c56392bf633d50f7cb2d0d3d44721579", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -150,7 +150,7 @@ pub struct PerfStats {\n     /// Total number of values canonicalized queries constructed.\n     pub queries_canonicalized: AtomicUsize,\n     /// Number of times this query is invoked.\n-    pub normalize_ty_after_erasing_regions: AtomicUsize,\n+    pub normalize_generic_arg_after_erasing_regions: AtomicUsize,\n     /// Number of times this query is invoked.\n     pub normalize_projection_ty: AtomicUsize,\n }\n@@ -707,8 +707,8 @@ impl Session {\n             self.perf_stats.queries_canonicalized.load(Ordering::Relaxed)\n         );\n         println!(\n-            \"normalize_ty_after_erasing_regions:            {}\",\n-            self.perf_stats.normalize_ty_after_erasing_regions.load(Ordering::Relaxed)\n+            \"normalize_generic_arg_after_erasing_regions:   {}\",\n+            self.perf_stats.normalize_generic_arg_after_erasing_regions.load(Ordering::Relaxed)\n         );\n         println!(\n             \"normalize_projection_ty:                       {}\",\n@@ -1080,7 +1080,7 @@ fn build_session_(\n             symbol_hash_time: Lock::new(Duration::from_secs(0)),\n             decode_def_path_tables_time: Lock::new(Duration::from_secs(0)),\n             queries_canonicalized: AtomicUsize::new(0),\n-            normalize_ty_after_erasing_regions: AtomicUsize::new(0),\n+            normalize_generic_arg_after_erasing_regions: AtomicUsize::new(0),\n             normalize_projection_ty: AtomicUsize::new(0),\n         },\n         code_stats: Default::default(),"}, {"sha": "badd94a5ed9341e86f82e440bd83ecc4a71db10d", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -387,6 +387,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        let constant = constant.super_fold_with(self);\n         constant.eval(self.selcx.tcx(), self.param_env)\n     }\n }"}, {"sha": "77128bc8c8ab4fcac138a8c2b20b3d8a567f3e77", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -191,6 +191,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        let constant = constant.super_fold_with(self);\n         constant.eval(self.infcx.tcx, self.param_env)\n     }\n }"}, {"sha": "065cf38eb249075a3c9ac3b2407c6dbcc5d5aaa0", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -1,23 +1,24 @@\n use rustc::traits::query::NoSolution;\n use rustc::ty::query::Providers;\n-use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use rustc::ty::subst::GenericArg;\n+use rustc::ty::{self, ParamEnvAnd, TyCtxt};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n \n crate fn provide(p: &mut Providers<'_>) {\n-    *p = Providers { normalize_ty_after_erasing_regions, ..*p };\n+    *p = Providers { normalize_generic_arg_after_erasing_regions, ..*p };\n }\n \n-fn normalize_ty_after_erasing_regions<'tcx>(\n+fn normalize_generic_arg_after_erasing_regions<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    goal: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-) -> Ty<'tcx> {\n-    debug!(\"normalize_ty_after_erasing_regions(goal={:#?})\", goal);\n+    goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>,\n+) -> GenericArg<'tcx> {\n+    debug!(\"normalize_generic_arg_after_erasing_regions(goal={:#?})\", goal);\n \n     let ParamEnvAnd { param_env, value } = goal;\n-    tcx.sess.perf_stats.normalize_ty_after_erasing_regions.fetch_add(1, Ordering::Relaxed);\n+    tcx.sess.perf_stats.normalize_generic_arg_after_erasing_regions.fetch_add(1, Ordering::Relaxed);\n     tcx.infer_ctxt().enter(|infcx| {\n         let cause = ObligationCause::dummy();\n         match infcx.at(&cause, param_env).normalize(&value) {"}, {"sha": "fcb7b4c4fe69d5721f5af5ceb707c43a9ba9ed20", "filename": "src/test/mir-opt/inline/inline-into-box-place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -1,6 +1,7 @@\n // ignore-tidy-linelength\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=3\n+// only-64bit FIXME: the mir representation of RawVec depends on ptr size\n #![feature(box_syntax)]\n \n fn main() {\n@@ -55,7 +56,7 @@ fn main() {\n //   StorageLive(_2);\n //   _2 = Box(std::vec::Vec<u32>);\n //   _4 = &mut (*_2);\n-//   ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32>::NEW;\n+//   ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>;\n //   ((*_4).1: usize) = const 0usize;\n //   _1 = move _2;\n //   StorageDead(_2);"}, {"sha": "9fb1bbebc96100847ee3e47bcf85f6c4c376743e", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -1,9 +1,9 @@\n // build-fail\n+//~^ ERROR cycle detected when normalizing `<() as Tr>::A`\n \n // Cyclic assoc. const defaults don't error unless *used*\n trait Tr {\n     const A: u8 = Self::B;\n-    //~^ ERROR cycle detected when const-evaluating + checking `Tr::A`\n \n     const B: u8 = Self::A;\n }"}, {"sha": "6b2fbe5be4e30f69b867b6377841e201f934bc09", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -1,30 +1,42 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n-  --> $DIR/defaults-cyclic-fail.rs:5:5\n+error[E0391]: cycle detected when normalizing `<() as Tr>::A`\n+   |\n+note: ...which requires const-evaluating + checking `Tr::A`...\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `Tr::A`...\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n+LL |     const A: u8 = Self::B;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating `Tr::A`...\n-  --> $DIR/defaults-cyclic-fail.rs:5:19\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n-   |                   ^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires normalizing `<() as Tr>::B`...\n+note: ...which requires const-evaluating + checking `Tr::B`...\n+  --> $DIR/defaults-cyclic-fail.rs:8:5\n+   |\n+LL |     const B: u8 = Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating `Tr::B`...\n-  --> $DIR/defaults-cyclic-fail.rs:8:19\n+  --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n-   |                   ^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires normalizing `<() as Tr>::A`, completing the cycle\n note: cycle used when const-evaluating `main`\n-  --> $DIR/defaults-cyclic-fail.rs:16:16\n+  --> $DIR/defaults-cyclic-fail.rs:14:1\n    |\n-LL |     assert_eq!(<() as Tr>::A, 0);\n-   |                ^^^^^^^^^^^^^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aac3622c6de408f16603ccb1290392be09f39299", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1154023118c81237fad4498d9ddbaf277fe41ab5/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=1154023118c81237fad4498d9ddbaf277fe41ab5", "patch": "@@ -25,7 +25,7 @@ note: ...which requires const-evaluating + checking `std::intrinsics::size_of`..\n LL |     pub fn size_of<T>() -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n-   = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n+   = note: ...which requires normalizing `[u8; _]`...\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n   --> $DIR/const-size_of-cycle.rs:7:1"}]}