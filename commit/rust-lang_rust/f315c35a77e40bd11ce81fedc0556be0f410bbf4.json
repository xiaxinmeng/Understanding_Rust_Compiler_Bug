{"sha": "f315c35a77e40bd11ce81fedc0556be0f410bbf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMTVjMzVhNzdlNDBiZDExY2U4MWZlZGMwNTU2YmUwZjQxMGJiZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-15T15:21:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-15T15:21:45Z"}, "message": "Auto merge of #72357 - ortem:new-dbg-pretty-printers, r=pnkfelix\n\nImplement new gdb/lldb pretty-printers\n\nReopened #60826\n\nThis PR replaces current gdb and lldb pretty-printers with new ones that were originally written for [IntelliJ Rust](https://github.com/intellij-rust/intellij-rust/tree/master/prettyPrinters).\n\nThe current state of lldb pretty-printers is poor, because [they don't use synthetic children](https://github.com/rust-lang/rust/issues/55586#issuecomment-436610063). When I started to reimplement lldb pretty-printers with synthetic children support, I've found current version strange and hard to support. I think `debugger_pretty_printers_common.py` is overkill, so I got rid of it.\n\nThe new pretty-printers have to support all types supported by current pretty-printers, and also support `Rc`, `Arc`, `Cell`, `Ref`, `RefCell`, `RefMut`, `HashMap`, `HashSet`.\n\nFixes #56252", "tree": {"sha": "b5cfdca90f9475d68f44b52f0df8b8d417733287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5cfdca90f9475d68f44b52f0df8b8d417733287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f315c35a77e40bd11ce81fedc0556be0f410bbf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f315c35a77e40bd11ce81fedc0556be0f410bbf4", "html_url": "https://github.com/rust-lang/rust/commit/f315c35a77e40bd11ce81fedc0556be0f410bbf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f315c35a77e40bd11ce81fedc0556be0f410bbf4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "html_url": "https://github.com/rust-lang/rust/commit/ff4a2533a0720f9cdd86e02eafa3725f07aa7752"}, {"sha": "47c26e69a986d25ed9d26aebc2787334956a89ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c26e69a986d25ed9d26aebc2787334956a89ae", "html_url": "https://github.com/rust-lang/rust/commit/47c26e69a986d25ed9d26aebc2787334956a89ae"}], "stats": {"total": 3366, "additions": 1871, "deletions": 1495}, "files": [{"sha": "a752d8045f7b4c8f0472030363a2d633afb008f7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -619,19 +619,21 @@ impl Step for DebuggerScripts {\n             cp_debugger_script(\"natvis/libcore.natvis\");\n             cp_debugger_script(\"natvis/libstd.natvis\");\n         } else {\n-            cp_debugger_script(\"debugger_pretty_printers_common.py\");\n+            cp_debugger_script(\"rust_types.py\");\n \n             // gdb debugger scripts\n             builder.install(&builder.src.join(\"src/etc/rust-gdb\"), &sysroot.join(\"bin\"), 0o755);\n             builder.install(&builder.src.join(\"src/etc/rust-gdbgui\"), &sysroot.join(\"bin\"), 0o755);\n \n             cp_debugger_script(\"gdb_load_rust_pretty_printers.py\");\n-            cp_debugger_script(\"gdb_rust_pretty_printing.py\");\n+            cp_debugger_script(\"gdb_lookup.py\");\n+            cp_debugger_script(\"gdb_providers.py\");\n \n             // lldb debugger scripts\n             builder.install(&builder.src.join(\"src/etc/rust-lldb\"), &sysroot.join(\"bin\"), 0o755);\n \n-            cp_debugger_script(\"lldb_rust_formatters.py\");\n+            cp_debugger_script(\"lldb_lookup.py\");\n+            cp_debugger_script(\"lldb_providers.py\");\n         }\n     }\n }"}, {"sha": "b3f8f50636bee754b81d0280b505ece3bb9f1a51", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "removed", "additions": 0, "deletions": 401, "changes": 401, "blob_url": "https://github.com/rust-lang/rust/blob/ff4a2533a0720f9cdd86e02eafa3725f07aa7752/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/ff4a2533a0720f9cdd86e02eafa3725f07aa7752/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "patch": "@@ -1,401 +0,0 @@\n-\"\"\"\n-This module provides an abstraction layer over common Rust pretty printing\n-functionality needed by both GDB and LLDB.\n-\"\"\"\n-\n-import re\n-\n-# Type codes that indicate the kind of type as it appears in DWARF debug\n-# information. This code alone is not sufficient to determine the Rust type.\n-# For example structs, tuples, fat pointers, or enum variants will all have\n-# DWARF_TYPE_CODE_STRUCT.\n-DWARF_TYPE_CODE_STRUCT = 1\n-DWARF_TYPE_CODE_UNION  = 2\n-DWARF_TYPE_CODE_PTR    = 3\n-DWARF_TYPE_CODE_ARRAY  = 4\n-DWARF_TYPE_CODE_ENUM   = 5\n-\n-# These constants specify the most specific kind of type that could be\n-# determined for a given value.\n-TYPE_KIND_UNKNOWN           = -1\n-TYPE_KIND_EMPTY             = 0\n-TYPE_KIND_SLICE             = 1\n-TYPE_KIND_REGULAR_STRUCT    = 2\n-TYPE_KIND_TUPLE             = 3\n-TYPE_KIND_TUPLE_STRUCT      = 4\n-TYPE_KIND_CSTYLE_VARIANT    = 5\n-TYPE_KIND_TUPLE_VARIANT     = 6\n-TYPE_KIND_STRUCT_VARIANT    = 7\n-TYPE_KIND_STR_SLICE         = 8\n-TYPE_KIND_STD_VEC           = 9\n-TYPE_KIND_STD_STRING        = 10\n-TYPE_KIND_REGULAR_ENUM      = 11\n-TYPE_KIND_COMPRESSED_ENUM   = 12\n-TYPE_KIND_SINGLETON_ENUM    = 13\n-TYPE_KIND_CSTYLE_ENUM       = 14\n-TYPE_KIND_PTR               = 15\n-TYPE_KIND_FIXED_SIZE_VEC    = 16\n-TYPE_KIND_REGULAR_UNION     = 17\n-TYPE_KIND_OS_STRING         = 18\n-TYPE_KIND_STD_VECDEQUE      = 19\n-TYPE_KIND_STD_BTREESET      = 20\n-TYPE_KIND_STD_BTREEMAP      = 21\n-\n-ENCODED_ENUM_PREFIX = \"RUST$ENCODED$ENUM$\"\n-ENUM_DISR_FIELD_NAME = \"RUST$ENUM$DISR\"\n-\n-# Slice related constants\n-SLICE_FIELD_NAME_DATA_PTR = \"data_ptr\"\n-SLICE_FIELD_NAME_LENGTH = \"length\"\n-SLICE_FIELD_NAMES = [SLICE_FIELD_NAME_DATA_PTR, SLICE_FIELD_NAME_LENGTH]\n-\n-# std::Vec<> related constants\n-STD_VEC_FIELD_NAME_LENGTH = \"len\"\n-STD_VEC_FIELD_NAME_BUF = \"buf\"\n-STD_VEC_FIELD_NAMES = [STD_VEC_FIELD_NAME_BUF,\n-                       STD_VEC_FIELD_NAME_LENGTH]\n-\n-# std::collections::VecDeque<> related constants\n-STD_VECDEQUE_FIELD_NAME_TAIL = \"tail\"\n-STD_VECDEQUE_FIELD_NAME_HEAD = \"head\"\n-STD_VECDEQUE_FIELD_NAME_BUF = \"buf\"\n-STD_VECDEQUE_FIELD_NAMES = [STD_VECDEQUE_FIELD_NAME_TAIL,\n-                            STD_VECDEQUE_FIELD_NAME_HEAD,\n-                            STD_VECDEQUE_FIELD_NAME_BUF]\n-\n-# std::collections::BTreeSet<> related constants\n-STD_BTREESET_FIELD_NAMES = [\"map\"]\n-\n-# std::collections::BTreeMap<> related constants\n-STD_BTREEMAP_FIELD_NAMES = [\"root\", \"length\"]\n-\n-# std::String related constants\n-STD_STRING_FIELD_NAMES = [\"vec\"]\n-\n-# std::ffi::OsString related constants\n-OS_STRING_FIELD_NAMES = [\"inner\"]\n-\n-\n-class Type(object):\n-    \"\"\"\n-    This class provides a common interface for type-oriented operations.\n-    Sub-classes are supposed to wrap a debugger-specific type-object and\n-    provide implementations for the abstract methods in this class.\n-    \"\"\"\n-\n-    def __init__(self):\n-        self.__type_kind = None\n-\n-    def get_unqualified_type_name(self):\n-        \"\"\"\n-        Implementations of this method should return the unqualified name of the\n-        type-object they are wrapping. Some examples:\n-\n-        'int' -> 'int'\n-        'std::vec::Vec<std::string::String>' -> 'Vec<std::string::String>'\n-        '&std::option::Option<std::string::String>' -> '&std::option::Option<std::string::String>'\n-\n-        As you can see, type arguments stay fully qualified.\n-        \"\"\"\n-        raise NotImplementedError(\"Override this method\")\n-\n-    def get_dwarf_type_kind(self):\n-        \"\"\"\n-        Implementations of this method should return the correct\n-        DWARF_TYPE_CODE_* value for the wrapped type-object.\n-        \"\"\"\n-        raise NotImplementedError(\"Override this method\")\n-\n-    def get_fields(self):\n-        \"\"\"\n-        Implementations of this method should return a list of field-objects of\n-        this type. For Rust-enums (i.e. with DWARF_TYPE_CODE_UNION) these field-\n-        objects represent the variants of the enum. Field-objects must have a\n-        `name` attribute that gives their name as specified in DWARF.\n-        \"\"\"\n-        assert ((self.get_dwarf_type_kind() == DWARF_TYPE_CODE_STRUCT) or\n-                (self.get_dwarf_type_kind() == DWARF_TYPE_CODE_UNION))\n-        raise NotImplementedError(\"Override this method\")\n-\n-    def get_wrapped_value(self):\n-        \"\"\"\n-        Returns the debugger-specific type-object wrapped by this object. This\n-        is sometimes needed for doing things like pointer-arithmetic in GDB.\n-        \"\"\"\n-        raise NotImplementedError(\"Override this method\")\n-\n-    def get_type_kind(self):\n-        \"\"\"This method returns the TYPE_KIND_* value for this type-object.\"\"\"\n-        if self.__type_kind is None:\n-            dwarf_type_code = self.get_dwarf_type_kind()\n-\n-            if dwarf_type_code == DWARF_TYPE_CODE_STRUCT:\n-                self.__type_kind = self.__classify_struct()\n-            elif dwarf_type_code == DWARF_TYPE_CODE_UNION:\n-                self.__type_kind = self.__classify_union()\n-            elif dwarf_type_code == DWARF_TYPE_CODE_PTR:\n-                self.__type_kind = TYPE_KIND_PTR\n-            elif dwarf_type_code == DWARF_TYPE_CODE_ARRAY:\n-                self.__type_kind = TYPE_KIND_FIXED_SIZE_VEC\n-            else:\n-                self.__type_kind = TYPE_KIND_UNKNOWN\n-        return self.__type_kind\n-\n-    def __classify_struct(self):\n-        assert self.get_dwarf_type_kind() == DWARF_TYPE_CODE_STRUCT\n-\n-        unqualified_type_name = self.get_unqualified_type_name()\n-\n-        # STR SLICE\n-        if unqualified_type_name == \"&str\":\n-            return TYPE_KIND_STR_SLICE\n-\n-        # REGULAR SLICE\n-        if (unqualified_type_name.startswith((\"&[\", \"&mut [\")) and\n-            unqualified_type_name.endswith(\"]\") and\n-            self.__conforms_to_field_layout(SLICE_FIELD_NAMES)):\n-            return TYPE_KIND_SLICE\n-\n-        fields = self.get_fields()\n-        field_count = len(fields)\n-\n-        # EMPTY STRUCT\n-        if field_count == 0:\n-            return TYPE_KIND_EMPTY\n-\n-        # STD VEC\n-        if (unqualified_type_name.startswith(\"Vec<\") and\n-            self.__conforms_to_field_layout(STD_VEC_FIELD_NAMES)):\n-            return TYPE_KIND_STD_VEC\n-\n-        # STD COLLECTION VECDEQUE\n-        if (unqualified_type_name.startswith(\"VecDeque<\") and\n-            self.__conforms_to_field_layout(STD_VECDEQUE_FIELD_NAMES)):\n-            return TYPE_KIND_STD_VECDEQUE\n-\n-        # STD COLLECTION BTREESET\n-        if (unqualified_type_name.startswith(\"BTreeSet<\") and\n-                self.__conforms_to_field_layout(STD_BTREESET_FIELD_NAMES)):\n-            return TYPE_KIND_STD_BTREESET\n-\n-        # STD COLLECTION BTREEMAP\n-        if (unqualified_type_name.startswith(\"BTreeMap<\") and\n-                self.__conforms_to_field_layout(STD_BTREEMAP_FIELD_NAMES)):\n-            return TYPE_KIND_STD_BTREEMAP\n-\n-        # STD STRING\n-        if (unqualified_type_name.startswith(\"String\") and\n-            self.__conforms_to_field_layout(STD_STRING_FIELD_NAMES)):\n-            return TYPE_KIND_STD_STRING\n-\n-        # OS STRING\n-        if (unqualified_type_name == \"OsString\" and\n-            self.__conforms_to_field_layout(OS_STRING_FIELD_NAMES)):\n-            return TYPE_KIND_OS_STRING\n-\n-        # ENUM VARIANTS\n-        if fields[0].name == ENUM_DISR_FIELD_NAME:\n-            if field_count == 1:\n-                return TYPE_KIND_CSTYLE_VARIANT\n-            elif self.__all_fields_conform_to_tuple_field_naming(1):\n-                return TYPE_KIND_TUPLE_VARIANT\n-            else:\n-                return TYPE_KIND_STRUCT_VARIANT\n-\n-        # TUPLE\n-        if self.__all_fields_conform_to_tuple_field_naming(0):\n-            if unqualified_type_name.startswith(\"(\"):\n-                return TYPE_KIND_TUPLE\n-            else:\n-                return TYPE_KIND_TUPLE_STRUCT\n-\n-        # REGULAR STRUCT\n-        return TYPE_KIND_REGULAR_STRUCT\n-\n-    def __classify_union(self):\n-        assert self.get_dwarf_type_kind() == DWARF_TYPE_CODE_UNION\n-\n-        union_members = self.get_fields()\n-        union_member_count = len(union_members)\n-        if union_member_count == 0:\n-            return TYPE_KIND_EMPTY\n-\n-        first_variant_name = union_members[0].name\n-        if first_variant_name is None:\n-            if union_member_count == 1:\n-                return TYPE_KIND_SINGLETON_ENUM\n-            else:\n-                return TYPE_KIND_REGULAR_ENUM\n-        elif first_variant_name.startswith(ENCODED_ENUM_PREFIX):\n-            assert union_member_count == 1\n-            return TYPE_KIND_COMPRESSED_ENUM\n-        else:\n-            return TYPE_KIND_REGULAR_UNION\n-\n-    def __conforms_to_field_layout(self, expected_fields):\n-        actual_fields = self.get_fields()\n-        actual_field_count = len(actual_fields)\n-\n-        if actual_field_count != len(expected_fields):\n-            return False\n-\n-        for i in range(0, actual_field_count):\n-            if actual_fields[i].name != expected_fields[i]:\n-                return False\n-\n-        return True\n-\n-    def __all_fields_conform_to_tuple_field_naming(self, start_index):\n-        fields = self.get_fields()\n-        field_count = len(fields)\n-\n-        for i in range(start_index, field_count):\n-            field_name = fields[i].name\n-            if (field_name is None) or (re.match(r\"__\\d+$\", field_name) is None):\n-                return False\n-        return True\n-\n-\n-class Value(object):\n-    \"\"\"\n-    This class provides a common interface for value-oriented operations.\n-    Sub-classes are supposed to wrap a debugger-specific value-object and\n-    provide implementations for the abstract methods in this class.\n-    \"\"\"\n-    def __init__(self, ty):\n-        self.type = ty\n-\n-    def get_child_at_index(self, index):\n-        \"\"\"Returns the value of the field, array element or variant at the given index\"\"\"\n-        raise NotImplementedError(\"Override this method\")\n-\n-    def as_integer(self):\n-        \"\"\"\n-        Try to convert the wrapped value into a Python integer. This should\n-        always succeed for values that are pointers or actual integers.\n-        \"\"\"\n-        raise NotImplementedError(\"Override this method\")\n-\n-    def get_wrapped_value(self):\n-        \"\"\"\n-        Returns the debugger-specific value-object wrapped by this object. This\n-        is sometimes needed for doing things like pointer-arithmetic in GDB.\n-        \"\"\"\n-        raise NotImplementedError(\"Override this method\")\n-\n-\n-class EncodedEnumInfo(object):\n-    \"\"\"\n-    This class provides facilities for handling enum values with compressed\n-    encoding where a non-null field in one variant doubles as the discriminant.\n-    \"\"\"\n-\n-    def __init__(self, enum_val):\n-        assert enum_val.type.get_type_kind() == TYPE_KIND_COMPRESSED_ENUM\n-        variant_name = enum_val.type.get_fields()[0].name\n-        last_separator_index = variant_name.rfind(\"$\")\n-        start_index = len(ENCODED_ENUM_PREFIX)\n-        indices_substring = variant_name[start_index:last_separator_index].split(\"$\")\n-        self.__enum_val = enum_val\n-        self.__disr_field_indices = [int(index) for index in indices_substring]\n-        self.__null_variant_name = variant_name[last_separator_index + 1:]\n-\n-    def is_null_variant(self):\n-        ty = self.__enum_val.type\n-        sole_variant_val = self.__enum_val.get_child_at_index(0)\n-        discriminant_val = sole_variant_val\n-        for disr_field_index in self.__disr_field_indices:\n-            discriminant_val = discriminant_val.get_child_at_index(disr_field_index)\n-\n-        # If the discriminant field is a fat pointer we have to consider the\n-        # first word as the true discriminant\n-        if discriminant_val.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_STRUCT:\n-            discriminant_val = discriminant_val.get_child_at_index(0)\n-\n-        return discriminant_val.as_integer() == 0\n-\n-    def get_non_null_variant_val(self):\n-        return self.__enum_val.get_child_at_index(0)\n-\n-    def get_null_variant_name(self):\n-        return self.__null_variant_name\n-\n-\n-def get_discriminant_value_as_integer(enum_val):\n-    assert enum_val.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_UNION\n-    # we can take any variant here because the discriminant has to be the same\n-    # for all of them.\n-    variant_val = enum_val.get_child_at_index(0)\n-    disr_val = variant_val.get_child_at_index(0)\n-    return disr_val.as_integer()\n-\n-\n-def extract_length_ptr_and_cap_from_std_vec(vec_val):\n-    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_VEC\n-    length_field_index = STD_VEC_FIELD_NAMES.index(STD_VEC_FIELD_NAME_LENGTH)\n-    buf_field_index = STD_VEC_FIELD_NAMES.index(STD_VEC_FIELD_NAME_BUF)\n-\n-    length = vec_val.get_child_at_index(length_field_index).as_integer()\n-    buf = vec_val.get_child_at_index(buf_field_index)\n-\n-    vec_ptr_val = buf.get_child_at_index(0)\n-    capacity = buf.get_child_at_index(1).as_integer()\n-    data_ptr = vec_ptr_val.get_child_at_index(0)\n-    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n-    return (length, data_ptr, capacity)\n-\n-\n-def extract_tail_head_ptr_and_cap_from_std_vecdeque(vec_val):\n-    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_VECDEQUE\n-    tail_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_TAIL)\n-    head_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_HEAD)\n-    buf_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_BUF)\n-\n-    tail = vec_val.get_child_at_index(tail_field_index).as_integer()\n-    head = vec_val.get_child_at_index(head_field_index).as_integer()\n-    buf = vec_val.get_child_at_index(buf_field_index)\n-\n-    vec_ptr_val = buf.get_child_at_index(0)\n-    capacity = buf.get_child_at_index(1).as_integer()\n-    data_ptr = vec_ptr_val.get_child_at_index(0)\n-    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n-    return (tail, head, data_ptr, capacity)\n-\n-\n-def extract_length_and_ptr_from_slice(slice_val):\n-    assert (slice_val.type.get_type_kind() == TYPE_KIND_SLICE or\n-            slice_val.type.get_type_kind() == TYPE_KIND_STR_SLICE)\n-\n-    length_field_index = SLICE_FIELD_NAMES.index(SLICE_FIELD_NAME_LENGTH)\n-    ptr_field_index = SLICE_FIELD_NAMES.index(SLICE_FIELD_NAME_DATA_PTR)\n-\n-    length = slice_val.get_child_at_index(length_field_index).as_integer()\n-    data_ptr = slice_val.get_child_at_index(ptr_field_index)\n-\n-    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n-    return (length, data_ptr)\n-\n-\n-UNQUALIFIED_TYPE_MARKERS = frozenset([\"(\", \"[\", \"&\", \"*\"])\n-\n-\n-def extract_type_name(qualified_type_name):\n-    \"\"\"Extracts the type name from a fully qualified path\"\"\"\n-    if qualified_type_name[0] in UNQUALIFIED_TYPE_MARKERS:\n-        return qualified_type_name\n-\n-    end_of_search = qualified_type_name.find(\"<\")\n-    if end_of_search < 0:\n-        end_of_search = len(qualified_type_name)\n-\n-    index = qualified_type_name.rfind(\"::\", 0, end_of_search)\n-    if index < 0:\n-        return qualified_type_name\n-    else:\n-        return qualified_type_name[index + 2:]\n-\n-\n-try:\n-    compat_str = unicode  # Python 2\n-except NameError:\n-    compat_str = str"}, {"sha": "856b5df2de70bff896d5b89e61f9a296b1fd0a8c", "filename": "src/etc/gdb_load_rust_pretty_printers.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Fgdb_load_rust_pretty_printers.py", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Fgdb_load_rust_pretty_printers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_load_rust_pretty_printers.py?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -1,3 +1,3 @@\n import gdb\n-import gdb_rust_pretty_printing\n-gdb_rust_pretty_printing.register_printers(gdb.current_objfile())\n+import gdb_lookup\n+gdb_lookup.register_printers(gdb.current_objfile())"}, {"sha": "2a46eaadad6f9a1b121b706e77d45882e4690959", "filename": "src/etc/gdb_lookup.py", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Fgdb_lookup.py", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Fgdb_lookup.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_lookup.py?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -0,0 +1,92 @@\n+import gdb\n+import re\n+\n+from gdb_providers import *\n+from rust_types import *\n+\n+\n+rust_enabled = 'set language rust' in gdb.execute('complete set language ru', to_string=True)\n+_gdb_version_matched = re.search('([0-9]+)\\\\.([0-9]+)', gdb.VERSION)\n+gdb_version = [int(num) for num in _gdb_version_matched.groups()] if _gdb_version_matched else []\n+\n+def register_printers(objfile):\n+    objfile.pretty_printers.append(lookup)\n+\n+\n+# BACKCOMPAT: rust 1.35\n+def is_hashbrown_hashmap(hash_map):\n+    return len(hash_map.type.fields()) == 1\n+\n+\n+def classify_rust_type(type):\n+    type_class = type.code\n+    if type_class == gdb.TYPE_CODE_STRUCT:\n+        return classify_struct(type.tag, type.fields())\n+    if type_class == gdb.TYPE_CODE_UNION:\n+        return classify_union(type.fields())\n+\n+    return RustType.OTHER\n+\n+\n+def check_enum_discriminant(valobj):\n+    content = valobj[valobj.type.fields()[0]]\n+    fields = content.type.fields()\n+    if len(fields) > 1:\n+        discriminant = int(content[fields[0]]) + 1\n+        if discriminant > len(fields):\n+            # invalid discriminant\n+            return False\n+    return True\n+\n+\n+def lookup(valobj):\n+    rust_type = classify_rust_type(valobj.type)\n+\n+    if rust_type == RustType.ENUM:\n+        # use enum provider only for GDB <7.12\n+        if gdb_version[0] < 7 or (gdb_version[0] == 7 and gdb_version[1] < 12):\n+            if check_enum_discriminant(valobj):\n+                return EnumProvider(valobj)\n+\n+    if rust_type == RustType.STD_STRING:\n+        return StdStringProvider(valobj)\n+    if rust_type == RustType.STD_OS_STRING:\n+        return StdOsStringProvider(valobj)\n+    if rust_type == RustType.STD_STR and not rust_enabled:\n+        return StdStrProvider(valobj)\n+\n+    if rust_type == RustType.STD_VEC:\n+        return StdVecProvider(valobj)\n+    if rust_type == RustType.STD_VEC_DEQUE:\n+        return StdVecDequeProvider(valobj)\n+    if rust_type == RustType.STD_BTREE_SET:\n+        return StdBTreeSetProvider(valobj)\n+    if rust_type == RustType.STD_BTREE_MAP:\n+        return StdBTreeMapProvider(valobj)\n+    if rust_type == RustType.STD_HASH_MAP:\n+        if is_hashbrown_hashmap(valobj):\n+            return StdHashMapProvider(valobj)\n+        else:\n+            return StdOldHashMapProvider(valobj)\n+    if rust_type == RustType.STD_HASH_SET:\n+        hash_map = valobj[\"map\"]\n+        if is_hashbrown_hashmap(hash_map):\n+            return StdHashMapProvider(hash_map, show_values=False)\n+        else:\n+            return StdOldHashMapProvider(hash_map, show_values=False)\n+\n+    if rust_type == RustType.STD_RC:\n+        return StdRcProvider(valobj)\n+    if rust_type == RustType.STD_ARC:\n+        return StdRcProvider(valobj, is_atomic=True)\n+\n+    if rust_type == RustType.STD_CELL:\n+        return StdCellProvider(valobj)\n+    if rust_type == RustType.STD_REF:\n+        return StdRefProvider(valobj)\n+    if rust_type == RustType.STD_REF_MUT:\n+        return StdRefProvider(valobj)\n+    if rust_type == RustType.STD_REF_CELL:\n+        return StdRefCellProvider(valobj)\n+\n+    return None"}, {"sha": "cec9c56a23522b3ee2dd3feb694ce6c35afa4752", "filename": "src/etc/gdb_providers.py", "status": "added", "additions": 385, "deletions": 0, "changes": 385, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Fgdb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Fgdb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_providers.py?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -0,0 +1,385 @@\n+from sys import version_info\n+\n+import gdb\n+from gdb import lookup_type\n+\n+if version_info[0] >= 3:\n+    xrange = range\n+\n+ZERO_FIELD = \"__0\"\n+FIRST_FIELD = \"__1\"\n+\n+\n+def unwrap_unique_or_non_null(unique_or_nonnull):\n+    # BACKCOMPAT: rust 1.32\n+    # https://github.com/rust-lang/rust/commit/7a0911528058e87d22ea305695f4047572c5e067\n+    ptr = unique_or_nonnull[\"pointer\"]\n+    return ptr if ptr.type.code == gdb.TYPE_CODE_PTR else ptr[ZERO_FIELD]\n+\n+\n+class EnumProvider:\n+    def __init__(self, valobj):\n+        content = valobj[valobj.type.fields()[0]]\n+        fields = content.type.fields()\n+        self.empty = len(fields) == 0\n+        if not self.empty:\n+            if len(fields) == 1:\n+                discriminant = 0\n+            else:\n+                discriminant = int(content[fields[0]]) + 1\n+            self.active_variant = content[fields[discriminant]]\n+            self.name = fields[discriminant].name\n+            self.full_name = \"{}::{}\".format(valobj.type.name, self.name)\n+        else:\n+            self.full_name = valobj.type.name\n+\n+    def to_string(self):\n+        return self.full_name\n+\n+    def children(self):\n+        if not self.empty:\n+            yield self.name, self.active_variant\n+\n+\n+class StdStringProvider:\n+    def __init__(self, valobj):\n+        self.valobj = valobj\n+        vec = valobj[\"vec\"]\n+        self.length = int(vec[\"len\"])\n+        self.data_ptr = unwrap_unique_or_non_null(vec[\"buf\"][\"ptr\"])\n+\n+    def to_string(self):\n+        return self.data_ptr.lazy_string(encoding=\"utf-8\", length=self.length)\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"string\"\n+\n+\n+class StdOsStringProvider:\n+    def __init__(self, valobj):\n+        self.valobj = valobj\n+        buf = self.valobj[\"inner\"][\"inner\"]\n+        is_windows = \"Wtf8Buf\" in buf.type.name\n+        vec = buf[ZERO_FIELD] if is_windows else buf\n+\n+        self.length = int(vec[\"len\"])\n+        self.data_ptr = unwrap_unique_or_non_null(vec[\"buf\"][\"ptr\"])\n+\n+    def to_string(self):\n+        return self.data_ptr.lazy_string(encoding=\"utf-8\", length=self.length)\n+\n+    def display_hint(self):\n+        return \"string\"\n+\n+\n+class StdStrProvider:\n+    def __init__(self, valobj):\n+        self.valobj = valobj\n+        self.length = int(valobj[\"length\"])\n+        self.data_ptr = valobj[\"data_ptr\"]\n+\n+    def to_string(self):\n+        return self.data_ptr.lazy_string(encoding=\"utf-8\", length=self.length)\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"string\"\n+\n+\n+class StdVecProvider:\n+    def __init__(self, valobj):\n+        self.valobj = valobj\n+        self.length = int(valobj[\"len\"])\n+        self.data_ptr = unwrap_unique_or_non_null(valobj[\"buf\"][\"ptr\"])\n+\n+    def to_string(self):\n+        return \"Vec(size={})\".format(self.length)\n+\n+    def children(self):\n+        saw_inaccessible = False\n+        for index in xrange(self.length):\n+            element_ptr = self.data_ptr + index\n+            if saw_inaccessible:\n+                return\n+            try:\n+                # rust-lang/rust#64343: passing deref expr to `str` allows\n+                # catching exception on garbage pointer\n+                str(element_ptr.dereference())\n+                yield \"[{}]\".format(index), element_ptr.dereference()\n+            except RuntimeError:\n+                saw_inaccessible = True\n+                yield str(index), \"inaccessible\"\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"array\"\n+\n+\n+class StdVecDequeProvider:\n+    def __init__(self, valobj):\n+        self.valobj = valobj\n+        self.head = int(valobj[\"head\"])\n+        self.tail = int(valobj[\"tail\"])\n+        self.cap = int(valobj[\"buf\"][\"cap\"])\n+        self.data_ptr = unwrap_unique_or_non_null(valobj[\"buf\"][\"ptr\"])\n+        if self.head >= self.tail:\n+            self.size = self.head - self.tail\n+        else:\n+            self.size = self.cap + self.head - self.tail\n+\n+    def to_string(self):\n+        return \"VecDeque(size={})\".format(self.size)\n+\n+    def children(self):\n+        for index in xrange(0, self.size):\n+            value = (self.data_ptr + ((self.tail + index) % self.cap)).dereference()\n+            yield \"[{}]\".format(index), value\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"array\"\n+\n+\n+class StdRcProvider:\n+    def __init__(self, valobj, is_atomic=False):\n+        self.valobj = valobj\n+        self.is_atomic = is_atomic\n+        self.ptr = unwrap_unique_or_non_null(valobj[\"ptr\"])\n+        self.value = self.ptr[\"data\" if is_atomic else \"value\"]\n+        self.strong = self.ptr[\"strong\"][\"v\" if is_atomic else \"value\"][\"value\"]\n+        self.weak = self.ptr[\"weak\"][\"v\" if is_atomic else \"value\"][\"value\"] - 1\n+\n+    def to_string(self):\n+        if self.is_atomic:\n+            return \"Arc(strong={}, weak={})\".format(int(self.strong), int(self.weak))\n+        else:\n+            return \"Rc(strong={}, weak={})\".format(int(self.strong), int(self.weak))\n+\n+    def children(self):\n+        yield \"value\", self.value\n+        yield \"strong\", self.strong\n+        yield \"weak\", self.weak\n+\n+\n+class StdCellProvider:\n+    def __init__(self, valobj):\n+        self.value = valobj[\"value\"][\"value\"]\n+\n+    def to_string(self):\n+        return \"Cell\"\n+\n+    def children(self):\n+        yield \"value\", self.value\n+\n+\n+class StdRefProvider:\n+    def __init__(self, valobj):\n+        self.value = valobj[\"value\"].dereference()\n+        self.borrow = valobj[\"borrow\"][\"borrow\"][\"value\"][\"value\"]\n+\n+    def to_string(self):\n+        borrow = int(self.borrow)\n+        if borrow >= 0:\n+            return \"Ref(borrow={})\".format(borrow)\n+        else:\n+            return \"Ref(borrow_mut={})\".format(-borrow)\n+\n+    def children(self):\n+        yield \"*value\", self.value\n+        yield \"borrow\", self.borrow\n+\n+\n+class StdRefCellProvider:\n+    def __init__(self, valobj):\n+        self.value = valobj[\"value\"][\"value\"]\n+        self.borrow = valobj[\"borrow\"][\"value\"][\"value\"]\n+\n+    def to_string(self):\n+        borrow = int(self.borrow)\n+        if borrow >= 0:\n+            return \"RefCell(borrow={})\".format(borrow)\n+        else:\n+            return \"RefCell(borrow_mut={})\".format(-borrow)\n+\n+    def children(self):\n+        yield \"value\", self.value\n+        yield \"borrow\", self.borrow\n+\n+\n+# Yield each key (and optionally value) from a BoxedNode.\n+def children_of_node(boxed_node, height, want_values):\n+    def cast_to_internal(node):\n+        internal_type_name = str(node.type.target()).replace(\"LeafNode\", \"InternalNode\", 1)\n+        internal_type = lookup_type(internal_type_name)\n+        return node.cast(internal_type.pointer())\n+\n+    node_ptr = unwrap_unique_or_non_null(boxed_node[\"ptr\"])\n+    node_ptr = cast_to_internal(node_ptr) if height > 0 else node_ptr\n+    leaf = node_ptr[\"data\"] if height > 0 else node_ptr.dereference()\n+    keys = leaf[\"keys\"]\n+    values = leaf[\"vals\"]\n+    length = int(leaf[\"len\"])\n+\n+    for i in xrange(0, length + 1):\n+        if height > 0:\n+            child_ptr = node_ptr[\"edges\"][i][\"value\"][\"value\"]\n+            for child in children_of_node(child_ptr, height - 1, want_values):\n+                yield child\n+        if i < length:\n+            if want_values:\n+                yield keys[i][\"value\"][\"value\"], values[i][\"value\"][\"value\"]\n+            else:\n+                yield keys[i][\"value\"][\"value\"]\n+\n+\n+class StdBTreeSetProvider:\n+    def __init__(self, valobj):\n+        self.valobj = valobj\n+\n+    def to_string(self):\n+        return \"BTreeSet(size={})\".format(self.valobj[\"map\"][\"length\"])\n+\n+    def children(self):\n+        inner_map = self.valobj[\"map\"]\n+        if inner_map[\"length\"] > 0:\n+            root = inner_map[\"root\"]\n+            if \"core::option::Option<\" in root.type.name:\n+                type_name = str(root.type.name).replace(\"core::option::Option<\", \"\", 1)[:-1]\n+                root = root.cast(gdb.lookup_type(type_name))\n+\n+            node_ptr = root[\"node\"]\n+            for i, child in enumerate(children_of_node(node_ptr, root[\"height\"], False)):\n+                yield \"[{}]\".format(i), child\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"array\"\n+\n+\n+class StdBTreeMapProvider:\n+    def __init__(self, valobj):\n+        self.valobj = valobj\n+\n+    def to_string(self):\n+        return \"BTreeMap(size={})\".format(self.valobj[\"length\"])\n+\n+    def children(self):\n+        if self.valobj[\"length\"] > 0:\n+            root = self.valobj[\"root\"]\n+            if \"core::option::Option<\" in root.type.name:\n+                type_name = str(root.type.name).replace(\"core::option::Option<\", \"\", 1)[:-1]\n+                root = root.cast(gdb.lookup_type(type_name))\n+\n+            node_ptr = root[\"node\"]\n+            for i, child in enumerate(children_of_node(node_ptr, root[\"height\"], True)):\n+                yield \"key{}\".format(i), child[0]\n+                yield \"val{}\".format(i), child[1]\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"map\"\n+\n+\n+# BACKCOMPAT: rust 1.35\n+class StdOldHashMapProvider:\n+    def __init__(self, valobj, show_values=True):\n+        self.valobj = valobj\n+        self.show_values = show_values\n+\n+        self.table = self.valobj[\"table\"]\n+        self.size = int(self.table[\"size\"])\n+        self.hashes = self.table[\"hashes\"]\n+        self.hash_uint_type = self.hashes.type\n+        self.hash_uint_size = self.hashes.type.sizeof\n+        self.modulo = 2 ** self.hash_uint_size\n+        self.data_ptr = self.hashes[ZERO_FIELD][\"pointer\"]\n+\n+        self.capacity_mask = int(self.table[\"capacity_mask\"])\n+        self.capacity = (self.capacity_mask + 1) % self.modulo\n+\n+        marker = self.table[\"marker\"].type\n+        self.pair_type = marker.template_argument(0)\n+        self.pair_type_size = self.pair_type.sizeof\n+\n+        self.valid_indices = []\n+        for idx in range(self.capacity):\n+            data_ptr = self.data_ptr.cast(self.hash_uint_type.pointer())\n+            address = data_ptr + idx\n+            hash_uint = address.dereference()\n+            hash_ptr = hash_uint[ZERO_FIELD][\"pointer\"]\n+            if int(hash_ptr) != 0:\n+                self.valid_indices.append(idx)\n+\n+    def to_string(self):\n+        if self.show_values:\n+            return \"HashMap(size={})\".format(self.size)\n+        else:\n+            return \"HashSet(size={})\".format(self.size)\n+\n+    def children(self):\n+        start = int(self.data_ptr) & ~1\n+\n+        hashes = self.hash_uint_size * self.capacity\n+        align = self.pair_type_size\n+        len_rounded_up = (((((hashes + align) % self.modulo - 1) % self.modulo) & ~(\n+                (align - 1) % self.modulo)) % self.modulo - hashes) % self.modulo\n+\n+        pairs_offset = hashes + len_rounded_up\n+        pairs_start = gdb.Value(start + pairs_offset).cast(self.pair_type.pointer())\n+\n+        for index in range(self.size):\n+            table_index = self.valid_indices[index]\n+            idx = table_index & self.capacity_mask\n+            element = (pairs_start + idx).dereference()\n+            if self.show_values:\n+                yield \"key{}\".format(index), element[ZERO_FIELD]\n+                yield \"val{}\".format(index), element[FIRST_FIELD]\n+            else:\n+                yield \"[{}]\".format(index), element[ZERO_FIELD]\n+\n+    def display_hint(self):\n+        return \"map\" if self.show_values else \"array\"\n+\n+\n+class StdHashMapProvider:\n+    def __init__(self, valobj, show_values=True):\n+        self.valobj = valobj\n+        self.show_values = show_values\n+\n+        table = self.valobj[\"base\"][\"table\"]\n+        capacity = int(table[\"bucket_mask\"]) + 1\n+        ctrl = table[\"ctrl\"][\"pointer\"]\n+\n+        self.size = int(table[\"items\"])\n+        self.data_ptr = table[\"data\"][\"pointer\"]\n+        self.pair_type = self.data_ptr.dereference().type\n+\n+        self.valid_indices = []\n+        for idx in range(capacity):\n+            address = ctrl + idx\n+            value = address.dereference()\n+            is_presented = value & 128 == 0\n+            if is_presented:\n+                self.valid_indices.append(idx)\n+\n+    def to_string(self):\n+        if self.show_values:\n+            return \"HashMap(size={})\".format(self.size)\n+        else:\n+            return \"HashSet(size={})\".format(self.size)\n+\n+    def children(self):\n+        pairs_start = self.data_ptr\n+\n+        for index in range(self.size):\n+            idx = self.valid_indices[index]\n+            element = (pairs_start + idx).dereference()\n+            if self.show_values:\n+                yield \"key{}\".format(index), element[ZERO_FIELD]\n+                yield \"val{}\".format(index), element[FIRST_FIELD]\n+            else:\n+                yield \"[{}]\".format(index), element[ZERO_FIELD]\n+\n+    def display_hint(self):\n+        return \"map\" if self.show_values else \"array\""}, {"sha": "d580329cb504ed9c6d40ddf36e486e94f9df5670", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "removed", "additions": 0, "deletions": 466, "changes": 466, "blob_url": "https://github.com/rust-lang/rust/blob/ff4a2533a0720f9cdd86e02eafa3725f07aa7752/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/ff4a2533a0720f9cdd86e02eafa3725f07aa7752/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "patch": "@@ -1,466 +0,0 @@\n-import gdb\n-import re\n-import sys\n-import debugger_pretty_printers_common as rustpp\n-\n-# We want a version of `range` which doesn't allocate an intermediate list,\n-# specifically it should use a lazy iterator. In Python 2 this was `xrange`, but\n-# if we're running with Python 3 then we need to use `range` instead.\n-if sys.version_info[0] >= 3:\n-    xrange = range\n-\n-rust_enabled = 'set language rust' in gdb.execute('complete set language ru', to_string=True)\n-\n-# The btree pretty-printers fail in a confusing way unless\n-# https://sourceware.org/bugzilla/show_bug.cgi?id=21763 is fixed.\n-# This fix went in 8.1, so check for that.\n-# See https://github.com/rust-lang/rust/issues/56730\n-gdb_81 = False\n-_match = re.search('([0-9]+)\\\\.([0-9]+)', gdb.VERSION)\n-if _match:\n-    if int(_match.group(1)) > 8 or (int(_match.group(1)) == 8 and int(_match.group(2)) >= 1):\n-        gdb_81 = True\n-\n-# ===============================================================================\n-# GDB Pretty Printing Module for Rust\n-# ===============================================================================\n-\n-\n-class GdbType(rustpp.Type):\n-\n-    def __init__(self, ty):\n-        super(GdbType, self).__init__()\n-        self.ty = ty\n-        self.fields = None\n-\n-    def get_unqualified_type_name(self):\n-        tag = self.ty.tag\n-\n-        if tag is None:\n-            return tag\n-\n-        return rustpp.extract_type_name(tag).replace(\"&'static \", \"&\")\n-\n-    def get_dwarf_type_kind(self):\n-        if self.ty.code == gdb.TYPE_CODE_STRUCT:\n-            return rustpp.DWARF_TYPE_CODE_STRUCT\n-\n-        if self.ty.code == gdb.TYPE_CODE_UNION:\n-            return rustpp.DWARF_TYPE_CODE_UNION\n-\n-        if self.ty.code == gdb.TYPE_CODE_PTR:\n-            return rustpp.DWARF_TYPE_CODE_PTR\n-\n-        if self.ty.code == gdb.TYPE_CODE_ENUM:\n-            return rustpp.DWARF_TYPE_CODE_ENUM\n-\n-    def get_fields(self):\n-        assert ((self.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_STRUCT) or\n-                (self.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_UNION))\n-        if self.fields is None:\n-            self.fields = list(self.ty.fields())\n-        return self.fields\n-\n-    def get_wrapped_value(self):\n-        return self.ty\n-\n-\n-class GdbValue(rustpp.Value):\n-    def __init__(self, gdb_val):\n-        super(GdbValue, self).__init__(GdbType(gdb_val.type))\n-        self.gdb_val = gdb_val\n-        self.children = {}\n-\n-    def get_child_at_index(self, index):\n-        child = self.children.get(index)\n-        if child is None:\n-            gdb_field = get_field_at_index(self.gdb_val, index)\n-            child = GdbValue(self.gdb_val[gdb_field])\n-            self.children[index] = child\n-        return child\n-\n-    def as_integer(self):\n-        if self.gdb_val.type.code == gdb.TYPE_CODE_PTR:\n-            as_str = rustpp.compat_str(self.gdb_val).split()[0]\n-            return int(as_str, 0)\n-        return int(self.gdb_val)\n-\n-    def get_wrapped_value(self):\n-        return self.gdb_val\n-\n-\n-def register_printers(objfile):\n-    \"\"\"Registers Rust pretty printers for the given objfile\"\"\"\n-    objfile.pretty_printers.append(rust_pretty_printer_lookup_function)\n-\n-\n-def rust_pretty_printer_lookup_function(gdb_val):\n-    \"\"\"\n-    Returns the correct Rust pretty printer for the given value\n-    if there is one\n-    \"\"\"\n-\n-    val = GdbValue(gdb_val)\n-    type_kind = val.type.get_type_kind()\n-\n-    if type_kind == rustpp.TYPE_KIND_SLICE:\n-        return RustSlicePrinter(val)\n-\n-    if type_kind == rustpp.TYPE_KIND_STD_VEC:\n-        return RustStdVecPrinter(val)\n-\n-    if type_kind == rustpp.TYPE_KIND_STD_VECDEQUE:\n-        return RustStdVecDequePrinter(val)\n-\n-    if type_kind == rustpp.TYPE_KIND_STD_BTREESET and gdb_81:\n-        return RustStdBTreeSetPrinter(val)\n-\n-    if type_kind == rustpp.TYPE_KIND_STD_BTREEMAP and gdb_81:\n-        return RustStdBTreeMapPrinter(val)\n-\n-    if type_kind == rustpp.TYPE_KIND_STD_STRING:\n-        return RustStdStringPrinter(val)\n-\n-    if type_kind == rustpp.TYPE_KIND_OS_STRING:\n-        return RustOsStringPrinter(val)\n-\n-    # Checks after this point should only be for \"compiler\" types --\n-    # things that gdb's Rust language support knows about.\n-    if rust_enabled:\n-        return None\n-\n-    if type_kind == rustpp.TYPE_KIND_EMPTY:\n-        return RustEmptyPrinter(val)\n-\n-    if type_kind == rustpp.TYPE_KIND_REGULAR_STRUCT:\n-        return RustStructPrinter(val,\n-                                 omit_first_field=False,\n-                                 omit_type_name=False,\n-                                 is_tuple_like=False)\n-\n-    if type_kind == rustpp.TYPE_KIND_STRUCT_VARIANT:\n-        return RustStructPrinter(val,\n-                                 omit_first_field=True,\n-                                 omit_type_name=False,\n-                                 is_tuple_like=False)\n-\n-    if type_kind == rustpp.TYPE_KIND_STR_SLICE:\n-        return RustStringSlicePrinter(val)\n-\n-    if type_kind == rustpp.TYPE_KIND_TUPLE:\n-        return RustStructPrinter(val,\n-                                 omit_first_field=False,\n-                                 omit_type_name=True,\n-                                 is_tuple_like=True)\n-\n-    if type_kind == rustpp.TYPE_KIND_TUPLE_STRUCT:\n-        return RustStructPrinter(val,\n-                                 omit_first_field=False,\n-                                 omit_type_name=False,\n-                                 is_tuple_like=True)\n-\n-    if type_kind == rustpp.TYPE_KIND_CSTYLE_VARIANT:\n-        return RustCStyleVariantPrinter(val.get_child_at_index(0))\n-\n-    if type_kind == rustpp.TYPE_KIND_TUPLE_VARIANT:\n-        return RustStructPrinter(val,\n-                                 omit_first_field=True,\n-                                 omit_type_name=False,\n-                                 is_tuple_like=True)\n-\n-    if type_kind == rustpp.TYPE_KIND_SINGLETON_ENUM:\n-        variant = get_field_at_index(gdb_val, 0)\n-        return rust_pretty_printer_lookup_function(gdb_val[variant])\n-\n-    if type_kind == rustpp.TYPE_KIND_REGULAR_ENUM:\n-        # This is a regular enum, extract the discriminant\n-        discriminant_val = rustpp.get_discriminant_value_as_integer(val)\n-        variant = get_field_at_index(gdb_val, discriminant_val)\n-        return rust_pretty_printer_lookup_function(gdb_val[variant])\n-\n-    if type_kind == rustpp.TYPE_KIND_COMPRESSED_ENUM:\n-        encoded_enum_info = rustpp.EncodedEnumInfo(val)\n-        if encoded_enum_info.is_null_variant():\n-            return IdentityPrinter(encoded_enum_info.get_null_variant_name())\n-\n-        non_null_val = encoded_enum_info.get_non_null_variant_val()\n-        return rust_pretty_printer_lookup_function(non_null_val.get_wrapped_value())\n-\n-    # No pretty printer has been found\n-    return None\n-\n-\n-# =------------------------------------------------------------------------------\n-# Pretty Printer Classes\n-# =------------------------------------------------------------------------------\n-class RustEmptyPrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    def to_string(self):\n-        return self.__val.type.get_unqualified_type_name()\n-\n-\n-class RustStructPrinter(object):\n-    def __init__(self, val, omit_first_field, omit_type_name, is_tuple_like):\n-        self.__val = val\n-        self.__omit_first_field = omit_first_field\n-        self.__omit_type_name = omit_type_name\n-        self.__is_tuple_like = is_tuple_like\n-\n-    def to_string(self):\n-        if self.__omit_type_name:\n-            return None\n-        return self.__val.type.get_unqualified_type_name()\n-\n-    def children(self):\n-        cs = []\n-        wrapped_value = self.__val.get_wrapped_value()\n-\n-        for number, field in enumerate(self.__val.type.get_fields()):\n-            field_value = wrapped_value[field.name]\n-            if self.__is_tuple_like:\n-                cs.append((str(number), field_value))\n-            else:\n-                cs.append((field.name, field_value))\n-\n-        if self.__omit_first_field:\n-            cs = cs[1:]\n-\n-        return cs\n-\n-    def display_hint(self):\n-        if self.__is_tuple_like:\n-            return \"array\"\n-        else:\n-            return \"\"\n-\n-\n-class RustSlicePrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    @staticmethod\n-    def display_hint():\n-        return \"array\"\n-\n-    def to_string(self):\n-        (length, data_ptr) = rustpp.extract_length_and_ptr_from_slice(self.__val)\n-        return (self.__val.type.get_unqualified_type_name() +\n-                (\"(len: %i)\" % length))\n-\n-    def children(self):\n-        (length, data_ptr) = rustpp.extract_length_and_ptr_from_slice(self.__val)\n-        assert data_ptr.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_PTR\n-        raw_ptr = data_ptr.get_wrapped_value()\n-\n-        for index in xrange(0, length):\n-            yield (str(index), (raw_ptr + index).dereference())\n-\n-\n-class RustStringSlicePrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    def to_string(self):\n-        (length, data_ptr) = rustpp.extract_length_and_ptr_from_slice(self.__val)\n-        raw_ptr = data_ptr.get_wrapped_value()\n-        return raw_ptr.lazy_string(encoding=\"utf-8\", length=length)\n-\n-    def display_hint(self):\n-        return \"string\"\n-\n-\n-class RustStdVecPrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    @staticmethod\n-    def display_hint():\n-        return \"array\"\n-\n-    def to_string(self):\n-        (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(self.__val)\n-        return (self.__val.type.get_unqualified_type_name() +\n-                (\"(len: %i, cap: %i)\" % (length, cap)))\n-\n-    def children(self):\n-        saw_inaccessible = False\n-        (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(self.__val)\n-        gdb_ptr = data_ptr.get_wrapped_value()\n-        for index in xrange(0, length):\n-            if saw_inaccessible:\n-                return\n-            try:\n-                # rust-lang/rust#64343: passing deref expr to `str` allows\n-                # catching exception on garbage pointer\n-                str((gdb_ptr + index).dereference())\n-                yield (str(index), (gdb_ptr + index).dereference())\n-            except RuntimeError:\n-                saw_inaccessible = True\n-                yield (str(index), \"inaccessible\")\n-\n-\n-class RustStdVecDequePrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    @staticmethod\n-    def display_hint():\n-        return \"array\"\n-\n-    def to_string(self):\n-        (tail, head, data_ptr, cap) = \\\n-            rustpp.extract_tail_head_ptr_and_cap_from_std_vecdeque(self.__val)\n-        if head >= tail:\n-            size = head - tail\n-        else:\n-            size = cap + head - tail\n-        return (self.__val.type.get_unqualified_type_name() +\n-                (\"(len: %i, cap: %i)\" % (size, cap)))\n-\n-    def children(self):\n-        (tail, head, data_ptr, cap) = \\\n-            rustpp.extract_tail_head_ptr_and_cap_from_std_vecdeque(self.__val)\n-        gdb_ptr = data_ptr.get_wrapped_value()\n-        if head >= tail:\n-            size = head - tail\n-        else:\n-            size = cap + head - tail\n-        for index in xrange(0, size):\n-            yield (str(index), (gdb_ptr + ((tail + index) % cap)).dereference())\n-\n-\n-# Yield each key (and optionally value) from a BoxedNode.\n-def children_of_node(boxed_node, height, want_values):\n-    node_ptr = boxed_node['ptr']['pointer']\n-    if height > 0:\n-        type_name = str(node_ptr.type.target()).replace('LeafNode', 'InternalNode', 1)\n-        node_type = gdb.lookup_type(type_name)\n-        node_ptr = node_ptr.cast(node_type.pointer())\n-        leaf = node_ptr['data']\n-    else:\n-        leaf = node_ptr.dereference()\n-    keys = leaf['keys']\n-    if want_values:\n-        values = leaf['vals']\n-    length = int(leaf['len'])\n-    for i in xrange(0, length + 1):\n-        if height > 0:\n-            child_ptr = node_ptr['edges'][i]['value']['value']\n-            for child in children_of_node(child_ptr, height - 1, want_values):\n-                yield child\n-        if i < length:\n-            if want_values:\n-                yield (keys[i]['value']['value'], values[i]['value']['value'])\n-            else:\n-                yield keys[i]['value']['value']\n-\n-\n-class RustStdBTreeSetPrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    @staticmethod\n-    def display_hint():\n-        return \"array\"\n-\n-    def to_string(self):\n-        return (self.__val.type.get_unqualified_type_name() +\n-                (\"(len: %i)\" % self.__val.get_wrapped_value()['map']['length']))\n-\n-    def children(self):\n-        prev_idx = None\n-        innermap = GdbValue(self.__val.get_wrapped_value()['map'])\n-        if innermap.get_wrapped_value()['length'] > 0:\n-            root = GdbValue(innermap.get_wrapped_value()['root'])\n-            type_name = str(root.type.ty.name).replace('core::option::Option<', '', 1)[:-1]\n-            root = root.get_wrapped_value().cast(gdb.lookup_type(type_name))\n-            node_ptr = root['node']\n-            i = 0\n-            for child in children_of_node(node_ptr, root['height'], False):\n-                yield (str(i), child)\n-                i = i + 1\n-\n-\n-class RustStdBTreeMapPrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    @staticmethod\n-    def display_hint():\n-        return \"map\"\n-\n-    def to_string(self):\n-        return (self.__val.type.get_unqualified_type_name() +\n-                (\"(len: %i)\" % self.__val.get_wrapped_value()['length']))\n-\n-    def children(self):\n-        if self.__val.get_wrapped_value()['length'] > 0:\n-            root = GdbValue(self.__val.get_wrapped_value()['root'])\n-            type_name = str(root.type.ty.name).replace('core::option::Option<', '', 1)[:-1]\n-            root = root.get_wrapped_value().cast(gdb.lookup_type(type_name))\n-            node_ptr = root['node']\n-            i = 0\n-            for child in children_of_node(node_ptr, root['height'], True):\n-                yield (str(i), child[0])\n-                yield (str(i), child[1])\n-                i = i + 1\n-\n-\n-class RustStdStringPrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    def to_string(self):\n-        vec = self.__val.get_child_at_index(0)\n-        (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(vec)\n-        return data_ptr.get_wrapped_value().lazy_string(encoding=\"utf-8\",\n-                                                        length=length)\n-\n-    def display_hint(self):\n-        return \"string\"\n-\n-\n-class RustOsStringPrinter(object):\n-    def __init__(self, val):\n-        self.__val = val\n-\n-    def to_string(self):\n-        buf = self.__val.get_child_at_index(0)\n-        vec = buf.get_child_at_index(0)\n-        if vec.type.get_unqualified_type_name() == \"Wtf8Buf\":\n-            vec = vec.get_child_at_index(0)\n-\n-        (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(\n-            vec)\n-        return data_ptr.get_wrapped_value().lazy_string(length=length)\n-\n-    def display_hint(self):\n-        return \"string\"\n-\n-\n-class RustCStyleVariantPrinter(object):\n-    def __init__(self, val):\n-        assert val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_ENUM\n-        self.__val = val\n-\n-    def to_string(self):\n-        return str(self.__val.get_wrapped_value())\n-\n-\n-class IdentityPrinter(object):\n-    def __init__(self, string):\n-        self.string = string\n-\n-    def to_string(self):\n-        return self.string\n-\n-\n-def get_field_at_index(gdb_val, index):\n-    i = 0\n-    for field in gdb_val.type.fields():\n-        if i == index:\n-            return field\n-        i += 1\n-    return None"}, {"sha": "f470c62d8992730b88bdfbba617d411f88a5fb19", "filename": "src/etc/lldb_commands", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Flldb_commands", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Flldb_commands", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_commands?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -0,0 +1,19 @@\n+command script import \\\"$RUSTC_SYSROOT/lib/rustlib/etc/lldb_lookup.py\\\"\n+type synthetic add -l lldb_lookup.synthetic_lookup -x \\\".*\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(alloc::([a-z_]+::)+)String$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^&str$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^&\\\\[.+\\\\]$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(std::ffi::([a-z_]+::)+)OsString$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(alloc::([a-z_]+::)+)Vec<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(alloc::([a-z_]+::)+)VecDeque<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(alloc::([a-z_]+::)+)BTreeSet<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(alloc::([a-z_]+::)+)BTreeMap<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(std::collections::([a-z_]+::)+)HashMap<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(std::collections::([a-z_]+::)+)HashSet<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(alloc::([a-z_]+::)+)Rc<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(alloc::([a-z_]+::)+)Arc<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(core::([a-z_]+::)+)Cell<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(core::([a-z_]+::)+)Ref<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(core::([a-z_]+::)+)RefMut<.+>$\\\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \\\"^(core::([a-z_]+::)+)RefCell<.+>$\\\" --category Rust\n+type category enable Rust"}, {"sha": "13420fbaf0a759fa2aa0973b85d01ccc58fb8de9", "filename": "src/etc/lldb_lookup.py", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Flldb_lookup.py", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Flldb_lookup.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_lookup.py?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -0,0 +1,115 @@\n+import lldb\n+\n+from lldb_providers import *\n+from rust_types import RustType, classify_struct, classify_union\n+\n+\n+# BACKCOMPAT: rust 1.35\n+def is_hashbrown_hashmap(hash_map):\n+    return len(hash_map.type.fields) == 1\n+\n+\n+def classify_rust_type(type):\n+    type_class = type.GetTypeClass()\n+    if type_class == lldb.eTypeClassStruct:\n+        return classify_struct(type.name, type.fields)\n+    if type_class == lldb.eTypeClassUnion:\n+        return classify_union(type.fields)\n+\n+    return RustType.OTHER\n+\n+\n+def summary_lookup(valobj, dict):\n+    # type: (SBValue, dict) -> str\n+    \"\"\"Returns the summary provider for the given value\"\"\"\n+    rust_type = classify_rust_type(valobj.GetType())\n+\n+    if rust_type == RustType.STD_STRING:\n+        return StdStringSummaryProvider(valobj, dict)\n+    if rust_type == RustType.STD_OS_STRING:\n+        return StdOsStringSummaryProvider(valobj, dict)\n+    if rust_type == RustType.STD_STR:\n+        return StdStrSummaryProvider(valobj, dict)\n+\n+    if rust_type == RustType.STD_VEC:\n+        return SizeSummaryProvider(valobj, dict)\n+    if rust_type == RustType.STD_VEC_DEQUE:\n+        return SizeSummaryProvider(valobj, dict)\n+    if rust_type == RustType.STD_SLICE:\n+        return SizeSummaryProvider(valobj, dict)\n+\n+    if rust_type == RustType.STD_HASH_MAP:\n+        return SizeSummaryProvider(valobj, dict)\n+    if rust_type == RustType.STD_HASH_SET:\n+        return SizeSummaryProvider(valobj, dict)\n+\n+    if rust_type == RustType.STD_RC:\n+        return StdRcSummaryProvider(valobj, dict)\n+    if rust_type == RustType.STD_ARC:\n+        return StdRcSummaryProvider(valobj, dict)\n+\n+    if rust_type == RustType.STD_REF:\n+        return StdRefSummaryProvider(valobj, dict)\n+    if rust_type == RustType.STD_REF_MUT:\n+        return StdRefSummaryProvider(valobj, dict)\n+    if rust_type == RustType.STD_REF_CELL:\n+        return StdRefSummaryProvider(valobj, dict)\n+\n+    return \"\"\n+\n+\n+def synthetic_lookup(valobj, dict):\n+    # type: (SBValue, dict) -> object\n+    \"\"\"Returns the synthetic provider for the given value\"\"\"\n+    rust_type = classify_rust_type(valobj.GetType())\n+\n+    if rust_type == RustType.STRUCT:\n+        return StructSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.STRUCT_VARIANT:\n+        return StructSyntheticProvider(valobj, dict, is_variant=True)\n+    if rust_type == RustType.TUPLE:\n+        return TupleSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.TUPLE_VARIANT:\n+        return TupleSyntheticProvider(valobj, dict, is_variant=True)\n+    if rust_type == RustType.EMPTY:\n+        return EmptySyntheticProvider(valobj, dict)\n+    if rust_type == RustType.REGULAR_ENUM:\n+        discriminant = valobj.GetChildAtIndex(0).GetChildAtIndex(0).GetValueAsUnsigned()\n+        return synthetic_lookup(valobj.GetChildAtIndex(discriminant), dict)\n+    if rust_type == RustType.SINGLETON_ENUM:\n+        return synthetic_lookup(valobj.GetChildAtIndex(0), dict)\n+\n+    if rust_type == RustType.STD_VEC:\n+        return StdVecSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.STD_VEC_DEQUE:\n+        return StdVecDequeSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.STD_SLICE:\n+        return StdSliceSyntheticProvider(valobj, dict)\n+\n+    if rust_type == RustType.STD_HASH_MAP:\n+        if is_hashbrown_hashmap(valobj):\n+            return StdHashMapSyntheticProvider(valobj, dict)\n+        else:\n+            return StdOldHashMapSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.STD_HASH_SET:\n+        hash_map = valobj.GetChildAtIndex(0)\n+        if is_hashbrown_hashmap(hash_map):\n+            return StdHashMapSyntheticProvider(hash_map, dict, show_values=False)\n+        else:\n+            return StdOldHashMapSyntheticProvider(hash_map, dict, show_values=False)\n+\n+    if rust_type == RustType.STD_RC:\n+        return StdRcSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.STD_ARC:\n+        return StdRcSyntheticProvider(valobj, dict, is_atomic=True)\n+\n+    if rust_type == RustType.STD_CELL:\n+        return StdCellSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.STD_REF:\n+        return StdRefSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.STD_REF_MUT:\n+        return StdRefSyntheticProvider(valobj, dict)\n+    if rust_type == RustType.STD_REF_CELL:\n+        return StdRefSyntheticProvider(valobj, dict, is_cell=True)\n+\n+    return DefaultSynthteticProvider(valobj, dict)"}, {"sha": "3c7817b3a618d6d33c468d1dbfdd0fd07e308253", "filename": "src/etc/lldb_providers.py", "status": "added", "additions": 715, "deletions": 0, "changes": 715, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Flldb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Flldb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_providers.py?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -0,0 +1,715 @@\n+import sys\n+\n+from lldb import SBValue, SBData, SBError, eBasicTypeLong, eBasicTypeUnsignedLong, \\\n+    eBasicTypeUnsignedChar\n+\n+# from lldb.formatters import Logger\n+\n+####################################################################################################\n+# This file contains two kinds of pretty-printers: summary and synthetic.\n+#\n+# Important classes from LLDB module:\n+#   SBValue: the value of a variable, a register, or an expression\n+#   SBType:  the data type; each SBValue has a corresponding SBType\n+#\n+# Summary provider is a function with the type `(SBValue, dict) -> str`.\n+#   The first parameter is the object encapsulating the actual variable being displayed;\n+#   The second parameter is an internal support parameter used by LLDB, and you should not touch it.\n+#\n+# Synthetic children is the way to provide a children-based representation of the object's value.\n+# Synthetic provider is a class that implements the following interface:\n+#\n+#     class SyntheticChildrenProvider:\n+#         def __init__(self, SBValue, dict)\n+#         def num_children(self)\n+#         def get_child_index(self, str)\n+#         def get_child_at_index(self, int)\n+#         def update(self)\n+#         def has_children(self)\n+#         def get_value(self)\n+#\n+#\n+# You can find more information and examples here:\n+#   1. https://lldb.llvm.org/varformats.html\n+#   2. https://lldb.llvm.org/python-reference.html\n+#   3. https://lldb.llvm.org/python_reference/lldb.formatters.cpp.libcxx-pysrc.html\n+#   4. https://github.com/llvm-mirror/lldb/tree/master/examples/summaries/cocoa\n+####################################################################################################\n+\n+PY3 = sys.version_info[0] == 3\n+\n+\n+class ValueBuilder:\n+    def __init__(self, valobj):\n+        # type: (SBValue) -> ValueBuilder\n+        self.valobj = valobj\n+        process = valobj.GetProcess()\n+        self.endianness = process.GetByteOrder()\n+        self.pointer_size = process.GetAddressByteSize()\n+\n+    def from_int(self, name, value):\n+        # type: (str, int) -> SBValue\n+        type = self.valobj.GetType().GetBasicType(eBasicTypeLong)\n+        data = SBData.CreateDataFromSInt64Array(self.endianness, self.pointer_size, [value])\n+        return self.valobj.CreateValueFromData(name, data, type)\n+\n+    def from_uint(self, name, value):\n+        # type: (str, int) -> SBValue\n+        type = self.valobj.GetType().GetBasicType(eBasicTypeUnsignedLong)\n+        data = SBData.CreateDataFromUInt64Array(self.endianness, self.pointer_size, [value])\n+        return self.valobj.CreateValueFromData(name, data, type)\n+\n+\n+def unwrap_unique_or_non_null(unique_or_nonnull):\n+    # BACKCOMPAT: rust 1.32\n+    # https://github.com/rust-lang/rust/commit/7a0911528058e87d22ea305695f4047572c5e067\n+    ptr = unique_or_nonnull.GetChildMemberWithName(\"pointer\")\n+    return ptr if ptr.TypeIsPointerType() else ptr.GetChildAtIndex(0)\n+\n+\n+class DefaultSynthteticProvider:\n+    def __init__(self, valobj, dict):\n+        # type: (SBValue, dict) -> DefaultSynthteticProvider\n+        # logger = Logger.Logger()\n+        # logger >> \"Default synthetic provider for \" + str(valobj.GetName())\n+        self.valobj = valobj\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return self.valobj.GetNumChildren()\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        return self.valobj.GetIndexOfChildWithName(name)\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        return self.valobj.GetChildAtIndex(index)\n+\n+    def update(self):\n+        # type: () -> None\n+        pass\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return self.valobj.MightHaveChildren()\n+\n+\n+class EmptySyntheticProvider:\n+    def __init__(self, valobj, dict):\n+        # type: (SBValue, dict) -> EmptySyntheticProvider\n+        # logger = Logger.Logger()\n+        # logger >> \"[EmptySyntheticProvider] for \" + str(valobj.GetName())\n+        self.valobj = valobj\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return 0\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        return None\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        return None\n+\n+    def update(self):\n+        # type: () -> None\n+        pass\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return False\n+\n+\n+def SizeSummaryProvider(valobj, dict):\n+    # type: (SBValue, dict) -> str\n+    return 'size=' + str(valobj.GetNumChildren())\n+\n+\n+def vec_to_string(vec):\n+    length = vec.GetNumChildren()\n+    chars = [vec.GetChildAtIndex(i).GetValueAsUnsigned() for i in range(length)]\n+    return bytes(chars).decode(errors='replace') if PY3 else \"\".join(chr(char) for char in chars)\n+\n+\n+def StdStringSummaryProvider(valobj, dict):\n+    # type: (SBValue, dict) -> str\n+    # logger = Logger.Logger()\n+    # logger >> \"[StdStringSummaryProvider] for \" + str(valobj.GetName())\n+    vec = valobj.GetChildAtIndex(0)\n+    return '\"%s\"' % vec_to_string(vec)\n+\n+\n+def StdOsStringSummaryProvider(valobj, dict):\n+    # type: (SBValue, dict) -> str\n+    # logger = Logger.Logger()\n+    # logger >> \"[StdOsStringSummaryProvider] for \" + str(valobj.GetName())\n+    buf = valobj.GetChildAtIndex(0).GetChildAtIndex(0)\n+    is_windows = \"Wtf8Buf\" in buf.type.name\n+    vec = buf.GetChildAtIndex(0) if is_windows else buf\n+    return '\"%s\"' % vec_to_string(vec)\n+\n+\n+def StdStrSummaryProvider(valobj, dict):\n+    # type: (SBValue, dict) -> str\n+    # logger = Logger.Logger()\n+    # logger >> \"[StdStrSummaryProvider] for \" + str(valobj.GetName())\n+\n+    length = valobj.GetChildMemberWithName(\"length\").GetValueAsUnsigned()\n+    if length == 0:\n+        return '\"\"'\n+\n+    data_ptr = valobj.GetChildMemberWithName(\"data_ptr\")\n+\n+    start = data_ptr.GetValueAsUnsigned()\n+    error = SBError()\n+    process = data_ptr.GetProcess()\n+    data = process.ReadMemory(start, length, error)\n+    data = data.decode(encoding='UTF-8') if PY3 else data\n+    return '\"%s\"' % data\n+\n+\n+class StructSyntheticProvider:\n+    \"\"\"Pretty-printer for structs and struct enum variants\"\"\"\n+\n+    def __init__(self, valobj, dict, is_variant=False):\n+        # type: (SBValue, dict, bool) -> StructSyntheticProvider\n+        # logger = Logger.Logger()\n+        self.valobj = valobj\n+        self.is_variant = is_variant\n+        self.type = valobj.GetType()\n+        self.fields = {}\n+\n+        if is_variant:\n+            self.fields_count = self.type.GetNumberOfFields() - 1\n+            real_fields = self.type.fields[1:]\n+        else:\n+            self.fields_count = self.type.GetNumberOfFields()\n+            real_fields = self.type.fields\n+\n+        for number, field in enumerate(real_fields):\n+            self.fields[field.name] = number\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return self.fields_count\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        return self.fields.get(name, -1)\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        if self.is_variant:\n+            field = self.type.GetFieldAtIndex(index + 1)\n+        else:\n+            field = self.type.GetFieldAtIndex(index)\n+        return self.valobj.GetChildMemberWithName(field.name)\n+\n+    def update(self):\n+        # type: () -> None\n+        pass\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+class TupleSyntheticProvider:\n+    \"\"\"Pretty-printer for tuples and tuple enum variants\"\"\"\n+\n+    def __init__(self, valobj, dict, is_variant=False):\n+        # type: (SBValue, dict, bool) -> TupleSyntheticProvider\n+        # logger = Logger.Logger()\n+        self.valobj = valobj\n+        self.is_variant = is_variant\n+        self.type = valobj.GetType()\n+\n+        if is_variant:\n+            self.size = self.type.GetNumberOfFields() - 1\n+        else:\n+            self.size = self.type.GetNumberOfFields()\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return self.size\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        if name.isdigit():\n+            return int(name)\n+        else:\n+            return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        if self.is_variant:\n+            field = self.type.GetFieldAtIndex(index + 1)\n+        else:\n+            field = self.type.GetFieldAtIndex(index)\n+        element = self.valobj.GetChildMemberWithName(field.name)\n+        return self.valobj.CreateValueFromData(str(index), element.GetData(), element.GetType())\n+\n+    def update(self):\n+        # type: () -> None\n+        pass\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+class StdVecSyntheticProvider:\n+    \"\"\"Pretty-printer for alloc::vec::Vec<T>\n+\n+    struct Vec<T> { buf: RawVec<T>, len: usize }\n+    struct RawVec<T> { ptr: Unique<T>, cap: usize, ... }\n+    rust 1.31.1: struct Unique<T: ?Sized> { pointer: NonZero<*const T>, ... }\n+    rust 1.33.0: struct Unique<T: ?Sized> { pointer: *const T, ... }\n+    struct NonZero<T>(T)\n+    \"\"\"\n+\n+    def __init__(self, valobj, dict):\n+        # type: (SBValue, dict) -> StdVecSyntheticProvider\n+        # logger = Logger.Logger()\n+        # logger >> \"[StdVecSyntheticProvider] for \" + str(valobj.GetName())\n+        self.valobj = valobj\n+        self.update()\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return self.length\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        index = name.lstrip('[').rstrip(']')\n+        if index.isdigit():\n+            return int(index)\n+        else:\n+            return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        start = self.data_ptr.GetValueAsUnsigned()\n+        address = start + index * self.element_type_size\n+        element = self.data_ptr.CreateValueFromAddress(\"[%s]\" % index, address, self.element_type)\n+        return element\n+\n+    def update(self):\n+        # type: () -> None\n+        self.length = self.valobj.GetChildMemberWithName(\"len\").GetValueAsUnsigned()\n+        self.buf = self.valobj.GetChildMemberWithName(\"buf\")\n+\n+        self.data_ptr = unwrap_unique_or_non_null(self.buf.GetChildMemberWithName(\"ptr\"))\n+\n+        self.element_type = self.data_ptr.GetType().GetPointeeType()\n+        self.element_type_size = self.element_type.GetByteSize()\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+class StdSliceSyntheticProvider:\n+    def __init__(self, valobj, dict):\n+        self.valobj = valobj\n+        self.update()\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return self.length\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        index = name.lstrip('[').rstrip(']')\n+        if index.isdigit():\n+            return int(index)\n+        else:\n+            return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        start = self.data_ptr.GetValueAsUnsigned()\n+        address = start + index * self.element_type_size\n+        element = self.data_ptr.CreateValueFromAddress(\"[%s]\" % index, address, self.element_type)\n+        return element\n+\n+    def update(self):\n+        # type: () -> None\n+        self.length = self.valobj.GetChildMemberWithName(\"length\").GetValueAsUnsigned()\n+        self.data_ptr = self.valobj.GetChildMemberWithName(\"data_ptr\")\n+\n+        self.element_type = self.data_ptr.GetType().GetPointeeType()\n+        self.element_type_size = self.element_type.GetByteSize()\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+class StdVecDequeSyntheticProvider:\n+    \"\"\"Pretty-printer for alloc::collections::vec_deque::VecDeque<T>\n+\n+    struct VecDeque<T> { tail: usize, head: usize, buf: RawVec<T> }\n+    \"\"\"\n+\n+    def __init__(self, valobj, dict):\n+        # type: (SBValue, dict) -> StdVecDequeSyntheticProvider\n+        # logger = Logger.Logger()\n+        # logger >> \"[StdVecDequeSyntheticProvider] for \" + str(valobj.GetName())\n+        self.valobj = valobj\n+        self.update()\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return self.size\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        index = name.lstrip('[').rstrip(']')\n+        if index.isdigit() and self.tail <= index and (self.tail + index) % self.cap < self.head:\n+            return int(index)\n+        else:\n+            return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        start = self.data_ptr.GetValueAsUnsigned()\n+        address = start + ((index + self.tail) % self.cap) * self.element_type_size\n+        element = self.data_ptr.CreateValueFromAddress(\"[%s]\" % index, address, self.element_type)\n+        return element\n+\n+    def update(self):\n+        # type: () -> None\n+        self.head = self.valobj.GetChildMemberWithName(\"head\").GetValueAsUnsigned()\n+        self.tail = self.valobj.GetChildMemberWithName(\"tail\").GetValueAsUnsigned()\n+        self.buf = self.valobj.GetChildMemberWithName(\"buf\")\n+        self.cap = self.buf.GetChildMemberWithName(\"cap\").GetValueAsUnsigned()\n+        if self.head >= self.tail:\n+            self.size = self.head - self.tail\n+        else:\n+            self.size = self.cap + self.head - self.tail\n+\n+        self.data_ptr = unwrap_unique_or_non_null(self.buf.GetChildMemberWithName(\"ptr\"))\n+\n+        self.element_type = self.data_ptr.GetType().GetPointeeType()\n+        self.element_type_size = self.element_type.GetByteSize()\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+# BACKCOMPAT: rust 1.35\n+class StdOldHashMapSyntheticProvider:\n+    \"\"\"Pretty-printer for std::collections::hash::map::HashMap<K, V, S>\n+\n+    struct HashMap<K, V, S> {..., table: RawTable<K, V>, ... }\n+    struct RawTable<K, V> { capacity_mask: usize, size: usize, hashes: TaggedHashUintPtr, ... }\n+    \"\"\"\n+\n+    def __init__(self, valobj, dict, show_values=True):\n+        # type: (SBValue, dict, bool) -> StdOldHashMapSyntheticProvider\n+        self.valobj = valobj\n+        self.show_values = show_values\n+        self.update()\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return self.size\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        index = name.lstrip('[').rstrip(']')\n+        if index.isdigit():\n+            return int(index)\n+        else:\n+            return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        # logger = Logger.Logger()\n+        start = self.data_ptr.GetValueAsUnsigned() & ~1\n+\n+        # See `libstd/collections/hash/table.rs:raw_bucket_at\n+        hashes = self.hash_uint_size * self.capacity\n+        align = self.pair_type_size\n+        # See `libcore/alloc.rs:padding_needed_for`\n+        len_rounded_up = (((((hashes + align) % self.modulo - 1) % self.modulo) & ~(\n+                (align - 1) % self.modulo)) % self.modulo - hashes) % self.modulo\n+        # len_rounded_up = ((hashes + align - 1) & ~(align - 1)) - hashes\n+\n+        pairs_offset = hashes + len_rounded_up\n+        pairs_start = start + pairs_offset\n+\n+        table_index = self.valid_indices[index]\n+        idx = table_index & self.capacity_mask\n+        address = pairs_start + idx * self.pair_type_size\n+        element = self.data_ptr.CreateValueFromAddress(\"[%s]\" % index, address, self.pair_type)\n+        if self.show_values:\n+            return element\n+        else:\n+            key = element.GetChildAtIndex(0)\n+            return self.valobj.CreateValueFromData(\"[%s]\" % index, key.GetData(), key.GetType())\n+\n+    def update(self):\n+        # type: () -> None\n+        # logger = Logger.Logger()\n+\n+        self.table = self.valobj.GetChildMemberWithName(\"table\")  # type: SBValue\n+        self.size = self.table.GetChildMemberWithName(\"size\").GetValueAsUnsigned()\n+        self.hashes = self.table.GetChildMemberWithName(\"hashes\")\n+        self.hash_uint_type = self.hashes.GetType()\n+        self.hash_uint_size = self.hashes.GetType().GetByteSize()\n+        self.modulo = 2 ** self.hash_uint_size\n+        self.data_ptr = self.hashes.GetChildAtIndex(0).GetChildAtIndex(0)\n+\n+        self.capacity_mask = self.table.GetChildMemberWithName(\"capacity_mask\").GetValueAsUnsigned()\n+        self.capacity = (self.capacity_mask + 1) % self.modulo\n+\n+        marker = self.table.GetChildMemberWithName(\"marker\").GetType()  # type: SBType\n+        self.pair_type = marker.template_args[0]\n+        self.pair_type_size = self.pair_type.GetByteSize()\n+\n+        self.valid_indices = []\n+        for idx in range(self.capacity):\n+            address = self.data_ptr.GetValueAsUnsigned() + idx * self.hash_uint_size\n+            hash_uint = self.data_ptr.CreateValueFromAddress(\"[%s]\" % idx, address,\n+                                                             self.hash_uint_type)\n+            hash_ptr = hash_uint.GetChildAtIndex(0).GetChildAtIndex(0)\n+            if hash_ptr.GetValueAsUnsigned() != 0:\n+                self.valid_indices.append(idx)\n+\n+        # logger >> \"Valid indices: {}\".format(str(self.valid_indices))\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+class StdHashMapSyntheticProvider:\n+    \"\"\"Pretty-printer for hashbrown's HashMap\"\"\"\n+\n+    def __init__(self, valobj, dict, show_values=True):\n+        # type: (SBValue, dict, bool) -> StdHashMapSyntheticProvider\n+        self.valobj = valobj\n+        self.show_values = show_values\n+        self.update()\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return self.size\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        index = name.lstrip('[').rstrip(']')\n+        if index.isdigit():\n+            return int(index)\n+        else:\n+            return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        pairs_start = self.data_ptr.GetValueAsUnsigned()\n+        idx = self.valid_indices[index]\n+        address = pairs_start + idx * self.pair_type_size\n+        element = self.data_ptr.CreateValueFromAddress(\"[%s]\" % index, address, self.pair_type)\n+        if self.show_values:\n+            return element\n+        else:\n+            key = element.GetChildAtIndex(0)\n+            return self.valobj.CreateValueFromData(\"[%s]\" % index, key.GetData(), key.GetType())\n+\n+    def update(self):\n+        # type: () -> None\n+        table = self.valobj.GetChildMemberWithName(\"base\").GetChildMemberWithName(\"table\")\n+        capacity = table.GetChildMemberWithName(\"bucket_mask\").GetValueAsUnsigned() + 1\n+        ctrl = table.GetChildMemberWithName(\"ctrl\").GetChildAtIndex(0)\n+\n+        self.size = table.GetChildMemberWithName(\"items\").GetValueAsUnsigned()\n+        self.data_ptr = table.GetChildMemberWithName(\"data\").GetChildAtIndex(0)\n+        self.pair_type = self.data_ptr.Dereference().GetType()\n+        self.pair_type_size = self.pair_type.GetByteSize()\n+\n+        u8_type = self.valobj.GetTarget().GetBasicType(eBasicTypeUnsignedChar)\n+        u8_type_size = self.valobj.GetTarget().GetBasicType(eBasicTypeUnsignedChar).GetByteSize()\n+\n+        self.valid_indices = []\n+        for idx in range(capacity):\n+            address = ctrl.GetValueAsUnsigned() + idx * u8_type_size\n+            value = ctrl.CreateValueFromAddress(\"ctrl[%s]\" % idx, address,\n+                                                u8_type).GetValueAsUnsigned()\n+            is_present = value & 128 == 0\n+            if is_present:\n+                self.valid_indices.append(idx)\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+def StdRcSummaryProvider(valobj, dict):\n+    # type: (SBValue, dict) -> str\n+    strong = valobj.GetChildMemberWithName(\"strong\").GetValueAsUnsigned()\n+    weak = valobj.GetChildMemberWithName(\"weak\").GetValueAsUnsigned()\n+    return \"strong={}, weak={}\".format(strong, weak)\n+\n+\n+class StdRcSyntheticProvider:\n+    \"\"\"Pretty-printer for alloc::rc::Rc<T> and alloc::sync::Arc<T>\n+\n+    struct Rc<T> { ptr: NonNull<RcBox<T>>, ... }\n+    rust 1.31.1: struct NonNull<T> { pointer: NonZero<*const T> }\n+    rust 1.33.0: struct NonNull<T> { pointer: *const T }\n+    struct NonZero<T>(T)\n+    struct RcBox<T> { strong: Cell<usize>, weak: Cell<usize>, value: T }\n+    struct Cell<T> { value: UnsafeCell<T> }\n+    struct UnsafeCell<T> { value: T }\n+\n+    struct Arc<T> { ptr: NonNull<ArcInner<T>>, ... }\n+    struct ArcInner<T> { strong: atomic::AtomicUsize, weak: atomic::AtomicUsize, data: T }\n+    struct AtomicUsize { v: UnsafeCell<usize> }\n+    \"\"\"\n+\n+    def __init__(self, valobj, dict, is_atomic=False):\n+        # type: (SBValue, dict, bool) -> StdRcSyntheticProvider\n+        self.valobj = valobj\n+\n+        self.ptr = unwrap_unique_or_non_null(self.valobj.GetChildMemberWithName(\"ptr\"))\n+\n+        self.value = self.ptr.GetChildMemberWithName(\"data\" if is_atomic else \"value\")\n+\n+        self.strong = self.ptr.GetChildMemberWithName(\"strong\").GetChildAtIndex(\n+            0).GetChildMemberWithName(\"value\")\n+        self.weak = self.ptr.GetChildMemberWithName(\"weak\").GetChildAtIndex(\n+            0).GetChildMemberWithName(\"value\")\n+\n+        self.value_builder = ValueBuilder(valobj)\n+\n+        self.update()\n+\n+    def num_children(self):\n+        # type: () -> int\n+        # Actually there are 3 children, but only the `value` should be shown as a child\n+        return 1\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        if name == \"value\":\n+            return 0\n+        if name == \"strong\":\n+            return 1\n+        if name == \"weak\":\n+            return 2\n+        return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        if index == 0:\n+            return self.value\n+        if index == 1:\n+            return self.value_builder.from_uint(\"strong\", self.strong_count)\n+        if index == 2:\n+            return self.value_builder.from_uint(\"weak\", self.weak_count)\n+\n+        return None\n+\n+    def update(self):\n+        # type: () -> None\n+        self.strong_count = self.strong.GetValueAsUnsigned()\n+        self.weak_count = self.weak.GetValueAsUnsigned() - 1\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+class StdCellSyntheticProvider:\n+    \"\"\"Pretty-printer for std::cell::Cell\"\"\"\n+\n+    def __init__(self, valobj, dict):\n+        # type: (SBValue, dict) -> StdCellSyntheticProvider\n+        self.valobj = valobj\n+        self.value = valobj.GetChildMemberWithName(\"value\").GetChildAtIndex(0)\n+\n+    def num_children(self):\n+        # type: () -> int\n+        return 1\n+\n+    def get_child_index(self, name):\n+        # type: (str) -> int\n+        if name == \"value\":\n+            return 0\n+        return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        if index == 0:\n+            return self.value\n+        return None\n+\n+    def update(self):\n+        # type: () -> None\n+        pass\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True\n+\n+\n+def StdRefSummaryProvider(valobj, dict):\n+    # type: (SBValue, dict) -> str\n+    borrow = valobj.GetChildMemberWithName(\"borrow\").GetValueAsSigned()\n+    return \"borrow={}\".format(borrow) if borrow >= 0 else \"borrow_mut={}\".format(-borrow)\n+\n+\n+class StdRefSyntheticProvider:\n+    \"\"\"Pretty-printer for std::cell::Ref, std::cell::RefMut, and std::cell::RefCell\"\"\"\n+\n+    def __init__(self, valobj, dict, is_cell=False):\n+        # type: (SBValue, dict, bool) -> StdRefSyntheticProvider\n+        self.valobj = valobj\n+\n+        borrow = valobj.GetChildMemberWithName(\"borrow\")\n+        value = valobj.GetChildMemberWithName(\"value\")\n+        if is_cell:\n+            self.borrow = borrow.GetChildMemberWithName(\"value\").GetChildMemberWithName(\"value\")\n+            self.value = value.GetChildMemberWithName(\"value\")\n+        else:\n+            self.borrow = borrow.GetChildMemberWithName(\"borrow\").GetChildMemberWithName(\n+                \"value\").GetChildMemberWithName(\"value\")\n+            self.value = value.Dereference()\n+\n+        self.value_builder = ValueBuilder(valobj)\n+\n+        self.update()\n+\n+    def num_children(self):\n+        # type: () -> int\n+        # Actually there are 2 children, but only the `value` should be shown as a child\n+        return 1\n+\n+    def get_child_index(self, name):\n+        if name == \"value\":\n+            return 0\n+        if name == \"borrow\":\n+            return 1\n+        return -1\n+\n+    def get_child_at_index(self, index):\n+        # type: (int) -> SBValue\n+        if index == 0:\n+            return self.value\n+        if index == 1:\n+            return self.value_builder.from_int(\"borrow\", self.borrow_count)\n+        return None\n+\n+    def update(self):\n+        # type: () -> None\n+        self.borrow_count = self.borrow.GetValueAsSigned()\n+\n+    def has_children(self):\n+        # type: () -> bool\n+        return True"}, {"sha": "0c4021b36fb6f6ac7435ea2f40873a26584b5c69", "filename": "src/etc/lldb_rust_formatters.py", "status": "removed", "additions": 0, "deletions": 305, "changes": 305, "blob_url": "https://github.com/rust-lang/rust/blob/ff4a2533a0720f9cdd86e02eafa3725f07aa7752/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/ff4a2533a0720f9cdd86e02eafa3725f07aa7752/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "patch": "@@ -1,305 +0,0 @@\n-import lldb\n-import debugger_pretty_printers_common as rustpp\n-\n-# ===============================================================================\n-# LLDB Pretty Printing Module for Rust\n-# ===============================================================================\n-\n-\n-class LldbType(rustpp.Type):\n-\n-    def __init__(self, ty):\n-        super(LldbType, self).__init__()\n-        self.ty = ty\n-        self.fields = None\n-\n-    def get_unqualified_type_name(self):\n-        qualified_name = self.ty.GetName()\n-\n-        if qualified_name is None:\n-            return qualified_name\n-\n-        return rustpp.extract_type_name(qualified_name).replace(\"&'static \", \"&\")\n-\n-    def get_dwarf_type_kind(self):\n-        type_class = self.ty.GetTypeClass()\n-\n-        if type_class == lldb.eTypeClassStruct:\n-            return rustpp.DWARF_TYPE_CODE_STRUCT\n-\n-        if type_class == lldb.eTypeClassUnion:\n-            return rustpp.DWARF_TYPE_CODE_UNION\n-\n-        if type_class == lldb.eTypeClassPointer:\n-            return rustpp.DWARF_TYPE_CODE_PTR\n-\n-        if type_class == lldb.eTypeClassArray:\n-            return rustpp.DWARF_TYPE_CODE_ARRAY\n-\n-        if type_class == lldb.eTypeClassEnumeration:\n-            return rustpp.DWARF_TYPE_CODE_ENUM\n-\n-        return None\n-\n-    def get_fields(self):\n-        assert ((self.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_STRUCT) or\n-                (self.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_UNION))\n-        if self.fields is None:\n-            self.fields = list(self.ty.fields)\n-        return self.fields\n-\n-    def get_wrapped_value(self):\n-        return self.ty\n-\n-\n-class LldbValue(rustpp.Value):\n-    def __init__(self, lldb_val):\n-        ty = lldb_val.type\n-        wty = LldbType(ty)\n-        super(LldbValue, self).__init__(wty)\n-        self.lldb_val = lldb_val\n-        self.children = {}\n-\n-    def get_child_at_index(self, index):\n-        child = self.children.get(index)\n-        if child is None:\n-            lldb_field = self.lldb_val.GetChildAtIndex(index)\n-            child = LldbValue(lldb_field)\n-            self.children[index] = child\n-        return child\n-\n-    def as_integer(self):\n-        return self.lldb_val.GetValueAsUnsigned()\n-\n-    def get_wrapped_value(self):\n-        return self.lldb_val\n-\n-\n-def print_val(lldb_val, internal_dict):\n-    val = LldbValue(lldb_val)\n-    type_kind = val.type.get_type_kind()\n-\n-    if (type_kind == rustpp.TYPE_KIND_REGULAR_STRUCT or\n-        type_kind == rustpp.TYPE_KIND_REGULAR_UNION or\n-        type_kind == rustpp.TYPE_KIND_EMPTY):\n-        return print_struct_val(val,\n-                                internal_dict,\n-                                omit_first_field=False,\n-                                omit_type_name=False,\n-                                is_tuple_like=False)\n-\n-    if type_kind == rustpp.TYPE_KIND_STRUCT_VARIANT:\n-        return print_struct_val(val,\n-                                internal_dict,\n-                                omit_first_field=True,\n-                                omit_type_name=False,\n-                                is_tuple_like=False)\n-\n-    if type_kind == rustpp.TYPE_KIND_SLICE:\n-        return print_vec_slice_val(val, internal_dict)\n-\n-    if type_kind == rustpp.TYPE_KIND_STR_SLICE:\n-        return print_str_slice_val(val, internal_dict)\n-\n-    if type_kind == rustpp.TYPE_KIND_STD_VEC:\n-        return print_std_vec_val(val, internal_dict)\n-\n-    if type_kind == rustpp.TYPE_KIND_STD_STRING:\n-        return print_std_string_val(val, internal_dict)\n-\n-    if type_kind == rustpp.TYPE_KIND_TUPLE:\n-        return print_struct_val(val,\n-                                internal_dict,\n-                                omit_first_field=False,\n-                                omit_type_name=True,\n-                                is_tuple_like=True)\n-\n-    if type_kind == rustpp.TYPE_KIND_TUPLE_STRUCT:\n-        return print_struct_val(val,\n-                                internal_dict,\n-                                omit_first_field=False,\n-                                omit_type_name=False,\n-                                is_tuple_like=True)\n-\n-    if type_kind == rustpp.TYPE_KIND_CSTYLE_VARIANT:\n-        return val.type.get_unqualified_type_name()\n-\n-    if type_kind == rustpp.TYPE_KIND_TUPLE_VARIANT:\n-        return print_struct_val(val,\n-                                internal_dict,\n-                                omit_first_field=True,\n-                                omit_type_name=False,\n-                                is_tuple_like=True)\n-\n-    if type_kind == rustpp.TYPE_KIND_SINGLETON_ENUM:\n-        return print_val(lldb_val.GetChildAtIndex(0), internal_dict)\n-\n-    if type_kind == rustpp.TYPE_KIND_PTR:\n-        return print_pointer_val(val, internal_dict)\n-\n-    if type_kind == rustpp.TYPE_KIND_FIXED_SIZE_VEC:\n-        return print_fixed_size_vec_val(val, internal_dict)\n-\n-    if type_kind == rustpp.TYPE_KIND_REGULAR_ENUM:\n-        # This is a regular enum, extract the discriminant\n-        discriminant_val = rustpp.get_discriminant_value_as_integer(val)\n-        return print_val(lldb_val.GetChildAtIndex(discriminant_val), internal_dict)\n-\n-    if type_kind == rustpp.TYPE_KIND_COMPRESSED_ENUM:\n-        encoded_enum_info = rustpp.EncodedEnumInfo(val)\n-        if encoded_enum_info.is_null_variant():\n-            return encoded_enum_info.get_null_variant_name()\n-\n-        non_null_val = encoded_enum_info.get_non_null_variant_val()\n-        return print_val(non_null_val.get_wrapped_value(), internal_dict)\n-\n-    # No pretty printer has been found\n-    return lldb_val.GetValue()\n-\n-\n-# =---------------------------------------------------------------------------------------\n-# Type-Specialized Printing Functions\n-# =---------------------------------------------------------------------------------------\n-\n-def print_struct_val(val, internal_dict, omit_first_field, omit_type_name, is_tuple_like):\n-    \"\"\"\n-    Prints a struct, tuple, or tuple struct value with Rust syntax.\n-    Ignores any fields before field_start_index.\n-    \"\"\"\n-    assert (val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_STRUCT or\n-            val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_UNION)\n-\n-    if omit_type_name:\n-        type_name = \"\"\n-    else:\n-        type_name = val.type.get_unqualified_type_name()\n-\n-    if is_tuple_like:\n-        template = \"%(type_name)s(%(body)s)\"\n-        separator = \", \"\n-    else:\n-        template = \"%(type_name)s {\\n%(body)s\\n}\"\n-        separator = \", \\n\"\n-\n-    fields = val.type.get_fields()\n-\n-    def render_child(child_index):\n-        this = \"\"\n-        if not is_tuple_like:\n-            field_name = fields[child_index].name\n-            this += field_name + \": \"\n-\n-        field_val = val.get_child_at_index(child_index)\n-\n-        if not field_val.get_wrapped_value().IsValid():\n-            field = fields[child_index]\n-            # LLDB is not good at handling zero-sized values, so we have to help\n-            # it a little\n-            if field.GetType().GetByteSize() == 0:\n-                return this + rustpp.extract_type_name(field.GetType().GetName())\n-            else:\n-                return this + \"<invalid value>\"\n-\n-        return this + print_val(field_val.get_wrapped_value(), internal_dict)\n-\n-    if omit_first_field:\n-        field_start_index = 1\n-    else:\n-        field_start_index = 0\n-\n-    body = separator.join([render_child(idx) for idx in range(field_start_index, len(fields))])\n-\n-    return template % {\"type_name\": type_name,\n-                       \"body\": body}\n-\n-\n-def print_pointer_val(val, internal_dict):\n-    \"\"\"Prints a pointer value with Rust syntax\"\"\"\n-    assert val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_PTR\n-    sigil = \"&\"\n-    type_name = val.type.get_unqualified_type_name()\n-    if type_name and type_name[0:1] in [\"&\", \"*\"]:\n-        sigil = type_name[0:1]\n-\n-    return sigil + hex(val.as_integer())\n-\n-\n-def print_fixed_size_vec_val(val, internal_dict):\n-    assert val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_ARRAY\n-    lldb_val = val.get_wrapped_value()\n-\n-    output = \"[\"\n-\n-    for i in range(lldb_val.num_children):\n-        output += print_val(lldb_val.GetChildAtIndex(i), internal_dict)\n-        if i != lldb_val.num_children - 1:\n-            output += \", \"\n-\n-    output += \"]\"\n-    return output\n-\n-\n-def print_vec_slice_val(val, internal_dict):\n-    (length, data_ptr) = rustpp.extract_length_and_ptr_from_slice(val)\n-    return \"&[%s]\" % print_array_of_values(val.get_wrapped_value().GetName(),\n-                                           data_ptr,\n-                                           length,\n-                                           internal_dict)\n-\n-\n-def print_std_vec_val(val, internal_dict):\n-    (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(val)\n-    return \"vec![%s]\" % print_array_of_values(val.get_wrapped_value().GetName(),\n-                                              data_ptr,\n-                                              length,\n-                                              internal_dict)\n-\n-\n-def print_str_slice_val(val, internal_dict):\n-    (length, data_ptr) = rustpp.extract_length_and_ptr_from_slice(val)\n-    return read_utf8_string(data_ptr, length)\n-\n-\n-def print_std_string_val(val, internal_dict):\n-    vec = val.get_child_at_index(0)\n-    (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(vec)\n-    return read_utf8_string(data_ptr, length)\n-\n-# =-----------------------------------------------------------------------\n-# Helper Functions\n-# =-----------------------------------------------------------------------\n-\n-\n-def print_array_of_values(array_name, data_ptr_val, length, internal_dict):\n-    \"\"\"Prints a contiguous memory range, interpreting it as values of the\n-       pointee-type of data_ptr_val.\"\"\"\n-\n-    data_ptr_type = data_ptr_val.type\n-    assert data_ptr_type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_PTR\n-\n-    element_type = data_ptr_type.get_wrapped_value().GetPointeeType()\n-    element_type_size = element_type.GetByteSize()\n-\n-    start_address = data_ptr_val.as_integer()\n-    raw_value = data_ptr_val.get_wrapped_value()\n-\n-    def render_element(i):\n-        address = start_address + i * element_type_size\n-        element_val = raw_value.CreateValueFromAddress(array_name + (\"[%s]\" % i),\n-                                                       address,\n-                                                       element_type)\n-        return print_val(element_val, internal_dict)\n-\n-    return ', '.join([render_element(i) for i in range(length)])\n-\n-\n-def read_utf8_string(ptr_val, byte_count):\n-    if byte_count == 0:\n-        return '\"\"'\n-    error = lldb.SBError()\n-    process = ptr_val.get_wrapped_value().GetProcess()\n-    data = process.ReadMemory(ptr_val.as_integer(), byte_count, error)\n-    if error.Success():\n-        return '\"%s\"' % data.decode(encoding='UTF-8')\n-    else:\n-        return '<error: %s>' % error.GetCString()"}, {"sha": "28b32ef1ad5328cbef7f3dbc70131d8bbd89906d", "filename": "src/etc/rust-lldb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Frust-lldb", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Frust-lldb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-lldb?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -30,13 +30,5 @@ EOF\n     fi\n fi\n \n-# Prepare commands that will be loaded before any file on the command line has been loaded\n-script_import=\"command script import \\\"$RUSTC_SYSROOT/lib/rustlib/etc/lldb_rust_formatters.py\\\"\"\n-category_definition=\"type summary add --no-value --python-function lldb_rust_formatters.print_val -x \\\".*\\\" --category Rust\"\n-category_enable=\"type category enable Rust\"\n-\n # Call LLDB with the commands added to the argument list\n-exec \"$lldb\" --one-line-before-file \"$script_import\" \\\n-    --one-line-before-file \"$category_definition\" \\\n-    --one-line-before-file \"$category_enable\" \\\n-    \"$@\"\n+exec \"$lldb\" --source-before-file ./lldb_commands \"$@\""}, {"sha": "b49fd19ed4cbbbe40ba49458037bb4c2fff5e64b", "filename": "src/etc/rust_types.py", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Frust_types.py", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Fetc%2Frust_types.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust_types.py?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -0,0 +1,113 @@\n+import re\n+\n+\n+class RustType(object):\n+    OTHER = \"Other\"\n+    STRUCT = \"Struct\"\n+    TUPLE = \"Tuple\"\n+    CSTYLE_VARIANT = \"CStyleVariant\"\n+    TUPLE_VARIANT = \"TupleVariant\"\n+    STRUCT_VARIANT = \"StructVariant\"\n+    ENUM = \"Enum\"\n+    EMPTY = \"Empty\"\n+    SINGLETON_ENUM = \"SingletonEnum\"\n+    REGULAR_ENUM = \"RegularEnum\"\n+    COMPRESSED_ENUM = \"CompressedEnum\"\n+    REGULAR_UNION = \"RegularUnion\"\n+\n+    STD_STRING = \"StdString\"\n+    STD_OS_STRING = \"StdOsString\"\n+    STD_STR = \"StdStr\"\n+    STD_SLICE = \"StdSlice\"\n+    STD_VEC = \"StdVec\"\n+    STD_VEC_DEQUE = \"StdVecDeque\"\n+    STD_BTREE_SET = \"StdBTreeSet\"\n+    STD_BTREE_MAP = \"StdBTreeMap\"\n+    STD_HASH_MAP = \"StdHashMap\"\n+    STD_HASH_SET = \"StdHashSet\"\n+    STD_RC = \"StdRc\"\n+    STD_ARC = \"StdArc\"\n+    STD_CELL = \"StdCell\"\n+    STD_REF = \"StdRef\"\n+    STD_REF_MUT = \"StdRefMut\"\n+    STD_REF_CELL = \"StdRefCell\"\n+\n+\n+STD_STRING_REGEX = re.compile(r\"^(alloc::(\\w+::)+)String$\")\n+STD_STR_REGEX = re.compile(r\"^&str$\")\n+STD_SLICE_REGEX = re.compile(r\"^&\\[.+\\]$\")\n+STD_OS_STRING_REGEX = re.compile(r\"^(std::ffi::(\\w+::)+)OsString$\")\n+STD_VEC_REGEX = re.compile(r\"^(alloc::(\\w+::)+)Vec<.+>$\")\n+STD_VEC_DEQUE_REGEX = re.compile(r\"^(alloc::(\\w+::)+)VecDeque<.+>$\")\n+STD_BTREE_SET_REGEX = re.compile(r\"^(alloc::(\\w+::)+)BTreeSet<.+>$\")\n+STD_BTREE_MAP_REGEX = re.compile(r\"^(alloc::(\\w+::)+)BTreeMap<.+>$\")\n+STD_HASH_MAP_REGEX = re.compile(r\"^(std::collections::(\\w+::)+)HashMap<.+>$\")\n+STD_HASH_SET_REGEX = re.compile(r\"^(std::collections::(\\w+::)+)HashSet<.+>$\")\n+STD_RC_REGEX = re.compile(r\"^(alloc::(\\w+::)+)Rc<.+>$\")\n+STD_ARC_REGEX = re.compile(r\"^(alloc::(\\w+::)+)Arc<.+>$\")\n+STD_CELL_REGEX = re.compile(r\"^(core::(\\w+::)+)Cell<.+>$\")\n+STD_REF_REGEX = re.compile(r\"^(core::(\\w+::)+)Ref<.+>$\")\n+STD_REF_MUT_REGEX = re.compile(r\"^(core::(\\w+::)+)RefMut<.+>$\")\n+STD_REF_CELL_REGEX = re.compile(r\"^(core::(\\w+::)+)RefCell<.+>$\")\n+\n+TUPLE_ITEM_REGEX = re.compile(r\"__\\d+$\")\n+\n+ENCODED_ENUM_PREFIX = \"RUST$ENCODED$ENUM$\"\n+ENUM_DISR_FIELD_NAME = \"<<variant>>\"\n+\n+STD_TYPE_TO_REGEX = {\n+    RustType.STD_STRING: STD_STRING_REGEX,\n+    RustType.STD_OS_STRING: STD_OS_STRING_REGEX,\n+    RustType.STD_STR: STD_STR_REGEX,\n+    RustType.STD_SLICE: STD_SLICE_REGEX,\n+    RustType.STD_VEC: STD_VEC_REGEX,\n+    RustType.STD_VEC_DEQUE: STD_VEC_DEQUE_REGEX,\n+    RustType.STD_HASH_MAP: STD_HASH_MAP_REGEX,\n+    RustType.STD_HASH_SET: STD_HASH_SET_REGEX,\n+    RustType.STD_BTREE_SET: STD_BTREE_SET_REGEX,\n+    RustType.STD_BTREE_MAP: STD_BTREE_MAP_REGEX,\n+    RustType.STD_RC: STD_RC_REGEX,\n+    RustType.STD_ARC: STD_ARC_REGEX,\n+    RustType.STD_REF: STD_REF_REGEX,\n+    RustType.STD_REF_MUT: STD_REF_MUT_REGEX,\n+    RustType.STD_REF_CELL: STD_REF_CELL_REGEX,\n+    RustType.STD_CELL: STD_CELL_REGEX,\n+}\n+\n+def is_tuple_fields(fields):\n+    # type: (list) -> bool\n+    return all(TUPLE_ITEM_REGEX.match(str(field.name)) for field in fields)\n+\n+\n+def classify_struct(name, fields):\n+    if len(fields) == 0:\n+        return RustType.EMPTY\n+\n+    for ty, regex in STD_TYPE_TO_REGEX.items():\n+        if regex.match(name):\n+            return ty\n+\n+    if fields[0].name == ENUM_DISR_FIELD_NAME:\n+        return RustType.ENUM\n+\n+    if is_tuple_fields(fields):\n+        return RustType.TUPLE\n+\n+    return RustType.STRUCT\n+\n+\n+def classify_union(fields):\n+    if len(fields) == 0:\n+        return RustType.EMPTY\n+\n+    first_variant_name = fields[0].name\n+    if first_variant_name is None:\n+        if len(fields) == 1:\n+            return RustType.SINGLETON_ENUM\n+        else:\n+            return RustType.REGULAR_ENUM\n+    elif first_variant_name.startswith(ENCODED_ENUM_PREFIX):\n+        assert len(fields) == 1\n+        return RustType.COMPRESSED_ENUM\n+    else:\n+        return RustType.REGULAR_UNION"}, {"sha": "0a0ce3c671f07522335b533bffaf0e1aed4b2ca5", "filename": "src/test/debuginfo/associated-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -43,8 +43,8 @@\n // lldb-command:run\n \n // lldb-command:print arg\n-// lldbg-check:[...]$0 = Struct<i32> { b: -1, b1: 0 }\n-// lldbr-check:(associated_types::Struct<i32>) arg = Struct<i32> { b: -1, b1: 0 }\n+// lldbg-check:[...]$0 = { b = -1, b1 = 0 }\n+// lldbr-check:(associated_types::Struct<i32>) arg = { b = -1, b1 = 0 }\n // lldb-command:continue\n \n // lldb-command:print inferred"}, {"sha": "7f97d96b8db93a2cf50bcd2fc1192d8174b04d06", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -35,8 +35,8 @@\n // lldb-command:run\n \n // lldb-command:print *stack_val_ref\n-// lldbg-check:[...]$0 = SomeStruct { x: 10, y: 23.5 }\n-// lldbr-check:(borrowed_struct::SomeStruct) *stack_val_ref = SomeStruct { x: 10, y: 23.5 }\n+// lldbg-check:[...]$0 = { x = 10 y = 23.5 }\n+// lldbr-check:(borrowed_struct::SomeStruct) *stack_val_ref = (x = 10, y = 23.5)\n \n // lldb-command:print *stack_val_interior_ref_1\n // lldbg-check:[...]$1 = 10\n@@ -47,12 +47,12 @@\n // lldbr-check:(f64) *stack_val_interior_ref_2 = 23.5\n \n // lldb-command:print *ref_to_unnamed\n-// lldbg-check:[...]$3 = SomeStruct { x: 11, y: 24.5 }\n-// lldbr-check:(borrowed_struct::SomeStruct) *ref_to_unnamed = SomeStruct { x: 11, y: 24.5 }\n+// lldbg-check:[...]$3 = { x = 11 y = 24.5 }\n+// lldbr-check:(borrowed_struct::SomeStruct) *ref_to_unnamed = (x = 11, y = 24.5)\n \n // lldb-command:print *unique_val_ref\n-// lldbg-check:[...]$4 = SomeStruct { x: 13, y: 26.5 }\n-// lldbr-check:(borrowed_struct::SomeStruct) *unique_val_ref = SomeStruct { x: 13, y: 26.5 }\n+// lldbg-check:[...]$4 = { x = 13 y = 26.5 }\n+// lldbr-check:(borrowed_struct::SomeStruct) *unique_val_ref = (x = 13, y = 26.5)\n \n // lldb-command:print *unique_val_interior_ref_1\n // lldbg-check:[...]$5 = 13"}, {"sha": "be4895ef5363e2907c97d7ea478d682346bc0dc8", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -24,16 +24,16 @@\n // lldb-command:run\n \n // lldb-command:print *stack_val_ref\n-// lldbg-check:[...]$0 = (-14, -19)\n-// lldbr-check:((i16, f32)) *stack_val_ref = { = -14 = -19 }\n+// lldbg-check:[...]$0 = { 0 = -14 1 = -19 }\n+// lldbr-check:((i16, f32)) *stack_val_ref = { 0 = -14 1 = -19 }\n \n // lldb-command:print *ref_to_unnamed\n-// lldbg-check:[...]$1 = (-15, -20)\n-// lldbr-check:((i16, f32)) *ref_to_unnamed = { = -15 = -20 }\n+// lldbg-check:[...]$1 = { 0 = -15 1 = -20 }\n+// lldbr-check:((i16, f32)) *ref_to_unnamed = { 0 = -15 1 = -20 }\n \n // lldb-command:print *unique_val_ref\n-// lldbg-check:[...]$2 = (-17, -22)\n-// lldbr-check:((i16, f32)) *unique_val_ref = { = -17 = -22 }\n+// lldbg-check:[...]$2 = { 0 = -17 1 = -22 }\n+// lldbr-check:((i16, f32)) *unique_val_ref = { 0 = -17 1 = -22 }\n \n \n #![allow(unused_variables)]"}, {"sha": "e443b67ebfb31a2803da32c1035a0e404df6b9c1", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -20,8 +20,8 @@\n // lldbg-check:[...]$0 = 1\n // lldbr-check:(i32) *a = 1\n // lldb-command:print *b\n-// lldbg-check:[...]$1 = (2, 3.5)\n-// lldbr-check:((i32, f64)) *b = { = 2 = 3.5 }\n+// lldbg-check:[...]$1 = { 0 = 2 1 = 3.5 }\n+// lldbr-check:((i32, f64)) *b = { 0 = 2 1 = 3.5 }\n \n #![allow(unused_variables)]\n #![feature(box_syntax)]"}, {"sha": "04bdf7289013559fc90c05fccc7960443d6ce575", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -22,12 +22,12 @@\n // lldb-command:run\n \n // lldb-command:print *boxed_with_padding\n-// lldbg-check:[...]$0 = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n-// lldbr-check:(boxed_struct::StructWithSomePadding) *boxed_with_padding = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n+// lldbg-check:[...]$0 = { x = 99 y = 999 z = 9999 w = 99999 }\n+// lldbr-check:(boxed_struct::StructWithSomePadding) *boxed_with_padding = { x = 99 y = 999 z = 9999 w = 99999 }\n \n // lldb-command:print *boxed_with_dtor\n-// lldbg-check:[...]$1 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n-// lldbr-check:(boxed_struct::StructWithDestructor) *boxed_with_dtor = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n+// lldbg-check:[...]$1 = { x = 77 y = 777 z = 7777 w = 77777 }\n+// lldbr-check:(boxed_struct::StructWithDestructor) *boxed_with_dtor = { x = 77 y = 777 z = 7777 w = 77777 }\n \n #![allow(unused_variables)]\n #![feature(box_syntax)]"}, {"sha": "e60cfc9242aa14945857f8967ea46cf2ce12f95b", "filename": "src/test/debuginfo/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -31,13 +31,13 @@\n // lldb-command:continue\n \n // lldb-command:print self\n-// lldbg-check:[...]$1 = Struct { x: 2222, y: 3333 }\n-// lldbr-check:(by_value_self_argument_in_trait_impl::Struct) self = Struct { x: 2222, y: 3333 }\n+// lldbg-check:[...]$1 = { x = 2222 y = 3333 }\n+// lldbr-check:(by_value_self_argument_in_trait_impl::Struct) self = { x = 2222 y = 3333 }\n // lldb-command:continue\n \n // lldb-command:print self\n-// lldbg-check:[...]$2 = (4444.5, 5555, 6666, 7777.5)\n-// lldbr-check:((f64, isize, isize, f64)) self = { = 4444.5 = 5555 = 6666 = 7777.5 }\n+// lldbg-check:[...] $2 = { 0 = 4444.5 1 = 5555 2 = 6666 3 = 7777.5 }\n+// lldbr-check:((f64, isize, isize, f64)) self = { 0 = 4444.5 1 = 5555 2 = 6666 3 = 7777.5 }\n // lldb-command:continue\n \n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "f859fe8d1ce0e01c1b450d12cf24d43dd1e40ac1", "filename": "src/test/debuginfo/c-style-enum-in-composite.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -40,31 +40,32 @@\n // lldb-command:run\n \n // lldb-command:print tuple_interior_padding\n-// lldbg-check:[...]$0 = (0, OneHundred)\n-// lldbr-check:((i16, c_style_enum_in_composite::AnEnum)) tuple_interior_padding = { = 0 = c_style_enum_in_composite::AnEnum::OneHundred }\n+// lldbg-check:[...]$0 = { 0 = 0 1 = OneHundred }\n+// lldbr-check:((i16, c_style_enum_in_composite::AnEnum)) tuple_interior_padding = { 0 = 0 1 = OneHundred }\n \n // lldb-command:print tuple_padding_at_end\n-// lldbg-check:[...]$1 = ((1, OneThousand), 2)\n-// lldbr-check:(((u64, c_style_enum_in_composite::AnEnum), u64)) tuple_padding_at_end = { = { = 1 = c_style_enum_in_composite::AnEnum::OneThousand } = 2 }\n+// lldbg-check:[...]$1 = { 0 = { 0 = 1 1 = OneThousand } 1 = 2 }\n+// lldbr-check:(((u64, c_style_enum_in_composite::AnEnum), u64)) tuple_padding_at_end = { 0 = { 0 = 1 1 = OneThousand } 1 = 2 }\n+\n // lldb-command:print tuple_different_enums\n-// lldbg-check:[...]$2 = (OneThousand, MountainView, OneMillion, Vienna)\n-// lldbr-check:((c_style_enum_in_composite::AnEnum, c_style_enum_in_composite::AnotherEnum, c_style_enum_in_composite::AnEnum, c_style_enum_in_composite::AnotherEnum)) tuple_different_enums = { = c_style_enum_in_composite::AnEnum::OneThousand = c_style_enum_in_composite::AnotherEnum::MountainView = c_style_enum_in_composite::AnEnum::OneMillion = c_style_enum_in_composite::AnotherEnum::Vienna }\n+// lldbg-check:[...]$2 = { 0 = OneThousand 1 = MountainView 2 = OneMillion 3 = Vienna }\n+// lldbr-check:((c_style_enum_in_composite::AnEnum, c_style_enum_in_composite::AnotherEnum, c_style_enum_in_composite::AnEnum, c_style_enum_in_composite::AnotherEnum)) tuple_different_enums = { 0 = c_style_enum_in_composite::AnEnum::OneThousand 1 = c_style_enum_in_composite::AnotherEnum::MountainView 2 = c_style_enum_in_composite::AnEnum::OneMillion 3 = c_style_enum_in_composite::AnotherEnum::Vienna }\n \n // lldb-command:print padded_struct\n-// lldbg-check:[...]$3 = PaddedStruct { a: 3, b: OneMillion, c: 4, d: Toronto, e: 5 }\n-// lldbr-check:(c_style_enum_in_composite::PaddedStruct) padded_struct = PaddedStruct { a: 3, b: c_style_enum_in_composite::AnEnum::OneMillion, c: 4, d: c_style_enum_in_composite::AnotherEnum::Toronto, e: 5 }\n+// lldbg-check:[...]$3 = { a = 3 b = OneMillion c = 4 d = Toronto e = 5 }\n+// lldbr-check:(c_style_enum_in_composite::PaddedStruct) padded_struct = { a = 3 b = c_style_enum_in_composite::AnEnum::OneMillion c = 4 d = Toronto e = 5 }\n \n // lldb-command:print packed_struct\n-// lldbg-check:[...]$4 = PackedStruct { a: 6, b: OneHundred, c: 7, d: Vienna, e: 8 }\n-// lldbr-check:(c_style_enum_in_composite::PackedStruct) packed_struct = PackedStruct { a: 6, b: c_style_enum_in_composite::AnEnum::OneHundred, c: 7, d: c_style_enum_in_composite::AnotherEnum::Vienna, e: 8 }\n+// lldbg-check:[...]$4 = { a = 6 b = OneHundred c = 7 d = Vienna e = 8 }\n+// lldbr-check:(c_style_enum_in_composite::PackedStruct) packed_struct = { a = 6 b = c_style_enum_in_composite::AnEnum::OneHundred c = 7 d = Vienna e = 8 }\n \n // lldb-command:print non_padded_struct\n-// lldbg-check:[...]$5 = NonPaddedStruct { a: OneMillion, b: MountainView, c: OneThousand, d: Toronto }\n-// lldbr-check:(c_style_enum_in_composite::NonPaddedStruct) non_padded_struct = NonPaddedStruct { a: c_style_enum_in_composite::AnEnum::OneMillion, b: c_style_enum_in_composite::AnotherEnum::MountainView, c: c_style_enum_in_composite::AnEnum::OneThousand, d: c_style_enum_in_composite::AnotherEnum::Toronto }\n+// lldbg-check:[...]$5 = { a = OneMillion b = MountainView c = OneThousand d = Toronto }\n+// lldbr-check:(c_style_enum_in_composite::NonPaddedStruct) non_padded_struct = { a = c_style_enum_in_composite::AnEnum::OneMillion, b = c_style_enum_in_composite::AnotherEnum::MountainView, c = c_style_enum_in_composite::AnEnum::OneThousand, d = c_style_enum_in_composite::AnotherEnum::Toronto }\n \n // lldb-command:print struct_with_drop\n-// lldbg-check:[...]$6 = (StructWithDrop { a: OneHundred, b: Vienna }, 9)\n-// lldbr-check:((c_style_enum_in_composite::StructWithDrop, i64)) struct_with_drop = { = StructWithDrop { a: c_style_enum_in_composite::AnEnum::OneHundred, b: c_style_enum_in_composite::AnotherEnum::Vienna } = 9 }\n+// lldbg-check:[...]$6 = { 0 = { a = OneHundred b = Vienna } 1 = 9 }\n+// lldbr-check:((c_style_enum_in_composite::StructWithDrop, i64)) struct_with_drop = { 0 = { a = c_style_enum_in_composite::AnEnum::OneHundred b = c_style_enum_in_composite::AnotherEnum::Vienna } 1 = 9 }\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "7c58e1db23f35eef4c73cd8b7bf3909079e1f3fa", "filename": "src/test/debuginfo/cross-crate-spans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fcross-crate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fcross-crate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcross-crate-spans.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -44,8 +44,8 @@ extern crate cross_crate_spans;\n // lldb-command:run\n \n // lldb-command:print result\n-// lldbg-check:[...]$0 = (17, 17)\n-// lldbr-check:((u32, u32)) result = { = 17 = 17 }\n+// lldbg-check:[...]$0 = { 0 = 17 1 = 17 }\n+// lldbr-check:((u32, u32)) result = { 0 = 17 1 = 17 }\n // lldb-command:print a_variable\n // lldbg-check:[...]$1 = 123456789\n // lldbr-check:(u32) a_variable = 123456789\n@@ -55,8 +55,8 @@ extern crate cross_crate_spans;\n // lldb-command:continue\n \n // lldb-command:print result\n-// lldbg-check:[...]$3 = (1212, 1212)\n-// lldbr-check:((i16, i16)) result = { = 1212 = 1212 }\n+// lldbg-check:[...]$3 = { 0 = 1212 1 = 1212 }\n+// lldbr-check:((i16, i16)) result = { 0 = 1212 1 = 1212 }\n // lldb-command:print a_variable\n // lldbg-check:[...]$4 = 123456789\n // lldbr-check:(u32) a_variable = 123456789"}, {"sha": "a776f51907158aadeb9e4f1bf727a87b06cef0e3", "filename": "src/test/debuginfo/destructured-fn-argument.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -186,16 +186,16 @@\n // lldbg-check:[...]$5 = 5\n // lldbr-check:(isize) a = 5\n // lldb-command:print b\n-// lldbg-check:[...]$6 = (6, 7)\n-// lldbr-check:((u32, u32)) b = { = 6 = 7 }\n+// lldbg-check:[...]$6 = { 0 = 6 1 = 7 }\n+// lldbr-check:((u32, u32)) b = { 0 = 6 1 = 7 }\n // lldb-command:continue\n \n // lldb-command:print h\n // lldbg-check:[...]$7 = 8\n // lldbr-check:(i16) h = 8\n // lldb-command:print i\n-// lldbg-check:[...]$8 = Struct { a: 9, b: 10 }\n-// lldbr-check:(destructured_fn_argument::Struct) i = Struct { a: 9, b: 10 }\n+// lldbg-check:[...]$8 = { a = 9 b = 10 }\n+// lldbr-check:(destructured_fn_argument::Struct) i = { a = 9 b = 10 }\n // lldb-command:print j\n // lldbg-check:[...]$9 = 11\n // lldbr-check:(i16) j = 11\n@@ -229,8 +229,8 @@\n // lldbg-check:[...]$16 = 20\n // lldbr-check:(i32) q = 20\n // lldb-command:print r\n-// lldbg-check:[...]$17 = Struct { a: 21, b: 22 }\n-// lldbr-check:(destructured_fn_argument::Struct) r = Struct { a: 21, b: 22 }\n+// lldbg-check:[...]$17 = { a = 21 b = 22 }\n+// lldbr-check:(destructured_fn_argument::Struct) r = { a = 21, b = 22 }\n // lldb-command:continue\n \n // lldb-command:print s\n@@ -271,13 +271,13 @@\n // lldb-command:continue\n \n // lldb-command:print aa\n-// lldbg-check:[...]$29 = (34, 35)\n-// lldbr-check:((isize, isize)) aa = { = 34 = 35 }\n+// lldbg-check:[...]$29 = { 0 = 34 1 = 35 }\n+// lldbr-check:((isize, isize)) aa = { 0 = 34 1 = 35 }\n // lldb-command:continue\n \n // lldb-command:print bb\n-// lldbg-check:[...]$30 = (36, 37)\n-// lldbr-check:((isize, isize)) bb = { = 36 = 37 }\n+// lldbg-check:[...]$30 = { 0 = 36 1 = 37 }\n+// lldbr-check:((isize, isize)) bb = { 0 = 36 1 = 37 }\n // lldb-command:continue\n \n // lldb-command:print cc\n@@ -286,21 +286,21 @@\n // lldb-command:continue\n \n // lldb-command:print dd\n-// lldbg-check:[...]$32 = (40, 41, 42)\n-// lldbr-check:((isize, isize, isize)) dd = { = 40 = 41 = 42 }\n+// lldbg-check:[...]$32 = { 0 = 40 1 = 41 2 = 42 }\n+// lldbr-check:((isize, isize, isize)) dd = { 0 = 40 1 = 41 2 = 42 }\n // lldb-command:continue\n \n // lldb-command:print *ee\n-// lldbg-check:[...]$33 = (43, 44, 45)\n-// lldbr-check:((isize, isize, isize)) *ee = { = 43 = 44 = 45 }\n+// lldbg-check:[...]$33 = { 0 = 43 1 = 44 2 = 45 }\n+// lldbr-check:((isize, isize, isize)) *ee = { 0 = 43 1 = 44 2 = 45 }\n // lldb-command:continue\n \n // lldb-command:print *ff\n // lldbg-check:[...]$34 = 46\n // lldbr-check:(isize) *ff = 46\n // lldb-command:print gg\n-// lldbg-check:[...]$35 = (47, 48)\n-// lldbr-check:((isize, isize)) gg = { = 47 = 48 }\n+// lldbg-check:[...]$35 = { 0 = 47 1 = 48 }\n+// lldbr-check:((isize, isize)) gg = { 0 = 47 1 = 48 }\n // lldb-command:continue\n \n // lldb-command:print *hh"}, {"sha": "868f2285f357435fd10800bf47d6030439e85c56", "filename": "src/test/debuginfo/destructured-for-loop-variable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -164,13 +164,13 @@\n // lldb-command:continue\n \n // lldb-command:print simple_struct_ident\n-// lldbg-check:[...]$22 = Struct { x: 3537, y: 35437.5, z: true }\n-// lldbr-check:(destructured_for_loop_variable::Struct) simple_struct_ident = Struct { x: 3537, y: 35437.5, z: true }\n+// lldbg-check:[...]$22 = { x = 3537 y = 35437.5 z = true }\n+// lldbr-check:(destructured_for_loop_variable::Struct) simple_struct_ident = { x = 3537 y = 35437.5 z = true }\n // lldb-command:continue\n \n // lldb-command:print simple_tuple_ident\n-// lldbg-check:[...]$23 = (34903493, 232323)\n-// lldbr-check:((u32, i64)) simple_tuple_ident = { = 34903493 = 232323 }\n+// lldbg-check:[...]$23 = { 0 = 34903493 1 = 232323 }\n+// lldbr-check:((u32, i64)) simple_tuple_ident = { 0 = 34903493 1 = 232323 }\n // lldb-command:continue\n \n #![allow(unused_variables)]"}, {"sha": "712168b5baa870ad6de9cd056cbf2f7e7bbc5da5", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -150,15 +150,15 @@\n // lldbg-check:[...]$5 = 5\n // lldbr-check:(isize) f = 5\n // lldb-command:print g\n-// lldbg-check:[...]$6 = (6, 7)\n-// lldbr-check:((u32, u32)) g = { = 6 = 7 }\n+// lldbg-check:[...]$6 = { 0 = 6 1 = 7 }\n+// lldbr-check:((u32, u32)) g = { 0 = 6 1 = 7 }\n \n // lldb-command:print h\n // lldbg-check:[...]$7 = 8\n // lldbr-check:(i16) h = 8\n // lldb-command:print i\n-// lldbg-check:[...]$8 = Struct { a: 9, b: 10 }\n-// lldbr-check:(destructured_local::Struct) i = Struct { a: 9, b: 10 }\n+// lldbg-check:[...]$8 = { a = 9 b = 10 }\n+// lldbr-check:(destructured_local::Struct) i = { a = 9 b = 10 }\n // lldb-command:print j\n // lldbg-check:[...]$9 = 11\n // lldbr-check:(i16) j = 11\n@@ -188,8 +188,8 @@\n // lldbg-check:[...]$16 = 20\n // lldbr-check:(i32) q = 20\n // lldb-command:print r\n-// lldbg-check:[...]$17 = Struct { a: 21, b: 22 }\n-// lldbr-check:(destructured_local::Struct) r = Struct { a: 21, b: 22 }\n+// lldbg-check:[...]$17 = { a = 21 b = 22 }\n+// lldbr-check:(destructured_local::Struct) r = { a = 21 b = 22 }\n \n // lldb-command:print s\n // lldbg-check:[...]$18 = 24\n@@ -227,32 +227,32 @@\n // lldbr-check:(i32) ue = 33\n \n // lldb-command:print aa\n-// lldbg-check:[...]$29 = (34, 35)\n-// lldbr-check:((i32, i32)) aa = { = 34 = 35 }\n+// lldbg-check:[...]$29 = { 0 = 34 1 = 35 }\n+// lldbr-check:((i32, i32)) aa = { 0 = 34 1 = 35 }\n \n // lldb-command:print bb\n-// lldbg-check:[...]$30 = (36, 37)\n-// lldbr-check:((i32, i32)) bb = { = 36 = 37 }\n+// lldbg-check:[...]$30 = { 0 = 36 1 = 37 }\n+// lldbr-check:((i32, i32)) bb = { 0 = 36 1 = 37 }\n \n // lldb-command:print cc\n // lldbg-check:[...]$31 = 38\n // lldbr-check:(i32) cc = 38\n \n // lldb-command:print dd\n-// lldbg-check:[...]$32 = (40, 41, 42)\n-// lldbr-check:((i32, i32, i32)) dd = { = 40 = 41 = 42 }\n+// lldbg-check:[...]$32 = { 0 = 40 1 = 41 2 = 42 }\n+// lldbr-check:((i32, i32, i32)) dd = { 0 = 40 1 = 41 2 = 42}\n \n // lldb-command:print *ee\n-// lldbg-check:[...]$33 = (43, 44, 45)\n-// lldbr-check:((i32, i32, i32)) *ee = { = 43 = 44 = 45 }\n+// lldbg-check:[...]$33 = { 0 = 43 1 = 44 2 = 45 }\n+// lldbr-check:((i32, i32, i32)) *ee = { 0 = 43 1 = 44 2 = 45}\n \n // lldb-command:print *ff\n // lldbg-check:[...]$34 = 46\n // lldbr-check:(i32) *ff = 46\n \n // lldb-command:print gg\n-// lldbg-check:[...]$35 = (47, 48)\n-// lldbr-check:((i32, i32)) gg = { = 47 = 48 }\n+// lldbg-check:[...]$35 = { 0 = 47 1 = 48 }\n+// lldbr-check:((i32, i32)) gg = { 0 = 47 1 = 48 }\n \n // lldb-command:print *hh\n // lldbg-check:[...]$36 = 50"}, {"sha": "66eb8bae26b9ba36cababc15d61f2f7488679fdb", "filename": "src/test/debuginfo/empty-string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fempty-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fempty-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fempty-string.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -1,7 +1,7 @@\n // ignore-windows failing on win32 bot\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n-// min-gdb-version: 7.7\n+// min-gdb-version: 8.1\n // ignore-gdb-version: 7.11.90 - 8.0.9\n // min-lldb-version: 310\n \n@@ -20,10 +20,10 @@\n // lldb-command: run\n \n // lldb-command: fr v empty_string\n-// lldb-check:[...]empty_string = \"\"\n+// lldb-check:[...]empty_string = \"\" { vec = size=0 }\n \n // lldb-command: fr v empty_str\n-// lldb-check:[...]empty_str = \"\"\n+// lldb-check:[...]empty_str = \"\" { data_ptr = [...] length = 0 }\n \n fn main() {\n     let empty_string = String::new();"}, {"sha": "b10e04a4a9eb2ab86788b6b5ce54e44195c0323e", "filename": "src/test/debuginfo/enum-thinlto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -15,7 +15,8 @@\n // lldb-command:run\n \n // lldb-command:print *abc\n-// lldbg-check:(enum_thinlto::ABC) $0 = ABC { }\n+// lldbg-check:(enum_thinlto::ABC) $0 =\n+// lldbr-check:(enum_thinlto::ABC) *abc = (x = 0, y = 8970181431921507452)\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "2033966adad4c2b4ccd4cd9622387ea8816d6cdb", "filename": "src/test/debuginfo/evec-in-struct.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -33,23 +33,23 @@\n // lldb-command:run\n \n // lldb-command:print no_padding1\n-// lldbg-check:[...]$0 = NoPadding1 { x: [0, 1, 2], y: -3, z: [4.5, 5.5] }\n-// lldbr-check:(evec_in_struct::NoPadding1) no_padding1 = NoPadding1 { x: [0, 1, 2], y: -3, z: [4.5, 5.5] }\n+// lldbg-check:[...]$0 = { x = { [0] = 0 [1] = 1 [2] = 2 } y = -3 z = { [0] = 4.5 [1] = 5.5 } }\n+// lldbr-check:(evec_in_struct::NoPadding1) no_padding1 = { x = { [0] = 0 [1] = 1 [2] = 2 } y = -3 z = { [0] = 4.5 [1] = 5.5 } }\n // lldb-command:print no_padding2\n-// lldbg-check:[...]$1 = NoPadding2 { x: [6, 7, 8], y: [[9, 10], [11, 12]] }\n-// lldbr-check:(evec_in_struct::NoPadding2) no_padding2 = NoPadding2 { x: [6, 7, 8], y: [[9, 10], [11, 12]] }\n+// lldbg-check:[...]$1 = { x = { [0] = 6 [1] = 7 [2] = 8 } y = { [0] = { [0] = 9 [1] = 10 } [1] = { [0] = 11 [1] = 12 } } }\n+// lldbr-check:(evec_in_struct::NoPadding2) no_padding2 = { x = { [0] = 6 [1] = 7 [2] = 8 } y = { [0] = { [0] = 9 [1] = 10 } [1] = { [0] = 11 [1] = 12 } } }\n \n // lldb-command:print struct_internal_padding\n-// lldbg-check:[...]$2 = StructInternalPadding { x: [13, 14], y: [15, 16] }\n-// lldbr-check:(evec_in_struct::StructInternalPadding) struct_internal_padding = StructInternalPadding { x: [13, 14], y: [15, 16] }\n+// lldbg-check:[...]$2 = { x = { [0] = 13 [1] = 14 } y = { [0] = 15 [1] = 16 } }\n+// lldbr-check:(evec_in_struct::StructInternalPadding) struct_internal_padding = { x = { [0] = 13 [1] = 14 } y = { [0] = 15 [1] = 16 } }\n \n // lldb-command:print single_vec\n-// lldbg-check:[...]$3 = SingleVec { x: [17, 18, 19, 20, 21] }\n-// lldbr-check:(evec_in_struct::SingleVec) single_vec = SingleVec { x: [17, 18, 19, 20, 21] }\n+// lldbg-check:[...]$3 = { x = { [0] = 17 [1] = 18 [2] = 19 [3] = 20 [4] = 21 } }\n+// lldbr-check:(evec_in_struct::SingleVec) single_vec = { x = { [0] = 17 [1] = 18 [2] = 19 [3] = 20 [4] = 21 } }\n \n // lldb-command:print struct_padded_at_end\n-// lldbg-check:[...]$4 = StructPaddedAtEnd { x: [22, 23], y: [24, 25] }\n-// lldbr-check:(evec_in_struct::StructPaddedAtEnd) struct_padded_at_end = StructPaddedAtEnd { x: [22, 23], y: [24, 25] }\n+// lldbg-check:[...]$4 = { x = { [0] = 22 [1] = 23 } y = { [0] = 24 [1] = 25 } }\n+// lldbr-check:(evec_in_struct::StructPaddedAtEnd) struct_padded_at_end = { x = { [0] = 22 [1] = 23 } y = { [0] = 24 [1] = 25 } }\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "699ff84ee0a6c02a0fa8d4bebada1cfd2c3ca5e5", "filename": "src/test/debuginfo/function-prologue-stepping-regular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -30,9 +30,9 @@\n \n // NON IMMEDIATE ARGS\n // lldb-command:print a\n-// lldb-check:[...]$3 = BigStruct { a: 3, b: 4, c: 5, d: 6, e: 7, f: 8, g: 9, h: 10 }\n+// lldb-check:[...]$3 = { a = 3, b = 4, c = 5, d = 6, e = 7, f = 8, g = 9, h = 10 }\n // lldb-command:print b\n-// lldb-check:[...]$4 = BigStruct { a: 11, b: 12, c: 13, d: 14, e: 15, f: 16, g: 17, h: 18 }\n+// lldb-check:[...]$4 = { a = 11, b = 12, c = 13, d = 14, e = 15, f = 16, g = 17, h = 18 }\n // lldb-command:continue\n \n // BINDING"}, {"sha": "2a8359de522f4408159659c4c8f46dd279d4182c", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -1,14 +1,14 @@\n // ignore-tidy-linelength\n // ignore-lldb\n // ignore-android: FIXME(#10381)\n-// min-gdb-version: 7.11\n+// min-gdb-version: 8.1\n \n // compile-flags:-g\n \n // gdb-command: run\n \n // gdb-command: print regular_struct\n-// gdbg-check:$1 = RegularStruct = {the_first_field = 101, the_second_field = 102.5, the_third_field = false}\n+// gdbg-check:$1 = {the_first_field = 101, the_second_field = 102.5, the_third_field = false}\n // gdbr-check:$1 = gdb_pretty_struct_and_enums::RegularStruct {the_first_field: 101, the_second_field: 102.5, the_third_field: false}\n \n // gdb-command: print empty_struct"}, {"sha": "0023f69d27fbdb2894f0fc384c2306f365190b25", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -24,16 +24,16 @@\n \n // lldb-command:run\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $0 = generator-0(&0x[...])\n+// lldbg-check:(generator_objects::main::generator-0) $0 = { 0 = 0x[...] }\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $1 = generator-0(&0x[...])\n+// lldbg-check:(generator_objects::main::generator-0) $1 = { 0 = 0x[...] }\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $2 = generator-0(&0x[...])\n+// lldbg-check:(generator_objects::main::generator-0) $2 = { 0 = 0x[...] }\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $3 = generator-0(&0x[...])\n+// lldbg-check:(generator_objects::main::generator-0) $3 = { 0 = 0x[...] }\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "e8f3940c8360ada75c2c7025f6e4bfb486c9a0aa", "filename": "src/test/debuginfo/generic-function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -49,8 +49,8 @@\n // lldbg-check:[...]$4 = 5\n // lldbr-check:(i32) *t0 = 5\n // lldb-command:print *t1\n-// lldbg-check:[...]$5 = Struct { a: 6, b: 7.5 }\n-// lldbr-check:(generic_function::Struct) *t1 = Struct { a: 6, b: 7.5 }\n+// lldbg-check:[...]$5 = { a = 6 b = 7.5 }\n+// lldbr-check:(generic_function::Struct) *t1 = { a = 6 b = 7.5 }\n // lldb-command:continue\n \n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "f7767292222b0baac21898d8c42803eb33a3e847", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -67,8 +67,8 @@\n \n // STACK BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$0 = Struct<(u32, i32)> { x: (8888, -8888) }\n-// lldbr-check:(generic_method_on_generic_struct::Struct<(u32, i32)>) *self = { x = { = 8888 = -8888 } }\n+// lldbg-check:[...]$0 = { x = { 0 = 8888, 1 = -8888 } }\n+// lldbr-check:(generic_method_on_generic_struct::Struct<(u32, i32)>) *self = { x = { 0 = 8888 1 = -8888 } }\n // lldb-command:print arg1\n // lldbg-check:[...]$1 = -1\n // lldbr-check:(isize) arg1 = -1\n@@ -79,8 +79,8 @@\n \n // STACK BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$3 = Struct<(u32, i32)> { x: (8888, -8888) }\n-// lldbr-check:(generic_method_on_generic_struct::Struct<(u32, i32)>) self = { x = { = 8888 = -8888 } }\n+// lldbg-check:[...]$3 = { x = { 0 = 8888, 1 = -8888 } }\n+// lldbr-check:(generic_method_on_generic_struct::Struct<(u32, i32)>) self = { x = { 0 = 8888, 1 = -8888 } }\n // lldb-command:print arg1\n // lldbg-check:[...]$4 = -3\n // lldbr-check:(isize) arg1 = -3\n@@ -91,8 +91,8 @@\n \n // OWNED BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$6 = Struct<f64> { x: 1234.5 }\n-// lldbr-check:(generic_method_on_generic_struct::Struct<f64>) *self = Struct<f64> { x: 1234.5 }\n+// lldbg-check:[...]$6 = { x = 1234.5 }\n+// lldbr-check:(generic_method_on_generic_struct::Struct<f64>) *self = { x = 1234.5 }\n // lldb-command:print arg1\n // lldbg-check:[...]$7 = -5\n // lldbr-check:(isize) arg1 = -5\n@@ -103,8 +103,8 @@\n \n // OWNED BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$9 = Struct<f64> { x: 1234.5 }\n-// lldbr-check:(generic_method_on_generic_struct::Struct<f64>) self = Struct<f64> { x: 1234.5 }\n+// lldbg-check:[...]$9 = { x = 1234.5 }\n+// lldbr-check:(generic_method_on_generic_struct::Struct<f64>) self = { x = 1234.5 }\n // lldb-command:print arg1\n // lldbg-check:[...]$10 = -7\n // lldbr-check:(isize) arg1 = -7\n@@ -115,8 +115,8 @@\n \n // OWNED MOVED\n // lldb-command:print *self\n-// lldbg-check:[...]$12 = Struct<f64> { x: 1234.5 }\n-// lldbr-check:(generic_method_on_generic_struct::Struct<f64>) *self = Struct<f64> { x: 1234.5 }\n+// lldbg-check:[...]$12 = { x = 1234.5 }\n+// lldbr-check:(generic_method_on_generic_struct::Struct<f64>) *self = { x = 1234.5 }\n // lldb-command:print arg1\n // lldbg-check:[...]$13 = -9\n // lldbr-check:(isize) arg1 = -9"}, {"sha": "f286566277e9e795249eba83f03ad53ae4e6bb55", "filename": "src/test/debuginfo/issue-22656.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fissue-22656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fissue-22656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-22656.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -4,19 +4,18 @@\n \n // min-lldb-version: 310\n // ignore-gdb\n-// ignore-tidy-linelength\n \n // compile-flags:-g\n \n // === LLDB TESTS ==================================================================================\n // lldb-command:run\n \n // lldb-command:print v\n-// lldbg-check:[...]$0 = vec![1, 2, 3]\n-// lldbr-check:(alloc::vec::Vec<i32>) v = vec![1, 2, 3]\n+// lldbg-check:[...]$0 = size=3 { [0] = 1 [1] = 2 [2] = 3 }\n+// lldbr-check:(alloc::vec::Vec<i32>) v = size=3 { [0] = 1 [1] = 2 [2] = 3 }\n // lldb-command:print zs\n-// lldbg-check:[...]$1 = StructWithZeroSizedField { x: ZeroSizedStruct[...], y: 123, z: ZeroSizedStruct[...], w: 456 }\n-// lldbr-check:(issue_22656::StructWithZeroSizedField) zs = StructWithZeroSizedField { x: ZeroSizedStruct { }, y: 123, z: ZeroSizedStruct { }, w: 456 }\n+// lldbg-check:[...]$1 = { x = y = 123 z = w = 456 }\n+// lldbr-check:(issue_22656::StructWithZeroSizedField) zs = { x = y = 123 z = w = 456 }\n // lldbr-command:continue\n \n #![allow(unused_variables)]"}, {"sha": "c2cc6f9d24ca14d5e52dc549bd91ded3d3a07cbe", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -22,10 +22,10 @@\n // lldb-command:run\n \n // lldb-command:print g\n-// lldbg-check:(issue_57822::main::closure-1) $0 = closure-1(closure-0(1))\n+// lldbg-check:(issue_57822::main::closure-1) $0 = { 0 = { 0 = 1 } }\n \n // lldb-command:print b\n-// lldbg-check:(issue_57822::main::generator-3) $1 = generator-3(generator-2(2))\n+// lldbg-check:(issue_57822::main::generator-3) $1 = { 0 = { 0 = 2 } }\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "c764cf68323786672408c4656e6dbfe74df8110c", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -63,7 +63,7 @@\n \n // STACK BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$0 = Struct { x: 100 }\n+// lldbg-check:[...]$0 = { x = 100 }\n // lldbr-check:(method_on_struct::Struct) *self = Struct { x: 100 }\n // lldb-command:print arg1\n // lldbg-check:[...]$1 = -1\n@@ -75,7 +75,7 @@\n \n // STACK BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$3 = Struct { x: 100 }\n+// lldbg-check:[...]$3 = { x = 100 }\n // lldbr-check:(method_on_struct::Struct) self = Struct { x: 100 }\n // lldb-command:print arg1\n // lldbg-check:[...]$4 = -3\n@@ -87,7 +87,7 @@\n \n // OWNED BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$6 = Struct { x: 200 }\n+// lldbg-check:[...]$6 = { x = 200 }\n // lldbr-check:(method_on_struct::Struct) *self = Struct { x: 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$7 = -5\n@@ -99,7 +99,7 @@\n \n // OWNED BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$9 = Struct { x: 200 }\n+// lldbg-check:[...]$9 = { x = 200 }\n // lldbr-check:(method_on_struct::Struct) self = Struct { x: 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$10 = -7\n@@ -111,7 +111,7 @@\n \n // OWNED MOVED\n // lldb-command:print *self\n-// lldbg-check:[...]$12 = Struct { x: 200 }\n+// lldbg-check:[...]$12 = { x = 200 }\n // lldbr-check:(method_on_struct::Struct) *self = Struct { x: 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$13 = -9"}, {"sha": "6dcf28967776fabe12aca64c0c3b8f337ed61767", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -63,8 +63,8 @@\n \n // STACK BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$0 = Struct { x: 100 }\n-// lldbr-check:(method_on_trait::Struct) *self = Struct { x: 100 }\n+// lldbg-check:[...]$0 = { x = 100 }\n+// lldbr-check:(method_on_trait::Struct) *self = { x = 100 }\n // lldb-command:print arg1\n // lldbg-check:[...]$1 = -1\n // lldbr-check:(isize) arg1 = -1\n@@ -75,8 +75,8 @@\n \n // STACK BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$3 = Struct { x: 100 }\n-// lldbr-check:(method_on_trait::Struct) self = Struct { x: 100 }\n+// lldbg-check:[...]$3 = { x = 100 }\n+// lldbr-check:(method_on_trait::Struct) self = { x = 100 }\n // lldb-command:print arg1\n // lldbg-check:[...]$4 = -3\n // lldbr-check:(isize) arg1 = -3\n@@ -87,8 +87,8 @@\n \n // OWNED BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$6 = Struct { x: 200 }\n-// lldbr-check:(method_on_trait::Struct) *self = Struct { x: 200 }\n+// lldbg-check:[...]$6 = { x = 200 }\n+// lldbr-check:(method_on_trait::Struct) *self = { x = 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$7 = -5\n // lldbr-check:(isize) arg1 = -5\n@@ -99,8 +99,8 @@\n \n // OWNED BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$9 = Struct { x: 200 }\n-// lldbr-check:(method_on_trait::Struct) self = Struct { x: 200 }\n+// lldbg-check:[...]$9 = { x = 200 }\n+// lldbr-check:(method_on_trait::Struct) self = { x = 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$10 = -7\n // lldbr-check:(isize) arg1 = -7\n@@ -111,8 +111,8 @@\n \n // OWNED MOVED\n // lldb-command:print *self\n-// lldbg-check:[...]$12 = Struct { x: 200 }\n-// lldbr-check:(method_on_trait::Struct) *self = Struct { x: 200 }\n+// lldbg-check:[...]$12 = { x = 200 }\n+// lldbr-check:(method_on_trait::Struct) *self = { x = 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$13 = -9\n // lldbr-check:(isize) arg1 = -9"}, {"sha": "d06b606e973e8e5b5f0a263427285069f62d4188", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -63,8 +63,8 @@\n \n // STACK BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$0 = TupleStruct(100, -100.5)\n-// lldbr-check:(method_on_tuple_struct::TupleStruct) *self = TupleStruct(100, -100.5)\n+// lldbg-check:[...]$0 = { 0 = 100 1 = -100.5 }\n+// lldbr-check:(method_on_tuple_struct::TupleStruct) *self = { 0 = 100 1 = -100.5 }\n // lldb-command:print arg1\n // lldbg-check:[...]$1 = -1\n // lldbr-check:(isize) arg1 = -1\n@@ -75,8 +75,8 @@\n \n // STACK BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$3 = TupleStruct(100, -100.5)\n-// lldbr-check:(method_on_tuple_struct::TupleStruct) self = TupleStruct(100, -100.5)\n+// lldbg-check:[...]$3 = { 0 = 100 1 = -100.5 }\n+// lldbr-check:(method_on_tuple_struct::TupleStruct) self = { 0 = 100 1 = -100.5 }\n // lldb-command:print arg1\n // lldbg-check:[...]$4 = -3\n // lldbr-check:(isize) arg1 = -3\n@@ -87,8 +87,8 @@\n \n // OWNED BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$6 = TupleStruct(200, -200.5)\n-// lldbr-check:(method_on_tuple_struct::TupleStruct) *self = TupleStruct(200, -200.5)\n+// lldbg-check:[...]$6 = { 0 = 200 1 = -200.5 }\n+// lldbr-check:(method_on_tuple_struct::TupleStruct) *self = { 0 = 200 1 = -200.5 }\n // lldb-command:print arg1\n // lldbg-check:[...]$7 = -5\n // lldbr-check:(isize) arg1 = -5\n@@ -99,8 +99,8 @@\n \n // OWNED BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$9 = TupleStruct(200, -200.5)\n-// lldbr-check:(method_on_tuple_struct::TupleStruct) self = TupleStruct(200, -200.5)\n+// lldbg-check:[...]$9 = { 0 = 200 1 = -200.5 }\n+// lldbr-check:(method_on_tuple_struct::TupleStruct) self = { 0 = 200 1 = -200.5 }\n // lldb-command:print arg1\n // lldbg-check:[...]$10 = -7\n // lldbr-check:(isize) arg1 = -7\n@@ -111,8 +111,8 @@\n \n // OWNED MOVED\n // lldb-command:print *self\n-// lldbg-check:[...]$12 = TupleStruct(200, -200.5)\n-// lldbr-check:(method_on_tuple_struct::TupleStruct) *self = TupleStruct(200, -200.5)\n+// lldbg-check:[...]$12 = { 0 = 200 1 = -200.5 }\n+// lldbr-check:(method_on_tuple_struct::TupleStruct) *self = { 0 = 200 1 = -200.5 }\n // lldb-command:print arg1\n // lldbg-check:[...]$13 = -9\n // lldbr-check:(isize) arg1 = -9"}, {"sha": "380e882a0fba09ea284f2698fc407905e69816cd", "filename": "src/test/debuginfo/packed-struct-with-destructor.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -46,36 +46,36 @@\n // lldb-command:run\n \n // lldb-command:print packed\n-// lldbg-check:[...]$0 = Packed { x: 123, y: 234, z: 345 }\n-// lldbr-check:(packed_struct_with_destructor::Packed) packed = Packed { x: 123, y: 234, z: 345 }\n+// lldbg-check:[...]$0 = { x = 123 y = 234 z = 345 }\n+// lldbr-check:(packed_struct_with_destructor::Packed) packed = { x = 123 y = 234 z = 345 }\n \n // lldb-command:print packedInPacked\n-// lldbg-check:[...]$1 = PackedInPacked { a: 1111, b: Packed { x: 2222, y: 3333, z: 4444 }, c: 5555, d: Packed { x: 6666, y: 7777, z: 8888 } }\n-// lldbr-check:(packed_struct_with_destructor::PackedInPacked) packedInPacked = PackedInPacked { a: 1111, b: Packed { x: 2222, y: 3333, z: 4444 }, c: 5555, d: Packed { x: 6666, y: 7777, z: 8888 } }\n+// lldbg-check:[...]$1 = { a = 1111 b = { x = 2222 y = 3333 z = 4444 } c = 5555 d = { x = 6666 y = 7777 z = 8888 } }\n+// lldbr-check:(packed_struct_with_destructor::PackedInPacked) packedInPacked = { a = 1111 b = { x = 2222 y = 3333 z = 4444 } c = 5555 d = { x = 6666 y = 7777 z = 8888 } }\n \n // lldb-command:print packedInUnpacked\n-// lldbg-check:[...]$2 = PackedInUnpacked { a: -1111, b: Packed { x: -2222, y: -3333, z: -4444 }, c: -5555, d: Packed { x: -6666, y: -7777, z: -8888 } }\n-// lldbr-check:(packed_struct_with_destructor::PackedInUnpacked) packedInUnpacked = PackedInUnpacked { a: -1111, b: Packed { x: -2222, y: -3333, z: -4444 }, c: -5555, d: Packed { x: -6666, y: -7777, z: -8888 } }\n+// lldbg-check:[...]$2 = { a = -1111 b = { x = -2222 y = -3333 z = -4444 } c = -5555 d = { x = -6666 y = -7777 z = -8888 } }\n+// lldbr-check:(packed_struct_with_destructor::PackedInUnpacked) packedInUnpacked = { a = -1111 b = { x = -2222 y = -3333 z = -4444 } c = -5555 d = { x = -6666 y = -7777 z = -8888 } }\n \n // lldb-command:print unpackedInPacked\n-// lldbg-check:[...]$3 = UnpackedInPacked { a: 987, b: Unpacked { x: 876, y: 765, z: 654 }, c: Unpacked { x: 543, y: 432, z: 321 }, d: 210 }\n-// lldbr-check:(packed_struct_with_destructor::UnpackedInPacked) unpackedInPacked = UnpackedInPacked { a: 987, b: Unpacked { x: 876, y: 765, z: 654 }, c: Unpacked { x: 543, y: 432, z: 321 }, d: 210 }\n+// lldbg-check:[...]$3 = { a = 987 b = { x = 876 y = 765 z = 654 } c = { x = 543 y = 432 z = 321 } d = 210 }\n+// lldbr-check:(packed_struct_with_destructor::UnpackedInPacked) unpackedInPacked = { a = 987 b = { x = 876 y = 765 z = 654 } c = { x = 543 y = 432 z = 321 } d = 210 }\n \n // lldb-command:print packedInPackedWithDrop\n-// lldbg-check:[...]$4 = PackedInPackedWithDrop { a: 11, b: Packed { x: 22, y: 33, z: 44 }, c: 55, d: Packed { x: 66, y: 77, z: 88 } }\n-// lldbr-check:(packed_struct_with_destructor::PackedInPackedWithDrop) packedInPackedWithDrop = PackedInPackedWithDrop { a: 11, b: Packed { x: 22, y: 33, z: 44 }, c: 55, d: Packed { x: 66, y: 77, z: 88 } }\n+// lldbg-check:[...]$4 = { a = 11 b = { x = 22 y = 33 z = 44 } c = 55 d = { x = 66 y = 77 z = 88 } }\n+// lldbr-check:(packed_struct_with_destructor::PackedInPackedWithDrop) packedInPackedWithDrop = { a = 11 b = { x = 22 y = 33 z = 44 } c = 55 d = { x = 66 y = 77 z = 88 } }\n \n // lldb-command:print packedInUnpackedWithDrop\n-// lldbg-check:[...]$5 = PackedInUnpackedWithDrop { a: -11, b: Packed { x: -22, y: -33, z: -44 }, c: -55, d: Packed { x: -66, y: -77, z: -88 } }\n-// lldbr-check:(packed_struct_with_destructor::PackedInUnpackedWithDrop) packedInUnpackedWithDrop = PackedInUnpackedWithDrop { a: -11, b: Packed { x: -22, y: -33, z: -44 }, c: -55, d: Packed { x: -66, y: -77, z: -88 } }\n+// lldbg-check:[...]$5 = { a = -11 b = { x = -22 y = -33 z = -44 } c = -55 d = { x = -66 y = -77 z = -88 } }\n+// lldbr-check:(packed_struct_with_destructor::PackedInUnpackedWithDrop) packedInUnpackedWithDrop = { a = -11 b = { x = -22 y = -33 z = -44 } c = -55 d = { x = -66 y = -77 z = -88 } }\n \n // lldb-command:print unpackedInPackedWithDrop\n-// lldbg-check:[...]$6 = UnpackedInPackedWithDrop { a: 98, b: Unpacked { x: 87, y: 76, z: 65 }, c: Unpacked { x: 54, y: 43, z: 32 }, d: 21 }\n-// lldbr-check:(packed_struct_with_destructor::UnpackedInPackedWithDrop) unpackedInPackedWithDrop = UnpackedInPackedWithDrop { a: 98, b: Unpacked { x: 87, y: 76, z: 65 }, c: Unpacked { x: 54, y: 43, z: 32 }, d: 21 }\n+// lldbg-check:[...]$6 = { a = 98 b = { x = 87 y = 76 z = 65 } c = { x = 54 y = 43 z = 32 } d = 21 }\n+// lldbr-check:(packed_struct_with_destructor::UnpackedInPackedWithDrop) unpackedInPackedWithDrop = { a = 98 b = { x = 87 y = 76 z = 65 } c = { x = 54 y = 43 z = 32 } d = 21 }\n \n // lldb-command:print deeplyNested\n-// lldbg-check:[...]$7 = DeeplyNested { a: PackedInPacked { a: 1, b: Packed { x: 2, y: 3, z: 4 }, c: 5, d: Packed { x: 6, y: 7, z: 8 } }, b: UnpackedInPackedWithDrop { a: 9, b: Unpacked { x: 10, y: 11, z: 12 }, c: Unpacked { x: 13, y: 14, z: 15 }, d: 16 }, c: PackedInUnpacked { a: 17, b: Packed { x: 18, y: 19, z: 20 }, c: 21, d: Packed { x: 22, y: 23, z: 24 } }, d: PackedInUnpackedWithDrop { a: 25, b: Packed { x: 26, y: 27, z: 28 }, c: 29, d: Packed { x: 30, y: 31, z: 32 } }, e: UnpackedInPacked { a: 33, b: Unpacked { x: 34, y: 35, z: 36 }, c: Unpacked { x: 37, y: 38, z: 39 }, d: 40 }, f: PackedInPackedWithDrop { a: 41, b: Packed { x: 42, y: 43, z: 44 }, c: 45, d: Packed { x: 46, y: 47, z: 48 } } }\n-// lldbr-check:(packed_struct_with_destructor::DeeplyNested) deeplyNested = DeeplyNested { a: PackedInPacked { a: 1, b: Packed { x: 2, y: 3, z: 4 }, c: 5, d: Packed { x: 6, y: 7, z: 8 } }, b: UnpackedInPackedWithDrop { a: 9, b: Unpacked { x: 10, y: 11, z: 12 }, c: Unpacked { x: 13, y: 14, z: 15 }, d: 16 }, c: PackedInUnpacked { a: 17, b: Packed { x: 18, y: 19, z: 20 }, c: 21, d: Packed { x: 22, y: 23, z: 24 } }, d: PackedInUnpackedWithDrop { a: 25, b: Packed { x: 26, y: 27, z: 28 }, c: 29, d: Packed { x: 30, y: 31, z: 32 } }, e: UnpackedInPacked { a: 33, b: Unpacked { x: 34, y: 35, z: 36 }, c: Unpacked { x: 37, y: 38, z: 39 }, d: 40 }, f: PackedInPackedWithDrop { a: 41, b: Packed { x: 42, y: 43, z: 44 }, c: 45, d: Packed { x: 46, y: 47, z: 48 } } }\n+// lldbg-check:[...]$7 = { a = { a = 1 b = { x = 2 y = 3 z = 4 } c = 5 d = { x = 6 y = 7 z = 8 } } b = { a = 9 b = { x = 10 y = 11 z = 12 } c = { x = 13 y = 14 z = 15 } d = 16 } c = { a = 17 b = { x = 18 y = 19 z = 20 } c = 21 d = { x = 22 y = 23 z = 24 } } d = { a = 25 b = { x = 26 y = 27 z = 28 } c = 29 d = { x = 30 y = 31 z = 32 } } e = { a = 33 b = { x = 34 y = 35 z = 36 } c = { x = 37 y = 38 z = 39 } d = 40 } f = { a = 41 b = { x = 42 y = 43 z = 44 } c = 45 d = { x = 46 y = 47 z = 48 } } }\n+// lldbr-check:(packed_struct_with_destructor::DeeplyNested) deeplyNested = { a = { a = 1 b = { x = 2 y = 3 z = 4 } c = 5 d = { x = 6 y = 7 z = 8 } } b = { a = 9 b = { x = 10 y = 11 z = 12 } c = { x = 13 y = 14 z = 15 } d = 16 } c = { a = 17 b = { x = 18 y = 19 z = 20 } c = 21 d = { x = 22 y = 23 z = 24 } } d = { a = 25 b = { x = 26 y = 27 z = 28 } c = 29 d = { x = 30 y = 31 z = 32 } } e = { a = 33 b = { x = 34 y = 35 z = 36 } c = { x = 37 y = 38 z = 39 } d = 40 } f = { a = 41 b = { x = 42 y = 43 z = 44 } c = 45 d = { x = 46 y = 47 z = 48 } } }\n \n \n #![allow(unused_variables)]"}, {"sha": "9654847ce5de48a248429aa40894461536db62e5", "filename": "src/test/debuginfo/packed-struct.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -36,20 +36,20 @@\n // lldb-command:run\n \n // lldb-command:print packed\n-// lldbg-check:[...]$0 = Packed { x: 123, y: 234, z: 345 }\n-// lldbr-check:(packed_struct::Packed) packed = Packed { x: 123, y: 234, z: 345 }\n+// lldbg-check:[...]$0 = { x = 123 y = 234 z = 345 }\n+// lldbr-check:(packed_struct::Packed) packed = { x = 123 y = 234 z = 345 }\n \n // lldb-command:print packedInPacked\n-// lldbg-check:[...]$1 = PackedInPacked { a: 1111, b: Packed { x: 2222, y: 3333, z: 4444 }, c: 5555, d: Packed { x: 6666, y: 7777, z: 8888 } }\n-// lldbr-check:(packed_struct::PackedInPacked) packedInPacked = PackedInPacked { a: 1111, b: Packed { x: 2222, y: 3333, z: 4444 }, c: 5555, d: Packed { x: 6666, y: 7777, z: 8888 } }\n+// lldbg-check:[...]$1 = { a = 1111 b = { x = 2222 y = 3333 z = 4444 } c = 5555 d = { x = 6666 y = 7777 z = 8888 } }\n+// lldbr-check:(packed_struct::PackedInPacked) packedInPacked = { a = 1111 b = { x = 2222 y = 3333 z = 4444 } c = 5555 d = { x = 6666 y = 7777 z = 8888 } }\n \n // lldb-command:print packedInUnpacked\n-// lldbg-check:[...]$2 = PackedInUnpacked { a: -1111, b: Packed { x: -2222, y: -3333, z: -4444 }, c: -5555, d: Packed { x: -6666, y: -7777, z: -8888 } }\n-// lldbr-check:(packed_struct::PackedInUnpacked) packedInUnpacked = PackedInUnpacked { a: -1111, b: Packed { x: -2222, y: -3333, z: -4444 }, c: -5555, d: Packed { x: -6666, y: -7777, z: -8888 } }\n+// lldbg-check:[...]$2 = { a = -1111 b = { x = -2222 y = -3333 z = -4444 } c = -5555 d = { x = -6666 y = -7777 z = -8888 } }\n+// lldbr-check:(packed_struct::PackedInUnpacked) packedInUnpacked = { a = -1111 b = { x = -2222 y = -3333 z = -4444 } c = -5555 d = { x = -6666 y = -7777 z = -8888 } }\n \n // lldb-command:print unpackedInPacked\n-// lldbg-check:[...]$3 = UnpackedInPacked { a: 987, b: Unpacked { x: 876, y: 765, z: 654, w: 543 }, c: Unpacked { x: 432, y: 321, z: 210, w: 109 }, d: -98 }\n-// lldbr-check:(packed_struct::UnpackedInPacked) unpackedInPacked = UnpackedInPacked { a: 987, b: Unpacked { x: 876, y: 765, z: 654, w: 543 }, c: Unpacked { x: 432, y: 321, z: 210, w: 109 }, d: -98 }\n+// lldbg-check:[...]$3 = { a = 987 b = { x = 876 y = 765 z = 654 w = 543 } c = { x = 432 y = 321 z = 210 w = 109 } d = -98 }\n+// lldbr-check:(packed_struct::UnpackedInPacked) unpackedInPacked = { a = 987 b = { x = 876 y = 765 z = 654 w = 543 } c = { x = 432 y = 321 z = 210 w = 109 } d = -98 }\n \n // lldb-command:print sizeof(packed)\n // lldbg-check:[...]$4 = 14"}, {"sha": "2616c9465246ee5ef96497735086cf26e2961da9", "filename": "src/test/debuginfo/pretty-huge-vec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -2,19 +2,18 @@\n // ignore-freebsd: gdb package too new\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n-// min-gdb-version 7.7\n+// min-gdb-version 8.1\n // min-lldb-version: 310\n \n // === GDB TESTS ===================================================================================\n \n // gdb-command: run\n \n // gdb-command: print vec\n-// gdb-check:$1 = Vec<u8>(len: 1000000000, cap: 1000000000) = {[...]...}\n+// gdb-check:$1 = Vec(size=1000000000) = {[...]...}\n \n // gdb-command: print slice\n-// gdb-check:$2 = &[u8](len: 1000000000) = {[...]...}\n-\n+// gdb-check:$2 = &[u8] {data_ptr: [...]\"\\000\", length: 1000000000}\n \n #![allow(unused_variables)]\n "}, {"sha": "4e95a028e074948baadc3a085a515d54dc8a9edd", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -15,38 +15,76 @@\n // gdb-command: run\n \n // gdb-command: print btree_set\n-// gdb-check:$1 = BTreeSet<i32>(len: 15) = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}\n+// gdb-check:$1 = BTreeSet(size=15) = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}\n \n // gdb-command: print empty_btree_set\n-// gdb-check:$2 = BTreeSet<i32>(len: 0)\n+// gdb-check:$2 = BTreeSet(size=0)\n \n // gdb-command: print btree_map\n-// gdb-check:$3 = BTreeMap<i32, i32>(len: 15) = {[0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9, [10] = 10, [11] = 11, [12] = 12, [13] = 13, [14] = 14}\n+// gdb-check:$3 = BTreeMap(size=15) = {[0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9, [10] = 10, [11] = 11, [12] = 12, [13] = 13, [14] = 14}\n \n // gdb-command: print empty_btree_map\n-// gdb-check:$4 = BTreeMap<i32, u32>(len: 0)\n+// gdb-check:$4 = BTreeMap(size=0)\n \n // gdb-command: print option_btree_map\n-// gdb-check:$5 = BTreeMap<bool, core::option::Option<bool>>(len: 2) = {[false] = [...], [true] = [...]}\n+// gdb-check:$5 = BTreeMap(size=2) = {[false] = [...], [true] = [...]}\n // (abbreviated because both values vary wildly over gdb versions and/or linux distributions)\n \n // gdb-command: print nasty_btree_map\n-// gdb-check:$6 = BTreeMap<i32, pretty_std_collections::MyLeafNode>(len: 15) = {[0] = pretty_std_collections::MyLeafNode (0), [...]}\n+// gdb-check:$6 = BTreeMap(size=15) = {[0] = pretty_std_collections::MyLeafNode (0), [...]}\n // (abbreviated because it's boring but we need enough elements to include internal nodes)\n \n // gdb-command: print vec_deque\n-// gdb-check:$7 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n+// gdb-check:$7 = VecDeque(size=3) = {5, 3, 7}\n \n // gdb-command: print vec_deque2\n-// gdb-check:$8 = VecDeque<i32>(len: 7, cap: 8) = {2, 3, 4, 5, 6, 7, 8}\n+// gdb-check:$8 = VecDeque(size=7) = {2, 3, 4, 5, 6, 7, 8}\n+\n+// gdb-command: print hash_map\n+// gdb-check:$9 = HashMap(size=4) = {[1] = 10, [2] = 20, [3] = 30, [4] = 40}\n+\n+// gdb-command: print hash_set\n+// gdb-check:$10 = HashSet(size=4) = {1, 2, 3, 4}\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print vec_deque\n+// lldbg-check:[...]$0 = size=3 { [0] = 5 [1] = 3 [2] = 7 }\n+// lldbr-check:(alloc::collections::vec_deque::VecDeque<i32>) vec_deque = size=3 = { [0] = 5 [1] = 3 [2] = 7 }\n+\n+// lldb-command:print vec_deque2\n+// lldbg-check:[...]$1 = size=7 { [0] = 2 [1] = 3 [2] = 4 [3] = 5 [4] = 6 [5] = 7 [6] = 8 }\n+// lldbr-check:(alloc::collections::vec_deque::VecDeque<i32>) vec_deque2 = size=7 = { [0] = 2 [1] = 3 [2] = 4 [3] = 5 [4] = 6 [5] = 7 [6] = 8 }\n+\n+// lldb-command:print hash_map\n+// lldbg-check:[...]$2 = size=4 { [0] = { 0 = 1 1 = 10 } [1] = { 0 = 2 1 = 20 } [2] = { 0 = 3 1 = 30 } [3] = { 0 = 4 1 = 40 } }\n+// lldbr-check:(std::collections::hash::map::HashMap<u64, u64, [...]>) hash_map = size=4 size=4 { [0] = { 0 = 1 1 = 10 } [1] = { 0 = 2 1 = 20 } [2] = { 0 = 3 1 = 30 } [3] = { 0 = 4 1 = 40 } }\n+\n+// lldb-command:print hash_set\n+// lldbg-check:[...]$3 = size=4 { [0] = 1 [1] = 2 [2] = 3 [3] = 4 }\n+// lldbr-check:(std::collections::hash::set::HashSet<u64, [...]>) hash_set = size=4 { [0] = 1 [1] = 2 [2] = 3 [3] = 4 }\n \n #![allow(unused_variables)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n use std::collections::VecDeque;\n+use std::collections::HashMap;\n+use std::collections::HashSet;\n+use std::hash::{BuildHasherDefault, Hasher};\n \n struct MyLeafNode(i32); // helps to ensure we don't blindly replace substring \"LeafNode\"\n \n+#[derive(Default)]\n+struct SimpleHasher { hash: u64 }\n+\n+impl Hasher for SimpleHasher {\n+    fn finish(&self) -> u64 { self.hash }\n+    fn write(&mut self, bytes: &[u8]) {}\n+    fn write_u64(&mut self, i: u64) { self.hash = i }\n+}\n+\n fn main() {\n     // BTreeSet\n     let mut btree_set = BTreeSet::new();\n@@ -87,6 +125,18 @@ fn main() {\n     vec_deque2.pop_front();\n     vec_deque2.push_back(8);\n \n+    // HashMap\n+    let mut hash_map = HashMap::<u64, u64, BuildHasherDefault<SimpleHasher>>::default();\n+    for i in 1..5 {\n+        hash_map.insert(i, i * 10);\n+    }\n+\n+    // HashSet\n+    let mut hash_set = HashSet::<u64, BuildHasherDefault<SimpleHasher>>::default();\n+    for i in 1..5 {\n+        hash_set.insert(i);\n+    }\n+\n     zzz(); // #break\n }\n "}, {"sha": "57721ce103c3921706a6fe24a33d99aa0c35e463", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -61,6 +61,9 @@\n // lldb-command: print none\n // lldb-check:[...]$5 = None\n \n+// lldb-command: print os_string\n+// lldb-check:[...]$6 = \"IAMA OS string \ud83d\ude03\"[...]\n+\n \n // === CDB TESTS ==================================================================================\n "}, {"sha": "7ce004681e100ab6954382c1567ade4cf2a8a90b", "filename": "src/test/debuginfo/pretty-uninitialized-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpretty-uninitialized-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fpretty-uninitialized-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-uninitialized-vec.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -2,15 +2,15 @@\n // ignore-freebsd: gdb package too new\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n-// min-gdb-version 7.7\n+// min-gdb-version 8.1\n // min-lldb-version: 310\n \n // === GDB TESTS ===================================================================================\n \n // gdb-command: run\n \n // gdb-command: print vec\n-// gdb-check:$1 = Vec<i32>(len: [...], cap: [...])[...]\n+// gdb-check:$1 = Vec(size=[...])[...]\n \n \n #![allow(unused_variables)]"}, {"sha": "8ab8a2f9c1cbd116631734d7a292cbf3644e77ef", "filename": "src/test/debuginfo/rc_arc.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags:-g\n+\n+// min-gdb-version: 8.1\n+\n+// === GDB TESTS ==================================================================================\n+\n+// gdb-command:run\n+\n+// gdb-command:print r\n+// gdb-check:[...]$1 = Rc(strong=2, weak=1) = {value = 42, strong = 2, weak = 1}\n+// gdb-command:print a\n+// gdb-check:[...]$2 = Arc(strong=2, weak=1) = {value = 42, strong = 2, weak = 1}\n+\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print r\n+// lldb-check:[...]$0 = strong=2, weak=1 { value = 42 }\n+// lldb-command:print a\n+// lldb-check:[...]$1 = strong=2, weak=1 { data = 42 }\n+\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+fn main() {\n+    let r = Rc::new(42);\n+    let r1 = Rc::clone(&r);\n+    let w1 = Rc::downgrade(&r);\n+\n+    let a = Arc::new(42);\n+    let a1 = Arc::clone(&a);\n+    let w2 = Arc::downgrade(&a);\n+\n+    print!(\"\"); // #break\n+}"}, {"sha": "e15c08577e15a7770e2ed527efea9eb9a297ec49", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -63,7 +63,7 @@\n \n // STACK BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$0 = Struct { x: 100 }\n+// lldbg-check:[...]$0 = { x = 100 }\n // lldbr-check:(self_in_default_method::Struct) *self = Struct { x: 100 }\n // lldb-command:print arg1\n // lldbg-check:[...]$1 = -1\n@@ -75,7 +75,7 @@\n \n // STACK BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$3 = Struct { x: 100 }\n+// lldbg-check:[...]$3 = { x = 100 }\n // lldbr-check:(self_in_default_method::Struct) self = Struct { x: 100 }\n // lldb-command:print arg1\n // lldbg-check:[...]$4 = -3\n@@ -87,7 +87,7 @@\n \n // OWNED BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$6 = Struct { x: 200 }\n+// lldbg-check:[...]$6 = { x = 200 }\n // lldbr-check:(self_in_default_method::Struct) *self = Struct { x: 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$7 = -5\n@@ -99,7 +99,7 @@\n \n // OWNED BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$9 = Struct { x: 200 }\n+// lldbg-check:[...]$9 = { x = 200 }\n // lldbr-check:(self_in_default_method::Struct) self = Struct { x: 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$10 = -7\n@@ -111,7 +111,7 @@\n \n // OWNED MOVED\n // lldb-command:print *self\n-// lldbg-check:[...]$12 = Struct { x: 200 }\n+// lldbg-check:[...]$12 = { x = 200 }\n // lldbr-check:(self_in_default_method::Struct) *self = Struct { x: 200 }\n // lldb-command:print arg1\n // lldbg-check:[...]$13 = -9"}, {"sha": "7634e3247d591a3465b8fcbe9080740bcd061696", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -63,7 +63,7 @@\n \n // STACK BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$0 = Struct { x: 987 }\n+// lldbg-check:[...]$0 = { x = 987 }\n // lldbr-check:(self_in_generic_default_method::Struct) *self = Struct { x: 987 }\n // lldb-command:print arg1\n // lldbg-check:[...]$1 = -1\n@@ -75,7 +75,7 @@\n \n // STACK BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$3 = Struct { x: 987 }\n+// lldbg-check:[...]$3 = { x = 987 }\n // lldbr-check:(self_in_generic_default_method::Struct) self = Struct { x: 987 }\n // lldb-command:print arg1\n // lldbg-check:[...]$4 = -3\n@@ -87,7 +87,7 @@\n \n // OWNED BY REF\n // lldb-command:print *self\n-// lldbg-check:[...]$6 = Struct { x: 879 }\n+// lldbg-check:[...]$6 = { x = 879 }\n // lldbr-check:(self_in_generic_default_method::Struct) *self = Struct { x: 879 }\n // lldb-command:print arg1\n // lldbg-check:[...]$7 = -5\n@@ -99,7 +99,7 @@\n \n // OWNED BY VAL\n // lldb-command:print self\n-// lldbg-check:[...]$9 = Struct { x: 879 }\n+// lldbg-check:[...]$9 = { x = 879 }\n // lldbr-check:(self_in_generic_default_method::Struct) self = Struct { x: 879 }\n // lldb-command:print arg1\n // lldbg-check:[...]$10 = -7\n@@ -111,7 +111,7 @@\n \n // OWNED MOVED\n // lldb-command:print *self\n-// lldbg-check:[...]$12 = Struct { x: 879 }\n+// lldbg-check:[...]$12 = { x = 879 }\n // lldbr-check:(self_in_generic_default_method::Struct) *self = Struct { x: 879 }\n // lldb-command:print arg1\n // lldbg-check:[...]$13 = -9"}, {"sha": "49aa3bcbcaaa860eb332e0663e994f301c0f9648", "filename": "src/test/debuginfo/simple-struct.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -100,28 +100,28 @@\n // lldb-command:run\n \n // lldb-command:print no_padding16\n-// lldbg-check:[...]$0 = NoPadding16 { x: 10000, y: -10001 }\n-// lldbr-check:(simple_struct::NoPadding16) no_padding16 = NoPadding16 { x: 10000, y: -10001 }\n+// lldbg-check:[...]$0 = { x = 10000 y = -10001 }\n+// lldbr-check:(simple_struct::NoPadding16) no_padding16 = { x = 10000 y = -10001 }\n \n // lldb-command:print no_padding32\n-// lldbg-check:[...]$1 = NoPadding32 { x: -10002, y: -10003.5, z: 10004 }\n-// lldbr-check:(simple_struct::NoPadding32) no_padding32 = NoPadding32 { x: -10002, y: -10003.5, z: 10004 }\n+// lldbg-check:[...]$1 = { x = -10002 y = -10003.5 z = 10004 }\n+// lldbr-check:(simple_struct::NoPadding32) no_padding32 = { x = -10002 y = -10003.5 z = 10004 }\n \n // lldb-command:print no_padding64\n-// lldbg-check:[...]$2 = NoPadding64 { x: -10005.5, y: 10006, z: 10007 }\n-// lldbr-check:(simple_struct::NoPadding64) no_padding64 = NoPadding64 { x: -10005.5, y: 10006, z: 10007 }\n+// lldbg-check:[...]$2 = { x = -10005.5 y = 10006 z = 10007 }\n+// lldbr-check:(simple_struct::NoPadding64) no_padding64 = { x = -10005.5 y = 10006 z = 10007 }\n \n // lldb-command:print no_padding163264\n-// lldbg-check:[...]$3 = NoPadding163264 { a: -10008, b: 10009, c: 10010, d: 10011 }\n-// lldbr-check:(simple_struct::NoPadding163264) no_padding163264 = NoPadding163264 { a: -10008, b: 10009, c: 10010, d: 10011 }\n+// lldbg-check:[...]$3 = { a = -10008 b = 10009 c = 10010 d = 10011 }\n+// lldbr-check:(simple_struct::NoPadding163264) no_padding163264 = { a = -10008 b = 10009 c = 10010 d = 10011 }\n \n // lldb-command:print internal_padding\n-// lldbg-check:[...]$4 = InternalPadding { x: 10012, y: -10013 }\n-// lldbr-check:(simple_struct::InternalPadding) internal_padding = InternalPadding { x: 10012, y: -10013 }\n+// lldbg-check:[...]$4 = { x = 10012 y = -10013 }\n+// lldbr-check:(simple_struct::InternalPadding) internal_padding = { x = 10012 y = -10013 }\n \n // lldb-command:print padding_at_end\n-// lldbg-check:[...]$5 = PaddingAtEnd { x: -10014, y: 10015 }\n-// lldbr-check:(simple_struct::PaddingAtEnd) padding_at_end = PaddingAtEnd { x: -10014, y: 10015 }\n+// lldbg-check:[...]$5 = { x = -10014 y = 10015 }\n+// lldbr-check:(simple_struct::PaddingAtEnd) padding_at_end = { x = -10014 y = 10015 }\n \n #![allow(unused_variables)]\n #![allow(dead_code)]"}, {"sha": "c2db5218e68422bf5f015deea7fe8e581ab69dd7", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -100,28 +100,28 @@\n // lldb-command:run\n \n // lldb-command:print/d noPadding8\n-// lldbg-check:[...]$0 = (-100, 100)\n-// lldbr-check:((i8, u8)) noPadding8 = { = -100 -100 = 100 100 }\n+// lldbg-check:[...]$0 = { 0 = -100 1 = 100 }\n+// lldbr-check:((i8, u8)) noPadding8 = { 0 = -100 1 = 100 }\n // lldb-command:print noPadding16\n-// lldbg-check:[...]$1 = (0, 1, 2)\n-// lldbr-check:((i16, i16, u16)) noPadding16 = { = 0 = 1 = 2 }\n+// lldbg-check:[...]$1 = { 0 = 0 1 = 1 2 = 2 }\n+// lldbr-check:((i16, i16, u16)) noPadding16 = { 0 = 0 1 = 1 2 = 2 }\n // lldb-command:print noPadding32\n-// lldbg-check:[...]$2 = (3, 4.5, 5)\n-// lldbr-check:((i32, f32, u32)) noPadding32 = { = 3 = 4.5 = 5 }\n+// lldbg-check:[...]$2 = { 0 = 3 1 = 4.5 2 = 5 }\n+// lldbr-check:((i32, f32, u32)) noPadding32 = { 0 = 3 1 = 4.5 2 = 5 }\n // lldb-command:print noPadding64\n-// lldbg-check:[...]$3 = (6, 7.5, 8)\n-// lldbr-check:((i64, f64, u64)) noPadding64 = { = 6 = 7.5 = 8 }\n+// lldbg-check:[...]$3 = { 0 = 6 1 = 7.5 2 = 8 }\n+// lldbr-check:((i64, f64, u64)) noPadding64 = { 0 = 6 1 = 7.5 2 = 8 }\n \n // lldb-command:print internalPadding1\n-// lldbg-check:[...]$4 = (9, 10)\n-// lldbr-check:((i16, i32)) internalPadding1 = { = 9 = 10 }\n+// lldbg-check:[...]$4 = { 0 = 9 1 = 10 }\n+// lldbr-check:((i16, i32)) internalPadding1 = { 0 = 9 1 = 10 }\n // lldb-command:print internalPadding2\n-// lldbg-check:[...]$5 = (11, 12, 13, 14)\n-// lldbr-check:((i16, i32, u32, u64)) internalPadding2 = { = 11 = 12 = 13 = 14 }\n+// lldbg-check:[...]$5 = { 0 = 11 1 = 12 2 = 13 3 = 14 }\n+// lldbr-check:((i16, i32, u32, u64)) internalPadding2 = { 0 = 11 1 = 12 2 = 13 3 = 14 }\n \n // lldb-command:print paddingAtEnd\n-// lldbg-check:[...]$6 = (15, 16)\n-// lldbr-check:((i32, i16)) paddingAtEnd = { = 15 = 16 }\n+// lldbg-check:[...]$6 = { 0 = 15 1 = 16 }\n+// lldbr-check:((i32, i16)) paddingAtEnd = { 0 = 15 1 = 16 }\n \n #![allow(unused_variables)]\n #![allow(dead_code)]"}, {"sha": "a76a4c05d9bdd65e56da186f40a6f14f86ee199f", "filename": "src/test/debuginfo/struct-in-struct.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -25,36 +25,36 @@\n // lldb-command:run\n \n // lldb-command:print three_simple_structs\n-// lldbg-check:[...]$0 = ThreeSimpleStructs { x: Simple { x: 1 }, y: Simple { x: 2 }, z: Simple { x: 3 } }\n-// lldbr-check:(struct_in_struct::ThreeSimpleStructs) three_simple_structs = ThreeSimpleStructs { x: Simple { x: 1 }, y: Simple { x: 2 }, z: Simple { x: 3 } }\n+// lldbg-check:[...]$0 = { x = { x = 1 } y = { x = 2 } z = { x = 3 } }\n+// lldbr-check:(struct_in_struct::ThreeSimpleStructs) three_simple_structs = { x = { x = 1 } y = { x = 2 } z = { x = 3 } }\n \n // lldb-command:print internal_padding_parent\n-// lldbg-check:[...]$1 = InternalPaddingParent { x: InternalPadding { x: 4, y: 5 }, y: InternalPadding { x: 6, y: 7 }, z: InternalPadding { x: 8, y: 9 } }\n-// lldbr-check:(struct_in_struct::InternalPaddingParent) internal_padding_parent = InternalPaddingParent { x: InternalPadding { x: 4, y: 5 }, y: InternalPadding { x: 6, y: 7 }, z: InternalPadding { x: 8, y: 9 } }\n+// lldbg-check:[...]$1 = { x = { x = 4 y = 5 } y = { x = 6 y = 7 } z = { x = 8 y = 9 } }\n+// lldbr-check:(struct_in_struct::InternalPaddingParent) internal_padding_parent = { x = { x = 4 y = 5 } y = { x = 6 y = 7 } z = { x = 8 y = 9 } }\n \n // lldb-command:print padding_at_end_parent\n-// lldbg-check:[...]$2 = PaddingAtEndParent { x: PaddingAtEnd { x: 10, y: 11 }, y: PaddingAtEnd { x: 12, y: 13 }, z: PaddingAtEnd { x: 14, y: 15 } }\n-// lldbr-check:(struct_in_struct::PaddingAtEndParent) padding_at_end_parent = PaddingAtEndParent { x: PaddingAtEnd { x: 10, y: 11 }, y: PaddingAtEnd { x: 12, y: 13 }, z: PaddingAtEnd { x: 14, y: 15 } }\n+// lldbg-check:[...]$2 = { x = { x = 10 y = 11 } y = { x = 12 y = 13 } z = { x = 14 y = 15 } }\n+// lldbr-check:(struct_in_struct::PaddingAtEndParent) padding_at_end_parent = { x = { x = 10 y = 11 } y = { x = 12 y = 13 } z = { x = 14 y = 15 } }\n \n // lldb-command:print mixed\n-// lldbg-check:[...]$3 = Mixed { x: PaddingAtEnd { x: 16, y: 17 }, y: InternalPadding { x: 18, y: 19 }, z: Simple { x: 20 }, w: 21 }\n-// lldbr-check:(struct_in_struct::Mixed) mixed = Mixed { x: PaddingAtEnd { x: 16, y: 17 }, y: InternalPadding { x: 18, y: 19 }, z: Simple { x: 20 }, w: 21 }\n+// lldbg-check:[...]$3 = { x = { x = 16 y = 17 } y = { x = 18 y = 19 } z = { x = 20 } w = 21 }\n+// lldbr-check:(struct_in_struct::Mixed) mixed = { x = { x = 16 y = 17 } y = { x = 18 y = 19 } z = { x = 20 } w = 21 }\n \n // lldb-command:print bag\n-// lldbg-check:[...]$4 = Bag { x: Simple { x: 22 } }\n-// lldbr-check:(struct_in_struct::Bag) bag = Bag { x: Simple { x: 22 } }\n+// lldbg-check:[...]$4 = { x = { x = 22 } }\n+// lldbr-check:(struct_in_struct::Bag) bag = { x = { x = 22 } }\n \n // lldb-command:print bag_in_bag\n-// lldbg-check:[...]$5 = BagInBag { x: Bag { x: Simple { x: 23 } } }\n-// lldbr-check:(struct_in_struct::BagInBag) bag_in_bag = BagInBag { x: Bag { x: Simple { x: 23 } } }\n+// lldbg-check:[...]$5 = { x = { x = { x = 23 } } }\n+// lldbr-check:(struct_in_struct::BagInBag) bag_in_bag = { x = { x = { x = 23 } } }\n \n // lldb-command:print tjo\n-// lldbg-check:[...]$6 = ThatsJustOverkill { x: BagInBag { x: Bag { x: Simple { x: 24 } } } }\n-// lldbr-check:(struct_in_struct::ThatsJustOverkill) tjo = ThatsJustOverkill { x: BagInBag { x: Bag { x: Simple { x: 24 } } } }\n+// lldbg-check:[...]$6 = { x = { x = { x = { x = 24 } } } }\n+// lldbr-check:(struct_in_struct::ThatsJustOverkill) tjo = { x = { x = { x = { x = 24 } } } }\n \n // lldb-command:print tree\n-// lldbg-check:[...]$7 = Tree { x: Simple { x: 25 }, y: InternalPaddingParent { x: InternalPadding { x: 26, y: 27 }, y: InternalPadding { x: 28, y: 29 }, z: InternalPadding { x: 30, y: 31 } }, z: BagInBag { x: Bag { x: Simple { x: 32 } } } }\n-// lldbr-check:(struct_in_struct::Tree) tree = Tree { x: Simple { x: 25 }, y: InternalPaddingParent { x: InternalPadding { x: 26, y: 27 }, y: InternalPadding { x: 28, y: 29 }, z: InternalPadding { x: 30, y: 31 } }, z: BagInBag { x: Bag { x: Simple { x: 32 } } } }\n+// lldbg-check:[...]$7 = { x = { x = 25 } y = { x = { x = 26 y = 27 } y = { x = 28 y = 29 } z = { x = 30 y = 31 } } z = { x = { x = { x = 32 } } } }\n+// lldbr-check:(struct_in_struct::Tree) tree = { x = { x = 25 } y = { x = { x = 26 y = 27 } y = { x = 28 y = 29 } z = { x = 30 y = 31 } } z = { x = { x = { x = 32 } } } }\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "ebae953cb4b048db2286f433b4736b6a4c1820a0", "filename": "src/test/debuginfo/struct-with-destructor.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -28,20 +28,20 @@\n \n // lldb-command:run\n // lldb-command:print simple\n-// lldbg-check:[...]$0 = WithDestructor { x: 10, y: 20 }\n-// lldbr-check:(struct_with_destructor::WithDestructor) simple = WithDestructor { x: 10, y: 20 }\n+// lldbg-check:[...]$0 = { x = 10 y = 20 }\n+// lldbr-check:(struct_with_destructor::WithDestructor) simple = { x = 10 y = 20 }\n \n // lldb-command:print noDestructor\n-// lldbg-check:[...]$1 = NoDestructorGuarded { a: NoDestructor { x: 10, y: 20 }, guard: -1 }\n-// lldbr-check:(struct_with_destructor::NoDestructorGuarded) noDestructor = NoDestructorGuarded { a: NoDestructor { x: 10, y: 20 }, guard: -1 }\n+// lldbg-check:[...]$1 = { a = { x = 10 y = 20 } guard = -1 }\n+// lldbr-check:(struct_with_destructor::NoDestructorGuarded) noDestructor = { a = { x = 10 y = 20 } guard = -1 }\n \n // lldb-command:print withDestructor\n-// lldbg-check:[...]$2 = WithDestructorGuarded { a: WithDestructor { x: 10, y: 20 }, guard: -1 }\n-// lldbr-check:(struct_with_destructor::WithDestructorGuarded) withDestructor = WithDestructorGuarded { a: WithDestructor { x: 10, y: 20 }, guard: -1 }\n+// lldbg-check:[...]$2 = { a = { x = 10 y = 20 } guard = -1 }\n+// lldbr-check:(struct_with_destructor::WithDestructorGuarded) withDestructor = { a = { x = 10 y = 20 } guard = -1 }\n \n // lldb-command:print nested\n-// lldbg-check:[...]$3 = NestedOuter { a: NestedInner { a: WithDestructor { x: 7890, y: 9870 } } }\n-// lldbr-check:(struct_with_destructor::NestedOuter) nested = NestedOuter { a: NestedInner { a: WithDestructor { x: 7890, y: 9870 } } }\n+// lldbg-check:[...]$3 = { a = { a = { x = 7890 y = 9870 } } }\n+// lldbr-check:(struct_with_destructor::NestedOuter) nested = { a = { a = { x = 7890 y = 9870 } } }\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "e0f940ca7a1c1c0bbb16f5bb6ce8ba7dd632c902", "filename": "src/test/debuginfo/tuple-in-tuple.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -36,28 +36,28 @@\n // lldb-command:run\n \n // lldb-command:print no_padding1\n-// lldbg-check:[...]$0 = ((0, 1), 2, 3)\n-// lldbr-check:(((u32, u32), u32, u32)) no_padding1 = { = { = 0 = 1 } = 2 = 3 }\n+// lldbg-check:[...]$0 = { 0 = { 0 = 0 1 = 1 } 1 = 2 2 = 3 }\n+// lldbr-check:(((u32, u32), u32, u32)) no_padding1 = { 0 = { 0 = 0 1 = 1 } 1 = 2 2 = 3 }\n // lldb-command:print no_padding2\n-// lldbg-check:[...]$1 = (4, (5, 6), 7)\n-// lldbr-check:((u32, (u32, u32), u32)) no_padding2 = { = 4 = { = 5 = 6 } = 7 }\n+// lldbg-check:[...]$1 = { 0 = 4 1 = { 0 = 5 1 = 6 } 2 = 7 }\n+// lldbr-check:((u32, (u32, u32), u32)) no_padding2 = { 0 = 4 1 = { 0 = 5 1 = 6 } 2 = 7 }\n // lldb-command:print no_padding3\n-// lldbg-check:[...]$2 = (8, 9, (10, 11))\n-// lldbr-check:((u32, u32, (u32, u32))) no_padding3 = { = 8 = 9 = { = 10 = 11 } }\n+// lldbg-check:[...]$2 = { 0 = 8 1 = 9 2 = { 0 = 10 1 = 11 } }\n+// lldbr-check:((u32, u32, (u32, u32))) no_padding3 = { 0 = 8 1 = 9 2 = { 0 = 10 1 = 11 } }\n \n // lldb-command:print internal_padding1\n-// lldbg-check:[...]$3 = (12, (13, 14))\n-// lldbr-check:((i16, (i32, i32))) internal_padding1 = { = 12 = { = 13 = 14 } }\n+// lldbg-check:[...]$3 = { 0 = 12 1 = { 0 = 13 1 = 14 } }\n+// lldbr-check:((i16, (i32, i32))) internal_padding1 = { 0 = 12 1 = { 0 = 13 1 = 14 } }\n // lldb-command:print internal_padding2\n-// lldbg-check:[...]$4 = (15, (16, 17))\n-// lldbr-check:((i16, (i16, i32))) internal_padding2 = { = 15 = { = 16 = 17 } }\n+// lldbg-check:[...]$4 = { 0 = 15 1 = { 0 = 16 1 = 17 } }\n+// lldbr-check:((i16, (i16, i32))) internal_padding2 = { 0 = 15 1 = { 0 = 16 1 = 17 } }\n \n // lldb-command:print padding_at_end1\n-// lldbg-check:[...]$5 = (18, (19, 20))\n-// lldbr-check:((i32, (i32, i16))) padding_at_end1 = { = 18 = { = 19 = 20 } }\n+// lldbg-check:[...]$5 = { 0 = 18 1 = { 0 = 19 1 = 20 } }\n+// lldbr-check:((i32, (i32, i16))) padding_at_end1 = { 0 = 18 1 = { 0 = 19 1 = 20 } }\n // lldb-command:print padding_at_end2\n-// lldbg-check:[...]$6 = ((21, 22), 23)\n-// lldbr-check:(((i32, i16), i32)) padding_at_end2 = { = { = 21 = 22 } = 23 }\n+// lldbg-check:[...]$6 = { 0 = { 0 = 21 1 = 22 } 1 = 23 }\n+// lldbr-check:(((i32, i16), i32)) padding_at_end2 = { 0 = { 0 = 21 1 = 22 } 1 = 23 }\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "78b6e6a54dbc9da32016d7195205929499c73828", "filename": "src/test/debuginfo/tuple-struct.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -38,28 +38,28 @@\n // lldb-command:run\n \n // lldb-command:print no_padding16\n-// lldbg-check:[...]$0 = NoPadding16(10000, -10001)\n-// lldbr-check:(tuple_struct::NoPadding16) no_padding16 = { = 10000 = -10001 }\n+// lldbg-check:[...]$0 = { 0 = 10000 1 = -10001 }\n+// lldbr-check:(tuple_struct::NoPadding16) no_padding16 = { 0 = 10000 1 = -10001 }\n \n // lldb-command:print no_padding32\n-// lldbg-check:[...]$1 = NoPadding32(-10002, -10003.5, 10004)\n-// lldbr-check:(tuple_struct::NoPadding32) no_padding32 = { = -10002 = -10003.5 = 10004 }\n+// lldbg-check:[...]$1 = { 0 = -10002 1 = -10003.5 2 = 10004 }\n+// lldbr-check:(tuple_struct::NoPadding32) no_padding32 = { 0 = -10002 1 = -10003.5 2 = 10004 }\n \n // lldb-command:print no_padding64\n-// lldbg-check:[...]$2 = NoPadding64(-10005.5, 10006, 10007)\n-// lldbr-check:(tuple_struct::NoPadding64) no_padding64 = { = -10005.5 = 10006 = 10007 }\n+// lldbg-check:[...]$2 = { 0 = -10005.5 1 = 10006 2 = 10007 }\n+// lldbr-check:(tuple_struct::NoPadding64) no_padding64 = { 0 = -10005.5 1 = 10006 2 = 10007 }\n \n // lldb-command:print no_padding163264\n-// lldbg-check:[...]$3 = NoPadding163264(-10008, 10009, 10010, 10011)\n-// lldbr-check:(tuple_struct::NoPadding163264) no_padding163264 = { = -10008 = 10009 = 10010 = 10011 }\n+// lldbg-check:[...]$3 = { 0 = -10008 1 = 10009 2 = 10010 3 = 10011 }\n+// lldbr-check:(tuple_struct::NoPadding163264) no_padding163264 = { 0 = -10008 1 = 10009 2 = 10010 3 = 10011 }\n \n // lldb-command:print internal_padding\n-// lldbg-check:[...]$4 = InternalPadding(10012, -10013)\n-// lldbr-check:(tuple_struct::InternalPadding) internal_padding = { = 10012 = -10013 }\n+// lldbg-check:[...]$4 = { 0 = 10012 1 = -10013 }\n+// lldbr-check:(tuple_struct::InternalPadding) internal_padding = { 0 = 10012 1 = -10013 }\n \n // lldb-command:print padding_at_end\n-// lldbg-check:[...]$5 = PaddingAtEnd(-10014, 10015)\n-// lldbr-check:(tuple_struct::PaddingAtEnd) padding_at_end = { = -10014 = 10015 }\n+// lldbg-check:[...]$5 = { 0 = -10014 1 = 10015 }\n+// lldbr-check:(tuple_struct::PaddingAtEnd) padding_at_end = { 0 = -10014 1 = 10015 }\n \n // This test case mainly makes sure that no field names are generated for tuple structs (as opposed\n // to all fields having the name \"<unnamed_field>\"). Otherwise they are handled the same a normal"}, {"sha": "4d4b6cc96fb57e3a411633114f8852c829d61744", "filename": "src/test/debuginfo/union-smoke.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -19,13 +19,13 @@\n \n // lldb-command:run\n // lldb-command:print u\n-// lldbg-check:[...]$0 = U { a: ('\\x02', '\\x02'), b: 514 }\n-// lldbr-check:(union_smoke::U) u = { a = { = 2 = 2 } b = 514 }\n+// lldbg-check:[...]$0 = { a = { 0 = '\\x02' 1 = '\\x02' } b = 514 }\n+// lldbr-check:(union_smoke::U) u = { a = { 0 = '\\x02' 1 = '\\x02' } b = 514 }\n \n // Don't test this with rust-enabled lldb for now; see\n // https://github.com/rust-lang-nursery/lldb/issues/18\n // lldbg-command:print union_smoke::SU\n-// lldbg-check:[...]$1 = U { a: ('\\x01', '\\x01'), b: 257 }\n+// lldbg-check:[...]$1 = { a = { 0 = '\\x01' 1 = '\\x01' } b = 257 }\n \n #![allow(unused)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "8ab6d141731ea5cdf478e96890203f1c8d5bdf93", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -50,11 +50,11 @@\n // lldbg-check:[...]$1 = 2\n // lldbr-check:(isize) constant = 2\n // lldb-command:print a_struct\n-// lldbg-check:[...]$2 = Struct { a: -3, b: 4.5, c: 5 }\n-// lldbr-check:(var_captured_in_nested_closure::Struct) a_struct = Struct { a: -3, b: 4.5, c: 5 }\n+// lldbg-check:[...]$2 = { a = -3 b = 4.5 c = 5 }\n+// lldbr-check:(var_captured_in_nested_closure::Struct) a_struct = { a = -3 b = 4.5 c = 5 }\n // lldb-command:print *struct_ref\n-// lldbg-check:[...]$3 = Struct { a: -3, b: 4.5, c: 5 }\n-// lldbr-check:(var_captured_in_nested_closure::Struct) *struct_ref = Struct { a: -3, b: 4.5, c: 5 }\n+// lldbg-check:[...]$3 = { a = -3 b = 4.5 c = 5 }\n+// lldbr-check:(var_captured_in_nested_closure::Struct) *struct_ref = { a = -3 b = 4.5 c = 5 }\n // lldb-command:print *owned\n // lldbg-check:[...]$4 = 6\n // lldbr-check:(isize) *owned = 6\n@@ -70,11 +70,11 @@\n // lldbg-check:[...]$7 = 2\n // lldbr-check:(isize) constant = 2\n // lldb-command:print a_struct\n-// lldbg-check:[...]$8 = Struct { a: -3, b: 4.5, c: 5 }\n-// lldbr-check:(var_captured_in_nested_closure::Struct) a_struct = Struct { a: -3, b: 4.5, c: 5 }\n+// lldbg-check:[...]$8 = { a = -3 b = 4.5 c = 5 }\n+// lldbr-check:(var_captured_in_nested_closure::Struct) a_struct = { a = -3 b = 4.5 c = 5 }\n // lldb-command:print *struct_ref\n-// lldbg-check:[...]$9 = Struct { a: -3, b: 4.5, c: 5 }\n-// lldbr-check:(var_captured_in_nested_closure::Struct) *struct_ref = Struct { a: -3, b: 4.5, c: 5 }\n+// lldbg-check:[...]$9 = { a = -3 b = 4.5 c = 5 }\n+// lldbr-check:(var_captured_in_nested_closure::Struct) *struct_ref = { a = -3 b = 4.5 c = 5 }\n // lldb-command:print *owned\n // lldbg-check:[...]$10 = 6\n // lldbr-check:(isize) *owned = 6"}, {"sha": "bd7c2bfe2c3ffb124bdb9435918779e18e454fa1", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -27,8 +27,8 @@\n // lldbg-check:[...]$0 = 1\n // lldbr-check:(isize) constant = 1\n // lldb-command:print a_struct\n-// lldbg-check:[...]$1 = Struct { a: -2, b: 3.5, c: 4 }\n-// lldbr-check:(var_captured_in_sendable_closure::Struct) a_struct = Struct { a: -2, b: 3.5, c: 4 }\n+// lldbg-check:[...]$1 = { a = -2 b = 3.5 c = 4 }\n+// lldbr-check:(var_captured_in_sendable_closure::Struct) a_struct = { a = -2 b = 3.5 c = 4 }\n // lldb-command:print *owned\n // lldbg-check:[...]$2 = 5\n // lldbr-check:(isize) *owned = 5"}, {"sha": "f53f8aaa6701e4d14d0d09c7c63d68a51af394d1", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -46,11 +46,11 @@\n // lldbg-check:[...]$1 = 2\n // lldbr-check:(isize) constant = 2\n // lldb-command:print a_struct\n-// lldbg-check:[...]$2 = Struct { a: -3, b: 4.5, c: 5 }\n-// lldbr-check:(var_captured_in_stack_closure::Struct) a_struct = Struct { a: -3, b: 4.5, c: 5 }\n+// lldbg-check:[...]$2 = { a = -3 b = 4.5 c = 5 }\n+// lldbr-check:(var_captured_in_stack_closure::Struct) a_struct = { a = -3 b = 4.5 c = 5 }\n // lldb-command:print *struct_ref\n-// lldbg-check:[...]$3 = Struct { a: -3, b: 4.5, c: 5 }\n-// lldbr-check:(var_captured_in_stack_closure::Struct) *struct_ref = Struct { a: -3, b: 4.5, c: 5 }\n+// lldbg-check:[...]$3 = { a = -3 b = 4.5 c = 5 }\n+// lldbr-check:(var_captured_in_stack_closure::Struct) *struct_ref = { a = -3 b = 4.5 c = 5 }\n // lldb-command:print *owned\n // lldbg-check:[...]$4 = 6\n // lldbr-check:(isize) *owned = 6\n@@ -64,11 +64,11 @@\n // lldbg-check:[...]$6 = 2\n // lldbr-check:(isize) constant = 2\n // lldb-command:print a_struct\n-// lldbg-check:[...]$7 = Struct { a: -3, b: 4.5, c: 5 }\n-// lldbr-check:(var_captured_in_stack_closure::Struct) a_struct = Struct { a: -3, b: 4.5, c: 5 }\n+// lldbg-check:[...]$7 = { a = -3 b = 4.5 c = 5 }\n+// lldbr-check:(var_captured_in_stack_closure::Struct) a_struct = { a = -3 b = 4.5 c = 5 }\n // lldb-command:print *struct_ref\n-// lldbg-check:[...]$8 = Struct { a: -3, b: 4.5, c: 5 }\n-// lldbr-check:(var_captured_in_stack_closure::Struct) *struct_ref = Struct { a: -3, b: 4.5, c: 5 }\n+// lldbg-check:[...]$8 = { a = -3 b = 4.5 c = 5 }\n+// lldbr-check:(var_captured_in_stack_closure::Struct) *struct_ref = { a = -3 b = 4.5 c = 5 }\n // lldb-command:print *owned\n // lldbg-check:[...]$9 = 6\n // lldbr-check:(isize) *owned = 6"}, {"sha": "c385491bd1d53a8f7544b1855f3363b9fbc104ff", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -72,28 +72,28 @@\n // lldb-command:run\n \n // lldb-command:print empty\n-// lldbg-check:[...]$0 = &[]\n-// lldbr-check:(&[i64]) empty = &[]\n+// lldbg-check:[...]$0 = size=0\n+// lldbr-check:(&[i64]) empty = size=0\n \n // lldb-command:print singleton\n-// lldbg-check:[...]$1 = &[1]\n+// lldbg-check:[...]$1 = size=1 { [0] = 1 }\n // lldbr-check:(&[i64]) singleton = &[1]\n \n // lldb-command:print multiple\n-// lldbg-check:[...]$2 = &[2, 3, 4, 5]\n-// lldbr-check:(&[i64]) multiple = &[2, 3, 4, 5]\n+// lldbg-check:[...]$2 = size=4 { [0] = 2 [1] = 3 [2] = 4 [3] = 5 }\n+// lldbr-check:(&[i64]) multiple = size=4 { [0] = 2 [1] = 3 [2] = 4 [3] = 5 }\n \n // lldb-command:print slice_of_slice\n-// lldbg-check:[...]$3 = &[3, 4]\n-// lldbr-check:(&[i64]) slice_of_slice = &[3, 4]\n+// lldbg-check:[...]$3 = size=2 { [0] = 3 [1] = 4 }\n+// lldbr-check:(&[i64]) slice_of_slice = size=2 { [0] = 3 [1] = 4 }\n \n // lldb-command:print padded_tuple\n-// lldbg-check:[...]$4 = &[(6, 7), (8, 9)]\n-// lldbr-check:(&[(i32, i16)]) padded_tuple = { data_ptr = *[...] length = 2 }\n+// lldbg-check:[...]$4 = size=2 { [0] = { 0 = 6 1 = 7 } [1] = { 0 = 8 1 = 9 } }\n+// lldbr-check:(&[(i32, i16)]) padded_tuple = size=2 { [0] = { 0 = 6 1 = 7 } [1] = { 0 = 8 1 = 9 } }\n \n // lldb-command:print padded_struct\n-// lldbg-check:[...]$5 = &[AStruct { x: 10, y: 11, z: 12 }, AStruct { x: 13, y: 14, z: 15 }]\n-// lldbr-check:(&[vec_slices::AStruct]) padded_struct = &[AStruct { x: 10, y: 11, z: 12 }, AStruct { x: 13, y: 14, z: 15 }]\n+// lldbg-check:[...]$5 = size=2 { [0] = { x = 10 y = 11 z = 12 } [1] = { x = 13 y = 14 z = 15 } }\n+// lldbr-check:(&[vec_slices::AStruct]) padded_struct = size=2 { [0] = { x = 10 y = 11 z = 12 } [1] = { x = 13 y = 14 z = 15 } }\n \n #![allow(dead_code, unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "895661816b8640960e88183587e5ea0a5e4ad746", "filename": "src/test/debuginfo/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftest%2Fdebuginfo%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -18,8 +18,8 @@\n \n // lldb-command:run\n // lldb-command:print a\n-// lldbg-check:[...]$0 = [1, 2, 3]\n-// lldbr-check:([i32; 3]) a = [1, 2, 3]\n+// lldbg-check:[...]$0 = { [0] = 1 [1] = 2 [2] = 3 }\n+// lldbr-check:([i32; 3]) a = { [0] = 1 [1] = 2 [2] = 3 }\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "93c53e779d50eb9bc48118431d6b1bae98d8e78d", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -464,11 +464,13 @@ fn common_inputs_stamp(config: &Config) -> Stamp {\n \n     // Relevant pretty printer files\n     let pretty_printer_files = [\n-        \"src/etc/debugger_pretty_printers_common.py\",\n+        \"src/etc/rust_types.py\",\n         \"src/etc/gdb_load_rust_pretty_printers.py\",\n-        \"src/etc/gdb_rust_pretty_printing.py\",\n+        \"src/etc/gdb_lookup.py\",\n+        \"src/etc/gdb_providers.py\",\n         \"src/etc/lldb_batchmode.py\",\n-        \"src/etc/lldb_rust_formatters.py\",\n+        \"src/etc/lldb_lookup.py\",\n+        \"src/etc/lldb_providers.py\",\n     ];\n     for file in &pretty_printer_files {\n         let path = rust_src_dir.join(file);"}, {"sha": "18f00db3d8e128ea86f3821de3f0b46a51b93cdb", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f315c35a77e40bd11ce81fedc0556be0f410bbf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f315c35a77e40bd11ce81fedc0556be0f410bbf4", "patch": "@@ -1079,15 +1079,38 @@ impl<'test> TestCx<'test> {\n         // Switch LLDB into \"Rust mode\"\n         let rust_src_root =\n             self.config.find_rust_src_root().expect(\"Could not find Rust source root\");\n-        let rust_pp_module_rel_path = Path::new(\"./src/etc/lldb_rust_formatters.py\");\n+        let rust_pp_module_rel_path = Path::new(\"./src/etc/lldb_lookup.py\");\n         let rust_pp_module_abs_path =\n             rust_src_root.join(rust_pp_module_rel_path).to_str().unwrap().to_owned();\n \n+        let rust_type_regexes = vec![\n+            \"^(alloc::([a-z_]+::)+)String$\",\n+            \"^&str$\",\n+            \"^&\\\\[.+\\\\]$\",\n+            \"^(std::ffi::([a-z_]+::)+)OsString$\",\n+            \"^(alloc::([a-z_]+::)+)Vec<.+>$\",\n+            \"^(alloc::([a-z_]+::)+)VecDeque<.+>$\",\n+            \"^(alloc::([a-z_]+::)+)BTreeSet<.+>$\",\n+            \"^(alloc::([a-z_]+::)+)BTreeMap<.+>$\",\n+            \"^(std::collections::([a-z_]+::)+)HashMap<.+>$\",\n+            \"^(std::collections::([a-z_]+::)+)HashSet<.+>$\",\n+            \"^(alloc::([a-z_]+::)+)Rc<.+>$\",\n+            \"^(alloc::([a-z_]+::)+)Arc<.+>$\",\n+            \"^(core::([a-z_]+::)+)Cell<.+>$\",\n+            \"^(core::([a-z_]+::)+)Ref<.+>$\",\n+            \"^(core::([a-z_]+::)+)RefMut<.+>$\",\n+            \"^(core::([a-z_]+::)+)RefCell<.+>$\",\n+        ];\n+\n         script_str\n             .push_str(&format!(\"command script import {}\\n\", &rust_pp_module_abs_path[..])[..]);\n-        script_str.push_str(\"type summary add --no-value \");\n-        script_str.push_str(\"--python-function lldb_rust_formatters.print_val \");\n-        script_str.push_str(\"-x \\\".*\\\" --category Rust\\n\");\n+        script_str.push_str(\"type synthetic add -l lldb_lookup.synthetic_lookup -x '.*' \");\n+        script_str.push_str(\"--category Rust\\n\");\n+        for type_regex in rust_type_regexes {\n+            script_str.push_str(\"type summary add -F lldb_lookup.summary_lookup  -e -x -h \");\n+            script_str.push_str(&format!(\"'{}' \", type_regex));\n+            script_str.push_str(\"--category Rust\\n\");\n+        }\n         script_str.push_str(\"type category enable Rust\\n\");\n \n         // Set breakpoints on every line that contains the string \"#break\""}]}