{"sha": "c599e2fcfaaedb12b560f4136bab3d0b450acf8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTllMmZjZmFhZWRiMTJiNTYwZjQxMzZiYWIzZDBiNDUwYWNmOGY=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-06-10T03:05:51Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-24T21:02:05Z"}, "message": "Split VarState", "tree": {"sha": "045366bfba534dba2967d0016ab15649033205eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045366bfba534dba2967d0016ab15649033205eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c599e2fcfaaedb12b560f4136bab3d0b450acf8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c599e2fcfaaedb12b560f4136bab3d0b450acf8f", "html_url": "https://github.com/rust-lang/rust/commit/c599e2fcfaaedb12b560f4136bab3d0b450acf8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c599e2fcfaaedb12b560f4136bab3d0b450acf8f/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31cb1109648bf4242cab47571343578244e7fb9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/31cb1109648bf4242cab47571343578244e7fb9d", "html_url": "https://github.com/rust-lang/rust/commit/31cb1109648bf4242cab47571343578244e7fb9d"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "2b7830e7cadb2c1220df20abe126d82c21981dca", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 48, "deletions": 39, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c599e2fcfaaedb12b560f4136bab3d0b450acf8f/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c599e2fcfaaedb12b560f4136bab3d0b450acf8f/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c599e2fcfaaedb12b560f4136bab3d0b450acf8f", "patch": "@@ -2107,23 +2107,18 @@ fn is_simple_break_expr(expr: &Expr<'_>) -> bool {\n     }\n }\n \n-// To trigger the EXPLICIT_COUNTER_LOOP lint, a variable must be\n-// incremented exactly once in the loop body, and initialized to zero\n-// at the start of the loop.\n #[derive(Debug, PartialEq)]\n-enum VarState {\n+enum IncrementVisitorVarState {\n     Initial,  // Not examined yet\n     IncrOnce, // Incremented exactly once, may be a loop counter\n-    Declared, // Declared but not (yet) initialized to zero\n-    Warn,\n     DontWarn,\n }\n \n /// Scan a for loop for variables that are incremented exactly once and not used after that.\n struct IncrementVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,          // context reference\n-    states: FxHashMap<HirId, VarState>, // incremented variables\n-    depth: u32,                         // depth of conditional expressions\n+    cx: &'a LateContext<'tcx>,                          // context reference\n+    states: FxHashMap<HirId, IncrementVisitorVarState>, // incremented variables\n+    depth: u32,                                         // depth of conditional expressions\n     done: bool,\n }\n \n@@ -2140,7 +2135,7 @@ impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n     fn into_results(self) -> impl Iterator<Item = HirId> {\n         self.states\n             .into_iter()\n-            .filter(|(_, state)| *state == VarState::IncrOnce)\n+            .filter(|(_, state)| *state == IncrementVisitorVarState::IncrOnce)\n             .map(|(id, _)| id)\n     }\n }\n@@ -2156,9 +2151,9 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n         // If node is a variable\n         if let Some(def_id) = var_def_id(self.cx, expr) {\n             if let Some(parent) = get_parent_expr(self.cx, expr) {\n-                let state = self.states.entry(def_id).or_insert(VarState::Initial);\n-                if *state == VarState::IncrOnce {\n-                    *state = VarState::DontWarn;\n+                let state = self.states.entry(def_id).or_insert(IncrementVisitorVarState::Initial);\n+                if *state == IncrementVisitorVarState::IncrOnce {\n+                    *state = IncrementVisitorVarState::DontWarn;\n                     return;\n                 }\n \n@@ -2167,19 +2162,21 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                         if lhs.hir_id == expr.hir_id {\n                             *state = if op.node == BinOpKind::Add\n                                 && is_integer_const(self.cx, rhs, 1)\n-                                && *state == VarState::Initial\n+                                && *state == IncrementVisitorVarState::Initial\n                                 && self.depth == 0\n                             {\n-                                VarState::IncrOnce\n+                                IncrementVisitorVarState::IncrOnce\n                             } else {\n                                 // Assigned some other value or assigned multiple times\n-                                VarState::DontWarn\n+                                IncrementVisitorVarState::DontWarn\n                             };\n                         }\n                     },\n-                    ExprKind::Assign(ref lhs, _, _) if lhs.hir_id == expr.hir_id => *state = VarState::DontWarn,\n+                    ExprKind::Assign(ref lhs, _, _) if lhs.hir_id == expr.hir_id => {\n+                        *state = IncrementVisitorVarState::DontWarn\n+                    },\n                     ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n-                        *state = VarState::DontWarn\n+                        *state = IncrementVisitorVarState::DontWarn\n                     },\n                     _ => (),\n                 }\n@@ -2201,13 +2198,20 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n     }\n }\n \n-/// Checks whether a variable is initialized to zero at the start of a loop.\n+enum InitializeVisitorState {\n+    Initial,          // Not examined yet\n+    Declared(Symbol), // Declared but not (yet) initialized\n+    Initialized { name: Symbol },\n+    DontWarn,\n+}\n+\n+/// Checks whether a variable is initialized to zero at the start of a loop and not modified\n+/// and used after the loop.\n struct InitializeVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,  // context reference\n     end_expr: &'tcx Expr<'tcx>, // the for loop. Stop scanning here.\n     var_id: HirId,\n-    state: VarState,\n-    name: Option<Symbol>,\n+    state: InitializeVisitorState,\n     depth: u32, // depth of conditional expressions\n     past_loop: bool,\n }\n@@ -2218,16 +2222,15 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n             cx,\n             end_expr,\n             var_id,\n-            state: VarState::IncrOnce,\n-            name: None,\n+            state: InitializeVisitorState::Initial,\n             depth: 0,\n             past_loop: false,\n         }\n     }\n \n     fn get_result(&self) -> Option<Name> {\n-        if self.state == VarState::Warn {\n-            self.name\n+        if let InitializeVisitorState::Initialized { name } = self.state {\n+            Some(name)\n         } else {\n             None\n         }\n@@ -2244,23 +2247,24 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n             if local.pat.hir_id == self.var_id;\n             if let PatKind::Binding(.., ident, _) = local.pat.kind;\n             then {\n-                self.name = Some(ident.name);\n                 self.state = if_chain! {\n                     if let Some(ref init) = local.init;\n                     if is_integer_const(&self.cx, init, 0);\n                     then {\n-                        VarState::Warn\n-                    } else {\n-                        VarState::Declared\n+                    InitializeVisitorState::Initialized {\n+                        name: ident.name\n                     }\n+                } else {\n+                    InitializeVisitorState::Declared(ident.name)\n                 }\n             }\n         }\n+        }\n         walk_stmt(self, stmt);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if self.state == VarState::DontWarn {\n+        if matches!(self.state, InitializeVisitorState::DontWarn) {\n             return;\n         }\n         if expr.hir_id == self.end_expr.hir_id {\n@@ -2269,39 +2273,44 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         }\n         // No need to visit expressions before the variable is\n         // declared\n-        if self.state == VarState::IncrOnce {\n+        if matches!(self.state, InitializeVisitorState::Initial) {\n             return;\n         }\n \n         // If node is the desired variable, see how it's used\n         if var_def_id(self.cx, expr) == Some(self.var_id) {\n             if self.past_loop {\n-                self.state = VarState::DontWarn;\n+                self.state = InitializeVisitorState::DontWarn;\n                 return;\n             }\n \n             if let Some(parent) = get_parent_expr(self.cx, expr) {\n                 match parent.kind {\n                     ExprKind::AssignOp(_, ref lhs, _) if lhs.hir_id == expr.hir_id => {\n-                        self.state = VarState::DontWarn;\n+                        self.state = InitializeVisitorState::DontWarn;\n                     },\n                     ExprKind::Assign(ref lhs, ref rhs, _) if lhs.hir_id == expr.hir_id => {\n-                        self.state = if is_integer_const(&self.cx, rhs, 0) && self.depth == 0 {\n-                            VarState::Warn\n-                        } else {\n-                            VarState::DontWarn\n+                        self.state = if_chain! {\n+                            if is_integer_const(&self.cx, rhs, 0) && self.depth == 0;\n+                            if let InitializeVisitorState::Declared(name)\n+                                | InitializeVisitorState::Initialized { name, ..} = self.state;\n+                            then {\n+                                InitializeVisitorState::Initialized { name }\n+                            } else {\n+                                InitializeVisitorState::DontWarn\n+                            }\n                         }\n                     },\n                     ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n-                        self.state = VarState::DontWarn\n+                        self.state = InitializeVisitorState::DontWarn\n                     },\n                     _ => (),\n                 }\n             }\n \n             walk_expr(self, expr);\n         } else if !self.past_loop && is_loop(expr) {\n-            self.state = VarState::DontWarn;\n+            self.state = InitializeVisitorState::DontWarn;\n         } else if is_conditional(expr) {\n             self.depth += 1;\n             walk_expr(self, expr);"}]}