{"sha": "6ac6c675744ecce378b13a34686bc3095e9ebc72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzZjNjc1NzQ0ZWNjZTM3OGIxM2EzNDY4NmJjMzA5NWU5ZWJjNzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T03:10:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T03:10:47Z"}, "message": "Auto merge of #77069 - sexxi-goose:closure_print_2, r=nikomatsakis\n\npretty.rs: Update Closure and Generator print\n\nMore detailed outline: https://github.com/rust-lang/project-rfc-2229/pull/17\n\nCloses: https://github.com/rust-lang/project-rfc-2229/issues/11\n\nr? `@nikomatsakis`\ncc `@eddyb` `@davidtwco` `@estebank`", "tree": {"sha": "aa312ad36bcebc359db181b343abece7a050c013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa312ad36bcebc359db181b343abece7a050c013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac6c675744ecce378b13a34686bc3095e9ebc72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac6c675744ecce378b13a34686bc3095e9ebc72", "html_url": "https://github.com/rust-lang/rust/commit/6ac6c675744ecce378b13a34686bc3095e9ebc72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac6c675744ecce378b13a34686bc3095e9ebc72/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9afb67174131c16ca111dc368d342d120824e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9afb67174131c16ca111dc368d342d120824e2", "html_url": "https://github.com/rust-lang/rust/commit/0d9afb67174131c16ca111dc368d342d120824e2"}, {"sha": "adda0cd6852b9b00b0a9cbba94ece28da6a44126", "url": "https://api.github.com/repos/rust-lang/rust/commits/adda0cd6852b9b00b0a9cbba94ece28da6a44126", "html_url": "https://github.com/rust-lang/rust/commit/adda0cd6852b9b00b0a9cbba94ece28da6a44126"}], "stats": {"total": 635, "additions": 513, "deletions": 122}, "files": [{"sha": "7b5cf681f38fb60efde2996f0eca594d81707319", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 54, "deletions": 72, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -641,104 +641,86 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Str => p!(write(\"str\")),\n             ty::Generator(did, substs, movability) => {\n+                p!(write(\"[\"));\n                 match movability {\n-                    hir::Movability::Movable => p!(write(\"[generator\")),\n-                    hir::Movability::Static => p!(write(\"[static generator\")),\n+                    hir::Movability::Movable => {}\n+                    hir::Movability::Static => p!(write(\"static \")),\n                 }\n \n-                // FIXME(eddyb) should use `def_span`.\n-                if let Some(did) = did.as_local() {\n-                    let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n-                    let span = self.tcx().hir().span(hir_id);\n-                    p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n-\n-                    if substs.as_generator().is_valid() {\n-                        let upvar_tys = substs.as_generator().upvar_tys();\n-                        let mut sep = \" \";\n-                        for (&var_id, upvar_ty) in self\n-                            .tcx()\n-                            .upvars_mentioned(did)\n-                            .as_ref()\n-                            .iter()\n-                            .flat_map(|v| v.keys())\n-                            .zip(upvar_tys)\n-                        {\n-                            p!(write(\"{}{}:\", sep, self.tcx().hir().name(var_id)), print(upvar_ty));\n-                            sep = \", \";\n-                        }\n+                if !self.tcx().sess.verbose() {\n+                    p!(write(\"generator\"));\n+                    // FIXME(eddyb) should use `def_span`.\n+                    if let Some(did) = did.as_local() {\n+                        let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n+                        let span = self.tcx().hir().span(hir_id);\n+                        p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n+                    } else {\n+                        p!(write(\"@{}\", self.tcx().def_path_str(did)));\n                     }\n                 } else {\n-                    p!(write(\"@{}\", self.tcx().def_path_str(did)));\n-\n+                    p!(print_def_path(did, substs));\n                     if substs.as_generator().is_valid() {\n-                        let upvar_tys = substs.as_generator().upvar_tys();\n-                        let mut sep = \" \";\n-                        for (index, upvar_ty) in upvar_tys.enumerate() {\n-                            p!(write(\"{}{}:\", sep, index), print(upvar_ty));\n-                            sep = \", \";\n+                        // Search for the first inference variable\n+                        p!(write(\" upvar_tys=(\"));\n+                        let mut uninferred_ty =\n+                            substs.as_generator().upvar_tys().filter(|ty| ty.is_ty_infer());\n+                        if uninferred_ty.next().is_some() {\n+                            p!(write(\"unavailable\"));\n+                        } else {\n+                            self = self.comma_sep(substs.as_generator().upvar_tys())?;\n                         }\n+                        p!(write(\")\"));\n                     }\n                 }\n \n                 if substs.as_generator().is_valid() {\n                     p!(write(\" \"), print(substs.as_generator().witness()));\n                 }\n \n-                p!(write(\"]\"))\n+                p!(write(\"]\"));\n             }\n             ty::GeneratorWitness(types) => {\n                 p!(in_binder(&types));\n             }\n             ty::Closure(did, substs) => {\n-                p!(write(\"[closure\"));\n-\n-                // FIXME(eddyb) should use `def_span`.\n-                if let Some(did) = did.as_local() {\n-                    let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n-                    if self.tcx().sess.opts.debugging_opts.span_free_formats {\n-                        p!(write(\"@\"), print_def_path(did.to_def_id(), substs));\n-                    } else {\n-                        let span = self.tcx().hir().span(hir_id);\n-                        p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n-                    }\n-\n-                    if substs.as_closure().is_valid() {\n-                        let upvar_tys = substs.as_closure().upvar_tys();\n-                        let mut sep = \" \";\n-                        for (&var_id, upvar_ty) in self\n-                            .tcx()\n-                            .upvars_mentioned(did)\n-                            .as_ref()\n-                            .iter()\n-                            .flat_map(|v| v.keys())\n-                            .zip(upvar_tys)\n-                        {\n-                            p!(write(\"{}{}:\", sep, self.tcx().hir().name(var_id)), print(upvar_ty));\n-                            sep = \", \";\n+                p!(write(\"[\"));\n+                if !self.tcx().sess.verbose() {\n+                    p!(write(\"closure\"));\n+                    // FIXME(eddyb) should use `def_span`.\n+                    if let Some(did) = did.as_local() {\n+                        let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n+                        if self.tcx().sess.opts.debugging_opts.span_free_formats {\n+                            p!(write(\"@\"), print_def_path(did.to_def_id(), substs));\n+                        } else {\n+                            let span = self.tcx().hir().span(hir_id);\n+                            p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n                         }\n+                    } else {\n+                        p!(write(\"@{}\", self.tcx().def_path_str(did)));\n                     }\n                 } else {\n-                    p!(write(\"@{}\", self.tcx().def_path_str(did)));\n-\n+                    p!(print_def_path(did, substs));\n                     if substs.as_closure().is_valid() {\n-                        let upvar_tys = substs.as_closure().upvar_tys();\n-                        let mut sep = \" \";\n-                        for (index, upvar_ty) in upvar_tys.enumerate() {\n-                            p!(write(\"{}{}:\", sep, index), print(upvar_ty));\n-                            sep = \", \";\n+                        // Search for the first inference variable\n+                        let mut uninferred_ty =\n+                            substs.as_closure().upvar_tys().filter(|ty| ty.is_ty_infer());\n+                        if uninferred_ty.next().is_some() {\n+                            // If the upvar substs contain an inference variable we haven't\n+                            // finished capture analysis.\n+                            p!(write(\" closure_substs=(unavailable)\"));\n+                        } else {\n+                            p!(write(\" closure_kind_ty=\"), print(substs.as_closure().kind_ty()));\n+                            p!(\n+                                write(\" closure_sig_as_fn_ptr_ty=\"),\n+                                print(substs.as_closure().sig_as_fn_ptr_ty())\n+                            );\n+                            p!(write(\" upvar_tys=(\"));\n+                            self = self.comma_sep(substs.as_closure().upvar_tys())?;\n+                            p!(write(\")\"));\n                         }\n                     }\n                 }\n-\n-                if self.tcx().sess.verbose() && substs.as_closure().is_valid() {\n-                    p!(write(\" closure_kind_ty=\"), print(substs.as_closure().kind_ty()));\n-                    p!(\n-                        write(\" closure_sig_as_fn_ptr_ty=\"),\n-                        print(substs.as_closure().sig_as_fn_ptr_ty())\n-                    );\n-                }\n-\n-                p!(write(\"]\"))\n+                p!(write(\"]\"));\n             }\n             ty::Array(ty, sz) => {\n                 p!(write(\"[\"), print(ty), write(\"; \"));"}, {"sha": "5138b50c9f0050fbd80cc97775c839c37e7331cd", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -4,10 +4,10 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n     debug t => _1;                       // in scope 0 at $DIR/inline-closure-captures.rs:10:17: 10:18\n     debug q => _2;                       // in scope 0 at $DIR/inline-closure-captures.rs:10:23: 10:24\n     let mut _0: (i32, T);                // return place in scope 0 at $DIR/inline-closure-captures.rs:10:34: 10:42\n-    let _3: [closure@foo<T>::{closure#0} q:&i32, t:&T]; // in scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n     let mut _4: &i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n     let mut _5: &T;                      // in scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-    let mut _6: &[closure@foo<T>::{closure#0} q:&i32, t:&T]; // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:6\n+    let mut _6: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:6\n     let mut _7: (i32,);                  // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n     let mut _8: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:12:7: 12:8\n     let mut _10: i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9"}, {"sha": "e97d088cf3ed3d5a82897f0fa3727f05d63278ad", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -41,8 +41,8 @@ LL |     require_send(send_fut);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36 t:Arc<RefCell<i32>> {}]`\n-   = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36 t:Arc<RefCell<i32>> {}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36 {}]`\n+   = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36 {}]>`\n    = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future`"}, {"sha": "09c06e8428d20bbd67229239cdc9600dfe7b2814", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -7,7 +7,7 @@ LL |     |y| x + y\n    |     ^^^^^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n-                found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n+                found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14]`\n \n error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:7:13"}, {"sha": "e8a026cfab92a79f4f1149c50dd6ea3f3df1acba", "filename": "src/test/ui/borrowck/issue-53432-nested-closure-outlives-borrowed-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -4,7 +4,7 @@ error: lifetime may not live long enough\n LL |     let _action = move || {\n    |                   -------\n    |                   |     |\n-   |                   |     return type of closure is [closure@$DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:4:9: 4:15 f:&'2 [closure@$DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:2:13: 2:23]]\n+   |                   |     return type of closure is [closure@$DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:4:9: 4:15]\n    |                   lifetime `'1` represents this closure's body\n LL |         || f() // The `nested` closure\n    |         ^^^^^^ returning this value requires that `'1` must outlive `'2`"}, {"sha": "da5e25c0d18fa7061a71e23b7a46dda98fc8cace", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -11,7 +11,7 @@ LL |     F: Send + 'static,\n    |\n    = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&std::sync::mpsc::Receiver<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6]`\n \n error[E0277]: `Sender<()>` cannot be shared between threads safely\n   --> $DIR/closure-move-sync.rs:18:5\n@@ -26,7 +26,7 @@ LL |     F: Send + 'static,\n    |\n    = help: the trait `Sync` is not implemented for `Sender<()>`\n    = note: required because of the requirements on the impl of `Send` for `&Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&Sender<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "76136315a1b8b4b205d49f7fbe76012aa9b1b3cb", "filename": "src/test/ui/closures/closure-no-fn-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -7,7 +7,7 @@ LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n-                 found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50 a:_]`\n+                 found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50]`\n \n error: aborting due to previous error\n "}, {"sha": "85cbdbe7c18e1aaf92970159dc760bd22944103e", "filename": "src/test/ui/closures/closure-no-fn-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -7,7 +7,7 @@ LL |     let bar: fn() -> u8 = || { b };\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn() -> u8`\n-                 found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35 b:_]`\n+                 found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35]`\n \n error: aborting due to previous error\n "}, {"sha": "95683a786ba6a278824b6d2b468e7170559a67f4", "filename": "src/test/ui/closures/closure-no-fn-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0605]: non-primitive cast: `[closure@$DIR/closure-no-fn-3.rs:6:27: 6:37 b:_]` as `fn() -> u8`\n+error[E0605]: non-primitive cast: `[closure@$DIR/closure-no-fn-3.rs:6:27: 6:37]` as `fn() -> u8`\n   --> $DIR/closure-no-fn-3.rs:6:27\n    |\n LL |     let baz: fn() -> u8 = (|| { b }) as fn() -> u8;"}, {"sha": "77c8c7ab7948d387ef2f1d005356881fddb58cef", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -7,7 +7,7 @@ LL |     call_bare(f)\n    |               ^ expected fn pointer, found closure\n    |\n    = note: expected fn pointer `for<'r> fn(&'r str)`\n-                 found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50 string:_]`\n+                 found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50]`\n \n error: aborting due to previous error\n "}, {"sha": "bd2e31648cc5f910e0d250a4014e7937763b6752", "filename": "src/test/ui/closures/closure_cap_coerce_many_fail.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -12,7 +12,7 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n    = note: expected type `fn(i32, i32) -> i32 {add}`\n-           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:9:16: 9:43 cap:_]`\n+           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:9:16: 9:43]`\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/closure_cap_coerce_many_fail.rs:18:16\n@@ -28,7 +28,7 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n    = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n-           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:18:16: 18:43 cap:_]`\n+           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:18:16: 18:43]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n@@ -38,14 +38,14 @@ error[E0308]: `match` arms have incompatible types\n LL |       let _ = match \"+\" {\n    |  _____________-\n LL | |         \"+\" => |a, b| (a + b + cap) as i32,\n-   | |                --------------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43 cap:_]`\n+   | |                --------------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43]`\n LL | |         \"-\" => |a, b| (a - b) as i32,\n    | |                ^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43 cap:_]`\n+   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43]`\n            found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:27:16: 27:37]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n@@ -56,15 +56,15 @@ error[E0308]: `match` arms have incompatible types\n LL |       let _ = match \"+\" {\n    |  _____________-\n LL | |         \"+\" => |a, b| (a + b + cap) as i32,\n-   | |                --------------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43 cap:_]`\n+   | |                --------------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43]`\n LL | |         \"-\" => |a, b| (a - b + cap) as i32,\n    | |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43 cap:_]`\n-           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:35:16: 35:43 cap:_]`\n+   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43]`\n+           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:35:16: 35:43]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n "}, {"sha": "504b4adbeb9bc1e579c47a5ff73b0c37b0a16ce0", "filename": "src/test/ui/closures/print/closure-print-generic-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,23 @@\n+fn to_fn_once<F: FnOnce()>(f: F) -> F {\n+    f\n+}\n+\n+fn f<T: std::fmt::Display>(y: T) {\n+    struct Foo<U: std::fmt::Display> {\n+        x: U,\n+    };\n+\n+    let foo = Foo { x: \"x\" };\n+\n+    let c = to_fn_once(move || {\n+        println!(\"{} {}\", foo.x, y);\n+    });\n+\n+    c();\n+    c();\n+    //~^ ERROR use of moved value\n+}\n+\n+fn main() {\n+    f(\"S\");\n+}"}, {"sha": "43a12f675f562578e88b085cd2d62cf8a7108bbd", "filename": "src/test/ui/closures/print/closure-print-generic-1.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,20 @@\n+error[E0382]: use of moved value: `c`\n+  --> $DIR/closure-print-generic-1.rs:17:5\n+   |\n+LL |     let c = to_fn_once(move || {\n+   |         - move occurs because `c` has type `[closure@$DIR/closure-print-generic-1.rs:12:24: 14:6]`, which does not implement the `Copy` trait\n+...\n+LL |     c();\n+   |     --- `c` moved due to this call\n+LL |     c();\n+   |     ^ value used here after move\n+   |\n+note: this value implements `FnOnce`, which causes it to be moved when called\n+  --> $DIR/closure-print-generic-1.rs:16:5\n+   |\n+LL |     c();\n+   |     ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "3f77fd26b1772ca4e1265f6ab6c4209ece935efe", "filename": "src/test/ui/closures/print/closure-print-generic-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,13 @@\n+mod mod1 {\n+    pub fn f<T: std::fmt::Display>(t: T) {\n+        let x = 20;\n+\n+        let c = || println!(\"{} {}\", t, x);\n+        let c1: () = c;\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {\n+    mod1::f(5i32);\n+}"}, {"sha": "f7cfbd251b7c28831d6a87046eafe73c08c79a7f", "filename": "src/test/ui/closures/print/closure-print-generic-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-print-generic-2.rs:6:22\n+   |\n+LL |         let c = || println!(\"{} {}\", t, x);\n+   |                 -------------------------- the found closure\n+LL |         let c1: () = c;\n+   |                 --   ^ expected `()`, found closure\n+   |                 |\n+   |                 expected due to this\n+   |\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/closure-print-generic-2.rs:5:17: 5:43]`\n+help: use parentheses to call this closure\n+   |\n+LL |         let c1: () = c();\n+   |                       ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "07bf8fe4c0076c3bb229cba2db4394a9bf7ebf81", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -Ztrim-diagnostic-paths=off -Zverbose\n+\n+mod mod1 {\n+    pub fn f<T: std::fmt::Display>(t: T)\n+    {\n+        let x = 20;\n+\n+        let c = || println!(\"{} {}\", t, x);\n+        let c1 : () = c;\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {\n+    mod1::f(5i32);\n+}"}, {"sha": "7fd929221d026d54d2d30f6931cdf7dc121dd970", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-print-generic-trim-off-verbose-2.rs:9:23\n+   |\n+LL |         let c = || println!(\"{} {}\", t, x);\n+   |                 -------------------------- the found closure\n+LL |         let c1 : () = c;\n+   |                  --   ^ expected `()`, found closure\n+   |                  |\n+   |                  expected due to this\n+   |\n+   = note: expected unit type `()`\n+                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable)]`\n+help: use parentheses to call this closure\n+   |\n+LL |         let c1 : () = c();\n+   |                        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "67d37f1c59b40d36f2ca087aed5a1112c3df9835", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Zverbose\n+\n+fn to_fn_once<F:FnOnce()>(f: F) -> F { f }\n+\n+fn f<T: std::fmt::Display>(y: T) {\n+    struct Foo<U: std::fmt::Display> {\n+        x: U\n+    };\n+\n+    let foo =  Foo{ x: \"x\" };\n+\n+    let c = to_fn_once(move|| {\n+        println!(\"{} {}\", foo.x, y);\n+    });\n+\n+    c();\n+    c();\n+    //~^ ERROR use of moved value\n+}\n+\n+\n+fn main() {\n+    f(\"S\");\n+}"}, {"sha": "fdaf353fe3d22c76c09ea787d6d25ed12e9ab3af", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-1.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,20 @@\n+error[E0382]: use of moved value: `c`\n+  --> $DIR/closure-print-generic-verbose-1.rs:17:5\n+   |\n+LL |     let c = to_fn_once(move|| {\n+   |         - move occurs because `c` has type `[f<T>::{closure#0} closure_kind_ty=i32 closure_sig_as_fn_ptr_ty=extern \"rust-call\" fn(()) upvar_tys=(Foo<&'_#10r str>, T)]`, which does not implement the `Copy` trait\n+...\n+LL |     c();\n+   |     --- `c` moved due to this call\n+LL |     c();\n+   |     ^ value used here after move\n+   |\n+note: this value implements `FnOnce`, which causes it to be moved when called\n+  --> $DIR/closure-print-generic-verbose-1.rs:16:5\n+   |\n+LL |     c();\n+   |     ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "f460fedffb7fb53b137f5ad32a16609f8c07d978", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -Zverbose\n+\n+mod mod1 {\n+    pub fn f<T: std::fmt::Display>(t: T)\n+    {\n+        let x = 20;\n+\n+        let c = || println!(\"{} {}\", t, x);\n+        let c1 : () = c;\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {\n+    mod1::f(5i32);\n+}"}, {"sha": "680f6ff6792194e8eb7b9e8dfe867c1fe0b22a14", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-print-generic-verbose-2.rs:9:23\n+   |\n+LL |         let c = || println!(\"{} {}\", t, x);\n+   |                 -------------------------- the found closure\n+LL |         let c1 : () = c;\n+   |                  --   ^ expected `()`, found closure\n+   |                  |\n+   |                  expected due to this\n+   |\n+   = note: expected unit type `()`\n+                found closure `[f<T>::{closure#0} closure_substs=(unavailable)]`\n+help: use parentheses to call this closure\n+   |\n+LL |         let c1 : () = c();\n+   |                        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4b0438a91ed2e98f90ea784ad56c51bcef7b9e18", "filename": "src/test/ui/closures/print/closure-print-verbose.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Zverbose\n+\n+// Same as closure-coerce-fn-1.rs\n+\n+// Ensure that capturing closures are never coerced to fns\n+// Especially interesting as non-capturing closures can be.\n+\n+fn main() {\n+    let mut a = 0u8;\n+    let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "9e07137a24195861e1086493f1f5e3855bc0004a", "filename": "src/test/ui/closures/print/closure-print-verbose.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-print-verbose.rs:10:29\n+   |\n+LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n+   |              ------------   ^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found closure\n+   |              |\n+   |              expected due to this\n+   |\n+   = note: expected fn pointer `fn(u8) -> u8`\n+                 found closure `[main::{closure#0} closure_substs=(unavailable)]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "96a8d6d70e016affe934bbb195154e68a53d77ef", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -29,7 +29,7 @@ LL |     require_send(send_gen);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-   = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:38:5: 41:6 t:Arc<RefCell<i32>> {()}]`\n+   = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:38:5: 41:6 {()}]`\n    = note: required because it appears within the type `impl Generator`\n    = note: required because it appears within the type `impl Generator`\n    = note: required because it appears within the type `{impl Generator, ()}`"}, {"sha": "2384ed3d24972ad458192c03f22e80552aab79d6", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -9,7 +9,7 @@ LL |     assert_send(|| {\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `&Cell<i32>`\n-   = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:16:17: 20:6 a:&Cell<i32> _]`\n+   = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:16:17: 20:6 _]`\n \n error: generator cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:9:5"}, {"sha": "fe0687722b0b97d88e45de0cabe5ad528ceab797", "filename": "src/test/ui/generator/print/generator-print-verbose-1.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,60 @@\n+// compile-flags: -Zverbose\n+\n+// Same as: src/test/ui/generator/issue-68112.stderr\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::{\n+    cell::RefCell,\n+    sync::Arc,\n+    pin::Pin,\n+    ops::{Generator, GeneratorState},\n+};\n+\n+pub struct Ready<T>(Option<T>);\n+impl<T> Generator<()> for Ready<T> {\n+    type Return = T;\n+    type Yield = ();\n+    fn resume(mut self: Pin<&mut Self>, _args: ()) -> GeneratorState<(), T> {\n+        GeneratorState::Complete(self.0.take().unwrap())\n+    }\n+}\n+pub fn make_gen1<T>(t: T) -> Ready<T> {\n+    Ready(Some(t))\n+}\n+\n+fn require_send(_: impl Send) {}\n+\n+fn make_non_send_generator() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+    make_gen1(Arc::new(RefCell::new(0)))\n+}\n+\n+fn test1() {\n+    let send_gen = || {\n+        let _non_send_gen = make_non_send_generator();\n+        yield;\n+    };\n+    require_send(send_gen);\n+    //~^ ERROR generator cannot be sent between threads\n+}\n+\n+pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+    || {\n+        yield;\n+        t\n+    }\n+}\n+fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+    make_gen2(Arc::new(RefCell::new(0)))\n+}\n+\n+fn test2() {\n+    let send_gen = || {\n+        let _non_send_gen = make_non_send_generator2();\n+        yield;\n+    };\n+    require_send(send_gen);\n+    //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "b5c63584c6c1487595e14f0133b771e59951d4b0", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,40 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:37:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-1.rs:35:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `Opaque(DefId(0:24 ~ generator_print_verbose_1[317d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:56:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_gen);\n+   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n+   = note: required because it appears within the type `Opaque(DefId(0:29 ~ generator_print_verbose_1[317d]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+   = note: required because it appears within the type `Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), [])`\n+   = note: required because it appears within the type `{Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}`\n+   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d914719cb36bb7d40b072d14128a473ab130ade6", "filename": "src/test/ui/generator/print/generator-print-verbose-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Zverbose\n+\n+// Same as test/ui/generator/not-send-sync.rs\n+#![feature(generators)]\n+\n+use std::cell::Cell;\n+\n+fn main() {\n+    fn assert_sync<T: Sync>(_: T) {}\n+    fn assert_send<T: Send>(_: T) {}\n+\n+    assert_sync(|| {\n+        //~^ ERROR: generator cannot be shared between threads safely\n+        let a = Cell::new(2);\n+        yield;\n+    });\n+\n+    let a = Cell::new(2);\n+    assert_send(|| {\n+        //~^ ERROR: E0277\n+        drop(&a);\n+        yield;\n+    });\n+}"}, {"sha": "cc45d5631cb012fd5795c95e2b43c4319a5bcc3c", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,36 @@\n+error[E0277]: `Cell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:19:5\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ---- required by this bound in `assert_send`\n+...\n+LL |     assert_send(|| {\n+   |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: required because of the requirements on the impl of `Send` for `&'_#3r Cell<i32>`\n+   = note: required because it appears within the type `[main::{closure#1} upvar_tys=(&'_#3r Cell<i32>) _#16t]`\n+\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:12:5\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ---- required by this bound in `assert_sync`\n+...\n+LL |     assert_sync(|| {\n+   |     ^^^^^^^^^^^ generator is not `Sync`\n+   |\n+   = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:15:9\n+   |\n+LL |         let a = Cell::new(2);\n+   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |     });\n+   |     - `a` is later dropped here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8689539ec8ebb7611923d94407d39752d0531bd8", "filename": "src/test/ui/generator/print/generator-print-verbose-3.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.rs?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Zverbose\n+\n+#![feature(generators, generator_trait)]\n+\n+fn main() {\n+    let x = \"Type mismatch test\";\n+    let generator :() = || {\n+    //~^ ERROR mismatched types\n+        yield 1i32;\n+        return x\n+    };\n+}"}, {"sha": "0ce108dfd62065a1a2b1bc2e9d7ba123307c2958", "filename": "src/test/ui/generator/print/generator-print-verbose-3.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-3.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/generator-print-verbose-3.rs:7:25\n+   |\n+LL |       let generator :() = || {\n+   |  ____________________--___^\n+   | |                    |\n+   | |                    expected due to this\n+LL | |\n+LL | |         yield 1i32;\n+LL | |         return x\n+LL | |     };\n+   | |_____^ expected `()`, found generator\n+   |\n+   = note: expected unit type `()`\n+              found generator `[main::{closure#0} upvar_tys=(unavailable) _#5t]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6b2b8248a4f21c71f3c15d9280fab58148ebd360", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -11,7 +11,7 @@ LL |     send(before());\n    |     ^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22 p:Rc<Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n    = note: required because it appears within the type `impl Fn<(i32,)>`\n \n error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n@@ -27,7 +27,7 @@ LL | fn after() -> impl Fn(i32) {\n    |               ------------ within this `impl Fn<(i32,)>`\n    |\n    = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22 p:Rc<Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22]`\n    = note: required because it appears within the type `impl Fn<(i32,)>`\n \n error: aborting due to 2 previous errors"}, {"sha": "0f89ec2475ccb59b5aa94d2cb89a942a9b3217b1", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -54,7 +54,7 @@ LL |   fn closure_capture() -> impl Sized {\n LL | /     move || {\n LL | |         x;\n LL | |     }\n-   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:35:5: 37:6 x:impl Sized]`\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:35:5: 37:6]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:40:29\n@@ -65,7 +65,7 @@ LL |   fn closure_ref_capture() -> impl Sized {\n LL | /     move || {\n LL | |         &x;\n LL | |     }\n-   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:43:5: 45:6 x:impl Sized]`\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:43:5: 45:6]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:48:21\n@@ -95,7 +95,7 @@ LL | /     move || {\n LL | |         yield;\n LL | |         x;\n LL | |     }\n-   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:61:5: 64:6 x:impl Sized {()}]`\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:61:5: 64:6 {()}]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:67:35"}, {"sha": "dd43da11664453e0108bbac3f294459934adf965", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -12,7 +12,7 @@ LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `Cell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `&Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35 x:&Cell<i32>]`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35]`\n \n error: aborting due to previous error\n "}, {"sha": "e1559ab2feaa7eccfa76648dce90d266d2662314", "filename": "src/test/ui/issues/issue-12127.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -11,7 +11,7 @@ note: this value implements `FnOnce`, which causes it to be moved when called\n    |\n LL |         f();\n    |         ^\n-   = note: move occurs because `f` has type `[closure@$DIR/issue-12127.rs:8:24: 8:41 x:Box<isize>]`, which does not implement the `Copy` trait\n+   = note: move occurs because `f` has type `[closure@$DIR/issue-12127.rs:8:24: 8:41]`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "818e004ffc8e6e471f75262ee3d2867464c68a7f", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]> as Iterator>::Item == &_`\n+error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]> as Iterator>::Item == &_`\n   --> $DIR/issue-31173.rs:10:10\n    |\n LL |         .cloned()\n@@ -7,11 +7,11 @@ LL |         .cloned()\n    = note:   expected type `u8`\n            found reference `&_`\n \n-error[E0599]: no method named `collect` found for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>` in the current scope\n+error[E0599]: no method named `collect` found for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>` in the current scope\n   --> $DIR/issue-31173.rs:14:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method not found in `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>`\n+   |          ^^^^^^^ method not found in `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>`\n    | \n   ::: $SRC_DIR/core/src/iter/adapters/mod.rs:LL:COL\n    |\n@@ -22,10 +22,10 @@ LL | pub struct TakeWhile<I, P> {\n    | -------------------------- doesn't satisfy `<_ as Iterator>::Item = &_`\n    |\n    = note: the method `collect` exists but the following trait bounds were not satisfied:\n-           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]> as Iterator>::Item = &_`\n-           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>: Iterator`\n-           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>: Iterator`\n-           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>: Iterator`\n+           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]> as Iterator>::Item = &_`\n+           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>: Iterator`\n+           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>: Iterator`\n+           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c7d67a991bffc3164fdd28bab5e76b666268e195", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -5,12 +5,12 @@ LL | fn bar<F:FnOnce() + Send>(_: F) { }\n    |                     ---- required by this bound in `bar`\n ...\n LL |     bar(move|| foo(x));\n-   |     ^^^ ------------- within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:Rc<usize>]`\n+   |     ^^^ ------------- within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`\n    |     |\n    |     `Rc<usize>` cannot be sent between threads safely\n    |\n-   = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:Rc<usize>]`, the trait `Send` is not implemented for `Rc<usize>`\n-   = note: required because it appears within the type `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:Rc<usize>]`\n+   = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`, the trait `Send` is not implemented for `Rc<usize>`\n+   = note: required because it appears within the type `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`\n \n error: aborting due to previous error\n "}, {"sha": "ef7fb4ad7b266ee7dbb26a1eadeaefdcb939b70a", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -9,17 +9,17 @@ LL | |\n LL | |         let y = x;\n LL | |         println!(\"{:?}\", y);\n LL | |     });\n-   | |_____- within this `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:Foo]`\n+   | |_____- within this `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n    | \n   ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n LL |       F: Send + 'static,\n    |          ---- required by this bound in `spawn`\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:Foo]`, the trait `Send` is not implemented for `Rc<()>`\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`, the trait `Send` is not implemented for `Rc<()>`\n    = note: required because it appears within the type `Port<()>`\n    = note: required because it appears within the type `Foo`\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:Foo]`\n+   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n \n error: aborting due to previous error\n "}, {"sha": "a62c21f2ee97168d4031711f53cb05f1c34e0478", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -1,16 +1,16 @@\n-error[E0277]: the trait bound `S: Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n+error[E0277]: the trait bound `S: Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n   --> $DIR/not-clone-closure.rs:11:23\n    |\n LL |       let hello = move || {\n    |  _________________-\n LL | |         println!(\"Hello {}\", a.0);\n LL | |     };\n-   | |_____- within this `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n+   | |_____- within this `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n LL | \n LL |       let hello = hello.clone();\n-   |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`, the trait `Clone` is not implemented for `S`\n+   |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |\n-   = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n+   = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n \n error: aborting due to previous error\n "}, {"sha": "ab1fa2a4d87656b6702a1308258016f1d46cb5a6", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -33,7 +33,7 @@ LL |     let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n    |         ----- captured outer variable\n ...\n LL |         foo(f);\n-   |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 54:6 s:String]`, which does not implement the `Copy` trait\n+   |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 54:6]`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:55:16"}, {"sha": "69e95efa72d5043a426e72903445dec62f505cb1", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6c675744ecce378b13a34686bc3095e9ebc72/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=6ac6c675744ecce378b13a34686bc3095e9ebc72", "patch": "@@ -41,7 +41,7 @@ LL | |\n LL | | where\n LL | |     G: Get<T>\n    | |_____________^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:30:5: 32:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:30:5: 32:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:25:37\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n@@ -65,7 +65,7 @@ LL | |\n LL | | where\n LL | |     G: Get<T>\n    | |_____________^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:52:5: 54:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:52:5: 54:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n@@ -86,7 +86,7 @@ note: the parameter type `G` must be valid for the anonymous lifetime #1 defined\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:61:9: 63:10 g:G, dest:&mut T]` will meet its required lifetime bounds\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:61:9: 63:10]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n@@ -108,7 +108,7 @@ error[E0309]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:79:44\n    |\n LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:84:5: 86:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n+   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:84:5: 86:6]` will meet its required lifetime bounds\n    |            |\n    |            help: consider adding an explicit lifetime bound...: `G: 'a`\n "}]}