{"sha": "17a47a830bee9498874f17f2dc1cb688f8683a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTQ3YTgzMGJlZTk0OTg4NzRmMTdmMmRjMWNiNjg4Zjg2ODNhNjY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-30T14:46:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-30T14:46:06Z"}, "message": "Add replace_char_with_string assist", "tree": {"sha": "1ebd15e87dc34f2ec8db71422771696f6a6590f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ebd15e87dc34f2ec8db71422771696f6a6590f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a47a830bee9498874f17f2dc1cb688f8683a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a47a830bee9498874f17f2dc1cb688f8683a66", "html_url": "https://github.com/rust-lang/rust/commit/17a47a830bee9498874f17f2dc1cb688f8683a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a47a830bee9498874f17f2dc1cb688f8683a66/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54db97af455e31e37505d48528822e79cd02d122", "url": "https://api.github.com/repos/rust-lang/rust/commits/54db97af455e31e37505d48528822e79cd02d122", "html_url": "https://github.com/rust-lang/rust/commit/54db97af455e31e37505d48528822e79cd02d122"}], "stats": {"total": 208, "additions": 171, "deletions": 37}, "files": [{"sha": "a53f865a5e14ec3f849fb67c06097d6f8aa8eb32", "filename": "crates/ide_assists/src/handlers/replace_string_with_char.rs", "status": "modified", "additions": 153, "deletions": 37, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/17a47a830bee9498874f17f2dc1cb688f8683a66/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a47a830bee9498874f17f2dc1cb688f8683a66/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=17a47a830bee9498874f17f2dc1cb688f8683a66", "patch": "@@ -1,10 +1,16 @@\n-use syntax::{ast, ast::IsString, AstToken, SyntaxKind::STRING};\n+use syntax::{\n+    ast,\n+    ast::IsString,\n+    AstToken,\n+    SyntaxKind::{CHAR, STRING},\n+    TextRange, TextSize,\n+};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_string_with_char\n //\n-// Replace string with char.\n+// Replace string literal with char literal.\n //\n // ```\n // fn main() {\n@@ -33,31 +39,56 @@ pub(crate) fn replace_string_with_char(acc: &mut Assists, ctx: &AssistContext) -\n         target,\n         |edit| {\n             let (left, right) = quote_offets.quotes;\n-            edit.replace(left, String::from('\\''));\n-            edit.replace(right, String::from('\\''));\n+            edit.replace(left, '\\'');\n+            edit.replace(right, '\\'');\n+            if value == \"'\" {\n+                edit.insert(left.end(), '\\\\');\n+            }\n+        },\n+    )\n+}\n+\n+// Assist: replace_char_with_string\n+//\n+// Replace a char literal with a string literal.\n+//\n+// ```\n+// fn main() {\n+//     find('{$0');\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     find(\"{\");\n+// }\n+// ```\n+pub(crate) fn replace_char_with_string(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let token = ctx.find_token_syntax_at_offset(CHAR)?;\n+    let target = token.text_range();\n+\n+    acc.add(\n+        AssistId(\"replace_char_with_string\", AssistKind::RefactorRewrite),\n+        \"Replace char with string\",\n+        target,\n+        |edit| {\n+            if token.text() == \"'\\\"'\" {\n+                edit.replace(token.text_range(), r#\"\"\\\"\"\"#);\n+            } else {\n+                let len = TextSize::of('\\'');\n+                edit.replace(TextRange::at(target.start(), len), '\"');\n+                edit.replace(TextRange::at(target.end() - len, len), '\"');\n+            }\n         },\n     )\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n-    #[test]\n-    fn replace_string_with_char_target() {\n-        check_assist_target(\n-            replace_string_with_char,\n-            r#\"\n-fn f() {\n-    let s = \"$0c\";\n-}\n-\"#,\n-            r#\"\"c\"\"#,\n-        );\n-    }\n-\n     #[test]\n     fn replace_string_with_char_assist() {\n         check_assist(\n@@ -76,7 +107,7 @@ fn f() {\n     }\n \n     #[test]\n-    fn replace_string_with_char_assist_with_emoji() {\n+    fn replace_string_with_char_assist_with_multi_byte_char() {\n         check_assist(\n             replace_string_with_char,\n             r#\"\n@@ -93,7 +124,7 @@ fn f() {\n     }\n \n     #[test]\n-    fn replace_string_with_char_assist_not_applicable() {\n+    fn replace_string_with_char_multiple_chars() {\n         check_assist_not_applicable(\n             replace_string_with_char,\n             r#\"\n@@ -121,23 +152,6 @@ fn f() {\n         )\n     }\n \n-    #[test]\n-    fn replace_string_with_char_works_func_args() {\n-        check_assist(\n-            replace_string_with_char,\n-            r#\"\n-fn f() {\n-    find($0\"x\");\n-}\n-\"#,\n-            r##\"\n-fn f() {\n-    find('x');\n-}\n-\"##,\n-        )\n-    }\n-\n     #[test]\n     fn replace_string_with_char_newline() {\n         check_assist(\n@@ -188,4 +202,106 @@ fn f() {\n \"##,\n         )\n     }\n+\n+    #[test]\n+    fn replace_char_with_string_assist() {\n+        check_assist(\n+            replace_char_with_string,\n+            r\"\n+fn f() {\n+    let s = '$0c';\n+}\n+\",\n+            r#\"\n+fn f() {\n+    let s = \"c\";\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_char_with_string_assist_with_multi_byte_char() {\n+        check_assist(\n+            replace_char_with_string,\n+            r\"\n+fn f() {\n+    let s = '$0\ud83d\ude00';\n+}\n+\",\n+            r#\"\n+fn f() {\n+    let s = \"\ud83d\ude00\";\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_char_with_string_newline() {\n+        check_assist(\n+            replace_char_with_string,\n+            r\"\n+fn f() {\n+    find($0'\\n');\n+}\n+\",\n+            r#\"\n+fn f() {\n+    find(\"\\n\");\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_char_with_string_unicode_escape() {\n+        check_assist(\n+            replace_char_with_string,\n+            r\"\n+fn f() {\n+    find($0'\\u{7FFF}');\n+}\n+\",\n+            r#\"\n+fn f() {\n+    find(\"\\u{7FFF}\");\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_char_with_string_quote() {\n+        check_assist(\n+            replace_char_with_string,\n+            r#\"\n+fn f() {\n+    find($0'\"');\n+}\n+\"#,\n+            r#\"\n+fn f() {\n+    find(\"\\\"\");\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_quote() {\n+        check_assist(\n+            replace_string_with_char,\n+            r#\"\n+fn f() {\n+    find($0\"'\");\n+}\n+\"#,\n+            r#\"\n+fn f() {\n+    find('\\'');\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "14bf565e5656097fae99fa2069c9913559ef5154", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17a47a830bee9498874f17f2dc1cb688f8683a66/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a47a830bee9498874f17f2dc1cb688f8683a66/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=17a47a830bee9498874f17f2dc1cb688f8683a66", "patch": "@@ -194,6 +194,7 @@ mod handlers {\n             add_missing_impl_members::add_missing_default_members,\n             //\n             replace_string_with_char::replace_string_with_char,\n+            replace_string_with_char::replace_char_with_string,\n             raw_string::make_raw_string,\n             //\n             extract_variable::extract_variable,"}, {"sha": "ebf312aa3f8e0f3865859c7164710d7027791d9e", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/17a47a830bee9498874f17f2dc1cb688f8683a66/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a47a830bee9498874f17f2dc1cb688f8683a66/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=17a47a830bee9498874f17f2dc1cb688f8683a66", "patch": "@@ -1331,6 +1331,23 @@ impl Foo for Bar {\n     )\n }\n \n+#[test]\n+fn doctest_replace_char_with_string() {\n+    check_doc_test(\n+        \"replace_char_with_string\",\n+        r#####\"\n+fn main() {\n+    find('{$0');\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    find(\"{\");\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_derive_with_manual_impl() {\n     check_doc_test("}]}