{"sha": "0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc", "node_id": "C_kwDOAAsO6NoAKDA0NjhhMDBhZTNmZDZlZjFhNmEwZjllYWY2MzdkN2FhOWU2MDRhY2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T20:47:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T20:47:14Z"}, "message": "Auto merge of #105145 - Ayush1325:sequential-remote-server, r=Mark-Simulacrum\n\nAdd batch flag to remote-test-server\n\nWhen using this flag, the stdout and stderr are sent in a single batch instead of being streamed. It also used `Command::output` instead of `Command::spawn`. This is useful for targets that might support std but not threading (Eg: UEFI).\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "dbff8d728d0381ab068fc35c4704a435e8015226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbff8d728d0381ab068fc35c4704a435e8015226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc", "html_url": "https://github.com/rust-lang/rust/commit/0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d76a9df5d040e8dfcb23e01fc3847c628d833e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d76a9df5d040e8dfcb23e01fc3847c628d833e4", "html_url": "https://github.com/rust-lang/rust/commit/2d76a9df5d040e8dfcb23e01fc3847c628d833e4"}, {"sha": "2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf", "html_url": "https://github.com/rust-lang/rust/commit/2bb6bd6546a4ad3bafaefd1ffb48f265a4f37bcf"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "c1450aedc31406edb76091c475999f6d7b109487", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc", "patch": "@@ -46,6 +46,7 @@ const NUMBER_OF_RETRIES: usize = 5;\n struct Config {\n     verbose: bool,\n     sequential: bool,\n+    batch: bool,\n     bind: SocketAddr,\n }\n \n@@ -54,6 +55,7 @@ impl Config {\n         Config {\n             verbose: false,\n             sequential: false,\n+            batch: false,\n             bind: if cfg!(target_os = \"android\") || cfg!(windows) {\n                 ([0, 0, 0, 0], 12345).into()\n             } else {\n@@ -75,6 +77,7 @@ impl Config {\n                 }\n                 \"--bind\" => next_is_bind = true,\n                 \"--sequential\" => config.sequential = true,\n+                \"--batch\" => config.batch = true,\n                 \"--verbose\" | \"-v\" => config.verbose = true,\n                 \"--help\" | \"-h\" => {\n                     show_help();\n@@ -100,6 +103,7 @@ fn show_help() {\n OPTIONS:\n     --bind <IP>:<PORT>   Specify IP address and port to listen for requests, e.g. \"0.0.0.0:12345\"\n     --sequential         Run only one test at a time\n+    --batch              Send stdout and stderr in batch instead of streaming\n     -v, --verbose        Show status messages\n     -h, --help           Show this help screen\n \"#,\n@@ -280,22 +284,30 @@ fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>, conf\n     // Some tests assume RUST_TEST_TMPDIR exists\n     cmd.env(\"RUST_TEST_TMPDIR\", tmp.to_owned());\n \n-    // Spawn the child and ferry over stdout/stderr to the socket in a framed\n-    // fashion (poor man's style)\n-    let mut child =\n-        t!(cmd.stdin(Stdio::null()).stdout(Stdio::piped()).stderr(Stdio::piped()).spawn());\n-    drop(lock);\n-    let mut stdout = child.stdout.take().unwrap();\n-    let mut stderr = child.stderr.take().unwrap();\n     let socket = Arc::new(Mutex::new(reader.into_inner()));\n-    let socket2 = socket.clone();\n-    let thread = thread::spawn(move || my_copy(&mut stdout, 0, &*socket2));\n-    my_copy(&mut stderr, 1, &*socket);\n-    thread.join().unwrap();\n \n-    // Finally send over the exit status.\n-    let status = t!(child.wait());\n+    let status = if config.batch {\n+        let child =\n+            t!(cmd.stdin(Stdio::null()).stdout(Stdio::piped()).stderr(Stdio::piped()).output());\n+        batch_copy(&child.stdout, 0, &*socket);\n+        batch_copy(&child.stderr, 1, &*socket);\n+        child.status\n+    } else {\n+        // Spawn the child and ferry over stdout/stderr to the socket in a framed\n+        // fashion (poor man's style)\n+        let mut child =\n+            t!(cmd.stdin(Stdio::null()).stdout(Stdio::piped()).stderr(Stdio::piped()).spawn());\n+        drop(lock);\n+        let mut stdout = child.stdout.take().unwrap();\n+        let mut stderr = child.stderr.take().unwrap();\n+        let socket2 = socket.clone();\n+        let thread = thread::spawn(move || my_copy(&mut stdout, 0, &*socket2));\n+        my_copy(&mut stderr, 1, &*socket);\n+        thread.join().unwrap();\n+        t!(child.wait())\n+    };\n \n+    // Finally send over the exit status.\n     let (which, code) = get_status_code(&status);\n \n     t!(socket.lock().unwrap().write_all(&[\n@@ -368,6 +380,17 @@ fn my_copy(src: &mut dyn Read, which: u8, dst: &Mutex<dyn Write>) {\n     }\n }\n \n+fn batch_copy(buf: &[u8], which: u8, dst: &Mutex<dyn Write>) {\n+    let n = buf.len();\n+    let mut dst = dst.lock().unwrap();\n+    t!(dst.write_all(&[which, (n >> 24) as u8, (n >> 16) as u8, (n >> 8) as u8, (n >> 0) as u8,]));\n+    if n > 0 {\n+        t!(dst.write_all(buf));\n+        // Marking buf finished\n+        t!(dst.write_all(&[which, 0, 0, 0, 0,]));\n+    }\n+}\n+\n fn read_u32(r: &mut dyn Read) -> u32 {\n     let mut len = [0; 4];\n     t!(r.read_exact(&mut len));"}]}