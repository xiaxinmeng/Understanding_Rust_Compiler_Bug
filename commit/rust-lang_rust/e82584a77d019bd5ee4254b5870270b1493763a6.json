{"sha": "e82584a77d019bd5ee4254b5870270b1493763a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjU4NGE3N2QwMTliZDVlZTQyNTRiNTg3MDI3MGIxNDkzNzYzYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-08T05:13:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-08T05:13:42Z"}, "message": "Auto merge of #75585 - RalfJung:demotion, r=oli-obk\n\nDo not promote &mut of a non-ZST ever\n\nSince ~pre-1.0~ 1.36, we have accepted code like this:\n```rust\nstatic mut TEST: &'static mut [i32] = {\n    let x = &mut [1,2,3];\n    x\n};\n```\nI tracked it back to https://github.com/rust-lang/rust/pull/21744, but unfortunately could not find any discussion or RFC that would explain why we thought this was a good idea. And it's not, it breaks all sorts of things -- see https://github.com/rust-lang/rust/issues/75556.\n\nTo fix https://github.com/rust-lang/rust/issues/75556, we have to stop promoting non-ZST mutable references no matter the context, which is what this PR does. It's a breaking change.\n\nNotice that this still works, since it does not rely on promotion:\n```rust\nstatic mut TEST: &'static mut [i32] = &mut [0,1,2];\n```\n\nCc `@rust-lang/wg-const-eval`", "tree": {"sha": "b604a20d6fd8c1fae5f042ea0d686e91374410d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b604a20d6fd8c1fae5f042ea0d686e91374410d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82584a77d019bd5ee4254b5870270b1493763a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82584a77d019bd5ee4254b5870270b1493763a6", "html_url": "https://github.com/rust-lang/rust/commit/e82584a77d019bd5ee4254b5870270b1493763a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82584a77d019bd5ee4254b5870270b1493763a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa79db83f6c48c032bb149fc32999f64187c6f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa79db83f6c48c032bb149fc32999f64187c6f93", "html_url": "https://github.com/rust-lang/rust/commit/fa79db83f6c48c032bb149fc32999f64187c6f93"}, {"sha": "28ddda76b730960cdfd35f188345af0299e29517", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ddda76b730960cdfd35f188345af0299e29517", "html_url": "https://github.com/rust-lang/rust/commit/28ddda76b730960cdfd35f188345af0299e29517"}], "stats": {"total": 68, "additions": 52, "deletions": 16}, "files": [{"sha": "1d2295a37dddf10bfadfef0740136e396b5c343a", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e82584a77d019bd5ee4254b5870270b1493763a6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82584a77d019bd5ee4254b5870270b1493763a6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=e82584a77d019bd5ee4254b5870270b1493763a6", "patch": "@@ -364,15 +364,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                             // In theory, any zero-sized value could be borrowed\n                             // mutably without consequences. However, only &mut []\n                             // is allowed right now, and only in functions.\n-                            if self.const_kind\n-                                == Some(hir::ConstContext::Static(hir::Mutability::Mut))\n-                            {\n-                                // Inside a `static mut`, &mut [...] is also allowed.\n-                                match ty.kind() {\n-                                    ty::Array(..) | ty::Slice(_) => {}\n-                                    _ => return Err(Unpromotable),\n-                                }\n-                            } else if let ty::Array(_, len) = ty.kind() {\n+                            if let ty::Array(_, len) = ty.kind() {\n                                 // FIXME(eddyb) the `self.is_non_const_fn` condition\n                                 // seems unnecessary, given that this is merely a ZST.\n                                 match len.try_eval_usize(self.tcx, self.param_env) {\n@@ -673,13 +665,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     // In theory, any zero-sized value could be borrowed\n                     // mutably without consequences. However, only &mut []\n                     // is allowed right now, and only in functions.\n-                    if self.const_kind == Some(hir::ConstContext::Static(hir::Mutability::Mut)) {\n-                        // Inside a `static mut`, &mut [...] is also allowed.\n-                        match ty.kind() {\n-                            ty::Array(..) | ty::Slice(_) => {}\n-                            _ => return Err(Unpromotable),\n-                        }\n-                    } else if let ty::Array(_, len) = ty.kind() {\n+                    if let ty::Array(_, len) = ty.kind() {\n                         // FIXME(eddyb): We only return `Unpromotable` for `&mut []` inside a\n                         // const context which seems unnecessary given that this is merely a ZST.\n                         match len.try_eval_usize(self.tcx, self.param_env) {"}, {"sha": "fb57c8bb93458d535413e86fd016733665bd306b", "filename": "src/test/ui/consts/promote-no-mut.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e82584a77d019bd5ee4254b5870270b1493763a6/src%2Ftest%2Fui%2Fconsts%2Fpromote-no-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82584a77d019bd5ee4254b5870270b1493763a6/src%2Ftest%2Fui%2Fconsts%2Fpromote-no-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-no-mut.rs?ref=e82584a77d019bd5ee4254b5870270b1493763a6", "patch": "@@ -0,0 +1,10 @@\n+// ignore-tidy-linelength\n+// We do not promote mutable references.\n+static mut TEST1: Option<&mut [i32]> = Some(&mut [1, 2, 3]); //~ ERROR temporary value dropped while borrowed\n+\n+static mut TEST2: &'static mut [i32] = {\n+    let x = &mut [1,2,3]; //~ ERROR temporary value dropped while borrowed\n+    x\n+};\n+\n+fn main() {}"}, {"sha": "49d96546ada3f720b5868882a01276dd72dce9ba", "filename": "src/test/ui/consts/promote-no-mut.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e82584a77d019bd5ee4254b5870270b1493763a6/src%2Ftest%2Fui%2Fconsts%2Fpromote-no-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e82584a77d019bd5ee4254b5870270b1493763a6/src%2Ftest%2Fui%2Fconsts%2Fpromote-no-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-no-mut.stderr?ref=e82584a77d019bd5ee4254b5870270b1493763a6", "patch": "@@ -0,0 +1,23 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-no-mut.rs:3:50\n+   |\n+LL | static mut TEST1: Option<&mut [i32]> = Some(&mut [1, 2, 3]);\n+   |                                        ----------^^^^^^^^^-\n+   |                                        |         |        |\n+   |                                        |         |        temporary value is freed at the end of this statement\n+   |                                        |         creates a temporary which is freed while still in use\n+   |                                        using this value as a static requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-no-mut.rs:6:18\n+   |\n+LL |     let x = &mut [1,2,3];\n+   |                  ^^^^^^^ creates a temporary which is freed while still in use\n+LL |     x\n+   |     - using this value as a static requires that borrow lasts for `'static`\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "d103c5a9d236ad29bc1522bf9e55d9a07dbcb2f9", "filename": "src/test/ui/consts/promotion-mutable-ref.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e82584a77d019bd5ee4254b5870270b1493763a6/src%2Ftest%2Fui%2Fconsts%2Fpromotion-mutable-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82584a77d019bd5ee4254b5870270b1493763a6/src%2Ftest%2Fui%2Fconsts%2Fpromotion-mutable-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromotion-mutable-ref.rs?ref=e82584a77d019bd5ee4254b5870270b1493763a6", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(const_mut_refs)]\n+\n+static mut TEST: i32 = {\n+    // We must not promote this, as CTFE needs to be able to mutate it later.\n+    let x = &mut [1,2,3];\n+    x[0] += 1;\n+    x[0]\n+};\n+\n+// This still works -- it's not done via promotion.\n+#[allow(unused)]\n+static mut TEST2: &'static mut [i32] = &mut [0,1,2];\n+\n+fn main() {\n+    assert_eq!(unsafe { TEST }, 2);\n+}"}]}