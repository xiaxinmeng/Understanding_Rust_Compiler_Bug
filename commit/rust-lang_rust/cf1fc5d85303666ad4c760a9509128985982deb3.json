{"sha": "cf1fc5d85303666ad4c760a9509128985982deb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMWZjNWQ4NTMwMzY2NmFkNGM3NjBhOTUwOTEyODk4NTk4MmRlYjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-22T08:16:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-22T08:16:16Z"}, "message": "Merge pull request #1975 from bjgill/clippy--all\n\nImplement `cargo clippy --all`", "tree": {"sha": "39762e850908dcf0b743c01ad8fd21057849473a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39762e850908dcf0b743c01ad8fd21057849473a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf1fc5d85303666ad4c760a9509128985982deb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1fc5d85303666ad4c760a9509128985982deb3", "html_url": "https://github.com/rust-lang/rust/commit/cf1fc5d85303666ad4c760a9509128985982deb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf1fc5d85303666ad4c760a9509128985982deb3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6649cb3672999fd13e43a97f53bdd080f57857b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6649cb3672999fd13e43a97f53bdd080f57857b4", "html_url": "https://github.com/rust-lang/rust/commit/6649cb3672999fd13e43a97f53bdd080f57857b4"}, {"sha": "ddc733a429969c84ff0066d84a8932767dc9f672", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc733a429969c84ff0066d84a8932767dc9f672", "html_url": "https://github.com/rust-lang/rust/commit/ddc733a429969c84ff0066d84a8932767dc9f672"}], "stats": {"total": 151, "additions": 81, "deletions": 70}, "files": [{"sha": "2664a01ea4763420e226835ac437ac9faeab78ac", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf1fc5d85303666ad4c760a9509128985982deb3/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/cf1fc5d85303666ad4c760a9509128985982deb3/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=cf1fc5d85303666ad4c760a9509128985982deb3", "patch": "@@ -28,8 +28,7 @@ script:\n  - cargo test --features debugging\n  - mkdir -p ~/rust/cargo/bin\n  - cp target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n- - PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy\n- - cd clippy_lints && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ..\n+ - PATH=$PATH:~/rust/cargo/bin cargo clippy --all -- -D clippy\n  - cd clippy_workspace_tests && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ..\n  - cd clippy_workspace_tests/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../..\n  - cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../.."}, {"sha": "41909477bbe593be7c0df278170ad6784cdc725e", "filename": "src/main.rs", "status": "modified", "additions": 80, "deletions": 68, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/cf1fc5d85303666ad4c760a9509128985982deb3/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1fc5d85303666ad4c760a9509128985982deb3/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=cf1fc5d85303666ad4c760a9509128985982deb3", "patch": "@@ -1,7 +1,6 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-\n #![allow(unknown_lints, missing_docs_in_private_items)]\n \n extern crate clippy_lints;\n@@ -12,9 +11,9 @@ extern crate rustc_errors;\n extern crate rustc_plugin;\n extern crate syntax;\n \n-use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n-use rustc::session::{config, Session, CompileIncomplete};\n-use rustc::session::config::{Input, ErrorOutputType};\n+use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n+use rustc::session::{config, CompileIncomplete, Session};\n+use rustc::session::config::{ErrorOutputType, Input};\n use std::collections::HashMap;\n use std::path::PathBuf;\n use std::process::{self, Command};\n@@ -152,6 +151,7 @@ Common options:\n     -h, --help               Print this message\n     --features               Features to compile for the package\n     -V, --version            Print version info and exit\n+    --all                    Run over all packages in the current workspace\n \n Other options are the same as `cargo rustc`.\n \n@@ -199,9 +199,9 @@ pub fn main() {\n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is executed on the initial call to `cargo clippy`\n \n-        let manifest_path_arg = std::env::args().skip(2).find(|val| {\n-            val.starts_with(\"--manifest-path=\")\n-        });\n+        let manifest_path_arg = std::env::args()\n+            .skip(2)\n+            .find(|val| val.starts_with(\"--manifest-path=\"));\n \n         let mut metadata =\n             if let Ok(metadata) = cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)) {\n@@ -217,74 +217,86 @@ pub fn main() {\n                 .expect(\"manifest path could not be canonicalized\")\n         });\n \n-        let package_index = {\n-            if let Some(manifest_path) = manifest_path {\n-                metadata.packages.iter().position(|package| {\n-                    let package_manifest_path = Path::new(&package.manifest_path).canonicalize().expect(\n-                        \"package manifest path could not be canonicalized\",\n-                    );\n-                    package_manifest_path == manifest_path\n-                })\n-            } else {\n-                let package_manifest_paths: HashMap<_, _> = metadata\n-                    .packages\n-                    .iter()\n-                    .enumerate()\n-                    .map(|(i, package)| {\n+        let packages = if std::env::args().any(|a| a == \"--all\") {\n+            metadata.packages\n+        } else {\n+            let package_index = {\n+                if let Some(manifest_path) = manifest_path {\n+                    metadata.packages.iter().position(|package| {\n                         let package_manifest_path = Path::new(&package.manifest_path)\n-                            .parent()\n-                            .expect(\"could not find parent directory of package manifest\")\n                             .canonicalize()\n-                            .expect(\"package directory cannot be canonicalized\");\n-                        (package_manifest_path, i)\n+                            .expect(\"package manifest path could not be canonicalized\");\n+                        package_manifest_path == manifest_path\n                     })\n-                    .collect();\n-\n-                let current_dir = std::env::current_dir()\n-                    .expect(\"could not read current directory\")\n-                    .canonicalize()\n-                    .expect(\"current directory cannot be canonicalized\");\n-\n-                let mut current_path: &Path = &current_dir;\n-\n-                // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n-                // reach).\n-                loop {\n-                    if let Some(&package_index) = package_manifest_paths.get(current_path) {\n-                        break Some(package_index);\n-                    } else {\n-                        // We'll never reach the filesystem root, because to get to this point in the\n-                        // code\n-                        // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n-                        // unwrap the current path's parent.\n-                        current_path = current_path.parent().unwrap_or_else(|| {\n-                            panic!(\"could not find parent of path {}\", current_path.display())\n-                        });\n+                } else {\n+                    let package_manifest_paths: HashMap<_, _> = metadata\n+                        .packages\n+                        .iter()\n+                        .enumerate()\n+                        .map(|(i, package)| {\n+                            let package_manifest_path = Path::new(&package.manifest_path)\n+                                .parent()\n+                                .expect(\"could not find parent directory of package manifest\")\n+                                .canonicalize()\n+                                .expect(\"package directory cannot be canonicalized\");\n+                            (package_manifest_path, i)\n+                        })\n+                        .collect();\n+\n+                    let current_dir = std::env::current_dir()\n+                        .expect(\"could not read current directory\")\n+                        .canonicalize()\n+                        .expect(\"current directory cannot be canonicalized\");\n+\n+                    let mut current_path: &Path = &current_dir;\n+\n+                    // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n+                    // reach).\n+                    loop {\n+                        if let Some(&package_index) = package_manifest_paths.get(current_path) {\n+                            break Some(package_index);\n+                        } else {\n+                            // We'll never reach the filesystem root, because to get to this point in the\n+                            // code\n+                            // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n+                            // unwrap the current path's parent.\n+                            current_path = current_path\n+                                .parent()\n+                                .unwrap_or_else(|| panic!(\"could not find parent of path {}\", current_path.display()));\n+                        }\n                     }\n                 }\n-            }\n-        }.expect(\"could not find matching package\");\n-\n-        let package = metadata.packages.remove(package_index);\n-        for target in package.targets {\n-            let args = std::env::args().skip(2);\n-            if let Some(first) = target.kind.get(0) {\n-                if target.kind.len() > 1 || first.ends_with(\"lib\") {\n-                    if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args)) {\n-                        std::process::exit(code);\n-                    }\n-                } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n-                    if let Err(code) = process(\n-                        vec![format!(\"--{}\", first), target.name]\n-                            .into_iter()\n-                            .chain(args),\n-                    )\n-                    {\n-                        std::process::exit(code);\n+            }.expect(\"could not find matching package\");\n+\n+            vec![metadata.packages.remove(package_index)]\n+        };\n+\n+        for package in packages {\n+            let manifest_path = package.manifest_path;\n+\n+            for target in package.targets {\n+                let args = std::env::args()\n+                    .skip(2)\n+                    .filter(|a| a != \"--all\" && !a.starts_with(\"--manifest-path=\"));\n+\n+                let args = std::iter::once(format!(\"--manifest-path={}\", manifest_path)).chain(args);\n+                if let Some(first) = target.kind.get(0) {\n+                    if target.kind.len() > 1 || first.ends_with(\"lib\") {\n+                        if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args)) {\n+                            std::process::exit(code);\n+                        }\n+                    } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n+                        if let Err(code) = process(\n+                            vec![format!(\"--{}\", first), target.name]\n+                                .into_iter()\n+                                .chain(args),\n+                        ) {\n+                            std::process::exit(code);\n+                        }\n                     }\n+                } else {\n+                    panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n                 }\n-            } else {\n-                panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n             }\n         }\n     } else {"}]}