{"sha": "d49c10ac62c6f781b05bb2136b63bdf7a4608439", "node_id": "C_kwDOAAsO6NoAKGQ0OWMxMGFjNjJjNmY3ODFiMDViYjIxMzZiNjNiZGY3YTQ2MDg0Mzk", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-16T01:38:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-18T16:42:59Z"}, "message": "Make \"long type\" printing type aware\n\nInstead of simple string cutting, use a custom printer to hide parts of\nlong printed types.", "tree": {"sha": "241d05c0a31daac1cc9eda82a1e8f4d7de486d5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/241d05c0a31daac1cc9eda82a1e8f4d7de486d5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49c10ac62c6f781b05bb2136b63bdf7a4608439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49c10ac62c6f781b05bb2136b63bdf7a4608439", "html_url": "https://github.com/rust-lang/rust/commit/d49c10ac62c6f781b05bb2136b63bdf7a4608439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49c10ac62c6f781b05bb2136b63bdf7a4608439/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3bfb35511cbcff59ce1454d3db627b576d7e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bfb35511cbcff59ce1454d3db627b576d7e92", "html_url": "https://github.com/rust-lang/rust/commit/fd3bfb35511cbcff59ce1454d3db627b576d7e92"}], "stats": {"total": 138, "additions": 78, "deletions": 60}, "files": [{"sha": "a792d2694b3b9f08e70a4c3d3eb7ba72b4c0f8b1", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -276,28 +276,45 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Display for Instance<'tcx> {\n+fn fmt_instance(\n+    f: &mut fmt::Formatter<'_>,\n+    instance: &Instance<'_>,\n+    type_length: rustc_session::Limit,\n+) -> fmt::Result {\n+    ty::tls::with(|tcx| {\n+        let substs = tcx.lift(instance.substs).expect(\"could not lift for printing\");\n+\n+        let s = FmtPrinter::new_with_limit(tcx, Namespace::ValueNS, type_length)\n+            .print_def_path(instance.def_id(), substs)?\n+            .into_buffer();\n+        f.write_str(&s)\n+    })?;\n+\n+    match instance.def {\n+        InstanceDef::Item(_) => Ok(()),\n+        InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n+        InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n+        InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n+        InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n+        InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n+        InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n+        InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n+        InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n+        InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n+    }\n+}\n+\n+pub struct ShortInstance<'a, 'tcx>(pub &'a Instance<'tcx>, pub usize);\n+\n+impl<'a, 'tcx> fmt::Display for ShortInstance<'a, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        ty::tls::with(|tcx| {\n-            let substs = tcx.lift(self.substs).expect(\"could not lift for printing\");\n-            let s = FmtPrinter::new(tcx, Namespace::ValueNS)\n-                .print_def_path(self.def_id(), substs)?\n-                .into_buffer();\n-            f.write_str(&s)\n-        })?;\n+        fmt_instance(f, self.0, rustc_session::Limit(self.1))\n+    }\n+}\n \n-        match self.def {\n-            InstanceDef::Item(_) => Ok(()),\n-            InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n-            InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n-            InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n-            InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n-            InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n-            InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n-            InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n-            InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n-            InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n-        }\n+impl<'tcx> fmt::Display for Instance<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        ty::tls::with(|tcx| fmt_instance(f, self, tcx.type_length_limit()))\n     }\n }\n "}, {"sha": "a770c6a2e99bee226bab8368096db8c66e174b4f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -84,7 +84,7 @@ pub use self::context::{\n     GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n     UserTypeAnnotationIndex,\n };\n-pub use self::instance::{Instance, InstanceDef};\n+pub use self::instance::{Instance, InstanceDef, ShortInstance};\n pub use self::list::List;\n pub use self::parameterized::ParameterizedOverTcx;\n pub use self::rvalue_scopes::RvalueScopes;"}, {"sha": "faa57b437d947e6d0728ccc65dd8eceb6e6ca130", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n+use rustc_session::Limit;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n@@ -1583,6 +1584,8 @@ pub struct FmtPrinterData<'a, 'tcx> {\n     region_index: usize,\n     binder_depth: usize,\n     printed_type_count: usize,\n+    type_length_limit: Limit,\n+    truncated: bool,\n \n     pub region_highlight_mode: RegionHighlightMode<'tcx>,\n \n@@ -1605,6 +1608,10 @@ impl DerefMut for FmtPrinter<'_, '_> {\n \n impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, ns: Namespace) -> Self {\n+        Self::new_with_limit(tcx, ns, tcx.type_length_limit())\n+    }\n+\n+    pub fn new_with_limit(tcx: TyCtxt<'tcx>, ns: Namespace, type_length_limit: Limit) -> Self {\n         FmtPrinter(Box::new(FmtPrinterData {\n             tcx,\n             // Estimated reasonable capacity to allocate upfront based on a few\n@@ -1617,6 +1624,8 @@ impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n             region_index: 0,\n             binder_depth: 0,\n             printed_type_count: 0,\n+            type_length_limit,\n+            truncated: false,\n             region_highlight_mode: RegionHighlightMode::new(tcx),\n             ty_infer_name_resolver: None,\n             const_infer_name_resolver: None,\n@@ -1751,12 +1760,16 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n     }\n \n     fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n-        let type_length_limit = self.tcx.type_length_limit();\n-        if type_length_limit.value_within_limit(self.printed_type_count) {\n+        if self.type_length_limit.value_within_limit(self.printed_type_count) {\n             self.printed_type_count += 1;\n             self.pretty_print_type(ty)\n         } else {\n-            write!(self, \"...\")?;\n+            self.truncated = true;\n+            if let ty::Adt(_, substs) = ty.kind() && substs.len() > 0 {\n+                write!(self, \"...\")?;\n+            } else {\n+                write!(self, \"_\")?;\n+            }\n             Ok(self)\n         }\n     }"}, {"sha": "d74893bf0f0e3354bc5b04daacb86d7cb252461c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -197,7 +197,6 @@ use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n use rustc_session::Limit;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use rustc_target::abi::Size;\n-use std::iter;\n use std::ops::Range;\n use std::path::PathBuf;\n \n@@ -541,29 +540,23 @@ fn collect_items_rec<'tcx>(\n }\n \n /// Format instance name that is already known to be too long for rustc.\n-/// Show only the first and last 32 characters to avoid blasting\n+/// Show only the first 2 types if it is longer than 32 characters to avoid blasting\n /// the user's terminal with thousands of lines of type-name.\n ///\n /// If the type name is longer than before+after, it will be written to a file.\n fn shrunk_instance_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: &Instance<'tcx>,\n-    before: usize,\n-    after: usize,\n ) -> (String, Option<PathBuf>) {\n     let s = instance.to_string();\n \n     // Only use the shrunk version if it's really shorter.\n     // This also avoids the case where before and after slices overlap.\n-    if s.chars().nth(before + after + 1).is_some() {\n-        // An iterator of all byte positions including the end of the string.\n-        let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n-\n-        let shrunk = format!(\n-            \"{before}...{after}\",\n-            before = &s[..positions().nth(before).unwrap_or(s.len())],\n-            after = &s[positions().rev().nth(after).unwrap_or(0)..],\n-        );\n+    if s.chars().nth(33).is_some() {\n+        let shrunk = format!(\"{}\", ty::ShortInstance(instance, 4));\n+        if shrunk == s {\n+            return (s, None);\n+        }\n \n         let path = tcx.output_filenames(()).temp_path_ext(\"long-type.txt\", None);\n         let written_to_path = std::fs::write(&path, s).ok().map(|_| path);\n@@ -599,7 +592,7 @@ fn check_recursion_limit<'tcx>(\n     if !recursion_limit.value_within_limit(adjusted_recursion_depth) {\n         let def_span = tcx.def_span(def_id);\n         let def_path_str = tcx.def_path_str(def_id);\n-        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let mut path = PathBuf::new();\n         let was_written = if written_to_path.is_some() {\n             path = written_to_path.unwrap();\n@@ -641,7 +634,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     //\n     // Bail out in these cases to avoid that bad user experience.\n     if !tcx.type_length_limit().value_within_limit(type_length) {\n-        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let span = tcx.def_span(instance.def_id());\n         let mut path = PathBuf::new();\n         let was_written = if written_to_path.is_some() {"}, {"sha": "951e0f5870d7d084ba3c802c2570f4be32340587", "filename": "src/test/ui/infinite/infinite-instantiation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `function::<Option<Option<Option<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `function::<Option<Option<Option<Option<Option<...>>>>>>`\n   --> $DIR/infinite-instantiation.rs:22:9\n    |\n LL |         function(counter - 1, t.to_option());"}, {"sha": "1caa4221f25015fc6d292f88e9c6b4ae76037719", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -9,7 +9,6 @@ note: `A::matches` defined here\n    |\n LL |     pub fn matches<F: Fn()>(&self, f: &F) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-22638/issue-22638.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "6ce4c498f152a23eeda55da9f205b611220ea834", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(.....), ...), ...) as Foo>::recurse`\n+error: reached the recursion limit while instantiating `<(&(&(_, _), _), _) as Foo>::recurse`\n   --> $DIR/issue-37311.rs:17:9\n    |\n LL |         (self, self).recurse();"}, {"sha": "c19c26587b983cd4f1f1e45ce936c46566166983", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n+error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut _>`\n   --> $DIR/issue-67552.rs:29:9\n    |\n LL |         rec(identity(&mut it))"}, {"sha": "22332b357231b3b88d51e21b8c405854c721b8de", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -9,7 +9,7 @@ LL |     generic::<Option<T>>();\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `generic::<Option<Option<Option<Option<Option<...>>>>>>`\n   --> $DIR/issue-8727.rs:8:5\n    |\n LL |     generic::<Option<T>>();"}, {"sha": "cf08095372b0792aab0eb8bb6ad92d36a3ccd8ed", "filename": "src/test/ui/recursion/recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>`\n   --> $DIR/recursion.rs:18:11\n    |\n LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}"}, {"sha": "b3c12747414ed15a53432bf5b4055aa3a614dad7", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -7,22 +7,27 @@\n // The exact type depends on optimizations, so disable them.\n \n #![allow(dead_code)]\n-#![type_length_limit=\"4\"]\n+#![type_length_limit=\"8\"]\n \n macro_rules! link {\n     ($id:ident, $t:ty) => {\n         pub type $id = ($t, $t, $t);\n     }\n }\n \n+link! { A1, B1 }\n+link! { B1, C1 }\n+link! { C1, D1 }\n+link! { D1, E1 }\n+link! { E1, A }\n link! { A, B }\n link! { B, C }\n link! { C, D }\n link! { D, E }\n link! { E, F }\n-link! { F, G }\n+link! { F, G<Option<i32>, Option<i32>> }\n \n-pub struct G;\n+pub struct G<T, K>(std::marker::PhantomData::<(T, K)>);\n \n fn main() {\n     drop::<Option<A>>(None);"}, {"sha": "10ada6760ebe840e04498c5eabf497055d8d67ae", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49c10ac62c6f781b05bb2136b63bdf7a4608439/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=d49c10ac62c6f781b05bb2136b63bdf7a4608439", "patch": "@@ -1,20 +1,11 @@\n-error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n+error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((_, _, _), _, _), _, _), _, _)>>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+   = help: consider adding a `#![type_length_limit=\"10\"]` attribute to your crate\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n \n-error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}