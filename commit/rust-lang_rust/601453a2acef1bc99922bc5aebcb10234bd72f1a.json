{"sha": "601453a2acef1bc99922bc5aebcb10234bd72f1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMTQ1M2EyYWNlZjFiYzk5OTIyYmM1YWViY2IxMDIzNGJkNzJmMWE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T09:42:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:42Z"}, "message": "Use () for HIR queries.", "tree": {"sha": "a1e7575939d04e541c4d4579f68023dcc9b9631e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e7575939d04e541c4d4579f68023dcc9b9631e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601453a2acef1bc99922bc5aebcb10234bd72f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601453a2acef1bc99922bc5aebcb10234bd72f1a", "html_url": "https://github.com/rust-lang/rust/commit/601453a2acef1bc99922bc5aebcb10234bd72f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601453a2acef1bc99922bc5aebcb10234bd72f1a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a729915da0e0658843b8c07a2156a8ca027ca77", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a729915da0e0658843b8c07a2156a8ca027ca77", "html_url": "https://github.com/rust-lang/rust/commit/3a729915da0e0658843b8c07a2156a8ca027ca77"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "d154b7804f052afa3f8fb02571a3a420f4e64269", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=601453a2acef1bc99922bc5aebcb10234bd72f1a", "patch": "@@ -150,7 +150,7 @@ impl<'hir> Iterator for ParentOwnerIterator<'_, 'hir> {\n \n impl<'hir> Map<'hir> {\n     pub fn krate(&self) -> &'hir Crate<'hir> {\n-        self.tcx.hir_crate(LOCAL_CRATE)\n+        self.tcx.hir_crate(())\n     }\n \n     #[inline]\n@@ -489,7 +489,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {\n-        self.tcx.all_local_trait_impls(LOCAL_CRATE).get(&trait_did).map_or(&[], |xs| &xs[..])\n+        self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n     /// Gets the attributes on the crate. This is preferable to\n@@ -928,9 +928,7 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n     }\n }\n \n-pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx IndexedHir<'tcx> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx IndexedHir<'tcx> {\n     let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n     let hcx = tcx.create_stable_hashing_context();\n@@ -943,10 +941,12 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n }\n \n pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+\n     let mut hcx = tcx.create_stable_hashing_context();\n \n     let mut hir_body_nodes: Vec<_> = tcx\n-        .index_hir(crate_num)\n+        .index_hir(())\n         .map\n         .iter_enumerated()\n         .filter_map(|(def_id, hod)| {"}, {"sha": "879372c65eaa1c8bf68430c38ebd1991e5858b0b", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=601453a2acef1bc99922bc5aebcb10234bd72f1a", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::Attribute;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::DUMMY_SP;\n@@ -123,14 +123,14 @@ pub fn provide(providers: &mut Providers) {\n         let hir = tcx.hir();\n         hir.local_def_id(hir.get_module_parent_node(hir.local_def_id_to_hir_id(id)))\n     };\n-    providers.hir_crate = |tcx, _| tcx.untracked_crate;\n+    providers.hir_crate = |tcx, ()| tcx.untracked_crate;\n     providers.index_hir = map::index_hir;\n     providers.crate_hash = map::crate_hash;\n     providers.hir_module_items = |tcx, id| &tcx.untracked_crate.modules[&id];\n-    providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n-    providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n+    providers.hir_owner = |tcx, id| tcx.index_hir(()).map[id].signature;\n+    providers.hir_owner_nodes = |tcx, id| tcx.index_hir(()).map[id].with_bodies.as_deref();\n     providers.hir_owner_parent = |tcx, id| {\n-        let index = tcx.index_hir(LOCAL_CRATE);\n+        let index = tcx.index_hir(());\n         index.parenting.get(&id).copied().unwrap_or(CRATE_HIR_ID)\n     };\n     providers.hir_attrs = |tcx, id| AttributeMap { map: &tcx.untracked_crate.attrs, prefix: id };\n@@ -151,4 +151,5 @@ pub fn provide(providers: &mut Providers) {\n         }\n     };\n     providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n+    providers.all_local_trait_impls = |tcx, ()| &tcx.hir_crate(()).trait_impls;\n }"}, {"sha": "c2eb5b40a79b45fff7084624e950638396137109", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=601453a2acef1bc99922bc5aebcb10234bd72f1a", "patch": "@@ -20,15 +20,15 @@ rustc_queries! {\n     /// This is because the `hir_crate` query gives you access to all other items.\n     /// To avoid this fate, do not call `tcx.hir().krate()`; instead,\n     /// prefer wrappers like `tcx.visit_all_items_in_krate()`.\n-    query hir_crate(key: CrateNum) -> &'tcx Crate<'tcx> {\n+    query hir_crate(key: ()) -> &'tcx Crate<'tcx> {\n         eval_always\n         no_hash\n         desc { \"get the crate HIR\" }\n     }\n \n     /// The indexed HIR. This can be conveniently accessed by `tcx.hir()`.\n     /// Avoid calling this query directly.\n-    query index_hir(_: CrateNum) -> &'tcx crate::hir::IndexedHir<'tcx> {\n+    query index_hir(_: ()) -> &'tcx crate::hir::IndexedHir<'tcx> {\n         eval_always\n         no_hash\n         desc { \"index HIR\" }\n@@ -965,7 +965,7 @@ rustc_queries! {\n     /// Passing in any other crate will cause an ICE.\n     ///\n     /// [`LOCAL_CRATE`]: rustc_hir::def_id::LOCAL_CRATE\n-    query all_local_trait_impls(local_crate: CrateNum) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n+    query all_local_trait_impls(_: ()) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n         desc { \"local trait impls\" }\n     }\n "}, {"sha": "7c7623aad112c0e49e1974e8c9300155d839e90e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=601453a2acef1bc99922bc5aebcb10234bd72f1a", "patch": "@@ -1970,7 +1970,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     super::util::bug::provide(providers);\n     *providers = ty::query::Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n-        all_local_trait_impls: trait_def::all_local_trait_impls,\n         type_uninhabited_from: inhabitedness::type_uninhabited_from,\n         const_param_default: consts::const_param_default,\n         ..*providers"}, {"sha": "79166472acf0430955698b00aa6820e2e7e1a6b4", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601453a2acef1bc99922bc5aebcb10234bd72f1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=601453a2acef1bc99922bc5aebcb10234bd72f1a", "patch": "@@ -4,14 +4,13 @@ use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathHash;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n use rustc_macros::HashStable;\n-use std::collections::BTreeMap;\n \n /// A trait's definition with type information.\n #[derive(HashStable)]\n@@ -209,14 +208,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-// Query provider for `all_local_trait_impls`.\n-pub(super) fn all_local_trait_impls<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    krate: CrateNum,\n-) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n-    &tcx.hir_crate(krate).trait_impls\n-}\n-\n // Query provider for `trait_impls_of`.\n pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> TraitImpls {\n     let mut impls = TraitImpls::default();"}, {"sha": "e742cd626ab06352b58410721247e3f867090417", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/601453a2acef1bc99922bc5aebcb10234bd72f1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601453a2acef1bc99922bc5aebcb10234bd72f1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=601453a2acef1bc99922bc5aebcb10234bd72f1a", "patch": "@@ -12,7 +12,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{def_id::LOCAL_CRATE, source_map::Span};\n+use rustc_span::{source_map::Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n@@ -312,7 +312,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &T\n         if ty_subs.non_erasable_generics().next().is_some() {\n             let has_copy_impl = cx\n                 .tcx\n-                .all_local_trait_impls(LOCAL_CRATE)\n+                .all_local_trait_impls(())\n                 .get(&copy_id)\n                 .map_or(false, |impls| {\n                     impls"}]}