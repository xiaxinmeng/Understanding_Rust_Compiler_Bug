{"sha": "83242897fb356f51762e0e466dfd53186725028a", "node_id": "C_kwDOAAsO6NoAKDgzMjQyODk3ZmIzNTZmNTE3NjJlMGU0NjZkZmQ1MzE4NjcyNTAyOGE", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-02-02T14:07:02Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-02-02T14:07:02Z"}, "message": "add tests", "tree": {"sha": "4d4edb633bdb18dfec4e571f3c34e7a2c8df51ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d4edb633bdb18dfec4e571f3c34e7a2c8df51ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83242897fb356f51762e0e466dfd53186725028a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83242897fb356f51762e0e466dfd53186725028a", "html_url": "https://github.com/rust-lang/rust/commit/83242897fb356f51762e0e466dfd53186725028a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83242897fb356f51762e0e466dfd53186725028a/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea4851715893ee3f365a8ef09d47165e9a7864f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea4851715893ee3f365a8ef09d47165e9a7864f", "html_url": "https://github.com/rust-lang/rust/commit/1ea4851715893ee3f365a8ef09d47165e9a7864f"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "74b6f74e4013ce3271cc3d97f11025b0a697f2fd", "filename": "library/core/tests/future.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83242897fb356f51762e0e466dfd53186725028a/library%2Fcore%2Ftests%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83242897fb356f51762e0e466dfd53186725028a/library%2Fcore%2Ftests%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffuture.rs?ref=83242897fb356f51762e0e466dfd53186725028a", "patch": "@@ -118,3 +118,11 @@ fn block_on(fut: impl Future) {\n         }\n     }\n }\n+\n+// just tests by whether or not this compiles\n+fn _pending_impl_all_auto_traits<T>() {\n+    use std::panic::{RefUnwindSafe, UnwindSafe};\n+    fn all_auto_traits<T: Send + Sync + Unpin + UnwindSafe + RefUnwindSafe>() {}\n+\n+    all_auto_traits::<std::future::Pending<T>>();\n+}"}, {"sha": "a173e461c606f6e69d5ccbb170555fdc726c326d", "filename": "library/core/tests/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83242897fb356f51762e0e466dfd53186725028a/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83242897fb356f51762e0e466dfd53186725028a/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fmod.rs?ref=83242897fb356f51762e0e466dfd53186725028a", "patch": "@@ -146,3 +146,11 @@ fn test_build_hasher_object_safe() {\n \n     let _: &dyn BuildHasher<Hasher = DefaultHasher> = &RandomState::new();\n }\n+\n+// just tests by whether or not this compiles\n+fn _build_hasher_default_impl_all_auto_traits<T>() {\n+    use std::panic::{RefUnwindSafe, UnwindSafe};\n+    fn all_auto_traits<T: Send + Sync + Unpin + UnwindSafe + RefUnwindSafe>() {}\n+\n+    all_auto_traits::<std::hash::BuildHasherDefault<T>>();\n+}"}, {"sha": "972d61ba909d8dbb08edee5580c29c2ba3cf6225", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83242897fb356f51762e0e466dfd53186725028a/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83242897fb356f51762e0e466dfd53186725028a/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=83242897fb356f51762e0e466dfd53186725028a", "patch": "@@ -496,3 +496,11 @@ fn test_collect() {\n     let b: Vec<isize> = a.iter().cloned().collect();\n     assert!(a == b);\n }\n+\n+// just tests by whether or not this compiles\n+fn _empty_impl_all_auto_traits<T>() {\n+    use std::panic::{RefUnwindSafe, UnwindSafe};\n+    fn all_auto_traits<T: Send + Sync + Unpin + UnwindSafe + RefUnwindSafe>() {}\n+\n+    all_auto_traits::<std::iter::Empty<T>>();\n+}"}]}