{"sha": "cb233f54204261798aae645c70c34116b22ada4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjMzZjU0MjA0MjYxNzk4YWFlNjQ1YzcwYzM0MTE2YjIyYWRhNGU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T17:23:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-10T11:33:41Z"}, "message": "Merge hir::CaptureClause into ast::CaptureBy.", "tree": {"sha": "5a2aa47437623f9ed8cfdb10cc9f3906dc168347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a2aa47437623f9ed8cfdb10cc9f3906dc168347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb233f54204261798aae645c70c34116b22ada4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb233f54204261798aae645c70c34116b22ada4e", "html_url": "https://github.com/rust-lang/rust/commit/cb233f54204261798aae645c70c34116b22ada4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb233f54204261798aae645c70c34116b22ada4e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b30da10b64cf9b3567554e651bb6a9d62ad554b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b30da10b64cf9b3567554e651bb6a9d62ad554b", "html_url": "https://github.com/rust-lang/rust/commit/5b30da10b64cf9b3567554e651bb6a9d62ad554b"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "ff5a9a34053ae30f1433214480d26f6f5c492619", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=cb233f54204261798aae645c70c34116b22ada4e", "patch": "@@ -473,7 +473,6 @@ impl LoweringContext<'_> {\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     ) -> hir::ExprKind {\n-        let capture_clause = self.lower_capture_clause(capture_clause);\n         let output = match ret_ty {\n             Some(ty) => FunctionRetTy::Ty(ty),\n             None => FunctionRetTy::Default(span),\n@@ -700,7 +699,6 @@ impl LoweringContext<'_> {\n                 generator_kind,\n                 movability,\n             );\n-            let capture_clause = this.lower_capture_clause(capture_clause);\n             this.current_item = prev;\n             hir::ExprKind::Closure(\n                 capture_clause,\n@@ -712,13 +710,6 @@ impl LoweringContext<'_> {\n         })\n     }\n \n-    fn lower_capture_clause(&mut self, c: CaptureBy) -> hir::CaptureClause {\n-        match c {\n-            CaptureBy::Value => hir::CaptureByValue,\n-            CaptureBy::Ref => hir::CaptureByRef,\n-        }\n-    }\n-\n     fn generator_movability_for_fn(\n         &mut self,\n         decl: &FnDecl,\n@@ -807,7 +798,7 @@ impl LoweringContext<'_> {\n                 this.expr(fn_decl_span, async_body, ThinVec::new())\n             });\n             hir::ExprKind::Closure(\n-                this.lower_capture_clause(capture_clause),\n+                capture_clause,\n                 fn_decl,\n                 body_id,\n                 fn_decl_span,"}, {"sha": "8128beac8415fb0ce7b7a70708161b3c700c38e9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=cb233f54204261798aae645c70c34116b22ada4e", "patch": "@@ -3,7 +3,6 @@\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n \n pub use self::BlockCheckMode::*;\n-pub use self::CaptureClause::*;\n pub use self::FunctionRetTy::*;\n pub use self::PrimTy::*;\n pub use self::UnOp::*;\n@@ -22,7 +21,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use syntax::source_map::Spanned;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n-pub use syntax::ast::{Mutability, Constness, Unsafety, Movability};\n+pub use syntax::ast::{Mutability, Constness, Unsafety, Movability, CaptureBy};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::symbol::{Symbol, kw};\n use syntax::tokenstream::TokenStream;\n@@ -1629,7 +1628,7 @@ pub enum ExprKind {\n     ///\n     /// This may also be a generator literal or an `async block` as indicated by the\n     /// `Option<Movability>`.\n-    Closure(CaptureClause, P<FnDecl>, BodyId, Span, Option<Movability>),\n+    Closure(CaptureBy, P<FnDecl>, BodyId, Span, Option<Movability>),\n     /// A block (e.g., `'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n \n@@ -1820,12 +1819,6 @@ impl fmt::Display for YieldSource {\n     }\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum CaptureClause {\n-    CaptureByValue,\n-    CaptureByRef,\n-}\n-\n // N.B., if you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n@@ -2620,7 +2613,7 @@ pub struct Upvar {\n     pub span: Span\n }\n \n-pub type CaptureModeMap = NodeMap<CaptureClause>;\n+pub type CaptureModeMap = NodeMap<CaptureBy>;\n \n  // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n  // has length > 0 if the trait is found through an chain of imports, starting with the"}, {"sha": "ba618a1da8cefbdd02e78f4800fc2959052ff718", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=cb233f54204261798aae645c70c34116b22ada4e", "patch": "@@ -1909,10 +1909,10 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_capture_clause(&mut self, capture_clause: hir::CaptureClause) {\n+    pub fn print_capture_clause(&mut self, capture_clause: hir::CaptureBy) {\n         match capture_clause {\n-            hir::CaptureByValue => self.word_space(\"move\"),\n-            hir::CaptureByRef => {},\n+            hir::CaptureBy::Value => self.word_space(\"move\"),\n+            hir::CaptureBy::Ref => {},\n         }\n     }\n "}, {"sha": "5919b0454292ead7f13ec89b7ffdbf3c0f9b3091", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=cb233f54204261798aae645c70c34116b22ada4e", "patch": "@@ -169,6 +169,7 @@ impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, ident });\n impl_stable_hash_for!(enum ::syntax::ast::StrStyle { Cooked, Raw(pounds) });\n impl_stable_hash_for!(enum ::syntax::ast::AttrStyle { Outer, Inner });\n impl_stable_hash_for!(enum ::syntax::ast::Movability { Static, Movable });\n+impl_stable_hash_for!(enum ::syntax::ast::CaptureBy { Value, Ref });\n \n impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "30cb0d4f96766925203bac150276f09279a7087a", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=cb233f54204261798aae645c70c34116b22ada4e", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_expr_closure(\n         &self,\n         expr: &hir::Expr,\n-        _capture: hir::CaptureClause,\n+        _capture: hir::CaptureBy,\n         decl: &'tcx hir::FnDecl,\n         body_id: hir::BodyId,\n         gen: Option<hir::Movability>,"}, {"sha": "390ee0d0f8380ed1a0b17ba37bf0c43453f6a6fa", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb233f54204261798aae645c70c34116b22ada4e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=cb233f54204261798aae645c70c34116b22ada4e", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         closure_hir_id: hir::HirId,\n         span: Span,\n         body: &hir::Body,\n-        capture_clause: hir::CaptureClause,\n+        capture_clause: hir::CaptureBy,\n     ) {\n         /*!\n          * Analysis starting point.\n@@ -141,8 +141,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 upvar_list.insert(var_hir_id, upvar_id);\n \n                 let capture_kind = match capture_clause {\n-                    hir::CaptureByValue => ty::UpvarCapture::ByValue,\n-                    hir::CaptureByRef => {\n+                    hir::CaptureBy::Value => ty::UpvarCapture::ByValue,\n+                    hir::CaptureBy::Ref => {\n                         let origin = UpvarRegion(upvar_id, span);\n                         let upvar_region = self.next_region_var(origin);\n                         let upvar_borrow = ty::UpvarBorrow {"}]}