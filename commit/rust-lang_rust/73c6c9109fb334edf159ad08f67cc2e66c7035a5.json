{"sha": "73c6c9109fb334edf159ad08f67cc2e66c7035a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYzZjOTEwOWZiMzM0ZWRmMTU5YWQwOGY2N2NjMmU2NmM3MDM1YTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-30T06:13:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T06:21:20Z"}, "message": "bench: Remove usage of fmt!", "tree": {"sha": "3e85a8e41a5874ededec7c9518adfda552e52c80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e85a8e41a5874ededec7c9518adfda552e52c80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73c6c9109fb334edf159ad08f67cc2e66c7035a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73c6c9109fb334edf159ad08f67cc2e66c7035a5", "html_url": "https://github.com/rust-lang/rust/commit/73c6c9109fb334edf159ad08f67cc2e66c7035a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73c6c9109fb334edf159ad08f67cc2e66c7035a5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02054ac8a1490211a5a6873fdefe186bd0758b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/02054ac8a1490211a5a6873fdefe186bd0758b7b", "html_url": "https://github.com/rust-lang/rust/commit/02054ac8a1490211a5a6873fdefe186bd0758b7b"}], "stats": {"total": 109, "additions": 55, "deletions": 54}, "files": [{"sha": "a4c07371f678012607dbb23feced724ed7b7b786", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -128,7 +128,7 @@ fn write_header(header: &str) {\n }\n \n fn write_row(label: &str, value: float) {\n-    io::stdout().write_str(fmt!(\"%30s %f s\\n\", label, value));\n+    io::stdout().write_str(format!(\"{:30s} {} s\\n\", label, value));\n }\n \n fn write_results(label: &str, results: &Results) {"}, {"sha": "fa2b74ef44c63134fdb8fb37b1cc3d2e6966d14a", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -133,7 +133,7 @@ fn is_utf8_ascii() {\n     for _ in range(0u, 20000) {\n         v.push('b' as u8);\n         if !str::is_utf8(v) {\n-            fail!(\"is_utf8 failed\");\n+            fail2!(\"is_utf8 failed\");\n         }\n     }\n }\n@@ -144,7 +144,7 @@ fn is_utf8_multibyte() {\n     for _ in range(0u, 5000) {\n         v.push_all(s.as_bytes());\n         if !str::is_utf8(v) {\n-            fail!(\"is_utf8 failed\");\n+            fail2!(\"is_utf8 failed\");\n         }\n     }\n }"}, {"sha": "ef6610cd93a3f3d4738cabac1946adc3767650ba", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -25,6 +25,6 @@ fn main() {\n \n     for i in range(0u, n) {\n         let x = i.to_str();\n-        info!(x);\n+        info2!(\"{}\", x);\n     }\n }"}, {"sha": "ba7682f5bbd4d3c5dde7227e512203c1ef20a064", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -42,15 +42,15 @@ fn server(requests: &Port<request>, responses: &Chan<uint>) {\n         match requests.try_recv() {\n           Some(get_count) => { responses.send(count.clone()); }\n           Some(bytes(b)) => {\n-            //error!(\"server: received %? bytes\", b);\n+            //error2!(\"server: received {:?} bytes\", b);\n             count += b;\n           }\n           None => { done = true; }\n           _ => { }\n         }\n     }\n     responses.send(count);\n-    //error!(\"server exiting\");\n+    //error2!(\"server exiting\");\n }\n \n fn run(args: &[~str]) {\n@@ -70,10 +70,10 @@ fn run(args: &[~str]) {\n         builder.future_result(|r| worker_results.push(r));\n         do builder.spawn {\n             for _ in range(0u, size / workers) {\n-                //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n+                //error2!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n-            //error!(\"worker %? exiting\", i);\n+            //error2!(\"worker {:?} exiting\", i);\n         }\n     }\n     do task::spawn || {\n@@ -84,16 +84,16 @@ fn run(args: &[~str]) {\n         r.recv();\n     }\n \n-    //error!(\"sending stop message\");\n+    //error2!(\"sending stop message\");\n     to_child.send(stop);\n     move_out(to_child);\n     let result = from_child.recv();\n     let end = extra::time::precise_time_s();\n     let elapsed = end - start;\n-    io::stdout().write_str(fmt!(\"Count is %?\\n\", result));\n-    io::stdout().write_str(fmt!(\"Test took %? seconds\\n\", elapsed));\n+    io::stdout().write_str(format!(\"Count is {:?}\\n\", result));\n+    io::stdout().write_str(format!(\"Test took {:?} seconds\\n\", elapsed));\n     let thruput = ((size / workers * workers) as float) / (elapsed as float);\n-    io::stdout().write_str(fmt!(\"Throughput=%f per sec\\n\", thruput));\n+    io::stdout().write_str(format!(\"Throughput={} per sec\\n\", thruput));\n     assert_eq!(result, num_bytes * size);\n }\n \n@@ -107,6 +107,6 @@ fn main() {\n         args.clone()\n     };\n \n-    info!(\"%?\", args);\n+    info2!(\"{:?}\", args);\n     run(args);\n }"}, {"sha": "1db73f9a95d12e4239f88aa2acc6a157d33c6711", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -37,15 +37,15 @@ fn server(requests: &Port<request>, responses: &Chan<uint>) {\n         match requests.try_recv() {\n           Some(get_count) => { responses.send(count.clone()); }\n           Some(bytes(b)) => {\n-            //error!(\"server: received %? bytes\", b);\n+            //error2!(\"server: received {:?} bytes\", b);\n             count += b;\n           }\n           None => { done = true; }\n           _ => { }\n         }\n     }\n     responses.send(count);\n-    //error!(\"server exiting\");\n+    //error2!(\"server exiting\");\n }\n \n fn run(args: &[~str]) {\n@@ -64,10 +64,10 @@ fn run(args: &[~str]) {\n         builder.future_result(|r| worker_results.push(r));\n         do builder.spawn {\n             for _ in range(0u, size / workers) {\n-                //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n+                //error2!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n-            //error!(\"worker %? exiting\", i);\n+            //error2!(\"worker {:?} exiting\", i);\n         };\n     }\n     do task::spawn || {\n@@ -78,16 +78,16 @@ fn run(args: &[~str]) {\n         r.recv();\n     }\n \n-    //error!(\"sending stop message\");\n+    //error2!(\"sending stop message\");\n     to_child.send(stop);\n     move_out(to_child);\n     let result = from_child.recv();\n     let end = extra::time::precise_time_s();\n     let elapsed = end - start;\n-    io::stdout().write_str(fmt!(\"Count is %?\\n\", result));\n-    io::stdout().write_str(fmt!(\"Test took %? seconds\\n\", elapsed));\n+    io::stdout().write_str(format!(\"Count is {:?}\\n\", result));\n+    io::stdout().write_str(format!(\"Test took {:?} seconds\\n\", elapsed));\n     let thruput = ((size / workers * workers) as float) / (elapsed as float);\n-    io::stdout().write_str(fmt!(\"Throughput=%f per sec\\n\", thruput));\n+    io::stdout().write_str(format!(\"Throughput={} per sec\\n\", thruput));\n     assert_eq!(result, num_bytes * size);\n }\n \n@@ -101,6 +101,6 @@ fn main() {\n         args.clone()\n     };\n \n-    info!(\"%?\", args);\n+    info2!(\"{:?}\", args);\n     run(args);\n }"}, {"sha": "c3296cbff9be132757617117d85bb02787d6e454", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -66,7 +66,7 @@ fn show_digit(nn: uint) -> ~str {\n         7 => {~\"seven\"}\n         8 => {~\"eight\"}\n         9 => {~\"nine\"}\n-        _ => {fail!(\"expected digits from 0 to 9...\")}\n+        _ => {fail2!(\"expected digits from 0 to 9...\")}\n     }\n }\n \n@@ -129,8 +129,8 @@ fn creature(\n             }\n             option::None => {\n                 // log creatures met and evil clones of self\n-                let report = fmt!(\"%u %s\",\n-                                  creatures_met, show_number(evil_clones_met));\n+                let report = format!(\"{} {}\",\n+                                     creatures_met, show_number(evil_clones_met));\n                 to_rendezvous_log.send(report);\n                 break;\n             }"}, {"sha": "4c246bbe3f70695ccb02635d214cebfe2ac37098", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -75,7 +75,8 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n            let b = str::raw::from_utf8(k);\n            // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n            // to_ascii_move and to_str_move to not do a unnecessary copy.\n-           buffer.push_str(fmt!(\"%s %0.3f\\n\", b.to_ascii().to_upper().to_str_ascii(), v));\n+           buffer.push_str(format!(\"{} {:0.3f}\\n\",\n+                                   b.to_ascii().to_upper().to_str_ascii(), v));\n        }\n    }\n \n@@ -142,11 +143,11 @@ fn make_sequence_processor(sz: uint,\n    let buffer = match sz {\n        1u => { sort_and_fmt(&freqs, total) }\n        2u => { sort_and_fmt(&freqs, total) }\n-       3u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGT\"), \"GGT\") }\n-       4u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTA\"), \"GGTA\") }\n-       6u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATT\"), \"GGTATT\") }\n-      12u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATTTTAATT\"), \"GGTATTTTAATT\") }\n-      18u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATTTTAATTTATAGT\"), \"GGTATTTTAATTTATAGT\") }\n+       3u => { format!(\"{}\\t{}\", find(&freqs, ~\"GGT\"), \"GGT\") }\n+       4u => { format!(\"{}\\t{}\", find(&freqs, ~\"GGTA\"), \"GGTA\") }\n+       6u => { format!(\"{}\\t{}\", find(&freqs, ~\"GGTATT\"), \"GGTATT\") }\n+      12u => { format!(\"{}\\t{}\", find(&freqs, ~\"GGTATTTTAATT\"), \"GGTATTTTAATT\") }\n+      18u => { format!(\"{}\\t{}\", find(&freqs, ~\"GGTATTTTAATTTATAGT\"), \"GGTATTTTAATTTATAGT\") }\n         _ => { ~\"\" }\n    };\n "}, {"sha": "5a1f735001028d2c1c9f061055ab5acff4917941", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -66,7 +66,7 @@ fn parse_opts(argv: ~[~str]) -> Config {\n       Ok(ref m) => {\n           return Config {stress: m.opt_present(\"stress\")}\n       }\n-      Err(_) => { fail!(); }\n+      Err(_) => { fail2!(); }\n     }\n }\n \n@@ -76,7 +76,7 @@ fn stress_task(id: int) {\n         let n = 15;\n         assert_eq!(fib(n), fib(n));\n         i += 1;\n-        error!(\"%d: Completed %d iterations\", id, i);\n+        error2!(\"{}: Completed {} iterations\", id, i);\n     }\n }\n \n@@ -123,8 +123,8 @@ fn main() {\n \n                 let elapsed = stop - start;\n \n-                out.write_line(fmt!(\"%d\\t%d\\t%s\", n, fibn,\n-                                    elapsed.to_str()));\n+                out.write_line(format!(\"{}\\t{}\\t{}\", n, fibn,\n+                                       elapsed.to_str()));\n             }\n         }\n     }"}, {"sha": "2e812ba2d09587ad96ca7bec43f75180c0133848", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -59,8 +59,8 @@ fn main() {\n \n     let maxf = max as float;\n \n-    io::stdout().write_str(fmt!(\"insert(): %? seconds\\n\", checkf));\n-    io::stdout().write_str(fmt!(\"        : %f op/sec\\n\", maxf/checkf));\n-    io::stdout().write_str(fmt!(\"get()   : %? seconds\\n\", appendf));\n-    io::stdout().write_str(fmt!(\"        : %f op/sec\\n\", maxf/appendf));\n+    io::stdout().write_str(format!(\"insert(): {:?} seconds\\n\", checkf));\n+    io::stdout().write_str(format!(\"        : {} op/sec\\n\", maxf/checkf));\n+    io::stdout().write_str(format!(\"get()   : {:?} seconds\\n\", appendf));\n+    io::stdout().write_str(format!(\"        : {} op/sec\\n\", maxf/appendf));\n }"}, {"sha": "91d9c9656af96663554aa1362c978b4a02d20890", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -79,17 +79,17 @@ impl Sudoku {\n                 g[row][col] = from_str::<uint>(comps[2]).unwrap() as u8;\n             }\n             else {\n-                fail!(\"Invalid sudoku file\");\n+                fail2!(\"Invalid sudoku file\");\n             }\n         }\n         return Sudoku::new(g)\n     }\n \n     pub fn write(&self, writer: @io::Writer) {\n         for row in range(0u8, 9u8) {\n-            writer.write_str(fmt!(\"%u\", self.grid[row][0] as uint));\n+            writer.write_str(format!(\"{}\", self.grid[row][0] as uint));\n             for col in range(1u8, 9u8) {\n-                writer.write_str(fmt!(\" %u\", self.grid[row][col] as uint));\n+                writer.write_str(format!(\" {}\", self.grid[row][col] as uint));\n             }\n             writer.write_char('\\n');\n          }\n@@ -117,7 +117,7 @@ impl Sudoku {\n                 ptr = ptr + 1u;\n             } else {\n                 // no: redo this field aft recoloring pred; unless there is none\n-                if ptr == 0u { fail!(\"No solution found for this sudoku\"); }\n+                if ptr == 0u { fail2!(\"No solution found for this sudoku\"); }\n                 ptr = ptr - 1u;\n             }\n         }"}, {"sha": "639cbd05cbf7a3b7aa0d8dc72dd0202660a541ae", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -31,11 +31,11 @@ fn main() {\n \n fn run(repeat: int, depth: int) {\n     for _ in range(0, repeat) {\n-        info!(\"starting %.4f\", precise_time_s());\n+        info2!(\"starting {:.4f}\", precise_time_s());\n         do task::try {\n             recurse_or_fail(depth, None)\n         };\n-        info!(\"stopping %.4f\", precise_time_s());\n+        info2!(\"stopping {:.4f}\", precise_time_s());\n     }\n }\n \n@@ -68,8 +68,8 @@ fn r(l: @nillist) -> r {\n \n fn recurse_or_fail(depth: int, st: Option<State>) {\n     if depth == 0 {\n-        info!(\"unwinding %.4f\", precise_time_s());\n-        fail!();\n+        info2!(\"unwinding {:.4f}\", precise_time_s());\n+        fail2!();\n     } else {\n         let depth = depth - 1;\n "}, {"sha": "ac028686f08e18cb42a2ea507324bbcf0d3c02bc", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -54,6 +54,6 @@ fn main() {\n     let (p,c) = comm::stream();\n     child_generation(from_str::<uint>(args[1]).unwrap(), c);\n     if p.try_recv().is_none() {\n-        fail!(\"it happened when we slumbered\");\n+        fail2!(\"it happened when we slumbered\");\n     }\n }"}, {"sha": "b029d9e4fc84472ab9b50573f16771a22ec5ecda", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c6c9109fb334edf159ad08f67cc2e66c7035a5/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=73c6c9109fb334edf159ad08f67cc2e66c7035a5", "patch": "@@ -43,13 +43,13 @@ fn grandchild_group(num_tasks: uint) {\n             p.recv(); // block forever\n         }\n     }\n-    error!(\"Grandchild group getting started\");\n+    error2!(\"Grandchild group getting started\");\n     for _ in range(0, num_tasks) {\n         // Make sure all above children are fully spawned; i.e., enlisted in\n         // their ancestor groups.\n         po.recv();\n     }\n-    error!(\"Grandchild group ready to go.\");\n+    error2!(\"Grandchild group ready to go.\");\n     // Master grandchild task exits early.\n }\n \n@@ -59,7 +59,7 @@ fn spawn_supervised_blocking(myname: &str, f: ~fn()) {\n     builder.future_result(|r| res = Some(r));\n     builder.supervised();\n     builder.spawn(f);\n-    error!(\"%s group waiting\", myname);\n+    error2!(\"{} group waiting\", myname);\n     let x = res.unwrap().recv();\n     assert_eq!(x, task::Success);\n }\n@@ -85,11 +85,11 @@ fn main() {\n                 grandchild_group(num_tasks);\n             }\n             // When grandchild group is ready to go, make the middle group exit.\n-            error!(\"Middle group wakes up and exits\");\n+            error2!(\"Middle group wakes up and exits\");\n         }\n         // Grandparent group waits for middle group to be gone, then fails\n-        error!(\"Grandparent group wakes up and fails\");\n-        fail!();\n+        error2!(\"Grandparent group wakes up and fails\");\n+        fail2!();\n     };\n     assert!(x.is_err());\n }"}]}