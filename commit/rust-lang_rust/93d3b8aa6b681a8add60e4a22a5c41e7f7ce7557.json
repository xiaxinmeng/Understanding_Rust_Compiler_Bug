{"sha": "93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZDNiOGFhNmI2ODFhOGFkZDYwZTRhMjJhNWM0MWU3ZjdjZTc1NTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-08T02:04:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-10T23:13:08Z"}, "message": "Convert class methods to impl methods. Stop parsing class methods", "tree": {"sha": "f9fdbb8b2faf77423620d59d572976a32349f747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9fdbb8b2faf77423620d59d572976a32349f747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "html_url": "https://github.com/rust-lang/rust/commit/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea6fe0ec12439187617bfc27f23962d018f8463", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea6fe0ec12439187617bfc27f23962d018f8463", "html_url": "https://github.com/rust-lang/rust/commit/bea6fe0ec12439187617bfc27f23962d018f8463"}], "stats": {"total": 593, "additions": 398, "deletions": 195}, "files": [{"sha": "1ab3bc55d9f048363fcc6efac5b62d367ccc5502", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,7 +1,6 @@\n import run::spawn_process;\n import io::{ReaderUtil, WriterUtil};\n import libc::{c_int, pid_t};\n-import pipes::chan;\n \n export run;\n "}, {"sha": "0ed0904b1b92511d7d2ce8f06c068da33e181709", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 48, "deletions": 37, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -164,7 +164,17 @@ struct PacketHeader {\n     // This is a reinterpret_cast of a ~buffer, that can also be cast\n     // to a buffer_header if need be.\n     mut buffer: *libc::c_void,\n+}\n+\n+fn PacketHeader() -> PacketHeader {\n+    PacketHeader {\n+        state: Empty,\n+        blocked_task: ptr::null(),\n+        buffer: ptr::null()\n+    }\n+}\n \n+impl PacketHeader {\n     // Returns the old state.\n     unsafe fn mark_blocked(this: *rust_task) -> State {\n         rustrt::rust_task_ref(this);\n@@ -196,14 +206,6 @@ struct PacketHeader {\n     }\n }\n \n-fn PacketHeader() -> PacketHeader {\n-    PacketHeader {\n-        state: Empty,\n-        blocked_task: ptr::null(),\n-        buffer: ptr::null()\n-    }\n-}\n-\n #[doc(hidden)]\n type Packet<T: Send> = {\n     header: PacketHeader,\n@@ -794,6 +796,21 @@ struct SendPacketBuffered<T: Send, Tbuffer: Send> {\n         //                    \"none\"\n         //                } else { \"some\" }); }\n     }\n+}\n+\n+fn SendPacketBuffered<T: Send, Tbuffer: Send>(p: *Packet<T>)\n+    -> SendPacketBuffered<T, Tbuffer> {\n+        //debug!(\"take send %?\", p);\n+    SendPacketBuffered {\n+        p: Some(p),\n+        buffer: unsafe {\n+            Some(BufferResource(\n+                get_buffer(ptr::addr_of((*p).header))))\n+        }\n+    }\n+}\n+\n+impl<T: Send, Tbuffer: Send> SendPacketBuffered<T, Tbuffer> {\n     fn unwrap() -> *Packet<T> {\n         let mut p = None;\n         p <-> self.p;\n@@ -820,18 +837,6 @@ struct SendPacketBuffered<T: Send, Tbuffer: Send> {\n     }\n }\n \n-fn SendPacketBuffered<T: Send, Tbuffer: Send>(p: *Packet<T>)\n-    -> SendPacketBuffered<T, Tbuffer> {\n-        //debug!(\"take send %?\", p);\n-    SendPacketBuffered {\n-        p: Some(p),\n-        buffer: unsafe {\n-            Some(BufferResource(\n-                get_buffer(ptr::addr_of((*p).header))))\n-        }\n-    }\n-}\n-\n // XXX remove me\n #[cfg(stage0)]\n #[allow(non_camel_case_types)]\n@@ -858,7 +863,7 @@ fn recv_packet<T: Send>(p: *packet<T>) -> RecvPacket<T> {\n     RecvPacket(p)\n }\n \n-struct RecvPacketBuffered<T: Send, Tbuffer: Send> : Selectable {\n+struct RecvPacketBuffered<T: Send, Tbuffer: Send> {\n     mut p: Option<*Packet<T>>,\n     mut buffer: Option<BufferResource<Tbuffer>>,\n     drop {\n@@ -875,6 +880,9 @@ struct RecvPacketBuffered<T: Send, Tbuffer: Send> : Selectable {\n         //                    \"none\"\n         //                } else { \"some\" }); }\n     }\n+}\n+\n+impl<T: Send, Tbuffer: Send> RecvPacketBuffered<T, Tbuffer> : Selectable {\n     fn unwrap() -> *Packet<T> {\n         let mut p = None;\n         p <-> self.p;\n@@ -1095,9 +1103,27 @@ impl<T: Send> Port<T>: Recv<T> {\n     }\n }\n \n+impl<T: Send> Port<T>: Selectable {\n+    pure fn header() -> *PacketHeader unchecked {\n+        match self.endp {\n+          Some(endp) => endp.header(),\n+          None => fail ~\"peeking empty stream\"\n+        }\n+    }\n+}\n+\n /// Treat many ports as one.\n-struct PortSet<T: Send> : Recv<T> {\n+struct PortSet<T: Send> {\n     mut ports: ~[pipes::Port<T>],\n+}\n+\n+fn PortSet<T: Send>() -> PortSet<T>{\n+    PortSet {\n+        ports: ~[]\n+    }\n+}\n+\n+impl<T: Send> PortSet<T> : Recv<T> {\n \n     fn add(+port: pipes::Port<T>) {\n         vec::push(self.ports, move port)\n@@ -1145,21 +1171,6 @@ struct PortSet<T: Send> : Recv<T> {\n     }\n }\n \n-fn PortSet<T: Send>() -> PortSet<T>{\n-    PortSet {\n-        ports: ~[]\n-    }\n-}\n-\n-impl<T: Send> Port<T>: Selectable {\n-    pure fn header() -> *PacketHeader unchecked {\n-        match self.endp {\n-          Some(endp) => endp.header(),\n-          None => fail ~\"peeking empty stream\"\n-        }\n-    }\n-}\n-\n /// A channel that can be shared between many senders.\n type SharedChan<T: Send> = unsafe::Exclusive<Chan<T>>;\n "}, {"sha": "3302b4955bbd230cc0faa8d3e0185d2aa5ca3cb4", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -13,18 +13,22 @@ use pipes::{Channel, Recv, Chan, Port, Selectable};\n export DuplexStream;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n-struct DuplexStream<T: Send, U: Send> : Channel<T>, Recv<U>, Selectable {\n+struct DuplexStream<T: Send, U: Send> {\n     priv chan: Chan<T>,\n     priv port: Port <U>,\n+}\n \n+impl<T: Send, U: Send> DuplexStream<T, U> : Channel<T> {\n     fn send(+x: T) {\n         self.chan.send(x)\n     }\n \n     fn try_send(+x: T) -> bool {\n         self.chan.try_send(x)\n     }\n+}\n \n+impl<T: Send, U: Send> DuplexStream<T, U> : Recv<U> {\n     fn recv() -> U {\n         self.port.recv()\n     }\n@@ -36,7 +40,9 @@ struct DuplexStream<T: Send, U: Send> : Channel<T>, Recv<U>, Selectable {\n     pure fn peek() -> bool {\n         self.port.peek()\n     }\n+}\n \n+impl<T: Send, U: Send> DuplexStream<T, U> : Selectable {\n     pure fn header() -> *pipes::PacketHeader {\n         self.port.header()\n     }"}, {"sha": "1f674bb5395305e2c19e811773921a188aa97912", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -134,6 +134,9 @@ struct protocol_ {\n     states: DVec<state>,\n \n     mut bounded: Option<bool>,\n+}\n+\n+impl protocol_ {\n \n     /// Get a state.\n     fn get_state(name: ~str) -> state {"}, {"sha": "512a5e6459e0962016e8a62272ae44d3d4e27421", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -242,7 +242,9 @@ struct parser {\n     obsolete_set: hashmap<ObsoleteSyntax, ()>,\n \n     drop {} /* do not copy the parser; its state is tied to outside state */\n+}\n \n+impl parser {\n     fn bump() {\n         self.last_span = self.span;\n         let next = if self.buffer_start == self.buffer_end {\n@@ -2776,32 +2778,25 @@ struct parser {\n         let obsolete_let = self.eat_obsolete_ident(\"let\");\n         if obsolete_let { self.obsolete(copy self.last_span, ObsoleteLet) }\n \n-        if (obsolete_let || self.token_is_keyword(~\"mut\", copy self.token) ||\n-            !self.is_any_keyword(copy self.token)) &&\n-            !self.token_is_pound_or_doc_comment(self.token) {\n-            let a_var = self.parse_instance_var(vis);\n-            match self.token {\n-                token::SEMI => {\n-                    self.obsolete(copy self.span, ObsoleteFieldTerminator);\n-                    self.bump();\n-                }\n-                token::COMMA => {\n-                    self.bump();\n-                }\n-                token::RBRACE => {}\n-                _ => {\n-                    self.span_fatal(copy self.span,\n-                                    fmt!(\"expected `;`, `,`, or '}' but \\\n-                                          found `%s`\",\n-                                         token_to_str(self.reader,\n-                                                      self.token)));\n-                }\n-            }\n-            return a_var;\n-        } else {\n-            let m = self.parse_method(vis);\n-            return @method_member(m);\n+        let a_var = self.parse_instance_var(vis);\n+        match self.token {\n+          token::SEMI => {\n+            self.obsolete(copy self.span, ObsoleteFieldTerminator);\n+            self.bump();\n+          }\n+          token::COMMA => {\n+            self.bump();\n+          }\n+          token::RBRACE => {}\n+          _ => {\n+            self.span_fatal(copy self.span,\n+                            fmt!(\"expected `;`, `,`, or '}' but \\\n+                                  found `%s`\",\n+                                 token_to_str(self.reader,\n+                                              self.token)));\n+          }\n         }\n+        return a_var;\n     }\n \n     fn parse_dtor(attrs: ~[attribute]) -> class_contents {"}, {"sha": "fa47f7a21690d33c95dc5f10f62860b0d9561f79", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -120,6 +120,9 @@ struct LanguageItemCollector {\n     session: session,\n \n     item_refs: hashmap<~str,&mut Option<def_id>>,\n+}\n+\n+impl LanguageItemCollector {\n \n     fn match_and_collect_meta_item(item_def_id: def_id,\n                                    meta_item: meta_item) {"}, {"sha": "c99afbd69921eb31a3d2e2dda6829a07c970f8ae", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -379,14 +379,6 @@ struct ImportResolution {\n     mut type_target: Option<Target>,\n \n     mut used: bool,\n-\n-    fn target_for_namespace(namespace: Namespace) -> Option<Target> {\n-        match namespace {\n-            ModuleNS    => return copy self.module_target,\n-            TypeNS      => return copy self.type_target,\n-            ValueNS     => return copy self.value_target\n-        }\n-    }\n }\n \n fn ImportResolution(span: span) -> ImportResolution {\n@@ -400,6 +392,16 @@ fn ImportResolution(span: span) -> ImportResolution {\n     }\n }\n \n+impl ImportResolution {\n+    fn target_for_namespace(namespace: Namespace) -> Option<Target> {\n+        match namespace {\n+            ModuleNS    => return copy self.module_target,\n+            TypeNS      => return copy self.type_target,\n+            ValueNS     => return copy self.value_target\n+        }\n+    }\n+}\n+\n /// The link from a module up to its nearest parent node.\n enum ParentLink {\n     NoParentLink,\n@@ -448,10 +450,6 @@ struct Module {\n \n     // The index of the import we're resolving.\n     mut resolved_import_count: uint,\n-\n-    fn all_imports_resolved() -> bool {\n-        return self.imports.len() == self.resolved_import_count;\n-    }\n }\n \n fn Module(parent_link: ParentLink, def_id: Option<def_id>) -> Module {\n@@ -468,6 +466,12 @@ fn Module(parent_link: ParentLink, def_id: Option<def_id>) -> Module {\n     }\n }\n \n+impl Module {\n+    fn all_imports_resolved() -> bool {\n+        return self.imports.len() == self.resolved_import_count;\n+    }\n+}\n+\n // XXX: This is a workaround due to is_none in the standard library mistakenly\n // requiring a T:copy.\n \n@@ -518,6 +522,9 @@ struct NameBindings {\n     mut module_span: Option<span>,\n     mut type_span: Option<span>,\n     mut value_span: Option<span>,\n+}\n+\n+impl NameBindings {\n \n     /// Creates a new module in this set of name bindings.\n     fn define_module(parent_link: ParentLink, def_id: Option<def_id>,\n@@ -627,7 +634,9 @@ fn NameBindings() -> NameBindings {\n /// Interns the names of the primitive types.\n struct PrimitiveTypeTable {\n     primitive_types: hashmap<Atom,prim_ty>,\n+}\n \n+impl PrimitiveTypeTable {\n     fn intern(intr: ident_interner, string: @~str,\n               primitive_type: prim_ty) {\n         let atom = intr.intern(string);\n@@ -773,6 +782,9 @@ struct Resolver {\n     export_map: ExportMap,\n     export_map2: ExportMap2,\n     trait_map: TraitMap,\n+}\n+\n+impl Resolver {\n \n     /// The main name resolution procedure.\n     fn resolve(@self, this: @Resolver) {"}, {"sha": "6694160e98e02f416dfb0d7e5642bc97f2bf8291", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -105,6 +105,9 @@ struct lookup {\n     candidate_impls: hashmap<def_id, ()>,\n     supplied_tps: ~[ty::t],\n     include_private: bool,\n+}\n+\n+impl lookup {\n \n     // Entrypoint:\n     fn method() -> Option<method_map_entry> {"}, {"sha": "a75ec2c83dc0fc0be904be969360f624fcfd8baa", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -158,6 +158,9 @@ struct CoherenceChecker {\n     // implementations that are defined in the same scope as their base types.\n \n     privileged_implementations: hashmap<node_id,()>,\n+}\n+\n+impl CoherenceChecker {\n \n     // Create a mapping containing a MethodInfo for every provided\n     // method in every trait."}, {"sha": "30b57e5fbff4bdf3400922c8b96b2a54b0955a5e", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -7,9 +7,11 @@ struct cat {\n \n   how_hungry : int,\n \n-  fn speak() {}\n }\n \n+    impl cat {\n+        fn speak() {}\n+    }\n     fn cat(in_x : uint, in_y : int) -> cat {\n         cat {\n             meows: in_x,"}, {"sha": "53f1a3568947aa9005961d19bfc234c6cfc73654", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -6,12 +6,13 @@ struct cat {\n   }\n \n   how_hungry : int,\n-\n-  fn speak() { self.meows += 1u; }\n-  fn meow_count() -> uint { self.meows }\n-\n }\n \n+    impl cat {\n+        fn speak() { self.meows += 1u; }\n+        fn meow_count() -> uint { self.meows }\n+    }\n+\n     fn cat(in_x : uint, in_y : int) -> cat {\n         cat {\n             meows: in_x,"}, {"sha": "585fc09e3202e807e2cd86a13f253df6c37e043d", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -3,17 +3,13 @@ mod kitties {\n struct cat {\n   priv {\n     mut meows : uint,\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n   }\n \n   mut how_hungry : int,\n   name : ~str,\n+}\n+\n+impl cat {\n \n   fn speak() { self.meow(); }\n \n@@ -30,6 +26,16 @@ struct cat {\n   }\n }\n \n+    priv impl cat {\n+        fn meow() {\n+            error!(\"Meow\");\n+            self.meows += 1u;\n+            if self.meows % 5u == 0u {\n+                self.how_hungry += 1;\n+            }\n+        }\n+    }\n+\n     fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n         cat {\n             meows: in_x,"}, {"sha": "f2c34722bd2eb377213b4374247ccbb37b365da2", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -3,13 +3,16 @@ mod kitties {\n struct cat {\n   priv {\n     mut meows : uint,\n-      fn nap() { for uint::range(1u, 10000u) |_i|{}}\n   }\n \n   how_hungry : int,\n \n }\n \n+    impl cat {\n+      priv fn nap() { for uint::range(1u, 10000u) |_i|{}}\n+    }\n+\n     fn cat(in_x : uint, in_y : int) -> cat {\n         cat {\n             meows: in_x,"}, {"sha": "272c381c73d2e950cf3d82ad19ed873fc79b6e5f", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -7,13 +7,14 @@ struct cat<U> {\n   }\n \n   how_hungry : int,\n-\n-  fn speak<T>(stuff: ~[T]) {\n-    self.meows += stuff.len();\n-  }\n-  fn meow_count() -> uint { self.meows }\n }\n \n+    impl<U> cat<U> {\n+        fn speak<T>(stuff: ~[T]) {\n+            self.meows += stuff.len();\n+        }\n+        fn meow_count() -> uint { self.meows }\n+    }\n \n fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n     cat {"}, {"sha": "56cf40fd968b203533f76eba3e7ec2557f56e9c9", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -3,38 +3,45 @@ use to_str::ToStr;\n \n mod kitty {\n \n-struct cat : ToStr {\n+struct cat {\n   priv {\n     mut meows : uint,\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n   }\n \n   mut how_hungry : int,\n   name : ~str,\n+}\n \n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n+    impl cat : ToStr {\n+        fn to_str() -> ~str { self.name }\n     }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n-    }\n-  }\n \n-  fn to_str() -> ~str { self.name }\n-}\n+    priv impl cat {\n+        fn meow() {\n+            error!(\"Meow\");\n+            self.meows += 1u;\n+            if self.meows % 5u == 0u {\n+                self.how_hungry += 1;\n+            }\n+        }\n+\n+    }\n \n+    impl cat {\n+        fn speak() { self.meow(); }\n+\n+        fn eat() -> bool {\n+            if self.how_hungry > 0 {\n+                error!(\"OM NOM NOM\");\n+                self.how_hungry -= 2;\n+                return true;\n+            }\n+            else {\n+                error!(\"Not hungry!\");\n+                return false;\n+            }\n+        }\n+    }\n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,"}, {"sha": "a2d816ec369e3f594c0780c410056f46944e9f49", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -94,7 +94,9 @@ fn reduce(&&word: ~str, get: map_reduce::getter<int>) {\n \n struct box<T> {\n     mut contents: Option<T>,\n+}\n \n+impl<T> box<T> {\n     fn swap(f: fn(+T) -> T) {\n         let mut tmp = None;\n         self.contents <-> tmp;\n@@ -344,10 +346,12 @@ fn is_word_char(c: char) -> bool {\n     char::is_alphabetic(c) || char::is_digit(c) || c == '_'\n }\n \n-struct random_word_reader: word_reader {\n+struct random_word_reader {\n     mut remaining: uint,\n     rng: rand::Rng,\n+}\n \n+impl random_word_reader: word_reader {\n     fn read_word() -> Option<~str> {\n         if self.remaining > 0 {\n             self.remaining -= 1;"}, {"sha": "4d63180a8438f007705d6f9e418df192de63f5ac", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -4,6 +4,9 @@ struct cat {\n   }\n \n   how_hungry : int,\n+}\n+\n+impl cat {\n \n   fn speak() { self.meows += 1u; }\n }"}, {"sha": "58c0bfab79999c3a8aa02c9194ffc75bfd011412", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -3,22 +3,16 @@ trait noisy {\n   fn speak();\n }\n \n-struct cat : noisy {\n+struct cat {\n   priv {\n     mut meows : uint,\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n   }\n \n   mut how_hungry : int,\n   name : str,\n+}\n \n-  fn speak() { self.meow(); }\n+impl cat {\n \n   fn eat() -> bool {\n     if self.how_hungry > 0 {\n@@ -33,6 +27,21 @@ struct cat : noisy {\n   }\n }\n \n+impl cat : noisy {\n+  fn speak() { self.meow(); }\n+\n+}\n+\n+priv impl cat {\n+    fn meow() {\n+      error!(\"Meow\");\n+      self.meows += 1u;\n+      if self.meows % 5u == 0u {\n+          self.how_hungry += 1;\n+      }\n+    }\n+}\n+\n fn cat(in_x : uint, in_y : int, in_name: str) -> cat {\n     cat {\n         meows: in_x,"}, {"sha": "48a8c7a56b9cbced69262b6206a5086cfd2b00eb", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,13 +1,16 @@\n struct cat {\n   priv {\n     mut meows : uint,\n+  }\n+}\n+\n+priv impl cat {\n     fn sleep() { loop{} }\n     fn meow() {\n       error!(\"Meow\");\n       meows += 1u; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name\n     }\n-  }\n \n }\n "}, {"sha": "0335f6698953104ca839646ca4b22acf72414d53", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,4 +1,9 @@\n+// xfail-test Resolve code for classes knew how to do this, impls don't\n+\n struct cat {\n   tail: int,\n+}\n+\n+impl cat {\n   fn meow() { tail += 1; } //~ ERROR: Did you mean: `self.tail`\n }"}, {"sha": "acf85de8bd7072fd38ca8056c25e958dedfa7421", "filename": "src/test/compile-fail/issue-2487-b.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -2,6 +2,9 @@ struct socket {\n     sock: int,\n \n     drop { }\n+}\n+\n+impl socket {\n \n     fn set_identity()  {\n         do closure {"}, {"sha": "2dacbe314e26c6b6ab5cac3c84ea822cf1baab42", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -4,6 +4,9 @@ fn siphash(k0 : u64) {\n \n     struct siphash {\n         mut v0: u64,\n+    }\n+\n+    impl siphash {\n         fn reset() {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: k0"}, {"sha": "68eaffc7f703c39e61ca014411cc9dbfd8eba2a8", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -5,7 +5,9 @@ struct cat {\n   }\n \n   how_hungry : int,\n+}\n \n+impl cat {\n   fn eat() {\n     self.how_hungry -= 5;\n   }"}, {"sha": "2d258e58b8472f353901c19392bde48be75ea9c3", "filename": "src/test/compile-fail/private-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,5 +1,6 @@\n // error-pattern:attempted access of field `nap` on type\n // xfail-fast\n+// xfail-test\n // aux-build:cci_class_5.rs\n use cci_class_5;\n use cci_class_5::kitties::*;"}, {"sha": "d9f070fb5bd8097907457a727f3efde5cd07a778", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,22 +1,28 @@\n-// error-pattern:call to private method not allowed\n+// error-pattern:method `nap` is private\n+\n+mod kitties {\n struct cat {\n   priv {\n     mut meows : uint,\n-      fn nap() { uint::range(1u, 10000u, |_i|{})}\n   }\n \n   how_hungry : int,\n \n }\n \n+impl cat {\n+    priv fn nap() { uint::range(1u, 10000u, |_i| false)}\n+}\n+\n fn cat(in_x : uint, in_y : int) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y\n     }\n }\n+}\n \n fn main() {\n-  let nyan : cat = cat(52u, 99);\n+  let nyan : kitties::cat = kitties::cat(52u, 99);\n   nyan.nap();\n }"}, {"sha": "67e828762f11a38d17069a8ebd672dad8c38b5ab", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,6 +1,8 @@\n struct dog {\n     mut cats_chased: uint,\n+}\n \n+impl dog {\n     fn chase_cat() {\n         let p: &static/mut uint = &mut self.cats_chased; //~ ERROR illegal borrow\n         *p += 1u;"}, {"sha": "a641d929f771b740fd13bc20fd024c173b9d6959", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,6 +1,8 @@\n struct dog {\n     mut food: uint,\n+}\n \n+impl dog {\n     fn chase_cat() {\n         for uint::range(0u, 10u) |_i| {\n             let p: &static/mut uint = &mut self.food; //~ ERROR illegal borrow"}, {"sha": "f2e35c4cd557dbce084c5ede639b232596734a40", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -2,10 +2,16 @@ trait noisy {\n   fn speak() -> int;\n }\n \n-struct dog : noisy {\n+struct dog {\n   priv {\n     barks : @mut uint,\n-    fn bark() -> int {\n+  }\n+\n+  volume : @mut int,\n+}\n+\n+impl dog {\n+    priv fn bark() -> int {\n       debug!(\"Woof %u %d\", *self.barks, *self.volume);\n       *self.barks += 1u;\n       if *self.barks % 3u == 0u {\n@@ -17,10 +23,9 @@ struct dog : noisy {\n       debug!(\"Grrr %u %d\", *self.barks, *self.volume);\n       *self.volume\n     }\n-  }\n-\n-  volume : @mut int,\n+}\n \n+impl dog : noisy {\n   fn speak() -> int { self.bark() }\n }\n \n@@ -31,9 +36,24 @@ fn dog() -> dog {\n     }\n }\n \n-struct cat : noisy {\n+struct cat {\n   priv {\n     meows : @mut uint,\n+  }\n+\n+  how_hungry : @mut int,\n+  name : ~str,\n+}\n+\n+impl cat : noisy {\n+  fn speak() -> int { self.meow() as int }\n+}\n+\n+impl cat {\n+  fn meow_count() -> uint { *self.meows }\n+}\n+\n+priv impl cat {\n     fn meow() -> uint {\n       debug!(\"Meow\");\n       *self.meows += 1u;\n@@ -42,13 +62,6 @@ struct cat : noisy {\n       }\n       *self.meows\n     }\n-  }\n-\n-  how_hungry : @mut int,\n-  name : ~str,\n-\n-  fn speak() -> int { self.meow() as int }\n-  fn meow_count() -> uint { *self.meows }\n }\n \n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {"}, {"sha": "422dd6142f049ac343cf650cfe65bbc4a0995337", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -2,23 +2,20 @@ trait noisy {\n   fn speak();\n }\n \n-struct cat : noisy {\n+struct cat {\n   priv {\n     mut meows : uint,\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n   }\n \n   mut how_hungry : int,\n   name : ~str,\n+}\n \n+impl cat : noisy {\n   fn speak() { self.meow(); }\n+}\n \n+impl cat {\n   fn eat() -> bool {\n     if self.how_hungry > 0 {\n         error!(\"OM NOM NOM\");\n@@ -32,6 +29,16 @@ struct cat : noisy {\n   }\n }\n \n+priv impl cat {\n+    fn meow() {\n+      error!(\"Meow\");\n+      self.meows += 1u;\n+      if self.meows % 5u == 0u {\n+          self.how_hungry += 1;\n+      }\n+    }\n+}\n+\n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,"}, {"sha": "ef03681197623c83cb8624ff91d7501ea2f59966", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -8,7 +8,9 @@ mod kitty {\n   struct cat {\n     meows: uint,\n     name: ~str,\n+  }\n \n+  impl cat {\n     fn get_name() -> ~str {  self.name }\n   }\n "}, {"sha": "ce6074ad4a77bc50c33f67dc74848e52d814ad90", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -14,22 +14,17 @@ impl cat_type : cmp::Eq {\n // for any int value that's less than the meows field\n \n // ok: T should be in scope when resolving the trait ref for map\n-struct cat<T: Copy> : map<int, T> {\n+struct cat<T: Copy> {\n   priv {\n     // Yes, you can have negative meows\n     mut meows : int,\n-    fn meow() {\n-      self.meows += 1;\n-      error!(\"Meow %d\", self.meows);\n-      if self.meows % 5 == 0 {\n-          self.how_hungry += 1;\n-      }\n-    }\n   }\n \n   mut how_hungry : int,\n   name : T,\n+}\n \n+impl<T: Copy> cat<T> {\n   fn speak() { self.meow(); }\n \n   fn eat() -> bool {\n@@ -43,7 +38,9 @@ struct cat<T: Copy> : map<int, T> {\n         return false;\n     }\n   }\n+}\n \n+impl<T: Copy> cat<T> : map<int, T> {\n   pure fn size() -> uint { self.meows as uint }\n   fn insert(+k: int, +_v: T) -> bool {\n     self.meows += k;\n@@ -94,6 +91,16 @@ struct cat<T: Copy> : map<int, T> {\n   fn clear() { }\n }\n \n+priv impl<T: Copy> cat<T> {\n+    fn meow() {\n+      self.meows += 1;\n+      error!(\"Meow %d\", self.meows);\n+      if self.meows % 5 == 0 {\n+          self.how_hungry += 1;\n+      }\n+    }\n+}\n+\n fn cat<T: Copy>(in_x : int, in_y : int, in_name: T) -> cat<T> {\n     cat {\n         meows: in_x,"}, {"sha": "a1c2b420c46e3f061ed8ce3613c8bb83febf71d5", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -3,23 +3,16 @@\n use cci_class_trait;\n use cci_class_trait::animals::*;\n \n-struct cat : noisy {\n+struct cat {\n   priv {\n     mut meows : uint,\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n   }\n \n   mut how_hungry : int,\n   name : ~str,\n+}\n \n-  fn speak() { self.meow(); }\n-\n+impl cat {\n   fn eat() -> bool {\n     if self.how_hungry > 0 {\n         error!(\"OM NOM NOM\");\n@@ -33,6 +26,22 @@ struct cat : noisy {\n   }\n }\n \n+impl cat : noisy {\n+\n+  fn speak() { self.meow(); }\n+\n+}\n+\n+priv impl cat {\n+    fn meow() {\n+      error!(\"Meow\");\n+      self.meows += 1u;\n+      if self.meows % 5u == 0u {\n+          self.how_hungry += 1;\n+      }\n+    }\n+}\n+\n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,"}, {"sha": "e31501d02f52f515d5e846e67804288bf24d2c15", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -2,23 +2,26 @@ trait noisy {\n   fn speak();\n }\n \n-struct cat : noisy {\n+struct cat {\n   priv {\n     mut meows : uint,\n+  }\n+\n+  mut how_hungry : int,\n+  name : ~str,\n+}\n+\n+priv impl cat {\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n       if self.meows % 5u == 0u {\n           self.how_hungry += 1;\n       }\n     }\n-  }\n-\n-  mut how_hungry : int,\n-  name : ~str,\n-\n-  fn speak() { self.meow(); }\n+}\n \n+impl cat {\n   fn eat() -> bool {\n     if self.how_hungry > 0 {\n         error!(\"OM NOM NOM\");\n@@ -32,6 +35,10 @@ struct cat : noisy {\n   }\n }\n \n+impl cat : noisy {\n+  fn speak() { self.meow(); }\n+}\n+\n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,"}, {"sha": "d5cee133097f92af04efb0ff05852e509c3aa02b", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -4,6 +4,9 @@ struct cat {\n   }\n \n   how_hungry : int,\n+}\n+\n+impl cat {\n \n   fn speak() { self.meows += 1u; }\n   fn meow_count() -> uint { self.meows }"}, {"sha": "0f07b36e6c141f9fd1c4550ab39d9f435b425a43", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -5,7 +5,9 @@ struct cat<U> {\n   }\n \n   how_hungry : int,\n+}\n \n+impl<U> cat<U> {\n   fn speak<T>(stuff: ~[T]) {\n     self.meows += stuff.len();\n   }"}, {"sha": "47fd98b49a89ec1fa750e6362f2c48e3ac094ce9", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -5,17 +5,13 @@ use to_str::ToStr;\n struct cat {\n   priv {\n     mut meows : uint,\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n   }\n \n   mut how_hungry : int,\n   name : ~str,\n+}\n+\n+impl cat {\n \n   fn speak() { self.meow(); }\n \n@@ -32,6 +28,16 @@ struct cat {\n   }\n }\n \n+priv impl cat {\n+    fn meow() {\n+      error!(\"Meow\");\n+      self.meows += 1u;\n+      if self.meows % 5u == 0u {\n+          self.how_hungry += 1;\n+      }\n+    }\n+}\n+\n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,"}, {"sha": "d11b1761b3cd7f489d0fe74370ce3ed1797f13ff", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -4,7 +4,9 @@ struct cat<U> {\n   }\n \n   how_hungry : int,\n+}\n \n+impl<U> cat<U> {\n   fn speak() {\n     self.meows += 1u;\n   }"}, {"sha": "4cee896f23a3d4edafa9e0e3c96b7c79ac2aba28", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -4,7 +4,9 @@ struct cat {\n   }\n \n   how_hungry : int,\n+}\n \n+impl cat {\n   fn speak() {}\n }\n "}, {"sha": "0ade8e57f9ca1dc360c1f3c6023f0b34b297718b", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,17 +1,13 @@\n struct cat {\n   priv {\n     mut meows : uint,\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n   }\n \n   mut how_hungry : int,\n   name : ~str,\n+}\n+\n+impl cat {\n \n   fn speak() { self.meow(); }\n \n@@ -28,6 +24,16 @@ struct cat {\n   }\n }\n \n+priv impl cat {\n+    fn meow() {\n+      error!(\"Meow\");\n+      self.meows += 1u;\n+      if self.meows % 5u == 0u {\n+          self.how_hungry += 1;\n+      }\n+    }\n+}\n+\n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,"}, {"sha": "fb88ee6e8ff71866f11e95fd3bdeb779ee71cec6", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,8 +1,11 @@\n trait clam<A: Copy> {\n   fn chowder(y: A);\n }\n-struct foo<A: Copy> : clam<A> {\n+struct foo<A: Copy> {\n   x: A,\n+}\n+\n+impl<A: Copy> foo<A> : clam<A> {\n   fn chowder(y: A) {\n   }\n }"}, {"sha": "9c3ea2b2b7e4a1023d09abae028df6245a6e008a", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,6 +1,9 @@\n trait clam<A: Copy> { }\n struct foo<A: Copy> {\n     x: A,\n+}\n+\n+impl<A: Copy> foo<A> {\n    fn bar<B,C:clam<A>>(c: C) -> B {\n      fail;\n    }"}, {"sha": "f52cec96f44e05c99243c5077919271d3fb0ecec", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,5 +1,8 @@\n struct c1<T: Copy> {\n     x: T,\n+}\n+\n+impl<T: Copy> c1<T> {\n     fn f1(x: int) {\n     }\n }"}, {"sha": "b5e21e32729fd22e54e50c0680692b8e52a35c05", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -2,6 +2,9 @@ use dvec::DVec;\n \n struct c1<T: Copy> {\n     x: T,\n+}\n+\n+impl<T: Copy> c1<T> {\n     fn f1(x: T) {}\n }\n "}, {"sha": "8a21f128a99165de82ec4127ee3d6ab52b6def5b", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -2,6 +2,9 @@ struct socket {\n     sock: int,\n \n     drop { }\n+}\n+\n+impl socket {\n \n     fn set_identity()  {\n         do closure {"}, {"sha": "64028890df027281813eae84572b2023de0b7885", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,6 +1,8 @@\n struct font {\n     fontbuf: &self/~[u8],\n+}\n \n+impl font {\n     fn buf() -> &self/~[u8] {\n         self.fontbuf\n     }"}, {"sha": "6f6b6e2cd393f34f8cbf29dca50e85d066deae50", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -145,6 +145,9 @@ mod pipes {\n                 sender_terminate(option::unwrap(p))\n             }\n         }\n+    }\n+\n+    impl<T: Send> send_packet<T> {\n         fn unwrap() -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n@@ -167,6 +170,9 @@ mod pipes {\n                 receiver_terminate(option::unwrap(p))\n             }\n         }\n+    }\n+\n+    impl<T: Send> recv_packet<T> {\n         fn unwrap() -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;"}, {"sha": "c4b6ef99e706e3624efb8fefb57a50c4499048e5", "filename": "src/test/run-pass/issue-2936.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2936.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -6,8 +6,11 @@ fn foo<T, U: bar<T>>(b: U) -> T {\n     b.get_bar()\n }\n \n-struct cbar : bar<int> {\n+struct cbar {\n     x: int,\n+}\n+\n+impl cbar : bar<int> {\n     fn get_bar() -> int {\n         self.x\n     }"}, {"sha": "4fc49383adc48613643cd6ac0ed26c473deedfb4", "filename": "src/test/run-pass/nested-class.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -2,6 +2,9 @@ fn main() {\n   \n   struct b {\n     i: int,\n+  }\n+\n+  impl b {\n     fn do_stuff() -> int { return 37; }\n   }\n "}, {"sha": "735545a580c16f37b3cc03c9dbda7c4ea5ad6c96", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -4,7 +4,9 @@ struct cat {\n   }\n \n   how_hungry : int,\n+}\n \n+impl cat {\n   fn meow_count() -> uint { self.meows }\n }\n "}, {"sha": "23789676549b62dc44c33c48a1872bc0fa3f459b", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,17 +1,22 @@\n struct cat {\n   priv {\n       mut meows : uint,\n-      fn nap() { for uint::range(1u, 10u) |_i| { }}\n   }\n \n   how_hungry : int,\n+}\n \n+impl cat {\n   fn play() {\n     self.meows += 1u;\n     self.nap();\n   }\n }\n \n+priv impl cat {\n+    fn nap() { for uint::range(1u, 10u) |_i| { }}\n+}\n+\n fn cat(in_x : uint, in_y : int) -> cat {\n     cat {\n         meows: in_x,"}, {"sha": "3f3417fd703fd68b264535c300af20c649efa7de", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,9 +1,12 @@\n struct shrinky_pointer {\n   i: @@mut int,\n-  fn look_at() -> int { return **(self.i); }\n   drop { log(error, ~\"Hello!\"); **(self.i) -= 1; }\n }\n \n+impl shrinky_pointer {\n+  fn look_at() -> int { return **(self.i); }\n+}\n+\n fn shrinky_pointer(i: @@mut int) -> shrinky_pointer {\n     shrinky_pointer {\n         i: i"}, {"sha": "8252922194333251192a02823d13d5ce453d9447", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=93d3b8aa6b681a8add60e4a22a5c41e7f7ce7557", "patch": "@@ -1,6 +1,6 @@\n use std;\n use pipes::send;\n-use pipes::chan;\n+use pipes::Chan;\n use pipes::recv;\n \n fn main() { test00(); }"}]}