{"sha": "36aea66e479708a9058dde1b2ad459972a62807c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YWVhNjZlNDc5NzA4YTkwNThkZGUxYjJhZDQ1OTk3MmE2MjgwN2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T18:47:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T18:47:28Z"}, "message": "Give rustc the beginnings of an option-processing loop (at least -nowarn, -h and -o).", "tree": {"sha": "617cdd173be14c82432bca44d9a511f5e281a777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/617cdd173be14c82432bca44d9a511f5e281a777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36aea66e479708a9058dde1b2ad459972a62807c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36aea66e479708a9058dde1b2ad459972a62807c", "html_url": "https://github.com/rust-lang/rust/commit/36aea66e479708a9058dde1b2ad459972a62807c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36aea66e479708a9058dde1b2ad459972a62807c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74eda5bb70b5f653ab835bc0f2ea6fb85e421356", "url": "https://api.github.com/repos/rust-lang/rust/commits/74eda5bb70b5f653ab835bc0f2ea6fb85e421356", "html_url": "https://github.com/rust-lang/rust/commit/74eda5bb70b5f653ab835bc0f2ea6fb85e421356"}], "stats": {"total": 110, "additions": 99, "deletions": 11}, "files": [{"sha": "67c26f9b07dcd7f99e83e8f2044c0ecbc214adca", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 97, "deletions": 9, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/36aea66e479708a9058dde1b2ad459972a62807c/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aea66e479708a9058dde1b2ad459972a62807c/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=36aea66e479708a9058dde1b2ad459972a62807c", "patch": "@@ -5,23 +5,111 @@ import front.token;\n import middle.trans;\n import middle.resolve;\n \n-io fn main(vec[str] args) {\n+import std.util.option;\n+import std.util.some;\n+import std.util.none;\n+import std._str;\n+import std._vec;\n+\n+io fn compile_input(session.session sess, str input, str output) {\n+          auto p = parser.new_parser(sess, 0, input);\n+          auto crate = parser.parse_crate(p);\n+          crate = resolve.resolve_crate(sess, crate);\n+          trans.trans_crate(sess, crate, output);\n+}\n \n+fn warn_wrong_compiler() {\n   log \"This is the rust 'self-hosted' compiler.\";\n   log \"The one written in rust.\";\n   log \"It does nothing yet, it's a placeholder.\";\n   log \"You want rustboot, the compiler next door.\";\n+}\n+\n+fn usage(session.session sess, str argv0) {\n+    log #fmt(\"usage: %s [options] <input>\", argv0);\n+    log \"options:\";\n+    log \"\";\n+    log \"    -o <filename>      write output to <filename>\";\n+    log \"    -nowarn            suppress wrong-compiler warning\";\n+    log \"    -h                 display this message\";\n+    log \"\";\n+    log \"\";\n+}\n+\n+io fn main(vec[str] args) {\n \n-  auto i = 0;\n   auto sess = session.session();\n-  for (str filename in args) {\n-      if (i > 0) {\n-          auto p = parser.new_parser(sess, 0, filename);\n-          auto crate = parser.parse_crate(p);\n-          crate = resolve.resolve_crate(sess, crate);\n-          trans.trans_crate(sess, crate);\n+  let option[str] input_file = none[str];\n+  let option[str] output_file = none[str];\n+  let bool do_warn = true;\n+\n+  auto i = 1u;\n+  auto len = _vec.len[str](args);\n+\n+  // FIXME: a getopt module would be nice.\n+  while (i < len) {\n+      auto arg = args.(i);\n+      if (_str.byte_len(arg) > 0u && arg.(0) == '-' as u8) {\n+          if (_str.eq(arg, \"-nowarn\")) {\n+              do_warn = false;\n+          } else {\n+              // FIXME: rust could use an elif construct.\n+              if (_str.eq(arg, \"-o\")) {\n+                  if (i+1u < len) {\n+                      output_file = some(args.(i+1u));\n+                      i += 1u;\n+                  } else {\n+                      usage(sess, args.(0));\n+                      sess.err(\"-o requires an argument\");\n+                  }\n+              } else {\n+                  if (_str.eq(arg, \"-h\")) {\n+                      usage(sess, args.(0));\n+                  } else {\n+                      usage(sess, args.(0));\n+                      sess.err(\"unrecognized option: \" + arg);\n+                  }\n+              }\n+          }\n+      } else {\n+          alt (input_file) {\n+              case (some[str](_)) {\n+                  usage(sess, args.(0));\n+                  sess.err(\"multiple inputs provided\");\n+              }\n+              case (none[str]) {\n+                  input_file = some[str](arg);\n+              }\n+          }\n+          // FIXME: dummy node to work around typestate mis-wiring bug.\n+          i = i;\n+      }\n+      i += 1u;\n+  }\n+\n+  if (do_warn) {\n+      warn_wrong_compiler();\n+  }\n+\n+  alt (input_file) {\n+      case (none[str]) {\n+          usage(sess, args.(0));\n+          sess.err(\"no input filename\");\n+      }\n+      case (some[str](?ifile)) {\n+          alt (output_file) {\n+              case (none[str]) {\n+                  let vec[str] parts = _str.split(ifile, '.' as u8);\n+                  parts = _vec.pop[str](parts);\n+                  parts += \".bc\";\n+                  auto ofile = _str.concat(parts);\n+                  compile_input(sess, ifile, ofile);\n+              }\n+              case (some[str](?ofile)) {\n+                  compile_input(sess, ifile, ofile);\n+              }\n+          }\n       }\n-      i += 1;\n   }\n }\n "}, {"sha": "83e744ea4d2c67f9f92b8b5af54a7b1b028994be", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36aea66e479708a9058dde1b2ad459972a62807c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36aea66e479708a9058dde1b2ad459972a62807c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=36aea66e479708a9058dde1b2ad459972a62807c", "patch": "@@ -1095,7 +1095,7 @@ fn trans_main_fn(@trans_ctxt cx, ValueRef llcrate) {\n \n }\n \n-fn trans_crate(session.session sess, @ast.crate crate) {\n+fn trans_crate(session.session sess, @ast.crate crate, str output) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n@@ -1138,7 +1138,7 @@ fn trans_crate(session.session sess, @ast.crate crate) {\n     trans_exit_task_glue(cx);\n     trans_main_fn(cx, crate_constant(cx));\n \n-    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(\"rust_out.bc\"));\n+    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n     llvm.LLVMDisposeModule(llmod);\n }\n "}]}