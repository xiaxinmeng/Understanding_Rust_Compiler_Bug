{"sha": "b6df8276f8dca6f3da04b6ddf324a68832ccaa3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZGY4Mjc2ZjhkY2E2ZjNkYTA0YjZkZGYzMjRhNjg4MzJjY2FhM2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T03:32:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-29T03:32:45Z"}, "message": "Rollup merge of #63933 - wesleywiser:cleanup_from_move_promoted, r=oli-obk\n\nResolve some small issues related to #63580\n\nThis resolves some feedback left on #63580 after it was merged:\n\n- Adds documentation to `mir::Static` and `mir::StaticKind`\n- Simplifies `maybe_get_optimized_mir()` and `maybe_get_promoted_mir()`\n\ncc @bjorn3 @RalfJung", "tree": {"sha": "439261547d7f54690888844acbf0f23658084788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439261547d7f54690888844acbf0f23658084788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZ0ddCRBK7hj4Ov3rIwAAdHIIAIGM5zjAj6JLGxLOFVZ5aH34\nf6iEWQ28v/VgKg4YDcx+YLIy/x9mhN2OOiTAE5B8dvs0SpMuHwELnoACHj+o8EMl\n/dEz7fafPzH6tkxhhcwXHhv6eLQJFS3dhsmeDZQe880x7gruc2BfK6wGKoMta09r\ntya0Hdy09PNIvv9Kh1AqVW5HsKDiurXxMkTK/SSLt/Tp+dMDA57BmJ1AJNW6u0eQ\ncQ2CovPEDlSo5s9KhSnXNbxizmuhiKT7+qhUDfBbOev+tCOyNCPgS7+bvemqDaSN\nIzDSgMWs3sRK5qfbk9BeyOSFB77kgN6m08LNFw+RMJ2DODf1MpKZ+eXx0ErCs7o=\n=ZLtu\n-----END PGP SIGNATURE-----\n", "payload": "tree 439261547d7f54690888844acbf0f23658084788\nparent 4cae33a17631b4852453eec7a89d5c02b152e611\nparent 009cce88ebcbdb5825c86fd7f3ff84216a2d3fec\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567049565 +0200\ncommitter GitHub <noreply@github.com> 1567049565 +0200\n\nRollup merge of #63933 - wesleywiser:cleanup_from_move_promoted, r=oli-obk\n\nResolve some small issues related to #63580\n\nThis resolves some feedback left on #63580 after it was merged:\n\n- Adds documentation to `mir::Static` and `mir::StaticKind`\n- Simplifies `maybe_get_optimized_mir()` and `maybe_get_promoted_mir()`\n\ncc @bjorn3 @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b", "html_url": "https://github.com/rust-lang/rust/commit/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cae33a17631b4852453eec7a89d5c02b152e611", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cae33a17631b4852453eec7a89d5c02b152e611", "html_url": "https://github.com/rust-lang/rust/commit/4cae33a17631b4852453eec7a89d5c02b152e611"}, {"sha": "009cce88ebcbdb5825c86fd7f3ff84216a2d3fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/009cce88ebcbdb5825c86fd7f3ff84216a2d3fec", "html_url": "https://github.com/rust-lang/rust/commit/009cce88ebcbdb5825c86fd7f3ff84216a2d3fec"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "5ac99ba1470001ebfaaad1d36f3b617aa66e2dff", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b6df8276f8dca6f3da04b6ddf324a68832ccaa3b", "patch": "@@ -1733,13 +1733,20 @@ pub enum PlaceBase<'tcx> {\n pub struct Static<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub kind: StaticKind<'tcx>,\n+    /// The `DefId` of the item this static was declared in. For promoted values, usually, this is\n+    /// the same as the `DefId` of the `mir::Body` containing the `Place` this promoted appears in.\n+    /// However, after inlining, that might no longer be the case as inlined `Place`s are copied\n+    /// into the calling frame.\n     pub def_id: DefId,\n }\n \n #[derive(\n     Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, RustcEncodable, RustcDecodable,\n )]\n pub enum StaticKind<'tcx> {\n+    /// Promoted references consist of an id (`Promoted`) and the substs necessary to monomorphize\n+    /// it. Usually, these substs are just the identity substs for the item. However, the inliner\n+    /// will adjust these substs when it inlines a function based on the substs at the callsite.\n     Promoted(Promoted, SubstsRef<'tcx>),\n     Static,\n }"}, {"sha": "ca0cf0a5a661dbd5e7c5bbc33320bc1c7a119407", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b6df8276f8dca6f3da04b6ddf324a68832ccaa3b", "patch": "@@ -125,24 +125,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n         })\n     }\n-    optimized_mir => {\n-        let mir = cdata.maybe_get_optimized_mir(tcx, def_id.index).unwrap_or_else(|| {\n-            bug!(\"get_optimized_mir: missing MIR for `{:?}`\", def_id)\n-        });\n-\n-        let mir = tcx.arena.alloc(mir);\n-\n-        mir\n-    }\n-    promoted_mir => {\n-        let promoted = cdata.maybe_get_promoted_mir(tcx, def_id.index).unwrap_or_else(|| {\n-            bug!(\"get_promoted_mir: missing promoted MIR for `{:?}`\", def_id)\n-        });\n-\n-        let promoted = tcx.arena.alloc(promoted);\n-\n-        promoted\n-    }\n+    optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n+    promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     mir_const_qualif => {\n         (cdata.mir_const_qualif(def_id.index), tcx.arena.alloc(BitSet::new_empty(0)))\n     }"}, {"sha": "9977a7fa1dcc448bab0a89f197f89c862b09daab", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6df8276f8dca6f3da04b6ddf324a68832ccaa3b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b6df8276f8dca6f3da04b6ddf324a68832ccaa3b", "patch": "@@ -450,11 +450,19 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn is_proc_macro_crate(&self) -> bool {\n         self.root.proc_macro_decls_static.is_some()\n     }\n+\n     fn is_proc_macro(&self, id: DefIndex) -> bool {\n         self.is_proc_macro_crate() &&\n             self.root.proc_macro_data.unwrap().decode(self).find(|x| *x == id).is_some()\n     }\n \n+    fn entry_unless_proc_macro(&self, id: DefIndex) -> Option<Entry<'tcx>> {\n+        match self.is_proc_macro(id) {\n+            true => None,\n+            false => Some(self.entry(id)),\n+        }\n+    }\n+\n     fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         self.root.entries_index.lookup(self.blob.raw_bytes(), item_id)\n     }\n@@ -689,10 +697,8 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> {\n-        match self.is_proc_macro(id) {\n-            true => None,\n-            false => self.entry(id).deprecation.map(|depr| depr.decode(self)),\n-        }\n+        self.entry_unless_proc_macro(id)\n+            .and_then(|entry| entry.deprecation.map(|depr| depr.decode(self)))\n     }\n \n     pub fn get_visibility(&self, id: DefIndex) -> ty::Visibility {\n@@ -902,22 +908,24 @@ impl<'a, 'tcx> CrateMetadata {\n         self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n     }\n \n-    pub fn maybe_get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Option<Body<'tcx>> {\n-        match self.is_proc_macro(id) {\n-            true => None,\n-            false => self.entry(id).mir.map(|mir| mir.decode((self, tcx))),\n-        }\n+    pub fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n+        self.entry_unless_proc_macro(id)\n+            .and_then(|entry| entry.mir.map(|mir| mir.decode((self, tcx))))\n+            .unwrap_or_else(|| {\n+                bug!(\"get_optimized_mir: missing MIR for `{:?}\", self.local_def_id(id))\n+            })\n     }\n \n-    pub fn maybe_get_promoted_mir(\n+    pub fn get_promoted_mir(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         id: DefIndex,\n-    ) -> Option<IndexVec<Promoted, Body<'tcx>>> {\n-        match self.is_proc_macro(id) {\n-            true => None,\n-            false => self.entry(id).promoted_mir.map(|promoted| promoted.decode((self, tcx)),)\n-        }\n+    ) -> IndexVec<Promoted, Body<'tcx>> {\n+        self.entry_unless_proc_macro(id)\n+            .and_then(|entry| entry.promoted_mir.map(|promoted| promoted.decode((self, tcx))))\n+            .unwrap_or_else(|| {\n+                bug!(\"get_promoted_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n+            })\n     }\n \n     pub fn mir_const_qualif(&self, id: DefIndex) -> u8 {"}]}