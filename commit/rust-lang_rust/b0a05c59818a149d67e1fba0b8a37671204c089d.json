{"sha": "b0a05c59818a149d67e1fba0b8a37671204c089d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYTA1YzU5ODE4YTE0OWQ2N2UxZmJhMGI4YTM3NjcxMjA0YzA4OWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-01T21:13:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-05T22:18:30Z"}, "message": "Validate syntax of `cfg` attributes", "tree": {"sha": "2ab30ebe7f621a00cc7634a4f3390e8b447934fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab30ebe7f621a00cc7634a4f3390e8b447934fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0a05c59818a149d67e1fba0b8a37671204c089d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a05c59818a149d67e1fba0b8a37671204c089d", "html_url": "https://github.com/rust-lang/rust/commit/b0a05c59818a149d67e1fba0b8a37671204c089d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0a05c59818a149d67e1fba0b8a37671204c089d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "780b0c7bbfacc56f59a729881b5c95cd2c61ff97", "url": "https://api.github.com/repos/rust-lang/rust/commits/780b0c7bbfacc56f59a729881b5c95cd2c61ff97", "html_url": "https://github.com/rust-lang/rust/commit/780b0c7bbfacc56f59a729881b5c95cd2c61ff97"}], "stats": {"total": 152, "additions": 139, "deletions": 13}, "files": [{"sha": "5fc9c5578e1f202cd445fdd1d4693641e3f6b9c4", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0a05c59818a149d67e1fba0b8a37671204c089d/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a05c59818a149d67e1fba0b8a37671204c089d/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=b0a05c59818a149d67e1fba0b8a37671204c089d", "patch": "@@ -433,7 +433,21 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n         if let (Some(feats), Some(gated_cfg)) = (features, GatedCfg::gate(cfg)) {\n             gated_cfg.check_and_emit(sess, feats);\n         }\n-        sess.config.contains(&(cfg.name(), cfg.value_str()))\n+        let error = |span, msg| { sess.span_diagnostic.span_err(span, msg); true };\n+        if cfg.ident.segments.len() != 1 {\n+            return error(cfg.ident.span, \"`cfg` predicate key must be an identifier\");\n+        }\n+        match &cfg.node {\n+            MetaItemKind::List(..) => {\n+                error(cfg.span, \"unexpected parentheses after `cfg` predicate key\")\n+            }\n+            MetaItemKind::NameValue(lit) if !lit.node.is_str() => {\n+                error(lit.span, \"literal in `cfg` predicate value must be a string\")\n+            }\n+            MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n+                sess.config.contains(&(cfg.name(), cfg.value_str()))\n+            }\n+        }\n     })\n }\n "}, {"sha": "63b70b1224840a6afb70c42754e0bec111d7feda", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b0a05c59818a149d67e1fba0b8a37671204c089d/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a05c59818a149d67e1fba0b8a37671204c089d/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=b0a05c59818a149d67e1fba0b8a37671204c089d", "patch": "@@ -116,25 +116,45 @@ impl<'a> StripUnconfigured<'a> {\n     // Determine if a node with the given attributes should be included in this configuration.\n     pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n-            let mis = if !is_cfg(attr) {\n+            if !is_cfg(attr) {\n                 return true;\n-            } else if let Some(mis) = attr.meta_item_list() {\n-                mis\n+            }\n+\n+            let error = |span, msg, suggestion: &str| {\n+                let mut err = self.sess.span_diagnostic.struct_span_err(span, msg);\n+                if !suggestion.is_empty() {\n+                    err.span_suggestion(span, \"expected syntax is\", suggestion.into());\n+                }\n+                err.emit();\n+                true\n+            };\n+\n+            let meta_item = if let Some(meta_item) = attr.meta() {\n+                meta_item\n             } else {\n-                return true;\n+                // Not a well-formed meta-item. Why? We don't know.\n+                return error(attr.span, \"`cfg` is not a well-formed meta-item\",\n+                                        \"#[cfg(/* predicate */)]\");\n+            };\n+            let nested_meta_items = if let Some(nested_meta_items) = meta_item.meta_item_list() {\n+                nested_meta_items\n+            } else {\n+                return error(meta_item.span, \"`cfg` is not followed by parentheses\",\n+                                             \"cfg(/* predicate */)\");\n             };\n \n-            if mis.len() != 1 {\n-                self.sess.span_diagnostic.span_err(attr.span, \"expected 1 cfg-pattern\");\n-                return true;\n+            if nested_meta_items.is_empty() {\n+                return error(meta_item.span, \"`cfg` predicate is not specified\", \"\");\n+            } else if nested_meta_items.len() > 1 {\n+                return error(nested_meta_items.last().unwrap().span,\n+                             \"multiple `cfg` predicates are specified\", \"\");\n             }\n \n-            if !mis[0].is_meta_item() {\n-                self.sess.span_diagnostic.span_err(mis[0].span, \"unexpected literal\");\n-                return true;\n+            match nested_meta_items[0].meta_item() {\n+                Some(meta_item) => attr::cfg_matches(meta_item, self.sess, self.features),\n+                None => error(nested_meta_items[0].span,\n+                              \"`cfg` predicate key cannot be a literal\", \"\"),\n             }\n-\n-            attr::cfg_matches(mis[0].meta_item().unwrap(), self.sess, self.features)\n         })\n     }\n "}, {"sha": "06a22eff25c218c6b8aef73cf76e887d1333e713", "filename": "src/test/ui/cfg-attr-syntax-validation.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0a05c59818a149d67e1fba0b8a37671204c089d/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0a05c59818a149d67e1fba0b8a37671204c089d/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.rs?ref=b0a05c59818a149d67e1fba0b8a37671204c089d", "patch": "@@ -0,0 +1,32 @@\n+#[cfg] //~ ERROR `cfg` is not followed by parentheses\n+struct S1;\n+\n+#[cfg = 10] //~ ERROR `cfg` is not followed by parentheses\n+struct S2;\n+\n+#[cfg()] //~ ERROR `cfg` predicate is not specified\n+struct S3;\n+\n+#[cfg(a, b)] //~ ERROR multiple `cfg` predicates are specified\n+struct S4;\n+\n+#[cfg(\"str\")] //~ ERROR `cfg` predicate key cannot be a literal\n+struct S5;\n+\n+#[cfg(a::b)] //~ ERROR `cfg` predicate key must be an identifier\n+struct S6;\n+\n+#[cfg(a())] //~ ERROR invalid predicate `a`\n+struct S7;\n+\n+#[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n+struct S8;\n+\n+macro_rules! generate_s9 {\n+    ($expr: expr) => {\n+        #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n+        struct S9;\n+    }\n+}\n+\n+generate_s9!(concat!(\"nonexistent\"));"}, {"sha": "7773fdb8cf9848f9ed01f6f4a37cc1cfc7f84734", "filename": "src/test/ui/cfg-attr-syntax-validation.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b0a05c59818a149d67e1fba0b8a37671204c089d/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0a05c59818a149d67e1fba0b8a37671204c089d/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-syntax-validation.stderr?ref=b0a05c59818a149d67e1fba0b8a37671204c089d", "patch": "@@ -0,0 +1,60 @@\n+error: `cfg` is not followed by parentheses\n+  --> $DIR/cfg-attr-syntax-validation.rs:1:1\n+   |\n+LL | #[cfg] //~ ERROR `cfg` is not followed by parentheses\n+   | ^^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n+\n+error: `cfg` is not followed by parentheses\n+  --> $DIR/cfg-attr-syntax-validation.rs:4:1\n+   |\n+LL | #[cfg = 10] //~ ERROR `cfg` is not followed by parentheses\n+   | ^^^^^^^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n+\n+error: `cfg` predicate is not specified\n+  --> $DIR/cfg-attr-syntax-validation.rs:7:1\n+   |\n+LL | #[cfg()] //~ ERROR `cfg` predicate is not specified\n+   | ^^^^^^^^\n+\n+error: multiple `cfg` predicates are specified\n+  --> $DIR/cfg-attr-syntax-validation.rs:10:10\n+   |\n+LL | #[cfg(a, b)] //~ ERROR multiple `cfg` predicates are specified\n+   |          ^\n+\n+error: `cfg` predicate key cannot be a literal\n+  --> $DIR/cfg-attr-syntax-validation.rs:13:7\n+   |\n+LL | #[cfg(\"str\")] //~ ERROR `cfg` predicate key cannot be a literal\n+   |       ^^^^^\n+\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-attr-syntax-validation.rs:16:7\n+   |\n+LL | #[cfg(a::b)] //~ ERROR `cfg` predicate key must be an identifier\n+   |       ^^^^\n+\n+error[E0537]: invalid predicate `a`\n+  --> $DIR/cfg-attr-syntax-validation.rs:19:7\n+   |\n+LL | #[cfg(a())] //~ ERROR invalid predicate `a`\n+   |       ^^^\n+\n+error: literal in `cfg` predicate value must be a string\n+  --> $DIR/cfg-attr-syntax-validation.rs:22:11\n+   |\n+LL | #[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n+   |           ^^\n+\n+error: `cfg` is not a well-formed meta-item\n+  --> $DIR/cfg-attr-syntax-validation.rs:27:9\n+   |\n+LL |         #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: expected syntax is: `#[cfg(/* predicate */)]`\n+...\n+LL | generate_s9!(concat!(\"nonexistent\"));\n+   | ------------------------------------- in this macro invocation\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0537`."}]}