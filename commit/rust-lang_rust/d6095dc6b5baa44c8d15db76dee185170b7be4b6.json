{"sha": "d6095dc6b5baa44c8d15db76dee185170b7be4b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDk1ZGM2YjViYWE0NGM4ZDE1ZGI3NmRlZTE4NTE3MGI3YmU0YjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-21T04:44:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-22T00:14:02Z"}, "message": "rustdoc: Rename mk_srv_from_str/file to just from_str/file", "tree": {"sha": "aacd973f6a4981d756c00649938e4c4f9d939521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aacd973f6a4981d756c00649938e4c4f9d939521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6095dc6b5baa44c8d15db76dee185170b7be4b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6095dc6b5baa44c8d15db76dee185170b7be4b6", "html_url": "https://github.com/rust-lang/rust/commit/d6095dc6b5baa44c8d15db76dee185170b7be4b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6095dc6b5baa44c8d15db76dee185170b7be4b6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77a01054fa5ee5e17faece9d68ecec9bf593778f", "url": "https://api.github.com/repos/rust-lang/rust/commits/77a01054fa5ee5e17faece9d68ecec9bf593778f", "html_url": "https://github.com/rust-lang/rust/commit/77a01054fa5ee5e17faece9d68ecec9bf593778f"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "b34a01e86a5e894b8f69b1b10c4ba44facc7e2c8", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -22,8 +22,8 @@ import rustc::middle::resolve;\n export ctxt;\n export ctxt_handler;\n export srv;\n-export mk_srv_from_str;\n-export mk_srv_from_file;\n+export from_str;\n+export from_file;\n export exec;\n \n type ctxt = {\n@@ -38,15 +38,15 @@ type srv = {\n     ctxt: ctxt\n };\n \n-fn mk_srv_from_str(source: str) -> srv {\n+fn from_str(source: str) -> srv {\n     let (sess, ignore_errors) = build_session();\n     {\n         ctxt: build_ctxt(sess, parse::from_str_sess(sess, source),\n                          ignore_errors)\n     }\n }\n \n-fn mk_srv_from_file(file: str) -> srv {\n+fn from_file(file: str) -> srv {\n     let (sess, ignore_errors) = build_session();\n     {\n         ctxt: build_ctxt(sess, parse::from_file_sess(sess, file),\n@@ -172,7 +172,7 @@ fn build_error_handlers(\n #[test]\n fn should_prune_unconfigured_items() {\n     let source = \"#[cfg(shut_up_and_leave_me_alone)]fn a() { }\";\n-    let srv = mk_srv_from_str(source);\n+    let srv = from_str(source);\n     exec(srv) {|ctxt|\n         assert vec::is_empty(ctxt.ast.node.module.items);\n     }\n@@ -181,7 +181,7 @@ fn should_prune_unconfigured_items() {\n #[test]\n fn srv_should_build_ast_map() {\n     let source = \"fn a() { }\";\n-    let srv = mk_srv_from_str(source);\n+    let srv = from_str(source);\n     exec(srv) {|ctxt|\n         assert ctxt.ast_map.size() != 0u\n     };\n@@ -190,7 +190,7 @@ fn srv_should_build_ast_map() {\n #[test]\n fn srv_should_build_reexport_map() {\n     let source = \"import a::b; export b; mod a { mod b { } }\";\n-    let srv = mk_srv_from_str(source);\n+    let srv = from_str(source);\n     exec(srv) {|ctxt|\n         assert ctxt.exp_map.size() != 0u\n     };\n@@ -202,34 +202,34 @@ fn srv_should_resolve_external_crates() {\n                   fn f() -> std::sha1::sha1 {\\\n                   std::sha1::mk_sha1() }\";\n     // Just testing that resolve doesn't crash\n-    mk_srv_from_str(source);\n+    from_str(source);\n }\n \n #[test]\n fn srv_should_resolve_core_crate() {\n     let source = \"fn a() -> option { fail }\";\n     // Just testing that resolve doesn't crash\n-    mk_srv_from_str(source);\n+    from_str(source);\n }\n \n #[test]\n fn srv_should_resolve_non_existant_imports() {\n     // We want to ignore things we can't resolve. Shouldn't\n     // need to be able to find external crates to create docs.\n     let source = \"import wooboo; fn a() { }\";\n-    mk_srv_from_str(source);\n+    from_str(source);\n }\n \n #[test]\n fn srv_should_resolve_non_existant_uses() {\n     let source = \"use forble; fn a() { }\";\n-    mk_srv_from_str(source);\n+    from_str(source);\n }\n \n #[test]\n fn should_ignore_external_import_paths_that_dont_exist() {\n     let source = \"use forble; import forble::bippy;\";\n-    mk_srv_from_str(source);\n+    from_str(source);\n }\n \n fn exec<T:send>(\n@@ -242,7 +242,7 @@ fn exec<T:send>(\n #[test]\n fn srv_should_return_request_result() {\n     let source = \"fn a() { }\";\n-    let srv = mk_srv_from_str(source);\n+    let srv = from_str(source);\n     let result = exec(srv) {|_ctxt| 1000};\n     assert result == 1000;\n }"}, {"sha": "b2a0b176b79c55902740791385cb4d5d8770de57", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -183,7 +183,7 @@ fn should_extract_fn_arg_attributes() {\n #[test]\n fn should_extract_fn_return_attributes() {\n     let source = \"#[doc(return = \\\"what\\\")] fn a() -> int { }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = tystr_pass::mk_pass()(srv, doc);\n     let fold = fold::default_seq_fold(srv);\n@@ -194,7 +194,7 @@ fn should_extract_fn_return_attributes() {\n #[test]\n fn should_preserve_fn_sig() {\n     let source = \"fn a() -> int { }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = tystr_pass::mk_pass()(srv, doc);\n     let fold = fold::default_seq_fold(srv);\n@@ -448,7 +448,7 @@ fn should_extract_type_docs() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         run(srv, doc)\n     }"}, {"sha": "9e0cc33ac81a641ab76abb1ce0095c408d5fc50d", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -279,7 +279,7 @@ fn should_execute_op_on_type_desc() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         let doc = attr_pass::mk_pass()(srv, doc);\n         mk_pass(str::trim)(srv, doc)"}, {"sha": "1e8e48bf3e2cbc9363dff3d2468e3daf46be2281", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -147,7 +147,7 @@ fn should_promote_type_desc() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         let doc = attr_pass::mk_pass()(srv, doc);\n         run(srv, doc)"}, {"sha": "a264e507d27f684c7ffd3106e7cd96b329f7983f", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -379,7 +379,7 @@ mod test {\n     #[test]\n     fn extract_from_seq_srv() {\n         let source = \"\";\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = from_srv(srv, \"name\");\n         assert doc.topmod.name() == \"name\";\n     }"}, {"sha": "93d0ca975958c96016a6e373f9b191ea412203fd", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -790,7 +790,7 @@ mod test {\n     }\n \n     fn create_doc_srv(source: str) -> (astsrv::srv, doc::cratedoc) {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         #debug(\"doc (extract): %?\", doc);\n         let doc = tystr_pass::mk_pass()(srv, doc);\n@@ -836,7 +836,7 @@ mod test {\n \n     #[test]\n     fn write_markdown_should_write_crate_header() {\n-        let srv = astsrv::mk_srv_from_str(\"\");\n+        let srv = astsrv::from_str(\"\");\n         let doc = extract::from_srv(srv, \"belch\");\n         let doc = attr_pass::mk_pass()(srv, doc);\n         let markdown = write_markdown_str(doc);"}, {"sha": "a0ba492a57c950a71cd33a638a0520735fa54481", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -45,7 +45,7 @@ fn fold_mod(fold: fold::fold<ctxt>, doc: doc::moddoc) -> doc::moddoc {\n #[test]\n fn should_record_mod_paths() {\n     let source = \"mod a { mod b { mod c { } } mod d { mod e { } } }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n     assert doc.topmod.mods()[0].mods()[0].mods()[0].path() == [\"a\", \"b\"];\n@@ -55,7 +55,7 @@ fn should_record_mod_paths() {\n #[test]\n fn should_record_fn_paths() {\n     let source = \"mod a { fn b() { } }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n     assert doc.topmod.mods()[0].fns()[0].path() == [\"a\"];"}, {"sha": "f399f36622e34c00fd3e718123ad1c7e537f0930", "filename": "src/rustdoc/prune_undoc_details_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fprune_undoc_details_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fprune_undoc_details_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_details_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -64,7 +64,7 @@ fn should_elide_undocumented_arguments() {\n #[test]\n fn should_elide_undocumented_return_values() {\n     let source = \"#[doc = \\\"fonz\\\"] fn a() -> int { }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = tystr_pass::mk_pass()(srv, doc);\n     let doc = attr_pass::mk_pass()(srv, doc);\n@@ -154,7 +154,7 @@ fn should_elide_undocumented_impl_method_return_values() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         let doc = attr_pass::mk_pass()(srv, doc);\n         run(srv, doc)"}, {"sha": "956017a43783a05c811b7fccb140beacb1fb36f1", "filename": "src/rustdoc/prune_undoc_items_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_items_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -365,7 +365,7 @@ fn should_elide_undocumented_types() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         let doc = attr_pass::mk_pass()(srv, doc);\n         run(srv, doc)"}, {"sha": "c48b1176dfc2fad591e9e1d5d14c9bace01e771f", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -229,7 +229,7 @@ fn should_prune_unexported_types() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         run(srv, doc)\n     }"}, {"sha": "c8dd4541381893e620ee7a731522ac44eb55f7c8", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -289,7 +289,7 @@ fn should_duplicate_multiple_reexported_items() {\n                   import a::b; import a::c; \\\n                   export b; export c; \\\n                   }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = path_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n@@ -310,7 +310,7 @@ fn should_rename_items_reexported_with_different_names() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         let doc = path_pass::mk_pass()(srv, doc);\n         run(srv, doc)"}, {"sha": "fc07d290d2c7675370cc8a4841c12411027a3eb8", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -71,7 +71,7 @@ fn test_run_passes() {\n         }\n     }\n     let source = \"\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let passes = [pass1, pass2];\n     let doc = extract::from_srv(srv, \"one\");\n     let doc = run_passes(srv, doc, passes);\n@@ -93,7 +93,7 @@ fn main(argv: [str]) {\n fn run(source_file: str) {\n \n     let default_name = source_file;\n-    let srv = astsrv::mk_srv_from_file(source_file);\n+    let srv = astsrv::from_file(source_file);\n     let doc = extract::from_srv(srv, default_name);\n     run_passes(srv, doc, [\n         prune_unexported_pass::mk_pass(),"}, {"sha": "466d234c8914203ba813cd9d1997ef73687d1a49", "filename": "src/rustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_name_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -11,7 +11,7 @@ fn mk_pass() -> pass {\n #[test]\n fn test() {\n     let source = \"mod z { } fn y() { }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = mk_pass()(srv, doc);\n     assert doc.topmod.items[0].name() == \"y\";"}, {"sha": "766c1d545dfd27638e76cb8e7b170d2034e2f880", "filename": "src/rustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_type_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -33,7 +33,7 @@ fn test() {\n          iface iiface { fn a(); } \\\n          impl iimpl for int { fn a() { } } \\\n          type itype = int;\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = mk_pass()(srv, doc);\n     assert doc.topmod.items[0].name() == \"iconst\";"}, {"sha": "faf91bc288b37b3da90e1b51c3796b8e89009fc0", "filename": "src/rustdoc/sort_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -42,7 +42,7 @@ fn test() {\n     }\n \n     let source = \"mod z { mod y { } fn x() { } } mod w { }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = mk_pass(name_lteq)(srv, doc);\n     assert doc.topmod.mods()[0].name() == \"w\";\n@@ -58,7 +58,7 @@ fn should_be_stable() {\n     }\n \n     let source = \"mod a { mod b { } } mod c { mod d { } }\";\n-    let srv = astsrv::mk_srv_from_str(source);\n+    let srv = astsrv::from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = mk_pass(always_eq)(srv, doc);\n     assert doc.topmod.mods()[0].items[0].name() == \"b\";"}, {"sha": "57c2b25a41cc36048bfa5e9ed7fbbdb99daf1be5", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -61,7 +61,7 @@ fn should_trim_failure_conditions() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         let doc = attr_pass::mk_pass()(srv, doc);\n         mk_pass()(srv, doc)"}, {"sha": "401db0a2c5ac58723bbd6595c61865c26e4cd2d6", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6095dc6b5baa44c8d15db76dee185170b7be4b6/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=d6095dc6b5baa44c8d15db76dee185170b7be4b6", "patch": "@@ -558,7 +558,7 @@ fn should_add_type_signatures() {\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n-        let srv = astsrv::mk_srv_from_str(source);\n+        let srv = astsrv::from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         run(srv, doc)\n     }"}]}