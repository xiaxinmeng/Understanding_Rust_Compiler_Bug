{"sha": "d2769837f1f9c94b977bd6022090f8e5cd02410c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNzY5ODM3ZjFmOWM5NGI5NzdiZDYwMjIwOTBmOGU1Y2QwMjQxMGM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-18T13:12:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:26Z"}, "message": "Move pattern type inference from adt::StructField to core_model_impl (WIP)", "tree": {"sha": "b495669e57321654481883964dd0186b65ca540e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b495669e57321654481883964dd0186b65ca540e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2769837f1f9c94b977bd6022090f8e5cd02410c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2769837f1f9c94b977bd6022090f8e5cd02410c", "html_url": "https://github.com/rust-lang/rust/commit/d2769837f1f9c94b977bd6022090f8e5cd02410c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2769837f1f9c94b977bd6022090f8e5cd02410c/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5466f3fb36005c313205d944430498f17aea6fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5466f3fb36005c313205d944430498f17aea6fa", "html_url": "https://github.com/rust-lang/rust/commit/b5466f3fb36005c313205d944430498f17aea6fa"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "f1402a28652cc1ae351a3595fae0a90d0fa56ff7", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2769837f1f9c94b977bd6022090f8e5cd02410c/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2769837f1f9c94b977bd6022090f8e5cd02410c/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=d2769837f1f9c94b977bd6022090f8e5cd02410c", "patch": "@@ -51,6 +51,7 @@ pub use self::code_model_api::{\n     Module, ModuleSource, Problem,\n     Struct, Enum, EnumVariant,\n     Function, FnSignature, ScopeEntryWithSyntax,\n+    StructField,\n     Static, Const,\n     Trait, Type,\n };"}, {"sha": "ac0568a3257cafad824cff8457a7f0d4236bc94c", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d2769837f1f9c94b977bd6022090f8e5cd02410c/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2769837f1f9c94b977bd6022090f8e5cd02410c/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d2769837f1f9c94b977bd6022090f8e5cd02410c", "patch": "@@ -31,9 +31,8 @@ use join_to_string::join;\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    Def, DefId, Module, Function, Struct, Enum, EnumVariant, Path, Name, ImplBlock,\n+    Def, DefId, Module, Function, Struct, StructField, Enum, EnumVariant, Path, Name, ImplBlock,\n     FnSignature, FnScopes,\n-    adt::StructField,\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n@@ -873,24 +872,22 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         }\n     }\n \n+    // TODO: add fields method for tuple like structs and variants\n+    // TODO: and add tests!\n+\n     fn resolve_fields(&self, path: Option<&Path>) -> Option<(Ty, Vec<StructField>)> {\n         let def_id = self.module.resolve_path(self.db, path?).take_types()?;\n         let def = def_id.resolve(self.db);\n \n         match def {\n             Def::Struct(s) => {\n-                let fields: Vec<_> = self\n-                    .db\n-                    .struct_data(s.def_id())\n-                    .variant_data\n-                    .fields()\n-                    .to_owned();\n+                let fields: Vec<_> = s.fields(self.db);\n                 Some((type_for_struct(self.db, s), fields))\n             }\n-            Def::EnumVariant(ev) => {\n-                let fields: Vec<_> = ev.variant_data(self.db).fields().to_owned();\n-                Some((type_for_enum_variant(self.db, ev), fields))\n-            }\n+            // Def::EnumVariant(ev) => {\n+            //     let fields: Vec<_> = ev.variant_data(self.db).fields().to_owned();\n+            //     Some((type_for_enum_variant(self.db, ev), fields))\n+            // }\n             _ => None,\n         }\n     }\n@@ -903,7 +900,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         for (i, &subpat) in subpats.iter().enumerate() {\n             let expected_ty = fields\n                 .get(i)\n-                .map_or(Ty::Unknown, |field| self.make_ty(&field.type_ref));\n+                .and_then(|field| field.ty(self.db))\n+                .unwrap_or(Ty::Unknown);\n             self.infer_pat(subpat, &Expectation::has_type(expected_ty));\n         }\n \n@@ -916,9 +914,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             .unwrap_or((Ty::Unknown, Vec::new()));\n \n         for subpat in subpats {\n-            let matching_field = fields.iter().find(|field| field.name == subpat.name);\n-            let expected_ty =\n-                matching_field.map_or(Ty::Unknown, |field| self.make_ty(&field.type_ref));\n+            let matching_field = fields.iter().find(|field| field.name() == &subpat.name);\n+            let expected_ty = matching_field\n+                .and_then(|field| field.ty(self.db))\n+                .unwrap_or(Ty::Unknown);\n             self.infer_pat(subpat.pat, &Expectation::has_type(expected_ty));\n         }\n "}]}