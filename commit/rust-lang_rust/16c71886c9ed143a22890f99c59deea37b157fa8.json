{"sha": "16c71886c9ed143a22890f99c59deea37b157fa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YzcxODg2YzllZDE0M2EyMjg5MGY5OWM1OWRlZWEzN2IxNTdmYTg=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-02-14T15:12:14Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-02-14T15:12:14Z"}, "message": "Set path of the compile unit to the source directory\n\nAs part of the effort to implement split dwarf debug info, we ended up\nsetting the compile unit location to the output directory rather than\nthe source directory. Furthermore, it seems like we failed to remap the\nprefixes for this as well!\n\nThe desired behaviour is to instead set the `DW_AT_GNU_dwo_name` to a\npath relative to compiler's working directory. This still allows\ndebuggers to find the split dwarf files, while not changing the\nbehaviour of the code that is compiling with regular debug info, and not\nchanging the compiler's behaviour with regards to reproducibility.\n\nFixes #82074", "tree": {"sha": "2f9bab15b8902a932ff3d59adaa6b3211852c4b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f9bab15b8902a932ff3d59adaa6b3211852c4b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16c71886c9ed143a22890f99c59deea37b157fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16c71886c9ed143a22890f99c59deea37b157fa8", "html_url": "https://github.com/rust-lang/rust/commit/16c71886c9ed143a22890f99c59deea37b157fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16c71886c9ed143a22890f99c59deea37b157fa8/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3158857297417566824631a85c4cb3c0615ec6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3158857297417566824631a85c4cb3c0615ec6c2", "html_url": "https://github.com/rust-lang/rust/commit/3158857297417566824631a85c4cb3c0615ec6c2"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "8d945709da4027a54a59ad5ac2338db63aae392f", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c71886c9ed143a22890f99c59deea37b157fa8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c71886c9ed143a22890f99c59deea37b157fa8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=16c71886c9ed143a22890f99c59deea37b157fa8", "patch": "@@ -93,7 +93,7 @@ pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm:\n pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut llvm::TargetMachine {\n     let split_dwarf_file = if tcx.sess.target_can_use_split_dwarf() {\n         tcx.output_filenames(LOCAL_CRATE)\n-            .split_dwarf_filename(tcx.sess.split_debuginfo(), Some(mod_name))\n+            .split_dwarf_path(tcx.sess.split_debuginfo(), Some(mod_name))\n     } else {\n         None\n     };"}, {"sha": "d935fc83b7212fb45bb92c924076c7a387d79b4f", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/16c71886c9ed143a22890f99c59deea37b157fa8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c71886c9ed143a22890f99c59deea37b157fa8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=16c71886c9ed143a22890f99c59deea37b157fa8", "patch": "@@ -979,7 +979,7 @@ pub fn compile_unit_metadata(\n     // The OSX linker has an idiosyncrasy where it will ignore some debuginfo\n     // if multiple object files with the same `DW_AT_name` are linked together.\n     // As a workaround we generate unique names for each object file. Those do\n-    // not correspond to an actual source file but that should be harmless.\n+    // not correspond to an actual source file but that is harmless.\n     if tcx.sess.target.is_like_osx {\n         name_in_debuginfo.push(\"@\");\n         name_in_debuginfo.push(codegen_unit_name);\n@@ -992,17 +992,17 @@ pub fn compile_unit_metadata(\n     let producer = format!(\"clang LLVM ({})\", rustc_producer);\n \n     let name_in_debuginfo = name_in_debuginfo.to_string_lossy();\n+    let work_dir = tcx.sess.working_dir.0.to_string_lossy();\n     let flags = \"\\0\";\n-\n     let out_dir = &tcx.output_filenames(LOCAL_CRATE).out_directory;\n     let split_name = if tcx.sess.target_can_use_split_dwarf() {\n         tcx.output_filenames(LOCAL_CRATE)\n-            .split_dwarf_filename(tcx.sess.split_debuginfo(), Some(codegen_unit_name))\n+            .split_dwarf_path(tcx.sess.split_debuginfo(), Some(codegen_unit_name))\n+            .map(|f| out_dir.join(f))\n     } else {\n         None\n     }\n     .unwrap_or_default();\n-    let out_dir = out_dir.to_str().unwrap();\n     let split_name = split_name.to_str().unwrap();\n \n     // FIXME(#60020):\n@@ -1024,12 +1024,12 @@ pub fn compile_unit_metadata(\n     assert!(tcx.sess.opts.debuginfo != DebugInfo::None);\n \n     unsafe {\n-        let file_metadata = llvm::LLVMRustDIBuilderCreateFile(\n+        let compile_unit_file = llvm::LLVMRustDIBuilderCreateFile(\n             debug_context.builder,\n             name_in_debuginfo.as_ptr().cast(),\n             name_in_debuginfo.len(),\n-            out_dir.as_ptr().cast(),\n-            out_dir.len(),\n+            work_dir.as_ptr().cast(),\n+            work_dir.len(),\n             llvm::ChecksumKind::None,\n             ptr::null(),\n             0,\n@@ -1038,12 +1038,15 @@ pub fn compile_unit_metadata(\n         let unit_metadata = llvm::LLVMRustDIBuilderCreateCompileUnit(\n             debug_context.builder,\n             DW_LANG_RUST,\n-            file_metadata,\n+            compile_unit_file,\n             producer.as_ptr().cast(),\n             producer.len(),\n             tcx.sess.opts.optimize != config::OptLevel::No,\n             flags.as_ptr().cast(),\n             0,\n+            // NB: this doesn't actually have any perceptible effect, it seems. LLVM will instead\n+            // put the path supplied to `MCSplitDwarfFile` into the debug info of the final\n+            // output(s).\n             split_name.as_ptr().cast(),\n             split_name.len(),\n             kind,"}, {"sha": "cb493f51677394c191139a785e63cfbfd716de00", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c71886c9ed143a22890f99c59deea37b157fa8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c71886c9ed143a22890f99c59deea37b157fa8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=16c71886c9ed143a22890f99c59deea37b157fa8", "patch": "@@ -288,7 +288,7 @@ impl TargetMachineFactoryConfig {\n         module_name: &str,\n     ) -> TargetMachineFactoryConfig {\n         let split_dwarf_file = if cgcx.target_can_use_split_dwarf {\n-            cgcx.output_filenames.split_dwarf_filename(cgcx.split_debuginfo, Some(module_name))\n+            cgcx.output_filenames.split_dwarf_path(cgcx.split_debuginfo, Some(module_name))\n         } else {\n             None\n         };"}, {"sha": "86a1f1b7adb37fce1cd8754f4f1344acce3d37c6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16c71886c9ed143a22890f99c59deea37b157fa8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c71886c9ed143a22890f99c59deea37b157fa8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=16c71886c9ed143a22890f99c59deea37b157fa8", "patch": "@@ -667,17 +667,6 @@ impl OutputFilenames {\n         path\n     }\n \n-    /// Returns the name of the Split DWARF file - this can differ depending on which Split DWARF\n-    /// mode is being used, which is the logic that this function is intended to encapsulate.\n-    pub fn split_dwarf_filename(\n-        &self,\n-        split_debuginfo_kind: SplitDebuginfo,\n-        cgu_name: Option<&str>,\n-    ) -> Option<PathBuf> {\n-        self.split_dwarf_path(split_debuginfo_kind, cgu_name)\n-            .map(|path| path.strip_prefix(&self.out_directory).unwrap_or(&path).to_path_buf())\n-    }\n-\n     /// Returns the path for the Split DWARF file - this can differ depending on which Split DWARF\n     /// mode is being used, which is the logic that this function is intended to encapsulate.\n     pub fn split_dwarf_path("}]}