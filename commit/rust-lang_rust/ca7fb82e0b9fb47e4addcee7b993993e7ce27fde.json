{"sha": "ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhN2ZiODJlMGI5ZmI0N2U0YWRkY2VlN2I5OTM5OTNlN2NlMjdmZGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-29T16:38:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-29T16:38:07Z"}, "message": "rustuv: Don't zero-out data on clones\n\nWhen cloning a stream, the data is already guaranteed to be in a consistent\nstate, so there's no need to perform a zeroing. This prevents segfaults as seen\nin #15231\n\nCloses #15231", "tree": {"sha": "2ee0c282447aaf007baffa1d8acba64b74c92dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee0c282447aaf007baffa1d8acba64b74c92dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "html_url": "https://github.com/rust-lang/rust/commit/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd9563aa382ccfbda36049786329edcdc609930c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9563aa382ccfbda36049786329edcdc609930c", "html_url": "https://github.com/rust-lang/rust/commit/bd9563aa382ccfbda36049786329edcdc609930c"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "cfed05bf5bebf80cd1285514c77ad570b3b3e948", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "patch": "@@ -191,7 +191,7 @@ impl TcpWatcher {\n         TcpWatcher {\n             home: home,\n             handle: handle,\n-            stream: StreamWatcher::new(handle),\n+            stream: StreamWatcher::new(handle, true),\n             refcount: Refcount::new(),\n             read_access: AccessTimeout::new(),\n             write_access: AccessTimeout::new(),\n@@ -278,7 +278,7 @@ impl rtio::RtioTcpStream for TcpWatcher {\n     fn clone(&self) -> Box<rtio::RtioTcpStream + Send> {\n         box TcpWatcher {\n             handle: self.handle,\n-            stream: StreamWatcher::new(self.handle),\n+            stream: StreamWatcher::new(self.handle, false),\n             home: self.home.clone(),\n             refcount: self.refcount.clone(),\n             read_access: self.read_access.clone(),"}, {"sha": "1c53814ac2441731be8ecdf52b04c7ef1c665fc6", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "patch": "@@ -67,7 +67,7 @@ impl PipeWatcher {\n             handle\n         };\n         PipeWatcher {\n-            stream: StreamWatcher::new(handle),\n+            stream: StreamWatcher::new(handle, true),\n             home: home,\n             defused: false,\n             refcount: Refcount::new(),\n@@ -131,7 +131,7 @@ impl rtio::RtioPipe for PipeWatcher {\n \n     fn clone(&self) -> Box<rtio::RtioPipe + Send> {\n         box PipeWatcher {\n-            stream: StreamWatcher::new(self.stream.handle),\n+            stream: StreamWatcher::new(self.stream.handle, false),\n             defused: false,\n             home: self.home.clone(),\n             refcount: self.refcount.clone(),"}, {"sha": "f6b9226588ca34572a7ac8e87172f7c77569d989", "filename": "src/librustuv/stream.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibrustuv%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibrustuv%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fstream.rs?ref=ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "patch": "@@ -59,8 +59,11 @@ impl StreamWatcher {\n     // will be manipulated on each of the methods called on this watcher.\n     // Wrappers should ensure to always reset the field to an appropriate value\n     // if they rely on the field to perform an action.\n-    pub fn new(stream: *mut uvll::uv_stream_t) -> StreamWatcher {\n-        unsafe { uvll::set_data_for_uv_handle(stream, 0 as *mut int) }\n+    pub fn new(stream: *mut uvll::uv_stream_t,\n+               init: bool) -> StreamWatcher {\n+        if init {\n+            unsafe { uvll::set_data_for_uv_handle(stream, 0 as *mut int) }\n+        }\n         StreamWatcher {\n             handle: stream,\n             last_write_req: None,"}, {"sha": "70b17db8dcfdd147a8a4616866bbf41b94f028a4", "filename": "src/librustuv/tty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibrustuv%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibrustuv%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftty.rs?ref=ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "patch": "@@ -56,7 +56,7 @@ impl TtyWatcher {\n         let handle = UvHandle::alloc(None::<TtyWatcher>, uvll::UV_TTY);\n         let mut watcher = TtyWatcher {\n             tty: handle,\n-            stream: StreamWatcher::new(handle),\n+            stream: StreamWatcher::new(handle, true),\n             home: io.make_handle(),\n             fd: fd,\n         };"}, {"sha": "baf53251fbe082e5e485ac2df70e64d7dc36c72d", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "patch": "@@ -1360,4 +1360,44 @@ mod test {\n \n         rx2.recv();\n     })\n+\n+    iotest!(fn clone_while_reading() {\n+        let addr = next_test_ip6();\n+        let listen = TcpListener::bind(addr.ip.to_str().as_slice(), addr.port);\n+        let mut accept = listen.listen().unwrap();\n+\n+        // Enqueue a task to write to a socket\n+        let (tx, rx) = channel();\n+        let (txdone, rxdone) = channel();\n+        let txdone2 = txdone.clone();\n+        spawn(proc() {\n+            let mut tcp = TcpStream::connect(addr.ip.to_str().as_slice(),\n+                                             addr.port).unwrap();\n+            rx.recv();\n+            tcp.write_u8(0).unwrap();\n+            txdone2.send(());\n+        });\n+\n+        // Spawn off a reading clone\n+        let tcp = accept.accept().unwrap();\n+        let tcp2 = tcp.clone();\n+        let txdone3 = txdone.clone();\n+        spawn(proc() {\n+            let mut tcp2 = tcp2;\n+            tcp2.read_u8().unwrap();\n+            txdone3.send(());\n+        });\n+\n+        // Try to ensure that the reading clone is indeed reading\n+        for _ in range(0i, 50) {\n+            ::task::deschedule();\n+        }\n+\n+        // clone the handle again while it's reading, then let it finish the\n+        // read.\n+        let _ = tcp.clone();\n+        tx.send(());\n+        rxdone.recv();\n+        rxdone.recv();\n+    })\n }"}, {"sha": "6492717d3ecafd95d8321818cd902c3b53af9ec4", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7fb82e0b9fb47e4addcee7b993993e7ce27fde/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=ca7fb82e0b9fb47e4addcee7b993993e7ce27fde", "patch": "@@ -649,7 +649,7 @@ fn task_abort_no_kill_runtime() {\n     use std::io::timer;\n     use mem;\n \n-    let mut tb = TaskBuilder::new();\n+    let tb = TaskBuilder::new();\n     let rx = tb.try_future(proc() {});\n     mem::drop(rx);\n     timer::sleep(1000);"}]}