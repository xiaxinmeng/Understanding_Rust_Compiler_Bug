{"sha": "18dd2d2fbe3cacc4bea71c0a7df831a62605a367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZGQyZDJmYmUzY2FjYzRiZWE3MWMwYTdkZjgzMWE2MjYwNWEzNjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-23T08:25:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-23T08:25:27Z"}, "message": "Rollup merge of #58526 - pmccarter:master, r=estebank\n\nSpecial suggestion for illegal unicode curly quote pairs\n\nFixes #58436\n\nDid not end up expanding the error message span to include the full string literal since I figured the start of the token was the issue, while the help suggestion span would include up to the closing quotation mark.\n\nThe look ahead logic does not affect the reader position, not sure if that is an issue (if eg it should still continue to parse after the closing quote without erroring out).", "tree": {"sha": "6b73118509c1cd32b994d127f14290d0047ec921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b73118509c1cd32b994d127f14290d0047ec921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18dd2d2fbe3cacc4bea71c0a7df831a62605a367", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJccQN3CRBK7hj4Ov3rIwAAdHIIAJRNVylUIf7j23rVoZUmQ8t9\n/wuAnwiExv7Ii7+ZWIOy+W5Qh8KTmmVHsYMGTPT1V4JP5rPYoeEP613s6NrOXKpD\nihqZZ3XBBucsCc1kgv5lf/OfyHYNrpQLpkdWtGqOkOvYSOFJqBvryrp19rqay2CO\nCB4E7v73MkDH8Rp7Ii0aGPWvQaA6uM5uW77RfO/nJcBhMiaajXR/RK77gRigjk3t\ndzfeCrB2SoI1rlPCUYNMqStvn867A34HphmCssQgi3seyXz91Bsa9VYB9mgdV6+/\nxbaH/OYWd0fF2lpATkit14WhJ/ExQfPz39Js42i4WJOx/Q0QYm/z7VHTKr+dkzY=\n=piiS\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b73118509c1cd32b994d127f14290d0047ec921\nparent 585d4d29d91065c14fb823b8044495a6e5e857c1\nparent 71cd4c8e4af4a05991fef5a61110510c78d90131\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550910327 +0100\ncommitter GitHub <noreply@github.com> 1550910327 +0100\n\nRollup merge of #58526 - pmccarter:master, r=estebank\n\nSpecial suggestion for illegal unicode curly quote pairs\n\nFixes #58436\n\nDid not end up expanding the error message span to include the full string literal since I figured the start of the token was the issue, while the help suggestion span would include up to the closing quotation mark.\n\nThe look ahead logic does not affect the reader position, not sure if that is an issue (if eg it should still continue to parse after the closing quote without erroring out).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18dd2d2fbe3cacc4bea71c0a7df831a62605a367", "html_url": "https://github.com/rust-lang/rust/commit/18dd2d2fbe3cacc4bea71c0a7df831a62605a367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "585d4d29d91065c14fb823b8044495a6e5e857c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/585d4d29d91065c14fb823b8044495a6e5e857c1", "html_url": "https://github.com/rust-lang/rust/commit/585d4d29d91065c14fb823b8044495a6e5e857c1"}, {"sha": "71cd4c8e4af4a05991fef5a61110510c78d90131", "url": "https://api.github.com/repos/rust-lang/rust/commits/71cd4c8e4af4a05991fef5a61110510c78d90131", "html_url": "https://github.com/rust-lang/rust/commit/71cd4c8e4af4a05991fef5a61110510c78d90131"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "a7cde5fbb92cd27a83a1e78da595016fadb886cf", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=18dd2d2fbe3cacc4bea71c0a7df831a62605a367", "patch": "@@ -125,6 +125,28 @@ impl<'a> StringReader<'a> {\n         Ok(ret_val)\n     }\n \n+    /// Immutably extract string if found at current position with given delimiters\n+    pub fn peek_delimited(&self, from_ch: char, to_ch: char) -> Option<String> {\n+        let mut pos = self.pos;\n+        let mut idx = self.src_index(pos);\n+        let mut ch = char_at(&self.src, idx);\n+        if ch != from_ch {\n+            return None;\n+        }\n+        pos = pos + Pos::from_usize(ch.len_utf8());\n+        let start_pos = pos;\n+        idx = self.src_index(pos);\n+        while idx < self.end_src_index {\n+            ch = char_at(&self.src, idx);\n+            if ch == to_ch {\n+                return Some(self.src[self.src_index(start_pos)..self.src_index(pos)].to_string());\n+            }\n+            pos = pos + Pos::from_usize(ch.len_utf8());\n+            idx = self.src_index(pos);\n+        }\n+        return None;\n+    }\n+\n     fn try_real_token(&mut self) -> Result<TokenAndSpan, ()> {\n         let mut t = self.try_next_token()?;\n         loop {"}, {"sha": "94ce6297fbefbfcfb9d13d09b8c05af344e56e60", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=18dd2d2fbe3cacc4bea71c0a7df831a62605a367", "patch": "@@ -1,7 +1,7 @@\n // Characters and their corresponding confusables were collected from\n // http://www.unicode.org/Public/security/10.0.0/confusables.txt\n \n-use syntax_pos::{Span, NO_EXPANSION};\n+use syntax_pos::{Span, Pos, NO_EXPANSION};\n use errors::{Applicability, DiagnosticBuilder};\n use super::StringReader;\n \n@@ -333,14 +333,27 @@ crate fn check_for_substitution<'a>(reader: &StringReader<'a>,\n         let span = Span::new(reader.pos, reader.next_pos, NO_EXPANSION);\n         match ASCII_ARRAY.iter().find(|&&(c, _)| c == ascii_char) {\n             Some(&(ascii_char, ascii_name)) => {\n-                let msg =\n-                    format!(\"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n-                            ch, u_name, ascii_char, ascii_name);\n-                err.span_suggestion(\n-                    span,\n-                    &msg,\n-                    ascii_char.to_string(),\n-                    Applicability::MaybeIncorrect);\n+                // special help suggestion for \"directed\" double quotes\n+                if let Some(s) = reader.peek_delimited('\u201c', '\u201d') {\n+                    let msg = format!(\"Unicode characters '\u201c' (Left Double Quotation Mark) and \\\n+                        '\u201d' (Right Double Quotation Mark) look like '{}' ({}), but are not\",\n+                                ascii_char, ascii_name);\n+                    err.span_suggestion(\n+                        Span::new(reader.pos, reader.next_pos + Pos::from_usize(s.len()) +\n+                            Pos::from_usize('\u201d'.len_utf8()), NO_EXPANSION),\n+                        &msg,\n+                        format!(\"\\\"{}\\\"\", s),\n+                        Applicability::MaybeIncorrect);\n+                } else {\n+                    let msg =\n+                        format!(\"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n+                                ch, u_name, ascii_char, ascii_name);\n+                    err.span_suggestion(\n+                        span,\n+                        &msg,\n+                        ascii_char.to_string(),\n+                        Applicability::MaybeIncorrect);\n+                }\n                 true\n             },\n             None => {"}, {"sha": "69644211b8a11c750ed94a70c46a338f4a62a34a", "filename": "src/test/ui/parser/unicode-quote-chars.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.rs?ref=18dd2d2fbe3cacc4bea71c0a7df831a62605a367", "patch": "@@ -0,0 +1,7 @@\n+// ignore-tidy-linelength\n+\n+fn main() {\n+    println!(\u201chello world\u201d);\n+    //~^ ERROR unknown start of token: \\u{201c}\n+    //~^^ HELP Unicode characters '\u201c' (Left Double Quotation Mark) and '\u201d' (Right Double Quotation Mark) look like '\"' (Quotation Mark), but are not\n+}"}, {"sha": "315e20cf854cda13d1fcfb63fa9fb1d6fc37b5cf", "filename": "src/test/ui/parser/unicode-quote-chars.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18dd2d2fbe3cacc4bea71c0a7df831a62605a367/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr?ref=18dd2d2fbe3cacc4bea71c0a7df831a62605a367", "patch": "@@ -0,0 +1,12 @@\n+error: unknown start of token: /u{201c}\n+  --> $DIR/unicode-quote-chars.rs:4:14\n+   |\n+LL |     println!(\u201chello world\u201d);\n+   |              ^\n+help: Unicode characters '\u201c' (Left Double Quotation Mark) and '\u201d' (Right Double Quotation Mark) look like '\"' (Quotation Mark), but are not\n+   |\n+LL |     println!(\"hello world\");\n+   |              ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}