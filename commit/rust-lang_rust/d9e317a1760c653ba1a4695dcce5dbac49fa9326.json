{"sha": "d9e317a1760c653ba1a4695dcce5dbac49fa9326", "node_id": "C_kwDOAAsO6NoAKGQ5ZTMxN2ExNzYwYzY1M2JhMWE0Njk1ZGNjZTVkYmFjNDlmYTkzMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-04T21:35:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-04T21:35:15Z"}, "message": "Auto merge of #106224 - bjorn3:staticlib_fixes, r=wesleywiser\n\nSmall fixes for --crate-type staticlib\n\nThe first commit doesn't have an effect until we start translating error messages. The second commit fixes potential linker errors when combining `--crate-type staticlib` with another crate type and I think `-Cprefer-dynamic`.", "tree": {"sha": "96c2154a7b4688627b7c1f0438994e6ffaa4b716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96c2154a7b4688627b7c1f0438994e6ffaa4b716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9e317a1760c653ba1a4695dcce5dbac49fa9326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e317a1760c653ba1a4695dcce5dbac49fa9326", "html_url": "https://github.com/rust-lang/rust/commit/d9e317a1760c653ba1a4695dcce5dbac49fa9326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9e317a1760c653ba1a4695dcce5dbac49fa9326/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659e169d37990b9c730a59a96081f2ef7afbe8f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/659e169d37990b9c730a59a96081f2ef7afbe8f1", "html_url": "https://github.com/rust-lang/rust/commit/659e169d37990b9c730a59a96081f2ef7afbe8f1"}, {"sha": "77051167083b58c4cd59c658197bcfe6476a7fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/77051167083b58c4cd59c658197bcfe6476a7fa5", "html_url": "https://github.com/rust-lang/rust/commit/77051167083b58c4cd59c658197bcfe6476a7fa5"}], "stats": {"total": 166, "additions": 81, "deletions": 85}, "files": [{"sha": "5d9b6c9870d1c58a55f43625298d49db8d2a95e0", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 80, "deletions": 76, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/d9e317a1760c653ba1a4695dcce5dbac49fa9326/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e317a1760c653ba1a4695dcce5dbac49fa9326/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=d9e317a1760c653ba1a4695dcce5dbac49fa9326", "patch": "@@ -11,7 +11,7 @@ use rustc_metadata::find_native_static_library;\n use rustc_metadata::fs::{emit_wrapper_file, METADATA_FILENAME};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n-use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Lto, Strip};\n+use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SplitDwarfKind};\n use rustc_session::cstore::DllImport;\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n@@ -208,16 +208,16 @@ pub fn link_binary<'a>(\n     Ok(())\n }\n \n+// Crate type is not passed when calculating the dylibs to include for LTO. In that case all\n+// crate types must use the same dependency formats.\n pub fn each_linked_rlib(\n-    sess: &Session,\n     info: &CrateInfo,\n+    crate_type: Option<CrateType>,\n     f: &mut dyn FnMut(CrateNum, &Path),\n ) -> Result<(), errors::LinkRlibError> {\n     let crates = info.used_crates.iter();\n-    let mut fmts = None;\n \n-    let lto_active = matches!(sess.lto(), Lto::Fat | Lto::Thin);\n-    if lto_active {\n+    let fmts = if crate_type.is_none() {\n         for combination in info.dependency_formats.iter().combinations(2) {\n             let (ty1, list1) = &combination[0];\n             let (ty2, list2) = &combination[1];\n@@ -230,27 +230,23 @@ pub fn each_linked_rlib(\n                 });\n             }\n         }\n-    }\n-\n-    for (ty, list) in info.dependency_formats.iter() {\n-        match ty {\n-            CrateType::Executable\n-            | CrateType::Staticlib\n-            | CrateType::Cdylib\n-            | CrateType::ProcMacro => {\n-                fmts = Some(list);\n-                break;\n-            }\n-            CrateType::Dylib if lto_active => {\n-                fmts = Some(list);\n-                break;\n-            }\n-            _ => {}\n+        if info.dependency_formats.is_empty() {\n+            return Err(errors::LinkRlibError::MissingFormat);\n         }\n-    }\n-    let Some(fmts) = fmts else {\n-        return Err(errors::LinkRlibError::MissingFormat);\n+        &info.dependency_formats[0].1\n+    } else {\n+        let fmts = info\n+            .dependency_formats\n+            .iter()\n+            .find_map(|&(ty, ref list)| if Some(ty) == crate_type { Some(list) } else { None });\n+\n+        let Some(fmts) = fmts else {\n+            return Err(errors::LinkRlibError::MissingFormat);\n+        };\n+\n+        fmts\n     };\n+\n     for &cnum in crates {\n         match fmts.get(cnum.as_usize() - 1) {\n             Some(&Linkage::NotLinked | &Linkage::Dynamic | &Linkage::IncludedFromDylib) => continue,\n@@ -516,64 +512,71 @@ fn link_staticlib<'a>(\n     )?;\n     let mut all_native_libs = vec![];\n \n-    let res = each_linked_rlib(sess, &codegen_results.crate_info, &mut |cnum, path| {\n-        let name = codegen_results.crate_info.crate_name[&cnum];\n-        let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n-\n-        // Here when we include the rlib into our staticlib we need to make a\n-        // decision whether to include the extra object files along the way.\n-        // These extra object files come from statically included native\n-        // libraries, but they may be cfg'd away with #[link(cfg(..))].\n-        //\n-        // This unstable feature, though, only needs liblibc to work. The only\n-        // use case there is where musl is statically included in liblibc.rlib,\n-        // so if we don't want the included version we just need to skip it. As\n-        // a result the logic here is that if *any* linked library is cfg'd away\n-        // we just skip all object files.\n-        //\n-        // Clearly this is not sufficient for a general purpose feature, and\n-        // we'd want to read from the library's metadata to determine which\n-        // object files come from where and selectively skip them.\n-        let skip_object_files = native_libs.iter().any(|lib| {\n-            matches!(lib.kind, NativeLibKind::Static { bundle: None | Some(true), .. })\n-                && !relevant_lib(sess, lib)\n-        });\n+    let res = each_linked_rlib(\n+        &codegen_results.crate_info,\n+        Some(CrateType::Staticlib),\n+        &mut |cnum, path| {\n+            let name = codegen_results.crate_info.crate_name[&cnum];\n+            let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n+\n+            // Here when we include the rlib into our staticlib we need to make a\n+            // decision whether to include the extra object files along the way.\n+            // These extra object files come from statically included native\n+            // libraries, but they may be cfg'd away with #[link(cfg(..))].\n+            //\n+            // This unstable feature, though, only needs liblibc to work. The only\n+            // use case there is where musl is statically included in liblibc.rlib,\n+            // so if we don't want the included version we just need to skip it. As\n+            // a result the logic here is that if *any* linked library is cfg'd away\n+            // we just skip all object files.\n+            //\n+            // Clearly this is not sufficient for a general purpose feature, and\n+            // we'd want to read from the library's metadata to determine which\n+            // object files come from where and selectively skip them.\n+            let skip_object_files = native_libs.iter().any(|lib| {\n+                matches!(lib.kind, NativeLibKind::Static { bundle: None | Some(true), .. })\n+                    && !relevant_lib(sess, lib)\n+            });\n \n-        let lto = are_upstream_rust_objects_already_included(sess)\n-            && !ignored_for_lto(sess, &codegen_results.crate_info, cnum);\n+            let lto = are_upstream_rust_objects_already_included(sess)\n+                && !ignored_for_lto(sess, &codegen_results.crate_info, cnum);\n \n-        // Ignoring obj file starting with the crate name\n-        // as simple comparison is not enough - there\n-        // might be also an extra name suffix\n-        let obj_start = name.as_str().to_owned();\n+            // Ignoring obj file starting with the crate name\n+            // as simple comparison is not enough - there\n+            // might be also an extra name suffix\n+            let obj_start = name.as_str().to_owned();\n \n-        ab.add_archive(\n-            path,\n-            Box::new(move |fname: &str| {\n-                // Ignore metadata files, no matter the name.\n-                if fname == METADATA_FILENAME {\n-                    return true;\n-                }\n+            ab.add_archive(\n+                path,\n+                Box::new(move |fname: &str| {\n+                    // Ignore metadata files, no matter the name.\n+                    if fname == METADATA_FILENAME {\n+                        return true;\n+                    }\n \n-                // Don't include Rust objects if LTO is enabled\n-                if lto && looks_like_rust_object_file(fname) {\n-                    return true;\n-                }\n+                    // Don't include Rust objects if LTO is enabled\n+                    if lto && looks_like_rust_object_file(fname) {\n+                        return true;\n+                    }\n \n-                // Otherwise if this is *not* a rust object and we're skipping\n-                // objects then skip this file\n-                if skip_object_files && (!fname.starts_with(&obj_start) || !fname.ends_with(\".o\")) {\n-                    return true;\n-                }\n+                    // Otherwise if this is *not* a rust object and we're skipping\n+                    // objects then skip this file\n+                    if skip_object_files\n+                        && (!fname.starts_with(&obj_start) || !fname.ends_with(\".o\"))\n+                    {\n+                        return true;\n+                    }\n \n-                // ok, don't skip this\n-                false\n-            }),\n-        )\n-        .unwrap();\n+                    // ok, don't skip this\n+                    false\n+                }),\n+            )\n+            .unwrap();\n \n-        all_native_libs.extend(codegen_results.crate_info.native_libraries[&cnum].iter().cloned());\n-    });\n+            all_native_libs\n+                .extend(codegen_results.crate_info.native_libraries[&cnum].iter().cloned());\n+        },\n+    );\n     if let Err(e) = res {\n         sess.emit_fatal(e);\n     }\n@@ -1354,7 +1357,8 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n     if !lib_args.is_empty() {\n         sess.emit_note(errors::StaticLibraryNativeArtifacts);\n         // Prefix for greppability\n-        sess.emit_note(errors::NativeStaticLibs { arguments: lib_args.join(\" \") });\n+        // Note: This must not be translated as tools are allowed to depend on this exact string.\n+        sess.note_without_error(&format!(\"native-static-libs: {}\", &lib_args.join(\" \")));\n     }\n }\n "}, {"sha": "7aadcdd222877478e422c82843a7aba4e8fd7d1c", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e317a1760c653ba1a4695dcce5dbac49fa9326/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e317a1760c653ba1a4695dcce5dbac49fa9326/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=d9e317a1760c653ba1a4695dcce5dbac49fa9326", "patch": "@@ -1002,7 +1002,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     let sess = tcx.sess;\n \n     let mut each_linked_rlib_for_lto = Vec::new();\n-    drop(link::each_linked_rlib(sess, crate_info, &mut |cnum, path| {\n+    drop(link::each_linked_rlib(crate_info, None, &mut |cnum, path| {\n         if link::ignored_for_lto(sess, crate_info, cnum) {\n             return;\n         }"}, {"sha": "277612c30fcca6a16161082f325b8f09cc13be5a", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9e317a1760c653ba1a4695dcce5dbac49fa9326/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e317a1760c653ba1a4695dcce5dbac49fa9326/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=d9e317a1760c653ba1a4695dcce5dbac49fa9326", "patch": "@@ -444,12 +444,6 @@ pub struct LinkerFileStem;\n #[diag(codegen_ssa_static_library_native_artifacts)]\n pub struct StaticLibraryNativeArtifacts;\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_ssa_native_static_libs)]\n-pub struct NativeStaticLibs {\n-    pub arguments: String,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(codegen_ssa_link_script_unavailable)]\n pub struct LinkScriptUnavailable;"}, {"sha": "f97943b9bd740c58cd2101ffc8daf241d96d68b9", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e317a1760c653ba1a4695dcce5dbac49fa9326/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d9e317a1760c653ba1a4695dcce5dbac49fa9326/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=d9e317a1760c653ba1a4695dcce5dbac49fa9326", "patch": "@@ -157,8 +157,6 @@ codegen_ssa_linker_file_stem = couldn't extract file stem from specified linker\n \n codegen_ssa_static_library_native_artifacts = Link against the following native artifacts when linking against this static library. The order and any duplication can be significant on some platforms.\n \n-codegen_ssa_native_static_libs = native-static-libs: {$arguments}\n-\n codegen_ssa_link_script_unavailable = can only use link script when linking with GNU-like linker\n \n codegen_ssa_link_script_write_failure = failed to write link script to {$path}: {$error}"}]}