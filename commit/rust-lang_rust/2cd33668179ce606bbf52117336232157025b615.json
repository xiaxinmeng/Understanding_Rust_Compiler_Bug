{"sha": "2cd33668179ce606bbf52117336232157025b615", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZDMzNjY4MTc5Y2U2MDZiYmY1MjExNzMzNjIzMjE1NzAyNWI2MTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-10T11:42:19Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-10T11:42:19Z"}, "message": "Fixes #443", "tree": {"sha": "16b1bb6af0622fd94ee1b3cfcf5f280e1a2042a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b1bb6af0622fd94ee1b3cfcf5f280e1a2042a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cd33668179ce606bbf52117336232157025b615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd33668179ce606bbf52117336232157025b615", "html_url": "https://github.com/rust-lang/rust/commit/2cd33668179ce606bbf52117336232157025b615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cd33668179ce606bbf52117336232157025b615/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab2d157c39d6765c14d85873f26d187f08b8fa7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab2d157c39d6765c14d85873f26d187f08b8fa7c", "html_url": "https://github.com/rust-lang/rust/commit/ab2d157c39d6765c14d85873f26d187f08b8fa7c"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "6b721a970a6091ba2c59ca7020aaf4dd9a3bd7d9", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2cd33668179ce606bbf52117336232157025b615/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd33668179ce606bbf52117336232157025b615/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=2cd33668179ce606bbf52117336232157025b615", "patch": "@@ -1,5 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n+use rustc::ty;\n use syntax::ast;\n use utils::{is_adjusted, match_path, match_trait_method, match_type, remove_blocks, paths, snippet, span_help_and_lint,\n             walk_ptrs_ty, walk_ptrs_ty_depth, iter_input_pats};\n@@ -33,6 +34,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     ExprClosure(_, ref decl, closure_eid, _) => {\n                         let body = cx.tcx.hir.body(closure_eid);\n                         let closure_expr = remove_blocks(&body.value);\n+                        let ty = cx.tables.pat_ty(&body.arguments[0].pat);\n                         if_let_chain! {[\n                             // nothing special in the argument, besides reference bindings\n                             // (e.g. .map(|&x| x) )\n@@ -46,10 +48,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                 // .cloned() only removes one level of indirection, don't lint on more\n                                 walk_ptrs_ty_depth(cx.tables.pat_ty(&first_arg.pat)).1 == 1\n                             {\n-                                span_help_and_lint(cx, MAP_CLONE, expr.span, &format!(\n-                                    \"you seem to be using .map() to clone the contents of an {}, consider \\\n-                                    using `.cloned()`\", type_name),\n-                                    &format!(\"try\\n{}.cloned()\", snippet(cx, args[0].span, \"..\")));\n+                                // the argument is not an &mut T\n+                                if let ty::TyRef(_, tam) = ty.sty {\n+                                    if tam.mutbl == MutImmutable {\n+                                        span_help_and_lint(cx, MAP_CLONE, expr.span, &format!(\n+                                            \"you seem to be using .map() to clone the contents of an {}, consider \\\n+                                            using `.cloned()`\", type_name),\n+                                            &format!(\"try\\n{}.cloned()\", snippet(cx, args[0].span, \"..\")));\n+                                    }\n+                                }\n                             }\n                             // explicit clone() calls ( .map(|x| x.clone()) )\n                             else if let ExprMethodCall(clone_call, _, ref clone_args) = closure_expr.node {"}, {"sha": "a56e9aa3cab98703fce7d0cb9bdf5c5b6aa7370f", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cd33668179ce606bbf52117336232157025b615/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd33668179ce606bbf52117336232157025b615/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=2cd33668179ce606bbf52117336232157025b615", "patch": "@@ -97,4 +97,7 @@ fn map_clone_deref() {\n     let _: Option<i32> = x.as_ref().map(|y| **y);\n }\n \n-fn main() { }\n+fn main() {\n+    // used to be a false positive\n+    vec![1].iter_mut().map(|x| *x);\n+}"}]}