{"sha": "cfda050c01bba4a9b2ca9356b317ba22d6da0ca7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZGEwNTBjMDFiYmE0YTliMmNhOTM1NmIzMTdiYTIyZDZkYTBjYTc=", "commit": {"author": {"name": "Cerberuser", "email": "computers05@mail.ru", "date": "2019-10-13T11:48:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-13T11:48:07Z"}, "message": "Add `dyn` to `Any` documentation\n\nI noticed that in documentation to `Any` trait the old trait object syntax is used, which could be confusing for newcomers, since we generally recommend using `dyn Trait` instead of just `Trait`. This PR changes the documentation comment, so that it uses `&dyn Any`, `&mut dyn Any` and `Box<dyn Any>`, correspondingly.", "tree": {"sha": "029ddf912390198893fe49b994f85c16b1a10576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/029ddf912390198893fe49b994f85c16b1a10576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfda050c01bba4a9b2ca9356b317ba22d6da0ca7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdow73CRBK7hj4Ov3rIwAAdHIIACv8s6jbF/+VYa50zf5/iX24\nNE4klHeZffAJvnOUqUOMl0Kvk0/W+mBrvyLdXqYr6SaE1h6f4B/yLDL0TweH5V/T\n/oxejQuDTYYN+U1s3I6TbSsJOqid0rjQ/PXzwZIZ2mExnrjJxmZu+uZY3S0MmSzI\nbXf4ntXQ/WucbBACQ5LyxQ7Nb60c9fJuqAdrIVUZChuK8suvtPo622SdaOHU1NQX\n+Oq/v2UzOgpbXBZDR3ir/v0doFKZE5y4k1WRQDwUKVkh2HxrzEXsTa+rKgXuCxl8\n6CC8rOx7IA8YqFZdV7yCO/e/CLfBHWlf2KHt7yTZCzxSQmKeDVGiP7WvsaMIyiI=\n=Ok4m\n-----END PGP SIGNATURE-----\n", "payload": "tree 029ddf912390198893fe49b994f85c16b1a10576\nparent 29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3\nauthor Cerberuser <computers05@mail.ru> 1570967287 +0700\ncommitter GitHub <noreply@github.com> 1570967287 +0700\n\nAdd `dyn` to `Any` documentation\n\nI noticed that in documentation to `Any` trait the old trait object syntax is used, which could be confusing for newcomers, since we generally recommend using `dyn Trait` instead of just `Trait`. This PR changes the documentation comment, so that it uses `&dyn Any`, `&mut dyn Any` and `Box<dyn Any>`, correspondingly."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfda050c01bba4a9b2ca9356b317ba22d6da0ca7", "html_url": "https://github.com/rust-lang/rust/commit/cfda050c01bba4a9b2ca9356b317ba22d6da0ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfda050c01bba4a9b2ca9356b317ba22d6da0ca7/comments", "author": {"login": "Cerber-Ursi", "id": 12300861, "node_id": "MDQ6VXNlcjEyMzAwODYx", "avatar_url": "https://avatars.githubusercontent.com/u/12300861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cerber-Ursi", "html_url": "https://github.com/Cerber-Ursi", "followers_url": "https://api.github.com/users/Cerber-Ursi/followers", "following_url": "https://api.github.com/users/Cerber-Ursi/following{/other_user}", "gists_url": "https://api.github.com/users/Cerber-Ursi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cerber-Ursi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cerber-Ursi/subscriptions", "organizations_url": "https://api.github.com/users/Cerber-Ursi/orgs", "repos_url": "https://api.github.com/users/Cerber-Ursi/repos", "events_url": "https://api.github.com/users/Cerber-Ursi/events{/privacy}", "received_events_url": "https://api.github.com/users/Cerber-Ursi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "html_url": "https://github.com/rust-lang/rust/commit/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "ba0b06796967924536ad57ff980d9444bcb545de", "filename": "src/libcore/any.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfda050c01bba4a9b2ca9356b317ba22d6da0ca7/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfda050c01bba4a9b2ca9356b317ba22d6da0ca7/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=cfda050c01bba4a9b2ca9356b317ba22d6da0ca7", "patch": "@@ -2,14 +2,14 @@\n //! of any `'static` type through runtime reflection.\n //!\n //! `Any` itself can be used to get a `TypeId`, and has more features when used\n-//! as a trait object. As `&Any` (a borrowed trait object), it has the `is` and\n-//! `downcast_ref` methods, to test if the contained value is of a given type,\n-//! and to get a reference to the inner value as a type. As `&mut Any`, there\n+//! as a trait object. As `&dyn Any` (a borrowed trait object), it has the `is`\n+//! and `downcast_ref` methods, to test if the contained value is of a given type,\n+//! and to get a reference to the inner value as a type. As `&mut dyn Any`, there\n //! is also the `downcast_mut` method, for getting a mutable reference to the\n-//! inner value. `Box<Any>` adds the `downcast` method, which attempts to\n+//! inner value. `Box<dyn Any>` adds the `downcast` method, which attempts to\n //! convert to a `Box<T>`. See the [`Box`] documentation for the full details.\n //!\n-//! Note that &Any is limited to testing whether a value is of a specified\n+//! Note that &dyn Any is limited to testing whether a value is of a specified\n //! concrete type, and cannot be used to test whether a type implements a trait.\n //!\n //! [`Box`]: ../../std/boxed/struct.Box.html"}]}