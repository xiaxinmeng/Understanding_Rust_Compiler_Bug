{"sha": "473e80eb283ccd2381dfc52be852b71c8314c27a", "node_id": "C_kwDOAAsO6NoAKDQ3M2U4MGViMjgzY2NkMjM4MWRmYzUyYmU4NTJiNzFjODMxNGMyN2E", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-23T12:52:31Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-23T12:52:31Z"}, "message": "Sync from rust 10f4ce324baf7cfb7ce2b2096662b82b79204944", "tree": {"sha": "82cf46a930433f72fb9a1893a64a581e691031b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82cf46a930433f72fb9a1893a64a581e691031b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473e80eb283ccd2381dfc52be852b71c8314c27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473e80eb283ccd2381dfc52be852b71c8314c27a", "html_url": "https://github.com/rust-lang/rust/commit/473e80eb283ccd2381dfc52be852b71c8314c27a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473e80eb283ccd2381dfc52be852b71c8314c27a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c431540544a03dc09577df4b97afd868deb167e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c431540544a03dc09577df4b97afd868deb167e5", "html_url": "https://github.com/rust-lang/rust/commit/c431540544a03dc09577df4b97afd868deb167e5"}, {"sha": "92749f04c6a00a3d8e78a2f0ec8dbe31a438396a", "url": "https://api.github.com/repos/rust-lang/rust/commits/92749f04c6a00a3d8e78a2f0ec8dbe31a438396a", "html_url": "https://github.com/rust-lang/rust/commit/92749f04c6a00a3d8e78a2f0ec8dbe31a438396a"}], "stats": {"total": 69, "additions": 25, "deletions": 44}, "files": [{"sha": "489259d1a6bc6564e03002712ed5c6e53f0272f0", "filename": "example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473e80eb283ccd2381dfc52be852b71c8314c27a/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473e80eb283ccd2381dfc52be852b71c8314c27a/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=473e80eb283ccd2381dfc52be852b71c8314c27a", "patch": "@@ -567,7 +567,7 @@ pub mod intrinsics {\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n-        pub fn needs_drop<T>() -> bool;\n+        pub fn needs_drop<T: ?::Sized>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n         pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);"}, {"sha": "0f1245c2758edabc691d4932a3fae3c66d7492cd", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/473e80eb283ccd2381dfc52be852b71c8314c27a/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473e80eb283ccd2381dfc52be852b71c8314c27a/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=473e80eb283ccd2381dfc52be852b71c8314c27a", "patch": "@@ -55,6 +55,11 @@ struct NoisyDrop {\n     inner: NoisyDropInner,\n }\n \n+struct NoisyDropUnsized {\n+    inner: NoisyDropInner,\n+    text: str,\n+}\n+\n struct NoisyDropInner;\n \n impl Drop for NoisyDrop {\n@@ -170,7 +175,9 @@ fn main() {\n         assert_eq!(intrinsics::min_align_of_val(&a) as u8, intrinsics::min_align_of::<&str>() as u8);\n \n         assert!(!intrinsics::needs_drop::<u8>());\n+        assert!(!intrinsics::needs_drop::<[u8]>());\n         assert!(intrinsics::needs_drop::<NoisyDrop>());\n+        assert!(intrinsics::needs_drop::<NoisyDropUnsized>());\n \n         Unique {\n             pointer: NonNull(1 as *mut &str),"}, {"sha": "7b41620c1d36ed601969782b794faf449ba952cc", "filename": "src/archive.rs", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/473e80eb283ccd2381dfc52be852b71c8314c27a/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473e80eb283ccd2381dfc52be852b71c8314c27a/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=473e80eb283ccd2381dfc52be852b71c8314c27a", "patch": "@@ -30,50 +30,19 @@ pub(crate) struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n-        let (src_archives, entries) = if let Some(input) = input {\n-            let read_cache = ReadCache::new(File::open(input).unwrap());\n-            let archive = ArchiveFile::parse(&read_cache).unwrap();\n-            let mut entries = Vec::new();\n-\n-            for entry in archive.members() {\n-                let entry = entry.unwrap();\n-                entries.push((\n-                    entry.name().to_vec(),\n-                    ArchiveEntry::FromArchive { archive_index: 0, file_range: entry.file_range() },\n-                ));\n-            }\n-\n-            (vec![read_cache.into_inner()], entries)\n-        } else {\n-            (vec![], Vec::new())\n-        };\n-\n+    fn new(sess: &'a Session, output: &Path) -> Self {\n         ArArchiveBuilder {\n             sess,\n             dst: output.to_path_buf(),\n             use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n             // FIXME fix builtin ranlib on macOS\n             no_builtin_ranlib: sess.target.is_like_osx,\n \n-            src_archives,\n-            entries,\n+            src_archives: vec![],\n+            entries: vec![],\n         }\n     }\n \n-    fn src_files(&mut self) -> Vec<String> {\n-        self.entries.iter().map(|(name, _)| String::from_utf8(name.clone()).unwrap()).collect()\n-    }\n-\n-    fn remove_file(&mut self, name: &str) {\n-        let index = self\n-            .entries\n-            .iter()\n-            .position(|(entry_name, _)| entry_name == name.as_bytes())\n-            .expect(\"Tried to remove file not existing in src archive\");\n-        self.entries.remove(index);\n-    }\n-\n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string().into_bytes(),\n@@ -105,7 +74,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) {\n+    fn build(mut self) -> bool {\n         enum BuilderKind {\n             Bsd(ar::Builder<File>),\n             Gnu(ar::GnuBuilder<File>),\n@@ -221,6 +190,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             )\n         };\n \n+        let any_members = !entries.is_empty();\n+\n         // Add all files\n         for (entry_name, data) in entries.into_iter() {\n             let header = ar::Header::new(entry_name, data.len() as u64);\n@@ -246,6 +217,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                 self.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n             }\n         }\n+\n+        any_members\n     }\n \n     fn inject_dll_import_lib("}, {"sha": "fbe830b2b1030400ec121ff1f5753ef238341ed5", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473e80eb283ccd2381dfc52be852b71c8314c27a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473e80eb283ccd2381dfc52be852b71c8314c27a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=473e80eb283ccd2381dfc52be852b71c8314c27a", "patch": "@@ -710,7 +710,7 @@ fn codegen_stmt<'tcx>(\n                     let times = fx\n                         .monomorphize(times)\n                         .eval(fx.tcx, ParamEnv::reveal_all())\n-                        .val()\n+                        .kind()\n                         .try_to_bits(fx.tcx.data_layout.pointer_size)\n                         .unwrap();\n                     if operand.layout().size.bytes() == 0 {"}, {"sha": "9ddaa6c4fbff198e847bffd54ec55c90ba862d48", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/473e80eb283ccd2381dfc52be852b71c8314c27a/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473e80eb283ccd2381dfc52be852b71c8314c27a/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=473e80eb283ccd2381dfc52be852b71c8314c27a", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n             ConstantKind::Ty(ct) => ct,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.val() {\n+        match const_.kind() {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n@@ -126,8 +126,8 @@ pub(crate) fn codegen_constant<'tcx>(\n         ConstantKind::Ty(ct) => ct,\n         ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n     };\n-    let const_val = match const_.val() {\n-        ConstKind::Value(const_val) => const_val,\n+    let const_val = match const_.kind() {\n+        ConstKind::Value(valtree) => fx.tcx.valtree_to_const_val((const_.ty(), valtree)),\n         ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n             if fx.tcx.is_static(def.did) =>\n         {\n@@ -468,9 +468,10 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n ) -> Option<ConstValue<'tcx>> {\n     match operand {\n         Operand::Constant(const_) => match const_.literal {\n-            ConstantKind::Ty(const_) => {\n-                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val().try_to_value()\n-            }\n+            ConstantKind::Ty(const_) => fx\n+                .monomorphize(const_)\n+                .eval_for_mir(fx.tcx, ParamEnv::reveal_all())\n+                .try_to_value(fx.tcx),\n             ConstantKind::Val(val, _) => Some(val),\n         },\n         // FIXME(rust-lang/rust#85105): Casts like `IMM8 as u32` result in the const being stored"}, {"sha": "a56a91000596c226441defac6acfdee86a814fe5", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473e80eb283ccd2381dfc52be852b71c8314c27a/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473e80eb283ccd2381dfc52be852b71c8314c27a/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=473e80eb283ccd2381dfc52be852b71c8314c27a", "patch": "@@ -13,7 +13,7 @@ use rustc_span::Symbol;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n-// FIXME use std::lazy::SyncOnceCell once it stabilizes\n+// FIXME use std::sync::OnceLock once it stabilizes\n use once_cell::sync::OnceCell;\n \n use crate::{prelude::*, BackendConfig};"}]}