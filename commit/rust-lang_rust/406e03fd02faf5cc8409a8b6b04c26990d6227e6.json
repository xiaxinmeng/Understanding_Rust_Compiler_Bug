{"sha": "406e03fd02faf5cc8409a8b6b04c26990d6227e6", "node_id": "C_kwDOAAsO6NoAKDQwNmUwM2ZkMDJmYWY1Y2M4NDA5YThiNmIwNGMyNjk5MGQ2MjI3ZTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T04:16:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T04:16:08Z"}, "message": "Auto merge of #101386 - aDotInTheVoid:rdj-discriminant, r=GuillaumeGomez\n\nRustdoc-Json: Add enum discriminant\n\nDoes the first part of #101337, by adding it to `clean`, but doesn't change HTML output, as\n\n1. [No Consensus has appeared on the UI for this](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Enum.20discriminant.20values.20in.20HTML.20output)\n2. [When inlining across crates, information is lost](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/.60clean_variant_def.20.60vs.20.60clean_variant_data.60)\n\nJSON doesn't have either of these limitations.\n\nr? `@GuillaumeGomez`", "tree": {"sha": "a5bc2e3620752963f8f93755d8ec114573b8c005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5bc2e3620752963f8f93755d8ec114573b8c005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406e03fd02faf5cc8409a8b6b04c26990d6227e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406e03fd02faf5cc8409a8b6b04c26990d6227e6", "html_url": "https://github.com/rust-lang/rust/commit/406e03fd02faf5cc8409a8b6b04c26990d6227e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406e03fd02faf5cc8409a8b6b04c26990d6227e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9358d09a55307e47bde0276e2390c603c35d5fb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9358d09a55307e47bde0276e2390c603c35d5fb6", "html_url": "https://github.com/rust-lang/rust/commit/9358d09a55307e47bde0276e2390c603c35d5fb6"}, {"sha": "efbd8f62ed2f9201d410721fae69e6233d385ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/efbd8f62ed2f9201d410721fae69e6233d385ba6", "html_url": "https://github.com/rust-lang/rust/commit/efbd8f62ed2f9201d410721fae69e6233d385ba6"}], "stats": {"total": 234, "additions": 213, "deletions": 21}, "files": [{"sha": "be2227f47af613c50797412a1f30d55160049c30", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -1786,7 +1786,10 @@ pub(crate) fn clean_visibility(vis: ty::Visibility) -> Visibility {\n \n pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocContext<'tcx>) -> Item {\n     let kind = match variant.ctor_kind {\n-        CtorKind::Const => Variant::CLike,\n+        CtorKind::Const => Variant::CLike(match variant.discr {\n+            ty::VariantDiscr::Explicit(def_id) => Some(Discriminant { expr: None, value: def_id }),\n+            ty::VariantDiscr::Relative(_) => None,\n+        }),\n         CtorKind::Fn => Variant::Tuple(\n             variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         ),\n@@ -1803,6 +1806,7 @@ pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocCont\n \n fn clean_variant_data<'tcx>(\n     variant: &hir::VariantData<'tcx>,\n+    disr_expr: &Option<hir::AnonConst>,\n     cx: &mut DocContext<'tcx>,\n ) -> Variant {\n     match variant {\n@@ -1813,7 +1817,10 @@ fn clean_variant_data<'tcx>(\n         hir::VariantData::Tuple(..) => {\n             Variant::Tuple(variant.fields().iter().map(|x| clean_field(x, cx)).collect())\n         }\n-        hir::VariantData::Unit(..) => Variant::CLike,\n+        hir::VariantData::Unit(..) => Variant::CLike(disr_expr.map(|disr| Discriminant {\n+            expr: Some(disr.body),\n+            value: cx.tcx.hir().local_def_id(disr.hir_id).to_def_id(),\n+        })),\n     }\n }\n \n@@ -1967,7 +1974,7 @@ fn clean_maybe_renamed_item<'tcx>(\n }\n \n fn clean_variant<'tcx>(variant: &hir::Variant<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n-    let kind = VariantItem(clean_variant_data(&variant.data, cx));\n+    let kind = VariantItem(clean_variant_data(&variant.data, &variant.disr_expr, cx));\n     let what_rustc_thinks =\n         Item::from_hir_id_and_parts(variant.id, Some(variant.ident.name), kind, cx);\n     // don't show `pub` for variants, which are always public"}, {"sha": "d6bb7c6c4fc89055e6540f6a19db0209aaebfbb1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -2098,7 +2098,7 @@ impl Enum {\n \n #[derive(Clone, Debug)]\n pub(crate) enum Variant {\n-    CLike,\n+    CLike(Option<Discriminant>),\n     Tuple(Vec<Item>),\n     Struct(VariantStruct),\n }\n@@ -2107,11 +2107,31 @@ impl Variant {\n     pub(crate) fn has_stripped_entries(&self) -> Option<bool> {\n         match *self {\n             Self::Struct(ref struct_) => Some(struct_.has_stripped_entries()),\n-            Self::CLike | Self::Tuple(_) => None,\n+            Self::CLike(..) | Self::Tuple(_) => None,\n         }\n     }\n }\n \n+#[derive(Clone, Debug)]\n+pub(crate) struct Discriminant {\n+    // In the case of cross crate re-exports, we don't have the nessesary information\n+    // to reconstruct the expression of the discriminant, only the value.\n+    pub(super) expr: Option<BodyId>,\n+    pub(super) value: DefId,\n+}\n+\n+impl Discriminant {\n+    /// Will be `None` in the case of cross-crate reexports, and may be\n+    /// simplified\n+    pub(crate) fn expr(&self, tcx: TyCtxt<'_>) -> Option<String> {\n+        self.expr.map(|body| print_const_expr(tcx, body))\n+    }\n+    /// Will always be a machine readable number, without underscores or suffixes.\n+    pub(crate) fn value(&self, tcx: TyCtxt<'_>) -> String {\n+        print_evaluated_const(tcx, self.value, false).unwrap()\n+    }\n+}\n+\n /// Small wrapper around [`rustc_span::Span`] that adds helper methods\n /// and enforces calling [`rustc_span::Span::source_callsite()`].\n #[derive(Copy, Clone, Debug)]\n@@ -2338,7 +2358,7 @@ impl ConstantKind {\n         match *self {\n             ConstantKind::TyConst { .. } | ConstantKind::Anonymous { .. } => None,\n             ConstantKind::Extern { def_id } | ConstantKind::Local { def_id, .. } => {\n-                print_evaluated_const(tcx, def_id)\n+                print_evaluated_const(tcx, def_id, true)\n             }\n         }\n     }"}, {"sha": "a9d511ae11e8b92db472859e788db67d7b317d99", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -261,15 +261,19 @@ pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n     }\n }\n \n-pub(crate) fn print_evaluated_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<String> {\n+pub(crate) fn print_evaluated_const(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    underscores_and_type: bool,\n+) -> Option<String> {\n     tcx.const_eval_poly(def_id).ok().and_then(|val| {\n         let ty = tcx.type_of(def_id);\n         match (val, ty.kind()) {\n             (_, &ty::Ref(..)) => None,\n             (ConstValue::Scalar(_), &ty::Adt(_, _)) => None,\n             (ConstValue::Scalar(_), _) => {\n                 let const_ = mir::ConstantKind::from_value(val, ty);\n-                Some(print_const_with_custom_print_scalar(tcx, const_))\n+                Some(print_const_with_custom_print_scalar(tcx, const_, underscores_and_type))\n             }\n             _ => None,\n         }\n@@ -302,23 +306,35 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: mir::ConstantKind<'_>) -> String {\n+fn print_const_with_custom_print_scalar(\n+    tcx: TyCtxt<'_>,\n+    ct: mir::ConstantKind<'_>,\n+    underscores_and_type: bool,\n+) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n     // For all other types, fallback to the original `pretty_print_const`.\n     match (ct, ct.ty().kind()) {\n         (mir::ConstantKind::Val(ConstValue::Scalar(int), _), ty::Uint(ui)) => {\n-            format!(\"{}{}\", format_integer_with_underscore_sep(&int.to_string()), ui.name_str())\n+            if underscores_and_type {\n+                format!(\"{}{}\", format_integer_with_underscore_sep(&int.to_string()), ui.name_str())\n+            } else {\n+                int.to_string()\n+            }\n         }\n         (mir::ConstantKind::Val(ConstValue::Scalar(int), _), ty::Int(i)) => {\n             let ty = tcx.lift(ct.ty()).unwrap();\n             let size = tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n             let data = int.assert_bits(size);\n             let sign_extended_data = size.sign_extend(data) as i128;\n-            format!(\n-                \"{}{}\",\n-                format_integer_with_underscore_sep(&sign_extended_data.to_string()),\n-                i.name_str()\n-            )\n+            if underscores_and_type {\n+                format!(\n+                    \"{}{}\",\n+                    format_integer_with_underscore_sep(&sign_extended_data.to_string()),\n+                    i.name_str()\n+                )\n+            } else {\n+                sign_extended_data.to_string()\n+            }\n         }\n         _ => ct.to_string(),\n     }"}, {"sha": "ed702f5c4a9cca78b5a5c423d0eecc809eecdd75", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -46,7 +46,7 @@ pub(crate) trait DocFolder: Sized {\n                     let fields = fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                     VariantItem(Variant::Tuple(fields))\n                 }\n-                Variant::CLike => VariantItem(Variant::CLike),\n+                Variant::CLike(disr) => VariantItem(Variant::CLike(disr)),\n             },\n             ExternCrateItem { src: _ }\n             | ImportItem(_)"}, {"sha": "cfa4509428f1099eb49edb35ce2ced8e7e9ee080", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -1203,7 +1203,8 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                     let name = v.name.unwrap();\n                     match *v.kind {\n                         clean::VariantItem(ref var) => match var {\n-                            clean::Variant::CLike => write!(w, \"{}\", name),\n+                            // FIXME(#101337): Show discriminant\n+                            clean::Variant::CLike(..) => write!(w, \"{}\", name),\n                             clean::Variant::Tuple(ref s) => {\n                                 write!(w, \"{}(\", name);\n                                 print_tuple_struct_fields(w, cx, s);"}, {"sha": "4d009316730067a246ed86d1f062c8bb497c6bf3", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -662,7 +662,7 @@ impl FromWithTcx<clean::Variant> for Variant {\n     fn from_tcx(variant: clean::Variant, tcx: TyCtxt<'_>) -> Self {\n         use clean::Variant::*;\n         match variant {\n-            CLike => Variant::Plain,\n+            CLike(disr) => Variant::Plain(disr.map(|disr| disr.into_tcx(tcx))),\n             Tuple(fields) => Variant::Tuple(\n                 fields\n                     .into_iter()\n@@ -678,6 +678,18 @@ impl FromWithTcx<clean::Variant> for Variant {\n     }\n }\n \n+impl FromWithTcx<clean::Discriminant> for Discriminant {\n+    fn from_tcx(disr: clean::Discriminant, tcx: TyCtxt<'_>) -> Self {\n+        Discriminant {\n+            // expr is only none if going throught the inlineing path, which gets\n+            // `rustc_middle` types, not `rustc_hir`, but because JSON never inlines\n+            // the expr is always some.\n+            expr: disr.expr(tcx).unwrap(),\n+            value: disr.value(tcx),\n+        }\n+    }\n+}\n+\n impl FromWithTcx<clean::Import> for Import {\n     fn from_tcx(import: clean::Import, tcx: TyCtxt<'_>) -> Self {\n         use clean::ImportKind::*;"}, {"sha": "c40274394f344ee976a5169b3ed89f3fa43067d2", "filename": "src/librustdoc/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Flibrustdoc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -20,7 +20,7 @@ pub(crate) trait DocVisitor: Sized {\n             VariantItem(i) => match i {\n                 Variant::Struct(j) => j.fields.iter().for_each(|x| self.visit_item(x)),\n                 Variant::Tuple(fields) => fields.iter().for_each(|x| self.visit_item(x)),\n-                Variant::CLike => {}\n+                Variant::CLike(_) => {}\n             },\n             ExternCrateItem { src: _ }\n             | ImportItem(_)"}, {"sha": "d25f68b3743d62d91c17617e53cd08a871d7c13d", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 18;\n+pub const FORMAT_VERSION: u32 = 19;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -308,11 +308,28 @@ pub struct Enum {\n #[serde(rename_all = \"snake_case\")]\n #[serde(tag = \"variant_kind\", content = \"variant_inner\")]\n pub enum Variant {\n-    Plain,\n+    Plain(Option<Discriminant>),\n     Tuple(Vec<Type>),\n     Struct(Vec<Id>),\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct Discriminant {\n+    /// The expression that produced the discriminant.\n+    ///\n+    /// Unlike `value`, this preserves the original formatting (eg suffixes,\n+    /// hexadecimal, and underscores), making it unsuitable to be machine\n+    /// interpreted.\n+    ///\n+    /// In some cases, when the value is to complex, this may be `\"{ _ }\"`.\n+    /// When this occurs is unstable, and may change without notice.\n+    pub expr: String,\n+    /// The numerical value of the discriminant. Stored as a string due to\n+    /// JSON's poor support for large integers, and the fact that it would need\n+    /// to store from [`i128::MIN`] to [`u128::MAX`].\n+    pub value: String,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum StructType {"}, {"sha": "8c221615aa753ebc9b38ee9f480af7fe10881bed", "filename": "src/test/rustdoc-json/enums/discriminant/basic.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -0,0 +1,12 @@\n+#[repr(i8)]\n+pub enum Ordering {\n+    // @is \"$.index[*][?(@.name=='Less')].inner.variant_inner.expr\" '\"-1\"'\n+    // @is \"$.index[*][?(@.name=='Less')].inner.variant_inner.value\" '\"-1\"'\n+    Less = -1,\n+    // @is \"$.index[*][?(@.name=='Equal')].inner.variant_inner.expr\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Equal')].inner.variant_inner.value\" '\"0\"'\n+    Equal = 0,\n+    // @is \"$.index[*][?(@.name=='Greater')].inner.variant_inner.expr\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Greater')].inner.variant_inner.value\" '\"1\"'\n+    Greater = 1,\n+}"}, {"sha": "235b0b47381fce51acaac7d2c1163b23b7eb1951", "filename": "src/test/rustdoc-json/enums/discriminant/expr.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -0,0 +1,39 @@\n+pub enum Foo {\n+    // @is \"$.index[*][?(@.name=='Addition')].inner.variant_inner.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Addition')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    Addition = 0 + 0,\n+    // @is \"$.index[*][?(@.name=='Bin')].inner.variant_inner.value\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Bin')].inner.variant_inner.expr\" '\"0b1\"'\n+    Bin = 0b1,\n+    // @is \"$.index[*][?(@.name=='Oct')].inner.variant_inner.value\" '\"2\"'\n+    // @is \"$.index[*][?(@.name=='Oct')].inner.variant_inner.expr\" '\"0o2\"'\n+    Oct = 0o2,\n+    // @is \"$.index[*][?(@.name=='PubConst')].inner.variant_inner.value\" '\"3\"'\n+    // @is \"$.index[*][?(@.name=='PubConst')].inner.variant_inner.expr\" '\"THREE\"'\n+    PubConst = THREE,\n+    // @is \"$.index[*][?(@.name=='Hex')].inner.variant_inner.value\" '\"4\"'\n+    // @is \"$.index[*][?(@.name=='Hex')].inner.variant_inner.expr\" '\"0x4\"'\n+    Hex = 0x4,\n+    // @is \"$.index[*][?(@.name=='Cast')].inner.variant_inner.value\" '\"5\"'\n+    // @is \"$.index[*][?(@.name=='Cast')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    Cast = 5 as isize,\n+    // @is \"$.index[*][?(@.name=='PubCall')].inner.variant_inner.value\" '\"6\"'\n+    // @is \"$.index[*][?(@.name=='PubCall')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    PubCall = six(),\n+    // @is \"$.index[*][?(@.name=='PrivCall')].inner.variant_inner.value\" '\"7\"'\n+    // @is \"$.index[*][?(@.name=='PrivCall')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    PrivCall = seven(),\n+    // @is \"$.index[*][?(@.name=='PrivConst')].inner.variant_inner.value\" '\"8\"'\n+    // @is \"$.index[*][?(@.name=='PrivConst')].inner.variant_inner.expr\" '\"EIGHT\"'\n+    PrivConst = EIGHT,\n+}\n+\n+pub const THREE: isize = 3;\n+const EIGHT: isize = 8;\n+\n+pub const fn six() -> isize {\n+    6\n+}\n+const fn seven() -> isize {\n+    7\n+}"}, {"sha": "8df73d78d237fd2e09cd2deccd8a90dee5bfb821", "filename": "src/test/rustdoc-json/enums/discriminant/limits.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -0,0 +1,43 @@\n+// ignore-tidy-linelength\n+#![feature(repr128)]\n+#![allow(incomplete_features)]\n+\n+#[repr(u64)]\n+pub enum U64 {\n+    // @is \"$.index[*][?(@.name=='U64Min')].inner.variant_inner.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='U64Min')].inner.variant_inner.expr\" '\"u64::MIN\"'\n+    U64Min = u64::MIN,\n+    // @is \"$.index[*][?(@.name=='U64Max')].inner.variant_inner.value\" '\"18446744073709551615\"'\n+    // @is \"$.index[*][?(@.name=='U64Max')].inner.variant_inner.expr\" '\"u64::MAX\"'\n+    U64Max = u64::MAX,\n+}\n+\n+#[repr(i64)]\n+pub enum I64 {\n+    // @is \"$.index[*][?(@.name=='I64Min')].inner.variant_inner.value\" '\"-9223372036854775808\"'\n+    // @is \"$.index[*][?(@.name=='I64Min')].inner.variant_inner.expr\" '\"i64::MIN\"'\n+    I64Min = i64::MIN,\n+    // @is \"$.index[*][?(@.name=='I64Max')].inner.variant_inner.value\" '\"9223372036854775807\"'\n+    // @is \"$.index[*][?(@.name=='I64Max')].inner.variant_inner.expr\" '\"i64::MAX\"'\n+    I64Max = i64::MAX,\n+}\n+\n+#[repr(u128)]\n+pub enum U128 {\n+    // @is \"$.index[*][?(@.name=='U128Min')].inner.variant_inner.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='U128Min')].inner.variant_inner.expr\" '\"u128::MIN\"'\n+    U128Min = u128::MIN,\n+    // @is \"$.index[*][?(@.name=='U128Max')].inner.variant_inner.value\" '\"340282366920938463463374607431768211455\"'\n+    // @is \"$.index[*][?(@.name=='U128Max')].inner.variant_inner.expr\" '\"u128::MAX\"'\n+    U128Max = u128::MAX,\n+}\n+\n+#[repr(i128)]\n+pub enum I128 {\n+    // @is \"$.index[*][?(@.name=='I128Min')].inner.variant_inner.value\" '\"-170141183460469231731687303715884105728\"'\n+    // @is \"$.index[*][?(@.name=='I128Min')].inner.variant_inner.expr\" '\"i128::MIN\"'\n+    I128Min = i128::MIN,\n+    // @is \"$.index[*][?(@.name=='I128Max')].inner.variant_inner.value\" '\"170141183460469231731687303715884105727\"'\n+    // @is \"$.index[*][?(@.name=='I128Max')].inner.variant_inner.expr\" '\"i128::MAX\"'\n+    I128Max = i128::MAX,\n+}"}, {"sha": "3417baa0760e1a76cc5a71a6af54357dc987c84c", "filename": "src/test/rustdoc-json/enums/discriminant/num_underscore_and_suffix.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -0,0 +1,15 @@\n+#[repr(u32)]\n+pub enum Foo {\n+    // @is \"$.index[*][?(@.name=='Basic')].inner.variant_inner.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Basic')].inner.variant_inner.expr\" '\"0\"'\n+    Basic = 0,\n+    // @is \"$.index[*][?(@.name=='Suffix')].inner.variant_inner.value\" '\"10\"'\n+    // @is \"$.index[*][?(@.name=='Suffix')].inner.variant_inner.expr\" '\"10u32\"'\n+    Suffix = 10u32,\n+    // @is \"$.index[*][?(@.name=='Underscore')].inner.variant_inner.value\" '\"100\"'\n+    // @is \"$.index[*][?(@.name=='Underscore')].inner.variant_inner.expr\" '\"1_0_0\"'\n+    Underscore = 1_0_0,\n+    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.variant_inner.value\" '\"1000\"'\n+    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.variant_inner.expr\" '\"1_0_0_0u32\"'\n+    SuffixUnderscore = 1_0_0_0u32,\n+}"}, {"sha": "6af944a2219ef6f4c7f0dad91c13da9ca95f3022", "filename": "src/test/rustdoc-json/enums/discriminant/only_some_have_discriminant.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e03fd02faf5cc8409a8b6b04c26990d6227e6/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs?ref=406e03fd02faf5cc8409a8b6b04c26990d6227e6", "patch": "@@ -0,0 +1,10 @@\n+pub enum Foo {\n+    // @is \"$.index[*][?(@.name=='Has')].inner.variant_inner\" '{\"expr\":\"0\", \"value\":\"0\"}'\n+    Has = 0,\n+    // @is \"$.index[*][?(@.name=='Doesnt')].inner.variant_inner\" null\n+    Doesnt,\n+    // @is \"$.index[*][?(@.name=='AlsoDoesnt')].inner.variant_inner\" null\n+    AlsoDoesnt,\n+    // @is \"$.index[*][?(@.name=='AlsoHas')].inner.variant_inner\" '{\"expr\":\"44\", \"value\":\"44\"}'\n+    AlsoHas = 44,\n+}"}]}