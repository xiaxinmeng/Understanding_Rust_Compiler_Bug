{"sha": "35d52a003bf0997d31378796bf59cc66c3ae7683", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZDUyYTAwM2JmMDk5N2QzMTM3ODc5NmJmNTljYzY2YzNhZTc2ODM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-06T18:56:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:37:25Z"}, "message": "Add unions to definition map", "tree": {"sha": "1b9daa6f6f3ad8d4d151f1225a9d8f1a186c3a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9daa6f6f3ad8d4d151f1225a9d8f1a186c3a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35d52a003bf0997d31378796bf59cc66c3ae7683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35d52a003bf0997d31378796bf59cc66c3ae7683", "html_url": "https://github.com/rust-lang/rust/commit/35d52a003bf0997d31378796bf59cc66c3ae7683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35d52a003bf0997d31378796bf59cc66c3ae7683/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4001c039de931f4e5ad5318b12e333ef30c52d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4001c039de931f4e5ad5318b12e333ef30c52d1b", "html_url": "https://github.com/rust-lang/rust/commit/4001c039de931f4e5ad5318b12e333ef30c52d1b"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "aa0eac37ecff1979c631ba8e39cd8ee94b4ef359", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=35d52a003bf0997d31378796bf59cc66c3ae7683", "patch": "@@ -41,6 +41,7 @@ pub enum Def {\n     // If Def::Struct lives in value namespace (e.g. tuple struct, unit struct expressions)\n     // it denotes a constructor and its DefId refers to NodeId of the struct's constructor.\n     Struct(DefId),\n+    Union(DefId),\n     Label(ast::NodeId),\n     Method(DefId),\n     Err,\n@@ -109,7 +110,7 @@ impl Def {\n \n             Def::Fn(..) | Def::Mod(..) | Def::ForeignMod(..) | Def::Static(..) |\n             Def::Variant(..) | Def::Enum(..) | Def::TyAlias(..) | Def::AssociatedTy(..) |\n-            Def::TyParam(..) | Def::Struct(..) | Def::Trait(..) |\n+            Def::TyParam(..) | Def::Struct(..) | Def::Union(..) | Def::Trait(..) |\n             Def::Method(..) | Def::Const(..) | Def::AssociatedConst(..) |\n             Def::PrimTy(..) | Def::Label(..) | Def::SelfTy(..) | Def::Err => {\n                 bug!(\"attempted .var_id() on invalid {:?}\", self)\n@@ -121,7 +122,7 @@ impl Def {\n         match *self {\n             Def::Fn(id) | Def::Mod(id) | Def::ForeignMod(id) | Def::Static(id, _) |\n             Def::Variant(_, id) | Def::Enum(id) | Def::TyAlias(id) | Def::AssociatedTy(_, id) |\n-            Def::TyParam(id) | Def::Struct(id) | Def::Trait(id) |\n+            Def::TyParam(id) | Def::Struct(id) | Def::Union(id) | Def::Trait(id) |\n             Def::Method(id) | Def::Const(id) | Def::AssociatedConst(id) |\n             Def::Local(id, _) | Def::Upvar(id, _, _, _) => {\n                 id\n@@ -147,6 +148,7 @@ impl Def {\n             Def::TyAlias(..) => \"type\",\n             Def::AssociatedTy(..) => \"associated type\",\n             Def::Struct(..) => \"struct\",\n+            Def::Union(..) => \"union\",\n             Def::Trait(..) => \"trait\",\n             Def::Method(..) => \"method\",\n             Def::Const(..) => \"constant\","}, {"sha": "b17411ced57fb4fd569c8ae1c973705d6b06b521", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=35d52a003bf0997d31378796bf59cc66c3ae7683", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                id, expr_ty, def);\n \n         match def {\n-          Def::Struct(..) | Def::Variant(..) | Def::Const(..) |\n+          Def::Struct(..) | Def::Union(..) | Def::Variant(..) | Def::Const(..) |\n           Def::AssociatedConst(..) | Def::Fn(..) | Def::Method(..) => {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }"}, {"sha": "9d9c6f033a960b5bceca5e9a40196fdde8e33b11", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=35d52a003bf0997d31378796bf59cc66c3ae7683", "patch": "@@ -416,6 +416,7 @@ impl tr for Def {\n               Def::Upvar(did1, nid1, index, nid2)\n           }\n           Def::Struct(did) => Def::Struct(did.tr(dcx)),\n+          Def::Union(did) => Def::Union(did.tr(dcx)),\n           Def::Label(nid) => Def::Label(dcx.tr_id(nid)),\n           Def::Err => Def::Err,\n         }"}, {"sha": "8e97870c21a5bf68d9400718a45758197ade1035", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=35d52a003bf0997d31378796bf59cc66c3ae7683", "patch": "@@ -278,7 +278,19 @@ impl<'b> Resolver<'b> {\n                 self.structs.insert(item_def_id, field_names);\n             }\n \n-            ItemKind::Union(..) => panic!(\"`union` is not yet implemented\"),\n+            ItemKind::Union(ref vdata, _) => {\n+                let def = Def::Union(self.definitions.local_def_id(item.id));\n+                self.define(parent, name, TypeNS, (def, sp, vis));\n+\n+                // Record the def ID and fields of this union.\n+                let field_names = vdata.fields().iter().enumerate().map(|(index, field)| {\n+                    self.resolve_visibility(&field.vis);\n+                    field.ident.map(|ident| ident.name)\n+                               .unwrap_or_else(|| token::intern(&index.to_string()))\n+                }).collect();\n+                let item_def_id = self.definitions.local_def_id(item.id);\n+                self.structs.insert(item_def_id, field_names);\n+            }\n \n             ItemKind::DefaultImpl(_, _) | ItemKind::Impl(..) => {}\n \n@@ -461,6 +473,13 @@ impl<'b> Resolver<'b> {\n                 let fields = self.session.cstore.struct_field_names(def_id);\n                 self.structs.insert(def_id, fields);\n             }\n+            Def::Union(def_id) => {\n+                let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n+\n+                // Record the def ID and fields of this union.\n+                let fields = self.session.cstore.struct_field_names(def_id);\n+                self.structs.insert(def_id, fields);\n+            }\n             Def::Struct(..) => {}\n             Def::Local(..) |\n             Def::PrimTy(..) |"}, {"sha": "f9a20cec42d14dcf169e730b09091d6f90186573", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=35d52a003bf0997d31378796bf59cc66c3ae7683", "patch": "@@ -300,6 +300,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 }.lower(self.tcx));\n             }\n             Def::Struct(..) |\n+            Def::Union(..) |\n             Def::Enum(..) |\n             Def::TyAlias(..) |\n             Def::AssociatedTy(..) |"}, {"sha": "be33f836cc6cd57adfa30cc43116d968b945e2b0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d52a003bf0997d31378796bf59cc66c3ae7683/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=35d52a003bf0997d31378796bf59cc66c3ae7683", "patch": "@@ -4118,6 +4118,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match def {\n             // Case 1 and 1b. Reference to a *type* or *enum variant*.\n             Def::Struct(def_id) |\n+            Def::Union(def_id) |\n             Def::Variant(_, def_id) |\n             Def::Enum(def_id) |\n             Def::TyAlias(def_id) |"}]}