{"sha": "47a8c76a43feac53be71f1ba009a66fd3626eb2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YThjNzZhNDNmZWFjNTNiZTcxZjFiYTAwOWE2NmZkMzYyNmViMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-13T17:56:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-13T17:56:35Z"}, "message": "auto merge of #12561 : pzol/rust/char-case, r=alexcrichton\n\nAdded common and simple case folding, i.e. mapping one to one character mapping. For more information see http://www.unicode.org/faq/casemap_charprop.html\r\n\r\nRemoved auto-generated dead code which wasn't used.", "tree": {"sha": "debc25f92a3cd204fa97778b70a3faf7b2807197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/debc25f92a3cd204fa97778b70a3faf7b2807197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47a8c76a43feac53be71f1ba009a66fd3626eb2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47a8c76a43feac53be71f1ba009a66fd3626eb2e", "html_url": "https://github.com/rust-lang/rust/commit/47a8c76a43feac53be71f1ba009a66fd3626eb2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47a8c76a43feac53be71f1ba009a66fd3626eb2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fbee34a89c478f959046bf4b4e12a70e937c374", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fbee34a89c478f959046bf4b4e12a70e937c374", "html_url": "https://github.com/rust-lang/rust/commit/3fbee34a89c478f959046bf4b4e12a70e937c374"}, {"sha": "dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "html_url": "https://github.com/rust-lang/rust/commit/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5"}], "stats": {"total": 2621, "additions": 1194, "deletions": 1427}, "files": [{"sha": "e32954c75d4fe8ad24bc51862de28f3b79338b58", "filename": "src/etc/unicode.py", "status": "modified", "additions": 79, "deletions": 39, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/47a8c76a43feac53be71f1ba009a66fd3626eb2e/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/47a8c76a43feac53be71f1ba009a66fd3626eb2e/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=47a8c76a43feac53be71f1ba009a66fd3626eb2e", "patch": "@@ -19,7 +19,7 @@\n # programs\". It is not meant to be a complete implementation of unicode.\n # For that we recommend you use a proper binding to libicu.\n \n-import fileinput, re, os, sys\n+import fileinput, re, os, sys, operator\n \n \n def fetch(f):\n@@ -35,6 +35,8 @@ def fetch(f):\n def load_unicode_data(f):\n     fetch(f)\n     gencats = {}\n+    upperlower = {}\n+    lowerupper = {}\n     combines = []\n     canon_decomp = {}\n     compat_decomp = {}\n@@ -44,6 +46,7 @@ def load_unicode_data(f):\n     c_hi = 0\n     com_lo = 0\n     com_hi = 0\n+\n     for line in fileinput.input(f):\n         fields = line.split(\";\")\n         if len(fields) != 15:\n@@ -52,7 +55,17 @@ def load_unicode_data(f):\n          decomp, deci, digit, num, mirror,\n          old, iso, upcase, lowcase, titlecase ] = fields\n \n-        code = int(code, 16)\n+        code_org = code\n+        code     = int(code, 16)\n+\n+        # generate char to char direct common and simple conversions\n+        # uppercase to lowercase\n+        if gencat == \"Lu\" and lowcase != \"\" and code_org != lowcase:\n+            upperlower[code] = int(lowcase, 16)\n+\n+        # lowercase to uppercase\n+        if gencat == \"Ll\" and upcase != \"\" and code_org != upcase:\n+            lowerupper[code] = int(upcase, 16)\n \n         if decomp != \"\":\n             if decomp.startswith('<'):\n@@ -96,7 +109,7 @@ def load_unicode_data(f):\n             com_lo = code\n             com_hi = code\n \n-    return (canon_decomp, compat_decomp, gencats, combines)\n+    return (canon_decomp, compat_decomp, gencats, combines, lowerupper, upperlower)\n \n def load_properties(f, interestingprops):\n     fetch(f)\n@@ -147,25 +160,28 @@ def ch_prefix(ix):\n \n def emit_bsearch_range_table(f):\n     f.write(\"\"\"\n-    fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n-        use cmp::{Equal, Less, Greater};\n-        use vec::ImmutableVector;\n-        use option::None;\n-        r.bsearch(|&(lo,hi)| {\n-            if lo <= c && c <= hi { Equal }\n-            else if hi < c { Less }\n-            else { Greater }\n-        }) != None\n-    }\\n\\n\n+fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n+    use cmp::{Equal, Less, Greater};\n+    use vec::ImmutableVector;\n+    use option::None;\n+    r.bsearch(|&(lo,hi)| {\n+        if lo <= c && c <= hi { Equal }\n+        else if hi < c { Less }\n+        else { Greater }\n+    }) != None\n+}\\n\\n\n \"\"\");\n \n def emit_property_module(f, mod, tbl):\n     f.write(\"pub mod %s {\\n\" % mod)\n     keys = tbl.keys()\n     keys.sort()\n-    emit_bsearch_range_table(f);\n+\n     for cat in keys:\n-        if cat == \"Cs\": continue\n+        if cat not in [\"Nd\", \"Nl\", \"No\", \"Cc\",\n+            \"XID_Start\", \"XID_Continue\", \"Alphabetic\",\n+            \"Lowercase\", \"Uppercase\", \"White_Space\"]:\n+            continue\n         f.write(\"    static %s_table : &'static [(char,char)] = &[\\n\" % cat)\n         ix = 0\n         for pair in tbl[cat]:\n@@ -175,35 +191,55 @@ def emit_property_module(f, mod, tbl):\n         f.write(\"\\n    ];\\n\\n\")\n \n         f.write(\"    pub fn %s(c: char) -> bool {\\n\" % cat)\n-        f.write(\"        bsearch_range_table(c, %s_table)\\n\" % cat)\n+        f.write(\"        super::bsearch_range_table(c, %s_table)\\n\" % cat)\n         f.write(\"    }\\n\\n\")\n     f.write(\"}\\n\")\n \n \n-def emit_property_module_old(f, mod, tbl):\n-    f.write(\"mod %s {\\n\" % mod)\n-    keys = tbl.keys()\n-    keys.sort()\n-    for cat in keys:\n-        f.write(\"    fn %s(c: char) -> bool {\\n\" % cat)\n-        f.write(\"        ret alt c {\\n\")\n-        prefix = ' '\n-        for pair in tbl[cat]:\n-            if pair[0] == pair[1]:\n-                f.write(\"            %c %s\\n\" %\n-                        (prefix, escape_char(pair[0])))\n-            else:\n-                f.write(\"            %c %s to %s\\n\" %\n-                        (prefix,\n-                         escape_char(pair[0]),\n-                         escape_char(pair[1])))\n-            prefix = '|'\n-        f.write(\"              { true }\\n\")\n-        f.write(\"            _ { false }\\n\")\n-        f.write(\"        };\\n\")\n-        f.write(\"    }\\n\\n\")\n+def emit_conversions_module(f, lowerupper, upperlower):\n+    f.write(\"pub mod conversions {\\n\")\n+    f.write(\"\"\"\n+    use cmp::{Equal, Less, Greater};\n+    use vec::ImmutableVector;\n+    use tuple::Tuple2;\n+    use option::{Option, Some, None};\n+\n+    pub fn to_lower(c: char) -> char {\n+        match bsearch_case_table(c, LuLl_table) {\n+          None        => c,\n+          Some(index) => LuLl_table[index].val1()\n+        }\n+    }\n+\n+    pub fn to_upper(c: char) -> char {\n+        match bsearch_case_table(c, LlLu_table) {\n+            None        => c,\n+            Some(index) => LlLu_table[index].val1()\n+        }\n+    }\n+\n+    fn bsearch_case_table(c: char, table: &'static [(char, char)]) -> Option<uint> {\n+        table.bsearch(|&(key, _)| {\n+            if c == key { Equal }\n+            else if key < c { Less }\n+            else { Greater }\n+        })\n+    }\n+\"\"\");\n+    emit_caseconversion_table(f, \"LuLl\", upperlower)\n+    emit_caseconversion_table(f, \"LlLu\", lowerupper)\n     f.write(\"}\\n\")\n \n+def emit_caseconversion_table(f, name, table):\n+    f.write(\"   static %s_table : &'static [(char, char)] = &[\\n\" % name)\n+    sorted_table = sorted(table.iteritems(), key=operator.itemgetter(0))\n+    ix = 0\n+    for key, value in sorted_table:\n+        f.write(ch_prefix(ix))\n+        f.write(\"(%s, %s)\" % (escape_char(key), escape_char(value)))\n+        ix += 1\n+    f.write(\"\\n    ];\\n\\n\")\n+\n def format_table_content(f, content, indent):\n     line = \" \"*indent\n     first = True\n@@ -359,7 +395,8 @@ def emit_decomp_module(f, canon, compat, combine):\n         os.remove(i);\n rf = open(r, \"w\")\n \n-(canon_decomp, compat_decomp, gencats, combines) = load_unicode_data(\"UnicodeData.txt\")\n+(canon_decomp, compat_decomp, gencats,\n+ combines, lowerupper, upperlower) = load_unicode_data(\"UnicodeData.txt\")\n \n # Preamble\n rf.write('''// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n@@ -379,13 +416,16 @@ def emit_decomp_module(f, canon, compat, combine):\n \n ''')\n \n+emit_bsearch_range_table(rf);\n emit_property_module(rf, \"general_category\", gencats)\n \n emit_decomp_module(rf, canon_decomp, compat_decomp, combines)\n \n derived = load_properties(\"DerivedCoreProperties.txt\",\n         [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\"])\n+\n emit_property_module(rf, \"derived_property\", derived)\n \n props = load_properties(\"PropList.txt\", [\"White_Space\"])\n emit_property_module(rf, \"property\", props)\n+emit_conversions_module(rf, lowerupper, upperlower)"}, {"sha": "52ca28c4ce890ae4a144e1757bb527ab6a0f552b", "filename": "src/libstd/char.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/47a8c76a43feac53be71f1ba009a66fd3626eb2e/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a8c76a43feac53be71f1ba009a66fd3626eb2e/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=47a8c76a43feac53be71f1ba009a66fd3626eb2e", "patch": "@@ -28,7 +28,7 @@ use cast::transmute;\n use option::{None, Option, Some};\n use iter::{Iterator, range_step};\n use str::StrSlice;\n-use unicode::{derived_property, property, general_category, decompose};\n+use unicode::{derived_property, property, general_category, decompose, conversions};\n \n #[cfg(test)] use str::OwnedStr;\n \n@@ -225,6 +225,38 @@ pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n     else { None }\n }\n \n+/// Convert a char to its uppercase equivalent\n+///\n+/// The case-folding performed is the common or simple mapping:\n+/// it maps one unicode codepoint (one char in Rust) to its uppercase equivalent according\n+/// to the Unicode database at ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt\n+/// The additional SpecialCasing.txt is not considered here, as it expands to multiple\n+/// codepoints in some cases.\n+///\n+/// A full reference can be found here\n+/// http://www.unicode.org/versions/Unicode4.0.0/ch03.pdf#G33992\n+///\n+/// # Return value\n+///\n+/// Returns the char itself if no conversion was made\n+#[inline]\n+pub fn to_uppercase(c: char) -> char {\n+    conversions::to_upper(c)\n+}\n+\n+/// Convert a char to its lowercase equivalent\n+///\n+/// The case-folding performed is the common or simple mapping\n+/// see `to_uppercase` for references and more information\n+///\n+/// # Return value\n+///\n+/// Returns the char itself if no conversion if possible\n+#[inline]\n+pub fn to_lowercase(c: char) -> char {\n+    conversions::to_lower(c)\n+}\n+\n ///\n /// Converts a number to the character representing it\n ///\n@@ -385,6 +417,8 @@ pub trait Char {\n     fn is_digit(&self) -> bool;\n     fn is_digit_radix(&self, radix: uint) -> bool;\n     fn to_digit(&self, radix: uint) -> Option<uint>;\n+    fn to_lowercase(&self) -> char;\n+    fn to_uppercase(&self) -> char;\n     fn from_digit(num: uint, radix: uint) -> Option<char>;\n     fn escape_unicode(&self, f: |char|);\n     fn escape_default(&self, f: |char|);\n@@ -421,6 +455,10 @@ impl Char for char {\n \n     fn to_digit(&self, radix: uint) -> Option<uint> { to_digit(*self, radix) }\n \n+    fn to_lowercase(&self) -> char { to_lowercase(*self) }\n+\n+    fn to_uppercase(&self) -> char { to_uppercase(*self) }\n+\n     fn from_digit(num: uint, radix: uint) -> Option<char> { from_digit(num, radix) }\n \n     fn escape_unicode(&self, f: |char|) { escape_unicode(*self, f) }\n@@ -516,6 +554,39 @@ fn test_to_digit() {\n     assert_eq!('$'.to_digit(36u), None);\n }\n \n+#[test]\n+fn test_to_lowercase() {\n+    assert_eq!('A'.to_lowercase(), 'a');\n+    assert_eq!('\u00d6'.to_lowercase(), '\u00f6');\n+    assert_eq!('\u00df'.to_lowercase(), '\u00df');\n+    assert_eq!('\u00dc'.to_lowercase(), '\u00fc');\n+    assert_eq!('\ud83d\udca9'.to_lowercase(), '\ud83d\udca9');\n+    assert_eq!('\u03a3'.to_lowercase(), '\u03c3');\n+    assert_eq!('\u03a4'.to_lowercase(), '\u03c4');\n+    assert_eq!('\u0399'.to_lowercase(), '\u03b9');\n+    assert_eq!('\u0393'.to_lowercase(), '\u03b3');\n+    assert_eq!('\u039c'.to_lowercase(), '\u03bc');\n+    assert_eq!('\u0391'.to_lowercase(), '\u03b1');\n+    assert_eq!('\u03a3'.to_lowercase(), '\u03c3');\n+}\n+\n+#[test]\n+fn test_to_uppercase() {\n+    assert_eq!('a'.to_uppercase(), 'A');\n+    assert_eq!('\u00f6'.to_uppercase(), '\u00d6');\n+    assert_eq!('\u00df'.to_uppercase(), '\u00df'); // not \u1e9e: Latin capital letter sharp s\n+    assert_eq!('\u00fc'.to_uppercase(), '\u00dc');\n+    assert_eq!('\ud83d\udca9'.to_uppercase(), '\ud83d\udca9');\n+\n+    assert_eq!('\u03c3'.to_uppercase(), '\u03a3');\n+    assert_eq!('\u03c4'.to_uppercase(), '\u03a4');\n+    assert_eq!('\u03b9'.to_uppercase(), '\u0399');\n+    assert_eq!('\u03b3'.to_uppercase(), '\u0393');\n+    assert_eq!('\u03bc'.to_uppercase(), '\u039c');\n+    assert_eq!('\u03b1'.to_uppercase(), '\u0391');\n+    assert_eq!('\u03c2'.to_uppercase(), '\u03a3');\n+}\n+\n #[test]\n fn test_is_control() {\n     assert!('\\u0000'.is_control());"}, {"sha": "b43003f0de2edbcb8b63bab569fcf2a91de29c43", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 1043, "deletions": 1387, "changes": 2430, "blob_url": "https://github.com/rust-lang/rust/blob/47a8c76a43feac53be71f1ba009a66fd3626eb2e/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a8c76a43feac53be71f1ba009a66fd3626eb2e/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=47a8c76a43feac53be71f1ba009a66fd3626eb2e"}]}