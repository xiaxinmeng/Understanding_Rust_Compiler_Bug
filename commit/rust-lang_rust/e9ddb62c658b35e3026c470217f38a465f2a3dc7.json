{"sha": "e9ddb62c658b35e3026c470217f38a465f2a3dc7", "node_id": "C_kwDOAAsO6NoAKGU5ZGRiNjJjNjU4YjM1ZTMwMjZjNDcwMjE3ZjM4YTQ2NWYyYTNkYzc", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-13T15:50:51Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-13T18:11:10Z"}, "message": "Expand more single ident macro calls upon their collection", "tree": {"sha": "866f88aec48595535992009def6a96994f373f5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/866f88aec48595535992009def6a96994f373f5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ddb62c658b35e3026c470217f38a465f2a3dc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmRf0t0ACgkQ4laYqTBY\nYXGqwg//Ro4n16n4UnmwlfwA62qExf8ZXjjTh/tQMndCGfxgC6Pi7UgnPs5Vp1Jm\nMOIlGtQe0UbCraTKYJtMxzTm8jLJpreF1v+gapTafyoEJKrNQ1Im/H6WCTRhA3yL\no6bhnwuAr/KU92hAenfO6ioNc6Dp5IKaQonu4E1h65+4SvYf/KhH3TGP8hIVgJkQ\nyPcAsnGewR8pVK4CdIFAn5+qh1jeMxSbFDtM85xNYI7PedrFMWkajnyJXKS6vCmN\nhBeE5WnfBkPMfacVRqd7+LMqXCqjecepECBeVaO1anj8K1H8Sn4hbbSJXLSlAKuE\ngdfZM78ZQQuNPXWoRSlGwZI5pNO4kR+qKqf1BVQ7vz25tZQnPbfF0SVnyXsXGRaW\nmnDYuNpZJypLBNwGFmApTDEwWXZgoKPok9QRjGB2I9BUdKYHv+OZR+pEwcx2WXsf\naOR20yk7p9AvK2gD+6hRP6ikOk6iAFDU4ChfL1kTUup02PAN2ow2ObARs/DRgS/6\nlXwYL/L8v9B5YPHYftMau1W2UfwFNVOZPRD355ntPLMJEaVQmO8omB+7May0ijQQ\nqBkexdNh5SKcDWytVILqHDG1LDfXwz6DOrt8GISbtvP3rFb8lqlUyhPizL7++gKh\nbjboWAsKVmPQLe+krOHMyRH6mtriqp5UpzdWroYErshrEO+58oM=\n=Xz+6\n-----END PGP SIGNATURE-----", "payload": "tree 866f88aec48595535992009def6a96994f373f5b\nparent f2a35deb50fb5c6e28c5eddbd6a4cffd47ddb444\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1683993051 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1684001470 +0900\n\nExpand more single ident macro calls upon their collection\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddb62c658b35e3026c470217f38a465f2a3dc7", "html_url": "https://github.com/rust-lang/rust/commit/e9ddb62c658b35e3026c470217f38a465f2a3dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddb62c658b35e3026c470217f38a465f2a3dc7/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2a35deb50fb5c6e28c5eddbd6a4cffd47ddb444", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a35deb50fb5c6e28c5eddbd6a4cffd47ddb444", "html_url": "https://github.com/rust-lang/rust/commit/f2a35deb50fb5c6e28c5eddbd6a4cffd47ddb444"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "d1288b7b59b5b5ce5fda4396acc67870721f7304", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb62c658b35e3026c470217f38a465f2a3dc7/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb62c658b35e3026c470217f38a465f2a3dc7/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e9ddb62c658b35e3026c470217f38a465f2a3dc7", "patch": "@@ -44,7 +44,8 @@ use crate::{\n         mod_resolution::ModDir,\n         path_resolution::ReachedFixedPoint,\n         proc_macro::{parse_macro_name_and_helper_attrs, ProcMacroDef, ProcMacroKind},\n-        BuiltinShadowMode, DefMap, MacroSubNs, ModuleData, ModuleOrigin, ResolveMode,\n+        sub_namespace_match, BuiltinShadowMode, DefMap, MacroSubNs, ModuleData, ModuleOrigin,\n+        ResolveMode,\n     },\n     path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n@@ -2141,26 +2142,34 @@ impl ModCollector<'_, '_> {\n \n     fn collect_macro_call(&mut self, mac: &MacroCall, container: ItemContainerId) {\n         let ast_id = AstIdWithPath::new(self.file_id(), mac.ast_id, ModPath::clone(&mac.path));\n+        let db = self.def_collector.db;\n \n-        // Case 1: try to resolve in legacy scope and expand macro_rules\n+        // FIXME: Immediately expanding in \"Case 1\" is insufficient since \"Case 2\" may also define\n+        // new legacy macros that create textual scopes. We need a way to resolve names in textual\n+        // scopes without eager expansion.\n+\n+        // Case 1: try to resolve macro calls with single-segment name and expand macro_rules\n         if let Ok(res) = macro_call_as_call_id(\n-            self.def_collector.db.upcast(),\n+            db.upcast(),\n             &ast_id,\n             mac.expand_to,\n             self.def_collector.def_map.krate,\n             |path| {\n                 path.as_ident().and_then(|name| {\n-                    self.def_collector.def_map.with_ancestor_maps(\n-                        self.def_collector.db,\n-                        self.module_id,\n-                        &mut |map, module| {\n-                            map[module]\n-                                .scope\n-                                .get_legacy_macro(name)\n-                                .and_then(|it| it.last())\n-                                .map(|&it| macro_id_to_def_id(self.def_collector.db, it))\n-                        },\n-                    )\n+                    let def_map = &self.def_collector.def_map;\n+                    def_map\n+                        .with_ancestor_maps(db, self.module_id, &mut |map, module| {\n+                            map[module].scope.get_legacy_macro(name)?.last().copied()\n+                        })\n+                        .or_else(|| def_map[self.module_id].scope.get(name).take_macros())\n+                        .or_else(|| def_map.macro_use_prelude.get(name).copied())\n+                        .filter(|&id| {\n+                            sub_namespace_match(\n+                                Some(MacroSubNs::from_id(db, id)),\n+                                Some(MacroSubNs::Bang),\n+                            )\n+                        })\n+                        .map(|it| macro_id_to_def_id(self.def_collector.db, it))\n                 })\n             },\n         ) {"}, {"sha": "981171013a159fcd08abe16ebaae742d8b0aab62", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb62c658b35e3026c470217f38a465f2a3dc7/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb62c658b35e3026c470217f38a465f2a3dc7/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=e9ddb62c658b35e3026c470217f38a465f2a3dc7", "patch": "@@ -59,7 +59,11 @@ impl ResolvePathResult {\n }\n \n impl PerNs {\n-    fn filter_macro(mut self, db: &dyn DefDatabase, expected: Option<MacroSubNs>) -> Self {\n+    pub(super) fn filter_macro(\n+        mut self,\n+        db: &dyn DefDatabase,\n+        expected: Option<MacroSubNs>,\n+    ) -> Self {\n         self.macros = self.macros.filter(|&(id, _)| {\n             let this = MacroSubNs::from_id(db, id);\n             sub_namespace_match(Some(this), expected)"}, {"sha": "7eb64beb1d797fd52d5928e9ff999523a78ad8a5", "filename": "crates/hir-def/src/nameres/tests/macros.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb62c658b35e3026c470217f38a465f2a3dc7/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb62c658b35e3026c470217f38a465f2a3dc7/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=e9ddb62c658b35e3026c470217f38a465f2a3dc7", "patch": "@@ -1272,6 +1272,39 @@ pub mod prelude {\n     );\n }\n \n+#[test]\n+fn macro_use_prelude_is_eagerly_expanded() {\n+    // See FIXME in `ModCollector::collect_macro_call()`.\n+    check(\n+        r#\"\n+//- /main.rs crate:main deps:lib\n+#[macro_use]\n+extern crate lib;\n+mk_foo!();\n+mod a {\n+    foo!();\n+}\n+//- /lib.rs crate:lib\n+#[macro_export]\n+macro_rules! mk_foo {\n+    () => {\n+        macro_rules! foo {\n+            () => { struct Ok; }\n+        }\n+    }\n+}\n+    \"#,\n+        expect![[r#\"\n+        crate\n+        a: t\n+        lib: t\n+\n+        crate::a\n+        Ok: t v\n+    \"#]],\n+    );\n+}\n+\n #[test]\n fn macro_sub_namespace() {\n     let map = compute_crate_def_map("}]}