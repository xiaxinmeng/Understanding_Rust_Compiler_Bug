{"sha": "ef3ec1fe97f6dbb641349e41cb252d611def91a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmM2VjMWZlOTdmNmRiYjY0MTM0OWU0MWNiMjUyZDYxMWRlZjkxYTU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-16T15:59:35Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-16T16:00:31Z"}, "message": "rename `base_and_len` -> `base_and_byte_len`", "tree": {"sha": "171e16b06202e7b28e30e0a2f86d39beebd1bad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171e16b06202e7b28e30e0a2f86d39beebd1bad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef3ec1fe97f6dbb641349e41cb252d611def91a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3ec1fe97f6dbb641349e41cb252d611def91a5", "html_url": "https://github.com/rust-lang/rust/commit/ef3ec1fe97f6dbb641349e41cb252d611def91a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef3ec1fe97f6dbb641349e41cb252d611def91a5/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e128d7931aea612073cdb49381b591bb812543a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e128d7931aea612073cdb49381b591bb812543a", "html_url": "https://github.com/rust-lang/rust/commit/1e128d7931aea612073cdb49381b591bb812543a"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "dc07852ad9130d8f2f0785ffd375af1cd2632a8b", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=ef3ec1fe97f6dbb641349e41cb252d611def91a5", "patch": "@@ -1025,8 +1025,7 @@ fn extract_vec_elems(bcx: @mut Block,\n                       -> ExtractedBlock {\n     let _icx = push_ctxt(\"match::extract_vec_elems\");\n     let vec_datum = match_datum(bcx, val, pat_id);\n-    let (bcx, base, len) = vec_datum.get_vec_base_and_len(bcx, pat_span,\n-                                                          pat_id, 0);\n+    let (bcx, base, len) = vec_datum.get_vec_base_and_byte_len(bcx, pat_span, pat_id, 0);\n     let vt = tvec::vec_types(bcx, node_id_type(bcx, pat_id));\n \n     let mut elems = do vec::from_fn(elem_count) |i| {\n@@ -1647,9 +1646,7 @@ fn compile_submatch_continue(mut bcx: @mut Block,\n             vec_len(*) => {\n                 let vt = tvec::vec_types(bcx, node_id_type(bcx, pat_id));\n                 let unboxed = load_if_immediate(bcx, val, vt.vec_ty);\n-                let (_, len) = tvec::get_base_and_len(\n-                    bcx, unboxed, vt.vec_ty\n-                );\n+                let (_, len) = tvec::get_base_and_byte_len(bcx, unboxed, vt.vec_ty);\n                 test_val = SDiv(bcx, len, vt.llunit_size);\n                 kind = compare_vec_len;\n             }"}, {"sha": "e28d6a6899c8b96c635caf7075bd4c746fee2046", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ef3ec1fe97f6dbb641349e41cb252d611def91a5", "patch": "@@ -745,7 +745,7 @@ pub fn iter_structural_ty(cx: @mut Block, av: ValueRef, t: ty::t,\n       }\n       ty::ty_estr(ty::vstore_fixed(_)) |\n       ty::ty_evec(_, ty::vstore_fixed(_)) => {\n-        let (base, len) = tvec::get_base_and_len(cx, av, t);\n+        let (base, len) = tvec::get_base_and_byte_len(cx, av, t);\n         cx = tvec::iter_vec_raw(cx, base, t, len, f);\n       }\n       ty::ty_tup(ref args) => {"}, {"sha": "3055c1e64fcdd187d5fa3ec9d26d89088d06d4ab", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=ef3ec1fe97f6dbb641349e41cb252d611def91a5", "patch": "@@ -305,7 +305,7 @@ pub fn trans_fail_expr(bcx: @mut Block,\n                 bcx, expr::trans_to_datum(bcx, arg_expr));\n \n             if ty::type_is_str(arg_datum.ty) {\n-                let (lldata, _) = arg_datum.get_vec_base_and_len_no_root(bcx);\n+                let (lldata, _) = arg_datum.get_vec_base_and_byte_len_no_root(bcx);\n                 return trans_fail_value(bcx, sp_opt, lldata);\n             } else if bcx.unreachable || ty::type_is_bot(arg_datum.ty) {\n                 return bcx;"}, {"sha": "34f1a6fa2a78a1507f1adb7d5213026b17dedd76", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=ef3ec1fe97f6dbb641349e41cb252d611def91a5", "patch": "@@ -770,28 +770,28 @@ impl Datum {\n         DatumBlock { bcx: bcx, datum: datum }\n     }\n \n-    pub fn get_vec_base_and_len(&self,\n-                                mut bcx: @mut Block,\n-                                span: Span,\n-                                expr_id: ast::NodeId,\n-                                derefs: uint)\n-                                -> (@mut Block, ValueRef, ValueRef) {\n+    pub fn get_vec_base_and_byte_len(&self,\n+                                     mut bcx: @mut Block,\n+                                     span: Span,\n+                                     expr_id: ast::NodeId,\n+                                     derefs: uint)\n+                                     -> (@mut Block, ValueRef, ValueRef) {\n         //! Converts a vector into the slice pair. Performs rooting\n         //! and write guards checks.\n \n         // only imp't for @[] and @str, but harmless\n         bcx = write_guard::root_and_write_guard(self, bcx, span, expr_id, derefs);\n-        let (base, len) = self.get_vec_base_and_len_no_root(bcx);\n+        let (base, len) = self.get_vec_base_and_byte_len_no_root(bcx);\n         (bcx, base, len)\n     }\n \n-    pub fn get_vec_base_and_len_no_root(&self, bcx: @mut Block)\n-                                        -> (ValueRef, ValueRef) {\n+    pub fn get_vec_base_and_byte_len_no_root(&self, bcx: @mut Block)\n+                                             -> (ValueRef, ValueRef) {\n         //! Converts a vector into the slice pair. Des not root\n         //! nor perform write guard checks.\n \n         let llval = self.to_appropriate_llval(bcx);\n-        tvec::get_base_and_len(bcx, llval, self.ty)\n+        tvec::get_base_and_byte_len(bcx, llval, self.ty)\n     }\n \n     pub fn root_and_write_guard(&self,"}, {"sha": "81ab3b5f2ec867c1251103f8914d6e17bbb9cb4a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ef3ec1fe97f6dbb641349e41cb252d611def91a5", "patch": "@@ -265,7 +265,7 @@ pub fn trans_to_datum(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n         let unit_ty = ty::sequence_element_type(tcx, datum.ty);\n \n         let (bcx, base, len) =\n-            datum.get_vec_base_and_len(bcx, expr.span, expr.id, autoderefs+1);\n+            datum.get_vec_base_and_byte_len(bcx, expr.span, expr.id, autoderefs+1);\n \n         // this type may have a different region/mutability than the\n         // real one, but it will have the same runtime representation\n@@ -978,8 +978,8 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n         base::maybe_name_value(bcx.ccx(), vt.llunit_size, \"unit_sz\");\n \n         let (bcx, base, len) =\n-            base_datum.get_vec_base_and_len(bcx, index_expr.span,\n-                                            index_expr.id, 0);\n+            base_datum.get_vec_base_and_byte_len(bcx, index_expr.span,\n+                                                 index_expr.id, 0);\n \n         debug2!(\"trans_index: base {}\", bcx.val_to_str(base));\n         debug2!(\"trans_index: len {}\", bcx.val_to_str(len));"}, {"sha": "eab642ccb91de7a381dfb2084ed534aa0987ff44", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3ec1fe97f6dbb641349e41cb252d611def91a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=ef3ec1fe97f6dbb641349e41cb252d611def91a5", "patch": "@@ -501,15 +501,15 @@ pub fn elements_required(bcx: @mut Block, content_expr: &ast::Expr) -> uint {\n     }\n }\n \n-pub fn get_base_and_len(bcx: @mut Block,\n+pub fn get_base_and_byte_len(bcx: @mut Block,\n                         llval: ValueRef,\n                         vec_ty: ty::t) -> (ValueRef, ValueRef) {\n     //!\n     //\n     // Converts a vector into the slice pair.  The vector should be stored in\n     // `llval` which should be either immediate or by-ref as appropriate for\n     // the vector type.  If you have a datum, you would probably prefer to\n-    // call `Datum::get_base_and_len()` which will handle any conversions for\n+    // call `Datum::get_base_and_byte_len()` which will handle any conversions for\n     // you.\n \n     let ccx = bcx.ccx();"}]}