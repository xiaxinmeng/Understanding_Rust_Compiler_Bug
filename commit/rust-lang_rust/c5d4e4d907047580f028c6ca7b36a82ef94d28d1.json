{"sha": "c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "node_id": "C_kwDOAAsO6NoAKGM1ZDRlNGQ5MDcwNDc1ODBmMDI4YzZjYTdiMzZhODJlZjk0ZDI4ZDE", "commit": {"author": {"name": "Giacomo Pasini", "email": "giacomo@status.im", "date": "2023-03-05T20:02:14Z"}, "committer": {"name": "Giacomo Pasini", "email": "giacomo@status.im", "date": "2023-03-07T13:25:22Z"}, "message": "Remove DropAndReplace terminator\n\nPR 107844 made DropAndReplace unused, let's remove it completely\nfrom the codebase.", "tree": {"sha": "5e86d4fcf511875c88ce5e828e72386387c53efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e86d4fcf511875c88ce5e828e72386387c53efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEElHY+FNnS7QgcFjiQoDhRt4psmkYFAmQHO0QACgkQoDhRt4ps\nmkZlfw//W0jETJQrd9fIUt1rLPjhPcpCUcUBt2UO3rHLcHFXMumMBJQmU1Ie3rON\nRvTOGLBQRpKgRGyFWo31hlH+TF+QEqQyjOzgZ3yHF1rEvpO0TnvVwYUJ0vpjyajE\nOpBP06nj7LZQBlPd028SNy5BNjul8nj5DcEimYd4H3ZuZxSXHRR8zioL/TX7yVr6\nXzCoseqawb4+v5pzuM8KXCzvnVaSaCOZEIGzK8hKGK+53MrgJjqLhhso/awXl6UC\n4MMKGa1XXJcQyxmAypRc8OZstwrlGskJbmSzaCH+EA5R0rTQlZa+5d1MiEzi7eIc\nf2Zhdd0KRPOIDv4BKt+6zp0frzcCpWBcHT1k/DviUVnEM+Y6lqmSn8vkq/2I11px\nK2vemvQu66boZpTHCeX/lWsk3jgVhHTYSVurYcfJ9o/xbQNP+T49jS1ukVUTspxf\ndkM0vhQPCMGk4KjVfkfH3hbZZdS2lOGsTIVsZVGF8bRhm1E3d2rCwCnRdJtr0YVd\n/kbxL1GaHf1gRfi/ir/9o9zejhCIuOQ5Z8p38T9nbhb0Oo0Qt6g8fEEmQUWZtSBW\nLl6ceQGsmE3By29iy5M1u2+2D9uonasNlLO5wnPX2TT5AwqueJ5SYWMfzsXxx/to\n7hHjU8EhgLUHoy/ZAEPwunabGM9CRWHyD1JO+k6Hmdps4i0z4CU=\n=Igug\n-----END PGP SIGNATURE-----", "payload": "tree 5e86d4fcf511875c88ce5e828e72386387c53efd\nparent 14c54b637b18f74680d0c0441216714b5e9c150d\nauthor Giacomo Pasini <giacomo@status.im> 1678046534 +0100\ncommitter Giacomo Pasini <giacomo@status.im> 1678195522 +0100\n\nRemove DropAndReplace terminator\n\nPR 107844 made DropAndReplace unused, let's remove it completely\nfrom the codebase.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "html_url": "https://github.com/rust-lang/rust/commit/c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/comments", "author": {"login": "Zeegomo", "id": 21265557, "node_id": "MDQ6VXNlcjIxMjY1NTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21265557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zeegomo", "html_url": "https://github.com/Zeegomo", "followers_url": "https://api.github.com/users/Zeegomo/followers", "following_url": "https://api.github.com/users/Zeegomo/following{/other_user}", "gists_url": "https://api.github.com/users/Zeegomo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zeegomo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zeegomo/subscriptions", "organizations_url": "https://api.github.com/users/Zeegomo/orgs", "repos_url": "https://api.github.com/users/Zeegomo/repos", "events_url": "https://api.github.com/users/Zeegomo/events{/privacy}", "received_events_url": "https://api.github.com/users/Zeegomo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zeegomo", "id": 21265557, "node_id": "MDQ6VXNlcjIxMjY1NTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21265557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zeegomo", "html_url": "https://github.com/Zeegomo", "followers_url": "https://api.github.com/users/Zeegomo/followers", "following_url": "https://api.github.com/users/Zeegomo/following{/other_user}", "gists_url": "https://api.github.com/users/Zeegomo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zeegomo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zeegomo/subscriptions", "organizations_url": "https://api.github.com/users/Zeegomo/orgs", "repos_url": "https://api.github.com/users/Zeegomo/repos", "events_url": "https://api.github.com/users/Zeegomo/events{/privacy}", "received_events_url": "https://api.github.com/users/Zeegomo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c54b637b18f74680d0c0441216714b5e9c150d", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c54b637b18f74680d0c0441216714b5e9c150d", "html_url": "https://github.com/rust-lang/rust/commit/14c54b637b18f74680d0c0441216714b5e9c150d"}], "stats": {"total": 374, "additions": 33, "deletions": 341}, "files": [{"sha": "1006a047cce09ce2a1859b5f1cc89b002a4b4d23", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -118,15 +118,6 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }\n-            TerminatorKind::DropAndReplace {\n-                place: drop_place,\n-                value: new_value,\n-                target: _,\n-                unwind: _,\n-            } => {\n-                self.mutate_place(location, *drop_place, Deep);\n-                self.consume_operand(location, new_value);\n-            }\n             TerminatorKind::Call {\n                 func,\n                 args,"}, {"sha": "18c465d18c6fe9653c715e36d83c6889be55100e", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -744,15 +744,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            TerminatorKind::DropAndReplace {\n-                place: drop_place,\n-                value: new_value,\n-                target: _,\n-                unwind: _,\n-            } => {\n-                self.mutate_place(loc, (*drop_place, span), Deep, flow_state);\n-                self.consume_operand(loc, (new_value, span), flow_state);\n-            }\n             TerminatorKind::Call {\n                 func,\n                 args,\n@@ -867,7 +858,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }\n             | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }\n             | TerminatorKind::Goto { .. }"}, {"sha": "5d4b1d10b1ebdc63037832b4e3158174acb9ff87", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -435,8 +435,7 @@ impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         //\n         // What we *actually* generate is a store to a temporary\n         // for the call (`TMP = call()...`) and then a\n-        // `DropAndReplace` to swap that with `X`\n-        // (`DropAndReplace` has very particular semantics).\n+        // `Drop(X)` followed by `X = TMP`  to swap that with `X`.\n     }\n }\n "}, {"sha": "b32cda2719af0f6b1b3ed36dff044c4e6d20be37", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -1312,24 +1312,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // no checks needed for these\n             }\n \n-            TerminatorKind::DropAndReplace { place, value, target: _, unwind: _ } => {\n-                let place_ty = place.ty(body, tcx).ty;\n-                let rv_ty = value.ty(body, tcx);\n-\n-                let locations = term_location.to_locations();\n-                if let Err(terr) =\n-                    self.sub_types(rv_ty, place_ty, locations, ConstraintCategory::Assignment)\n-                {\n-                    span_mirbug!(\n-                        self,\n-                        term,\n-                        \"bad DropAndReplace ({:?} = {:?}): {:?}\",\n-                        place_ty,\n-                        rv_ty,\n-                        terr\n-                    );\n-                }\n-            }\n             TerminatorKind::SwitchInt { discr, .. } => {\n                 self.check_operand(discr, term_location);\n \n@@ -1629,7 +1611,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Unreachable => {}\n             TerminatorKind::Drop { target, unwind, .. }\n-            | TerminatorKind::DropAndReplace { target, unwind, .. }\n             | TerminatorKind::Assert { target, cleanup: unwind, .. } => {\n                 self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 if let Some(unwind) = unwind {"}, {"sha": "10ade142b24ddbb1c5a46a7fb6d38cf8b9aea5e6", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -71,9 +71,6 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n             TerminatorKind::Call { destination, .. } => {\n                 self.remove_never_initialized_mut_locals(*destination);\n             }\n-            TerminatorKind::DropAndReplace { place, .. } => {\n-                self.remove_never_initialized_mut_locals(*place);\n-            }\n             _ => {}\n         }\n "}, {"sha": "cb0e272cedaba829129320a443fce3225f7c54a6", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -499,7 +499,6 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             TerminatorKind::Yield { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::GeneratorDrop => {\n                 bug!(\"shouldn't exist at codegen {:?}\", bb_data.terminator());\n             }"}, {"sha": "1930db72ead4417faacfaf70b0f517dac6af5583", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -543,8 +543,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     | TerminatorKind::Unreachable\n                     | TerminatorKind::Drop { .. }\n                     | TerminatorKind::Assert { .. } => {}\n-                    TerminatorKind::DropAndReplace { .. }\n-                    | TerminatorKind::Yield { .. }\n+                    TerminatorKind::Yield { .. }\n                     | TerminatorKind::GeneratorDrop\n                     | TerminatorKind::FalseEdge { .. }\n                     | TerminatorKind::FalseUnwind { .. } => unreachable!(),"}, {"sha": "0ce395e912db319c32386b93b0b1854f16dcc7f9", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -295,7 +295,6 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n                 TerminatorKind::Call { cleanup: unwind, .. }\n                 | TerminatorKind::InlineAsm { cleanup: unwind, .. }\n                 | TerminatorKind::Assert { cleanup: unwind, .. }\n-                | TerminatorKind::DropAndReplace { unwind, .. }\n                 | TerminatorKind::Drop { unwind, .. } => {\n                     if let Some(unwind) = unwind {\n                         debug!("}, {"sha": "71c71d59b7ab9ec5b3b44f03624880eb3b1b6ce0", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -1305,10 +1305,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mergeable_succ(),\n                 ),\n \n-            mir::TerminatorKind::DropAndReplace { .. } => {\n-                bug!(\"undesugared DropAndReplace in codegen: {:?}\", terminator);\n-            }\n-\n             mir::TerminatorKind::Call {\n                 ref func,\n                 ref args,"}, {"sha": "685a5599cdedf5496b6a537ea236a883c901e9ed", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -171,11 +171,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Unreachable => throw_ub!(Unreachable),\n \n             // These should never occur for MIR we actually run.\n-            DropAndReplace { .. }\n-            | FalseEdge { .. }\n-            | FalseUnwind { .. }\n-            | Yield { .. }\n-            | GeneratorDrop => span_bug!(\n+            FalseEdge { .. } | FalseUnwind { .. } | Yield { .. } | GeneratorDrop => span_bug!(\n                 terminator.source_info.span,\n                 \"{:#?} should have been eliminated by MIR pass\",\n                 terminator.kind"}, {"sha": "e8f8c87111f726c6a73f9b676c1bdee6854d39b8", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -977,8 +977,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n             // Forbid all `Drop` terminators unless the place being dropped is a local with no\n             // projections that cannot be `NeedsNonConstDrop`.\n-            TerminatorKind::Drop { place: dropped_place, .. }\n-            | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n+            TerminatorKind::Drop { place: dropped_place, .. } => {\n                 // If we are checking live drops after drop-elaboration, don't emit duplicate\n                 // errors here.\n                 if super::post_drop_elaboration::checking_enabled(self.ccx) {"}, {"sha": "43806035a44a04fbd958b63d6c97b4dab7bfdfa7", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -80,8 +80,7 @@ impl<'tcx> Visitor<'tcx> for CheckLiveDrops<'_, 'tcx> {\n         trace!(\"visit_terminator: terminator={:?} location={:?}\", terminator, location);\n \n         match &terminator.kind {\n-            mir::TerminatorKind::Drop { place: dropped_place, .. }\n-            | mir::TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n+            mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n                 let dropped_ty = dropped_place.ty(self.body, self.tcx).ty;\n                 if !NeedsNonConstDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n                     // Instead of throwing a bug, we just return here. This is because we have to"}, {"sha": "148aff9be4b5b35d36704778d071a72324e8730e", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -222,18 +222,6 @@ where\n         // The effect of assignment to the return place in `TerminatorKind::Call` is not applied\n         // here; that occurs in `apply_call_return_effect`.\n \n-        if let mir::TerminatorKind::DropAndReplace { value, place, .. } = &terminator.kind {\n-            let qualif = qualifs::in_operand::<Q, _>(\n-                self.ccx,\n-                &mut |l| self.state.qualif.contains(l),\n-                value,\n-            );\n-\n-            if !place.is_indirect() {\n-                self.assign_qualif_direct(place, qualif);\n-            }\n-        }\n-\n         // We ignore borrow on drop because custom drop impls are not allowed in consts.\n         // FIXME: Reconsider if accounting for borrows in drops is necessary for const drop.\n "}, {"sha": "b83024cb6b9494b4e7300eb37738a140867e9289", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -835,18 +835,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n-            TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n-                    self.fail(\n-                        location,\n-                        \"`DropAndReplace` should have been removed during drop elaboration\",\n-                    );\n-                }\n-                self.check_edge(location, *target, EdgeKind::Normal);\n-                if let Some(unwind) = unwind {\n-                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n-                }\n-            }\n             TerminatorKind::Call { func, args, destination, target, cleanup, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n                 match func_ty.kind() {"}, {"sha": "e52610faf5af71a6cd9ea83e24bbfcdfa78d4ce4", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -265,7 +265,6 @@ pub fn terminator_kind_name(term: &Terminator<'_>) -> &'static str {\n         Return => \"Return\",\n         Unreachable => \"Unreachable\",\n         Drop { .. } => \"Drop\",\n-        DropAndReplace { .. } => \"DropAndReplace\",\n         Call { .. } => \"Call\",\n         Assert { .. } => \"Assert\",\n         Yield { .. } => \"Yield\","}, {"sha": "58c060db66003f4d6fa57b9dbf28831026961e01", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -133,7 +133,6 @@ pub enum AnalysisPhase {\n pub enum RuntimePhase {\n     /// In addition to the semantic changes, beginning with this phase, the following variants are\n     /// disallowed:\n-    /// * [`TerminatorKind::DropAndReplace`]\n     /// * [`TerminatorKind::Yield`]\n     /// * [`TerminatorKind::GeneratorDrop`]\n     /// * [`Rvalue::Aggregate`] for any `AggregateKind` except `Array`\n@@ -596,43 +595,6 @@ pub enum TerminatorKind<'tcx> {\n     /// > consider indirect assignments.\n     Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },\n \n-    /// Drops the place and assigns a new value to it.\n-    ///\n-    /// This first performs the exact same operation as the pre drop-elaboration `Drop` terminator;\n-    /// it then additionally assigns the `value` to the `place` as if by an assignment statement.\n-    /// This assignment occurs both in the unwind and the regular code paths. The semantics are best\n-    /// explained by the elaboration:\n-    ///\n-    /// ```ignore (MIR)\n-    /// BB0 {\n-    ///   DropAndReplace(P <- V, goto BB1, unwind BB2)\n-    /// }\n-    /// ```\n-    ///\n-    /// becomes\n-    ///\n-    /// ```ignore (MIR)\n-    /// BB0 {\n-    ///   Drop(P, goto BB1, unwind BB2)\n-    /// }\n-    /// BB1 {\n-    ///   // P is now uninitialized\n-    ///   P <- V\n-    /// }\n-    /// BB2 {\n-    ///   // P is now uninitialized -- its dtor panicked\n-    ///   P <- V\n-    /// }\n-    /// ```\n-    ///\n-    /// Disallowed after drop elaboration.\n-    DropAndReplace {\n-        place: Place<'tcx>,\n-        value: Operand<'tcx>,\n-        target: BasicBlock,\n-        unwind: Option<BasicBlock>,\n-    },\n-\n     /// Roughly speaking, evaluates the `func` operand and the arguments, and starts execution of\n     /// the referred to function. The operand types must match the argument types of the function.\n     /// The return place type must match the return type. The type of the `func` operand must be"}, {"sha": "cd970270727f973f94ec95f1a183b6e6c81eaf42", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -148,7 +148,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Call { target: None, cleanup: Some(t), .. }\n             | Call { target: Some(t), cleanup: None, .. }\n             | Yield { resume: t, drop: None, .. }\n-            | DropAndReplace { target: t, unwind: None, .. }\n             | Drop { target: t, unwind: None, .. }\n             | Assert { target: t, cleanup: None, .. }\n             | FalseUnwind { real_target: t, unwind: None }\n@@ -158,7 +157,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             Call { target: Some(t), cleanup: Some(ref u), .. }\n             | Yield { resume: t, drop: Some(ref u), .. }\n-            | DropAndReplace { target: t, unwind: Some(ref u), .. }\n             | Drop { target: t, unwind: Some(ref u), .. }\n             | Assert { target: t, cleanup: Some(ref u), .. }\n             | FalseUnwind { real_target: t, unwind: Some(ref u) }\n@@ -188,7 +186,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Call { target: None, cleanup: Some(ref mut t), .. }\n             | Call { target: Some(ref mut t), cleanup: None, .. }\n             | Yield { resume: ref mut t, drop: None, .. }\n-            | DropAndReplace { target: ref mut t, unwind: None, .. }\n             | Drop { target: ref mut t, unwind: None, .. }\n             | Assert { target: ref mut t, cleanup: None, .. }\n             | FalseUnwind { real_target: ref mut t, unwind: None }\n@@ -198,7 +195,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             Call { target: Some(ref mut t), cleanup: Some(ref mut u), .. }\n             | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n-            | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }\n             | Drop { target: ref mut t, unwind: Some(ref mut u), .. }\n             | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }\n             | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }\n@@ -225,7 +221,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::FalseEdge { .. } => None,\n             TerminatorKind::Call { cleanup: ref unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref unwind, .. }\n-            | TerminatorKind::DropAndReplace { ref unwind, .. }\n             | TerminatorKind::Drop { ref unwind, .. }\n             | TerminatorKind::FalseUnwind { ref unwind, .. }\n             | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),\n@@ -245,7 +240,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::FalseEdge { .. } => None,\n             TerminatorKind::Call { cleanup: ref mut unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref mut unwind, .. }\n-            | TerminatorKind::DropAndReplace { ref mut unwind, .. }\n             | TerminatorKind::Drop { ref mut unwind, .. }\n             | TerminatorKind::FalseUnwind { ref mut unwind, .. }\n             | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),\n@@ -309,9 +303,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Yield { value, resume_arg, .. } => write!(fmt, \"{:?} = yield({:?})\", resume_arg, value),\n             Unreachable => write!(fmt, \"unreachable\"),\n             Drop { place, .. } => write!(fmt, \"drop({:?})\", place),\n-            DropAndReplace { place, value, .. } => {\n-                write!(fmt, \"replace({:?} <- {:?})\", place, value)\n-            }\n             Call { func, args, destination, .. } => {\n                 write!(fmt, \"{:?} = \", destination)?;\n                 write!(fmt, \"{:?}(\", func)?;\n@@ -403,10 +394,10 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Call { target: None, cleanup: None, .. } => vec![],\n             Yield { drop: Some(_), .. } => vec![\"resume\".into(), \"drop\".into()],\n             Yield { drop: None, .. } => vec![\"resume\".into()],\n-            DropAndReplace { unwind: None, .. } | Drop { unwind: None, .. } => {\n+            Drop { unwind: None, .. } => {\n                 vec![\"return\".into()]\n             }\n-            DropAndReplace { unwind: Some(_), .. } | Drop { unwind: Some(_), .. } => {\n+            Drop { unwind: Some(_), .. } => {\n                 vec![\"return\".into(), \"unwind\".into()]\n             }\n             Assert { cleanup: None, .. } => vec![\"\".into()],"}, {"sha": "14b18618aa8d8d57e43b55dcbf265052846349a5", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -495,20 +495,6 @@ macro_rules! make_mir_visitor {\n                         );\n                     }\n \n-                    TerminatorKind::DropAndReplace {\n-                        place,\n-                        value,\n-                        target: _,\n-                        unwind: _,\n-                    } => {\n-                        self.visit_place(\n-                            place,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Drop),\n-                            location\n-                        );\n-                        self.visit_operand(value, location);\n-                    }\n-\n                     TerminatorKind::Call {\n                         func,\n                         args,"}, {"sha": "42a948e78d76848e7dc5738fd59f794a50b2b6b1", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -58,14 +58,6 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                     unwind: None,\n                 })\n             },\n-            @call(\"mir_drop_and_replace\", args) => {\n-                Ok(TerminatorKind::DropAndReplace {\n-                    place: self.parse_place(args[0])?,\n-                    value: self.parse_operand(args[1])?,\n-                    target: self.parse_block(args[2])?,\n-                    unwind: None,\n-                })\n-            },\n             @call(\"mir_call\", args) => {\n                 let destination = self.parse_place(args[0])?;\n                 let target = self.parse_block(args[1])?;"}, {"sha": "4bc2c0ca791e6a305744ce47d866110538b30644", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -1072,7 +1072,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 TerminatorKind::Assert { .. }\n                     | TerminatorKind::Call { .. }\n                     | TerminatorKind::Drop { .. }\n-                    | TerminatorKind::DropAndReplace { .. }\n                     | TerminatorKind::FalseUnwind { .. }\n                     | TerminatorKind::InlineAsm { .. }\n             ),\n@@ -1432,8 +1431,7 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n                     *unwind = Some(to);\n                 }\n             }\n-            TerminatorKind::DropAndReplace { unwind, .. }\n-            | TerminatorKind::FalseUnwind { unwind, .. }\n+            TerminatorKind::FalseUnwind { unwind, .. }\n             | TerminatorKind::Call { cleanup: unwind, .. }\n             | TerminatorKind::Assert { cleanup: unwind, .. }\n             | TerminatorKind::InlineAsm { cleanup: unwind, .. } => {"}, {"sha": "f6db329fd7cfe9820f220bf5cd79337e8a62b20a", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -128,7 +128,6 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n             TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Goto { .. }"}, {"sha": "a40c38aa4c3334ed9e721cacbb6802c005f81030", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -480,7 +480,6 @@ impl Direction for Forward {\n \n             Assert { target, cleanup: unwind, expected: _, msg: _, cond: _ }\n             | Drop { target, unwind, place: _ }\n-            | DropAndReplace { target, unwind, value: _, place: _ }\n             | FalseUnwind { real_target: target, unwind } => {\n                 if let Some(unwind) = unwind {\n                     propagate(unwind, exit_state);"}, {"sha": "08fadfe68a17a2ad848cb81a6b11df415b0ab13a", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -111,8 +111,7 @@ where\n         self.super_terminator(terminator, location);\n \n         match terminator.kind {\n-            mir::TerminatorKind::Drop { place: dropped_place, .. }\n-            | mir::TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n+            mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n                 // Drop terminators may call custom drop glue (`Drop::drop`), which takes `&mut\n                 // self` as a parameter. In the general case, a drop impl could launder that\n                 // reference into the surrounding environment through a raw pointer, thus creating"}, {"sha": "60fd5169054d316bc13d3eb2f643d1853414c944", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -202,7 +202,6 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             TerminatorKind::Abort\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop\n@@ -240,7 +239,6 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             | TerminatorKind::Abort\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop"}, {"sha": "fa62960eee0ffb7ff2455238211a8531ee94a142", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -392,11 +392,6 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 self.create_move_path(place);\n                 self.gather_init(place.as_ref(), InitKind::Deep);\n             }\n-            TerminatorKind::DropAndReplace { place, ref value, .. } => {\n-                self.create_move_path(place);\n-                self.gather_operand(value);\n-                self.gather_init(place.as_ref(), InitKind::Deep);\n-            }\n             TerminatorKind::Call {\n                 ref func,\n                 ref args,"}, {"sha": "4cb28aadbaf44327c6615d20fdc2d5d10350ac42", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -230,7 +230,7 @@ pub trait ValueAnalysis<'tcx> {\n             TerminatorKind::Drop { place, .. } => {\n                 state.flood_with(place.as_ref(), self.map(), Self::Value::bottom());\n             }\n-            TerminatorKind::DropAndReplace { .. } | TerminatorKind::Yield { .. } => {\n+            TerminatorKind::Yield { .. } => {\n                 // They would have an effect, but are not allowed in this phase.\n                 bug!(\"encountered disallowed terminator\");\n             }"}, {"sha": "893018e0d8e7370751e8da6155976339eaa02b85", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n                     };\n                     layout::fn_can_unwind(tcx, fn_def_id, sig.abi())\n                 }\n-                TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => {\n+                TerminatorKind::Drop { .. } => {\n                     tcx.sess.opts.unstable_opts.panic_in_drop == PanicStrategy::Unwind\n                         && layout::fn_can_unwind(tcx, None, Abi::Rust)\n                 }"}, {"sha": "896fcd9cdd6086a9aae2b3e1964e22f76b974c30", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -64,9 +64,6 @@ fn add_moves_for_packed_drops_patch<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>)\n             {\n                 add_move_for_packed_drop(tcx, body, &mut patch, terminator, loc, data.is_cleanup);\n             }\n-            TerminatorKind::DropAndReplace { .. } => {\n-                span_bug!(terminator.source_info.span, \"replace in AddMovesForPackedDrops\");\n-            }\n             _ => {}\n         }\n     }"}, {"sha": "916f2904dda809e40a5eaf6c6249c09669e61d70", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                     }\n \n                     // `Drop` is also a call, but it doesn't return anything so we are good.\n-                    TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => None,\n+                    TerminatorKind::Drop { .. } => None,\n                     // Not a block ending in a Call -> ignore.\n                     _ => None,\n                 }"}, {"sha": "ada55a4bf6db120ac4445207178cbd5e2b1194e9", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -55,7 +55,6 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::Assert { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort"}, {"sha": "9bc4b26db92ebd34a5fd6c4406cf5281479de17d", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -1007,7 +1007,6 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "77402b8737e24141149c55716448b0039b90ed78", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -686,7 +686,6 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "0e7dc171a5d0c456a64869012875d89e16e71f16", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -822,7 +822,6 @@ pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n         TerminatorKind::Return => \"Return\",\n         TerminatorKind::Unreachable => \"Unreachable\",\n         TerminatorKind::Drop { .. } => \"Drop\",\n-        TerminatorKind::DropAndReplace { .. } => \"DropAndReplace\",\n         TerminatorKind::Call { .. } => \"Call\",\n         TerminatorKind::Assert { .. } => \"Assert\",\n         TerminatorKind::Yield { .. } => \"Yield\","}, {"sha": "c03cacd8615e397a7f1550c69e339119ed88ea79", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -156,7 +156,6 @@ impl CoverageGraph {\n                 | TerminatorKind::Resume\n                 | TerminatorKind::Unreachable\n                 | TerminatorKind::Drop { .. }\n-                | TerminatorKind::DropAndReplace { .. }\n                 | TerminatorKind::Call { .. }\n                 | TerminatorKind::GeneratorDrop\n                 | TerminatorKind::Assert { .. }"}, {"sha": "d9f68f5d93acc47f8601b27b763f5ce8f7c8d855", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -850,7 +850,6 @@ pub(super) fn filtered_terminator_span(terminator: &Terminator<'_>) -> Option<Sp\n         TerminatorKind::Unreachable // Unreachable blocks are not connected to the MIR CFG\n         | TerminatorKind::Assert { .. }\n         | TerminatorKind::Drop { .. }\n-        | TerminatorKind::DropAndReplace { .. }\n         | TerminatorKind::SwitchInt { .. }\n         // For `FalseEdge`, only the `real` branch is taken, so it is similar to a `Goto`.\n         | TerminatorKind::FalseEdge { .. }"}, {"sha": "aded8039dc313522ca86f91b13aae7a1904c9857", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -86,7 +86,6 @@ impl<'tcx> MockBlocks<'tcx> {\n             TerminatorKind::Assert { ref mut target, .. }\n             | TerminatorKind::Call { target: Some(ref mut target), .. }\n             | TerminatorKind::Drop { ref mut target, .. }\n-            | TerminatorKind::DropAndReplace { ref mut target, .. }\n             | TerminatorKind::FalseEdge { real_target: ref mut target, .. }\n             | TerminatorKind::FalseUnwind { real_target: ref mut target, .. }\n             | TerminatorKind::Goto { ref mut target }\n@@ -184,7 +183,6 @@ fn debug_basic_blocks(mir_body: &Body<'_>) -> String {\n                     TerminatorKind::Assert { target, .. }\n                     | TerminatorKind::Call { target: Some(target), .. }\n                     | TerminatorKind::Drop { target, .. }\n-                    | TerminatorKind::DropAndReplace { target, .. }\n                     | TerminatorKind::FalseEdge { real_target: target, .. }\n                     | TerminatorKind::FalseUnwind { real_target: target, .. }\n                     | TerminatorKind::Goto { target }"}, {"sha": "3823b6201c3477685071998fff5805852bd66928", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -650,8 +650,7 @@ impl WriteInfo {\n             TerminatorKind::Drop { .. } => {\n                 // `Drop`s create a `&mut` and so are not considered\n             }\n-            TerminatorKind::DropAndReplace { .. }\n-            | TerminatorKind::Yield { .. }\n+            TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. } => {"}, {"sha": "3faccca823a576fd22a1512626d8c83ec1f0dc27", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 114, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -18,15 +18,14 @@ use rustc_span::{DesugaringKind, Span};\n use rustc_target::abi::VariantIdx;\n use std::fmt;\n \n-/// During MIR building, Drop and DropAndReplace terminators are inserted in every place where a drop may occur.\n+/// During MIR building, Drop terminators are inserted in every place where a drop may occur.\n /// However, in this phase, the presence of these terminators does not guarantee that a destructor will run,\n /// as the target of the drop may be uninitialized.\n /// In general, the compiler cannot determine at compile time whether a destructor will run or not.\n ///\n-/// At a high level, this pass refines Drop and DropAndReplace to only run the destructor if the\n+/// At a high level, this pass refines Drop to only run the destructor if the\n /// target is initialized. The way this is achievied is by inserting drop flags for every variable\n /// that may be dropped, and then using those flags to determine whether a destructor should run.\n-/// This pass also removes DropAndReplace, replacing it with a Drop paired with an assign statement.\n /// Once this is complete, Drop terminators in the MIR correspond to a call to the \"drop glue\" or\n /// \"drop shim\" for the type of the dropped place.\n ///\n@@ -121,8 +120,7 @@ fn remove_dead_unwinds<'tcx>(\n         .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks.iter_enumerated() {\n         let place = match bb_data.terminator().kind {\n-            TerminatorKind::Drop { ref place, unwind: Some(_), .. }\n-            | TerminatorKind::DropAndReplace { ref place, unwind: Some(_), .. } => {\n+            TerminatorKind::Drop { ref place, unwind: Some(_), .. } => {\n                 und.derefer(place.as_ref(), body).unwrap_or(*place)\n             }\n             _ => continue,\n@@ -343,8 +341,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             }\n             let terminator = data.terminator();\n             let place = match terminator.kind {\n-                TerminatorKind::Drop { ref place, .. }\n-                | TerminatorKind::DropAndReplace { ref place, .. } => {\n+                TerminatorKind::Drop { ref place, .. } => {\n                     self.un_derefer.derefer(place.as_ref(), self.body).unwrap_or(*place)\n                 }\n                 _ => continue,\n@@ -441,103 +438,11 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                         }\n                     }\n                 }\n-                TerminatorKind::DropAndReplace { mut place, ref value, target, unwind } => {\n-                    assert!(!data.is_cleanup);\n-\n-                    if let Some(new_place) = self.un_derefer.derefer(place.as_ref(), self.body) {\n-                        place = new_place;\n-                    }\n-                    self.elaborate_replace(loc, place, value, target, unwind);\n-                }\n                 _ => continue,\n             }\n         }\n     }\n \n-    /// Elaborate a MIR `replace` terminator. This instruction\n-    /// is not directly handled by codegen, and therefore\n-    /// must be desugared.\n-    ///\n-    /// The desugaring drops the location if needed, and then writes\n-    /// the value (including setting the drop flag) over it in *both* arms.\n-    ///\n-    /// The `replace` terminator can also be called on places that\n-    /// are not tracked by elaboration (for example,\n-    /// `replace x[i] <- tmp0`). The borrow checker requires that\n-    /// these locations are initialized before the assignment,\n-    /// so we just generate an unconditional drop.\n-    fn elaborate_replace(\n-        &mut self,\n-        loc: Location,\n-        place: Place<'tcx>,\n-        value: &Operand<'tcx>,\n-        target: BasicBlock,\n-        unwind: Option<BasicBlock>,\n-    ) {\n-        let bb = loc.block;\n-        let data = &self.body[bb];\n-        let terminator = data.terminator();\n-        assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n-\n-        let assign = Statement {\n-            kind: StatementKind::Assign(Box::new((place, Rvalue::Use(value.clone())))),\n-            source_info: terminator.source_info,\n-        };\n-\n-        let unwind = unwind.unwrap_or_else(|| self.patch.resume_block());\n-        let unwind = self.patch.new_block(BasicBlockData {\n-            statements: vec![assign.clone()],\n-            terminator: Some(Terminator {\n-                kind: TerminatorKind::Goto { target: unwind },\n-                ..*terminator\n-            }),\n-            is_cleanup: true,\n-        });\n-\n-        let target = self.patch.new_block(BasicBlockData {\n-            statements: vec![assign],\n-            terminator: Some(Terminator { kind: TerminatorKind::Goto { target }, ..*terminator }),\n-            is_cleanup: false,\n-        });\n-\n-        match self.move_data().rev_lookup.find(place.as_ref()) {\n-            LookupResult::Exact(path) => {\n-                debug!(\"elaborate_drop_and_replace({:?}) - tracked {:?}\", terminator, path);\n-                self.init_data.seek_before(loc);\n-                elaborate_drop(\n-                    &mut Elaborator { ctxt: self },\n-                    terminator.source_info,\n-                    place,\n-                    path,\n-                    target,\n-                    Unwind::To(unwind),\n-                    bb,\n-                );\n-                on_all_children_bits(self.tcx, self.body, self.move_data(), path, |child| {\n-                    self.set_drop_flag(\n-                        Location { block: target, statement_index: 0 },\n-                        child,\n-                        DropFlagState::Present,\n-                    );\n-                    self.set_drop_flag(\n-                        Location { block: unwind, statement_index: 0 },\n-                        child,\n-                        DropFlagState::Present,\n-                    );\n-                });\n-            }\n-            LookupResult::Parent(parent) => {\n-                // drop and replace behind a pointer/array/whatever. The location\n-                // must be initialized.\n-                debug!(\"elaborate_drop_and_replace({:?}) - untracked {:?}\", terminator, parent);\n-                self.patch.patch_terminator(\n-                    bb,\n-                    TerminatorKind::Drop { place, target, unwind: Some(unwind) },\n-                );\n-            }\n-        }\n-    }\n-\n     fn constant_bool(&self, span: Span, val: bool) -> Rvalue<'tcx> {\n         Rvalue::Use(Operand::Constant(Box::new(Constant {\n             span,\n@@ -609,22 +514,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             debug!(\"drop_flags_for_locs({:?})\", data);\n             for i in 0..(data.statements.len() + 1) {\n                 debug!(\"drop_flag_for_locs: stmt {}\", i);\n-                let mut allow_initializations = true;\n                 if i == data.statements.len() {\n                     match data.terminator().kind {\n                         TerminatorKind::Drop { .. } => {\n                             // drop elaboration should handle that by itself\n                             continue;\n                         }\n-                        TerminatorKind::DropAndReplace { .. } => {\n-                            // this contains the move of the source and\n-                            // the initialization of the destination. We\n-                            // only want the former - the latter is handled\n-                            // by the elaboration code and must be done\n-                            // *after* the destination is dropped.\n-                            assert!(self.patch.is_patched(bb));\n-                            allow_initializations = false;\n-                        }\n                         TerminatorKind::Resume => {\n                             // It is possible for `Resume` to be patched\n                             // (in particular it can be patched to be replaced with\n@@ -641,11 +536,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                     self.body,\n                     self.env,\n                     loc,\n-                    |path, ds| {\n-                        if ds == DropFlagState::Absent || allow_initializations {\n-                            self.set_drop_flag(loc, path, ds)\n-                        }\n-                    },\n+                    |path, ds| self.set_drop_flag(loc, path, ds),\n                 )\n             }\n "}, {"sha": "f43657e435835f38070b5fca441271b2f5e3a8ec", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -1199,7 +1199,6 @@ fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n \n             // These may unwind.\n             TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::InlineAsm { .. }\n             | TerminatorKind::Assert { .. } => return true,\n@@ -1691,7 +1690,6 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | TerminatorKind::Return\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }"}, {"sha": "9cba8870f2377a6482a742f2930163c11818f4f4", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -453,9 +453,7 @@ impl<'tcx> Inliner<'tcx> {\n             checker.visit_basic_block_data(bb, blk);\n \n             let term = blk.terminator();\n-            if let TerminatorKind::Drop { ref place, target, unwind }\n-            | TerminatorKind::DropAndReplace { ref place, target, unwind, .. } = term.kind\n-            {\n+            if let TerminatorKind::Drop { ref place, target, unwind } = term.kind {\n                 work_list.push(target);\n \n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n@@ -815,8 +813,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         let tcx = self.tcx;\n         match terminator.kind {\n-            TerminatorKind::Drop { ref place, unwind, .. }\n-            | TerminatorKind::DropAndReplace { ref place, unwind, .. } => {\n+            TerminatorKind::Drop { ref place, unwind, .. } => {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = self.instance.subst_mir(tcx, &place.ty(self.callee_body, tcx).ty);\n                 if ty.needs_drop(tcx, self.param_env) {\n@@ -1120,8 +1117,7 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                     *tgt = self.map_block(*tgt);\n                 }\n             }\n-            TerminatorKind::Drop { ref mut target, ref mut unwind, .. }\n-            | TerminatorKind::DropAndReplace { ref mut target, ref mut unwind, .. } => {\n+            TerminatorKind::Drop { ref mut target, ref mut unwind, .. } => {\n                 *target = self.map_block(*target);\n                 *unwind = self.map_unwind(*unwind);\n             }"}, {"sha": "6c067f45299294bc564f13859eac2ae0aaaf6390", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -75,7 +75,6 @@ impl RemoveNoopLandingPads {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Assert { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::InlineAsm { .. } => false,\n         }"}, {"sha": "e72729b152e69b2214c3348492efa4130d96969a", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -1,5 +1,5 @@\n use rustc_index::bit_set::ChunkedBitSet;\n-use rustc_middle::mir::{Body, Field, Rvalue, Statement, StatementKind, TerminatorKind};\n+use rustc_middle::mir::{Body, Field, TerminatorKind};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, VariantDef};\n use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n@@ -8,7 +8,7 @@ use rustc_mir_dataflow::{self, move_path_children_matching, Analysis, MoveDataPa\n \n use crate::MirPass;\n \n-/// Removes `Drop` and `DropAndReplace` terminators whose target is known to be uninitialized at\n+/// Removes `Drop` terminators whose target is known to be uninitialized at\n /// that point.\n ///\n /// This is redundant with drop elaboration, but we need to do it prior to const-checking, and\n@@ -37,8 +37,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUninitDrops {\n         let mut to_remove = vec![];\n         for (bb, block) in body.basic_blocks.iter_enumerated() {\n             let terminator = block.terminator();\n-            let (TerminatorKind::Drop { place, .. } | TerminatorKind::DropAndReplace { place, .. })\n-                = &terminator.kind\n+            let TerminatorKind::Drop { place, .. } = &terminator.kind\n             else { continue };\n \n             maybe_inits.seek_before_primary_effect(body.terminator_loc(bb));\n@@ -64,24 +63,12 @@ impl<'tcx> MirPass<'tcx> for RemoveUninitDrops {\n         for bb in to_remove {\n             let block = &mut body.basic_blocks_mut()[bb];\n \n-            let (TerminatorKind::Drop { target, .. } | TerminatorKind::DropAndReplace { target, .. })\n+            let TerminatorKind::Drop { target, .. }\n                 = &block.terminator().kind\n             else { unreachable!() };\n \n             // Replace block terminator with `Goto`.\n-            let target = *target;\n-            let old_terminator_kind = std::mem::replace(\n-                &mut block.terminator_mut().kind,\n-                TerminatorKind::Goto { target },\n-            );\n-\n-            // If this is a `DropAndReplace`, we need to emulate the assignment to the return place.\n-            if let TerminatorKind::DropAndReplace { place, value, .. } = old_terminator_kind {\n-                block.statements.push(Statement {\n-                    source_info: block.terminator().source_info,\n-                    kind: StatementKind::Assign(Box::new((place, Rvalue::Use(value)))),\n-                });\n-            }\n+            block.terminator_mut().kind = TerminatorKind::Goto { target: *target };\n         }\n     }\n }"}, {"sha": "c3f5b881ab8b22f430d7646a9bd911c8addb39cc", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -108,7 +108,6 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n                         // The following terminators are not allowed\n                         TerminatorKind::Resume\n                         | TerminatorKind::Drop { .. }\n-                        | TerminatorKind::DropAndReplace { .. }\n                         | TerminatorKind::Call { .. }\n                         | TerminatorKind::Assert { .. }\n                         | TerminatorKind::FalseUnwind { .. }\n@@ -170,7 +169,6 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Assert { .. }\n-            | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::Call { .. }"}, {"sha": "f529944acce63a7b142b5009f3dbf08f2815e7a6", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -808,8 +808,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 let callee_ty = self.monomorphize(callee_ty);\n                 visit_fn_use(self.tcx, callee_ty, true, source, &mut self.output)\n             }\n-            mir::TerminatorKind::Drop { ref place, .. }\n-            | mir::TerminatorKind::DropAndReplace { ref place, .. } => {\n+            mir::TerminatorKind::Drop { ref place, .. } => {\n                 let ty = place.ty(self.body, self.tcx).ty;\n                 let ty = self.monomorphize(ty);\n                 visit_drop_use(self.tcx, ty, true, source, self.output);"}, {"sha": "d2d9771bdce2eee6e85bcc70c8db11de97cf084a", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -227,7 +227,7 @@\n //! are no resume and abort terminators, and terminators that might unwind do not have any way to\n //! indicate the unwind block.\n //!\n-//!  - [`Goto`], [`Return`], [`Unreachable`], [`Drop`](Drop()), and [`DropAndReplace`] have associated functions.\n+//!  - [`Goto`], [`Return`], [`Unreachable`] and [`Drop`](Drop()) have associated functions.\n //!  - `match some_int_operand` becomes a `SwitchInt`. Each arm should be `literal => basic_block`\n //!     - The exception is the last arm, which must be `_ => basic_block` and corresponds to the\n //!       otherwise branch.\n@@ -259,7 +259,6 @@ define!(\"mir_return\", fn Return() -> BasicBlock);\n define!(\"mir_goto\", fn Goto(destination: BasicBlock) -> BasicBlock);\n define!(\"mir_unreachable\", fn Unreachable() -> BasicBlock);\n define!(\"mir_drop\", fn Drop<T>(place: T, goto: BasicBlock));\n-define!(\"mir_drop_and_replace\", fn DropAndReplace<T>(place: T, value: T, goto: BasicBlock));\n define!(\"mir_call\", fn Call<T>(place: T, goto: BasicBlock, call: T));\n define!(\"mir_storage_live\", fn StorageLive<T>(local: T));\n define!(\"mir_storage_dead\", fn StorageDead<T>(local: T));"}, {"sha": "c00800291dbd3074abc06e5f9e0cb3b761b9dd72", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -299,10 +299,6 @@ fn check_terminator<'tcx>(\n         | TerminatorKind::Unreachable => Ok(()),\n \n         TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, body),\n-        TerminatorKind::DropAndReplace { place, value, .. } => {\n-            check_place(tcx, *place, span, body)?;\n-            check_operand(tcx, value, span, body)\n-        },\n \n         TerminatorKind::SwitchInt { discr, targets: _ } => check_operand(tcx, discr, span, body),\n "}, {"sha": "ada78c0fc782eaa0e9d6b307c9a07f16598fc161", "filename": "tests/mir-opt/building/custom/terminators.drop_first.built.after.mir", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -4,10 +4,11 @@ fn drop_first(_1: WriteOnDrop<'_>, _2: WriteOnDrop<'_>) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:59: +0:59\n \n     bb0: {\n-        replace(_1 <- move _2) -> bb1;   // scope 0 at $DIR/terminators.rs:+3:13: +3:49\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/terminators.rs:+3:13: +3:30\n     }\n \n     bb1: {\n-        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+        _1 = move _2;                    // scope 0 at $DIR/terminators.rs:+7:13: +7:24\n+        return;                          // scope 0 at $DIR/terminators.rs:+8:13: +8:21\n     }\n }"}, {"sha": "f12405661685b6063a6dd42f664c269f34fc7658", "filename": "tests/mir-opt/building/custom/terminators.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d4e4d907047580f028c6ca7b36a82ef94d28d1/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs?ref=c5d4e4d907047580f028c6ca7b36a82ef94d28d1", "patch": "@@ -48,10 +48,11 @@ impl<'a> Drop for WriteOnDrop<'a> {\n fn drop_first<'a>(a: WriteOnDrop<'a>, b: WriteOnDrop<'a>) {\n     mir!(\n         {\n-            DropAndReplace(a, Move(b), retblock)\n+            Drop(a, retblock)\n         }\n \n         retblock = {\n+            a = Move(b);\n             Return()\n         }\n     )"}]}