{"sha": "77052090515c1bb2a00236b3a57cdd778e581c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MDUyMDkwNTE1YzFiYjJhMDAyMzZiM2E1N2NkZDc3OGU1ODFjOGM=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-13T11:44:42Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-13T11:45:38Z"}, "message": "Correctly infer - and ! using std::ops::{Neg,Not}", "tree": {"sha": "4ce2117829fda26c3bdbac26f73a4a196bfc4e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ce2117829fda26c3bdbac26f73a4a196bfc4e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77052090515c1bb2a00236b3a57cdd778e581c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77052090515c1bb2a00236b3a57cdd778e581c8c", "html_url": "https://github.com/rust-lang/rust/commit/77052090515c1bb2a00236b3a57cdd778e581c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77052090515c1bb2a00236b3a57cdd778e581c8c/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95dc2de8e979264e1c76ce5594e8a63547a7956e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95dc2de8e979264e1c76ce5594e8a63547a7956e", "html_url": "https://github.com/rust-lang/rust/commit/95dc2de8e979264e1c76ce5594e8a63547a7956e"}], "stats": {"total": 137, "additions": 114, "deletions": 23}, "files": [{"sha": "50f0cad94f2d3eb5e5abb63456d09a0d580cd917", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=77052090515c1bb2a00236b3a57cdd778e581c8c", "patch": "@@ -342,6 +342,14 @@ pub mod known {\n         )\n     }\n \n+    pub fn std_ops_neg() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::NEG_TYPE])\n+    }\n+\n+    pub fn std_ops_not() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::NOT_TYPE])\n+    }\n+\n     pub fn std_result_result() -> Path {\n         Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::RESULT, name::RESULT_TYPE])\n     }"}, {"sha": "9e68dd98d702a866e6c650d28a17b743649d111b", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=77052090515c1bb2a00236b3a57cdd778e581c8c", "patch": "@@ -152,6 +152,8 @@ pub const RANGE_INCLUSIVE_TYPE: Name = Name::new_inline_ascii(b\"RangeInclusive\")\n pub const RANGE_TO_INCLUSIVE_TYPE: Name = Name::new_inline_ascii(b\"RangeToInclusive\");\n pub const RANGE_TO_TYPE: Name = Name::new_inline_ascii(b\"RangeTo\");\n pub const RANGE_TYPE: Name = Name::new_inline_ascii(b\"Range\");\n+pub const NEG_TYPE: Name = Name::new_inline_ascii(b\"Neg\");\n+pub const NOT_TYPE: Name = Name::new_inline_ascii(b\"Not\");\n \n // Builtin Macros\n pub const FILE_MACRO: Name = Name::new_inline_ascii(b\"file\");"}, {"sha": "a1201b3e4797cda91035db57ccb2302fc9446018", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=77052090515c1bb2a00236b3a57cdd778e581c8c", "patch": "@@ -36,8 +36,8 @@ use ra_prof::profile;\n use super::{\n     primitive::{FloatTy, IntTy},\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n-    ApplicationTy, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n-    Uncertain,\n+    ApplicationTy, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n+    TypeWalk, Uncertain,\n };\n use crate::{db::HirDatabase, infer::diagnostics::InferenceDiagnostic};\n \n@@ -433,6 +433,18 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.db.trait_data(trait_).associated_type_by_name(&name::OK_TYPE)\n     }\n \n+    fn resolve_ops_neg_output(&self) -> Option<TypeAliasId> {\n+        let path = known::std_ops_neg();\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        self.db.trait_data(trait_).associated_type_by_name(&name::OUTPUT_TYPE)\n+    }\n+\n+    fn resolve_ops_not_output(&self) -> Option<TypeAliasId> {\n+        let path = known::std_ops_not();\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        self.db.trait_data(trait_).associated_type_by_name(&name::OUTPUT_TYPE)\n+    }\n+\n     fn resolve_future_future_output(&self) -> Option<TypeAliasId> {\n         let path = known::std_future_future();\n         let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;"}, {"sha": "f8c00a7b4a391b7261f5e29259f52e744054c0f6", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=77052090515c1bb2a00236b3a57cdd778e581c8c", "patch": "@@ -332,31 +332,36 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     },\n                     UnaryOp::Neg => {\n                         match &inner_ty {\n-                            Ty::Apply(a_ty) => match a_ty.ctor {\n-                                TypeCtor::Int(Uncertain::Unknown)\n-                                | TypeCtor::Int(Uncertain::Known(IntTy {\n-                                    signedness: Signedness::Signed,\n-                                    ..\n-                                }))\n-                                | TypeCtor::Float(..) => inner_ty,\n-                                _ => Ty::Unknown,\n-                            },\n-                            Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => {\n-                                inner_ty\n-                            }\n-                            // FIXME: resolve ops::Neg trait\n-                            _ => Ty::Unknown,\n+                            // Fast path for builtins\n+                            Ty::Apply(ApplicationTy {\n+                                ctor:\n+                                    TypeCtor::Int(Uncertain::Known(IntTy {\n+                                        signedness: Signedness::Signed,\n+                                        ..\n+                                    })),\n+                                ..\n+                            })\n+                            | Ty::Apply(ApplicationTy {\n+                                ctor: TypeCtor::Int(Uncertain::Unknown),\n+                                ..\n+                            })\n+                            | Ty::Apply(ApplicationTy { ctor: TypeCtor::Float(_), .. })\n+                            | Ty::Infer(InferTy::IntVar(..))\n+                            | Ty::Infer(InferTy::FloatVar(..)) => inner_ty,\n+                            // Otherwise we resolve via the std::ops::Neg trait\n+                            _ => self\n+                                .resolve_associated_type(inner_ty, self.resolve_ops_neg_output()),\n                         }\n                     }\n                     UnaryOp::Not => {\n                         match &inner_ty {\n-                            Ty::Apply(a_ty) => match a_ty.ctor {\n-                                TypeCtor::Bool | TypeCtor::Int(_) => inner_ty,\n-                                _ => Ty::Unknown,\n-                            },\n-                            Ty::Infer(InferTy::IntVar(..)) => inner_ty,\n-                            // FIXME: resolve ops::Not trait for inner_ty\n-                            _ => Ty::Unknown,\n+                            // Fast path for builtins\n+                            Ty::Apply(ApplicationTy { ctor: TypeCtor::Bool, .. })\n+                            | Ty::Apply(ApplicationTy { ctor: TypeCtor::Int(_), .. })\n+                            | Ty::Infer(InferTy::IntVar(..)) => inner_ty,\n+                            // Otherwise we resolve via the std::ops::Not trait\n+                            _ => self\n+                                .resolve_associated_type(inner_ty, self.resolve_ops_not_output()),\n                         }\n                     }\n                 }"}, {"sha": "6139adb72e501b5b64d49aa159d501c224f32c8e", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77052090515c1bb2a00236b3a57cdd778e581c8c/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=77052090515c1bb2a00236b3a57cdd778e581c8c", "patch": "@@ -115,6 +115,70 @@ mod collections {\n     assert_eq!(\"&str\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_ops_neg() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+\n+struct Bar;\n+struct Foo;\n+\n+impl std::ops::Neg for Bar {\n+    type Output = Foo;\n+}\n+\n+fn test() {\n+    let a = Bar;\n+    let b = -a;\n+    b<|>;\n+}\n+\n+//- /std.rs crate:std\n+\n+#[prelude_import] use ops::*;\n+mod ops {\n+    pub trait Neg {\n+        type Output;\n+    }\n+}\n+\"#,\n+    );\n+    assert_eq!(\"Foo\", type_at_pos(&db, pos));\n+}\n+\n+#[test]\n+fn infer_ops_not() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+\n+struct Bar;\n+struct Foo;\n+\n+impl std::ops::Not for Bar {\n+    type Output = Foo;\n+}\n+\n+fn test() {\n+    let a = Bar;\n+    let b = !a;\n+    b<|>;\n+}\n+\n+//- /std.rs crate:std\n+\n+#[prelude_import] use ops::*;\n+mod ops {\n+    pub trait Not {\n+        type Output;\n+    }\n+}\n+\"#,\n+    );\n+    assert_eq!(\"Foo\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_from_bound_1() {\n     assert_snapshot!("}]}