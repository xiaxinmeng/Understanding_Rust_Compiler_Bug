{"sha": "a730970dffe84711b8be66c38080acf1b1109982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MzA5NzBkZmZlODQ3MTFiOGJlNjZjMzgwODBhY2YxYjExMDk5ODI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-24T13:15:15Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-24T13:19:05Z"}, "message": "Only call span.rust_2021() when necessary.", "tree": {"sha": "4f10b3f6759245e6e260b858dc62d2d030020a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f10b3f6759245e6e260b858dc62d2d030020a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a730970dffe84711b8be66c38080acf1b1109982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a730970dffe84711b8be66c38080acf1b1109982", "html_url": "https://github.com/rust-lang/rust/commit/a730970dffe84711b8be66c38080acf1b1109982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a730970dffe84711b8be66c38080acf1b1109982/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8098ac17064ee5a1d34ffe6bc8d35a9574f2bf6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8098ac17064ee5a1d34ffe6bc8d35a9574f2bf6e", "html_url": "https://github.com/rust-lang/rust/commit/8098ac17064ee5a1d34ffe6bc8d35a9574f2bf6e"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "f82269c4eee4fba573004d81eed7c67bf82b2ffc", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a730970dffe84711b8be66c38080acf1b1109982/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a730970dffe84711b8be66c38080acf1b1109982/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=a730970dffe84711b8be66c38080acf1b1109982", "patch": "@@ -12,25 +12,23 @@ use rustc_span::{Span, DUMMY_SP};\n \n pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n-    sp: Span,\n+    span: Span,\n     tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n-    let Assert { cond_expr, custom_message } = match parse_assert(cx, sp, tts) {\n+    let Assert { cond_expr, custom_message } = match parse_assert(cx, span, tts) {\n         Ok(assert) => assert,\n         Err(mut err) => {\n             err.emit();\n-            return DummyResult::any(sp);\n+            return DummyResult::any(span);\n         }\n     };\n \n-    let is_2021 = sp.rust_2021();\n-\n     // `core::panic` and `std::panic` are different macros, so we use call-site\n     // context to pick up whichever is currently in scope.\n-    let sp = cx.with_call_site_ctxt(sp);\n+    let sp = cx.with_call_site_ctxt(span);\n \n     let panic_call = if let Some(tokens) = custom_message {\n-        let path = if is_2021 {\n+        let path = if span.rust_2021() {\n             // On edition 2021, we always call `$crate::panic!()`.\n             Path {\n                 span: sp,"}]}