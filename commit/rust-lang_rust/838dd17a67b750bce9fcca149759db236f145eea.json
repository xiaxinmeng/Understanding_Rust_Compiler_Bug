{"sha": "838dd17a67b750bce9fcca149759db236f145eea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOGRkMTdhNjdiNzUwYmNlOWZjY2ExNDk3NTlkYjIzNmYxNDVlZWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-29T16:12:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-29T16:12:23Z"}, "message": "Don't read CG_CLIF_JIT from init_global_lock\n\nIn preparation to moving away from an env var", "tree": {"sha": "2bd1bfc8ccf55967ecd11554b58514d15a593e95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd1bfc8ccf55967ecd11554b58514d15a593e95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/838dd17a67b750bce9fcca149759db236f145eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/838dd17a67b750bce9fcca149759db236f145eea", "html_url": "https://github.com/rust-lang/rust/commit/838dd17a67b750bce9fcca149759db236f145eea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/838dd17a67b750bce9fcca149759db236f145eea/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787d078fb6bdc425e71b5277fd7312b46beab165", "url": "https://api.github.com/repos/rust-lang/rust/commits/787d078fb6bdc425e71b5277fd7312b46beab165", "html_url": "https://github.com/rust-lang/rust/commit/787d078fb6bdc425e71b5277fd7312b46beab165"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "f29e269c01ffcdc921f1ef5935075bcb6fc3f482", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/838dd17a67b750bce9fcca149759db236f145eea/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838dd17a67b750bce9fcca149759db236f145eea/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=838dd17a67b750bce9fcca149759db236f145eea", "patch": "@@ -10,10 +10,14 @@ use crate::prelude::*;\n pub static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n     libc::PTHREAD_MUTEX_INITIALIZER;\n \n-pub(crate) fn init_global_lock(module: &mut Module<impl Backend>, bcx: &mut FunctionBuilder<'_>) {\n-    if std::env::var(\"CG_CLIF_JIT\").is_ok() {\n+pub(crate) fn init_global_lock(\n+    module: &mut Module<impl Backend>,\n+    bcx: &mut FunctionBuilder<'_>,\n+    use_jit: bool,\n+) {\n+    if use_jit {\n         // When using JIT, dylibs won't find the __cg_clif_global_atomic_mutex data object defined here,\n-        // so instead define it in the cg_clif dylib.\n+        // so instead we define it in the cg_clif dylib.\n \n         return;\n     }\n@@ -80,7 +84,7 @@ pub(crate) fn init_global_lock_constructor(\n         let block = bcx.create_block();\n         bcx.switch_to_block(block);\n \n-        crate::atomic_shim::init_global_lock(module, &mut bcx);\n+        crate::atomic_shim::init_global_lock(module, &mut bcx, false);\n \n         bcx.ins().return_(&[]);\n         bcx.seal_all_blocks();"}, {"sha": "fc01398c40d9eb385a94bb66de674432f2d459fd", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838dd17a67b750bce9fcca149759db236f145eea/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838dd17a67b750bce9fcca149759db236f145eea/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=838dd17a67b750bce9fcca149759db236f145eea", "patch": "@@ -150,7 +150,7 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n     super::codegen_mono_items(&mut cx, mono_items);\n     let (mut module, global_asm, debug, mut unwind_context) =\n         tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context);\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context, false);\n \n     let codegen_result = emit_module(\n         tcx,"}, {"sha": "9f8426961ee740ed5808bf06c8ca8343d1c361fd", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838dd17a67b750bce9fcca149759db236f145eea/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838dd17a67b750bce9fcca149759db236f145eea/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=838dd17a67b750bce9fcca149759db236f145eea", "patch": "@@ -76,7 +76,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     if !global_asm.is_empty() {\n         tcx.sess.fatal(\"Global asm is not supported in JIT mode\");\n     }\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context);\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context, true);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n \n     jit_module.finalize_definitions();"}, {"sha": "c4b21dcecd333b74db57f04f777805426797e9bc", "filename": "src/main_shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/838dd17a67b750bce9fcca149759db236f145eea/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838dd17a67b750bce9fcca149759db236f145eea/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=838dd17a67b750bce9fcca149759db236f145eea", "patch": "@@ -9,6 +9,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     tcx: TyCtxt<'_>,\n     module: &mut Module<impl Backend + 'static>,\n     unwind_context: &mut UnwindContext<'_>,\n+    use_jit: bool,\n ) {\n     let (main_def_id, use_start_lang_item) = match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, entry_ty)) => (\n@@ -32,6 +33,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         unwind_context,\n         main_def_id,\n         use_start_lang_item,\n+        use_jit,\n     );\n \n     fn create_entry_fn(\n@@ -40,6 +42,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         unwind_context: &mut UnwindContext<'_>,\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n+        use_jit: bool,\n     ) {\n         let main_ret_ty = tcx.fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -83,7 +86,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             let arg_argc = bcx.append_block_param(block, m.target_config().pointer_type());\n             let arg_argv = bcx.append_block_param(block, m.target_config().pointer_type());\n \n-            crate::atomic_shim::init_global_lock(m, &mut bcx);\n+            crate::atomic_shim::init_global_lock(m, &mut bcx, use_jit);\n \n             let main_func_ref = m.declare_func_in_func(main_func_id, &mut bcx.func);\n "}]}