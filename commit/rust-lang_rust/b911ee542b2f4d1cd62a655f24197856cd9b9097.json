{"sha": "b911ee542b2f4d1cd62a655f24197856cd9b9097", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTFlZTU0MmIyZjRkMWNkNjJhNjU1ZjI0MTk3ODU2Y2Q5YjkwOTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T15:21:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T15:21:30Z"}, "message": "move macro to a separate module", "tree": {"sha": "c3c8a8962209a5abb8140e0395c366a2d4ab316c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c8a8962209a5abb8140e0395c366a2d4ab316c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b911ee542b2f4d1cd62a655f24197856cd9b9097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b911ee542b2f4d1cd62a655f24197856cd9b9097", "html_url": "https://github.com/rust-lang/rust/commit/b911ee542b2f4d1cd62a655f24197856cd9b9097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b911ee542b2f4d1cd62a655f24197856cd9b9097/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd33c89207f6dc621ef6e8c26ea288089448d811", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd33c89207f6dc621ef6e8c26ea288089448d811", "html_url": "https://github.com/rust-lang/rust/commit/fd33c89207f6dc621ef6e8c26ea288089448d811"}], "stats": {"total": 127, "additions": 67, "deletions": 60}, "files": [{"sha": "67b1c148241a420b78d8ffdb369ac3b8f36780de", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b911ee542b2f4d1cd62a655f24197856cd9b9097/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b911ee542b2f4d1cd62a655f24197856cd9b9097/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=b911ee542b2f4d1cd62a655f24197856cd9b9097", "patch": "@@ -18,6 +18,7 @@ pub mod mock_analysis;\n \n mod extend_selection;\n mod syntax_highlighting;\n+mod macros;\n \n use std::{fmt, sync::Arc};\n "}, {"sha": "c0dd49dc873794bb40a999ac0caa2e6e8d286f07", "filename": "crates/ra_analysis/src/macros.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b911ee542b2f4d1cd62a655f24197856cd9b9097/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b911ee542b2f4d1cd62a655f24197856cd9b9097/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmacros.rs?ref=b911ee542b2f4d1cd62a655f24197856cd9b9097", "patch": "@@ -0,0 +1,64 @@\n+/// Begining of macro expansion.\n+///\n+/// This code should be moved out of ra_analysis into hir (?) ideally.\n+use ra_syntax::{ast, AstNode, SourceFileNode, TextRange};\n+\n+use crate::{db::RootDatabase, FileId};\n+\n+pub(crate) fn expand(\n+    _db: &RootDatabase,\n+    _file_id: FileId,\n+    macro_call: ast::MacroCall,\n+) -> Option<MacroExpansion> {\n+    let path = macro_call.path()?;\n+    if path.qualifier().is_some() {\n+        return None;\n+    }\n+    let name_ref = path.segment()?.name_ref()?;\n+    if name_ref.text() != \"ctry\" {\n+        return None;\n+    }\n+\n+    let arg = macro_call.token_tree()?;\n+    let text = format!(\n+        r\"\n+        fn dummy() {{\n+            match {} {{\n+                None => return Ok(None),\n+                Some(it) => it,\n+            }}\n+        }}\",\n+        arg.syntax().text()\n+    );\n+    let file = SourceFileNode::parse(&text);\n+    let match_expr = file.syntax().descendants().find_map(ast::MatchExpr::cast)?;\n+    let match_arg = match_expr.expr()?;\n+    let ranges_map = vec![(arg.syntax().range(), match_arg.syntax().range())];\n+    let res = MacroExpansion {\n+        source_file: file,\n+        ranges_map,\n+    };\n+    Some(res)\n+}\n+\n+pub(crate) struct MacroExpansion {\n+    pub(crate) source_file: SourceFileNode,\n+    pub(crate) ranges_map: Vec<(TextRange, TextRange)>,\n+}\n+\n+impl MacroExpansion {\n+    pub(crate) fn source_file(&self) -> &SourceFileNode {\n+        &self.source_file\n+    }\n+    pub(crate) fn map_range_back(&self, tgt_range: TextRange) -> Option<TextRange> {\n+        for (s_range, t_range) in self.ranges_map.iter() {\n+            if tgt_range.is_subrange(&t_range) {\n+                let tgt_at_zero_range = tgt_range - tgt_range.start();\n+                let tgt_range_offset = tgt_range.start() - t_range.start();\n+                let src_range = tgt_at_zero_range + tgt_range_offset + s_range.start();\n+                return Some(src_range);\n+            }\n+        }\n+        None\n+    }\n+}"}, {"sha": "38219da71db5a4c264eec4fb527a21f8cd1a1747", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b911ee542b2f4d1cd62a655f24197856cd9b9097/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b911ee542b2f4d1cd62a655f24197856cd9b9097/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=b911ee542b2f4d1cd62a655f24197856cd9b9097", "patch": "@@ -1,4 +1,4 @@\n-use ra_syntax::{ast, AstNode, SourceFileNode, TextRange};\n+use ra_syntax::{ast, AstNode,};\n use ra_editor::HighlightedRange;\n use ra_db::SyntaxDatabase;\n \n@@ -15,7 +15,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<Hi\n         .descendants()\n         .filter_map(ast::MacroCall::cast)\n     {\n-        if let Some(exp) = expand(db, file_id, macro_call) {\n+        if let Some(exp) = crate::macros::expand(db, file_id, macro_call) {\n             let mapped_ranges = ra_editor::highlight(exp.source_file())\n                 .into_iter()\n                 .filter_map(|r| {\n@@ -32,64 +32,6 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<Hi\n     Ok(res)\n }\n \n-fn expand(\n-    _db: &RootDatabase,\n-    _file_id: FileId,\n-    macro_call: ast::MacroCall,\n-) -> Option<MacroExpansion> {\n-    let path = macro_call.path()?;\n-    if path.qualifier().is_some() {\n-        return None;\n-    }\n-    let name_ref = path.segment()?.name_ref()?;\n-    if name_ref.text() != \"ctry\" {\n-        return None;\n-    }\n-\n-    let arg = macro_call.token_tree()?;\n-    let text = format!(\n-        r\"\n-        fn dummy() {{\n-            match {} {{\n-                None => return Ok(None),\n-                Some(it) => it,\n-            }}\n-        }}\",\n-        arg.syntax().text()\n-    );\n-    let file = SourceFileNode::parse(&text);\n-    let match_expr = file.syntax().descendants().find_map(ast::MatchExpr::cast)?;\n-    let match_arg = match_expr.expr()?;\n-    let ranges_map = vec![(arg.syntax().range(), match_arg.syntax().range())];\n-    let res = MacroExpansion {\n-        source_file: file,\n-        ranges_map,\n-    };\n-    Some(res)\n-}\n-\n-struct MacroExpansion {\n-    source_file: SourceFileNode,\n-    ranges_map: Vec<(TextRange, TextRange)>,\n-}\n-\n-impl MacroExpansion {\n-    fn source_file(&self) -> &SourceFileNode {\n-        &self.source_file\n-    }\n-    fn map_range_back(&self, tgt_range: TextRange) -> Option<TextRange> {\n-        for (s_range, t_range) in self.ranges_map.iter() {\n-            if tgt_range.is_subrange(&t_range) {\n-                let tgt_at_zero_range = tgt_range - tgt_range.start();\n-                let tgt_range_offset = tgt_range.start() - t_range.start();\n-                let src_range = tgt_at_zero_range + tgt_range_offset + s_range.start();\n-                return Some(src_range);\n-            }\n-        }\n-        None\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::mock_analysis::single_file;"}]}