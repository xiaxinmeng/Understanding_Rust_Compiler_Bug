{"sha": "7c9bcc52668a8865f5ed71f1bc3dcead1367e148", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOWJjYzUyNjY4YTg4NjVmNWVkNzFmMWJjM2RjZWFkMTM2N2UxNDg=", "commit": {"author": {"name": "0xrgb", "email": "0xrgb@users.noreply.github.com", "date": "2018-11-19T06:59:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-19T06:59:21Z"}, "message": "Update any.rs documentation using keyword dyn", "tree": {"sha": "5b3b879facf1bb15dbee36d28f8d6c60bc137751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b3b879facf1bb15dbee36d28f8d6c60bc137751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c9bcc52668a8865f5ed71f1bc3dcead1367e148", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb8l9JCRBK7hj4Ov3rIwAAdHIIAJUFT5Qr7/s/NBwpFa0mvKfj\n8qZhMtL1wg5Zedp2uRFWF7OiaKA0+KRuCwL/2kxc/kqON0WKFPbIAbiXFMjF9TGs\n09mVgEEuaygbhKnPcercUPh1b9SZpnuOw1nuGn8m6cVMSZNz2Rx3BLCD5M45O+2M\n5uVqSWwfBN4ykyzmzKV85jI5dTOlDSKHW7B2vn7H1+3cCHk4sHE/VoGEJz4/J29Y\npeuyvWI0DCS3LIypH3gxW8iceMcsHuBsEzdEqgFRkSPxvjW/hRK3SjFi1soSuwNe\nsFarRcr1xCBjIVP1Qn7rWwxfpsogcu0d6Eap25JQAIIjpUHwSDKxoIJDO24qOQA=\n=ebuv\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b3b879facf1bb15dbee36d28f8d6c60bc137751\nparent 7e82eda000c8d4abbdaa76b3563cd77f938fc411\nauthor 0xrgb <0xrgb@users.noreply.github.com> 1542610761 +0900\ncommitter GitHub <noreply@github.com> 1542610761 +0900\n\nUpdate any.rs documentation using keyword dyn"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9bcc52668a8865f5ed71f1bc3dcead1367e148", "html_url": "https://github.com/rust-lang/rust/commit/7c9bcc52668a8865f5ed71f1bc3dcead1367e148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c9bcc52668a8865f5ed71f1bc3dcead1367e148/comments", "author": {"login": "0xrgb", "id": 4150203, "node_id": "MDQ6VXNlcjQxNTAyMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4150203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0xrgb", "html_url": "https://github.com/0xrgb", "followers_url": "https://api.github.com/users/0xrgb/followers", "following_url": "https://api.github.com/users/0xrgb/following{/other_user}", "gists_url": "https://api.github.com/users/0xrgb/gists{/gist_id}", "starred_url": "https://api.github.com/users/0xrgb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0xrgb/subscriptions", "organizations_url": "https://api.github.com/users/0xrgb/orgs", "repos_url": "https://api.github.com/users/0xrgb/repos", "events_url": "https://api.github.com/users/0xrgb/events{/privacy}", "received_events_url": "https://api.github.com/users/0xrgb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e82eda000c8d4abbdaa76b3563cd77f938fc411", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e82eda000c8d4abbdaa76b3563cd77f938fc411", "html_url": "https://github.com/rust-lang/rust/commit/7e82eda000c8d4abbdaa76b3563cd77f938fc411"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "c2113dfd2a06714e5224dc58a59585b4a9d5b74c", "filename": "src/libcore/any.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c9bcc52668a8865f5ed71f1bc3dcead1367e148/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9bcc52668a8865f5ed71f1bc3dcead1367e148/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=7c9bcc52668a8865f5ed71f1bc3dcead1367e148", "patch": "@@ -39,7 +39,7 @@\n //!\n //! // Logger function for any type that implements Debug.\n //! fn log<T: Any + Debug>(value: &T) {\n-//!     let value_any = value as &Any;\n+//!     let value_any = value as &dyn Any;\n //!\n //!     // try to convert our value to a String.  If successful, we want to\n //!     // output the String's length as well as its value.  If not, it's a\n@@ -95,7 +95,7 @@ pub trait Any: 'static {\n     ///\n     /// use std::any::{Any, TypeId};\n     ///\n-    /// fn is_string(s: &Any) -> bool {\n+    /// fn is_string(s: &dyn Any) -> bool {\n     ///     TypeId::of::<String>() == s.get_type_id()\n     /// }\n     ///\n@@ -151,7 +151,7 @@ impl dyn Any {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn is_string(s: &Any) {\n+    /// fn is_string(s: &dyn Any) {\n     ///     if s.is::<String>() {\n     ///         println!(\"It's a string!\");\n     ///     } else {\n@@ -185,7 +185,7 @@ impl dyn Any {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn print_if_string(s: &Any) {\n+    /// fn print_if_string(s: &dyn Any) {\n     ///     if let Some(string) = s.downcast_ref::<String>() {\n     ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n     ///     } else {\n@@ -218,7 +218,7 @@ impl dyn Any {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn modify_if_u32(s: &mut Any) {\n+    /// fn modify_if_u32(s: &mut dyn Any) {\n     ///     if let Some(num) = s.downcast_mut::<u32>() {\n     ///         *num = 42;\n     ///     }\n@@ -256,7 +256,7 @@ impl dyn Any+Send {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn is_string(s: &(Any + Send)) {\n+    /// fn is_string(s: &(dyn Any + Send)) {\n     ///     if s.is::<String>() {\n     ///         println!(\"It's a string!\");\n     ///     } else {\n@@ -282,7 +282,7 @@ impl dyn Any+Send {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn print_if_string(s: &(Any + Send)) {\n+    /// fn print_if_string(s: &(dyn Any + Send)) {\n     ///     if let Some(string) = s.downcast_ref::<String>() {\n     ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n     ///     } else {\n@@ -308,7 +308,7 @@ impl dyn Any+Send {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn modify_if_u32(s: &mut (Any + Send)) {\n+    /// fn modify_if_u32(s: &mut (dyn Any + Send)) {\n     ///     if let Some(num) = s.downcast_mut::<u32>() {\n     ///         *num = 42;\n     ///     }\n@@ -340,7 +340,7 @@ impl dyn Any+Send+Sync {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn is_string(s: &(Any + Send + Sync)) {\n+    /// fn is_string(s: &(dyn Any + Send + Sync)) {\n     ///     if s.is::<String>() {\n     ///         println!(\"It's a string!\");\n     ///     } else {\n@@ -366,7 +366,7 @@ impl dyn Any+Send+Sync {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn print_if_string(s: &(Any + Send + Sync)) {\n+    /// fn print_if_string(s: &(dyn Any + Send + Sync)) {\n     ///     if let Some(string) = s.downcast_ref::<String>() {\n     ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n     ///     } else {\n@@ -392,7 +392,7 @@ impl dyn Any+Send+Sync {\n     /// ```\n     /// use std::any::Any;\n     ///\n-    /// fn modify_if_u32(s: &mut (Any + Send + Sync)) {\n+    /// fn modify_if_u32(s: &mut (dyn Any + Send + Sync)) {\n     ///     if let Some(num) = s.downcast_mut::<u32>() {\n     ///         *num = 42;\n     ///     }"}]}