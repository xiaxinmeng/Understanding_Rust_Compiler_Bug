{"sha": "bf13fb7921bae57bcb153f7842afa2959aaf47a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMTNmYjc5MjFiYWU1N2JjYjE1M2Y3ODQyYWZhMjk1OWFhZjQ3YTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-20T01:52:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-20T01:52:18Z"}, "message": "rustc: Fix handling of the `self` region in method return types. Also stub some code to allow the regions of simple field access expressions to be determined.", "tree": {"sha": "62c978d2e170722f879f62cc29f60720b22c4690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c978d2e170722f879f62cc29f60720b22c4690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf13fb7921bae57bcb153f7842afa2959aaf47a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf13fb7921bae57bcb153f7842afa2959aaf47a1", "html_url": "https://github.com/rust-lang/rust/commit/bf13fb7921bae57bcb153f7842afa2959aaf47a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf13fb7921bae57bcb153f7842afa2959aaf47a1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12588a197bcba39a170d78ff02a2b4f8f73ae3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12588a197bcba39a170d78ff02a2b4f8f73ae3d", "html_url": "https://github.com/rust-lang/rust/commit/b12588a197bcba39a170d78ff02a2b4f8f73ae3d"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "528e8fb9500c651d38b72655499d95e81c75b19e", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bf13fb7921bae57bcb153f7842afa2959aaf47a1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf13fb7921bae57bcb153f7842afa2959aaf47a1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=bf13fb7921bae57bcb153f7842afa2959aaf47a1", "patch": "@@ -835,6 +835,18 @@ fn fixup_self_in_method_ty(cx: ty::ctxt, mty: ty::t, m_substs: [ty::t],\n     } else { mty }\n }\n \n+// Mangles an iface method ty to instantiate its `self` region.\n+fn fixup_self_region_in_method_ty(fcx: @fn_ctxt, mty: ty::t,\n+                                  self_expr: @ast::expr) -> ty::t {\n+    let self_region = region_of(fcx, self_expr);\n+    ty::fold_ty(fcx.ccx.tcx, ty::fm_rptr({|r|\n+        alt r {\n+            ty::re_self(_) { self_region }\n+            _ { r }\n+        }\n+    }), mty)\n+}\n+\n // Item collection - a pair of bootstrap passes:\n //\n // (1) Collect the IDs of all type items (typedefs) and store them in a table.\n@@ -1811,6 +1823,11 @@ fn lookup_method(fcx: @fn_ctxt, expr: @ast::expr, node_id: ast::node_id,\n                 tcx, fty, substs, option::get(self_sub));\n             write_ty(tcx, node_id, fty);\n         }\n+        if ty::type_has_rptrs(ty::ty_fn_ret(fty)) {\n+            let fty = ty::node_id_to_type(tcx, node_id);\n+            fty = fixup_self_region_in_method_ty(fcx, fty, expr);\n+            write_ty(tcx, node_id, fty);\n+        }\n         some(origin)\n       }\n       none { none }\n@@ -1982,9 +1999,13 @@ fn region_of(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n                 }\n             }\n         }\n-        ast::expr_field(base, _, _) | ast::expr_index(base, _) {\n-            fcx.ccx.tcx.sess.span_unimpl(expr.span, \"regions of field or \" +\n-                                         \"index operations\");\n+        ast::expr_field(base, _, _) {\n+            // FIXME: Insert borrowing!\n+            ret region_of(fcx, base);\n+        }\n+        ast::expr_index(base, _) {\n+            fcx.ccx.tcx.sess.span_unimpl(expr.span,\n+                                         \"regions of index operations\");\n         }\n         ast::expr_unary(ast::deref, base) {\n             let expr_ty = ty::expr_ty(fcx.ccx.tcx, base);"}]}