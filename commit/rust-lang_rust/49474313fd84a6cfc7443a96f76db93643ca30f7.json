{"sha": "49474313fd84a6cfc7443a96f76db93643ca30f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDc0MzEzZmQ4NGE2Y2ZjNzQ0M2E5NmY3NmRiOTM2NDNjYTMwZjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-18T22:38:59Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-18T22:38:59Z"}, "message": "Rollup merge of #30988 - bluss:doc-space-t-bound, r=apasel422\n\nFix spacing style of `T: Bound` in docs\n\nThe space between `T` and `Bound` is the typical style used in code and\nproduced by rustdoc's rendering. Fixed first in Reflect's docs and then\nI fixed all occurrences in docs I could find.", "tree": {"sha": "1769ba551a1fd7b19aa1c8b4a9ae8f0fea4a101e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1769ba551a1fd7b19aa1c8b4a9ae8f0fea4a101e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49474313fd84a6cfc7443a96f76db93643ca30f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49474313fd84a6cfc7443a96f76db93643ca30f7", "html_url": "https://github.com/rust-lang/rust/commit/49474313fd84a6cfc7443a96f76db93643ca30f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49474313fd84a6cfc7443a96f76db93643ca30f7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e8594bce2a17351aabddc3440f047212a464f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e8594bce2a17351aabddc3440f047212a464f8", "html_url": "https://github.com/rust-lang/rust/commit/f0e8594bce2a17351aabddc3440f047212a464f8"}, {"sha": "f4fac9b0fa55d253b438eccdf1794baace6c9efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fac9b0fa55d253b438eccdf1794baace6c9efe", "html_url": "https://github.com/rust-lang/rust/commit/f4fac9b0fa55d253b438eccdf1794baace6c9efe"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "4193c93c894c4fec4a97b19aa3a5ce1ccf1b0509", "filename": "src/doc/book/lifetimes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49474313fd84a6cfc7443a96f76db93643ca30f7/src%2Fdoc%2Fbook%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/49474313fd84a6cfc7443a96f76db93643ca30f7/src%2Fdoc%2Fbook%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flifetimes.md?ref=49474313fd84a6cfc7443a96f76db93643ca30f7", "patch": "@@ -353,8 +353,8 @@ fn frob<'a, 'b>(s: &'a str, t: &'b str) -> &str; // Expanded: Output lifetime is\n fn get_mut(&mut self) -> &mut T; // elided\n fn get_mut<'a>(&'a mut self) -> &'a mut T; // expanded\n \n-fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command; // elided\n-fn args<'a, 'b, T:ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command; // expanded\n+fn args<T: ToCStr>(&mut self, args: &[T]) -> &mut Command; // elided\n+fn args<'a, 'b, T: ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command; // expanded\n \n fn new(buf: &mut [u8]) -> BufWriter; // elided\n fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>; // expanded"}, {"sha": "bcd93a58d859a96d8807f7bd8b10baf6af1264a8", "filename": "src/doc/nomicon/lifetime-elision.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49474313fd84a6cfc7443a96f76db93643ca30f7/src%2Fdoc%2Fnomicon%2Flifetime-elision.md", "raw_url": "https://github.com/rust-lang/rust/raw/49474313fd84a6cfc7443a96f76db93643ca30f7/src%2Fdoc%2Fnomicon%2Flifetime-elision.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Flifetime-elision.md?ref=49474313fd84a6cfc7443a96f76db93643ca30f7", "patch": "@@ -55,8 +55,8 @@ fn frob(s: &str, t: &str) -> &str;                      // ILLEGAL\n fn get_mut(&mut self) -> &mut T;                        // elided\n fn get_mut<'a>(&'a mut self) -> &'a mut T;              // expanded\n \n-fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command                  // elided\n-fn args<'a, 'b, T:ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command // expanded\n+fn args<T: ToCStr>(&mut self, args: &[T]) -> &mut Command                  // elided\n+fn args<'a, 'b, T: ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command // expanded\n \n fn new(buf: &mut [u8]) -> BufWriter;                    // elided\n fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>          // expanded"}, {"sha": "1ed2a219fac3a5f03499d2a1532b90b064bc516a", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49474313fd84a6cfc7443a96f76db93643ca30f7/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49474313fd84a6cfc7443a96f76db93643ca30f7/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=49474313fd84a6cfc7443a96f76db93643ca30f7", "patch": "@@ -333,7 +333,7 @@ macro_rules! impls{\n /// use std::marker::PhantomData;\n ///\n /// # #[allow(dead_code)]\n-/// struct Slice<'a, T:'a> {\n+/// struct Slice<'a, T: 'a> {\n ///     start: *const T,\n ///     end: *const T,\n ///     phantom: PhantomData<&'a T>\n@@ -428,18 +428,18 @@ mod impls {\n /// use std::any::Any;\n ///\n /// # #[allow(dead_code)]\n-/// fn foo<T:Reflect+'static>(x: &T) {\n+/// fn foo<T: Reflect + 'static>(x: &T) {\n ///     let any: &Any = x;\n ///     if any.is::<u32>() { println!(\"u32\"); }\n /// }\n /// ```\n ///\n-/// Without the declaration `T:Reflect`, `foo` would not type check\n+/// Without the declaration `T: Reflect`, `foo` would not type check\n /// (note: as a matter of style, it would be preferable to write\n-/// `T:Any`, because `T:Any` implies `T:Reflect` and `T:'static`, but\n+/// `T: Any`, because `T: Any` implies `T: Reflect` and `T: 'static`, but\n /// we use `Reflect` here to show how it works). The `Reflect` bound\n /// thus serves to alert `foo`'s caller to the fact that `foo` may\n-/// behave differently depending on whether `T=u32` or not. In\n+/// behave differently depending on whether `T = u32` or not. In\n /// particular, thanks to the `Reflect` bound, callers know that a\n /// function declared like `fn bar<T>(...)` will always act in\n /// precisely the same way no matter what type `T` is supplied,"}]}