{"sha": "e8f3ed5db26981d2b5417a9de1d16f33770d8ff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZjNlZDVkYjI2OTgxZDJiNTQxN2E5ZGUxZDE2ZjMzNzcwZDhmZjQ=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-03-14T14:19:17Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-03-14T14:19:17Z"}, "message": "Add documentation", "tree": {"sha": "3041bd8ab09625c52b0a01726daf7d2636adeab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3041bd8ab09625c52b0a01726daf7d2636adeab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f3ed5db26981d2b5417a9de1d16f33770d8ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f3ed5db26981d2b5417a9de1d16f33770d8ff4", "html_url": "https://github.com/rust-lang/rust/commit/e8f3ed5db26981d2b5417a9de1d16f33770d8ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f3ed5db26981d2b5417a9de1d16f33770d8ff4/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bbd16de13c6c9d67e3d94455b3740bbc9a81055", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbd16de13c6c9d67e3d94455b3740bbc9a81055", "html_url": "https://github.com/rust-lang/rust/commit/2bbd16de13c6c9d67e3d94455b3740bbc9a81055"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "8c5c36c36998670facf552b8cbe95e4efd762fda", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8f3ed5db26981d2b5417a9de1d16f33770d8ff4/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f3ed5db26981d2b5417a9de1d16f33770d8ff4/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e8f3ed5db26981d2b5417a9de1d16f33770d8ff4", "patch": "@@ -245,6 +245,14 @@ pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;\n pub type TraitObligations<'tcx> = Vec<TraitObligation<'tcx>>;\n \n+/// The following types:\n+/// * `WhereClauseAtom`\n+/// * `DomainGoal`\n+/// * `Goal`\n+/// * `Clause`\n+/// are used for representing the trait system in the form of\n+/// logic programming clauses. They are part of the interface\n+/// for the chalk SLG solver.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum WhereClauseAtom<'tcx> {\n     Implemented(ty::TraitPredicate<'tcx>),\n@@ -270,6 +278,7 @@ pub enum QuantifierKind {\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Goal<'tcx> {\n+    // FIXME: use interned refs instead of `Box`\n     Implies(Vec<Clause<'tcx>>, Box<Goal<'tcx>>),\n     And(Box<Goal<'tcx>>, Box<Goal<'tcx>>),\n     Not(Box<Goal<'tcx>>),\n@@ -289,8 +298,11 @@ impl<'tcx> From<DomainGoal<'tcx>> for Clause<'tcx> {\n     }\n }\n \n+/// This matches the definition from Page 7 of \"A Proof Procedure for the Logic of Hereditary\n+/// Harrop Formulas\".\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Clause<'tcx> {\n+    // FIXME: again, use interned refs instead of `Box`\n     Implies(Vec<Goal<'tcx>>, DomainGoal<'tcx>),\n     DomainGoal(DomainGoal<'tcx>),\n     ForAll(Box<ty::Binder<Clause<'tcx>>>),"}, {"sha": "296ad18c480b6dcdb17115d0df948a6fc9e13b25", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8f3ed5db26981d2b5417a9de1d16f33770d8ff4/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f3ed5db26981d2b5417a9de1d16f33770d8ff4/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=e8f3ed5db26981d2b5417a9de1d16f33770d8ff4", "patch": "@@ -17,6 +17,7 @@ use syntax::ast;\n use rustc_data_structures::sync::Lrc;\n \n trait Lower<T> {\n+    /// Lower a rustc construction (e.g. `ty::TraitPredicate`) to a chalk-like type.\n     fn lower(&self) -> T;\n }\n \n@@ -56,6 +57,15 @@ impl<'tcx> Lower<DomainGoal<'tcx>> for ty::TypeOutlivesPredicate<'tcx> {\n     }\n }\n \n+/// `ty::Binder` is used for wrapping a rustc construction possibly containing generic\n+/// lifetimes, e.g. `for<'a> T: Fn(&'a i32)`. Instead of representing higher-ranked things\n+/// in that leaf-form (i.e. `Holds(Implemented(Binder<TraitPredicate>))` in the previous\n+/// example), we model them with quantified goals, e.g. as for the previous example:\n+/// `forall<'a> { T: Fn(&'a i32) }` which corresponds to something like\n+/// `Binder<Holds(Implemented(TraitPredicate))>`.\n+///\n+/// Also, if `self` does not contain generic lifetimes, we can safely drop the binder and we\n+/// can directly lower to a leaf goal instead of a quantified goal.\n impl<'tcx, T> Lower<Goal<'tcx>> for ty::Binder<T>\n     where T: Lower<DomainGoal<'tcx>> + ty::fold::TypeFoldable<'tcx> + Copy\n {\n@@ -95,6 +105,8 @@ crate fn program_clauses_for<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n     let item = tcx.hir.expect_item(node_id);\n     match item.node {\n         hir::ItemImpl(..) => program_clauses_for_impl(tcx, def_id),\n+\n+        // FIXME: other constructions e.g. traits, associated types...\n         _ => Lrc::new(vec![]),\n     }\n }"}]}