{"sha": "463d6680d17380228dfea509b19b1ff67d50eafc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2M2Q2NjgwZDE3MzgwMjI4ZGZlYTUwOWIxOWIxZmY2N2Q1MGVhZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-04T22:21:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-04T22:21:25Z"}, "message": "auto merge of #16110 : alexcrichton/rust/issue-15460, r=brson\n\nAs discovered in #15460, a particular #[link(kind = \"static\", ...)] line is not\r\nactually guaranteed to link the library at all. The reason for this is that if\r\nthe external library doesn't have any referenced symbols in the object generated\r\nby rustc, the entire library is dropped by the linker.\r\n\r\nFor dynamic native libraries, this is solved by passing -lfoo for all downstream\r\ncompilations unconditionally. For static libraries in rlibs this is solved\r\nbecause the entire archive is bundled in the rlib. The only situation in which\r\nthis was a problem was when a static native library was linked to a rust dynamic\r\nlibrary.\r\n\r\nThis commit brings the behavior of dylibs in line with rlibs by passing the\r\n--whole-archive flag to the linker when linking native libraries. On OSX, this\r\nuses the -force_load flag. This flag ensures that the entire archive is\r\nconsidered candidate for being linked into the final dynamic library.\r\n\r\nThis is a breaking change because if any static library is included twice in the\r\nsame compilation unit then the linker will start emitting errors about duplicate\r\ndefinitions now. The fix for this would involve only statically linking to a\r\nlibrary once.\r\n\r\nCloses #15460\r\n[breaking-change]", "tree": {"sha": "77a5a76521bd0cbb2c24a7ecf051aa7b23549e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a5a76521bd0cbb2c24a7ecf051aa7b23549e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/463d6680d17380228dfea509b19b1ff67d50eafc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/463d6680d17380228dfea509b19b1ff67d50eafc", "html_url": "https://github.com/rust-lang/rust/commit/463d6680d17380228dfea509b19b1ff67d50eafc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/463d6680d17380228dfea509b19b1ff67d50eafc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de20198aedb3c3419ee503755e04bcc198d3a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de20198aedb3c3419ee503755e04bcc198d3a94", "html_url": "https://github.com/rust-lang/rust/commit/9de20198aedb3c3419ee503755e04bcc198d3a94"}, {"sha": "1ae1461fbf59db8db5dd2fe11bbe22c6adeb1aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1461fbf59db8db5dd2fe11bbe22c6adeb1aed", "html_url": "https://github.com/rust-lang/rust/commit/1ae1461fbf59db8db5dd2fe11bbe22c6adeb1aed"}], "stats": {"total": 212, "additions": 168, "deletions": 44}, "files": [{"sha": "3175c516d8eff7dbd967f7e456a3fed98c7d31a6", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -136,6 +136,9 @@ mod imp {\n     use libc::{c_char, c_int, c_void, size_t};\n \n     #[link(name = \"jemalloc\", kind = \"static\")]\n+    #[cfg(not(test))]\n+    extern {}\n+\n     extern {\n         fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;\n         fn je_rallocx(ptr: *mut c_void, size: size_t,"}, {"sha": "6c605fc26286417c08ff31b6775fbacdbe4b5924", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 49, "deletions": 16, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use super::archive::{Archive, ArchiveBuilder, ArchiveConfig, METADATA_FILENAME};\n+use super::archive;\n use super::rpath;\n use super::rpath::RPathConfig;\n use super::svh::Svh;\n@@ -1597,29 +1598,61 @@ fn add_local_native_libraries(cmd: &mut Command, sess: &Session) {\n     // For those that support this, we ensure we pass the option if the library\n     // was flagged \"static\" (most defaults are dynamic) to ensure that if\n     // libfoo.a and libfoo.so both exist that the right one is chosen.\n-    let takes_hints = sess.targ_cfg.os != abi::OsMacos && sess.targ_cfg.os != abi::OsiOS;\n+    let takes_hints = sess.targ_cfg.os != abi::OsMacos &&\n+                      sess.targ_cfg.os != abi::OsiOS;\n+\n+    let libs = sess.cstore.get_used_libraries();\n+    let libs = libs.borrow();\n+\n+    let mut staticlibs = libs.iter().filter_map(|&(ref l, kind)| {\n+        if kind == cstore::NativeStatic {Some(l)} else {None}\n+    });\n+    let mut others = libs.iter().filter(|&&(_, kind)| {\n+        kind != cstore::NativeStatic\n+    });\n+\n+    // Platforms that take hints generally also support the --whole-archive\n+    // flag. We need to pass this flag when linking static native libraries to\n+    // ensure the entire library is included.\n+    //\n+    // For more details see #15460, but the gist is that the linker will strip\n+    // away any unused objects in the archive if we don't otherwise explicitly\n+    // reference them. This can occur for libraries which are just providing\n+    // bindings, libraries with generic functions, etc.\n+    if takes_hints {\n+        cmd.arg(\"-Wl,--whole-archive\").arg(\"-Wl,-Bstatic\");\n+    }\n+    let search_path = archive_search_paths(sess);\n+    for l in staticlibs {\n+        if takes_hints {\n+            cmd.arg(format!(\"-l{}\", l));\n+        } else {\n+            // -force_load is the OSX equivalent of --whole-archive, but it\n+            // involves passing the full path to the library to link.\n+            let lib = archive::find_library(l.as_slice(),\n+                                            sess.targ_cfg.os,\n+                                            search_path.as_slice(),\n+                                            &sess.diagnostic().handler);\n+            let mut v = b\"-Wl,-force_load,\".to_vec();\n+            v.push_all(lib.as_vec());\n+            cmd.arg(v.as_slice());\n+        }\n+    }\n+    if takes_hints {\n+        cmd.arg(\"-Wl,--no-whole-archive\").arg(\"-Wl,-Bdynamic\");\n+    }\n \n-    for &(ref l, kind) in sess.cstore.get_used_libraries().borrow().iter() {\n+    for &(ref l, kind) in others {\n         match kind {\n-            cstore::NativeUnknown | cstore::NativeStatic => {\n-                if takes_hints {\n-                    if kind == cstore::NativeStatic {\n-                        cmd.arg(\"-Wl,-Bstatic\");\n-                    } else {\n-                        cmd.arg(\"-Wl,-Bdynamic\");\n-                    }\n-                }\n-                cmd.arg(format!(\"-l{}\", *l));\n+            cstore::NativeUnknown => {\n+                cmd.arg(format!(\"-l{}\", l));\n             }\n             cstore::NativeFramework => {\n-                cmd.arg(\"-framework\");\n-                cmd.arg(l.as_slice());\n+                cmd.arg(\"-framework\").arg(l.as_slice());\n             }\n+            cstore::NativeStatic => unreachable!(),\n         }\n     }\n-    if takes_hints {\n-        cmd.arg(\"-Wl,-Bdynamic\");\n-    }\n }\n \n // # Rust Crate linking"}, {"sha": "85e0f2f10d8dcae4c0f6a0096c1ef696737a3ff5", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -95,6 +95,30 @@ fn run_ar(handler: &ErrorHandler, maybe_ar_prog: &Option<String>,\n     }\n }\n \n+pub fn find_library(name: &str, os: abi::Os, search_paths: &[Path],\n+                    handler: &ErrorHandler) -> Path {\n+    let (osprefix, osext) = match os {\n+        abi::OsWin32 => (\"\", \"lib\"), _ => (\"lib\", \"a\"),\n+    };\n+    // On Windows, static libraries sometimes show up as libfoo.a and other\n+    // times show up as foo.lib\n+    let oslibname = format!(\"{}{}.{}\", osprefix, name, osext);\n+    let unixlibname = format!(\"lib{}.a\", name);\n+\n+    for path in search_paths.iter() {\n+        debug!(\"looking for {} inside {}\", name, path.display());\n+        let test = path.join(oslibname.as_slice());\n+        if test.exists() { return test }\n+        if oslibname != unixlibname {\n+            let test = path.join(unixlibname.as_slice());\n+            if test.exists() { return test }\n+        }\n+    }\n+    handler.fatal(format!(\"could not find native static library `{}`, \\\n+                           perhaps an -L flag is missing?\",\n+                          name).as_slice());\n+}\n+\n impl<'a> Archive<'a> {\n     fn new(config: ArchiveConfig<'a>) -> Archive<'a> {\n         let ArchiveConfig { handler, dst, lib_search_paths, os, maybe_ar_prog } = config;\n@@ -153,7 +177,9 @@ impl<'a> ArchiveBuilder<'a> {\n     /// Adds all of the contents of a native library to this archive. This will\n     /// search in the relevant locations for a library named `name`.\n     pub fn add_native_library(&mut self, name: &str) -> io::IoResult<()> {\n-        let location = self.find_library(name);\n+        let location = find_library(name, self.archive.os,\n+                                    self.archive.lib_search_paths.as_slice(),\n+                                    self.archive.handler);\n         self.add_archive(&location, name, [])\n     }\n \n@@ -285,28 +311,5 @@ impl<'a> ArchiveBuilder<'a> {\n         }\n         Ok(())\n     }\n-\n-    fn find_library(&self, name: &str) -> Path {\n-        let (osprefix, osext) = match self.archive.os {\n-            abi::OsWin32 => (\"\", \"lib\"), _ => (\"lib\", \"a\"),\n-        };\n-        // On Windows, static libraries sometimes show up as libfoo.a and other\n-        // times show up as foo.lib\n-        let oslibname = format!(\"{}{}.{}\", osprefix, name, osext);\n-        let unixlibname = format!(\"lib{}.a\", name);\n-\n-        for path in self.archive.lib_search_paths.iter() {\n-            debug!(\"looking for {} inside {}\", name, path.display());\n-            let test = path.join(oslibname.as_slice());\n-            if test.exists() { return test }\n-            if oslibname != unixlibname {\n-                let test = path.join(unixlibname.as_slice());\n-                if test.exists() { return test }\n-            }\n-        }\n-        self.archive.handler.fatal(format!(\"could not find native static library `{}`, \\\n-                                            perhaps an -L flag is missing?\",\n-                                           name).as_slice());\n-    }\n }\n "}, {"sha": "52b02479f7fc7a08f8fe409c56b5d7d440895906", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -159,6 +159,9 @@ pub unsafe fn try(f: ||) -> ::core::result::Result<(), Box<Any + Send>> {\n     }\n \n     #[link(name = \"rustrt_native\", kind = \"static\")]\n+    #[cfg(not(test))]\n+    extern {}\n+\n     extern {\n         // Rust's try-catch\n         // When f(...) returns normally, the return value is null."}, {"sha": "c003e08740de35b81d23a2d4acbdff47bcf55b7c", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -415,6 +415,9 @@ mod imp {\n                           errnum: libc::c_int);\n         enum backtrace_state {}\n         #[link(name = \"backtrace\", kind = \"static\")]\n+        #[cfg(not(test))]\n+        extern {}\n+\n         extern {\n             fn backtrace_create_state(filename: *const libc::c_char,\n                                       threaded: libc::c_int,"}, {"sha": "4267d6020b245ef73ff6051300c4f36a12e6133f", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -15,6 +15,7 @@\n #![experimental]\n \n // All platforms need to link to rustrt\n+#[cfg(not(test))]\n #[link(name = \"rust_builtin\", kind = \"static\")]\n extern {}\n "}, {"sha": "f9277ba11f4763fe996964ecef581608cd2fbcb6", "filename": "src/test/run-make/extern-fn-with-union/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -12,7 +12,6 @@ extern crate testcrate;\n \n use std::mem;\n \n-#[link(name = \"test\", kind = \"static\")]\n extern {\n     fn give_back(tu: testcrate::TestUnion) -> u64;\n }"}, {"sha": "e6dd5c4c1af550f389877838e25899c64b5c3669", "filename": "src/test/run-make/issue-15460/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fissue-15460%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fissue-15460%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2FMakefile?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all: $(TMPDIR)/libfoo.a\n+\t$(RUSTC) foo.rs -C extra-filename=-383hf8\n+\t$(RUSTC) bar.rs\n+\t$(call RUN,bar)"}, {"sha": "46777f7fbd241ef49163ad73d540a01b46a9b05c", "filename": "src/test/run-make/issue-15460/bar.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fissue-15460%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fissue-15460%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Fbar.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+fn main() {\n+    unsafe { foo::foo() }\n+}"}, {"sha": "85e6cd8c3909a7e67c41750f5210b1463dd7a90c", "filename": "src/test/run-make/issue-15460/foo.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.c?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -0,0 +1 @@\n+void foo() {}"}, {"sha": "6917fa55579801da9e10c8fc76b3a83257303340", "filename": "src/test/run-make/issue-15460/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"dylib\"]\n+\n+#[link(name = \"foo\", kind = \"static\")]\n+extern {\n+    pub fn foo();\n+}"}, {"sha": "fdb6048dc4d527e0a639446b4ba4e2092fa55883", "filename": "src/test/run-make/no-duplicate-libs/Makefile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2FMakefile?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -1,6 +1,7 @@\n -include ../tools.mk\n \n-all: $(call STATICLIB,foo) $(call STATICLIB,bar)\n+all:\n+\t$(RUSTC) foo.rs\n+\t$(RUSTC) bar.rs\n \t$(RUSTC) main.rs\n \t$(call RUN,main)\n-"}, {"sha": "8b87b5f0f9a15b3f70fd846c105222595ecb3b2c", "filename": "src/test/run-make/no-duplicate-libs/bar.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![feature(lang_items)]\n+#![crate_type = \"dylib\"]\n+\n+extern crate libc;\n+\n+#[no_mangle]\n+pub extern fn bar() {}\n+\n+#[lang = \"stack_exhausted\"] fn stack_exhausted() {}\n+#[lang = \"eh_personality\"] fn eh_personality() {}"}, {"sha": "6f9537c1f449fcaaafd57be22920a5227a09ce6f", "filename": "src/test/run-make/no-duplicate-libs/foo.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![feature(lang_items)]\n+#![crate_type = \"dylib\"]\n+\n+extern crate libc;\n+\n+#[no_mangle]\n+pub extern fn foo() {}\n+\n+#[lang = \"stack_exhausted\"] fn stack_exhausted() {}\n+#[lang = \"eh_personality\"] fn eh_personality() {}"}, {"sha": "577efbd39e148b1d9c7fd1dab42b795873bb086c", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463d6680d17380228dfea509b19b1ff67d50eafc/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=463d6680d17380228dfea509b19b1ff67d50eafc", "patch": "@@ -22,7 +22,6 @@ mod rustrt1 {\n mod rustrt2 {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }"}]}