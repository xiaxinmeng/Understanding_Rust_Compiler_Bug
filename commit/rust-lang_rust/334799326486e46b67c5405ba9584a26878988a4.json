{"sha": "334799326486e46b67c5405ba9584a26878988a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNDc5OTMyNjQ4NmU0NmI2N2M1NDA1YmE5NTg0YTI2ODc4OTg4YTQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-23T15:39:26Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-24T23:49:47Z"}, "message": "Changes from feedback", "tree": {"sha": "30b4848c49319e66eaf68b86081f6fdf5c99455b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b4848c49319e66eaf68b86081f6fdf5c99455b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/334799326486e46b67c5405ba9584a26878988a4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/334799326486e46b67c5405ba9584a26878988a4", "html_url": "https://github.com/rust-lang/rust/commit/334799326486e46b67c5405ba9584a26878988a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/334799326486e46b67c5405ba9584a26878988a4/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/864c5016ae5492da8130bf3c1c2d5ef04b66efa7", "html_url": "https://github.com/rust-lang/rust/commit/864c5016ae5492da8130bf3c1c2d5ef04b66efa7"}], "stats": {"total": 143, "additions": 70, "deletions": 73}, "files": [{"sha": "2b1e28548f99fe1b47e62a1e445d62046ef29c37", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -1146,39 +1146,46 @@ fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n }\n \n fn check_unused_attribute(cx: &Context, attrs: &[ast::Attribute]) {\n-    for attr in attrs.iter() {\n-        // whitelist docs since rustdoc looks at them\n-        attr.check_name(\"automatically_derived\");\n-        attr.check_name(\"doc\");\n-\n-        // these are processed in trans, which happens after the lint pass\n-        attr.check_name(\"address_insignificant\");\n-        attr.check_name(\"cold\");\n-        attr.check_name(\"inline\");\n-        attr.check_name(\"link\");\n-        attr.check_name(\"link_name\");\n-        attr.check_name(\"link_section\");\n-        attr.check_name(\"no_builtins\");\n-        attr.check_name(\"no_mangle\");\n-        attr.check_name(\"no_split_stack\");\n-        attr.check_name(\"packed\");\n-        attr.check_name(\"static_assert\");\n-        attr.check_name(\"thread_local\");\n+    static ATTRIBUTE_WHITELIST: &'static [&'static str] = &'static [\n+        // FIXME: #14408 whitelist docs since rustdoc looks at them\n+        \"doc\",\n+\n+        // FIXME: #14406 these are processed in trans, which happens after the\n+        // lint pass\n+        \"address_insignificant\",\n+        \"cold\",\n+        \"inline\",\n+        \"link\",\n+        \"link_name\",\n+        \"link_section\",\n+        \"no_builtins\",\n+        \"no_mangle\",\n+        \"no_split_stack\",\n+        \"packed\",\n+        \"static_assert\",\n+        \"thread_local\",\n \n         // not used anywhere (!?) but apparently we want to keep them around\n-        attr.check_name(\"comment\");\n-        attr.check_name(\"desc\");\n-        attr.check_name(\"license\");\n-\n-        // these are only looked at on-demand so we can't guarantee they'll have\n-        // already been checked\n-        attr.check_name(\"deprecated\");\n-        attr.check_name(\"experimental\");\n-        attr.check_name(\"frozen\");\n-        attr.check_name(\"locked\");\n-        attr.check_name(\"must_use\");\n-        attr.check_name(\"stable\");\n-        attr.check_name(\"unstable\");\n+        \"comment\",\n+        \"desc\",\n+        \"license\",\n+\n+        // FIXME: #14407 these are only looked at on-demand so we can't\n+        // guarantee they'll have already been checked\n+        \"deprecated\",\n+        \"experimental\",\n+        \"frozen\",\n+        \"locked\",\n+        \"must_use\",\n+        \"stable\",\n+        \"unstable\",\n+    ];\n+    for attr in attrs.iter() {\n+        for &name in ATTRIBUTE_WHITELIST.iter() {\n+            if attr.check_name(name) {\n+                break;\n+            }\n+        }\n \n         if !attr::is_used(attr) {\n             cx.span_lint(UnusedAttribute, attr.span, \"unused attribute\");"}, {"sha": "527e851ae35ac6024f6ecf4baac67206452b0497", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -21,17 +21,20 @@ use parse::token;\n use crateid::CrateId;\n \n use collections::HashSet;\n+use collections::bitv::BitvSet;\n \n-local_data_key!(used_attrs: HashSet<AttrId>)\n+local_data_key!(used_attrs: BitvSet)\n \n pub fn mark_used(attr: &Attribute) {\n-    let mut used = used_attrs.replace(None).unwrap_or_else(|| HashSet::new());\n-    used.insert(attr.node.id);\n+    let mut used = used_attrs.replace(None).unwrap_or_else(|| BitvSet::new());\n+    let AttrId(id) = attr.node.id;\n+    used.insert(id);\n     used_attrs.replace(Some(used));\n }\n \n pub fn is_used(attr: &Attribute) -> bool {\n-    used_attrs.get().map_or(false, |used| used.contains(&attr.node.id))\n+    let AttrId(id) = attr.node.id;\n+    used_attrs.get().map_or(false, |used| used.contains(&id))\n }\n \n pub trait AttrMetaMethods {\n@@ -60,12 +63,11 @@ pub trait AttrMetaMethods {\n \n impl AttrMetaMethods for Attribute {\n     fn check_name(&self, name: &str) -> bool {\n-        if name == self.name().get() {\n+        let matches = name == self.name().get();\n+        if matches {\n             mark_used(self);\n-            true\n-        } else {\n-            false\n         }\n+        matches\n     }\n     fn name(&self) -> InternedString { self.meta().name() }\n     fn value_str(&self) -> Option<InternedString> {\n@@ -465,7 +467,6 @@ pub fn require_unique_names(diagnostic: &SpanHandler, metas: &[@MetaItem]) {\n pub fn find_repr_attr(diagnostic: &SpanHandler, attr: &Attribute, acc: ReprAttr)\n     -> ReprAttr {\n     let mut acc = acc;\n-    info!(\"{}\", ::print::pprust::attribute_to_str(attr));\n     match attr.node.value.node {\n         ast::MetaList(ref s, ref items) if s.equiv(&(\"repr\")) => {\n             mark_used(attr);"}, {"sha": "449feb3afbf96d1f906e42c49d5a7ee28db0e420", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -12,6 +12,7 @@ use abi;\n use ast::{P, Ident};\n use ast;\n use ast_util;\n+use attr;\n use codemap::{Span, respan, Spanned, DUMMY_SP};\n use ext::base::ExtCtxt;\n use ext::quote::rt::*;\n@@ -231,7 +232,7 @@ pub trait AstBuilder {\n                     generics: Generics) -> @ast::Item;\n     fn item_ty(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> @ast::Item;\n \n-    fn attribute(&self, id: AttrId, sp: Span, mi: @ast::MetaItem) -> ast::Attribute;\n+    fn attribute(&self, sp: Span, mi: @ast::MetaItem) -> ast::Attribute;\n \n     fn meta_word(&self, sp: Span, w: InternedString) -> @ast::MetaItem;\n     fn meta_list(&self,\n@@ -925,10 +926,9 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.item_ty_poly(span, name, ty, ast_util::empty_generics())\n     }\n \n-    fn attribute(&self, id: ast::AttrId, sp: Span, mi: @ast::MetaItem)\n-                 -> ast::Attribute {\n+    fn attribute(&self, sp: Span, mi: @ast::MetaItem) -> ast::Attribute {\n         respan(sp, ast::Attribute_ {\n-            id: id,\n+            id: attr::mk_attr_id(),\n             style: ast::AttrOuter,\n             value: mi,\n             is_sugared_doc: false,"}, {"sha": "89c94891b3380875057fb3c6b575eb4397671cc3", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use attr;\n use ast::{MetaItem, Item, Expr};\n use codemap::Span;\n use ext::base::ExtCtxt;\n@@ -22,7 +21,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              item: @Item,\n                              push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "92b3788c247443c53791a8eecbb6e8480ac52d09", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use ast::{MetaItem, Item, Expr};\n-use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -35,7 +34,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n     macro_rules! md (\n         ($name:expr, $f:ident) => { {\n             let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-            let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n+            let attrs = vec!(cx.attribute(span, inline));\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),"}, {"sha": "dd2f90cfa5fae9ac21880ad8a78513c6567d063d", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -10,7 +10,6 @@\n \n use ast;\n use ast::{MetaItem, Item, Expr};\n-use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -25,7 +24,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n     macro_rules! md (\n         ($name:expr, $op:expr, $equal:expr) => { {\n             let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-            let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n+            let attrs = vec!(cx.attribute(span, inline));\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),"}, {"sha": "b76caccffecc6095b168fcd4474987124f94bc51", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use ast::{MetaItem, Item, Expr};\n-use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -38,8 +37,8 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n     let hidden = cx.meta_word(span, InternedString::new(\"hidden\"));\n     let doc = cx.meta_list(span, InternedString::new(\"doc\"), vec!(hidden));\n-    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline),\n-                     cx.attribute(attr::mk_attr_id(), span, doc));\n+    let attrs = vec!(cx.attribute(span, inline),\n+                     cx.attribute(span, doc));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "3ca4f9e28626380da776cee61b04e8c3a0d70cf3", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -10,7 +10,6 @@\n \n use ast;\n use ast::{MetaItem, Item, Expr};\n-use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -25,7 +24,7 @@ pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n                                 item: @Item,\n                                 push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "c225906ed2babafcf00398b5b991b8423cd1fcfc", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use ast::{MetaItem, Item, Expr};\n-use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -22,7 +21,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                             item: @Item,\n                             push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "5f18193437e9a3b96d6ed71df60e62a62ffa65c3", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -428,10 +428,11 @@ impl<'a> TraitDef<'a> {\n                         self_ty_params.into_vec()), None);\n \n         let attr = cx.attribute(\n-            attr::mk_attr_id(),\n             self.span,\n             cx.meta_word(self.span,\n                          InternedString::new(\"automatically_derived\")));\n+        // Just mark it now since we know that it'll end up used downstream\n+        attr::mark_used(&attr);\n         let opt_trait_ref = Some(trait_ref);\n         let ident = ast_util::impl_pretty_name(&opt_trait_ref, self_type);\n         cx.item("}, {"sha": "3e6b8d522d4f9a6b425b55e275b0331f65973254", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -10,7 +10,6 @@\n \n use ast;\n use ast::{MetaItem, Item, Expr, MutMutable};\n-use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -38,7 +37,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n          Path::new(vec!(\"std\", \"hash\", \"sip\", \"SipState\")))\n     };\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let hash_trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "5066a395b415f073e0eba0478a918174d0b448a9", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -10,7 +10,6 @@\n \n use ast::{MetaItem, Item, Expr};\n use ast;\n-use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -23,7 +22,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                       item: @Item,\n                                       push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "449851dd3ea5913aecc03654a5d5f5f55958c801", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use ast::{MetaItem, Item, Expr};\n-use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -22,7 +21,7 @@ pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                             item: @Item,\n                             push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "ad4b798cfe5b85c66d505a16b2a8500131d09054", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -10,7 +10,6 @@\n \n use ast;\n use ast::P;\n-use attr;\n use codemap::{Span, respan};\n use ext::base::*;\n use ext::base;\n@@ -383,17 +382,15 @@ impl<'a, 'b> Context<'a, 'b> {\n                           .meta_word(self.fmtsp,\n                                      InternedString::new(\n                                          \"address_insignificant\"));\n-        let unnamed = self.ecx.attribute(attr::mk_attr_id(), self.fmtsp,\n-                                         unnamed);\n+        let unnamed = self.ecx.attribute(self.fmtsp, unnamed);\n \n         // Do not warn format string as dead code\n         let dead_code = self.ecx.meta_word(self.fmtsp,\n                                            InternedString::new(\"dead_code\"));\n         let allow_dead_code = self.ecx.meta_list(self.fmtsp,\n                                                  InternedString::new(\"allow\"),\n                                                  vec!(dead_code));\n-        let allow_dead_code = self.ecx.attribute(attr::mk_attr_id(), self.fmtsp,\n-                                                 allow_dead_code);\n+        let allow_dead_code = self.ecx.attribute(self.fmtsp, allow_dead_code);\n         return vec!(unnamed, allow_dead_code);\n     }\n "}, {"sha": "9dcc0877fa489783e449605e67f48ae26f0523cf", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334799326486e46b67c5405ba9584a26878988a4/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=334799326486e46b67c5405ba9584a26878988a4", "patch": "@@ -135,10 +135,10 @@ impl<'a> ParserAttr for Parser<'a> {\n                     // we need to get the position of this token before we bump.\n                     let Span { lo, hi, .. } = self.span;\n                     self.bump();\n-                    ::attr::mk_sugared_doc_attr(attr::mk_attr_id(),\n-                                                self.id_to_interned_str(s),\n-                                                lo,\n-                                                hi)\n+                    attr::mk_sugared_doc_attr(attr::mk_attr_id(),\n+                                              self.id_to_interned_str(s),\n+                                              lo,\n+                                              hi)\n                 }\n                 _ => {\n                     break;"}]}