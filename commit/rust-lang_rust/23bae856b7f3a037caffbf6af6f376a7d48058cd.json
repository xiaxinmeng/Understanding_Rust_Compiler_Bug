{"sha": "23bae856b7f3a037caffbf6af6f376a7d48058cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYmFlODU2YjdmM2EwMzdjYWZmYmY2YWY2ZjM3NmE3ZDQ4MDU4Y2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-16T03:40:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-16T03:46:44Z"}, "message": "std: Second-pass stabilization of `mem`\n\nThis commit takes a second pass through the `std::mem` module for stabilization.\nThe only remaining non-stable items in this module were `forget`, `transmute`,\n`copy_lifetime`, and `copy_lifetime_mut`.\n\nThe `forget` and `transmute` intrinsics themselves were marked `#[stable]` to\npropgate into the `core::mem` module so they would be marked stable.\n\nThe `copy_lifetime` functions were left `unstable`, but `Sized?` annotations\nwere added to the parameters to allow more general use with DSTs.\n\nThe `size_of_val`, `min_align_of_val`, and `align_of_val` functions would like\nto grow `Sized?` bounds, but this is a backwards compatible change that\ncurrently ICEs the compiler, so this change was not made at this time.\n\nFinally, the module itself was declared `#![stable]` in this pass.", "tree": {"sha": "0ad4f0b51e94c9a0b5e986e13c8de7d88957386a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad4f0b51e94c9a0b5e986e13c8de7d88957386a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bae856b7f3a037caffbf6af6f376a7d48058cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bae856b7f3a037caffbf6af6f376a7d48058cd", "html_url": "https://github.com/rust-lang/rust/commit/23bae856b7f3a037caffbf6af6f376a7d48058cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bae856b7f3a037caffbf6af6f376a7d48058cd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "html_url": "https://github.com/rust-lang/rust/commit/0669a432a2e09ad08886cb2138dbe9f5d681fb7f"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "e2afee9905d7f9d8f8dfcd0399694dff10bfd029", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23bae856b7f3a037caffbf6af6f376a7d48058cd/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bae856b7f3a037caffbf6af6f376a7d48058cd/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=23bae856b7f3a037caffbf6af6f376a7d48058cd", "patch": "@@ -217,6 +217,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// `forget` is unsafe because the caller is responsible for\n     /// ensuring the argument is deallocated already.\n+    #[stable]\n     pub fn forget<T>(_: T) -> ();\n \n     /// Unsafely transforms a value of one type into a value of another type.\n@@ -232,6 +233,7 @@ extern \"rust-intrinsic\" {\n     /// let v: &[u8] = unsafe { mem::transmute(\"L\") };\n     /// assert!(v == [76u8]);\n     /// ```\n+    #[stable]\n     pub fn transmute<T,U>(e: T) -> U;\n \n     /// Gives the address for the return value of the enclosing function."}, {"sha": "6747d12e0284ae34d31f905369a88454ba32cdda", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23bae856b7f3a037caffbf6af6f376a7d48058cd/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bae856b7f3a037caffbf6af6f376a7d48058cd/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=23bae856b7f3a037caffbf6af6f376a7d48058cd", "patch": "@@ -13,9 +13,13 @@\n //! This module contains functions for querying the size and alignment of\n //! types, initializing and manipulating memory.\n \n+#![stable]\n+\n+use kinds::Sized;\n use intrinsics;\n use ptr;\n \n+#[stable]\n pub use intrinsics::transmute;\n \n /// Moves a thing into the void.\n@@ -223,15 +227,17 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n #[inline]\n #[unstable = \"this function may be removed in the future due to its \\\n               questionable utility\"]\n-pub unsafe fn copy_lifetime<'a, S, T:'a>(_ptr: &'a S, ptr: &T) -> &'a T {\n+pub unsafe fn copy_lifetime<'a, Sized? S, Sized? T: 'a>(_ptr: &'a S,\n+                                                        ptr: &T) -> &'a T {\n     transmute(ptr)\n }\n \n /// Transforms lifetime of the second mutable pointer to match the first.\n #[inline]\n #[unstable = \"this function may be removed in the future due to its \\\n               questionable utility\"]\n-pub unsafe fn copy_mut_lifetime<'a, S, T:'a>(_ptr: &'a mut S,\n-                                          ptr: &mut T) -> &'a mut T {\n+pub unsafe fn copy_mut_lifetime<'a, Sized? S, Sized? T: 'a>(_ptr: &'a mut S,\n+                                                            ptr: &mut T)\n+                                                            -> &'a mut T {\n     transmute(ptr)\n }"}]}