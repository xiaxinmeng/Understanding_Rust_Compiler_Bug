{"sha": "9a6f2e655aa15bd600fc55949b17bbc51fc1565d", "node_id": "C_kwDOAAsO6NoAKDlhNmYyZTY1NWFhMTViZDYwMGZjNTU5NDliMTdiYmM1MWZjMTU2NWQ", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-24T21:58:20Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-10-02T19:08:35Z"}, "message": "Only register `WSACleanup` if `WSAStartup` is actually ever called", "tree": {"sha": "26e9c7600a1f65e73e661470d988147c1f2d39c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e9c7600a1f65e73e661470d988147c1f2d39c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6f2e655aa15bd600fc55949b17bbc51fc1565d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6f2e655aa15bd600fc55949b17bbc51fc1565d", "html_url": "https://github.com/rust-lang/rust/commit/9a6f2e655aa15bd600fc55949b17bbc51fc1565d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6f2e655aa15bd600fc55949b17bbc51fc1565d/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "url": "https://api.github.com/repos/rust-lang/rust/commits/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "html_url": "https://github.com/rust-lang/rust/commit/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "84a5a389e0db340c0e400615019eed575affe97b", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a6f2e655aa15bd600fc55949b17bbc51fc1565d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6f2e655aa15bd600fc55949b17bbc51fc1565d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=9a6f2e655aa15bd600fc55949b17bbc51fc1565d", "patch": "@@ -2,13 +2,13 @@\n \n use crate::cmp;\n use crate::io::{self, IoSlice, IoSliceMut, Read};\n+use crate::lazy::SyncOnceCell;\n use crate::mem;\n use crate::net::{Shutdown, SocketAddr};\n use crate::os::windows::io::{\n     AsRawSocket, AsSocket, BorrowedSocket, FromRawSocket, IntoRawSocket, OwnedSocket, RawSocket,\n };\n use crate::ptr;\n-use crate::sync::Once;\n use crate::sys;\n use crate::sys::c;\n use crate::sys_common::net;\n@@ -29,26 +29,31 @@ pub mod netc {\n \n pub struct Socket(OwnedSocket);\n \n-static INIT: Once = Once::new();\n+static WSA: SyncOnceCell<unsafe extern \"system\" fn() -> i32> = SyncOnceCell::new();\n \n /// Checks whether the Windows socket interface has been started already, and\n /// if not, starts it.\n pub fn init() {\n-    INIT.call_once(|| unsafe {\n+    let _ = WSA.get_or_init(|| unsafe {\n         let mut data: c::WSADATA = mem::zeroed();\n         let ret = c::WSAStartup(\n             0x202, // version 2.2\n             &mut data,\n         );\n         assert_eq!(ret, 0);\n+\n+        // Only register `WSACleanup` if `WSAStartup` is actually ever called.\n+        // Workaround to prevent linking to `WS2_32.dll` when no network functionality is used.\n+        // See issue #85441.\n+        c::WSACleanup\n     });\n }\n \n pub fn cleanup() {\n-    if INIT.is_completed() {\n-        // only close the socket interface if it has actually been started\n+    // only perform cleanup if network functionality was actually initialized\n+    if let Some(cleanup) = WSA.get() {\n         unsafe {\n-            c::WSACleanup();\n+            cleanup();\n         }\n     }\n }"}]}