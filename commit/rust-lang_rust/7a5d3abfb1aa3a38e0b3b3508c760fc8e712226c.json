{"sha": "7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNWQzYWJmYjFhYTNhMzhlMGIzYjM1MDhjNzYwZmM4ZTcxMjIyNmM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-07-06T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-07-26T10:25:02Z"}, "message": "Avoid writes without any data in `Write::write_all_vectored`\n\nPreviously, when non-empty sequence of empty IoSlices have been provided\nto `Write::write_all_vectored`, the buffers would be written as is with\n`Write::write_vectored` and subsequently the return value `Ok(0)` would\nbe misinterpreted as an error.\n\nAvoid writes without any data by advancing the buffers first. This\nmatches the documented behaviour of `Write::write_all_vectored`\nand is analogous to what happens in `Write::write_all`.", "tree": {"sha": "d3ecc55568eb086edafea073317a190475cdb310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ecc55568eb086edafea073317a190475cdb310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c", "html_url": "https://github.com/rust-lang/rust/commit/7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461707c5a119cc33c5d7df585ddb6cbec4a081bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/461707c5a119cc33c5d7df585ddb6cbec4a081bf", "html_url": "https://github.com/rust-lang/rust/commit/461707c5a119cc33c5d7df585ddb6cbec4a081bf"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "9eb54c2cc0044ae1dc8b4af9437bd977dcf4e83a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c", "patch": "@@ -251,7 +251,6 @@\n \n use crate::cmp;\n use crate::fmt;\n-use crate::mem;\n use crate::memchr;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n@@ -1435,12 +1434,15 @@ pub trait Write {\n     /// ```\n     #[unstable(feature = \"write_all_vectored\", issue = \"70436\")]\n     fn write_all_vectored(&mut self, mut bufs: &mut [IoSlice<'_>]) -> Result<()> {\n+        // Guarantee that bufs is empty if it contains no data,\n+        // to avoid calling write_vectored if there is no data to be written.\n+        bufs = IoSlice::advance(bufs, 0);\n         while !bufs.is_empty() {\n             match self.write_vectored(bufs) {\n                 Ok(0) => {\n                     return Err(Error::new(ErrorKind::WriteZero, \"failed to write whole buffer\"));\n                 }\n-                Ok(n) => bufs = IoSlice::advance(mem::take(&mut bufs), n),\n+                Ok(n) => bufs = IoSlice::advance(bufs, n),\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => return Err(e),\n             }\n@@ -2958,6 +2960,7 @@ mod tests {\n         #[rustfmt::skip] // Becomes unreadable otherwise.\n         let tests: Vec<(_, &'static [u8])> = vec![\n             (vec![], &[]),\n+            (vec![IoSlice::new(&[]), IoSlice::new(&[])], &[]),\n             (vec![IoSlice::new(&[1])], &[1]),\n             (vec![IoSlice::new(&[1, 2])], &[1, 2]),\n             (vec![IoSlice::new(&[1, 2, 3])], &[1, 2, 3]),"}]}