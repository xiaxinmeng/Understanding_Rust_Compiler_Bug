{"sha": "81a360fe9ac1ab3c0685f5b5ebd225189b0312d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYTM2MGZlOWFjMWFiM2MwNjg1ZjViNWViZDIyNTE4OWIwMzEyZDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-10T10:48:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T10:48:44Z"}, "message": "Rollup merge of #70843 - ssomers:btree_drain_filter_epilogue, r=Amanieu\n\nRemove the Ord bound that was plaguing drain_filter\n\nNow that  #70795 made it superfluous. Also removes superfluous lifetime specifiers (at least I think they are).", "tree": {"sha": "c8605231d0ced83ca2003bd4d8911026cac8af6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8605231d0ced83ca2003bd4d8911026cac8af6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81a360fe9ac1ab3c0685f5b5ebd225189b0312d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekE8MCRBK7hj4Ov3rIwAAdHIIAF4XVzKHFh001hNBFrTYbr7S\nm3jJtdelbFsrDITnYqf+RQU7N/NQu1/GzsUsde0SuBPUr7+94G0FHRazoBLIyODo\n+U9IfCwEmhb6SoXlHRFflteBaKtgaK0OJsPUPmVraZCms3Dck/p2KZRkPU93irfH\nZ8jRAPRbEX6YhuMPhqPefzOZmxUrgRcE3anxixE81dAQEYCfInPi471REDeTTUBv\nG3PmGPkQlsWLIwpOwGEc1mQxPr2BLbz5X0R92y1tNQ4LABx6mAi574aVw1tT8z0l\nNpKIP3sa5L4MMX8o9x1EmmbPotCw1zS7tsMCiAL7pckXD+a+8aPB/aBxKtfrWE8=\n=mrgr\n-----END PGP SIGNATURE-----\n", "payload": "tree c8605231d0ced83ca2003bd4d8911026cac8af6f\nparent dff5a113c22053ea76e7a08423aa17b7ab1e77e3\nparent 6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586515724 +0200\ncommitter GitHub <noreply@github.com> 1586515724 +0200\n\nRollup merge of #70843 - ssomers:btree_drain_filter_epilogue, r=Amanieu\n\nRemove the Ord bound that was plaguing drain_filter\n\nNow that  #70795 made it superfluous. Also removes superfluous lifetime specifiers (at least I think they are).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81a360fe9ac1ab3c0685f5b5ebd225189b0312d3", "html_url": "https://github.com/rust-lang/rust/commit/81a360fe9ac1ab3c0685f5b5ebd225189b0312d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81a360fe9ac1ab3c0685f5b5ebd225189b0312d3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dff5a113c22053ea76e7a08423aa17b7ab1e77e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff5a113c22053ea76e7a08423aa17b7ab1e77e3", "html_url": "https://github.com/rust-lang/rust/commit/dff5a113c22053ea76e7a08423aa17b7ab1e77e3"}, {"sha": "6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb", "html_url": "https://github.com/rust-lang/rust/commit/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "fc7e91ce47b52e9114cbd076065bcfc6ba32ada3", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/81a360fe9ac1ab3c0685f5b5ebd225189b0312d3/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a360fe9ac1ab3c0685f5b5ebd225189b0312d3/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=81a360fe9ac1ab3c0685f5b5ebd225189b0312d3", "patch": "@@ -1727,52 +1727,44 @@ impl<K, V> Clone for Values<'_, K, V> {\n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n pub struct DrainFilter<'a, K, V, F>\n where\n-    K: 'a + Ord, // This Ord bound should be removed before stabilization.\n+    K: 'a,\n     V: 'a,\n     F: 'a + FnMut(&K, &mut V) -> bool,\n {\n     pred: F,\n     inner: DrainFilterInner<'a, K, V>,\n }\n-pub(super) struct DrainFilterInner<'a, K, V>\n-where\n-    K: 'a + Ord,\n-    V: 'a,\n-{\n+pub(super) struct DrainFilterInner<'a, K: 'a, V: 'a> {\n     length: &'a mut usize,\n     cur_leaf_edge: Option<Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, K, V, F> Drop for DrainFilter<'a, K, V, F>\n+impl<K, V, F> Drop for DrainFilter<'_, K, V, F>\n where\n-    K: 'a + Ord,\n-    V: 'a,\n-    F: 'a + FnMut(&K, &mut V) -> bool,\n+    F: FnMut(&K, &mut V) -> bool,\n {\n     fn drop(&mut self) {\n         self.for_each(drop);\n     }\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, K, V, F> fmt::Debug for DrainFilter<'a, K, V, F>\n+impl<K, V, F> fmt::Debug for DrainFilter<'_, K, V, F>\n where\n-    K: 'a + fmt::Debug + Ord,\n-    V: 'a + fmt::Debug,\n-    F: 'a + FnMut(&K, &mut V) -> bool,\n+    K: fmt::Debug,\n+    V: fmt::Debug,\n+    F: FnMut(&K, &mut V) -> bool,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"DrainFilter\").field(&self.inner.peek()).finish()\n     }\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, K, V, F> Iterator for DrainFilter<'a, K, V, F>\n+impl<K, V, F> Iterator for DrainFilter<'_, K, V, F>\n where\n-    K: 'a + Ord,\n-    V: 'a,\n-    F: 'a + FnMut(&K, &mut V) -> bool,\n+    F: FnMut(&K, &mut V) -> bool,\n {\n     type Item = (K, V);\n \n@@ -1785,11 +1777,7 @@ where\n     }\n }\n \n-impl<'a, K, V> DrainFilterInner<'a, K, V>\n-where\n-    K: 'a + Ord,\n-    V: 'a,\n-{\n+impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n     /// Allow Debug implementations to predict the next element.\n     pub(super) fn peek(&self) -> Option<(&K, &V)> {\n         let edge = self.cur_leaf_edge.as_ref()?;\n@@ -1828,12 +1816,7 @@ where\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<K, V, F> FusedIterator for DrainFilter<'_, K, V, F>\n-where\n-    K: Ord,\n-    F: FnMut(&K, &mut V) -> bool,\n-{\n-}\n+impl<K, V, F> FusedIterator for DrainFilter<'_, K, V, F> where F: FnMut(&K, &mut V) -> bool {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> Iterator for Range<'a, K, V> {"}, {"sha": "9bf483f269f6e6785913dd199619def693dc69e6", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81a360fe9ac1ab3c0685f5b5ebd225189b0312d3/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a360fe9ac1ab3c0685f5b5ebd225189b0312d3/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=81a360fe9ac1ab3c0685f5b5ebd225189b0312d3", "patch": "@@ -1094,40 +1094,38 @@ impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n pub struct DrainFilter<'a, T, F>\n where\n-    T: 'a + Ord,\n+    T: 'a,\n     F: 'a + FnMut(&T) -> bool,\n {\n     pred: F,\n     inner: super::map::DrainFilterInner<'a, T, ()>,\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, T, F> Drop for DrainFilter<'a, T, F>\n+impl<T, F> Drop for DrainFilter<'_, T, F>\n where\n-    T: 'a + Ord,\n-    F: 'a + FnMut(&T) -> bool,\n+    F: FnMut(&T) -> bool,\n {\n     fn drop(&mut self) {\n         self.for_each(drop);\n     }\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, T, F> fmt::Debug for DrainFilter<'a, T, F>\n+impl<T, F> fmt::Debug for DrainFilter<'_, T, F>\n where\n-    T: 'a + Ord + fmt::Debug,\n-    F: 'a + FnMut(&T) -> bool,\n+    T: fmt::Debug,\n+    F: FnMut(&T) -> bool,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"DrainFilter\").field(&self.inner.peek().map(|(k, _)| k)).finish()\n     }\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, 'f, T, F> Iterator for DrainFilter<'a, T, F>\n+impl<'a, T, F> Iterator for DrainFilter<'_, T, F>\n where\n-    T: 'a + Ord,\n-    F: 'a + 'f + FnMut(&T) -> bool,\n+    F: 'a + FnMut(&T) -> bool,\n {\n     type Item = T;\n \n@@ -1143,12 +1141,7 @@ where\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, T, F> FusedIterator for DrainFilter<'a, T, F>\n-where\n-    T: 'a + Ord,\n-    F: 'a + FnMut(&T) -> bool,\n-{\n-}\n+impl<T, F> FusedIterator for DrainFilter<'_, T, F> where F: FnMut(&T) -> bool {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BTreeSet<T> {"}]}