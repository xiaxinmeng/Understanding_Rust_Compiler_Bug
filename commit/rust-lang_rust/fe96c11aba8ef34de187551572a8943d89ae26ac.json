{"sha": "fe96c11aba8ef34de187551572a8943d89ae26ac", "node_id": "C_kwDOAAsO6NoAKGZlOTZjMTFhYmE4ZWYzNGRlMTg3NTUxNTcyYTg5NDNkODlhZTI2YWM", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2023-01-16T12:06:34Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2023-01-16T12:06:34Z"}, "message": "fix #104440", "tree": {"sha": "b23d4596489934e91852367d12dca97270a1773b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b23d4596489934e91852367d12dca97270a1773b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe96c11aba8ef34de187551572a8943d89ae26ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe96c11aba8ef34de187551572a8943d89ae26ac", "html_url": "https://github.com/rust-lang/rust/commit/fe96c11aba8ef34de187551572a8943d89ae26ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe96c11aba8ef34de187551572a8943d89ae26ac/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d12412c90fbd974b1cf886e42a95c850d9ee45a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d12412c90fbd974b1cf886e42a95c850d9ee45a1", "html_url": "https://github.com/rust-lang/rust/commit/d12412c90fbd974b1cf886e42a95c850d9ee45a1"}], "stats": {"total": 199, "additions": 174, "deletions": 25}, "files": [{"sha": "8046cc21cea583eb73f15cb45228593a05139af6", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fe96c11aba8ef34de187551572a8943d89ae26ac/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe96c11aba8ef34de187551572a8943d89ae26ac/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=fe96c11aba8ef34de187551572a8943d89ae26ac", "patch": "@@ -825,34 +825,39 @@ pub trait LintContext: Sized {\n                     debug!(?param_span, ?use_span, ?deletion_span);\n                     db.span_label(param_span, \"this lifetime...\");\n                     db.span_label(use_span, \"...is used only here\");\n-                    let msg = \"elide the single-use lifetime\";\n-                    let (use_span, replace_lt) = if elide {\n-                        let use_span = sess.source_map().span_extend_while(\n-                            use_span,\n-                            char::is_whitespace,\n-                        ).unwrap_or(use_span);\n-                        (use_span, String::new())\n-                    } else {\n-                        (use_span, \"'_\".to_owned())\n-                    };\n-                    db.multipart_suggestion(\n-                        msg,\n-                        vec![(deletion_span, String::new()), (use_span, replace_lt)],\n-                        Applicability::MachineApplicable,\n-                    );\n+                    if let Some(deletion_span) = deletion_span {\n+                        let msg = \"elide the single-use lifetime\";\n+                        let (use_span, replace_lt) = if elide {\n+                            let use_span = sess.source_map().span_extend_while(\n+                                use_span,\n+                                char::is_whitespace,\n+                            ).unwrap_or(use_span);\n+                            (use_span, String::new())\n+                        } else {\n+                            (use_span, \"'_\".to_owned())\n+                        };\n+                        debug!(?deletion_span, ?use_span);\n+                        db.multipart_suggestion(\n+                            msg,\n+                            vec![(deletion_span, String::new()), (use_span, replace_lt)],\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 },\n                 BuiltinLintDiagnostics::SingleUseLifetime {\n                     param_span: _,\n                     use_span: None,\n                     deletion_span,\n                 } => {\n                     debug!(?deletion_span);\n-                    db.span_suggestion(\n-                        deletion_span,\n-                        \"elide the unused lifetime\",\n-                        \"\",\n-                        Applicability::MachineApplicable,\n-                    );\n+                    if let Some(deletion_span) = deletion_span {\n+                        db.span_suggestion(\n+                            deletion_span,\n+                            \"elide the unused lifetime\",\n+                            \"\",\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 },\n                 BuiltinLintDiagnostics::NamedArgumentUsedPositionally{ position_sp_to_replace, position_sp_for_msg, named_arg_sp, named_arg_name, is_formatting_arg} => {\n                     db.span_label(named_arg_sp, \"this named argument is referred to by position in formatting string\");"}, {"sha": "45e2467340bab9547dfe605fc3822ac4f20556d8", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe96c11aba8ef34de187551572a8943d89ae26ac/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe96c11aba8ef34de187551572a8943d89ae26ac/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=fe96c11aba8ef34de187551572a8943d89ae26ac", "patch": "@@ -502,7 +502,7 @@ pub enum BuiltinLintDiagnostics {\n         param_span: Span,\n         /// Span of the code that should be removed when eliding this lifetime.\n         /// This span should include leading or trailing comma.\n-        deletion_span: Span,\n+        deletion_span: Option<Span>,\n         /// Span of the single use, or None if the lifetime is never used.\n         /// If true, the lifetime will be fully elided.\n         use_span: Option<(Span, bool)>,"}, {"sha": "6d448433ee6dbc940bdcde726b3a9f25efbe8997", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fe96c11aba8ef34de187551572a8943d89ae26ac/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe96c11aba8ef34de187551572a8943d89ae26ac/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=fe96c11aba8ef34de187551572a8943d89ae26ac", "patch": "@@ -2188,15 +2188,31 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             let deletion_span = || {\n                 if params.len() == 1 {\n                     // if sole lifetime, remove the entire `<>` brackets\n-                    generics_span\n+                    Some(generics_span)\n                 } else if param_index == 0 {\n                     // if removing within `<>` brackets, we also want to\n                     // delete a leading or trailing comma as appropriate\n-                    param.span().to(params[param_index + 1].span().shrink_to_lo())\n+                    match (\n+                        param.span().find_ancestor_inside(generics_span),\n+                        params[param_index + 1].span().find_ancestor_inside(generics_span),\n+                    ) {\n+                        (Some(param_span), Some(next_param_span)) => {\n+                            Some(param_span.to(next_param_span.shrink_to_lo()))\n+                        }\n+                        _ => None,\n+                    }\n                 } else {\n                     // if removing within `<>` brackets, we also want to\n                     // delete a leading or trailing comma as appropriate\n-                    params[param_index - 1].span().shrink_to_hi().to(param.span())\n+                    match (\n+                        param.span().find_ancestor_inside(generics_span),\n+                        params[param_index - 1].span().find_ancestor_inside(generics_span),\n+                    ) {\n+                        (Some(param_span), Some(prev_param_span)) => {\n+                            Some(prev_param_span.shrink_to_hi().to(param_span))\n+                        }\n+                        _ => None,\n+                    }\n                 }\n             };\n             match use_set {"}, {"sha": "0795e95303a1e05023e8878c06531d513c5e2d1c", "filename": "tests/ui/single-use-lifetime/issue-104440.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/fe96c11aba8ef34de187551572a8943d89ae26ac/tests%2Fui%2Fsingle-use-lifetime%2Fissue-104440.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe96c11aba8ef34de187551572a8943d89ae26ac/tests%2Fui%2Fsingle-use-lifetime%2Fissue-104440.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle-use-lifetime%2Fissue-104440.rs?ref=fe96c11aba8ef34de187551572a8943d89ae26ac", "patch": "@@ -0,0 +1,100 @@\n+#![feature(decl_macro, rustc_attrs)]\n+#![deny(single_use_lifetimes)]\n+\n+mod type_params {\n+    macro m($T:ident) {\n+        fn f<$T: Clone, T: PartialEq>(t1: $T, t2: T) -> ($T, bool) {\n+            (t1.clone(), t2 == t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($T:ident) {\n+        fn g<$T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+        fn h<T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($T:ident) {\n+        fn j<$T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+        fn k<T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+    }\n+\n+    m!(T);\n+    n!(T);\n+    p!(T);\n+}\n+\n+mod lifetime_params {\n+    macro m($a:lifetime) {\n+        fn f<'b, 'c, $a: 'b, 'a: 'c>(t1: &$a(), t2: &'a ()) -> (&'b (), &'c ()) { //~ ERROR lifetime parameter `'a` only used once\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($a:lifetime) {\n+        fn g<$a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+        fn h<'a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($a:lifetime) {\n+        fn j<$a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+        fn k<'a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    m!('a); //~ ERROR lifetime parameter `'a` only used once\n+    n!('a);\n+    p!('a);\n+}\n+\n+mod const_params {\n+    macro m($C:ident) {\n+        fn f<const $C: usize, const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); $C], [(); C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($C:ident) {\n+        fn g<const $C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+        fn h<const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($C:ident) {\n+        fn j<const $C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+        fn k<const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    m!(C);\n+    n!(C);\n+    p!(C);\n+}\n+\n+fn main() {}"}, {"sha": "54ded31dcbe8936a998721c7d1ced3ec23889fb5", "filename": "tests/ui/single-use-lifetime/issue-104440.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fe96c11aba8ef34de187551572a8943d89ae26ac/tests%2Fui%2Fsingle-use-lifetime%2Fissue-104440.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe96c11aba8ef34de187551572a8943d89ae26ac/tests%2Fui%2Fsingle-use-lifetime%2Fissue-104440.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle-use-lifetime%2Fissue-104440.stderr?ref=fe96c11aba8ef34de187551572a8943d89ae26ac", "patch": "@@ -0,0 +1,28 @@\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/issue-104440.rs:63:8\n+   |\n+LL |     m!('a);\n+   |        ^^\n+   |        |\n+   |        this lifetime...\n+   |        ...is used only here\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-104440.rs:2:9\n+   |\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/issue-104440.rs:38:30\n+   |\n+LL |         fn f<'b, 'c, $a: 'b, 'a: 'c>(t1: &$a(), t2: &'a ()) -> (&'b (), &'c ()) {\n+   |                              ^^ this lifetime...     -- ...is used only here\n+...\n+LL |     m!('a);\n+   |     ------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}]}