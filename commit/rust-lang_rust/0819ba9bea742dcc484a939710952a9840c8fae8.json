{"sha": "0819ba9bea742dcc484a939710952a9840c8fae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MTliYTliZWE3NDJkY2M0ODRhOTM5NzEwOTUyYTk4NDBjOGZhZTg=", "commit": {"author": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-18T18:44:32Z"}, "committer": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-19T17:48:07Z"}, "message": "mir/mod.rs / visit.rs reverted back to using Local", "tree": {"sha": "10e266c9af670bfdbf5cf9de8094de2808592ad0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10e266c9af670bfdbf5cf9de8094de2808592ad0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0819ba9bea742dcc484a939710952a9840c8fae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0819ba9bea742dcc484a939710952a9840c8fae8", "html_url": "https://github.com/rust-lang/rust/commit/0819ba9bea742dcc484a939710952a9840c8fae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0819ba9bea742dcc484a939710952a9840c8fae8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d847ec1ab70e94deece40bd3b1c51787cca0126", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d847ec1ab70e94deece40bd3b1c51787cca0126", "html_url": "https://github.com/rust-lang/rust/commit/0d847ec1ab70e94deece40bd3b1c51787cca0126"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "e19d2b9f1812606c3a13d7836aa900b61e052f07", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0819ba9bea742dcc484a939710952a9840c8fae8", "patch": "@@ -52,7 +52,7 @@ pub mod traversal;\n pub mod visit;\n \n /// Types for locals\n-type LocalDecls<'tcx> = IndexVec<LocalWithRegion, LocalDecl<'tcx>>;\n+type LocalDecls<'tcx> = IndexVec<Local, LocalDecl<'tcx>>;\n \n pub trait HasLocalDecls<'tcx> {\n     fn local_decls(&self) -> &LocalDecls<'tcx>;\n@@ -141,7 +141,7 @@ impl<'tcx> Mir<'tcx> {\n         source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n         promoted: IndexVec<Promoted, Mir<'tcx>>,\n         yield_ty: Option<Ty<'tcx>>,\n-        local_decls: IndexVec<LocalWithRegion, LocalDecl<'tcx>>,\n+        local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n         arg_count: usize,\n         upvar_decls: Vec<UpvarDecl>,\n         span: Span,\n@@ -209,7 +209,7 @@ impl<'tcx> Mir<'tcx> {\n     }\n \n     #[inline]\n-    pub fn local_kind(&self, local: LocalWithRegion) -> LocalKind {\n+    pub fn local_kind(&self, local: Local) -> LocalKind {\n         let index = local.0 as usize;\n         if index == 0 {\n             debug_assert!(\n@@ -234,9 +234,9 @@ impl<'tcx> Mir<'tcx> {\n \n     /// Returns an iterator over all temporaries.\n     #[inline]\n-    pub fn temps_iter<'a>(&'a self) -> impl Iterator<Item = LocalWithRegion> + 'a {\n+    pub fn temps_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n-            let local = LocalWithRegion::new(index);\n+            let local = Local::new(index);\n             if self.local_decls[local].is_user_variable.is_some() {\n                 None\n             } else {\n@@ -247,9 +247,9 @@ impl<'tcx> Mir<'tcx> {\n \n     /// Returns an iterator over all user-declared locals.\n     #[inline]\n-    pub fn vars_iter<'a>(&'a self) -> impl Iterator<Item = LocalWithRegion> + 'a {\n+    pub fn vars_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n-            let local = LocalWithRegion::new(index);\n+            let local = Local::new(index);\n             if self.local_decls[local].is_user_variable.is_some() {\n                 Some(local)\n             } else {\n@@ -260,9 +260,9 @@ impl<'tcx> Mir<'tcx> {\n \n     /// Returns an iterator over all user-declared mutable arguments and locals.\n     #[inline]\n-    pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item = LocalWithRegion> + 'a {\n+    pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n         (1..self.local_decls.len()).filter_map(move |index| {\n-            let local = LocalWithRegion::new(index);\n+            let local = Local::new(index);\n             let decl = &self.local_decls[local];\n             if (decl.is_user_variable.is_some() || index < self.arg_count + 1)\n                 && decl.mutability == Mutability::Mut"}, {"sha": "758d887cd7b3ef59730f278a56c7007575ee9b65", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0819ba9bea742dcc484a939710952a9840c8fae8", "patch": "@@ -146,7 +146,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_user_assert_ty(&mut self,\n                                     c_ty: & $($mutability)* CanonicalTy<'tcx>,\n-                                    local: & $($mutability)* LocalWithRegion,\n+                                    local: & $($mutability)* Local,\n                                     location: Location) {\n                 self.super_user_assert_ty(c_ty, local, location);\n             }\n@@ -250,13 +250,13 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_local_decl(&mut self,\n-                                local: LocalWithRegion,\n+                                local: Local,\n                                 local_decl: & $($mutability)* LocalDecl<'tcx>) {\n                 self.super_local_decl(local, local_decl);\n             }\n \n             fn visit_local(&mut self,\n-                            _local: & $($mutability)* LocalWithRegion,\n+                            _local: & $($mutability)* Local,\n                             _context: PlaceContext<'tcx>,\n                             _location: Location) {\n             }\n@@ -632,7 +632,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_user_assert_ty(&mut self,\n                                     _c_ty: & $($mutability)* CanonicalTy<'tcx>,\n-                                    local: & $($mutability)* LocalWithRegion,\n+                                    local: & $($mutability)* Local,\n                                     location: Location) {\n                 self.visit_local(local, PlaceContext::Validate, location);\n             }\n@@ -708,7 +708,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_local_decl(&mut self,\n-                                local: LocalWithRegion,\n+                                local: Local,\n                                 local_decl: & $($mutability)* LocalDecl<'tcx>) {\n                 let LocalDecl {\n                     mutability: _,"}, {"sha": "e7f00b577b39fa583503926129adcd0c36033960", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0819ba9bea742dcc484a939710952a9840c8fae8", "patch": "@@ -278,7 +278,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     // Note that this set is expected to be small - only upvars from closures\n     // would have a chance of erroneously adding non-user-defined mutable vars\n     // to the set.\n-    let temporary_used_locals: FxHashSet<LocalWithRegion> = mbcx\n+    let temporary_used_locals: FxHashSet<Local> = mbcx\n         .used_mut\n         .iter()\n         .filter(|&local| !mbcx.mir.local_decls[*local].is_user_variable.is_some())"}, {"sha": "675c7f24e6532a8e2e63d8ea541eb2ba63103917", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=0819ba9bea742dcc484a939710952a9840c8fae8", "patch": "@@ -192,7 +192,7 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n     /// particular this takes `#[may_dangle]` into account.\n     fn add_drop_live_constraint(\n         &mut self,\n-        dropped_local: Local,\n+        dropped_local: LocalWithRegion,\n         dropped_ty: Ty<'tcx>,\n         location: Location,\n     ) {"}, {"sha": "c7513ac88163aa11bd9a2b88902552f61cb4747a", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0819ba9bea742dcc484a939710952a9840c8fae8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=0819ba9bea742dcc484a939710952a9840c8fae8", "patch": "@@ -37,34 +37,34 @@ impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n-    type Idx = LocalWithRegion;\n+    type Idx = Local;\n     fn name() -> &'static str { \"has_been_borrowed_locals\" }\n     fn bits_per_block(&self) -> usize {\n         self.mir.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _sets: &mut IdxSet<LocalWithRegion>) {\n+    fn start_block_effect(&self, _sets: &mut IdxSet<Local>) {\n         // Nothing is borrowed on function entry\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<LocalWithRegion>,\n+                        sets: &mut BlockSets<Local>,\n                         loc: Location) {\n         BorrowedLocalsVisitor {\n             sets,\n         }.visit_statement(loc.block, &self.mir[loc.block].statements[loc.statement_index], loc);\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<LocalWithRegion>,\n+                         sets: &mut BlockSets<Local>,\n                          loc: Location) {\n         BorrowedLocalsVisitor {\n             sets,\n         }.visit_terminator(loc.block, self.mir[loc.block].terminator(), loc);\n     }\n \n     fn propagate_call_return(&self,\n-                             _in_out: &mut IdxSet<LocalWithRegion>,\n+                             _in_out: &mut IdxSet<Local>,\n                              _call_bb: mir::BasicBlock,\n                              _dest_bb: mir::BasicBlock,\n                              _dest_place: &mir::Place) {\n@@ -87,10 +87,10 @@ impl<'a, 'tcx> InitialFlow for HaveBeenBorrowedLocals<'a, 'tcx> {\n }\n \n struct BorrowedLocalsVisitor<'b, 'c: 'b> {\n-    sets: &'b mut BlockSets<'c, LocalWithRegion>,\n+    sets: &'b mut BlockSets<'c, Local>,\n }\n \n-fn find_local<'tcx>(place: &Place<'tcx>) -> Option<LocalWithRegion> {\n+fn find_local<'tcx>(place: &Place<'tcx>) -> Option<Local> {\n     match *place {\n         Place::Local(l) => Some(l),\n         Place::Static(..) => None,"}]}