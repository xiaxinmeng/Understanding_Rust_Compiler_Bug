{"sha": "e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxODJhYzRiYmRlOTJhNGEyOWZjZGQzZmY3YzM5MDZiMzk0YjhjMTY=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-13T20:21:54Z"}, "committer": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-03-16T01:55:44Z"}, "message": "Actually use no or multiple operands properly.", "tree": {"sha": "6962db4302a6c2d25721b56247b6e321526f6e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6962db4302a6c2d25721b56247b6e321526f6e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16", "html_url": "https://github.com/rust-lang/rust/commit/e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ead7dad934cc361f8e5e489238031c987ecfc82", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ead7dad934cc361f8e5e489238031c987ecfc82", "html_url": "https://github.com/rust-lang/rust/commit/9ead7dad934cc361f8e5e489238031c987ecfc82"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "1d31dc4fb8acf1e7ff990d993c1b03763e7dd941", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16", "patch": "@@ -873,7 +873,7 @@ pub fn add_comment(bcx: block, text: &str) {\n }\n \n pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n-                     inputs: &[ValueRef], output: ValueRef,\n+                     inputs: &[ValueRef], output: TypeRef,\n                      volatile: bool, alignstack: bool,\n                      dia: AsmDialect) -> ValueRef {\n     unsafe {\n@@ -885,12 +885,12 @@ pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n                          else          { lib::llvm::False };\n \n         let argtys = do inputs.map |v| {\n-            io::println(fmt!(\"INPUT TYPE: %?\", val_str(cx.ccx().tn, *v)));\n+            debug!(\"Asm Input Type: %?\", val_str(cx.ccx().tn, *v));\n             val_ty(*v)\n         };\n \n-        io::println(fmt!(\"OUTPUT TYPE: %?\", val_str(cx.ccx().tn, output)));\n-        let llfty = T_fn(argtys, val_ty(output));\n+        debug!(\"Asm Output Type: %?\", ty_str(cx.ccx().tn, output));\n+        let llfty = T_fn(argtys, output);\n         let v = llvm::LLVMInlineAsm(llfty, asm, cons, volatile,\n                                     alignstack, dia as c_uint);\n "}, {"sha": "73cff97de95702f409891c7b61a9b55f7a022c4b", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e182ac4bbde92a4a29fcdd3ff7c3906b394b8c16", "patch": "@@ -629,10 +629,15 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n                 constraints += *clobs;\n             }\n \n-            io::println(fmt!(\"Constraints: %?\\n\", constraints));\n+            debug!(\"Asm Constraints: %?\", constraints);\n \n-            // TODO: Handle >1 outputs\n-            let output = outputs[0];\n+            let output = if outputs.len() == 0 {\n+                T_void()\n+            } else if outputs.len() == 1 {\n+                val_ty(outputs[0])\n+            } else {\n+                T_struct(outputs.map(|o| val_ty(*o)))\n+            };\n \n             let r = do str::as_c_str(*asm) |a| {\n                 do str::as_c_str(constraints) |c| {\n@@ -641,9 +646,16 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n                 }\n             };\n \n-            // TODO: Handle >1 outputs\n-            let op = PointerCast(bcx, aoutputs[0], T_ptr(val_ty(output)));\n-            Store(bcx, r, op);\n+            if outputs.len() == 1 {\n+                let op = PointerCast(bcx, aoutputs[0], T_ptr(val_ty(outputs[0])));\n+                Store(bcx, r, op);\n+            } else {\n+                for aoutputs.eachi |i, o| {\n+                    let v = ExtractValue(bcx, r, i);\n+                    let op = PointerCast(bcx, *o, T_ptr(val_ty(outputs[i])));\n+                    Store(bcx, v, op);\n+                }\n+            }\n \n             return bcx;\n         }"}]}