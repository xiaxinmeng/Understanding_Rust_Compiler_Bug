{"sha": "1b8ce5b37b597679796b3ebc57afd55af49449b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOGNlNWIzN2I1OTc2Nzk3OTZiM2ViYzU3YWZkNTVhZjQ5NDQ5YjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T14:58:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T15:52:02Z"}, "message": "Move impls to ItemScope", "tree": {"sha": "25851606a456296568234cd3b4f9a81ba3921a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25851606a456296568234cd3b4f9a81ba3921a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8ce5b37b597679796b3ebc57afd55af49449b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8ce5b37b597679796b3ebc57afd55af49449b0", "html_url": "https://github.com/rust-lang/rust/commit/1b8ce5b37b597679796b3ebc57afd55af49449b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8ce5b37b597679796b3ebc57afd55af49449b0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "030e540ad19046e2037981ec8e15a6800b86bbe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/030e540ad19046e2037981ec8e15a6800b86bbe9", "html_url": "https://github.com/rust-lang/rust/commit/030e540ad19046e2037981ec8e15a6800b86bbe9"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "fca3a295099df43da265eec1babd7330d36f0f44", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -221,7 +221,7 @@ impl Module {\n \n     pub fn impl_blocks(self, db: &impl DefDatabase) -> Vec<ImplBlock> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        def_map[self.id.local_id].impls.iter().copied().map(ImplBlock::from).collect()\n+        def_map[self.id.local_id].scope.impls().map(ImplBlock::from).collect()\n     }\n \n     pub(crate) fn with_module_id(self, module_id: LocalModuleId) -> Module {"}, {"sha": "403ba8b5787ed6678de23e7db2513a455ab3805d", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -80,7 +80,7 @@ impl ChildBySource for ModuleId {\n \n         module_data.scope.declarations().for_each(|item| add_module_def(db, &mut res, item));\n \n-        for &impl_ in module_data.impls.iter() {\n+        for &impl_ in module_data.scope.impls.iter() {\n             let src = impl_.lookup(db).source(db);\n             res[keys::IMPL].insert(src, impl_)\n         }"}, {"sha": "93e579bb0c2e761bb77c5db4c6c629f921cb1024", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -5,11 +5,12 @@ use hir_expand::name::Name;\n use once_cell::sync::Lazy;\n use rustc_hash::FxHashMap;\n \n-use crate::{per_ns::PerNs, BuiltinType, LocalImportId, MacroDefId, ModuleDefId, TraitId};\n+use crate::{per_ns::PerNs, BuiltinType, ImplId, LocalImportId, MacroDefId, ModuleDefId, TraitId};\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ItemScope {\n     pub(crate) items: FxHashMap<Name, Resolution>,\n+    pub(crate) impls: Vec<ImplId>,\n     /// Macros visible in current module in legacy textual scope\n     ///\n     /// For macros invoked by an unqualified identifier like `bar!()`, `legacy_macros` will be searched in first.\n@@ -59,6 +60,10 @@ impl ItemScope {\n             })\n     }\n \n+    pub fn impls(&self) -> impl Iterator<Item = ImplId> + ExactSizeIterator + '_ {\n+        self.impls.iter().copied()\n+    }\n+\n     /// Iterate over all module scoped macros\n     pub(crate) fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n         self.items"}, {"sha": "61b2488158b87d46afe77e45a6caeed16405f6a7", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -81,7 +81,7 @@ impl LangItems {\n         // Look for impl targets\n         let def_map = db.crate_def_map(module.krate);\n         let module_data = &def_map[module.local_id];\n-        for &impl_block in module_data.impls.iter() {\n+        for &impl_block in module_data.scope.impls.iter() {\n             self.collect_lang_item(db, impl_block, LangItemTarget::ImplBlockId)\n         }\n "}, {"sha": "5d4ca73a398855f3f07816bd2473c56e4fe880b5", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -73,7 +73,7 @@ use crate::{\n     nameres::{diagnostics::DefDiagnostic, path_resolution::ResolveMode},\n     path::ModPath,\n     per_ns::PerNs,\n-    AstId, ImplId, LocalModuleId, ModuleDefId, ModuleId,\n+    AstId, LocalModuleId, ModuleDefId, ModuleId,\n };\n \n /// Contains all top-level defs from a macro-expanded crate\n@@ -169,8 +169,6 @@ pub struct ModuleData {\n \n     /// Where does this module come from?\n     pub origin: ModuleOrigin,\n-\n-    pub impls: Vec<ImplId>,\n }\n \n impl CrateDefMap {"}, {"sha": "c4f6bcd95eb484cdbc5dbf224d1a9d7e397cf4d0", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -667,7 +667,7 @@ where\n                         let impl_id =\n                             ImplLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                                 .intern(self.def_collector.db);\n-                        self.def_collector.def_map.modules[self.module_id].impls.push(impl_id)\n+                        self.def_collector.def_map.modules[self.module_id].scope.impls.push(impl_id)\n                     }\n                 }\n             }"}, {"sha": "d104f5993fe3aecd71f29df183a3744a43a62fa0", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -610,7 +610,7 @@ fn expand_derive() {\n         struct Foo;\n         \",\n     );\n-    assert_eq!(map.modules[map.root].impls.len(), 1);\n+    assert_eq!(map.modules[map.root].scope.impls().len(), 1);\n }\n \n #[test]\n@@ -622,5 +622,5 @@ fn expand_multiple_derive() {\n         struct Foo;\n         \",\n     );\n-    assert_eq!(map.modules[map.root].impls.len(), 2);\n+    assert_eq!(map.modules[map.root].scope.impls().len(), 2);\n }"}, {"sha": "888dc311662758c9ee9eb229fc3e656985a08478", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -58,7 +58,7 @@ impl CrateImplBlocks {\n \n         let crate_def_map = db.crate_def_map(krate);\n         for (_module_id, module_data) in crate_def_map.modules.iter() {\n-            for &impl_id in module_data.impls.iter() {\n+            for impl_id in module_data.scope.impls() {\n                 match db.impl_trait(impl_id) {\n                     Some(tr) => {\n                         res.impls_by_trait.entry(tr.trait_).or_default().push(impl_id);"}, {"sha": "1a31b587bbc3b4bb5b1e5cc04afe2ddbe5a4a08f", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -98,7 +98,7 @@ impl TestDB {\n                     }\n                 }\n \n-                for &impl_id in crate_def_map[module_id].impls.iter() {\n+                for impl_id in crate_def_map[module_id].scope.impls() {\n                     let impl_data = self.impl_data(impl_id);\n                     for item in impl_data.items.iter() {\n                         if let AssocItemId::FunctionId(f) = item {"}, {"sha": "d447b4571832c5e9cf6a3b5ad07ba2b6cc9330ea", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8ce5b37b597679796b3ebc57afd55af49449b0/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=1b8ce5b37b597679796b3ebc57afd55af49449b0", "patch": "@@ -182,7 +182,7 @@ fn visit_module(\n             _ => (),\n         }\n     }\n-    for &impl_id in crate_def_map[module_id].impls.iter() {\n+    for impl_id in crate_def_map[module_id].scope.impls() {\n         let impl_data = db.impl_data(impl_id);\n         for &item in impl_data.items.iter() {\n             match item {"}]}