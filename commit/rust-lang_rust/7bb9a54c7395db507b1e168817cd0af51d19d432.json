{"sha": "7bb9a54c7395db507b1e168817cd0af51d19d432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYjlhNTRjNzM5NWRiNTA3YjFlMTY4ODE3Y2QwYWY1MWQxOWQ0MzI=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-10-28T06:57:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T18:05:43Z"}, "message": "Produce dyn libraries with proper names\n\nIssue #744", "tree": {"sha": "817e32f476cc275b8f6bf2e0d782cde52e35664a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/817e32f476cc275b8f6bf2e0d782cde52e35664a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bb9a54c7395db507b1e168817cd0af51d19d432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb9a54c7395db507b1e168817cd0af51d19d432", "html_url": "https://github.com/rust-lang/rust/commit/7bb9a54c7395db507b1e168817cd0af51d19d432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bb9a54c7395db507b1e168817cd0af51d19d432/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "html_url": "https://github.com/rust-lang/rust/commit/7dacccde94b1c6d0b9730c6d28c0495f5541a85a"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "b6b0449382b8f84c2b58fe151e0fb831a32b6cec", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7bb9a54c7395db507b1e168817cd0af51d19d432/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb9a54c7395db507b1e168817cd0af51d19d432/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=7bb9a54c7395db507b1e168817cd0af51d19d432", "patch": "@@ -502,17 +502,16 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n // If the user wants an exe generated we need to invoke\n // gcc to link the object file with some libs\n fn link_binary(sess: session::session,\n-               saved_out_filename: str) {\n+               obj_filename: str,\n+               out_filename: str) {\n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n     let stage: str = \"-L\" + sess.filesearch().get_target_lib_path();\n \n     let prog: str = \"gcc\";\n     // The invocations of gcc share some flags across platforms\n \n-    let gcc_args =\n-        [stage, \"-m32\", \"-o\", saved_out_filename,\n-         saved_out_filename + \".o\"];\n+    let gcc_args = [stage, \"-m32\", \"-o\", out_filename, obj_filename];\n     let lib_cmd;\n \n     let os = sess.get_targ_cfg().os;\n@@ -569,7 +568,7 @@ fn link_binary(sess: session::session,\n         // be rpathed\n         if sess.get_targ_cfg().os == session::os_macos {\n             gcc_args += [\"-Wl,-install_name,@rpath/\"\n-                        + fs::basename(saved_out_filename)];\n+                        + fs::basename(out_filename)];\n         }\n     } else {\n         // FIXME: why do we hardcode -lm?\n@@ -586,7 +585,7 @@ fn link_binary(sess: session::session,\n         gcc_args += [\"-lrt\", \"-ldl\"];\n     }\n \n-    gcc_args += rpath::get_rpath_flags(sess, saved_out_filename);\n+    gcc_args += rpath::get_rpath_flags(sess, out_filename);\n \n     log #fmt(\"gcc link args: %s\", str::connect(gcc_args, \" \"));\n     // We run 'gcc' here\n@@ -600,13 +599,13 @@ fn link_binary(sess: session::session,\n     // Clean up on Darwin\n \n     if sess.get_targ_cfg().os == session::os_macos {\n-        run::run_program(\"dsymutil\", [saved_out_filename]);\n+        run::run_program(\"dsymutil\", [out_filename]);\n     }\n \n \n     // Remove the temporary object file if we aren't saving temps\n     if !sess.get_opts().save_temps {\n-        run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n+        run::run_program(\"rm\", [obj_filename]);\n     }\n }\n "}, {"sha": "b071a9de0a20120feef7b97624b658985e2f7e7a", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7bb9a54c7395db507b1e168817cd0af51d19d432/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb9a54c7395db507b1e168817cd0af51d19d432/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=7bb9a54c7395db507b1e168817cd0af51d19d432", "patch": "@@ -484,6 +484,7 @@ fn main(args: [str]) {\n         sopts.output_type != link::output_type_exe ||\n             sopts.static && sopts.library;\n \n+    let ofile = \"\";\n     alt output_file {\n       none. {\n         // \"-\" as input file will cause the parser to read from stdin so we\n@@ -494,37 +495,36 @@ fn main(args: [str]) {\n                 str::split(ifile, '.' as u8)\n             } else { [\"default\", \"rs\"] };\n         vec::pop(parts);\n-        saved_out_filename = str::connect(parts, \".\");\n+        let base_filename = str::connect(parts, \".\");\n         let suffix =\n             alt sopts.output_type {\n               link::output_type_none. { \"none\" }\n               link::output_type_bitcode. { \"bc\" }\n               link::output_type_assembly. { \"s\" }\n-\n-\n-\n-\n               // Object and exe output both use the '.o' extension here\n               link::output_type_object. | link::output_type_exe. {\n                 \"o\"\n               }\n             };\n-        let ofile = saved_out_filename + \".\" + suffix;\n-        compile_input(sess, cfg, ifile, ofile);\n+        ofile = base_filename + \".\" + suffix;\n+\n+        if sopts.library {\n+            saved_out_filename = std::os::dylib_filename(base_filename);\n+        } else {\n+            saved_out_filename = base_filename;\n+        }\n       }\n-      some(ofile) {\n-        let ofile = ofile;\n-        // FIXME: what about windows? This will create a foo.exe.o.\n-        saved_out_filename = ofile;\n-        let temp_filename =\n-            if !stop_after_codegen { ofile + \".o\" } else { ofile };\n-        compile_input(sess, cfg, ifile, temp_filename);\n+      some(out_file) {\n+        saved_out_filename = out_file;\n+        ofile =\n+            if !stop_after_codegen { out_file + \".o\" } else { out_file };\n       }\n     }\n \n+    compile_input(sess, cfg, ifile, ofile);\n     if stop_after_codegen { ret; }\n \n-    link::link_binary(sess, saved_out_filename);\n+    link::link_binary(sess, ofile, saved_out_filename);\n }\n \n #[cfg(test)]"}]}