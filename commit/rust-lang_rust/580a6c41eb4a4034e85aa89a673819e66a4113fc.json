{"sha": "580a6c41eb4a4034e85aa89a673819e66a4113fc", "node_id": "C_kwDOAAsO6NoAKDU4MGE2YzQxZWI0YTQwMzRlODVhYTg5YTY3MzgxOWU2NmE0MTEzZmM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-19T12:57:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-19T12:57:24Z"}, "message": "Merge #10568\n\n10568: fix(assist): fix #10566 and #10567 r=bnjjj a=bnjjj\n\nclose #10566\r\nclose #10567\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "88fe03816a99aaaada6b9b0b0fbf7c1620184cda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88fe03816a99aaaada6b9b0b0fbf7c1620184cda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580a6c41eb4a4034e85aa89a673819e66a4113fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbsC0CRBK7hj4Ov3rIwAARzoIADKJZY7HdJYek9vt13Mg18p5\n9TGS7Cjv7tAMWF6pd0fDHl9XtaB6N9NdE8tOqpwMpIkNfFtSz7A2qhEPOWCSkx6x\nozHPbQv47x27aTXTnY6FJ13tYzacO2vMRFr31RM9uwWbq39ls9/wtomhR5gv6LB1\nVvSZ1U8Q2zLl272j0cxAvRJbaA99IX6uxKBCqByf25R8/rV8zTV0Wx33+8k+2JFJ\nzSvHw5CLyts2CCs0FI+CDrKL/p9rJE4Ekhi45y3SWkWYZo9Cxe69OYlzYscNfNZb\nI/EeE2fpFY8aS4fI2hamA9KNb61OQ/b47hy4Iuf2dFqsmCLviZaF1oPZCXPkN9Y=\n=ct81\n-----END PGP SIGNATURE-----\n", "payload": "tree 88fe03816a99aaaada6b9b0b0fbf7c1620184cda\nparent dfa355b4313a7ea3eb5a262ee9f1da71f50884d5\nparent 3a5147e9fe04179681d97e8d780193d981cc6640\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634648244 +0000\ncommitter GitHub <noreply@github.com> 1634648244 +0000\n\nMerge #10568\n\n10568: fix(assist): fix #10566 and #10567 r=bnjjj a=bnjjj\n\nclose #10566\r\nclose #10567\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580a6c41eb4a4034e85aa89a673819e66a4113fc", "html_url": "https://github.com/rust-lang/rust/commit/580a6c41eb4a4034e85aa89a673819e66a4113fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580a6c41eb4a4034e85aa89a673819e66a4113fc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa355b4313a7ea3eb5a262ee9f1da71f50884d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa355b4313a7ea3eb5a262ee9f1da71f50884d5", "html_url": "https://github.com/rust-lang/rust/commit/dfa355b4313a7ea3eb5a262ee9f1da71f50884d5"}, {"sha": "3a5147e9fe04179681d97e8d780193d981cc6640", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5147e9fe04179681d97e8d780193d981cc6640", "html_url": "https://github.com/rust-lang/rust/commit/3a5147e9fe04179681d97e8d780193d981cc6640"}], "stats": {"total": 104, "additions": 89, "deletions": 15}, "files": [{"sha": "82499d77c3e2f5b03b8424206e07c4783748071a", "filename": "crates/ide_assists/src/handlers/unwrap_result_return_type.rs", "status": "modified", "additions": 89, "deletions": 15, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/580a6c41eb4a4034e85aa89a673819e66a4113fc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580a6c41eb4a4034e85aa89a673819e66a4113fc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs?ref=580a6c41eb4a4034e85aa89a673819e66a4113fc", "patch": "@@ -1,7 +1,8 @@\n use ide_db::helpers::{for_each_tail_expr, node_ext::walk_expr, FamousDefs};\n+use itertools::Itertools;\n use syntax::{\n     ast::{self, Expr},\n-    match_ast, AstNode,\n+    match_ast, AstNode, TextRange, TextSize,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -60,25 +61,55 @@ pub(crate) fn unwrap_result_return_type(acc: &mut Assists, ctx: &AssistContext)\n             });\n             for_each_tail_expr(&body, tail_cb);\n \n-            for ret_expr_arg in exprs_to_unwrap {\n-                let new_ret_expr = ret_expr_arg.to_string();\n-                let new_ret_expr =\n-                    new_ret_expr.trim_start_matches(\"Ok(\").trim_start_matches(\"Err(\");\n-                builder.replace(\n-                    ret_expr_arg.syntax().text_range(),\n-                    new_ret_expr.strip_suffix(')').unwrap_or(new_ret_expr),\n-                )\n-            }\n-\n+            let mut is_unit_type = false;\n             if let Some((_, inner_type)) = type_ref.to_string().split_once('<') {\n                 let inner_type = match inner_type.split_once(',') {\n                     Some((success_inner_type, _)) => success_inner_type,\n                     None => inner_type,\n                 };\n-                builder.replace(\n-                    type_ref.syntax().text_range(),\n-                    inner_type.strip_suffix('>').unwrap_or(inner_type),\n-                )\n+                let new_ret_type = inner_type.strip_suffix('>').unwrap_or(inner_type);\n+                if new_ret_type == \"()\" {\n+                    is_unit_type = true;\n+                    let text_range = TextRange::new(\n+                        ret_type.syntax().text_range().start(),\n+                        ret_type.syntax().text_range().end() + TextSize::from(1u32),\n+                    );\n+                    builder.delete(text_range)\n+                } else {\n+                    builder.replace(\n+                        type_ref.syntax().text_range(),\n+                        inner_type.strip_suffix('>').unwrap_or(inner_type),\n+                    )\n+                }\n+            }\n+\n+            for ret_expr_arg in exprs_to_unwrap {\n+                let ret_expr_str = ret_expr_arg.to_string();\n+                if ret_expr_str.starts_with(\"Ok(\") || ret_expr_str.starts_with(\"Err(\") {\n+                    let arg_list = ret_expr_arg.syntax().children().find_map(ast::ArgList::cast);\n+                    if let Some(arg_list) = arg_list {\n+                        if is_unit_type {\n+                            match ret_expr_arg.syntax().prev_sibling_or_token() {\n+                                // Useful to delete the entire line without leaving trailing whitespaces\n+                                Some(whitespace) => {\n+                                    let new_range = TextRange::new(\n+                                        whitespace.text_range().start(),\n+                                        ret_expr_arg.syntax().text_range().end(),\n+                                    );\n+                                    builder.delete(new_range);\n+                                }\n+                                None => {\n+                                    builder.delete(ret_expr_arg.syntax().text_range());\n+                                }\n+                            }\n+                        } else {\n+                            builder.replace(\n+                                ret_expr_arg.syntax().text_range(),\n+                                arg_list.args().join(\", \"),\n+                            );\n+                        }\n+                    }\n+                }\n             }\n         },\n     )\n@@ -126,6 +157,49 @@ fn foo() -> i32 {\n         );\n     }\n \n+    #[test]\n+    fn unwrap_result_return_type_unit_type() {\n+        check_assist(\n+            unwrap_result_return_type,\n+            r#\"\n+//- minicore: result\n+fn foo() -> Result<(), Box<dyn Error$0>> {\n+    Ok(())\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unwrap_result_return_type_ending_with_parent() {\n+        check_assist(\n+            unwrap_result_return_type,\n+            r#\"\n+//- minicore: result\n+fn foo() -> Result<i32, Box<dyn Error$0>> {\n+    if true {\n+        Ok(42)\n+    } else {\n+        foo()\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> i32 {\n+    if true {\n+        42\n+    } else {\n+        foo()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn unwrap_return_type_break_split_tail() {\n         check_assist("}]}