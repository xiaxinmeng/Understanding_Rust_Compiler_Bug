{"sha": "c3f9403f590ac8989bc50f933541a6234e391747", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZjk0MDNmNTkwYWM4OTg5YmM1MGY5MzM1NDFhNjIzNGUzOTE3NDc=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-03-18T21:44:36Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-03-21T19:10:53Z"}, "message": "Don't consider !Unpin references as noalias\n\nSuch structures may contain self-references, in which case the\nsame location may be accessible through a pointer that is not\nbased-on the noalias pointer.\n\nThis is still grey area as far as language semantics are concerned,\nbut checking for !Unpin as an indicator for self-referential\nsturctures seems like a good approach for the meantime.", "tree": {"sha": "5db68e298e1c9b88e7613ce48d3f561079e58cdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db68e298e1c9b88e7613ce48d3f561079e58cdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3f9403f590ac8989bc50f933541a6234e391747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f9403f590ac8989bc50f933541a6234e391747", "html_url": "https://github.com/rust-lang/rust/commit/c3f9403f590ac8989bc50f933541a6234e391747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3f9403f590ac8989bc50f933541a6234e391747/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08c5ffd4a3e79aeb9a4cc79576d97760a9be25de", "url": "https://api.github.com/repos/rust-lang/rust/commits/08c5ffd4a3e79aeb9a4cc79576d97760a9be25de", "html_url": "https://github.com/rust-lang/rust/commit/08c5ffd4a3e79aeb9a4cc79576d97760a9be25de"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "53a7d8528d36e0c7aeedc35919f7b4260da5a3d8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3f9403f590ac8989bc50f933541a6234e391747/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f9403f590ac8989bc50f933541a6234e391747/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c3f9403f590ac8989bc50f933541a6234e391747", "patch": "@@ -993,6 +993,10 @@ rustc_queries! {\n     query is_freeze_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is freeze\", env.value }\n     }\n+    /// Query backing `TyS::is_unpin`.\n+    query is_unpin_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+        desc { \"computing whether `{}` is `Unpin`\", env.value }\n+    }\n     /// Query backing `TyS::needs_drop`.\n     query needs_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` needs drop\", env.value }"}, {"sha": "b540665f0964a22b97cb24c144c18d58e9ffed7f", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3f9403f590ac8989bc50f933541a6234e391747/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f9403f590ac8989bc50f933541a6234e391747/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=c3f9403f590ac8989bc50f933541a6234e391747", "patch": "@@ -2318,16 +2318,25 @@ where\n             ty::Ref(_, ty, mt) if offset.bytes() == 0 => {\n                 let address_space = addr_space_of_ty(ty);\n                 let tcx = cx.tcx();\n-                let is_freeze = ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env());\n                 let kind = match mt {\n                     hir::Mutability::Not => {\n-                        if is_freeze {\n+                        if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {\n                             PointerKind::Frozen\n                         } else {\n                             PointerKind::Shared\n                         }\n                     }\n-                    hir::Mutability::Mut => PointerKind::UniqueBorrowed,\n+                    hir::Mutability::Mut => {\n+                        // References to self-referential structures should not be considered\n+                        // noalias, as another pointer to the structure can be obtained, that\n+                        // is not based-on the original reference. We consider all !Unpin\n+                        // types to be potentially self-referential here.\n+                        if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {\n+                            PointerKind::UniqueBorrowed\n+                        } else {\n+                            PointerKind::Shared\n+                        }\n+                    }\n                 };\n \n                 cx.layout_of(ty).to_result().ok().map(|layout| PointeeInfo {"}, {"sha": "cff8166974a7acb5efa0c5f77c0486990e927fa7", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c3f9403f590ac8989bc50f933541a6234e391747/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f9403f590ac8989bc50f933541a6234e391747/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c3f9403f590ac8989bc50f933541a6234e391747", "patch": "@@ -741,6 +741,46 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n     }\n \n+    /// Checks whether values of this type `T` implement the `Unpin` trait.\n+    pub fn is_unpin(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n+        self.is_trivially_unpin() || tcx_at.is_unpin_raw(param_env.and(self))\n+    }\n+\n+    /// Fast path helper for testing if a type is `Unpin`.\n+    ///\n+    /// Returning true means the type is known to be `Unpin`. Returning\n+    /// `false` means nothing -- could be `Unpin`, might not be.\n+    fn is_trivially_unpin(&self) -> bool {\n+        match self.kind() {\n+            ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Bool\n+            | ty::Char\n+            | ty::Str\n+            | ty::Never\n+            | ty::Ref(..)\n+            | ty::RawPtr(_)\n+            | ty::FnDef(..)\n+            | ty::Error(_)\n+            | ty::FnPtr(_) => true,\n+            ty::Tuple(_) => self.tuple_fields().all(Self::is_trivially_unpin),\n+            ty::Slice(elem_ty) | ty::Array(elem_ty, _) => elem_ty.is_trivially_unpin(),\n+            ty::Adt(..)\n+            | ty::Bound(..)\n+            | ty::Closure(..)\n+            | ty::Dynamic(..)\n+            | ty::Foreign(_)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Infer(_)\n+            | ty::Opaque(..)\n+            | ty::Param(_)\n+            | ty::Placeholder(_)\n+            | ty::Projection(_) => false,\n+        }\n+    }\n+\n     /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely\n     /// non-copy and *might* have a destructor attached; if it returns\n     /// `false`, then `ty` definitely has no destructor (i.e., no drop glue)."}, {"sha": "cedc84d97c2d9ca4bae3f218a10c1c1d783e37d4", "filename": "compiler/rustc_ty_utils/src/common_traits.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3f9403f590ac8989bc50f933541a6234e391747/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f9403f590ac8989bc50f933541a6234e391747/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs?ref=c3f9403f590ac8989bc50f933541a6234e391747", "patch": "@@ -18,6 +18,10 @@ fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n     is_item_raw(tcx, query, LangItem::Freeze)\n }\n \n+fn is_unpin_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+    is_item_raw(tcx, query, LangItem::Unpin)\n+}\n+\n fn is_item_raw<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n@@ -37,5 +41,11 @@ fn is_item_raw<'tcx>(\n }\n \n pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { is_copy_raw, is_sized_raw, is_freeze_raw, ..*providers };\n+    *providers = ty::query::Providers {\n+        is_copy_raw,\n+        is_sized_raw,\n+        is_freeze_raw,\n+        is_unpin_raw,\n+        ..*providers\n+    };\n }"}, {"sha": "46f18d7f891ce461f2cddc2b19dd789fa826335d", "filename": "src/test/codegen/noalias-unpin.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3f9403f590ac8989bc50f933541a6234e391747/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f9403f590ac8989bc50f933541a6234e391747/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs?ref=c3f9403f590ac8989bc50f933541a6234e391747", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z mutable-noalias=yes\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct SelfRef {\n+    self_ref: *mut SelfRef,\n+    _pin: std::marker::PhantomPinned\n+}\n+\n+// CHECK-LABEL: @test_self_ref(\n+// CHECK-NOT: noalias\n+#[no_mangle]\n+pub unsafe fn test_self_ref(s: &mut SelfRef) {\n+    (*s.self_ref).self_ref = std::ptr::null_mut();\n+}"}]}