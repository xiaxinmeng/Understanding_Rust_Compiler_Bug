{"sha": "109008a1c104ac672c4852ee3dee55a8f2bda789", "node_id": "C_kwDOAAsO6NoAKDEwOTAwOGExYzEwNGFjNjcyYzQ4NTJlZTNkZWU1NWE4ZjJiZGE3ODk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-29T09:23:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-29T09:23:15Z"}, "message": "Rollup merge of #96516 - oli-obk:impl_trait_inference_accidental_permitted, r=jackh726\n\nRevert diagnostic duplication and accidental stabilization\n\nfixes #96460\n\nthis is an accidental stabilization that we should put into the beta. I believe it is low-risk, because it was literally what we had before #94081\n\nThe effect on tests is massive, but mostly deduplication of diagnostics and some minor span changes.", "tree": {"sha": "021dff7a20aa348a8062ab765d9d8bfc22346f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/021dff7a20aa348a8062ab765d9d8bfc22346f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109008a1c104ac672c4852ee3dee55a8f2bda789", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJia66DCRBK7hj4Ov3rIwAAYWgIAHhLY6vWKybMVeA5EEHNnhyw\nByc62DmTD4jUPnlFtA83c7l4FALryiF8MJ95bB12nqUqQF1wwuxhUbZdGCdK3PoC\nlt857Ko0ucs3n2Uh8R9S25404XVqW/tgVnM+TQ++1PtA6LnafJ1mq/Vd0tFxx9zv\nnYjxhSuIj003VQl0LpPuZ3WCepNhmGtI5/yDkD6FK8Cfzac1w9qHqnH0zL8Fp0if\nLVQhE9YyHNQYAJWOqpkLfvof2OWpWSK5InWAIhY8Jmpb+k3AEH1hmp0K3DNYzKfH\nHXKL/OcJFRqfZ7n06n6D5FEca5ipSWWVw+6tCy9sji1rxc5dwqEWAgI9LOTLarw=\n=Ua6X\n-----END PGP SIGNATURE-----\n", "payload": "tree 021dff7a20aa348a8062ab765d9d8bfc22346f40\nparent cd5dc4937958d60404adccbbc877697539ca085c\nparent d22c4399890ee43bd7c2346227222e6c9dc21f23\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1651224195 +0200\ncommitter GitHub <noreply@github.com> 1651224195 +0200\n\nRollup merge of #96516 - oli-obk:impl_trait_inference_accidental_permitted, r=jackh726\n\nRevert diagnostic duplication and accidental stabilization\n\nfixes #96460\n\nthis is an accidental stabilization that we should put into the beta. I believe it is low-risk, because it was literally what we had before #94081\n\nThe effect on tests is massive, but mostly deduplication of diagnostics and some minor span changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109008a1c104ac672c4852ee3dee55a8f2bda789", "html_url": "https://github.com/rust-lang/rust/commit/109008a1c104ac672c4852ee3dee55a8f2bda789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109008a1c104ac672c4852ee3dee55a8f2bda789/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5dc4937958d60404adccbbc877697539ca085c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5dc4937958d60404adccbbc877697539ca085c", "html_url": "https://github.com/rust-lang/rust/commit/cd5dc4937958d60404adccbbc877697539ca085c"}, {"sha": "d22c4399890ee43bd7c2346227222e6c9dc21f23", "url": "https://api.github.com/repos/rust-lang/rust/commits/d22c4399890ee43bd7c2346227222e6c9dc21f23", "html_url": "https://github.com/rust-lang/rust/commit/d22c4399890ee43bd7c2346227222e6c9dc21f23"}], "stats": {"total": 693, "additions": 119, "deletions": 574}, "files": [{"sha": "6a4c0c2091e92dc230219b6683f46bba9d5de84d", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -102,6 +102,12 @@ pub(super) fn check_fn<'a, 'tcx>(\n             DUMMY_SP,\n             param_env,\n         ));\n+    // HACK(oli-obk): we rewrite the declared return type, too, so that we don't end up inferring all\n+    // unconstrained RPIT to have `()` as their hidden type. This would happen because further down we\n+    // compare the ret_coercion with declared_ret_ty, and anything uninferred would be inferred to the\n+    // opaque type itself. That again would cause writeback to assume we have a recursive call site\n+    // and do the sadly stabilized fallback to `()`.\n+    let declared_ret_ty = ret_ty;\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());\n "}, {"sha": "1de1ddbe3a4d0f3813197cd9187dca471aeb4b16", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -24,7 +24,6 @@ fn bar() -> impl Bar {\n \n fn baz() -> impl Bar<Item = i32> {\n     //~^ ERROR type mismatch resolving `<impl Bar as Foo>::Item == i32`\n-    //~| ERROR type mismatch resolving `<impl Bar as Foo>::Item == i32`\n     bar()\n }\n "}, {"sha": "bd8c8a4414c4db27144ce67e722e79a54b55b0ee", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -16,29 +16,6 @@ help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i3\n LL | fn bar() -> impl Bar<Item = i32> {\n    |                     ++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl Bar as Foo>::Item == i32`\n-  --> $DIR/impl-trait-return-missing-constraint.rs:25:34\n-   |\n-LL |   fn bar() -> impl Bar {\n-   |               -------- the expected opaque type\n-...\n-LL |   fn baz() -> impl Bar<Item = i32> {\n-   |  __________________________________^\n-LL | |\n-LL | |\n-LL | |     bar()\n-LL | | }\n-   | |_^ expected associated type, found `i32`\n-   |\n-   = note: expected associated type `<impl Bar as Foo>::Item`\n-                         found type `i32`\n-   = help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32` or calling a method that returns `<impl Bar as Foo>::Item`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n-   |\n-LL | fn bar() -> impl Bar<Item = i32> {\n-   |                     ++++++++++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "b7f795eadb760d9162c2c60cb8cb46a2c008855c", "filename": "src/test/ui/conservative_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fconservative_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fconservative_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -2,7 +2,6 @@\n \n fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n     //~^ ERROR `()` is not an iterator\n-    //~| ERROR `()` is not an iterator\n }\n \n fn main() {}"}, {"sha": "63a4df242f85f9897247a8b24d4101dd16eaeb35", "filename": "src/test/ui/conservative_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -6,18 +6,6 @@ LL | fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/conservative_impl_trait.rs:3:60\n-   |\n-LL |   fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n-   |  ____________________________________________________________^\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "308c121a94111ad86386d09611be0325e5fede06", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -5,7 +5,6 @@ impl<const N: u32> Trait for Uwu<N> {}\n \n fn rawr() -> impl Trait {\n     //~^ error: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n-    //~| error: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n     Uwu::<10, 12>\n }\n \n@@ -17,13 +16,11 @@ impl Traitor<1, 2> for u64 {}\n \n fn uwu<const N: u8>() -> impl Traitor<N> {\n     //~^ error: the trait bound `u32: Traitor<N, N>` is not satisfied\n-    //~| error: the trait bound `u32: Traitor<N, N>` is not satisfied\n     1_u32\n }\n \n fn owo() -> impl Traitor {\n     //~^ error: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n-    //~| error: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n     1_u64\n }\n "}, {"sha": "8031da28ca1ffb82e6815dc4626ee14af38d606d", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 3, "deletions": 46, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -6,21 +6,8 @@ LL | fn rawr() -> impl Trait {\n    |\n    = help: the trait `Trait` is implemented for `Uwu<N>`\n \n-error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:6:25\n-   |\n-LL |   fn rawr() -> impl Trait {\n-   |  _________________________^\n-LL | |\n-LL | |\n-LL | |     Uwu::<10, 12>\n-LL | | }\n-   | |_^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n-   |\n-   = help: the trait `Trait` is implemented for `Uwu<N>`\n-\n error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:18:26\n+  --> $DIR/rp_impl_trait_fail.rs:17:26\n    |\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n@@ -29,23 +16,8 @@ LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n \n-error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:18:42\n-   |\n-LL |   fn uwu<const N: u8>() -> impl Traitor<N> {\n-   |  __________________________________________^\n-LL | |\n-LL | |\n-LL | |     1_u32\n-LL | | }\n-   | |_^ the trait `Traitor<N, N>` is not implemented for `u32`\n-   |\n-   = help: the following other types implement trait `Traitor<N, M>`:\n-             <u32 as Traitor<N, 2_u8>>\n-             <u64 as Traitor<1_u8, 2_u8>>\n-\n error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:24:13\n+  --> $DIR/rp_impl_trait_fail.rs:22:13\n    |\n LL | fn owo() -> impl Traitor {\n    |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n@@ -54,21 +26,6 @@ LL | fn owo() -> impl Traitor {\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n \n-error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:24:26\n-   |\n-LL |   fn owo() -> impl Traitor {\n-   |  __________________________^\n-LL | |\n-LL | |\n-LL | |     1_u64\n-LL | | }\n-   | |_^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n-   |\n-   = help: the following other types implement trait `Traitor<N, M>`:\n-             <u32 as Traitor<N, 2_u8>>\n-             <u64 as Traitor<1_u8, 2_u8>>\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "caa452060b19830047e08cdb3eeb997403258f98", "filename": "src/test/ui/generator/issue-88653.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -7,13 +7,10 @@ use std::ops::Generator;\n \n fn foo(bar: bool) -> impl Generator<(bool,)> {\n     //~^ ERROR: type mismatch in generator arguments [E0631]\n-    //~| ERROR: type mismatch in generator arguments [E0631]\n-    //~| NOTE: expected signature of `fn((bool,)) -> _`\n     //~| NOTE: expected signature of `fn((bool,)) -> _`\n     //~| NOTE: in this expansion of desugaring of `impl Trait`\n     |bar| {\n         //~^ NOTE: found signature of `fn(bool) -> _`\n-        //~| NOTE: found signature of `fn(bool) -> _`\n         if bar {\n             yield bar;\n         }"}, {"sha": "5bd8ad129fef908d874662b5f04500e772afe288", "filename": "src/test/ui/generator/issue-88653.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -7,22 +7,6 @@ LL | fn foo(bar: bool) -> impl Generator<(bool,)> {\n LL |     |bar| {\n    |     ----- found signature of `fn(bool) -> _`\n \n-error[E0631]: type mismatch in generator arguments\n-  --> $DIR/issue-88653.rs:8:46\n-   |\n-LL |   fn foo(bar: bool) -> impl Generator<(bool,)> {\n-   |  ______________________________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     |bar| {\n-   | |     ----- found signature of `fn(bool) -> _`\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^ expected signature of `fn((bool,)) -> _`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0631`."}, {"sha": "8d1ce6c7a437c424e05a052805cc2f09a8dfe1b6", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -4,7 +4,6 @@ use std::ops::Generator;\n \n fn foo() -> impl Generator<Return = i32> {\n     //~^ ERROR type mismatch\n-    //~| ERROR type mismatch\n     || {\n         if false {\n             return Ok(6);"}, {"sha": "f05faedf21b827dd18c3fcc46b5fdcb6712a8531", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch-signature-deduction.rs:15:9\n+  --> $DIR/type-mismatch-signature-deduction.rs:14:9\n    |\n LL |         5\n    |         ^ expected enum `Result`, found integer\n    |\n    = note: expected type `Result<{integer}, _>`\n               found type `{integer}`\n note: return type inferred to be `Result<{integer}, _>` here\n-  --> $DIR/type-mismatch-signature-deduction.rs:10:20\n+  --> $DIR/type-mismatch-signature-deduction.rs:9:20\n    |\n LL |             return Ok(6);\n    |                    ^^^^^\n \n-error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:8:5: 16:6] as Generator>::Return == i32`\n+error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:7:5: 15:6] as Generator>::Return == i32`\n   --> $DIR/type-mismatch-signature-deduction.rs:5:13\n    |\n LL | fn foo() -> impl Generator<Return = i32> {\n@@ -21,23 +21,7 @@ LL | fn foo() -> impl Generator<Return = i32> {\n    = note: expected enum `Result<{integer}, _>`\n               found type `i32`\n \n-error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:8:5: 16:6] as Generator>::Return == i32`\n-  --> $DIR/type-mismatch-signature-deduction.rs:5:42\n-   |\n-LL |   fn foo() -> impl Generator<Return = i32> {\n-   |  __________________________________________^\n-LL | |\n-LL | |\n-LL | |     || {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^ expected enum `Result`, found `i32`\n-   |\n-   = note: expected enum `Result<{integer}, _>`\n-              found type `i32`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0271, E0308.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "3329592478d6fa9d884f6f10f3c13941d36cba56", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -24,7 +24,6 @@ mod impl_trait {\n     /// `T::Assoc` can't be normalized any further here.\n     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n         //~^ ERROR: type mismatch\n-        //~| ERROR: type mismatch\n         Foo(())\n     }\n }\n@@ -42,7 +41,6 @@ mod lifetimes {\n     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n         //~^ ERROR `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n         //~| ERROR: type mismatch\n-        //~| ERROR: type mismatch\n         Foo(())\n     }\n }"}, {"sha": "eac7e6b315ec4a71cf4e863b5c47ee8d6a44f428", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -16,37 +16,14 @@ help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                         ++++++++++++\n \n-error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:25:64\n-   |\n-LL |       fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n-   |  ________________________________________________________________^\n-LL | |\n-LL | |\n-LL | |         Foo(())\n-LL | |     }\n-   | |_____^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-   |\n-note: expected this to be `()`\n-  --> $DIR/bound-normalization-fail.rs:14:19\n-   |\n-LL |     type Output = T;\n-   |                   ^\n-   = note:    expected unit type `()`\n-           found associated type `<T as impl_trait::Trait>::Assoc`\n-help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n-   |\n-LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n-   |                         ++++++++++++\n-\n error[E0760]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:42:41\n+  --> $DIR/bound-normalization-fail.rs:41:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:42:41\n+  --> $DIR/bound-normalization-fail.rs:41:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n@@ -63,31 +40,7 @@ help: consider constraining the associated type `<T as lifetimes::Trait<'static>\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                                 ++++++++++++\n \n-error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:42:73\n-   |\n-LL |       fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n-   |  _________________________________________________________________________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         Foo(())\n-LL | |     }\n-   | |_____^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-   |\n-note: expected this to be `()`\n-  --> $DIR/bound-normalization-fail.rs:14:19\n-   |\n-LL |     type Output = T;\n-   |                   ^\n-   = note:    expected unit type `()`\n-           found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n-help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n-   |\n-LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n-   |                                 ++++++++++++\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0271, E0760.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "a7428f9bf129fa859e344d4c7960d618ff6f0c4e", "filename": "src/test/ui/impl-trait/cross-return-site-inference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -29,17 +29,17 @@ fn baa(b: bool) -> impl std::fmt::Debug {\n }\n \n fn muh() -> Result<(), impl std::fmt::Debug> {\n-    Err(\"whoops\")?; //~ ERROR `?` couldn't convert the error to `impl Debug`\n+    Err(\"whoops\")?; //~^ ERROR type annotations needed\n     Ok(())\n }\n \n fn muh2() -> Result<(), impl std::fmt::Debug> {\n-    return Err(From::from(\"foo\")); //~ ERROR the trait bound `impl Debug: From<&str>` is not satisfied\n+    return Err(From::from(\"foo\")); //~^ ERROR type annotations needed\n     Ok(())\n }\n \n fn muh3() -> Result<(), impl std::fmt::Debug> {\n-    Err(From::from(\"foo\")) //~ ERROR the trait bound `impl Debug: From<&str>` is not satisfied\n+    Err(From::from(\"foo\")) //~^ ERROR type annotations needed\n }\n \n fn main() {}"}, {"sha": "5209d7a5743498831e20266c9cd4ae8d14164504", "filename": "src/test/ui/impl-trait/cross-return-site-inference.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,27 +1,21 @@\n-error[E0277]: `?` couldn't convert the error to `impl Debug`\n-  --> $DIR/cross-return-site-inference.rs:32:18\n+error[E0282]: type annotations needed\n+  --> $DIR/cross-return-site-inference.rs:31:24\n    |\n LL | fn muh() -> Result<(), impl std::fmt::Debug> {\n-   |             -------------------------------- expected `impl Debug` because of this\n-LL |     Err(\"whoops\")?;\n-   |                  ^ the trait `From<&str>` is not implemented for `impl Debug`\n-   |\n-   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n-   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<(), impl Debug>`\n+   |                        ^^^^^^^^^^^^^^^^^^^^ cannot infer type\n \n-error[E0277]: the trait bound `impl Debug: From<&str>` is not satisfied\n-  --> $DIR/cross-return-site-inference.rs:37:16\n+error[E0282]: type annotations needed\n+  --> $DIR/cross-return-site-inference.rs:36:25\n    |\n-LL |     return Err(From::from(\"foo\"));\n-   |                ^^^^^^^^^^ the trait `From<&str>` is not implemented for `impl Debug`\n+LL | fn muh2() -> Result<(), impl std::fmt::Debug> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^ cannot infer type\n \n-error[E0277]: the trait bound `impl Debug: From<&str>` is not satisfied\n-  --> $DIR/cross-return-site-inference.rs:42:9\n+error[E0282]: type annotations needed\n+  --> $DIR/cross-return-site-inference.rs:41:25\n    |\n-LL |     Err(From::from(\"foo\"))\n-   |         ^^^^^^^^^^ the trait `From<&str>` is not implemented for `impl Debug`\n+LL | fn muh3() -> Result<(), impl std::fmt::Debug> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^ cannot infer type\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "001f9ee48775847377ed7575cfeea2a70087dda3", "filename": "src/test/ui/impl-trait/fallback_inference.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ffallback_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ffallback_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ffallback_inference.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -0,0 +1,7 @@\n+use std::marker::PhantomData;\n+\n+fn weird() -> PhantomData<impl Sized> {\n+    PhantomData //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "b637ca694c203e09efd782dc8014f9c7cf8ba380", "filename": "src/test/ui/impl-trait/fallback_inference.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ffallback_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ffallback_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ffallback_inference.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/fallback_inference.rs:3:27\n+   |\n+LL | fn weird() -> PhantomData<impl Sized> {\n+   |                           ^^^^^^^^^^ cannot infer type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "be9c643b2d881c88d188cca56a8a784f499b5dae", "filename": "src/test/ui/impl-trait/issue-72911.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -5,7 +5,7 @@ pub struct Lint {}\n impl Lint {}\n \n pub fn gather_all() -> impl Iterator<Item = Lint> {\n-    //~^ ERROR `()` is not an iterator\n+    //~^ ERROR type annotations needed\n     lint_files().flat_map(|f| gather_from_file(&f))\n }\n "}, {"sha": "fc7200c75c2260d2a419bdff3ca13a7189677193", "filename": "src/test/ui/impl-trait/issue-72911.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -10,15 +10,13 @@ error[E0433]: failed to resolve: use of undeclared crate or module `foo`\n LL | fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n    |                                         ^^^ use of undeclared crate or module `foo`\n \n-error[E0277]: `()` is not an iterator\n+error[E0282]: type annotations needed\n   --> $DIR/issue-72911.rs:7:24\n    |\n LL | pub fn gather_all() -> impl Iterator<Item = Lint> {\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0277, E0433.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0282, E0433.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "4c0490c721bc4110f703b85077cf68b06fc1fea1", "filename": "src/test/ui/impl-trait/issues/issue-67830.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,12 +1,8 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-67830.rs:21:66\n+  --> $DIR/issue-67830.rs:21:14\n    |\n-LL |   fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n-   |  __________________________________________________________________^\n-LL | |\n-LL | |     Wrap(|a| Some(a).into_iter())\n-LL | | }\n-   | |_^ implementation of `FnOnce` is not general enough\n+LL | fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n    = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`"}, {"sha": "9574b880f7d11c179a10cef6be1d984157f08f1d", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -8,15 +8,12 @@ LL | fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Sen\n    = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n \n error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:19:82\n+  --> $DIR/issue-88236-2.rs:19:36\n    |\n-LL |   fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-   |  __________________________________________________________________________________^\n-LL | |     x\n-LL | | }\n-   | |_^ implementation of `Hrtb` is not general enough\n+LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Hrtb` is not general enough\n    |\n-   = note: `&()` must implement `Hrtb<'0>`, for any lifetime `'0`...\n+   = note: `Hrtb<'1>` would have to be implemented for the type `&()`, for any lifetime `'1`...\n    = note: ...but `Hrtb<'_>` is actually implemented for the type `&()`\n \n error: aborting due to 2 previous errors"}, {"sha": "2681241bbad2b2d8ccf51fba6115455227d77d05", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -110,11 +110,11 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:41:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:40:5\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n-...\n+LL |\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n "}, {"sha": "60e4672f1b7ff7eb71587b3039c9996434594103", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -37,7 +37,6 @@ fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n \n fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n     //~^ ERROR the parameter type `T` may not live long enough\n-    //~| ERROR the parameter type `T` may not live long enough\n     x\n }\n "}, {"sha": "6bcfb27ce16533b166681f9023c5f41ae9b524e2", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -132,19 +132,6 @@ LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 |\n    |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:38:72\n-   |\n-LL |   fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-   |  _________________________________--_____________________________________^\n-   | |                                 |\n-   | |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n-LL | |\n-LL | |\n-LL | |     x\n-LL | | }\n-   | |_^ ...so that the type `T` will meet its required lifetime bounds\n-\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:16:50\n    |\n@@ -231,7 +218,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ~~~~~~~~~~~~\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 13 previous errors\n \n Some errors have detailed explanations: E0310, E0621, E0700, E0759.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "a2a49c5535d3dd5df9ba63cae37bdac14bbcd052", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -24,7 +24,6 @@ type Sendable = impl Send;\n // type does not implement `Duh`, even if its hidden type does. So we error out.\n fn foo() -> impl Trait<Assoc = Sendable> {\n     //~^ ERROR `Sendable: Duh` is not satisfied\n-    //~| ERROR `Sendable: Duh` is not satisfied\n     || 42\n }\n "}, {"sha": "359fb909e5418e9271192872ee5b5732f2fa4c10", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -5,30 +5,12 @@ LL | fn foo() -> impl Trait<Assoc = Sendable> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `Sendable`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:28:5: 28:10]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:27:5: 27:10]`\n   --> $DIR/nested-return-type2-tait.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n    |                               ^^^^^     ^\n \n-error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n-  --> $DIR/nested-return-type2-tait.rs:25:42\n-   |\n-LL |   fn foo() -> impl Trait<Assoc = Sendable> {\n-   |  __________________________________________^\n-LL | |\n-LL | |\n-LL | |     || 42\n-LL | | }\n-   | |_^ the trait `Duh` is not implemented for `Sendable`\n-   |\n-   = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:28:5: 28:10]`\n-  --> $DIR/nested-return-type2-tait.rs:14:31\n-   |\n-LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n-   |                               ^^^^^     ^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "1cd5b65b9749bc48a663e3f829a9d32c98666f57", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,9 +1,9 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:10:5\n+  --> $DIR/type_parameters_captured.rs:9:5\n    |\n LL | fn foo<T>(x: T) -> impl Any + 'static {\n    |        - help: consider adding an explicit lifetime bound...: `T: 'static`\n-...\n+LL |\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n "}, {"sha": "6c9c9d4a42af5a2a592fe62a3691aeb4f633a996", "filename": "src/test/ui/impl-trait/type_parameters_captured.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -6,7 +6,6 @@ impl<T> Any for T {}\n // Check that type parameters are captured and not considered 'static\n fn foo<T>(x: T) -> impl Any + 'static {\n     //~^ ERROR the parameter type `T` may not live long enough\n-    //~| ERROR the parameter type `T` may not live long enough\n     x\n }\n "}, {"sha": "40e50b9922f8d2e9f6269cc113ab756df0ec3cc1", "filename": "src/test/ui/impl-trait/type_parameters_captured.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -6,19 +6,6 @@ LL | fn foo<T>(x: T) -> impl Any + 'static {\n    |        |\n    |        help: consider adding an explicit lifetime bound...: `T: 'static`\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:7:39\n-   |\n-LL |   fn foo<T>(x: T) -> impl Any + 'static {\n-   |  ________-______________________________^\n-   | |        |\n-   | |        help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL | |\n-LL | |\n-LL | |     x\n-LL | | }\n-   | |_^ ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0310`."}, {"sha": "1a1210d00726d6bf1164f647ed4f8fbb78bbf2c5", "filename": "src/test/ui/impl-trait/where-allowed-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,7 +1,6 @@\n use std::fmt::Debug;\n \n-// check-pass\n-\n fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n+//~^ ERROR type annotations needed\n \n fn main() {}"}, {"sha": "2b328c01c8729998f85b871b95e296662c03d1fe", "filename": "src/test/ui/impl-trait/where-allowed-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/where-allowed-2.rs:3:30\n+   |\n+LL | fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n+   |                              ^^^^^^^^^^ cannot infer type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "14b6c0f35812f8a3e0f67f85650ebccdaa866116", "filename": "src/test/ui/issues-71798.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fissues-71798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fissues-71798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,6 +1,5 @@\n fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n     //~^ ERROR `u32` is not a future\n-    //~| ERROR `u32` is not a future\n     *x\n }\n "}, {"sha": "ab72c3e41af97b80c72488c6b7d253fc77847261", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `u` in this scope\n-  --> $DIR/issues-71798.rs:8:24\n+  --> $DIR/issues-71798.rs:7:24\n    |\n LL |     let _ = test_ref & u;\n    |                        ^ not found in this scope\n@@ -13,21 +13,7 @@ LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n    = help: the trait `Future` is not implemented for `u32`\n    = note: u32 must be a future or must implement `IntoFuture` to be awaited\n \n-error[E0277]: `u32` is not a future\n-  --> $DIR/issues-71798.rs:1:69\n-   |\n-LL |   fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n-   |  _____________________________________________________________________^\n-LL | |\n-LL | |\n-LL | |     *x\n-LL | | }\n-   | |_^ `u32` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `u32`\n-   = note: u32 must be a future or must implement `IntoFuture` to be awaited\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "5168cb20d9ec423a1298b5c6eb6accbf205dcb85", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -7,7 +7,6 @@ use std::error::Error;\n \n fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n     //~^ ERROR not satisfied\n-    //~| ERROR not satisfied\n     Ok(())\n }\n "}, {"sha": "ef1127c59ac4cfee3380c9a506f1b5916723a07b", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -4,17 +4,6 @@ error[E0277]: the trait bound `Result<(), _>: Future` is not satisfied\n LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `Result<(), _>`\n \n-error[E0277]: the trait bound `Result<(), _>: Future` is not satisfied\n-  --> $DIR/lifetime-elision-return-type-trait.rs:8:56\n-   |\n-LL |   fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n-   |  ________________________________________________________^\n-LL | |\n-LL | |\n-LL | |     Ok(())\n-LL | | }\n-   | |_^ the trait `Future` is not implemented for `Result<(), _>`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "cd3741356f4d0f042c1524320ff168d4012e5f62", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -8,16 +8,12 @@ impl Bar for Qux {}\n \n fn foo() -> impl Bar {\n     //~^ ERROR the trait bound `(): Bar` is not satisfied\n-    //~| ERROR the trait bound `(): Bar` is not satisfied\n-    //~| HELP the following other types implement trait `Bar`:\n     5;\n     //~^ HELP remove this semicolon\n }\n \n fn bar() -> impl Bar {\n     //~^ ERROR the trait bound `(): Bar` is not satisfied\n-    //~| ERROR the trait bound `(): Bar` is not satisfied\n-    //~| HELP the following other types implement trait `Bar`:\n     //~| HELP the following other types implement trait `Bar`:\n     \"\";\n }"}, {"sha": "e74c2c4214fe2d6977de70aaa2532bea39542a19", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.stderr", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -3,31 +3,14 @@ error[E0277]: the trait bound `(): Bar` is not satisfied\n    |\n LL | fn foo() -> impl Bar {\n    |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n-...\n+LL |\n LL |     5;\n    |     -- help: remove this semicolon\n    |     |\n    |     this expression has type `{integer}`, which implements `Bar`\n \n error[E0277]: the trait bound `(): Bar` is not satisfied\n-  --> $DIR/impl-trait-return-trailing-semicolon.rs:9:22\n-   |\n-LL |   fn foo() -> impl Bar {\n-   |  ______________________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |     5;\n-LL | |\n-LL | | }\n-   | |_^ the trait `Bar` is not implemented for `()`\n-   |\n-   = help: the following other types implement trait `Bar`:\n-             Qux\n-             i32\n-\n-error[E0277]: the trait bound `(): Bar` is not satisfied\n-  --> $DIR/impl-trait-return-trailing-semicolon.rs:17:13\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:15:13\n    |\n LL | fn bar() -> impl Bar {\n    |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n@@ -36,23 +19,6 @@ LL | fn bar() -> impl Bar {\n              Qux\n              i32\n \n-error[E0277]: the trait bound `(): Bar` is not satisfied\n-  --> $DIR/impl-trait-return-trailing-semicolon.rs:17:22\n-   |\n-LL |   fn bar() -> impl Bar {\n-   |  ______________________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |     \"\";\n-LL | | }\n-   | |_^ the trait `Bar` is not implemented for `()`\n-   |\n-   = help: the following other types implement trait `Bar`:\n-             Qux\n-             i32\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a601b5866f43e1689ae49fc9589c2cee9329b88f", "filename": "src/test/ui/suggestions/issue-81098.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,14 +1,12 @@\n // Don't suggest removing a semicolon if the last statement isn't an expression with semicolon\n // (#81098)\n fn wat() -> impl core::fmt::Display { //~ ERROR: `()` doesn't implement `std::fmt::Display`\n-    //~^ ERROR: `()` doesn't implement `std::fmt::Display`\n     fn why() {}\n }\n \n // Do it if the last statement is an expression with semicolon\n // (#54771)\n fn ok() -> impl core::fmt::Display { //~ ERROR: `()` doesn't implement `std::fmt::Display`\n-    //~^ ERROR: `()` doesn't implement `std::fmt::Display`\n     1;\n }\n "}, {"sha": "4dc47a20282438dc48e4d9ecb3603c4a1aea425d", "filename": "src/test/ui/suggestions/issue-81098.stderr", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -8,24 +8,10 @@ LL | fn wat() -> impl core::fmt::Display {\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n \n error[E0277]: `()` doesn't implement `std::fmt::Display`\n-  --> $DIR/issue-81098.rs:3:37\n-   |\n-LL |   fn wat() -> impl core::fmt::Display {\n-   |  _____________________________________^\n-LL | |\n-LL | |     fn why() {}\n-LL | | }\n-   | |_^ `()` cannot be formatted with the default formatter\n-   |\n-   = help: the trait `std::fmt::Display` is not implemented for `()`\n-   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-\n-error[E0277]: `()` doesn't implement `std::fmt::Display`\n-  --> $DIR/issue-81098.rs:10:12\n+  --> $DIR/issue-81098.rs:9:12\n    |\n LL | fn ok() -> impl core::fmt::Display {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ `()` cannot be formatted with the default formatter\n-LL |\n LL |     1;\n    |     -- help: remove this semicolon\n    |     |\n@@ -34,19 +20,6 @@ LL |     1;\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n \n-error[E0277]: `()` doesn't implement `std::fmt::Display`\n-  --> $DIR/issue-81098.rs:10:36\n-   |\n-LL |   fn ok() -> impl core::fmt::Display {\n-   |  ____________________________________^\n-LL | |\n-LL | |     1;\n-LL | | }\n-   | |_^ `()` cannot be formatted with the default formatter\n-   |\n-   = help: the trait `std::fmt::Display` is not implemented for `()`\n-   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "e47f7dc3566a9033589b014b943524674b23e3b7", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/missing-lifetimes-in-signature.rs:38:11\n+  --> $DIR/missing-lifetimes-in-signature.rs:37:11\n    |\n LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        -  ^^ undeclared lifetime\n@@ -24,7 +24,7 @@ LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:32:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:31:5\n    |\n LL |   fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |          - help: consider adding an explicit lifetime bound...: `G: 'a`\n@@ -40,15 +40,15 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                          ^^^^^^\n note: ...so that the type `G` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:32:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:31:5\n    |\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:55:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:53:5\n    |\n LL |   fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |              -- help: consider adding an explicit lifetime bound...: `G: 'b +`\n@@ -59,44 +59,44 @@ LL | |     }\n    | |_____^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:49:34\n+  --> $DIR/missing-lifetimes-in-signature.rs:48:34\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                  ^^^^^^\n note: ...so that the type `G` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:55:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:53:5\n    |\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:65:9\n+  --> $DIR/missing-lifetimes-in-signature.rs:62:9\n    |\n LL |       fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                  -- help: consider adding an explicit lifetime bound...: `G: 'c +`\n-...\n+LL |\n LL | /         move || {\n LL | |             *dest = g.get();\n LL | |         }\n    | |_________^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:47\n+  --> $DIR/missing-lifetimes-in-signature.rs:60:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                               ^^^^^^\n note: ...so that the type `G` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:65:9\n+  --> $DIR/missing-lifetimes-in-signature.rs:62:9\n    |\n LL | /         move || {\n LL | |             *dest = g.get();\n LL | |         }\n    | |_________^\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:77:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:74:5\n    |\n LL |   fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |              -- help: consider adding an explicit lifetime bound...: `G: 'b +`\n@@ -107,20 +107,20 @@ LL | |     }\n    | |_____^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:72:34\n+  --> $DIR/missing-lifetimes-in-signature.rs:69:34\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                  ^^^^^^\n note: ...so that the type `G` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:77:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:74:5\n    |\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n-  --> $DIR/missing-lifetimes-in-signature.rs:77:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:74:5\n    |\n LL |   fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                    ------ help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n@@ -131,7 +131,7 @@ LL | |     }\n    | |_____^ lifetime `'a` required\n \n error[E0309]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:89:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:85:5\n    |\n LL |   fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n    |              - help: consider adding an explicit lifetime bound...: `G: 'a`"}, {"sha": "0a3e6b481632d883826e4a6e620a5042f3219ca6", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -28,7 +28,6 @@ fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n where\n     G: Get<T>,\n {\n-    //~^ ERROR the parameter type `G` may not live long enough\n     move || {\n         *dest = g.get();\n     }\n@@ -51,7 +50,6 @@ fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n where\n     G: Get<T>,\n {\n-    //~^ ERROR the parameter type `G` may not live long enough\n     move || {\n         *dest = g.get();\n     }\n@@ -61,7 +59,6 @@ where\n impl<'a> Foo {\n     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n         //~^ ERROR the parameter type `G` may not live long enough\n-        //~| ERROR the parameter type `G` may not live long enough\n         move || {\n             *dest = g.get();\n         }\n@@ -85,7 +82,6 @@ fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n where\n     G: Get<T>,\n {\n-    //~^ ERROR the parameter type `G` may not live long enough\n     move || {\n         *dest = g.get();\n     }"}, {"sha": "7526aadb38cbcadecf30c2fcfe2483b3ee1fd53b", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 14, "deletions": 140, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/missing-lifetimes-in-signature.rs:38:11\n+  --> $DIR/missing-lifetimes-in-signature.rs:37:11\n    |\n LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        -  ^^ undeclared lifetime\n@@ -34,7 +34,7 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                          ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:32:5: 34:6]` will meet its required lifetime bounds\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:31:5: 33:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:26:37\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n@@ -45,54 +45,18 @@ LL | fn bar<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |        ~~~~~                                                   ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:30:1\n-   |\n-LL | / {\n-LL | |\n-LL | |     move || {\n-LL | |         *dest = g.get();\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:26:26\n-   |\n-LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-   |                          ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:32:5: 34:6]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:30:1\n-   |\n-LL | / {\n-LL | |\n-LL | |     move || {\n-LL | |         *dest = g.get();\n-LL | |     }\n-LL | | }\n-   | |_^\n-help: consider introducing an explicit lifetime bound\n-   |\n-LL ~ fn bar<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL |\n-LL | where\n-LL |     G: Get<T>,\n-LL | {\n-LL |\n- ...\n-\n-error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:49:45\n+  --> $DIR/missing-lifetimes-in-signature.rs:48:45\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:49:34\n+  --> $DIR/missing-lifetimes-in-signature.rs:48:34\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                  ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:55:5: 57:6]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:49:45\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:53:5: 55:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:48:45\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n@@ -102,54 +66,18 @@ LL | fn qux<'b, 'a, G: 'b + 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + '\n    |        +++     ~~~~~~~                                                  ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:53:1\n-   |\n-LL | / {\n-LL | |\n-LL | |     move || {\n-LL | |         *dest = g.get();\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:49:34\n-   |\n-LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-   |                                  ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:55:5: 57:6]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:53:1\n-   |\n-LL | / {\n-LL | |\n-LL | |     move || {\n-LL | |         *dest = g.get();\n-LL | |     }\n-LL | | }\n-   | |_^\n-help: consider introducing an explicit lifetime bound\n-   |\n-LL ~ fn qux<'b, 'a, G: 'b + 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL |\n-LL | where\n-LL |     G: Get<T>,\n-LL | {\n-LL |\n- ...\n-\n-error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:58\n+  --> $DIR/missing-lifetimes-in-signature.rs:60:58\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:47\n+  --> $DIR/missing-lifetimes-in-signature.rs:60:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                               ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:65:9: 67:10]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:58\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:62:9: 64:10]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:60:58\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n@@ -158,77 +86,23 @@ help: consider introducing an explicit lifetime bound\n LL |     fn qux<'c, 'b, G: 'c + Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'c {\n    |            +++     ~~~~~~~                                                           ++++\n \n-error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:77\n-   |\n-LL |       fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |  _____________________________________________________________________________^\n-LL | |\n-LL | |\n-LL | |         move || {\n-LL | |             *dest = g.get();\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:47\n-   |\n-LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |                                               ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:65:9: 67:10]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:77\n-   |\n-LL |       fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |  _____________________________________________________________________________^\n-LL | |\n-LL | |\n-LL | |         move || {\n-LL | |             *dest = g.get();\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-help: consider introducing an explicit lifetime bound\n-   |\n-LL ~     fn qux<'c, 'b, G: 'c + Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-LL |\n-LL |\n-LL |         move || {\n-LL |             *dest = g.get();\n-LL |         }\n- ...\n-\n error[E0621]: explicit lifetime required in the type of `dest`\n-  --> $DIR/missing-lifetimes-in-signature.rs:72:45\n+  --> $DIR/missing-lifetimes-in-signature.rs:69:45\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                  ------     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n    |                                  |\n    |                                  help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n \n error[E0309]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:83:44\n+  --> $DIR/missing-lifetimes-in-signature.rs:80:44\n    |\n LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:89:5: 91:6]` will meet its required lifetime bounds\n+   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:85:5: 87:6]` will meet its required lifetime bounds\n    |            |\n    |            help: consider adding an explicit lifetime bound...: `G: 'a`\n \n-error[E0309]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:87:1\n-   |\n-LL |   fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-   |              - help: consider adding an explicit lifetime bound...: `G: 'a`\n-...\n-LL | / {\n-LL | |\n-LL | |     move || {\n-LL | |         *dest = g.get();\n-LL | |     }\n-LL | | }\n-   | |_^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:89:5: 91:6]` will meet its required lifetime bounds\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0261, E0309, E0621, E0700.\n For more information about an error, try `rustc --explain E0261`."}, {"sha": "82248971692ce4e5ab2e41abfebceda7000e205d", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -11,7 +11,6 @@ impl Foo<()> for () { }\n \n fn foo() -> impl Foo<FooX> {\n     //~^ ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n-    //~| ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n     // FIXME(type-alias-impl-trait): We could probably make this work.\n     ()\n }"}, {"sha": "f98da9f7f920a60cad1430f09feac794a34b77ae", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.stderr", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -6,20 +6,6 @@ LL | fn foo() -> impl Foo<FooX> {\n    |\n    = help: the trait `Foo<()>` is implemented for `()`\n \n-error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n-  --> $DIR/nested-tait-inference.rs:12:28\n-   |\n-LL |   fn foo() -> impl Foo<FooX> {\n-   |  ____________________________^\n-LL | |\n-LL | |\n-LL | |     // FIXME(type-alias-impl-trait): We could probably make this work.\n-LL | |     ()\n-LL | | }\n-   | |_^ the trait `Foo<FooX>` is not implemented for `()`\n-   |\n-   = help: the trait `Foo<()>` is implemented for `()`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "0d7f5bad25f11bda3617c3e07facf5c3974c85c5", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -12,7 +12,6 @@ impl Foo<u32> for () {}\n \n fn foo() -> impl Foo<FooX> {\n     //~^ ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n-    //~| ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n     ()\n }\n "}, {"sha": "54f571ad3e37e616fed91f8bfedfac8d47978e60", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109008a1c104ac672c4852ee3dee55a8f2bda789/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=109008a1c104ac672c4852ee3dee55a8f2bda789", "patch": "@@ -8,21 +8,6 @@ LL | fn foo() -> impl Foo<FooX> {\n              <() as Foo<()>>\n              <() as Foo<u32>>\n \n-error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n-  --> $DIR/nested-tait-inference2.rs:13:28\n-   |\n-LL |   fn foo() -> impl Foo<FooX> {\n-   |  ____________________________^\n-LL | |\n-LL | |\n-LL | |     ()\n-LL | | }\n-   | |_^ the trait `Foo<FooX>` is not implemented for `()`\n-   |\n-   = help: the following other types implement trait `Foo<A>`:\n-             <() as Foo<()>>\n-             <() as Foo<u32>>\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}]}