{"sha": "36fb7544761aed081c0dc5b5cf3f9d0267752e53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZmI3NTQ0NzYxYWVkMDgxYzBkYzViNWNmM2Y5ZDAyNjc3NTJlNTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T19:18:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T19:34:44Z"}, "message": "Index obj and res ctor metadata by ctor id, not item id\n\nBoth the type and the ctor were trying to use the same id and this was making\ncreader unable to find the ctor when running 'rustc --ls'", "tree": {"sha": "439ffa255953d658dacb175e5b2d31bfeff4acba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439ffa255953d658dacb175e5b2d31bfeff4acba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36fb7544761aed081c0dc5b5cf3f9d0267752e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36fb7544761aed081c0dc5b5cf3f9d0267752e53", "html_url": "https://github.com/rust-lang/rust/commit/36fb7544761aed081c0dc5b5cf3f9d0267752e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36fb7544761aed081c0dc5b5cf3f9d0267752e53/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b55277002bac2c192f2ecb9798bd6481b7ec5f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/b55277002bac2c192f2ecb9798bd6481b7ec5f00", "html_url": "https://github.com/rust-lang/rust/commit/b55277002bac2c192f2ecb9798bd6481b7ec5f00"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "1b71771238c1efe52f426bc62b67e6f71599e004", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/36fb7544761aed081c0dc5b5cf3f9d0267752e53/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fb7544761aed081c0dc5b5cf3f9d0267752e53/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=36fb7544761aed081c0dc5b5cf3f9d0267752e53", "patch": "@@ -572,38 +572,42 @@ fn encode_info_for_item(@trans::crate_ctxt cx, &ebml::writer ebml_w,\n                                     tps);\n         }\n         case (item_res(_, _, ?tps, ?ctor_id)) {\n-            ebml::start_tag(ebml_w, tag_items_data_item);\n-            encode_def_id(ebml_w, local_def(ctor_id));\n-            encode_kind(ebml_w, 'f' as u8);\n-            encode_type_param_count(ebml_w, tps);\n             auto fn_ty = trans::node_id_type(cx, item.id);\n-            encode_type(cx, ebml_w, fn_ty);\n-            encode_symbol(cx, ebml_w, ctor_id);\n-            ebml::end_tag(ebml_w);\n-            index += [tup(item.id, ebml_w.writer.tell())];\n+\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(item.id));\n             encode_kind(ebml_w, 'y' as u8);\n             encode_type_param_count(ebml_w, tps);\n             encode_type(cx, ebml_w, ty::ty_fn_ret(cx.tcx, fn_ty));\n             ebml::end_tag(ebml_w);\n-        }\n-        case (item_obj(_, ?tps, ?ctor_id)) {\n+\n+            index += [tup(ctor_id, ebml_w.writer.tell())];\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(ctor_id));\n             encode_kind(ebml_w, 'f' as u8);\n             encode_type_param_count(ebml_w, tps);\n-            auto fn_ty = trans::node_id_type(cx, ctor_id);\n             encode_type(cx, ebml_w, fn_ty);\n             encode_symbol(cx, ebml_w, ctor_id);\n             ebml::end_tag(ebml_w);\n-            index += [tup(item.id, ebml_w.writer.tell())];\n+        }\n+        case (item_obj(_, ?tps, ?ctor_id)) {\n+            auto fn_ty = trans::node_id_type(cx, ctor_id);\n+\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(item.id));\n             encode_kind(ebml_w, 'y' as u8);\n             encode_type_param_count(ebml_w, tps);\n             encode_type(cx, ebml_w, ty::ty_fn_ret(cx.tcx, fn_ty));\n             ebml::end_tag(ebml_w);\n+\n+            index += [tup(ctor_id, ebml_w.writer.tell())];\n+            ebml::start_tag(ebml_w, tag_items_data_item);\n+            encode_def_id(ebml_w, local_def(ctor_id));\n+            encode_kind(ebml_w, 'f' as u8);\n+            encode_type_param_count(ebml_w, tps);\n+            encode_type(cx, ebml_w, fn_ty);\n+            encode_symbol(cx, ebml_w, ctor_id);\n+            ebml::end_tag(ebml_w);\n         }\n     }\n }"}]}