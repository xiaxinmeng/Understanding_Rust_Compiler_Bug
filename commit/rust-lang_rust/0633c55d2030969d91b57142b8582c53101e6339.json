{"sha": "0633c55d2030969d91b57142b8582c53101e6339", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MzNjNTVkMjAzMDk2OWQ5MWI1NzE0MmI4NTgyYzUzMTAxZTYzMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-23T17:34:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-23T17:34:18Z"}, "message": "Auto merge of #59068 - ljedrz:kill_off_NodeId_stragglers, r=Zoxc\n\nHirIdification: kill off NodeId stragglers\n\nThe final stages of HirIdification (#57578).\n\nThis PR, along with https://github.com/rust-lang/rust/pull/59042, should finalize the HirIdification process (at least the more straightforward bits).\n\n- replace `NodeId` with `HirId` in `trait_impls`\n- remove all `NodeId`s from `borrowck`\n- remove all `NodeId`s from `typeck`\n- remove all `NodeId`s from `mir`\n- remove `trait_auto_impl` (unused)\n\nI would be cool to also remove `NodeId` from `hir::def::Def`, `middle::privacy::AccessLevel`  and `hir::ItemId`, but I don't know if this is feasible.\n\nI'll be happy to do more if I've missed anything.", "tree": {"sha": "31ef6ac32f2a129dae9507040b48dffdb75f69e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ef6ac32f2a129dae9507040b48dffdb75f69e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0633c55d2030969d91b57142b8582c53101e6339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0633c55d2030969d91b57142b8582c53101e6339", "html_url": "https://github.com/rust-lang/rust/commit/0633c55d2030969d91b57142b8582c53101e6339", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0633c55d2030969d91b57142b8582c53101e6339/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f118f6a6c8fda5101f956243c716632a56f5188", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f118f6a6c8fda5101f956243c716632a56f5188", "html_url": "https://github.com/rust-lang/rust/commit/0f118f6a6c8fda5101f956243c716632a56f5188"}, {"sha": "584d61a2bee9af2af572103899fc3e485e0a1fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/584d61a2bee9af2af572103899fc3e485e0a1fa8", "html_url": "https://github.com/rust-lang/rust/commit/584d61a2bee9af2af572103899fc3e485e0a1fa8"}], "stats": {"total": 118, "additions": 43, "deletions": 75}, "files": [{"sha": "2251e67233c5fc65820a998b8f42e7957eafb516", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -89,8 +89,7 @@ pub struct LoweringContext<'a> {\n     bodies: BTreeMap<hir::BodyId, hir::Body>,\n     exported_macros: Vec<hir::MacroDef>,\n \n-    trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n-    trait_auto_impl: BTreeMap<DefId, NodeId>,\n+    trait_impls: BTreeMap<DefId, Vec<hir::HirId>>,\n \n     modules: BTreeMap<NodeId, hir::ModuleItems>,\n \n@@ -233,7 +232,6 @@ pub fn lower_crate(\n         impl_items: BTreeMap::new(),\n         bodies: BTreeMap::new(),\n         trait_impls: BTreeMap::new(),\n-        trait_auto_impl: BTreeMap::new(),\n         modules: BTreeMap::new(),\n         exported_macros: Vec::new(),\n         catch_scopes: Vec::new(),\n@@ -514,7 +512,6 @@ impl<'a> LoweringContext<'a> {\n             bodies: self.bodies,\n             body_ids,\n             trait_impls: self.trait_impls,\n-            trait_auto_impl: self.trait_auto_impl,\n             modules: self.modules,\n         }\n     }\n@@ -2968,6 +2965,7 @@ impl<'a> LoweringContext<'a> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n+                let lowered_trait_impl_id = self.lower_node_id(id).hir_id;\n                 let (generics, (trait_ref, lowered_ty)) = self.add_in_band_defs(\n                     ast_generics,\n                     def_id,\n@@ -2979,7 +2977,8 @@ impl<'a> LoweringContext<'a> {\n \n                         if let Some(ref trait_ref) = trait_ref {\n                             if let Def::Trait(def_id) = trait_ref.path.def {\n-                                this.trait_impls.entry(def_id).or_default().push(id);\n+                                this.trait_impls.entry(def_id).or_default().push(\n+                                    lowered_trait_impl_id);\n                             }\n                         }\n "}, {"sha": "e88f9e60702f7865db9d762904bb34f2d213e6e1", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -121,7 +121,6 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 impl_items: _,\n                 bodies: _,\n                 trait_impls: _,\n-                trait_auto_impl: _,\n                 body_ids: _,\n                 modules: _,\n             } = *krate;"}, {"sha": "3e8da882eed15b21d68a764cfbd38c8708da3356", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -557,26 +557,14 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn trait_impls(&self, trait_did: DefId) -> &'hir [NodeId] {\n+    pub fn trait_impls(&self, trait_did: DefId) -> &'hir [HirId] {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::AllLocalTraitImpls));\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n         self.forest.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n-    pub fn trait_auto_impl(&self, trait_did: DefId) -> Option<NodeId> {\n-        self.dep_graph.read(DepNode::new_no_params(DepKind::AllLocalTraitImpls));\n-\n-        // N.B., intentionally bypass `self.forest.krate()` so that we\n-        // do not trigger a read of the whole krate here\n-        self.forest.krate.trait_auto_impl.get(&trait_did).cloned()\n-    }\n-\n-    pub fn trait_is_auto(&self, trait_did: DefId) -> bool {\n-        self.trait_auto_impl(trait_did).is_some()\n-    }\n-\n     /// Gets the attributes on the crate. This is preferable to\n     /// invoking `krate.attrs` because it registers a tighter\n     /// dep-graph access."}, {"sha": "823de08874e60fd0c91128457e2d3bbf972dc34a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -727,8 +727,7 @@ pub struct Crate {\n     pub trait_items: BTreeMap<TraitItemId, TraitItem>,\n     pub impl_items: BTreeMap<ImplItemId, ImplItem>,\n     pub bodies: BTreeMap<BodyId, Body>,\n-    pub trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n-    pub trait_auto_impl: BTreeMap<DefId, NodeId>,\n+    pub trait_impls: BTreeMap<DefId, Vec<HirId>>,\n \n     /// A list of the body ids written out in the order in which they\n     /// appear in the crate. If you're going to process all the bodies"}, {"sha": "143b5bf3762346cabbcf413d6845e0352bfe3b1f", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -183,8 +183,8 @@ pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         }\n \n-        for &node_id in tcx.hir().trait_impls(trait_id) {\n-            add_impl(tcx.hir().local_def_id(node_id));\n+        for &hir_id in tcx.hir().trait_impls(trait_id) {\n+            add_impl(tcx.hir().local_def_id_from_hir_id(hir_id));\n         }\n     }\n "}, {"sha": "9680dd4ce2faf037b96eaa45f5ec46286d259950", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -2,13 +2,13 @@\n //! does not exceed the lifetime of the value being borrowed.\n \n use crate::borrowck::*;\n+use rustc::hir::HirId;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n use rustc::ty;\n \n-use syntax::ast;\n use syntax_pos::Span;\n use log::debug;\n \n@@ -51,7 +51,7 @@ struct GuaranteeLifetimeContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n-    fn check(&self, cmt: &mc::cmt_<'tcx>, discr_scope: Option<ast::NodeId>) -> R {\n+    fn check(&self, cmt: &mc::cmt_<'tcx>, discr_scope: Option<HirId>) -> R {\n         //! Main routine. Walks down `cmt` until we find the\n         //! \"guarantor\". Reports an error if `self.loan_region` is\n         //! larger than scope of `cmt`."}, {"sha": "3892a18b1400e80661871657f621d962044b32e7", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -14,7 +14,6 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n \n-use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n use log::debug;\n@@ -141,8 +140,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> {\n               assignee_cmt: &mc::cmt_<'tcx>,\n               _: euv::MutateMode)\n     {\n-        let node_id = self.bccx.tcx.hir().hir_to_node_id(assignment_id);\n-        self.guarantee_assignment_valid(node_id,\n+        self.guarantee_assignment_valid(assignment_id,\n                                         assignment_span,\n                                         assignee_cmt);\n     }\n@@ -256,7 +254,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n \n     /// Guarantees that `cmt` is assignable, or reports an error.\n     fn guarantee_assignment_valid(&mut self,\n-                                  assignment_id: ast::NodeId,\n+                                  assignment_id: hir::HirId,\n                                   assignment_span: Span,\n                                   cmt: &mc::cmt_<'tcx>) {\n \n@@ -290,8 +288,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                     self.mark_loan_path_as_mutated(&lp);\n                 }\n                 gather_moves::gather_assignment(self.bccx, &self.move_data,\n-                                                self.bccx.tcx.hir().node_to_hir_id(assignment_id)\n-                                                    .local_id,\n+                                                assignment_id.local_id,\n                                                 assignment_span,\n                                                 lp);\n             }"}, {"sha": "4e1d360562d9d22fbb3a067fe6f44a8985519d42", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -34,7 +34,6 @@ use std::fmt;\n use std::rc::Rc;\n use rustc_data_structures::sync::Lrc;\n use std::hash::{Hash, Hasher};\n-use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use log::debug;\n@@ -399,12 +398,12 @@ pub enum LoanPathElem<'tcx> {\n }\n \n fn closure_to_block(closure_id: LocalDefId,\n-                    tcx: TyCtxt<'_, '_, '_>) -> ast::NodeId {\n+                    tcx: TyCtxt<'_, '_, '_>) -> HirId {\n     let closure_id = tcx.hir().local_def_id_to_node_id(closure_id);\n     match tcx.hir().get(closure_id) {\n         Node::Expr(expr) => match expr.node {\n             hir::ExprKind::Closure(.., body_id, _, _) => {\n-                tcx.hir().hir_to_node_id(body_id.hir_id)\n+                body_id.hir_id\n             }\n             _ => {\n                 bug!(\"encountered non-closure id: {}\", closure_id)\n@@ -422,8 +421,7 @@ impl<'a, 'tcx> LoanPath<'tcx> {\n             }\n             LpUpvar(upvar_id) => {\n                 let block_id = closure_to_block(upvar_id.closure_expr_id, bccx.tcx);\n-                let hir_id = bccx.tcx.hir().node_to_hir_id(block_id);\n-                region::Scope { id: hir_id.local_id, data: region::ScopeData::Node }\n+                region::Scope { id: block_id.local_id, data: region::ScopeData::Node }\n             }\n             LpDowncast(ref base, _) |\n             LpExtend(ref base, ..) => base.kill_scope(bccx),"}, {"sha": "ae8dfa8144fd948ac905b6e399454c3dc733ff5e", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -23,7 +23,6 @@ use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_errors::DiagnosticBuilder;\n use std::iter;\n-use syntax::ast;\n \n use super::ToRegionVid;\n \n@@ -200,12 +199,10 @@ impl<'tcx> UniversalRegions<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n         let tcx = infcx.tcx;\n-        let mir_node_id = tcx.hir().as_local_node_id(mir_def_id).unwrap();\n-        let mir_hir_id = tcx.hir().node_to_hir_id(mir_node_id);\n+        let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id).unwrap();\n         UniversalRegionsBuilder {\n             infcx,\n             mir_def_id,\n-            mir_node_id,\n             mir_hir_id,\n             param_env,\n         }.build()\n@@ -370,7 +367,6 @@ struct UniversalRegionsBuilder<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n     mir_def_id: DefId,\n     mir_hir_id: HirId,\n-    mir_node_id: ast::NodeId,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -475,7 +471,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n \n-        match tcx.hir().body_owner_kind(self.mir_node_id) {\n+        match tcx.hir().body_owner_kind_by_hir_id(self.mir_hir_id) {\n             BodyOwnerKind::Closure |\n             BodyOwnerKind::Fn => {\n                 let defining_ty = if self.mir_def_id == closure_base_def_id {"}, {"sha": "1138edcb3757e0f0ae49d44504438673d7dfd8be", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -373,7 +373,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// finish building it.\n     guard_context: Vec<GuardFrame>,\n \n-    /// Maps `NodeId`s of variable bindings to the `Local`s created for them.\n+    /// Maps `HirId`s of variable bindings to the `Local`s created for them.\n     /// (A match binding can have two locals; the 2nd is for the arm's guard.)\n     var_indices: HirIdMap<LocalsForNode>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n@@ -451,7 +451,7 @@ impl BlockContext {\n \n #[derive(Debug)]\n enum LocalsForNode {\n-    /// In the usual case, a `NodeId` for an identifier maps to at most\n+    /// In the usual case, a `HirId` for an identifier maps to at most\n     /// one `Local` declaration.\n     One(Local),\n "}, {"sha": "5e3ebcb3446c6620dc49e070181efb6d58ba6c0b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         )?;\n \n         if let Some(import_id) = pick.import_id {\n-            let import_def_id = self.tcx.hir().local_def_id(import_id);\n+            let import_def_id = self.tcx.hir().local_def_id_from_hir_id(import_id);\n             debug!(\"used_trait_import: {:?}\", import_def_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap().insert(import_def_id);\n@@ -428,7 +428,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                        self_ty, expr_id, ProbeScope::TraitsInScope)?;\n         debug!(\"resolve_ufcs: pick={:?}\", pick);\n         if let Some(import_id) = pick.import_id {\n-            let import_def_id = tcx.hir().local_def_id(import_id);\n+            let import_def_id = tcx.hir().local_def_id_from_hir_id(import_id);\n             debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap().insert(import_def_id);"}, {"sha": "40dd62173359474308ba30429af5a302434ce1f2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -120,7 +120,7 @@ struct Candidate<'tcx> {\n     xform_ret_ty: Option<Ty<'tcx>>,\n     item: ty::AssociatedItem,\n     kind: CandidateKind<'tcx>,\n-    import_id: Option<ast::NodeId>,\n+    import_id: Option<hir::HirId>,\n }\n \n #[derive(Debug)]\n@@ -145,7 +145,7 @@ enum ProbeResult {\n pub struct Pick<'tcx> {\n     pub item: ty::AssociatedItem,\n     pub kind: PickKind<'tcx>,\n-    pub import_id: Option<ast::NodeId>,\n+    pub import_id: Option<hir::HirId>,\n \n     // Indicates that the source expression should be autoderef'd N times\n     //\n@@ -836,7 +836,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n-                    let import_id = trait_candidate.import_id;\n+                    let import_id = trait_candidate.import_id.map(|node_id|\n+                        self.fcx.tcx.hir().node_to_hir_id(node_id));\n                     let result = self.assemble_extension_candidates_for_trait(import_id, trait_did);\n                     result?;\n                 }\n@@ -887,7 +888,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_extension_candidates_for_trait(&mut self,\n-                                               import_id: Option<ast::NodeId>,\n+                                               import_id: Option<hir::HirId>,\n                                                trait_def_id: DefId)\n                                                -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\","}, {"sha": "a11327b24beb591b18d21c7cb5d2bf429954c8e5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -5016,10 +5016,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // that highlight errors inline.\n                     let mut sp = blk.span;\n                     let mut fn_span = None;\n-                    let blk_node_id = self.tcx.hir().hir_to_node_id(blk.hir_id);\n-                    if let Some((decl, ident)) = self.get_parent_fn_decl(blk_node_id) {\n+                    if let Some((decl, ident)) = self.get_parent_fn_decl(blk.hir_id) {\n                         let ret_sp = decl.output.span();\n-                        if let Some(block_sp) = self.parent_item_span(blk_node_id) {\n+                        if let Some(block_sp) = self.parent_item_span(blk.hir_id) {\n                             // HACK: on some cases (`ui/liveness/liveness-issue-2163.rs`) the\n                             // output would otherwise be incorrect and even misleading. Make sure\n                             // the span we're aiming at correspond to a `fn` body.\n@@ -5059,8 +5058,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n-    fn parent_item_span(&self, id: ast::NodeId) -> Option<Span> {\n-        let node = self.tcx.hir().get(self.tcx.hir().get_parent(id));\n+    fn parent_item_span(&self, id: hir::HirId) -> Option<Span> {\n+        let node = self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_item(id));\n         match node {\n             Node::Item(&hir::Item {\n                 node: hir::ItemKind::Fn(_, _, _, body_id), ..\n@@ -5078,9 +5077,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n-    /// Given a function block's `NodeId`, returns its `FnDecl` if it exists, or `None` otherwise.\n-    fn get_parent_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, ast::Ident)> {\n-        let parent = self.tcx.hir().get(self.tcx.hir().get_parent(blk_id));\n+    /// Given a function block's `HirId`, returns its `FnDecl` if it exists, or `None` otherwise.\n+    fn get_parent_fn_decl(&self, blk_id: hir::HirId) -> Option<(hir::FnDecl, ast::Ident)> {\n+        let parent = self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_item(blk_id));\n         self.get_node_fn_decl(parent).map(|(fn_decl, ident, _)| (fn_decl, ident))\n     }\n "}, {"sha": "c2404917fa7a7366dbddf3e1c099133306adca0c", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -15,7 +15,6 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::DefIdSet;\n use rustc_data_structures::sync::Lrc;\n use std::mem;\n-use syntax::ast;\n use syntax_pos::Span;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -444,8 +443,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn visit_opaque_types(&mut self, span: Span) {\n         for (&def_id, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n-            let node_id = self.tcx().hir().as_local_node_id(def_id).unwrap();\n-            let instantiated_ty = self.resolve(&opaque_defn.concrete_ty, &node_id);\n+            let hir_id = self.tcx().hir().as_local_hir_id(def_id).unwrap();\n+            let instantiated_ty = self.resolve(&opaque_defn.concrete_ty, &hir_id);\n \n             let generics = self.tcx().generics_of(def_id);\n \n@@ -731,12 +730,6 @@ impl Locatable for Span {\n     }\n }\n \n-impl Locatable for ast::NodeId {\n-    fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span {\n-        tcx.hir().span(*self)\n-    }\n-}\n-\n impl Locatable for DefIndex {\n     fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span {\n         let hir_id = tcx.hir().def_index_to_hir_id(*self);"}, {"sha": "c3b08569d2f1f0ba151e167ff7a9c34f02ca79dc", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n     {\n         if Some(self.trait_def_id) == trait_def_id {\n             for &impl_id in self.tcx.hir().trait_impls(self.trait_def_id) {\n-                let impl_def_id = self.tcx.hir().local_def_id(impl_id);\n+                let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(impl_id);\n                 f(self.tcx, impl_def_id);\n             }\n         }"}, {"sha": "40f01ebb3c19f75de71fedc8d6e4aaf3177eaae8", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -5,22 +5,21 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n+use crate::hir::HirId;\n use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::traits;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::query::Providers;\n use rustc::util::common::time;\n \n-use syntax::ast;\n-\n mod builtin;\n mod inherent_impls;\n mod inherent_impls_overlap;\n mod orphan;\n mod unsafety;\n \n-fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n-    let impl_def_id = tcx.hir().local_def_id(node_id);\n+fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_id: HirId) {\n+    let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n \n     // If there are no traits, then this implementation must have a\n     // base type.\n@@ -160,8 +159,8 @@ pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n /// Overlap: no two impls for the same trait are implemented for the\n /// same type. Likewise, no two inherent impls for a given type\n /// constructor provide a method with the same name.\n-fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n-    let impl_def_id = tcx.hir().local_def_id(node_id);\n+fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_id: HirId) {\n+    let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;\n "}, {"sha": "611291c2688f58cbfcea26214d99709f05392d5b", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0633c55d2030969d91b57142b8582c53101e6339/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=0633c55d2030969d91b57142b8582c53101e6339", "patch": "@@ -119,7 +119,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     // doesn't work with it anyway, so pull them from the HIR map instead\n     for &trait_did in cx.all_traits.iter() {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n-            let impl_did = cx.tcx.hir().local_def_id(impl_node);\n+            let impl_did = cx.tcx.hir().local_def_id_from_hir_id(impl_node);\n             inline::build_impl(cx, impl_did, &mut new_items);\n         }\n     }"}]}