{"sha": "168c83a0b78588ecbe30d0adf7d7d794f62e4312", "node_id": "C_kwDOAAsO6NoAKDE2OGM4M2EwYjc4NTg4ZWNiZTMwZDBhZGY3ZDdkNzk0ZjYyZTQzMTI", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-05-21T03:08:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-24T15:16:36Z"}, "message": "Adjust Miri to also require return places everywhere", "tree": {"sha": "e0f679f5a392d61763d3a538536625d0f51b6b63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0f679f5a392d61763d3a538536625d0f51b6b63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/168c83a0b78588ecbe30d0adf7d7d794f62e4312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/168c83a0b78588ecbe30d0adf7d7d794f62e4312", "html_url": "https://github.com/rust-lang/rust/commit/168c83a0b78588ecbe30d0adf7d7d794f62e4312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/168c83a0b78588ecbe30d0adf7d7d794f62e4312/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede9ae6c513bb4fa339f624f55ce14a90abb4ada", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede9ae6c513bb4fa339f624f55ce14a90abb4ada", "html_url": "https://github.com/rust-lang/rust/commit/ede9ae6c513bb4fa339f624f55ce14a90abb4ada"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "527ff032d6703521ee9d78ef9f81ecc7062d100a", "filename": "src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -275,7 +275,7 @@ pub fn report_error<'tcx, 'mir>(\n     for (i, frame) in ecx.active_thread_stack().iter().enumerate() {\n         trace!(\"-------------------\");\n         trace!(\"Frame {}\", i);\n-        trace!(\"    return: {:?}\", frame.return_place.map(|p| *p));\n+        trace!(\"    return: {:?}\", *frame.return_place);\n         for (i, local) in frame.locals.iter().enumerate() {\n             trace!(\"    local {}: {:?}\", i, local.value);\n         }"}, {"sha": "badda8f3bc3938910a652087d0970a1c2be100cf", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -277,7 +277,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n                 start_instance,\n                 Abi::Rust,\n                 &[Scalar::from_pointer(main_ptr, &ecx).into(), argc.into(), argv],\n-                Some(&ret_place.into()),\n+                &ret_place.into(),\n                 StackPopCleanup::Root { cleanup: true },\n             )?;\n         }\n@@ -286,7 +286,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n                 entry_instance,\n                 Abi::Rust,\n                 &[argc.into(), argv],\n-                Some(&ret_place.into()),\n+                &ret_place.into(),\n                 StackPopCleanup::Root { cleanup: true },\n             )?;\n         }"}, {"sha": "24c471a8b0ba8a21422fc5f10b7adb278d6f2f86", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -240,7 +240,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         f: ty::Instance<'tcx>,\n         caller_abi: Abi,\n         args: &[Immediate<Tag>],\n-        dest: Option<&PlaceTy<'tcx, Tag>>,\n+        dest: &PlaceTy<'tcx, Tag>,\n         stack_pop: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();"}, {"sha": "c5c884e8d7a04cf5115f009264c42801bc416209", "filename": "src/machine.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -512,10 +512,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         instance: ty::Instance<'tcx>,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n         unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n-        ecx.find_mir_or_eval_fn(instance, abi, args, ret, unwind)\n+        ecx.find_mir_or_eval_fn(instance, abi, args, dest, ret, unwind)\n     }\n \n     #[inline(always)]\n@@ -524,21 +525,23 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         fn_val: Dlsym,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n         _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n-        ecx.call_dlsym(fn_val, abi, args, ret)\n+        ecx.call_dlsym(fn_val, abi, args, dest, ret)\n     }\n \n     #[inline(always)]\n     fn call_intrinsic(\n         ecx: &mut MiriEvalContext<'mir, 'tcx>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n         unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n-        ecx.call_intrinsic(instance, args, ret, unwind)\n+        ecx.call_intrinsic(instance, args, dest, ret, unwind)\n     }\n \n     #[inline(always)]"}, {"sha": "d83a309c3e1f703c31c13dc8b96877d81e0d4f53", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -32,13 +32,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         dlsym: Dlsym,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         match dlsym {\n-            Dlsym::Posix(dlsym) => posix::EvalContextExt::call_dlsym(this, dlsym, abi, args, ret),\n+            Dlsym::Posix(dlsym) =>\n+                posix::EvalContextExt::call_dlsym(this, dlsym, abi, args, dest, ret),\n             Dlsym::Windows(dlsym) =>\n-                windows::EvalContextExt::call_dlsym(this, dlsym, abi, args, ret),\n+                windows::EvalContextExt::call_dlsym(this, dlsym, abi, args, dest, ret),\n         }\n     }\n }"}, {"sha": "e978391801f1e72bb325c55d7922e7664e6d3a25", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -232,15 +232,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         def_id: DefId,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n         unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n         let this = self.eval_context_mut();\n         let link_name = this.item_link_name(def_id);\n         let tcx = this.tcx.tcx;\n \n         // First: functions that diverge.\n-        let (dest, ret) = match ret {\n+        let ret = match ret {\n             None =>\n                 match &*link_name.as_str() {\n                     \"miri_start_panic\" => {"}, {"sha": "1f06971a3e70db0128c06876f4c3dc95f451bbe4", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -22,19 +22,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n         _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n-        if this.emulate_intrinsic(instance, args, ret)? {\n+        if this.emulate_intrinsic(instance, args, dest, ret)? {\n             return Ok(());\n         }\n \n         // All supported intrinsics have a return place.\n         let intrinsic_name = this.tcx.item_name(instance.def_id());\n         let intrinsic_name = intrinsic_name.as_str();\n-        let (dest, ret) = match ret {\n+        let ret = match ret {\n             None => throw_unsup_format!(\"unimplemented (diverging) intrinsic: {}\", intrinsic_name),\n             Some(p) => p,\n         };"}, {"sha": "926fcd5d040b8b35ec061b31cda253b3f83971de", "filename": "src/shims/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -28,16 +28,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         instance: ty::Instance<'tcx>,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n         unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n         let this = self.eval_context_mut();\n-        trace!(\"eval_fn_call: {:#?}, {:?}\", instance, ret.map(|p| p.0));\n+        trace!(\"eval_fn_call: {:#?}, {:?}\", instance, dest);\n \n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n             let [ptr, align] = check_arg_count(args)?;\n-            if this.align_offset(ptr, align, ret, unwind)? {\n+            if this.align_offset(ptr, align, dest, ret, unwind)? {\n                 return Ok(None);\n             }\n         }\n@@ -50,7 +51,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // to run extra MIR), and Ok(Some(body)) if we found MIR to run for the\n             // foreign function\n             // Any needed call to `goto_block` will be performed by `emulate_foreign_item`.\n-            return this.emulate_foreign_item(instance.def_id(), abi, args, ret, unwind);\n+            return this.emulate_foreign_item(instance.def_id(), abi, args, dest, ret, unwind);\n         }\n \n         // Otherwise, load the MIR.\n@@ -63,11 +64,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         ptr_op: &OpTy<'tcx, Tag>,\n         align_op: &OpTy<'tcx, Tag>,\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n         unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n-        let (dest, ret) = ret.unwrap();\n+        let ret = ret.unwrap();\n \n         if this.machine.check_alignment != AlignmentCheck::Symbolic {\n             // Just use actual implementation."}, {"sha": "ed6e72591dd002e331b3ab45193573854486dfc4", "filename": "src/shims/panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -96,7 +96,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             f_instance,\n             Abi::Rust,\n             &[data.into()],\n-            Some(&ret_place),\n+            &ret_place,\n             // Directly return to caller.\n             StackPopCleanup::Goto { ret: Some(ret), unwind: StackPopUnwind::Skip },\n         )?;\n@@ -153,7 +153,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 f_instance,\n                 Abi::Rust,\n                 &[catch_unwind.data.into(), payload.into()],\n-                Some(&ret_place),\n+                &ret_place,\n                 // Directly return to caller of `try`.\n                 StackPopCleanup::Goto { ret: Some(catch_unwind.ret), unwind: StackPopUnwind::Skip },\n             )?;\n@@ -179,7 +179,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             panic,\n             Abi::Rust,\n             &[msg.to_ref(this)],\n-            None,\n+            &MPlaceTy::dangling(this.machine.layouts.unit).into(),\n             StackPopCleanup::Goto { ret: None, unwind },\n         )\n     }\n@@ -208,7 +208,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     panic_bounds_check,\n                     Abi::Rust,\n                     &[index.into(), len.into()],\n-                    None,\n+                    &MPlaceTy::dangling(this.machine.layouts.unit).into(),\n                     StackPopCleanup::Goto {\n                         ret: None,\n                         unwind: match unwind {"}, {"sha": "0ea441e00e9ae291c5234cf1f6125fbc2fc686d2", "filename": "src/shims/posix/dlsym.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fposix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fposix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fdlsym.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -30,15 +30,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         dlsym: Dlsym,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         this.check_abi(abi, Abi::C { unwind: false })?;\n \n         match dlsym {\n-            Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n-            Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n+            Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n+            Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n         }\n     }\n }"}, {"sha": "a2d6570fe8d6410a2bcec1f5abcea6532cdc641e", "filename": "src/shims/posix/linux/dlsym.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -24,10 +24,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         dlsym: Dlsym,\n         _args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        _dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let (_dest, _ret) = ret.expect(\"we don't support any diverging dlsym\");\n+        let _ret = ret.expect(\"we don't support any diverging dlsym\");\n         assert!(this.tcx.sess.target.os == \"linux\");\n \n         match dlsym {}"}, {"sha": "9369548992e5390a82f9e344f81df1791cd374b8", "filename": "src/shims/posix/macos/dlsym.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -28,10 +28,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         dlsym: Dlsym,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n+        let ret = ret.expect(\"we don't support any diverging dlsym\");\n         assert!(this.tcx.sess.target.os == \"macos\");\n \n         match dlsym {"}, {"sha": "88c3fb0bc8eab79467e9d994de97c9d41d48d000", "filename": "src/shims/posix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fposix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fposix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fthread.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -51,7 +51,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             instance,\n             Abi::C { unwind: false },\n             &[*func_arg],\n-            Some(&ret_place.into()),\n+            &ret_place.into(),\n             StackPopCleanup::Root { cleanup: true },\n         )?;\n "}, {"sha": "87c8d7eadc3bbd7f271d8f24f4e7d438a1732c14", "filename": "src/shims/tls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -258,7 +258,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             thread_callback,\n             Abi::System { unwind: false },\n             &[Scalar::null_ptr(this).into(), reason.into(), Scalar::null_ptr(this).into()],\n-            Some(&ret_place),\n+            &ret_place,\n             StackPopCleanup::Root { cleanup: true },\n         )?;\n \n@@ -281,7 +281,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 instance,\n                 Abi::C { unwind: false },\n                 &[data.into()],\n-                Some(&ret_place),\n+                &ret_place,\n                 StackPopCleanup::Root { cleanup: true },\n             )?;\n \n@@ -324,7 +324,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 instance,\n                 Abi::C { unwind: false },\n                 &[ptr.into()],\n-                Some(&ret_place),\n+                &ret_place,\n                 StackPopCleanup::Root { cleanup: true },\n             )?;\n "}, {"sha": "b5408e492ce9c84e23b42c124c183f20f2042a2c", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -31,10 +31,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         dlsym: Dlsym,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n-        ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n+        let ret = ret.expect(\"we don't support any diverging dlsym\");\n         assert!(this.tcx.sess.target.os == \"windows\");\n \n         this.check_abi(abi, Abi::System { unwind: false })?;"}, {"sha": "30a9cc265dce2bae4d56186c9c6c15b8ae14b03e", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168c83a0b78588ecbe30d0adf7d7d794f62e4312/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=168c83a0b78588ecbe30d0adf7d7d794f62e4312", "patch": "@@ -930,12 +930,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// explicit. Also see https://github.com/rust-lang/rust/issues/71117.\n     fn retag_return_place(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let return_place = if let Some(return_place) = this.frame_mut().return_place {\n-            return_place\n-        } else {\n-            // No return place, nothing to do.\n-            return Ok(());\n-        };\n+        let return_place = this.frame_mut().return_place;\n         if return_place.layout.is_zst() {\n             // There may not be any memory here, nothing to do.\n             return Ok(());\n@@ -955,7 +950,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         )?;\n         // And use reborrowed pointer for return place.\n         let return_place = this.ref_to_mplace(&val)?;\n-        this.frame_mut().return_place = Some(return_place.into());\n+        this.frame_mut().return_place = return_place.into();\n \n         Ok(())\n     }"}]}