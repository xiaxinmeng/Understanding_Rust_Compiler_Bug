{"sha": "47771d6b786e3f33b307c34e0d88a6a89e5da14c", "node_id": "C_kwDOAAsO6NoAKDQ3NzcxZDZiNzg2ZTNmMzNiMzA3YzM0ZTBkODhhNmE4OWU1ZGExNGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-01T07:22:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-01T07:22:31Z"}, "message": "Auto merge of #2173 - RalfJung:rustlib, r=oli-obk\n\ndifferent strategy for normalizing Rust stdlib path\n\n`-Zremap-cwd-prefix` has some [unintended side-effects](https://github.com/rust-lang/miri/issues/2172), so we could use regexp-based normalization instead. Unfortunately, this will fail if the user's home directory contains a space.\n\nFixes https://github.com/rust-lang/miri/issues/2172", "tree": {"sha": "11101702ab526e1134cfcf657907c6566c946c04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11101702ab526e1134cfcf657907c6566c946c04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47771d6b786e3f33b307c34e0d88a6a89e5da14c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47771d6b786e3f33b307c34e0d88a6a89e5da14c", "html_url": "https://github.com/rust-lang/rust/commit/47771d6b786e3f33b307c34e0d88a6a89e5da14c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47771d6b786e3f33b307c34e0d88a6a89e5da14c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c11fc64b1974fc5c5ea88ec063b1512ccede1fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa", "html_url": "https://github.com/rust-lang/rust/commit/1c11fc64b1974fc5c5ea88ec063b1512ccede1fa"}, {"sha": "8997db2ec99d980e827f8bb4ed212dce1d5e7e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/8997db2ec99d980e827f8bb4ed212dce1d5e7e02", "html_url": "https://github.com/rust-lang/rust/commit/8997db2ec99d980e827f8bb4ed212dce1d5e7e02"}], "stats": {"total": 542, "additions": 336, "deletions": 206}, "files": [{"sha": "373c63647c35aed8401eb12746efd45a63fdf68d", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -461,12 +461,7 @@ path = \"lib.rs\"\n     command.env_remove(\"RUSTFLAGS\");\n     // Disable debug assertions in the standard library -- Miri is already slow enough.\n     // But keep the overflow checks, they are cheap.\n-    // Also remap the current directory to something that is stable across different\n-    // machines. Otherwise ui output would contain the current directory.\n-    command.env(\n-        \"RUSTFLAGS\",\n-        \"-Cdebug-assertions=off -Coverflow-checks=on -Zremap-cwd-prefix=rustc_src\",\n-    );\n+    command.env(\"RUSTFLAGS\", \"-Cdebug-assertions=off -Coverflow-checks=on\");\n     // Finally run it!\n     if command.status().expect(\"failed to run xargo\").success().not() {\n         show_error(format!(\"failed to run xargo\"));"}, {"sha": "52c0310cabaa81f38a0ff6a7516092dfea959600", "filename": "tests/compile-fail/alloc/deallocate-bad-alignment.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-alignment.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 1 and alignment ALIGN\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 1 and alignment ALIGN\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-bad-alignment.rs:LL:CC\n   --> $DIR/deallocate-bad-alignment.rs:LL:CC\n    |"}, {"sha": "fe0a5130eb54475b8471dcdbaa736a223d2346ea", "filename": "tests/compile-fail/alloc/deallocate-bad-size.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-size.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 2 and alignment ALIGN\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 2 and alignment ALIGN\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-bad-size.rs:LL:CC\n   --> $DIR/deallocate-bad-size.rs:LL:CC\n    |"}, {"sha": "cca20be6e661a9d8a91491f44b21f5cf84aaa624", "filename": "tests/compile-fail/alloc/deallocate-twice.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fdeallocate-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fdeallocate-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fdeallocate-twice.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-twice.rs:LL:CC\n   --> $DIR/deallocate-twice.rs:LL:CC\n    |"}, {"sha": "bb87b132f32270b18be4f75460ce6b106d07bf9e", "filename": "tests/compile-fail/alloc/global_system_mixup.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.rs?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -3,6 +3,8 @@\n // error-pattern: which is Rust heap memory, using\n \n // normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n+// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+// normalize-stderr-test: \"libc::free\\([^()]*\\)|unsafe \\{ HeapFree\\([^()]*\\) \\};\" -> \"FREE();\"\n \n #![feature(allocator_api, slice_ptr_get)]\n "}, {"sha": "a3b9009e30354151095766340947d7e352e0851a", "filename": "tests/compile-fail/alloc/global_system_mixup.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,15 +1,19 @@\n error: Undefined Behavior: deallocating ALLOC, which is Rust heap memory, using PLATFORM heap deallocation operation\n+  --> RUSTLIB/std/src/sys/PLATFORM/alloc.rs:LL:CC\n+   |\n+LL |         FREE();\n+   | ^ deallocating ALLOC, which is Rust heap memory, using PLATFORM heap deallocation operation\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::sys::PLATFORM::alloc::<impl std::alloc::GlobalAlloc for std::alloc::System>::dealloc` at rustc_src/src/sys/PLATFORM/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::System as std::alloc::Allocator>::deallocate` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::alloc::<impl std::alloc::GlobalAlloc for std::alloc::System>::dealloc` at RUSTLIB/std/src/sys/PLATFORM/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::System as std::alloc::Allocator>::deallocate` at RUSTLIB/std/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/global_system_mixup.rs:LL:CC\n   --> $DIR/global_system_mixup.rs:LL:CC\n    |\n LL |     unsafe { System.deallocate(ptr, l); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "04dce05e78f54ca72f8a61102f528c8f4df7f3a4", "filename": "tests/compile-fail/alloc/reallocate-bad-size.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Freallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Freallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Freallocate-bad-size.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 2 and alignment ALIGN\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 2 and alignment ALIGN\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::alloc::realloc` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/reallocate-bad-size.rs:LL:CC\n   --> $DIR/reallocate-bad-size.rs:LL:CC\n    |"}, {"sha": "84e7b934202ae57d1c36fb7aa189ce3ca20ddaec", "filename": "tests/compile-fail/alloc/reallocate-dangling.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Freallocate-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Freallocate-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Freallocate-dangling.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::alloc::realloc` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/reallocate-dangling.rs:LL:CC\n   --> $DIR/reallocate-dangling.rs:LL:CC\n    |"}, {"sha": "073510a6080daa31d483bf22693d3e6186ae24e7", "filename": "tests/compile-fail/alloc/stack_free.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fstack_free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Falloc%2Fstack_free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fstack_free.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,13 +1,17 @@\n error: Undefined Behavior: deallocating ALLOC, which is stack variable memory, using Rust heap deallocation operation\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocating ALLOC, which is stack variable memory, using Rust heap deallocation operation\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at rustc_src/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at rustc_src/src/mem/mod.rs:LL:CC\n+   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n note: inside `main` at $DIR/stack_free.rs:LL:CC\n   --> $DIR/stack_free.rs:LL:CC\n    |"}, {"sha": "7401b2902ead87291de93978e98ad6c290f84470", "filename": "tests/compile-fail/concurrency/too_few_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_few_args.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -9,7 +9,7 @@ LL |     panic!()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `thread_start` at rustc_src/src/panic.rs:LL:CC\n+   = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "951b76317f250ea04b832bde768d94c0e4bebac5", "filename": "tests/compile-fail/concurrency/too_many_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_many_args.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -9,7 +9,7 @@ LL |     panic!()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `thread_start` at rustc_src/src/panic.rs:LL:CC\n+   = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "1e793f549acd33e0d594966125b91db4f53de069", "filename": "tests/compile-fail/dangling_pointers/dangling_pointer_addr_of.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { ptr::addr_of!(*p) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `main` at rustc_src/src/ptr/mod.rs:LL:CC\n+   = note: inside `main` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: this error originates in the macro `ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ee8afcfb7d9048f55629624fd076f77ebfc49d3d", "filename": "tests/compile-fail/dangling_pointers/null_pointer_write_zst.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,10 +1,14 @@\n error: Undefined Behavior: memory access failed: null pointer is not a valid pointer\n+  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   |\n+LL |         copy_nonoverlapping(&src as *const T, dst, 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::write::<[u8; 0]>` at rustc_src/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::ptr::mut_ptr::<impl *mut [u8; 0]>::write` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+   = note: inside `std::ptr::write::<[u8; 0]>` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut [u8; 0]>::write` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n   --> $DIR/null_pointer_write_zst.rs:LL:CC\n    |"}, {"sha": "d06698c940dd61b230703051899c9ddd64513882", "filename": "tests/compile-fail/fs/isolated_file.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Ffs%2Fisolated_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Ffs%2Fisolated_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fisolated_file.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,15 +1,19 @@\n error: unsupported operation: `open` not available when isolation is enabled\n+  --> RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n+   |\n+LL |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n    |\n    = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n    = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n            \n-   = note: inside closure at rustc_src/src/sys/PLATFORM/fs.rs:LL:CC\n-   = note: inside `std::sys::PLATFORM::cvt_r::<i32, [closure@std::sys::PLATFORM::fs::File::open_c::{closure#0}]>` at rustc_src/src/sys/PLATFORM/mod.rs:LL:CC\n-   = note: inside `std::sys::PLATFORM::fs::File::open_c` at rustc_src/src/sys/PLATFORM/fs.rs:LL:CC\n-   = note: inside `std::sys::PLATFORM::fs::File::open` at rustc_src/src/sys/PLATFORM/fs.rs:LL:CC\n-   = note: inside `std::fs::OpenOptions::_open` at rustc_src/src/fs.rs:LL:CC\n-   = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at rustc_src/src/fs.rs:LL:CC\n-   = note: inside `std::fs::File::open::<&str>` at rustc_src/src/fs.rs:LL:CC\n+   = note: inside closure at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::cvt_r::<i32, [closure@std::sys::PLATFORM::fs::File::open_c::{closure#0}]>` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::fs::File::open_c` at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::fs::File::open` at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n+   = note: inside `std::fs::OpenOptions::_open` at RUSTLIB/std/src/fs.rs:LL:CC\n+   = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at RUSTLIB/std/src/fs.rs:LL:CC\n+   = note: inside `std::fs::File::open::<&str>` at RUSTLIB/std/src/fs.rs:LL:CC\n note: inside `main` at $DIR/isolated_file.rs:LL:CC\n   --> $DIR/isolated_file.rs:LL:CC\n    |"}, {"sha": "0ccf3091cde73c183387b0f5754c5eef5197896d", "filename": "tests/compile-fail/generator-pinned-moved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fgenerator-pinned-moved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fgenerator-pinned-moved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgenerator-pinned-moved.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -13,7 +13,7 @@ note: inside `<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-\n    |\n LL |         match me.resume(()) {\n    |               ^^^^^^^^^^^^^\n-   = note: inside `<std::boxed::Box<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]>> as std::iter::Iterator>::next` at rustc_src/src/boxed.rs:LL:CC\n+   = note: inside `<std::boxed::Box<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]>> as std::iter::Iterator>::next` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside `main` at $DIR/generator-pinned-moved.rs:LL:CC\n   --> $DIR/generator-pinned-moved.rs:LL:CC\n    |"}, {"sha": "897ea5ffec5e217afa8922fd1df5c6c8baee4578", "filename": "tests/compile-fail/intrinsics/copy_overflow.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overflow.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,10 +1,14 @@\n error: Undefined Behavior: overflow computing total size of `copy`\n+  --> RUSTLIB/core/src/intrinsics.rs:LL:CC\n+   |\n+LL |         copy(src, dst, count)\n+   |         ^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::intrinsics::copy::<i32>` at rustc_src/src/intrinsics.rs:LL:CC\n-   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::copy_from` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+   = note: inside `std::intrinsics::copy::<i32>` at RUSTLIB/core/src/intrinsics.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::copy_from` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/copy_overflow.rs:LL:CC\n   --> $DIR/copy_overflow.rs:LL:CC\n    |"}, {"sha": "8a7da324ef897f4538715f4b2ccdd229686dcacb", "filename": "tests/compile-fail/intrinsics/out_of_bounds_ptr_1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer arithmetic failed: ALLOC has size 4, so pointer to 5 bytes starting at offset 0 is out-of-bounds\n+  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer arithmetic failed: ALLOC has size 4, so pointer to 5 bytes starting at offset 0 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/out_of_bounds_ptr_1.rs:LL:CC\n   --> $DIR/out_of_bounds_ptr_1.rs:LL:CC\n    |"}, {"sha": "78a17a2ab7b5a422ae19a71c6fede2555ebd92e2", "filename": "tests/compile-fail/intrinsics/out_of_bounds_ptr_2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: overflowing in-bounds pointer arithmetic\n+  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/out_of_bounds_ptr_2.rs:LL:CC\n   --> $DIR/out_of_bounds_ptr_2.rs:LL:CC\n    |"}, {"sha": "9866529eeeb55bce31d212a8fdfdaf58f4ae72d3", "filename": "tests/compile-fail/intrinsics/out_of_bounds_ptr_3.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer arithmetic failed: ALLOC has size 4, so pointer to 1 byte starting at offset -1 is out-of-bounds\n+  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer arithmetic failed: ALLOC has size 4, so pointer to 1 byte starting at offset -1 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/out_of_bounds_ptr_3.rs:LL:CC\n   --> $DIR/out_of_bounds_ptr_3.rs:LL:CC\n    |"}, {"sha": "741314ea8a680688d49abd9fb644fdf7d5bcd411", "filename": "tests/compile-fail/intrinsics/ptr_offset_0_plus_0.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer arithmetic failed: null pointer is not a valid pointer\n+  --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer arithmetic failed: null pointer is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::offset` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_0_plus_0.rs:LL:CC\n   --> $DIR/ptr_offset_0_plus_0.rs:LL:CC\n    |"}, {"sha": "e6b8f102f3946ebad70cd0eb986ff830b9bb6984", "filename": "tests/compile-fail/intrinsics/ptr_offset_int_plus_int.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer arithmetic failed: 0x1 is not a valid pointer\n+  --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer arithmetic failed: 0x1 is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_int_plus_int.rs:LL:CC\n   --> $DIR/ptr_offset_int_plus_int.rs:LL:CC\n    |"}, {"sha": "f88ad758d438de635d12ff58cb582068e956873a", "filename": "tests/compile-fail/intrinsics/ptr_offset_int_plus_ptr.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer arithmetic failed: 0x1 is not a valid pointer\n+  --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer arithmetic failed: 0x1 is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n   --> $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n    |"}, {"sha": "a144141c3c381f48753b1e5fe5b9760930c4cd1a", "filename": "tests/compile-fail/intrinsics/ptr_offset_overflow.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: overflowing in-bounds pointer arithmetic\n+  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_overflow.rs:LL:CC\n   --> $DIR/ptr_offset_overflow.rs:LL:CC\n    |"}, {"sha": "15e21ee676f7c66fe29c1f1be37fb2d63cec55fc", "filename": "tests/compile-fail/intrinsics/ptr_offset_ptr_plus_0.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer arithmetic failed: ALLOC has size 4, so pointer at offset 32 is out-of-bounds\n+  --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer arithmetic failed: ALLOC has size 4, so pointer at offset 32 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::mut_ptr::<impl *mut u32>::offset` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut u32>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n   --> $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n    |"}, {"sha": "6e6a136c39af932750e8c64f130d29979f59bd39", "filename": "tests/compile-fail/intrinsics/simd-float-to-int.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-float-to-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-float-to-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-float-to-int.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 3.40282347E+38 which cannot be represented in target type `i32`\n+  --> RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/round.rs:LL:CC\n+   |\n+LL | implement! { f32 }\n+   | ^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 3.40282347E+38 which cannot be represented in target type `i32`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `core::core_simd::round::<impl std::simd::Simd<f32, 2_usize>>::to_int_unchecked::<i32>` at rustc_src/src/../../portable-simd/crates/core_simd/src/round.rs:LL:CC\n+   = note: inside `core::core_simd::round::<impl std::simd::Simd<f32, 2_usize>>::to_int_unchecked::<i32>` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/round.rs:LL:CC\n note: inside `main` at $DIR/simd-float-to-int.rs:LL:CC\n   --> $DIR/simd-float-to-int.rs:LL:CC\n    |"}, {"sha": "8021077a92d37866e6d87599761afc3d0239016e", "filename": "tests/compile-fail/intrinsics/simd-gather.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 9, so pointer to 1 byte starting at offset 9 is out-of-bounds\n+  --> RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::simd_gather(or, ptrs, enable.to_int()) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 9, so pointer to 1 byte starting at offset 9 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::simd::Simd::<i8, 4_usize>::gather_select_unchecked` at rustc_src/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n+   = note: inside `std::simd::Simd::<i8, 4_usize>::gather_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-gather.rs:LL:CC\n   --> $DIR/simd-gather.rs:LL:CC\n    |"}, {"sha": "08536c61125555ee137ca6133b072011889bab5d", "filename": "tests/compile-fail/intrinsics/simd-scatter.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 9, so pointer to 1 byte starting at offset 9 is out-of-bounds\n+  --> RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n+   |\n+LL |             intrinsics::simd_scatter(self, ptrs, enable.to_int())\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 9, so pointer to 1 byte starting at offset 9 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::simd::Simd::<i8, 4_usize>::scatter_select_unchecked` at rustc_src/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n+   = note: inside `std::simd::Simd::<i8, 4_usize>::scatter_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-scatter.rs:LL:CC\n   --> $DIR/simd-scatter.rs:LL:CC\n    |"}, {"sha": "0d5259dce2f4c743728b72c1afe005ce8a720d88", "filename": "tests/compile-fail/intrinsics/write_bytes_overflow.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_overflow.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,10 +1,14 @@\n error: Undefined Behavior: overflow computing total size of `write_bytes`\n+  --> RUSTLIB/core/src/intrinsics.rs:LL:CC\n+   |\n+LL |         write_bytes(dst, val, count)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `write_bytes`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::intrinsics::write_bytes::<i32>` at rustc_src/src/intrinsics.rs:LL:CC\n-   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::write_bytes` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+   = note: inside `std::intrinsics::write_bytes::<i32>` at RUSTLIB/core/src/intrinsics.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::write_bytes` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC\n   --> $DIR/write_bytes_overflow.rs:LL:CC\n    |"}, {"sha": "b5e93d320a861ef3adc0c359d1172cbd56cae885", "filename": "tests/compile-fail/invalid_enum_tag.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Finvalid_enum_tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Finvalid_enum_tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_tag.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: enum value has invalid tag: $HEX\n+  --> RUSTLIB/core/src/mem/mod.rs:LL:CC\n+   |\n+LL |     Discriminant(intrinsics::discriminant_value(v))\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ enum value has invalid tag: $HEX\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::mem::discriminant::<Foo>` at rustc_src/src/mem/mod.rs:LL:CC\n+   = note: inside `std::mem::discriminant::<Foo>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n note: inside `main` at $DIR/invalid_enum_tag.rs:LL:CC\n   --> $DIR/invalid_enum_tag.rs:LL:CC\n    |"}, {"sha": "745cef8be702c4eda255aebef5392c5b0de5b978", "filename": "tests/compile-fail/panic/bad_unwind.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fbad_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fbad_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fbad_unwind.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -10,9 +10,9 @@ LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n    = note: inside closure at $DIR/bad_unwind.rs:LL:CC\n-   = note: inside `std::panicking::r#try::do_call::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::r#try::<(), [closure@$DIR/bad_unwind.rs:LL:CC]>` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::panic::catch_unwind::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at rustc_src/src/panic.rs:LL:CC\n+   = note: inside `std::panicking::r#try::do_call::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::r#try::<(), [closure@$DIR/bad_unwind.rs:LL:CC]>` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::panic::catch_unwind::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at RUSTLIB/std/src/panic.rs:LL:CC\n note: inside `main` at $DIR/bad_unwind.rs:LL:CC\n   --> $DIR/bad_unwind.rs:LL:CC\n    |"}, {"sha": "f3af66a79abc473bb2e20de46469f26c3d58fcae", "filename": "tests/compile-fail/panic/double_panic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.rs?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,4 +1,6 @@\n // error-pattern: the program aborted\n+// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+// normalize-stderr-test: \"unsafe \\{ libc::abort\\(\\) \\}|crate::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n \n struct Foo;\n impl Drop for Foo {"}, {"sha": "0dbd68c0984f9fd2e59800ea8bcc1916da50e6f7", "filename": "tests/compile-fail/panic/double_panic.stderr", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -3,81 +3,85 @@ note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n thread 'main' panicked at 'second', $DIR/double_panic.rs:LL:CC\n stack backtrace:\n    0: std::backtrace_rs::backtrace::miri::trace_unsynchronized\n- at rustc_src/src/../../backtrace/src/backtrace/miri.rs:LL:CC\n+ at RUSTLIB/std/src/../../backtrace/src/backtrace/miri.rs:LL:CC\n    1: std::backtrace_rs::backtrace::miri::trace\n- at rustc_src/src/../../backtrace/src/backtrace/miri.rs:LL:CC\n+ at RUSTLIB/std/src/../../backtrace/src/backtrace/miri.rs:LL:CC\n    2: std::backtrace_rs::backtrace::trace_unsynchronized\n- at rustc_src/src/../../backtrace/src/backtrace/mod.rs:LL:CC\n+ at RUSTLIB/std/src/../../backtrace/src/backtrace/mod.rs:LL:CC\n    3: std::sys_common::backtrace::_print_fmt\n- at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+ at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    4: <std::sys_common::backtrace::_print::DisplayBacktrace as std::fmt::Display>::fmt\n- at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+ at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    5: std::fmt::write\n- at rustc_src/src/fmt/mod.rs:LL:CC\n+ at RUSTLIB/core/src/fmt/mod.rs:LL:CC\n    6: <std::sys::PLATFORM::stdio::Stderr as std::io::Write>::write_fmt\n- at rustc_src/src/io/mod.rs:LL:CC\n+ at RUSTLIB/std/src/io/mod.rs:LL:CC\n    7: std::sys_common::backtrace::_print\n- at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+ at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    8: std::sys_common::backtrace::print\n- at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+ at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    9: std::panicking::default_hook::{closure#1}\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   10: std::panicking::default_hook\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   11: std::panicking::rust_panic_with_hook\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   12: std::rt::begin_panic::{closure#0}\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   13: std::sys_common::backtrace::__rust_end_short_backtrace\n- at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+ at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n   14: std::rt::begin_panic\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   15: <Foo as std::ops::Drop>::drop\n  at $DIR/double_panic.rs:LL:CC\n   16: std::ptr::drop_in_place - shim(Some(Foo))\n- at rustc_src/src/ptr/mod.rs:LL:CC\n+ at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n   17: main\n  at $DIR/double_panic.rs:LL:CC\n   18: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n- at rustc_src/src/ops/function.rs:LL:CC\n+ at RUSTLIB/core/src/ops/function.rs:LL:CC\n   19: std::sys_common::backtrace::__rust_begin_short_backtrace\n- at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+ at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n   20: std::rt::lang_start::{closure#0}\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n   21: std::ops::function::impls::call_once\n- at rustc_src/src/ops/function.rs:LL:CC\n+ at RUSTLIB/core/src/ops/function.rs:LL:CC\n   22: std::panicking::r#try::do_call\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   23: std::panicking::r#try\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   24: std::panic::catch_unwind\n- at rustc_src/src/panic.rs:LL:CC\n+ at RUSTLIB/std/src/panic.rs:LL:CC\n   25: std::rt::lang_start_internal::{closure#2}\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n   26: std::panicking::r#try::do_call\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   27: std::panicking::r#try\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   28: std::panic::catch_unwind\n- at rustc_src/src/panic.rs:LL:CC\n+ at RUSTLIB/std/src/panic.rs:LL:CC\n   29: std::rt::lang_start_internal\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n   30: std::rt::lang_start\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n thread panicked while panicking. aborting.\n error: abnormal termination: the program aborted execution\n+  --> RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n    |\n-   = note: inside `std::sys::PLATFORM::abort_internal` at rustc_src/src/sys/PLATFORM/mod.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::rt::begin_panic::<&str>` at rustc_src/src/panicking.rs:LL:CC\n-note: inside `<Foo as std::ops::Drop>::drop` at rustc_src/src/panic.rs:LL:CC\n+LL |     ABORT();\n+   | ^ the program aborted execution\n+   |\n+   = note: inside `std::sys::PLATFORM::abort_internal` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::rt::begin_panic::<&str>` at RUSTLIB/std/src/panicking.rs:LL:CC\n+note: inside `<Foo as std::ops::Drop>::drop` at RUSTLIB/std/src/panic.rs:LL:CC\n   --> $DIR/double_panic.rs:LL:CC\n    |\n LL |         panic!(\"second\");\n-   |         ^^^^^^^^^^^^^^^^\n-   = note: inside `std::ptr::drop_in_place::<Foo> - shim(Some(Foo))` at rustc_src/src/ptr/mod.rs:LL:CC\n+   | ^\n+   = note: inside `std::ptr::drop_in_place::<Foo> - shim(Some(Foo))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n note: inside `main` at $DIR/double_panic.rs:LL:CC\n   --> $DIR/double_panic.rs:LL:CC\n    |"}, {"sha": "9c094c659837a3e42e3f07ce4335ec174137b72e", "filename": "tests/compile-fail/panic/panic_abort1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.rs?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,4 +1,6 @@\n // error-pattern: the program aborted execution\n+// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n // compile-flags: -C panic=abort\n \n fn main() {"}, {"sha": "9610a161280a012adb89e9fdd023dbdc49e7f387", "filename": "tests/compile-fail/panic/panic_abort1.stderr", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,19 +1,23 @@\n thread 'main' panicked at 'panicking from libstd', $DIR/panic_abort1.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n error: abnormal termination: the program aborted execution\n+  --> RUSTLIB/panic_abort/src/lib.rs:LL:CC\n    |\n-   = note: inside `panic_abort::__rust_start_panic::abort` at rustc_src/src/lib.rs:LL:CC\n-   = note: inside `panic_abort::__rust_start_panic` at rustc_src/src/lib.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::rt::begin_panic::<&str>` at rustc_src/src/panicking.rs:LL:CC\n-note: inside `main` at rustc_src/src/panic.rs:LL:CC\n+LL |                 ABORT();\n+   | ^ the program aborted execution\n+   |\n+   = note: inside `panic_abort::__rust_start_panic::abort` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::rt::begin_panic::<&str>` at RUSTLIB/std/src/panicking.rs:LL:CC\n+note: inside `main` at RUSTLIB/std/src/panic.rs:LL:CC\n   --> $DIR/panic_abort1.rs:LL:CC\n    |\n LL |     std::panic!(\"panicking from libstd\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7eb9a3c24aa246029b4db1d9ad371a0a707c7209", "filename": "tests/compile-fail/panic/panic_abort2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.rs?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,4 +1,6 @@\n // error-pattern: the program aborted execution\n+// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n // compile-flags: -C panic=abort\n \n fn main() {"}, {"sha": "0c446323a77912665e0c13087a8d7caed92390a9", "filename": "tests/compile-fail/panic/panic_abort2.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,20 +1,24 @@\n thread 'main' panicked at '42-panicking from libstd', $DIR/panic_abort2.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n error: abnormal termination: the program aborted execution\n+  --> RUSTLIB/panic_abort/src/lib.rs:LL:CC\n    |\n-   = note: inside `panic_abort::__rust_start_panic::abort` at rustc_src/src/lib.rs:LL:CC\n-   = note: inside `panic_abort::__rust_start_panic` at rustc_src/src/lib.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::panicking::begin_panic_handler` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::rt::panic_fmt` at rustc_src/src/panicking.rs:LL:CC\n-note: inside `main` at rustc_src/src/panic.rs:LL:CC\n+LL |                 ABORT();\n+   | ^ the program aborted execution\n+   |\n+   = note: inside `panic_abort::__rust_start_panic::abort` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::rt::panic_fmt` at RUSTLIB/core/src/panicking.rs:LL:CC\n+note: inside `main` at RUSTLIB/std/src/panic.rs:LL:CC\n   --> $DIR/panic_abort2.rs:LL:CC\n    |\n LL |     std::panic!(\"{}-panicking from libstd\", 42);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1940b48bad78d1fd93f4b639e71f533a8c8b6853", "filename": "tests/compile-fail/panic/panic_abort3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.rs?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,4 +1,6 @@\n // error-pattern: the program aborted execution\n+// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n // compile-flags: -C panic=abort\n \n fn main() {"}, {"sha": "2d7b576372e0822098b24706d2ca01c5a3155180", "filename": "tests/compile-fail/panic/panic_abort3.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,21 +1,25 @@\n thread 'main' panicked at 'panicking from libcore', $DIR/panic_abort3.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n error: abnormal termination: the program aborted execution\n+  --> RUSTLIB/panic_abort/src/lib.rs:LL:CC\n    |\n-   = note: inside `panic_abort::__rust_start_panic::abort` at rustc_src/src/lib.rs:LL:CC\n-   = note: inside `panic_abort::__rust_start_panic` at rustc_src/src/lib.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::panicking::begin_panic_handler` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::rt::panic_fmt` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `core::panicking::panic` at rustc_src/src/panicking.rs:LL:CC\n-note: inside `main` at rustc_src/src/panic.rs:LL:CC\n+LL |                 ABORT();\n+   | ^ the program aborted execution\n+   |\n+   = note: inside `panic_abort::__rust_start_panic::abort` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::rt::panic_fmt` at RUSTLIB/core/src/panicking.rs:LL:CC\n+   = note: inside `core::panicking::panic` at RUSTLIB/core/src/panicking.rs:LL:CC\n+note: inside `main` at RUSTLIB/core/src/panic.rs:LL:CC\n   --> $DIR/panic_abort3.rs:LL:CC\n    |\n LL |     core::panic!(\"panicking from libcore\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e5190ea0765d13ece0b738c8507b102a1b7be6a7", "filename": "tests/compile-fail/panic/panic_abort4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.rs?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,4 +1,6 @@\n // error-pattern: the program aborted execution\n+// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n // compile-flags: -C panic=abort\n \n fn main() {"}, {"sha": "b0b11248104d99c99000f5db344ebd1edc8a98c2", "filename": "tests/compile-fail/panic/panic_abort4.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,20 +1,24 @@\n thread 'main' panicked at '42-panicking from libcore', $DIR/panic_abort4.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n error: abnormal termination: the program aborted execution\n+  --> RUSTLIB/panic_abort/src/lib.rs:LL:CC\n    |\n-   = note: inside `panic_abort::__rust_start_panic::abort` at rustc_src/src/lib.rs:LL:CC\n-   = note: inside `panic_abort::__rust_start_panic` at rustc_src/src/lib.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::panicking::begin_panic_handler` at rustc_src/src/panicking.rs:LL:CC\n-   = note: inside `std::rt::panic_fmt` at rustc_src/src/panicking.rs:LL:CC\n-note: inside `main` at rustc_src/src/panic.rs:LL:CC\n+LL |                 ABORT();\n+   | ^ the program aborted execution\n+   |\n+   = note: inside `panic_abort::__rust_start_panic::abort` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n+   = note: inside `std::rt::panic_fmt` at RUSTLIB/core/src/panicking.rs:LL:CC\n+note: inside `main` at RUSTLIB/core/src/panic.rs:LL:CC\n   --> $DIR/panic_abort4.rs:LL:CC\n    |\n LL |     core::panic!(\"{}-panicking from libcore\", 42);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8e3daca939dba7817ac21ee402938863a82a822e", "filename": "tests/compile-fail/provenance/strict-provenance-offset.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fprovenance%2Fstrict-provenance-offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fprovenance%2Fstrict-provenance-offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fstrict-provenance-offset.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: pointer arithmetic failed: $HEX is not a valid pointer\n+  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer arithmetic failed: $HEX is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::ptr::const_ptr::<impl *const u8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+   = note: inside `std::ptr::const_ptr::<impl *const u8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n note: inside `main` at $DIR/strict-provenance-offset.rs:LL:CC\n   --> $DIR/strict-provenance-offset.rs:LL:CC\n    |"}, {"sha": "d4864da04e41f3469688a4fb3072f12f43912a2a", "filename": "tests/compile-fail/rc_as_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Frc_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Frc_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frc_as_ptr.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) });\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `main` at rustc_src/src/macros/mod.rs:LL:CC\n+   = note: inside `main` at RUSTLIB/core/src/macros/mod.rs:LL:CC\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "38b84e638be4db39d5d2d8f572209777ec470e9f", "filename": "tests/compile-fail/stacked_borrows/deallocate_against_barrier1.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,19 +1,23 @@\n error: Undefined Behavior: deallocating while item is protected: [Unique for <TAG> (call ID)]\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocating while item is protected: [Unique for <TAG> (call ID)]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n            \n-   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at rustc_src/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at rustc_src/src/mem/mod.rs:LL:CC\n+   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n note: inside closure at $DIR/deallocate_against_barrier1.rs:LL:CC\n   --> $DIR/deallocate_against_barrier1.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: inside `<[closure@$DIR/deallocate_against_barrier1.rs:LL:CC] as std::ops::FnOnce<(&mut i32,)>>::call_once - shim` at rustc_src/src/ops/function.rs:LL:CC\n+   = note: inside `<[closure@$DIR/deallocate_against_barrier1.rs:LL:CC] as std::ops::FnOnce<(&mut i32,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n note: inside `inner` at $DIR/deallocate_against_barrier1.rs:LL:CC\n   --> $DIR/deallocate_against_barrier1.rs:LL:CC\n    |"}, {"sha": "72e6814b8e14dc487e5ae6f2149ab4d645fb8eee", "filename": "tests/compile-fail/stacked_borrows/deallocate_against_barrier2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,19 +1,23 @@\n error: Undefined Behavior: deallocating while item is protected: [SharedReadWrite for <TAG> (call ID)]\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocating while item is protected: [SharedReadWrite for <TAG> (call ID)]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n            \n-   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `alloc::alloc::box_free::<std::cell::Cell<i32>, std::alloc::Global>` at rustc_src/src/alloc.rs:LL:CC\n-   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<std::cell::Cell<i32>>> - shim(Some(std::boxed::Box<std::cell::Cell<i32>>))` at rustc_src/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::mem::drop::<std::boxed::Box<std::cell::Cell<i32>>>` at rustc_src/src/mem/mod.rs:LL:CC\n+   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `alloc::alloc::box_free::<std::cell::Cell<i32>, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<std::cell::Cell<i32>>> - shim(Some(std::boxed::Box<std::cell::Cell<i32>>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::mem::drop::<std::boxed::Box<std::cell::Cell<i32>>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n note: inside closure at $DIR/deallocate_against_barrier2.rs:LL:CC\n   --> $DIR/deallocate_against_barrier2.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: inside `<[closure@$DIR/deallocate_against_barrier2.rs:LL:CC] as std::ops::FnOnce<(&std::cell::Cell<i32>,)>>::call_once - shim` at rustc_src/src/ops/function.rs:LL:CC\n+   = note: inside `<[closure@$DIR/deallocate_against_barrier2.rs:LL:CC] as std::ops::FnOnce<(&std::cell::Cell<i32>,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n note: inside `inner` at $DIR/deallocate_against_barrier2.rs:LL:CC\n   --> $DIR/deallocate_against_barrier2.rs:LL:CC\n    |"}, {"sha": "b4953f95181a4e1de5ea2492b762ff3c759ce779", "filename": "tests/compile-fail/stacked_borrows/issue-miri-1050-1.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,10 +1,14 @@\n error: Undefined Behavior: ALLOC has size 2, so pointer to 4 bytes starting at offset 0 is out-of-bounds\n+  --> RUSTLIB/alloc/src/boxed.rs:LL:CC\n+   |\n+LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ALLOC has size 2, so pointer to 4 bytes starting at offset 0 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::boxed::Box::<u32>::from_raw_in` at rustc_src/src/boxed.rs:LL:CC\n-   = note: inside `std::boxed::Box::<u32>::from_raw` at rustc_src/src/boxed.rs:LL:CC\n+   = note: inside `std::boxed::Box::<u32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n+   = note: inside `std::boxed::Box::<u32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside `main` at $DIR/issue-miri-1050-1.rs:LL:CC\n   --> $DIR/issue-miri-1050-1.rs:LL:CC\n    |"}, {"sha": "cd6cfc0ecc3aed53e72518ef07bc720cd9c05b08", "filename": "tests/compile-fail/stacked_borrows/issue-miri-1050-2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,10 +1,14 @@\n error: Undefined Behavior: 0x4 is not a valid pointer\n+  --> RUSTLIB/alloc/src/boxed.rs:LL:CC\n+   |\n+LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 0x4 is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::boxed::Box::<i32>::from_raw_in` at rustc_src/src/boxed.rs:LL:CC\n-   = note: inside `std::boxed::Box::<i32>::from_raw` at rustc_src/src/boxed.rs:LL:CC\n+   = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n+   = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside `main` at $DIR/issue-miri-1050-2.rs:LL:CC\n   --> $DIR/issue-miri-1050-2.rs:LL:CC\n    |"}, {"sha": "6809aa3d25fbd109fbf394658c1fc4cb63fc2b19", "filename": "tests/compile-fail/stacked_borrows/zst_slice.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,4 +1,11 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+  --> RUSTLIB/core/src/slice/mod.rs:LL:CC\n+   |\n+LL |         unsafe { &*index.get_unchecked(self) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+   |                  this error occurs as part of a reborrow at ALLOC[0x4..0x8]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n@@ -7,7 +14,7 @@ help: <TAG> was created by a retag at offsets [0x0..0x0]\n    |\n LL |         assert_eq!(*s.get_unchecked(1), 2);\n    |                     ^^^^^^^^^^^^^^^^^^\n-   = note: inside `core::slice::<impl [i32]>::get_unchecked::<usize>` at rustc_src/src/slice/mod.rs:LL:CC\n+   = note: inside `core::slice::<impl [i32]>::get_unchecked::<usize>` at RUSTLIB/core/src/slice/mod.rs:LL:CC\n note: inside `main` at $DIR/zst_slice.rs:LL:CC\n   --> $DIR/zst_slice.rs:LL:CC\n    |"}, {"sha": "31f9163b3cf05db396549517037bc452aa8767a2", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_addr_of.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -7,7 +7,7 @@ LL |         let _x = unsafe { ptr::addr_of!(*x) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `main` at rustc_src/src/ptr/mod.rs:LL:CC\n+   = note: inside `main` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: this error originates in the macro `ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "02e4bcb90be63301bcac050d5a014c1394aca7d2", "filename": "tests/compile-fail/uninit_buffer.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Funinit_buffer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Funinit_buffer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funinit_buffer.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,10 +1,14 @@\n error: Undefined Behavior: reading 16 bytes of memory starting at ALLOC, but 12 bytes are uninitialized starting at ALLOC+0x4, and this operation requires initialized memory\n+  --> RUSTLIB/core/src/slice/cmp.rs:LL:CC\n+   |\n+LL |         let mut order = unsafe { memcmp(left.as_ptr(), right.as_ptr(), len) as isize };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reading 16 bytes of memory starting at ALLOC, but 12 bytes are uninitialized starting at ALLOC+0x4, and this operation requires initialized memory\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `<u8 as core::slice::cmp::SliceOrd>::compare` at rustc_src/src/slice/cmp.rs:LL:CC\n-   = note: inside `core::slice::cmp::<impl std::cmp::Ord for [u8]>::cmp` at rustc_src/src/slice/cmp.rs:LL:CC\n+   = note: inside `<u8 as core::slice::cmp::SliceOrd>::compare` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n+   = note: inside `core::slice::cmp::<impl std::cmp::Ord for [u8]>::cmp` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n note: inside `main` at $DIR/uninit_buffer.rs:LL:CC\n   --> $DIR/uninit_buffer.rs:LL:CC\n    |"}, {"sha": "1cad7dd901b746ff1a3a63a987d408c09339b986", "filename": "tests/compile-fail/unreachable.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Funreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompile-fail%2Funreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funreachable.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,9 +1,13 @@\n error: Undefined Behavior: entering unreachable code\n+  --> RUSTLIB/core/src/hint.rs:LL:CC\n+   |\n+LL |     unsafe { intrinsics::unreachable() }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `std::hint::unreachable_unchecked` at rustc_src/src/hint.rs:LL:CC\n+   = note: inside `std::hint::unreachable_unchecked` at RUSTLIB/core/src/hint.rs:LL:CC\n note: inside `main` at $DIR/unreachable.rs:LL:CC\n   --> $DIR/unreachable.rs:LL:CC\n    |"}, {"sha": "3b6cf6a6d1fdac6492ec7d23bd58152f9f0309ad", "filename": "tests/compiletest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -104,6 +104,8 @@ regexes! {\n     \"sys::[a-z]+::\"                  => \"sys::PLATFORM::\",\n     // Windows file paths\n     r\"\\\\\"                           => \"/\",\n+    // erase Rust stdlib path\n+    \"[^ `]*/(rust[^/]*|checkout)/library/\" => \"RUSTLIB/\",\n     // erase platform file paths\n     \"sys/[a-z]+/\"                    => \"sys/PLATFORM/\",\n }"}, {"sha": "f86ce187b2c9b75d2224c3964e940d572aedbd64", "filename": "tests/run-fail/panic/panic1.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-fail%2Fpanic%2Fpanic1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-fail%2Fpanic%2Fpanic1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-fail%2Fpanic%2Fpanic1.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -1,31 +1,31 @@\n thread 'main' panicked at 'panicking from libstd', $DIR/panic1.rs:LL:CC\n stack backtrace:\n    0: std::rt::begin_panic\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n    1: main\n  at $DIR/panic1.rs:LL:CC\n    2: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n- at rustc_src/src/ops/function.rs:LL:CC\n+ at RUSTLIB/core/src/ops/function.rs:LL:CC\n    3: std::rt::lang_start::{closure#0}\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n    4: std::ops::function::impls::call_once\n- at rustc_src/src/ops/function.rs:LL:CC\n+ at RUSTLIB/core/src/ops/function.rs:LL:CC\n    5: std::panicking::r#try::do_call\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n    6: std::panicking::r#try\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n    7: std::panic::catch_unwind\n- at rustc_src/src/panic.rs:LL:CC\n+ at RUSTLIB/std/src/panic.rs:LL:CC\n    8: std::rt::lang_start_internal::{closure#2}\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n    9: std::panicking::r#try::do_call\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   10: std::panicking::r#try\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   11: std::panic::catch_unwind\n- at rustc_src/src/panic.rs:LL:CC\n+ at RUSTLIB/std/src/panic.rs:LL:CC\n   12: std::rt::lang_start_internal\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n   13: std::rt::lang_start\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}, {"sha": "ee556b3e4a05ab5b3df6d769148c3be79fb7554d", "filename": "tests/run-pass/backtrace-api-v0.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-pass%2Fbacktrace-api-v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-pass%2Fbacktrace-api-v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v0.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -2,17 +2,4 @@ $DIR/backtrace-api-v0.rs:LL:CC (func_d)\n $DIR/backtrace-api-v0.rs:LL:CC (func_c)\n $DIR/backtrace-api-v0.rs:LL:CC (func_b)\n $DIR/backtrace-api-v0.rs:LL:CC (func_a)\n-$DIR/backtrace-api-v0.rs:LL:CC (main)\n-rustc_src/src/ops/function.rs:LL:CC (<fn() as std::ops::FnOnce<()>>::call_once - shim(fn()))\n-rustc_src/src/sys_common/backtrace.rs:LL:CC (std::sys_common::backtrace::__rust_begin_short_backtrace)\n-rustc_src/src/rt.rs:LL:CC (std::rt::lang_start::{closure#0})\n-rustc_src/src/ops/function.rs:LL:CC (std::ops::function::impls::call_once)\n-rustc_src/src/panicking.rs:LL:CC (std::panicking::r#try::do_call)\n-rustc_src/src/panicking.rs:LL:CC (std::panicking::r#try)\n-rustc_src/src/panic.rs:LL:CC (std::panic::catch_unwind)\n-rustc_src/src/rt.rs:LL:CC (std::rt::lang_start_internal::{closure#2})\n-rustc_src/src/panicking.rs:LL:CC (std::panicking::r#try::do_call)\n-rustc_src/src/panicking.rs:LL:CC (std::panicking::r#try)\n-rustc_src/src/panic.rs:LL:CC (std::panic::catch_unwind)\n-rustc_src/src/rt.rs:LL:CC (std::rt::lang_start_internal)\n-rustc_src/src/rt.rs:LL:CC (std::rt::lang_start)\n+$DIR/backtrace-api-v0.rs:LL:CC RUSTLIB/core/src/ops/function.rs:LL:CC (<fn() as std::ops::FnOnce<()>>::call_once - RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC (std::sys_common::backtrace::__rust_begin_short_backtrace)"}, {"sha": "7dc281af31ddc5fccc1009311eb06a1ee80a85b9", "filename": "tests/run-pass/backtrace-api-v1.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-pass%2Fbacktrace-api-v1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-pass%2Fbacktrace-api-v1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v1.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -2,17 +2,4 @@ $DIR/backtrace-api-v1.rs:LL:CC (func_d)\n $DIR/backtrace-api-v1.rs:LL:CC (func_c)\n $DIR/backtrace-api-v1.rs:LL:CC (func_b)\n $DIR/backtrace-api-v1.rs:LL:CC (func_a)\n-$DIR/backtrace-api-v1.rs:LL:CC (main)\n-rustc_src/src/ops/function.rs:LL:CC (<fn() as std::ops::FnOnce<()>>::call_once - shim(fn()))\n-rustc_src/src/sys_common/backtrace.rs:LL:CC (std::sys_common::backtrace::__rust_begin_short_backtrace)\n-rustc_src/src/rt.rs:LL:CC (std::rt::lang_start::{closure#0})\n-rustc_src/src/ops/function.rs:LL:CC (std::ops::function::impls::call_once)\n-rustc_src/src/panicking.rs:LL:CC (std::panicking::r#try::do_call)\n-rustc_src/src/panicking.rs:LL:CC (std::panicking::r#try)\n-rustc_src/src/panic.rs:LL:CC (std::panic::catch_unwind)\n-rustc_src/src/rt.rs:LL:CC (std::rt::lang_start_internal::{closure#2})\n-rustc_src/src/panicking.rs:LL:CC (std::panicking::r#try::do_call)\n-rustc_src/src/panicking.rs:LL:CC (std::panicking::r#try)\n-rustc_src/src/panic.rs:LL:CC (std::panic::catch_unwind)\n-rustc_src/src/rt.rs:LL:CC (std::rt::lang_start_internal)\n-rustc_src/src/rt.rs:LL:CC (std::rt::lang_start)\n+$DIR/backtrace-api-v1.rs:LL:CC RUSTLIB/core/src/ops/function.rs:LL:CC (<fn() as std::ops::FnOnce<()>>::call_once - RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC (std::sys_common::backtrace::__rust_begin_short_backtrace)"}, {"sha": "4596cadb958d8737aff9b8681756360fcecfd84e", "filename": "tests/run-pass/backtrace-std.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-pass%2Fbacktrace-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-pass%2Fbacktrace-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-std.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -9,28 +9,28 @@\n    4: main\n  at $DIR/backtrace-std.rs:LL:CC\n    5: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n- at rustc_src/src/ops/function.rs:LL:CC\n+ at RUSTLIB/core/src/ops/function.rs:LL:CC\n    6: std::sys_common::backtrace::__rust_begin_short_backtrace\n- at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+ at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    7: std::rt::lang_start::{closure#0}\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n    8: std::ops::function::impls::call_once\n- at rustc_src/src/ops/function.rs:LL:CC\n+ at RUSTLIB/core/src/ops/function.rs:LL:CC\n    9: std::panicking::r#try::do_call\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   10: std::panicking::r#try\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   11: std::panic::catch_unwind\n- at rustc_src/src/panic.rs:LL:CC\n+ at RUSTLIB/std/src/panic.rs:LL:CC\n   12: std::rt::lang_start_internal::{closure#2}\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n   13: std::panicking::r#try::do_call\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   14: std::panicking::r#try\n- at rustc_src/src/panicking.rs:LL:CC\n+ at RUSTLIB/std/src/panicking.rs:LL:CC\n   15: std::panic::catch_unwind\n- at rustc_src/src/panic.rs:LL:CC\n+ at RUSTLIB/std/src/panic.rs:LL:CC\n   16: std::rt::lang_start_internal\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC\n   17: std::rt::lang_start\n- at rustc_src/src/rt.rs:LL:CC\n+ at RUSTLIB/std/src/rt.rs:LL:CC"}, {"sha": "0ced5588cc12cfafadd7147906e7aba5439c0fe3", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47771d6b786e3f33b307c34e0d88a6a89e5da14c/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=47771d6b786e3f33b307c34e0d88a6a89e5da14c", "patch": "@@ -17,7 +17,7 @@ thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4'\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:LL:CC\n Caught panic message (&str): attempt to divide by zero\n-thread 'main' panicked at 'align_offset: align is not a power-of-two', rustc_src/src/ptr/const_ptr.rs:LL:CC\n+thread 'main' panicked at 'align_offset: align is not a power-of-two', RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n Caught panic message (&str): align_offset: align is not a power-of-two\n thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:LL:CC\n Caught panic message (&str): assertion failed: false"}]}