{"sha": "9668ae5eb8b169557a12d85e4088274780ef7d48", "node_id": "C_kwDOAAsO6NoAKDk2NjhhZTVlYjhiMTY5NTU3YTEyZDg1ZTQwODgyNzQ3ODBlZjdkNDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-12T07:13:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-12T07:13:25Z"}, "message": "Rollup merge of #108726 - est31:backticks_matchmaking_tidy, r=Nilstrieb\n\ntidy: enforce comment blocks to have an even number of backticks\n\nAfter PR #108694, most unmatched backticks in `compiler/` comments have been eliminated. This PR adds a tidy lint to ensure no new unmatched backticks are added, and either addresses the lint in the remaining instances it found, or allows it.\n\nVery often, backtick containing sections wrap around lines, for example:\n\n```Rust\n// This function takes a tuple `(Vec<String>,\n// Box<[u8]>)` and transforms it into `Vec<u8>`.\n```\n\nThe lint is implemented to work on top of blocks, counting each line with a `//` into a block, and counting if there are an odd or even number of backticks in the entire block, instead of looking at just a single line.", "tree": {"sha": "e2c25d42231cbac9972f05359cc11bb8449e9646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2c25d42231cbac9972f05359cc11bb8449e9646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9668ae5eb8b169557a12d85e4088274780ef7d48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDXuVCRBK7hj4Ov3rIwAAt1sIAIKzq0/eRHW3aEi0It+SDm0G\nWXxfwJ8coKgAOBhJvDuk2Y7d7KVAwSzbZ8JOu0k9kzA2fKd3tOsLwyNAL+BWoF8F\nJQxCQkIkG1QQzG5cgHbvyiqQ/Mm/qKKjH3isCm6iiyMWyt58X8iDiT1w6nICXqi7\n0ZmYHFDA1mQlwo9Om1Z2NFSd05DjEH3xh2ANeay9PRYTwZ2Po5d1SHJ0xyD6nJRZ\nZpGXff1xr+RLhsXmPrJIqe2/ws6h8XnWoGi6cfpD/NIIvuA46oN0vK878iDiGqA9\nAb/Sc5HuAG/kzBD6cifJ7YesQbMpLcQoNX/45PjnDRB8Q2L/ksThP/xBqcex3VQ=\n=BJ+1\n-----END PGP SIGNATURE-----\n", "payload": "tree e2c25d42231cbac9972f05359cc11bb8449e9646\nparent 501ad021b9a4fb2cd6a39e0302d22f169f6166b0\nparent b2aeb071370afeefceec4d21734e801837dd72e4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678605205 +0100\ncommitter GitHub <noreply@github.com> 1678605205 +0100\n\nRollup merge of #108726 - est31:backticks_matchmaking_tidy, r=Nilstrieb\n\ntidy: enforce comment blocks to have an even number of backticks\n\nAfter PR #108694, most unmatched backticks in `compiler/` comments have been eliminated. This PR adds a tidy lint to ensure no new unmatched backticks are added, and either addresses the lint in the remaining instances it found, or allows it.\n\nVery often, backtick containing sections wrap around lines, for example:\n\n```Rust\n// This function takes a tuple `(Vec<String>,\n// Box<[u8]>)` and transforms it into `Vec<u8>`.\n```\n\nThe lint is implemented to work on top of blocks, counting each line with a `//` into a block, and counting if there are an odd or even number of backticks in the entire block, instead of looking at just a single line.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9668ae5eb8b169557a12d85e4088274780ef7d48", "html_url": "https://github.com/rust-lang/rust/commit/9668ae5eb8b169557a12d85e4088274780ef7d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9668ae5eb8b169557a12d85e4088274780ef7d48/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "501ad021b9a4fb2cd6a39e0302d22f169f6166b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/501ad021b9a4fb2cd6a39e0302d22f169f6166b0", "html_url": "https://github.com/rust-lang/rust/commit/501ad021b9a4fb2cd6a39e0302d22f169f6166b0"}, {"sha": "b2aeb071370afeefceec4d21734e801837dd72e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2aeb071370afeefceec4d21734e801837dd72e4", "html_url": "https://github.com/rust-lang/rust/commit/b2aeb071370afeefceec4d21734e801837dd72e4"}], "stats": {"total": 90, "additions": 69, "deletions": 21}, "files": [{"sha": "6b3053fdfac7e81ca8f5efc57cf9b9f61b5aef7a", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -1052,6 +1052,7 @@ impl<'a> MethodDef<'a> {\n     ///         ::core::hash::Hash::hash(&{ self.y }, state)\n     ///     }\n     /// }\n+    /// ```\n     fn expand_struct_method_body<'b>(\n         &self,\n         cx: &mut ExtCtxt<'_>,"}, {"sha": "978141917c6b0cac9882ab22b0d0445084de4fd8", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -438,6 +438,7 @@ fn build_enum_variant_member_di_node<'ll, 'tcx>(\n ///         DW_TAG_structure_type            (type of variant 1)\n ///         DW_TAG_structure_type            (type of variant 2)\n ///         DW_TAG_structure_type            (type of variant 3)\n+/// ```\n struct VariantMemberInfo<'a, 'll> {\n     variant_index: VariantIdx,\n     variant_name: Cow<'a, str>,"}, {"sha": "b18e8758d712e60ef96f2279efd66ec9cce2c26e", "filename": "compiler/rustc_error_codes/src/error_codes/E0368.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -41,7 +41,7 @@ impl Add for Foo {\n \n fn main() {\n     let mut x: Foo = Foo(5);\n-    x += Foo(7); // error, `+= cannot be applied to the type `Foo`\n+    x += Foo(7); // error, `+=` cannot be applied to the type `Foo`\n }\n ```\n "}, {"sha": "84d55d524267ebbdf9130a356dd6cd8fde8c763b", "filename": "compiler/rustc_error_codes/src/error_codes/E0710.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -3,14 +3,14 @@ An unknown tool name was found in a scoped lint.\n Erroneous code examples:\n \n ```compile_fail,E0710\n-#[allow(clipp::filter_map)] // error!`\n+#[allow(clipp::filter_map)] // error!\n fn main() {\n     // business logic\n }\n ```\n \n ```compile_fail,E0710\n-#[warn(clipp::filter_map)] // error!`\n+#[warn(clipp::filter_map)] // error!\n fn main() {\n     // business logic\n }"}, {"sha": "773ac0e40c571c433d9c4fbb32c05593735c48c6", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -398,7 +398,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// Here:\n     /// - E would be `fn(&u32) -> &u32`.\n-    /// - S would be `fn(&u32) ->\n+    /// - S would be `fn(&u32) -> ?T`\n     /// - E' is `&'!0 u32 -> &'!0 u32`\n     /// - S' is `&'?0 u32 -> ?T`\n     ///"}, {"sha": "22c1e3871175e8782a946e7c102c7f7dedf275dc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let (mention_influencer, influencer_point) =\n             if sup_origin.span().overlaps(param.param_ty_span) {\n                 // Account for `async fn` like in `async-await/issues/issue-62097.rs`.\n-                // The desugaring of `async `fn`s causes `sup_origin` and `param` to point at the same\n+                // The desugaring of `async fn`s causes `sup_origin` and `param` to point at the same\n                 // place (but with different `ctxt`, hence `overlaps` instead of `==` above).\n                 //\n                 // This avoids the following:"}, {"sha": "7e51953599d5a17fdf7b8a27669bd3086a5029f3", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -123,6 +123,7 @@ fn dump_matched_mir_node<'tcx, F>(\n         // see notes on #41697 above\n         let def_path =\n             ty::print::with_forced_impl_filename_line!(tcx.def_path_str(body.source.def_id()));\n+        // ignore-tidy-odd-backticks the literal below is fine\n         write!(file, \"// MIR for `{}\", def_path)?;\n         match body.source.promoted {\n             None => write!(file, \"`\")?,"}, {"sha": "3fb8a6db2d27a61029ec7ba4255334a2a6751986", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -1886,6 +1886,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // let place = Foo::new();\n         // match place { Foo { .. } if { let tmp1 = &place; inspect(*tmp1) }\n         //     => { let tmp2 = place; feed(tmp2) }, ... }\n+        // ```\n         //\n         // And an input like:\n         //"}, {"sha": "72b1b35e79b155597c7b3ef0b17034d9c8d82107", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -248,7 +248,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ///\n     /// To deal with this, we first try to normalize the self type and add the candidates for the normalized\n     /// self type to the list of candidates in case that succeeds. Note that we can't just eagerly return in\n-    /// this case as projections as self types add `\n+    /// this case as projections as self types add\n+    // FIXME complete the unfinished sentence above\n     fn assemble_candidates_after_normalizing_self_ty<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,"}, {"sha": "c93c26cc04b9e5d29b80b70a9c86237d956f64c3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -2220,7 +2220,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // - `BuiltinDerivedObligation` with a generator witness (A)\n         // - `BuiltinDerivedObligation` with a generator (A)\n         // - `BuiltinDerivedObligation` with `impl std::future::Future` (A)\n-        // - `BindingObligation` with `impl_send (Send requirement)\n+        // - `BindingObligation` with `impl_send` (Send requirement)\n         //\n         // The first obligation in the chain is the most useful and has the generator that captured\n         // the type. The last generator (`outer_generator` below) has information about where the"}, {"sha": "3a053d4c6a997da7434fb893353cafac17831cfb", "filename": "compiler/rustc_type_ir/src/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -18,7 +18,7 @@\n //!     It defines a \"skeleton\" of how they should be folded.\n //! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n //!   and defines the folding \"skeleton\" for these types.\n-//! - `TypeFolder`/`FallibleTypeFolder. One of these is implemented for each\n+//! - `TypeFolder`/`FallibleTypeFolder`. One of these is implemented for each\n //!   folder. This defines how types of interest are folded.\n //!\n //! This means each fold is a mixture of (a) generic folding operations, and (b)"}, {"sha": "75a4586cb7f1ce5f85b79d80e6a8e4999d3c7217", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9668ae5eb8b169557a12d85e4088274780ef7d48/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ae5eb8b169557a12d85e4088274780ef7d48/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=9668ae5eb8b169557a12d85e4088274780ef7d48", "patch": "@@ -171,9 +171,9 @@ fn contains_ignore_directive(can_contain: bool, contents: &str, check: &str) ->\n }\n \n macro_rules! suppressible_tidy_err {\n-    ($err:ident, $skip:ident, $msg:expr) => {\n+    ($err:ident, $skip:ident, $msg:literal) => {\n         if let Directive::Deny = $skip {\n-            $err($msg);\n+            $err(&format!($msg));\n         } else {\n             $skip = Directive::Ignore(true);\n         }\n@@ -300,10 +300,13 @@ pub fn check(path: &Path, bad: &mut bool) {\n             contains_ignore_directive(can_contain, &contents, \"leading-newlines\");\n         let mut skip_copyright = contains_ignore_directive(can_contain, &contents, \"copyright\");\n         let mut skip_dbg = contains_ignore_directive(can_contain, &contents, \"dbg\");\n+        let mut skip_odd_backticks =\n+            contains_ignore_directive(can_contain, &contents, \"odd-backticks\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n         let mut lines = 0;\n         let mut last_safety_comment = false;\n+        let mut comment_block: Option<(usize, usize)> = None;\n         let is_test = file.components().any(|c| c.as_os_str() == \"tests\");\n         // scanning the whole file for multiple needles at once is more efficient than\n         // executing lines times needles separate searches.\n@@ -351,7 +354,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 suppressible_tidy_err!(\n                     err,\n                     skip_line_length,\n-                    &format!(\"line longer than {max_columns} chars\")\n+                    \"line longer than {max_columns} chars\"\n                 );\n             }\n             if !is_style_file && line.contains('\\t') {\n@@ -415,15 +418,55 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n             // For now only enforce in compiler\n             let is_compiler = || file.components().any(|c| c.as_os_str() == \"compiler\");\n-            if is_compiler()\n-                && line.contains(\"//\")\n-                && line\n-                    .chars()\n-                    .collect::<Vec<_>>()\n-                    .windows(4)\n-                    .any(|cs| matches!(cs, ['.', ' ', ' ', last] if last.is_alphabetic()))\n-            {\n-                err(DOUBLE_SPACE_AFTER_DOT)\n+\n+            if is_compiler() {\n+                if line.contains(\"//\")\n+                    && line\n+                        .chars()\n+                        .collect::<Vec<_>>()\n+                        .windows(4)\n+                        .any(|cs| matches!(cs, ['.', ' ', ' ', last] if last.is_alphabetic()))\n+                {\n+                    err(DOUBLE_SPACE_AFTER_DOT)\n+                }\n+\n+                if filename.ends_with(\".ftl\") {\n+                    let line_backticks = trimmed.chars().filter(|ch| *ch == '`').count();\n+                    if line_backticks % 2 == 1 {\n+                        suppressible_tidy_err!(err, skip_odd_backticks, \"odd number of backticks\");\n+                    }\n+                } else if trimmed.contains(\"//\") {\n+                    let (start_line, mut backtick_count) = comment_block.unwrap_or((i + 1, 0));\n+                    let line_backticks = trimmed.chars().filter(|ch| *ch == '`').count();\n+                    let comment_text = trimmed.split(\"//\").nth(1).unwrap();\n+                    // This check ensures that we don't lint for code that has `//` in a string literal\n+                    if line_backticks % 2 == 1 {\n+                        backtick_count += comment_text.chars().filter(|ch| *ch == '`').count();\n+                    }\n+                    comment_block = Some((start_line, backtick_count));\n+                } else {\n+                    if let Some((start_line, backtick_count)) = comment_block.take() {\n+                        if backtick_count % 2 == 1 {\n+                            let mut err = |msg: &str| {\n+                                tidy_error!(bad, \"{}:{start_line}: {msg}\", file.display());\n+                            };\n+                            let block_len = (i + 1) - start_line;\n+                            if block_len == 1 {\n+                                suppressible_tidy_err!(\n+                                    err,\n+                                    skip_odd_backticks,\n+                                    \"comment with odd number of backticks\"\n+                                );\n+                            } else {\n+                                suppressible_tidy_err!(\n+                                    err,\n+                                    skip_odd_backticks,\n+                                    \"{block_len}-line comment block with odd number of backticks\"\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n             }\n         }\n         if leading_new_lines {\n@@ -441,7 +484,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             n => suppressible_tidy_err!(\n                 err,\n                 skip_trailing_newlines,\n-                &format!(\"too many trailing newlines ({n})\")\n+                \"too many trailing newlines ({n})\"\n             ),\n         };\n         if lines > LINES {"}]}