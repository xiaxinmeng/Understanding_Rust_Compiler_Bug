{"sha": "0462d092d27bf72a7c66303571d3852d596a81e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NjJkMDkyZDI3YmY3MmE3YzY2MzAzNTcxZDM4NTJkNTk2YTgxZTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-30T08:40:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:14Z"}, "message": "Figure out const propgatable locals in a single pass", "tree": {"sha": "2a35fab5aea2dc826f5310eb3a41c4ac9b26b7d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a35fab5aea2dc826f5310eb3a41c4ac9b26b7d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0462d092d27bf72a7c66303571d3852d596a81e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53YACgkQpp+NIls6\n19kTog/+MBTrx/H9kapNZrdMddN2optF/NHwjNE2t7yM/xKzF27Ap/cIFc7oj08l\nSHxA0Vm2ilvgrVsw3xgZSbY925G2ayjECVD6YMMdHBSQB9PKafKTENPp4QRTgUdi\nohCzXEX3hxnue+h7v9W797YOqTsKSKxIPw8KwieJaA0VhlNsJE846H52Nm6goa7S\nE+8JoDW4XiJQOexoXtRWYvjN0cgxwvQtbXm5tqVhjyS5TCufK1tyUF4aAfoiL+2X\nBbcciG9ED9/Qfy73zE7r6GgXPVytnbWVUcKtIX4butRrx7YKopOhoJeHHfCHxESn\n/YtPtLYCSmF0YCiZga1mI4SwhPlWchS5kxkm9mYIjmxDfmadCzLYJ7VqCqBWa6ET\ne61UBHPm0gzaf+D15ae5FcWcWt12dg/zkEyT2pVtSPkWNP6vRw/6OStsp4xCTp5s\nzlIwlsOKJG7Ip8nZtPyEZ5Q7JOCJuw+Dhb+lV9HO0UZbM0UqzK0IV9OHuiSheAeM\n7E1D/uWtm5Mdsr9RGpo07bGK55+ibTzSOmJwQlMHPgVj/xWENuBQ5veJCq2iJVWD\n3UVMJV6u1MMDq2Z0mZ9bxAp1aO81lDd9UTIhli4yfvXAf8OFP1mi1z2VLGAh6WHd\nu2YhMRfuw9obyRJ3oLK25zakZ//m/tMpWwLkddTsSL5mxMpZ5EU=\n=x31d\n-----END PGP SIGNATURE-----", "payload": "tree 2a35fab5aea2dc826f5310eb3a41c4ac9b26b7d6\nparent 16d560fd993d5cd68423159d32d9f6b454349763\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517301646 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494454 +0100\n\nFigure out const propgatable locals in a single pass\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0462d092d27bf72a7c66303571d3852d596a81e9", "html_url": "https://github.com/rust-lang/rust/commit/0462d092d27bf72a7c66303571d3852d596a81e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0462d092d27bf72a7c66303571d3852d596a81e9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d560fd993d5cd68423159d32d9f6b454349763", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d560fd993d5cd68423159d32d9f6b454349763", "html_url": "https://github.com/rust-lang/rust/commit/16d560fd993d5cd68423159d32d9f6b454349763"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "51ac8b2c61a20959f63d723015171a3c855d956c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0462d092d27bf72a7c66303571d3852d596a81e9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0462d092d27bf72a7c66303571d3852d596a81e9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=0462d092d27bf72a7c66303571d3852d596a81e9", "patch": "@@ -55,6 +55,7 @@ struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     source: MirSource,\n     places: IndexVec<Local, Option<Const<'tcx>>>,\n+    can_const_prop: IndexVec<Local, bool>,\n }\n \n impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n@@ -67,6 +68,7 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n             mir,\n             tcx,\n             source,\n+            can_const_prop: CanConstProp::check(mir),\n             places: IndexVec::from_elem(None, &mir.local_decls),\n         }\n     }\n@@ -271,33 +273,34 @@ fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n struct CanConstProp {\n-    local: Local,\n-    can_const_prop: bool,\n+    can_const_prop: IndexVec<Local, bool>,\n     // false at the beginning, once set, there are not allowed to be any more assignments\n-    found_assignment: bool,\n+    found_assignment: IndexVec<Local, bool>,\n }\n \n impl CanConstProp {\n     /// returns true if `local` can be propagated\n-    fn check<'tcx>(local: Local, mir: &Mir<'tcx>) -> bool {\n+    fn check<'tcx>(mir: &Mir<'tcx>) -> IndexVec<Local, bool> {\n         let mut cpv = CanConstProp {\n-            local,\n-            can_const_prop: true,\n-            found_assignment: false,\n+            can_const_prop: IndexVec::from_elem(true, &mir.local_decls),\n+            found_assignment: IndexVec::from_elem(false, &mir.local_decls),\n         };\n+        for (local, val) in cpv.can_const_prop.iter_enumerated_mut() {\n+            *val = mir.local_kind(local) == LocalKind::Temp;\n+        }\n         cpv.visit_mir(mir);\n         cpv.can_const_prop\n     }\n+}\n \n-    fn is_our_local(&mut self, mut place: &Place) -> bool {\n-        while let Place::Projection(ref proj) = place {\n-            place = &proj.base;\n-        }\n-        if let Place::Local(local) = *place {\n-            local == self.local\n-        } else {\n-            false\n-        }\n+fn place_to_local(mut place: &Place) -> Option<Local> {\n+    while let Place::Projection(ref proj) = place {\n+        place = &proj.base;\n+    }\n+    if let Place::Local(local) = *place {\n+        Some(local)\n+    } else {\n+        None\n     }\n }\n \n@@ -312,21 +315,21 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n         match statement.kind {\n             StatementKind::SetDiscriminant { ref place, .. } |\n             StatementKind::Assign(ref place, _) => {\n-                if self.is_our_local(place) {\n-                    if self.found_assignment {\n-                        self.can_const_prop = false;\n+                if let Some(local) = place_to_local(place) {\n+                    if self.found_assignment[local] {\n+                        self.can_const_prop[local] = false;\n                     } else {\n-                        self.found_assignment = true\n+                        self.found_assignment[local] = true\n                     }\n                 }\n             },\n             StatementKind::InlineAsm { ref outputs, .. } => {\n                 for place in outputs {\n-                    if self.is_our_local(place) {\n-                        if self.found_assignment {\n-                            self.can_const_prop = false;\n+                    if let Some(local) = place_to_local(place) {\n+                        if self.found_assignment[local] {\n+                            self.can_const_prop[local] = false;\n                         } else {\n-                            self.found_assignment = true\n+                            self.found_assignment[local] = true\n                         }\n                         return;\n                     }\n@@ -338,8 +341,8 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n         self.super_rvalue(rvalue, location);\n         if let Rvalue::Ref(_, _, ref place) = *rvalue {\n-            if self.is_our_local(place) {\n-                self.can_const_prop = false;\n+            if let Some(local) = place_to_local(place) {\n+                self.can_const_prop[local] = false;\n             }\n         }\n     }\n@@ -369,8 +372,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n                 .to_ty(self.tcx);\n             if let Some(value) = self.const_prop(rval, place_ty, statement.source_info) {\n                 if let Place::Local(local) = *place {\n-                    if self.mir.local_kind(local) == LocalKind::Temp\n-                        && CanConstProp::check(local, self.mir) {\n+                    if self.can_const_prop[local] {\n                         trace!(\"storing {:?} to {:?}\", value, local);\n                         assert!(self.places[local].is_none());\n                         self.places[local] = Some(value);"}, {"sha": "75df349de41ee9d7075a90c36f407bd3e9157854", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0462d092d27bf72a7c66303571d3852d596a81e9/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0462d092d27bf72a7c66303571d3852d596a81e9/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=0462d092d27bf72a7c66303571d3852d596a81e9", "patch": "@@ -12,6 +12,7 @@ use llvm::ValueRef;\n use rustc::middle::const_val::ConstEvalErr;\n use rustc::mir;\n use rustc::mir::interpret::Value as MiriValue;\n+use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use rustc_data_structures::indexed_vec::Idx;\n "}]}